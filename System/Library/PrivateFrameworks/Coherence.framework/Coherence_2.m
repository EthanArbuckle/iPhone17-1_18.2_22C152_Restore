uint64_t SharedTagged_4.tagged4.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  __n128 v11;
  _UNKNOWN **v12;
  uint64_t v13;

  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  v12 = &protocol witness table for Int;
  v13 = MEMORY[0x1E4FBB560];
  v4 = type metadata accessor for CRExtensible();
  result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 3)
  {
    v6 = *v1;
    v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    v9 = v11.n128_u64[1];
    v8 = v11.n128_u64[0];
    result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    v8 = 0;
    v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_4.unknown.getter@<X0>(long long *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] >= 4)
  {
    uint64_t v7 = *v1;
    unint64_t v8 = v2[1];
    v10.n128_u64[0] = v7;
    v10.n128_u64[1] = v8;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    __n128 v9 = v11;
    uint64_t result = sub_1C3F7E324(v7, v8);
    long long v6 = (__int128)v9;
  }
  else
  {
    long long v6 = xmmword_1C449BDD0;
  }
  *a1 = v6;
  return result;
}

uint64_t SharedTagged_4.any.getter@<X0>(__n128 *a1@<X8>)
{
  v2 = v1;
  v8.n128_u64[0] = swift_getAssociatedTypeWitness();
  v8.n128_u64[1] = swift_getAssociatedConformanceWitness();
  __n128 v9 = &protocol witness table for Int;
  uint64_t v10 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  uint64_t v5 = *v1;
  unint64_t v6 = v2[1];
  v8.n128_u64[0] = v5;
  v8.n128_u64[1] = v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  a1[1].n128_u64[1] = type metadata accessor for Ref();
  a1[2].n128_u64[0] = swift_getWitnessTable();
  Ref.init(id:)(&v8, a1);
  return sub_1C3F7E324(v5, v6);
}

uint64_t SharedTagged_4.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  uint64_t v45 = a1;
  uint64_t v48 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v44 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v38 - v6);
  uint64_t v40 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v40);
  v43 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v38 - v7);
  uint64_t v39 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v39);
  v42 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v38 - v8);
  uint64_t v9 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v9);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v10);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v50.n128_u64[0] = v11;
  v50.n128_u64[1] = AssociatedConformanceWitness;
  v51 = &protocol witness table for Int;
  uint64_t v52 = MEMORY[0x1E4FBB560];
  uint64_t v13 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v13, (uint64_t)&v53);
  switch(v53)
  {
    case 0:
      v14 = *v4;
      v43 = v4[1];
      v44 = v14;
      v49.n128_u64[0] = (unint64_t)v14;
      v49.n128_u64[1] = (unint64_t)v43;
      uint64_t v15 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v49, &v50);
      __n128 v16 = v50;
      __n128 v49 = v50;
      uint64_t v17 = v47;
      v42 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 8);
      sub_1C3F7E324((uint64_t)v44, (unint64_t)v43);
      v42(&v49, v10, v15, v46, v17);
      sub_1C3F7E2CC(v16.n128_i64[0], v16.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 1:
      v23 = *v4;
      v43 = v4[1];
      v44 = v23;
      v49.n128_u64[0] = (unint64_t)v23;
      v49.n128_u64[1] = (unint64_t)v43;
      uint64_t v24 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v49, &v50);
      __n128 v25 = v50;
      __n128 v49 = v50;
      uint64_t v26 = v47;
      v42 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 8);
      sub_1C3F7E324((uint64_t)v44, (unint64_t)v43);
      v42(&v49, v9, v24, v46, v26);
      sub_1C3F7E2CC(v25.n128_i64[0], v25.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 2:
      unint64_t v27 = (unint64_t)v4[1];
      v44 = *v5;
      v49.n128_u64[0] = (unint64_t)v44;
      v49.n128_u64[1] = v27;
      uint64_t v28 = v39;
      uint64_t v29 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v49, &v50);
      __n128 v30 = v50;
      __n128 v49 = v50;
      uint64_t v31 = v47;
      v43 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 8);
      sub_1C3F7E324((uint64_t)v44, v27);
      v43(&v49, v28, v29, v46, v31);
      sub_1C3F7E2CC(v30.n128_i64[0], v30.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 3:
      unint64_t v32 = (unint64_t)v4[1];
      v44 = *v5;
      v49.n128_u64[0] = (unint64_t)v44;
      v49.n128_u64[1] = v32;
      uint64_t v33 = v40;
      uint64_t v34 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v49, &v50);
      __n128 v35 = v50;
      __n128 v49 = v50;
      uint64_t v36 = v47;
      v42 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 8);
      sub_1C3F7E324((uint64_t)v44, v32);
      v42(&v49, v33, v34, v46, v36);
      sub_1C3F7E2CC(v35.n128_i64[0], v35.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    default:
      unint64_t v18 = (unint64_t)v4[1];
      v43 = *v5;
      v49.n128_u64[0] = (unint64_t)v43;
      v49.n128_u64[1] = v18;
      uint64_t v19 = AssociatedTypeWitness;
      uint64_t v20 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v49, &v50);
      __n128 v21 = v50;
      __n128 v49 = v50;
      uint64_t v22 = v47;
      v42 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 8);
      sub_1C3F7E324((uint64_t)v43, v18);
      v42(&v49, v19, v20, v46, v22);
      sub_1C3F7E2CC(v21.n128_i64[0], v21.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
  }
  return swift_dynamicCast();
}

uint64_t sub_1C408F20C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v3 = v2;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v26 = (char *)v22 - v4;
  uint64_t v25 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v25);
  uint64_t v24 = (char *)v22 - v5;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v23);
  v22[1] = (char *)v22 - v6;
  uint64_t v7 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v7);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v8);
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v31.n128_u64[0] = v9;
  v31.n128_u64[1] = AssociatedConformanceWitness;
  unint64_t v32 = &protocol witness table for Int;
  uint64_t v33 = MEMORY[0x1E4FBB560];
  uint64_t v11 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v11, (uint64_t)&v34);
  switch(v34)
  {
    case 0:
      unint64_t v13 = v2[1];
      v30.n128_u64[0] = *v3;
      uint64_t v12 = v30.n128_u64[0];
      v30.n128_u64[1] = v13;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v30, &v31);
      __n128 v14 = v31;
      __n128 v30 = v31;
      sub_1C3F7E324(v12, v13);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v14.n128_i64[0], v14.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 1:
      unint64_t v16 = v2[1];
      v30.n128_u64[0] = *v3;
      uint64_t v15 = v30.n128_u64[0];
      v30.n128_u64[1] = v16;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v30, &v31);
      __n128 v17 = v31;
      __n128 v30 = v31;
      sub_1C3F7E324(v15, v16);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v17.n128_i64[0], v17.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    default:
      unint64_t v19 = v2[1];
      v30.n128_u64[0] = *v3;
      uint64_t v18 = v30.n128_u64[0];
      v30.n128_u64[1] = v19;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v30, &v31);
      __n128 v20 = v31;
      __n128 v30 = v31;
      sub_1C3F7E324(v18, v19);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v20.n128_i64[0], v20.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
  }
  return swift_dynamicCast();
}

uint64_t sub_1C408F818(uint64_t a1, uint64_t a2)
{
  v3 = v2;
  uint64_t v68 = a2;
  uint64_t v69 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v63 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v64 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v62 = (char *)&v54 - v5;
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v60 = *(void *)(v6 - 8);
  uint64_t v61 = v6;
  MEMORY[0x1F4188790](v6);
  v59 = (char *)&v54 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v57 = *(void *)(v8 - 8);
  uint64_t v58 = v8;
  MEMORY[0x1F4188790](v8);
  v56 = (char *)&v54 - v9;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v54 - v11;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v54 - v14;
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v66 = *(void *)(v16 - 8);
  uint64_t v67 = v16;
  MEMORY[0x1F4188790](v16);
  v65 = (char *)&v54 - v17;
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v71.n128_u64[0] = v18;
  v71.n128_u64[1] = AssociatedConformanceWitness;
  v72 = &protocol witness table for Int;
  uint64_t v73 = MEMORY[0x1E4FBB560];
  uint64_t v20 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v20, (uint64_t)&v74);
  switch(v74)
  {
    case 0:
      unint64_t v22 = v2[1];
      v70.n128_u64[0] = *v3;
      uint64_t v21 = v70.n128_u64[0];
      v70.n128_u64[1] = v22;
      swift_getAssociatedConformanceWitness();
      __n128 v23 = Ref.init(id:)(&v70, &v71);
      unint64_t v24 = v71.n128_u64[1];
      unint64_t v64 = v71.n128_u64[0];
      uint64_t v25 = v66;
      uint64_t v26 = v69;
      uint64_t v27 = v67;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v66 + 16))(v65, v69, v67, v23);
      sub_1C3F7E324(v21, v22);
      swift_dynamicCast();
      v70.n128_u64[0] = v64;
      v70.n128_u64[1] = v24;
      sub_1C407C610((uint64_t)v15, (uint64_t)&v70, v13);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v15, v13);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
    case 1:
      unint64_t v40 = v2[1];
      v70.n128_u64[0] = *v3;
      uint64_t v39 = v70.n128_u64[0];
      v70.n128_u64[1] = v40;
      swift_getAssociatedConformanceWitness();
      __n128 v41 = Ref.init(id:)(&v70, &v71);
      unint64_t v42 = v71.n128_u64[1];
      unint64_t v64 = v71.n128_u64[0];
      uint64_t v43 = v66;
      uint64_t v44 = v69;
      uint64_t v45 = v67;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v66 + 16))(v65, v69, v67, v41);
      sub_1C3F7E324(v39, v40);
      swift_dynamicCast();
      v70.n128_u64[0] = v64;
      v70.n128_u64[1] = v42;
      sub_1C407C610((uint64_t)v12, (uint64_t)&v70, v10);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v12, v10);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v44, v45);
    case 2:
      unint64_t v47 = v2[1];
      v70.n128_u64[0] = *v3;
      uint64_t v46 = v70.n128_u64[0];
      v70.n128_u64[1] = v47;
      uint64_t v31 = v58;
      swift_getAssociatedConformanceWitness();
      __n128 v48 = Ref.init(id:)(&v70, &v71);
      __n128 v49 = v71;
      uint64_t v34 = v66;
      uint64_t v35 = v69;
      uint64_t v36 = v67;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v66 + 16))(v65, v69, v67, v48);
      sub_1C3F7E324(v46, v47);
      uint64_t v37 = (uint64_t)v56;
      swift_dynamicCast();
      __n128 v70 = v49;
      sub_1C407C610(v37, (uint64_t)&v70, v31);
      uint64_t v38 = v57;
      goto LABEL_7;
    case 3:
      unint64_t v51 = v2[1];
      v70.n128_u64[0] = *v3;
      uint64_t v50 = v70.n128_u64[0];
      v70.n128_u64[1] = v51;
      uint64_t v31 = v61;
      swift_getAssociatedConformanceWitness();
      __n128 v52 = Ref.init(id:)(&v70, &v71);
      __n128 v53 = v71;
      uint64_t v34 = v66;
      uint64_t v35 = v69;
      uint64_t v36 = v67;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v66 + 16))(v65, v69, v67, v52);
      sub_1C3F7E324(v50, v51);
      uint64_t v37 = (uint64_t)v59;
      swift_dynamicCast();
      __n128 v70 = v53;
      sub_1C407C610(v37, (uint64_t)&v70, v31);
      uint64_t v38 = v60;
      goto LABEL_7;
    default:
      unint64_t v30 = v2[1];
      v70.n128_u64[0] = *v3;
      uint64_t v29 = v70.n128_u64[0];
      v70.n128_u64[1] = v30;
      uint64_t v31 = v64;
      swift_getAssociatedConformanceWitness();
      __n128 v32 = Ref.init(id:)(&v70, &v71);
      __n128 v33 = v71;
      uint64_t v34 = v66;
      uint64_t v35 = v69;
      uint64_t v36 = v67;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v66 + 16))(v65, v69, v67, v32);
      sub_1C3F7E324(v29, v30);
      uint64_t v37 = (uint64_t)v62;
      swift_dynamicCast();
      __n128 v70 = v33;
      sub_1C407C610(v37, (uint64_t)&v70, v31);
      uint64_t v38 = v63;
LABEL_7:
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v31);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v35, v36);
  }
}

uint64_t SharedTagged_4.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C408F20C);
}

uint64_t sub_1C40900DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for SharedTagged_4();
  swift_retain();
  sub_1C40F1E7C(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_4, (uint64_t)&associated type descriptor for Tagged_4.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C408F818);
  return swift_release();
}

uint64_t SharedTagged_4.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1E7C(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_4, (uint64_t)&associated type descriptor for Tagged_4.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C408F818);
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
  return v5(a1, AssociatedTypeWitness);
}

void (*SharedTagged_4.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_4.subscript.getter(a2, a3);
  return sub_1C4090320;
}

void sub_1C4090320(uint64_t **a1, char a2)
{
}

uint64_t SharedTagged_4.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C408F20C);
}

uint64_t SharedTagged_4.visitReferences(_:)(void *a1)
{
  v14.n128_u64[0] = swift_getAssociatedTypeWitness();
  v14.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v15 = &protocol witness table for Int;
  uint64_t v16 = MEMORY[0x1E4FBB560];
  uint64_t v3 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v3, (uint64_t)&v17);
  uint64_t v4 = a1[4];
  uint64_t v12 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  unint64_t v5 = v1[1];
  v13.n128_u64[0] = *v1;
  uint64_t v6 = v13.n128_u64[0];
  v13.n128_u64[1] = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v13, &v14);
  __n128 v9 = v14;
  __n128 v13 = v14;
  size_t v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1C3F7E324(v6, v5);
  v10(&v13, AssociatedTypeWitness, AssociatedConformanceWitness, v12, v4);
  return sub_1C3F7E2CC(v9.n128_i64[0], v9.n128_u64[1]);
}

uint64_t SharedTagged_4.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))SharedTagged_4.init(_:id:), a3);
}

uint64_t SharedTagged_4.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))SharedTagged_4.copy(renamingReferences:));
}

uint64_t SharedTagged_4.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t static SharedTagged_4.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_4);
}

uint64_t SharedTagged_4.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))SharedTagged_4.hash(into:));
}

uint64_t sub_1C40906BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))SharedTagged_4.hash(into:));
}

uint64_t sub_1C40906D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_4.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t SharedTagged_4.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C4090704@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return SharedTagged_4.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t SharedTagged_4.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40CCEA8(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_4, 0, a4);
}

uint64_t sub_1C4090754(uint64_t a1, uint64_t a2)
{
  return SharedTagged_4.encode(to:)(a1, a2);
}

uint64_t SharedTagged_4.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C4086E34(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_4, (uint64_t)&associated type descriptor for Tagged_4.Enum, (uint64_t)&associated conformance descriptor for Tagged_4.Tagged_4.Enum: RawRepresentable);
}

uint64_t (*SharedTagged_5.id.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_5.tag.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C40EA434(a1, a2);
}

uint64_t SharedTagged_5.tag.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C40EA528(a1, a2);
}

uint64_t (*SharedTagged_5.tag.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_5.init(_:identity:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))SharedTagged_5.init(_:id:));
}

{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))SharedTagged_5.init(_:id:));
}

uint64_t SharedTagged_5.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1C40EA66C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_5, a5);
}

{
  return sub_1C40EA7CC(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_5, a5);
}

uint64_t SharedTagged_5.init<A>(_:_:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  unint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 0;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_5();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  unint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 1;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_5();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  unint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 2;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_5();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  unint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 3;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_5();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  unint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 4;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_5();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

uint64_t SharedTagged_5.init<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 0;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_5();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 1;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_5();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 2;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_5();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 3;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_5();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 4;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_5();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

uint64_t SharedTagged_5.init<A>(_:_:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X8>)
{
  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  unint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 0;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_5();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  unint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 1;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_5();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  unint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 2;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_5();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  unint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 3;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_5();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  unint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 4;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_5();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

uint64_t SharedTagged_5.init(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for WeakTagged_5() + 36);
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for SharedTagged_5() + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v4, v3, v5);
}

uint64_t SharedTagged_5.tagged1.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  else
  {
    uint64_t v8 = *v1;
    unint64_t v9 = v2[1];
    v10.n128_u64[0] = v8;
    v10.n128_u64[1] = v9;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v6 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t SharedTagged_5.tagged2.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 1)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_5.tagged3.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 2)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_5.tagged4.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 3)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_5.tagged5.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 4)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_5.unknown.getter@<X0>(long long *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] >= 5)
  {
    uint64_t v7 = *v1;
    unint64_t v8 = v2[1];
    v10.n128_u64[0] = v7;
    v10.n128_u64[1] = v8;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    __n128 v9 = v11;
    uint64_t result = sub_1C3F7E324(v7, v8);
    long long v6 = (__int128)v9;
  }
  else
  {
    long long v6 = xmmword_1C449BDD0;
  }
  *a1 = v6;
  return result;
}

uint64_t SharedTagged_5.any.getter@<X0>(__n128 *a1@<X8>)
{
  v2 = v1;
  v8.n128_u64[0] = swift_getAssociatedTypeWitness();
  v8.n128_u64[1] = swift_getAssociatedConformanceWitness();
  __n128 v9 = &protocol witness table for Int;
  uint64_t v10 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  uint64_t v5 = *v1;
  unint64_t v6 = v2[1];
  v8.n128_u64[0] = v5;
  v8.n128_u64[1] = v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  a1[1].n128_u64[1] = type metadata accessor for Ref();
  a1[2].n128_u64[0] = swift_getWitnessTable();
  Ref.init(id:)(&v8, a1);
  return sub_1C3F7E324(v5, v6);
}

uint64_t SharedTagged_5.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v53 = a2;
  uint64_t v54 = a3;
  uint64_t v52 = a1;
  uint64_t v55 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v51 = (uint64_t *)((char *)&v44 - v6);
  uint64_t v46 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v46);
  uint64_t v50 = (uint64_t *)((char *)&v44 - v7);
  uint64_t v45 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v45);
  __n128 v49 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v44 - v8);
  uint64_t v44 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v44);
  __n128 v48 = (char *)&v44 - v9;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v10);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v11);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v57.n128_u64[0] = v12;
  v57.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v58 = &protocol witness table for Int;
  uint64_t v59 = MEMORY[0x1E4FBB560];
  uint64_t v14 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v14, (uint64_t)&v60);
  switch(v60)
  {
    case 0:
      uint64_t v15 = *v4;
      uint64_t v50 = v4[1];
      unint64_t v51 = v15;
      v56.n128_u64[0] = (unint64_t)v15;
      v56.n128_u64[1] = (unint64_t)v50;
      uint64_t v16 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v56, &v57);
      __n128 v17 = v57;
      __n128 v56 = v57;
      uint64_t v18 = v54;
      __n128 v49 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 8);
      sub_1C3F7E324((uint64_t)v51, (unint64_t)v50);
      v49(&v56, v11, v16, v53, v18);
      sub_1C3F7E2CC(v17.n128_i64[0], v17.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 1:
      long long v24 = *v4;
      uint64_t v50 = v4[1];
      unint64_t v51 = v24;
      v56.n128_u64[0] = (unint64_t)v24;
      v56.n128_u64[1] = (unint64_t)v50;
      uint64_t v25 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v56, &v57);
      __n128 v26 = v57;
      __n128 v56 = v57;
      uint64_t v27 = v54;
      __n128 v49 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 8);
      sub_1C3F7E324((uint64_t)v51, (unint64_t)v50);
      v49(&v56, v10, v25, v53, v27);
      sub_1C3F7E2CC(v26.n128_i64[0], v26.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 2:
      unint64_t v28 = (unint64_t)v4[1];
      unint64_t v51 = *v5;
      v56.n128_u64[0] = (unint64_t)v51;
      v56.n128_u64[1] = v28;
      uint64_t v29 = v44;
      uint64_t v30 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v56, &v57);
      __n128 v31 = v57;
      __n128 v56 = v57;
      uint64_t v32 = v54;
      uint64_t v50 = *(uint64_t **)(v54 + 8);
      sub_1C3F7E324((uint64_t)v51, v28);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v50)(&v56, v29, v30, v53, v32);
      sub_1C3F7E2CC(v31.n128_i64[0], v31.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 3:
      unint64_t v33 = (unint64_t)v4[1];
      unint64_t v51 = *v5;
      v56.n128_u64[0] = (unint64_t)v51;
      v56.n128_u64[1] = v33;
      uint64_t v34 = v45;
      uint64_t v35 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v56, &v57);
      __n128 v36 = v57;
      __n128 v56 = v57;
      uint64_t v37 = v54;
      uint64_t v50 = *(uint64_t **)(v54 + 8);
      sub_1C3F7E324((uint64_t)v51, v33);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v50)(&v56, v34, v35, v53, v37);
      sub_1C3F7E2CC(v36.n128_i64[0], v36.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 4:
      unint64_t v38 = (unint64_t)v4[1];
      unint64_t v51 = *v5;
      v56.n128_u64[0] = (unint64_t)v51;
      v56.n128_u64[1] = v38;
      uint64_t v39 = v46;
      uint64_t v40 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v56, &v57);
      __n128 v41 = v57;
      __n128 v56 = v57;
      uint64_t v42 = v54;
      __n128 v49 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 8);
      sub_1C3F7E324((uint64_t)v51, v38);
      v49(&v56, v39, v40, v53, v42);
      sub_1C3F7E2CC(v41.n128_i64[0], v41.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    default:
      unint64_t v19 = (unint64_t)v4[1];
      uint64_t v50 = *v5;
      v56.n128_u64[0] = (unint64_t)v50;
      v56.n128_u64[1] = v19;
      uint64_t v20 = AssociatedTypeWitness;
      uint64_t v21 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v56, &v57);
      __n128 v22 = v57;
      __n128 v56 = v57;
      uint64_t v23 = v54;
      __n128 v49 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 8);
      sub_1C3F7E324((uint64_t)v50, v19);
      v49(&v56, v20, v21, v53, v23);
      sub_1C3F7E2CC(v22.n128_i64[0], v22.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
  }
  return swift_dynamicCast();
}

uint64_t sub_1C40948DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v29 = (char *)v23 - v4;
  uint64_t v28 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v28);
  uint64_t v27 = (char *)v23 - v5;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v26);
  uint64_t v25 = (char *)v23 - v6;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v24);
  v23[1] = (char *)v23 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v8);
  uint64_t v9 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v9);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v34.n128_u64[0] = v10;
  v34.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v35 = &protocol witness table for Int;
  uint64_t v36 = MEMORY[0x1E4FBB560];
  uint64_t v12 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v12, (uint64_t)&v37);
  switch(v37)
  {
    case 0:
      unint64_t v14 = v2[1];
      v33.n128_u64[0] = *v2;
      uint64_t v13 = v33.n128_u64[0];
      v33.n128_u64[1] = v14;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v33, &v34);
      __n128 v15 = v34;
      __n128 v33 = v34;
      sub_1C3F7E324(v13, v14);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v15.n128_i64[0], v15.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 1:
      unint64_t v17 = v2[1];
      v33.n128_u64[0] = *v3;
      uint64_t v16 = v33.n128_u64[0];
      v33.n128_u64[1] = v17;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v33, &v34);
      __n128 v18 = v34;
      __n128 v33 = v34;
      sub_1C3F7E324(v16, v17);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v18.n128_i64[0], v18.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    default:
      unint64_t v20 = v2[1];
      v33.n128_u64[0] = *v3;
      uint64_t v19 = v33.n128_u64[0];
      v33.n128_u64[1] = v20;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v33, &v34);
      __n128 v21 = v34;
      __n128 v33 = v34;
      sub_1C3F7E324(v19, v20);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v21.n128_i64[0], v21.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
  }
  return swift_dynamicCast();
}

uint64_t sub_1C4094FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v78 = a2;
  uint64_t v79 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v73 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v74 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v72 = (char *)&v60 - v5;
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v69 = (char *)&v60 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v67 = *(void *)(v8 - 8);
  uint64_t v68 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v66 = (char *)&v60 - v9;
  uint64_t v65 = swift_getAssociatedTypeWitness();
  uint64_t v64 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65);
  uint64_t v63 = (char *)&v60 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v62 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v60 - v12;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v61 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v60 - v15;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v76 = v17;
  uint64_t v77 = v18;
  MEMORY[0x1F4188790](v17);
  v75 = (char *)&v60 - v19;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v81.n128_u64[0] = v20;
  v81.n128_u64[1] = AssociatedConformanceWitness;
  v82 = &protocol witness table for Int;
  uint64_t v83 = MEMORY[0x1E4FBB560];
  uint64_t v22 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v22, (uint64_t)&v84);
  switch(v84)
  {
    case 0:
      unint64_t v24 = v2[1];
      v80.n128_u64[0] = *v3;
      uint64_t v23 = v80.n128_u64[0];
      v80.n128_u64[1] = v24;
      swift_getAssociatedConformanceWitness();
      __n128 v25 = Ref.init(id:)(&v80, &v81);
      unint64_t v26 = v81.n128_u64[1];
      unint64_t v74 = v81.n128_u64[0];
      uint64_t v28 = v76;
      uint64_t v27 = v77;
      uint64_t v29 = v79;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v77 + 16))(v75, v79, v76, v25);
      sub_1C3F7E324(v23, v24);
      swift_dynamicCast();
      v80.n128_u64[0] = v74;
      v80.n128_u64[1] = v26;
      sub_1C407C610((uint64_t)v16, (uint64_t)&v80, v14);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v16, v14);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v29, v28);
    case 1:
      unint64_t v42 = v2[1];
      v80.n128_u64[0] = *v3;
      uint64_t v41 = v80.n128_u64[0];
      v80.n128_u64[1] = v42;
      swift_getAssociatedConformanceWitness();
      __n128 v43 = Ref.init(id:)(&v80, &v81);
      unint64_t v44 = v81.n128_u64[1];
      unint64_t v74 = v81.n128_u64[0];
      uint64_t v46 = v76;
      uint64_t v45 = v77;
      uint64_t v47 = v79;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v77 + 16))(v75, v79, v76, v43);
      sub_1C3F7E324(v41, v42);
      swift_dynamicCast();
      v80.n128_u64[0] = v74;
      v80.n128_u64[1] = v44;
      sub_1C407C610((uint64_t)v13, (uint64_t)&v80, v11);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v13, v11);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v47, v46);
    case 2:
      unint64_t v49 = v2[1];
      v80.n128_u64[0] = *v3;
      uint64_t v48 = v80.n128_u64[0];
      v80.n128_u64[1] = v49;
      uint64_t v33 = v65;
      swift_getAssociatedConformanceWitness();
      __n128 v50 = Ref.init(id:)(&v80, &v81);
      __n128 v51 = v81;
      uint64_t v37 = v76;
      uint64_t v36 = v77;
      uint64_t v38 = v79;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v77 + 16))(v75, v79, v76, v50);
      sub_1C3F7E324(v48, v49);
      uint64_t v39 = (uint64_t)v63;
      swift_dynamicCast();
      __n128 v80 = v51;
      sub_1C407C610(v39, (uint64_t)&v80, v33);
      uint64_t v40 = v64;
      goto LABEL_8;
    case 3:
      unint64_t v53 = v2[1];
      v80.n128_u64[0] = *v3;
      uint64_t v52 = v80.n128_u64[0];
      v80.n128_u64[1] = v53;
      uint64_t v33 = v68;
      swift_getAssociatedConformanceWitness();
      __n128 v54 = Ref.init(id:)(&v80, &v81);
      __n128 v55 = v81;
      uint64_t v37 = v76;
      uint64_t v36 = v77;
      uint64_t v38 = v79;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v77 + 16))(v75, v79, v76, v54);
      sub_1C3F7E324(v52, v53);
      uint64_t v39 = (uint64_t)v66;
      swift_dynamicCast();
      __n128 v80 = v55;
      sub_1C407C610(v39, (uint64_t)&v80, v33);
      uint64_t v40 = v67;
      goto LABEL_8;
    case 4:
      unint64_t v57 = v2[1];
      v80.n128_u64[0] = *v3;
      uint64_t v56 = v80.n128_u64[0];
      v80.n128_u64[1] = v57;
      uint64_t v33 = v71;
      swift_getAssociatedConformanceWitness();
      __n128 v58 = Ref.init(id:)(&v80, &v81);
      __n128 v59 = v81;
      uint64_t v37 = v76;
      uint64_t v36 = v77;
      uint64_t v38 = v79;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v77 + 16))(v75, v79, v76, v58);
      sub_1C3F7E324(v56, v57);
      uint64_t v39 = (uint64_t)v69;
      swift_dynamicCast();
      __n128 v80 = v59;
      sub_1C407C610(v39, (uint64_t)&v80, v33);
      uint64_t v40 = v70;
      goto LABEL_8;
    default:
      unint64_t v32 = v2[1];
      v80.n128_u64[0] = *v3;
      uint64_t v31 = v80.n128_u64[0];
      v80.n128_u64[1] = v32;
      uint64_t v33 = v74;
      swift_getAssociatedConformanceWitness();
      __n128 v34 = Ref.init(id:)(&v80, &v81);
      __n128 v35 = v81;
      uint64_t v37 = v76;
      uint64_t v36 = v77;
      uint64_t v38 = v79;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v77 + 16))(v75, v79, v76, v34);
      sub_1C3F7E324(v31, v32);
      uint64_t v39 = (uint64_t)v72;
      swift_dynamicCast();
      __n128 v80 = v35;
      sub_1C407C610(v39, (uint64_t)&v80, v33);
      uint64_t v40 = v73;
LABEL_8:
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v33);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v38, v37);
  }
}

uint64_t SharedTagged_5.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C40948DC);
}

uint64_t sub_1C40959F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for SharedTagged_5();
  swift_retain();
  sub_1C40F1E7C(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_5, (uint64_t)&associated type descriptor for Tagged_5.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C4094FC8);
  return swift_release();
}

uint64_t SharedTagged_5.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1E7C(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_5, (uint64_t)&associated type descriptor for Tagged_5.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C4094FC8);
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
  return v5(a1, AssociatedTypeWitness);
}

void (*SharedTagged_5.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_5.subscript.getter(a2, a3);
  return sub_1C4095C38;
}

void sub_1C4095C38(uint64_t **a1, char a2)
{
}

uint64_t SharedTagged_5.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C40948DC);
}

uint64_t SharedTagged_5.visitReferences(_:)(void *a1)
{
  v14.n128_u64[0] = swift_getAssociatedTypeWitness();
  v14.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v15 = &protocol witness table for Int;
  uint64_t v16 = MEMORY[0x1E4FBB560];
  uint64_t v3 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v3, (uint64_t)&v17);
  uint64_t v4 = a1[4];
  uint64_t v12 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  unint64_t v5 = v1[1];
  v13.n128_u64[0] = *v1;
  uint64_t v6 = v13.n128_u64[0];
  v13.n128_u64[1] = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v13, &v14);
  __n128 v9 = v14;
  __n128 v13 = v14;
  size_t v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1C3F7E324(v6, v5);
  v10(&v13, AssociatedTypeWitness, AssociatedConformanceWitness, v12, v4);
  return sub_1C3F7E2CC(v9.n128_i64[0], v9.n128_u64[1]);
}

uint64_t SharedTagged_5.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))SharedTagged_5.init(_:id:), a3);
}

uint64_t SharedTagged_5.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))SharedTagged_5.copy(renamingReferences:));
}

uint64_t SharedTagged_5.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t static SharedTagged_5.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_5);
}

uint64_t SharedTagged_5.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))SharedTagged_5.hash(into:));
}

uint64_t sub_1C4096018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))SharedTagged_5.hash(into:));
}

uint64_t sub_1C4096030(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_5.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t SharedTagged_5.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C4096060@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return SharedTagged_5.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t SharedTagged_5.init(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40D1A10(a1, a2, a3, (char *)type metadata accessor for SharedTagged_5, 0, a4);
}

uint64_t sub_1C40960B0(uint64_t a1, uint64_t a2)
{
  return SharedTagged_5.encode(to:)(a1, a2);
}

uint64_t SharedTagged_5.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C4086E34(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_5, (uint64_t)&associated type descriptor for Tagged_5.Enum, (uint64_t)&associated conformance descriptor for Tagged_5.Tagged_5.Enum: RawRepresentable);
}

uint64_t (*SharedTagged_6.id.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_6.tag.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C40EA434(a1, a2);
}

uint64_t SharedTagged_6.tag.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C40EA528(a1, a2);
}

uint64_t (*SharedTagged_6.tag.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_6.init(_:identity:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))SharedTagged_6.init(_:id:));
}

{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))SharedTagged_6.init(_:id:));
}

uint64_t SharedTagged_6.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1C40EA66C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_6, a5);
}

{
  return sub_1C40EA7CC(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_6, a5);
}

uint64_t SharedTagged_6.init<A>(_:_:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 0;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 1;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 2;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 3;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 4;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 5;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

uint64_t SharedTagged_6.init<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  __n128 v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 0;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  __n128 v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 1;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  __n128 v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 2;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  __n128 v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 3;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  __n128 v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 4;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  __n128 v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 5;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

uint64_t SharedTagged_6.init<A>(_:_:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X8>)
{
  __n128 v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 0;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  __n128 v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 1;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  __n128 v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 2;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  __n128 v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 3;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  __n128 v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 4;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  __n128 v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 5;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_6();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

uint64_t SharedTagged_6.init(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for WeakTagged_6() + 36);
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for SharedTagged_6() + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v4, v3, v5);
}

uint64_t SharedTagged_6.tagged1.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  else
  {
    uint64_t v8 = *v1;
    unint64_t v9 = v2[1];
    v10.n128_u64[0] = v8;
    v10.n128_u64[1] = v9;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v6 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t SharedTagged_6.tagged2.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 1)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_6.tagged3.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 2)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_6.tagged4.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 3)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_6.tagged5.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 4)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_6.tagged6.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 5)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_6.unknown.getter@<X0>(long long *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] >= 6)
  {
    uint64_t v7 = *v1;
    unint64_t v8 = v2[1];
    v10.n128_u64[0] = v7;
    v10.n128_u64[1] = v8;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    __n128 v9 = v11;
    uint64_t result = sub_1C3F7E324(v7, v8);
    long long v6 = (__int128)v9;
  }
  else
  {
    long long v6 = xmmword_1C449BDD0;
  }
  *a1 = v6;
  return result;
}

uint64_t SharedTagged_6.any.getter@<X0>(__n128 *a1@<X8>)
{
  v2 = v1;
  v8.n128_u64[0] = swift_getAssociatedTypeWitness();
  v8.n128_u64[1] = swift_getAssociatedConformanceWitness();
  __n128 v9 = &protocol witness table for Int;
  uint64_t v10 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  uint64_t v5 = *v1;
  unint64_t v6 = v2[1];
  v8.n128_u64[0] = v5;
  v8.n128_u64[1] = v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  a1[1].n128_u64[1] = type metadata accessor for Ref();
  a1[2].n128_u64[0] = swift_getWitnessTable();
  Ref.init(id:)(&v8, a1);
  return sub_1C3F7E324(v5, v6);
}

uint64_t SharedTagged_6.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v61 = a2;
  uint64_t v62 = a3;
  uint64_t v60 = a1;
  uint64_t v63 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v59 = (unint64_t)&v50 - v6;
  uint64_t v53 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v53);
  __n128 v58 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v50 - v7);
  uint64_t v52 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v52);
  unint64_t v57 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v50 - v8);
  uint64_t v51 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v51);
  uint64_t v56 = (char *)&v50 - v9;
  uint64_t v50 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v50);
  __n128 v55 = (char *)&v50 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v11);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v12);
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v65.n128_u64[0] = v13;
  v65.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v66 = &protocol witness table for Int;
  uint64_t v67 = MEMORY[0x1E4FBB560];
  uint64_t v15 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v15, (uint64_t)&v68);
  switch(v68)
  {
    case 0:
      unint64_t v16 = *v4;
      __n128 v58 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v4[1];
      unint64_t v59 = v16;
      v64.n128_u64[0] = v16;
      v64.n128_u64[1] = (unint64_t)v58;
      uint64_t v17 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v64, &v65);
      __n128 v18 = v65;
      __n128 v64 = v65;
      uint64_t v19 = v62;
      unint64_t v57 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 8);
      sub_1C3F7E324(v59, (unint64_t)v58);
      v57(&v64, v12, v17, v61, v19);
      sub_1C3F7E2CC(v18.n128_i64[0], v18.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 1:
      unint64_t v25 = *v4;
      __n128 v58 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v4[1];
      unint64_t v59 = v25;
      v64.n128_u64[0] = v25;
      v64.n128_u64[1] = (unint64_t)v58;
      uint64_t v26 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v64, &v65);
      __n128 v27 = v65;
      __n128 v64 = v65;
      uint64_t v28 = v62;
      unint64_t v57 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 8);
      sub_1C3F7E324(v59, (unint64_t)v58);
      v57(&v64, v11, v26, v61, v28);
      sub_1C3F7E2CC(v27.n128_i64[0], v27.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 2:
      uint64_t v29 = *v4;
      unint64_t v59 = v5[1];
      v64.n128_u64[0] = v29;
      v64.n128_u64[1] = v59;
      uint64_t v30 = v50;
      uint64_t v31 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v64, &v65);
      __n128 v32 = v65;
      __n128 v64 = v65;
      uint64_t v33 = v62;
      __n128 v58 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 8);
      sub_1C3F7E324(v29, v59);
      v58(&v64, v30, v31, v61, v33);
      sub_1C3F7E2CC(v32.n128_i64[0], v32.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 3:
      uint64_t v34 = *v4;
      unint64_t v59 = v5[1];
      v64.n128_u64[0] = v34;
      v64.n128_u64[1] = v59;
      uint64_t v35 = v51;
      uint64_t v36 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v64, &v65);
      __n128 v37 = v65;
      __n128 v64 = v65;
      uint64_t v38 = v62;
      __n128 v58 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 8);
      sub_1C3F7E324(v34, v59);
      v58(&v64, v35, v36, v61, v38);
      sub_1C3F7E2CC(v37.n128_i64[0], v37.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 4:
      uint64_t v39 = *v4;
      unint64_t v59 = v5[1];
      v64.n128_u64[0] = v39;
      v64.n128_u64[1] = v59;
      uint64_t v40 = v52;
      uint64_t v41 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v64, &v65);
      __n128 v42 = v65;
      __n128 v64 = v65;
      uint64_t v43 = v62;
      __n128 v58 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 8);
      sub_1C3F7E324(v39, v59);
      v58(&v64, v40, v41, v61, v43);
      sub_1C3F7E2CC(v42.n128_i64[0], v42.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 5:
      uint64_t v44 = *v4;
      unint64_t v59 = v5[1];
      v64.n128_u64[0] = v44;
      v64.n128_u64[1] = v59;
      uint64_t v45 = v53;
      uint64_t v46 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v64, &v65);
      __n128 v47 = v65;
      __n128 v64 = v65;
      uint64_t v48 = v62;
      unint64_t v57 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 8);
      sub_1C3F7E324(v44, v59);
      v57(&v64, v45, v46, v61, v48);
      sub_1C3F7E2CC(v47.n128_i64[0], v47.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    default:
      uint64_t v20 = *v4;
      __n128 v58 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v5[1];
      v64.n128_u64[0] = v20;
      v64.n128_u64[1] = (unint64_t)v58;
      uint64_t v21 = AssociatedTypeWitness;
      uint64_t v22 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v64, &v65);
      __n128 v23 = v65;
      __n128 v64 = v65;
      uint64_t v24 = v62;
      unint64_t v57 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 8);
      sub_1C3F7E324(v20, (unint64_t)v58);
      v57(&v64, v21, v22, v61, v24);
      sub_1C3F7E2CC(v23.n128_i64[0], v23.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
  }
  return swift_dynamicCast();
}

uint64_t sub_1C409ADF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  __n128 v32 = (char *)&v24 - v4;
  uint64_t v31 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v31);
  uint64_t v30 = (char *)&v24 - v5;
  uint64_t v29 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v29);
  uint64_t v28 = (char *)&v24 - v6;
  uint64_t v27 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v27);
  uint64_t v26 = (char *)&v24 - v7;
  uint64_t v25 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v25);
  uint64_t v24 = (char *)&v24 - v8;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v9);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v10);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v37.n128_u64[0] = v11;
  v37.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v38 = &protocol witness table for Int;
  uint64_t v39 = MEMORY[0x1E4FBB560];
  uint64_t v13 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v13, (uint64_t)&v40);
  switch(v40)
  {
    case 0:
      unint64_t v15 = v2[1];
      v36.n128_u64[0] = *v3;
      uint64_t v14 = v36.n128_u64[0];
      v36.n128_u64[1] = v15;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v36, &v37);
      __n128 v16 = v37;
      __n128 v36 = v37;
      sub_1C3F7E324(v14, v15);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v16.n128_i64[0], v16.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 1:
      unint64_t v18 = v2[1];
      v36.n128_u64[0] = *v2;
      uint64_t v17 = v36.n128_u64[0];
      v36.n128_u64[1] = v18;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v36, &v37);
      __n128 v19 = v37;
      __n128 v36 = v37;
      sub_1C3F7E324(v17, v18);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v19.n128_i64[0], v19.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    default:
      unint64_t v21 = v2[1];
      v36.n128_u64[0] = *v3;
      uint64_t v20 = v36.n128_u64[0];
      v36.n128_u64[1] = v21;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v36, &v37);
      __n128 v22 = v37;
      __n128 v36 = v37;
      sub_1C3F7E324(v20, v21);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v22.n128_i64[0], v22.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
  }
  return swift_dynamicCast();
}

uint64_t sub_1C409B5BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v85 = a2;
  uint64_t v86 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v80 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v81 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v79 = (char *)&v65 - v5;
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v78 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v76 = (char *)&v65 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v74 = *(void *)(v8 - 8);
  uint64_t v75 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v73 = (char *)&v65 - v9;
  uint64_t v72 = swift_getAssociatedTypeWitness();
  uint64_t v71 = *(void *)(v72 - 8);
  MEMORY[0x1F4188790](v72);
  uint64_t v70 = (char *)&v65 - v10;
  uint64_t v69 = swift_getAssociatedTypeWitness();
  uint64_t v68 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69);
  uint64_t v67 = (char *)&v65 - v11;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v66 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v65 - v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v65 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v65 - v16;
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v83 = v18;
  uint64_t v84 = v19;
  MEMORY[0x1F4188790](v18);
  v82 = (char *)&v65 - v20;
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v88.n128_u64[0] = v21;
  v88.n128_u64[1] = AssociatedConformanceWitness;
  v89 = &protocol witness table for Int;
  uint64_t v90 = MEMORY[0x1E4FBB560];
  uint64_t v23 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v23, (uint64_t)&v91);
  switch(v91)
  {
    case 0:
      unint64_t v25 = v2[1];
      v87.n128_u64[0] = *v3;
      uint64_t v24 = v87.n128_u64[0];
      v87.n128_u64[1] = v25;
      swift_getAssociatedConformanceWitness();
      __n128 v26 = Ref.init(id:)(&v87, &v88);
      unint64_t v27 = v88.n128_u64[1];
      unint64_t v81 = v88.n128_u64[0];
      uint64_t v29 = v83;
      uint64_t v28 = v84;
      uint64_t v30 = v86;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v84 + 16))(v82, v86, v83, v26);
      sub_1C3F7E324(v24, v25);
      swift_dynamicCast();
      v87.n128_u64[0] = v81;
      v87.n128_u64[1] = v27;
      sub_1C407C610((uint64_t)v17, (uint64_t)&v87, v15);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v17, v15);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
    case 1:
      unint64_t v43 = v2[1];
      v87.n128_u64[0] = *v3;
      uint64_t v42 = v87.n128_u64[0];
      v87.n128_u64[1] = v43;
      swift_getAssociatedConformanceWitness();
      __n128 v44 = Ref.init(id:)(&v87, &v88);
      unint64_t v45 = v88.n128_u64[1];
      unint64_t v81 = v88.n128_u64[0];
      uint64_t v47 = v83;
      uint64_t v46 = v84;
      uint64_t v48 = v86;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v84 + 16))(v82, v86, v83, v44);
      sub_1C3F7E324(v42, v43);
      swift_dynamicCast();
      v87.n128_u64[0] = v81;
      v87.n128_u64[1] = v45;
      sub_1C407C610((uint64_t)v14, (uint64_t)&v87, v12);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v14, v12);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v48, v47);
    case 2:
      unint64_t v50 = v2[1];
      v87.n128_u64[0] = *v3;
      uint64_t v49 = v87.n128_u64[0];
      v87.n128_u64[1] = v50;
      uint64_t v34 = v69;
      swift_getAssociatedConformanceWitness();
      __n128 v51 = Ref.init(id:)(&v87, &v88);
      __n128 v52 = v88;
      uint64_t v38 = v83;
      uint64_t v37 = v84;
      uint64_t v39 = v86;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v84 + 16))(v82, v86, v83, v51);
      sub_1C3F7E324(v49, v50);
      uint64_t v40 = (uint64_t)v67;
      swift_dynamicCast();
      __n128 v87 = v52;
      sub_1C407C610(v40, (uint64_t)&v87, v34);
      uint64_t v41 = v68;
      goto LABEL_9;
    case 3:
      unint64_t v54 = v2[1];
      v87.n128_u64[0] = *v3;
      uint64_t v53 = v87.n128_u64[0];
      v87.n128_u64[1] = v54;
      uint64_t v34 = v72;
      swift_getAssociatedConformanceWitness();
      __n128 v55 = Ref.init(id:)(&v87, &v88);
      __n128 v56 = v88;
      uint64_t v38 = v83;
      uint64_t v37 = v84;
      uint64_t v39 = v86;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v84 + 16))(v82, v86, v83, v55);
      sub_1C3F7E324(v53, v54);
      uint64_t v40 = (uint64_t)v70;
      swift_dynamicCast();
      __n128 v87 = v56;
      sub_1C407C610(v40, (uint64_t)&v87, v34);
      uint64_t v41 = v71;
      goto LABEL_9;
    case 4:
      unint64_t v58 = v2[1];
      v87.n128_u64[0] = *v3;
      uint64_t v57 = v87.n128_u64[0];
      v87.n128_u64[1] = v58;
      uint64_t v34 = v75;
      swift_getAssociatedConformanceWitness();
      __n128 v59 = Ref.init(id:)(&v87, &v88);
      __n128 v60 = v88;
      uint64_t v38 = v83;
      uint64_t v37 = v84;
      uint64_t v39 = v86;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v84 + 16))(v82, v86, v83, v59);
      sub_1C3F7E324(v57, v58);
      uint64_t v40 = (uint64_t)v73;
      swift_dynamicCast();
      __n128 v87 = v60;
      sub_1C407C610(v40, (uint64_t)&v87, v34);
      uint64_t v41 = v74;
      goto LABEL_9;
    case 5:
      unint64_t v62 = v2[1];
      v87.n128_u64[0] = *v3;
      uint64_t v61 = v87.n128_u64[0];
      v87.n128_u64[1] = v62;
      uint64_t v34 = v78;
      swift_getAssociatedConformanceWitness();
      __n128 v63 = Ref.init(id:)(&v87, &v88);
      __n128 v64 = v88;
      uint64_t v38 = v83;
      uint64_t v37 = v84;
      uint64_t v39 = v86;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v84 + 16))(v82, v86, v83, v63);
      sub_1C3F7E324(v61, v62);
      uint64_t v40 = (uint64_t)v76;
      swift_dynamicCast();
      __n128 v87 = v64;
      sub_1C407C610(v40, (uint64_t)&v87, v34);
      uint64_t v41 = v77;
      goto LABEL_9;
    default:
      unint64_t v33 = v2[1];
      v87.n128_u64[0] = *v3;
      uint64_t v32 = v87.n128_u64[0];
      v87.n128_u64[1] = v33;
      uint64_t v34 = v81;
      swift_getAssociatedConformanceWitness();
      __n128 v35 = Ref.init(id:)(&v87, &v88);
      __n128 v36 = v88;
      uint64_t v38 = v83;
      uint64_t v37 = v84;
      uint64_t v39 = v86;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v84 + 16))(v82, v86, v83, v35);
      sub_1C3F7E324(v32, v33);
      uint64_t v40 = (uint64_t)v79;
      swift_dynamicCast();
      __n128 v87 = v36;
      sub_1C407C610(v40, (uint64_t)&v87, v34);
      uint64_t v41 = v80;
LABEL_9:
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v34);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v39, v38);
  }
}

uint64_t SharedTagged_6.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C409ADF8);
}

uint64_t sub_1C409C144(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for SharedTagged_6();
  swift_retain();
  sub_1C40F1E7C(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_6, (uint64_t)&associated type descriptor for Tagged_6.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C409B5BC);
  return swift_release();
}

uint64_t SharedTagged_6.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1E7C(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_6, (uint64_t)&associated type descriptor for Tagged_6.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C409B5BC);
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
  return v5(a1, AssociatedTypeWitness);
}

void (*SharedTagged_6.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_6.subscript.getter(a2, a3);
  return sub_1C409C388;
}

void sub_1C409C388(uint64_t **a1, char a2)
{
}

uint64_t SharedTagged_6.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C409ADF8);
}

uint64_t SharedTagged_6.visitReferences(_:)(void *a1)
{
  v14.n128_u64[0] = swift_getAssociatedTypeWitness();
  v14.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v15 = &protocol witness table for Int;
  uint64_t v16 = MEMORY[0x1E4FBB560];
  uint64_t v3 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v3, (uint64_t)&v17);
  uint64_t v4 = a1[4];
  uint64_t v12 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  unint64_t v5 = v1[1];
  v13.n128_u64[0] = *v1;
  uint64_t v6 = v13.n128_u64[0];
  v13.n128_u64[1] = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v13, &v14);
  __n128 v9 = v14;
  __n128 v13 = v14;
  size_t v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1C3F7E324(v6, v5);
  v10(&v13, AssociatedTypeWitness, AssociatedConformanceWitness, v12, v4);
  return sub_1C3F7E2CC(v9.n128_i64[0], v9.n128_u64[1]);
}

uint64_t SharedTagged_6.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))SharedTagged_6.init(_:id:), a3);
}

uint64_t SharedTagged_6.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))SharedTagged_6.copy(renamingReferences:));
}

uint64_t SharedTagged_6.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t static SharedTagged_6.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_6);
}

uint64_t SharedTagged_6.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))SharedTagged_6.hash(into:));
}

uint64_t sub_1C409C7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))SharedTagged_6.hash(into:));
}

uint64_t sub_1C409C7C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_6.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t SharedTagged_6.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C409C7F4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return SharedTagged_6.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t SharedTagged_6.init(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40D6CD4(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_6, 0, a4);
}

uint64_t sub_1C409C844(uint64_t a1, uint64_t a2)
{
  return SharedTagged_6.encode(to:)(a1, a2);
}

uint64_t SharedTagged_6.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C4086E34(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_6, (uint64_t)&associated type descriptor for Tagged_6.Enum, (uint64_t)&associated conformance descriptor for Tagged_6.Tagged_6.Enum: RawRepresentable);
}

uint64_t (*SharedTagged_7.id.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_7.tag.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C40EA434(a1, a2);
}

uint64_t SharedTagged_7.tag.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C40EA528(a1, a2);
}

uint64_t (*SharedTagged_7.tag.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_7.init(_:identity:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))SharedTagged_7.init(_:id:));
}

{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))SharedTagged_7.init(_:id:));
}

uint64_t SharedTagged_7.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1C40EA66C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_7, a5);
}

{
  return sub_1C40EA7CC(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_7, a5);
}

uint64_t SharedTagged_7.init<A>(_:_:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  __n128 v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 0;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  __n128 v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 1;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  __n128 v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 2;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  __n128 v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 3;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  __n128 v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 4;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  __n128 v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 5;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  __n128 v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 6;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

uint64_t SharedTagged_7.init<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  unint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 0;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  unint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 1;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  unint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 2;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  unint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 3;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  unint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 4;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  unint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 5;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  unint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 6;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

uint64_t SharedTagged_7.init<A>(_:_:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X8>)
{
  unint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 0;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  unint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 1;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  unint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 2;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  unint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 3;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  unint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 4;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  unint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 5;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  unint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 6;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_7();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

uint64_t SharedTagged_7.init(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for WeakTagged_7() + 36);
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for SharedTagged_7() + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v4, v3, v5);
}

uint64_t SharedTagged_7.tagged1.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  else
  {
    uint64_t v8 = *v1;
    unint64_t v9 = v2[1];
    v10.n128_u64[0] = v8;
    v10.n128_u64[1] = v9;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v6 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t SharedTagged_7.tagged2.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 1)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_7.tagged3.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 2)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_7.tagged4.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 3)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_7.tagged5.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 4)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_7.tagged6.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 5)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_7.tagged7.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 6)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_7.unknown.getter@<X0>(long long *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] >= 7)
  {
    uint64_t v7 = *v1;
    unint64_t v8 = v2[1];
    v10.n128_u64[0] = v7;
    v10.n128_u64[1] = v8;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    __n128 v9 = v11;
    uint64_t result = sub_1C3F7E324(v7, v8);
    long long v6 = (__int128)v9;
  }
  else
  {
    long long v6 = xmmword_1C449BDD0;
  }
  *a1 = v6;
  return result;
}

uint64_t SharedTagged_7.any.getter@<X0>(__n128 *a1@<X8>)
{
  v2 = v1;
  v8.n128_u64[0] = swift_getAssociatedTypeWitness();
  v8.n128_u64[1] = swift_getAssociatedConformanceWitness();
  __n128 v9 = &protocol witness table for Int;
  uint64_t v10 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  uint64_t v5 = *v1;
  unint64_t v6 = v2[1];
  v8.n128_u64[0] = v5;
  v8.n128_u64[1] = v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  a1[1].n128_u64[1] = type metadata accessor for Ref();
  a1[2].n128_u64[0] = swift_getWitnessTable();
  Ref.init(id:)(&v8, a1);
  return sub_1C3F7E324(v5, v6);
}

uint64_t SharedTagged_7.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v69 = a2;
  uint64_t v70 = a3;
  uint64_t v68 = a1;
  uint64_t v71 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v67 = (uint64_t *)((char *)&v56 - v6);
  uint64_t v60 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v60);
  uint64_t v66 = (uint64_t *)((char *)&v56 - v7);
  uint64_t v59 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v59);
  uint64_t v65 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v56 - v8);
  uint64_t v58 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v58);
  __n128 v64 = (char *)&v56 - v9;
  uint64_t v57 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v57);
  __n128 v63 = (char *)&v56 - v10;
  uint64_t v56 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v56);
  unint64_t v62 = (char *)&v56 - v11;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v12);
  uint64_t v13 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v13);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v73.n128_u64[0] = v14;
  v73.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v74 = &protocol witness table for Int;
  uint64_t v75 = MEMORY[0x1E4FBB560];
  uint64_t v16 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v16, (uint64_t)&v76);
  switch(v76)
  {
    case 0:
      uint64_t v17 = *v4;
      uint64_t v66 = v4[1];
      uint64_t v67 = v17;
      v72.n128_u64[0] = (unint64_t)v17;
      v72.n128_u64[1] = (unint64_t)v66;
      uint64_t v18 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v72, &v73);
      __n128 v19 = v73;
      __n128 v72 = v73;
      uint64_t v20 = v70;
      uint64_t v65 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 8);
      sub_1C3F7E324((uint64_t)v67, (unint64_t)v66);
      v65(&v72, v13, v18, v69, v20);
      sub_1C3F7E2CC(v19.n128_i64[0], v19.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 1:
      uint64_t v26 = *v4;
      uint64_t v66 = v4[1];
      uint64_t v67 = v26;
      v72.n128_u64[0] = (unint64_t)v26;
      v72.n128_u64[1] = (unint64_t)v66;
      uint64_t v27 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v72, &v73);
      __n128 v28 = v73;
      __n128 v72 = v73;
      uint64_t v29 = v70;
      uint64_t v65 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 8);
      sub_1C3F7E324((uint64_t)v67, (unint64_t)v66);
      v65(&v72, v12, v27, v69, v29);
      sub_1C3F7E2CC(v28.n128_i64[0], v28.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 2:
      unint64_t v30 = (unint64_t)v4[1];
      uint64_t v67 = *v5;
      v72.n128_u64[0] = (unint64_t)v67;
      v72.n128_u64[1] = v30;
      uint64_t v31 = v56;
      uint64_t v32 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v72, &v73);
      __n128 v33 = v73;
      __n128 v72 = v73;
      uint64_t v34 = v70;
      uint64_t v66 = *(uint64_t **)(v70 + 8);
      sub_1C3F7E324((uint64_t)v67, v30);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v66)(&v72, v31, v32, v69, v34);
      sub_1C3F7E2CC(v33.n128_i64[0], v33.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 3:
      unint64_t v35 = (unint64_t)v4[1];
      uint64_t v67 = *v5;
      v72.n128_u64[0] = (unint64_t)v67;
      v72.n128_u64[1] = v35;
      uint64_t v36 = v57;
      uint64_t v37 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v72, &v73);
      __n128 v38 = v73;
      __n128 v72 = v73;
      uint64_t v39 = v70;
      uint64_t v66 = *(uint64_t **)(v70 + 8);
      sub_1C3F7E324((uint64_t)v67, v35);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v66)(&v72, v36, v37, v69, v39);
      sub_1C3F7E2CC(v38.n128_i64[0], v38.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 4:
      unint64_t v40 = (unint64_t)v4[1];
      uint64_t v67 = *v5;
      v72.n128_u64[0] = (unint64_t)v67;
      v72.n128_u64[1] = v40;
      uint64_t v41 = v58;
      uint64_t v42 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v72, &v73);
      __n128 v43 = v73;
      __n128 v72 = v73;
      uint64_t v44 = v70;
      uint64_t v66 = *(uint64_t **)(v70 + 8);
      sub_1C3F7E324((uint64_t)v67, v40);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v66)(&v72, v41, v42, v69, v44);
      sub_1C3F7E2CC(v43.n128_i64[0], v43.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 5:
      unint64_t v45 = (unint64_t)v4[1];
      uint64_t v67 = *v5;
      v72.n128_u64[0] = (unint64_t)v67;
      v72.n128_u64[1] = v45;
      uint64_t v46 = v59;
      uint64_t v47 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v72, &v73);
      __n128 v48 = v73;
      __n128 v72 = v73;
      uint64_t v49 = v70;
      uint64_t v66 = *(uint64_t **)(v70 + 8);
      sub_1C3F7E324((uint64_t)v67, v45);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v66)(&v72, v46, v47, v69, v49);
      sub_1C3F7E2CC(v48.n128_i64[0], v48.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 6:
      unint64_t v50 = (unint64_t)v4[1];
      uint64_t v67 = *v5;
      v72.n128_u64[0] = (unint64_t)v67;
      v72.n128_u64[1] = v50;
      uint64_t v51 = v60;
      uint64_t v52 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v72, &v73);
      __n128 v53 = v73;
      __n128 v72 = v73;
      uint64_t v54 = v70;
      uint64_t v65 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 8);
      sub_1C3F7E324((uint64_t)v67, v50);
      v65(&v72, v51, v52, v69, v54);
      sub_1C3F7E2CC(v53.n128_i64[0], v53.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    default:
      unint64_t v21 = (unint64_t)v4[1];
      uint64_t v66 = *v5;
      v72.n128_u64[0] = (unint64_t)v66;
      v72.n128_u64[1] = v21;
      uint64_t v22 = AssociatedTypeWitness;
      uint64_t v23 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v72, &v73);
      __n128 v24 = v73;
      __n128 v72 = v73;
      uint64_t v25 = v70;
      uint64_t v65 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 8);
      sub_1C3F7E324((uint64_t)v66, v21);
      v65(&v72, v22, v23, v69, v25);
      sub_1C3F7E2CC(v24.n128_i64[0], v24.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
  }
  return swift_dynamicCast();
}

uint64_t sub_1C40A2158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v35 = (char *)&v25 - v4;
  uint64_t v34 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v34);
  __n128 v33 = (char *)&v25 - v5;
  uint64_t v32 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v32);
  uint64_t v31 = (char *)&v25 - v6;
  uint64_t v30 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v30);
  uint64_t v29 = (char *)&v25 - v7;
  uint64_t v28 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v28);
  uint64_t v27 = (char *)&v25 - v8;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v26);
  uint64_t v25 = (char *)&v25 - v9;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v10);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v11);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v40.n128_u64[0] = v12;
  v40.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v41 = &protocol witness table for Int;
  uint64_t v42 = MEMORY[0x1E4FBB560];
  uint64_t v14 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v14, (uint64_t)&v43);
  switch(v43)
  {
    case 0:
      unint64_t v16 = v2[1];
      v39.n128_u64[0] = *v3;
      uint64_t v15 = v39.n128_u64[0];
      v39.n128_u64[1] = v16;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v39, &v40);
      __n128 v17 = v40;
      __n128 v39 = v40;
      sub_1C3F7E324(v15, v16);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v17.n128_i64[0], v17.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 1:
      unint64_t v19 = v2[1];
      v39.n128_u64[0] = *v3;
      uint64_t v18 = v39.n128_u64[0];
      v39.n128_u64[1] = v19;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v39, &v40);
      __n128 v20 = v40;
      __n128 v39 = v40;
      sub_1C3F7E324(v18, v19);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v20.n128_i64[0], v20.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    default:
      unint64_t v22 = v2[1];
      v39.n128_u64[0] = *v3;
      uint64_t v21 = v39.n128_u64[0];
      v39.n128_u64[1] = v22;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v39, &v40);
      __n128 v23 = v40;
      __n128 v39 = v40;
      sub_1C3F7E324(v21, v22);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v23.n128_i64[0], v23.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
  }
  return swift_dynamicCast();
}

uint64_t sub_1C40A2A04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v94 = a2;
  uint64_t v95 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v89 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v90 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  __n128 v88 = (char *)&v70 - v5;
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v86 = *(void *)(v6 - 8);
  uint64_t v87 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v85 = (char *)&v70 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v83 = *(void *)(v8 - 8);
  uint64_t v84 = v8;
  MEMORY[0x1F4188790](v8);
  v82 = (char *)&v70 - v9;
  uint64_t v81 = swift_getAssociatedTypeWitness();
  uint64_t v80 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](v81);
  uint64_t v79 = (char *)&v70 - v10;
  uint64_t v78 = swift_getAssociatedTypeWitness();
  uint64_t v77 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78);
  uint64_t v76 = (char *)&v70 - v11;
  uint64_t v75 = swift_getAssociatedTypeWitness();
  uint64_t v74 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75);
  __n128 v73 = (char *)&v70 - v12;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v72 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v70 - v14;
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v71 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v70 - v17;
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v92 = v19;
  uint64_t v93 = v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v91 = (char *)&v70 - v21;
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v97.n128_u64[0] = v22;
  v97.n128_u64[1] = AssociatedConformanceWitness;
  v98 = &protocol witness table for Int;
  uint64_t v99 = MEMORY[0x1E4FBB560];
  uint64_t v24 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v24, (uint64_t)&v100);
  switch(v100)
  {
    case 0:
      unint64_t v26 = v2[1];
      v96.n128_u64[0] = *v3;
      uint64_t v25 = v96.n128_u64[0];
      v96.n128_u64[1] = v26;
      swift_getAssociatedConformanceWitness();
      __n128 v27 = Ref.init(id:)(&v96, &v97);
      unint64_t v28 = v97.n128_u64[1];
      unint64_t v90 = v97.n128_u64[0];
      uint64_t v30 = v92;
      uint64_t v29 = v93;
      uint64_t v31 = v95;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v93 + 16))(v91, v95, v92, v27);
      sub_1C3F7E324(v25, v26);
      swift_dynamicCast();
      v96.n128_u64[0] = v90;
      v96.n128_u64[1] = v28;
      sub_1C407C610((uint64_t)v18, (uint64_t)&v96, v16);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v18, v16);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v31, v30);
    case 1:
      unint64_t v44 = v2[1];
      v96.n128_u64[0] = *v3;
      uint64_t v43 = v96.n128_u64[0];
      v96.n128_u64[1] = v44;
      swift_getAssociatedConformanceWitness();
      __n128 v45 = Ref.init(id:)(&v96, &v97);
      unint64_t v46 = v97.n128_u64[1];
      unint64_t v90 = v97.n128_u64[0];
      uint64_t v48 = v92;
      uint64_t v47 = v93;
      uint64_t v49 = v95;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v93 + 16))(v91, v95, v92, v45);
      sub_1C3F7E324(v43, v44);
      swift_dynamicCast();
      v96.n128_u64[0] = v90;
      v96.n128_u64[1] = v46;
      sub_1C407C610((uint64_t)v15, (uint64_t)&v96, v13);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v15, v13);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v49, v48);
    case 2:
      unint64_t v51 = v2[1];
      v96.n128_u64[0] = *v3;
      uint64_t v50 = v96.n128_u64[0];
      v96.n128_u64[1] = v51;
      uint64_t v35 = v75;
      swift_getAssociatedConformanceWitness();
      __n128 v52 = Ref.init(id:)(&v96, &v97);
      __n128 v53 = v97;
      uint64_t v39 = v92;
      uint64_t v38 = v93;
      uint64_t v40 = v95;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v93 + 16))(v91, v95, v92, v52);
      sub_1C3F7E324(v50, v51);
      uint64_t v41 = (uint64_t)v73;
      swift_dynamicCast();
      __n128 v96 = v53;
      sub_1C407C610(v41, (uint64_t)&v96, v35);
      uint64_t v42 = v74;
      goto LABEL_10;
    case 3:
      unint64_t v55 = v2[1];
      v96.n128_u64[0] = *v3;
      uint64_t v54 = v96.n128_u64[0];
      v96.n128_u64[1] = v55;
      uint64_t v35 = v78;
      swift_getAssociatedConformanceWitness();
      __n128 v56 = Ref.init(id:)(&v96, &v97);
      __n128 v57 = v97;
      uint64_t v39 = v92;
      uint64_t v38 = v93;
      uint64_t v40 = v95;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v93 + 16))(v91, v95, v92, v56);
      sub_1C3F7E324(v54, v55);
      uint64_t v41 = (uint64_t)v76;
      swift_dynamicCast();
      __n128 v96 = v57;
      sub_1C407C610(v41, (uint64_t)&v96, v35);
      uint64_t v42 = v77;
      goto LABEL_10;
    case 4:
      unint64_t v59 = v2[1];
      v96.n128_u64[0] = *v3;
      uint64_t v58 = v96.n128_u64[0];
      v96.n128_u64[1] = v59;
      uint64_t v35 = v81;
      swift_getAssociatedConformanceWitness();
      __n128 v60 = Ref.init(id:)(&v96, &v97);
      __n128 v61 = v97;
      uint64_t v39 = v92;
      uint64_t v38 = v93;
      uint64_t v40 = v95;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v93 + 16))(v91, v95, v92, v60);
      sub_1C3F7E324(v58, v59);
      uint64_t v41 = (uint64_t)v79;
      swift_dynamicCast();
      __n128 v96 = v61;
      sub_1C407C610(v41, (uint64_t)&v96, v35);
      uint64_t v42 = v80;
      goto LABEL_10;
    case 5:
      unint64_t v63 = v2[1];
      v96.n128_u64[0] = *v3;
      uint64_t v62 = v96.n128_u64[0];
      v96.n128_u64[1] = v63;
      uint64_t v35 = v84;
      swift_getAssociatedConformanceWitness();
      __n128 v64 = Ref.init(id:)(&v96, &v97);
      __n128 v65 = v97;
      uint64_t v39 = v92;
      uint64_t v38 = v93;
      uint64_t v40 = v95;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v93 + 16))(v91, v95, v92, v64);
      sub_1C3F7E324(v62, v63);
      uint64_t v41 = (uint64_t)v82;
      swift_dynamicCast();
      __n128 v96 = v65;
      sub_1C407C610(v41, (uint64_t)&v96, v35);
      uint64_t v42 = v83;
      goto LABEL_10;
    case 6:
      unint64_t v67 = v2[1];
      v96.n128_u64[0] = *v3;
      uint64_t v66 = v96.n128_u64[0];
      v96.n128_u64[1] = v67;
      uint64_t v35 = v87;
      swift_getAssociatedConformanceWitness();
      __n128 v68 = Ref.init(id:)(&v96, &v97);
      __n128 v69 = v97;
      uint64_t v39 = v92;
      uint64_t v38 = v93;
      uint64_t v40 = v95;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v93 + 16))(v91, v95, v92, v68);
      sub_1C3F7E324(v66, v67);
      uint64_t v41 = (uint64_t)v85;
      swift_dynamicCast();
      __n128 v96 = v69;
      sub_1C407C610(v41, (uint64_t)&v96, v35);
      uint64_t v42 = v86;
      goto LABEL_10;
    default:
      unint64_t v34 = v2[1];
      v96.n128_u64[0] = *v3;
      uint64_t v33 = v96.n128_u64[0];
      v96.n128_u64[1] = v34;
      uint64_t v35 = v90;
      swift_getAssociatedConformanceWitness();
      __n128 v36 = Ref.init(id:)(&v96, &v97);
      __n128 v37 = v97;
      uint64_t v39 = v92;
      uint64_t v38 = v93;
      uint64_t v40 = v95;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v93 + 16))(v91, v95, v92, v36);
      sub_1C3F7E324(v33, v34);
      uint64_t v41 = (uint64_t)v88;
      swift_dynamicCast();
      __n128 v96 = v37;
      sub_1C407C610(v41, (uint64_t)&v96, v35);
      uint64_t v42 = v89;
LABEL_10:
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v35);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v40, v39);
  }
}

uint64_t SharedTagged_7.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C40A2158);
}

uint64_t sub_1C40A36F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for SharedTagged_7();
  swift_retain();
  sub_1C40F1E7C(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_7, (uint64_t)&associated type descriptor for Tagged_7.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40A2A04);
  return swift_release();
}

uint64_t SharedTagged_7.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1E7C(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_7, (uint64_t)&associated type descriptor for Tagged_7.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40A2A04);
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
  return v5(a1, AssociatedTypeWitness);
}

void (*SharedTagged_7.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_7.subscript.getter(a2, a3);
  return sub_1C40A3938;
}

void sub_1C40A3938(uint64_t **a1, char a2)
{
}

uint64_t SharedTagged_7.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C40A2158);
}

uint64_t SharedTagged_7.visitReferences(_:)(void *a1)
{
  v14.n128_u64[0] = swift_getAssociatedTypeWitness();
  v14.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v15 = &protocol witness table for Int;
  uint64_t v16 = MEMORY[0x1E4FBB560];
  uint64_t v3 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v3, (uint64_t)&v17);
  uint64_t v4 = a1[4];
  uint64_t v12 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  unint64_t v5 = v1[1];
  v13.n128_u64[0] = *v1;
  uint64_t v6 = v13.n128_u64[0];
  v13.n128_u64[1] = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v13, &v14);
  __n128 v9 = v14;
  __n128 v13 = v14;
  size_t v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1C3F7E324(v6, v5);
  v10(&v13, AssociatedTypeWitness, AssociatedConformanceWitness, v12, v4);
  return sub_1C3F7E2CC(v9.n128_i64[0], v9.n128_u64[1]);
}

uint64_t SharedTagged_7.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))SharedTagged_7.init(_:id:), a3);
}

uint64_t SharedTagged_7.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))SharedTagged_7.copy(renamingReferences:));
}

uint64_t SharedTagged_7.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t static SharedTagged_7.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_7);
}

uint64_t SharedTagged_7.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))SharedTagged_7.hash(into:));
}

uint64_t sub_1C40A3DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))SharedTagged_7.hash(into:));
}

uint64_t sub_1C40A3DB8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_7.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t SharedTagged_7.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C40A3DE8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return SharedTagged_7.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t SharedTagged_7.init(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40DC698(a1, a2, a3, (char *)type metadata accessor for SharedTagged_7, 0, a4);
}

uint64_t sub_1C40A3E38(uint64_t a1, uint64_t a2)
{
  return SharedTagged_7.encode(to:)(a1, a2);
}

uint64_t SharedTagged_7.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C4086E34(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_7, (uint64_t)&associated type descriptor for Tagged_7.Enum, (uint64_t)&associated conformance descriptor for Tagged_7.Tagged_7.Enum: RawRepresentable);
}

uint64_t (*SharedTagged_8.id.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_8.tag.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C40EA434(a1, a2);
}

uint64_t SharedTagged_8.tag.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C40EA528(a1, a2);
}

uint64_t (*SharedTagged_8.tag.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_8.init(_:identity:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))SharedTagged_8.init(_:id:));
}

{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))SharedTagged_8.init(_:id:));
}

uint64_t SharedTagged_8.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1C40EA66C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_8, a5);
}

{
  return sub_1C40EA7CC(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_8, a5);
}

uint64_t SharedTagged_8.init<A>(_:_:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 0;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 1;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 2;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 3;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 4;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 5;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 6;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 7;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

uint64_t SharedTagged_8.init<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 0;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 1;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 2;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 3;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 4;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 5;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 6;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 7;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

uint64_t SharedTagged_8.init<A>(_:_:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X8>)
{
  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 0;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 1;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 2;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 3;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 4;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 5;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 6;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 7;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_8();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

uint64_t SharedTagged_8.init(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for WeakTagged_8() + 36);
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for SharedTagged_8() + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v4, v3, v5);
}

uint64_t SharedTagged_8.tagged1.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  else
  {
    uint64_t v8 = *v1;
    unint64_t v9 = v2[1];
    v10.n128_u64[0] = v8;
    v10.n128_u64[1] = v9;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v6 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t SharedTagged_8.tagged2.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 1)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_8.tagged3.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 2)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_8.tagged4.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 3)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_8.tagged5.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 4)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_8.tagged6.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 5)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_8.tagged7.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 6)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_8.tagged8.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 7)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_8.unknown.getter@<X0>(long long *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] >= 8)
  {
    uint64_t v7 = *v1;
    unint64_t v8 = v2[1];
    v10.n128_u64[0] = v7;
    v10.n128_u64[1] = v8;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    __n128 v9 = v11;
    uint64_t result = sub_1C3F7E324(v7, v8);
    long long v6 = (__int128)v9;
  }
  else
  {
    long long v6 = xmmword_1C449BDD0;
  }
  *a1 = v6;
  return result;
}

uint64_t SharedTagged_8.any.getter@<X0>(__n128 *a1@<X8>)
{
  v2 = v1;
  v8.n128_u64[0] = swift_getAssociatedTypeWitness();
  v8.n128_u64[1] = swift_getAssociatedConformanceWitness();
  __n128 v9 = &protocol witness table for Int;
  uint64_t v10 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  uint64_t v5 = *v1;
  unint64_t v6 = v2[1];
  v8.n128_u64[0] = v5;
  v8.n128_u64[1] = v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  a1[1].n128_u64[1] = type metadata accessor for Ref();
  a1[2].n128_u64[0] = swift_getWitnessTable();
  Ref.init(id:)(&v8, a1);
  return sub_1C3F7E324(v5, v6);
}

uint64_t SharedTagged_8.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v77 = a2;
  uint64_t v78 = a3;
  uint64_t v76 = a1;
  uint64_t v79 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v75 = (uint64_t *)((char *)&v62 - v6);
  uint64_t v67 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v67);
  uint64_t v74 = (uint64_t *)((char *)&v62 - v7);
  uint64_t v66 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v66);
  __n128 v73 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v62 - v8);
  uint64_t v65 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v65);
  uint64_t v72 = (char *)&v62 - v9;
  uint64_t v64 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v64);
  uint64_t v71 = (char *)&v62 - v10;
  uint64_t v63 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v63);
  uint64_t v70 = (char *)&v62 - v11;
  uint64_t v62 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v62);
  __n128 v69 = (char *)&v62 - v12;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v13);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v14);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v81.n128_u64[0] = v15;
  v81.n128_u64[1] = AssociatedConformanceWitness;
  v82 = &protocol witness table for Int;
  uint64_t v83 = MEMORY[0x1E4FBB560];
  uint64_t v17 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v17, (uint64_t)&v84);
  switch(v84)
  {
    case 0:
      uint64_t v18 = *v4;
      uint64_t v74 = v4[1];
      uint64_t v75 = v18;
      v80.n128_u64[0] = (unint64_t)v18;
      v80.n128_u64[1] = (unint64_t)v74;
      uint64_t v19 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v80, &v81);
      __n128 v20 = v81;
      __n128 v80 = v81;
      uint64_t v21 = v78;
      __n128 v73 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 8);
      sub_1C3F7E324((uint64_t)v75, (unint64_t)v74);
      v73(&v80, v14, v19, v77, v21);
      sub_1C3F7E2CC(v20.n128_i64[0], v20.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 1:
      uint64_t v27 = *v4;
      uint64_t v74 = v4[1];
      uint64_t v75 = v27;
      v80.n128_u64[0] = (unint64_t)v27;
      v80.n128_u64[1] = (unint64_t)v74;
      uint64_t v28 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v80, &v81);
      __n128 v29 = v81;
      __n128 v80 = v81;
      uint64_t v30 = v78;
      __n128 v73 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 8);
      sub_1C3F7E324((uint64_t)v75, (unint64_t)v74);
      v73(&v80, v13, v28, v77, v30);
      sub_1C3F7E2CC(v29.n128_i64[0], v29.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 2:
      unint64_t v31 = (unint64_t)v4[1];
      uint64_t v75 = *v5;
      v80.n128_u64[0] = (unint64_t)v75;
      v80.n128_u64[1] = v31;
      uint64_t v32 = v62;
      uint64_t v33 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v80, &v81);
      __n128 v34 = v81;
      __n128 v80 = v81;
      uint64_t v35 = v78;
      uint64_t v74 = *(uint64_t **)(v78 + 8);
      sub_1C3F7E324((uint64_t)v75, v31);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v74)(&v80, v32, v33, v77, v35);
      sub_1C3F7E2CC(v34.n128_i64[0], v34.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 3:
      unint64_t v36 = (unint64_t)v4[1];
      uint64_t v75 = *v5;
      v80.n128_u64[0] = (unint64_t)v75;
      v80.n128_u64[1] = v36;
      uint64_t v37 = v63;
      uint64_t v38 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v80, &v81);
      __n128 v39 = v81;
      __n128 v80 = v81;
      uint64_t v40 = v78;
      uint64_t v74 = *(uint64_t **)(v78 + 8);
      sub_1C3F7E324((uint64_t)v75, v36);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v74)(&v80, v37, v38, v77, v40);
      sub_1C3F7E2CC(v39.n128_i64[0], v39.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 4:
      unint64_t v41 = (unint64_t)v4[1];
      uint64_t v75 = *v5;
      v80.n128_u64[0] = (unint64_t)v75;
      v80.n128_u64[1] = v41;
      uint64_t v42 = v64;
      uint64_t v43 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v80, &v81);
      __n128 v44 = v81;
      __n128 v80 = v81;
      uint64_t v45 = v78;
      uint64_t v74 = *(uint64_t **)(v78 + 8);
      sub_1C3F7E324((uint64_t)v75, v41);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v74)(&v80, v42, v43, v77, v45);
      sub_1C3F7E2CC(v44.n128_i64[0], v44.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 5:
      unint64_t v46 = (unint64_t)v4[1];
      uint64_t v75 = *v5;
      v80.n128_u64[0] = (unint64_t)v75;
      v80.n128_u64[1] = v46;
      uint64_t v47 = v65;
      uint64_t v48 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v80, &v81);
      __n128 v49 = v81;
      __n128 v80 = v81;
      uint64_t v50 = v78;
      uint64_t v74 = *(uint64_t **)(v78 + 8);
      sub_1C3F7E324((uint64_t)v75, v46);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v74)(&v80, v47, v48, v77, v50);
      sub_1C3F7E2CC(v49.n128_i64[0], v49.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 6:
      unint64_t v51 = (unint64_t)v4[1];
      uint64_t v75 = *v5;
      v80.n128_u64[0] = (unint64_t)v75;
      v80.n128_u64[1] = v51;
      uint64_t v52 = v66;
      uint64_t v53 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v80, &v81);
      __n128 v54 = v81;
      __n128 v80 = v81;
      uint64_t v55 = v78;
      uint64_t v74 = *(uint64_t **)(v78 + 8);
      sub_1C3F7E324((uint64_t)v75, v51);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v74)(&v80, v52, v53, v77, v55);
      sub_1C3F7E2CC(v54.n128_i64[0], v54.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 7:
      unint64_t v56 = (unint64_t)v4[1];
      uint64_t v75 = *v5;
      v80.n128_u64[0] = (unint64_t)v75;
      v80.n128_u64[1] = v56;
      uint64_t v57 = v67;
      uint64_t v58 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v80, &v81);
      __n128 v59 = v81;
      __n128 v80 = v81;
      uint64_t v60 = v78;
      __n128 v73 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 8);
      sub_1C3F7E324((uint64_t)v75, v56);
      v73(&v80, v57, v58, v77, v60);
      sub_1C3F7E2CC(v59.n128_i64[0], v59.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    default:
      unint64_t v22 = (unint64_t)v4[1];
      uint64_t v74 = *v5;
      v80.n128_u64[0] = (unint64_t)v74;
      v80.n128_u64[1] = v22;
      uint64_t v23 = AssociatedTypeWitness;
      uint64_t v24 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v80, &v81);
      __n128 v25 = v81;
      __n128 v80 = v81;
      uint64_t v26 = v78;
      __n128 v73 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 8);
      sub_1C3F7E324((uint64_t)v74, v22);
      v73(&v80, v23, v24, v77, v26);
      sub_1C3F7E2CC(v25.n128_i64[0], v25.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
  }
  return swift_dynamicCast();
}

uint64_t sub_1C40AA318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v38 = (char *)&v26 - v4;
  uint64_t v37 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v37);
  unint64_t v36 = (char *)&v26 - v5;
  uint64_t v35 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v35);
  __n128 v34 = (char *)&v26 - v6;
  uint64_t v33 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v33);
  uint64_t v32 = (char *)&v26 - v7;
  uint64_t v31 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v31);
  uint64_t v30 = (char *)&v26 - v8;
  uint64_t v29 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v29);
  uint64_t v28 = (char *)&v26 - v9;
  uint64_t v27 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v27);
  uint64_t v26 = (char *)&v26 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v11);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v12);
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v43.n128_u64[0] = v13;
  v43.n128_u64[1] = AssociatedConformanceWitness;
  __n128 v44 = &protocol witness table for Int;
  uint64_t v45 = MEMORY[0x1E4FBB560];
  uint64_t v15 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v15, (uint64_t)&v46);
  switch(v46)
  {
    case 0:
      unint64_t v17 = v2[1];
      v42.n128_u64[0] = *v2;
      uint64_t v16 = v42.n128_u64[0];
      v42.n128_u64[1] = v17;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v42, &v43);
      __n128 v18 = v43;
      __n128 v42 = v43;
      sub_1C3F7E324(v16, v17);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v18.n128_i64[0], v18.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 1:
      unint64_t v20 = v2[1];
      v42.n128_u64[0] = *v3;
      uint64_t v19 = v42.n128_u64[0];
      v42.n128_u64[1] = v20;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v42, &v43);
      __n128 v21 = v43;
      __n128 v42 = v43;
      sub_1C3F7E324(v19, v20);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v21.n128_i64[0], v21.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    default:
      unint64_t v23 = v2[1];
      v42.n128_u64[0] = *v3;
      uint64_t v22 = v42.n128_u64[0];
      v42.n128_u64[1] = v23;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v42, &v43);
      __n128 v24 = v43;
      __n128 v42 = v43;
      sub_1C3F7E324(v22, v23);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v24.n128_i64[0], v24.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
  }
  return swift_dynamicCast();
}

uint64_t sub_1C40AACB4(uint64_t a1, uint64_t a2)
{
  uint64_t v103 = a2;
  uint64_t v104 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v98 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v99 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  __n128 v97 = (char *)&v77 - v4;
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v95 = *(void *)(v5 - 8);
  uint64_t v96 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v94 = (char *)&v77 - v6;
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v92 = *(void *)(v7 - 8);
  uint64_t v93 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v91 = (char *)&v77 - v8;
  uint64_t v90 = swift_getAssociatedTypeWitness();
  uint64_t v89 = *(void *)(v90 - 8);
  MEMORY[0x1F4188790](v90);
  __n128 v88 = (char *)&v77 - v9;
  uint64_t v87 = swift_getAssociatedTypeWitness();
  uint64_t v86 = *(void *)(v87 - 8);
  MEMORY[0x1F4188790](v87);
  uint64_t v85 = (char *)&v77 - v10;
  uint64_t v84 = swift_getAssociatedTypeWitness();
  uint64_t v83 = *(void *)(v84 - 8);
  MEMORY[0x1F4188790](v84);
  v82 = (char *)&v77 - v11;
  uint64_t v81 = swift_getAssociatedTypeWitness();
  uint64_t v80 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](v81);
  uint64_t v79 = (char *)&v77 - v12;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v78 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v77 - v14;
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v77 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  __n128 v18 = (char *)&v77 - v17;
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v101 = v19;
  uint64_t v102 = v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v100 = (char *)&v77 - v21;
  uint64_t v22 = v2;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v106.n128_u64[0] = v23;
  v106.n128_u64[1] = AssociatedConformanceWitness;
  v107 = &protocol witness table for Int;
  uint64_t v108 = MEMORY[0x1E4FBB560];
  uint64_t v25 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v25, (uint64_t)&v109);
  switch(v109)
  {
    case 0:
      unint64_t v27 = v2[1];
      v105.n128_u64[0] = *v22;
      uint64_t v26 = v105.n128_u64[0];
      v105.n128_u64[1] = v27;
      swift_getAssociatedConformanceWitness();
      __n128 v28 = Ref.init(id:)(&v105, &v106);
      unint64_t v29 = v106.n128_u64[1];
      unint64_t v99 = v106.n128_u64[0];
      uint64_t v31 = v101;
      uint64_t v30 = v102;
      uint64_t v32 = v104;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v102 + 16))(v100, v104, v101, v28);
      sub_1C3F7E324(v26, v27);
      swift_dynamicCast();
      v105.n128_u64[0] = v99;
      v105.n128_u64[1] = v29;
      sub_1C407C610((uint64_t)v18, (uint64_t)&v105, v16);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v18, v16);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v32, v31);
    case 1:
      unint64_t v45 = v2[1];
      v105.n128_u64[0] = *v22;
      uint64_t v44 = v105.n128_u64[0];
      v105.n128_u64[1] = v45;
      swift_getAssociatedConformanceWitness();
      __n128 v46 = Ref.init(id:)(&v105, &v106);
      unint64_t v47 = v106.n128_u64[1];
      unint64_t v99 = v106.n128_u64[0];
      uint64_t v49 = v101;
      uint64_t v48 = v102;
      uint64_t v50 = v104;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v102 + 16))(v100, v104, v101, v46);
      sub_1C3F7E324(v44, v45);
      swift_dynamicCast();
      v105.n128_u64[0] = v99;
      v105.n128_u64[1] = v47;
      sub_1C407C610((uint64_t)v15, (uint64_t)&v105, v13);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v15, v13);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 8))(v50, v49);
    case 2:
      unint64_t v52 = v2[1];
      v105.n128_u64[0] = *v22;
      uint64_t v51 = v105.n128_u64[0];
      v105.n128_u64[1] = v52;
      uint64_t v53 = v81;
      swift_getAssociatedConformanceWitness();
      __n128 v54 = Ref.init(id:)(&v105, &v106);
      __n128 v55 = v106;
      uint64_t v40 = v101;
      uint64_t v39 = v102;
      uint64_t v41 = v104;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v102 + 16))(v100, v104, v101, v54);
      sub_1C3F7E324(v51, v52);
      uint64_t v56 = (uint64_t)v79;
      swift_dynamicCast();
      __n128 v105 = v55;
      sub_1C407C610(v56, (uint64_t)&v105, v53);
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v56, v53);
      goto LABEL_13;
    case 3:
      unint64_t v58 = v2[1];
      v105.n128_u64[0] = *v22;
      uint64_t v57 = v105.n128_u64[0];
      v105.n128_u64[1] = v58;
      uint64_t v36 = v84;
      swift_getAssociatedConformanceWitness();
      __n128 v59 = Ref.init(id:)(&v105, &v106);
      __n128 v60 = v106;
      uint64_t v40 = v101;
      uint64_t v39 = v102;
      uint64_t v41 = v104;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v102 + 16))(v100, v104, v101, v59);
      sub_1C3F7E324(v57, v58);
      uint64_t v42 = (uint64_t)v82;
      swift_dynamicCast();
      __n128 v105 = v60;
      sub_1C407C610(v42, (uint64_t)&v105, v36);
      uint64_t v43 = v83;
      goto LABEL_12;
    case 4:
      unint64_t v62 = v2[1];
      v105.n128_u64[0] = *v22;
      uint64_t v61 = v105.n128_u64[0];
      v105.n128_u64[1] = v62;
      uint64_t v36 = v87;
      swift_getAssociatedConformanceWitness();
      __n128 v63 = Ref.init(id:)(&v105, &v106);
      __n128 v64 = v106;
      uint64_t v40 = v101;
      uint64_t v39 = v102;
      uint64_t v41 = v104;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v102 + 16))(v100, v104, v101, v63);
      sub_1C3F7E324(v61, v62);
      uint64_t v42 = (uint64_t)v85;
      swift_dynamicCast();
      __n128 v105 = v64;
      sub_1C407C610(v42, (uint64_t)&v105, v36);
      uint64_t v43 = v86;
      goto LABEL_12;
    case 5:
      unint64_t v66 = v2[1];
      v105.n128_u64[0] = *v22;
      uint64_t v65 = v105.n128_u64[0];
      v105.n128_u64[1] = v66;
      uint64_t v36 = v90;
      swift_getAssociatedConformanceWitness();
      __n128 v67 = Ref.init(id:)(&v105, &v106);
      __n128 v68 = v106;
      uint64_t v40 = v101;
      uint64_t v39 = v102;
      uint64_t v41 = v104;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v102 + 16))(v100, v104, v101, v67);
      sub_1C3F7E324(v65, v66);
      uint64_t v42 = (uint64_t)v88;
      swift_dynamicCast();
      __n128 v105 = v68;
      sub_1C407C610(v42, (uint64_t)&v105, v36);
      uint64_t v43 = v89;
      goto LABEL_12;
    case 6:
      unint64_t v70 = v2[1];
      v105.n128_u64[0] = *v22;
      uint64_t v69 = v105.n128_u64[0];
      v105.n128_u64[1] = v70;
      uint64_t v36 = v93;
      swift_getAssociatedConformanceWitness();
      __n128 v71 = Ref.init(id:)(&v105, &v106);
      __n128 v72 = v106;
      uint64_t v40 = v101;
      uint64_t v39 = v102;
      uint64_t v41 = v104;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v102 + 16))(v100, v104, v101, v71);
      sub_1C3F7E324(v69, v70);
      uint64_t v42 = (uint64_t)v91;
      swift_dynamicCast();
      __n128 v105 = v72;
      sub_1C407C610(v42, (uint64_t)&v105, v36);
      uint64_t v43 = v92;
      goto LABEL_12;
    case 7:
      unint64_t v74 = v2[1];
      v105.n128_u64[0] = *v22;
      uint64_t v73 = v105.n128_u64[0];
      v105.n128_u64[1] = v74;
      uint64_t v36 = v96;
      swift_getAssociatedConformanceWitness();
      __n128 v75 = Ref.init(id:)(&v105, &v106);
      __n128 v76 = v106;
      uint64_t v40 = v101;
      uint64_t v39 = v102;
      uint64_t v41 = v104;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v102 + 16))(v100, v104, v101, v75);
      sub_1C3F7E324(v73, v74);
      uint64_t v42 = (uint64_t)v94;
      swift_dynamicCast();
      __n128 v105 = v76;
      sub_1C407C610(v42, (uint64_t)&v105, v36);
      uint64_t v43 = v95;
      goto LABEL_12;
    default:
      unint64_t v35 = v2[1];
      v105.n128_u64[0] = *v22;
      uint64_t v34 = v105.n128_u64[0];
      v105.n128_u64[1] = v35;
      uint64_t v36 = v99;
      swift_getAssociatedConformanceWitness();
      __n128 v37 = Ref.init(id:)(&v105, &v106);
      __n128 v38 = v106;
      uint64_t v40 = v101;
      uint64_t v39 = v102;
      uint64_t v41 = v104;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v102 + 16))(v100, v104, v101, v37);
      sub_1C3F7E324(v34, v35);
      uint64_t v42 = (uint64_t)v97;
      swift_dynamicCast();
      __n128 v105 = v38;
      sub_1C407C610(v42, (uint64_t)&v105, v36);
      uint64_t v43 = v98;
LABEL_12:
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v36);
LABEL_13:
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v41, v40);
  }
}

uint64_t SharedTagged_8.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C40AA318);
}

uint64_t sub_1C40ABB14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for SharedTagged_8();
  swift_retain();
  sub_1C40F1E7C(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_8, (uint64_t)&associated type descriptor for Tagged_8.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40AACB4);
  return swift_release();
}

uint64_t SharedTagged_8.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1E7C(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_8, (uint64_t)&associated type descriptor for Tagged_8.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40AACB4);
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
  return v5(a1, AssociatedTypeWitness);
}

void (*SharedTagged_8.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_8.subscript.getter(a2, a3);
  return sub_1C40ABD58;
}

void sub_1C40ABD58(uint64_t **a1, char a2)
{
}

uint64_t SharedTagged_8.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C40AA318);
}

uint64_t SharedTagged_8.visitReferences(_:)(void *a1)
{
  v14.n128_u64[0] = swift_getAssociatedTypeWitness();
  v14.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v15 = &protocol witness table for Int;
  uint64_t v16 = MEMORY[0x1E4FBB560];
  uint64_t v3 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v3, (uint64_t)&v17);
  uint64_t v4 = a1[4];
  uint64_t v12 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  unint64_t v5 = v1[1];
  v13.n128_u64[0] = *v1;
  uint64_t v6 = v13.n128_u64[0];
  v13.n128_u64[1] = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v13, &v14);
  __n128 v9 = v14;
  __n128 v13 = v14;
  size_t v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1C3F7E324(v6, v5);
  v10(&v13, AssociatedTypeWitness, AssociatedConformanceWitness, v12, v4);
  return sub_1C3F7E2CC(v9.n128_i64[0], v9.n128_u64[1]);
}

uint64_t SharedTagged_8.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))SharedTagged_8.init(_:id:), a3);
}

uint64_t SharedTagged_8.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))SharedTagged_8.copy(renamingReferences:));
}

uint64_t SharedTagged_8.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t static SharedTagged_8.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_8);
}

uint64_t SharedTagged_8.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))SharedTagged_8.hash(into:));
}

uint64_t sub_1C40AC204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))SharedTagged_8.hash(into:));
}

uint64_t sub_1C40AC21C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_8.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t SharedTagged_8.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C40AC24C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return SharedTagged_8.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t SharedTagged_8.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40E2814(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_8, 0, a4);
}

uint64_t sub_1C40AC29C(uint64_t a1, uint64_t a2)
{
  return SharedTagged_8.encode(to:)(a1, a2);
}

uint64_t SharedTagged_8.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C4086E34(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_8, (uint64_t)&associated type descriptor for Tagged_8.Enum, (uint64_t)&associated conformance descriptor for Tagged_8.Tagged_8.Enum: RawRepresentable);
}

uint64_t (*SharedTagged_9.id.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_9.tag.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C40EA434(a1, a2);
}

uint64_t SharedTagged_9.tag.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C40EA528(a1, a2);
}

uint64_t (*SharedTagged_9.tag.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_9.init(_:identity:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))SharedTagged_9.init(_:id:));
}

{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))SharedTagged_9.init(_:id:));
}

uint64_t SharedTagged_9.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1C40EA66C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_9, a5);
}

{
  return sub_1C40EA7CC(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_9, a5);
}

uint64_t SharedTagged_9.init<A>(_:_:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  __n128 v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 0;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  __n128 v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 1;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  __n128 v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 2;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  __n128 v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 3;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  __n128 v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 4;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  __n128 v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 5;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  __n128 v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 6;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  __n128 v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 7;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  __n128 v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 8;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

uint64_t SharedTagged_9.init<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 0;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 1;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 2;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 3;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 4;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 5;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 6;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 7;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  uint64_t v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 8;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

uint64_t SharedTagged_9.init<A>(_:_:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X8>)
{
  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 0;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 1;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 2;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 3;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 4;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 5;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 6;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 7;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  uint64_t v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  uint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 8;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_9();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

uint64_t SharedTagged_9.init(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for WeakTagged_9() + 36);
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for SharedTagged_9() + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v4, v3, v5);
}

uint64_t SharedTagged_9.tagged1.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  else
  {
    uint64_t v8 = *v1;
    unint64_t v9 = v2[1];
    v10.n128_u64[0] = v8;
    v10.n128_u64[1] = v9;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v6 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t SharedTagged_9.tagged2.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 1)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_9.tagged3.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 2)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_9.tagged4.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 3)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_9.tagged5.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 4)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_9.tagged6.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 5)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_9.tagged7.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 6)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_9.tagged8.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 7)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_9.tagged9.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C40E4650((void (*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))Ref.init(id:), a1);
}

uint64_t SharedTagged_9.unknown.getter@<X0>(long long *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] >= 9)
  {
    uint64_t v7 = *v1;
    unint64_t v8 = v2[1];
    v10.n128_u64[0] = v7;
    v10.n128_u64[1] = v8;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    __n128 v9 = v11;
    uint64_t result = sub_1C3F7E324(v7, v8);
    long long v6 = (__int128)v9;
  }
  else
  {
    long long v6 = xmmword_1C449BDD0;
  }
  *a1 = v6;
  return result;
}

uint64_t SharedTagged_9.any.getter@<X0>(__n128 *a1@<X8>)
{
  v2 = v1;
  v8.n128_u64[0] = swift_getAssociatedTypeWitness();
  v8.n128_u64[1] = swift_getAssociatedConformanceWitness();
  __n128 v9 = &protocol witness table for Int;
  uint64_t v10 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  uint64_t v5 = *v1;
  unint64_t v6 = v2[1];
  v8.n128_u64[0] = v5;
  v8.n128_u64[1] = v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  a1[1].n128_u64[1] = type metadata accessor for Ref();
  a1[2].n128_u64[0] = swift_getWitnessTable();
  Ref.init(id:)(&v8, a1);
  return sub_1C3F7E324(v5, v6);
}

uint64_t SharedTagged_9.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v85 = a2;
  uint64_t v86 = a3;
  uint64_t v84 = a1;
  uint64_t v87 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v83 = (uint64_t *)((char *)&v68 - v5);
  uint64_t v74 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v74);
  v82 = (uint64_t *)((char *)&v68 - v6);
  uint64_t v73 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v73);
  uint64_t v81 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v68 - v7);
  uint64_t v72 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v72);
  uint64_t v80 = (char *)&v68 - v8;
  uint64_t v71 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v71);
  uint64_t v79 = (char *)&v68 - v9;
  uint64_t v70 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v70);
  uint64_t v78 = (char *)&v68 - v10;
  uint64_t v69 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v69);
  uint64_t v77 = (char *)&v68 - v11;
  uint64_t v68 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v68);
  __n128 v76 = (char *)&v68 - v12;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v13);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v14);
  uint64_t v15 = v4;
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v89.n128_u64[0] = v16;
  v89.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v90 = &protocol witness table for Int;
  uint64_t v91 = MEMORY[0x1E4FBB560];
  uint64_t v18 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v18, (uint64_t)&v92);
  switch(v92)
  {
    case 0:
      uint64_t v19 = *v4;
      v82 = v4[1];
      uint64_t v83 = v19;
      v88.n128_u64[0] = (unint64_t)v19;
      v88.n128_u64[1] = (unint64_t)v82;
      uint64_t v20 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v88, &v89);
      __n128 v21 = v89;
      __n128 v88 = v89;
      uint64_t v22 = v86;
      uint64_t v81 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 8);
      sub_1C3F7E324((uint64_t)v83, (unint64_t)v82);
      v81(&v88, v14, v20, v85, v22);
      sub_1C3F7E2CC(v21.n128_i64[0], v21.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 1:
      unint64_t v28 = *v4;
      v82 = v4[1];
      uint64_t v83 = v28;
      v88.n128_u64[0] = (unint64_t)v28;
      v88.n128_u64[1] = (unint64_t)v82;
      uint64_t v29 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v88, &v89);
      __n128 v30 = v89;
      __n128 v88 = v89;
      uint64_t v31 = v86;
      uint64_t v81 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 8);
      sub_1C3F7E324((uint64_t)v83, (unint64_t)v82);
      v81(&v88, v13, v29, v85, v31);
      sub_1C3F7E2CC(v30.n128_i64[0], v30.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 2:
      unint64_t v32 = (unint64_t)v4[1];
      uint64_t v83 = *v15;
      v88.n128_u64[0] = (unint64_t)v83;
      v88.n128_u64[1] = v32;
      uint64_t v33 = v68;
      uint64_t v34 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v88, &v89);
      __n128 v35 = v89;
      __n128 v88 = v89;
      uint64_t v36 = v86;
      v82 = *(uint64_t **)(v86 + 8);
      sub_1C3F7E324((uint64_t)v83, v32);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v82)(&v88, v33, v34, v85, v36);
      sub_1C3F7E2CC(v35.n128_i64[0], v35.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 3:
      unint64_t v37 = (unint64_t)v4[1];
      uint64_t v83 = *v15;
      v88.n128_u64[0] = (unint64_t)v83;
      v88.n128_u64[1] = v37;
      uint64_t v38 = v69;
      uint64_t v39 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v88, &v89);
      __n128 v40 = v89;
      __n128 v88 = v89;
      uint64_t v41 = v86;
      v82 = *(uint64_t **)(v86 + 8);
      sub_1C3F7E324((uint64_t)v83, v37);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v82)(&v88, v38, v39, v85, v41);
      sub_1C3F7E2CC(v40.n128_i64[0], v40.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 4:
      unint64_t v42 = (unint64_t)v4[1];
      uint64_t v83 = *v15;
      v88.n128_u64[0] = (unint64_t)v83;
      v88.n128_u64[1] = v42;
      uint64_t v43 = v70;
      uint64_t v44 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v88, &v89);
      __n128 v45 = v89;
      __n128 v88 = v89;
      uint64_t v46 = v86;
      v82 = *(uint64_t **)(v86 + 8);
      sub_1C3F7E324((uint64_t)v83, v42);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v82)(&v88, v43, v44, v85, v46);
      sub_1C3F7E2CC(v45.n128_i64[0], v45.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 5:
      unint64_t v47 = (unint64_t)v4[1];
      uint64_t v83 = *v15;
      v88.n128_u64[0] = (unint64_t)v83;
      v88.n128_u64[1] = v47;
      uint64_t v48 = v71;
      uint64_t v49 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v88, &v89);
      __n128 v50 = v89;
      __n128 v88 = v89;
      uint64_t v51 = v86;
      v82 = *(uint64_t **)(v86 + 8);
      sub_1C3F7E324((uint64_t)v83, v47);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v82)(&v88, v48, v49, v85, v51);
      sub_1C3F7E2CC(v50.n128_i64[0], v50.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 6:
      unint64_t v52 = (unint64_t)v4[1];
      uint64_t v83 = *v15;
      v88.n128_u64[0] = (unint64_t)v83;
      v88.n128_u64[1] = v52;
      uint64_t v53 = v72;
      uint64_t v54 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v88, &v89);
      __n128 v55 = v89;
      __n128 v88 = v89;
      uint64_t v56 = v86;
      v82 = *(uint64_t **)(v86 + 8);
      sub_1C3F7E324((uint64_t)v83, v52);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v82)(&v88, v53, v54, v85, v56);
      sub_1C3F7E2CC(v55.n128_i64[0], v55.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 7:
      unint64_t v57 = (unint64_t)v4[1];
      uint64_t v83 = *v15;
      v88.n128_u64[0] = (unint64_t)v83;
      v88.n128_u64[1] = v57;
      uint64_t v58 = v73;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v88, &v89);
      __n128 v60 = v89;
      __n128 v88 = v89;
      uint64_t v61 = v86;
      v82 = *(uint64_t **)(v86 + 8);
      sub_1C3F7E324((uint64_t)v83, v57);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v82)(&v88, v58, v59, v85, v61);
      sub_1C3F7E2CC(v60.n128_i64[0], v60.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 8:
      unint64_t v62 = (unint64_t)v4[1];
      uint64_t v83 = *v15;
      v88.n128_u64[0] = (unint64_t)v83;
      v88.n128_u64[1] = v62;
      uint64_t v63 = v74;
      uint64_t v64 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v88, &v89);
      __n128 v65 = v89;
      __n128 v88 = v89;
      uint64_t v66 = v86;
      uint64_t v81 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 8);
      sub_1C3F7E324((uint64_t)v83, v62);
      v81(&v88, v63, v64, v85, v66);
      sub_1C3F7E2CC(v65.n128_i64[0], v65.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    default:
      unint64_t v23 = (unint64_t)v4[1];
      v82 = *v15;
      v88.n128_u64[0] = (unint64_t)v82;
      v88.n128_u64[1] = v23;
      uint64_t v24 = AssociatedTypeWitness;
      uint64_t v25 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v88, &v89);
      __n128 v26 = v89;
      __n128 v88 = v89;
      uint64_t v27 = v86;
      uint64_t v81 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 8);
      sub_1C3F7E324((uint64_t)v82, v23);
      v81(&v88, v24, v25, v85, v27);
      sub_1C3F7E2CC(v26.n128_i64[0], v26.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
  }
  return swift_dynamicCast();
}

uint64_t sub_1C40B3230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v41 = (char *)&v27 - v3;
  uint64_t v40 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v40);
  uint64_t v39 = (char *)&v27 - v4;
  uint64_t v38 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v38);
  unint64_t v37 = (char *)&v27 - v5;
  uint64_t v36 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v36);
  __n128 v35 = (char *)&v27 - v6;
  uint64_t v34 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v34);
  uint64_t v33 = (char *)&v27 - v7;
  uint64_t v32 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v32);
  uint64_t v31 = (char *)&v27 - v8;
  uint64_t v30 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v30);
  uint64_t v29 = (char *)&v27 - v9;
  uint64_t v28 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v28);
  uint64_t v27 = (char *)&v27 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v11);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v12);
  uint64_t v13 = v2;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v46.n128_u64[0] = v14;
  v46.n128_u64[1] = AssociatedConformanceWitness;
  unint64_t v47 = &protocol witness table for Int;
  uint64_t v48 = MEMORY[0x1E4FBB560];
  uint64_t v16 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v16, (uint64_t)&v49);
  switch(v49)
  {
    case 0:
      unint64_t v18 = v2[1];
      v45.n128_u64[0] = *v13;
      uint64_t v17 = v45.n128_u64[0];
      v45.n128_u64[1] = v18;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v45, &v46);
      __n128 v19 = v46;
      __n128 v45 = v46;
      sub_1C3F7E324(v17, v18);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v19.n128_i64[0], v19.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 1:
      unint64_t v21 = v2[1];
      v45.n128_u64[0] = *v2;
      uint64_t v20 = v45.n128_u64[0];
      v45.n128_u64[1] = v21;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v45, &v46);
      __n128 v22 = v46;
      __n128 v45 = v46;
      sub_1C3F7E324(v20, v21);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v22.n128_i64[0], v22.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    default:
      unint64_t v24 = v2[1];
      v45.n128_u64[0] = *v13;
      uint64_t v23 = v45.n128_u64[0];
      v45.n128_u64[1] = v24;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v45, &v46);
      __n128 v25 = v46;
      __n128 v45 = v46;
      sub_1C3F7E324(v23, v24);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v25.n128_i64[0], v25.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
  }
  return swift_dynamicCast();
}

uint64_t sub_1C40B3CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v110 = a2;
  uint64_t v111 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v105 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v106 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v104 = (char *)&v80 - v4;
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v102 = *(void *)(v5 - 8);
  uint64_t v103 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v101 = (char *)&v80 - v6;
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v99 = *(void *)(v7 - 8);
  uint64_t v100 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v98 = (char *)&v80 - v8;
  uint64_t v97 = swift_getAssociatedTypeWitness();
  uint64_t v96 = *(void *)(v97 - 8);
  MEMORY[0x1F4188790](v97);
  uint64_t v95 = (char *)&v80 - v9;
  uint64_t v94 = swift_getAssociatedTypeWitness();
  uint64_t v93 = *(void *)(v94 - 8);
  MEMORY[0x1F4188790](v94);
  uint64_t v92 = (char *)&v80 - v10;
  uint64_t v91 = swift_getAssociatedTypeWitness();
  uint64_t v90 = *(void *)(v91 - 8);
  MEMORY[0x1F4188790](v91);
  __n128 v89 = (char *)&v80 - v11;
  uint64_t v88 = swift_getAssociatedTypeWitness();
  uint64_t v87 = *(void *)(v88 - 8);
  MEMORY[0x1F4188790](v88);
  uint64_t v86 = (char *)&v80 - v12;
  uint64_t v85 = swift_getAssociatedTypeWitness();
  uint64_t v84 = *(void *)(v85 - 8);
  MEMORY[0x1F4188790](v85);
  uint64_t v83 = (char *)&v80 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v82 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v80 - v15;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v81 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  __n128 v19 = (char *)&v80 - v18;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v108 = v20;
  uint64_t v109 = v21;
  MEMORY[0x1F4188790](v20);
  v107 = (char *)&v80 - v22;
  uint64_t v23 = v2;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v113.n128_u64[0] = v24;
  v113.n128_u64[1] = AssociatedConformanceWitness;
  v114 = &protocol witness table for Int;
  uint64_t v115 = MEMORY[0x1E4FBB560];
  uint64_t v26 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v26, (uint64_t)&v116);
  switch(v116)
  {
    case 0:
      unint64_t v28 = v2[1];
      v112.n128_u64[0] = *v23;
      uint64_t v27 = v112.n128_u64[0];
      v112.n128_u64[1] = v28;
      swift_getAssociatedConformanceWitness();
      __n128 v29 = Ref.init(id:)(&v112, &v113);
      unint64_t v30 = v113.n128_u64[1];
      unint64_t v106 = v113.n128_u64[0];
      uint64_t v32 = v108;
      uint64_t v31 = v109;
      uint64_t v33 = v111;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v109 + 16))(v107, v111, v108, v29);
      sub_1C3F7E324(v27, v28);
      swift_dynamicCast();
      v112.n128_u64[0] = v106;
      v112.n128_u64[1] = v30;
      sub_1C407C610((uint64_t)v19, (uint64_t)&v112, v17);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v19, v17);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v33, v32);
    case 1:
      unint64_t v46 = v2[1];
      v112.n128_u64[0] = *v23;
      uint64_t v45 = v112.n128_u64[0];
      v112.n128_u64[1] = v46;
      swift_getAssociatedConformanceWitness();
      __n128 v47 = Ref.init(id:)(&v112, &v113);
      unint64_t v48 = v113.n128_u64[1];
      unint64_t v106 = v113.n128_u64[0];
      uint64_t v50 = v108;
      uint64_t v49 = v109;
      uint64_t v51 = v111;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v109 + 16))(v107, v111, v108, v47);
      sub_1C3F7E324(v45, v46);
      swift_dynamicCast();
      v112.n128_u64[0] = v106;
      v112.n128_u64[1] = v48;
      sub_1C407C610((uint64_t)v16, (uint64_t)&v112, v14);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v16, v14);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v51, v50);
    case 2:
      unint64_t v53 = v2[1];
      v112.n128_u64[0] = *v23;
      uint64_t v52 = v112.n128_u64[0];
      v112.n128_u64[1] = v53;
      uint64_t v37 = v85;
      swift_getAssociatedConformanceWitness();
      __n128 v54 = Ref.init(id:)(&v112, &v113);
      __n128 v55 = v113;
      uint64_t v41 = v108;
      uint64_t v40 = v109;
      uint64_t v42 = v111;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v109 + 16))(v107, v111, v108, v54);
      sub_1C3F7E324(v52, v53);
      uint64_t v43 = (uint64_t)v83;
      swift_dynamicCast();
      __n128 v112 = v55;
      sub_1C407C610(v43, (uint64_t)&v112, v37);
      uint64_t v44 = v84;
      goto LABEL_13;
    case 3:
      unint64_t v57 = v2[1];
      v112.n128_u64[0] = *v23;
      uint64_t v56 = v112.n128_u64[0];
      v112.n128_u64[1] = v57;
      uint64_t v37 = v88;
      swift_getAssociatedConformanceWitness();
      __n128 v58 = Ref.init(id:)(&v112, &v113);
      __n128 v59 = v113;
      uint64_t v41 = v108;
      uint64_t v40 = v109;
      uint64_t v42 = v111;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v109 + 16))(v107, v111, v108, v58);
      sub_1C3F7E324(v56, v57);
      uint64_t v43 = (uint64_t)v86;
      swift_dynamicCast();
      __n128 v112 = v59;
      sub_1C407C610(v43, (uint64_t)&v112, v37);
      uint64_t v44 = v87;
      goto LABEL_13;
    case 4:
      unint64_t v61 = v2[1];
      v112.n128_u64[0] = *v23;
      uint64_t v60 = v112.n128_u64[0];
      v112.n128_u64[1] = v61;
      uint64_t v37 = v91;
      swift_getAssociatedConformanceWitness();
      __n128 v62 = Ref.init(id:)(&v112, &v113);
      __n128 v63 = v113;
      uint64_t v41 = v108;
      uint64_t v40 = v109;
      uint64_t v42 = v111;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v109 + 16))(v107, v111, v108, v62);
      sub_1C3F7E324(v60, v61);
      uint64_t v43 = (uint64_t)v89;
      swift_dynamicCast();
      __n128 v112 = v63;
      sub_1C407C610(v43, (uint64_t)&v112, v37);
      uint64_t v44 = v90;
      goto LABEL_13;
    case 5:
      unint64_t v65 = v2[1];
      v112.n128_u64[0] = *v23;
      uint64_t v64 = v112.n128_u64[0];
      v112.n128_u64[1] = v65;
      uint64_t v37 = v94;
      swift_getAssociatedConformanceWitness();
      __n128 v66 = Ref.init(id:)(&v112, &v113);
      __n128 v67 = v113;
      uint64_t v41 = v108;
      uint64_t v40 = v109;
      uint64_t v42 = v111;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v109 + 16))(v107, v111, v108, v66);
      sub_1C3F7E324(v64, v65);
      uint64_t v43 = (uint64_t)v92;
      swift_dynamicCast();
      __n128 v112 = v67;
      sub_1C407C610(v43, (uint64_t)&v112, v37);
      uint64_t v44 = v93;
      goto LABEL_13;
    case 6:
      unint64_t v69 = v2[1];
      v112.n128_u64[0] = *v23;
      uint64_t v68 = v112.n128_u64[0];
      v112.n128_u64[1] = v69;
      uint64_t v37 = v97;
      swift_getAssociatedConformanceWitness();
      __n128 v70 = Ref.init(id:)(&v112, &v113);
      __n128 v71 = v113;
      uint64_t v41 = v108;
      uint64_t v40 = v109;
      uint64_t v42 = v111;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v109 + 16))(v107, v111, v108, v70);
      sub_1C3F7E324(v68, v69);
      uint64_t v43 = (uint64_t)v95;
      swift_dynamicCast();
      __n128 v112 = v71;
      sub_1C407C610(v43, (uint64_t)&v112, v37);
      uint64_t v44 = v96;
      goto LABEL_13;
    case 7:
      unint64_t v73 = v2[1];
      v112.n128_u64[0] = *v23;
      uint64_t v72 = v112.n128_u64[0];
      v112.n128_u64[1] = v73;
      uint64_t v37 = v100;
      swift_getAssociatedConformanceWitness();
      __n128 v74 = Ref.init(id:)(&v112, &v113);
      __n128 v75 = v113;
      uint64_t v41 = v108;
      uint64_t v40 = v109;
      uint64_t v42 = v111;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v109 + 16))(v107, v111, v108, v74);
      sub_1C3F7E324(v72, v73);
      uint64_t v43 = (uint64_t)v98;
      swift_dynamicCast();
      __n128 v112 = v75;
      sub_1C407C610(v43, (uint64_t)&v112, v37);
      uint64_t v44 = v99;
      goto LABEL_13;
    case 8:
      unint64_t v77 = v2[1];
      v112.n128_u64[0] = *v23;
      uint64_t v76 = v112.n128_u64[0];
      v112.n128_u64[1] = v77;
      uint64_t v37 = v103;
      swift_getAssociatedConformanceWitness();
      __n128 v78 = Ref.init(id:)(&v112, &v113);
      __n128 v79 = v113;
      uint64_t v41 = v108;
      uint64_t v40 = v109;
      uint64_t v42 = v111;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v109 + 16))(v107, v111, v108, v78);
      sub_1C3F7E324(v76, v77);
      uint64_t v43 = (uint64_t)v101;
      swift_dynamicCast();
      __n128 v112 = v79;
      sub_1C407C610(v43, (uint64_t)&v112, v37);
      uint64_t v44 = v102;
      goto LABEL_13;
    default:
      unint64_t v36 = v2[1];
      v112.n128_u64[0] = *v23;
      uint64_t v35 = v112.n128_u64[0];
      v112.n128_u64[1] = v36;
      uint64_t v37 = v106;
      swift_getAssociatedConformanceWitness();
      __n128 v38 = Ref.init(id:)(&v112, &v113);
      __n128 v39 = v113;
      uint64_t v41 = v108;
      uint64_t v40 = v109;
      uint64_t v42 = v111;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v109 + 16))(v107, v111, v108, v38);
      sub_1C3F7E324(v35, v36);
      uint64_t v43 = (uint64_t)v104;
      swift_dynamicCast();
      __n128 v112 = v39;
      sub_1C407C610(v43, (uint64_t)&v112, v37);
      uint64_t v44 = v105;
LABEL_13:
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v37);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v42, v41);
  }
}

uint64_t SharedTagged_9.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C40B3230);
}

uint64_t sub_1C40B4C70(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for SharedTagged_9();
  swift_retain();
  sub_1C40F1E7C(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_9, (uint64_t)&associated type descriptor for Tagged_9.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40B3CB4);
  return swift_release();
}

uint64_t SharedTagged_9.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1E7C(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_9, (uint64_t)&associated type descriptor for Tagged_9.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40B3CB4);
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
  return v5(a1, AssociatedTypeWitness);
}

void (*SharedTagged_9.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_9.subscript.getter(a2, a3);
  return sub_1C40B4EB4;
}

void sub_1C40B4EB4(uint64_t **a1, char a2)
{
}

uint64_t SharedTagged_9.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C40B3230);
}

uint64_t SharedTagged_9.visitReferences(_:)(void *a1)
{
  v14.n128_u64[0] = swift_getAssociatedTypeWitness();
  v14.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v15 = &protocol witness table for Int;
  uint64_t v16 = MEMORY[0x1E4FBB560];
  uint64_t v3 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v3, (uint64_t)&v17);
  uint64_t v4 = a1[4];
  uint64_t v12 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  unint64_t v5 = v1[1];
  v13.n128_u64[0] = *v1;
  uint64_t v6 = v13.n128_u64[0];
  v13.n128_u64[1] = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v13, &v14);
  __n128 v9 = v14;
  __n128 v13 = v14;
  size_t v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1C3F7E324(v6, v5);
  v10(&v13, AssociatedTypeWitness, AssociatedConformanceWitness, v12, v4);
  return sub_1C3F7E2CC(v9.n128_i64[0], v9.n128_u64[1]);
}

uint64_t SharedTagged_9.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))SharedTagged_9.init(_:id:), a3);
}

uint64_t SharedTagged_9.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))SharedTagged_9.copy(renamingReferences:));
}

uint64_t SharedTagged_9.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t static SharedTagged_9.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_9);
}

uint64_t SharedTagged_9.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))SharedTagged_9.hash(into:));
}

uint64_t sub_1C40B53A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))SharedTagged_9.hash(into:));
}

uint64_t sub_1C40B53BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_9.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t SharedTagged_9.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C40B53EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return SharedTagged_9.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t SharedTagged_9.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40E9094(a1, a2, a3, type metadata accessor for SharedTagged_9, 0, a4);
}

uint64_t sub_1C40B543C(uint64_t a1, uint64_t a2)
{
  return SharedTagged_9.encode(to:)(a1, a2);
}

uint64_t SharedTagged_9.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C4086E34(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_9, (uint64_t)&associated type descriptor for Tagged_9.Enum, (uint64_t)&associated conformance descriptor for Tagged_9.Tagged_9.Enum: RawRepresentable);
}

uint64_t (*SharedTagged_10.id.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_10.tag.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C40EA434(a1, a2);
}

uint64_t SharedTagged_10.tag.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C40EA528(a1, a2);
}

uint64_t (*SharedTagged_10.tag.modify())()
{
  return nullsub_1;
}

uint64_t SharedTagged_10.init(_:identity:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))SharedTagged_10.init(_:id:));
}

{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))SharedTagged_10.init(_:id:));
}

uint64_t SharedTagged_10.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1C40EA66C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_10, a5);
}

{
  return sub_1C40EA7CC(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_10, a5);
}

uint64_t SharedTagged_10.init<A>(_:_:)@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 0;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 1;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 2;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 3;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 4;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 5;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 6;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 7;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 8;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  long long v20;
  long long v21;
  _UNKNOWN **v22;
  uint64_t v23;

  uint64_t v18 = a2;
  uint64_t v19 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v16 - v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v21 = AssociatedTypeWitness;
  *((void *)&v21 + 1) = AssociatedConformanceWitness;
  uint64_t v22 = &protocol witness table for Int;
  uint64_t v23 = MEMORY[0x1E4FBB560];
  uint64_t v7 = type metadata accessor for CRExtensible();
  uint64_t v16 = *(void *)(v7 - 8);
  uint64_t v17 = v7;
  MEMORY[0x1F4188790](v7);
  __n128 v9 = (char *)&v16 - v8;
  long long v20 = xmmword_1C449BDD0;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v11 = v18;
  sub_1C40573E4(v19, v10, (uint64_t *)&v21);
  swift_release();
  *(_OWORD *)uint64_t v11 = v21;
  *(void *)&long long v21 = 9;
  sub_1C44973A8();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v19, v10);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v5, AssociatedTypeWitness);
    uint64_t v14 = v17;
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v11[*(int *)(v15 + 36)], v9, v14);
  }
  return result;
}

uint64_t SharedTagged_10.init<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  __n128 v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 0;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  __n128 v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 1;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  __n128 v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 2;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  __n128 v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 3;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  __n128 v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 4;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  __n128 v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 5;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  __n128 v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 6;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  __n128 v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 7;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  __n128 v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 8;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t AssociatedConformanceWitness;
  char *v23;
  long long v24;
  _UNKNOWN **v25;
  uint64_t v26;

  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v24 = AssociatedTypeWitness;
  *((void *)&v24 + 1) = AssociatedConformanceWitness;
  __n128 v25 = &protocol witness table for Int;
  uint64_t v26 = MEMORY[0x1E4FBB560];
  uint64_t v9 = type metadata accessor for CRExtensible();
  uint64_t v18 = *(void *)(v9 - 8);
  uint64_t v19 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v20 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  sub_1C4055CC4(a2);
  swift_release();
  uint64_t v12 = v23;
  uint64_t v13 = type metadata accessor for Capsule();
  uint64_t v21 = a2;
  Capsule<>.rootID.getter((uint64_t *)&v24);
  *(_OWORD *)uint64_t v12 = v24;
  *(void *)&long long v24 = 9;
  sub_1C44973A8();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v8, AssociatedTypeWitness);
    uint64_t v16 = v19;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v12[*(int *)(v17 + 36)], v11, v16);
  }
  return result;
}

uint64_t SharedTagged_10.init<A>(_:_:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X8>)
{
  __n128 v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  unint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 0;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  __n128 v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  unint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 1;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  __n128 v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  unint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 2;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  __n128 v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  unint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 3;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  __n128 v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  unint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 4;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  __n128 v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  unint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 5;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  __n128 v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  unint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 6;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  __n128 v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  unint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 7;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  __n128 v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  unint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 8;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  long long v29;
  _UNKNOWN **v30;
  uint64_t v31;

  __n128 v25 = a4;
  uint64_t v26 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&long long v29 = AssociatedTypeWitness;
  *((void *)&v29 + 1) = AssociatedConformanceWitness;
  unint64_t v30 = &protocol witness table for Int;
  uint64_t v31 = MEMORY[0x1E4FBB560];
  uint64_t v10 = type metadata accessor for CRExtensible();
  uint64_t v21 = *(void *)(v10 - 8);
  uint64_t v22 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v14 = *a3;
  unint64_t v13 = a3[1];
  uint64_t v23 = a1;
  uint64_t v27 = v14;
  unint64_t v28 = v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_retain();
  uint64_t v16 = v25;
  sub_1C40573E4(v26, v15, (uint64_t *)&v29);
  swift_release();
  sub_1C3F7E2CC(v14, v13);
  *(_OWORD *)uint64_t v16 = v29;
  *(void *)&long long v29 = 9;
  sub_1C44973A8();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v9, 1, AssociatedTypeWitness);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v26, v15);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v12, v9, AssociatedTypeWitness);
    uint64_t v19 = v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = type metadata accessor for SharedTagged_10();
    return (*(uint64_t (**)(char *, char *, uint64_t))(v21 + 32))(&v16[*(int *)(v20 + 36)], v12, v19);
  }
  return result;
}

uint64_t SharedTagged_10.init(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for WeakTagged_10() + 36);
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for SharedTagged_10() + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v4, v3, v5);
}

uint64_t SharedTagged_10.tagged1.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  else
  {
    uint64_t v8 = *v1;
    unint64_t v9 = v2[1];
    v10.n128_u64[0] = v8;
    v10.n128_u64[1] = v9;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v6 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t SharedTagged_10.tagged2.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 1)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_10.tagged3.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 2)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_10.tagged4.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 3)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_10.tagged5.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 4)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_10.tagged6.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 5)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_10.tagged7.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 6)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_10.tagged8.getter@<X0>(unint64_t *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 7)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t SharedTagged_10.tagged9.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C40BBC4C((void (*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))Ref.init(id:), a1);
}

uint64_t sub_1C40BBC4C@<X0>(void (*a1)(uint64_t *__return_ptr, void *, uint64_t, uint64_t)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v17 = &protocol witness table for Int;
  uint64_t v18 = MEMORY[0x1E4FBB560];
  uint64_t v6 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v6, (uint64_t)&AssociatedTypeWitness);
  if (AssociatedTypeWitness == 8)
  {
    uint64_t v8 = *v2;
    unint64_t v9 = v4[1];
    v14[0] = v8;
    v14[1] = v9;
    uint64_t v10 = swift_getAssociatedTypeWitness();
    uint64_t v11 = swift_getAssociatedConformanceWitness();
    a1(&AssociatedTypeWitness, v14, v10, v11);
    uint64_t v12 = AssociatedTypeWitness;
    unint64_t v13 = AssociatedConformanceWitness;
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0xF000000000000000;
  }
  *a2 = v12;
  a2[1] = v13;
  return result;
}

uint64_t SharedTagged_10.tagged10.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C40EB3B0((void (*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))Ref.init(id:), a1);
}

uint64_t SharedTagged_10.unknown.getter@<X0>(long long *a1@<X8>)
{
  v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] >= 10)
  {
    uint64_t v7 = *v1;
    unint64_t v8 = v2[1];
    v10.n128_u64[0] = v7;
    v10.n128_u64[1] = v8;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    Ref.init(id:)(&v10, &v11);
    __n128 v9 = v11;
    uint64_t result = sub_1C3F7E324(v7, v8);
    long long v6 = (__int128)v9;
  }
  else
  {
    long long v6 = xmmword_1C449BDD0;
  }
  *a1 = v6;
  return result;
}

uint64_t SharedTagged_10.any.getter@<X0>(__n128 *a1@<X8>)
{
  v2 = v1;
  v8.n128_u64[0] = swift_getAssociatedTypeWitness();
  v8.n128_u64[1] = swift_getAssociatedConformanceWitness();
  __n128 v9 = &protocol witness table for Int;
  uint64_t v10 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  uint64_t v5 = *v1;
  unint64_t v6 = v2[1];
  v8.n128_u64[0] = v5;
  v8.n128_u64[1] = v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  a1[1].n128_u64[1] = type metadata accessor for Ref();
  a1[2].n128_u64[0] = swift_getWitnessTable();
  Ref.init(id:)(&v8, a1);
  return sub_1C3F7E324(v5, v6);
}

uint64_t SharedTagged_10.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v93 = a2;
  uint64_t v94 = a3;
  uint64_t v92 = a1;
  uint64_t v95 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v91 = (uint64_t *)((char *)&v74 - v5);
  uint64_t v81 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v81);
  uint64_t v90 = (uint64_t *)((char *)&v74 - v6);
  uint64_t v74 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v74);
  uint64_t v83 = (char *)&v74 - v7;
  uint64_t v80 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v80);
  __n128 v89 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v74 - v8);
  uint64_t v79 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v79);
  uint64_t v88 = (char *)&v74 - v9;
  uint64_t v78 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v78);
  uint64_t v87 = (char *)&v74 - v10;
  uint64_t v77 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v77);
  uint64_t v86 = (char *)&v74 - v11;
  uint64_t v76 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v76);
  uint64_t v85 = (char *)&v74 - v12;
  uint64_t v75 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v75);
  uint64_t v84 = (char *)&v74 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v14);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v15);
  uint64_t v16 = v4;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v97.n128_u64[0] = v17;
  v97.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v98 = &protocol witness table for Int;
  uint64_t v99 = MEMORY[0x1E4FBB560];
  uint64_t v19 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v19, (uint64_t)&v100);
  switch(v100)
  {
    case 0:
      uint64_t v20 = *v4;
      uint64_t v90 = v4[1];
      uint64_t v91 = v20;
      v96.n128_u64[0] = (unint64_t)v20;
      v96.n128_u64[1] = (unint64_t)v90;
      uint64_t v21 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v96, &v97);
      __n128 v22 = v97;
      __n128 v96 = v97;
      uint64_t v23 = v94;
      __n128 v89 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 8);
      sub_1C3F7E324((uint64_t)v91, (unint64_t)v90);
      v89(&v96, v15, v21, v93, v23);
      sub_1C3F7E2CC(v22.n128_i64[0], v22.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 1:
      long long v29 = *v4;
      uint64_t v90 = v4[1];
      uint64_t v91 = v29;
      v96.n128_u64[0] = (unint64_t)v29;
      v96.n128_u64[1] = (unint64_t)v90;
      uint64_t v30 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v96, &v97);
      __n128 v31 = v97;
      __n128 v96 = v97;
      uint64_t v32 = v94;
      __n128 v89 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 8);
      sub_1C3F7E324((uint64_t)v91, (unint64_t)v90);
      v89(&v96, v14, v30, v93, v32);
      sub_1C3F7E2CC(v31.n128_i64[0], v31.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 2:
      unint64_t v33 = (unint64_t)v4[1];
      uint64_t v91 = *v16;
      v96.n128_u64[0] = (unint64_t)v91;
      v96.n128_u64[1] = v33;
      uint64_t v34 = v75;
      uint64_t v35 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v96, &v97);
      __n128 v36 = v97;
      __n128 v96 = v97;
      uint64_t v37 = v94;
      uint64_t v90 = *(uint64_t **)(v94 + 8);
      sub_1C3F7E324((uint64_t)v91, v33);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v90)(&v96, v34, v35, v93, v37);
      sub_1C3F7E2CC(v36.n128_i64[0], v36.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 3:
      unint64_t v38 = (unint64_t)v4[1];
      uint64_t v91 = *v16;
      v96.n128_u64[0] = (unint64_t)v91;
      v96.n128_u64[1] = v38;
      uint64_t v39 = v76;
      uint64_t v40 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v96, &v97);
      __n128 v41 = v97;
      __n128 v96 = v97;
      uint64_t v42 = v94;
      uint64_t v90 = *(uint64_t **)(v94 + 8);
      sub_1C3F7E324((uint64_t)v91, v38);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v90)(&v96, v39, v40, v93, v42);
      sub_1C3F7E2CC(v41.n128_i64[0], v41.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 4:
      unint64_t v43 = (unint64_t)v4[1];
      uint64_t v91 = *v16;
      v96.n128_u64[0] = (unint64_t)v91;
      v96.n128_u64[1] = v43;
      uint64_t v44 = v77;
      uint64_t v45 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v96, &v97);
      __n128 v46 = v97;
      __n128 v96 = v97;
      uint64_t v47 = v94;
      uint64_t v90 = *(uint64_t **)(v94 + 8);
      sub_1C3F7E324((uint64_t)v91, v43);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v90)(&v96, v44, v45, v93, v47);
      sub_1C3F7E2CC(v46.n128_i64[0], v46.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 5:
      unint64_t v48 = (unint64_t)v4[1];
      uint64_t v91 = *v16;
      v96.n128_u64[0] = (unint64_t)v91;
      v96.n128_u64[1] = v48;
      uint64_t v49 = v78;
      uint64_t v50 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v96, &v97);
      __n128 v51 = v97;
      __n128 v96 = v97;
      uint64_t v52 = v94;
      uint64_t v90 = *(uint64_t **)(v94 + 8);
      sub_1C3F7E324((uint64_t)v91, v48);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v90)(&v96, v49, v50, v93, v52);
      sub_1C3F7E2CC(v51.n128_i64[0], v51.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 6:
      unint64_t v53 = (unint64_t)v4[1];
      uint64_t v91 = *v16;
      v96.n128_u64[0] = (unint64_t)v91;
      v96.n128_u64[1] = v53;
      uint64_t v54 = v79;
      uint64_t v55 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v96, &v97);
      __n128 v56 = v97;
      __n128 v96 = v97;
      uint64_t v57 = v94;
      uint64_t v90 = *(uint64_t **)(v94 + 8);
      sub_1C3F7E324((uint64_t)v91, v53);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v90)(&v96, v54, v55, v93, v57);
      sub_1C3F7E2CC(v56.n128_i64[0], v56.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 7:
      unint64_t v58 = (unint64_t)v4[1];
      uint64_t v91 = *v16;
      v96.n128_u64[0] = (unint64_t)v91;
      v96.n128_u64[1] = v58;
      uint64_t v59 = v80;
      uint64_t v60 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v96, &v97);
      __n128 v61 = v97;
      __n128 v96 = v97;
      uint64_t v62 = v94;
      uint64_t v90 = *(uint64_t **)(v94 + 8);
      sub_1C3F7E324((uint64_t)v91, v58);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v90)(&v96, v59, v60, v93, v62);
      sub_1C3F7E2CC(v61.n128_i64[0], v61.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 8:
      unint64_t v68 = (unint64_t)v4[1];
      uint64_t v91 = *v16;
      v96.n128_u64[0] = (unint64_t)v91;
      v96.n128_u64[1] = v68;
      uint64_t v69 = v74;
      uint64_t v70 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v96, &v97);
      __n128 v71 = v97;
      __n128 v96 = v97;
      uint64_t v72 = v94;
      uint64_t v90 = *(uint64_t **)(v94 + 8);
      sub_1C3F7E324((uint64_t)v91, v68);
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v90)(&v96, v69, v70, v93, v72);
      sub_1C3F7E2CC(v71.n128_i64[0], v71.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 9:
      unint64_t v63 = (unint64_t)v4[1];
      uint64_t v91 = *v16;
      v96.n128_u64[0] = (unint64_t)v91;
      v96.n128_u64[1] = v63;
      uint64_t v64 = v81;
      uint64_t v65 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v96, &v97);
      __n128 v66 = v97;
      __n128 v96 = v97;
      uint64_t v67 = v94;
      __n128 v89 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 8);
      sub_1C3F7E324((uint64_t)v91, v63);
      v89(&v96, v64, v65, v93, v67);
      sub_1C3F7E2CC(v66.n128_i64[0], v66.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    default:
      unint64_t v24 = (unint64_t)v4[1];
      uint64_t v90 = *v16;
      v96.n128_u64[0] = (unint64_t)v90;
      v96.n128_u64[1] = v24;
      uint64_t v25 = AssociatedTypeWitness;
      uint64_t v26 = swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v96, &v97);
      __n128 v27 = v97;
      __n128 v96 = v97;
      uint64_t v28 = v94;
      __n128 v89 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 8);
      sub_1C3F7E324((uint64_t)v90, v24);
      v89(&v96, v25, v26, v93, v28);
      sub_1C3F7E2CC(v27.n128_i64[0], v27.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
  }
  return swift_dynamicCast();
}

uint64_t sub_1C40BCFBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  __n128 v46 = (char *)&v30 - v3;
  uint64_t v45 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v45);
  uint64_t v44 = (char *)&v30 - v4;
  uint64_t v31 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v31);
  uint64_t v30 = (char *)&v30 - v5;
  uint64_t v43 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v43);
  uint64_t v42 = (char *)&v30 - v6;
  uint64_t v41 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v41);
  uint64_t v40 = (char *)&v30 - v7;
  uint64_t v39 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v39);
  unint64_t v38 = (char *)&v30 - v8;
  uint64_t v37 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v37);
  __n128 v36 = (char *)&v30 - v9;
  uint64_t v35 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v35);
  uint64_t v34 = (char *)&v30 - v10;
  uint64_t v33 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v33);
  uint64_t v32 = (char *)&v30 - v11;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v12);
  uint64_t v13 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v13);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v51.n128_u64[0] = v14;
  v51.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v52 = &protocol witness table for Int;
  uint64_t v53 = MEMORY[0x1E4FBB560];
  uint64_t v16 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v16, (uint64_t)&v54);
  switch(v54)
  {
    case 0:
      uint64_t v17 = *v2;
      unint64_t v18 = v2[1];
      v50.n128_u64[0] = v17;
      v50.n128_u64[1] = v18;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v50, &v51);
      __n128 v19 = v51;
      __n128 v50 = v51;
      sub_1C3F7E324(v17, v18);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v19.n128_i64[0], v19.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 1:
      uint64_t v20 = *v2;
      unint64_t v21 = v2[1];
      v50.n128_u64[0] = v20;
      v50.n128_u64[1] = v21;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v50, &v51);
      __n128 v22 = v51;
      __n128 v50 = v51;
      sub_1C3F7E324(v20, v21);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v22.n128_i64[0], v22.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    case 2:
      unint64_t v24 = v2[1];
      v50.n128_u64[0] = *v2;
      uint64_t v23 = v50.n128_u64[0];
      v50.n128_u64[1] = v24;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v50, &v51);
      __n128 v25 = v51;
      __n128 v50 = v51;
      sub_1C3F7E324(v23, v24);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v25.n128_i64[0], v25.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
    default:
      uint64_t v26 = *v2;
      unint64_t v27 = v2[1];
      v50.n128_u64[0] = v26;
      v50.n128_u64[1] = v27;
      swift_getAssociatedConformanceWitness();
      Ref.init(id:)(&v50, &v51);
      __n128 v28 = v51;
      __n128 v50 = v51;
      sub_1C3F7E324(v26, v27);
      type metadata accessor for Ref();
      sub_1C41F7E44();
      sub_1C3F7E2CC(v28.n128_i64[0], v28.n128_u64[1]);
      swift_getAssociatedTypeWitness();
      break;
  }
  return swift_dynamicCast();
}

uint64_t sub_1C40BDBC8(uint64_t a1, uint64_t a2)
{
  uint64_t v119 = a2;
  uint64_t v120 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v114 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v115 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  __n128 v113 = (char *)v88 - v4;
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v111 = *(void *)(v5 - 8);
  uint64_t v112 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v110 = (char *)v88 - v6;
  uint64_t v89 = swift_getAssociatedTypeWitness();
  v88[1] = *(void *)(v89 - 8);
  MEMORY[0x1F4188790](v89);
  v88[0] = (char *)v88 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v108 = *(void *)(v8 - 8);
  uint64_t v109 = v8;
  MEMORY[0x1F4188790](v8);
  v107 = (char *)v88 - v9;
  uint64_t v106 = swift_getAssociatedTypeWitness();
  uint64_t v105 = *(void *)(v106 - 8);
  MEMORY[0x1F4188790](v106);
  uint64_t v104 = (char *)v88 - v10;
  uint64_t v103 = swift_getAssociatedTypeWitness();
  uint64_t v102 = *(void *)(v103 - 8);
  MEMORY[0x1F4188790](v103);
  uint64_t v101 = (char *)v88 - v11;
  uint64_t v100 = swift_getAssociatedTypeWitness();
  uint64_t v99 = *(void *)(v100 - 8);
  MEMORY[0x1F4188790](v100);
  uint64_t v98 = (char *)v88 - v12;
  uint64_t v97 = swift_getAssociatedTypeWitness();
  uint64_t v96 = *(void *)(v97 - 8);
  MEMORY[0x1F4188790](v97);
  uint64_t v95 = (char *)v88 - v13;
  uint64_t v94 = swift_getAssociatedTypeWitness();
  uint64_t v93 = *(void *)(v94 - 8);
  MEMORY[0x1F4188790](v94);
  uint64_t v92 = (char *)v88 - v14;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v91 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v88 - v16;
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v90 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v88 - v19;
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v117 = v21;
  uint64_t v118 = v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v116 = (char *)v88 - v23;
  unint64_t v24 = v2;
  uint64_t v25 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v122.n128_u64[0] = v25;
  v122.n128_u64[1] = AssociatedConformanceWitness;
  v123 = &protocol witness table for Int;
  uint64_t v124 = MEMORY[0x1E4FBB560];
  uint64_t v27 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v27, (uint64_t)&v125);
  switch(v125)
  {
    case 0:
      unint64_t v29 = v2[1];
      v121.n128_u64[0] = *v24;
      uint64_t v28 = v121.n128_u64[0];
      v121.n128_u64[1] = v29;
      swift_getAssociatedConformanceWitness();
      __n128 v30 = Ref.init(id:)(&v121, &v122);
      unint64_t v31 = v122.n128_u64[1];
      unint64_t v115 = v122.n128_u64[0];
      uint64_t v33 = v117;
      uint64_t v32 = v118;
      uint64_t v34 = v120;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v118 + 16))(v116, v120, v117, v30);
      sub_1C3F7E324(v28, v29);
      swift_dynamicCast();
      v121.n128_u64[0] = v115;
      v121.n128_u64[1] = v31;
      sub_1C407C610((uint64_t)v20, (uint64_t)&v121, v18);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v20, v18);
      goto LABEL_15;
    case 1:
      unint64_t v43 = v2[1];
      v121.n128_u64[0] = *v24;
      uint64_t v42 = v121.n128_u64[0];
      v121.n128_u64[1] = v43;
      swift_getAssociatedConformanceWitness();
      __n128 v44 = Ref.init(id:)(&v121, &v122);
      unint64_t v45 = v122.n128_u64[1];
      unint64_t v115 = v122.n128_u64[0];
      uint64_t v47 = v117;
      uint64_t v46 = v118;
      uint64_t v48 = v120;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v118 + 16))(v116, v120, v117, v44);
      sub_1C3F7E324(v42, v43);
      swift_dynamicCast();
      v121.n128_u64[0] = v115;
      v121.n128_u64[1] = v45;
      sub_1C407C610((uint64_t)v17, (uint64_t)&v121, v15);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v17, v15);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v48, v47);
    case 2:
      unint64_t v51 = v2[1];
      v121.n128_u64[0] = *v24;
      uint64_t v50 = v121.n128_u64[0];
      v121.n128_u64[1] = v51;
      uint64_t v52 = v94;
      swift_getAssociatedConformanceWitness();
      __n128 v53 = Ref.init(id:)(&v121, &v122);
      __n128 v54 = v122;
      uint64_t v56 = v117;
      uint64_t v55 = v118;
      uint64_t v57 = v120;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v118 + 16))(v116, v120, v117, v53);
      sub_1C3F7E324(v50, v51);
      uint64_t v58 = (uint64_t)v92;
      swift_dynamicCast();
      __n128 v121 = v54;
      sub_1C407C610(v58, (uint64_t)&v121, v52);
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v58, v52);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(v57, v56);
    case 3:
      unint64_t v60 = v2[1];
      v121.n128_u64[0] = *v24;
      uint64_t v59 = v121.n128_u64[0];
      v121.n128_u64[1] = v60;
      uint64_t v37 = v97;
      swift_getAssociatedConformanceWitness();
      __n128 v61 = Ref.init(id:)(&v121, &v122);
      __n128 v62 = v122;
      uint64_t v33 = v117;
      uint64_t v32 = v118;
      uint64_t v34 = v120;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v118 + 16))(v116, v120, v117, v61);
      sub_1C3F7E324(v59, v60);
      uint64_t v40 = (uint64_t)v95;
      swift_dynamicCast();
      __n128 v121 = v62;
      sub_1C407C610(v40, (uint64_t)&v121, v37);
      unint64_t v63 = (uint64_t *)&v126;
      goto LABEL_13;
    case 4:
      unint64_t v65 = v2[1];
      v121.n128_u64[0] = *v24;
      uint64_t v64 = v121.n128_u64[0];
      v121.n128_u64[1] = v65;
      uint64_t v37 = v100;
      swift_getAssociatedConformanceWitness();
      __n128 v66 = Ref.init(id:)(&v121, &v122);
      __n128 v67 = v122;
      uint64_t v33 = v117;
      uint64_t v32 = v118;
      uint64_t v34 = v120;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v118 + 16))(v116, v120, v117, v66);
      sub_1C3F7E324(v64, v65);
      uint64_t v40 = (uint64_t)v98;
      swift_dynamicCast();
      __n128 v121 = v67;
      sub_1C407C610(v40, (uint64_t)&v121, v37);
      unint64_t v63 = &v127;
      goto LABEL_13;
    case 5:
      unint64_t v69 = v2[1];
      v121.n128_u64[0] = *v24;
      uint64_t v68 = v121.n128_u64[0];
      v121.n128_u64[1] = v69;
      uint64_t v37 = v103;
      swift_getAssociatedConformanceWitness();
      __n128 v70 = Ref.init(id:)(&v121, &v122);
      __n128 v71 = v122;
      uint64_t v33 = v117;
      uint64_t v32 = v118;
      uint64_t v34 = v120;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v118 + 16))(v116, v120, v117, v70);
      sub_1C3F7E324(v68, v69);
      uint64_t v40 = (uint64_t)v101;
      swift_dynamicCast();
      __n128 v121 = v71;
      sub_1C407C610(v40, (uint64_t)&v121, v37);
      unint64_t v63 = &v128;
      goto LABEL_13;
    case 6:
      unint64_t v73 = v2[1];
      v121.n128_u64[0] = *v24;
      uint64_t v72 = v121.n128_u64[0];
      v121.n128_u64[1] = v73;
      uint64_t v37 = v106;
      swift_getAssociatedConformanceWitness();
      __n128 v74 = Ref.init(id:)(&v121, &v122);
      __n128 v75 = v122;
      uint64_t v33 = v117;
      uint64_t v32 = v118;
      uint64_t v34 = v120;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v118 + 16))(v116, v120, v117, v74);
      sub_1C3F7E324(v72, v73);
      uint64_t v40 = (uint64_t)v104;
      swift_dynamicCast();
      __n128 v121 = v75;
      sub_1C407C610(v40, (uint64_t)&v121, v37);
      unint64_t v63 = &v129;
      goto LABEL_13;
    case 7:
      unint64_t v77 = v2[1];
      v121.n128_u64[0] = *v24;
      uint64_t v76 = v121.n128_u64[0];
      v121.n128_u64[1] = v77;
      uint64_t v37 = v109;
      swift_getAssociatedConformanceWitness();
      __n128 v78 = Ref.init(id:)(&v121, &v122);
      __n128 v79 = v122;
      uint64_t v33 = v117;
      uint64_t v32 = v118;
      uint64_t v34 = v120;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v118 + 16))(v116, v120, v117, v78);
      sub_1C3F7E324(v76, v77);
      uint64_t v40 = (uint64_t)v107;
      swift_dynamicCast();
      __n128 v121 = v79;
      sub_1C407C610(v40, (uint64_t)&v121, v37);
      uint64_t v41 = v108;
      break;
    case 8:
      unint64_t v85 = v2[1];
      v121.n128_u64[0] = *v24;
      uint64_t v84 = v121.n128_u64[0];
      v121.n128_u64[1] = v85;
      uint64_t v37 = v89;
      swift_getAssociatedConformanceWitness();
      __n128 v86 = Ref.init(id:)(&v121, &v122);
      __n128 v87 = v122;
      uint64_t v33 = v117;
      uint64_t v32 = v118;
      uint64_t v34 = v120;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v118 + 16))(v116, v120, v117, v86);
      sub_1C3F7E324(v84, v85);
      uint64_t v40 = v88[0];
      swift_dynamicCast();
      __n128 v121 = v87;
      sub_1C407C610(v40, (uint64_t)&v121, v37);
      unint64_t v63 = &v120;
LABEL_13:
      uint64_t v41 = *(v63 - 32);
      break;
    case 9:
      unint64_t v81 = v2[1];
      v121.n128_u64[0] = *v24;
      uint64_t v80 = v121.n128_u64[0];
      v121.n128_u64[1] = v81;
      uint64_t v37 = v112;
      swift_getAssociatedConformanceWitness();
      __n128 v82 = Ref.init(id:)(&v121, &v122);
      __n128 v83 = v122;
      uint64_t v33 = v117;
      uint64_t v32 = v118;
      uint64_t v34 = v120;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v118 + 16))(v116, v120, v117, v82);
      sub_1C3F7E324(v80, v81);
      uint64_t v40 = (uint64_t)v110;
      swift_dynamicCast();
      __n128 v121 = v83;
      sub_1C407C610(v40, (uint64_t)&v121, v37);
      uint64_t v41 = v111;
      break;
    default:
      unint64_t v36 = v2[1];
      v121.n128_u64[0] = *v24;
      uint64_t v35 = v121.n128_u64[0];
      v121.n128_u64[1] = v36;
      uint64_t v37 = v115;
      swift_getAssociatedConformanceWitness();
      __n128 v38 = Ref.init(id:)(&v121, &v122);
      __n128 v39 = v122;
      uint64_t v33 = v117;
      uint64_t v32 = v118;
      uint64_t v34 = v120;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v118 + 16))(v116, v120, v117, v38);
      sub_1C3F7E324(v35, v36);
      uint64_t v40 = (uint64_t)v113;
      swift_dynamicCast();
      __n128 v121 = v39;
      sub_1C407C610(v40, (uint64_t)&v121, v37);
      uint64_t v41 = v114;
      break;
  }
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v37);
LABEL_15:
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v34, v33);
}

uint64_t SharedTagged_10.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C40BCFBC);
}

uint64_t sub_1C40BECF8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for SharedTagged_10();
  swift_retain();
  sub_1C40F1E7C(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_10, (uint64_t)&associated type descriptor for Tagged_10.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40BDBC8);
  return swift_release();
}

uint64_t SharedTagged_10.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1E7C(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_10, (uint64_t)&associated type descriptor for Tagged_10.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40BDBC8);
  swift_release();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
  return v5(a1, AssociatedTypeWitness);
}

void (*SharedTagged_10.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[3] = AssociatedTypeWitness;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  SharedTagged_10.subscript.getter(a2, a3);
  return sub_1C40BEF3C;
}

void sub_1C40BEF3C(uint64_t **a1, char a2)
{
}

uint64_t SharedTagged_10.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C40BCFBC);
}

uint64_t SharedTagged_10.visitReferences(_:)(void *a1)
{
  v14.n128_u64[0] = swift_getAssociatedTypeWitness();
  v14.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v15 = &protocol witness table for Int;
  uint64_t v16 = MEMORY[0x1E4FBB560];
  uint64_t v3 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v3, (uint64_t)&v17);
  uint64_t v4 = a1[4];
  uint64_t v12 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  unint64_t v5 = v1[1];
  v13.n128_u64[0] = *v1;
  uint64_t v6 = v13.n128_u64[0];
  v13.n128_u64[1] = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Ref.init(id:)(&v13, &v14);
  __n128 v9 = v14;
  __n128 v13 = v14;
  size_t v10 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8);
  sub_1C3F7E324(v6, v5);
  v10(&v13, AssociatedTypeWitness, AssociatedConformanceWitness, v12, v4);
  return sub_1C3F7E2CC(v9.n128_i64[0], v9.n128_u64[1]);
}

uint64_t SharedTagged_10.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))SharedTagged_10.init(_:id:), a3);
}

uint64_t SharedTagged_10.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))SharedTagged_10.copy(renamingReferences:));
}

uint64_t SharedTagged_10.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t static SharedTagged_10.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_10);
}

uint64_t SharedTagged_10.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))SharedTagged_10.hash(into:));
}

uint64_t sub_1C40BF470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))SharedTagged_10.hash(into:));
}

uint64_t sub_1C40BF488(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static SharedTagged_10.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t SharedTagged_10.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C40BF4B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return SharedTagged_10.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t SharedTagged_10.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40F0970(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SharedTagged_10, 0, a4);
}

uint64_t sub_1C40BF508(uint64_t a1, uint64_t a2)
{
  return SharedTagged_10.encode(to:)(a1, a2);
}

uint64_t SharedTagged_10.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C4086E34(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_10, (uint64_t)&associated type descriptor for Tagged_10.Enum, (uint64_t)&associated conformance descriptor for Tagged_10.Tagged_10.Enum: RawRepresentable);
}

uint64_t WeakTagged_1.id.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_1C3F7E324(v2, v3);
}

uint64_t (*WeakTagged_1.id.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_1.tag.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C40EA434(a1, a2);
}

uint64_t WeakTagged_1.tag.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C40EA528(a1, a2);
}

uint64_t (*WeakTagged_1.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_1.init(_:identity:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_1.init(_:id:));
}

{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_1.init(_:id:));
}

uint64_t WeakTagged_1.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1C40EA66C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_1, a5);
}

{
  return sub_1C40EA7CC(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_1, a5);
}

uint64_t WeakTagged_1.init(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  unint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for SharedTagged_1() + 36);
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for WeakTagged_1() + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v4, v3, v5);
}

uint64_t WeakTagged_1.tagged1.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  else
  {
    uint64_t v8 = *v1;
    unint64_t v9 = v2[1];
    v10.n128_u64[0] = v8;
    v10.n128_u64[1] = v9;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v6 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t WeakTagged_1.unknown.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] < 2)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  else
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_1.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v62 = a1;
  uint64_t v63 = a3;
  uint64_t v64 = a5;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1C4497B38();
  uint64_t v53 = *(void *)(v9 - 8);
  uint64_t v54 = v9;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v59 = (char *)&v49 - v11;
  uint64_t v58 = *(unsigned int (***)(char *, uint64_t, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v52 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v51 = (char *)&v49 - v14;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v50 = sub_1C4497B38();
  uint64_t v49 = *(void *)(v50 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v50);
  uint64_t v57 = (char *)&v49 - v17;
  uint64_t v55 = v15;
  uint64_t v56 = *(void *)(v15 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)&v49 - v21);
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v66.n128_u64[0] = v23;
  v66.n128_u64[1] = AssociatedConformanceWitness;
  __n128 v67 = &protocol witness table for Int;
  uint64_t v68 = MEMORY[0x1E4FBB560];
  uint64_t v25 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v25, (uint64_t)&v69);
  uint64_t v60 = a4 + 16;
  uint64_t v61 = v7;
  if (v69)
  {
    unint64_t v26 = v5[1];
    v65.n128_u64[0] = *v5;
    uint64_t v27 = v65.n128_u64[0];
    v65.n128_u64[1] = v26;
    uint64_t v28 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v65, &v66);
    __n128 v29 = v66;
    __n128 v65 = v66;
    __n128 v30 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16);
    sub_1C3F7E324(v27, v26);
    unint64_t v31 = v59;
    v30(&v65, AssociatedTypeWitness, v28, v63, a4);
    sub_1C3F7E2CC(v29.n128_i64[0], v29.n128_u64[1]);
    uint64_t v32 = v58;
    if (v58[6](v31, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v54);
      uint64_t v33 = v64;
LABEL_6:
      uint64_t v42 = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v33, 1, 1, v42);
    }
    __n128 v44 = v32[4];
    unint64_t v45 = v51;
    v44(v51, (uint64_t)v31, AssociatedTypeWitness);
    v44(v52, (uint64_t)v45, AssociatedTypeWitness);
    uint64_t v46 = swift_getAssociatedTypeWitness();
    uint64_t v33 = v64;
  }
  else
  {
    uint64_t v58 = v22;
    uint64_t v59 = v20;
    unint64_t v34 = v5[1];
    v65.n128_u64[0] = *v5;
    uint64_t v35 = v65.n128_u64[0];
    v65.n128_u64[1] = v34;
    uint64_t v36 = v55;
    uint64_t v37 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v65, &v66);
    __n128 v38 = v66;
    __n128 v65 = v66;
    __n128 v39 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16);
    sub_1C3F7E324(v35, v34);
    uint64_t v40 = v57;
    v39(&v65, v36, v37, v63, a4);
    uint64_t v33 = v64;
    sub_1C3F7E2CC(v38.n128_i64[0], v38.n128_u64[1]);
    uint64_t v41 = v56;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v40, 1, v36) == 1)
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v40, v50);
      goto LABEL_6;
    }
    uint64_t v47 = *(void (**)(unsigned int (**)(char *, uint64_t, uint64_t), char *, uint64_t))(v41 + 32);
    uint64_t v48 = v58;
    v47(v58, v40, v36);
    v47((unsigned int (**)(char *, uint64_t, uint64_t))v59, (char *)v48, v36);
    uint64_t v46 = swift_getAssociatedTypeWitness();
  }
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v33, 0, 1, v46);
}

uint64_t sub_1C40C0028@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v58 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1C4497B38();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v55 = (char *)&v45 - v6;
  uint64_t v56 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v48 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v47 = (char *)&v45 - v9;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v46 = sub_1C4497B38();
  uint64_t v52 = *(void *)(v46 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v46);
  uint64_t v53 = (uint64_t)&v45 - v12;
  uint64_t v51 = v10;
  uint64_t v54 = *(void *)(v10 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v45 - v16;
  uint64_t v18 = v2;
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v60.n128_u64[0] = v19;
  v60.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v61 = &protocol witness table for Int;
  uint64_t v62 = MEMORY[0x1E4FBB560];
  uint64_t v21 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v21, (uint64_t)&v63);
  if (v63)
  {
    unint64_t v23 = v2[1];
    v59.n128_u64[0] = *v18;
    uint64_t v22 = v59.n128_u64[0];
    v59.n128_u64[1] = v23;
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v59, &v60);
    __n128 v24 = v60;
    __n128 v59 = v60;
    sub_1C3F7E324(v22, v23);
    uint64_t v25 = type metadata accessor for WeakRef();
    uint64_t v26 = (uint64_t)v55;
    sub_1C44749D8(v25, (uint64_t)v55);
    sub_1C3F7E2CC(v24.n128_i64[0], v24.n128_u64[1]);
    uint64_t v27 = v56;
    if (v56[6](v26, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v26, v50);
      uint64_t v28 = v58;
LABEL_6:
      uint64_t v38 = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v28, 1, 1, v38);
    }
    uint64_t v40 = v27[4];
    uint64_t v41 = v47;
    v40((uint64_t)v47, v26, AssociatedTypeWitness);
    v40((uint64_t)v48, (uint64_t)v41, AssociatedTypeWitness);
    uint64_t v42 = swift_getAssociatedTypeWitness();
    uint64_t v28 = v58;
  }
  else
  {
    uint64_t v55 = v17;
    uint64_t v56 = v15;
    uint64_t v29 = v51;
    uint64_t v30 = v52;
    unint64_t v32 = v2[1];
    v59.n128_u64[0] = *v18;
    uint64_t v31 = v59.n128_u64[0];
    v59.n128_u64[1] = v32;
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v59, &v60);
    __n128 v33 = v60;
    __n128 v59 = v60;
    sub_1C3F7E324(v31, v32);
    uint64_t v34 = type metadata accessor for WeakRef();
    uint64_t v35 = v53;
    sub_1C44749D8(v34, v53);
    sub_1C3F7E2CC(v33.n128_i64[0], v33.n128_u64[1]);
    uint64_t v36 = v54;
    int v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v35, 1, v29);
    uint64_t v28 = v58;
    if (v37 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v35, v46);
      goto LABEL_6;
    }
    unint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 32);
    uint64_t v44 = (uint64_t)v55;
    v43(v55, v35, v29);
    v43((char *)v56, v44, v29);
    uint64_t v42 = swift_getAssociatedTypeWitness();
  }
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v28, 0, 1, v42);
}

uint64_t sub_1C40C0688(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = a2;
  uint64_t v45 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1C4497B38();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v41 = (char *)&v39 - v5;
  uint64_t v40 = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  __n128 v39 = (char *)&v39 - v7;
  swift_getAssociatedTypeWitness();
  uint64_t v43 = sub_1C4497B38();
  uint64_t v8 = *(void *)(v43 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v43);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = v2;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v47.n128_u64[0] = v15;
  v47.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v48 = &protocol witness table for Int;
  uint64_t v49 = MEMORY[0x1E4FBB560];
  uint64_t v17 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v17, (uint64_t)&v50);
  uint64_t v42 = v8 + 16;
  if (v50)
  {
    unint64_t v19 = v2[1];
    v46.n128_u64[0] = *v2;
    uint64_t v18 = v46.n128_u64[0];
    v46.n128_u64[1] = v19;
    uint64_t v20 = swift_getAssociatedConformanceWitness();
    __n128 v21 = WeakRef.init(id:)(&v46, &v47);
    __n128 v22 = v47;
    uint64_t v23 = v45;
    uint64_t v24 = v43;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v11, v45, v43, v21);
    sub_1C3F7E324(v18, v19);
    uint64_t v25 = v41;
    int v26 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v25, v26 ^ 1u, 1, AssociatedTypeWitness);
    __n128 v46 = v22;
    uint64_t v27 = (uint64_t)v25;
    uint64_t v28 = AssociatedTypeWitness;
    uint64_t v29 = v20;
  }
  else
  {
    unint64_t v31 = v2[1];
    v46.n128_u64[0] = *v14;
    uint64_t v30 = v46.n128_u64[0];
    v46.n128_u64[1] = v31;
    uint64_t v32 = v40;
    uint64_t v33 = swift_getAssociatedConformanceWitness();
    __n128 v34 = WeakRef.init(id:)(&v46, &v47);
    __n128 v35 = v47;
    uint64_t v23 = v45;
    uint64_t v24 = v43;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v13, v45, v43, v34);
    sub_1C3F7E324(v30, v31);
    uint64_t v36 = v39;
    int v37 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v36, v37 ^ 1u, 1, v32);
    __n128 v46 = v35;
    uint64_t v27 = (uint64_t)v36;
    uint64_t v28 = v32;
    uint64_t v29 = v33;
  }
  sub_1C4055840(v27, (uint64_t)&v46, v28, v29);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v23, v24);
}

uint64_t WeakTagged_1.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C40C0028);
}

uint64_t sub_1C40C0AEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for WeakTagged_1();
  swift_retain();
  sub_1C40F1F80(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_1, (uint64_t)&associated type descriptor for Tagged_1.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40C0688);
  return swift_release();
}

uint64_t WeakTagged_1.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1F80(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_1, (uint64_t)&associated type descriptor for Tagged_1.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40C0688);
  swift_release();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1C4497B38();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  return v5(a1, v4);
}

void (*WeakTagged_1.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_1C4497B38();
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_1.subscript.getter(a2, a3);
  return sub_1C40C0D48;
}

void sub_1C40C0D48(uint64_t **a1, char a2)
{
}

uint64_t WeakTagged_1.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C40C0028);
}

uint64_t WeakTagged_1.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))WeakTagged_1.init(_:id:), a3);
}

uint64_t WeakTagged_1.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))WeakTagged_1.copy(renamingReferences:));
}

uint64_t WeakTagged_1.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t static WeakTagged_1.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_1);
}

uint64_t WeakTagged_1.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))WeakTagged_1.hash(into:));
}

uint64_t sub_1C40C0E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))WeakTagged_1.hash(into:));
}

uint64_t sub_1C40C0E4C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_1.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t WeakTagged_1.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C40C0E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return WeakTagged_1.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t WeakTagged_1.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40C0EC8(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_1, 1, a4);
}

uint64_t sub_1C40C0EC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void, uint64_t, uint64_t)@<X3>, int a5@<W4>, void *a6@<X8>)
{
  int v100 = a5;
  uint64_t v116 = a4;
  uint64_t v117 = a3;
  uint64_t v118 = a2;
  uint64_t v119 = a6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0560);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v110 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v107 = *(void *)(v109 - 8);
  MEMORY[0x1F4188790](v109);
  uint64_t v111 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1F4188790](v121);
  uint64_t v108 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v106 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v104 = (uint64_t)&v98 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v113 = (uint64_t)&v98 - v16;
  unint64_t v125 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v17 = MEMORY[0x1F4188790](v125);
  uint64_t v123 = (uint64_t)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v114 = (uint64_t)&v98 - v19;
  uint64_t v20 = type metadata accessor for Proto_Value(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v124 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v122 = (uint64_t)&v98 - v25;
  MEMORY[0x1F4188790](v24);
  char v126 = (char *)&v98 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v28 = MEMORY[0x1F4188790](v27 - 8);
  uint64_t v105 = (uint64_t)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v115 = (uint64_t)&v98 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  __n128 v34 = (char *)&v98 - v33;
  MEMORY[0x1F4188790](v32);
  uint64_t v36 = (char *)&v98 - v35;
  uint64_t v127 = a1;
  uint64_t v37 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v37, (uint64_t)v36, &qword_1EBBC0540);
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  uint64_t v39 = v21 + 48;
  uint64_t v38 = v40;
  int v41 = v40((uint64_t)v36, 1, v20);
  sub_1C3F962E0((uint64_t)v36, &qword_1EBBC0540);
  if (v41 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v42 = 0xD000000000000017;
    *(void *)(v42 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v42 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v127;
  sub_1C3F970C4(v37, (uint64_t)v34, &qword_1EBBC0540);
  uint64_t v102 = v38;
  uint64_t v103 = v39;
  uint64_t result = v38((uint64_t)v34, 1, v20);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v44 = (uint64_t)v126;
  sub_1C3F8ABD8((uint64_t)v34, (uint64_t)v126, type metadata accessor for Proto_Value);
  uint64_t v120 = v20;
  uint64_t v45 = *(void *)(v44 + *(int *)(v20 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v46 = v45;
  uint64_t v47 = v113;
  sub_1C3F970C4(v46, v113, &qword_1EBBBF8A0);
  uint64_t v48 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v101 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 48);
  int v49 = v101(v47, 1, v48);
  unint64_t v50 = v125;
  if (v49 == 1)
  {
    swift_retain();
    sub_1C3F962E0(v47, &qword_1EBBBF8A0);
    uint64_t v51 = v114;
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v51 = v114;
    if (EnumCaseMultiPayload == 11)
    {
      sub_1C3F8ABD8(v47, v114, type metadata accessor for Proto_TaggedValue);
      goto LABEL_12;
    }
    swift_retain();
    sub_1C3F8B0A8(v47, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v53 = *(int *)(v50 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)(v51 + v53) = qword_1EA39AF60;
LABEL_12:
  swift_retain();
  sub_1C3F8B0A8((uint64_t)v126, type metadata accessor for Proto_Value);
  uint64_t v54 = *(void *)(v51 + *(int *)(v50 + 20));
  swift_beginAccess();
  uint64_t v55 = *(void *)(v54 + 16);
  sub_1C3F8B0A8(v51, type metadata accessor for Proto_TaggedValue);
  uint64_t v128 = (uint64_t (*)(void, void, void))v55;
  uint64_t v56 = v116(0, v118, v117);
  uint64_t v57 = (char *)v119 + *(int *)(v56 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v126 = v57;
  uint64_t v116 = (uint64_t (*)(void, uint64_t, uint64_t))AssociatedTypeWitness;
  uint64_t v114 = AssociatedConformanceWitness;
  CRExtensible.init(rawValue:)((uint64_t)&v128, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E4FBB560], v57);
  uint64_t v60 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  uint64_t v61 = v115;
  sub_1C3F970C4(v60, v115, &qword_1EBBC0540);
  uint64_t v62 = v120;
  uint64_t result = v102(v61, 1, v120);
  if (result == 1)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v63 = v61;
  uint64_t v64 = v122;
  sub_1C3F8ABD8(v63, v122, type metadata accessor for Proto_Value);
  uint64_t v65 = *(void *)(v64 + *(int *)(v62 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v66 = v65;
  uint64_t v67 = v104;
  sub_1C3F970C4(v66, v104, &qword_1EBBBF8A0);
  int v68 = v101(v67, 1, v48);
  uint64_t v69 = v123;
  unint64_t v70 = v125;
  if (v68 == 1)
  {
    sub_1C3F962E0(v67, &qword_1EBBBF8A0);
    uint64_t v71 = (uint64_t)v106;
  }
  else
  {
    int v72 = swift_getEnumCaseMultiPayload();
    uint64_t v71 = (uint64_t)v106;
    if (v72 == 11)
    {
      sub_1C3F8ABD8(v67, v69, type metadata accessor for Proto_TaggedValue);
      goto LABEL_21;
    }
    sub_1C3F8B0A8(v67, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v73 = *(int *)(v70 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)(v69 + v73) = qword_1EA39AF60;
  swift_retain();
LABEL_21:
  uint64_t v74 = (uint64_t)v108;
  sub_1C3F8B0A8(v122, type metadata accessor for Proto_Value);
  uint64_t v75 = *(void *)(v69 + *(int *)(v70 + 20))
      + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  uint64_t v76 = v105;
  sub_1C3F970C4(v75, v105, &qword_1EBBC0540);
  uint64_t v77 = v120;
  if (v102(v76, 1, v120) == 1)
  {
    __n128 v78 = v124;
    sub_1C4496888();
    uint64_t v79 = *(int *)(v77 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)&v78[v79] = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0(v76, &qword_1EBBC0540);
    uint64_t v77 = v120;
  }
  else
  {
    __n128 v78 = v124;
    sub_1C3F8ABD8(v76, (uint64_t)v124, type metadata accessor for Proto_Value);
  }
  sub_1C3F8B0A8(v123, type metadata accessor for Proto_TaggedValue);
  uint64_t v80 = *(void *)&v78[*(int *)(v77 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v80, v71, &qword_1EBBBF8A0);
  if (v101(v71, 1, v48) == 1)
  {
    sub_1C3F962E0(v71, &qword_1EBBBF8A0);
    __n128 v82 = v111;
    uint64_t v81 = v112;
    uint64_t v84 = v109;
    uint64_t v83 = (uint64_t)v110;
  }
  else
  {
    int v85 = swift_getEnumCaseMultiPayload();
    uint64_t v84 = v109;
    if (v85 == 7)
    {
      sub_1C3F8ABD8(v71, v74, type metadata accessor for Proto_Reference);
      __n128 v82 = v111;
      uint64_t v81 = v112;
      uint64_t v83 = (uint64_t)v110;
      goto LABEL_34;
    }
    sub_1C3F8B0A8(v71, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    __n128 v82 = v111;
    uint64_t v81 = v112;
    uint64_t v83 = (uint64_t)v110;
  }
  sub_1C4496888();
  uint64_t v86 = *(int *)(v121 + 20);
  if (qword_1EBBBC818 != -1) {
    swift_once();
  }
  *(void *)(v74 + v86) = qword_1EBBBC808;
  swift_retain();
LABEL_34:
  sub_1C3F8B0A8((uint64_t)v124, type metadata accessor for Proto_Value);
  uint64_t v87 = *(void *)(v74 + *(int *)(v121 + 20))
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  sub_1C3F970C4(v87, v83, &qword_1EBBC0560);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v83, 1, v84) == 1)
  {
    void *v82 = MEMORY[0x1E4FBC860];
    v82[1] = sub_1C4496868();
    v82[2] = v88;
    sub_1C4496888();
    sub_1C3F962E0(v83, &qword_1EBBC0560);
  }
  else
  {
    sub_1C3F8ABD8(v83, (uint64_t)v82, type metadata accessor for Proto_KeyPath);
  }
  sub_1C3F8B0A8(v74, type metadata accessor for Proto_Reference);
  uint64_t v89 = v127;
  swift_retain();
  sub_1C3F766DC((uint64_t)v82, (uint64_t *)&v128);
  if (v81)
  {
    swift_release();
    swift_release();
    uint64_t v128 = v116;
    uint64_t v129 = v114;
    v130 = &protocol witness table for Int;
    uint64_t v131 = MEMORY[0x1E4FBB560];
    uint64_t v97 = type metadata accessor for CRExtensible();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v97 - 8) + 8))(v126, v97);
  }
  uint64_t v90 = (uint64_t)v128;
  unint64_t v91 = v129;
  uint64_t v92 = v119;
  *uint64_t v119 = v128;
  v92[1] = v91;
  sub_1C3F7E324(v90, v91);
  uint64_t v128 = v116;
  uint64_t v129 = v114;
  v130 = &protocol witness table for Int;
  uint64_t v131 = MEMORY[0x1E4FBB560];
  uint64_t v93 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v93, (uint64_t)&v132);
  uint64_t v94 = *(void *)(v89 + 16);
  unint64_t v125 = v91;
  if (v132)
  {
    if (v94) {
      goto LABEL_43;
    }
    goto LABEL_46;
  }
  if (v94)
  {
LABEL_43:
    uint64_t v95 = swift_getAssociatedTypeWitness();
    uint64_t v128 = (uint64_t (*)(void, void, void))v90;
    uint64_t v129 = v91;
    uint64_t v124 = *(char **)(*(void *)v94 + 176);
    uint64_t v96 = swift_getAssociatedConformanceWitness();
    swift_retain();
    ((void (*)(uint64_t, uint64_t (**)(void, void, void), uint64_t, void, uint64_t, uint64_t))v124)(v95, &v128, v127, v100 & 1, v95, v96);
    swift_release();
    swift_release();
    swift_release();
    return sub_1C3F7E2CC(v90, v125);
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_1C40C1E4C(uint64_t a1, uint64_t a2)
{
  return WeakTagged_1.encode(to:)(a1, a2);
}

uint64_t WeakTagged_1.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C40C5014(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_1, (uint64_t)&associated type descriptor for Tagged_1.Enum, (uint64_t)&associated conformance descriptor for Tagged_1.Tagged_1.Enum: RawRepresentable);
}

void WeakTagged_1.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t (*WeakTagged_2.id.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_2.tag.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C40EA434(a1, a2);
}

uint64_t WeakTagged_2.tag.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C40EA528(a1, a2);
}

uint64_t (*WeakTagged_2.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_2.init(_:identity:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_2.init(_:id:));
}

{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_2.init(_:id:));
}

uint64_t WeakTagged_2.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1C40EA66C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_2, a5);
}

{
  return sub_1C40EA7CC(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_2, a5);
}

uint64_t WeakTagged_2.init(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for SharedTagged_2() + 36);
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for WeakTagged_2() + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v4, v3, v5);
}

uint64_t WeakTagged_2.tagged1.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  else
  {
    uint64_t v8 = *v1;
    unint64_t v9 = v2[1];
    v10.n128_u64[0] = v8;
    v10.n128_u64[1] = v9;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v6 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t WeakTagged_2.tagged2.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 1)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_2.unknown.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] < 2)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  else
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_2.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v88 = a3;
  uint64_t v89 = a4;
  uint64_t v86 = a5;
  uint64_t v87 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v77 = sub_1C4497B38();
  uint64_t v76 = *(void *)(v77 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v77);
  uint64_t v83 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)&v67 - v10);
  uint64_t v81 = AssociatedTypeWitness;
  __n128 v82 = *(unsigned int (***)(char *, uint64_t, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v75 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v74 = (char *)&v67 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v73 = sub_1C4497B38();
  uint64_t v72 = *(void *)(v73 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v73);
  uint64_t v84 = (char *)&v67 - v16;
  uint64_t v80 = *(void *)(v14 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)&v67 - v20);
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v71 = sub_1C4497B38();
  uint64_t v70 = *(void *)(v71 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v71);
  uint64_t v79 = (char *)&v67 - v24;
  uint64_t v78 = *(void *)(v22 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v69 = (char *)&v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  int v68 = (char *)&v67 - v27;
  uint64_t v28 = v5;
  uint64_t v29 = swift_getAssociatedTypeWitness();
  uint64_t v90 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v92.n128_u64[0] = v29;
  v92.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v93 = &protocol witness table for Int;
  uint64_t v94 = MEMORY[0x1E4FBB560];
  uint64_t v31 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v31, (uint64_t)&v95);
  uint64_t v85 = v6;
  if (v95 == 1)
  {
    __n128 v82 = v21;
    uint64_t v83 = v19;
    unint64_t v41 = v5[1];
    v91.n128_u64[0] = *v28;
    uint64_t v40 = v91.n128_u64[0];
    v91.n128_u64[1] = v41;
    uint64_t v42 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v91, &v92);
    __n128 v43 = v92;
    __n128 v91 = v92;
    uint64_t v44 = v89;
    uint64_t v45 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v89 + 16);
    sub_1C3F7E324(v40, v41);
    uint64_t v46 = v84;
    v45(&v91, v14, v42, v88, v44);
    sub_1C3F7E2CC(v43.n128_i64[0], v43.n128_u64[1]);
    uint64_t v47 = v80;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v46, 1, v14) == 1)
    {
      (*(void (**)(char *, uint64_t))(v72 + 8))(v84, v73);
      goto LABEL_9;
    }
    uint64_t v63 = *(void (**)(unsigned int (**)(char *, uint64_t, uint64_t), char *, uint64_t))(v47 + 32);
    uint64_t v64 = v82;
    v63(v82, v84, v14);
    v63(v83, (char *)v64, v14);
    uint64_t v61 = swift_getAssociatedTypeWitness();
    uint64_t v62 = v86;
  }
  else if (v95)
  {
    uint64_t v48 = v81;
    unint64_t v49 = v5[1];
    v91.n128_u64[0] = *v28;
    uint64_t v50 = v91.n128_u64[0];
    v91.n128_u64[1] = v49;
    uint64_t v51 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v91, &v92);
    __n128 v52 = v92;
    __n128 v91 = v92;
    uint64_t v53 = v89;
    uint64_t v54 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v89 + 16);
    sub_1C3F7E324(v50, v49);
    uint64_t v55 = (char *)v83;
    v54(&v91, v48, v51, v88, v53);
    sub_1C3F7E2CC(v52.n128_i64[0], v52.n128_u64[1]);
    uint64_t v56 = v82;
    if (v82[6](v55, 1, v48) == 1)
    {
      (*(void (**)(char *, uint64_t))(v76 + 8))(v55, v77);
      goto LABEL_9;
    }
    uint64_t v65 = v56[4];
    uint64_t v66 = v74;
    v65(v74, (uint64_t)v55, v48);
    v65(v75, (uint64_t)v66, v48);
    uint64_t v61 = swift_getAssociatedTypeWitness();
    uint64_t v62 = v86;
  }
  else
  {
    unint64_t v33 = v5[1];
    v91.n128_u64[0] = *v5;
    uint64_t v32 = v91.n128_u64[0];
    v91.n128_u64[1] = v33;
    uint64_t v34 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v91, &v92);
    __n128 v35 = v92;
    __n128 v91 = v92;
    uint64_t v36 = v89;
    uint64_t v37 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v89 + 16);
    sub_1C3F7E324(v32, v33);
    uint64_t v38 = v79;
    v37(&v91, v22, v34, v88, v36);
    sub_1C3F7E2CC(v35.n128_i64[0], v35.n128_u64[1]);
    uint64_t v39 = v78;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v38, 1, v22) == 1)
    {
      (*(void (**)(char *, uint64_t))(v70 + 8))(v38, v71);
LABEL_9:
      uint64_t v57 = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v86, 1, 1, v57);
    }
    __n128 v59 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    uint64_t v60 = v68;
    v59(v68, v38, v22);
    v59(v69, v60, v22);
    uint64_t v61 = swift_getAssociatedTypeWitness();
    uint64_t v62 = v86;
  }
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v62, 0, 1, v61);
}

uint64_t sub_1C40C2D48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v76 = a2;
  uint64_t v77 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1C4497B38();
  uint64_t v65 = *(void *)(v4 - 8);
  uint64_t v66 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v75 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v58 - v6);
  uint64_t v70 = AssociatedTypeWitness;
  uint64_t v74 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v64 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v63 = (char *)&v58 - v9;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v62 = sub_1C4497B38();
  uint64_t v68 = *(void *)(v62 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v62);
  uint64_t v72 = (uint64_t)&v58 - v12;
  uint64_t v73 = v10;
  uint64_t v71 = *(void *)(v10 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v58 - v16);
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v61 = sub_1C4497B38();
  uint64_t v60 = *(void *)(v61 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v61);
  uint64_t v67 = (uint64_t)&v58 - v20;
  uint64_t v69 = *(void *)(v18 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  __n128 v59 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v58 = (char *)&v58 - v23;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v79.n128_u64[0] = v24;
  v79.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v80 = &protocol witness table for Int;
  uint64_t v81 = MEMORY[0x1E4FBB560];
  uint64_t v26 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v26, (uint64_t)&v82);
  if (v82 == 1)
  {
    uint64_t v74 = v17;
    uint64_t v75 = v15;
    uint64_t v33 = v68;
    uint64_t v34 = *v2;
    unint64_t v35 = v2[1];
    v78.n128_u64[0] = v34;
    v78.n128_u64[1] = v35;
    uint64_t v36 = v73;
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v78, &v79);
    __n128 v37 = v79;
    __n128 v78 = v79;
    sub_1C3F7E324(v34, v35);
    uint64_t v38 = type metadata accessor for WeakRef();
    uint64_t v39 = v72;
    sub_1C44749D8(v38, v72);
    sub_1C3F7E2CC(v37.n128_i64[0], v37.n128_u64[1]);
    uint64_t v40 = v71;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v39, 1, v36) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v39, v62);
      goto LABEL_9;
    }
    __n128 v52 = *(void (**)(unsigned int (**)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t))(v40 + 32);
    uint64_t v53 = v74;
    v52(v74, v39, v36);
    v52(v75, (uint64_t)v53, v36);
    goto LABEL_12;
  }
  if (!v82)
  {
    unint64_t v28 = v2[1];
    v78.n128_u64[0] = *v2;
    uint64_t v27 = v78.n128_u64[0];
    v78.n128_u64[1] = v28;
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v78, &v79);
    __n128 v29 = v79;
    __n128 v78 = v79;
    sub_1C3F7E324(v27, v28);
    uint64_t v30 = type metadata accessor for WeakRef();
    uint64_t v31 = v67;
    sub_1C44749D8(v30, v67);
    sub_1C3F7E2CC(v29.n128_i64[0], v29.n128_u64[1]);
    uint64_t v32 = v69;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v31, 1, v18) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v31, v61);
LABEL_9:
      uint64_t v48 = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v76, 1, 1, v48);
    }
    uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 32);
    uint64_t v51 = v58;
    v50(v58, v31, v18);
    v50(v59, (uint64_t)v51, v18);
LABEL_12:
    uint64_t v54 = swift_getAssociatedTypeWitness();
    uint64_t v55 = v76;
    goto LABEL_14;
  }
  uint64_t v41 = *v2;
  unint64_t v42 = v2[1];
  v78.n128_u64[0] = v41;
  v78.n128_u64[1] = v42;
  uint64_t v43 = v70;
  swift_getAssociatedConformanceWitness();
  WeakRef.init(id:)(&v78, &v79);
  __n128 v44 = v79;
  __n128 v78 = v79;
  sub_1C3F7E324(v41, v42);
  uint64_t v45 = type metadata accessor for WeakRef();
  uint64_t v46 = (uint64_t)v75;
  sub_1C44749D8(v45, (uint64_t)v75);
  sub_1C3F7E2CC(v44.n128_i64[0], v44.n128_u64[1]);
  uint64_t v47 = v74;
  if (v74[6](v46, 1, v43) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v46, v66);
    goto LABEL_9;
  }
  uint64_t v56 = v47[4];
  uint64_t v57 = v63;
  v56((uint64_t)v63, v46, v43);
  v56((uint64_t)v64, (uint64_t)v57, v43);
  uint64_t v54 = swift_getAssociatedTypeWitness();
  uint64_t v55 = v76;
LABEL_14:
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v55, 0, 1, v54);
}

uint64_t sub_1C40C3618(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v58 = a2;
  uint64_t v59 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1C4497B38();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v54 = (char *)&v51 - v5;
  uint64_t v53 = swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_1C4497B38();
  MEMORY[0x1F4188790](v6 - 8);
  __n128 v52 = (char *)&v51 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1C4497B38();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v51 = (char *)&v51 - v10;
  swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_1C4497B38();
  uint64_t v56 = *(void *)(v11 - 8);
  uint64_t v57 = v11;
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v51 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v61.n128_u64[0] = v20;
  v61.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v62 = &protocol witness table for Int;
  uint64_t v63 = MEMORY[0x1E4FBB560];
  uint64_t v22 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v22, (uint64_t)&v64);
  if (v64 == 1)
  {
    unint64_t v35 = v2[1];
    v60.n128_u64[0] = *v3;
    uint64_t v34 = v60.n128_u64[0];
    v60.n128_u64[1] = v35;
    uint64_t v36 = v53;
    uint64_t v37 = swift_getAssociatedConformanceWitness();
    __n128 v38 = WeakRef.init(id:)(&v60, &v61);
    unint64_t v40 = v61.n128_u64[1];
    unint64_t v39 = v61.n128_u64[0];
    uint64_t v42 = v56;
    uint64_t v41 = v57;
    uint64_t v43 = v59;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v56 + 16))(v17, v59, v57, v38);
    sub_1C3F7E324(v34, v35);
    uint64_t v44 = (uint64_t)v52;
    int v45 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v44, v45 ^ 1u, 1, v36);
    v60.n128_u64[0] = v39;
  }
  else
  {
    if (!v64)
    {
      unint64_t v24 = v2[1];
      v60.n128_u64[0] = *v3;
      uint64_t v23 = v60.n128_u64[0];
      v60.n128_u64[1] = v24;
      uint64_t v25 = swift_getAssociatedConformanceWitness();
      __n128 v26 = WeakRef.init(id:)(&v60, &v61);
      __n128 v27 = v61;
      uint64_t v29 = v56;
      uint64_t v28 = v57;
      uint64_t v30 = v59;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v56 + 16))(v19, v59, v57, v26);
      sub_1C3F7E324(v23, v24);
      uint64_t v31 = (uint64_t)v51;
      int v32 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v31, v32 ^ 1u, 1, v8);
      __n128 v60 = v27;
      sub_1C4055840(v31, (uint64_t)&v60, v8, v25);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v30, v28);
    }
    unint64_t v47 = v2[1];
    v60.n128_u64[0] = *v3;
    uint64_t v46 = v60.n128_u64[0];
    v60.n128_u64[1] = v47;
    uint64_t v36 = AssociatedTypeWitness;
    uint64_t v37 = swift_getAssociatedConformanceWitness();
    __n128 v48 = WeakRef.init(id:)(&v60, &v61);
    unint64_t v40 = v61.n128_u64[1];
    unint64_t v49 = v61.n128_u64[0];
    uint64_t v42 = v56;
    uint64_t v41 = v57;
    uint64_t v43 = v59;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v56 + 16))(v14, v59, v57, v48);
    sub_1C3F7E324(v46, v47);
    uint64_t v44 = (uint64_t)v54;
    int v50 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v44, v50 ^ 1u, 1, v36);
    v60.n128_u64[0] = v49;
  }
  v60.n128_u64[1] = v40;
  sub_1C4055840(v44, (uint64_t)&v60, v36, v37);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v43, v41);
}

uint64_t WeakTagged_2.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C40C2D48);
}

uint64_t sub_1C40C3C0C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for WeakTagged_2();
  swift_retain();
  sub_1C40F1F80(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_2, (uint64_t)&associated type descriptor for Tagged_2.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40C3618);
  return swift_release();
}

uint64_t WeakTagged_2.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1F80(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_2, (uint64_t)&associated type descriptor for Tagged_2.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40C3618);
  swift_release();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1C4497B38();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  return v5(a1, v4);
}

void (*WeakTagged_2.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_1C4497B38();
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_2.subscript.getter(a2, a3);
  return sub_1C40C3E68;
}

void sub_1C40C3E68(uint64_t **a1, char a2)
{
}

uint64_t WeakTagged_2.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C40C2D48);
}

uint64_t WeakTagged_2.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))WeakTagged_2.init(_:id:), a3);
}

uint64_t WeakTagged_2.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))WeakTagged_2.copy(renamingReferences:));
}

uint64_t WeakTagged_2.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t static WeakTagged_2.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_2);
}

uint64_t WeakTagged_2.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))WeakTagged_2.hash(into:));
}

uint64_t sub_1C40C3F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))WeakTagged_2.hash(into:));
}

uint64_t sub_1C40C3F6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_2.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t WeakTagged_2.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C40C3F98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return WeakTagged_2.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t WeakTagged_2.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40C3FE8(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_2, 1, a4);
}

uint64_t sub_1C40C3FE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void, uint64_t, uint64_t)@<X3>, int a5@<W4>, void *a6@<X8>)
{
  int v103 = a5;
  uint64_t v119 = a4;
  uint64_t v120 = a3;
  uint64_t v121 = a2;
  uint64_t v122 = a6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0560);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v113 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v110 = *(void *)(v112 - 8);
  MEMORY[0x1F4188790](v112);
  uint64_t v114 = (uint64_t *)((char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v109 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1F4188790](v109);
  uint64_t v111 = (uint64_t)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v108 = (uint64_t)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v107 = (uint64_t)&v102 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v116 = (uint64_t)&v102 - v16;
  uint64_t v129 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v17 = MEMORY[0x1F4188790](v129);
  uint64_t v125 = (uint64_t)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v117 = (uint64_t)&v102 - v19;
  uint64_t v20 = type metadata accessor for Proto_Value(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  char v126 = (uint64_t *)((char *)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v124 = (uint64_t)&v102 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v127 = (char *)&v102 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v28 = MEMORY[0x1F4188790](v27 - 8);
  uint64_t v123 = (uint64_t)&v102 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v118 = (uint64_t)&v102 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v102 - v33;
  MEMORY[0x1F4188790](v32);
  uint64_t v36 = (char *)&v102 - v35;
  uint64_t v128 = a1;
  uint64_t v37 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v37, (uint64_t)v36, &qword_1EBBC0540);
  unint64_t v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v38 = v21 + 48;
  unint64_t v39 = v40;
  int v41 = v40(v36, 1, v20);
  sub_1C3F962E0((uint64_t)v36, &qword_1EBBC0540);
  if (v41 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v42 = 0xD000000000000017;
    *(void *)(v42 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v42 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v128;
  sub_1C3F970C4(v37, (uint64_t)v34, &qword_1EBBC0540);
  uint64_t result = v39(v34, 1, v20);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v44 = (uint64_t)v127;
  sub_1C3F8ABD8((uint64_t)v34, (uint64_t)v127, type metadata accessor for Proto_Value);
  uint64_t v102 = v20;
  uint64_t v45 = *(void *)(v44 + *(int *)(v20 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v46 = v45;
  uint64_t v47 = v116;
  sub_1C3F970C4(v46, v116, &qword_1EBBBF8A0);
  uint64_t v48 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v104 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 48);
  int v49 = v104(v47, 1, v48);
  uint64_t v105 = v38;
  if (v49 == 1)
  {
    swift_retain();
    sub_1C3F962E0(v47, &qword_1EBBBF8A0);
    uint64_t v50 = v117;
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v50 = v117;
    if (EnumCaseMultiPayload == 11)
    {
      __n128 v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v39;
      sub_1C3F8ABD8(v47, v117, type metadata accessor for Proto_TaggedValue);
      goto LABEL_12;
    }
    swift_retain();
    sub_1C3F8B0A8(v47, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v53 = *(int *)(v129 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  __n128 v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v39;
  *(void *)(v50 + v53) = qword_1EA39AF60;
LABEL_12:
  swift_retain();
  sub_1C3F8B0A8((uint64_t)v127, type metadata accessor for Proto_Value);
  uint64_t v54 = *(void *)(v50 + *(int *)(v129 + 20));
  swift_beginAccess();
  uint64_t v55 = *(void *)(v54 + 16);
  sub_1C3F8B0A8(v50, type metadata accessor for Proto_TaggedValue);
  v130 = (uint64_t (*)(void, void, void))v55;
  uint64_t v56 = v119(0, v121, v120);
  uint64_t v57 = (char *)v122 + *(int *)(v56 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v127 = v57;
  uint64_t v119 = (uint64_t (*)(void, uint64_t, uint64_t))AssociatedTypeWitness;
  uint64_t v60 = AssociatedTypeWitness;
  uint64_t v61 = AssociatedConformanceWitness;
  CRExtensible.init(rawValue:)((uint64_t)&v130, v60, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E4FBB560], v57);
  uint64_t v62 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  uint64_t v63 = v62;
  uint64_t v64 = v118;
  sub_1C3F970C4(v63, v118, &qword_1EBBC0540);
  uint64_t v65 = v102;
  uint64_t result = v52(v64, 1, v102);
  if (result == 1)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v66 = v64;
  uint64_t v67 = v124;
  sub_1C3F8ABD8(v66, v124, type metadata accessor for Proto_Value);
  uint64_t v68 = *(void *)(v67 + *(int *)(v65 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v69 = v68;
  uint64_t v70 = v107;
  sub_1C3F970C4(v69, v107, &qword_1EBBBF8A0);
  int v71 = v104(v70, 1, v48);
  uint64_t v72 = v125;
  if (v71 == 1)
  {
    sub_1C3F962E0(v70, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      sub_1C3F8ABD8(v70, v72, type metadata accessor for Proto_TaggedValue);
      goto LABEL_21;
    }
    sub_1C3F8B0A8(v70, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v73 = *(int *)(v129 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)(v72 + v73) = qword_1EA39AF60;
  swift_retain();
LABEL_21:
  uint64_t v74 = (uint64_t)v113;
  sub_1C3F8B0A8(v124, type metadata accessor for Proto_Value);
  uint64_t v75 = *(void *)(v72 + *(int *)(v129 + 20))
      + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  uint64_t v76 = v75;
  uint64_t v77 = v123;
  sub_1C3F970C4(v76, v123, &qword_1EBBC0540);
  if (v52(v77, 1, v65) == 1)
  {
    uint64_t v78 = (uint64_t)v126;
    sub_1C4496888();
    uint64_t v79 = *(int *)(v65 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)(v78 + v79) = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0(v123, &qword_1EBBC0540);
  }
  else
  {
    uint64_t v78 = (uint64_t)v126;
    sub_1C3F8ABD8(v77, (uint64_t)v126, type metadata accessor for Proto_Value);
  }
  sub_1C3F8B0A8(v125, type metadata accessor for Proto_TaggedValue);
  uint64_t v80 = *(void *)(v78 + *(int *)(v65 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v81 = v80;
  uint64_t v82 = v108;
  sub_1C3F970C4(v81, v108, &qword_1EBBBF8A0);
  if (v104(v82, 1, v48) == 1)
  {
    sub_1C3F962E0(v82, &qword_1EBBBF8A0);
    uint64_t v84 = v111;
    uint64_t v83 = v112;
    uint64_t v85 = v109;
  }
  else
  {
    int v86 = swift_getEnumCaseMultiPayload();
    uint64_t v84 = v111;
    uint64_t v85 = v109;
    if (v86 == 7)
    {
      sub_1C3F8ABD8(v82, v111, type metadata accessor for Proto_Reference);
      uint64_t v83 = v112;
      goto LABEL_34;
    }
    sub_1C3F8B0A8(v82, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    uint64_t v83 = v112;
  }
  sub_1C4496888();
  uint64_t v87 = *(int *)(v85 + 20);
  if (qword_1EBBBC818 != -1) {
    swift_once();
  }
  *(void *)(v84 + v87) = qword_1EBBBC808;
  swift_retain();
LABEL_34:
  sub_1C3F8B0A8((uint64_t)v126, type metadata accessor for Proto_Value);
  uint64_t v88 = *(void *)(v84 + *(int *)(v85 + 20))
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  sub_1C3F970C4(v88, v74, &qword_1EBBC0560);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48))(v74, 1, v83) == 1)
  {
    uint64_t v89 = v114;
    *uint64_t v114 = MEMORY[0x1E4FBC860];
    v89[1] = sub_1C4496868();
    v89[2] = v90;
    sub_1C4496888();
    sub_1C3F962E0(v74, &qword_1EBBC0560);
  }
  else
  {
    uint64_t v89 = v114;
    sub_1C3F8ABD8(v74, (uint64_t)v114, type metadata accessor for Proto_KeyPath);
  }
  sub_1C3F8B0A8(v84, type metadata accessor for Proto_Reference);
  uint64_t v91 = v128;
  swift_retain();
  uint64_t v92 = v115;
  sub_1C3F766DC((uint64_t)v89, (uint64_t *)&v130);
  if (v92)
  {
    swift_release();
    swift_release();
    v130 = v119;
    unint64_t v131 = v61;
    uint64_t v132 = &protocol witness table for Int;
    uint64_t v133 = MEMORY[0x1E4FBB560];
    uint64_t v101 = type metadata accessor for CRExtensible();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v101 - 8) + 8))(v127, v101);
  }
  uint64_t v94 = (uint64_t)v130;
  unint64_t v93 = v131;
  uint64_t v95 = v122;
  *uint64_t v122 = v130;
  v95[1] = v93;
  sub_1C3F7E324(v94, v93);
  v130 = v119;
  unint64_t v131 = v61;
  uint64_t v132 = &protocol witness table for Int;
  uint64_t v133 = MEMORY[0x1E4FBB560];
  uint64_t v96 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v96, (uint64_t)&v134);
  uint64_t v117 = v61;
  if (v134 == 1)
  {
    uint64_t v97 = *(void **)(v91 + 16);
    if (v97) {
      goto LABEL_46;
    }
    goto LABEL_50;
  }
  if (!v134)
  {
    uint64_t v97 = *(void **)(v91 + 16);
    if (v97) {
      goto LABEL_46;
    }
    goto LABEL_49;
  }
  uint64_t v97 = *(void **)(v91 + 16);
  if (v97)
  {
LABEL_46:
    uint64_t v98 = swift_getAssociatedTypeWitness();
    v130 = (uint64_t (*)(void, void, void))v94;
    unint64_t v131 = v93;
    uint64_t v99 = (uint64_t *)(*v97 + 176);
    uint64_t v129 = *v99;
    char v126 = v99;
    uint64_t v100 = swift_getAssociatedConformanceWitness();
    swift_retain();
    ((void (*)(uint64_t, uint64_t (**)(void, void, void), uint64_t, void, uint64_t, uint64_t))v129)(v98, &v130, v128, v103 & 1, v98, v100);
    swift_release();
    swift_release();
    swift_release();
    return sub_1C3F7E2CC(v94, v93);
  }
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_1C40C4FD4(uint64_t a1, uint64_t a2)
{
  return WeakTagged_2.encode(to:)(a1, a2);
}

uint64_t WeakTagged_2.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C40C5014(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_2, (uint64_t)&associated type descriptor for Tagged_2.Enum, (uint64_t)&associated conformance descriptor for Tagged_2.Tagged_2.Enum: RawRepresentable);
}

uint64_t sub_1C40C5014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v171 = a5;
  uint64_t v160 = a4;
  uint64_t v161 = a3;
  uint64_t v152 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0560);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  v159 = (char *)&v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v158 = (char *)&v144 - v8;
  uint64_t v168 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v156 = *(void *)(v168 - 8);
  MEMORY[0x1F4188790](v168);
  v166 = (char **)((char *)&v144 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v165 = type metadata accessor for Proto_Reference(0);
  uint64_t v10 = MEMORY[0x1F4188790](v165);
  uint64_t v157 = (uint64_t)&v144 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  v153 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v144 - v12);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  v155 = (char *)&v144 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v170 = (uint64_t)&v144 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v169 = (uint64_t)&v144 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v163 = (uint64_t)&v144 - v20;
  uint64_t v176 = type metadata accessor for Proto_Value(0);
  uint64_t v174 = *(void *)(v176 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v176);
  v167 = (char *)&v144 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  v173 = (char *)&v144 - v23;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v25 = MEMORY[0x1F4188790](v24 - 8);
  uint64_t v154 = (uint64_t)&v144 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)&v144 - v28;
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  uint64_t v32 = (char *)&v144 - v31;
  uint64_t v33 = MEMORY[0x1F4188790](v30);
  uint64_t v35 = (char *)&v144 - v34;
  MEMORY[0x1F4188790](v33);
  uint64_t v151 = (uint64_t)&v144 - v36;
  uint64_t v37 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v38 = MEMORY[0x1F4188790](v37);
  unint64_t v40 = (char *)&v144 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = MEMORY[0x1F4188790](v38);
  uint64_t v43 = (char *)&v144 - v42;
  MEMORY[0x1F4188790](v41);
  uint64_t v45 = (char *)&v144 - v44;
  uint64_t v46 = v172;
  uint64_t result = sub_1C3F6DD10();
  if (v46) {
    return result;
  }
  v144 = v45;
  v145 = v35;
  v146 = v32;
  v147 = v29;
  uint64_t v148 = 0;
  v149 = v43;
  uint64_t v162 = v37;
  v150 = v40;
  uint64_t v48 = result;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_retain();
  v175[0] = AssociatedTypeWitness;
  v175[1] = AssociatedConformanceWitness;
  v175[2] = &protocol witness table for Int;
  v175[3] = MEMORY[0x1E4FBB560];
  uint64_t v51 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v51, (uint64_t)v175);
  uint64_t v52 = v175[0];
  uint64_t v152 = v48;
  uint64_t v53 = v48 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
  swift_beginAccess();
  uint64_t v54 = *(int *)(v176 + 20);
  uint64_t v161 = v53;
  uint64_t v55 = *(void *)(v53 + v54)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v56 = v55;
  uint64_t v57 = v151;
  sub_1C3F970C4(v56, v151, &qword_1EBBBF8A0);
  uint64_t v58 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v59 = *(void *)(v58 - 8);
  uint64_t v60 = *(unsigned int (**)(void, void, void))(v59 + 48);
  uint64_t v171 = v59 + 48;
  v172 = (uint64_t (*)(void, void, void))v60;
  if (v60(v57, 1, v58) == 1)
  {
    sub_1C3F962E0(v57, &qword_1EBBBF8A0);
    uint64_t v61 = v165;
    uint64_t v62 = (uint64_t)v149;
    uint64_t v63 = (uint64_t)v144;
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v61 = v165;
    uint64_t v62 = (uint64_t)v149;
    uint64_t v63 = (uint64_t)v144;
    if (EnumCaseMultiPayload == 11)
    {
      sub_1C3F8ABD8(v57, (uint64_t)v144, type metadata accessor for Proto_TaggedValue);
      uint64_t v65 = v162;
      goto LABEL_10;
    }
    sub_1C3F8B0A8(v57, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v65 = v162;
  uint64_t v66 = *(int *)(v162 + 20);
  if (qword_1EA39AF70 != -1)
  {
    swift_once();
    uint64_t v65 = v162;
  }
  *(void *)(v63 + v66) = qword_1EA39AF60;
  swift_retain();
LABEL_10:
  uint64_t v67 = *(int *)(v65 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    uint64_t v68 = swift_retain();
    *(void *)(v63 + v67) = sub_1C4400A40(v68);
    swift_release();
  }
  uint64_t v69 = *(void *)(v63 + v67);
  swift_beginAccess();
  *(void *)(v69 + 16) = v52;
  uint64_t v70 = v161;
  sub_1C43F0970(v63);
  uint64_t v71 = *(void *)(v70 + v54)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v72 = v71;
  uint64_t v73 = (uint64_t)v145;
  sub_1C3F970C4(v72, (uint64_t)v145, &qword_1EBBBF8A0);
  int v74 = v172(v73, 1, v58);
  uint64_t v160 = v58;
  if (v74 == 1)
  {
    sub_1C3F962E0(v73, &qword_1EBBBF8A0);
    uint64_t v75 = v176;
    uint64_t v76 = v174;
    uint64_t v77 = (uint64_t)v153;
  }
  else
  {
    int v78 = swift_getEnumCaseMultiPayload();
    uint64_t v75 = v176;
    uint64_t v76 = v174;
    uint64_t v77 = (uint64_t)v153;
    if (v78 == 11)
    {
      uint64_t v79 = v61;
      sub_1C3F8ABD8(v73, v62, type metadata accessor for Proto_TaggedValue);
      uint64_t v80 = v162;
      goto LABEL_20;
    }
    sub_1C3F8B0A8(v73, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v80 = v162;
  uint64_t v81 = *(int *)(v162 + 20);
  if (qword_1EA39AF70 != -1)
  {
    swift_once();
    uint64_t v80 = v162;
  }
  uint64_t v79 = v61;
  *(void *)(v62 + v81) = qword_1EA39AF60;
  swift_retain();
LABEL_20:
  uint64_t v82 = *(int *)(v80 + 20);
  uint64_t v83 = *(void *)(v62 + v82)
      + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  uint64_t v84 = v83;
  uint64_t v85 = v163;
  sub_1C3F970C4(v84, v163, &qword_1EBBC0540);
  v153 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
  uint64_t v151 = v76 + 48;
  if (v153(v85, 1, v75) == 1)
  {
    int v86 = v173;
    sub_1C4496888();
    uint64_t v87 = *(int *)(v75 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)&v86[v87] = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0(v163, &qword_1EBBC0540);
  }
  else
  {
    int v86 = v173;
    sub_1C3F8ABD8(v85, (uint64_t)v173, type metadata accessor for Proto_Value);
  }
  uint64_t v88 = *(void *)&v86[*(int *)(v75 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v89 = (uint64_t)v146;
  sub_1C3F970C4(v88, (uint64_t)v146, &qword_1EBBBF8A0);
  if (v172(v89, 1, v160) == 1)
  {
    sub_1C3F962E0(v89, &qword_1EBBBF8A0);
    uint64_t v90 = (uint64_t)v149;
  }
  else
  {
    BOOL v91 = swift_getEnumCaseMultiPayload() == 7;
    uint64_t v92 = v89;
    uint64_t v90 = (uint64_t)v149;
    if (v91)
    {
      sub_1C3F8ABD8(v92, v77, type metadata accessor for Proto_Reference);
      goto LABEL_33;
    }
    sub_1C3F8B0A8(v92, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v93 = *(int *)(v79 + 20);
  if (qword_1EBBBC818 != -1) {
    swift_once();
  }
  *(void *)(v77 + v93) = qword_1EBBBC808;
  swift_retain();
LABEL_33:
  uint64_t v94 = *(int *)(v79 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Reference._StorageClass(0);
    swift_allocObject();
    uint64_t v95 = swift_retain();
    *(void *)(v77 + v94) = sub_1C3FB0204(v95);
    swift_release();
  }
  uint64_t v96 = *(void *)(v77 + v94);
  swift_beginAccess();
  *(void *)(v96 + 24) = 1;
  *(unsigned char *)(v96 + 32) = 1;
  sub_1C43F0BE0(v77);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    uint64_t v97 = swift_retain();
    *(void *)(v90 + v82) = sub_1C4400A40(v97);
    swift_release();
  }
  uint64_t v98 = *(void *)(v90 + v82);
  uint64_t v99 = v169;
  sub_1C3F8ABD8((uint64_t)v173, v169, type metadata accessor for Proto_Value);
  uint64_t v100 = v176;
  v173 = *(char **)(v76 + 56);
  uint64_t v174 = v76 + 56;
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v173)(v99, 0, 1, v176);
  uint64_t v101 = v170;
  sub_1C3F961BC(v99, v170, &qword_1EBBC0540);
  uint64_t v102 = v98
       + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v101, v102, &qword_1EBBC0540);
  swift_endAccess();
  swift_release();
  uint64_t v103 = v161;
  sub_1C43F0970(v90);
  swift_endAccess();
  uint64_t v104 = *v164;
  unint64_t v105 = v164[1];
  uint64_t v106 = v166;
  void *v166 = MEMORY[0x1E4FBC860];
  sub_1C3F7E324(v104, v105);
  uint64_t v107 = sub_1C4496868();
  unint64_t v109 = v108;
  sub_1C4496888();
  uint64_t v110 = v107;
  uint64_t v111 = v100;
  sub_1C3F7E2CC(v110, v109);
  v106[1] = v104;
  v106[2] = v105;
  swift_beginAccess();
  uint64_t v112 = *(void *)(v103 + *(int *)(v100 + 20))
       + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v113 = v112;
  uint64_t v114 = (uint64_t)v147;
  sub_1C3F970C4(v113, (uint64_t)v147, &qword_1EBBBF8A0);
  if (v172(v114, 1, v160) == 1)
  {
    sub_1C3F962E0(v114, &qword_1EBBBF8A0);
    uint64_t v115 = (uint64_t)v167;
    uint64_t v116 = (uint64_t)v150;
    uint64_t v117 = v165;
    uint64_t v118 = (uint64_t)v155;
  }
  else
  {
    int v119 = swift_getEnumCaseMultiPayload();
    uint64_t v115 = (uint64_t)v167;
    uint64_t v116 = (uint64_t)v150;
    uint64_t v118 = (uint64_t)v155;
    if (v119 == 11)
    {
      sub_1C3F8ABD8(v114, (uint64_t)v150, type metadata accessor for Proto_TaggedValue);
      uint64_t v117 = v165;
      uint64_t v120 = v162;
      goto LABEL_45;
    }
    sub_1C3F8B0A8(v114, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    uint64_t v117 = v165;
  }
  sub_1C4496888();
  uint64_t v120 = v162;
  uint64_t v121 = *(int *)(v162 + 20);
  if (qword_1EA39AF70 != -1)
  {
    swift_once();
    uint64_t v120 = v162;
  }
  *(void *)(v116 + v121) = qword_1EA39AF60;
  swift_retain();
LABEL_45:
  uint64_t v122 = *(int *)(v120 + 20);
  uint64_t v123 = *(void *)(v116 + v122)
       + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  sub_1C3F970C4(v123, v118, &qword_1EBBC0540);
  if (v153(v118, 1, v111) == 1)
  {
    sub_1C4496888();
    uint64_t v124 = *(int *)(v111 + 20);
    uint64_t v125 = (uint64_t)v159;
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)(v115 + v124) = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0(v118, &qword_1EBBC0540);
  }
  else
  {
    sub_1C3F8ABD8(v118, v115, type metadata accessor for Proto_Value);
    uint64_t v125 = (uint64_t)v159;
  }
  uint64_t v126 = *(void *)(v115 + *(int *)(v111 + 20))
       + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v127 = v126;
  uint64_t v128 = v154;
  sub_1C3F970C4(v127, v154, &qword_1EBBBF8A0);
  if (v172(v128, 1, v160) == 1)
  {
    sub_1C3F962E0(v128, &qword_1EBBBF8A0);
    uint64_t v129 = v170;
    uint64_t v131 = v157;
    uint64_t v130 = (uint64_t)v158;
LABEL_55:
    sub_1C4496888();
    uint64_t v133 = *(int *)(v117 + 20);
    if (qword_1EBBBC818 != -1) {
      swift_once();
    }
    *(void *)(v131 + v133) = qword_1EBBBC808;
    swift_retain();
    goto LABEL_58;
  }
  int v132 = swift_getEnumCaseMultiPayload();
  uint64_t v129 = v170;
  uint64_t v131 = v157;
  uint64_t v130 = (uint64_t)v158;
  if (v132 != 7)
  {
    sub_1C3F8B0A8(v128, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_55;
  }
  sub_1C3F8ABD8(v128, v157, type metadata accessor for Proto_Reference);
LABEL_58:
  uint64_t v134 = *(int *)(v117 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Reference._StorageClass(0);
    swift_allocObject();
    uint64_t v135 = swift_retain();
    *(void *)(v131 + v134) = sub_1C3FB0204(v135);
    swift_release();
  }
  uint64_t v136 = *(void *)(v131 + v134);
  sub_1C3F8ABD8((uint64_t)v166, v130, type metadata accessor for Proto_KeyPath);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v156 + 56))(v130, 0, 1, v168);
  sub_1C3F961BC(v130, v125, &qword_1EBBC0560);
  uint64_t v137 = v136 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v125, v137, &qword_1EBBC0560);
  swift_endAccess();
  swift_release();
  uint64_t v138 = (uint64_t)v167;
  sub_1C43F0BE0(v131);
  uint64_t v139 = (uint64_t)v150;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    uint64_t v140 = swift_retain();
    *(void *)(v139 + v122) = sub_1C4400A40(v140);
    swift_release();
  }
  uint64_t v141 = *(void *)(v139 + v122);
  uint64_t v142 = v169;
  sub_1C3F8ABD8(v138, v169, type metadata accessor for Proto_Value);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v173)(v142, 0, 1, v176);
  sub_1C3F961BC(v142, v129, &qword_1EBBC0540);
  uint64_t v143 = v141
       + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v129, v143, &qword_1EBBC0540);
  swift_endAccess();
  swift_release();
  sub_1C43F0970(v139);
  swift_endAccess();
  return swift_release();
}

uint64_t (*WeakTagged_3.id.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_3.tag.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C40EA434(a1, a2);
}

uint64_t WeakTagged_3.tag.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C40EA528(a1, a2);
}

uint64_t (*WeakTagged_3.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_3.init(_:identity:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_3.init(_:id:));
}

{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_3.init(_:id:));
}

uint64_t WeakTagged_3.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1C40EA66C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_3, a5);
}

{
  return sub_1C40EA7CC(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_3, a5);
}

uint64_t WeakTagged_3.init(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for SharedTagged_3() + 36);
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for WeakTagged_3() + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v4, v3, v5);
}

uint64_t WeakTagged_3.tagged1.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  else
  {
    uint64_t v8 = *v1;
    unint64_t v9 = v2[1];
    v10.n128_u64[0] = v8;
    v10.n128_u64[1] = v9;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v6 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t WeakTagged_3.tagged2.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 1)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_3.tagged3.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 2)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_3.unknown.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] < 2)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  else
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_3.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v110 = a3;
  uint64_t v111 = a4;
  uint64_t v109 = a1;
  uint64_t v112 = a5;
  uint64_t v6 = *(char **)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v99 = sub_1C4497B38();
  uint64_t v98 = *(void *)(v99 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v99);
  unint64_t v105 = (char *)&v83 - v10;
  uint64_t v106 = (void (*)(void, void, void, void, void))AssociatedTypeWitness;
  uint64_t v104 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v97 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v96 = (char *)&v83 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v95 = sub_1C4497B38();
  uint64_t v94 = *(void *)(v95 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v95);
  unint64_t v108 = (char *)&v83 - v16;
  uint64_t v103 = v14;
  uint64_t v102 = *(void *)(v14 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v93 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v92 = (char *)&v83 - v19;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v91 = sub_1C4497B38();
  uint64_t v90 = *(void *)(v91 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v91);
  uint64_t v101 = (char *)&v83 - v22;
  uint64_t v100 = *(void *)(v20 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v89 = (char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v88 = (char *)&v83 - v25;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v87 = sub_1C4497B38();
  uint64_t v86 = *(void *)(v87 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v87);
  uint64_t v29 = (char *)&v83 - v28;
  uint64_t v107 = *(void *)(v26 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  uint64_t v85 = (char *)&v83 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v84 = (char *)&v83 - v32;
  uint64_t v33 = v5;
  uint64_t v34 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v114.n128_u64[0] = v34;
  v114.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v115 = &protocol witness table for Int;
  uint64_t v116 = MEMORY[0x1E4FBB560];
  uint64_t v36 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v36, (uint64_t)&v117);
  if (v117 == 2)
  {
    unint64_t v44 = v5[1];
    v113.n128_u64[0] = *v33;
    uint64_t v43 = v113.n128_u64[0];
    v113.n128_u64[1] = v44;
    uint64_t v107 = v7;
    uint64_t v45 = v103;
    uint64_t v46 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v113, &v114);
    __n128 v47 = v114;
    __n128 v113 = v114;
    uint64_t v48 = v111;
    int v49 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 16);
    sub_1C3F7E324(v43, v44);
    uint64_t v50 = v108;
    v49(&v113, v45, v46, v110, v48);
    sub_1C3F7E2CC(v47.n128_i64[0], v47.n128_u64[1]);
    uint64_t v51 = v102;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 48))(v50, 1, v45) == 1)
    {
      (*(void (**)(char *, uint64_t))(v94 + 8))(v108, v95);
      goto LABEL_12;
    }
    uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
    uint64_t v76 = v92;
    v75(v92, v108, v45);
    v75(v93, v76, v45);
    uint64_t v77 = swift_getAssociatedTypeWitness();
    uint64_t v78 = v112;
    goto LABEL_18;
  }
  if (v117 == 1)
  {
    unint64_t v53 = v5[1];
    v113.n128_u64[0] = *v33;
    uint64_t v52 = v113.n128_u64[0];
    v113.n128_u64[1] = v53;
    uint64_t v107 = v7;
    unint64_t v108 = v6;
    uint64_t v54 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v113, &v114);
    __n128 v55 = v114;
    __n128 v113 = v114;
    uint64_t v56 = v111;
    uint64_t v57 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 16);
    sub_1C3F7E324(v52, v53);
    uint64_t v58 = v101;
    v57(&v113, v20, v54, v110, v56);
    sub_1C3F7E2CC(v55.n128_i64[0], v55.n128_u64[1]);
    uint64_t v59 = v100;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v58, 1, v20) == 1)
    {
      (*(void (**)(char *, uint64_t))(v90 + 8))(v58, v91);
      goto LABEL_12;
    }
    uint64_t v79 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
    uint64_t v80 = v88;
    v79(v88, v58, v20);
    v79(v89, v80, v20);
    goto LABEL_17;
  }
  if (v117)
  {
    unint64_t v61 = v5[1];
    v113.n128_u64[0] = *v33;
    uint64_t v60 = v113.n128_u64[0];
    v113.n128_u64[1] = v61;
    uint64_t v107 = v7;
    uint64_t v62 = v106;
    uint64_t v63 = swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v113, &v114);
    __n128 v64 = v114;
    __n128 v113 = v114;
    uint64_t v65 = v111;
    uint64_t v66 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(v111 + 16);
    sub_1C3F7E324(v60, v61);
    uint64_t v67 = v105;
    v66(&v113, v62, v63, v110, v65);
    sub_1C3F7E2CC(v64.n128_i64[0], v64.n128_u64[1]);
    uint64_t v68 = v104;
    if ((*(unsigned int (**)(char *, uint64_t, void (*)(void, void, void, void, void)))(v104 + 48))(v67, 1, v62) == 1)
    {
      (*(void (**)(char *, uint64_t))(v98 + 8))(v67, v99);
      goto LABEL_12;
    }
    uint64_t v81 = *(void (**)(void, void, void))(v68 + 32);
    uint64_t v82 = v96;
    v81(v96, v67, v62);
    v81(v97, v82, v62);
LABEL_17:
    uint64_t v77 = swift_getAssociatedTypeWitness();
    uint64_t v78 = v112;
LABEL_18:
    swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v78, 0, 1, v77);
  }
  unint64_t v38 = v5[1];
  v113.n128_u64[0] = *v5;
  uint64_t v37 = v113.n128_u64[0];
  v113.n128_u64[1] = v38;
  unint64_t v108 = v6;
  uint64_t v39 = swift_getAssociatedConformanceWitness();
  WeakRef.init(id:)(&v113, &v114);
  __n128 v40 = v114;
  __n128 v113 = v114;
  uint64_t v41 = v111;
  uint64_t v106 = *(void (**)(void, void, void, void, void))(v111 + 16);
  sub_1C3F7E324(v37, v38);
  v106(&v113, v26, v39, v110, v41);
  sub_1C3F7E2CC(v40.n128_i64[0], v40.n128_u64[1]);
  uint64_t v42 = v107;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v29, 1, v26) == 1)
  {
    (*(void (**)(char *, uint64_t))(v86 + 8))(v29, v87);
LABEL_12:
    uint64_t v69 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v112, 1, 1, v69);
  }
  uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
  uint64_t v72 = v84;
  v71(v84, v29, v26);
  v71(v85, v72, v26);
  uint64_t v73 = swift_getAssociatedTypeWitness();
  uint64_t v74 = v112;
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v74, 0, 1, v73);
}

uint64_t sub_1C40C74CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v95 = a1;
  uint64_t v96 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1C4497B38();
  uint64_t v83 = *(void *)(v4 - 8);
  uint64_t v84 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v93 = (uint64_t)&v69 - v6;
  uint64_t v94 = AssociatedTypeWitness;
  uint64_t v92 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v82 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v81 = (char *)&v69 - v9;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v80 = sub_1C4497B38();
  uint64_t v86 = *(void *)(v80 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v80);
  uint64_t v90 = (uint64_t)&v69 - v12;
  uint64_t v91 = v10;
  uint64_t v89 = *(void *)(v10 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v79 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v78 = (char *)&v69 - v15;
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v77 = sub_1C4497B38();
  uint64_t v76 = *(void *)(v77 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v77);
  uint64_t v88 = (uint64_t)&v69 - v18;
  uint64_t v87 = *(void *)(v16 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v75 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v74 = (char *)&v69 - v21;
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v73 = sub_1C4497B38();
  uint64_t v72 = *(void *)(v73 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v73);
  uint64_t v25 = (char *)&v69 - v24;
  uint64_t v85 = *(void *)(v22 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  uint64_t v71 = (char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v70 = (char *)&v69 - v28;
  uint64_t v29 = v2;
  uint64_t v30 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v98.n128_u64[0] = v30;
  v98.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v99 = &protocol witness table for Int;
  uint64_t v100 = MEMORY[0x1E4FBB560];
  uint64_t v32 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v32, (uint64_t)&v101);
  if (v101 == 2)
  {
    uint64_t v38 = v86;
    unint64_t v40 = v2[1];
    v97.n128_u64[0] = *v29;
    uint64_t v39 = v97.n128_u64[0];
    v97.n128_u64[1] = v40;
    uint64_t v41 = v91;
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v97, &v98);
    __n128 v42 = v98;
    __n128 v97 = v98;
    sub_1C3F7E324(v39, v40);
    uint64_t v43 = type metadata accessor for WeakRef();
    uint64_t v44 = v90;
    sub_1C44749D8(v43, v90);
    sub_1C3F7E2CC(v42.n128_i64[0], v42.n128_u64[1]);
    uint64_t v45 = v89;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v44, 1, v41) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v44, v80);
      goto LABEL_12;
    }
    __n128 v64 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v65 = v78;
    v64(v78, v44, v41);
    uint64_t v66 = &v102;
    goto LABEL_17;
  }
  if (v101 == 1)
  {
    unint64_t v47 = v2[1];
    v97.n128_u64[0] = *v29;
    uint64_t v46 = v97.n128_u64[0];
    v97.n128_u64[1] = v47;
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v97, &v98);
    __n128 v48 = v98;
    __n128 v97 = v98;
    sub_1C3F7E324(v46, v47);
    uint64_t v49 = type metadata accessor for WeakRef();
    uint64_t v50 = v88;
    sub_1C44749D8(v49, v88);
    sub_1C3F7E2CC(v48.n128_i64[0], v48.n128_u64[1]);
    uint64_t v51 = v87;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v50, 1, v16) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v50, v77);
      goto LABEL_12;
    }
    uint64_t v67 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 32);
    uint64_t v68 = v74;
    v67(v74, v50, v16);
    v67(v75, (uint64_t)v68, v16);
    uint64_t v62 = swift_getAssociatedTypeWitness();
    uint64_t v63 = v96;
    goto LABEL_18;
  }
  if (v101)
  {
    unint64_t v53 = v2[1];
    v97.n128_u64[0] = *v29;
    uint64_t v52 = v97.n128_u64[0];
    v97.n128_u64[1] = v53;
    uint64_t v41 = v94;
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v97, &v98);
    __n128 v54 = v98;
    __n128 v97 = v98;
    sub_1C3F7E324(v52, v53);
    uint64_t v55 = type metadata accessor for WeakRef();
    uint64_t v56 = v93;
    sub_1C44749D8(v55, v93);
    sub_1C3F7E2CC(v54.n128_i64[0], v54.n128_u64[1]);
    uint64_t v57 = v92;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v56, 1, v41) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v56, v84);
      goto LABEL_12;
    }
    __n128 v64 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 32);
    uint64_t v65 = v81;
    v64(v81, v56, v41);
    uint64_t v66 = &v103;
LABEL_17:
    v64((char *)*(v66 - 32), (uint64_t)v65, v41);
    uint64_t v62 = swift_getAssociatedTypeWitness();
    uint64_t v63 = v96;
    goto LABEL_18;
  }
  unint64_t v34 = v2[1];
  v97.n128_u64[0] = *v29;
  uint64_t v33 = v97.n128_u64[0];
  v97.n128_u64[1] = v34;
  swift_getAssociatedConformanceWitness();
  WeakRef.init(id:)(&v97, &v98);
  __n128 v35 = v98;
  __n128 v97 = v98;
  sub_1C3F7E324(v33, v34);
  uint64_t v36 = type metadata accessor for WeakRef();
  sub_1C44749D8(v36, (uint64_t)v25);
  sub_1C3F7E2CC(v35.n128_i64[0], v35.n128_u64[1]);
  uint64_t v37 = v85;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v25, 1, v22) == 1)
  {
    (*(void (**)(char *, uint64_t))(v72 + 8))(v25, v73);
LABEL_12:
    uint64_t v58 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v96, 1, 1, v58);
  }
  uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
  unint64_t v61 = v70;
  v60(v70, v25, v22);
  v60(v71, v61, v22);
  uint64_t v62 = swift_getAssociatedTypeWitness();
  uint64_t v63 = v96;
LABEL_18:
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v63, 0, 1, v62);
}

uint64_t sub_1C40C8030(uint64_t a1, uint64_t a2)
{
  uint64_t v81 = a2;
  uint64_t v82 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v77 = (char *)&v71 - v4;
  uint64_t v76 = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_1C4497B38();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v75 = (char *)&v71 - v6;
  uint64_t v74 = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v73 = (char *)&v71 - v8;
  uint64_t v72 = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1C4497B38();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v71 = (char *)&v71 - v10;
  swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_1C4497B38();
  uint64_t v79 = *(void *)(v11 - 8);
  uint64_t v80 = v11;
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v71 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v71 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v71 - v21;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v84.n128_u64[0] = v23;
  v84.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v85 = &protocol witness table for Int;
  uint64_t v86 = MEMORY[0x1E4FBB560];
  uint64_t v25 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v25, (uint64_t)&v87);
  if (v87 == 2)
  {
    uint64_t v38 = *v2;
    unint64_t v39 = v2[1];
    v83.n128_u64[0] = v38;
    v83.n128_u64[1] = v39;
    uint64_t v40 = v76;
    uint64_t v41 = swift_getAssociatedConformanceWitness();
    __n128 v42 = WeakRef.init(id:)(&v83, &v84);
    __n128 v43 = v84;
    uint64_t v45 = v79;
    uint64_t v44 = v80;
    uint64_t v46 = v82;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v79 + 16))(v17, v82, v80, v42);
    sub_1C3F7E324(v38, v39);
    uint64_t v47 = (uint64_t)v75;
    int v48 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v47, v48 ^ 1u, 1, v40);
    __n128 v83 = v43;
    sub_1C4055840(v47, (uint64_t)&v83, v40, v41);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v46, v44);
  }
  else if (v87 == 1)
  {
    uint64_t v49 = *v2;
    unint64_t v50 = v2[1];
    v83.n128_u64[0] = v49;
    v83.n128_u64[1] = v50;
    uint64_t v51 = v74;
    uint64_t v52 = swift_getAssociatedConformanceWitness();
    __n128 v53 = WeakRef.init(id:)(&v83, &v84);
    __n128 v54 = v84;
    uint64_t v56 = v79;
    uint64_t v55 = v80;
    uint64_t v57 = v82;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v79 + 16))(v20, v82, v80, v53);
    sub_1C3F7E324(v49, v50);
    uint64_t v58 = (uint64_t)v73;
    int v59 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v58, v59 ^ 1u, 1, v51);
    __n128 v83 = v54;
    sub_1C4055840(v58, (uint64_t)&v83, v51, v52);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8))(v57, v55);
  }
  else if (v87)
  {
    uint64_t v60 = *v2;
    unint64_t v61 = v2[1];
    v83.n128_u64[0] = v60;
    v83.n128_u64[1] = v61;
    uint64_t v62 = AssociatedTypeWitness;
    uint64_t v63 = swift_getAssociatedConformanceWitness();
    __n128 v64 = WeakRef.init(id:)(&v83, &v84);
    __n128 v65 = v84;
    uint64_t v67 = v79;
    uint64_t v66 = v80;
    uint64_t v68 = v82;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v79 + 16))(v14, v82, v80, v64);
    sub_1C3F7E324(v60, v61);
    uint64_t v69 = (uint64_t)v77;
    int v70 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v69, v70 ^ 1u, 1, v62);
    __n128 v83 = v65;
    sub_1C4055840(v69, (uint64_t)&v83, v62, v63);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 8))(v68, v66);
  }
  else
  {
    unint64_t v27 = v2[1];
    v83.n128_u64[0] = *v2;
    uint64_t v26 = v83.n128_u64[0];
    v83.n128_u64[1] = v27;
    uint64_t v28 = v72;
    uint64_t v29 = swift_getAssociatedConformanceWitness();
    __n128 v30 = WeakRef.init(id:)(&v83, &v84);
    __n128 v31 = v84;
    uint64_t v33 = v79;
    uint64_t v32 = v80;
    uint64_t v34 = v82;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v79 + 16))(v22, v82, v80, v30);
    sub_1C3F7E324(v26, v27);
    uint64_t v35 = (uint64_t)v71;
    int v36 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v35, v36 ^ 1u, 1, v28);
    __n128 v83 = v31;
    sub_1C4055840(v35, (uint64_t)&v83, v28, v29);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v34, v32);
  }
}

uint64_t WeakTagged_3.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C40C74CC);
}

uint64_t sub_1C40C8808(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for WeakTagged_3();
  swift_retain();
  sub_1C40F1F80(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_3, (uint64_t)&associated type descriptor for Tagged_3.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40C8030);
  return swift_release();
}

uint64_t WeakTagged_3.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1F80(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_3, (uint64_t)&associated type descriptor for Tagged_3.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40C8030);
  swift_release();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1C4497B38();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  return v5(a1, v4);
}

void (*WeakTagged_3.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_1C4497B38();
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_3.subscript.getter(a2, a3);
  return sub_1C40C8A64;
}

void sub_1C40C8A64(uint64_t **a1, char a2)
{
}

uint64_t WeakTagged_3.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C40C74CC);
}

uint64_t WeakTagged_3.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))WeakTagged_3.init(_:id:), a3);
}

uint64_t WeakTagged_3.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))WeakTagged_3.copy(renamingReferences:));
}

uint64_t WeakTagged_3.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t static WeakTagged_3.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_3);
}

uint64_t WeakTagged_3.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))WeakTagged_3.hash(into:));
}

uint64_t sub_1C40C8B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))WeakTagged_3.hash(into:));
}

uint64_t sub_1C40C8B68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_3.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t WeakTagged_3.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C40C8B94@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return WeakTagged_3.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t WeakTagged_3.init(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40C8BE4(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_3, 1, a4);
}

uint64_t sub_1C40C8BE4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void, uint64_t, uint64_t)@<X3>, int a5@<W4>, void *a6@<X8>)
{
  int v99 = a5;
  uint64_t v115 = a4;
  uint64_t v116 = a3;
  uint64_t v117 = a2;
  uint64_t v118 = a6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0560);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v109 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v106 = *(void *)(v108 - 8);
  MEMORY[0x1F4188790](v108);
  uint64_t v110 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1F4188790](v120);
  uint64_t v107 = (uint64_t)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v105 = (uint64_t)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v103 = (uint64_t)&v98 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v112 = (uint64_t)&v98 - v16;
  uint64_t v124 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v17 = MEMORY[0x1F4188790](v124);
  uint64_t v104 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  __n128 v113 = (char *)&v98 - v19;
  uint64_t v20 = type metadata accessor for Proto_Value(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v122 = (uint64_t *)((char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v121 = (uint64_t)&v98 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v123 = (char *)&v98 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v28 = MEMORY[0x1F4188790](v27 - 8);
  uint64_t v119 = (uint64_t)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v114 = (uint64_t)&v98 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v98 - v33;
  MEMORY[0x1F4188790](v32);
  int v36 = (char *)&v98 - v35;
  unint64_t v125 = a1;
  uint64_t v37 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v37, (uint64_t)v36, &qword_1EBBC0540);
  uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  unsigned int v39 = v38(v36, 1, v20);
  sub_1C3F962E0((uint64_t)v36, &qword_1EBBC0540);
  if (v39 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v40 = 0xD000000000000017;
    *(void *)(v40 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v40 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v125;
  sub_1C3F970C4(v37, (uint64_t)v34, &qword_1EBBC0540);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v38)(v34, 1, v20);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_51;
  }
  __n128 v42 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v38;
  uint64_t v43 = (uint64_t)v123;
  sub_1C3F8ABD8((uint64_t)v34, (uint64_t)v123, type metadata accessor for Proto_Value);
  uint64_t v98 = v20;
  uint64_t v44 = *(void *)(v43 + *(int *)(v20 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v45 = v44;
  uint64_t v46 = v112;
  sub_1C3F970C4(v45, v112, &qword_1EBBBF8A0);
  uint64_t v47 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  uint64_t v100 = v48 + 48;
  uint64_t v101 = v49;
  int v50 = v49(v46, 1, v47);
  uint64_t v51 = (uint64_t)v113;
  if (v50 == 1)
  {
    swift_retain();
    sub_1C3F962E0(v46, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      sub_1C3F8ABD8(v46, v51, type metadata accessor for Proto_TaggedValue);
      goto LABEL_12;
    }
    swift_retain();
    sub_1C3F8B0A8(v46, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v52 = *(int *)(v124 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)(v51 + v52) = qword_1EA39AF60;
LABEL_12:
  swift_retain();
  sub_1C3F8B0A8((uint64_t)v123, type metadata accessor for Proto_Value);
  uint64_t v53 = *(void *)(v51 + *(int *)(v124 + 20));
  swift_beginAccess();
  uint64_t v54 = *(void *)(v53 + 16);
  sub_1C3F8B0A8(v51, type metadata accessor for Proto_TaggedValue);
  uint64_t v126 = v54;
  uint64_t v55 = v115(0, v117, v116);
  uint64_t v56 = (char *)v118 + *(int *)(v55 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v123 = v56;
  uint64_t v115 = (uint64_t (*)(void, uint64_t, uint64_t))AssociatedConformanceWitness;
  CRExtensible.init(rawValue:)((uint64_t)&v126, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E4FBB560], v56);
  uint64_t v59 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  uint64_t v60 = v59;
  uint64_t v61 = v114;
  sub_1C3F970C4(v60, v114, &qword_1EBBC0540);
  uint64_t v62 = v98;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v38)(v61, 1, v98);
  if (result == 1)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v63 = v61;
  uint64_t v64 = v121;
  sub_1C3F8ABD8(v63, v121, type metadata accessor for Proto_Value);
  uint64_t v65 = *(void *)(v64 + *(int *)(v62 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v66 = v65;
  uint64_t v67 = v103;
  sub_1C3F970C4(v66, v103, &qword_1EBBBF8A0);
  int v68 = v101(v67, 1, v47);
  uint64_t v69 = (uint64_t)v122;
  uint64_t v70 = (uint64_t)v104;
  if (v68 == 1)
  {
    sub_1C3F962E0(v67, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      sub_1C3F8ABD8(v67, v70, type metadata accessor for Proto_TaggedValue);
      goto LABEL_21;
    }
    sub_1C3F8B0A8(v67, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v71 = *(int *)(v124 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)(v70 + v71) = qword_1EA39AF60;
  swift_retain();
LABEL_21:
  sub_1C3F8B0A8(v121, type metadata accessor for Proto_Value);
  uint64_t v72 = *(void *)(v70 + *(int *)(v124 + 20))
      + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  uint64_t v73 = v72;
  uint64_t v74 = v119;
  sub_1C3F970C4(v73, v119, &qword_1EBBC0540);
  if (v42(v74, 1, v62) == 1)
  {
    sub_1C4496888();
    uint64_t v75 = *(int *)(v62 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)(v69 + v75) = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0(v119, &qword_1EBBC0540);
  }
  else
  {
    sub_1C3F8ABD8(v74, v69, type metadata accessor for Proto_Value);
  }
  sub_1C3F8B0A8(v70, type metadata accessor for Proto_TaggedValue);
  uint64_t v76 = *(void *)(v69 + *(int *)(v62 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v77 = v76;
  uint64_t v78 = v105;
  sub_1C3F970C4(v77, v105, &qword_1EBBBF8A0);
  if (v101(v78, 1, v47) == 1)
  {
    sub_1C3F962E0(v78, &qword_1EBBBF8A0);
    unint64_t v79 = v125;
    uint64_t v81 = (uint64_t)v109;
    uint64_t v80 = v110;
    uint64_t v83 = v107;
    uint64_t v82 = v108;
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    unint64_t v79 = v125;
    uint64_t v83 = v107;
    if (EnumCaseMultiPayload == 7)
    {
      sub_1C3F8ABD8(v78, v107, type metadata accessor for Proto_Reference);
      uint64_t v81 = (uint64_t)v109;
      uint64_t v80 = v110;
      uint64_t v82 = v108;
      goto LABEL_34;
    }
    sub_1C3F8B0A8(v78, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    uint64_t v81 = (uint64_t)v109;
    uint64_t v80 = v110;
    uint64_t v82 = v108;
  }
  sub_1C4496888();
  uint64_t v85 = *(int *)(v120 + 20);
  if (qword_1EBBBC818 != -1) {
    swift_once();
  }
  *(void *)(v83 + v85) = qword_1EBBBC808;
  swift_retain();
LABEL_34:
  sub_1C3F8B0A8((uint64_t)v122, type metadata accessor for Proto_Value);
  uint64_t v86 = *(void *)(v83 + *(int *)(v120 + 20))
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  sub_1C3F970C4(v86, v81, &qword_1EBBC0560);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v81, 1, v82) == 1)
  {
    *uint64_t v80 = MEMORY[0x1E4FBC860];
    v80[1] = sub_1C4496868();
    v80[2] = v87;
    sub_1C4496888();
    sub_1C3F962E0(v81, &qword_1EBBC0560);
  }
  else
  {
    sub_1C3F8ABD8(v81, (uint64_t)v80, type metadata accessor for Proto_KeyPath);
  }
  uint64_t v88 = v111;
  sub_1C3F8B0A8(v83, type metadata accessor for Proto_Reference);
  swift_retain();
  sub_1C3F766DC((uint64_t)v80, &v126);
  if (v88)
  {
    swift_release();
    swift_release();
    uint64_t v126 = AssociatedTypeWitness;
    unint64_t v127 = (unint64_t)v115;
    uint64_t v128 = &protocol witness table for Int;
    uint64_t v129 = MEMORY[0x1E4FBB560];
    uint64_t v97 = type metadata accessor for CRExtensible();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v97 - 8) + 8))(v123, v97);
  }
  uint64_t v90 = v126;
  unint64_t v89 = v127;
  uint64_t v91 = v118;
  *uint64_t v118 = v126;
  v91[1] = v89;
  sub_1C3F7E324(v90, v89);
  uint64_t v126 = AssociatedTypeWitness;
  unint64_t v127 = (unint64_t)v115;
  uint64_t v128 = &protocol witness table for Int;
  uint64_t v129 = MEMORY[0x1E4FBB560];
  uint64_t v92 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v92, (uint64_t)&v130);
  __n128 v113 = (char *)AssociatedTypeWitness;
  unint64_t v125 = v89;
  switch(v130)
  {
    case 2:
      uint64_t v93 = *(void **)(v79 + 16);
      if (v93) {
        goto LABEL_49;
      }
      goto LABEL_52;
    case 1:
      uint64_t v93 = *(void **)(v79 + 16);
      if (v93) {
        goto LABEL_49;
      }
      goto LABEL_53;
    case 0:
      uint64_t v93 = *(void **)(v79 + 16);
      if (v93) {
        goto LABEL_49;
      }
      goto LABEL_54;
  }
  uint64_t v93 = *(void **)(v79 + 16);
  if (v93)
  {
LABEL_49:
    uint64_t v94 = swift_getAssociatedTypeWitness();
    uint64_t v126 = v90;
    unint64_t v127 = v125;
    uint64_t v95 = (uint64_t *)(*v93 + 176);
    uint64_t v124 = *v95;
    uint64_t v122 = v95;
    uint64_t v96 = swift_getAssociatedConformanceWitness();
    swift_retain();
    ((void (*)(uint64_t, uint64_t *, unint64_t, void, uint64_t, uint64_t))v124)(v94, &v126, v79, v99 & 1, v94, v96);
    swift_release();
    swift_release();
    swift_release();
    return sub_1C3F7E2CC(v90, v125);
  }
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_1C40C9C34(uint64_t a1, uint64_t a2)
{
  return WeakTagged_3.encode(to:)(a1, a2);
}

uint64_t WeakTagged_3.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C40C5014(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_3, (uint64_t)&associated type descriptor for Tagged_3.Enum, (uint64_t)&associated conformance descriptor for Tagged_3.Tagged_3.Enum: RawRepresentable);
}

uint64_t (*WeakTagged_4.id.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_4.tag.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C40EA434(a1, a2);
}

uint64_t WeakTagged_4.tag.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C40EA528(a1, a2);
}

uint64_t (*WeakTagged_4.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_4.init(_:identity:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_4.init(_:id:));
}

{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_4.init(_:id:));
}

uint64_t WeakTagged_4.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1C40EA66C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_4, a5);
}

{
  return sub_1C40EA7CC(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_4, a5);
}

uint64_t WeakTagged_4.init(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for SharedTagged_4() + 36);
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for WeakTagged_4() + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v4, v3, v5);
}

uint64_t WeakTagged_4.tagged1.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  else
  {
    uint64_t v8 = *v1;
    unint64_t v9 = v2[1];
    v10.n128_u64[0] = v8;
    v10.n128_u64[1] = v9;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v6 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t WeakTagged_4.tagged2.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 1)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_4.tagged3.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 2)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_4.tagged4.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 3)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_4.unknown.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] < 2)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  else
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_4.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v138 = a3;
  uint64_t v139 = a4;
  uint64_t v137 = a1;
  uint64_t v140 = a5;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v122 = sub_1C4497B38();
  uint64_t v121 = *(void *)(v122 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v122);
  unint64_t v125 = (char *)&v103 - v10;
  uint64_t v135 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))AssociatedTypeWitness;
  uint64_t v124 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v120 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v119 = (char *)&v103 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v118 = sub_1C4497B38();
  uint64_t v117 = *(void *)(v118 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v118);
  uint64_t v133 = (char *)&v103 - v16;
  uint64_t v134 = v14;
  uint64_t v132 = *(void *)(v14 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v116 = (char *)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v115 = (char *)&v103 - v19;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v114 = sub_1C4497B38();
  uint64_t v113 = *(void *)(v114 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v114);
  uint64_t v130 = (char *)&v103 - v22;
  uint64_t v131 = v20;
  uint64_t v129 = *(void *)(v20 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v112 = (char *)&v103 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v111 = (char *)&v103 - v25;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v110 = sub_1C4497B38();
  uint64_t v109 = *(void *)(v110 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v110);
  uint64_t v128 = (char *)&v103 - v28;
  uint64_t v127 = *(void *)(v26 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v108 = (char *)&v103 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v107 = (char *)&v103 - v31;
  uint64_t v32 = swift_getAssociatedTypeWitness();
  uint64_t v106 = sub_1C4497B38();
  uint64_t v105 = *(void *)(v106 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v106);
  uint64_t v35 = (char *)&v103 - v34;
  uint64_t v126 = *(void *)(v32 - 8);
  uint64_t v36 = MEMORY[0x1F4188790](v33);
  uint64_t v104 = (char *)&v103 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  uint64_t v103 = (char *)&v103 - v38;
  unsigned int v39 = v5;
  uint64_t v40 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v142.n128_u64[0] = v40;
  v142.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v143 = &protocol witness table for Int;
  uint64_t v144 = MEMORY[0x1E4FBB560];
  uint64_t v42 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v42, (uint64_t)&v145);
  uint64_t v136 = v7;
  switch(v145)
  {
    case 0:
      unint64_t v43 = v5[1];
      v141.n128_u64[0] = *v39;
      v141.n128_u64[1] = v43;
      uint64_t v44 = v141.n128_u64[0];
      uint64_t v45 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v141, &v142);
      __n128 v46 = v142;
      __n128 v141 = v142;
      uint64_t v47 = v139;
      uint64_t v135 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 16);
      sub_1C3F7E324(v44, v43);
      v135(&v141, v32, v45, v138, v47);
      sub_1C3F7E2CC(v46.n128_i64[0], v46.n128_u64[1]);
      uint64_t v48 = v126;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v126 + 48))(v35, 1, v32) == 1)
      {
        (*(void (**)(char *, uint64_t))(v105 + 8))(v35, v106);
        goto LABEL_8;
      }
      uint64_t v88 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
      unint64_t v89 = v103;
      v88(v103, v35, v32);
      v88(v104, v89, v32);
      uint64_t v90 = swift_getAssociatedTypeWitness();
      uint64_t v66 = v140;
      goto LABEL_21;
    case 1:
      unint64_t v50 = v5[1];
      v141.n128_u64[0] = *v5;
      uint64_t v49 = v141.n128_u64[0];
      v141.n128_u64[1] = v50;
      uint64_t v123 = v6;
      uint64_t v51 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v141, &v142);
      __n128 v52 = v142;
      __n128 v141 = v142;
      uint64_t v53 = v139;
      uint64_t v54 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 16);
      sub_1C3F7E324(v49, v50);
      uint64_t v55 = v128;
      v54(&v141, v26, v51, v138, v53);
      sub_1C3F7E2CC(v52.n128_i64[0], v52.n128_u64[1]);
      uint64_t v56 = v127;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48))(v55, 1, v26) == 1)
      {
        (*(void (**)(char *, uint64_t))(v109 + 8))(v55, v110);
        goto LABEL_11;
      }
      uint64_t v91 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
      uint64_t v92 = v107;
      v91(v107, v55, v26);
      v91(v108, v92, v26);
      uint64_t v93 = swift_getAssociatedTypeWitness();
      uint64_t v94 = v140;
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56))(v94, 0, 1, v93);
    case 2:
      unint64_t v58 = v5[1];
      v141.n128_u64[0] = *v39;
      uint64_t v57 = v141.n128_u64[0];
      v141.n128_u64[1] = v58;
      uint64_t v59 = v131;
      uint64_t v60 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v141, &v142);
      __n128 v61 = v142;
      __n128 v141 = v142;
      uint64_t v62 = v139;
      uint64_t v63 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 16);
      sub_1C3F7E324(v57, v58);
      uint64_t v64 = v130;
      v63(&v141, v59, v60, v138, v62);
      sub_1C3F7E2CC(v61.n128_i64[0], v61.n128_u64[1]);
      uint64_t v65 = v129;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v129 + 48))(v64, 1, v59) != 1)
      {
        uint64_t v95 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
        uint64_t v96 = v111;
        v95(v111, v64, v59);
        v95(v112, v96, v59);
        goto LABEL_19;
      }
      (*(void (**)(char *, uint64_t))(v113 + 8))(v64, v114);
LABEL_8:
      uint64_t v66 = v140;
      goto LABEL_14;
    case 3:
      unint64_t v68 = v5[1];
      v141.n128_u64[0] = *v39;
      uint64_t v67 = v141.n128_u64[0];
      v141.n128_u64[1] = v68;
      uint64_t v123 = v6;
      uint64_t v69 = v134;
      uint64_t v70 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v141, &v142);
      __n128 v71 = v142;
      __n128 v141 = v142;
      uint64_t v72 = v139;
      uint64_t v73 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 16);
      sub_1C3F7E324(v67, v68);
      uint64_t v74 = v133;
      v73(&v141, v69, v70, v138, v72);
      sub_1C3F7E2CC(v71.n128_i64[0], v71.n128_u64[1]);
      uint64_t v75 = v132;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v74, 1, v69) == 1)
      {
        (*(void (**)(char *, uint64_t))(v117 + 8))(v74, v118);
LABEL_11:
        uint64_t v66 = v140;
        goto LABEL_14;
      }
      uint64_t v97 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
      uint64_t v98 = v115;
      v97(v115, v74, v69);
      v97(v116, v98, v69);
LABEL_19:
      uint64_t v90 = swift_getAssociatedTypeWitness();
      uint64_t v66 = v140;
      goto LABEL_21;
    default:
      unint64_t v77 = v5[1];
      v141.n128_u64[0] = *v39;
      uint64_t v76 = v141.n128_u64[0];
      v141.n128_u64[1] = v77;
      uint64_t v123 = v6;
      uint64_t v78 = v135;
      uint64_t v79 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v141, &v142);
      __n128 v80 = v142;
      __n128 v141 = v142;
      uint64_t v81 = v139;
      uint64_t v82 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(v139 + 16);
      sub_1C3F7E324(v76, v77);
      uint64_t v83 = v79;
      __n128 v84 = v125;
      v82(&v141, v78, v83, v138, v81);
      uint64_t v66 = v140;
      sub_1C3F7E2CC(v80.n128_i64[0], v80.n128_u64[1]);
      uint64_t v85 = v124;
      if ((*(unsigned int (**)(char *, uint64_t, void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t)))(v124 + 48))(v84, 1, v78) == 1)
      {
        (*(void (**)(char *, uint64_t))(v121 + 8))(v84, v122);
LABEL_14:
        uint64_t v86 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v66, 1, 1, v86);
      }
      else
      {
        int v99 = *(void (**)(char *, char *, void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t)))(v85 + 32);
        uint64_t v100 = v119;
        uint64_t v101 = v84;
        uint64_t v102 = v135;
        v99(v119, v101, v135);
        v99(v120, v100, v102);
        uint64_t v90 = swift_getAssociatedTypeWitness();
LABEL_21:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v66, 0, 1, v90);
      }
  }
}

uint64_t sub_1C40CB36C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v118 = a1;
  uint64_t v119 = a3;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v102 = sub_1C4497B38();
  uint64_t v105 = *(void *)(v102 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v102);
  uint64_t v107 = (uint64_t)&v86 - v7;
  uint64_t v108 = AssociatedTypeWitness;
  uint64_t v106 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v103 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v104 = (char *)&v86 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v101 = sub_1C4497B38();
  uint64_t v100 = *(void *)(v101 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v101);
  uint64_t v116 = (uint64_t)&v86 - v13;
  uint64_t v117 = v11;
  uint64_t v115 = *(void *)(v11 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  int v99 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v98 = (char *)&v86 - v16;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v97 = sub_1C4497B38();
  uint64_t v96 = *(void *)(v97 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v97);
  uint64_t v113 = (uint64_t)&v86 - v19;
  uint64_t v114 = v17;
  uint64_t v112 = *(void *)(v17 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v95 = (char *)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v94 = (char *)&v86 - v22;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v93 = sub_1C4497B38();
  uint64_t v92 = *(void *)(v93 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v93);
  uint64_t v111 = (uint64_t)&v86 - v25;
  uint64_t v110 = *(void *)(v23 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v91 = (char *)&v86 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v90 = (char *)&v86 - v28;
  uint64_t v29 = swift_getAssociatedTypeWitness();
  uint64_t v89 = sub_1C4497B38();
  uint64_t v88 = *(void *)(v89 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v89);
  uint64_t v32 = (char *)&v86 - v31;
  uint64_t v109 = *(void *)(v29 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v30);
  uint64_t v87 = (char *)&v86 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33);
  uint64_t v86 = (char *)&v86 - v35;
  uint64_t v36 = (unint64_t *)v3;
  uint64_t v37 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v121.n128_u64[0] = v37;
  v121.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v122 = &protocol witness table for Int;
  uint64_t v123 = MEMORY[0x1E4FBB560];
  uint64_t v39 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v39, (uint64_t)&v124);
  switch(v124)
  {
    case 0:
      uint64_t v40 = *v3;
      unint64_t v41 = v36[1];
      v120.n128_u64[0] = v40;
      v120.n128_u64[1] = v41;
      uint64_t v117 = v4;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v120, &v121);
      __n128 v42 = v121;
      __n128 v120 = v121;
      sub_1C3F7E324(v40, v41);
      uint64_t v43 = type metadata accessor for WeakRef();
      sub_1C44749D8(v43, (uint64_t)v32);
      sub_1C3F7E2CC(v42.n128_i64[0], v42.n128_u64[1]);
      uint64_t v44 = v109;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v32, 1, v29) == 1)
      {
        (*(void (**)(char *, uint64_t))(v88 + 8))(v32, v89);
        uint64_t v45 = v119;
        goto LABEL_13;
      }
      unint64_t v77 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
      uint64_t v78 = v86;
      v77(v86, v32, v29);
      v77(v87, v78, v29);
      uint64_t v79 = swift_getAssociatedTypeWitness();
      uint64_t v45 = v119;
      goto LABEL_20;
    case 1:
      unint64_t v47 = v3[1];
      v120.n128_u64[0] = *v36;
      uint64_t v46 = v120.n128_u64[0];
      v120.n128_u64[1] = v47;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v120, &v121);
      __n128 v48 = v121;
      __n128 v120 = v121;
      sub_1C3F7E324(v46, v47);
      uint64_t v49 = type metadata accessor for WeakRef();
      uint64_t v50 = v111;
      sub_1C44749D8(v49, v111);
      sub_1C3F7E2CC(v48.n128_i64[0], v48.n128_u64[1]);
      uint64_t v51 = v110;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48))(v50, 1, v23) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v50, v93);
        goto LABEL_10;
      }
      __n128 v80 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 32);
      uint64_t v81 = v90;
      v80(v90, v50, v23);
      v80(v91, (uint64_t)v81, v23);
      uint64_t v79 = swift_getAssociatedTypeWitness();
      uint64_t v45 = v119;
      goto LABEL_20;
    case 2:
      unint64_t v53 = v3[1];
      v120.n128_u64[0] = *v36;
      uint64_t v52 = v120.n128_u64[0];
      v120.n128_u64[1] = v53;
      uint64_t v54 = v114;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v120, &v121);
      __n128 v55 = v121;
      __n128 v120 = v121;
      sub_1C3F7E324(v52, v53);
      uint64_t v56 = type metadata accessor for WeakRef();
      uint64_t v57 = v113;
      sub_1C44749D8(v56, v113);
      sub_1C3F7E2CC(v55.n128_i64[0], v55.n128_u64[1]);
      uint64_t v58 = v112;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v57, 1, v54) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v57, v97);
        goto LABEL_10;
      }
      uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 32);
      uint64_t v83 = v94;
      v82(v94, v57, v54);
      __n128 v84 = (uint64_t *)&v125;
      goto LABEL_18;
    case 3:
      unint64_t v60 = v3[1];
      v120.n128_u64[0] = *v36;
      uint64_t v59 = v120.n128_u64[0];
      v120.n128_u64[1] = v60;
      uint64_t v54 = v117;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v120, &v121);
      __n128 v61 = v121;
      __n128 v120 = v121;
      sub_1C3F7E324(v59, v60);
      uint64_t v62 = type metadata accessor for WeakRef();
      uint64_t v63 = v116;
      sub_1C44749D8(v62, v116);
      sub_1C3F7E2CC(v61.n128_i64[0], v61.n128_u64[1]);
      uint64_t v64 = v115;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v63, 1, v54) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v63, v101);
LABEL_10:
        uint64_t v45 = v119;
        goto LABEL_13;
      }
      uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 32);
      uint64_t v83 = v98;
      v82(v98, v63, v54);
      __n128 v84 = &v126;
LABEL_18:
      v82((char *)*(v84 - 32), (uint64_t)v83, v54);
      uint64_t v79 = swift_getAssociatedTypeWitness();
      uint64_t v45 = v119;
      goto LABEL_20;
    default:
      uint64_t v65 = v104;
      uint64_t v66 = v105;
      unint64_t v68 = v3[1];
      v120.n128_u64[0] = *v36;
      uint64_t v67 = v120.n128_u64[0];
      v120.n128_u64[1] = v68;
      uint64_t v69 = v108;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v120, &v121);
      __n128 v70 = v121;
      __n128 v120 = v121;
      sub_1C3F7E324(v67, v68);
      uint64_t v71 = type metadata accessor for WeakRef();
      uint64_t v72 = v107;
      sub_1C44749D8(v71, v107);
      sub_1C3F7E2CC(v70.n128_i64[0], v70.n128_u64[1]);
      uint64_t v73 = v106;
      int v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v72, 1, v69);
      uint64_t v45 = v119;
      if (v74 == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v72, v102);
LABEL_13:
        uint64_t v75 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v45, 1, 1, v75);
      }
      else
      {
        uint64_t v85 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 32);
        v85(v65, v72, v69);
        v85(v103, (uint64_t)v65, v69);
        uint64_t v79 = swift_getAssociatedTypeWitness();
LABEL_20:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v45, 0, 1, v79);
      }
  }
}

uint64_t sub_1C40CC1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v95 = a2;
  uint64_t v96 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v91 = (char *)&v81 - v4;
  uint64_t v90 = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_1C4497B38();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v89 = (char *)&v81 - v6;
  uint64_t v88 = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v87 = (char *)&v81 - v8;
  uint64_t v86 = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1C4497B38();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v85 = (char *)&v81 - v10;
  uint64_t v84 = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_1C4497B38();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v83 = (char *)&v81 - v12;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_1C4497B38();
  uint64_t v93 = *(void *)(v13 - 8);
  uint64_t v94 = v13;
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v82 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v81 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v81 - v20;
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v24 = (char *)&v81 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v81 - v25;
  uint64_t v27 = v2;
  uint64_t v28 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v98.n128_u64[0] = v28;
  v98.n128_u64[1] = AssociatedConformanceWitness;
  int v99 = &protocol witness table for Int;
  uint64_t v100 = MEMORY[0x1E4FBB560];
  uint64_t v30 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v30, (uint64_t)&v101);
  switch(v101)
  {
    case 0:
      unint64_t v32 = v2[1];
      v97.n128_u64[0] = *v27;
      uint64_t v31 = v97.n128_u64[0];
      v97.n128_u64[1] = v32;
      uint64_t v33 = v84;
      uint64_t v34 = swift_getAssociatedConformanceWitness();
      __n128 v35 = WeakRef.init(id:)(&v97, &v98);
      __n128 v36 = v98;
      uint64_t v38 = v93;
      uint64_t v37 = v94;
      uint64_t v39 = v96;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v93 + 16))(v26, v96, v94, v35);
      sub_1C3F7E324(v31, v32);
      uint64_t v40 = v83;
      int v41 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v40, v41 ^ 1u, 1, v33);
      __n128 v97 = v36;
      uint64_t v42 = (uint64_t)v40;
      uint64_t v43 = v33;
      goto LABEL_6;
    case 1:
      unint64_t v57 = v2[1];
      v97.n128_u64[0] = *v2;
      uint64_t v56 = v97.n128_u64[0];
      v97.n128_u64[1] = v57;
      uint64_t v58 = v86;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      __n128 v60 = WeakRef.init(id:)(&v97, &v98);
      __n128 v61 = v98;
      uint64_t v63 = v93;
      uint64_t v62 = v94;
      uint64_t v64 = v96;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v93 + 16))(v24, v96, v94, v60);
      sub_1C3F7E324(v56, v57);
      uint64_t v65 = v85;
      int v66 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v65, v66 ^ 1u, 1, v58);
      __n128 v97 = v61;
      uint64_t v67 = (uint64_t)v65;
      goto LABEL_8;
    case 2:
      unint64_t v69 = v2[1];
      v97.n128_u64[0] = *v27;
      uint64_t v68 = v97.n128_u64[0];
      v97.n128_u64[1] = v69;
      uint64_t v70 = v88;
      uint64_t v34 = swift_getAssociatedConformanceWitness();
      __n128 v71 = WeakRef.init(id:)(&v97, &v98);
      __n128 v72 = v98;
      uint64_t v38 = v93;
      uint64_t v37 = v94;
      uint64_t v39 = v96;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v93 + 16))(v21, v96, v94, v71);
      sub_1C3F7E324(v68, v69);
      uint64_t v73 = v87;
      int v74 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v73, v74 ^ 1u, 1, v70);
      __n128 v97 = v72;
      uint64_t v42 = (uint64_t)v73;
      uint64_t v43 = v70;
LABEL_6:
      sub_1C4055840(v42, (uint64_t)&v97, v43, v34);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v39, v37);
    case 3:
      unint64_t v76 = v2[1];
      v97.n128_u64[0] = *v27;
      uint64_t v75 = v97.n128_u64[0];
      v97.n128_u64[1] = v76;
      uint64_t v58 = v90;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      __n128 v77 = WeakRef.init(id:)(&v97, &v98);
      __n128 v78 = v98;
      uint64_t v63 = v93;
      uint64_t v62 = v94;
      uint64_t v64 = v96;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v93 + 16))(v18, v96, v94, v77);
      sub_1C3F7E324(v75, v76);
      uint64_t v79 = v89;
      int v80 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v79, v80 ^ 1u, 1, v58);
      __n128 v97 = v78;
      uint64_t v67 = (uint64_t)v79;
LABEL_8:
      sub_1C4055840(v67, (uint64_t)&v97, v58, v59);
      swift_release();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v64, v62);
      break;
    default:
      unint64_t v45 = v2[1];
      v97.n128_u64[0] = *v27;
      uint64_t v44 = v97.n128_u64[0];
      v97.n128_u64[1] = v45;
      uint64_t v46 = AssociatedTypeWitness;
      uint64_t v47 = swift_getAssociatedConformanceWitness();
      __n128 v48 = WeakRef.init(id:)(&v97, &v98);
      __n128 v49 = v98;
      uint64_t v51 = v93;
      uint64_t v50 = v94;
      uint64_t v52 = v96;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v93 + 16))(v82, v96, v94, v48);
      sub_1C3F7E324(v44, v45);
      uint64_t v53 = (uint64_t)v91;
      int v54 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v53, v54 ^ 1u, 1, v46);
      __n128 v97 = v49;
      sub_1C4055840(v53, (uint64_t)&v97, v46, v47);
      swift_release();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v52, v50);
      break;
  }
  return result;
}

uint64_t WeakTagged_4.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C40CB36C);
}

uint64_t sub_1C40CCACC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for WeakTagged_4();
  swift_retain();
  sub_1C40F1F80(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_4, (uint64_t)&associated type descriptor for Tagged_4.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40CC1A0);
  return swift_release();
}

uint64_t WeakTagged_4.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1F80(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_4, (uint64_t)&associated type descriptor for Tagged_4.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40CC1A0);
  swift_release();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1C4497B38();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  return v5(a1, v4);
}

void (*WeakTagged_4.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_1C4497B38();
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_4.subscript.getter(a2, a3);
  return sub_1C40CCD28;
}

void sub_1C40CCD28(uint64_t **a1, char a2)
{
}

uint64_t WeakTagged_4.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C40CB36C);
}

uint64_t WeakTagged_4.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))WeakTagged_4.init(_:id:), a3);
}

uint64_t WeakTagged_4.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))WeakTagged_4.copy(renamingReferences:));
}

uint64_t WeakTagged_4.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t static WeakTagged_4.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_4);
}

uint64_t WeakTagged_4.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))WeakTagged_4.hash(into:));
}

uint64_t sub_1C40CCE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))WeakTagged_4.hash(into:));
}

uint64_t sub_1C40CCE2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_4.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t WeakTagged_4.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C40CCE58@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return WeakTagged_4.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t WeakTagged_4.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40CCEA8(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_4, 1, a4);
}

uint64_t sub_1C40CCEA8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void, uint64_t, uint64_t)@<X3>, int a5@<W4>, void *a6@<X8>)
{
  int v102 = a5;
  uint64_t v116 = a4;
  uint64_t v120 = a3;
  uint64_t v121 = a2;
  uint64_t v122 = a6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0560);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v112 = &v101[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v110 = *(void *)(v9 - 8);
  uint64_t v111 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v113 = &v101[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v125 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1F4188790](v125);
  uint64_t v128 = &v101[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v109 = &v101[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v107 = &v101[-v16];
  MEMORY[0x1F4188790](v15);
  uint64_t v118 = &v101[-v17];
  uint64_t v129 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v18 = MEMORY[0x1F4188790](v129);
  uint64_t v108 = &v101[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v18);
  uint64_t v115 = &v101[-v20];
  uint64_t v21 = type metadata accessor for Proto_Value(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v127 = &v101[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v126 = &v101[-v26];
  MEMORY[0x1F4188790](v25);
  uint64_t v117 = &v101[-v27];
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v29 = MEMORY[0x1F4188790](v28 - 8);
  uint64_t v124 = &v101[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v119 = &v101[-v32];
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  __n128 v35 = &v101[-v34];
  MEMORY[0x1F4188790](v33);
  uint64_t v37 = &v101[-v36];
  uint64_t v130 = a1;
  uint64_t v38 = (uint64_t)a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v38, (uint64_t)v37, &qword_1EBBC0540);
  uint64_t v39 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48);
  unsigned int v40 = v39(v37, 1, v21);
  sub_1C3F962E0((uint64_t)v37, &qword_1EBBC0540);
  if (v40 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v41 = 0xD000000000000017;
    *(void *)(v41 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v41 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v130;
  sub_1C3F970C4(v38, (uint64_t)v35, &qword_1EBBC0540);
  if (v39(v35, 1, v21) == 1)
  {
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v106 = v39;
  uint64_t v43 = v117;
  sub_1C3F8ABD8((uint64_t)v35, (uint64_t)v117, type metadata accessor for Proto_Value);
  uint64_t v123 = v21;
  uint64_t v44 = *(void *)&v43[*(int *)(v21 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v45 = v44;
  uint64_t v46 = v118;
  sub_1C3F970C4(v45, (uint64_t)v118, &qword_1EBBBF8A0);
  uint64_t v47 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v48 = *(void *)(v47 - 8);
  __n128 v49 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v48 + 48);
  uint64_t v103 = v48 + 48;
  uint64_t v104 = v49;
  if (v49(v46, 1, v47) == 1)
  {
    swift_retain();
    sub_1C3F962E0((uint64_t)v46, &qword_1EBBBF8A0);
    uint64_t v50 = v115;
    uint64_t v51 = v116;
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v50 = v115;
    uint64_t v51 = v116;
    if (EnumCaseMultiPayload == 11)
    {
      sub_1C3F8ABD8((uint64_t)v46, (uint64_t)v115, type metadata accessor for Proto_TaggedValue);
      goto LABEL_12;
    }
    swift_retain();
    sub_1C3F8B0A8((uint64_t)v46, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v53 = *(int *)(v129 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)&v50[v53] = qword_1EA39AF60;
LABEL_12:
  swift_retain();
  sub_1C3F8B0A8((uint64_t)v43, type metadata accessor for Proto_Value);
  uint64_t v54 = *(void *)&v50[*(int *)(v129 + 20)];
  swift_beginAccess();
  __n128 v55 = *(unsigned char **)(v54 + 16);
  sub_1C3F8B0A8((uint64_t)v50, type metadata accessor for Proto_TaggedValue);
  uint64_t v131 = v55;
  uint64_t v56 = v51(0, v121, v120);
  unint64_t v57 = (char *)v122 + *(int *)(v56 + 36);
  uint64_t AssociatedTypeWitness = (unsigned char *)swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v117 = AssociatedTypeWitness;
  uint64_t v118 = v57;
  uint64_t v60 = (uint64_t)AssociatedTypeWitness;
  uint64_t v61 = AssociatedConformanceWitness;
  CRExtensible.init(rawValue:)((uint64_t)&v131, v60, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E4FBB560], v57);
  uint64_t v62 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  uint64_t v63 = v119;
  sub_1C3F970C4(v62, (uint64_t)v119, &qword_1EBBC0540);
  uint64_t v64 = v123;
  if (v106(v63, 1, v123) == 1)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    JUMPOUT(0x1C40CDF60);
  }
  uint64_t v65 = (uint64_t)v63;
  int v66 = v126;
  sub_1C3F8ABD8(v65, (uint64_t)v126, type metadata accessor for Proto_Value);
  uint64_t v67 = *(void *)&v66[*(int *)(v64 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v68 = v67;
  unint64_t v69 = v107;
  sub_1C3F970C4(v68, (uint64_t)v107, &qword_1EBBBF8A0);
  int v70 = v104(v69, 1, v47);
  uint64_t v72 = (uint64_t)v108;
  uint64_t v71 = (uint64_t)v109;
  uint64_t v73 = v127;
  if (v70 == 1)
  {
    sub_1C3F962E0((uint64_t)v69, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      uint64_t v74 = v61;
      sub_1C3F8ABD8((uint64_t)v69, v72, type metadata accessor for Proto_TaggedValue);
      goto LABEL_21;
    }
    sub_1C3F8B0A8((uint64_t)v69, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v75 = *(int *)(v129 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  uint64_t v74 = v61;
  *(void *)(v72 + v75) = qword_1EA39AF60;
  swift_retain();
LABEL_21:
  sub_1C3F8B0A8((uint64_t)v126, type metadata accessor for Proto_Value);
  uint64_t v76 = *(void *)(v72 + *(int *)(v129 + 20))
      + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  __n128 v77 = v124;
  sub_1C3F970C4(v76, (uint64_t)v124, &qword_1EBBC0540);
  uint64_t v78 = v123;
  if (v106(v77, 1, v123) == 1)
  {
    sub_1C4496888();
    uint64_t v79 = *(int *)(v78 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)&v73[v79] = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0((uint64_t)v124, &qword_1EBBC0540);
    uint64_t v78 = v123;
  }
  else
  {
    sub_1C3F8ABD8((uint64_t)v77, (uint64_t)v73, type metadata accessor for Proto_Value);
  }
  int v80 = (uint64_t (*)(void, uint64_t, uint64_t))v74;
  sub_1C3F8B0A8(v72, type metadata accessor for Proto_TaggedValue);
  uint64_t v81 = *(void *)&v73[*(int *)(v78 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v81, v71, &qword_1EBBBF8A0);
  if (v104((unsigned char *)v71, 1, v47) == 1)
  {
    sub_1C3F962E0(v71, &qword_1EBBBF8A0);
    uint64_t v82 = v130;
    uint64_t v84 = v113;
    uint64_t v83 = v114;
    uint64_t v86 = v111;
    uint64_t v85 = (uint64_t)v112;
    uint64_t v87 = v128;
LABEL_31:
    sub_1C4496888();
    uint64_t v89 = *(int *)(v125 + 20);
    if (qword_1EBBBC818 != -1) {
      swift_once();
    }
    *(void *)&v87[v89] = qword_1EBBBC808;
    swift_retain();
    goto LABEL_34;
  }
  int v88 = swift_getEnumCaseMultiPayload();
  uint64_t v82 = v130;
  uint64_t v86 = v111;
  uint64_t v87 = v128;
  if (v88 != 7)
  {
    sub_1C3F8B0A8(v71, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    uint64_t v84 = v113;
    uint64_t v83 = v114;
    uint64_t v85 = (uint64_t)v112;
    goto LABEL_31;
  }
  sub_1C3F8ABD8(v71, (uint64_t)v128, type metadata accessor for Proto_Reference);
  uint64_t v84 = v113;
  uint64_t v83 = v114;
  uint64_t v85 = (uint64_t)v112;
LABEL_34:
  sub_1C3F8B0A8((uint64_t)v127, type metadata accessor for Proto_Value);
  uint64_t v90 = *(void *)&v87[*(int *)(v125 + 20)]
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  sub_1C3F970C4(v90, v85, &qword_1EBBC0560);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v110 + 48))(v85, 1, v86) == 1)
  {
    *uint64_t v84 = MEMORY[0x1E4FBC860];
    v84[1] = sub_1C4496868();
    v84[2] = v91;
    sub_1C4496888();
    sub_1C3F962E0(v85, &qword_1EBBC0560);
  }
  else
  {
    sub_1C3F8ABD8(v85, (uint64_t)v84, type metadata accessor for Proto_KeyPath);
  }
  sub_1C3F8B0A8((uint64_t)v128, type metadata accessor for Proto_Reference);
  swift_retain();
  sub_1C3F766DC((uint64_t)v84, (uint64_t *)&v131);
  if (v83)
  {
    swift_release();
    swift_release();
    uint64_t v131 = v117;
    unint64_t v132 = (unint64_t)v80;
    uint64_t v133 = &protocol witness table for Int;
    uint64_t v134 = MEMORY[0x1E4FBB560];
    uint64_t v100 = type metadata accessor for CRExtensible();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v100 - 8) + 8))(v118, v100);
  }
  else
  {
    uint64_t v93 = (uint64_t)v131;
    unint64_t v92 = v132;
    uint64_t v94 = v122;
    *uint64_t v122 = v131;
    v94[1] = v92;
    sub_1C3F7E324(v93, v92);
    uint64_t v131 = v117;
    unint64_t v132 = (unint64_t)v80;
    uint64_t v133 = &protocol witness table for Int;
    uint64_t v134 = MEMORY[0x1E4FBB560];
    uint64_t v95 = type metadata accessor for CRExtensible();
    CRExtensible.rawValue.getter(v95, (uint64_t)&v135);
    uint64_t v116 = v80;
    switch(v135)
    {
      case 0:
        uint64_t v96 = v82[2];
        if (v96) {
          goto LABEL_49;
        }
        goto LABEL_52;
      case 1:
        uint64_t v96 = v82[2];
        if (v96) {
          goto LABEL_49;
        }
        goto LABEL_53;
      case 2:
        uint64_t v96 = v82[2];
        if (v96) {
          goto LABEL_49;
        }
        goto LABEL_54;
      case 3:
        uint64_t v96 = v82[2];
        if (v96) {
          goto LABEL_49;
        }
        goto LABEL_55;
      default:
        uint64_t v96 = v82[2];
        if (!v96) {
          goto LABEL_56;
        }
LABEL_49:
        uint64_t v97 = swift_getAssociatedTypeWitness();
        uint64_t v131 = (unsigned char *)v93;
        unint64_t v132 = v92;
        __n128 v98 = *(void **)(*(void *)v96 + 176);
        uint64_t v129 = *(void *)v96 + 176;
        uint64_t v130 = v98;
        uint64_t v99 = swift_getAssociatedConformanceWitness();
        swift_retain();
        ((void (*)(uint64_t, unsigned char **, void *, void, uint64_t, uint64_t))v130)(v97, &v131, v82, v102 & 1, v97, v99);
        swift_release();
        swift_release();
        swift_release();
        uint64_t result = sub_1C3F7E2CC(v93, v92);
        break;
    }
  }
  return result;
}

uint64_t sub_1C40CDF70(uint64_t a1, uint64_t a2)
{
  return WeakTagged_4.encode(to:)(a1, a2);
}

uint64_t WeakTagged_4.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C40C5014(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_4, (uint64_t)&associated type descriptor for Tagged_4.Enum, (uint64_t)&associated conformance descriptor for Tagged_4.Tagged_4.Enum: RawRepresentable);
}

uint64_t (*WeakTagged_5.id.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_5.tag.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C40EA434(a1, a2);
}

uint64_t WeakTagged_5.tag.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C40EA528(a1, a2);
}

uint64_t (*WeakTagged_5.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_5.init(_:identity:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_5.init(_:id:));
}

{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_5.init(_:id:));
}

uint64_t WeakTagged_5.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1C40EA66C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_5, a5);
}

{
  return sub_1C40EA7CC(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_5, a5);
}

uint64_t WeakTagged_5.init(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for SharedTagged_5() + 36);
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for WeakTagged_5() + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v4, v3, v5);
}

uint64_t WeakTagged_5.tagged1.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  else
  {
    uint64_t v8 = *v1;
    unint64_t v9 = v2[1];
    v10.n128_u64[0] = v8;
    v10.n128_u64[1] = v9;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v6 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t WeakTagged_5.tagged2.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 1)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_5.tagged3.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 2)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_5.tagged4.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 3)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_5.tagged5.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 4)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_5.unknown.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] < 2)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  else
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_5.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v167 = a3;
  uint64_t v168 = a4;
  uint64_t v166 = a1;
  uint64_t v170 = a5;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v149 = sub_1C4497B38();
  uint64_t v148 = *(void *)(v149 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v149);
  uint64_t v151 = (char *)&v125 - v10;
  v164 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))AssociatedTypeWitness;
  uint64_t v150 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  v147 = (char *)&v125 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  v146 = (char *)&v125 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v145 = sub_1C4497B38();
  uint64_t v144 = *(void *)(v145 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v145);
  uint64_t v162 = (char *)&v125 - v16;
  uint64_t v163 = v14;
  uint64_t v161 = *(void *)(v14 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v143 = (char *)&v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  __n128 v142 = (char *)&v125 - v19;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v141 = sub_1C4497B38();
  uint64_t v140 = *(void *)(v141 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v141);
  v159 = (char *)&v125 - v22;
  uint64_t v160 = v20;
  uint64_t v158 = *(void *)(v20 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v139 = (char *)&v125 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v138 = (char *)&v125 - v25;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v137 = sub_1C4497B38();
  uint64_t v136 = *(void *)(v137 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v137);
  uint64_t v156 = (char *)&v125 - v28;
  uint64_t v157 = v26;
  uint64_t v155 = *(void *)(v26 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v135 = (char *)&v125 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v134 = (char *)&v125 - v31;
  uint64_t v32 = swift_getAssociatedTypeWitness();
  uint64_t v133 = sub_1C4497B38();
  uint64_t v132 = *(void *)(v133 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v133);
  uint64_t v154 = (char *)&v125 - v34;
  uint64_t v153 = *(void *)(v32 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v131 = (char *)&v125 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  uint64_t v130 = (char *)&v125 - v37;
  uint64_t v38 = swift_getAssociatedTypeWitness();
  uint64_t v129 = sub_1C4497B38();
  uint64_t v128 = *(void *)(v129 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v129);
  uint64_t v41 = (char *)&v125 - v40;
  uint64_t v152 = *(void *)(v38 - 8);
  uint64_t v42 = MEMORY[0x1F4188790](v39);
  uint64_t v127 = (char *)&v125 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v42);
  uint64_t v126 = (char *)&v125 - v44;
  uint64_t v45 = v5;
  uint64_t v46 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v172.n128_u64[0] = v46;
  v172.n128_u64[1] = AssociatedConformanceWitness;
  v173 = &protocol witness table for Int;
  uint64_t v174 = MEMORY[0x1E4FBB560];
  uint64_t v48 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v48, (uint64_t)&v175);
  uint64_t v169 = v7;
  switch(v175)
  {
    case 0:
      unint64_t v49 = v5[1];
      v171.n128_u64[0] = *v5;
      uint64_t v50 = v171.n128_u64[0];
      v171.n128_u64[1] = v49;
      uint64_t v51 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v171, &v172);
      __n128 v52 = v172;
      __n128 v171 = v172;
      uint64_t v53 = v168;
      v164 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 16);
      sub_1C3F7E324(v50, v49);
      v164(&v171, v38, v51, v167, v53);
      sub_1C3F7E2CC(v52.n128_i64[0], v52.n128_u64[1]);
      uint64_t v54 = v152;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v152 + 48))(v41, 1, v38) == 1)
      {
        (*(void (**)(char *, uint64_t))(v128 + 8))(v41, v129);
        uint64_t v55 = v170;
        goto LABEL_15;
      }
      uint64_t v104 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
      uint64_t v105 = v126;
      v104(v126, v41, v38);
      v104(v127, v105, v38);
      uint64_t v106 = swift_getAssociatedTypeWitness();
      uint64_t v55 = v170;
      goto LABEL_22;
    case 1:
      unint64_t v56 = v5[1];
      v171.n128_u64[0] = *v45;
      uint64_t v57 = v171.n128_u64[0];
      v171.n128_u64[1] = v56;
      uint64_t v165 = v6;
      uint64_t v58 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v171, &v172);
      __n128 v59 = v172;
      __n128 v171 = v172;
      uint64_t v60 = v168;
      uint64_t v61 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 16);
      sub_1C3F7E324(v57, v56);
      uint64_t v62 = v154;
      v61(&v171, v32, v58, v167, v60);
      sub_1C3F7E2CC(v59.n128_i64[0], v59.n128_u64[1]);
      uint64_t v63 = v153;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48))(v62, 1, v32) == 1)
      {
        (*(void (**)(char *, uint64_t))(v132 + 8))(v62, v133);
        goto LABEL_12;
      }
      uint64_t v107 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
      uint64_t v108 = v130;
      v107(v130, v62, v32);
      v107(v131, v108, v32);
      uint64_t v109 = swift_getAssociatedTypeWitness();
      uint64_t v110 = v170;
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v109 - 8) + 56))(v110, 0, 1, v109);
    case 2:
      unint64_t v65 = v5[1];
      v171.n128_u64[0] = *v5;
      uint64_t v64 = v171.n128_u64[0];
      v171.n128_u64[1] = v65;
      uint64_t v165 = v6;
      uint64_t v66 = v157;
      uint64_t v67 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v171, &v172);
      __n128 v68 = v172;
      __n128 v171 = v172;
      uint64_t v69 = v168;
      int v70 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 16);
      sub_1C3F7E324(v64, v65);
      uint64_t v71 = v156;
      v70(&v171, v66, v67, v167, v69);
      sub_1C3F7E2CC(v68.n128_i64[0], v68.n128_u64[1]);
      uint64_t v72 = v155;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v71, 1, v66) == 1)
      {
        (*(void (**)(char *, uint64_t))(v136 + 8))(v71, v137);
        goto LABEL_12;
      }
      uint64_t v111 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
      uint64_t v112 = v134;
      v111(v134, v71, v66);
      v111(v135, v112, v66);
      uint64_t v113 = swift_getAssociatedTypeWitness();
      uint64_t v114 = v170;
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v113 - 8) + 56))(v114, 0, 1, v113);
    case 3:
      unint64_t v74 = v5[1];
      v171.n128_u64[0] = *v45;
      uint64_t v73 = v171.n128_u64[0];
      v171.n128_u64[1] = v74;
      uint64_t v165 = v6;
      uint64_t v75 = v160;
      uint64_t v76 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v171, &v172);
      __n128 v77 = v172;
      __n128 v171 = v172;
      uint64_t v78 = v168;
      uint64_t v79 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 16);
      sub_1C3F7E324(v73, v74);
      int v80 = v159;
      v79(&v171, v75, v76, v167, v78);
      sub_1C3F7E2CC(v77.n128_i64[0], v77.n128_u64[1]);
      uint64_t v81 = v158;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48))(v80, 1, v75) == 1)
      {
        (*(void (**)(char *, uint64_t))(v140 + 8))(v80, v141);
        goto LABEL_12;
      }
      uint64_t v115 = v80;
      uint64_t v116 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
      uint64_t v117 = v138;
      v116(v138, v115, v75);
      v116(v139, v117, v75);
      uint64_t v106 = swift_getAssociatedTypeWitness();
      uint64_t v55 = v170;
      goto LABEL_22;
    case 4:
      unint64_t v83 = v5[1];
      v171.n128_u64[0] = *v45;
      uint64_t v82 = v171.n128_u64[0];
      v171.n128_u64[1] = v83;
      uint64_t v165 = v6;
      uint64_t v84 = v163;
      uint64_t v85 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v171, &v172);
      __n128 v86 = v172;
      __n128 v171 = v172;
      uint64_t v87 = v168;
      int v88 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 16);
      sub_1C3F7E324(v82, v83);
      uint64_t v89 = v162;
      v88(&v171, v84, v85, v167, v87);
      sub_1C3F7E2CC(v86.n128_i64[0], v86.n128_u64[1]);
      uint64_t v90 = v161;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v161 + 48))(v89, 1, v84) != 1)
      {
        uint64_t v118 = v89;
        uint64_t v119 = *(void (**)(char *, char *, uint64_t))(v90 + 32);
        uint64_t v120 = v142;
        v119(v142, v118, v84);
        v119(v143, v120, v84);
        uint64_t v106 = swift_getAssociatedTypeWitness();
        uint64_t v55 = v170;
        goto LABEL_22;
      }
      (*(void (**)(char *, uint64_t))(v144 + 8))(v89, v145);
LABEL_12:
      uint64_t v55 = v170;
      goto LABEL_15;
    default:
      unint64_t v92 = v5[1];
      v171.n128_u64[0] = *v45;
      uint64_t v91 = v171.n128_u64[0];
      v171.n128_u64[1] = v92;
      uint64_t v165 = v6;
      uint64_t v93 = v164;
      uint64_t v94 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v171, &v172);
      __n128 v95 = v172;
      __n128 v171 = v172;
      uint64_t v96 = v168;
      uint64_t v97 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(v168 + 16);
      sub_1C3F7E324(v91, v92);
      uint64_t v98 = v94;
      uint64_t v99 = v151;
      v97(&v171, v93, v98, v167, v96);
      sub_1C3F7E2CC(v95.n128_i64[0], v95.n128_u64[1]);
      uint64_t v100 = v150;
      int v101 = (*(uint64_t (**)(char *, uint64_t, void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t)))(v150 + 48))(v99, 1, v93);
      uint64_t v55 = v170;
      if (v101 == 1)
      {
        (*(void (**)(char *, uint64_t))(v148 + 8))(v99, v149);
LABEL_15:
        uint64_t v102 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 56))(v55, 1, 1, v102);
      }
      else
      {
        uint64_t v121 = *(void (**)(char *, char *, void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t)))(v100 + 32);
        uint64_t v122 = v146;
        uint64_t v123 = v99;
        uint64_t v124 = v164;
        v121(v146, v123, v164);
        v121(v147, v122, v124);
        uint64_t v106 = swift_getAssociatedTypeWitness();
LABEL_22:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v106 - 8) + 56))(v55, 0, 1, v106);
      }
  }
}

uint64_t sub_1C40CFAB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v136 = a1;
  uint64_t v137 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v117 = sub_1C4497B38();
  uint64_t v120 = *(void *)(v117 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v117);
  uint64_t v122 = (uint64_t)&v96 - v5;
  uint64_t v123 = AssociatedTypeWitness;
  uint64_t v121 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v118 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v119 = (char *)&v96 - v8;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v116 = sub_1C4497B38();
  uint64_t v115 = *(void *)(v116 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v116);
  uint64_t v134 = (uint64_t)&v96 - v11;
  uint64_t v135 = v9;
  uint64_t v133 = *(void *)(v9 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v114 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v113 = (char *)&v96 - v14;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v112 = sub_1C4497B38();
  uint64_t v111 = *(void *)(v112 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v112);
  uint64_t v131 = (uint64_t)&v96 - v17;
  uint64_t v132 = v15;
  uint64_t v130 = *(void *)(v15 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v110 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v109 = (char *)&v96 - v20;
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v108 = sub_1C4497B38();
  uint64_t v107 = *(void *)(v108 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v108);
  uint64_t v128 = (uint64_t)&v96 - v23;
  uint64_t v129 = v21;
  uint64_t v127 = *(void *)(v21 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v106 = (char *)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v105 = (char *)&v96 - v26;
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v104 = sub_1C4497B38();
  uint64_t v103 = *(void *)(v104 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v104);
  uint64_t v126 = (uint64_t)&v96 - v29;
  uint64_t v125 = *(void *)(v27 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v102 = (char *)&v96 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  int v101 = (char *)&v96 - v32;
  uint64_t v33 = swift_getAssociatedTypeWitness();
  uint64_t v100 = sub_1C4497B38();
  uint64_t v99 = *(void *)(v100 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v100);
  uint64_t v36 = (char *)&v96 - v35;
  uint64_t v124 = *(void *)(v33 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v34);
  uint64_t v98 = (char *)&v96 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v37);
  uint64_t v97 = (char *)&v96 - v39;
  uint64_t v40 = (unint64_t *)v2;
  uint64_t v41 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v139.n128_u64[0] = v41;
  v139.n128_u64[1] = AssociatedConformanceWitness;
  v140[0] = &protocol witness table for Int;
  v140[1] = MEMORY[0x1E4FBB560];
  uint64_t v43 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v43, (uint64_t)&v141);
  switch(v141)
  {
    case 0:
      uint64_t v44 = *v2;
      unint64_t v45 = v40[1];
      v138.n128_u64[0] = v44;
      v138.n128_u64[1] = v45;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v138, &v139);
      __n128 v46 = v139;
      __n128 v138 = v139;
      sub_1C3F7E324(v44, v45);
      uint64_t v47 = type metadata accessor for WeakRef();
      sub_1C44749D8(v47, (uint64_t)v36);
      sub_1C3F7E2CC(v46.n128_i64[0], v46.n128_u64[1]);
      uint64_t v48 = v124;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v36, 1, v33) == 1)
      {
        (*(void (**)(char *, uint64_t))(v99 + 8))(v36, v100);
        goto LABEL_12;
      }
      uint64_t v87 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
      int v88 = v97;
      v87(v97, v36, v33);
      v87(v98, v88, v33);
      uint64_t v89 = swift_getAssociatedTypeWitness();
      uint64_t v74 = v137;
      goto LABEL_23;
    case 1:
      unint64_t v50 = v2[1];
      v138.n128_u64[0] = *v40;
      uint64_t v49 = v138.n128_u64[0];
      v138.n128_u64[1] = v50;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v138, &v139);
      __n128 v51 = v139;
      __n128 v138 = v139;
      sub_1C3F7E324(v49, v50);
      uint64_t v52 = type metadata accessor for WeakRef();
      uint64_t v53 = v126;
      sub_1C44749D8(v52, v126);
      sub_1C3F7E2CC(v51.n128_i64[0], v51.n128_u64[1]);
      uint64_t v54 = v125;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v53, 1, v27) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v53, v104);
        goto LABEL_12;
      }
      uint64_t v90 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 32);
      uint64_t v91 = v101;
      v90(v101, v53, v27);
      unint64_t v92 = &v134;
      goto LABEL_21;
    case 2:
      unint64_t v56 = v2[1];
      v138.n128_u64[0] = *v40;
      uint64_t v55 = v138.n128_u64[0];
      v138.n128_u64[1] = v56;
      uint64_t v57 = v129;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v138, &v139);
      __n128 v58 = v139;
      __n128 v138 = v139;
      sub_1C3F7E324(v55, v56);
      uint64_t v59 = type metadata accessor for WeakRef();
      uint64_t v60 = v128;
      sub_1C44749D8(v59, v128);
      sub_1C3F7E2CC(v58.n128_i64[0], v58.n128_u64[1]);
      uint64_t v61 = v127;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v60, 1, v57) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v60, v108);
        goto LABEL_12;
      }
      uint64_t v93 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 32);
      uint64_t v94 = v105;
      v93(v105, v60, v57);
      v93(v106, (uint64_t)v94, v57);
      uint64_t v89 = swift_getAssociatedTypeWitness();
      uint64_t v74 = v137;
      goto LABEL_23;
    case 3:
      unint64_t v63 = v2[1];
      v138.n128_u64[0] = *v40;
      uint64_t v62 = v138.n128_u64[0];
      v138.n128_u64[1] = v63;
      uint64_t v27 = v132;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v138, &v139);
      __n128 v64 = v139;
      __n128 v138 = v139;
      sub_1C3F7E324(v62, v63);
      uint64_t v65 = type metadata accessor for WeakRef();
      uint64_t v66 = v131;
      sub_1C44749D8(v65, v131);
      sub_1C3F7E2CC(v64.n128_i64[0], v64.n128_u64[1]);
      uint64_t v67 = v130;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v66, 1, v27) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v66, v112);
        goto LABEL_12;
      }
      uint64_t v90 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 32);
      uint64_t v91 = v109;
      v90(v109, v66, v27);
      unint64_t v92 = v140;
      goto LABEL_21;
    case 4:
      unint64_t v69 = v2[1];
      v138.n128_u64[0] = *v40;
      uint64_t v68 = v138.n128_u64[0];
      v138.n128_u64[1] = v69;
      uint64_t v27 = v135;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v138, &v139);
      __n128 v70 = v139;
      __n128 v138 = v139;
      sub_1C3F7E324(v68, v69);
      uint64_t v71 = type metadata accessor for WeakRef();
      uint64_t v72 = v134;
      sub_1C44749D8(v71, v134);
      sub_1C3F7E2CC(v70.n128_i64[0], v70.n128_u64[1]);
      uint64_t v73 = v133;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v72, 1, v27) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v72, v116);
LABEL_12:
        uint64_t v74 = v137;
        goto LABEL_13;
      }
      uint64_t v90 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 32);
      uint64_t v91 = v113;
      v90(v113, v72, v27);
      unint64_t v92 = &v142;
LABEL_21:
      v90((char *)*(v92 - 32), (uint64_t)v91, v27);
      uint64_t v89 = swift_getAssociatedTypeWitness();
      uint64_t v74 = v137;
      goto LABEL_23;
    default:
      __n128 v77 = v119;
      uint64_t v78 = v120;
      unint64_t v80 = v2[1];
      v138.n128_u64[0] = *v40;
      uint64_t v79 = v138.n128_u64[0];
      v138.n128_u64[1] = v80;
      uint64_t v81 = v123;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v138, &v139);
      __n128 v82 = v139;
      __n128 v138 = v139;
      sub_1C3F7E324(v79, v80);
      uint64_t v83 = type metadata accessor for WeakRef();
      uint64_t v84 = v122;
      sub_1C44749D8(v83, v122);
      sub_1C3F7E2CC(v82.n128_i64[0], v82.n128_u64[1]);
      uint64_t v85 = v121;
      int v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v121 + 48))(v84, 1, v81);
      uint64_t v74 = v137;
      if (v86 == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v84, v117);
LABEL_13:
        uint64_t v75 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v74, 1, 1, v75);
      }
      else
      {
        __n128 v95 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 32);
        v95(v77, v84, v81);
        v95(v118, (uint64_t)v77, v81);
        uint64_t v89 = swift_getAssociatedTypeWitness();
LABEL_23:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v74, 0, 1, v89);
      }
  }
}

uint64_t sub_1C40D0B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v114 = a2;
  uint64_t v115 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v110 = (char *)&v98 - v4;
  uint64_t v109 = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_1C4497B38();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v108 = (char *)&v98 - v6;
  uint64_t v107 = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v106 = (char *)&v98 - v8;
  uint64_t v105 = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1C4497B38();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v104 = (char *)&v98 - v10;
  uint64_t v103 = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_1C4497B38();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v102 = (char *)&v98 - v12;
  uint64_t v101 = swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_1C4497B38();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v100 = (char *)&v98 - v14;
  swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_1C4497B38();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v112 = v15;
  uint64_t v113 = v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v99 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v98 = (char *)&v98 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v98 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v26 = (char *)&v98 - v25;
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v29 = (char *)&v98 - v28;
  MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v98 - v30;
  uint64_t v32 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v117.n128_u64[0] = v32;
  v117.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v118 = &protocol witness table for Int;
  uint64_t v119 = MEMORY[0x1E4FBB560];
  uint64_t v34 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v34, (uint64_t)&v120);
  switch(v120)
  {
    case 0:
      uint64_t v35 = *v2;
      unint64_t v36 = v2[1];
      v116.n128_u64[0] = v35;
      v116.n128_u64[1] = v36;
      uint64_t v37 = v101;
      uint64_t v38 = swift_getAssociatedConformanceWitness();
      __n128 v39 = WeakRef.init(id:)(&v116, &v117);
      __n128 v40 = v117;
      uint64_t v42 = v112;
      uint64_t v41 = v113;
      uint64_t v43 = v115;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v113 + 16))(v31, v115, v112, v39);
      sub_1C3F7E324(v35, v36);
      uint64_t v44 = (uint64_t)v100;
      int v45 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v44, v45 ^ 1u, 1, v37);
      __n128 v116 = v40;
      sub_1C4055840(v44, (uint64_t)&v116, v37, v38);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v43, v42);
    case 1:
      uint64_t v60 = *v2;
      unint64_t v61 = v2[1];
      v116.n128_u64[0] = v60;
      v116.n128_u64[1] = v61;
      uint64_t v62 = v103;
      uint64_t v63 = swift_getAssociatedConformanceWitness();
      __n128 v64 = WeakRef.init(id:)(&v116, &v117);
      __n128 v65 = v117;
      uint64_t v67 = v112;
      uint64_t v66 = v113;
      uint64_t v68 = v115;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v113 + 16))(v29, v115, v112, v64);
      sub_1C3F7E324(v60, v61);
      unint64_t v69 = v102;
      int v70 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v69, v70 ^ 1u, 1, v62);
      __n128 v116 = v65;
      uint64_t v71 = (uint64_t)v69;
      uint64_t v72 = v62;
      goto LABEL_10;
    case 2:
      uint64_t v73 = *v2;
      unint64_t v74 = v2[1];
      v116.n128_u64[0] = v73;
      v116.n128_u64[1] = v74;
      uint64_t v75 = v105;
      uint64_t v76 = swift_getAssociatedConformanceWitness();
      __n128 v77 = WeakRef.init(id:)(&v116, &v117);
      __n128 v78 = v117;
      uint64_t v80 = v112;
      uint64_t v79 = v113;
      uint64_t v81 = v115;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v113 + 16))(v26, v115, v112, v77);
      sub_1C3F7E324(v73, v74);
      uint64_t v82 = (uint64_t)v104;
      int v83 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v82, v83 ^ 1u, 1, v75);
      __n128 v116 = v78;
      sub_1C4055840(v82, (uint64_t)&v116, v75, v76);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 8))(v81, v80);
    case 3:
      uint64_t v84 = *v2;
      unint64_t v85 = v2[1];
      v116.n128_u64[0] = v84;
      v116.n128_u64[1] = v85;
      uint64_t v86 = v107;
      uint64_t v50 = swift_getAssociatedConformanceWitness();
      __n128 v87 = WeakRef.init(id:)(&v116, &v117);
      __n128 v88 = v117;
      uint64_t v54 = v112;
      uint64_t v53 = v113;
      uint64_t v55 = v115;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v113 + 16))(v23, v115, v112, v87);
      sub_1C3F7E324(v84, v85);
      uint64_t v89 = v106;
      int v90 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v89, v90 ^ 1u, 1, v86);
      __n128 v116 = v88;
      uint64_t v58 = (uint64_t)v89;
      uint64_t v59 = v86;
      goto LABEL_7;
    case 4:
      unint64_t v92 = v2[1];
      v116.n128_u64[0] = *v2;
      uint64_t v91 = v116.n128_u64[0];
      v116.n128_u64[1] = v92;
      uint64_t v93 = v109;
      uint64_t v63 = swift_getAssociatedConformanceWitness();
      __n128 v94 = WeakRef.init(id:)(&v116, &v117);
      __n128 v95 = v117;
      uint64_t v67 = v112;
      uint64_t v66 = v113;
      uint64_t v68 = v115;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v113 + 16))(v98, v115, v112, v94);
      sub_1C3F7E324(v91, v92);
      uint64_t v96 = v108;
      int v97 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56))(v96, v97 ^ 1u, 1, v93);
      __n128 v116 = v95;
      uint64_t v71 = (uint64_t)v96;
      uint64_t v72 = v93;
LABEL_10:
      sub_1C4055840(v71, (uint64_t)&v116, v72, v63);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 8))(v68, v67);
    default:
      uint64_t v47 = *v2;
      unint64_t v48 = v2[1];
      v116.n128_u64[0] = v47;
      v116.n128_u64[1] = v48;
      uint64_t v49 = AssociatedTypeWitness;
      uint64_t v50 = swift_getAssociatedConformanceWitness();
      __n128 v51 = WeakRef.init(id:)(&v116, &v117);
      __n128 v52 = v117;
      uint64_t v54 = v112;
      uint64_t v53 = v113;
      uint64_t v55 = v115;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v113 + 16))(v99, v115, v112, v51);
      sub_1C3F7E324(v47, v48);
      unint64_t v56 = v110;
      int v57 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v56, v57 ^ 1u, 1, v49);
      __n128 v116 = v52;
      uint64_t v58 = (uint64_t)v56;
      uint64_t v59 = v49;
LABEL_7:
      sub_1C4055840(v58, (uint64_t)&v116, v59, v50);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v55, v54);
  }
}

uint64_t WeakTagged_5.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C40CFAB8);
}

uint64_t sub_1C40D1634(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for WeakTagged_5();
  swift_retain();
  sub_1C40F1F80(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_5, (uint64_t)&associated type descriptor for Tagged_5.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40D0B2C);
  return swift_release();
}

uint64_t WeakTagged_5.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1F80(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_5, (uint64_t)&associated type descriptor for Tagged_5.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40D0B2C);
  swift_release();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1C4497B38();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  return v5(a1, v4);
}

void (*WeakTagged_5.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_1C4497B38();
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_5.subscript.getter(a2, a3);
  return sub_1C40D1890;
}

void sub_1C40D1890(uint64_t **a1, char a2)
{
}

uint64_t WeakTagged_5.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C40CFAB8);
}

uint64_t WeakTagged_5.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))WeakTagged_5.init(_:id:), a3);
}

uint64_t WeakTagged_5.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))WeakTagged_5.copy(renamingReferences:));
}

uint64_t WeakTagged_5.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t static WeakTagged_5.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_5);
}

uint64_t WeakTagged_5.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))WeakTagged_5.hash(into:));
}

uint64_t sub_1C40D197C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))WeakTagged_5.hash(into:));
}

uint64_t sub_1C40D1994(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_5.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t WeakTagged_5.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C40D19C0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return WeakTagged_5.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t WeakTagged_5.init(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40D1A10(a1, a2, a3, (char *)type metadata accessor for WeakTagged_5, 1, a4);
}

uint64_t sub_1C40D1A10@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  int v106 = a5;
  uint64_t v126 = a4;
  uint64_t v127 = a3;
  uint64_t v128 = a2;
  uint64_t v130 = a6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0560);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v119 = &v105[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v118 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v116 = *(void *)(v118 - 8);
  MEMORY[0x1F4188790](v118);
  uint64_t v120 = &v105[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v115 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1F4188790](v115);
  __n128 v117 = &v105[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v114 = &v105[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v113 = &v105[-v15];
  MEMORY[0x1F4188790](v14);
  uint64_t v123 = &v105[-v16];
  uint64_t v133 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v17 = MEMORY[0x1F4188790](v133);
  uint64_t v131 = &v105[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v17);
  uint64_t v124 = &v105[-v19];
  uint64_t v20 = type metadata accessor for Proto_Value(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v132 = &v105[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v112 = &v105[-v25];
  MEMORY[0x1F4188790](v24);
  uint64_t v122 = &v105[-v26];
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v28 = MEMORY[0x1F4188790](v27 - 8);
  uint64_t v129 = &v105[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v125 = &v105[-v31];
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v34 = &v105[-v33];
  MEMORY[0x1F4188790](v32);
  unint64_t v36 = &v105[-v35];
  unint64_t v134 = a1;
  uint64_t v37 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v37, (uint64_t)v36, &qword_1EBBC0540);
  __n128 v40 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v39 = v21 + 48;
  uint64_t v38 = v40;
  unsigned int v41 = v40(v36, 1, v20);
  sub_1C3F962E0((uint64_t)v36, &qword_1EBBC0540);
  if (v41 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v42 = 0xD000000000000017;
    *(void *)(v42 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v42 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v134;
  sub_1C3F970C4(v37, (uint64_t)v34, &qword_1EBBC0540);
  uint64_t v110 = v39;
  if (v38(v34, 1, v20) == 1)
  {
    __break(1u);
    goto LABEL_53;
  }
  uint64_t v44 = v38;
  int v45 = v122;
  sub_1C3F8ABD8((uint64_t)v34, (uint64_t)v122, type metadata accessor for Proto_Value);
  uint64_t v46 = *(void *)&v45[*(int *)(v20 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v47 = v123;
  sub_1C3F970C4(v46, (uint64_t)v123, &qword_1EBBBF8A0);
  uint64_t v48 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v49 + 48);
  uint64_t v107 = v49 + 48;
  uint64_t v108 = v50;
  int v51 = v50(v47, 1, v48);
  uint64_t v109 = v20;
  if (v51 == 1)
  {
    swift_retain();
    sub_1C3F962E0((uint64_t)v47, &qword_1EBBBF8A0);
    __n128 v52 = v124;
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    __n128 v52 = v124;
    if (EnumCaseMultiPayload == 11)
    {
      sub_1C3F8ABD8((uint64_t)v47, (uint64_t)v124, type metadata accessor for Proto_TaggedValue);
      goto LABEL_12;
    }
    swift_retain();
    sub_1C3F8B0A8((uint64_t)v47, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v54 = *(int *)(v133 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)&v52[v54] = qword_1EA39AF60;
LABEL_12:
  swift_retain();
  sub_1C3F8B0A8((uint64_t)v45, type metadata accessor for Proto_Value);
  uint64_t v55 = *(void *)&v52[*(int *)(v133 + 20)];
  swift_beginAccess();
  unint64_t v56 = *(unsigned char **)(v55 + 16);
  sub_1C3F8B0A8((uint64_t)v52, type metadata accessor for Proto_TaggedValue);
  uint64_t v135 = v56;
  uint64_t v57 = ((uint64_t (*)(void, uint64_t, uint64_t))v126)(0, v128, v127);
  uint64_t v58 = (char *)v130 + *(int *)(v57 + 36);
  uint64_t AssociatedTypeWitness = (unsigned char *)swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v126 = v58;
  uint64_t v124 = AssociatedTypeWitness;
  CRExtensible.init(rawValue:)((uint64_t)&v135, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E4FBB560], v58);
  uint64_t v61 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  uint64_t v62 = v61;
  uint64_t v63 = v125;
  sub_1C3F970C4(v62, (uint64_t)v125, &qword_1EBBC0540);
  uint64_t v64 = v109;
  if (v44(v63, 1, v109) == 1)
  {
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    JUMPOUT(0x1C40D2B4CLL);
  }
  __n128 v65 = v112;
  sub_1C3F8ABD8((uint64_t)v63, (uint64_t)v112, type metadata accessor for Proto_Value);
  uint64_t v66 = *(void *)&v65[*(int *)(v64 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v67 = v66;
  uint64_t v68 = v113;
  sub_1C3F970C4(v67, (uint64_t)v113, &qword_1EBBBF8A0);
  int v69 = v108(v68, 1, v48);
  int v70 = v131;
  if (v69 == 1)
  {
    sub_1C3F962E0((uint64_t)v68, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      uint64_t v71 = (unsigned char *)AssociatedConformanceWitness;
      sub_1C3F8ABD8((uint64_t)v68, (uint64_t)v70, type metadata accessor for Proto_TaggedValue);
      goto LABEL_21;
    }
    sub_1C3F8B0A8((uint64_t)v68, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v72 = *(int *)(v133 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  uint64_t v71 = (unsigned char *)AssociatedConformanceWitness;
  *(void *)&v70[v72] = qword_1EA39AF60;
  swift_retain();
LABEL_21:
  unint64_t v73 = v134;
  sub_1C3F8B0A8((uint64_t)v65, type metadata accessor for Proto_Value);
  uint64_t v74 = *(void *)&v70[*(int *)(v133 + 20)]
      + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  uint64_t v75 = v129;
  sub_1C3F970C4(v74, (uint64_t)v129, &qword_1EBBC0540);
  unsigned int v76 = v44(v75, 1, v64);
  uint64_t v77 = v118;
  if (v76 == 1)
  {
    uint64_t v78 = v64;
    uint64_t v79 = v132;
    sub_1C4496888();
    uint64_t v80 = *(int *)(v78 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)&v79[v80] = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0((uint64_t)v129, &qword_1EBBC0540);
  }
  else
  {
    uint64_t v79 = v132;
    sub_1C3F8ABD8((uint64_t)v75, (uint64_t)v132, type metadata accessor for Proto_Value);
  }
  uint64_t v81 = v71;
  sub_1C3F8B0A8((uint64_t)v131, type metadata accessor for Proto_TaggedValue);
  uint64_t v82 = *(void *)&v79[*(int *)(v109 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v83 = v82;
  uint64_t v84 = v114;
  sub_1C3F970C4(v83, (uint64_t)v114, &qword_1EBBBF8A0);
  if (v108(v84, 1, v48) == 1)
  {
    sub_1C3F962E0((uint64_t)v84, &qword_1EBBBF8A0);
    uint64_t v85 = (uint64_t)v119;
    uint64_t v86 = v117;
    uint64_t v87 = v115;
    unint64_t v88 = v73;
LABEL_31:
    sub_1C4496888();
    uint64_t v90 = *(int *)(v87 + 20);
    if (qword_1EBBBC818 != -1) {
      swift_once();
    }
    *(void *)&v86[v90] = qword_1EBBBC808;
    swift_retain();
    goto LABEL_34;
  }
  int v89 = swift_getEnumCaseMultiPayload();
  uint64_t v85 = (uint64_t)v119;
  uint64_t v87 = v115;
  unint64_t v88 = v73;
  if (v89 != 7)
  {
    sub_1C3F8B0A8((uint64_t)v84, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    uint64_t v86 = v117;
    goto LABEL_31;
  }
  uint64_t v86 = v117;
  sub_1C3F8ABD8((uint64_t)v84, (uint64_t)v117, type metadata accessor for Proto_Reference);
LABEL_34:
  sub_1C3F8B0A8((uint64_t)v132, type metadata accessor for Proto_Value);
  uint64_t v91 = *(void *)&v86[*(int *)(v87 + 20)]
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  sub_1C3F970C4(v91, v85, &qword_1EBBC0560);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v85, 1, v77) == 1)
  {
    unint64_t v92 = v120;
    *uint64_t v120 = MEMORY[0x1E4FBC860];
    v92[1] = sub_1C4496868();
    v92[2] = v93;
    sub_1C4496888();
    sub_1C3F962E0(v85, &qword_1EBBC0560);
  }
  else
  {
    unint64_t v92 = v120;
    sub_1C3F8ABD8(v85, (uint64_t)v120, type metadata accessor for Proto_KeyPath);
  }
  sub_1C3F8B0A8((uint64_t)v86, type metadata accessor for Proto_Reference);
  swift_retain();
  uint64_t v94 = v121;
  sub_1C3F766DC((uint64_t)v92, (uint64_t *)&v135);
  __n128 v95 = v126;
  if (v94)
  {
    swift_release();
    swift_setDeallocating();
    swift_release();
    uint64_t v135 = v124;
    unint64_t v136 = (unint64_t)v81;
    uint64_t v137 = &protocol witness table for Int;
    uint64_t v138 = MEMORY[0x1E4FBB560];
    uint64_t v104 = type metadata accessor for CRExtensible();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v104 - 8) + 8))(v95, v104);
  }
  else
  {
    uint64_t v97 = (uint64_t)v135;
    unint64_t v96 = v136;
    uint64_t v98 = v130;
    *uint64_t v130 = v135;
    v98[1] = v96;
    sub_1C3F7E324(v97, v96);
    uint64_t v135 = v124;
    unint64_t v136 = (unint64_t)v81;
    uint64_t v137 = &protocol witness table for Int;
    uint64_t v138 = MEMORY[0x1E4FBB560];
    uint64_t v99 = type metadata accessor for CRExtensible();
    CRExtensible.rawValue.getter(v99, (uint64_t)&v139);
    uint64_t v123 = v81;
    unint64_t v134 = v96;
    switch(v139)
    {
      case 0:
        uint64_t v100 = *(void *)(v88 + 16);
        if (v100) {
          goto LABEL_51;
        }
        goto LABEL_54;
      case 1:
        uint64_t v100 = *(void *)(v88 + 16);
        if (v100) {
          goto LABEL_51;
        }
        goto LABEL_55;
      case 2:
        uint64_t v100 = *(void *)(v88 + 16);
        if (v100) {
          goto LABEL_51;
        }
        goto LABEL_56;
      case 3:
        uint64_t v100 = *(void *)(v88 + 16);
        if (v100) {
          goto LABEL_51;
        }
        goto LABEL_57;
      case 4:
        uint64_t v100 = *(void *)(v88 + 16);
        if (v100) {
          goto LABEL_51;
        }
        goto LABEL_58;
      default:
        uint64_t v100 = *(void *)(v88 + 16);
        if (!v100) {
          goto LABEL_59;
        }
LABEL_51:
        uint64_t v101 = swift_getAssociatedTypeWitness();
        uint64_t v135 = (unsigned char *)v97;
        unint64_t v136 = v134;
        uint64_t v102 = *(void *)(*(void *)v100 + 176);
        uint64_t v132 = (unsigned char *)(*(void *)v100 + 176);
        uint64_t v133 = v102;
        uint64_t v103 = swift_getAssociatedConformanceWitness();
        swift_retain();
        ((void (*)(uint64_t, unsigned char **, unint64_t, void, uint64_t, uint64_t))v133)(v101, &v135, v88, v106 & 1, v101, v103);
        swift_release();
        swift_release();
        swift_release();
        uint64_t result = sub_1C3F7E2CC(v97, v134);
        break;
    }
  }
  return result;
}

uint64_t sub_1C40D2B60(uint64_t a1, uint64_t a2)
{
  return WeakTagged_5.encode(to:)(a1, a2);
}

uint64_t WeakTagged_5.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C40C5014(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_5, (uint64_t)&associated type descriptor for Tagged_5.Enum, (uint64_t)&associated conformance descriptor for Tagged_5.Tagged_5.Enum: RawRepresentable);
}

uint64_t (*WeakTagged_6.id.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_6.tag.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C40EA434(a1, a2);
}

uint64_t WeakTagged_6.tag.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C40EA528(a1, a2);
}

uint64_t (*WeakTagged_6.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_6.init(_:identity:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_6.init(_:id:));
}

{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_6.init(_:id:));
}

uint64_t WeakTagged_6.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1C40EA66C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_6, a5);
}

{
  return sub_1C40EA7CC(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_6, a5);
}

uint64_t WeakTagged_6.init(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for SharedTagged_6() + 36);
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for WeakTagged_6() + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v4, v3, v5);
}

uint64_t WeakTagged_6.tagged1.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  else
  {
    uint64_t v8 = *v1;
    unint64_t v9 = v2[1];
    v10.n128_u64[0] = v8;
    v10.n128_u64[1] = v9;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v6 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t WeakTagged_6.tagged2.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 1)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_6.tagged3.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 2)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_6.tagged4.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 3)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_6.tagged5.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 4)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_6.tagged6.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 5)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_6.unknown.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] < 2)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  else
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_6.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v188 = a3;
  uint64_t v189 = a4;
  uint64_t v186 = a5;
  uint64_t v187 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v164 = sub_1C4497B38();
  uint64_t v163 = *(void *)(v164 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v164);
  uint64_t v166 = (char *)&v138 - v10;
  v183 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))AssociatedTypeWitness;
  uint64_t v165 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v162 = (char *)&v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v161 = (char *)&v138 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v160 = sub_1C4497B38();
  uint64_t v159 = *(void *)(v160 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v160);
  v181 = (char *)&v138 - v16;
  uint64_t v182 = v14;
  uint64_t v180 = *(void *)(v14 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v158 = (char *)&v138 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v157 = (char *)&v138 - v19;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v156 = sub_1C4497B38();
  uint64_t v155 = *(void *)(v156 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v156);
  v178 = (char *)&v138 - v22;
  uint64_t v179 = v20;
  uint64_t v177 = *(void *)(v20 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v154 = (char *)&v138 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v153 = (char *)&v138 - v25;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v152 = sub_1C4497B38();
  uint64_t v151 = *(void *)(v152 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v152);
  uint64_t v175 = (char *)&v138 - v28;
  uint64_t v176 = v26;
  uint64_t v174 = *(void *)(v26 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v150 = (char *)&v138 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v149 = (char *)&v138 - v31;
  uint64_t v32 = swift_getAssociatedTypeWitness();
  uint64_t v148 = sub_1C4497B38();
  uint64_t v147 = *(void *)(v148 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v148);
  __n128 v172 = (char *)&v138 - v34;
  uint64_t v173 = v32;
  uint64_t v171 = *(void *)(v32 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  v146 = (char *)&v138 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  uint64_t v145 = (char *)&v138 - v37;
  uint64_t v38 = swift_getAssociatedTypeWitness();
  uint64_t v144 = sub_1C4497B38();
  uint64_t v143 = *(void *)(v144 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v144);
  uint64_t v170 = (char *)&v138 - v40;
  uint64_t v169 = *(void *)(v38 - 8);
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v142 = (char *)&v138 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v41);
  uint64_t v141 = (char *)&v138 - v43;
  uint64_t v44 = swift_getAssociatedTypeWitness();
  uint64_t v140 = sub_1C4497B38();
  uint64_t v139 = *(void *)(v140 - 8);
  uint64_t v45 = MEMORY[0x1F4188790](v140);
  uint64_t v168 = (char *)&v138 - v46;
  uint64_t v167 = *(void *)(v44 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v138 = (char *)&v138 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v47);
  uint64_t v50 = (char *)&v138 - v49;
  int v51 = v5;
  uint64_t v52 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v191.n128_u64[0] = v52;
  v191.n128_u64[1] = AssociatedConformanceWitness;
  v192 = &protocol witness table for Int;
  uint64_t v193 = MEMORY[0x1E4FBB560];
  uint64_t v54 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v54, (uint64_t)&v194);
  uint64_t v185 = v7;
  switch(v194)
  {
    case 0:
      uint64_t v56 = *v5;
      unint64_t v55 = v51[1];
      v190.n128_u64[0] = v56;
      v190.n128_u64[1] = v55;
      uint64_t v57 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v190, &v191);
      __n128 v58 = v191;
      __n128 v190 = v191;
      uint64_t v59 = v189;
      v183 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 16);
      sub_1C3F7E324(v56, v55);
      uint64_t v60 = v168;
      v183(&v190, v44, v57, v188, v59);
      sub_1C3F7E2CC(v58.n128_i64[0], v58.n128_u64[1]);
      uint64_t v61 = v167;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48))(v60, 1, v44) == 1)
      {
        (*(void (**)(char *, uint64_t))(v139 + 8))(v60, v140);
        uint64_t v62 = v186;
        goto LABEL_17;
      }
      uint64_t v118 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
      v118(v50, v60, v44);
      v118(v138, v50, v44);
      uint64_t v119 = swift_getAssociatedTypeWitness();
      uint64_t v120 = v186;
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v119 - 8) + 56))(v120, 0, 1, v119);
    case 1:
      uint64_t v63 = *v5;
      unint64_t v64 = v5[1];
      v190.n128_u64[0] = v63;
      v190.n128_u64[1] = v64;
      uint64_t v184 = v6;
      uint64_t v65 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v190, &v191);
      __n128 v66 = v191;
      __n128 v190 = v191;
      uint64_t v67 = v189;
      uint64_t v68 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 16);
      sub_1C3F7E324(v63, v64);
      int v69 = v170;
      v68(&v190, v38, v65, v188, v67);
      sub_1C3F7E2CC(v66.n128_i64[0], v66.n128_u64[1]);
      uint64_t v70 = v169;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v169 + 48))(v69, 1, v38) == 1)
      {
        (*(void (**)(char *, uint64_t))(v143 + 8))(v69, v144);
        goto LABEL_14;
      }
      uint64_t v121 = v69;
      uint64_t v122 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
      uint64_t v123 = v141;
      v122(v141, v121, v38);
      v122(v142, v123, v38);
      uint64_t v124 = swift_getAssociatedTypeWitness();
      uint64_t v62 = v186;
      goto LABEL_27;
    case 2:
      uint64_t v71 = *v5;
      unint64_t v72 = v5[1];
      v190.n128_u64[0] = v71;
      v190.n128_u64[1] = v72;
      uint64_t v73 = v173;
      uint64_t v74 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v190, &v191);
      __n128 v75 = v191;
      __n128 v190 = v191;
      uint64_t v76 = v189;
      v183 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 16);
      sub_1C3F7E324(v71, v72);
      uint64_t v77 = v172;
      v183(&v190, v73, v74, v188, v76);
      sub_1C3F7E2CC(v75.n128_i64[0], v75.n128_u64[1]);
      uint64_t v78 = v171;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v171 + 48))(v77, 1, v73) == 1)
      {
        (*(void (**)(char *, uint64_t))(v147 + 8))(v77, v148);
        uint64_t v62 = v186;
        goto LABEL_17;
      }
      uint64_t v125 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
      uint64_t v126 = v145;
      v125(v145, v77, v73);
      v125(v146, v126, v73);
      goto LABEL_23;
    case 3:
      uint64_t v79 = *v5;
      unint64_t v80 = v5[1];
      v190.n128_u64[0] = v79;
      v190.n128_u64[1] = v80;
      uint64_t v184 = v6;
      uint64_t v81 = v176;
      uint64_t v82 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v190, &v191);
      __n128 v83 = v191;
      __n128 v190 = v191;
      uint64_t v84 = v189;
      uint64_t v85 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 16);
      sub_1C3F7E324(v79, v80);
      uint64_t v86 = v175;
      v85(&v190, v81, v82, v188, v84);
      sub_1C3F7E2CC(v83.n128_i64[0], v83.n128_u64[1]);
      uint64_t v87 = v174;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v174 + 48))(v86, 1, v81) == 1)
      {
        (*(void (**)(char *, uint64_t))(v151 + 8))(v86, v152);
        goto LABEL_14;
      }
      uint64_t v127 = v86;
      uint64_t v128 = *(void (**)(char *, char *, uint64_t))(v87 + 32);
      uint64_t v129 = v149;
      v128(v149, v127, v81);
      uint64_t v130 = (__n128 *)&v182;
      goto LABEL_25;
    case 4:
      uint64_t v88 = *v5;
      unint64_t v89 = v5[1];
      v190.n128_u64[0] = v88;
      v190.n128_u64[1] = v89;
      uint64_t v184 = v6;
      uint64_t v90 = v179;
      uint64_t v91 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v190, &v191);
      __n128 v92 = v191;
      __n128 v190 = v191;
      uint64_t v93 = v189;
      uint64_t v94 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 16);
      sub_1C3F7E324(v88, v89);
      __n128 v95 = v178;
      v94(&v190, v90, v91, v188, v93);
      sub_1C3F7E2CC(v92.n128_i64[0], v92.n128_u64[1]);
      uint64_t v96 = v177;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v177 + 48))(v95, 1, v90) == 1)
      {
        (*(void (**)(char *, uint64_t))(v155 + 8))(v95, v156);
        goto LABEL_14;
      }
      uint64_t v131 = *(void (**)(char *, char *, uint64_t))(v96 + 32);
      uint64_t v132 = v153;
      v131(v153, v95, v90);
      v131(v154, v132, v90);
LABEL_23:
      uint64_t v124 = swift_getAssociatedTypeWitness();
      uint64_t v62 = v186;
      goto LABEL_27;
    case 5:
      uint64_t v97 = *v5;
      unint64_t v98 = v5[1];
      v190.n128_u64[0] = v97;
      v190.n128_u64[1] = v98;
      uint64_t v184 = v6;
      uint64_t v81 = v182;
      uint64_t v99 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v190, &v191);
      __n128 v100 = v191;
      __n128 v190 = v191;
      uint64_t v101 = v189;
      uint64_t v102 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 16);
      sub_1C3F7E324(v97, v98);
      uint64_t v103 = v181;
      v102(&v190, v81, v99, v188, v101);
      sub_1C3F7E2CC(v100.n128_i64[0], v100.n128_u64[1]);
      uint64_t v104 = v180;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v180 + 48))(v103, 1, v81) != 1)
      {
        uint64_t v133 = v103;
        uint64_t v128 = *(void (**)(char *, char *, uint64_t))(v104 + 32);
        uint64_t v129 = v157;
        v128(v157, v133, v81);
        uint64_t v130 = &v190;
LABEL_25:
        v128((char *)v130[-16].n128_u64[0], v129, v81);
        uint64_t v124 = swift_getAssociatedTypeWitness();
        uint64_t v62 = v186;
        goto LABEL_27;
      }
      (*(void (**)(char *, uint64_t))(v159 + 8))(v103, v160);
LABEL_14:
      uint64_t v62 = v186;
      goto LABEL_17;
    default:
      uint64_t v105 = *v5;
      unint64_t v106 = v5[1];
      v190.n128_u64[0] = v105;
      v190.n128_u64[1] = v106;
      uint64_t v184 = v6;
      uint64_t v107 = v183;
      uint64_t v108 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v190, &v191);
      __n128 v109 = v191;
      __n128 v190 = v191;
      uint64_t v110 = v189;
      uint64_t v111 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(v189 + 16);
      sub_1C3F7E324(v105, v106);
      uint64_t v112 = v108;
      uint64_t v113 = v166;
      v111(&v190, v107, v112, v188, v110);
      sub_1C3F7E2CC(v109.n128_i64[0], v109.n128_u64[1]);
      uint64_t v114 = v165;
      int v115 = (*(uint64_t (**)(char *, uint64_t, void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t)))(v165 + 48))(v113, 1, v107);
      uint64_t v62 = v186;
      if (v115 == 1)
      {
        (*(void (**)(char *, uint64_t))(v163 + 8))(v113, v164);
LABEL_17:
        uint64_t v116 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 56))(v62, 1, 1, v116);
      }
      else
      {
        unint64_t v134 = *(void (**)(char *, char *, void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t)))(v114 + 32);
        uint64_t v135 = v161;
        unint64_t v136 = v113;
        uint64_t v137 = v183;
        v134(v161, v136, v183);
        v134(v162, v135, v137);
        uint64_t v124 = swift_getAssociatedTypeWitness();
LABEL_27:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v124 - 8) + 56))(v62, 0, 1, v124);
      }
  }
}

uint64_t sub_1C40D4A28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v156 = a2;
  uint64_t v157 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v133 = sub_1C4497B38();
  uint64_t v136 = *(void *)(v133 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v133);
  uint64_t v138 = (uint64_t)&v110 - v5;
  uint64_t v139 = AssociatedTypeWitness;
  uint64_t v137 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  unint64_t v134 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v135 = (char *)&v110 - v8;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v132 = sub_1C4497B38();
  uint64_t v131 = *(void *)(v132 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v132);
  uint64_t v154 = (uint64_t)&v110 - v11;
  uint64_t v155 = v9;
  uint64_t v153 = *(void *)(v9 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v130 = (char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v129 = (char *)&v110 - v14;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v128 = sub_1C4497B38();
  uint64_t v127 = *(void *)(v128 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v128);
  uint64_t v151 = (uint64_t)&v110 - v17;
  uint64_t v152 = v15;
  uint64_t v150 = *(void *)(v15 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v126 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v125 = (char *)&v110 - v20;
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v124 = sub_1C4497B38();
  uint64_t v123 = *(void *)(v124 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v124);
  uint64_t v148 = (uint64_t)&v110 - v23;
  uint64_t v149 = v21;
  uint64_t v147 = *(void *)(v21 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v122 = (char *)&v110 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v121 = (char *)&v110 - v26;
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v120 = sub_1C4497B38();
  uint64_t v119 = *(void *)(v120 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v120);
  uint64_t v145 = (uint64_t)&v110 - v29;
  uint64_t v146 = v27;
  uint64_t v144 = *(void *)(v27 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v118 = (char *)&v110 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  __n128 v117 = (char *)&v110 - v32;
  uint64_t v33 = swift_getAssociatedTypeWitness();
  uint64_t v116 = sub_1C4497B38();
  uint64_t v115 = *(void *)(v116 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v116);
  uint64_t v143 = (uint64_t)&v110 - v35;
  uint64_t v142 = *(void *)(v33 - 8);
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v114 = (char *)&v110 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  uint64_t v113 = (char *)&v110 - v38;
  uint64_t v39 = swift_getAssociatedTypeWitness();
  uint64_t v112 = sub_1C4497B38();
  uint64_t v111 = *(void *)(v112 - 8);
  uint64_t v40 = MEMORY[0x1F4188790](v112);
  uint64_t v141 = (uint64_t)&v110 - v41;
  uint64_t v140 = *(void *)(v39 - 8);
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  uint64_t v110 = (char *)&v110 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v42);
  uint64_t v45 = (char *)&v110 - v44;
  uint64_t v46 = v2;
  uint64_t v47 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v159.n128_u64[0] = v47;
  v159.n128_u64[1] = AssociatedConformanceWitness;
  v160[0] = &protocol witness table for Int;
  v160[1] = MEMORY[0x1E4FBB560];
  uint64_t v49 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v49, (uint64_t)&v161);
  switch(v161)
  {
    case 0:
      unint64_t v51 = v2[1];
      v158.n128_u64[0] = *v46;
      uint64_t v50 = v158.n128_u64[0];
      v158.n128_u64[1] = v51;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v158, &v159);
      __n128 v52 = v159;
      __n128 v158 = v159;
      sub_1C3F7E324(v50, v51);
      uint64_t v53 = type metadata accessor for WeakRef();
      uint64_t v54 = v141;
      sub_1C44749D8(v53, v141);
      sub_1C3F7E2CC(v52.n128_i64[0], v52.n128_u64[1]);
      uint64_t v55 = v140;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v140 + 48))(v54, 1, v39) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v54, v112);
        uint64_t v56 = v156;
        goto LABEL_15;
      }
      __n128 v100 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 32);
      v100(v45, v54, v39);
      v100(v110, (uint64_t)v45, v39);
      uint64_t v101 = swift_getAssociatedTypeWitness();
      uint64_t v56 = v156;
      goto LABEL_26;
    case 1:
      unint64_t v58 = v2[1];
      v158.n128_u64[0] = *v2;
      uint64_t v57 = v158.n128_u64[0];
      v158.n128_u64[1] = v58;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v158, &v159);
      __n128 v59 = v159;
      __n128 v158 = v159;
      sub_1C3F7E324(v57, v58);
      uint64_t v60 = type metadata accessor for WeakRef();
      uint64_t v61 = v143;
      sub_1C44749D8(v60, v143);
      sub_1C3F7E2CC(v59.n128_i64[0], v59.n128_u64[1]);
      uint64_t v62 = v142;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v61, 1, v33) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v61, v116);
        goto LABEL_14;
      }
      uint64_t v102 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 32);
      uint64_t v103 = v113;
      v102(v113, v61, v33);
      v102(v114, (uint64_t)v103, v33);
      uint64_t v104 = swift_getAssociatedTypeWitness();
      uint64_t v105 = v156;
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v105, 0, 1, v104);
    case 2:
      unint64_t v64 = v2[1];
      v158.n128_u64[0] = *v46;
      uint64_t v63 = v158.n128_u64[0];
      v158.n128_u64[1] = v64;
      uint64_t v65 = v146;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v158, &v159);
      __n128 v66 = v159;
      __n128 v158 = v159;
      sub_1C3F7E324(v63, v64);
      uint64_t v67 = type metadata accessor for WeakRef();
      uint64_t v68 = v145;
      sub_1C44749D8(v67, v145);
      sub_1C3F7E2CC(v66.n128_i64[0], v66.n128_u64[1]);
      uint64_t v69 = v144;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48))(v68, 1, v65) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v68, v120);
        goto LABEL_14;
      }
      unint64_t v106 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 32);
      uint64_t v107 = v117;
      v106(v117, v68, v65);
      uint64_t v108 = (__n128 *)&v150;
      goto LABEL_24;
    case 3:
      unint64_t v71 = v2[1];
      v158.n128_u64[0] = *v46;
      uint64_t v70 = v158.n128_u64[0];
      v158.n128_u64[1] = v71;
      uint64_t v65 = v149;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v158, &v159);
      __n128 v72 = v159;
      __n128 v158 = v159;
      sub_1C3F7E324(v70, v71);
      uint64_t v73 = type metadata accessor for WeakRef();
      uint64_t v74 = v148;
      sub_1C44749D8(v73, v148);
      sub_1C3F7E2CC(v72.n128_i64[0], v72.n128_u64[1]);
      uint64_t v75 = v147;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v74, 1, v65) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v74, v124);
        goto LABEL_14;
      }
      unint64_t v106 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 32);
      uint64_t v107 = v121;
      v106(v121, v74, v65);
      uint64_t v108 = (__n128 *)&v154;
      goto LABEL_24;
    case 4:
      unint64_t v77 = v2[1];
      v158.n128_u64[0] = *v46;
      uint64_t v76 = v158.n128_u64[0];
      v158.n128_u64[1] = v77;
      uint64_t v65 = v152;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v158, &v159);
      __n128 v78 = v159;
      __n128 v158 = v159;
      sub_1C3F7E324(v76, v77);
      uint64_t v79 = type metadata accessor for WeakRef();
      uint64_t v80 = v151;
      sub_1C44749D8(v79, v151);
      sub_1C3F7E2CC(v78.n128_i64[0], v78.n128_u64[1]);
      uint64_t v81 = v150;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v150 + 48))(v80, 1, v65) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v80, v128);
        goto LABEL_14;
      }
      unint64_t v106 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 32);
      uint64_t v107 = v125;
      v106(v125, v80, v65);
      uint64_t v108 = &v158;
      goto LABEL_24;
    case 5:
      unint64_t v83 = v2[1];
      v158.n128_u64[0] = *v46;
      uint64_t v82 = v158.n128_u64[0];
      v158.n128_u64[1] = v83;
      uint64_t v65 = v155;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v158, &v159);
      __n128 v84 = v159;
      __n128 v158 = v159;
      sub_1C3F7E324(v82, v83);
      uint64_t v85 = type metadata accessor for WeakRef();
      uint64_t v86 = v154;
      sub_1C44749D8(v85, v154);
      sub_1C3F7E2CC(v84.n128_i64[0], v84.n128_u64[1]);
      uint64_t v87 = v153;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v153 + 48))(v86, 1, v65) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v86, v132);
LABEL_14:
        uint64_t v56 = v156;
        goto LABEL_15;
      }
      unint64_t v106 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 32);
      uint64_t v107 = v129;
      v106(v129, v86, v65);
      uint64_t v108 = (__n128 *)v160;
LABEL_24:
      v106((char *)v108[-16].n128_u64[0], (uint64_t)v107, v65);
      uint64_t v101 = swift_getAssociatedTypeWitness();
      uint64_t v56 = v156;
      goto LABEL_26;
    default:
      uint64_t v90 = v135;
      uint64_t v91 = v136;
      unint64_t v93 = v2[1];
      v158.n128_u64[0] = *v46;
      uint64_t v92 = v158.n128_u64[0];
      v158.n128_u64[1] = v93;
      uint64_t v94 = v139;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v158, &v159);
      __n128 v95 = v159;
      __n128 v158 = v159;
      sub_1C3F7E324(v92, v93);
      uint64_t v96 = type metadata accessor for WeakRef();
      uint64_t v97 = v138;
      sub_1C44749D8(v96, v138);
      sub_1C3F7E2CC(v95.n128_i64[0], v95.n128_u64[1]);
      uint64_t v98 = v137;
      int v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(v97, 1, v94);
      uint64_t v56 = v156;
      if (v99 == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v97, v133);
LABEL_15:
        uint64_t v88 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v56, 1, 1, v88);
      }
      else
      {
        __n128 v109 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 32);
        v109(v90, v97, v94);
        v109(v134, (uint64_t)v90, v94);
        uint64_t v101 = swift_getAssociatedTypeWitness();
LABEL_26:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v56, 0, 1, v101);
      }
  }
}

uint64_t sub_1C40D5D44(uint64_t a1, uint64_t a2)
{
  uint64_t v123 = a2;
  uint64_t v124 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v119 = (char *)&v103 - v4;
  uint64_t v118 = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_1C4497B38();
  MEMORY[0x1F4188790](v5 - 8);
  __n128 v117 = (char *)&v103 - v6;
  uint64_t v116 = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v115 = (char *)&v103 - v8;
  uint64_t v114 = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1C4497B38();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v113 = (char *)&v103 - v10;
  uint64_t v112 = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_1C4497B38();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v111 = (char *)&v103 - v12;
  uint64_t v110 = swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_1C4497B38();
  MEMORY[0x1F4188790](v13 - 8);
  __n128 v109 = (char *)&v103 - v14;
  uint64_t v108 = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_1C4497B38();
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v107 = (char *)&v103 - v16;
  swift_getAssociatedTypeWitness();
  uint64_t v17 = sub_1C4497B38();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v121 = v17;
  uint64_t v122 = v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  unint64_t v106 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v105 = (char *)&v103 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v104 = (char *)&v103 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v103 - v26;
  uint64_t v28 = MEMORY[0x1F4188790](v25);
  uint64_t v30 = (char *)&v103 - v29;
  uint64_t v31 = MEMORY[0x1F4188790](v28);
  uint64_t v33 = (char *)&v103 - v32;
  MEMORY[0x1F4188790](v31);
  uint64_t v35 = (char *)&v103 - v34;
  uint64_t v36 = v2;
  uint64_t v37 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v126.n128_u64[0] = v37;
  v126.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v127 = &protocol witness table for Int;
  uint64_t v128 = MEMORY[0x1E4FBB560];
  uint64_t v39 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v39, (uint64_t)&v129);
  switch(v129)
  {
    case 0:
      unint64_t v41 = v2[1];
      v125.n128_u64[0] = *v36;
      uint64_t v40 = v125.n128_u64[0];
      v125.n128_u64[1] = v41;
      uint64_t v42 = v108;
      uint64_t v43 = swift_getAssociatedConformanceWitness();
      __n128 v44 = WeakRef.init(id:)(&v125, &v126);
      __n128 v45 = v126;
      uint64_t v47 = v121;
      uint64_t v46 = v122;
      uint64_t v48 = v124;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v122 + 16))(v35, v124, v121, v44);
      sub_1C3F7E324(v40, v41);
      uint64_t v49 = v107;
      int v50 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v49, v50 ^ 1u, 1, v42);
      __n128 v125 = v45;
      uint64_t v51 = (uint64_t)v49;
      uint64_t v52 = v42;
      uint64_t v53 = v43;
      goto LABEL_6;
    case 1:
      unint64_t v66 = v2[1];
      v125.n128_u64[0] = *v36;
      uint64_t v65 = v125.n128_u64[0];
      v125.n128_u64[1] = v66;
      uint64_t v56 = v110;
      uint64_t v57 = swift_getAssociatedConformanceWitness();
      __n128 v67 = WeakRef.init(id:)(&v125, &v126);
      unint64_t v60 = v126.n128_u64[1];
      unint64_t v59 = v126.n128_u64[0];
      uint64_t v62 = v121;
      uint64_t v61 = v122;
      uint64_t v63 = v124;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v122 + 16))(v33, v124, v121, v67);
      sub_1C3F7E324(v65, v66);
      uint64_t v64 = (uint64_t)v109;
      goto LABEL_11;
    case 2:
      unint64_t v69 = v2[1];
      v125.n128_u64[0] = *v2;
      uint64_t v68 = v125.n128_u64[0];
      v125.n128_u64[1] = v69;
      uint64_t v70 = v112;
      uint64_t v71 = swift_getAssociatedConformanceWitness();
      __n128 v72 = WeakRef.init(id:)(&v125, &v126);
      __n128 v73 = v126;
      uint64_t v47 = v121;
      uint64_t v46 = v122;
      uint64_t v48 = v124;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v122 + 16))(v30, v124, v121, v72);
      sub_1C3F7E324(v68, v69);
      uint64_t v74 = v111;
      int v75 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v74, v75 ^ 1u, 1, v70);
      __n128 v125 = v73;
      uint64_t v51 = (uint64_t)v74;
      uint64_t v52 = v70;
      uint64_t v53 = v71;
LABEL_6:
      sub_1C4055840(v51, (uint64_t)&v125, v52, v53);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v48, v47);
    case 3:
      unint64_t v78 = v2[1];
      v125.n128_u64[0] = *v36;
      uint64_t v77 = v125.n128_u64[0];
      v125.n128_u64[1] = v78;
      uint64_t v79 = v114;
      uint64_t v80 = swift_getAssociatedConformanceWitness();
      __n128 v81 = WeakRef.init(id:)(&v125, &v126);
      __n128 v82 = v126;
      uint64_t v84 = v121;
      uint64_t v83 = v122;
      uint64_t v85 = v124;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v122 + 16))(v27, v124, v121, v81);
      sub_1C3F7E324(v77, v78);
      uint64_t v86 = (uint64_t)v113;
      int v87 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v86, v87 ^ 1u, 1, v79);
      __n128 v125 = v82;
      sub_1C4055840(v86, (uint64_t)&v125, v79, v80);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v83 + 8))(v85, v84);
    case 4:
      unint64_t v89 = v2[1];
      v125.n128_u64[0] = *v36;
      uint64_t v88 = v125.n128_u64[0];
      v125.n128_u64[1] = v89;
      uint64_t v90 = v116;
      uint64_t v91 = swift_getAssociatedConformanceWitness();
      __n128 v92 = WeakRef.init(id:)(&v125, &v126);
      __n128 v93 = v126;
      uint64_t v95 = v121;
      uint64_t v94 = v122;
      uint64_t v96 = v124;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v122 + 16))(v104, v124, v121, v92);
      sub_1C3F7E324(v88, v89);
      uint64_t v97 = (uint64_t)v115;
      int v98 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v97, v98 ^ 1u, 1, v90);
      __n128 v125 = v93;
      sub_1C4055840(v97, (uint64_t)&v125, v90, v91);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 8))(v96, v95);
    case 5:
      unint64_t v100 = v2[1];
      v125.n128_u64[0] = *v36;
      uint64_t v99 = v125.n128_u64[0];
      v125.n128_u64[1] = v100;
      uint64_t v56 = v118;
      uint64_t v57 = swift_getAssociatedConformanceWitness();
      __n128 v101 = WeakRef.init(id:)(&v125, &v126);
      unint64_t v60 = v126.n128_u64[1];
      unint64_t v59 = v126.n128_u64[0];
      uint64_t v62 = v121;
      uint64_t v61 = v122;
      uint64_t v63 = v124;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v122 + 16))(v105, v124, v121, v101);
      sub_1C3F7E324(v99, v100);
      uint64_t v64 = (uint64_t)v117;
      goto LABEL_11;
    default:
      unint64_t v55 = v2[1];
      v125.n128_u64[0] = *v36;
      uint64_t v54 = v125.n128_u64[0];
      v125.n128_u64[1] = v55;
      uint64_t v56 = AssociatedTypeWitness;
      uint64_t v57 = swift_getAssociatedConformanceWitness();
      __n128 v58 = WeakRef.init(id:)(&v125, &v126);
      unint64_t v60 = v126.n128_u64[1];
      unint64_t v59 = v126.n128_u64[0];
      uint64_t v62 = v121;
      uint64_t v61 = v122;
      uint64_t v63 = v124;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v122 + 16))(v106, v124, v121, v58);
      sub_1C3F7E324(v54, v55);
      uint64_t v64 = (uint64_t)v119;
LABEL_11:
      int v102 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v64, v102 ^ 1u, 1, v56);
      v125.n128_u64[0] = v59;
      v125.n128_u64[1] = v60;
      sub_1C4055840(v64, (uint64_t)&v125, v56, v57);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8))(v63, v62);
  }
}

uint64_t WeakTagged_6.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C40D4A28);
}

uint64_t sub_1C40D68F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for WeakTagged_6();
  swift_retain();
  sub_1C40F1F80(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_6, (uint64_t)&associated type descriptor for Tagged_6.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40D5D44);
  return swift_release();
}

uint64_t WeakTagged_6.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1F80(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_6, (uint64_t)&associated type descriptor for Tagged_6.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40D5D44);
  swift_release();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1C4497B38();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  return v5(a1, v4);
}

void (*WeakTagged_6.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_1C4497B38();
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_6.subscript.getter(a2, a3);
  return sub_1C40D6B54;
}

void sub_1C40D6B54(uint64_t **a1, char a2)
{
}

uint64_t WeakTagged_6.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C40D4A28);
}

uint64_t WeakTagged_6.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))WeakTagged_6.init(_:id:), a3);
}

uint64_t WeakTagged_6.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))WeakTagged_6.copy(renamingReferences:));
}

uint64_t WeakTagged_6.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t static WeakTagged_6.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_6);
}

uint64_t WeakTagged_6.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))WeakTagged_6.hash(into:));
}

uint64_t sub_1C40D6C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))WeakTagged_6.hash(into:));
}

uint64_t sub_1C40D6C58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_6.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t WeakTagged_6.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C40D6C84@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return WeakTagged_6.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t WeakTagged_6.init(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40D6CD4(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_6, 1, a4);
}

uint64_t sub_1C40D6CD4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void, uint64_t, uint64_t)@<X3>, int a5@<W4>, void *a6@<X8>)
{
  int v106 = a5;
  uint64_t v123 = a4;
  uint64_t v124 = a3;
  uint64_t v125 = a2;
  uint64_t v128 = a6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0560);
  MEMORY[0x1F4188790](v7 - 8);
  __n128 v117 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v114 = *(void *)(v116 - 8);
  MEMORY[0x1F4188790](v116);
  uint64_t v118 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1F4188790](v129);
  uint64_t v115 = (uint64_t)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v113 = (uint64_t)&v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v111 = (uint64_t)&v104 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v120 = (uint64_t)&v104 - v16;
  uint64_t v132 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v17 = MEMORY[0x1F4188790](v132);
  uint64_t v112 = (char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v121 = (uint64_t)&v104 - v19;
  uint64_t v20 = type metadata accessor for Proto_Value(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v130 = (uint64_t *)((char *)&v104 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v110 = (uint64_t)&v104 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v131 = (char *)&v104 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v28 = MEMORY[0x1F4188790](v27 - 8);
  uint64_t v127 = (uint64_t)&v104 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v122 = (uint64_t)&v104 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v104 - v33;
  MEMORY[0x1F4188790](v32);
  uint64_t v36 = (char *)&v104 - v35;
  unint64_t v133 = a1;
  uint64_t v37 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v37, (uint64_t)v36, &qword_1EBBC0540);
  uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v39 = v21 + 48;
  uint64_t v38 = v40;
  unsigned int v41 = v40(v36, 1, v20);
  sub_1C3F962E0((uint64_t)v36, &qword_1EBBC0540);
  if (v41 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v42 = 0xD000000000000017;
    *(void *)(v42 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v42 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v133;
  sub_1C3F970C4(v37, (uint64_t)v34, &qword_1EBBC0540);
  if (v38(v34, 1, v20) == 1)
  {
    __break(1u);
    goto LABEL_55;
  }
  __n128 v44 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v38;
  uint64_t v45 = (uint64_t)v131;
  sub_1C3F8ABD8((uint64_t)v34, (uint64_t)v131, type metadata accessor for Proto_Value);
  uint64_t v46 = *(void *)(v45 + *(int *)(v20 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v47 = v120;
  sub_1C3F970C4(v46, v120, &qword_1EBBBF8A0);
  uint64_t v48 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v49 = *(void *)(v48 - 8);
  int v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  uint64_t v107 = v49 + 48;
  unsigned int v51 = v50(v47, 1, v48);
  uint64_t v126 = v20;
  uint64_t v108 = v39;
  if (v51 == 1)
  {
    swift_retain();
    sub_1C3F962E0(v47, &qword_1EBBBF8A0);
    uint64_t v52 = v121;
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v52 = v121;
    if (EnumCaseMultiPayload == 11)
    {
      sub_1C3F8ABD8(v47, v121, type metadata accessor for Proto_TaggedValue);
      goto LABEL_12;
    }
    swift_retain();
    sub_1C3F8B0A8(v47, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v54 = *(int *)(v132 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)(v52 + v54) = qword_1EA39AF60;
LABEL_12:
  swift_retain();
  sub_1C3F8B0A8((uint64_t)v131, type metadata accessor for Proto_Value);
  uint64_t v55 = *(void *)(v52 + *(int *)(v132 + 20));
  swift_beginAccess();
  uint64_t v56 = *(void *)(v55 + 16);
  sub_1C3F8B0A8(v52, type metadata accessor for Proto_TaggedValue);
  unint64_t v134 = (uint64_t (*)(void, void, void))v56;
  uint64_t v57 = v123(0, v125, v124);
  __n128 v58 = (char *)v128 + *(int *)(v57 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v131 = v58;
  uint64_t v123 = (uint64_t (*)(void, uint64_t, uint64_t))AssociatedTypeWitness;
  uint64_t v61 = AssociatedTypeWitness;
  uint64_t v62 = AssociatedConformanceWitness;
  CRExtensible.init(rawValue:)((uint64_t)&v134, v61, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E4FBB560], v58);
  uint64_t v63 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  uint64_t v64 = v122;
  sub_1C3F970C4(v63, v122, &qword_1EBBC0540);
  uint64_t v65 = v126;
  if (v44(v64, 1, v126) == 1)
  {
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    JUMPOUT(0x1C40D7E90);
  }
  uint64_t v66 = v110;
  sub_1C3F8ABD8(v64, v110, type metadata accessor for Proto_Value);
  uint64_t v67 = *(void *)(v66 + *(int *)(v65 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v68 = v67;
  uint64_t v69 = v111;
  sub_1C3F970C4(v68, v111, &qword_1EBBBF8A0);
  unsigned int v70 = v50(v69, 1, v48);
  uint64_t v71 = (uint64_t)v130;
  uint64_t v72 = (uint64_t)v112;
  uint64_t v105 = v50;
  if (v70 == 1)
  {
    sub_1C3F962E0(v69, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      uint64_t v73 = v62;
      sub_1C3F8ABD8(v69, v72, type metadata accessor for Proto_TaggedValue);
      goto LABEL_21;
    }
    sub_1C3F8B0A8(v69, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  uint64_t v73 = v62;
  sub_1C4496888();
  uint64_t v74 = *(int *)(v132 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)(v72 + v74) = qword_1EA39AF60;
  swift_retain();
LABEL_21:
  unint64_t v75 = v133;
  sub_1C3F8B0A8(v66, type metadata accessor for Proto_Value);
  uint64_t v76 = *(void *)(v72 + *(int *)(v132 + 20))
      + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  uint64_t v77 = v127;
  sub_1C3F970C4(v76, v127, &qword_1EBBC0540);
  uint64_t v78 = v126;
  if (v44(v77, 1, v126) == 1)
  {
    sub_1C4496888();
    uint64_t v79 = *(int *)(v78 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)(v71 + v79) = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0(v127, &qword_1EBBC0540);
    uint64_t v78 = v126;
  }
  else
  {
    sub_1C3F8ABD8(v77, v71, type metadata accessor for Proto_Value);
  }
  unint64_t v80 = v75;
  sub_1C3F8B0A8(v72, type metadata accessor for Proto_TaggedValue);
  uint64_t v81 = *(void *)(v71 + *(int *)(v78 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v82 = v81;
  uint64_t v83 = v113;
  sub_1C3F970C4(v82, v113, &qword_1EBBBF8A0);
  uint64_t v84 = v73;
  if (v105(v83, 1, v48) == 1)
  {
    sub_1C3F962E0(v83, &qword_1EBBBF8A0);
    uint64_t v86 = (uint64_t)v117;
    uint64_t v85 = v118;
    uint64_t v88 = v115;
    uint64_t v87 = v116;
    uint64_t v89 = v114;
LABEL_31:
    sub_1C4496888();
    uint64_t v91 = *(int *)(v129 + 20);
    if (qword_1EBBBC818 != -1) {
      swift_once();
    }
    *(void *)(v88 + v91) = qword_1EBBBC808;
    swift_retain();
    goto LABEL_34;
  }
  int v90 = swift_getEnumCaseMultiPayload();
  uint64_t v86 = (uint64_t)v117;
  uint64_t v85 = v118;
  uint64_t v89 = v114;
  if (v90 != 7)
  {
    sub_1C3F8B0A8(v83, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    uint64_t v88 = v115;
    uint64_t v87 = v116;
    goto LABEL_31;
  }
  uint64_t v88 = v115;
  sub_1C3F8ABD8(v83, v115, type metadata accessor for Proto_Reference);
  uint64_t v87 = v116;
LABEL_34:
  sub_1C3F8B0A8((uint64_t)v130, type metadata accessor for Proto_Value);
  uint64_t v92 = *(void *)(v88 + *(int *)(v129 + 20))
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  sub_1C3F970C4(v92, v86, &qword_1EBBC0560);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v86, 1, v87) == 1)
  {
    *uint64_t v85 = MEMORY[0x1E4FBC860];
    v85[1] = sub_1C4496868();
    v85[2] = v93;
    sub_1C4496888();
    sub_1C3F962E0(v86, &qword_1EBBC0560);
  }
  else
  {
    sub_1C3F8ABD8(v86, (uint64_t)v85, type metadata accessor for Proto_KeyPath);
  }
  uint64_t v94 = v119;
  sub_1C3F8B0A8(v88, type metadata accessor for Proto_Reference);
  swift_retain();
  sub_1C3F766DC((uint64_t)v85, (uint64_t *)&v134);
  if (v94)
  {
    swift_release();
    swift_setDeallocating();
    swift_release();
    unint64_t v134 = v123;
    unint64_t v135 = v84;
    uint64_t v136 = &protocol witness table for Int;
    uint64_t v137 = MEMORY[0x1E4FBB560];
    uint64_t v103 = type metadata accessor for CRExtensible();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v103 - 8) + 8))(v131, v103);
  }
  else
  {
    uint64_t v96 = (uint64_t)v134;
    unint64_t v95 = v135;
    uint64_t v97 = v128;
    *uint64_t v128 = v134;
    v97[1] = v95;
    sub_1C3F7E324(v96, v95);
    unint64_t v134 = v123;
    unint64_t v135 = v84;
    uint64_t v136 = &protocol witness table for Int;
    uint64_t v137 = MEMORY[0x1E4FBB560];
    uint64_t v98 = type metadata accessor for CRExtensible();
    CRExtensible.rawValue.getter(v98, (uint64_t)&v138);
    uint64_t v121 = v84;
    unint64_t v133 = v95;
    switch(v138)
    {
      case 0:
        uint64_t v99 = *(void **)(v80 + 16);
        if (v99) {
          goto LABEL_53;
        }
        goto LABEL_56;
      case 1:
        uint64_t v99 = *(void **)(v80 + 16);
        if (v99) {
          goto LABEL_53;
        }
        goto LABEL_57;
      case 2:
        uint64_t v99 = *(void **)(v80 + 16);
        if (v99) {
          goto LABEL_53;
        }
        goto LABEL_58;
      case 3:
        uint64_t v99 = *(void **)(v80 + 16);
        if (v99) {
          goto LABEL_53;
        }
        goto LABEL_59;
      case 4:
        uint64_t v99 = *(void **)(v80 + 16);
        if (v99) {
          goto LABEL_53;
        }
        goto LABEL_60;
      case 5:
        uint64_t v99 = *(void **)(v80 + 16);
        if (v99) {
          goto LABEL_53;
        }
        goto LABEL_61;
      default:
        uint64_t v99 = *(void **)(v80 + 16);
        if (!v99) {
          goto LABEL_62;
        }
LABEL_53:
        uint64_t v100 = swift_getAssociatedTypeWitness();
        unint64_t v134 = (uint64_t (*)(void, void, void))v96;
        unint64_t v135 = v133;
        __n128 v101 = (uint64_t *)(*v99 + 176);
        uint64_t v132 = *v101;
        uint64_t v130 = v101;
        uint64_t v102 = swift_getAssociatedConformanceWitness();
        swift_retain();
        ((void (*)(uint64_t, uint64_t (**)(void, void, void), unint64_t, void, uint64_t, uint64_t))v132)(v100, &v134, v80, v106 & 1, v100, v102);
        swift_release();
        swift_release();
        swift_release();
        uint64_t result = sub_1C3F7E2CC(v96, v133);
        break;
    }
  }
  return result;
}

uint64_t sub_1C40D7EA8(uint64_t a1, uint64_t a2)
{
  return WeakTagged_6.encode(to:)(a1, a2);
}

uint64_t WeakTagged_6.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C40C5014(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_6, (uint64_t)&associated type descriptor for Tagged_6.Enum, (uint64_t)&associated conformance descriptor for Tagged_6.Tagged_6.Enum: RawRepresentable);
}

uint64_t (*WeakTagged_7.id.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_7.tag.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C40EA434(a1, a2);
}

uint64_t WeakTagged_7.tag.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C40EA528(a1, a2);
}

uint64_t (*WeakTagged_7.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_7.init(_:identity:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_7.init(_:id:));
}

{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_7.init(_:id:));
}

uint64_t WeakTagged_7.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1C40EA66C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_7, a5);
}

{
  return sub_1C40EA7CC(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_7, a5);
}

uint64_t WeakTagged_7.init(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for SharedTagged_7() + 36);
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for WeakTagged_7() + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v4, v3, v5);
}

uint64_t WeakTagged_7.tagged1.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  else
  {
    uint64_t v8 = *v1;
    unint64_t v9 = v2[1];
    v10.n128_u64[0] = v8;
    v10.n128_u64[1] = v9;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v6 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t WeakTagged_7.tagged2.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 1)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_7.tagged3.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 2)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_7.tagged4.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 3)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_7.tagged5.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 4)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_7.tagged6.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 5)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_7.tagged7.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 6)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_7.unknown.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] < 2)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  else
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_7.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v198 = a3;
  uint64_t v199 = a4;
  uint64_t v197 = a1;
  uint64_t v200 = a5;
  uint64_t v6 = *(char **)(a2 + 16);
  unint64_t v7 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v174 = sub_1C4497B38();
  uint64_t v173 = *(void *)(v174 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v174);
  uint64_t v193 = AssociatedTypeWitness;
  uint64_t v194 = (char *)&v143 - v10;
  uint64_t v192 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  __n128 v172 = (char *)&v143 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v171 = (char *)&v143 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v170 = sub_1C4497B38();
  uint64_t v169 = *(void *)(v170 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v170);
  __n128 v190 = (char *)&v143 - v16;
  uint64_t v191 = v14;
  uint64_t v189 = *(void *)(v14 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v168 = (char *)&v143 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v167 = (char *)&v143 - v19;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v166 = sub_1C4497B38();
  uint64_t v165 = *(void *)(v166 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v166);
  uint64_t v187 = (char *)&v143 - v22;
  uint64_t v188 = v20;
  uint64_t v186 = *(void *)(v20 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v164 = (char *)&v143 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v163 = (char *)&v143 - v25;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v162 = sub_1C4497B38();
  uint64_t v161 = *(void *)(v162 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v162);
  uint64_t v185 = (char *)&v143 - v28;
  v195 = (void (*)(__n128 *, void, uint64_t, uint64_t, uint64_t))v26;
  uint64_t v184 = *(void *)(v26 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v160 = (char *)&v143 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  __n128 v159 = (char *)&v143 - v31;
  uint64_t v32 = swift_getAssociatedTypeWitness();
  uint64_t v158 = sub_1C4497B38();
  uint64_t v157 = *(void *)(v158 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v158);
  uint64_t v182 = (char *)&v143 - v34;
  uint64_t v183 = v32;
  uint64_t v181 = *(void *)(v32 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v156 = (char *)&v143 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  uint64_t v155 = (char *)&v143 - v37;
  uint64_t v38 = swift_getAssociatedTypeWitness();
  uint64_t v154 = sub_1C4497B38();
  uint64_t v153 = *(void *)(v154 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v154);
  uint64_t v179 = (char *)&v143 - v40;
  uint64_t v180 = v38;
  uint64_t v178 = *(void *)(v38 - 8);
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v152 = (char *)&v143 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v41);
  uint64_t v151 = (char *)&v143 - v43;
  uint64_t v44 = swift_getAssociatedTypeWitness();
  uint64_t v150 = sub_1C4497B38();
  uint64_t v149 = *(void *)(v150 - 8);
  uint64_t v45 = MEMORY[0x1F4188790](v150);
  uint64_t v177 = (char *)&v143 - v46;
  uint64_t v176 = *(void *)(v44 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v148 = (char *)&v143 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v47);
  uint64_t v147 = (char *)&v143 - v49;
  uint64_t v50 = swift_getAssociatedTypeWitness();
  uint64_t v146 = sub_1C4497B38();
  uint64_t v145 = *(void *)(v146 - 8);
  uint64_t v51 = MEMORY[0x1F4188790](v146);
  v196 = (char *)&v143 - v52;
  uint64_t v175 = *(void *)(v50 - 8);
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  uint64_t v144 = (char *)&v143 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v53);
  uint64_t v56 = (char *)&v143 - v55;
  uint64_t v57 = v5;
  uint64_t v58 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v202.n128_u64[0] = v58;
  v202.n128_u64[1] = AssociatedConformanceWitness;
  v203 = &protocol witness table for Int;
  uint64_t v204 = MEMORY[0x1E4FBB560];
  uint64_t v60 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v60, (uint64_t)&v205);
  switch(v205)
  {
    case 0:
      unint64_t v61 = v5[1];
      v201.n128_u64[0] = *v57;
      v201.n128_u64[1] = v61;
      uint64_t v62 = v201.n128_u64[0];
      v195 = v7;
      uint64_t v63 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v201, &v202);
      __n128 v64 = v202;
      __n128 v201 = v202;
      uint64_t v65 = v199;
      uint64_t v194 = *(char **)(v199 + 16);
      sub_1C3F7E324(v62, v61);
      uint64_t v66 = v196;
      ((void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v194)(&v201, v50, v63, v198, v65);
      sub_1C3F7E2CC(v64.n128_i64[0], v64.n128_u64[1]);
      uint64_t v67 = v175;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v175 + 48))(v66, 1, v50) == 1)
      {
        (*(void (**)(char *, uint64_t))(v145 + 8))(v66, v146);
        goto LABEL_18;
      }
      uint64_t v127 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
      v127(v56, v66, v50);
      v127(v144, v56, v50);
      uint64_t v128 = swift_getAssociatedTypeWitness();
      uint64_t v129 = v200;
      goto LABEL_28;
    case 1:
      unint64_t v78 = v5[1];
      v201.n128_u64[0] = *v57;
      uint64_t v77 = v201.n128_u64[0];
      v201.n128_u64[1] = v78;
      v195 = v7;
      v196 = v6;
      uint64_t v79 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v201, &v202);
      __n128 v80 = v202;
      __n128 v201 = v202;
      uint64_t v81 = v199;
      uint64_t v82 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v199 + 16);
      sub_1C3F7E324(v77, v78);
      uint64_t v83 = v177;
      v82(&v201, v44, v79, v198, v81);
      sub_1C3F7E2CC(v80.n128_i64[0], v80.n128_u64[1]);
      uint64_t v84 = v176;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v176 + 48))(v83, 1, v44) == 1)
      {
        (*(void (**)(char *, uint64_t))(v149 + 8))(v83, v150);
        goto LABEL_18;
      }
      unint64_t v133 = v83;
      unint64_t v134 = *(void (**)(char *, char *, uint64_t))(v84 + 32);
      unint64_t v135 = v147;
      v134(v147, v133, v44);
      v134(v148, v135, v44);
      uint64_t v128 = swift_getAssociatedTypeWitness();
      uint64_t v129 = v200;
      goto LABEL_28;
    case 2:
      unint64_t v86 = v5[1];
      v201.n128_u64[0] = *v57;
      uint64_t v85 = v201.n128_u64[0];
      v201.n128_u64[1] = v86;
      v195 = v7;
      v196 = v6;
      uint64_t v87 = (void (*)(void, void, void, void, void))v180;
      uint64_t v88 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v201, &v202);
      __n128 v89 = v202;
      __n128 v201 = v202;
      uint64_t v90 = v199;
      uint64_t v91 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(v199 + 16);
      sub_1C3F7E324(v85, v86);
      uint64_t v92 = v179;
      v91(&v201, v87, v88, v198, v90);
      sub_1C3F7E2CC(v89.n128_i64[0], v89.n128_u64[1]);
      uint64_t v93 = v178;
      if ((*(unsigned int (**)(char *, uint64_t, void (*)(void, void, void, void, void)))(v178 + 48))(v92, 1, v87) == 1)
      {
        (*(void (**)(char *, uint64_t))(v153 + 8))(v92, v154);
        goto LABEL_18;
      }
      uint64_t v136 = v92;
      uint64_t v130 = *(void (**)(void, void, void))(v93 + 32);
      uint64_t v131 = v151;
      v130(v151, v136, v87);
      uint64_t v132 = (unint64_t *)&v184;
      goto LABEL_27;
    case 3:
      unint64_t v95 = v5[1];
      v201.n128_u64[0] = *v57;
      uint64_t v94 = v201.n128_u64[0];
      v201.n128_u64[1] = v95;
      v196 = v6;
      uint64_t v87 = (void (*)(void, void, void, void, void))v183;
      uint64_t v96 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v201, &v202);
      __n128 v97 = v202;
      __n128 v201 = v202;
      uint64_t v98 = v199;
      v195 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(v199 + 16);
      sub_1C3F7E324(v94, v95);
      uint64_t v99 = v182;
      v195(&v201, v87, v96, v198, v98);
      sub_1C3F7E2CC(v97.n128_i64[0], v97.n128_u64[1]);
      uint64_t v100 = v181;
      if ((*(unsigned int (**)(char *, uint64_t, void (*)(void, void, void, void, void)))(v181 + 48))(v99, 1, v87) == 1)
      {
        (*(void (**)(char *, uint64_t))(v157 + 8))(v99, v158);
        goto LABEL_18;
      }
      uint64_t v137 = v99;
      uint64_t v130 = *(void (**)(void, void, void))(v100 + 32);
      uint64_t v131 = v155;
      v130(v155, v137, v87);
      uint64_t v132 = (unint64_t *)&v188;
      goto LABEL_27;
    case 4:
      unint64_t v102 = v5[1];
      v201.n128_u64[0] = *v57;
      uint64_t v101 = v201.n128_u64[0];
      v201.n128_u64[1] = v102;
      v196 = v6;
      uint64_t v87 = (void (*)(void, void, void, void, void))v195;
      uint64_t v103 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v201, &v202);
      __n128 v104 = v202;
      __n128 v201 = v202;
      uint64_t v105 = v199;
      uint64_t v194 = *(char **)(v199 + 16);
      sub_1C3F7E324(v101, v102);
      int v106 = v185;
      ((void (*)(__n128 *, void, uint64_t, uint64_t, uint64_t))v194)(&v201, v87, v103, v198, v105);
      sub_1C3F7E2CC(v104.n128_i64[0], v104.n128_u64[1]);
      uint64_t v107 = v184;
      if ((*(unsigned int (**)(char *, uint64_t, void (*)(void, void, void, void, void)))(v184 + 48))(v106, 1, v87) == 1)
      {
        (*(void (**)(char *, uint64_t))(v161 + 8))(v106, v162);
        goto LABEL_18;
      }
      uint64_t v138 = v106;
      uint64_t v130 = *(void (**)(void, void, void))(v107 + 32);
      uint64_t v131 = v159;
      v130(v159, v138, v87);
      uint64_t v132 = (unint64_t *)&v192;
      goto LABEL_27;
    case 5:
      unint64_t v109 = v5[1];
      v201.n128_u64[0] = *v57;
      uint64_t v108 = v201.n128_u64[0];
      v201.n128_u64[1] = v109;
      v195 = v7;
      v196 = v6;
      uint64_t v110 = v188;
      uint64_t v111 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v201, &v202);
      __n128 v112 = v202;
      __n128 v201 = v202;
      uint64_t v113 = v199;
      uint64_t v114 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v199 + 16);
      sub_1C3F7E324(v108, v109);
      uint64_t v115 = v187;
      v114(&v201, v110, v111, v198, v113);
      sub_1C3F7E2CC(v112.n128_i64[0], v112.n128_u64[1]);
      uint64_t v116 = v186;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v186 + 48))(v115, 1, v110) == 1)
      {
        (*(void (**)(char *, uint64_t))(v165 + 8))(v115, v166);
        goto LABEL_18;
      }
      uint64_t v139 = v115;
      uint64_t v140 = *(void (**)(char *, char *, uint64_t))(v116 + 32);
      uint64_t v141 = v163;
      v140(v163, v139, v110);
      v140(v164, v141, v110);
      uint64_t v128 = swift_getAssociatedTypeWitness();
      uint64_t v129 = v200;
      goto LABEL_28;
    case 6:
      unint64_t v118 = v5[1];
      v201.n128_u64[0] = *v57;
      uint64_t v117 = v201.n128_u64[0];
      v201.n128_u64[1] = v118;
      v195 = v7;
      v196 = v6;
      uint64_t v87 = (void (*)(void, void, void, void, void))v191;
      uint64_t v119 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v201, &v202);
      __n128 v120 = v202;
      __n128 v201 = v202;
      uint64_t v121 = v199;
      uint64_t v122 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(v199 + 16);
      sub_1C3F7E324(v117, v118);
      uint64_t v123 = v190;
      v122(&v201, v87, v119, v198, v121);
      sub_1C3F7E2CC(v120.n128_i64[0], v120.n128_u64[1]);
      uint64_t v124 = v189;
      if ((*(unsigned int (**)(char *, uint64_t, void (*)(void, void, void, void, void)))(v189 + 48))(v123, 1, v87) == 1)
      {
        (*(void (**)(char *, uint64_t))(v169 + 8))(v123, v170);
        goto LABEL_18;
      }
      uint64_t v142 = v123;
      uint64_t v130 = *(void (**)(void, void, void))(v124 + 32);
      uint64_t v131 = v167;
      v130(v167, v142, v87);
      uint64_t v132 = (unint64_t *)&v200;
      goto LABEL_27;
    default:
      unint64_t v69 = v5[1];
      v201.n128_u64[0] = *v57;
      uint64_t v68 = v201.n128_u64[0];
      v201.n128_u64[1] = v69;
      v195 = v7;
      v196 = v6;
      uint64_t v70 = v193;
      uint64_t v71 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v201, &v202);
      __n128 v72 = v202;
      __n128 v201 = v202;
      uint64_t v73 = v199;
      uint64_t v74 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v199 + 16);
      sub_1C3F7E324(v68, v69);
      unint64_t v75 = v194;
      v74(&v201, v70, v71, v198, v73);
      sub_1C3F7E2CC(v72.n128_i64[0], v72.n128_u64[1]);
      uint64_t v76 = v192;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v192 + 48))(v75, 1, v70) == 1)
      {
        (*(void (**)(char *, uint64_t))(v173 + 8))(v194, v174);
LABEL_18:
        uint64_t v125 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v125 - 8) + 56))(v200, 1, 1, v125);
      }
      else
      {
        uint64_t v130 = *(void (**)(void, void, void))(v76 + 32);
        uint64_t v131 = v171;
        uint64_t v87 = (void (*)(void, void, void, void, void))v193;
        v130(v171, v194, v193);
        uint64_t v132 = &v202.n128_u64[1];
LABEL_27:
        v130(*(v132 - 32), v131, v87);
        uint64_t v128 = swift_getAssociatedTypeWitness();
        uint64_t v129 = v200;
LABEL_28:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v128 - 8) + 56))(v129, 0, 1, v128);
      }
  }
}

uint64_t sub_1C40DA050@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v173[1] = a1;
  uint64_t v174 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v151 = sub_1C4497B38();
  uint64_t v149 = *(void *)(v151 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v151);
  uint64_t v172 = (uint64_t)&v120 - v5;
  v173[0] = AssociatedTypeWitness;
  uint64_t v171 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v150 = (char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v148 = (char *)&v120 - v8;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v147 = sub_1C4497B38();
  uint64_t v146 = *(void *)(v147 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v147);
  uint64_t v169 = (uint64_t)&v120 - v11;
  uint64_t v170 = v9;
  uint64_t v168 = *(void *)(v9 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v145 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v144 = (char *)&v120 - v14;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v143 = sub_1C4497B38();
  uint64_t v142 = *(void *)(v143 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v143);
  uint64_t v166 = (uint64_t)&v120 - v17;
  uint64_t v167 = v15;
  uint64_t v165 = *(void *)(v15 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v141 = (char *)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v140 = (char *)&v120 - v20;
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v139 = sub_1C4497B38();
  uint64_t v138 = *(void *)(v139 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v139);
  uint64_t v163 = (uint64_t)&v120 - v23;
  uint64_t v164 = v21;
  uint64_t v162 = *(void *)(v21 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v137 = (char *)&v120 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v136 = (char *)&v120 - v26;
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v135 = sub_1C4497B38();
  uint64_t v134 = *(void *)(v135 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v135);
  uint64_t v160 = (uint64_t)&v120 - v29;
  uint64_t v161 = v27;
  uint64_t v159 = *(void *)(v27 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  unint64_t v133 = (char *)&v120 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v132 = (char *)&v120 - v32;
  uint64_t v33 = swift_getAssociatedTypeWitness();
  uint64_t v131 = sub_1C4497B38();
  uint64_t v130 = *(void *)(v131 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v131);
  uint64_t v157 = (uint64_t)&v120 - v35;
  uint64_t v158 = v33;
  uint64_t v156 = *(void *)(v33 - 8);
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v129 = (char *)&v120 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  uint64_t v128 = (char *)&v120 - v38;
  uint64_t v39 = swift_getAssociatedTypeWitness();
  uint64_t v127 = sub_1C4497B38();
  uint64_t v126 = *(void *)(v127 - 8);
  uint64_t v40 = MEMORY[0x1F4188790](v127);
  uint64_t v155 = (uint64_t)&v120 - v41;
  uint64_t v154 = *(void *)(v39 - 8);
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  uint64_t v125 = (char *)&v120 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v42);
  uint64_t v124 = (char *)&v120 - v44;
  uint64_t v45 = swift_getAssociatedTypeWitness();
  uint64_t v123 = sub_1C4497B38();
  uint64_t v122 = *(void *)(v123 - 8);
  uint64_t v46 = MEMORY[0x1F4188790](v123);
  uint64_t v153 = (uint64_t)&v120 - v47;
  uint64_t v152 = *(void *)(v45 - 8);
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  uint64_t v121 = (char *)&v120 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v48);
  uint64_t v51 = (char *)&v120 - v50;
  uint64_t v52 = (unint64_t *)v2;
  uint64_t v53 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v176.n128_u64[0] = v53;
  v176.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v177 = &protocol witness table for Int;
  uint64_t v178 = MEMORY[0x1E4FBB560];
  uint64_t v55 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v55, (uint64_t)&v179);
  switch(v179)
  {
    case 0:
      unint64_t v56 = v2[1];
      v175.n128_u64[0] = *v52;
      uint64_t v57 = v175.n128_u64[0];
      v175.n128_u64[1] = v56;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v175, &v176);
      __n128 v58 = v176;
      __n128 v175 = v176;
      sub_1C3F7E324(v57, v56);
      uint64_t v59 = type metadata accessor for WeakRef();
      uint64_t v60 = v153;
      sub_1C44749D8(v59, v153);
      sub_1C3F7E2CC(v58.n128_i64[0], v58.n128_u64[1]);
      uint64_t v61 = v152;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48))(v60, 1, v45) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v60, v123);
        goto LABEL_18;
      }
      uint64_t v108 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 32);
      v108(v51, v60, v45);
      v108(v121, (uint64_t)v51, v45);
      uint64_t v109 = swift_getAssociatedTypeWitness();
      uint64_t v110 = v174;
      goto LABEL_28;
    case 1:
      uint64_t v69 = *v2;
      unint64_t v70 = v2[1];
      v175.n128_u64[0] = v69;
      v175.n128_u64[1] = v70;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v175, &v176);
      __n128 v71 = v176;
      __n128 v175 = v176;
      sub_1C3F7E324(v69, v70);
      uint64_t v72 = type metadata accessor for WeakRef();
      uint64_t v73 = v155;
      sub_1C44749D8(v72, v155);
      sub_1C3F7E2CC(v71.n128_i64[0], v71.n128_u64[1]);
      uint64_t v74 = v154;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v154 + 48))(v73, 1, v39) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v73, v127);
        goto LABEL_18;
      }
      uint64_t v114 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 32);
      uint64_t v115 = v124;
      v114(v124, v73, v39);
      v114(v125, (uint64_t)v115, v39);
      uint64_t v109 = swift_getAssociatedTypeWitness();
      uint64_t v110 = v174;
      goto LABEL_28;
    case 2:
      unint64_t v76 = v2[1];
      v175.n128_u64[0] = *v2;
      uint64_t v75 = v175.n128_u64[0];
      v175.n128_u64[1] = v76;
      uint64_t v77 = v158;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v175, &v176);
      __n128 v78 = v176;
      __n128 v175 = v176;
      sub_1C3F7E324(v75, v76);
      uint64_t v79 = type metadata accessor for WeakRef();
      uint64_t v80 = v157;
      sub_1C44749D8(v79, v157);
      sub_1C3F7E2CC(v78.n128_i64[0], v78.n128_u64[1]);
      uint64_t v81 = v156;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v156 + 48))(v80, 1, v77) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v80, v131);
        goto LABEL_18;
      }
      uint64_t v116 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 32);
      uint64_t v117 = v128;
      v116(v128, v80, v77);
      v116(v129, (uint64_t)v117, v77);
      uint64_t v118 = swift_getAssociatedTypeWitness();
      uint64_t v119 = v174;
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v118 - 8) + 56))(v119, 0, 1, v118);
    case 3:
      unint64_t v82 = v2[1];
      v175.n128_u64[0] = *v52;
      uint64_t v83 = v175.n128_u64[0];
      v175.n128_u64[1] = v82;
      uint64_t v64 = v161;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v175, &v176);
      __n128 v84 = v176;
      __n128 v175 = v176;
      sub_1C3F7E324(v83, v82);
      uint64_t v85 = type metadata accessor for WeakRef();
      uint64_t v86 = v160;
      sub_1C44749D8(v85, v160);
      sub_1C3F7E2CC(v84.n128_i64[0], v84.n128_u64[1]);
      uint64_t v87 = v159;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v159 + 48))(v86, 1, v64) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v86, v135);
        goto LABEL_18;
      }
      uint64_t v111 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 32);
      __n128 v112 = v132;
      v111(v132, v86, v64);
      uint64_t v113 = &v165;
      goto LABEL_27;
    case 4:
      unint64_t v88 = v2[1];
      v175.n128_u64[0] = *v52;
      uint64_t v89 = v175.n128_u64[0];
      v175.n128_u64[1] = v88;
      uint64_t v64 = v164;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v175, &v176);
      __n128 v90 = v176;
      __n128 v175 = v176;
      sub_1C3F7E324(v89, v88);
      uint64_t v91 = type metadata accessor for WeakRef();
      uint64_t v92 = v163;
      sub_1C44749D8(v91, v163);
      sub_1C3F7E2CC(v90.n128_i64[0], v90.n128_u64[1]);
      uint64_t v93 = v162;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v162 + 48))(v92, 1, v64) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v92, v139);
        goto LABEL_18;
      }
      uint64_t v111 = *(void (**)(char *, uint64_t, uint64_t))(v93 + 32);
      __n128 v112 = v136;
      v111(v136, v92, v64);
      uint64_t v113 = &v169;
      goto LABEL_27;
    case 5:
      unint64_t v94 = v2[1];
      v175.n128_u64[0] = *v52;
      uint64_t v95 = v175.n128_u64[0];
      v175.n128_u64[1] = v94;
      uint64_t v64 = v167;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v175, &v176);
      __n128 v96 = v176;
      __n128 v175 = v176;
      sub_1C3F7E324(v95, v94);
      uint64_t v97 = type metadata accessor for WeakRef();
      uint64_t v98 = v166;
      sub_1C44749D8(v97, v166);
      sub_1C3F7E2CC(v96.n128_i64[0], v96.n128_u64[1]);
      uint64_t v99 = v165;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v165 + 48))(v98, 1, v64) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v98, v143);
        goto LABEL_18;
      }
      uint64_t v111 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 32);
      __n128 v112 = v140;
      v111(v140, v98, v64);
      uint64_t v113 = v173;
      goto LABEL_27;
    case 6:
      unint64_t v100 = v2[1];
      v175.n128_u64[0] = *v52;
      uint64_t v101 = v175.n128_u64[0];
      v175.n128_u64[1] = v100;
      uint64_t v64 = v170;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v175, &v176);
      __n128 v102 = v176;
      __n128 v175 = v176;
      sub_1C3F7E324(v101, v100);
      uint64_t v103 = type metadata accessor for WeakRef();
      uint64_t v104 = v169;
      sub_1C44749D8(v103, v169);
      sub_1C3F7E2CC(v102.n128_i64[0], v102.n128_u64[1]);
      uint64_t v105 = v168;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v168 + 48))(v104, 1, v64) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v104, v147);
        goto LABEL_18;
      }
      uint64_t v111 = *(void (**)(char *, uint64_t, uint64_t))(v105 + 32);
      __n128 v112 = v144;
      v111(v144, v104, v64);
      uint64_t v113 = &v175.n128_i64[1];
      goto LABEL_27;
    default:
      unint64_t v62 = v2[1];
      v175.n128_u64[0] = *v52;
      uint64_t v63 = v175.n128_u64[0];
      v175.n128_u64[1] = v62;
      uint64_t v64 = v173[0];
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v175, &v176);
      __n128 v65 = v176;
      __n128 v175 = v176;
      sub_1C3F7E324(v63, v62);
      uint64_t v66 = type metadata accessor for WeakRef();
      uint64_t v67 = v172;
      sub_1C44749D8(v66, v172);
      sub_1C3F7E2CC(v65.n128_i64[0], v65.n128_u64[1]);
      uint64_t v68 = v171;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v171 + 48))(v67, 1, v64) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v67, v151);
LABEL_18:
        uint64_t v106 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v106 - 8) + 56))(v174, 1, 1, v106);
      }
      else
      {
        uint64_t v111 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 32);
        __n128 v112 = v148;
        v111(v148, v67, v64);
        uint64_t v113 = &v179;
LABEL_27:
        v111((char *)*(v113 - 32), (uint64_t)v112, v64);
        uint64_t v109 = swift_getAssociatedTypeWitness();
        uint64_t v110 = v174;
LABEL_28:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v109 - 8) + 56))(v110, 0, 1, v109);
      }
  }
}

uint64_t sub_1C40DB5F8(uint64_t a1, uint64_t a2)
{
  uint64_t v130 = a2;
  uint64_t v131 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v126 = (char *)&v108 - v4;
  uint64_t v125 = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_1C4497B38();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v124 = (char *)&v108 - v6;
  uint64_t v123 = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v122 = (char *)&v108 - v8;
  uint64_t v121 = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1C4497B38();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v120 = (char *)&v108 - v10;
  uint64_t v119 = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_1C4497B38();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v118 = (char *)&v108 - v12;
  uint64_t v117 = swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_1C4497B38();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v116 = (char *)&v108 - v14;
  uint64_t v115 = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_1C4497B38();
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v114 = (char *)&v108 - v16;
  uint64_t v113 = swift_getAssociatedTypeWitness();
  uint64_t v17 = sub_1C4497B38();
  MEMORY[0x1F4188790](v17 - 8);
  __n128 v112 = (char *)&v108 - v18;
  swift_getAssociatedTypeWitness();
  uint64_t v19 = sub_1C4497B38();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v128 = v19;
  uint64_t v129 = v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v111 = (char *)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v110 = (char *)&v108 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v109 = (char *)&v108 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v108 = (char *)&v108 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v108 - v30;
  uint64_t v32 = MEMORY[0x1F4188790](v29);
  uint64_t v34 = (char *)&v108 - v33;
  uint64_t v35 = MEMORY[0x1F4188790](v32);
  uint64_t v37 = (char *)&v108 - v36;
  MEMORY[0x1F4188790](v35);
  uint64_t v39 = (char *)&v108 - v38;
  uint64_t v40 = v2;
  uint64_t v41 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v133.n128_u64[0] = v41;
  v133.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v134 = &protocol witness table for Int;
  uint64_t v135 = MEMORY[0x1E4FBB560];
  uint64_t v43 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v43, (uint64_t)&v136);
  switch(v136)
  {
    case 0:
      unint64_t v45 = v2[1];
      v132.n128_u64[0] = *v40;
      uint64_t v44 = v132.n128_u64[0];
      v132.n128_u64[1] = v45;
      uint64_t v46 = v113;
      uint64_t v47 = swift_getAssociatedConformanceWitness();
      __n128 v48 = WeakRef.init(id:)(&v132, &v133);
      __n128 v49 = v133;
      uint64_t v51 = v128;
      uint64_t v50 = v129;
      uint64_t v52 = v131;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v129 + 16))(v39, v131, v128, v48);
      sub_1C3F7E324(v44, v45);
      uint64_t v53 = (uint64_t)v112;
      int v54 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v53, v54 ^ 1u, 1, v46);
      __n128 v132 = v49;
      sub_1C4055840(v53, (uint64_t)&v132, v46, v47);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v52, v51);
    case 1:
      unint64_t v68 = v2[1];
      v132.n128_u64[0] = *v40;
      uint64_t v67 = v132.n128_u64[0];
      v132.n128_u64[1] = v68;
      uint64_t v69 = v115;
      uint64_t v70 = swift_getAssociatedConformanceWitness();
      __n128 v71 = WeakRef.init(id:)(&v132, &v133);
      __n128 v72 = v133;
      uint64_t v74 = v128;
      uint64_t v73 = v129;
      uint64_t v75 = v131;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v129 + 16))(v37, v131, v128, v71);
      sub_1C3F7E324(v67, v68);
      unint64_t v76 = v114;
      int v77 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v76, v77 ^ 1u, 1, v69);
      __n128 v132 = v72;
      uint64_t v78 = (uint64_t)v76;
      uint64_t v79 = v69;
      uint64_t v80 = v70;
      goto LABEL_7;
    case 2:
      unint64_t v82 = v2[1];
      v132.n128_u64[0] = *v40;
      uint64_t v81 = v132.n128_u64[0];
      v132.n128_u64[1] = v82;
      uint64_t v83 = v117;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      __n128 v84 = WeakRef.init(id:)(&v132, &v133);
      __n128 v85 = v133;
      uint64_t v64 = v128;
      uint64_t v63 = v129;
      uint64_t v65 = v131;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v129 + 16))(v34, v131, v128, v84);
      sub_1C3F7E324(v81, v82);
      uint64_t v86 = v116;
      int v87 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v86, v87 ^ 1u, 1, v83);
      __n128 v132 = v85;
      uint64_t v88 = (uint64_t)v86;
      uint64_t v89 = v83;
      goto LABEL_13;
    case 3:
      unint64_t v91 = v2[1];
      v132.n128_u64[0] = *v40;
      uint64_t v90 = v132.n128_u64[0];
      v132.n128_u64[1] = v91;
      uint64_t v92 = v119;
      uint64_t v93 = swift_getAssociatedConformanceWitness();
      __n128 v94 = WeakRef.init(id:)(&v132, &v133);
      __n128 v95 = v133;
      uint64_t v74 = v128;
      uint64_t v73 = v129;
      uint64_t v75 = v131;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v129 + 16))(v31, v131, v128, v94);
      sub_1C3F7E324(v90, v91);
      __n128 v96 = v118;
      int v97 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v96, v97 ^ 1u, 1, v92);
      __n128 v132 = v95;
      uint64_t v78 = (uint64_t)v96;
      uint64_t v79 = v92;
      uint64_t v80 = v93;
LABEL_7:
      sub_1C4055840(v78, (uint64_t)&v132, v79, v80);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 8))(v75, v74);
    case 4:
      unint64_t v99 = v2[1];
      v132.n128_u64[0] = *v40;
      uint64_t v98 = v132.n128_u64[0];
      v132.n128_u64[1] = v99;
      uint64_t v58 = v121;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      __n128 v100 = WeakRef.init(id:)(&v132, &v133);
      unint64_t v62 = v133.n128_u64[1];
      unint64_t v61 = v133.n128_u64[0];
      uint64_t v64 = v128;
      uint64_t v63 = v129;
      uint64_t v65 = v131;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v129 + 16))(v108, v131, v128, v100);
      sub_1C3F7E324(v98, v99);
      uint64_t v66 = v120;
      goto LABEL_12;
    case 5:
      unint64_t v102 = v2[1];
      v132.n128_u64[0] = *v40;
      uint64_t v101 = v132.n128_u64[0];
      v132.n128_u64[1] = v102;
      uint64_t v58 = v123;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      __n128 v103 = WeakRef.init(id:)(&v132, &v133);
      unint64_t v62 = v133.n128_u64[1];
      unint64_t v61 = v133.n128_u64[0];
      uint64_t v64 = v128;
      uint64_t v63 = v129;
      uint64_t v65 = v131;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v129 + 16))(v109, v131, v128, v103);
      sub_1C3F7E324(v101, v102);
      uint64_t v66 = v122;
      goto LABEL_12;
    case 6:
      unint64_t v105 = v2[1];
      v132.n128_u64[0] = *v40;
      uint64_t v104 = v132.n128_u64[0];
      v132.n128_u64[1] = v105;
      uint64_t v58 = v125;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      __n128 v106 = WeakRef.init(id:)(&v132, &v133);
      unint64_t v62 = v133.n128_u64[1];
      unint64_t v61 = v133.n128_u64[0];
      uint64_t v64 = v128;
      uint64_t v63 = v129;
      uint64_t v65 = v131;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v129 + 16))(v110, v131, v128, v106);
      sub_1C3F7E324(v104, v105);
      uint64_t v66 = v124;
      goto LABEL_12;
    default:
      unint64_t v57 = v2[1];
      v132.n128_u64[0] = *v40;
      uint64_t v56 = v132.n128_u64[0];
      v132.n128_u64[1] = v57;
      uint64_t v58 = AssociatedTypeWitness;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      __n128 v60 = WeakRef.init(id:)(&v132, &v133);
      unint64_t v62 = v133.n128_u64[1];
      unint64_t v61 = v133.n128_u64[0];
      uint64_t v64 = v128;
      uint64_t v63 = v129;
      uint64_t v65 = v131;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v129 + 16))(v111, v131, v128, v60);
      sub_1C3F7E324(v56, v57);
      uint64_t v66 = v126;
LABEL_12:
      int v107 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v66, v107 ^ 1u, 1, v58);
      v132.n128_u64[0] = v61;
      v132.n128_u64[1] = v62;
      uint64_t v88 = (uint64_t)v66;
      uint64_t v89 = v58;
LABEL_13:
      sub_1C4055840(v88, (uint64_t)&v132, v89, v59);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v65, v64);
  }
}

uint64_t WeakTagged_7.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C40DA050);
}

uint64_t sub_1C40DC2BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for WeakTagged_7();
  swift_retain();
  sub_1C40F1F80(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_7, (uint64_t)&associated type descriptor for Tagged_7.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40DB5F8);
  return swift_release();
}

uint64_t WeakTagged_7.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1F80(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_7, (uint64_t)&associated type descriptor for Tagged_7.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40DB5F8);
  swift_release();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1C4497B38();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  return v5(a1, v4);
}

void (*WeakTagged_7.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_1C4497B38();
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_7.subscript.getter(a2, a3);
  return sub_1C40DC518;
}

void sub_1C40DC518(uint64_t **a1, char a2)
{
}

uint64_t WeakTagged_7.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C40DA050);
}

uint64_t WeakTagged_7.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))WeakTagged_7.init(_:id:), a3);
}

uint64_t WeakTagged_7.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))WeakTagged_7.copy(renamingReferences:));
}

uint64_t WeakTagged_7.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t static WeakTagged_7.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_7);
}

uint64_t WeakTagged_7.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))WeakTagged_7.hash(into:));
}

uint64_t sub_1C40DC604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))WeakTagged_7.hash(into:));
}

uint64_t sub_1C40DC61C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_7.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t WeakTagged_7.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C40DC648@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return WeakTagged_7.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t WeakTagged_7.init(from:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40DC698(a1, a2, a3, (char *)type metadata accessor for WeakTagged_7, 1, a4);
}

uint64_t sub_1C40DC698@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  int v104 = a5;
  uint64_t v120 = a4;
  uint64_t v121 = a3;
  uint64_t v122 = a2;
  uint64_t v124 = a6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0560);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v113 = &v103[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v111 = *(void *)(v9 - 8);
  uint64_t v112 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v114 = &v103[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v125 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1F4188790](v125);
  uint64_t v129 = &v103[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v110 = &v103[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v109 = &v103[-v16];
  MEMORY[0x1F4188790](v15);
  uint64_t v117 = &v103[-v17];
  uint64_t v130 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v18 = MEMORY[0x1F4188790](v130);
  uint64_t v127 = &v103[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v18);
  uint64_t v118 = &v103[-v20];
  uint64_t v21 = type metadata accessor for Proto_Value(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v128 = &v103[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v126 = &v103[-v26];
  MEMORY[0x1F4188790](v25);
  uint64_t v116 = &v103[-v27];
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v29 = MEMORY[0x1F4188790](v28 - 8);
  uint64_t v123 = &v103[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v119 = &v103[-v32];
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v35 = &v103[-v34];
  MEMORY[0x1F4188790](v33);
  uint64_t v37 = &v103[-v36];
  uint64_t v131 = (unsigned char *)a1;
  uint64_t v38 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v38, (uint64_t)v37, &qword_1EBBC0540);
  uint64_t v41 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48);
  uint64_t v40 = v22 + 48;
  uint64_t v39 = v41;
  unsigned int v42 = v41(v37, 1, v21);
  sub_1C3F962E0((uint64_t)v37, &qword_1EBBC0540);
  if (v42 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v43 = 0xD000000000000017;
    *(void *)(v43 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v43 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v131;
  sub_1C3F970C4(v38, (uint64_t)v35, &qword_1EBBC0540);
  uint64_t v107 = v40;
  if (v39(v35, 1, v21) == 1)
  {
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    JUMPOUT(0x1C40DD888);
  }
  unint64_t v45 = v39;
  uint64_t v46 = v116;
  sub_1C3F8ABD8((uint64_t)v35, (uint64_t)v116, type metadata accessor for Proto_Value);
  uint64_t v47 = *(void *)&v46[*(int *)(v21 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  __n128 v48 = v117;
  sub_1C3F970C4(v47, (uint64_t)v117, &qword_1EBBBF8A0);
  uint64_t v49 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v50 + 48);
  uint64_t v105 = v50 + 48;
  __n128 v106 = v51;
  uint64_t v52 = v21;
  if (v51(v48, 1, v49) == 1)
  {
    swift_retain();
    sub_1C3F962E0((uint64_t)v48, &qword_1EBBBF8A0);
    uint64_t v53 = v118;
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v53 = v118;
    if (EnumCaseMultiPayload == 11)
    {
      sub_1C3F8ABD8((uint64_t)v48, (uint64_t)v118, type metadata accessor for Proto_TaggedValue);
      goto LABEL_12;
    }
    swift_retain();
    sub_1C3F8B0A8((uint64_t)v48, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v55 = *(int *)(v130 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)&v53[v55] = qword_1EA39AF60;
LABEL_12:
  swift_retain();
  sub_1C3F8B0A8((uint64_t)v46, type metadata accessor for Proto_Value);
  uint64_t v56 = *(void *)&v53[*(int *)(v130 + 20)];
  swift_beginAccess();
  uint64_t v57 = *(void *)(v56 + 16);
  sub_1C3F8B0A8((uint64_t)v53, type metadata accessor for Proto_TaggedValue);
  __n128 v132 = (unsigned char *)v57;
  uint64_t v58 = ((uint64_t (*)(void, uint64_t, uint64_t))v120)(0, v122, v121);
  uint64_t v59 = (char *)v124 + *(int *)(v58 + 36);
  uint64_t AssociatedTypeWitness = (unsigned char *)swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = (unsigned char *)swift_getAssociatedConformanceWitness();
  uint64_t v120 = v59;
  uint64_t v118 = AssociatedConformanceWitness;
  CRExtensible.init(rawValue:)((uint64_t)&v132, (uint64_t)AssociatedTypeWitness, (uint64_t)AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E4FBB560], v59);
  uint64_t v62 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  uint64_t v63 = v119;
  sub_1C3F970C4(v62, (uint64_t)v119, &qword_1EBBC0540);
  if (v45(v63, 1, v52) == 1) {
    goto LABEL_57;
  }
  uint64_t v64 = (uint64_t)v63;
  uint64_t v65 = v126;
  sub_1C3F8ABD8(v64, (uint64_t)v126, type metadata accessor for Proto_Value);
  uint64_t v66 = *(void *)&v65[*(int *)(v52 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v67 = v109;
  sub_1C3F970C4(v66, (uint64_t)v109, &qword_1EBBBF8A0);
  int v68 = v106(v67, 1, v49);
  uint64_t v69 = (uint64_t)v110;
  if (v68 == 1)
  {
    sub_1C3F962E0((uint64_t)v67, &qword_1EBBBF8A0);
    uint64_t v70 = v127;
  }
  else
  {
    int v71 = swift_getEnumCaseMultiPayload();
    uint64_t v70 = v127;
    if (v71 == 11)
    {
      sub_1C3F8ABD8((uint64_t)v67, (uint64_t)v127, type metadata accessor for Proto_TaggedValue);
      unint64_t v72 = (unint64_t)v131;
      goto LABEL_21;
    }
    sub_1C3F8B0A8((uint64_t)v67, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v73 = v70;
  uint64_t v74 = *(int *)(v130 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)&v73[v74] = qword_1EA39AF60;
  swift_retain();
  unint64_t v72 = (unint64_t)v131;
  uint64_t v70 = v73;
LABEL_21:
  unint64_t v75 = v72;
  sub_1C3F8B0A8((uint64_t)v126, type metadata accessor for Proto_Value);
  uint64_t v76 = *(void *)&v70[*(int *)(v130 + 20)]
      + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  int v77 = v123;
  sub_1C3F970C4(v76, (uint64_t)v123, &qword_1EBBC0540);
  uint64_t v78 = v52;
  if (v45(v77, 1, v52) == 1)
  {
    uint64_t v79 = v128;
    sub_1C4496888();
    uint64_t v80 = *(int *)(v52 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)&v79[v80] = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0((uint64_t)v123, &qword_1EBBC0540);
    uint64_t v78 = v52;
  }
  else
  {
    uint64_t v81 = (uint64_t)v77;
    uint64_t v79 = v128;
    sub_1C3F8ABD8(v81, (uint64_t)v128, type metadata accessor for Proto_Value);
  }
  sub_1C3F8B0A8((uint64_t)v127, type metadata accessor for Proto_TaggedValue);
  uint64_t v82 = *(void *)&v79[*(int *)(v78 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v82, v69, &qword_1EBBBF8A0);
  if (v106((unsigned char *)v69, 1, v49) == 1)
  {
    sub_1C3F962E0(v69, &qword_1EBBBF8A0);
    __n128 v84 = v114;
    uint64_t v83 = v115;
    uint64_t v85 = v112;
    uint64_t v86 = v129;
    unint64_t v87 = v75;
LABEL_31:
    sub_1C4496888();
    uint64_t v89 = *(int *)(v125 + 20);
    if (qword_1EBBBC818 != -1) {
      swift_once();
    }
    *(void *)&v86[v89] = qword_1EBBBC808;
    swift_retain();
    goto LABEL_34;
  }
  int v88 = swift_getEnumCaseMultiPayload();
  uint64_t v85 = v112;
  uint64_t v86 = v129;
  unint64_t v87 = v75;
  if (v88 != 7)
  {
    sub_1C3F8B0A8(v69, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    __n128 v84 = v114;
    uint64_t v83 = v115;
    goto LABEL_31;
  }
  sub_1C3F8ABD8(v69, (uint64_t)v129, type metadata accessor for Proto_Reference);
  __n128 v84 = v114;
  uint64_t v83 = v115;
LABEL_34:
  sub_1C3F8B0A8((uint64_t)v128, type metadata accessor for Proto_Value);
  uint64_t v90 = *(void *)&v86[*(int *)(v125 + 20)]
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  uint64_t v91 = v90;
  uint64_t v92 = v113;
  sub_1C3F970C4(v91, (uint64_t)v113, &qword_1EBBC0560);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v111 + 48))(v92, 1, v85) == 1)
  {
    *__n128 v84 = MEMORY[0x1E4FBC860];
    v84[1] = sub_1C4496868();
    v84[2] = v93;
    sub_1C4496888();
    sub_1C3F962E0((uint64_t)v92, &qword_1EBBC0560);
  }
  else
  {
    sub_1C3F8ABD8((uint64_t)v92, (uint64_t)v84, type metadata accessor for Proto_KeyPath);
  }
  sub_1C3F8B0A8((uint64_t)v129, type metadata accessor for Proto_Reference);
  swift_retain();
  sub_1C3F766DC((uint64_t)v84, (uint64_t *)&v132);
  if (v83)
  {
    swift_release();
    swift_setDeallocating();
    swift_release();
    __n128 v132 = AssociatedTypeWitness;
    __n128 v133 = v118;
    uint64_t v134 = &protocol witness table for Int;
    uint64_t v135 = MEMORY[0x1E4FBB560];
    uint64_t v102 = type metadata accessor for CRExtensible();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v102 - 8) + 8))(v120, v102);
  }
  else
  {
    uint64_t v95 = (uint64_t)v132;
    unint64_t v94 = (unint64_t)v133;
    __n128 v96 = v124;
    *uint64_t v124 = v132;
    v96[1] = v94;
    sub_1C3F7E324(v95, v94);
    __n128 v132 = AssociatedTypeWitness;
    __n128 v133 = v118;
    uint64_t v134 = &protocol witness table for Int;
    uint64_t v135 = MEMORY[0x1E4FBB560];
    uint64_t v97 = type metadata accessor for CRExtensible();
    CRExtensible.rawValue.getter(v97, (uint64_t)&v136);
    uint64_t v117 = AssociatedTypeWitness;
    uint64_t v131 = (unsigned char *)v94;
    switch(v136)
    {
      case 0:
        uint64_t v98 = *(void *)(v87 + 16);
        if (v98) {
          goto LABEL_55;
        }
        goto LABEL_58;
      case 1:
        uint64_t v98 = *(void *)(v87 + 16);
        if (v98) {
          goto LABEL_55;
        }
        goto LABEL_60;
      case 2:
        uint64_t v98 = *(void *)(v87 + 16);
        if (v98) {
          goto LABEL_55;
        }
        goto LABEL_61;
      case 3:
        uint64_t v98 = *(void *)(v87 + 16);
        if (v98) {
          goto LABEL_55;
        }
        goto LABEL_62;
      case 4:
        uint64_t v98 = *(void *)(v87 + 16);
        if (v98) {
          goto LABEL_55;
        }
        goto LABEL_63;
      case 5:
        uint64_t v98 = *(void *)(v87 + 16);
        if (v98) {
          goto LABEL_55;
        }
        goto LABEL_64;
      case 6:
        uint64_t v98 = *(void *)(v87 + 16);
        if (v98) {
          goto LABEL_55;
        }
        goto LABEL_65;
      default:
        uint64_t v98 = *(void *)(v87 + 16);
        if (!v98) {
          goto LABEL_59;
        }
LABEL_55:
        uint64_t v99 = swift_getAssociatedTypeWitness();
        __n128 v132 = (unsigned char *)v95;
        __n128 v133 = v131;
        uint64_t v100 = *(void *)(*(void *)v98 + 176);
        uint64_t v129 = (unsigned char *)(*(void *)v98 + 176);
        uint64_t v130 = v100;
        uint64_t v101 = swift_getAssociatedConformanceWitness();
        swift_retain();
        ((void (*)(uint64_t, unsigned char **, unint64_t, void, uint64_t, uint64_t))v130)(v99, &v132, v87, v104 & 1, v99, v101);
        swift_release();
        swift_release();
        swift_release();
        uint64_t result = sub_1C3F7E2CC(v95, (unint64_t)v131);
        break;
    }
  }
  return result;
}

uint64_t sub_1C40DD8A4(uint64_t a1, uint64_t a2)
{
  return WeakTagged_7.encode(to:)(a1, a2);
}

uint64_t WeakTagged_7.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C40C5014(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_7, (uint64_t)&associated type descriptor for Tagged_7.Enum, (uint64_t)&associated conformance descriptor for Tagged_7.Tagged_7.Enum: RawRepresentable);
}

uint64_t (*WeakTagged_8.id.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_8.tag.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C40EA434(a1, a2);
}

uint64_t WeakTagged_8.tag.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C40EA528(a1, a2);
}

uint64_t (*WeakTagged_8.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_8.init(_:identity:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_8.init(_:id:));
}

{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_8.init(_:id:));
}

uint64_t WeakTagged_8.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1C40EA66C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_8, a5);
}

{
  return sub_1C40EA7CC(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_8, a5);
}

uint64_t WeakTagged_8.init(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for SharedTagged_8() + 36);
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for WeakTagged_8() + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v4, v3, v5);
}

uint64_t WeakTagged_8.tagged1.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  else
  {
    uint64_t v8 = *v1;
    unint64_t v9 = v2[1];
    v10.n128_u64[0] = v8;
    v10.n128_u64[1] = v9;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v6 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t WeakTagged_8.tagged2.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 1)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_8.tagged3.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 2)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_8.tagged4.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 3)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_8.tagged5.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 4)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_8.tagged6.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 5)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_8.tagged7.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 6)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_8.tagged8.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 7)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_8.unknown.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] < 2)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  else
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_8.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v225 = a3;
  uint64_t v226 = a4;
  uint64_t v224 = a1;
  uint64_t v227 = a5;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v197 = sub_1C4497B38();
  uint64_t v196 = *(void *)(v197 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v197);
  uint64_t v199 = (char *)&v163 - v10;
  v222 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))AssociatedTypeWitness;
  uint64_t v198 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  v195 = (char *)&v163 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v194 = (char *)&v163 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v193 = sub_1C4497B38();
  uint64_t v192 = *(void *)(v193 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v193);
  v220 = (char *)&v163 - v16;
  uint64_t v221 = v14;
  uint64_t v219 = *(void *)(v14 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v191 = (char *)&v163 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  __n128 v190 = (char *)&v163 - v19;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v189 = sub_1C4497B38();
  uint64_t v188 = *(void *)(v189 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v189);
  v217 = (char *)&v163 - v22;
  uint64_t v218 = v20;
  uint64_t v216 = *(void *)(v20 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v187 = (char *)&v163 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v186 = (char *)&v163 - v25;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v185 = sub_1C4497B38();
  uint64_t v184 = *(void *)(v185 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v185);
  v214 = (char *)&v163 - v28;
  uint64_t v215 = v26;
  uint64_t v213 = *(void *)(v26 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v183 = (char *)&v163 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v182 = (char *)&v163 - v31;
  uint64_t v32 = swift_getAssociatedTypeWitness();
  uint64_t v181 = sub_1C4497B38();
  uint64_t v180 = *(void *)(v181 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v181);
  v211 = (char *)&v163 - v34;
  uint64_t v212 = v32;
  uint64_t v210 = *(void *)(v32 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v179 = (char *)&v163 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  uint64_t v178 = (char *)&v163 - v37;
  uint64_t v38 = swift_getAssociatedTypeWitness();
  uint64_t v177 = sub_1C4497B38();
  uint64_t v176 = *(void *)(v177 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v177);
  v208 = (char *)&v163 - v40;
  uint64_t v209 = v38;
  uint64_t v207 = *(void *)(v38 - 8);
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  __n128 v175 = (char *)&v163 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v41);
  uint64_t v174 = (char *)&v163 - v43;
  uint64_t v44 = swift_getAssociatedTypeWitness();
  uint64_t v173 = sub_1C4497B38();
  uint64_t v172 = *(void *)(v173 - 8);
  uint64_t v45 = MEMORY[0x1F4188790](v173);
  uint64_t v205 = (char *)&v163 - v46;
  uint64_t v206 = v44;
  uint64_t v204 = *(void *)(v44 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v171 = (char *)&v163 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v47);
  uint64_t v170 = (char *)&v163 - v49;
  uint64_t v50 = swift_getAssociatedTypeWitness();
  uint64_t v169 = sub_1C4497B38();
  uint64_t v168 = *(void *)(v169 - 8);
  uint64_t v51 = MEMORY[0x1F4188790](v169);
  v203 = (char *)&v163 - v52;
  uint64_t v202 = *(void *)(v50 - 8);
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  uint64_t v167 = (char *)&v163 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v53);
  uint64_t v166 = (char *)&v163 - v55;
  uint64_t v56 = swift_getAssociatedTypeWitness();
  uint64_t v165 = sub_1C4497B38();
  uint64_t v164 = *(void *)(v165 - 8);
  uint64_t v57 = MEMORY[0x1F4188790](v165);
  __n128 v201 = (char *)&v163 - v58;
  uint64_t v200 = *(void *)(v56 - 8);
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v163 = (char *)&v163 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v59);
  uint64_t v62 = (char *)&v163 - v61;
  uint64_t v63 = v5;
  uint64_t v64 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v230.n128_u64[0] = v64;
  v230.n128_u64[1] = AssociatedConformanceWitness;
  v231 = &protocol witness table for Int;
  uint64_t v232 = MEMORY[0x1E4FBB560];
  uint64_t v66 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v66, (uint64_t)&v233);
  uint64_t v228 = v7;
  switch(v233)
  {
    case 0:
      unint64_t v67 = v5[1];
      v229.n128_u64[0] = *v63;
      v229.n128_u64[1] = v67;
      uint64_t v68 = v229.n128_u64[0];
      uint64_t v69 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v229, &v230);
      __n128 v70 = v230;
      __n128 v229 = v230;
      uint64_t v71 = v226;
      v222 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v226 + 16);
      sub_1C3F7E324(v68, v67);
      unint64_t v72 = v201;
      v222(&v229, v56, v69, v225, v71);
      sub_1C3F7E2CC(v70.n128_i64[0], v70.n128_u64[1]);
      uint64_t v73 = v200;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v200 + 48))(v72, 1, v56) == 1)
      {
        (*(void (**)(char *, uint64_t))(v164 + 8))(v72, v165);
        uint64_t v74 = v227;
        goto LABEL_19;
      }
      uint64_t v145 = *(void (**)(char *, char *, uint64_t))(v73 + 32);
      v145(v62, v72, v56);
      v145(v163, v62, v56);
      uint64_t v146 = swift_getAssociatedTypeWitness();
      uint64_t v74 = v227;
      goto LABEL_30;
    case 1:
      unint64_t v76 = v5[1];
      v229.n128_u64[0] = *v5;
      uint64_t v75 = v229.n128_u64[0];
      v229.n128_u64[1] = v76;
      uint64_t v77 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v229, &v230);
      __n128 v78 = v230;
      __n128 v229 = v230;
      uint64_t v79 = v226;
      uint64_t v80 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v226 + 16);
      sub_1C3F7E324(v75, v76);
      uint64_t v81 = v203;
      v80(&v229, v50, v77, v225, v79);
      sub_1C3F7E2CC(v78.n128_i64[0], v78.n128_u64[1]);
      uint64_t v82 = v202;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v202 + 48))(v81, 1, v50) == 1)
      {
        (*(void (**)(char *, uint64_t))(v168 + 8))(v81, v169);
        uint64_t v74 = v227;
        goto LABEL_19;
      }
      uint64_t v147 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
      uint64_t v148 = v166;
      v147(v166, v81, v50);
      v147(v167, v148, v50);
      uint64_t v146 = swift_getAssociatedTypeWitness();
      uint64_t v74 = v227;
      goto LABEL_30;
    case 2:
      unint64_t v84 = v5[1];
      v229.n128_u64[0] = *v63;
      uint64_t v83 = v229.n128_u64[0];
      v229.n128_u64[1] = v84;
      uint64_t v223 = v6;
      uint64_t v85 = v206;
      uint64_t v86 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v229, &v230);
      __n128 v87 = v230;
      __n128 v229 = v230;
      uint64_t v88 = v226;
      uint64_t v89 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v226 + 16);
      sub_1C3F7E324(v83, v84);
      uint64_t v90 = v205;
      v89(&v229, v85, v86, v225, v88);
      sub_1C3F7E2CC(v87.n128_i64[0], v87.n128_u64[1]);
      uint64_t v91 = v204;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v204 + 48))(v90, 1, v85) == 1)
      {
        (*(void (**)(char *, uint64_t))(v172 + 8))(v90, v173);
        goto LABEL_18;
      }
      uint64_t v149 = v90;
      uint64_t v150 = *(void (**)(char *, char *, uint64_t))(v91 + 32);
      uint64_t v151 = v170;
      v150(v170, v149, v85);
      uint64_t v152 = (uint64_t *)&v203;
      goto LABEL_29;
    case 3:
      unint64_t v93 = v5[1];
      v229.n128_u64[0] = *v63;
      uint64_t v92 = v229.n128_u64[0];
      v229.n128_u64[1] = v93;
      uint64_t v223 = v6;
      uint64_t v85 = v209;
      uint64_t v94 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v229, &v230);
      __n128 v95 = v230;
      __n128 v229 = v230;
      uint64_t v96 = v226;
      uint64_t v97 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v226 + 16);
      sub_1C3F7E324(v92, v93);
      uint64_t v98 = v208;
      v97(&v229, v85, v94, v225, v96);
      sub_1C3F7E2CC(v95.n128_i64[0], v95.n128_u64[1]);
      uint64_t v99 = v207;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v207 + 48))(v98, 1, v85) == 1)
      {
        (*(void (**)(char *, uint64_t))(v176 + 8))(v98, v177);
        goto LABEL_18;
      }
      uint64_t v153 = v98;
      uint64_t v150 = *(void (**)(char *, char *, uint64_t))(v99 + 32);
      uint64_t v151 = v174;
      v150(v174, v153, v85);
      uint64_t v152 = &v207;
      goto LABEL_29;
    case 4:
      unint64_t v101 = v5[1];
      v229.n128_u64[0] = *v63;
      uint64_t v100 = v229.n128_u64[0];
      v229.n128_u64[1] = v101;
      uint64_t v223 = v6;
      uint64_t v85 = v212;
      uint64_t v102 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v229, &v230);
      __n128 v103 = v230;
      __n128 v229 = v230;
      uint64_t v104 = v226;
      uint64_t v105 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v226 + 16);
      sub_1C3F7E324(v100, v101);
      __n128 v106 = v211;
      v105(&v229, v85, v102, v225, v104);
      sub_1C3F7E2CC(v103.n128_i64[0], v103.n128_u64[1]);
      uint64_t v107 = v210;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v210 + 48))(v106, 1, v85) == 1)
      {
        (*(void (**)(char *, uint64_t))(v180 + 8))(v106, v181);
        goto LABEL_18;
      }
      uint64_t v154 = v106;
      uint64_t v150 = *(void (**)(char *, char *, uint64_t))(v107 + 32);
      uint64_t v151 = v178;
      v150(v178, v154, v85);
      uint64_t v152 = (uint64_t *)&v211;
      goto LABEL_29;
    case 5:
      unint64_t v109 = v5[1];
      v229.n128_u64[0] = *v63;
      uint64_t v108 = v229.n128_u64[0];
      v229.n128_u64[1] = v109;
      uint64_t v223 = v6;
      uint64_t v85 = v215;
      uint64_t v110 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v229, &v230);
      __n128 v111 = v230;
      __n128 v229 = v230;
      uint64_t v112 = v226;
      uint64_t v113 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v226 + 16);
      sub_1C3F7E324(v108, v109);
      uint64_t v114 = v214;
      v113(&v229, v85, v110, v225, v112);
      sub_1C3F7E2CC(v111.n128_i64[0], v111.n128_u64[1]);
      uint64_t v115 = v213;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v213 + 48))(v114, 1, v85) == 1)
      {
        (*(void (**)(char *, uint64_t))(v184 + 8))(v114, v185);
        goto LABEL_18;
      }
      uint64_t v155 = v114;
      uint64_t v150 = *(void (**)(char *, char *, uint64_t))(v115 + 32);
      uint64_t v151 = v182;
      v150(v182, v155, v85);
      uint64_t v152 = &v215;
      goto LABEL_29;
    case 6:
      unint64_t v117 = v5[1];
      v229.n128_u64[0] = *v63;
      uint64_t v116 = v229.n128_u64[0];
      v229.n128_u64[1] = v117;
      uint64_t v223 = v6;
      uint64_t v85 = v218;
      uint64_t v118 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v229, &v230);
      __n128 v119 = v230;
      __n128 v229 = v230;
      uint64_t v120 = v226;
      uint64_t v121 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v226 + 16);
      sub_1C3F7E324(v116, v117);
      uint64_t v122 = v217;
      v121(&v229, v85, v118, v225, v120);
      sub_1C3F7E2CC(v119.n128_i64[0], v119.n128_u64[1]);
      uint64_t v123 = v216;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v216 + 48))(v122, 1, v85) == 1)
      {
        (*(void (**)(char *, uint64_t))(v188 + 8))(v122, v189);
        goto LABEL_18;
      }
      uint64_t v156 = v122;
      uint64_t v150 = *(void (**)(char *, char *, uint64_t))(v123 + 32);
      uint64_t v151 = v186;
      v150(v186, v156, v85);
      uint64_t v152 = &v219;
LABEL_29:
      v150((char *)*(v152 - 32), v151, v85);
      uint64_t v146 = swift_getAssociatedTypeWitness();
      uint64_t v74 = v227;
      goto LABEL_30;
    case 7:
      unint64_t v125 = v5[1];
      v229.n128_u64[0] = *v63;
      uint64_t v124 = v229.n128_u64[0];
      v229.n128_u64[1] = v125;
      uint64_t v223 = v6;
      uint64_t v126 = v221;
      uint64_t v127 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v229, &v230);
      __n128 v128 = v230;
      __n128 v229 = v230;
      uint64_t v129 = v226;
      uint64_t v130 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v226 + 16);
      sub_1C3F7E324(v124, v125);
      uint64_t v131 = v220;
      v130(&v229, v126, v127, v225, v129);
      sub_1C3F7E2CC(v128.n128_i64[0], v128.n128_u64[1]);
      uint64_t v132 = v219;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v219 + 48))(v131, 1, v126) != 1)
      {
        uint64_t v157 = v131;
        uint64_t v158 = *(void (**)(char *, char *, uint64_t))(v132 + 32);
        uint64_t v159 = v190;
        v158(v190, v157, v126);
        v158(v191, v159, v126);
        uint64_t v146 = swift_getAssociatedTypeWitness();
        uint64_t v74 = v227;
        goto LABEL_30;
      }
      (*(void (**)(char *, uint64_t))(v192 + 8))(v131, v193);
LABEL_18:
      uint64_t v74 = v227;
      goto LABEL_19;
    default:
      unint64_t v136 = v5[1];
      v229.n128_u64[0] = *v63;
      uint64_t v135 = v229.n128_u64[0];
      v229.n128_u64[1] = v136;
      uint64_t v223 = v6;
      uint64_t v137 = v222;
      uint64_t v138 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v229, &v230);
      __n128 v139 = v230;
      __n128 v229 = v230;
      uint64_t v140 = v226;
      uint64_t v141 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(v226 + 16);
      sub_1C3F7E324(v135, v136);
      uint64_t v142 = v199;
      v141(&v229, v137, v138, v225, v140);
      sub_1C3F7E2CC(v139.n128_i64[0], v139.n128_u64[1]);
      uint64_t v143 = v198;
      int v144 = (*(uint64_t (**)(char *, uint64_t, void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t)))(v198 + 48))(v142, 1, v137);
      uint64_t v74 = v227;
      if (v144 == 1)
      {
        (*(void (**)(char *, uint64_t))(v196 + 8))(v142, v197);
LABEL_19:
        uint64_t v133 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v133 - 8) + 56))(v74, 1, 1, v133);
      }
      else
      {
        uint64_t v160 = *(void (**)(char *, char *, void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t)))(v143 + 32);
        uint64_t v161 = v194;
        uint64_t v162 = v222;
        v160(v194, v142, v222);
        v160(v195, v161, v162);
        uint64_t v146 = swift_getAssociatedTypeWitness();
LABEL_30:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v146 - 8) + 56))(v74, 0, 1, v146);
      }
  }
}

uint64_t sub_1C40DFE28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v194 = a1;
  uint64_t v195 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v165 = sub_1C4497B38();
  uint64_t v168 = *(void *)(v165 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v165);
  uint64_t v170 = (uint64_t)&v134 - v5;
  uint64_t v171 = AssociatedTypeWitness;
  uint64_t v169 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v166 = (char *)&v134 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v167 = (char *)&v134 - v8;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v164 = sub_1C4497B38();
  uint64_t v163 = *(void *)(v164 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v164);
  uint64_t v192 = (uint64_t)&v134 - v11;
  uint64_t v193 = v9;
  uint64_t v191 = *(void *)(v9 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v162 = (char *)&v134 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v161 = (char *)&v134 - v14;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v160 = sub_1C4497B38();
  uint64_t v159 = *(void *)(v160 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v160);
  uint64_t v189 = (uint64_t)&v134 - v17;
  uint64_t v190 = v15;
  uint64_t v188 = *(void *)(v15 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v158 = (char *)&v134 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v157 = (char *)&v134 - v20;
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v156 = sub_1C4497B38();
  uint64_t v155 = *(void *)(v156 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v156);
  uint64_t v186 = (uint64_t)&v134 - v23;
  uint64_t v187 = v21;
  uint64_t v185 = *(void *)(v21 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v154 = (char *)&v134 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v153 = (char *)&v134 - v26;
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v152 = sub_1C4497B38();
  uint64_t v151 = *(void *)(v152 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v152);
  uint64_t v183 = (uint64_t)&v134 - v29;
  uint64_t v184 = v27;
  uint64_t v182 = *(void *)(v27 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v150 = (char *)&v134 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v149 = (char *)&v134 - v32;
  uint64_t v33 = swift_getAssociatedTypeWitness();
  uint64_t v148 = sub_1C4497B38();
  uint64_t v147 = *(void *)(v148 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v148);
  uint64_t v180 = (uint64_t)&v134 - v35;
  uint64_t v181 = v33;
  uint64_t v179 = *(void *)(v33 - 8);
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v146 = (char *)&v134 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  uint64_t v145 = (char *)&v134 - v38;
  uint64_t v39 = swift_getAssociatedTypeWitness();
  uint64_t v144 = sub_1C4497B38();
  uint64_t v143 = *(void *)(v144 - 8);
  uint64_t v40 = MEMORY[0x1F4188790](v144);
  uint64_t v177 = (uint64_t)&v134 - v41;
  uint64_t v178 = v39;
  uint64_t v176 = *(void *)(v39 - 8);
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  uint64_t v142 = (char *)&v134 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v42);
  uint64_t v141 = (char *)&v134 - v44;
  uint64_t v45 = swift_getAssociatedTypeWitness();
  uint64_t v140 = sub_1C4497B38();
  uint64_t v139 = *(void *)(v140 - 8);
  uint64_t v46 = MEMORY[0x1F4188790](v140);
  uint64_t v175 = (uint64_t)&v134 - v47;
  uint64_t v174 = *(void *)(v45 - 8);
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  uint64_t v138 = (char *)&v134 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v48);
  uint64_t v137 = (char *)&v134 - v50;
  uint64_t v51 = swift_getAssociatedTypeWitness();
  uint64_t v136 = sub_1C4497B38();
  uint64_t v135 = *(void *)(v136 - 8);
  uint64_t v52 = MEMORY[0x1F4188790](v136);
  uint64_t v173 = (uint64_t)&v134 - v53;
  uint64_t v172 = *(void *)(v51 - 8);
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  uint64_t v134 = (char *)&v134 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v54);
  uint64_t v57 = (char *)&v134 - v56;
  uint64_t v58 = (unint64_t *)v2;
  uint64_t v59 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v197.n128_u64[0] = v59;
  v197.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v198 = &protocol witness table for Int;
  uint64_t v199 = MEMORY[0x1E4FBB560];
  uint64_t v61 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v61, (uint64_t)&v200);
  switch(v200)
  {
    case 0:
      unint64_t v63 = v2[1];
      v196.n128_u64[0] = *v58;
      uint64_t v62 = v196.n128_u64[0];
      v196.n128_u64[1] = v63;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v196, &v197);
      __n128 v64 = v197;
      __n128 v196 = v197;
      sub_1C3F7E324(v62, v63);
      uint64_t v65 = type metadata accessor for WeakRef();
      uint64_t v66 = v173;
      sub_1C44749D8(v65, v173);
      sub_1C3F7E2CC(v64.n128_i64[0], v64.n128_u64[1]);
      uint64_t v67 = v172;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v172 + 48))(v66, 1, v51) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v66, v136);
        uint64_t v68 = v195;
        goto LABEL_19;
      }
      uint64_t v124 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 32);
      v124(v57, v66, v51);
      v124(v134, (uint64_t)v57, v51);
      uint64_t v125 = swift_getAssociatedTypeWitness();
      uint64_t v68 = v195;
      goto LABEL_31;
    case 1:
      uint64_t v69 = *v2;
      unint64_t v70 = v58[1];
      v196.n128_u64[0] = v69;
      v196.n128_u64[1] = v70;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v196, &v197);
      __n128 v71 = v197;
      __n128 v196 = v197;
      sub_1C3F7E324(v69, v70);
      uint64_t v72 = type metadata accessor for WeakRef();
      uint64_t v73 = v175;
      sub_1C44749D8(v72, v175);
      sub_1C3F7E2CC(v71.n128_i64[0], v71.n128_u64[1]);
      uint64_t v74 = v174;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v174 + 48))(v73, 1, v45) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v73, v140);
        goto LABEL_18;
      }
      uint64_t v126 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 32);
      uint64_t v127 = v137;
      v126(v137, v73, v45);
      v126(v138, (uint64_t)v127, v45);
      uint64_t v128 = swift_getAssociatedTypeWitness();
      uint64_t v129 = v195;
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v128 - 8) + 56))(v129, 0, 1, v128);
    case 2:
      unint64_t v76 = v2[1];
      v196.n128_u64[0] = *v58;
      uint64_t v75 = v196.n128_u64[0];
      v196.n128_u64[1] = v76;
      uint64_t v77 = v178;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v196, &v197);
      __n128 v78 = v197;
      __n128 v196 = v197;
      sub_1C3F7E324(v75, v76);
      uint64_t v79 = type metadata accessor for WeakRef();
      uint64_t v80 = v177;
      sub_1C44749D8(v79, v177);
      sub_1C3F7E2CC(v78.n128_i64[0], v78.n128_u64[1]);
      uint64_t v81 = v176;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v176 + 48))(v80, 1, v77) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v80, v144);
        goto LABEL_18;
      }
      uint64_t v130 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 32);
      uint64_t v131 = v141;
      v130(v141, v80, v77);
      uint64_t v132 = &v174;
      goto LABEL_30;
    case 3:
      unint64_t v83 = v2[1];
      v196.n128_u64[0] = *v58;
      uint64_t v82 = v196.n128_u64[0];
      v196.n128_u64[1] = v83;
      uint64_t v77 = v181;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v196, &v197);
      __n128 v84 = v197;
      __n128 v196 = v197;
      sub_1C3F7E324(v82, v83);
      uint64_t v85 = type metadata accessor for WeakRef();
      uint64_t v86 = v180;
      sub_1C44749D8(v85, v180);
      sub_1C3F7E2CC(v84.n128_i64[0], v84.n128_u64[1]);
      uint64_t v87 = v179;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v179 + 48))(v86, 1, v77) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v86, v148);
        goto LABEL_18;
      }
      uint64_t v130 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 32);
      uint64_t v131 = v145;
      v130(v145, v86, v77);
      uint64_t v132 = &v178;
      goto LABEL_30;
    case 4:
      unint64_t v89 = v2[1];
      v196.n128_u64[0] = *v58;
      uint64_t v88 = v196.n128_u64[0];
      v196.n128_u64[1] = v89;
      uint64_t v77 = v184;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v196, &v197);
      __n128 v90 = v197;
      __n128 v196 = v197;
      sub_1C3F7E324(v88, v89);
      uint64_t v91 = type metadata accessor for WeakRef();
      uint64_t v92 = v183;
      sub_1C44749D8(v91, v183);
      sub_1C3F7E2CC(v90.n128_i64[0], v90.n128_u64[1]);
      uint64_t v93 = v182;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v182 + 48))(v92, 1, v77) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v151 + 8))(v92, v152);
        goto LABEL_18;
      }
      uint64_t v130 = *(void (**)(char *, uint64_t, uint64_t))(v93 + 32);
      uint64_t v131 = v149;
      v130(v149, v92, v77);
      uint64_t v132 = &v182;
      goto LABEL_30;
    case 5:
      unint64_t v95 = v2[1];
      v196.n128_u64[0] = *v58;
      uint64_t v94 = v196.n128_u64[0];
      v196.n128_u64[1] = v95;
      uint64_t v77 = v187;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v196, &v197);
      __n128 v96 = v197;
      __n128 v196 = v197;
      sub_1C3F7E324(v94, v95);
      uint64_t v97 = type metadata accessor for WeakRef();
      uint64_t v98 = v186;
      sub_1C44749D8(v97, v186);
      sub_1C3F7E2CC(v96.n128_i64[0], v96.n128_u64[1]);
      uint64_t v99 = v185;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v185 + 48))(v98, 1, v77) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v98, v156);
        goto LABEL_18;
      }
      uint64_t v130 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 32);
      uint64_t v131 = v153;
      v130(v153, v98, v77);
      uint64_t v132 = &v186;
      goto LABEL_30;
    case 6:
      unint64_t v101 = v2[1];
      v196.n128_u64[0] = *v58;
      uint64_t v100 = v196.n128_u64[0];
      v196.n128_u64[1] = v101;
      uint64_t v77 = v190;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v196, &v197);
      __n128 v102 = v197;
      __n128 v196 = v197;
      sub_1C3F7E324(v100, v101);
      uint64_t v103 = type metadata accessor for WeakRef();
      uint64_t v104 = v189;
      sub_1C44749D8(v103, v189);
      sub_1C3F7E2CC(v102.n128_i64[0], v102.n128_u64[1]);
      uint64_t v105 = v188;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v188 + 48))(v104, 1, v77) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v104, v160);
        goto LABEL_18;
      }
      uint64_t v130 = *(void (**)(char *, uint64_t, uint64_t))(v105 + 32);
      uint64_t v131 = v157;
      v130(v157, v104, v77);
      uint64_t v132 = &v190;
      goto LABEL_30;
    case 7:
      unint64_t v107 = v2[1];
      v196.n128_u64[0] = *v58;
      uint64_t v106 = v196.n128_u64[0];
      v196.n128_u64[1] = v107;
      uint64_t v77 = v193;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v196, &v197);
      __n128 v108 = v197;
      __n128 v196 = v197;
      sub_1C3F7E324(v106, v107);
      uint64_t v109 = type metadata accessor for WeakRef();
      uint64_t v110 = v192;
      sub_1C44749D8(v109, v192);
      sub_1C3F7E2CC(v108.n128_i64[0], v108.n128_u64[1]);
      uint64_t v111 = v191;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v191 + 48))(v110, 1, v77) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v163 + 8))(v110, v164);
LABEL_18:
        uint64_t v68 = v195;
        goto LABEL_19;
      }
      uint64_t v130 = *(void (**)(char *, uint64_t, uint64_t))(v111 + 32);
      uint64_t v131 = v161;
      v130(v161, v110, v77);
      uint64_t v132 = &v194;
LABEL_30:
      v130((char *)*(v132 - 32), (uint64_t)v131, v77);
      uint64_t v125 = swift_getAssociatedTypeWitness();
      uint64_t v68 = v195;
      goto LABEL_31;
    default:
      uint64_t v114 = v167;
      uint64_t v115 = v168;
      unint64_t v117 = v2[1];
      v196.n128_u64[0] = *v58;
      uint64_t v116 = v196.n128_u64[0];
      v196.n128_u64[1] = v117;
      uint64_t v118 = v171;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v196, &v197);
      __n128 v119 = v197;
      __n128 v196 = v197;
      sub_1C3F7E324(v116, v117);
      uint64_t v120 = type metadata accessor for WeakRef();
      uint64_t v121 = v170;
      sub_1C44749D8(v120, v170);
      sub_1C3F7E2CC(v119.n128_i64[0], v119.n128_u64[1]);
      uint64_t v122 = v169;
      int v123 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v169 + 48))(v121, 1, v118);
      uint64_t v68 = v195;
      if (v123 == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v121, v165);
LABEL_19:
        uint64_t v112 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v112 - 8) + 56))(v68, 1, 1, v112);
      }
      else
      {
        uint64_t v133 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 32);
        v133(v114, v121, v118);
        v133(v166, (uint64_t)v114, v118);
        uint64_t v125 = swift_getAssociatedTypeWitness();
LABEL_31:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v125 - 8) + 56))(v68, 0, 1, v125);
      }
  }
}

uint64_t sub_1C40E15E4(uint64_t a1, uint64_t a2)
{
  uint64_t v142 = a2;
  uint64_t v143 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v138 = (char *)&v116 - v4;
  uint64_t v137 = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_1C4497B38();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v136 = (char *)&v116 - v6;
  uint64_t v135 = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v134 = (char *)&v116 - v8;
  uint64_t v133 = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1C4497B38();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v132 = (char *)&v116 - v10;
  uint64_t v131 = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_1C4497B38();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v130 = (char *)&v116 - v12;
  uint64_t v129 = swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_1C4497B38();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v128 = (char *)&v116 - v14;
  uint64_t v127 = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_1C4497B38();
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v126 = (char *)&v116 - v16;
  uint64_t v125 = swift_getAssociatedTypeWitness();
  uint64_t v17 = sub_1C4497B38();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v124 = (char *)&v116 - v18;
  uint64_t v123 = swift_getAssociatedTypeWitness();
  uint64_t v19 = sub_1C4497B38();
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v122 = (char *)&v116 - v20;
  swift_getAssociatedTypeWitness();
  uint64_t v21 = sub_1C4497B38();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v140 = v21;
  uint64_t v141 = v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v121 = (char *)&v116 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v120 = (char *)&v116 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  __n128 v119 = (char *)&v116 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v118 = (char *)&v116 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  unint64_t v117 = (char *)&v116 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v35 = (char *)&v116 - v34;
  uint64_t v36 = MEMORY[0x1F4188790](v33);
  uint64_t v38 = (char *)&v116 - v37;
  uint64_t v39 = MEMORY[0x1F4188790](v36);
  uint64_t v41 = (char *)&v116 - v40;
  MEMORY[0x1F4188790](v39);
  uint64_t v43 = (char *)&v116 - v42;
  uint64_t v44 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v145.n128_u64[0] = v44;
  v145.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v146 = &protocol witness table for Int;
  uint64_t v147 = MEMORY[0x1E4FBB560];
  uint64_t v46 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v46, (uint64_t)&v148);
  switch(v148)
  {
    case 0:
      uint64_t v47 = *v2;
      unint64_t v48 = v2[1];
      v144.n128_u64[0] = v47;
      v144.n128_u64[1] = v48;
      uint64_t v49 = v123;
      uint64_t v50 = swift_getAssociatedConformanceWitness();
      __n128 v51 = WeakRef.init(id:)(&v144, &v145);
      unint64_t v53 = v145.n128_u64[1];
      unint64_t v52 = v145.n128_u64[0];
      uint64_t v55 = v140;
      uint64_t v54 = v141;
      uint64_t v56 = v143;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v141 + 16))(v43, v143, v140, v51);
      sub_1C3F7E324(v47, v48);
      uint64_t v57 = (uint64_t)v122;
      goto LABEL_13;
    case 1:
      uint64_t v61 = *v2;
      unint64_t v62 = v2[1];
      v144.n128_u64[0] = v61;
      v144.n128_u64[1] = v62;
      uint64_t v63 = v125;
      uint64_t v64 = swift_getAssociatedConformanceWitness();
      __n128 v65 = WeakRef.init(id:)(&v144, &v145);
      __n128 v66 = v145;
      uint64_t v68 = v140;
      uint64_t v67 = v141;
      uint64_t v69 = v143;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v141 + 16))(v41, v143, v140, v65);
      sub_1C3F7E324(v61, v62);
      uint64_t v70 = (uint64_t)v124;
      int v71 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v70, v71 ^ 1u, 1, v63);
      __n128 v144 = v66;
      sub_1C4055840(v70, (uint64_t)&v144, v63, v64);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 8))(v69, v68);
    case 2:
      uint64_t v73 = *v2;
      unint64_t v74 = v2[1];
      v144.n128_u64[0] = v73;
      v144.n128_u64[1] = v74;
      uint64_t v75 = v127;
      uint64_t v76 = swift_getAssociatedConformanceWitness();
      __n128 v77 = WeakRef.init(id:)(&v144, &v145);
      __n128 v78 = v145;
      uint64_t v80 = v140;
      uint64_t v79 = v141;
      uint64_t v81 = v143;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v141 + 16))(v38, v143, v140, v77);
      sub_1C3F7E324(v73, v74);
      uint64_t v82 = (uint64_t)v126;
      int v83 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v82, v83 ^ 1u, 1, v75);
      __n128 v144 = v78;
      sub_1C4055840(v82, (uint64_t)&v144, v75, v76);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 8))(v81, v80);
    case 3:
      uint64_t v84 = *v2;
      unint64_t v85 = v2[1];
      v144.n128_u64[0] = v84;
      v144.n128_u64[1] = v85;
      uint64_t v86 = v129;
      uint64_t v87 = swift_getAssociatedConformanceWitness();
      __n128 v88 = WeakRef.init(id:)(&v144, &v145);
      __n128 v89 = v145;
      uint64_t v91 = v140;
      uint64_t v90 = v141;
      uint64_t v92 = v143;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v141 + 16))(v35, v143, v140, v88);
      sub_1C3F7E324(v84, v85);
      uint64_t v93 = v128;
      int v94 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v93, v94 ^ 1u, 1, v86);
      __n128 v144 = v89;
      uint64_t v95 = (uint64_t)v93;
      uint64_t v96 = v86;
      uint64_t v97 = v87;
      goto LABEL_8;
    case 4:
      unint64_t v99 = v2[1];
      v144.n128_u64[0] = *v2;
      uint64_t v98 = v144.n128_u64[0];
      v144.n128_u64[1] = v99;
      uint64_t v100 = v131;
      uint64_t v101 = swift_getAssociatedConformanceWitness();
      __n128 v102 = WeakRef.init(id:)(&v144, &v145);
      __n128 v103 = v145;
      uint64_t v91 = v140;
      uint64_t v90 = v141;
      uint64_t v92 = v143;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v141 + 16))(v117, v143, v140, v102);
      sub_1C3F7E324(v98, v99);
      uint64_t v104 = v130;
      int v105 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v104, v105 ^ 1u, 1, v100);
      __n128 v144 = v103;
      uint64_t v95 = (uint64_t)v104;
      uint64_t v96 = v100;
      uint64_t v97 = v101;
LABEL_8:
      sub_1C4055840(v95, (uint64_t)&v144, v96, v97);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 8))(v92, v91);
    case 5:
      uint64_t v106 = *v2;
      unint64_t v107 = v2[1];
      v144.n128_u64[0] = v106;
      v144.n128_u64[1] = v107;
      uint64_t v49 = v133;
      uint64_t v50 = swift_getAssociatedConformanceWitness();
      __n128 v108 = WeakRef.init(id:)(&v144, &v145);
      unint64_t v53 = v145.n128_u64[1];
      unint64_t v52 = v145.n128_u64[0];
      uint64_t v55 = v140;
      uint64_t v54 = v141;
      uint64_t v56 = v143;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v141 + 16))(v118, v143, v140, v108);
      sub_1C3F7E324(v106, v107);
      uint64_t v57 = (uint64_t)v132;
      goto LABEL_13;
    case 6:
      uint64_t v109 = *v2;
      unint64_t v110 = v2[1];
      v144.n128_u64[0] = v109;
      v144.n128_u64[1] = v110;
      uint64_t v49 = v135;
      uint64_t v50 = swift_getAssociatedConformanceWitness();
      __n128 v111 = WeakRef.init(id:)(&v144, &v145);
      unint64_t v53 = v145.n128_u64[1];
      unint64_t v52 = v145.n128_u64[0];
      uint64_t v55 = v140;
      uint64_t v54 = v141;
      uint64_t v56 = v143;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v141 + 16))(v119, v143, v140, v111);
      sub_1C3F7E324(v109, v110);
      uint64_t v57 = (uint64_t)v134;
      goto LABEL_13;
    case 7:
      uint64_t v112 = *v2;
      unint64_t v113 = v2[1];
      v144.n128_u64[0] = v112;
      v144.n128_u64[1] = v113;
      uint64_t v49 = v137;
      uint64_t v50 = swift_getAssociatedConformanceWitness();
      __n128 v114 = WeakRef.init(id:)(&v144, &v145);
      unint64_t v53 = v145.n128_u64[1];
      unint64_t v52 = v145.n128_u64[0];
      uint64_t v55 = v140;
      uint64_t v54 = v141;
      uint64_t v56 = v143;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v141 + 16))(v120, v143, v140, v114);
      sub_1C3F7E324(v112, v113);
      uint64_t v57 = (uint64_t)v136;
      goto LABEL_13;
    default:
      uint64_t v58 = *v2;
      unint64_t v59 = v2[1];
      v144.n128_u64[0] = v58;
      v144.n128_u64[1] = v59;
      uint64_t v49 = AssociatedTypeWitness;
      uint64_t v50 = swift_getAssociatedConformanceWitness();
      __n128 v60 = WeakRef.init(id:)(&v144, &v145);
      unint64_t v53 = v145.n128_u64[1];
      unint64_t v52 = v145.n128_u64[0];
      uint64_t v55 = v140;
      uint64_t v54 = v141;
      uint64_t v56 = v143;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v141 + 16))(v121, v143, v140, v60);
      sub_1C3F7E324(v58, v59);
      uint64_t v57 = (uint64_t)v138;
LABEL_13:
      int v115 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v57, v115 ^ 1u, 1, v49);
      v144.n128_u64[0] = v52;
      v144.n128_u64[1] = v53;
      sub_1C4055840(v57, (uint64_t)&v144, v49, v50);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v56, v55);
  }
}

uint64_t WeakTagged_8.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C40DFE28);
}

uint64_t sub_1C40E2438(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for WeakTagged_8();
  swift_retain();
  sub_1C40F1F80(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_8, (uint64_t)&associated type descriptor for Tagged_8.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40E15E4);
  return swift_release();
}

uint64_t WeakTagged_8.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1F80(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_8, (uint64_t)&associated type descriptor for Tagged_8.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40E15E4);
  swift_release();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1C4497B38();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  return v5(a1, v4);
}

void (*WeakTagged_8.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_1C4497B38();
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_8.subscript.getter(a2, a3);
  return sub_1C40E2694;
}

void sub_1C40E2694(uint64_t **a1, char a2)
{
}

uint64_t WeakTagged_8.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C40DFE28);
}

uint64_t WeakTagged_8.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))WeakTagged_8.init(_:id:), a3);
}

uint64_t WeakTagged_8.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))WeakTagged_8.copy(renamingReferences:));
}

uint64_t WeakTagged_8.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t static WeakTagged_8.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_8);
}

uint64_t WeakTagged_8.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))WeakTagged_8.hash(into:));
}

uint64_t sub_1C40E2780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))WeakTagged_8.hash(into:));
}

uint64_t sub_1C40E2798(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_8.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t WeakTagged_8.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C40E27C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return WeakTagged_8.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t WeakTagged_8.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40E2814(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_8, 1, a4);
}

uint64_t sub_1C40E2814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void, uint64_t, uint64_t)@<X3>, int a5@<W4>, void *a6@<X8>)
{
  int v98 = a5;
  int v115 = a4;
  uint64_t v116 = a3;
  uint64_t v117 = a2;
  __n128 v119 = a6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0560);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v109 = &v97[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v108 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v106 = *(void *)(v108 - 8);
  MEMORY[0x1F4188790](v108);
  unint64_t v110 = &v97[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v105 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1F4188790](v105);
  unint64_t v107 = &v97[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v104 = &v97[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  __n128 v103 = &v97[-v15];
  MEMORY[0x1F4188790](v14);
  uint64_t v112 = &v97[-v16];
  uint64_t v124 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v17 = MEMORY[0x1F4188790](v124);
  uint64_t v121 = &v97[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v17);
  unint64_t v113 = &v97[-v19];
  uint64_t v20 = type metadata accessor for Proto_Value(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v122 = (uint64_t *)&v97[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v120 = &v97[-v25];
  MEMORY[0x1F4188790](v24);
  uint64_t v123 = &v97[-v26];
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v28 = MEMORY[0x1F4188790](v27 - 8);
  uint64_t v118 = &v97[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  __n128 v114 = &v97[-v31];
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v34 = &v97[-v33];
  MEMORY[0x1F4188790](v32);
  uint64_t v36 = &v97[-v35];
  uint64_t v125 = a1;
  uint64_t v37 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v37, (uint64_t)v36, &qword_1EBBC0540);
  uint64_t v40 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v39 = v21 + 48;
  uint64_t v38 = v40;
  LODWORD(a1) = v40(v36, 1, v20);
  sub_1C3F962E0((uint64_t)v36, &qword_1EBBC0540);
  if (a1 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v41 = 0xD000000000000017;
    *(void *)(v41 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v41 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v125;
  sub_1C3F970C4(v37, (uint64_t)v34, &qword_1EBBC0540);
  uint64_t v99 = v39;
  if (v38(v34, 1, v20) == 1)
  {
    __break(1u);
    goto LABEL_59;
  }
  uint64_t v43 = v123;
  sub_1C3F8ABD8((uint64_t)v34, (uint64_t)v123, type metadata accessor for Proto_Value);
  uint64_t v44 = *(void *)&v43[*(int *)(v20 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v45 = v112;
  sub_1C3F970C4(v44, (uint64_t)v112, &qword_1EBBBF8A0);
  uint64_t v46 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v47 = *(void *)(v46 - 8);
  unint64_t v48 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v47 + 48);
  uint64_t v100 = v47 + 48;
  uint64_t v101 = v48;
  uint64_t v49 = v20;
  if (v48(v45, 1, v46) == 1)
  {
    swift_retain();
    sub_1C3F962E0((uint64_t)v45, &qword_1EBBBF8A0);
    uint64_t v50 = v113;
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v50 = v113;
    if (EnumCaseMultiPayload == 11)
    {
      sub_1C3F8ABD8((uint64_t)v45, (uint64_t)v113, type metadata accessor for Proto_TaggedValue);
      goto LABEL_12;
    }
    swift_retain();
    sub_1C3F8B0A8((uint64_t)v45, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v52 = *(int *)(v124 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)&v50[v52] = qword_1EA39AF60;
LABEL_12:
  swift_retain();
  sub_1C3F8B0A8((uint64_t)v123, type metadata accessor for Proto_Value);
  uint64_t v53 = *(void *)&v50[*(int *)(v124 + 20)];
  swift_beginAccess();
  uint64_t v54 = *(void *)(v53 + 16);
  sub_1C3F8B0A8((uint64_t)v50, type metadata accessor for Proto_TaggedValue);
  uint64_t v126 = (uint64_t (*)(void, void, void))v54;
  uint64_t v55 = v115(0, v117, v116);
  uint64_t v56 = (char *)v119 + *(int *)(v55 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = (unsigned char *)swift_getAssociatedConformanceWitness();
  uint64_t v123 = v56;
  int v115 = (uint64_t (*)(void, uint64_t, uint64_t))AssociatedTypeWitness;
  unint64_t v113 = AssociatedConformanceWitness;
  CRExtensible.init(rawValue:)((uint64_t)&v126, AssociatedTypeWitness, (uint64_t)AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E4FBB560], v56);
  uint64_t v59 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  __n128 v60 = v114;
  sub_1C3F970C4(v59, (uint64_t)v114, &qword_1EBBC0540);
  if (v38(v60, 1, v49) == 1)
  {
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    JUMPOUT(0x1C40E3A44);
  }
  uint64_t v61 = (uint64_t)v60;
  unint64_t v62 = v120;
  sub_1C3F8ABD8(v61, (uint64_t)v120, type metadata accessor for Proto_Value);
  uint64_t v63 = *(void *)&v62[*(int *)(v49 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v64 = v103;
  sub_1C3F970C4(v63, (uint64_t)v103, &qword_1EBBBF8A0);
  int v65 = v101(v64, 1, v46);
  uint64_t v66 = v105;
  uint64_t v67 = v122;
  if (v65 == 1)
  {
    sub_1C3F962E0((uint64_t)v64, &qword_1EBBBF8A0);
    uint64_t v68 = v121;
  }
  else
  {
    int v69 = swift_getEnumCaseMultiPayload();
    uint64_t v68 = v121;
    if (v69 == 11)
    {
      sub_1C3F8ABD8((uint64_t)v64, (uint64_t)v121, type metadata accessor for Proto_TaggedValue);
      goto LABEL_21;
    }
    sub_1C3F8B0A8((uint64_t)v64, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v70 = *(int *)(v124 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)&v68[v70] = qword_1EA39AF60;
  swift_retain();
LABEL_21:
  sub_1C3F8B0A8((uint64_t)v120, type metadata accessor for Proto_Value);
  uint64_t v71 = *(void *)&v68[*(int *)(v124 + 20)]
      + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  uint64_t v72 = v118;
  sub_1C3F970C4(v71, (uint64_t)v118, &qword_1EBBC0540);
  uint64_t v73 = v49;
  if (v38(v72, 1, v49) == 1)
  {
    sub_1C4496888();
    uint64_t v74 = *(int *)(v49 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(uint64_t *)((char *)v67 + v74) = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0((uint64_t)v118, &qword_1EBBC0540);
    uint64_t v73 = v49;
  }
  else
  {
    sub_1C3F8ABD8((uint64_t)v72, (uint64_t)v67, type metadata accessor for Proto_Value);
  }
  sub_1C3F8B0A8((uint64_t)v121, type metadata accessor for Proto_TaggedValue);
  uint64_t v75 = *(uint64_t *)((char *)v67 + *(int *)(v73 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v76 = v75;
  __n128 v77 = v104;
  sub_1C3F970C4(v76, (uint64_t)v104, &qword_1EBBBF8A0);
  if (v101(v77, 1, v46) == 1)
  {
    sub_1C3F962E0((uint64_t)v77, &qword_1EBBBF8A0);
    uint64_t v78 = v125;
    uint64_t v80 = v108;
    uint64_t v79 = (uint64_t)v109;
LABEL_31:
    uint64_t v82 = v107;
    sub_1C4496888();
    uint64_t v83 = *(int *)(v66 + 20);
    if (qword_1EBBBC818 != -1) {
      swift_once();
    }
    *(void *)&v82[v83] = qword_1EBBBC808;
    swift_retain();
    goto LABEL_34;
  }
  int v81 = swift_getEnumCaseMultiPayload();
  uint64_t v78 = v125;
  uint64_t v80 = v108;
  uint64_t v79 = (uint64_t)v109;
  if (v81 != 7)
  {
    sub_1C3F8B0A8((uint64_t)v77, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_31;
  }
  uint64_t v82 = v107;
  sub_1C3F8ABD8((uint64_t)v77, (uint64_t)v107, type metadata accessor for Proto_Reference);
LABEL_34:
  sub_1C3F8B0A8((uint64_t)v122, type metadata accessor for Proto_Value);
  uint64_t v84 = *(void *)&v82[*(int *)(v66 + 20)]
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  sub_1C3F970C4(v84, v79, &qword_1EBBC0560);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v79, 1, v80) == 1)
  {
    unint64_t v85 = v110;
    *unint64_t v110 = MEMORY[0x1E4FBC860];
    v85[1] = sub_1C4496868();
    v85[2] = v86;
    sub_1C4496888();
    sub_1C3F962E0(v79, &qword_1EBBC0560);
  }
  else
  {
    unint64_t v85 = v110;
    sub_1C3F8ABD8(v79, (uint64_t)v110, type metadata accessor for Proto_KeyPath);
  }
  sub_1C3F8B0A8((uint64_t)v82, type metadata accessor for Proto_Reference);
  swift_retain();
  uint64_t v87 = v111;
  sub_1C3F766DC((uint64_t)v85, (uint64_t *)&v126);
  if (v87)
  {
    swift_release();
    swift_setDeallocating();
    swift_release();
    uint64_t v126 = v115;
    uint64_t v127 = v113;
    uint64_t v128 = &protocol witness table for Int;
    uint64_t v129 = MEMORY[0x1E4FBB560];
    uint64_t v96 = type metadata accessor for CRExtensible();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v96 - 8) + 8))(v123, v96);
  }
  else
  {
    uint64_t v89 = (uint64_t)v126;
    unint64_t v88 = (unint64_t)v127;
    uint64_t v90 = v119;
    *__n128 v119 = v126;
    v90[1] = v88;
    sub_1C3F7E324(v89, v88);
    uint64_t v126 = v115;
    uint64_t v127 = v113;
    uint64_t v128 = &protocol witness table for Int;
    uint64_t v129 = MEMORY[0x1E4FBB560];
    uint64_t v91 = type metadata accessor for CRExtensible();
    CRExtensible.rawValue.getter(v91, (uint64_t)&v130);
    switch(v130)
    {
      case 0:
        uint64_t v92 = *(void **)(v78 + 16);
        if (v92) {
          goto LABEL_57;
        }
        goto LABEL_60;
      case 1:
        uint64_t v92 = *(void **)(v78 + 16);
        if (v92) {
          goto LABEL_57;
        }
        goto LABEL_61;
      case 2:
        uint64_t v92 = *(void **)(v78 + 16);
        if (v92) {
          goto LABEL_57;
        }
        goto LABEL_62;
      case 3:
        uint64_t v92 = *(void **)(v78 + 16);
        if (v92) {
          goto LABEL_57;
        }
        goto LABEL_63;
      case 4:
        uint64_t v92 = *(void **)(v78 + 16);
        if (v92) {
          goto LABEL_57;
        }
        goto LABEL_64;
      case 5:
        uint64_t v92 = *(void **)(v78 + 16);
        if (v92) {
          goto LABEL_57;
        }
        goto LABEL_65;
      case 6:
        uint64_t v92 = *(void **)(v78 + 16);
        if (v92) {
          goto LABEL_57;
        }
        goto LABEL_66;
      case 7:
        uint64_t v92 = *(void **)(v78 + 16);
        if (v92) {
          goto LABEL_57;
        }
        goto LABEL_67;
      default:
        uint64_t v92 = *(void **)(v78 + 16);
        if (!v92) {
          goto LABEL_68;
        }
LABEL_57:
        uint64_t v93 = swift_getAssociatedTypeWitness();
        uint64_t v126 = (uint64_t (*)(void, void, void))v89;
        uint64_t v127 = (unsigned char *)v88;
        int v94 = (uint64_t *)(*v92 + 176);
        uint64_t v124 = *v94;
        uint64_t v122 = v94;
        uint64_t v95 = swift_getAssociatedConformanceWitness();
        swift_retain();
        ((void (*)(uint64_t, uint64_t (**)(void, void, void), uint64_t, void, uint64_t, uint64_t))v124)(v93, &v126, v125, v98 & 1, v93, v95);
        swift_release();
        swift_release();
        swift_release();
        uint64_t result = sub_1C3F7E2CC(v89, v88);
        break;
    }
  }
  return result;
}

uint64_t sub_1C40E3A64(uint64_t a1, uint64_t a2)
{
  return WeakTagged_8.encode(to:)(a1, a2);
}

uint64_t WeakTagged_8.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C40C5014(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_8, (uint64_t)&associated type descriptor for Tagged_8.Enum, (uint64_t)&associated conformance descriptor for Tagged_8.Tagged_8.Enum: RawRepresentable);
}

uint64_t (*WeakTagged_9.id.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_9.tag.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C40EA434(a1, a2);
}

uint64_t WeakTagged_9.tag.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C40EA528(a1, a2);
}

uint64_t (*WeakTagged_9.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_9.init(_:identity:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_9.init(_:id:));
}

{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_9.init(_:id:));
}

uint64_t WeakTagged_9.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1C40EA66C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_9, a5);
}

{
  return sub_1C40EA7CC(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_9, a5);
}

uint64_t WeakTagged_9.init(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for SharedTagged_9() + 36);
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for WeakTagged_9() + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v4, v3, v5);
}

uint64_t WeakTagged_9.tagged1.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  else
  {
    uint64_t v8 = *v1;
    unint64_t v9 = v2[1];
    v10.n128_u64[0] = v8;
    v10.n128_u64[1] = v9;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v6 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t WeakTagged_9.tagged2.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 1)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_9.tagged3.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 2)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_9.tagged4.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 3)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_9.tagged5.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 4)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_9.tagged6.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 5)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_9.tagged7.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 6)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_9.tagged8.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 7)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_9.tagged9.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C40E4650((void (*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))WeakRef.init(id:), a1);
}

uint64_t sub_1C40E4650@<X0>(void (*a1)(uint64_t *__return_ptr, void *, uint64_t, uint64_t)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v17 = &protocol witness table for Int;
  uint64_t v18 = MEMORY[0x1E4FBB560];
  uint64_t v6 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v6, (uint64_t)&AssociatedTypeWitness);
  if (AssociatedTypeWitness == 8)
  {
    uint64_t v8 = *v2;
    unint64_t v9 = v4[1];
    v14[0] = v8;
    v14[1] = v9;
    uint64_t v10 = swift_getAssociatedTypeWitness();
    uint64_t v11 = swift_getAssociatedConformanceWitness();
    a1(&AssociatedTypeWitness, v14, v10, v11);
    uint64_t v12 = AssociatedTypeWitness;
    unint64_t v13 = AssociatedConformanceWitness;
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0xF000000000000000;
  }
  *a2 = v12;
  a2[1] = v13;
  return result;
}

uint64_t WeakTagged_9.unknown.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] < 2)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  else
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_9.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v245 = a3;
  uint64_t v246 = a4;
  uint64_t v243 = a5;
  uint64_t v244 = a1;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v214 = sub_1C4497B38();
  uint64_t v213 = *(void *)(v214 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v214);
  uint64_t v216 = (char *)&v176 - v10;
  unint64_t v241 = AssociatedTypeWitness;
  uint64_t v215 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v212 = (char *)&v176 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  v211 = (char *)&v176 - v13;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v210 = sub_1C4497B38();
  uint64_t v209 = *(void *)(v210 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v210);
  v239 = (char *)&v176 - v16;
  v240 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v14;
  uint64_t v238 = *(void *)(v14 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  v208 = (char *)&v176 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v207 = (char *)&v176 - v19;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v206 = sub_1C4497B38();
  uint64_t v205 = *(void *)(v206 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v206);
  v236 = (char *)&v176 - v22;
  uint64_t v237 = v20;
  uint64_t v235 = *(void *)(v20 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v204 = (char *)&v176 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  v203 = (char *)&v176 - v25;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v202 = sub_1C4497B38();
  uint64_t v201 = *(void *)(v202 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v202);
  uint64_t v233 = (char *)&v176 - v28;
  uint64_t v234 = v26;
  uint64_t v232 = *(void *)(v26 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v200 = (char *)&v176 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v199 = (char *)&v176 - v31;
  uint64_t v32 = swift_getAssociatedTypeWitness();
  uint64_t v198 = sub_1C4497B38();
  uint64_t v197 = *(void *)(v198 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v198);
  __n128 v230 = (char *)&v176 - v34;
  uint64_t v231 = v32;
  uint64_t v229 = *(void *)(v32 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  __n128 v196 = (char *)&v176 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  uint64_t v195 = (char *)&v176 - v37;
  uint64_t v38 = swift_getAssociatedTypeWitness();
  uint64_t v194 = sub_1C4497B38();
  uint64_t v193 = *(void *)(v194 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v194);
  uint64_t v227 = (char *)&v176 - v40;
  uint64_t v228 = v38;
  uint64_t v226 = *(void *)(v38 - 8);
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v192 = (char *)&v176 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v41);
  uint64_t v191 = (char *)&v176 - v43;
  uint64_t v44 = swift_getAssociatedTypeWitness();
  uint64_t v190 = sub_1C4497B38();
  uint64_t v189 = *(void *)(v190 - 8);
  uint64_t v45 = MEMORY[0x1F4188790](v190);
  uint64_t v224 = (char *)&v176 - v46;
  uint64_t v225 = v44;
  uint64_t v223 = *(void *)(v44 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v188 = (char *)&v176 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v47);
  uint64_t v187 = (char *)&v176 - v49;
  uint64_t v50 = swift_getAssociatedTypeWitness();
  uint64_t v186 = sub_1C4497B38();
  uint64_t v185 = *(void *)(v186 - 8);
  uint64_t v51 = MEMORY[0x1F4188790](v186);
  uint64_t v221 = (char *)&v176 - v52;
  uint64_t v222 = v50;
  uint64_t v220 = *(void *)(v50 - 8);
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  uint64_t v184 = (char *)&v176 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v53);
  uint64_t v183 = (char *)&v176 - v55;
  uint64_t v56 = swift_getAssociatedTypeWitness();
  uint64_t v182 = sub_1C4497B38();
  uint64_t v181 = *(void *)(v182 - 8);
  uint64_t v57 = MEMORY[0x1F4188790](v182);
  uint64_t v219 = (char *)&v176 - v58;
  uint64_t v218 = *(void *)(v56 - 8);
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v180 = (char *)&v176 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v59);
  uint64_t v179 = (char *)&v176 - v61;
  uint64_t v62 = swift_getAssociatedTypeWitness();
  uint64_t v178 = sub_1C4497B38();
  uint64_t v177 = *(void *)(v178 - 8);
  uint64_t v63 = MEMORY[0x1F4188790](v178);
  int v65 = (char *)&v176 - v64;
  uint64_t v217 = *(void *)(v62 - 8);
  uint64_t v66 = MEMORY[0x1F4188790](v63);
  uint64_t v176 = (char *)&v176 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v66);
  int v69 = (char *)&v176 - v68;
  uint64_t v70 = (uint64_t *)v5;
  uint64_t v71 = swift_getAssociatedTypeWitness();
  uint64_t v247 = v6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v249.n128_u64[0] = v71;
  v249.n128_u64[1] = AssociatedConformanceWitness;
  v250 = &protocol witness table for Int;
  uint64_t v251 = MEMORY[0x1E4FBB560];
  uint64_t v73 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v73, (uint64_t)&v252);
  switch(v252)
  {
    case 0:
      unint64_t v74 = v5[1];
      unint64_t v241 = *v70;
      v248.n128_u64[0] = v241;
      v248.n128_u64[1] = v74;
      uint64_t v75 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v248, &v249);
      __n128 v76 = v249;
      __n128 v248 = v249;
      uint64_t v77 = v246;
      v240 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v246 + 16);
      sub_1C3F7E324(v241, v74);
      v240(&v248, v62, v75, v245, v77);
      sub_1C3F7E2CC(v76.n128_i64[0], v76.n128_u64[1]);
      uint64_t v78 = v217;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v217 + 48))(v65, 1, v62) == 1)
      {
        (*(void (**)(char *, uint64_t))(v177 + 8))(v65, v178);
        uint64_t v79 = v243;
        goto LABEL_21;
      }
      uint64_t v157 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
      v157(v69, v65, v62);
      v157(v176, v69, v62);
      uint64_t v158 = swift_getAssociatedTypeWitness();
      uint64_t v79 = v243;
      goto LABEL_34;
    case 1:
      unint64_t v81 = v5[1];
      v248.n128_u64[0] = *v5;
      uint64_t v80 = v248.n128_u64[0];
      v248.n128_u64[1] = v81;
      uint64_t v82 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v248, &v249);
      __n128 v83 = v249;
      __n128 v248 = v249;
      uint64_t v84 = v246;
      unint64_t v85 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v246 + 16);
      sub_1C3F7E324(v80, v81);
      uint64_t v86 = v219;
      v85(&v248, v56, v82, v245, v84);
      sub_1C3F7E2CC(v83.n128_i64[0], v83.n128_u64[1]);
      uint64_t v87 = v218;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v218 + 48))(v86, 1, v56) == 1)
      {
        (*(void (**)(char *, uint64_t))(v181 + 8))(v86, v182);
        uint64_t v79 = v243;
        goto LABEL_21;
      }
      uint64_t v159 = *(void (**)(char *, char *, uint64_t))(v87 + 32);
      uint64_t v160 = v179;
      v159(v179, v86, v56);
      v159(v180, v160, v56);
      uint64_t v161 = swift_getAssociatedTypeWitness();
      uint64_t v162 = v243;
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v161 - 8) + 56))(v162, 0, 1, v161);
    case 2:
      unint64_t v89 = v5[1];
      v248.n128_u64[0] = *v70;
      uint64_t v88 = v248.n128_u64[0];
      v248.n128_u64[1] = v89;
      uint64_t v242 = v7;
      uint64_t v90 = (void (*)(void, void, void, void, void))v222;
      uint64_t v91 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v248, &v249);
      __n128 v92 = v249;
      __n128 v248 = v249;
      uint64_t v93 = v246;
      int v94 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(v246 + 16);
      sub_1C3F7E324(v88, v89);
      uint64_t v95 = v221;
      v94(&v248, v90, v91, v245, v93);
      sub_1C3F7E2CC(v92.n128_i64[0], v92.n128_u64[1]);
      uint64_t v96 = v220;
      if ((*(unsigned int (**)(char *, uint64_t, void (*)(void, void, void, void, void)))(v220 + 48))(v95, 1, v90) == 1)
      {
        (*(void (**)(char *, uint64_t))(v185 + 8))(v95, v186);
        goto LABEL_20;
      }
      uint64_t v163 = v95;
      uint64_t v164 = *(void (**)(void, void, void))(v96 + 32);
      uint64_t v165 = v183;
      v164(v183, v163, v90);
      uint64_t v166 = (uint64_t *)&v216;
      goto LABEL_33;
    case 3:
      unint64_t v98 = v5[1];
      v248.n128_u64[0] = *v70;
      uint64_t v97 = v248.n128_u64[0];
      v248.n128_u64[1] = v98;
      uint64_t v242 = v7;
      uint64_t v90 = (void (*)(void, void, void, void, void))v225;
      uint64_t v99 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v248, &v249);
      __n128 v100 = v249;
      __n128 v248 = v249;
      uint64_t v101 = v246;
      __n128 v102 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(v246 + 16);
      sub_1C3F7E324(v97, v98);
      __n128 v103 = v224;
      v102(&v248, v90, v99, v245, v101);
      sub_1C3F7E2CC(v100.n128_i64[0], v100.n128_u64[1]);
      uint64_t v104 = v223;
      if ((*(unsigned int (**)(char *, uint64_t, void (*)(void, void, void, void, void)))(v223 + 48))(v103, 1, v90) == 1)
      {
        (*(void (**)(char *, uint64_t))(v189 + 8))(v103, v190);
        goto LABEL_20;
      }
      uint64_t v167 = v103;
      uint64_t v164 = *(void (**)(void, void, void))(v104 + 32);
      uint64_t v165 = v187;
      v164(v187, v167, v90);
      uint64_t v166 = &v220;
      goto LABEL_33;
    case 4:
      unint64_t v106 = v5[1];
      v248.n128_u64[0] = *v70;
      uint64_t v105 = v248.n128_u64[0];
      v248.n128_u64[1] = v106;
      uint64_t v242 = v7;
      uint64_t v90 = (void (*)(void, void, void, void, void))v228;
      uint64_t v107 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v248, &v249);
      __n128 v108 = v249;
      __n128 v248 = v249;
      uint64_t v109 = v246;
      unint64_t v110 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(v246 + 16);
      sub_1C3F7E324(v105, v106);
      uint64_t v111 = v227;
      v110(&v248, v90, v107, v245, v109);
      sub_1C3F7E2CC(v108.n128_i64[0], v108.n128_u64[1]);
      uint64_t v112 = v226;
      if ((*(unsigned int (**)(char *, uint64_t, void (*)(void, void, void, void, void)))(v226 + 48))(v111, 1, v90) == 1)
      {
        (*(void (**)(char *, uint64_t))(v193 + 8))(v111, v194);
        goto LABEL_20;
      }
      uint64_t v168 = v111;
      uint64_t v164 = *(void (**)(void, void, void))(v112 + 32);
      uint64_t v165 = v191;
      v164(v191, v168, v90);
      uint64_t v166 = (uint64_t *)&v224;
      goto LABEL_33;
    case 5:
      unint64_t v114 = v5[1];
      v248.n128_u64[0] = *v70;
      uint64_t v113 = v248.n128_u64[0];
      v248.n128_u64[1] = v114;
      uint64_t v242 = v7;
      uint64_t v90 = (void (*)(void, void, void, void, void))v231;
      uint64_t v115 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v248, &v249);
      __n128 v116 = v249;
      __n128 v248 = v249;
      uint64_t v117 = v246;
      uint64_t v118 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(v246 + 16);
      sub_1C3F7E324(v113, v114);
      __n128 v119 = v230;
      v118(&v248, v90, v115, v245, v117);
      sub_1C3F7E2CC(v116.n128_i64[0], v116.n128_u64[1]);
      uint64_t v120 = v229;
      if ((*(unsigned int (**)(char *, uint64_t, void (*)(void, void, void, void, void)))(v229 + 48))(v119, 1, v90) == 1)
      {
        (*(void (**)(char *, uint64_t))(v197 + 8))(v119, v198);
        goto LABEL_20;
      }
      uint64_t v169 = v119;
      uint64_t v164 = *(void (**)(void, void, void))(v120 + 32);
      uint64_t v165 = v195;
      v164(v195, v169, v90);
      uint64_t v166 = &v228;
      goto LABEL_33;
    case 6:
      unint64_t v122 = v5[1];
      v248.n128_u64[0] = *v70;
      uint64_t v121 = v248.n128_u64[0];
      v248.n128_u64[1] = v122;
      uint64_t v242 = v7;
      uint64_t v90 = (void (*)(void, void, void, void, void))v234;
      uint64_t v123 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v248, &v249);
      __n128 v124 = v249;
      __n128 v248 = v249;
      uint64_t v125 = v246;
      uint64_t v126 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(v246 + 16);
      sub_1C3F7E324(v121, v122);
      uint64_t v127 = v233;
      v126(&v248, v90, v123, v245, v125);
      sub_1C3F7E2CC(v124.n128_i64[0], v124.n128_u64[1]);
      uint64_t v128 = v232;
      if ((*(unsigned int (**)(char *, uint64_t, void (*)(void, void, void, void, void)))(v232 + 48))(v127, 1, v90) == 1)
      {
        (*(void (**)(char *, uint64_t))(v201 + 8))(v127, v202);
        goto LABEL_20;
      }
      uint64_t v170 = v127;
      uint64_t v164 = *(void (**)(void, void, void))(v128 + 32);
      uint64_t v165 = v199;
      v164(v199, v170, v90);
      uint64_t v166 = &v232;
      goto LABEL_33;
    case 7:
      unint64_t v130 = v5[1];
      v248.n128_u64[0] = *v70;
      uint64_t v129 = v248.n128_u64[0];
      v248.n128_u64[1] = v130;
      uint64_t v242 = v7;
      uint64_t v90 = (void (*)(void, void, void, void, void))v237;
      uint64_t v131 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v248, &v249);
      __n128 v132 = v249;
      __n128 v248 = v249;
      uint64_t v133 = v246;
      uint64_t v134 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(v246 + 16);
      sub_1C3F7E324(v129, v130);
      uint64_t v135 = v236;
      v134(&v248, v90, v131, v245, v133);
      sub_1C3F7E2CC(v132.n128_i64[0], v132.n128_u64[1]);
      uint64_t v136 = v235;
      if ((*(unsigned int (**)(char *, uint64_t, void (*)(void, void, void, void, void)))(v235 + 48))(v135, 1, v90) == 1)
      {
        (*(void (**)(char *, uint64_t))(v205 + 8))(v135, v206);
        goto LABEL_20;
      }
      uint64_t v171 = v135;
      uint64_t v164 = *(void (**)(void, void, void))(v136 + 32);
      uint64_t v165 = v203;
      v164(v203, v171, v90);
      uint64_t v166 = (uint64_t *)&v236;
      goto LABEL_33;
    case 8:
      unint64_t v138 = v5[1];
      v248.n128_u64[0] = *v70;
      uint64_t v137 = v248.n128_u64[0];
      v248.n128_u64[1] = v138;
      uint64_t v242 = v7;
      uint64_t v90 = (void (*)(void, void, void, void, void))v240;
      uint64_t v139 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v248, &v249);
      __n128 v140 = v249;
      __n128 v248 = v249;
      uint64_t v141 = v246;
      uint64_t v142 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(v246 + 16);
      sub_1C3F7E324(v137, v138);
      uint64_t v143 = v239;
      v142(&v248, v90, v139, v245, v141);
      sub_1C3F7E2CC(v140.n128_i64[0], v140.n128_u64[1]);
      uint64_t v144 = v238;
      if ((*(unsigned int (**)(char *, uint64_t, void (*)(void, void, void, void, void)))(v238 + 48))(v143, 1, v90) == 1)
      {
        (*(void (**)(char *, uint64_t))(v209 + 8))(v143, v210);
LABEL_20:
        uint64_t v79 = v243;
        goto LABEL_21;
      }
      uint64_t v172 = v143;
      uint64_t v164 = *(void (**)(void, void, void))(v144 + 32);
      uint64_t v165 = v207;
      v164(v207, v172, v90);
      uint64_t v166 = (uint64_t *)&v240;
LABEL_33:
      v164(*(v166 - 32), v165, v90);
      uint64_t v158 = swift_getAssociatedTypeWitness();
      uint64_t v79 = v243;
      goto LABEL_34;
    default:
      unint64_t v148 = v5[1];
      v248.n128_u64[0] = *v70;
      uint64_t v147 = v248.n128_u64[0];
      v248.n128_u64[1] = v148;
      uint64_t v242 = v7;
      uint64_t v149 = v241;
      uint64_t v150 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v248, &v249);
      __n128 v151 = v249;
      __n128 v248 = v249;
      uint64_t v152 = v246;
      uint64_t v153 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v246 + 16);
      sub_1C3F7E324(v147, v148);
      uint64_t v154 = v216;
      v153(&v248, v149, v150, v245, v152);
      sub_1C3F7E2CC(v151.n128_i64[0], v151.n128_u64[1]);
      uint64_t v155 = v215;
      int v156 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v215 + 48))(v154, 1, v149);
      uint64_t v79 = v243;
      if (v156 == 1)
      {
        (*(void (**)(char *, uint64_t))(v213 + 8))(v154, v214);
LABEL_21:
        uint64_t v145 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v145 - 8) + 56))(v79, 1, 1, v145);
      }
      else
      {
        uint64_t v173 = *(void (**)(char *, char *, unint64_t))(v155 + 32);
        uint64_t v174 = v211;
        uint64_t v175 = v241;
        v173(v211, v154, v241);
        v173(v212, v174, v175);
        uint64_t v158 = swift_getAssociatedTypeWitness();
LABEL_34:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v158 - 8) + 56))(v79, 0, 1, v158);
      }
  }
}

uint64_t sub_1C40E6378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v215 = a1;
  uint64_t v213 = a3;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v182 = sub_1C4497B38();
  uint64_t v185 = *(void *)(v182 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v182);
  uint64_t v187 = (uint64_t)&v146 - v7;
  uint64_t v188 = AssociatedTypeWitness;
  uint64_t v186 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v183 = (char *)&v146 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v184 = (char *)&v146 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v181 = sub_1C4497B38();
  uint64_t v180 = *(void *)(v181 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v181);
  uint64_t v211 = (uint64_t)&v146 - v13;
  uint64_t v212 = v11;
  uint64_t v210 = *(void *)(v11 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v179 = (char *)&v146 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v178 = (char *)&v146 - v16;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v177 = sub_1C4497B38();
  uint64_t v176 = *(void *)(v177 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v177);
  uint64_t v208 = (uint64_t)&v146 - v19;
  uint64_t v209 = v17;
  uint64_t v207 = *(void *)(v17 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v175 = (char *)&v146 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v174 = (char *)&v146 - v22;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v173 = sub_1C4497B38();
  uint64_t v172 = *(void *)(v173 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v173);
  uint64_t v205 = (uint64_t)&v146 - v25;
  uint64_t v206 = v23;
  uint64_t v204 = *(void *)(v23 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v171 = (char *)&v146 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v170 = (char *)&v146 - v28;
  uint64_t v29 = swift_getAssociatedTypeWitness();
  uint64_t v169 = sub_1C4497B38();
  uint64_t v168 = *(void *)(v169 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v169);
  uint64_t v202 = (uint64_t)&v146 - v31;
  uint64_t v203 = v29;
  uint64_t v201 = *(void *)(v29 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v167 = (char *)&v146 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v166 = (char *)&v146 - v34;
  uint64_t v35 = swift_getAssociatedTypeWitness();
  uint64_t v165 = sub_1C4497B38();
  uint64_t v164 = *(void *)(v165 - 8);
  uint64_t v36 = MEMORY[0x1F4188790](v165);
  uint64_t v199 = (uint64_t)&v146 - v37;
  uint64_t v200 = v35;
  uint64_t v198 = *(void *)(v35 - 8);
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v163 = (char *)&v146 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v38);
  uint64_t v162 = (char *)&v146 - v40;
  uint64_t v41 = swift_getAssociatedTypeWitness();
  uint64_t v161 = sub_1C4497B38();
  uint64_t v160 = *(void *)(v161 - 8);
  uint64_t v42 = MEMORY[0x1F4188790](v161);
  uint64_t v196 = (uint64_t)&v146 - v43;
  uint64_t v197 = v41;
  uint64_t v195 = *(void *)(v41 - 8);
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  uint64_t v159 = (char *)&v146 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v44);
  uint64_t v158 = (char *)&v146 - v46;
  uint64_t v47 = swift_getAssociatedTypeWitness();
  uint64_t v157 = sub_1C4497B38();
  uint64_t v156 = *(void *)(v157 - 8);
  uint64_t v48 = MEMORY[0x1F4188790](v157);
  uint64_t v193 = (uint64_t)&v146 - v49;
  uint64_t v194 = v47;
  uint64_t v192 = *(void *)(v47 - 8);
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  uint64_t v155 = (char *)&v146 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v50);
  uint64_t v154 = (char *)&v146 - v52;
  uint64_t v53 = swift_getAssociatedTypeWitness();
  uint64_t v153 = sub_1C4497B38();
  uint64_t v152 = *(void *)(v153 - 8);
  uint64_t v54 = MEMORY[0x1F4188790](v153);
  uint64_t v191 = (uint64_t)&v146 - v55;
  uint64_t v190 = *(void *)(v53 - 8);
  uint64_t v56 = MEMORY[0x1F4188790](v54);
  __n128 v151 = (char *)&v146 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v56);
  uint64_t v150 = (char *)&v146 - v58;
  uint64_t v59 = swift_getAssociatedTypeWitness();
  uint64_t v149 = sub_1C4497B38();
  uint64_t v148 = *(void *)(v149 - 8);
  uint64_t v60 = MEMORY[0x1F4188790](v149);
  uint64_t v62 = (char *)&v146 - v61;
  uint64_t v189 = *(void *)(v59 - 8);
  uint64_t v63 = MEMORY[0x1F4188790](v60);
  uint64_t v147 = (char *)&v146 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v63);
  uint64_t v66 = (char *)&v146 - v65;
  uint64_t v67 = v3;
  uint64_t v68 = swift_getAssociatedTypeWitness();
  uint64_t v214 = v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v217.n128_u64[0] = v68;
  v217.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v218 = &protocol witness table for Int;
  uint64_t v219 = MEMORY[0x1E4FBB560];
  uint64_t v70 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v70, (uint64_t)&v220);
  switch(v220)
  {
    case 0:
      unint64_t v72 = v3[1];
      v216.n128_u64[0] = *v3;
      uint64_t v71 = v216.n128_u64[0];
      v216.n128_u64[1] = v72;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v216, &v217);
      __n128 v73 = v217;
      __n128 v216 = v217;
      sub_1C3F7E324(v71, v72);
      uint64_t v74 = type metadata accessor for WeakRef();
      sub_1C44749D8(v74, (uint64_t)v62);
      sub_1C3F7E2CC(v73.n128_i64[0], v73.n128_u64[1]);
      uint64_t v75 = v189;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v189 + 48))(v62, 1, v59) == 1)
      {
        (*(void (**)(char *, uint64_t))(v148 + 8))(v62, v149);
        uint64_t v76 = v213;
        goto LABEL_21;
      }
      unint64_t v138 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
      v138(v66, v62, v59);
      v138(v147, v66, v59);
      uint64_t v139 = swift_getAssociatedTypeWitness();
      uint64_t v76 = v213;
      goto LABEL_34;
    case 1:
      unint64_t v78 = v3[1];
      v216.n128_u64[0] = *v67;
      uint64_t v77 = v216.n128_u64[0];
      v216.n128_u64[1] = v78;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v216, &v217);
      __n128 v79 = v217;
      __n128 v216 = v217;
      sub_1C3F7E324(v77, v78);
      uint64_t v80 = type metadata accessor for WeakRef();
      uint64_t v81 = v191;
      sub_1C44749D8(v80, v191);
      sub_1C3F7E2CC(v79.n128_i64[0], v79.n128_u64[1]);
      uint64_t v82 = v190;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v190 + 48))(v81, 1, v53) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v81, v153);
        goto LABEL_20;
      }
      __n128 v140 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 32);
      uint64_t v141 = v150;
      v140(v150, v81, v53);
      v140(v151, (uint64_t)v141, v53);
      uint64_t v139 = swift_getAssociatedTypeWitness();
      uint64_t v76 = v213;
      goto LABEL_34;
    case 2:
      unint64_t v84 = v3[1];
      v216.n128_u64[0] = *v67;
      uint64_t v83 = v216.n128_u64[0];
      v216.n128_u64[1] = v84;
      uint64_t v85 = v194;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v216, &v217);
      __n128 v86 = v217;
      __n128 v216 = v217;
      sub_1C3F7E324(v83, v84);
      uint64_t v87 = type metadata accessor for WeakRef();
      uint64_t v88 = v193;
      sub_1C44749D8(v87, v193);
      sub_1C3F7E2CC(v86.n128_i64[0], v86.n128_u64[1]);
      uint64_t v89 = v192;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v192 + 48))(v88, 1, v85) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v88, v157);
        goto LABEL_20;
      }
      uint64_t v142 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 32);
      uint64_t v143 = v154;
      v142(v154, v88, v85);
      uint64_t v144 = &v187;
      goto LABEL_33;
    case 3:
      unint64_t v91 = v3[1];
      v216.n128_u64[0] = *v67;
      uint64_t v90 = v216.n128_u64[0];
      v216.n128_u64[1] = v91;
      uint64_t v85 = v197;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v216, &v217);
      __n128 v92 = v217;
      __n128 v216 = v217;
      sub_1C3F7E324(v90, v91);
      uint64_t v93 = type metadata accessor for WeakRef();
      uint64_t v94 = v196;
      sub_1C44749D8(v93, v196);
      sub_1C3F7E2CC(v92.n128_i64[0], v92.n128_u64[1]);
      uint64_t v95 = v195;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v195 + 48))(v94, 1, v85) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v94, v161);
        goto LABEL_20;
      }
      uint64_t v142 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 32);
      uint64_t v143 = v158;
      v142(v158, v94, v85);
      uint64_t v144 = &v191;
      goto LABEL_33;
    case 4:
      unint64_t v97 = v3[1];
      v216.n128_u64[0] = *v67;
      uint64_t v96 = v216.n128_u64[0];
      v216.n128_u64[1] = v97;
      uint64_t v85 = v200;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v216, &v217);
      __n128 v98 = v217;
      __n128 v216 = v217;
      sub_1C3F7E324(v96, v97);
      uint64_t v99 = type metadata accessor for WeakRef();
      uint64_t v100 = v199;
      sub_1C44749D8(v99, v199);
      sub_1C3F7E2CC(v98.n128_i64[0], v98.n128_u64[1]);
      uint64_t v101 = v198;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v198 + 48))(v100, 1, v85) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v100, v165);
        goto LABEL_20;
      }
      uint64_t v142 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 32);
      uint64_t v143 = v162;
      v142(v162, v100, v85);
      uint64_t v144 = &v195;
      goto LABEL_33;
    case 5:
      unint64_t v103 = v3[1];
      v216.n128_u64[0] = *v67;
      uint64_t v102 = v216.n128_u64[0];
      v216.n128_u64[1] = v103;
      uint64_t v85 = v203;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v216, &v217);
      __n128 v104 = v217;
      __n128 v216 = v217;
      sub_1C3F7E324(v102, v103);
      uint64_t v105 = type metadata accessor for WeakRef();
      uint64_t v106 = v202;
      sub_1C44749D8(v105, v202);
      sub_1C3F7E2CC(v104.n128_i64[0], v104.n128_u64[1]);
      uint64_t v107 = v201;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v201 + 48))(v106, 1, v85) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v106, v169);
        goto LABEL_20;
      }
      uint64_t v142 = *(void (**)(char *, uint64_t, uint64_t))(v107 + 32);
      uint64_t v143 = v166;
      v142(v166, v106, v85);
      uint64_t v144 = &v199;
      goto LABEL_33;
    case 6:
      unint64_t v109 = v3[1];
      v216.n128_u64[0] = *v67;
      uint64_t v108 = v216.n128_u64[0];
      v216.n128_u64[1] = v109;
      uint64_t v85 = v206;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v216, &v217);
      __n128 v110 = v217;
      __n128 v216 = v217;
      sub_1C3F7E324(v108, v109);
      uint64_t v111 = type metadata accessor for WeakRef();
      uint64_t v112 = v205;
      sub_1C44749D8(v111, v205);
      sub_1C3F7E2CC(v110.n128_i64[0], v110.n128_u64[1]);
      uint64_t v113 = v204;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v204 + 48))(v112, 1, v85) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v112, v173);
        goto LABEL_20;
      }
      uint64_t v142 = *(void (**)(char *, uint64_t, uint64_t))(v113 + 32);
      uint64_t v143 = v170;
      v142(v170, v112, v85);
      uint64_t v144 = &v203;
      goto LABEL_33;
    case 7:
      unint64_t v115 = v3[1];
      v216.n128_u64[0] = *v67;
      uint64_t v114 = v216.n128_u64[0];
      v216.n128_u64[1] = v115;
      uint64_t v85 = v209;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v216, &v217);
      __n128 v116 = v217;
      __n128 v216 = v217;
      sub_1C3F7E324(v114, v115);
      uint64_t v117 = type metadata accessor for WeakRef();
      uint64_t v118 = v208;
      sub_1C44749D8(v117, v208);
      sub_1C3F7E2CC(v116.n128_i64[0], v116.n128_u64[1]);
      uint64_t v119 = v207;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v207 + 48))(v118, 1, v85) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v176 + 8))(v118, v177);
        goto LABEL_20;
      }
      uint64_t v142 = *(void (**)(char *, uint64_t, uint64_t))(v119 + 32);
      uint64_t v143 = v174;
      v142(v174, v118, v85);
      uint64_t v144 = &v207;
      goto LABEL_33;
    case 8:
      unint64_t v121 = v3[1];
      v216.n128_u64[0] = *v67;
      uint64_t v120 = v216.n128_u64[0];
      v216.n128_u64[1] = v121;
      uint64_t v85 = v212;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v216, &v217);
      __n128 v122 = v217;
      __n128 v216 = v217;
      sub_1C3F7E324(v120, v121);
      uint64_t v123 = type metadata accessor for WeakRef();
      uint64_t v124 = v211;
      sub_1C44749D8(v123, v211);
      sub_1C3F7E2CC(v122.n128_i64[0], v122.n128_u64[1]);
      uint64_t v125 = v210;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v210 + 48))(v124, 1, v85) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v124, v181);
LABEL_20:
        uint64_t v76 = v213;
        goto LABEL_21;
      }
      uint64_t v142 = *(void (**)(char *, uint64_t, uint64_t))(v125 + 32);
      uint64_t v143 = v178;
      v142(v178, v124, v85);
      uint64_t v144 = &v211;
LABEL_33:
      v142((char *)*(v144 - 32), (uint64_t)v143, v85);
      uint64_t v139 = swift_getAssociatedTypeWitness();
      uint64_t v76 = v213;
      goto LABEL_34;
    default:
      uint64_t v128 = v184;
      uint64_t v129 = v185;
      unint64_t v131 = v3[1];
      v216.n128_u64[0] = *v67;
      uint64_t v130 = v216.n128_u64[0];
      v216.n128_u64[1] = v131;
      uint64_t v132 = v188;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v216, &v217);
      __n128 v133 = v217;
      __n128 v216 = v217;
      sub_1C3F7E324(v130, v131);
      uint64_t v134 = type metadata accessor for WeakRef();
      uint64_t v135 = v187;
      sub_1C44749D8(v134, v187);
      sub_1C3F7E2CC(v133.n128_i64[0], v133.n128_u64[1]);
      uint64_t v136 = v186;
      int v137 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v186 + 48))(v135, 1, v132);
      uint64_t v76 = v213;
      if (v137 == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v135, v182);
LABEL_21:
        uint64_t v126 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v126 - 8) + 56))(v76, 1, 1, v126);
      }
      else
      {
        uint64_t v145 = *(void (**)(char *, uint64_t, uint64_t))(v136 + 32);
        v145(v128, v135, v132);
        v145(v183, (uint64_t)v128, v132);
        uint64_t v139 = swift_getAssociatedTypeWitness();
LABEL_34:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v139 - 8) + 56))(v76, 0, 1, v139);
      }
  }
}

uint64_t sub_1C40E7D98(uint64_t a1, uint64_t a2)
{
  uint64_t v147 = a2;
  uint64_t v148 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v143 = (char *)&v119 - v4;
  uint64_t v142 = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_1C4497B38();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v141 = (char *)&v119 - v6;
  uint64_t v140 = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v139 = (char *)&v119 - v8;
  uint64_t v138 = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1C4497B38();
  MEMORY[0x1F4188790](v9 - 8);
  int v137 = (char *)&v119 - v10;
  uint64_t v136 = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_1C4497B38();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v135 = (char *)&v119 - v12;
  uint64_t v134 = swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_1C4497B38();
  MEMORY[0x1F4188790](v13 - 8);
  __n128 v133 = (char *)&v119 - v14;
  uint64_t v132 = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_1C4497B38();
  MEMORY[0x1F4188790](v15 - 8);
  unint64_t v131 = (char *)&v119 - v16;
  uint64_t v130 = swift_getAssociatedTypeWitness();
  uint64_t v17 = sub_1C4497B38();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v129 = (char *)&v119 - v18;
  uint64_t v128 = swift_getAssociatedTypeWitness();
  uint64_t v19 = sub_1C4497B38();
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v127 = (char *)&v119 - v20;
  uint64_t v126 = swift_getAssociatedTypeWitness();
  uint64_t v21 = sub_1C4497B38();
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v125 = (char *)&v119 - v22;
  swift_getAssociatedTypeWitness();
  uint64_t v23 = sub_1C4497B38();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v145 = v23;
  uint64_t v146 = v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v124 = (char *)&v119 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v123 = (char *)&v119 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  __n128 v122 = (char *)&v119 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  unint64_t v121 = (char *)&v119 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v120 = (char *)&v119 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v119 = (char *)&v119 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v39 = (char *)&v119 - v38;
  uint64_t v40 = MEMORY[0x1F4188790](v37);
  uint64_t v42 = (char *)&v119 - v41;
  uint64_t v43 = MEMORY[0x1F4188790](v40);
  uint64_t v45 = (char *)&v119 - v44;
  MEMORY[0x1F4188790](v43);
  uint64_t v47 = (char *)&v119 - v46;
  uint64_t v48 = v2;
  uint64_t v49 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v150.n128_u64[0] = v49;
  v150.n128_u64[1] = AssociatedConformanceWitness;
  __n128 v151 = &protocol witness table for Int;
  uint64_t v152 = MEMORY[0x1E4FBB560];
  uint64_t v51 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v51, (uint64_t)&v153);
  switch(v153)
  {
    case 0:
      unint64_t v53 = v2[1];
      v149.n128_u64[0] = *v2;
      uint64_t v52 = v149.n128_u64[0];
      v149.n128_u64[1] = v53;
      uint64_t v54 = v126;
      uint64_t v55 = swift_getAssociatedConformanceWitness();
      __n128 v56 = WeakRef.init(id:)(&v149, &v150);
      __n128 v57 = v150;
      uint64_t v59 = v145;
      uint64_t v58 = v146;
      uint64_t v60 = v148;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v146 + 16))(v47, v148, v145, v56);
      sub_1C3F7E324(v52, v53);
      uint64_t v61 = v125;
      int v62 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v61, v62 ^ 1u, 1, v54);
      __n128 v149 = v57;
      uint64_t v63 = (uint64_t)v61;
      goto LABEL_5;
    case 1:
      unint64_t v76 = v2[1];
      v149.n128_u64[0] = *v48;
      uint64_t v75 = v149.n128_u64[0];
      v149.n128_u64[1] = v76;
      uint64_t v54 = v128;
      uint64_t v55 = swift_getAssociatedConformanceWitness();
      __n128 v77 = WeakRef.init(id:)(&v149, &v150);
      __n128 v78 = v150;
      uint64_t v59 = v145;
      uint64_t v58 = v146;
      uint64_t v60 = v148;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v146 + 16))(v45, v148, v145, v77);
      sub_1C3F7E324(v75, v76);
      __n128 v79 = v127;
      int v80 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v79, v80 ^ 1u, 1, v54);
      __n128 v149 = v78;
      uint64_t v63 = (uint64_t)v79;
LABEL_5:
      uint64_t v81 = v54;
      uint64_t v82 = v55;
      goto LABEL_9;
    case 2:
      unint64_t v84 = v2[1];
      v149.n128_u64[0] = *v48;
      uint64_t v83 = v149.n128_u64[0];
      v149.n128_u64[1] = v84;
      uint64_t v85 = v130;
      uint64_t v86 = swift_getAssociatedConformanceWitness();
      __n128 v87 = WeakRef.init(id:)(&v149, &v150);
      __n128 v88 = v150;
      uint64_t v90 = v145;
      uint64_t v89 = v146;
      uint64_t v91 = v148;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v146 + 16))(v42, v148, v145, v87);
      sub_1C3F7E324(v83, v84);
      uint64_t v92 = (uint64_t)v129;
      int v93 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v92, v93 ^ 1u, 1, v85);
      __n128 v149 = v88;
      sub_1C4055840(v92, (uint64_t)&v149, v85, v86);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 8))(v91, v90);
    case 3:
      unint64_t v96 = v2[1];
      v149.n128_u64[0] = *v48;
      uint64_t v95 = v149.n128_u64[0];
      v149.n128_u64[1] = v96;
      uint64_t v66 = v132;
      uint64_t v67 = swift_getAssociatedConformanceWitness();
      __n128 v97 = WeakRef.init(id:)(&v149, &v150);
      unint64_t v70 = v150.n128_u64[1];
      unint64_t v69 = v150.n128_u64[0];
      uint64_t v72 = v145;
      uint64_t v71 = v146;
      uint64_t v73 = v148;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v146 + 16))(v39, v148, v145, v97);
      sub_1C3F7E324(v95, v96);
      uint64_t v74 = (uint64_t)v131;
      goto LABEL_15;
    case 4:
      unint64_t v99 = v2[1];
      v149.n128_u64[0] = *v48;
      uint64_t v98 = v149.n128_u64[0];
      v149.n128_u64[1] = v99;
      uint64_t v100 = v134;
      uint64_t v101 = swift_getAssociatedConformanceWitness();
      __n128 v102 = WeakRef.init(id:)(&v149, &v150);
      __n128 v103 = v150;
      uint64_t v59 = v145;
      uint64_t v58 = v146;
      uint64_t v60 = v148;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v146 + 16))(v119, v148, v145, v102);
      sub_1C3F7E324(v98, v99);
      __n128 v104 = v133;
      int v105 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v104, v105 ^ 1u, 1, v100);
      __n128 v149 = v103;
      uint64_t v63 = (uint64_t)v104;
      uint64_t v81 = v100;
      uint64_t v82 = v101;
LABEL_9:
      sub_1C4055840(v63, (uint64_t)&v149, v81, v82);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8))(v60, v59);
    case 5:
      unint64_t v107 = v2[1];
      v149.n128_u64[0] = *v48;
      uint64_t v106 = v149.n128_u64[0];
      v149.n128_u64[1] = v107;
      uint64_t v66 = v136;
      uint64_t v67 = swift_getAssociatedConformanceWitness();
      __n128 v108 = WeakRef.init(id:)(&v149, &v150);
      unint64_t v70 = v150.n128_u64[1];
      unint64_t v69 = v150.n128_u64[0];
      uint64_t v72 = v145;
      uint64_t v71 = v146;
      uint64_t v73 = v148;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v146 + 16))(v120, v148, v145, v108);
      sub_1C3F7E324(v106, v107);
      uint64_t v74 = (uint64_t)v135;
      goto LABEL_15;
    case 6:
      unint64_t v110 = v2[1];
      v149.n128_u64[0] = *v48;
      uint64_t v109 = v149.n128_u64[0];
      v149.n128_u64[1] = v110;
      uint64_t v66 = v138;
      uint64_t v67 = swift_getAssociatedConformanceWitness();
      __n128 v111 = WeakRef.init(id:)(&v149, &v150);
      unint64_t v70 = v150.n128_u64[1];
      unint64_t v69 = v150.n128_u64[0];
      uint64_t v72 = v145;
      uint64_t v71 = v146;
      uint64_t v73 = v148;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v146 + 16))(v121, v148, v145, v111);
      sub_1C3F7E324(v109, v110);
      uint64_t v74 = (uint64_t)v137;
      goto LABEL_15;
    case 7:
      unint64_t v113 = v2[1];
      v149.n128_u64[0] = *v48;
      uint64_t v112 = v149.n128_u64[0];
      v149.n128_u64[1] = v113;
      uint64_t v66 = v140;
      uint64_t v67 = swift_getAssociatedConformanceWitness();
      __n128 v114 = WeakRef.init(id:)(&v149, &v150);
      unint64_t v70 = v150.n128_u64[1];
      unint64_t v69 = v150.n128_u64[0];
      uint64_t v72 = v145;
      uint64_t v71 = v146;
      uint64_t v73 = v148;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v146 + 16))(v122, v148, v145, v114);
      sub_1C3F7E324(v112, v113);
      uint64_t v74 = (uint64_t)v139;
      goto LABEL_15;
    case 8:
      unint64_t v116 = v2[1];
      v149.n128_u64[0] = *v48;
      uint64_t v115 = v149.n128_u64[0];
      v149.n128_u64[1] = v116;
      uint64_t v66 = v142;
      uint64_t v67 = swift_getAssociatedConformanceWitness();
      __n128 v117 = WeakRef.init(id:)(&v149, &v150);
      unint64_t v70 = v150.n128_u64[1];
      unint64_t v69 = v150.n128_u64[0];
      uint64_t v72 = v145;
      uint64_t v71 = v146;
      uint64_t v73 = v148;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v146 + 16))(v123, v148, v145, v117);
      sub_1C3F7E324(v115, v116);
      uint64_t v74 = (uint64_t)v141;
      goto LABEL_15;
    default:
      unint64_t v65 = v2[1];
      v149.n128_u64[0] = *v48;
      uint64_t v64 = v149.n128_u64[0];
      v149.n128_u64[1] = v65;
      uint64_t v66 = AssociatedTypeWitness;
      uint64_t v67 = swift_getAssociatedConformanceWitness();
      __n128 v68 = WeakRef.init(id:)(&v149, &v150);
      unint64_t v70 = v150.n128_u64[1];
      unint64_t v69 = v150.n128_u64[0];
      uint64_t v72 = v145;
      uint64_t v71 = v146;
      uint64_t v73 = v148;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v146 + 16))(v124, v148, v145, v68);
      sub_1C3F7E324(v64, v65);
      uint64_t v74 = (uint64_t)v143;
LABEL_15:
      int v118 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v74, v118 ^ 1u, 1, v66);
      v149.n128_u64[0] = v69;
      v149.n128_u64[1] = v70;
      sub_1C4055840(v74, (uint64_t)&v149, v66, v67);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 8))(v73, v72);
  }
}

uint64_t WeakTagged_9.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C40E6378);
}

uint64_t sub_1C40E8CB8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for WeakTagged_9();
  swift_retain();
  sub_1C40F1F80(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_9, (uint64_t)&associated type descriptor for Tagged_9.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40E7D98);
  return swift_release();
}

uint64_t WeakTagged_9.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1F80(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_9, (uint64_t)&associated type descriptor for Tagged_9.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40E7D98);
  swift_release();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1C4497B38();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  return v5(a1, v4);
}

void (*WeakTagged_9.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_1C4497B38();
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_9.subscript.getter(a2, a3);
  return sub_1C40E8F14;
}

void sub_1C40E8F14(uint64_t **a1, char a2)
{
}

uint64_t WeakTagged_9.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C40E6378);
}

uint64_t WeakTagged_9.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))WeakTagged_9.init(_:id:), a3);
}

uint64_t WeakTagged_9.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))WeakTagged_9.copy(renamingReferences:));
}

uint64_t WeakTagged_9.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t static WeakTagged_9.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_9);
}

uint64_t WeakTagged_9.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))WeakTagged_9.hash(into:));
}

uint64_t sub_1C40E9000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))WeakTagged_9.hash(into:));
}

uint64_t sub_1C40E9018(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_9.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t WeakTagged_9.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C40E9044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return WeakTagged_9.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t WeakTagged_9.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40E9094(a1, a2, a3, type metadata accessor for WeakTagged_9, 1, a4);
}

uint64_t sub_1C40E9094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  int v110 = a5;
  uint64_t v126 = a4;
  uint64_t v127 = a3;
  uint64_t v128 = a2;
  uint64_t v129 = a6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0560);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v120 = &v109[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v118 = *(void *)(v9 - 8);
  uint64_t v119 = v9;
  MEMORY[0x1F4188790](v9);
  unint64_t v121 = &v109[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v131 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1F4188790](v131);
  uint64_t v134 = &v109[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  __n128 v117 = &v109[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v115 = &v109[-v16];
  MEMORY[0x1F4188790](v15);
  uint64_t v123 = &v109[-v17];
  unint64_t v137 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v18 = MEMORY[0x1F4188790](v137);
  __n128 v133 = &v109[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v18);
  uint64_t v124 = &v109[-v20];
  uint64_t v21 = type metadata accessor for Proto_Value(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v130 = &v109[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v132 = &v109[-v26];
  MEMORY[0x1F4188790](v25);
  uint64_t v135 = &v109[-v27];
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v29 = MEMORY[0x1F4188790](v28 - 8);
  unint64_t v116 = &v109[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v125 = &v109[-v32];
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v35 = &v109[-v34];
  MEMORY[0x1F4188790](v33);
  uint64_t v37 = &v109[-v36];
  uint64_t v136 = a1;
  uint64_t v38 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v38, (uint64_t)v37, &qword_1EBBC0540);
  uint64_t v41 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48);
  uint64_t v39 = v22 + 48;
  uint64_t v40 = v41;
  unsigned int v42 = v41(v37, 1, v21);
  sub_1C3F962E0((uint64_t)v37, &qword_1EBBC0540);
  if (v42 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v43 = 0xD000000000000017;
    *(void *)(v43 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v43 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v136;
  sub_1C3F970C4(v38, (uint64_t)v35, &qword_1EBBC0540);
  if (v40(v35, 1, v21) == 1)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    JUMPOUT(0x1C40EA364);
  }
  uint64_t v45 = v40;
  uint64_t v46 = v135;
  sub_1C3F8ABD8((uint64_t)v35, (uint64_t)v135, type metadata accessor for Proto_Value);
  uint64_t v47 = *(void *)&v46[*(int *)(v21 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v48 = v47;
  uint64_t v49 = v123;
  sub_1C3F970C4(v48, (uint64_t)v123, &qword_1EBBBF8A0);
  uint64_t v50 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v51 = *(void *)(v50 - 8);
  uint64_t v52 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v51 + 48);
  uint64_t v111 = v51 + 48;
  uint64_t v112 = v52;
  int v53 = v52(v49, 1, v50);
  uint64_t v54 = (uint64_t)v124;
  uint64_t v113 = v39;
  if (v53 == 1)
  {
    swift_retain();
    sub_1C3F962E0((uint64_t)v49, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      sub_1C3F8ABD8((uint64_t)v49, v54, type metadata accessor for Proto_TaggedValue);
      goto LABEL_12;
    }
    swift_retain();
    sub_1C3F8B0A8((uint64_t)v49, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v55 = *(int *)(v137 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)(v54 + v55) = qword_1EA39AF60;
LABEL_12:
  swift_retain();
  sub_1C3F8B0A8((uint64_t)v135, type metadata accessor for Proto_Value);
  uint64_t v56 = *(void *)(v54 + *(int *)(v137 + 20));
  swift_beginAccess();
  __n128 v57 = *(unsigned char **)(v56 + 16);
  sub_1C3F8B0A8(v54, type metadata accessor for Proto_TaggedValue);
  uint64_t v138 = v57;
  uint64_t v58 = ((uint64_t (*)(void, uint64_t, uint64_t))v126)(0, v128, v127);
  uint64_t v59 = (char *)v129 + *(int *)(v58 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = (unsigned char *)swift_getAssociatedConformanceWitness();
  int v62 = v59;
  uint64_t v126 = (unsigned char *)AssociatedTypeWitness;
  uint64_t v135 = AssociatedConformanceWitness;
  CRExtensible.init(rawValue:)((uint64_t)&v138, AssociatedTypeWitness, (uint64_t)AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E4FBB560], v59);
  uint64_t v63 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  uint64_t v64 = v63;
  unint64_t v65 = v125;
  sub_1C3F970C4(v64, (uint64_t)v125, &qword_1EBBC0540);
  uint64_t v66 = v21;
  if (v40(v65, 1, v21) == 1) {
    goto LABEL_62;
  }
  uint64_t v67 = (uint64_t)v65;
  __n128 v68 = v132;
  sub_1C3F8ABD8(v67, (uint64_t)v132, type metadata accessor for Proto_Value);
  uint64_t v69 = *(void *)&v68[*(int *)(v21 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v70 = v69;
  uint64_t v71 = v115;
  sub_1C3F970C4(v70, (uint64_t)v115, &qword_1EBBBF8A0);
  int v72 = v112(v71, 1, v50);
  uint64_t v73 = (uint64_t)v117;
  uint64_t v74 = (uint64_t)v130;
  if (v72 == 1)
  {
    sub_1C3F962E0((uint64_t)v71, &qword_1EBBBF8A0);
    uint64_t v75 = v133;
  }
  else
  {
    BOOL v76 = swift_getEnumCaseMultiPayload() == 11;
    uint64_t v77 = (uint64_t)v71;
    uint64_t v75 = v133;
    if (v76)
    {
      sub_1C3F8ABD8(v77, (uint64_t)v133, type metadata accessor for Proto_TaggedValue);
      goto LABEL_21;
    }
    sub_1C3F8B0A8(v77, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v78 = *(int *)(v137 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)&v75[v78] = qword_1EA39AF60;
  swift_retain();
  uint64_t v66 = v21;
LABEL_21:
  sub_1C3F8B0A8((uint64_t)v132, type metadata accessor for Proto_Value);
  uint64_t v79 = *(void *)&v75[*(int *)(v137 + 20)]
      + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  int v80 = v116;
  sub_1C3F970C4(v79, (uint64_t)v116, &qword_1EBBC0540);
  if (v45(v80, 1, v66) == 1)
  {
    sub_1C4496888();
    uint64_t v81 = *(int *)(v66 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)(v74 + v81) = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0((uint64_t)v80, &qword_1EBBC0540);
  }
  else
  {
    sub_1C3F8ABD8((uint64_t)v80, v74, type metadata accessor for Proto_Value);
  }
  sub_1C3F8B0A8((uint64_t)v133, type metadata accessor for Proto_TaggedValue);
  uint64_t v82 = *(void *)(v74 + *(int *)(v66 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v82, v73, &qword_1EBBBF8A0);
  if (v112((unsigned char *)v73, 1, v50) == 1)
  {
    sub_1C3F962E0(v73, &qword_1EBBBF8A0);
    uint64_t v83 = v62;
    unint64_t v84 = v126;
    uint64_t v85 = v136;
    uint64_t v86 = v121;
    __n128 v87 = v134;
LABEL_31:
    sub_1C4496888();
    uint64_t v92 = *(int *)(v131 + 20);
    uint64_t v90 = v135;
    if (qword_1EBBBC818 != -1) {
      swift_once();
    }
    *(void *)&v87[v92] = qword_1EBBBC808;
    swift_retain();
    uint64_t v91 = (uint64_t)v120;
    uint64_t v89 = v83;
    uint64_t v74 = (uint64_t)v130;
    goto LABEL_34;
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v89 = v62;
  __n128 v87 = v134;
  if (EnumCaseMultiPayload != 7)
  {
    uint64_t v83 = v62;
    sub_1C3F8B0A8(v73, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    unint64_t v84 = v126;
    uint64_t v85 = v136;
    uint64_t v86 = v121;
    goto LABEL_31;
  }
  sub_1C3F8ABD8(v73, (uint64_t)v134, type metadata accessor for Proto_Reference);
  unint64_t v84 = v126;
  uint64_t v90 = v135;
  uint64_t v85 = v136;
  uint64_t v91 = (uint64_t)v120;
  uint64_t v86 = v121;
LABEL_34:
  sub_1C3F8B0A8(v74, type metadata accessor for Proto_Value);
  uint64_t v93 = *(void *)&v87[*(int *)(v131 + 20)]
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  sub_1C3F970C4(v93, v91, &qword_1EBBC0560);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48))(v91, 1, v119) == 1)
  {
    *uint64_t v86 = MEMORY[0x1E4FBC860];
    v86[1] = sub_1C4496868();
    v86[2] = v94;
    sub_1C4496888();
    sub_1C3F962E0(v91, &qword_1EBBC0560);
  }
  else
  {
    sub_1C3F8ABD8(v91, (uint64_t)v86, type metadata accessor for Proto_KeyPath);
  }
  sub_1C3F8B0A8((uint64_t)v134, type metadata accessor for Proto_Reference);
  swift_retain();
  uint64_t v95 = v122;
  sub_1C3F766DC((uint64_t)v86, (uint64_t *)&v138);
  if (v95)
  {
    swift_release();
    swift_setDeallocating();
    swift_release();
    uint64_t v138 = v84;
    unint64_t v139 = (unint64_t)v90;
    uint64_t v140 = &protocol witness table for Int;
    uint64_t v141 = MEMORY[0x1E4FBB560];
    uint64_t v108 = type metadata accessor for CRExtensible();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v108 - 8) + 8))(v89, v108);
  }
  else
  {
    __n128 v97 = v138;
    unint64_t v96 = v139;
    uint64_t v98 = v129;
    *uint64_t v129 = v138;
    v98[1] = v96;
    sub_1C3F7E324((uint64_t)v97, v96);
    uint64_t v138 = v84;
    unint64_t v139 = (unint64_t)v90;
    uint64_t v140 = &protocol witness table for Int;
    uint64_t v141 = MEMORY[0x1E4FBB560];
    uint64_t v99 = type metadata accessor for CRExtensible();
    CRExtensible.rawValue.getter(v99, (uint64_t)&v142);
    unint64_t v137 = v96;
    uint64_t v134 = v97;
    switch(v142)
    {
      case 0:
        uint64_t v100 = *(void *)(v85 + 16);
        if (!v100) {
          goto LABEL_63;
        }
        uint64_t v101 = swift_getAssociatedTypeWitness();
        uint64_t v138 = v134;
        unint64_t v139 = v137;
        __n128 v102 = *(unsigned char **)(*(void *)v100 + 176);
        uint64_t v132 = (unsigned char *)(*(void *)v100 + 176);
        __n128 v133 = v102;
        uint64_t v103 = swift_getAssociatedConformanceWitness();
        swift_retain();
        ((void (*)(uint64_t, unsigned char **, uint64_t, void, uint64_t, uint64_t))v133)(v101, &v138, v136, v110 & 1, v101, v103);
        swift_release();
        swift_release();
        goto LABEL_60;
      case 1:
        uint64_t v104 = *(void *)(v85 + 16);
        if (v104) {
          goto LABEL_59;
        }
        goto LABEL_64;
      case 2:
        uint64_t v104 = *(void *)(v85 + 16);
        if (v104) {
          goto LABEL_59;
        }
        goto LABEL_65;
      case 3:
        uint64_t v104 = *(void *)(v85 + 16);
        if (v104) {
          goto LABEL_59;
        }
        goto LABEL_66;
      case 4:
        uint64_t v104 = *(void *)(v85 + 16);
        if (v104) {
          goto LABEL_59;
        }
        goto LABEL_67;
      case 5:
        uint64_t v104 = *(void *)(v85 + 16);
        if (v104) {
          goto LABEL_59;
        }
        goto LABEL_68;
      case 6:
        uint64_t v104 = *(void *)(v85 + 16);
        if (v104) {
          goto LABEL_59;
        }
        goto LABEL_69;
      case 7:
        uint64_t v104 = *(void *)(v85 + 16);
        if (v104) {
          goto LABEL_59;
        }
        goto LABEL_70;
      case 8:
        uint64_t v104 = *(void *)(v85 + 16);
        if (v104) {
          goto LABEL_59;
        }
        goto LABEL_71;
      default:
        uint64_t v104 = *(void *)(v85 + 16);
        if (!v104) {
          goto LABEL_72;
        }
LABEL_59:
        uint64_t v105 = swift_getAssociatedTypeWitness();
        uint64_t v138 = v134;
        unint64_t v139 = v137;
        uint64_t v106 = *(unsigned char **)(*(void *)v104 + 176);
        uint64_t v132 = (unsigned char *)(*(void *)v104 + 176);
        __n128 v133 = v106;
        uint64_t v107 = swift_getAssociatedConformanceWitness();
        swift_retain();
        ((void (*)(uint64_t, unsigned char **, uint64_t, void, uint64_t, uint64_t))v133)(v105, &v138, v136, v110 & 1, v105, v107);
        swift_release();
        swift_release();
LABEL_60:
        swift_release();
        uint64_t result = sub_1C3F7E2CC((uint64_t)v134, v137);
        break;
    }
  }
  return result;
}

uint64_t sub_1C40EA388(uint64_t a1, uint64_t a2)
{
  return WeakTagged_9.encode(to:)(a1, a2);
}

uint64_t WeakTagged_9.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C40C5014(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_9, (uint64_t)&associated type descriptor for Tagged_9.Enum, (uint64_t)&associated conformance descriptor for Tagged_9.Tagged_9.Enum: RawRepresentable);
}

uint64_t _s9Coherence14SharedTagged_1V2idAA9CRKeyPathVvs_0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_1C3F7E2CC(*(void *)v1, *(void *)(v1 + 8));
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = v3;
  return result;
}

uint64_t (*WeakTagged_10.id.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_10.tag.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C40EA434(a1, a2);
}

uint64_t sub_1C40EA434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t WeakTagged_10.tag.setter(uint64_t a1, uint64_t a2)
{
  return sub_1C40EA528(a1, a2);
}

uint64_t sub_1C40EA528(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*WeakTagged_10.tag.modify())()
{
  return nullsub_1;
}

uint64_t WeakTagged_10.init(_:identity:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_10.init(_:id:));
}

{
  return sub_1C4081DCC(a1, a2, a3, a4, (uint64_t (*)(uint64_t, long long *))WeakTagged_10.init(_:id:));
}

uint64_t WeakTagged_10.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return sub_1C40EA66C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_10, a5);
}

{
  return sub_1C40EA7CC(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_10, a5);
}

uint64_t sub_1C40EA66C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, void *a6@<X8>)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v10 = (char *)a6 + *(int *)(a5(0, a3, a4) + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v10, a1, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CRExtensible();
  uint64_t result = swift_storeEnumTagMultiPayload();
  *a6 = v8;
  a6[1] = v9;
  return result;
}

uint64_t sub_1C40EA7CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void, uint64_t, uint64_t)@<X4>, void *a6@<X8>)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v10 = (char *)a6 + *(int *)(a5(0, a3, a4) + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for CRExtensible();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a1, v11);
  *a6 = v8;
  a6[1] = v9;
  return result;
}

uint64_t WeakTagged_10.init(_:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *a1;
  uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for SharedTagged_10() + 36);
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for WeakTagged_10() + 36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v4, v3, v5);
}

uint64_t WeakTagged_10.tagged1.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  else
  {
    uint64_t v8 = *v1;
    unint64_t v9 = v2[1];
    v10.n128_u64[0] = v8;
    v10.n128_u64[1] = v9;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v7 = v11.n128_u64[1];
    unint64_t v6 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t WeakTagged_10.tagged2.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 1)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_10.tagged3.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 2)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_10.tagged4.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 3)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_10.tagged5.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 4)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_10.tagged6.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 5)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_10.tagged7.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 6)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_10.tagged8.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_u64[0] == 7)
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_10.tagged9.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C40BBC4C((void (*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))WeakRef.init(id:), a1);
}

uint64_t WeakTagged_10.tagged10.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C40EB3B0((void (*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))WeakRef.init(id:), a1);
}

uint64_t sub_1C40EB3B0@<X0>(void (*a1)(uint64_t *__return_ptr, void *, uint64_t, uint64_t)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v17 = &protocol witness table for Int;
  uint64_t v18 = MEMORY[0x1E4FBB560];
  uint64_t v6 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v6, (uint64_t)&AssociatedTypeWitness);
  if (AssociatedTypeWitness == 9)
  {
    uint64_t v8 = *v2;
    unint64_t v9 = v4[1];
    v14[0] = v8;
    v14[1] = v9;
    uint64_t v10 = swift_getAssociatedTypeWitness();
    uint64_t v11 = swift_getAssociatedConformanceWitness();
    a1(&AssociatedTypeWitness, v14, v10, v11);
    uint64_t v12 = AssociatedTypeWitness;
    unint64_t v13 = AssociatedConformanceWitness;
    uint64_t result = sub_1C3F7E324(v8, v9);
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0xF000000000000000;
  }
  *a2 = v12;
  a2[1] = v13;
  return result;
}

uint64_t WeakTagged_10.unknown.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  v11.n128_u64[0] = swift_getAssociatedTypeWitness();
  v11.n128_u64[1] = swift_getAssociatedConformanceWitness();
  uint64_t v12 = &protocol witness table for Int;
  uint64_t v13 = MEMORY[0x1E4FBB560];
  uint64_t v4 = type metadata accessor for CRExtensible();
  uint64_t result = CRExtensible.rawValue.getter(v4, (uint64_t)&v11);
  if (v11.n128_i64[0] < 2)
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  else
  {
    uint64_t v6 = *v1;
    unint64_t v7 = v2[1];
    v10.n128_u64[0] = v6;
    v10.n128_u64[1] = v7;
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    WeakRef.init(id:)(&v10, &v11);
    unint64_t v9 = v11.n128_u64[1];
    unint64_t v8 = v11.n128_u64[0];
    uint64_t result = sub_1C3F7E324(v6, v7);
  }
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t WeakTagged_10.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v278 = a3;
  uint64_t v279 = a4;
  uint64_t v276 = a5;
  uint64_t v277 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v244 = sub_1C4497B38();
  uint64_t v243 = *(void *)(v244 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v244);
  v273 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))AssociatedTypeWitness;
  v274 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v201 - v10);
  uint64_t v272 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v242 = (char *)&v201 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v241 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v201 - v13);
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v240 = sub_1C4497B38();
  uint64_t v239 = *(void *)(v240 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v240);
  v270 = (char *)&v201 - v16;
  uint64_t v271 = v14;
  uint64_t v269 = *(void *)(v14 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v238 = (char *)&v201 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v237 = (char *)&v201 - v19;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  uint64_t v236 = sub_1C4497B38();
  uint64_t v235 = *(void *)(v236 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v236);
  uint64_t v246 = (char *)&v201 - v22;
  uint64_t v247 = v20;
  uint64_t v245 = *(void *)(v20 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v234 = (char *)&v201 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v233 = (char *)&v201 - v25;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v232 = sub_1C4497B38();
  uint64_t v231 = *(void *)(v232 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v232);
  v267 = (char *)&v201 - v28;
  uint64_t v268 = v26;
  uint64_t v266 = *(void *)(v26 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  __n128 v230 = (char *)&v201 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v229 = (char *)&v201 - v31;
  uint64_t v32 = swift_getAssociatedTypeWitness();
  uint64_t v228 = sub_1C4497B38();
  uint64_t v227 = *(void *)(v228 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v228);
  v264 = (char *)&v201 - v34;
  uint64_t v265 = v32;
  uint64_t v263 = *(void *)(v32 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v226 = (char *)&v201 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  uint64_t v225 = (char *)&v201 - v37;
  uint64_t v38 = swift_getAssociatedTypeWitness();
  uint64_t v224 = sub_1C4497B38();
  uint64_t v223 = *(void *)(v224 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v224);
  v261 = (char *)&v201 - v40;
  uint64_t v262 = v38;
  uint64_t v260 = *(void *)(v38 - 8);
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v222 = (char *)&v201 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v41);
  uint64_t v221 = (char *)&v201 - v43;
  uint64_t v44 = swift_getAssociatedTypeWitness();
  uint64_t v220 = sub_1C4497B38();
  uint64_t v219 = *(void *)(v220 - 8);
  uint64_t v45 = MEMORY[0x1F4188790](v220);
  v258 = (char *)&v201 - v46;
  uint64_t v259 = v44;
  uint64_t v257 = *(void *)(v44 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v218 = (char *)&v201 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v47);
  __n128 v217 = (char *)&v201 - v49;
  uint64_t v50 = swift_getAssociatedTypeWitness();
  uint64_t v216 = sub_1C4497B38();
  uint64_t v215 = *(void *)(v216 - 8);
  uint64_t v51 = MEMORY[0x1F4188790](v216);
  v255 = (char *)&v201 - v52;
  uint64_t v256 = v50;
  uint64_t v254 = *(void *)(v50 - 8);
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  uint64_t v214 = (char *)&v201 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v53);
  uint64_t v213 = (char *)&v201 - v55;
  uint64_t v56 = swift_getAssociatedTypeWitness();
  uint64_t v212 = sub_1C4497B38();
  uint64_t v211 = *(void *)(v212 - 8);
  uint64_t v57 = MEMORY[0x1F4188790](v212);
  uint64_t v252 = (char *)&v201 - v58;
  uint64_t v253 = v56;
  uint64_t v251 = *(void *)(v56 - 8);
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v210 = (char *)&v201 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v59);
  uint64_t v209 = (char *)&v201 - v61;
  uint64_t v62 = swift_getAssociatedTypeWitness();
  uint64_t v208 = sub_1C4497B38();
  uint64_t v207 = *(void *)(v208 - 8);
  uint64_t v63 = MEMORY[0x1F4188790](v208);
  v250 = (char *)&v201 - v64;
  uint64_t v249 = *(void *)(v62 - 8);
  uint64_t v65 = MEMORY[0x1F4188790](v63);
  uint64_t v206 = (char *)&v201 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v65);
  uint64_t v205 = (char *)&v201 - v67;
  uint64_t v68 = swift_getAssociatedTypeWitness();
  uint64_t v204 = sub_1C4497B38();
  uint64_t v203 = *(void *)(v204 - 8);
  uint64_t v69 = MEMORY[0x1F4188790](v204);
  uint64_t v71 = (char *)&v201 - v70;
  uint64_t v248 = *(void *)(v68 - 8);
  uint64_t v72 = MEMORY[0x1F4188790](v69);
  uint64_t v202 = (char *)&v201 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v72);
  uint64_t v75 = (char *)&v201 - v74;
  BOOL v76 = (unint64_t *)v5;
  uint64_t v77 = swift_getAssociatedTypeWitness();
  uint64_t v280 = v7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v282.n128_u64[0] = v77;
  v282.n128_u64[1] = AssociatedConformanceWitness;
  v283 = &protocol witness table for Int;
  uint64_t v284 = MEMORY[0x1E4FBB560];
  uint64_t v79 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v79, (uint64_t)&v285);
  switch(v285)
  {
    case 0:
      uint64_t v80 = *v5;
      v274 = (void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))v76[1];
      v281.n128_u64[0] = v80;
      v281.n128_u64[1] = (unint64_t)v274;
      uint64_t v81 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v281, &v282);
      __n128 v82 = v282;
      __n128 v281 = v282;
      uint64_t v83 = v279;
      v273 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v279 + 16);
      sub_1C3F7E324(v80, (unint64_t)v274);
      v273(&v281, v68, v81, v278, v83);
      sub_1C3F7E2CC(v82.n128_i64[0], v82.n128_u64[1]);
      uint64_t v84 = v248;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v248 + 48))(v71, 1, v68) == 1)
      {
        (*(void (**)(char *, uint64_t))(v203 + 8))(v71, v204);
        uint64_t v85 = v276;
        goto LABEL_24;
      }
      uint64_t v172 = *(void (**)(char *, char *, uint64_t))(v84 + 32);
      v172(v75, v71, v68);
      v172(v202, v75, v68);
      uint64_t v173 = swift_getAssociatedTypeWitness();
      uint64_t v174 = v276;
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v173 - 8) + 56))(v174, 0, 1, v173);
    case 1:
      unint64_t v96 = v5[1];
      v281.n128_u64[0] = *v76;
      uint64_t v95 = v281.n128_u64[0];
      v281.n128_u64[1] = v96;
      uint64_t v275 = v6;
      uint64_t v97 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v281, &v282);
      __n128 v98 = v282;
      __n128 v281 = v282;
      uint64_t v99 = v279;
      uint64_t v100 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v279 + 16);
      sub_1C3F7E324(v95, v96);
      uint64_t v101 = v250;
      v100(&v281, v62, v97, v278, v99);
      sub_1C3F7E2CC(v98.n128_i64[0], v98.n128_u64[1]);
      uint64_t v102 = v249;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v249 + 48))(v101, 1, v62) == 1)
      {
        (*(void (**)(char *, uint64_t))(v207 + 8))(v101, v208);
        uint64_t v85 = v276;
        goto LABEL_24;
      }
      uint64_t v178 = v101;
      uint64_t v179 = *(void (**)(char *, char *, uint64_t))(v102 + 32);
      uint64_t v180 = v205;
      v179(v205, v178, v62);
      uint64_t v181 = &v238;
      goto LABEL_39;
    case 2:
      unint64_t v104 = v5[1];
      v281.n128_u64[0] = *v76;
      uint64_t v103 = v281.n128_u64[0];
      v281.n128_u64[1] = v104;
      uint64_t v275 = v6;
      uint64_t v105 = v253;
      uint64_t v106 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v281, &v282);
      __n128 v107 = v282;
      __n128 v281 = v282;
      uint64_t v108 = v279;
      v274 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v279 + 16);
      sub_1C3F7E324(v103, v104);
      uint64_t v109 = v252;
      v274(&v281, v105, v106, v278, v108);
      sub_1C3F7E2CC(v107.n128_i64[0], v107.n128_u64[1]);
      uint64_t v110 = v251;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v251 + 48))(v109, 1, v105) == 1)
      {
        (*(void (**)(char *, uint64_t))(v211 + 8))(v109, v212);
        uint64_t v85 = v276;
        goto LABEL_24;
      }
      uint64_t v182 = *(void (**)(char *, char *, uint64_t))(v110 + 32);
      uint64_t v183 = v209;
      v182(v209, v109, v105);
      v182(v210, v183, v105);
      goto LABEL_37;
    case 3:
      unint64_t v112 = v5[1];
      v281.n128_u64[0] = *v76;
      uint64_t v111 = v281.n128_u64[0];
      v281.n128_u64[1] = v112;
      uint64_t v113 = v256;
      uint64_t v114 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v281, &v282);
      __n128 v115 = v282;
      __n128 v281 = v282;
      uint64_t v116 = v279;
      v274 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v279 + 16);
      sub_1C3F7E324(v111, v112);
      __n128 v117 = v255;
      v274(&v281, v113, v114, v278, v116);
      sub_1C3F7E2CC(v115.n128_i64[0], v115.n128_u64[1]);
      uint64_t v118 = v254;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v254 + 48))(v117, 1, v113) == 1)
      {
        (*(void (**)(char *, uint64_t))(v215 + 8))(v117, v216);
        goto LABEL_16;
      }
      uint64_t v184 = v117;
      uint64_t v185 = *(void (**)(char *, char *, uint64_t))(v118 + 32);
      uint64_t v186 = v213;
      v185(v213, v184, v113);
      v185(v214, v186, v113);
      goto LABEL_37;
    case 4:
      unint64_t v120 = v5[1];
      v281.n128_u64[0] = *v76;
      uint64_t v119 = v281.n128_u64[0];
      v281.n128_u64[1] = v120;
      uint64_t v121 = v259;
      uint64_t v122 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v281, &v282);
      __n128 v123 = v282;
      __n128 v281 = v282;
      uint64_t v124 = v279;
      v274 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v279 + 16);
      sub_1C3F7E324(v119, v120);
      uint64_t v125 = v258;
      v274(&v281, v121, v122, v278, v124);
      sub_1C3F7E2CC(v123.n128_i64[0], v123.n128_u64[1]);
      uint64_t v126 = v257;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v257 + 48))(v125, 1, v121) == 1)
      {
        (*(void (**)(char *, uint64_t))(v219 + 8))(v125, v220);
        goto LABEL_16;
      }
      uint64_t v187 = v125;
      uint64_t v188 = *(void (**)(char *, char *, uint64_t))(v126 + 32);
      uint64_t v189 = v217;
      v188(v217, v187, v121);
      v188(v218, v189, v121);
      goto LABEL_37;
    case 5:
      unint64_t v128 = v5[1];
      v281.n128_u64[0] = *v76;
      uint64_t v127 = v281.n128_u64[0];
      v281.n128_u64[1] = v128;
      uint64_t v129 = v262;
      uint64_t v130 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v281, &v282);
      __n128 v131 = v282;
      __n128 v281 = v282;
      uint64_t v132 = v279;
      v274 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v279 + 16);
      sub_1C3F7E324(v127, v128);
      __n128 v133 = v261;
      v274(&v281, v129, v130, v278, v132);
      sub_1C3F7E2CC(v131.n128_i64[0], v131.n128_u64[1]);
      uint64_t v134 = v260;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v260 + 48))(v133, 1, v129) != 1)
      {
        uint64_t v190 = v133;
        uint64_t v191 = *(void (**)(char *, char *, uint64_t))(v134 + 32);
        uint64_t v192 = v221;
        v191(v221, v190, v129);
        v191(v222, v192, v129);
        goto LABEL_37;
      }
      (*(void (**)(char *, uint64_t))(v223 + 8))(v133, v224);
LABEL_16:
      uint64_t v85 = v276;
      goto LABEL_24;
    case 6:
      unint64_t v136 = v5[1];
      v281.n128_u64[0] = *v76;
      uint64_t v135 = v281.n128_u64[0];
      v281.n128_u64[1] = v136;
      uint64_t v275 = v6;
      uint64_t v62 = v265;
      uint64_t v137 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v281, &v282);
      __n128 v138 = v282;
      __n128 v281 = v282;
      uint64_t v139 = v279;
      uint64_t v140 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v279 + 16);
      sub_1C3F7E324(v135, v136);
      uint64_t v141 = v264;
      v140(&v281, v62, v137, v278, v139);
      sub_1C3F7E2CC(v138.n128_i64[0], v138.n128_u64[1]);
      uint64_t v142 = v263;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v263 + 48))(v141, 1, v62) == 1)
      {
        (*(void (**)(char *, uint64_t))(v227 + 8))(v141, v228);
        goto LABEL_23;
      }
      uint64_t v193 = v141;
      uint64_t v179 = *(void (**)(char *, char *, uint64_t))(v142 + 32);
      uint64_t v180 = v225;
      v179(v225, v193, v62);
      uint64_t v181 = &v258;
      goto LABEL_39;
    case 7:
      unint64_t v144 = v5[1];
      v281.n128_u64[0] = *v76;
      uint64_t v143 = v281.n128_u64[0];
      v281.n128_u64[1] = v144;
      uint64_t v275 = v6;
      uint64_t v145 = v268;
      uint64_t v146 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v281, &v282);
      __n128 v147 = v282;
      __n128 v281 = v282;
      uint64_t v148 = v279;
      __n128 v149 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v279 + 16);
      sub_1C3F7E324(v143, v144);
      __n128 v150 = v267;
      v149(&v281, v145, v146, v278, v148);
      sub_1C3F7E2CC(v147.n128_i64[0], v147.n128_u64[1]);
      uint64_t v151 = v266;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v266 + 48))(v150, 1, v145) == 1)
      {
        (*(void (**)(char *, uint64_t))(v231 + 8))(v150, v232);
        goto LABEL_23;
      }
      uint64_t v194 = v150;
      uint64_t v195 = *(void (**)(char *, char *, uint64_t))(v151 + 32);
      uint64_t v196 = v229;
      v195(v229, v194, v145);
      v195(v230, v196, v145);
      goto LABEL_37;
    case 8:
      unint64_t v163 = v5[1];
      v281.n128_u64[0] = *v76;
      uint64_t v162 = v281.n128_u64[0];
      v281.n128_u64[1] = v163;
      uint64_t v275 = v6;
      uint64_t v164 = v247;
      uint64_t v165 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v281, &v282);
      __n128 v166 = v282;
      __n128 v281 = v282;
      uint64_t v167 = v279;
      uint64_t v168 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v279 + 16);
      sub_1C3F7E324(v162, v163);
      uint64_t v169 = v246;
      v168(&v281, v164, v165, v278, v167);
      sub_1C3F7E2CC(v166.n128_i64[0], v166.n128_u64[1]);
      uint64_t v170 = v245;
      int v171 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v245 + 48))(v169, 1, v164);
      uint64_t v85 = v276;
      if (v171 == 1)
      {
        (*(void (**)(char *, uint64_t))(v235 + 8))(v169, v236);
        goto LABEL_24;
      }
      uint64_t v199 = *(void (**)(char *, char *, uint64_t))(v170 + 32);
      uint64_t v200 = v233;
      v199(v233, v169, v164);
      v199(v234, v200, v164);
      uint64_t v197 = swift_getAssociatedTypeWitness();
      goto LABEL_40;
    case 9:
      unint64_t v153 = v5[1];
      v281.n128_u64[0] = *v76;
      uint64_t v152 = v281.n128_u64[0];
      v281.n128_u64[1] = v153;
      uint64_t v275 = v6;
      uint64_t v62 = v271;
      uint64_t v154 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v281, &v282);
      __n128 v155 = v282;
      __n128 v281 = v282;
      uint64_t v156 = v279;
      uint64_t v157 = *(void (**)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v279 + 16);
      sub_1C3F7E324(v152, v153);
      uint64_t v158 = v270;
      v157(&v281, v62, v154, v278, v156);
      sub_1C3F7E2CC(v155.n128_i64[0], v155.n128_u64[1]);
      uint64_t v159 = v269;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v269 + 48))(v158, 1, v62) == 1)
      {
        (*(void (**)(char *, uint64_t))(v239 + 8))(v158, v240);
        goto LABEL_23;
      }
      uint64_t v198 = v158;
      uint64_t v179 = *(void (**)(char *, char *, uint64_t))(v159 + 32);
      uint64_t v180 = v237;
      v179(v237, v198, v62);
      uint64_t v181 = &v270;
LABEL_39:
      v179(*(v181 - 32), v180, v62);
      uint64_t v197 = swift_getAssociatedTypeWitness();
      uint64_t v85 = v276;
      goto LABEL_40;
    default:
      unint64_t v87 = v5[1];
      v281.n128_u64[0] = *v76;
      uint64_t v86 = v281.n128_u64[0];
      v281.n128_u64[1] = v87;
      uint64_t v275 = v6;
      __n128 v88 = v273;
      uint64_t v89 = swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v281, &v282);
      __n128 v90 = v282;
      __n128 v281 = v282;
      uint64_t v91 = v279;
      uint64_t v92 = *(void (**)(__n128 *, void, uint64_t, uint64_t, uint64_t))(v279 + 16);
      sub_1C3F7E324(v86, v87);
      uint64_t v93 = v274;
      v92(&v281, v88, v89, v278, v91);
      sub_1C3F7E2CC(v90.n128_i64[0], v90.n128_u64[1]);
      uint64_t v94 = v272;
      if ((*(unsigned int (**)(void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t)))(v272 + 48))(v93, 1, v88) == 1)
      {
        (*(void (**)(void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(v243 + 8))(v274, v244);
LABEL_23:
        uint64_t v85 = v276;
LABEL_24:
        uint64_t v160 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v160 - 8) + 56))(v85, 1, 1, v160);
      }
      else
      {
        uint64_t v175 = *(void (**)(char *, void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t), void (*)(__n128 *, uint64_t, uint64_t, uint64_t, uint64_t)))(v94 + 32);
        uint64_t v176 = v241;
        uint64_t v177 = v273;
        v175((char *)v241, v274, v273);
        v175(v242, v176, v177);
LABEL_37:
        uint64_t v197 = swift_getAssociatedTypeWitness();
        uint64_t v85 = v276;
LABEL_40:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v197 - 8) + 56))(v85, 0, 1, v197);
      }
  }
}

uint64_t sub_1C40ED3D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v240 = a1;
  uint64_t v238 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v204 = sub_1C4497B38();
  uint64_t v231 = *(void *)(v204 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v204);
  uint64_t v236 = (uint64_t)&v164 - v8;
  uint64_t v237 = AssociatedTypeWitness;
  uint64_t v235 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v205 = (char *)&v164 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  __n128 v230 = (char *)&v164 - v11;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v203 = sub_1C4497B38();
  uint64_t v202 = *(void *)(v203 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v203);
  uint64_t v233 = (uint64_t)&v164 - v14;
  uint64_t v234 = v12;
  uint64_t v232 = *(void *)(v12 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v201 = (char *)&v164 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v200 = (char *)&v164 - v17;
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v199 = sub_1C4497B38();
  uint64_t v198 = *(void *)(v199 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v199);
  uint64_t v207 = (uint64_t)&v164 - v20;
  uint64_t v208 = v18;
  uint64_t v206 = *(void *)(v18 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v197 = (char *)&v164 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v196 = (char *)&v164 - v23;
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v195 = sub_1C4497B38();
  uint64_t v194 = *(void *)(v195 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v195);
  uint64_t v228 = (uint64_t)&v164 - v26;
  uint64_t v229 = v24;
  uint64_t v227 = *(void *)(v24 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v193 = (char *)&v164 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v192 = (char *)&v164 - v29;
  uint64_t v30 = swift_getAssociatedTypeWitness();
  uint64_t v191 = sub_1C4497B38();
  uint64_t v190 = *(void *)(v191 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v191);
  uint64_t v225 = (uint64_t)&v164 - v32;
  uint64_t v226 = v30;
  uint64_t v224 = *(void *)(v30 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v189 = (char *)&v164 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33);
  uint64_t v188 = (char *)&v164 - v35;
  uint64_t v36 = swift_getAssociatedTypeWitness();
  uint64_t v187 = sub_1C4497B38();
  uint64_t v186 = *(void *)(v187 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v187);
  uint64_t v222 = (uint64_t)&v164 - v38;
  uint64_t v223 = v36;
  uint64_t v221 = *(void *)(v36 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v185 = (char *)&v164 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v39);
  uint64_t v184 = (char *)&v164 - v41;
  uint64_t v42 = swift_getAssociatedTypeWitness();
  uint64_t v183 = sub_1C4497B38();
  uint64_t v182 = *(void *)(v183 - 8);
  uint64_t v43 = MEMORY[0x1F4188790](v183);
  uint64_t v219 = (uint64_t)&v164 - v44;
  uint64_t v220 = v42;
  uint64_t v218 = *(void *)(v42 - 8);
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v181 = (char *)&v164 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v45);
  uint64_t v180 = (char *)&v164 - v47;
  uint64_t v48 = swift_getAssociatedTypeWitness();
  uint64_t v179 = sub_1C4497B38();
  uint64_t v178 = *(void *)(v179 - 8);
  uint64_t v49 = MEMORY[0x1F4188790](v179);
  uint64_t v216 = (uint64_t)&v164 - v50;
  uint64_t v217 = v48;
  uint64_t v215 = *(void *)(v48 - 8);
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v177 = (char *)&v164 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v51);
  uint64_t v176 = (char *)&v164 - v53;
  uint64_t v54 = swift_getAssociatedTypeWitness();
  uint64_t v175 = sub_1C4497B38();
  uint64_t v174 = *(void *)(v175 - 8);
  uint64_t v55 = MEMORY[0x1F4188790](v175);
  uint64_t v213 = (uint64_t)&v164 - v56;
  uint64_t v214 = v54;
  uint64_t v212 = *(void *)(v54 - 8);
  uint64_t v57 = MEMORY[0x1F4188790](v55);
  uint64_t v173 = (char *)&v164 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v57);
  uint64_t v172 = (char *)&v164 - v59;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v171 = sub_1C4497B38();
  uint64_t v170 = *(void *)(v171 - 8);
  uint64_t v61 = MEMORY[0x1F4188790](v171);
  uint64_t v211 = (uint64_t)&v164 - v62;
  uint64_t v210 = *(void *)(v60 - 8);
  uint64_t v63 = MEMORY[0x1F4188790](v61);
  uint64_t v169 = (char *)&v164 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v63);
  uint64_t v168 = (char *)&v164 - v65;
  uint64_t v66 = swift_getAssociatedTypeWitness();
  uint64_t v167 = sub_1C4497B38();
  uint64_t v166 = *(void *)(v167 - 8);
  uint64_t v67 = MEMORY[0x1F4188790](v167);
  uint64_t v69 = (char *)&v164 - v68;
  uint64_t v209 = *(void *)(v66 - 8);
  uint64_t v70 = MEMORY[0x1F4188790](v67);
  uint64_t v165 = (char *)&v164 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v70);
  uint64_t v73 = (char *)&v164 - v72;
  uint64_t v74 = v3;
  uint64_t v75 = swift_getAssociatedTypeWitness();
  uint64_t v239 = v4;
  uint64_t v241 = v5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v243.n128_u64[0] = v75;
  v243.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v244 = &protocol witness table for Int;
  uint64_t v245 = MEMORY[0x1E4FBB560];
  uint64_t v77 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v77, (uint64_t)&v246);
  switch(v246)
  {
    case 0:
      unint64_t v79 = v3[1];
      v242.n128_u64[0] = *v3;
      uint64_t v78 = v242.n128_u64[0];
      v242.n128_u64[1] = v79;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v242, &v243);
      __n128 v80 = v243;
      __n128 v242 = v243;
      sub_1C3F7E324(v78, v79);
      uint64_t v81 = type metadata accessor for WeakRef();
      sub_1C44749D8(v81, (uint64_t)v69);
      sub_1C3F7E2CC(v80.n128_i64[0], v80.n128_u64[1]);
      uint64_t v82 = v209;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v69, 1, v66) == 1)
      {
        (*(void (**)(char *, uint64_t))(v166 + 8))(v69, v167);
        uint64_t v83 = v238;
        goto LABEL_23;
      }
      uint64_t v151 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
      v151(v73, v69, v66);
      v151(v165, v73, v66);
      uint64_t v152 = swift_getAssociatedTypeWitness();
      uint64_t v153 = v238;
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v152 - 8) + 56))(v153, 0, 1, v152);
    case 1:
      unint64_t v94 = v3[1];
      v242.n128_u64[0] = *v74;
      uint64_t v93 = v242.n128_u64[0];
      v242.n128_u64[1] = v94;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v242, &v243);
      __n128 v95 = v243;
      __n128 v242 = v243;
      sub_1C3F7E324(v93, v94);
      uint64_t v96 = type metadata accessor for WeakRef();
      uint64_t v97 = v211;
      sub_1C44749D8(v96, v211);
      sub_1C3F7E2CC(v95.n128_i64[0], v95.n128_u64[1]);
      uint64_t v98 = v210;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v210 + 48))(v97, 1, v60) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v97, v171);
        goto LABEL_22;
      }
      uint64_t v157 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 32);
      uint64_t v158 = v168;
      v157(v168, v97, v60);
      v157(v169, (uint64_t)v158, v60);
      uint64_t v159 = swift_getAssociatedTypeWitness();
      uint64_t v83 = v238;
      goto LABEL_38;
    case 2:
      unint64_t v100 = v3[1];
      v242.n128_u64[0] = *v74;
      uint64_t v99 = v242.n128_u64[0];
      v242.n128_u64[1] = v100;
      uint64_t v88 = v214;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v242, &v243);
      __n128 v101 = v243;
      __n128 v242 = v243;
      sub_1C3F7E324(v99, v100);
      uint64_t v102 = type metadata accessor for WeakRef();
      uint64_t v103 = v213;
      sub_1C44749D8(v102, v213);
      sub_1C3F7E2CC(v101.n128_i64[0], v101.n128_u64[1]);
      uint64_t v104 = v212;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v212 + 48))(v103, 1, v88) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v103, v175);
        goto LABEL_22;
      }
      uint64_t v154 = *(void (**)(char *, uint64_t, uint64_t))(v104 + 32);
      uint64_t v160 = v172;
      v154(v172, v103, v88);
      uint64_t v161 = (uint64_t *)&v205;
      goto LABEL_36;
    case 3:
      unint64_t v106 = v3[1];
      v242.n128_u64[0] = *v74;
      uint64_t v105 = v242.n128_u64[0];
      v242.n128_u64[1] = v106;
      uint64_t v88 = v217;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v242, &v243);
      __n128 v107 = v243;
      __n128 v242 = v243;
      sub_1C3F7E324(v105, v106);
      uint64_t v108 = type metadata accessor for WeakRef();
      uint64_t v109 = v216;
      sub_1C44749D8(v108, v216);
      sub_1C3F7E2CC(v107.n128_i64[0], v107.n128_u64[1]);
      uint64_t v110 = v215;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v215 + 48))(v109, 1, v88) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v178 + 8))(v109, v179);
        goto LABEL_22;
      }
      uint64_t v154 = *(void (**)(char *, uint64_t, uint64_t))(v110 + 32);
      uint64_t v160 = v176;
      v154(v176, v109, v88);
      uint64_t v161 = &v209;
      goto LABEL_36;
    case 4:
      unint64_t v112 = v3[1];
      v242.n128_u64[0] = *v74;
      uint64_t v111 = v242.n128_u64[0];
      v242.n128_u64[1] = v112;
      uint64_t v88 = v220;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v242, &v243);
      __n128 v113 = v243;
      __n128 v242 = v243;
      sub_1C3F7E324(v111, v112);
      uint64_t v114 = type metadata accessor for WeakRef();
      uint64_t v115 = v219;
      sub_1C44749D8(v114, v219);
      sub_1C3F7E2CC(v113.n128_i64[0], v113.n128_u64[1]);
      uint64_t v116 = v218;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v218 + 48))(v115, 1, v88) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v182 + 8))(v115, v183);
        goto LABEL_22;
      }
      uint64_t v154 = *(void (**)(char *, uint64_t, uint64_t))(v116 + 32);
      uint64_t v160 = v180;
      v154(v180, v115, v88);
      uint64_t v161 = &v213;
      goto LABEL_36;
    case 5:
      unint64_t v118 = v3[1];
      v242.n128_u64[0] = *v74;
      uint64_t v117 = v242.n128_u64[0];
      v242.n128_u64[1] = v118;
      uint64_t v88 = v223;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v242, &v243);
      __n128 v119 = v243;
      __n128 v242 = v243;
      sub_1C3F7E324(v117, v118);
      uint64_t v120 = type metadata accessor for WeakRef();
      uint64_t v121 = v222;
      sub_1C44749D8(v120, v222);
      sub_1C3F7E2CC(v119.n128_i64[0], v119.n128_u64[1]);
      uint64_t v122 = v221;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v221 + 48))(v121, 1, v88) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v121, v187);
        goto LABEL_22;
      }
      uint64_t v154 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 32);
      uint64_t v160 = v184;
      v154(v184, v121, v88);
      uint64_t v161 = &v217;
      goto LABEL_36;
    case 6:
      unint64_t v124 = v3[1];
      v242.n128_u64[0] = *v74;
      uint64_t v123 = v242.n128_u64[0];
      v242.n128_u64[1] = v124;
      uint64_t v88 = v226;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v242, &v243);
      __n128 v125 = v243;
      __n128 v242 = v243;
      sub_1C3F7E324(v123, v124);
      uint64_t v126 = type metadata accessor for WeakRef();
      uint64_t v127 = v225;
      sub_1C44749D8(v126, v225);
      sub_1C3F7E2CC(v125.n128_i64[0], v125.n128_u64[1]);
      uint64_t v128 = v224;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v224 + 48))(v127, 1, v88) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v127, v191);
        goto LABEL_22;
      }
      uint64_t v154 = *(void (**)(char *, uint64_t, uint64_t))(v128 + 32);
      uint64_t v160 = v188;
      v154(v188, v127, v88);
      uint64_t v161 = &v221;
      goto LABEL_36;
    case 7:
      unint64_t v130 = v3[1];
      v242.n128_u64[0] = *v74;
      uint64_t v129 = v242.n128_u64[0];
      v242.n128_u64[1] = v130;
      uint64_t v88 = v229;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v242, &v243);
      __n128 v131 = v243;
      __n128 v242 = v243;
      sub_1C3F7E324(v129, v130);
      uint64_t v132 = type metadata accessor for WeakRef();
      uint64_t v133 = v228;
      sub_1C44749D8(v132, v228);
      sub_1C3F7E2CC(v131.n128_i64[0], v131.n128_u64[1]);
      uint64_t v134 = v227;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v227 + 48))(v133, 1, v88) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v194 + 8))(v133, v195);
        goto LABEL_22;
      }
      uint64_t v154 = *(void (**)(char *, uint64_t, uint64_t))(v134 + 32);
      uint64_t v160 = v192;
      v154(v192, v133, v88);
      uint64_t v161 = &v225;
      goto LABEL_36;
    case 8:
      unint64_t v144 = v3[1];
      v242.n128_u64[0] = *v74;
      uint64_t v143 = v242.n128_u64[0];
      v242.n128_u64[1] = v144;
      uint64_t v145 = v208;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v242, &v243);
      __n128 v146 = v243;
      __n128 v242 = v243;
      sub_1C3F7E324(v143, v144);
      uint64_t v147 = type metadata accessor for WeakRef();
      uint64_t v148 = v207;
      sub_1C44749D8(v147, v207);
      sub_1C3F7E2CC(v146.n128_i64[0], v146.n128_u64[1]);
      uint64_t v149 = v206;
      int v150 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v206 + 48))(v148, 1, v145);
      uint64_t v83 = v238;
      if (v150 == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v148, v199);
        goto LABEL_23;
      }
      uint64_t v162 = *(void (**)(char *, uint64_t, uint64_t))(v149 + 32);
      unint64_t v163 = v196;
      v162(v196, v148, v145);
      v162(v197, (uint64_t)v163, v145);
      uint64_t v159 = swift_getAssociatedTypeWitness();
      goto LABEL_38;
    case 9:
      unint64_t v136 = v3[1];
      v242.n128_u64[0] = *v74;
      uint64_t v135 = v242.n128_u64[0];
      v242.n128_u64[1] = v136;
      uint64_t v88 = v234;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v242, &v243);
      __n128 v137 = v243;
      __n128 v242 = v243;
      sub_1C3F7E324(v135, v136);
      uint64_t v138 = type metadata accessor for WeakRef();
      uint64_t v139 = v233;
      sub_1C44749D8(v138, v233);
      sub_1C3F7E2CC(v137.n128_i64[0], v137.n128_u64[1]);
      uint64_t v140 = v232;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v232 + 48))(v139, 1, v88) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v139, v203);
        goto LABEL_22;
      }
      uint64_t v154 = *(void (**)(char *, uint64_t, uint64_t))(v140 + 32);
      uint64_t v160 = v200;
      v154(v200, v139, v88);
      uint64_t v161 = &v233;
LABEL_36:
      __n128 v155 = (char *)*(v161 - 32);
      uint64_t v156 = v160;
      goto LABEL_37;
    default:
      uint64_t v84 = v230;
      uint64_t v85 = v231;
      unint64_t v87 = v3[1];
      v242.n128_u64[0] = *v74;
      uint64_t v86 = v242.n128_u64[0];
      v242.n128_u64[1] = v87;
      uint64_t v88 = v237;
      swift_getAssociatedConformanceWitness();
      WeakRef.init(id:)(&v242, &v243);
      __n128 v89 = v243;
      __n128 v242 = v243;
      sub_1C3F7E324(v86, v87);
      uint64_t v90 = type metadata accessor for WeakRef();
      uint64_t v91 = v236;
      sub_1C44749D8(v90, v236);
      sub_1C3F7E2CC(v89.n128_i64[0], v89.n128_u64[1]);
      uint64_t v92 = v235;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v235 + 48))(v91, 1, v88) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v91, v204);
LABEL_22:
        uint64_t v83 = v238;
LABEL_23:
        uint64_t v141 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v141 - 8) + 56))(v83, 1, 1, v141);
      }
      else
      {
        uint64_t v154 = *(void (**)(char *, uint64_t, uint64_t))(v92 + 32);
        v154(v84, v91, v88);
        __n128 v155 = v205;
        uint64_t v156 = v84;
LABEL_37:
        v154(v155, (uint64_t)v156, v88);
        uint64_t v159 = swift_getAssociatedTypeWitness();
        uint64_t v83 = v238;
LABEL_38:
        swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v159 - 8) + 56))(v83, 0, 1, v159);
      }
  }
}

uint64_t sub_1C40EF0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v158 = a2;
  uint64_t v159 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v154 = (char *)&v126 - v4;
  uint64_t v153 = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_1C4497B38();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v152 = (char *)&v126 - v6;
  uint64_t v129 = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v128 = (char *)&v126 - v8;
  uint64_t v151 = swift_getAssociatedTypeWitness();
  uint64_t v9 = sub_1C4497B38();
  MEMORY[0x1F4188790](v9 - 8);
  int v150 = (char *)&v126 - v10;
  uint64_t v149 = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_1C4497B38();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v148 = (char *)&v126 - v12;
  uint64_t v147 = swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_1C4497B38();
  MEMORY[0x1F4188790](v13 - 8);
  __n128 v146 = (char *)&v126 - v14;
  uint64_t v145 = swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_1C4497B38();
  MEMORY[0x1F4188790](v15 - 8);
  unint64_t v144 = (char *)&v126 - v16;
  uint64_t v143 = swift_getAssociatedTypeWitness();
  uint64_t v17 = sub_1C4497B38();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v142 = (char *)&v126 - v18;
  uint64_t v141 = swift_getAssociatedTypeWitness();
  uint64_t v19 = sub_1C4497B38();
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v140 = (char *)&v126 - v20;
  uint64_t v139 = swift_getAssociatedTypeWitness();
  uint64_t v21 = sub_1C4497B38();
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v138 = (char *)&v126 - v22;
  uint64_t v137 = swift_getAssociatedTypeWitness();
  uint64_t v23 = sub_1C4497B38();
  MEMORY[0x1F4188790](v23 - 8);
  unint64_t v136 = (char *)&v126 - v24;
  swift_getAssociatedTypeWitness();
  uint64_t v25 = sub_1C4497B38();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v156 = v25;
  uint64_t v157 = v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v135 = (char *)&v126 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v134 = (char *)&v126 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v127 = (char *)&v126 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v133 = (char *)&v126 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v132 = (char *)&v126 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  __n128 v131 = (char *)&v126 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  unint64_t v130 = (char *)&v126 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v43 = (char *)&v126 - v42;
  uint64_t v44 = MEMORY[0x1F4188790](v41);
  uint64_t v46 = (char *)&v126 - v45;
  uint64_t v47 = MEMORY[0x1F4188790](v44);
  uint64_t v49 = (char *)&v126 - v48;
  MEMORY[0x1F4188790](v47);
  uint64_t v51 = (char *)&v126 - v50;
  uint64_t v52 = v2;
  uint64_t v53 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v161.n128_u64[0] = v53;
  v161.n128_u64[1] = AssociatedConformanceWitness;
  uint64_t v162 = &protocol witness table for Int;
  uint64_t v163 = MEMORY[0x1E4FBB560];
  uint64_t v55 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v55, (uint64_t)&v164);
  switch(v164)
  {
    case 0:
      unint64_t v57 = v2[1];
      v160.n128_u64[0] = *v52;
      uint64_t v56 = v160.n128_u64[0];
      v160.n128_u64[1] = v57;
      uint64_t v58 = v137;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      __n128 v60 = WeakRef.init(id:)(&v160, &v161);
      unint64_t v62 = v161.n128_u64[1];
      unint64_t v61 = v161.n128_u64[0];
      uint64_t v64 = v156;
      uint64_t v63 = v157;
      uint64_t v65 = v159;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v157 + 16))(v51, v159, v156, v60);
      sub_1C3F7E324(v56, v57);
      uint64_t v66 = (__n128 *)&v165;
      goto LABEL_15;
    case 1:
      unint64_t v72 = v2[1];
      v160.n128_u64[0] = *v52;
      uint64_t v71 = v160.n128_u64[0];
      v160.n128_u64[1] = v72;
      uint64_t v73 = v139;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      __n128 v74 = WeakRef.init(id:)(&v160, &v161);
      __n128 v75 = v161;
      uint64_t v64 = v156;
      uint64_t v63 = v157;
      uint64_t v65 = v159;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v157 + 16))(v49, v159, v156, v74);
      sub_1C3F7E324(v71, v72);
      BOOL v76 = v138;
      int v77 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v76, v77 ^ 1u, 1, v73);
      __n128 v160 = v75;
      uint64_t v78 = (uint64_t)v76;
      uint64_t v79 = v73;
      goto LABEL_17;
    case 2:
      unint64_t v81 = v2[1];
      v160.n128_u64[0] = *v52;
      uint64_t v80 = v160.n128_u64[0];
      v160.n128_u64[1] = v81;
      uint64_t v82 = v141;
      uint64_t v83 = swift_getAssociatedConformanceWitness();
      __n128 v84 = WeakRef.init(id:)(&v160, &v161);
      __n128 v85 = v161;
      uint64_t v87 = v156;
      uint64_t v86 = v157;
      uint64_t v88 = v159;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v157 + 16))(v46, v159, v156, v84);
      sub_1C3F7E324(v80, v81);
      __n128 v89 = v140;
      int v90 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v89, v90 ^ 1u, 1, v82);
      __n128 v160 = v85;
      uint64_t v91 = (uint64_t)v89;
      goto LABEL_7;
    case 3:
      unint64_t v93 = v2[1];
      v160.n128_u64[0] = *v2;
      uint64_t v92 = v160.n128_u64[0];
      v160.n128_u64[1] = v93;
      uint64_t v82 = v143;
      uint64_t v83 = swift_getAssociatedConformanceWitness();
      __n128 v94 = WeakRef.init(id:)(&v160, &v161);
      __n128 v95 = v161;
      uint64_t v87 = v156;
      uint64_t v86 = v157;
      uint64_t v88 = v159;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v157 + 16))(v43, v159, v156, v94);
      sub_1C3F7E324(v92, v93);
      uint64_t v96 = v142;
      int v97 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v96, v97 ^ 1u, 1, v82);
      __n128 v160 = v95;
      uint64_t v91 = (uint64_t)v96;
LABEL_7:
      sub_1C4055840(v91, (uint64_t)&v160, v82, v83);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v86 + 8))(v88, v87);
    case 4:
      unint64_t v100 = v2[1];
      v160.n128_u64[0] = *v52;
      uint64_t v99 = v160.n128_u64[0];
      v160.n128_u64[1] = v100;
      uint64_t v101 = v145;
      uint64_t v102 = swift_getAssociatedConformanceWitness();
      __n128 v103 = WeakRef.init(id:)(&v160, &v161);
      __n128 v104 = v161;
      uint64_t v106 = v156;
      uint64_t v105 = v157;
      uint64_t v107 = v159;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v157 + 16))(v130, v159, v156, v103);
      sub_1C3F7E324(v99, v100);
      uint64_t v108 = (uint64_t)v144;
      int v109 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v108, v109 ^ 1u, 1, v101);
      __n128 v160 = v104;
      sub_1C4055840(v108, (uint64_t)&v160, v101, v102);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 8))(v107, v106);
    case 5:
      unint64_t v111 = v2[1];
      v160.n128_u64[0] = *v52;
      uint64_t v110 = v160.n128_u64[0];
      v160.n128_u64[1] = v111;
      uint64_t v58 = v147;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      __n128 v112 = WeakRef.init(id:)(&v160, &v161);
      unint64_t v62 = v161.n128_u64[1];
      unint64_t v61 = v161.n128_u64[0];
      uint64_t v64 = v156;
      uint64_t v63 = v157;
      uint64_t v65 = v159;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v157 + 16))(v131, v159, v156, v112);
      sub_1C3F7E324(v110, v111);
      uint64_t v70 = v146;
      goto LABEL_16;
    case 6:
      unint64_t v114 = v2[1];
      v160.n128_u64[0] = *v52;
      uint64_t v113 = v160.n128_u64[0];
      v160.n128_u64[1] = v114;
      uint64_t v58 = v149;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      __n128 v115 = WeakRef.init(id:)(&v160, &v161);
      unint64_t v62 = v161.n128_u64[1];
      unint64_t v61 = v161.n128_u64[0];
      uint64_t v64 = v156;
      uint64_t v63 = v157;
      uint64_t v65 = v159;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v157 + 16))(v132, v159, v156, v115);
      sub_1C3F7E324(v113, v114);
      uint64_t v70 = v148;
      goto LABEL_16;
    case 7:
      unint64_t v117 = v2[1];
      v160.n128_u64[0] = *v52;
      uint64_t v116 = v160.n128_u64[0];
      v160.n128_u64[1] = v117;
      uint64_t v58 = v151;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      __n128 v118 = WeakRef.init(id:)(&v160, &v161);
      unint64_t v62 = v161.n128_u64[1];
      unint64_t v61 = v161.n128_u64[0];
      uint64_t v64 = v156;
      uint64_t v63 = v157;
      uint64_t v65 = v159;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v157 + 16))(v133, v159, v156, v118);
      sub_1C3F7E324(v116, v117);
      uint64_t v70 = v150;
      goto LABEL_16;
    case 8:
      unint64_t v123 = v2[1];
      v160.n128_u64[0] = *v52;
      uint64_t v122 = v160.n128_u64[0];
      v160.n128_u64[1] = v123;
      uint64_t v58 = v129;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      __n128 v124 = WeakRef.init(id:)(&v160, &v161);
      unint64_t v62 = v161.n128_u64[1];
      unint64_t v61 = v161.n128_u64[0];
      uint64_t v64 = v156;
      uint64_t v63 = v157;
      uint64_t v65 = v159;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v157 + 16))(v127, v159, v156, v124);
      sub_1C3F7E324(v122, v123);
      uint64_t v66 = &v160;
LABEL_15:
      uint64_t v70 = (char *)v66[-16].n128_u64[0];
      goto LABEL_16;
    case 9:
      unint64_t v120 = v2[1];
      v160.n128_u64[0] = *v52;
      uint64_t v119 = v160.n128_u64[0];
      v160.n128_u64[1] = v120;
      uint64_t v58 = v153;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      __n128 v121 = WeakRef.init(id:)(&v160, &v161);
      unint64_t v62 = v161.n128_u64[1];
      unint64_t v61 = v161.n128_u64[0];
      uint64_t v64 = v156;
      uint64_t v63 = v157;
      uint64_t v65 = v159;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v157 + 16))(v134, v159, v156, v121);
      sub_1C3F7E324(v119, v120);
      uint64_t v70 = v152;
      goto LABEL_16;
    default:
      unint64_t v68 = v2[1];
      v160.n128_u64[0] = *v52;
      uint64_t v67 = v160.n128_u64[0];
      v160.n128_u64[1] = v68;
      uint64_t v58 = AssociatedTypeWitness;
      uint64_t v59 = swift_getAssociatedConformanceWitness();
      __n128 v69 = WeakRef.init(id:)(&v160, &v161);
      unint64_t v62 = v161.n128_u64[1];
      unint64_t v61 = v161.n128_u64[0];
      uint64_t v64 = v156;
      uint64_t v63 = v157;
      uint64_t v65 = v159;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v157 + 16))(v135, v159, v156, v69);
      sub_1C3F7E324(v67, v68);
      uint64_t v70 = v154;
LABEL_16:
      int v125 = swift_dynamicCast();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v70, v125 ^ 1u, 1, v58);
      v160.n128_u64[0] = v61;
      v160.n128_u64[1] = v62;
      uint64_t v78 = (uint64_t)v70;
      uint64_t v79 = v58;
LABEL_17:
      sub_1C4055840(v78, (uint64_t)&v160, v79, v59);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v65, v64);
  }
}

uint64_t WeakTagged_10.subscript.getter(uint64_t a1, uint64_t a2)
{
  return sub_1C40F00F8(a1, a2, (void (*)(uint64_t, uint64_t))sub_1C40ED3D4);
}

uint64_t sub_1C40F00F8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = swift_retain();
  a3(v5, a2);
  return swift_release();
}

uint64_t sub_1C40F0174(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = type metadata accessor for WeakTagged_10();
  swift_retain();
  sub_1C40F1F80(a1, v4, v5, (uint64_t)&protocol requirements base descriptor for Tagged_10, (uint64_t)&associated type descriptor for Tagged_10.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40EF0B0);
  return swift_release();
}

uint64_t WeakTagged_10.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C40F1F80(a1, a2, a3, (uint64_t)&protocol requirements base descriptor for Tagged_10, (uint64_t)&associated type descriptor for Tagged_10.AnyType, (uint64_t (*)(char *, uint64_t, uint64_t))sub_1C40EF0B0);
  swift_release();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_1C4497B38();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  return v5(a1, v4);
}

void (*WeakTagged_10.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *uint64_t v7 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v8 = sub_1C4497B38();
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  v7[6] = malloc(v10);
  WeakTagged_10.subscript.getter(a2, a3);
  return sub_1C40F03D0;
}

void sub_1C40F03D0(uint64_t **a1, char a2)
{
}

uint64_t WeakTagged_10.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F0424(a1, a2, a3, a4, (uint64_t (*)(void))sub_1C40ED3D4);
}

uint64_t sub_1C40F0424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = *(void *)(a1 + *(int *)(type metadata accessor for Capsule() + 40));
  if (result)
  {
    return a5();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WeakTagged_10.copy(renamingReferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4086A34(a1, a2, (uint64_t (*)(char *, uint64_t *, uint64_t, uint64_t))WeakTagged_10.init(_:id:), a3);
}

uint64_t WeakTagged_10.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C40F04E0(a1, a2, (void (*)(unint64_t *, uint64_t))WeakTagged_10.copy(renamingReferences:));
}

uint64_t sub_1C40F04E0(unint64_t a1, uint64_t a2, void (*a3)(unint64_t *, uint64_t))
{
  if (a1) {
    unint64_t v5 = a1;
  }
  else {
    unint64_t v5 = sub_1C3FE49A0(MEMORY[0x1E4FBC860]);
  }
  unint64_t v7 = v5;
  swift_bridgeObjectRetain();
  a3(&v7, a2);
  return swift_bridgeObjectRelease();
}

uint64_t WeakTagged_10.hash(into:)(uint64_t a1)
{
  return sub_1C40F0588(a1);
}

uint64_t sub_1C40F0588(uint64_t a1)
{
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  sub_1C3F7E324(*v1, v4);
  sub_1C4496568();
  sub_1C3F7E2CC(v3, v4);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for CRExtensible();
  return CRExtensible.hash(into:)(a1, v5);
}

uint64_t static WeakTagged_10.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F069C(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_10);
}

uint64_t sub_1C40F069C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  uint64_t v11 = *a2;
  unint64_t v12 = a2[1];
  sub_1C3F7E324(*a1, v10);
  sub_1C3F7E324(v11, v12);
  char v13 = sub_1C3FAD630(v9, v10, v11, v12);
  sub_1C3F7E2CC(v11, v12);
  sub_1C3F7E2CC(v9, v10);
  if ((v13 & 1) == 0) {
    return 0;
  }
  uint64_t v14 = *(int *)(a5(0, a3, a4) + 36);
  uint64_t v15 = (uint64_t)a1 + v14;
  uint64_t v16 = (uint64_t)a2 + v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v19 = MEMORY[0x1E4FBB560];
  return static CRExtensible.== infix(_:_:)(v15, v16, AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, v19);
}

uint64_t WeakTagged_10.hashValue.getter(uint64_t a1)
{
  return sub_1C4086CA8(a1, (void (*)(unsigned char *, uint64_t))WeakTagged_10.hash(into:));
}

uint64_t sub_1C40F081C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4086D20(a1, a2, a3, (void (*)(unsigned char *, uint64_t))WeakTagged_10.hash(into:));
}

uint64_t sub_1C40F0834(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static WeakTagged_10.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t WeakTagged_10.encode(to:)(void *a1)
{
  return sub_1C40F0858(a1);
}

uint64_t sub_1C40F0858(void *a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C3F7E324(v2, v3);
  sub_1C4498698();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
  sub_1C3FF6830();
  sub_1C4498348();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return sub_1C3F7E2CC(v2, v3);
}

uint64_t sub_1C40F0920@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return WeakTagged_10.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t WeakTagged_10.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return sub_1C40F0970(a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WeakTagged_10, 1, a4);
}

uint64_t sub_1C40F0970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void, uint64_t, uint64_t)@<X3>, int a5@<W4>, void *a6@<X8>)
{
  int v103 = a5;
  unint64_t v120 = a4;
  uint64_t v121 = a3;
  uint64_t v122 = a2;
  __n128 v124 = a6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0560);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v114 = &v102[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v108 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v112 = *(void *)(v108 - 8);
  MEMORY[0x1F4188790](v108);
  __n128 v115 = &v102[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v111 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1F4188790](v111);
  uint64_t v113 = &v102[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v110 = &v102[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  int v109 = &v102[-v15];
  MEMORY[0x1F4188790](v14);
  unint64_t v117 = &v102[-v16];
  uint64_t v129 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v17 = MEMORY[0x1F4188790](v129);
  uint64_t v126 = &v102[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v17);
  __n128 v118 = &v102[-v19];
  uint64_t v20 = type metadata accessor for Proto_Value(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v127 = &v102[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  int v125 = &v102[-v25];
  MEMORY[0x1F4188790](v24);
  uint64_t v128 = &v102[-v26];
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v28 = MEMORY[0x1F4188790](v27 - 8);
  unint64_t v123 = &v102[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v119 = &v102[-v31];
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v34 = &v102[-v33];
  MEMORY[0x1F4188790](v32);
  uint64_t v36 = &v102[-v35];
  unint64_t v130 = (unsigned char *)a1;
  uint64_t v37 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v37, (uint64_t)v36, &qword_1EBBC0540);
  uint64_t v38 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v21 + 48);
  unsigned int v39 = v38(v36, 1, v20);
  sub_1C3F962E0((uint64_t)v36, &qword_1EBBC0540);
  if (v39 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v40 = 0xD000000000000017;
    *(void *)(v40 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v40 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v130;
  sub_1C3F970C4(v37, (uint64_t)v34, &qword_1EBBC0540);
  if (v38(v34, 1, v20) == 1)
  {
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
    JUMPOUT(0x1C40F1C64);
  }
  uint64_t v42 = v38;
  uint64_t v43 = v128;
  sub_1C3F8ABD8((uint64_t)v34, (uint64_t)v128, type metadata accessor for Proto_Value);
  uint64_t v104 = v20;
  uint64_t v44 = *(void *)&v43[*(int *)(v20 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v45 = v117;
  sub_1C3F970C4(v44, (uint64_t)v117, &qword_1EBBBF8A0);
  uint64_t v46 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v47 + 48);
  uint64_t v105 = v47 + 48;
  uint64_t v106 = v48;
  if (v48(v45, 1, v46) == 1)
  {
    swift_retain();
    sub_1C3F962E0((uint64_t)v45, &qword_1EBBBF8A0);
    uint64_t v49 = v118;
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v49 = v118;
    if (EnumCaseMultiPayload == 11)
    {
      sub_1C3F8ABD8((uint64_t)v45, (uint64_t)v118, type metadata accessor for Proto_TaggedValue);
      goto LABEL_12;
    }
    swift_retain();
    sub_1C3F8B0A8((uint64_t)v45, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v51 = *(int *)(v129 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)&v49[v51] = qword_1EA39AF60;
LABEL_12:
  swift_retain();
  sub_1C3F8B0A8((uint64_t)v128, type metadata accessor for Proto_Value);
  uint64_t v52 = *(void *)&v49[*(int *)(v129 + 20)];
  swift_beginAccess();
  uint64_t v53 = *(unsigned char **)(v52 + 16);
  sub_1C3F8B0A8((uint64_t)v49, type metadata accessor for Proto_TaggedValue);
  __n128 v131 = v53;
  uint64_t v54 = v120(0, v122, v121);
  uint64_t v55 = (char *)v124 + *(int *)(v54 + 36);
  uint64_t AssociatedTypeWitness = (unsigned char *)swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v58 = v55;
  uint64_t v128 = AssociatedTypeWitness;
  unint64_t v120 = (uint64_t (*)(void, uint64_t, uint64_t))AssociatedConformanceWitness;
  CRExtensible.init(rawValue:)((uint64_t)&v131, (uint64_t)AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Int, MEMORY[0x1E4FBB560], v55);
  uint64_t v59 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  uint64_t v60 = v59;
  unint64_t v61 = v119;
  sub_1C3F970C4(v60, (uint64_t)v119, &qword_1EBBC0540);
  uint64_t v62 = v104;
  if (v42(v61, 1, v104) == 1) {
    goto LABEL_63;
  }
  uint64_t v63 = (uint64_t)v61;
  uint64_t v64 = v125;
  sub_1C3F8ABD8(v63, (uint64_t)v125, type metadata accessor for Proto_Value);
  uint64_t v65 = *(void *)&v64[*(int *)(v62 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v66 = v65;
  uint64_t v67 = v109;
  sub_1C3F970C4(v66, (uint64_t)v109, &qword_1EBBBF8A0);
  int v68 = v106(v67, 1, v46);
  uint64_t v69 = (uint64_t)v113;
  uint64_t v70 = v127;
  if (v68 == 1)
  {
    sub_1C3F962E0((uint64_t)v67, &qword_1EBBBF8A0);
    uint64_t v71 = v126;
  }
  else
  {
    BOOL v72 = swift_getEnumCaseMultiPayload() == 11;
    uint64_t v73 = (uint64_t)v67;
    uint64_t v71 = v126;
    if (v72)
    {
      sub_1C3F8ABD8(v73, (uint64_t)v126, type metadata accessor for Proto_TaggedValue);
      goto LABEL_21;
    }
    sub_1C3F8B0A8(v73, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v74 = *(int *)(v129 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)&v71[v74] = qword_1EA39AF60;
  swift_retain();
  uint64_t v62 = v104;
LABEL_21:
  sub_1C3F8B0A8((uint64_t)v125, type metadata accessor for Proto_Value);
  uint64_t v75 = *(void *)&v71[*(int *)(v129 + 20)]
      + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  uint64_t v76 = v75;
  int v77 = v123;
  sub_1C3F970C4(v76, (uint64_t)v123, &qword_1EBBC0540);
  if (v42(v77, 1, v62) == 1)
  {
    sub_1C4496888();
    uint64_t v78 = *(int *)(v62 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)&v70[v78] = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0((uint64_t)v123, &qword_1EBBC0540);
  }
  else
  {
    sub_1C3F8ABD8((uint64_t)v77, (uint64_t)v70, type metadata accessor for Proto_Value);
  }
  sub_1C3F8B0A8((uint64_t)v126, type metadata accessor for Proto_TaggedValue);
  uint64_t v79 = *(void *)&v70[*(int *)(v62 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v80 = v79;
  unint64_t v81 = v110;
  sub_1C3F970C4(v80, (uint64_t)v110, &qword_1EBBBF8A0);
  if (v106(v81, 1, v46) == 1)
  {
    sub_1C3F962E0((uint64_t)v81, &qword_1EBBBF8A0);
    uint64_t v82 = (uint64_t)v130;
    uint64_t v83 = (uint64_t)v114;
    uint64_t v84 = v111;
LABEL_31:
    sub_1C4496888();
    uint64_t v87 = *(int *)(v84 + 20);
    uint64_t v86 = v108;
    if (qword_1EBBBC818 != -1) {
      swift_once();
    }
    *(void *)(v69 + v87) = qword_1EBBBC808;
    swift_retain();
    goto LABEL_34;
  }
  int v85 = swift_getEnumCaseMultiPayload();
  uint64_t v83 = (uint64_t)v114;
  uint64_t v84 = v111;
  if (v85 != 7)
  {
    sub_1C3F8B0A8((uint64_t)v81, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    uint64_t v82 = (uint64_t)v130;
    goto LABEL_31;
  }
  sub_1C3F8ABD8((uint64_t)v81, v69, type metadata accessor for Proto_Reference);
  uint64_t v82 = (uint64_t)v130;
  uint64_t v86 = v108;
LABEL_34:
  sub_1C3F8B0A8((uint64_t)v127, type metadata accessor for Proto_Value);
  uint64_t v88 = *(void *)(v69 + *(int *)(v84 + 20))
      + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  sub_1C3F970C4(v88, v83, &qword_1EBBC0560);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v83, 1, v86) == 1)
  {
    __n128 v89 = v115;
    *__n128 v115 = MEMORY[0x1E4FBC860];
    v89[1] = sub_1C4496868();
    v89[2] = v90;
    sub_1C4496888();
    sub_1C3F962E0(v83, &qword_1EBBC0560);
  }
  else
  {
    __n128 v89 = v115;
    sub_1C3F8ABD8(v83, (uint64_t)v115, type metadata accessor for Proto_KeyPath);
  }
  sub_1C3F8B0A8(v69, type metadata accessor for Proto_Reference);
  swift_retain();
  uint64_t v91 = v116;
  sub_1C3F766DC((uint64_t)v89, (uint64_t *)&v131);
  if (v91)
  {
    swift_release();
    swift_setDeallocating();
    swift_release();
    __n128 v131 = v128;
    uint64_t v132 = v120;
    uint64_t v133 = &protocol witness table for Int;
    uint64_t v134 = MEMORY[0x1E4FBB560];
    uint64_t v101 = type metadata accessor for CRExtensible();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v101 - 8) + 8))(v58, v101);
  }
  else
  {
    uint64_t v93 = (uint64_t)v131;
    unint64_t v92 = (unint64_t)v132;
    __n128 v94 = v124;
    *__n128 v124 = v131;
    v94[1] = v92;
    sub_1C3F7E324(v93, v92);
    __n128 v131 = v128;
    uint64_t v132 = v120;
    uint64_t v133 = &protocol witness table for Int;
    uint64_t v134 = MEMORY[0x1E4FBB560];
    uint64_t v95 = type metadata accessor for CRExtensible();
    CRExtensible.rawValue.getter(v95, (uint64_t)&v135);
    uint64_t v129 = v92;
    unint64_t v130 = (unsigned char *)v93;
    __n128 v118 = v58;
    switch(v135)
    {
      case 0:
        uint64_t v96 = *(void *)(v82 + 16);
        if (v96) {
          goto LABEL_61;
        }
        goto LABEL_64;
      case 1:
        uint64_t v96 = *(void *)(v82 + 16);
        if (v96) {
          goto LABEL_61;
        }
        goto LABEL_66;
      case 2:
        uint64_t v96 = *(void *)(v82 + 16);
        if (v96) {
          goto LABEL_61;
        }
        goto LABEL_67;
      case 3:
        uint64_t v96 = *(void *)(v82 + 16);
        if (v96) {
          goto LABEL_61;
        }
        goto LABEL_68;
      case 4:
        uint64_t v96 = *(void *)(v82 + 16);
        if (v96) {
          goto LABEL_61;
        }
        goto LABEL_69;
      case 5:
        uint64_t v96 = *(void *)(v82 + 16);
        if (v96) {
          goto LABEL_61;
        }
        goto LABEL_70;
      case 6:
        uint64_t v96 = *(void *)(v82 + 16);
        if (v96) {
          goto LABEL_61;
        }
        goto LABEL_71;
      case 7:
        uint64_t v96 = *(void *)(v82 + 16);
        if (v96) {
          goto LABEL_61;
        }
        goto LABEL_72;
      case 8:
        uint64_t v96 = *(void *)(v82 + 16);
        if (v96) {
          goto LABEL_61;
        }
        goto LABEL_74;
      case 9:
        uint64_t v96 = *(void *)(v82 + 16);
        if (v96) {
          goto LABEL_61;
        }
        goto LABEL_73;
      default:
        uint64_t v96 = *(void *)(v82 + 16);
        if (!v96) {
          goto LABEL_65;
        }
LABEL_61:
        uint64_t v97 = swift_getAssociatedTypeWitness();
        unint64_t v98 = v129;
        __n128 v131 = v130;
        uint64_t v132 = (uint64_t (*)(void, void, void))v129;
        uint64_t v99 = *(unsigned char **)(*(void *)v96 + 176);
        uint64_t v126 = (unsigned char *)(*(void *)v96 + 176);
        uint64_t v127 = v99;
        uint64_t v100 = swift_getAssociatedConformanceWitness();
        swift_retain();
        ((void (*)(uint64_t, unsigned char **, uint64_t, void, uint64_t, uint64_t))v127)(v97, &v131, v82, v103 & 1, v97, v100);
        swift_release();
        swift_release();
        swift_release();
        uint64_t result = sub_1C3F7E2CC((uint64_t)v130, v98);
        break;
    }
  }
  return result;
}

uint64_t sub_1C40F1C8C(uint64_t a1, uint64_t a2)
{
  return WeakTagged_10.encode(to:)(a1, a2);
}

uint64_t WeakTagged_10.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C40C5014(a1, a2, (uint64_t)&protocol requirements base descriptor for Tagged_10, (uint64_t)&associated type descriptor for Tagged_10.Enum, (uint64_t)&associated conformance descriptor for Tagged_10.Tagged_10.Enum: RawRepresentable);
}

uint64_t type metadata accessor for SharedTagged_2()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for WeakTagged_2()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SharedTagged_3()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for WeakTagged_3()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SharedTagged_4()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for WeakTagged_4()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SharedTagged_5()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for WeakTagged_5()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SharedTagged_6()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for WeakTagged_6()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SharedTagged_7()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for WeakTagged_7()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SharedTagged_8()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for WeakTagged_8()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SharedTagged_9()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for WeakTagged_9()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SharedTagged_10()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for WeakTagged_10()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C40F1E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v16 - v11;
  uint64_t v13 = *(void *)(a2 + *(void *)(*(void *)a2 + 112));
  (*(void (**)(char *, uint64_t))(v14 + 16))((char *)&v16 - v11, a1);
  swift_retain();
  return a6(v12, v13, a3);
}

uint64_t sub_1C40F1F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(char *, uint64_t, uint64_t))
{
  swift_getAssociatedTypeWitness();
  uint64_t v10 = sub_1C4497B38();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v16 - v11;
  uint64_t v13 = *(void *)(a2 + *(void *)(*(void *)a2 + 112));
  (*(void (**)(char *, uint64_t))(v14 + 16))((char *)&v16 - v11, a1);
  swift_retain();
  return a6(v12, v13, a3);
}

uint64_t sub_1C40F2090()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F20B0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F20CC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F20E8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F2104()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F2120()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F213C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F2158()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F2174()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F2190()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F21AC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F21C8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F21E4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F2200()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F221C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F2238()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F2254()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F2270()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F228C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F22A8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C40F22C4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for SharedTagged_1, SharedTagged_1.subscript.getter);
}

uint64_t sub_1C40F22F4()
{
  return 32;
}

__n128 sub_1C40F2300(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F230C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for SharedTagged_2, SharedTagged_2.subscript.getter);
}

uint64_t keypath_getTm(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(void, void, void), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a4(0, *(uint64_t *)((char *)a2 + a3 - 32), *(uint64_t *)((char *)a2 + a3 - 16));
  return a5(v6, v7);
}

uint64_t sub_1C40F23A0()
{
  return 32;
}

__n128 sub_1C40F23AC(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F23B8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for SharedTagged_3, SharedTagged_3.subscript.getter);
}

uint64_t sub_1C40F23E8()
{
  return 32;
}

__n128 sub_1C40F23F4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F2400(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for SharedTagged_4, SharedTagged_4.subscript.getter);
}

uint64_t sub_1C40F2430()
{
  return 32;
}

__n128 sub_1C40F243C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F2448(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for SharedTagged_5, SharedTagged_5.subscript.getter);
}

uint64_t sub_1C40F2478()
{
  return 32;
}

__n128 sub_1C40F2484(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F2490(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for SharedTagged_6, SharedTagged_6.subscript.getter);
}

uint64_t sub_1C40F24C0()
{
  return 32;
}

__n128 sub_1C40F24CC(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F24D8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for SharedTagged_7, SharedTagged_7.subscript.getter);
}

uint64_t sub_1C40F2508()
{
  return 32;
}

__n128 sub_1C40F2514(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F2520(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for SharedTagged_8, SharedTagged_8.subscript.getter);
}

uint64_t sub_1C40F2550()
{
  return 32;
}

__n128 sub_1C40F255C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F2568(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for SharedTagged_9, SharedTagged_9.subscript.getter);
}

uint64_t sub_1C40F2598()
{
  return 32;
}

__n128 sub_1C40F25A4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F25B0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for SharedTagged_10, SharedTagged_10.subscript.getter);
}

uint64_t sub_1C40F25E0()
{
  return 32;
}

__n128 sub_1C40F25EC(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F25F8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for WeakTagged_1, WeakTagged_1.subscript.getter);
}

uint64_t sub_1C40F2628()
{
  return 32;
}

__n128 sub_1C40F2634(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F2640(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for WeakTagged_2, WeakTagged_2.subscript.getter);
}

uint64_t sub_1C40F2670()
{
  return 32;
}

__n128 sub_1C40F267C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F2688(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for WeakTagged_3, WeakTagged_3.subscript.getter);
}

uint64_t sub_1C40F26B8()
{
  return 32;
}

__n128 sub_1C40F26C4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F26D0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for WeakTagged_4, WeakTagged_4.subscript.getter);
}

uint64_t sub_1C40F2700()
{
  return 32;
}

__n128 sub_1C40F270C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F2718(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for WeakTagged_5, WeakTagged_5.subscript.getter);
}

uint64_t sub_1C40F2748()
{
  return 32;
}

__n128 sub_1C40F2754(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F2760(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for WeakTagged_6, WeakTagged_6.subscript.getter);
}

uint64_t sub_1C40F2790()
{
  return 32;
}

__n128 sub_1C40F279C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F27A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for WeakTagged_7, WeakTagged_7.subscript.getter);
}

uint64_t sub_1C40F27D8()
{
  return 32;
}

__n128 sub_1C40F27E4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F27F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for WeakTagged_8, WeakTagged_8.subscript.getter);
}

uint64_t sub_1C40F2820()
{
  return 32;
}

__n128 sub_1C40F282C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F2838(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for WeakTagged_9, WeakTagged_9.subscript.getter);
}

uint64_t sub_1C40F2868()
{
  return 32;
}

__n128 sub_1C40F2874(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C40F2880(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return keypath_getTm(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for WeakTagged_10, WeakTagged_10.subscript.getter);
}

uint64_t sub_1C40F28B0()
{
  return 32;
}

__n128 sub_1C40F28BC(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

_UNKNOWN **sub_1C40F28C8()
{
  return &protocol witness table for AnyCRDT;
}

uint64_t sub_1C40F28D4()
{
  return sub_1C40F302C();
}

uint64_t *sub_1C40F28F0(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3128(a1, a2);
}

unsigned __int8 *sub_1C40F2904(uint64_t a1)
{
  return sub_1C40F32F8(a1);
}

uint64_t *sub_1C40F2918(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3478(a1, a2);
}

uint64_t *sub_1C40F292C(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3624(a1, a2);
}

_OWORD *sub_1C40F2940(_OWORD *a1, _OWORD *a2)
{
  return sub_1C40F3884(a1, a2);
}

uint64_t *sub_1C40F2954(uint64_t *a1, _OWORD *a2)
{
  return sub_1C40F3A00(a1, a2);
}

uint64_t sub_1C40F2968(unsigned __int16 *a1, unsigned int a2)
{
  return sub_1C40F3C50(a1, a2);
}

void sub_1C40F297C(unsigned char *a1, unsigned int a2, unsigned int a3)
{
}

uint64_t sub_1C40F2990()
{
  return sub_1C40F302C();
}

uint64_t *sub_1C40F29AC(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3128(a1, a2);
}

unsigned __int8 *sub_1C40F29C0(uint64_t a1)
{
  return sub_1C40F32F8(a1);
}

uint64_t *sub_1C40F29D4(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3478(a1, a2);
}

uint64_t *sub_1C40F29E8(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3624(a1, a2);
}

_OWORD *sub_1C40F29FC(_OWORD *a1, _OWORD *a2)
{
  return sub_1C40F3884(a1, a2);
}

uint64_t *sub_1C40F2A10(uint64_t *a1, _OWORD *a2)
{
  return sub_1C40F3A00(a1, a2);
}

uint64_t sub_1C40F2A24(unsigned __int16 *a1, unsigned int a2)
{
  return sub_1C40F3C50(a1, a2);
}

void sub_1C40F2A38(unsigned char *a1, unsigned int a2, unsigned int a3)
{
}

uint64_t sub_1C40F2A4C()
{
  return sub_1C40F302C();
}

uint64_t *sub_1C40F2A68(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3128(a1, a2);
}

unsigned __int8 *sub_1C40F2A7C(uint64_t a1)
{
  return sub_1C40F32F8(a1);
}

uint64_t *sub_1C40F2A90(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3478(a1, a2);
}

uint64_t *sub_1C40F2AA4(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3624(a1, a2);
}

_OWORD *sub_1C40F2AB8(_OWORD *a1, _OWORD *a2)
{
  return sub_1C40F3884(a1, a2);
}

uint64_t *sub_1C40F2ACC(uint64_t *a1, _OWORD *a2)
{
  return sub_1C40F3A00(a1, a2);
}

uint64_t sub_1C40F2AE0(unsigned __int16 *a1, unsigned int a2)
{
  return sub_1C40F3C50(a1, a2);
}

void sub_1C40F2AF4(unsigned char *a1, unsigned int a2, unsigned int a3)
{
}

uint64_t sub_1C40F2B08()
{
  return sub_1C40F302C();
}

uint64_t *sub_1C40F2B24(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3128(a1, a2);
}

unsigned __int8 *sub_1C40F2B38(uint64_t a1)
{
  return sub_1C40F32F8(a1);
}

uint64_t *sub_1C40F2B4C(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3478(a1, a2);
}

uint64_t *sub_1C40F2B60(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3624(a1, a2);
}

_OWORD *sub_1C40F2B74(_OWORD *a1, _OWORD *a2)
{
  return sub_1C40F3884(a1, a2);
}

uint64_t *sub_1C40F2B88(uint64_t *a1, _OWORD *a2)
{
  return sub_1C40F3A00(a1, a2);
}

uint64_t sub_1C40F2B9C(unsigned __int16 *a1, unsigned int a2)
{
  return sub_1C40F3C50(a1, a2);
}

void sub_1C40F2BB0(unsigned char *a1, unsigned int a2, unsigned int a3)
{
}

uint64_t sub_1C40F2BC4()
{
  return sub_1C40F302C();
}

uint64_t *sub_1C40F2BE0(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3128(a1, a2);
}

unsigned __int8 *sub_1C40F2BF4(uint64_t a1)
{
  return sub_1C40F32F8(a1);
}

uint64_t *sub_1C40F2C08(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3478(a1, a2);
}

uint64_t *sub_1C40F2C1C(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3624(a1, a2);
}

_OWORD *sub_1C40F2C30(_OWORD *a1, _OWORD *a2)
{
  return sub_1C40F3884(a1, a2);
}

uint64_t *sub_1C40F2C44(uint64_t *a1, _OWORD *a2)
{
  return sub_1C40F3A00(a1, a2);
}

uint64_t sub_1C40F2C58(unsigned __int16 *a1, unsigned int a2)
{
  return sub_1C40F3C50(a1, a2);
}

void sub_1C40F2C6C(unsigned char *a1, unsigned int a2, unsigned int a3)
{
}

uint64_t sub_1C40F2C80()
{
  return sub_1C40F302C();
}

uint64_t *sub_1C40F2C9C(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3128(a1, a2);
}

unsigned __int8 *sub_1C40F2CB0(uint64_t a1)
{
  return sub_1C40F32F8(a1);
}

uint64_t *sub_1C40F2CC4(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3478(a1, a2);
}

uint64_t *sub_1C40F2CD8(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3624(a1, a2);
}

_OWORD *sub_1C40F2CEC(_OWORD *a1, _OWORD *a2)
{
  return sub_1C40F3884(a1, a2);
}

uint64_t *sub_1C40F2D00(uint64_t *a1, _OWORD *a2)
{
  return sub_1C40F3A00(a1, a2);
}

uint64_t sub_1C40F2D14(unsigned __int16 *a1, unsigned int a2)
{
  return sub_1C40F3C50(a1, a2);
}

void sub_1C40F2D28(unsigned char *a1, unsigned int a2, unsigned int a3)
{
}

uint64_t sub_1C40F2D3C()
{
  return sub_1C40F302C();
}

uint64_t *sub_1C40F2D58(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3128(a1, a2);
}

unsigned __int8 *sub_1C40F2D6C(uint64_t a1)
{
  return sub_1C40F32F8(a1);
}

uint64_t *sub_1C40F2D80(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3478(a1, a2);
}

uint64_t *sub_1C40F2D94(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3624(a1, a2);
}

_OWORD *sub_1C40F2DA8(_OWORD *a1, _OWORD *a2)
{
  return sub_1C40F3884(a1, a2);
}

uint64_t *sub_1C40F2DBC(uint64_t *a1, _OWORD *a2)
{
  return sub_1C40F3A00(a1, a2);
}

uint64_t sub_1C40F2DD0(unsigned __int16 *a1, unsigned int a2)
{
  return sub_1C40F3C50(a1, a2);
}

void sub_1C40F2DE4(unsigned char *a1, unsigned int a2, unsigned int a3)
{
}

uint64_t sub_1C40F2DF8()
{
  return sub_1C40F302C();
}

uint64_t *sub_1C40F2E14(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3128(a1, a2);
}

unsigned __int8 *sub_1C40F2E28(uint64_t a1)
{
  return sub_1C40F32F8(a1);
}

uint64_t *sub_1C40F2E3C(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3478(a1, a2);
}

uint64_t *sub_1C40F2E50(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3624(a1, a2);
}

_OWORD *sub_1C40F2E64(_OWORD *a1, _OWORD *a2)
{
  return sub_1C40F3884(a1, a2);
}

uint64_t *sub_1C40F2E78(uint64_t *a1, _OWORD *a2)
{
  return sub_1C40F3A00(a1, a2);
}

uint64_t sub_1C40F2E8C(unsigned __int16 *a1, unsigned int a2)
{
  return sub_1C40F3C50(a1, a2);
}

void sub_1C40F2EA0(unsigned char *a1, unsigned int a2, unsigned int a3)
{
}

uint64_t sub_1C40F2EB4()
{
  return sub_1C40F302C();
}

uint64_t *sub_1C40F2ED0(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3128(a1, a2);
}

unsigned __int8 *sub_1C40F2EE4(uint64_t a1)
{
  return sub_1C40F32F8(a1);
}

uint64_t *sub_1C40F2EF8(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3478(a1, a2);
}

uint64_t *sub_1C40F2F0C(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3624(a1, a2);
}

_OWORD *sub_1C40F2F20(_OWORD *a1, _OWORD *a2)
{
  return sub_1C40F3884(a1, a2);
}

uint64_t *sub_1C40F2F34(uint64_t *a1, _OWORD *a2)
{
  return sub_1C40F3A00(a1, a2);
}

uint64_t sub_1C40F2F48(unsigned __int16 *a1, unsigned int a2)
{
  return sub_1C40F3C50(a1, a2);
}

void sub_1C40F2F5C(unsigned char *a1, unsigned int a2, unsigned int a3)
{
}

uint64_t sub_1C40F2F70()
{
  return sub_1C40F302C();
}

uint64_t *sub_1C40F2F8C(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3128(a1, a2);
}

unsigned __int8 *sub_1C40F2FA0(uint64_t a1)
{
  return sub_1C40F32F8(a1);
}

uint64_t *sub_1C40F2FB4(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3478(a1, a2);
}

uint64_t *sub_1C40F2FC8(uint64_t *a1, uint64_t *a2)
{
  return sub_1C40F3624(a1, a2);
}

_OWORD *sub_1C40F2FDC(_OWORD *a1, _OWORD *a2)
{
  return sub_1C40F3884(a1, a2);
}

uint64_t *sub_1C40F2FF0(uint64_t *a1, _OWORD *a2)
{
  return sub_1C40F3A00(a1, a2);
}

uint64_t sub_1C40F3004(unsigned __int16 *a1, unsigned int a2)
{
  return sub_1C40F3C50(a1, a2);
}

void sub_1C40F3018(unsigned char *a1, unsigned int a2, unsigned int a3)
{
}

uint64_t sub_1C40F302C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = type metadata accessor for CRExtensible();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1C40F3128(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ~(unint64_t)(v6 & 0xF8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = ((v6 & 0xF8) + 23) & v7;
  if (*(void *)(v5 + 64) <= 8uLL) {
    uint64_t v9 = 8;
  }
  else {
    uint64_t v9 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v9 + v8 + 1) > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + v8);
    swift_retain();
  }
  else
  {
    uint64_t v12 = *a2;
    unint64_t v13 = a2[1];
    sub_1C3F7E324(*a2, v13);
    *a1 = v12;
    a1[1] = v13;
    uint64_t v14 = (void *)(((unint64_t)a1 + 23) & v7);
    uint64_t v15 = (unsigned __int8 *)(((unint64_t)a2 + 23) & v7);
    unsigned int v16 = v15[v9];
    unsigned int v17 = v16 - 2;
    if (v16 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v18 = v9;
      }
      else {
        uint64_t v18 = 4;
      }
      switch(v18)
      {
        case 1:
          int v19 = *v15;
          goto LABEL_19;
        case 2:
          int v19 = *(unsigned __int16 *)v15;
          goto LABEL_19;
        case 3:
          int v19 = *(unsigned __int16 *)v15 | (*(unsigned __int8 *)((((unint64_t)a2 + 23) & v7) + 2) << 16);
          goto LABEL_19;
        case 4:
          int v19 = *(_DWORD *)v15;
LABEL_19:
          int v20 = (v19 | (v17 << (8 * v9))) + 2;
          unsigned int v16 = v19 + 2;
          if (v9 < 4) {
            unsigned int v16 = v20;
          }
          break;
        default:
          break;
      }
    }
    if (v16 == 1)
    {
      *uint64_t v14 = *(void *)v15;
      *((unsigned char *)v14 + v9) = 1;
    }
    else
    {
      (*(void (**)(unint64_t))(v5 + 16))(((unint64_t)a1 + 23) & v7);
      *((unsigned char *)v14 + v9) = 0;
    }
  }
  return a1;
}

unsigned __int8 *sub_1C40F32F8(uint64_t a1)
{
  sub_1C3F7E2CC(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v3 = *(_DWORD *)(v2 + 80) & 0xF8 | 7;
  uint64_t result = (unsigned __int8 *)((a1 + v3 + 16) & ~v3);
  unint64_t v5 = *(void *)(v2 + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  unsigned int v6 = result[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *result;
        goto LABEL_12;
      case 2:
        int v9 = *(unsigned __int16 *)result;
        goto LABEL_12;
      case 3:
        int v9 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_12;
      case 4:
        int v9 = *(_DWORD *)result;
LABEL_12:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 != 1)
  {
    uint64_t v11 = *(uint64_t (**)(void))(v2 + 8);
    return (unsigned __int8 *)v11();
  }
  return result;
}

uint64_t *sub_1C40F3478(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1C3F7E324(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80) & 0xF8;
  uint64_t v8 = v7 + 23;
  unint64_t v9 = (unint64_t)a1 + v7 + 23;
  unint64_t v10 = ~v7 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = (void *)(v9 & v10);
  uint64_t v12 = (unsigned __int8 *)(((unint64_t)a2 + v8) & v10);
  if (*(void *)(v6 + 64) <= 8uLL) {
    uint64_t v13 = 8;
  }
  else {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  unsigned int v14 = v12[v13];
  unsigned int v15 = v14 - 2;
  if (v14 >= 2)
  {
    if (v13 <= 3) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *v12;
        goto LABEL_13;
      case 2:
        int v17 = *(unsigned __int16 *)v12;
        goto LABEL_13;
      case 3:
        int v17 = *(unsigned __int16 *)(((unint64_t)a2 + v8) & v10) | (*(unsigned __int8 *)((((unint64_t)a2
                                                                                               + v8) & v10)
                                                                                             + 2) << 16);
        goto LABEL_13;
      case 4:
        int v17 = *(_DWORD *)v12;
LABEL_13:
        int v18 = (v17 | (v15 << (8 * v13))) + 2;
        unsigned int v14 = v17 + 2;
        if (v13 < 4) {
          unsigned int v14 = v18;
        }
        break;
      default:
        break;
    }
  }
  if (v14 == 1)
  {
    *uint64_t v11 = *(void *)v12;
    char v19 = 1;
  }
  else
  {
    (*(void (**)(void *))(v6 + 16))(v11);
    char v19 = 0;
  }
  *((unsigned char *)v11 + v13) = v19;
  return a1;
}

uint64_t *sub_1C40F3624(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1C3F7E324(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1C3F7E2CC(v6, v7);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80) & 0xF8;
  uint64_t v11 = v10 + 23;
  unint64_t v12 = (unint64_t)a1 + v10 + 23;
  unint64_t v13 = ~v10 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v14 = (unsigned __int8 *)(v12 & v13);
  unint64_t v15 = (unint64_t)a2 + v11;
  uint64_t v16 = (unsigned __int8 *)(v15 & v13);
  if ((v12 & v13) != (v15 & v13))
  {
    uint64_t v17 = AssociatedTypeWitness;
    uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
    if (*(void *)(v9 + 64) <= 8uLL) {
      uint64_t v19 = 8;
    }
    else {
      uint64_t v19 = *(void *)(v9 + 64);
    }
    unsigned int v20 = v14[v19];
    unsigned int v21 = v20 - 2;
    if (v20 >= 2)
    {
      if (v19 <= 3) {
        uint64_t v22 = v19;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *v14;
          goto LABEL_14;
        case 2:
          int v23 = *(unsigned __int16 *)v14;
          goto LABEL_14;
        case 3:
          int v23 = *(unsigned __int16 *)v14 | (v14[2] << 16);
          goto LABEL_14;
        case 4:
          int v23 = *(_DWORD *)v14;
LABEL_14:
          int v24 = (v23 | (v21 << (8 * v19))) + 2;
          unsigned int v20 = v23 + 2;
          if (v19 < 4) {
            unsigned int v20 = v24;
          }
          break;
        default:
          break;
      }
    }
    if (v20 != 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v18 + 8))(v14, AssociatedTypeWitness);
    }
    unsigned int v25 = v16[v19];
    unsigned int v26 = v25 - 2;
    if (v25 >= 2)
    {
      if (v19 <= 3) {
        uint64_t v27 = v19;
      }
      else {
        uint64_t v27 = 4;
      }
      switch(v27)
      {
        case 1:
          int v28 = *v16;
          goto LABEL_27;
        case 2:
          int v28 = *(unsigned __int16 *)v16;
          goto LABEL_27;
        case 3:
          int v28 = *(unsigned __int16 *)v16 | (v16[2] << 16);
          goto LABEL_27;
        case 4:
          int v28 = *(_DWORD *)v16;
LABEL_27:
          int v29 = (v28 | (v26 << (8 * v19))) + 2;
          unsigned int v25 = v28 + 2;
          if (v19 < 4) {
            unsigned int v25 = v29;
          }
          break;
        default:
          break;
      }
    }
    if (v25 == 1)
    {
      *(void *)unsigned int v14 = *(void *)v16;
      char v30 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v18 + 16))(v14, v16, v17);
      char v30 = 0;
    }
    v14[v19] = v30;
  }
  return a1;
}

_OWORD *sub_1C40F3884(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80) & 0xF8;
  uint64_t v6 = v5 + 23;
  unint64_t v7 = (unint64_t)a1 + v5 + 23;
  unint64_t v8 = ~v5 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = (void *)(v7 & v8);
  uint64_t v10 = (unsigned __int8 *)(((unint64_t)a2 + v6) & v8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v11 = 8;
  }
  else {
    uint64_t v11 = *(void *)(v4 + 64);
  }
  unsigned int v12 = v10[v11];
  unsigned int v13 = v12 - 2;
  if (v12 >= 2)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *v10;
        goto LABEL_13;
      case 2:
        int v15 = *(unsigned __int16 *)v10;
        goto LABEL_13;
      case 3:
        int v15 = *(unsigned __int16 *)v10 | (v10[2] << 16);
        goto LABEL_13;
      case 4:
        int v15 = *(_DWORD *)v10;
LABEL_13:
        int v16 = (v15 | (v13 << (8 * v11))) + 2;
        unsigned int v12 = v15 + 2;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  if (v12 == 1)
  {
    *uint64_t v9 = *(void *)v10;
    char v17 = 1;
  }
  else
  {
    (*(void (**)(void *))(v4 + 32))(v9);
    char v17 = 0;
  }
  *((unsigned char *)v9 + v11) = v17;
  return a1;
}

uint64_t *sub_1C40F3A00(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1C3F7E2CC(v4, v5);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v9 = v8 + 23;
  unint64_t v10 = (unint64_t)a1 + v8 + 23;
  unint64_t v11 = ~v8 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v12 = (unsigned __int8 *)(v10 & v11);
  unint64_t v13 = (unint64_t)a2 + v9;
  uint64_t v14 = (unsigned __int8 *)(v13 & v11);
  if ((v10 & v11) != (v13 & v11))
  {
    uint64_t v15 = AssociatedTypeWitness;
    uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
    if (*(void *)(v7 + 64) <= 8uLL) {
      uint64_t v17 = 8;
    }
    else {
      uint64_t v17 = *(void *)(v7 + 64);
    }
    unsigned int v18 = v12[v17];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v20 = v17;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *v12;
          goto LABEL_14;
        case 2:
          int v21 = *(unsigned __int16 *)v12;
          goto LABEL_14;
        case 3:
          int v21 = *(unsigned __int16 *)v12 | (v12[2] << 16);
          goto LABEL_14;
        case 4:
          int v21 = *(_DWORD *)v12;
LABEL_14:
          int v22 = (v21 | (v19 << (8 * v17))) + 2;
          unsigned int v18 = v21 + 2;
          if (v17 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    if (v18 != 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(v12, AssociatedTypeWitness);
    }
    unsigned int v23 = v14[v17];
    unsigned int v24 = v23 - 2;
    if (v23 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v25 = v17;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *v14;
          goto LABEL_27;
        case 2:
          int v26 = *(unsigned __int16 *)v14;
          goto LABEL_27;
        case 3:
          int v26 = *(unsigned __int16 *)v14 | (v14[2] << 16);
          goto LABEL_27;
        case 4:
          int v26 = *(_DWORD *)v14;
LABEL_27:
          int v27 = (v26 | (v24 << (8 * v17))) + 2;
          unsigned int v23 = v26 + 2;
          if (v17 < 4) {
            unsigned int v23 = v27;
          }
          break;
        default:
          break;
      }
    }
    if (v23 == 1)
    {
      *(void *)unsigned int v12 = *(void *)v14;
      char v28 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v16 + 32))(v12, v14, v15);
      char v28 = 0;
    }
    v12[v17] = v28;
  }
  return a1;
}

uint64_t sub_1C40F3C50(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v6 = *(_DWORD *)(v4 + 80) & 0xF8;
  uint64_t v7 = v6 | 7;
  if (a2 < 0xFF) {
    goto LABEL_24;
  }
  uint64_t v8 = v5 + ((v6 + 23) & ~v7) + 1;
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v12 = ((a2 + ~(-1 << v9) - 254) >> v9) + 1;
    if (HIWORD(v12))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v12 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v12 < 2)
    {
LABEL_24:
      unsigned int v16 = *(unsigned __int8 *)((((unint64_t)a1 + v7 + 16) & ~v7) + v5);
      if (v16 >= 2) {
        return (v16 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_24;
  }
LABEL_14:
  int v13 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v13 = 0;
  }
  if (v8)
  {
    if (v8 <= 3) {
      int v14 = v8;
    }
    else {
      int v14 = 4;
    }
    switch(v14)
    {
      case 2:
        int v15 = *a1;
        break;
      case 3:
        int v15 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v15 = *(_DWORD *)a1;
        break;
      default:
        int v15 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v15 = 0;
  }
  return (v15 | v13) + 255;
}

void sub_1C40F3E08(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  if (v7 <= 8) {
    unint64_t v7 = 8;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80) & 0xF8;
  uint64_t v9 = v8 | 7;
  size_t v10 = v7 + ((v8 + 23) & ~(v8 | 7)) + 1;
  if (a3 < 0xFF)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 + ~(-1 << (8 * v10)) - 254) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v12 = a2 - 255;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v10)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v10] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v13;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x1C40F403CLL);
      case 4:
        *(_DWORD *)&a1[v10] = v13;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v11)
    {
      case 1:
        a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          *(unsigned char *)(((unint64_t)&a1[v9 + 16] & ~v9) + v7) = -(char)a2;
        break;
    }
  }
}

void CRCodableValue.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v8 - 8);
  size_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C4496358();
  swift_allocObject();
  sub_1C4496348();
  uint64_t v11 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F8BC84(v11, (uint64_t)v10);
  uint64_t v12 = type metadata accessor for Proto_Value(0);
  LODWORD(v11) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v10, 1, v12);
  sub_1C4019CD0((uint64_t)v10);
  if (v11 == 1)
  {
    sub_1C3FE3FF0();
    uint64_t v4 = (void *)swift_allocError();
    *(void *)uint64_t v13 = 0xD000000000000017;
    *(void *)(v13 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v13 + 16) = 0;
    swift_willThrow();
LABEL_4:
    swift_release();
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v16 = 0xD00000000000001FLL;
    *(void *)(v16 + 8) = 0x80000001C44B2520;
    *(unsigned char *)(v16 + 16) = 0;
    swift_willThrow();
    swift_release();

    return;
  }
  v19[0] = a3;
  type metadata accessor for CRDecoder.CRValueContainer();
  *(void *)(swift_initStackObject() + 16) = a1;
  uint64_t v14 = sub_1C3F8D610();
  if (v3) {
    goto LABEL_4;
  }
  uint64_t v17 = v14;
  unint64_t v18 = v15;
  sub_1C4497528();
  v19[1] = *(void *)(a2 + 16);
  swift_getWitnessTable();
  sub_1C4496338();
  sub_1C3F7E2CC(v17, v18);
  swift_release();
  sub_1C4497568();
  swift_bridgeObjectRelease();
  swift_release();
}

void CRCodableValue.encode(to:)(uint64_t a1, uint64_t a2)
{
  sub_1C3F6DD10();
  if (v3)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v7 = 0xD00000000000001FLL;
    *(void *)(v7 + 8) = 0x80000001C44B2540;
    *(unsigned char *)(v7 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    sub_1C4496388();
    swift_allocObject();
    swift_retain();
    sub_1C4496378();
    sub_1C40811FC(a2, a2);
    uint64_t v5 = *(void *)(a2 - 8);
    swift_allocObject();
    sub_1C4497428();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v2, a2);
    sub_1C408045C();
    sub_1C4497528();
    swift_getWitnessTable();
    uint64_t v8 = sub_1C4496368();
    unint64_t v10 = v9;
    swift_release();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    sub_1C3F7E324(v8, v10);
    sub_1C43EFB20(v8, v10);
    sub_1C3F7E2CC(v8, v10);
    swift_release();
  }
}

uint64_t CRUnsafeCastableValue.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F8BC84(v10, (uint64_t)v9);
  uint64_t v11 = type metadata accessor for Proto_Value(0);
  LODWORD(v10) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11);
  sub_1C4019CD0((uint64_t)v9);
  if (v10 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v12 = 0xD000000000000017;
    *(void *)(v12 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v12 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  *(void *)(swift_initStackObject() + 16) = a1;
  uint64_t v13 = sub_1C3F8D610();
  if (v3) {
    return swift_release();
  }
  uint64_t v16 = v13;
  unint64_t v17 = v14;
  MEMORY[0x1F4188790](v13);
  v18[-2] = a2;
  v18[-1] = a3;
  sub_1C4496538();
  swift_release();
  return sub_1C3F7E2CC(v16, v17);
}

uint64_t CRUnsafeCastableValue.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1C40F4A54(v8, (uint64_t)sub_1C40F4988, 0, a2, MEMORY[0x1E4FBC248], MEMORY[0x1E4F277C0], MEMORY[0x1E4FBC278], a8);
  sub_1C3F6DD10();
  if (!v9)
  {
    swift_beginAccess();
    swift_retain();
    sub_1C3F7E324(v11, v12);
    sub_1C43EFB20(v11, v12);
    swift_release();
  }
  return sub_1C3F7E2CC(v11, v12);
}

uint64_t sub_1C40F4988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v14[3] = MEMORY[0x1E4FBB2B8];
  v14[4] = MEMORY[0x1E4F27EF0];
  v14[0] = a1;
  v14[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x1E4FBB2B8]);
  uint64_t v5 = (unsigned char *)*v4;
  if (*v4 && (uint64_t v6 = (unsigned char *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = sub_1C3F5E208(v5, v6);
      unint64_t v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = sub_1C40F4B48((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x8000000000000000;
    }
    else
    {
      uint64_t v8 = sub_1C40F4BC4((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0xC000000000000000;
  }
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t sub_1C40F4A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](a1);
  unint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t sub_1C40F4B48(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_1C44962E8();
  swift_allocObject();
  uint64_t result = sub_1C4496288();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1C44964E8();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_1C40F4BC4(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_1C44962E8();
  swift_allocObject();
  uint64_t result = sub_1C4496288();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1C40F4C48()
{
  return sub_1C4497388();
}

uint64_t sub_1C40F4C84()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96);
  type metadata accessor for Capsule();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBBC00F0);
  uint64_t v2 = sub_1C4496CE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_weakDestroy();
  return v0;
}

uint64_t sub_1C40F4D70()
{
  return sub_1C4100628((void (*)(void))sub_1C40F4C84);
}

uint64_t sub_1C40F4D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1C4496D68();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1C4496DA8();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(void *)(v3 + 48);
  unint64_t v14 = (void *)swift_allocObject();
  void v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  aBlock[4] = sub_1C410227C;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1C3F61AC0;
  aBlock[3] = &block_descriptor_59;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1C4496D88();
  v17[1] = MEMORY[0x1E4FBC860];
  sub_1C3F70988((unint64_t *)&qword_1EBBC07F0, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0960);
  sub_1C3F70AF0((unint64_t *)&qword_1EBBC0968, &qword_1EBBC0960);
  sub_1C4497BF8();
  MEMORY[0x1C87806C0](0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_1C40F504C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(a1 + 32);
  swift_beginAccess();
  uint64_t v7 = *(void **)(a1 + 32);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a1 + 32) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v7 = sub_1C3FF1198(0, v7[2] + 1, 1, v7);
    *uint64_t v6 = v7;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t v7 = sub_1C3FF1198((void *)(v9 > 1), v10 + 1, 1, v7);
    *uint64_t v6 = v7;
  }
  v7[2] = v10 + 1;
  uint64_t v11 = &v7[2 * v10];
  v11[4] = a2;
  v11[5] = a3;
  return swift_endAccess();
}

uint64_t sub_1C40F512C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

unint64_t sub_1C40F5174()
{
  uint64_t v1 = type metadata accessor for Peer_Message.OneOf_TaggedOneOf(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C41027C0(v0, (uint64_t)v3, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  unint64_t result = 0x6E69747365447369;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      return result;
    case 2:
      sub_1C410271C((uint64_t)v3, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
      unint64_t result = 0x72654D61746C6564;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      sub_1C410271C((uint64_t)v3, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
      unint64_t result = 0x65646F4D6C6C7566;
      break;
    case 5:
      sub_1C410271C((uint64_t)v3, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
      unint64_t result = 0x6165627472616568;
      break;
    case 6:
      sub_1C410271C((uint64_t)v3, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
      unint64_t result = 0x716552656772656DLL;
      break;
    case 7:
      sub_1C410271C((uint64_t)v3, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
      unint64_t result = 0x736552656772656DLL;
      break;
    case 8:
      unint64_t result = 1701736292;
      break;
    default:
      sub_1C410271C((uint64_t)v3, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
      unint64_t result = 0x426F5473746E6177;
      break;
  }
  return result;
}

uint64_t sub_1C40F5410()
{
  uint64_t v0 = sub_1C4496D58();
  __swift_allocate_value_buffer(v0, qword_1EA3B8CC0);
  *(void *)__swift_project_value_buffer(v0, (uint64_t)qword_1EA3B8CC0) = 1;
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 - 8) + 104);
  return v1();
}

uint64_t sub_1C40F54A0()
{
  uint64_t v0 = sub_1C4496C58();
  __swift_allocate_value_buffer(v0, qword_1EA3B8CD8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA3B8CD8);
  return sub_1C4496C48();
}

uint64_t sub_1C40F551C()
{
  uint64_t v0 = sub_1C3FBC514(1668117091, 0xE400000000000000);
  uint64_t v1 = sub_1C3F5E0D0(v0);
  uint64_t v3 = v2;
  uint64_t result = swift_release();
  qword_1EA3B8CF0 = v1;
  *(void *)algn_1EA3B8CF8 = v3;
  return result;
}

uint64_t sub_1C40F5574(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  unint64_t v9 = a4 >> 60;
  if (a4 >> 60 != 15)
  {
    uint64_t v8 = 0;
    switch(a4 >> 62)
    {
      case 1uLL:
        LODWORD(v8) = HIDWORD(a3) - a3;
        if (__OFSUB__(HIDWORD(a3), a3)) {
          goto LABEL_16;
        }
        uint64_t v8 = (int)v8;
        break;
      case 2uLL:
        uint64_t v11 = *(void *)(a3 + 16);
        uint64_t v10 = *(void *)(a3 + 24);
        BOOL v12 = __OFSUB__(v10, v11);
        uint64_t v8 = v10 - v11;
        if (!v12) {
          break;
        }
        goto LABEL_17;
      case 3uLL:
        break;
      default:
        uint64_t v8 = BYTE6(a4);
        break;
    }
  }
  uint64_t v13 = v8 + 8;
  if (__OFADD__(v8, 8))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v14 = -(int)v8 & 7;
  if (__OFADD__(v13, v14))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17[0] = sub_1C4100E34(v13 + v14);
  v17[1] = v15;
  sub_1C3F6C704(a3, a4);
  sub_1C410070C(v17, a1, a2 & 0x1FF, a3, a4);
  if (v9 <= 0xE)
  {
    if (v13 >= 8)
    {
      sub_1C3F7E324(a3, a4);
      sub_1C4100AD8(a3, a4);
      sub_1C3F6C6F0(a3, a4);
      return v17[0];
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    JUMPOUT(0x1C40F56B8);
  }
  return v17[0];
}

uint64_t sub_1C40F56C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (qword_1EA39BA38 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1EA3B8CF0;
  unint64_t v6 = *(void *)algn_1EA3B8CF8;
  switch(*(void *)algn_1EA3B8CF8 >> 62)
  {
    case 1:
      if (!__OFSUB__(HIDWORD(qword_1EA3B8CF0), qword_1EA3B8CF0)) {
        goto LABEL_7;
      }
      __break(1u);
      goto LABEL_17;
    case 2:
      if (__OFSUB__(*(void *)(qword_1EA3B8CF0 + 24), *(void *)(qword_1EA3B8CF0 + 16)))
      {
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        sub_1C4497F48();
        __break(1u);
        JUMPOUT(0x1C40F5940);
      }
LABEL_7:
      sub_1C3F7E324(qword_1EA3B8CF0, *(unint64_t *)algn_1EA3B8CF8);
      break;
    default:
      break;
  }
  sub_1C3F79914();
  sub_1C4496278();
  sub_1C3F7E2CC(v7, v6);
  sub_1C4497B78();
  sub_1C4497B78();
  if (a6 >> 60 != 15)
  {
    switch(a6 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(a5), a5)) {
          goto LABEL_18;
        }
        unint64_t v8 = HIDWORD(a5) - (int)a5;
LABEL_13:
        if ((v8 & 0x8000000000000000) == 0 && v8 < 0x100) {
          return sub_1C4497B78();
        }
        goto LABEL_20;
      case 2uLL:
        uint64_t v10 = *(void *)(a5 + 16);
        uint64_t v9 = *(void *)(a5 + 24);
        unint64_t v8 = v9 - v10;
        if (!__OFSUB__(v9, v10)) {
          goto LABEL_13;
        }
        goto LABEL_19;
      default:
        return sub_1C4497B78();
    }
  }
  return sub_1C4497B78();
}

void sub_1C40F5960(uint64_t a1@<X0>, unint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v14 = sub_1C44968B8();
  MEMORY[0x1F4188790](v14 - 8);
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v15) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_20;
      }
      uint64_t v15 = (int)v15;
LABEL_6:
      if (v15 < 8)
      {
LABEL_16:
        uint64_t v31 = type metadata accessor for Peer_Message(0);
        sub_1C3F7E324(a1, a2);
        sub_1C44968A8();
        sub_1C3F70988((unint64_t *)&unk_1EA39D4B8, (void (*)(uint64_t))type metadata accessor for Peer_Message);
        sub_1C4496A98();
        if (!v7) {
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(a6, 0, 1, v31);
        }
      }
      else
      {
        uint64_t v32 = a4;
        if (qword_1EA39BA38 != -1) {
          swift_once();
        }
        uint64_t v19 = qword_1EA3B8CF0;
        unint64_t v20 = *(void *)algn_1EA3B8CF8;
        switch(*(void *)algn_1EA3B8CF8 >> 62)
        {
          case 1:
            if (__OFSUB__(HIDWORD(qword_1EA3B8CF0), qword_1EA3B8CF0)) {
              goto LABEL_22;
            }
            uint64_t v21 = HIDWORD(qword_1EA3B8CF0) - (int)qword_1EA3B8CF0;
LABEL_13:
            if (v21 < 0)
            {
              __break(1u);
LABEL_20:
              __break(1u);
LABEL_21:
              __break(1u);
LABEL_22:
              __break(1u);
LABEL_23:
              __break(1u);
              JUMPOUT(0x1C40F5C54);
            }
LABEL_14:
            __int16 v33 = a3;
            unint64_t v24 = a5;
            uint64_t v25 = sub_1C4496528();
            unint64_t v27 = v26;
            char v28 = sub_1C3FAD630(v25, v26, v19, v20);
            uint64_t v29 = v25;
            unint64_t v30 = v24;
            uint64_t v7 = v6;
            sub_1C3F7E2CC(v29, v27);
            if ((v28 & 1) == 0) {
              goto LABEL_16;
            }
            sub_1C40F5C74(a1, a2, v33 & 0x1FF, v32, v30, a6);
            break;
          case 2:
            uint64_t v23 = *(void *)(qword_1EA3B8CF0 + 16);
            uint64_t v22 = *(void *)(qword_1EA3B8CF0 + 24);
            uint64_t v21 = v22 - v23;
            if (!__OFSUB__(v22, v23)) {
              goto LABEL_13;
            }
            goto LABEL_23;
          default:
            goto LABEL_14;
        }
      }
      return;
    case 2uLL:
      uint64_t v17 = *(void *)(a1 + 16);
      uint64_t v16 = *(void *)(a1 + 24);
      BOOL v18 = __OFSUB__(v16, v17);
      uint64_t v15 = v16 - v17;
      if (!v18) {
        goto LABEL_6;
      }
      goto LABEL_21;
    case 3uLL:
      goto LABEL_16;
    default:
      uint64_t v15 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_1C40F5C74(uint64_t a1@<X0>, unint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = sub_1C44968B8();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v21 = 0;
  char v14 = sub_1C40F5F18(a1, a2, a3 & 0x1FF, a4, a5, &v21);
  if (!v6)
  {
    if (v14)
    {
      uint64_t v15 = v21;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      switch(a2 >> 62)
      {
        case 1uLL:
          uint64_t v17 = (int)a1;
          uint64_t v16 = a1 >> 32;
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(a1 + 16);
          uint64_t v16 = *(void *)(a1 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v17 = 0;
          uint64_t v16 = BYTE6(a2);
          break;
      }
      uint64_t v19 = type metadata accessor for Peer_Message(0);
      if (v16 < v15 || v16 < v17)
      {
        __break(1u);
        JUMPOUT(0x1C40F5F08);
      }
      uint64_t v20 = v19;
      sub_1C4496528();
      sub_1C44968A8();
      sub_1C3F70988((unint64_t *)&unk_1EA39D4B8, (void (*)(uint64_t))type metadata accessor for Peer_Message);
      sub_1C4496A98();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a6, 0, 1, v20);
    }
    else
    {
      uint64_t v18 = type metadata accessor for Peer_Message(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a6, 1, 1, v18);
    }
  }
}

uint64_t sub_1C40F5F18(uint64_t a1, unint64_t a2, __int16 a3, uint64_t a4, unint64_t a5, void *a6)
{
  unint64_t v6 = a2 >> 62;
  unsigned __int8 v9 = BYTE6(a2);
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v11) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_39;
      }
      uint64_t v11 = (int)v11;
LABEL_6:
      if (v11 < 8) {
        goto LABEL_30;
      }
      if (qword_1EA39BA38 != -1) {
        swift_once();
      }
      break;
    case 2uLL:
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      BOOL v14 = __OFSUB__(v12, v13);
      uint64_t v11 = v12 - v13;
      if (!v14) {
        goto LABEL_6;
      }
      goto LABEL_40;
    case 3uLL:
      goto LABEL_30;
    default:
      uint64_t v11 = BYTE6(a2);
      goto LABEL_6;
  }
  uint64_t v15 = qword_1EA3B8CF0;
  unint64_t v16 = *(void *)algn_1EA3B8CF8;
  switch(*(void *)algn_1EA3B8CF8 >> 62)
  {
    case 1:
      if (__OFSUB__(HIDWORD(qword_1EA3B8CF0), qword_1EA3B8CF0)) {
        goto LABEL_41;
      }
      uint64_t v17 = HIDWORD(qword_1EA3B8CF0) - (int)qword_1EA3B8CF0;
LABEL_13:
      if (v17 < 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
LABEL_14:
      int v20 = v6;
      __int16 v21 = a3;
      uint64_t v22 = sub_1C4496528();
      unint64_t v24 = v23;
      char v25 = sub_1C3FAD630(v22, v23, v15, v16);
      sub_1C3F7E2CC(v22, v24);
      if ((v25 & 1) == 0)
      {
LABEL_30:
        sub_1C3FE3FF0();
        swift_allocError();
        *(void *)uint64_t v30 = 0;
        *(void *)(v30 + 8) = 0;
        goto LABEL_31;
      }
      int v26 = sub_1C44965A8();
      if ((v26 - 4) < 2 || !v26)
      {
        sub_1C3FE3FF0();
        swift_allocError();
        *(_OWORD *)uint64_t v29 = xmmword_1C449B6B0;
        *(unsigned char *)(v29 + 16) = 0;
LABEL_32:
        swift_willThrow();
        return v28 & 1;
      }
      if (v26 != 6)
      {
        sub_1C3FE3FF0();
        swift_allocError();
        *(_OWORD *)uint64_t v30 = xmmword_1C449B0D0;
LABEL_31:
        *(unsigned char *)(v30 + 16) = 4;
        goto LABEL_32;
      }
      unsigned __int8 v27 = sub_1C44965A8();
      if ((v21 & 0x100) == 0 && v27 != v21) {
        goto LABEL_20;
      }
      unsigned __int8 v31 = sub_1C44965A8();
      if (v20)
      {
        if (v20 == 1)
        {
          LODWORD(v32) = HIDWORD(a1) - a1;
          if (!__OFSUB__(HIDWORD(a1), a1))
          {
            uint64_t v32 = (int)v32;
            goto LABEL_29;
          }
          goto LABEL_43;
        }
        uint64_t v34 = *(void *)(a1 + 16);
        uint64_t v33 = *(void *)(a1 + 24);
        BOOL v14 = __OFSUB__(v33, v34);
        uint64_t v32 = v33 - v34;
        if (v14)
        {
LABEL_44:
          __break(1u);
          JUMPOUT(0x1C40F62C4);
        }
      }
      else
      {
        uint64_t v32 = v9;
      }
LABEL_29:
      int v35 = v31;
      uint64_t v36 = v31 + 8;
      if (v32 < v36) {
        goto LABEL_30;
      }
      uint64_t v38 = sub_1C4496528();
      uint64_t v40 = v38;
      unint64_t v41 = v39;
      if (a5 >> 60 == 15)
      {
        sub_1C3F7E2CC(v38, v39);
LABEL_37:
        *a6 = v36 + (-v35 & 7);
        char v28 = 1;
        return v28 & 1;
      }
      sub_1C3F7E324(a4, a5);
      char v42 = sub_1C3FAD630(a4, a5, v40, v41);
      sub_1C3F7E2CC(v40, v41);
      sub_1C3F6C6F0(a4, a5);
      if (v42) {
        goto LABEL_37;
      }
LABEL_20:
      char v28 = 0;
      return v28 & 1;
    case 2:
      uint64_t v19 = *(void *)(qword_1EA3B8CF0 + 16);
      uint64_t v18 = *(void *)(qword_1EA3B8CF0 + 24);
      uint64_t v17 = v18 - v19;
      if (!__OFSUB__(v18, v19)) {
        goto LABEL_13;
      }
      goto LABEL_42;
    default:
      goto LABEL_14;
  }
}

uint64_t static CRMulticastSyncManagerCatchupBehavior.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8) != 1) {
    return (v4 & 1) == 0 && v2 == v3;
  }
  BOOL v5 = *(void *)&v3 == 0;
  if (v3 == 0.0) {
    unsigned int v6 = *(unsigned __int8 *)(a2 + 8);
  }
  else {
    unsigned int v6 = 0;
  }
  if (v5) {
    unsigned int v4 = 0;
  }
  if (v2 == 0.0) {
    return v6;
  }
  else {
    return v4;
  }
}

uint64_t sub_1C40F6338(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8) != 1) {
    return (v4 & 1) == 0 && v2 == v3;
  }
  BOOL v5 = *(void *)&v3 == 0;
  if (v3 == 0.0) {
    unsigned int v6 = *(unsigned __int8 *)(a2 + 8);
  }
  else {
    unsigned int v6 = 0;
  }
  if (v5) {
    unsigned int v4 = 0;
  }
  if (v2 == 0.0) {
    return v6;
  }
  else {
    return v4;
  }
}

uint64_t sub_1C40F638C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v85 = a6;
  uint64_t v92 = a2;
  uint64_t v87 = a3;
  uint64_t v88 = a5;
  uint64_t v8 = type metadata accessor for Capsule();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBBC00F0);
  uint64_t v84 = v8;
  uint64_t v9 = sub_1C4496CE8();
  uint64_t v79 = sub_1C4497B38();
  uint64_t v78 = *(void (***)(char *, uint64_t))(v79 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v79);
  uint64_t v12 = (char *)&v75 - v11;
  uint64_t v13 = *(void *)(a4 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v10);
  int v77 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v83 = (char *)&v75 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  unint64_t v81 = (char *)&v75 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v80 = (char *)&v75 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  unint64_t v24 = (char *)&v75 - v23;
  uint64_t v82 = v25;
  uint64_t v26 = MEMORY[0x1F4188790](v22);
  char v28 = (char *)&v75 - v27;
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  unsigned __int8 v31 = (char *)&v75 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x1F4188790](v29);
  uint64_t v34 = (char *)&v75 - v33;
  MEMORY[0x1F4188790](v32);
  uint64_t v86 = (char *)&v75 - v35;
  uint64_t v89 = a1;
  uint64_t v90 = v13;
  uint64_t v38 = *(void (***)(char *, uint64_t))(v13 + 16);
  uint64_t v37 = v13 + 16;
  uint64_t v36 = v38;
  uint64_t v39 = a1;
  uint64_t v41 = v40;
  ((void (*)(char *, uint64_t, uint64_t))v38)(v28, v39, a4);
  ((void (*)(char *, char *, uint64_t))v38)(v24, v28, a4);
  swift_retain();
  uint64_t v91 = v9;
  int v42 = swift_dynamicCast();
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
  if (v42)
  {
    uint64_t v44 = v91;
    v43(v12, 0, 1, v91);
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    v45(v31, v12, v44);
    v45(v34, v31, v44);
    uint64_t v46 = v90;
    uint64_t v47 = v28;
  }
  else
  {
    uint64_t v76 = v41;
    v43(v12, 1, 1, v91);
    v78[1](v12, v79);
    uint64_t v48 = v85;
    sub_1C4496C68();
    sub_1C4496D18();
    uint64_t v49 = v80;
    ((void (*)(char *, char *, uint64_t))v36)(v80, v28, a4);
    uint64_t v50 = sub_1C4496D28();
    uint64_t v79 = (uint64_t)v34;
    *(void *)uint64_t v34 = v50;
    uint64_t v78 = v36;
    uint64_t v75 = v37;
    ((void (*)(char *, char *, uint64_t))v36)(v81, v28, a4);
    unint64_t v81 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBBF40);
    uint64_t v51 = v28;
    if (swift_dynamicCast())
    {
      sub_1C3F6DE94(&v93, (uint64_t)&v96);
      sub_1C3F6DE94(&v96, (uint64_t)&v93);
      uint64_t v52 = swift_allocObject();
      sub_1C3F6DE94(&v93, v52 + 16);
      uint64_t v53 = sub_1C4102234;
    }
    else
    {
      uint64_t v95 = 0;
      long long v93 = 0u;
      long long v94 = 0u;
      sub_1C3F962E0((uint64_t)&v93, (uint64_t *)&unk_1EA39D498);
      swift_getDynamicType();
      uint64_t v54 = v49;
      uint64_t v55 = sub_1C44986E8();
      uint64_t v56 = v48;
      uint64_t v58 = v57;
      uint64_t v52 = swift_allocObject();
      *(void *)(v52 + 16) = v55;
      *(void *)(v52 + 24) = v58;
      uint64_t v49 = v54;
      uint64_t v48 = v56;
      uint64_t v53 = sub_1C41020B0;
    }
    uint64_t v46 = v90;
    uint64_t v34 = (char *)v79;
    *(void *)(v79 + 8) = v53;
    *((void *)v34 + 2) = v52;
    uint64_t v59 = v78;
    ((void (*)(char *, char *, uint64_t))v78)(v49, v28, a4);
    uint64_t v60 = v49;
    unint64_t v61 = (*(unsigned __int8 *)(v46 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    uint64_t v62 = (void *)swift_allocObject();
    v62[2] = v84;
    v62[3] = a4;
    v62[4] = v48;
    uint64_t v63 = (char *)v62 + v61;
    uint64_t v47 = v51;
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v63, v60, a4);
    *((void *)v34 + 3) = sub_1C4102140;
    *((void *)v34 + 4) = v62;
    ((void (*)(char *, char *, uint64_t))v59)(v83, v51, a4);
    __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBBF50);
    if (swift_dynamicCast())
    {
      sub_1C3F6DE94(&v93, (uint64_t)&v96);
      sub_1C3F6DE94(&v96, (uint64_t)&v93);
      uint64_t v64 = swift_allocObject();
      sub_1C3F6DE94(&v93, v64 + 16);
      *((void *)v34 + 5) = sub_1C410222C;
      *((void *)v34 + 6) = v64;
      uint64_t v41 = v76;
    }
    else
    {
      uint64_t v95 = 0;
      long long v93 = 0u;
      long long v94 = 0u;
      sub_1C3F962E0((uint64_t)&v93, (uint64_t *)&unk_1EA39D4A8);
      ((void (*)(char *, char *, uint64_t))v59)(v77, v51, a4);
      int v65 = swift_dynamicCast();
      uint64_t v41 = v76;
      if (v65)
      {
        sub_1C3F6DE94(&v93, (uint64_t)&v96);
        sub_1C3F6DE94(&v96, (uint64_t)&v93);
        uint64_t v66 = swift_allocObject();
        sub_1C3F6DE94(&v93, v66 + 16);
        uint64_t v34 = (char *)v79;
        *(void *)(v79 + 40) = sub_1C4102224;
        *((void *)v34 + 6) = v66;
      }
      else
      {
        uint64_t v95 = 0;
        long long v93 = 0u;
        long long v94 = 0u;
        sub_1C3F962E0((uint64_t)&v93, (uint64_t *)&unk_1EA39D498);
        swift_getDynamicType();
        uint64_t v67 = sub_1C44986E8();
        uint64_t v69 = v68;
        uint64_t v70 = swift_allocObject();
        *(void *)(v70 + 16) = v67;
        *(void *)(v70 + 24) = v69;
        uint64_t v46 = v90;
        uint64_t v34 = (char *)v79;
        *(void *)(v79 + 40) = sub_1C41021E4;
        *((void *)v34 + 6) = v70;
      }
    }
  }
  uint64_t v71 = type metadata accessor for CRMulticastSyncManagerSubscription();
  uint64_t v72 = (uint64_t)v86;
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v86, v34, v91);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v47, a4);
  swift_allocObject();
  uint64_t v73 = sub_1C4100ED4(v92, v72);
  swift_release();
  *(void *)&long long v93 = v73;
  swift_beginAccess();
  sub_1C4497528();
  swift_retain();
  sub_1C44974D8();
  swift_endAccess();
  uint64_t v97 = v71;
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v96 = v73;
  sub_1C4496C88();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v96);
}

uint64_t sub_1C40F6CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C40F638C(a1, *v4, *(void *)(a4 + 16), a2, *(void *)(a4 + 24), a3);
}

uint64_t CRMulticastSyncManager.publisher.getter()
{
  return sub_1C4496CC8();
}

uint64_t type metadata accessor for CRMulticastSyncManager.CRMulticastPublisher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C40F6DC4()
{
  long long v3 = *v0;
  uint64_t v2 = v3;
  sub_1C41023B8((uint64_t)&v3);
  sub_1C4498088();
  sub_1C4497268();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1C40F6E30()
{
  long long v2 = *v0;
  long long v3 = *v0;
  if (__OFADD__(*((void *)v0 + 6), 1))
  {
    __break(1u);
  }
  else
  {
    sub_1C41023B8((uint64_t)&v3);
    sub_1C4498088();
    sub_1C4497268();
    swift_bridgeObjectRelease();
    return v2;
  }
  return result;
}

uint64_t CRMulticastSyncManager.setLink(_:)(uint64_t a1)
{
  long long v3 = (void *)*v1;
  uint64_t v4 = sub_1C4496D68();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1C4496DA8();
  uint64_t v8 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)((char *)v1 + v3[16]);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  sub_1C40F7954(a1, (uint64_t)v19);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v3[10];
  v12[3] = v3[11];
  v12[4] = v11;
  sub_1C3F6DE94(v19, (uint64_t)(v12 + 5));
  aBlock[4] = sub_1C40F79F8;
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1C3F61AC0;
  aBlock[3] = &block_descriptor_4;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  sub_1C4496D88();
  uint64_t v17 = MEMORY[0x1E4FBC860];
  sub_1C3F70988((unint64_t *)&qword_1EBBC07F0, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0960);
  sub_1C3F70AF0((unint64_t *)&qword_1EBBC0968, &qword_1EBBC0960);
  sub_1C4497BF8();
  MEMORY[0x1C87806C0](0, v10, v7, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v16);
  swift_release();
  return swift_release();
}

uint64_t sub_1C40F71E4()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C40F721C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Capsule();
  uint64_t v4 = sub_1C4497B38();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v35 - v9;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v12 = result;
  uint64_t v13 = (uint64_t *)(result + *(void *)(*(void *)result + 184));
  uint64_t v14 = v13[1];
  if (v14)
  {
    uint64_t v49 = v10;
    uint64_t v50 = v5;
    uint64_t v38 = v8;
    uint64_t v51 = v3;
    uint64_t v52 = &v35;
    uint64_t v15 = *v13;
    uint64_t v17 = v13[2];
    uint64_t v16 = (void (*)(void))v13[3];
    uint64_t v19 = v13[4];
    uint64_t v18 = v13[5];
    uint64_t v45 = v13;
    uint64_t v20 = v13[6];
    uint64_t v21 = v13[7];
    uint64_t v56 = v15;
    uint64_t v57 = v14;
    uint64_t v58 = v17;
    uint64_t v59 = v16;
    uint64_t v44 = (void (*)(char *))v16;
    uint64_t v60 = v19;
    uint64_t v61 = v18;
    uint64_t v47 = v20;
    uint64_t v62 = v20;
    uint64_t v63 = v21;
    uint64_t v46 = v21;
    MEMORY[0x1F4188790](result);
    *(&v35 - 2) = v18;
    *(&v35 - 1) = 0xBFF0000000000000;
    swift_bridgeObjectRetain();
    uint64_t v43 = v19;
    swift_retain();
    uint64_t v48 = v18;
    swift_retain();
    sub_1C4497A58();
    uint64_t v22 = v54;
    uint64_t v54 = 0;
    uint64_t v55 = 0xE000000000000000;
    sub_1C4497D28();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v54 = v15;
    uint64_t v55 = v14;
    sub_1C4497268();
    swift_bridgeObjectRetain();
    sub_1C4497268();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1C4497268();
    if ((unsigned __int128)(v17 * (__int128)3) >> 64 == (3 * v17) >> 63)
    {
      uint64_t v52 = (uint64_t *)v15;
      uint64_t v39 = v17;
      uint64_t v40 = v14;
      uint64_t v41 = a2;
      uint64_t v42 = 3 * v17;
      uint64_t v53 = 3 * v17;
      sub_1C4498088();
      sub_1C4497268();
      swift_bridgeObjectRelease();
      sub_1C4497268();
      sub_1C40F4D8C(v54, v55);
      swift_bridgeObjectRelease();
      uint64_t v54 = 0;
      uint64_t v55 = 0xE000000000000000;
      sub_1C4497D28();
      sub_1C40F6DC4();
      sub_1C4497268();
      swift_bridgeObjectRelease();
      sub_1C4497268();
      uint64_t v23 = v12 + *(void *)(*(void *)v12 + 112);
      swift_beginAccess();
      uint64_t v24 = v50;
      uint64_t v25 = v49;
      uint64_t v26 = v4;
      uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
      v37(v49, v23, v4);
      uint64_t v27 = v51;
      uint64_t v28 = *(void *)(v51 - 8);
      uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
      int v29 = v36(v25, 1, v51);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v26);
      if (v29 == 1)
      {
        uint64_t v30 = v41;
        uint64_t v31 = v40;
        goto LABEL_8;
      }
      uint64_t v32 = v38;
      v37(v38, v23, v26);
      uint64_t result = v36(v32, 1, v27);
      if (result != 1)
      {
        v44(v32);
        (*(void (**)(char *, uint64_t))(v28 + 8))(v32, v27);
        uint64_t v30 = v41;
        uint64_t v31 = v40;
LABEL_8:
        sub_1C4497268();
        swift_bridgeObjectRelease();
        sub_1C4497268();
        uint64_t v53 = v42;
        sub_1C4498088();
        sub_1C4497268();
        swift_bridgeObjectRelease();
        sub_1C4497268();
        sub_1C4497668();
        sub_1C4497268();
        sub_1C40F4D8C(v54, v55);
        sub_1C4101A7C((uint64_t)v52, v31);
        swift_bridgeObjectRelease();
        a2 = v30;
        if (v45[1]) {
          v45[7] = v22;
        }
        goto LABEL_10;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_10:
  sub_1C40F7954(a2, (uint64_t)&v54);
  uint64_t v33 = v12 + *(void *)(*(void *)v12 + 136);
  swift_beginAccess();
  sub_1C3F98338((uint64_t)&v54, v33, qword_1EA39D288);
  swift_endAccess();
  uint64_t v34 = v12 + *(void *)(*(void *)v12 + 144);
  if (*(unsigned char *)(v34 + 8) != 1 || *(void *)v34)
  {
    sub_1C40F7A08(1);
    sub_1C40F8B30();
  }
  return swift_release();
}

uint64_t sub_1C40F7954(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1C40F79B8()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t sub_1C40F79F8()
{
  return sub_1C40F721C(*(void *)(v0 + 32), v0 + 40);
}

uint64_t sub_1C40F7A08(int a1)
{
  long long v2 = v1;
  int v116 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39D4F0);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v111 = (uint64_t)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v118 = (uint64_t)&v104 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39D4C8);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v115 = (uint64_t)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v110 = (uint64_t)&v104 - v11;
  uint64_t v12 = type metadata accessor for Peer_Heartbeat(0);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v122 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v113 = (uint64_t)&v104 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0598);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v109 = (uint64_t)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v108 = (uint64_t)&v104 - v19;
  uint64_t v20 = type metadata accessor for Proto_Version(0);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v106 = (uint64_t *)((char *)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = type metadata accessor for Proto_Value(0);
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  uint64_t v107 = (uint64_t)&v104 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v104 - v25;
  uint64_t v120 = type metadata accessor for Proto_Document(0);
  uint64_t v117 = *(void *)(v120 - 8);
  MEMORY[0x1F4188790](v120);
  uint64_t v112 = (uint64_t)&v104 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Capsule();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v31 = (char *)&v104 - v30;
  uint64_t v32 = type metadata accessor for Peer_Message(0);
  uint64_t result = MEMORY[0x1F4188790](v32);
  uint64_t v121 = (char *)&v104 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = (char *)v2 + *(void *)(v3 + 144);
  if (v35[8] == 1 && !*(void *)v35) {
    return result;
  }
  uint64_t v114 = v12;
  uint64_t v36 = v121;
  sub_1C4496888();
  uint64_t v37 = *(int *)(v32 + 20);
  if (qword_1EA39BA58 != -1) {
    swift_once();
  }
  uint64_t v119 = v37;
  *(void *)&v36[v37] = qword_1EA39FFD8;
  uint64_t v38 = (char *)v2 + *(void *)(*v2 + 112);
  swift_beginAccess();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v38, 1, v28))
  {
    swift_retain();
    uint64_t v39 = v120;
    uint64_t v40 = (uint64_t)v121;
    uint64_t v41 = v114;
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v31, v38, v28);
  Capsule.version.getter(v28, &v123);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v29 + 8);
  swift_retain();
  v42(v31, v28);
  uint64_t v104 = v124;
  uint64_t v105 = v123;
  uint64_t v43 = *(void **)((char *)v2 + *(void *)(*v2 + 120));
  type metadata accessor for CREncoder();
  uint64_t inited = swift_initStackObject();
  uint64_t v45 = MEMORY[0x1E4FBC860];
  uint64_t v46 = MEMORY[0x1E4FBC868];
  *(void *)(inited + 32) = MEMORY[0x1E4FBC868];
  *(void *)(inited + 40) = v45;
  *(void *)(inited + 48) = v45;
  *(void *)(inited + 56) = v46;
  *(void *)(inited + 64) = v45;
  *(void *)(inited + 80) = 0;
  *(void *)(inited + 88) = 0;
  *(void *)(inited + 16) = v43;
  *(void *)(inited + 24) = v45;
  *(unsigned char *)(inited + 72) = 2;
  id v47 = v43;
  uint64_t v48 = v112;
  sub_1C4496888();
  uint64_t v49 = *(int *)(v120 + 20);
  uint64_t v41 = v114;
  if (qword_1EBBC0328 != -1) {
    swift_once();
  }
  *(void *)(v48 + v49) = qword_1EBBC05C0;
  swift_retain();
  sub_1C4496888();
  uint64_t v50 = *(int *)(v22 + 20);
  if (qword_1EBBBF8C8 != -1) {
    swift_once();
  }
  *(void *)&v26[v50] = qword_1EBBBF8B8;
  uint64_t v123 = v105;
  uint64_t v124 = v104;
  swift_retain();
  uint64_t v51 = v106;
  sub_1C3F9FF10(inited, v106);
  sub_1C43EF158((uint64_t)v51);
  uint64_t v52 = v107;
  sub_1C41027C0((uint64_t)v26, v107, type metadata accessor for Proto_Value);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    uint64_t v53 = swift_retain();
    *(void *)(v48 + v49) = sub_1C3F7CB4C(v53);
    swift_release();
  }
  uint64_t v54 = *(void *)(v48 + v49);
  uint64_t v55 = v108;
  sub_1C41026B4(v52, v108, type metadata accessor for Proto_Value);
  uint64_t v56 = type metadata accessor for Proto_Document.OneOf_Root(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v55, 0, 1, v56);
  uint64_t v57 = v109;
  sub_1C3F961BC(v55, v109, &qword_1EBBC0598);
  uint64_t v58 = v54 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v57, v58, &qword_1EBBC0598);
  swift_endAccess();
  swift_release();
  sub_1C3FB065C(v48);
  sub_1C410271C((uint64_t)v26, type metadata accessor for Proto_Value);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v40 = (uint64_t)v121;
  uint64_t v59 = *(void *)&v121[v119]
      + OBJC_IVAR____TtCV9Coherence12Peer_MessageP33_9CC68E4D751A0306394090738A44396513_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v60 = v110;
  sub_1C3F970C4(v59, v110, &qword_1EA39D4C8);
  uint64_t v61 = type metadata accessor for Peer_Message.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 48))(v60, 1, v61) == 1)
  {
    sub_1C3F962E0(v60, &qword_1EA39D4C8);
    uint64_t v62 = v113;
    uint64_t v39 = v120;
LABEL_18:
    sub_1C4496888();
    uint64_t v64 = *(int *)(v41 + 20);
    if (qword_1EA39BA68 != -1) {
      swift_once();
    }
    *(void *)(v62 + v64) = qword_1EA39FFE0;
    swift_retain();
    goto LABEL_21;
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v62 = v113;
  uint64_t v39 = v120;
  if (EnumCaseMultiPayload != 5)
  {
    sub_1C410271C(v60, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
    goto LABEL_18;
  }
  sub_1C41026B4(v60, v113, type metadata accessor for Peer_Heartbeat);
LABEL_21:
  uint64_t v65 = *(int *)(v41 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v66 = *(void *)(v62 + v65);
    type metadata accessor for Peer_Heartbeat._StorageClass(0);
    uint64_t v67 = swift_allocObject();
    uint64_t v68 = v67 + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__version;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 56))(v67 + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__version, 1, 1, v39);
    uint64_t v69 = (unsigned char *)(v67
                  + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__isInitialHeartbeat);
    *(unsigned char *)(v67
             + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__isInitialHeartbeat) = 0;
    uint64_t v70 = v66 + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__version;
    swift_beginAccess();
    uint64_t v71 = v70;
    uint64_t v72 = v118;
    sub_1C3F970C4(v71, v118, &qword_1EA39D4F0);
    swift_beginAccess();
    swift_retain();
    uint64_t v73 = v72;
    uint64_t v39 = v120;
    uint64_t v41 = v114;
    sub_1C3F98338(v73, v68, &qword_1EA39D4F0);
    swift_endAccess();
    uint64_t v74 = (unsigned char *)(v66
                  + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__isInitialHeartbeat);
    swift_beginAccess();
    LOBYTE(v74) = *v74;
    swift_beginAccess();
    *uint64_t v69 = (_BYTE)v74;
    swift_release();
    *(void *)(v113 + v65) = v67;
    uint64_t v62 = v113;
    swift_release();
  }
  uint64_t v75 = *(void *)(v62 + v65);
  uint64_t v76 = v118;
  sub_1C41026B4(v112, v118, type metadata accessor for Proto_Document);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v117 + 56))(v76, 0, 1, v39);
  uint64_t v77 = v111;
  sub_1C3F961BC(v76, v111, &qword_1EA39D4F0);
  uint64_t v78 = v75 + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__version;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v77, v78, &qword_1EA39D4F0);
  swift_endAccess();
  swift_release();
  sub_1C43D8F68(v62);
LABEL_24:
  uint64_t v79 = *(void *)(v40 + v119)
      + OBJC_IVAR____TtCV9Coherence12Peer_MessageP33_9CC68E4D751A0306394090738A44396513_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v80 = v115;
  sub_1C3F970C4(v79, v115, &qword_1EA39D4C8);
  uint64_t v81 = type metadata accessor for Peer_Message.OneOf_TaggedOneOf(0);
  int v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 48))(v80, 1, v81);
  uint64_t v83 = (uint64_t)v122;
  if (v82 == 1)
  {
    sub_1C3F962E0(v80, &qword_1EA39D4C8);
LABEL_29:
    sub_1C4496888();
    uint64_t v84 = *(int *)(v41 + 20);
    if (qword_1EA39BA68 != -1) {
      swift_once();
    }
    *(void *)(v83 + v84) = qword_1EA39FFE0;
    swift_retain();
    goto LABEL_32;
  }
  if (swift_getEnumCaseMultiPayload() != 5)
  {
    sub_1C410271C(v80, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
    goto LABEL_29;
  }
  sub_1C41026B4(v80, v83, type metadata accessor for Peer_Heartbeat);
LABEL_32:
  uint64_t v85 = *(int *)(v41 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v86 = *(void *)(v83 + v85);
    type metadata accessor for Peer_Heartbeat._StorageClass(0);
    uint64_t v87 = swift_allocObject();
    uint64_t v88 = v87 + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__version;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 56))(v87 + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__version, 1, 1, v39);
    uint64_t v89 = (unsigned char *)(v87
                  + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__isInitialHeartbeat);
    *(unsigned char *)(v87
             + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__isInitialHeartbeat) = 0;
    uint64_t v90 = v86 + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__version;
    swift_beginAccess();
    uint64_t v91 = v90;
    uint64_t v92 = v118;
    sub_1C3F970C4(v91, v118, &qword_1EA39D4F0);
    swift_beginAccess();
    swift_retain();
    sub_1C3F98338(v92, v88, &qword_1EA39D4F0);
    swift_endAccess();
    long long v93 = (unsigned char *)(v86
                  + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__isInitialHeartbeat);
    swift_beginAccess();
    LOBYTE(v93) = *v93;
    swift_beginAccess();
    *uint64_t v89 = (_BYTE)v93;
    swift_release();
    *(void *)&v122[v85] = v87;
    uint64_t v83 = (uint64_t)v122;
    swift_release();
  }
  long long v94 = (unsigned char *)(*(void *)(v83 + v85)
                + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__isInitialHeartbeat);
  swift_beginAccess();
  *long long v94 = v116 & 1;
  sub_1C43D8F68(v83);
  if (qword_1EA39BA30 != -1) {
    swift_once();
  }
  uint64_t v95 = sub_1C4496C58();
  __swift_project_value_buffer(v95, (uint64_t)qword_1EA3B8CD8);
  long long v96 = sub_1C4496C38();
  os_log_type_t v97 = sub_1C44979B8();
  if (os_log_type_enabled(v96, v97))
  {
    unint64_t v98 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v98 = 0;
    _os_log_impl(&dword_1C3F4F000, v96, v97, "Send heatbeat", v98, 2u);
    MEMORY[0x1C8782060](v98, -1, -1);
  }

  uint64_t v99 = (uint64_t)v2 + *(void *)(*v2 + 136);
  swift_beginAccess();
  if (!*(void *)(v99 + 24)) {
    return sub_1C410271C(v40, type metadata accessor for Peer_Message);
  }
  sub_1C40F7954(v99, (uint64_t)&v123);
  uint64_t v100 = v126;
  __swift_project_boxed_opaque_existential_1(&v123, v125);
  uint64_t v101 = sub_1C40FCE78();
  unint64_t v103 = v102;
  (*(void (**)(void))(v100 + 8))();
  sub_1C410271C(v40, type metadata accessor for Peer_Message);
  sub_1C3F7E2CC(v101, v103);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
}

uint64_t sub_1C40F8B30()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v39 = v2;
  uint64_t v3 = sub_1C4496D68();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v42 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1C4496DA8();
  uint64_t v41 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1C4496DC8();
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v14 = sub_1C4497A98();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t result = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (double *)((char *)v1 + *(void *)(v2 + 144));
  if (((_BYTE)v19[1] & 1) == 0)
  {
    uint64_t v34 = v6;
    uint64_t v35 = v4;
    uint64_t v36 = v3;
    double v20 = *v19;
    sub_1C3FF32D4(0, &qword_1EA39D4F8);
    aBlock[0] = MEMORY[0x1E4FBC860];
    sub_1C3F70988(&qword_1EA39D500, MEMORY[0x1E4FBCC70]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39D508);
    sub_1C3F70AF0(qword_1EA39D510, &qword_1EA39D508);
    sub_1C4497BF8();
    uint64_t v21 = sub_1C4497AA8();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    uint64_t ObjectType = swift_getObjectType();
    sub_1C4496DB8();
    MEMORY[0x1C877FA60](v11, v20);
    uint64_t v23 = v38;
    uint64_t v24 = *(void (**)(char *, uint64_t))(v37 + 8);
    v24(v11, v38);
    if (qword_1EA39BA28 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_1C4496D58();
    uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)qword_1EA3B8CC0);
    MEMORY[0x1C8780750](v13, v26, ObjectType, v20);
    v24(v13, v23);
    uint64_t v27 = swift_allocObject();
    swift_weakInit();
    uint64_t v28 = (void *)swift_allocObject();
    uint64_t v29 = v39;
    v28[2] = *(void *)(v39 + 80);
    v28[3] = *(void *)(v29 + 88);
    v28[4] = v27;
    aBlock[4] = sub_1C410285C;
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1C3F61AC0;
    aBlock[3] = &block_descriptor_86;
    uint64_t v30 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v31 = v40;
    sub_1C4496D88();
    uint64_t v32 = v42;
    sub_1C40F9A9C();
    sub_1C4497AB8();
    _Block_release(v30);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v36);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v34);
    swift_release();
    swift_release();
    sub_1C4497AC8();
    *(void *)((char *)v1 + *(void *)(*v1 + 152)) = v21;
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1C40F90CC()
{
  uint64_t v0 = type metadata accessor for Capsule();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v12 - v2;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = (void *)result;
    sub_1C40F93BC(0, 0, 0x6573756F68766E69, 0xE800000000000000, 0, 0xE000000000000000);
    sub_1C40F7A08(0);
    uint64_t v7 = v5 + *(void *)(*(void *)v5 + 160);
    swift_beginAccess();
    if (*(void *)(*(void *)v7 + 16) >= 2uLL)
    {
      swift_beginAccess();
      if (!*(void *)(*(void *)v7 + 16))
      {
        __break(1u);
        goto LABEL_13;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1C4134F10(0, 1);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v8 = v5 + *(void *)(*(void *)v5 + 112);
    swift_beginAccess();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v8, 1, v0)) {
      return swift_release();
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v8, v0);
    Capsule.version.getter(v0, &v13);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    long long v12 = v13;
    swift_beginAccess();
    uint64_t v6 = *(void **)v7;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v7 = v6;
    if (isUniquelyReferenced_nonNull_native)
    {
LABEL_7:
      unint64_t v11 = v6[2];
      unint64_t v10 = v6[3];
      if (v11 >= v10 >> 1)
      {
        uint64_t v6 = sub_1C3FF1D08((void *)(v10 > 1), v11 + 1, 1, v6);
        *(void *)uint64_t v7 = v6;
      }
      v6[2] = v11 + 1;
      *(_OWORD *)&v6[2 * v11 + 4] = v12;
      swift_endAccess();
      return swift_release();
    }
LABEL_13:
    uint64_t v6 = sub_1C3FF1D08(0, v6[2] + 1, 1, v6);
    *(void *)uint64_t v7 = v6;
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1C40F93BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = *v7;
  uint64_t v15 = type metadata accessor for Capsule();
  uint64_t v16 = sub_1C4497B38();
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t result = MEMORY[0x1F4188790](v17);
  uint64_t v22 = (uint64_t *)((char *)v7 + *(void *)(v14 + 184));
  uint64_t v23 = v22[1];
  if (v23)
  {
    uint64_t v56 = (char *)&v52 - v19;
    uint64_t v57 = v21;
    uint64_t v58 = result;
    uint64_t v55 = v20;
    uint64_t v60 = a1;
    uint64_t v59 = v15;
    uint64_t v24 = a2;
    uint64_t v70 = a3;
    uint64_t v71 = a4;
    uint64_t v72 = a5;
    uint64_t v26 = v22[2];
    uint64_t v25 = (void (*)(void))v22[3];
    uint64_t v27 = v22[4];
    uint64_t v28 = v22[5];
    uint64_t v29 = v22[6];
    uint64_t v30 = v22[7];
    uint64_t v69 = *v22;
    uint64_t v79 = v69;
    uint64_t v80 = v23;
    uint64_t v81 = v26;
    int v82 = v25;
    uint64_t v73 = v25;
    uint64_t v83 = v27;
    uint64_t v84 = v28;
    uint64_t v66 = v29;
    uint64_t v85 = v29;
    uint64_t v86 = v30;
    MEMORY[0x1F4188790](result);
    *(&v52 - 2) = v28;
    *(&v52 - 1) = v31;
    uint64_t v65 = v31;
    uint64_t v67 = v32;
    swift_bridgeObjectRetain();
    uint64_t v74 = v27;
    swift_retain();
    uint64_t v68 = v28;
    swift_retain();
    uint64_t v33 = MEMORY[0x1E4FBB3D0];
    uint64_t result = sub_1C4497A58();
    uint64_t v34 = v77;
    if (v22[1]) {
      v22[7] = v77;
    }
    uint64_t v77 = 34;
    uint64_t v78 = 0xE100000000000000;
    if ((unsigned __int128)(v26 * (__int128)3) >> 64 == (3 * v26) >> 63)
    {
      uint64_t v63 = v26;
      uint64_t v64 = a6;
      uint64_t v75 = 3 * v26;
      sub_1C4498088();
      sub_1C4497268();
      swift_bridgeObjectRelease();
      sub_1C4497268();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07E0);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_1C449B490;
      uint64_t v36 = MEMORY[0x1E4FBB460];
      *(void *)(v35 + 56) = v33;
      *(void *)(v35 + 64) = v36;
      *(void *)(v35 + 32) = v34;
      sub_1C44971E8();
      sub_1C4497268();
      swift_bridgeObjectRelease();
      sub_1C4497268();
      uint64_t v61 = v77;
      uint64_t v62 = v78;
      uint64_t v77 = sub_1C40F6DC4();
      uint64_t v78 = v37;
      sub_1C4497268();
      sub_1C40F6E30();
      sub_1C4497268();
      swift_bridgeObjectRelease();
      sub_1C4497268();
      sub_1C40F4D8C(v77, v78);
      swift_bridgeObjectRelease();
      if (!v24)
      {
        uint64_t v60 = 0;
        uint64_t v38 = (uint64_t)v7 + *(void *)(*v7 + 112);
        swift_beginAccess();
        uint64_t v39 = v57;
        uint64_t v40 = v56;
        uint64_t v41 = v58;
        uint64_t v54 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
        v54(v56, v38, v58);
        uint64_t v42 = v59;
        uint64_t v43 = *(void *)(v59 - 8);
        uint64_t v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
        int v44 = v53(v40, 1, v59);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
        if (v44 != 1)
        {
          uint64_t v45 = v55;
          v54(v55, v38, v41);
          uint64_t result = v53(v45, 1, v42);
          if (result == 1)
          {
LABEL_15:
            __break(1u);
            return result;
          }
          v73((uint64_t)v45);
          (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
        }
      }
      uint64_t v75 = 0;
      uint64_t v76 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      sub_1C4497D28();
      uint64_t v46 = sub_1C40F6E30();
      uint64_t v48 = v47;
      swift_bridgeObjectRelease();
      uint64_t v75 = v46;
      uint64_t v76 = v48;
      sub_1C4497268();
      sub_1C4497268();
      swift_bridgeObjectRelease();
      sub_1C4497268();
      sub_1C4497268();
      sub_1C4497268();
      sub_1C4497268();
      swift_bridgeObjectRelease();
      sub_1C4497268();
      sub_1C4497268();
      sub_1C40F4D8C(v75, v76);
      swift_bridgeObjectRelease();
      uint64_t result = sub_1C4101A7C(v69, v67);
      if (!v22[1]) {
        return result;
      }
      uint64_t v49 = v22[6];
      BOOL v50 = __OFADD__(v49, 1);
      uint64_t v51 = v49 + 1;
      if (!v50)
      {
        v22[6] = v51;
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_1C40F9A9C()
{
  return sub_1C4497BF8();
}

uint64_t CRMulticastSyncManager.isValidMessage(_:)(uint64_t a1, unint64_t a2)
{
  return sub_1C40F5F18(a1, a2, *(unsigned __int8 *)(v2 + *(void *)(*(void *)v2 + 168)) | (unsigned __int16)(*(unsigned __int8 *)(v2 + *(void *)(*(void *)v2 + 168) + 1) << 8), *(void *)(v2 + *(void *)(*(void *)v2 + 176)), *(void *)(v2 + *(void *)(*(void *)v2 + 176) + 8), &v4) & 1;
}

uint64_t CRMulticastSyncManager.receive(_:)(uint64_t a1, unint64_t a2)
{
  return sub_1C40F9BF8(a1, a2, 0, 0);
}

uint64_t sub_1C40F9BF8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a3;
  uint64_t v8 = (void *)*v4;
  uint64_t v9 = sub_1C4496D68();
  uint64_t v23 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_1C4496DA8();
  uint64_t v12 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)((char *)v4 + v8[16]);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v8[10];
  v16[3] = v8[11];
  v16[4] = v15;
  v16[5] = a1;
  v16[6] = a2;
  v16[7] = v20;
  v16[8] = a4;
  aBlock[4] = sub_1C410242C;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1C3F61AC0;
  aBlock[3] = &block_descriptor_67;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  sub_1C3F7E324(a1, a2);
  swift_bridgeObjectRetain();
  sub_1C4496D88();
  uint64_t v24 = MEMORY[0x1E4FBC860];
  sub_1C3F70988((unint64_t *)&qword_1EBBC07F0, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0960);
  sub_1C3F70AF0((unint64_t *)&qword_1EBBC0968, &qword_1EBBC0960);
  sub_1C4497BF8();
  MEMORY[0x1C87806C0](0, v14, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v22);
  swift_release();
  return swift_release();
}

void sub_1C40F9F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v51 = a2;
  uint64_t v52 = a4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39D4C8);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v54 = (uint64_t)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v55 = (uint64_t)&v47 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v47 - v15;
  uint64_t v17 = type metadata accessor for Peer_Message(0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EA39BA30 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_1C4496C58();
  uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)qword_1EA3B8CD8);
  sub_1C41027C0(a1, (uint64_t)v19, type metadata accessor for Peer_Message);
  uint64_t v53 = v21;
  uint64_t v22 = sub_1C4496C38();
  os_log_type_t v23 = sub_1C44979B8();
  if (!os_log_type_enabled(v22, v23))
  {
    sub_1C410271C((uint64_t)v19, type metadata accessor for Peer_Message);

    if (!a3) {
      return;
    }
LABEL_10:
    uint64_t v31 = (uint64_t *)(v6 + *(void *)(*(void *)v6 + 184));
    uint64_t v32 = v31[1];
    if (!v32) {
      return;
    }
    uint64_t v34 = v31[2];
    uint64_t v33 = v31[3];
    uint64_t v36 = v31[4];
    uint64_t v35 = v31[5];
    uint64_t v37 = v31[6];
    uint64_t v38 = v31[7];
    uint64_t v47 = *v31;
    v59[0] = v47;
    v59[1] = v32;
    uint64_t v48 = v34;
    v59[2] = v34;
    v59[3] = v33;
    uint64_t v49 = v33;
    v59[4] = v36;
    v59[5] = v35;
    uint64_t v50 = v37;
    v59[6] = v37;
    v59[7] = v38;
    uint64_t v39 = *(void *)(a1 + *(int *)(v17 + 20))
        + OBJC_IVAR____TtCV9Coherence12Peer_MessageP33_9CC68E4D751A0306394090738A44396513_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v40 = v55;
    sub_1C3F970C4(v39, v55, &qword_1EA39D4C8);
    uint64_t v41 = type metadata accessor for Peer_Message.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v40, 1, v41) == 1)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
LABEL_13:
      uint64_t v42 = sub_1C4496C38();
      os_log_type_t v43 = sub_1C44979C8();
      if (os_log_type_enabled(v42, v43))
      {
        int v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v44 = 0;
        _os_log_impl(&dword_1C3F4F000, v42, v43, "Unexpected multicast message.", v44, 2u);
        MEMORY[0x1C8782060](v44, -1, -1);
      }
      sub_1C4101A7C(v47, v32);

      sub_1C3F962E0(v40, &qword_1EA39D4C8);
      return;
    }
    sub_1C3F970C4(v40, v54, &qword_1EA39D4C8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v46 = a3;
        break;
      case 5:
        uint64_t v46 = a3;
        break;
      case 4:
        uint64_t v46 = a3;
        break;
      default:
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        sub_1C410271C(v54, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
        goto LABEL_13;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_1C410271C(v54, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
    sub_1C3F962E0(v40, &qword_1EA39D4C8);
    uint64_t v56 = 0;
    uint64_t v57 = 0xE000000000000000;
    sub_1C4497D28();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v56 = v51;
    uint64_t v57 = v46;
    sub_1C4497268();
    sub_1C40F6E30();
    sub_1C4497268();
    swift_bridgeObjectRelease();
    sub_1C4497268();
    sub_1C4497268();
    swift_bridgeObjectRelease();
    sub_1C4497268();
    sub_1C4497268();
    sub_1C4497268();
    sub_1C40F4D8C(v56, v57);
    sub_1C4101A7C(v47, v32);
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v48 = a1;
  uint64_t v49 = a3;
  uint64_t v50 = a5;
  uint64_t v24 = (uint8_t *)swift_slowAlloc();
  uint64_t v25 = swift_slowAlloc();
  v59[0] = v25;
  *(_DWORD *)uint64_t v24 = 136315138;
  uint64_t v26 = *(void *)&v19[*(int *)(v17 + 20)]
      + OBJC_IVAR____TtCV9Coherence12Peer_MessageP33_9CC68E4D751A0306394090738A44396513_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v26, (uint64_t)v16, &qword_1EA39D4C8);
  uint64_t v27 = type metadata accessor for Peer_Message.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v16, 1, v27) == 1)
  {
    sub_1C3F962E0((uint64_t)v16, &qword_1EA39D4C8);
    unint64_t v28 = 0xE100000000000000;
    unint64_t v29 = 63;
  }
  else
  {
    unint64_t v29 = sub_1C40F5174();
    unint64_t v28 = v30;
    sub_1C410271C((uint64_t)v16, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
  }
  uint64_t v58 = sub_1C43BE154(v29, v28, v59);
  sub_1C4497B68();
  swift_bridgeObjectRelease();
  sub_1C410271C((uint64_t)v19, type metadata accessor for Peer_Message);
  _os_log_impl(&dword_1C3F4F000, v22, v23, "Receive %s", v24, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1C8782060](v25, -1, -1);
  MEMORY[0x1C8782060](v24, -1, -1);

  a3 = v49;
  a1 = v48;
  if (v49) {
    goto LABEL_10;
  }
}

uint64_t sub_1C40FA6E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v54 = a4;
  uint64_t v55 = a5;
  uint64_t v7 = type metadata accessor for Peer_Heartbeat(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Proto_Document(0);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v52 = (uint64_t)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v51 = (uint64_t)&v47 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39D4C8);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v53 = (uint64_t)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v47 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA39D4D0);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Peer_Message(0);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v47 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v48 = v9;
    uint64_t v49 = v25;
    uint64_t v50 = v18;
    uint64_t v27 = *(void *)(*(void *)result + 168);
    __int16 v28 = *(unsigned __int8 *)(result + v27);
    __int16 v29 = *(unsigned __int8 *)(result + v27 + 1);
    unint64_t v30 = (uint64_t *)(result + *(void *)(*(void *)result + 176));
    uint64_t v31 = *v30;
    unint64_t v32 = v30[1];
    sub_1C3F6C704(*v30, v32);
    sub_1C40F5960(a2, a3, v28 | (v29 << 8), v31, v32, (uint64_t)v21);
    sub_1C3F6C6F0(v31, v32);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
    {
      swift_release();
      uint64_t v33 = (uint64_t *)&unk_1EA39D4D0;
      uint64_t v34 = (uint64_t)v21;
      return sub_1C3F962E0(v34, v33);
    }
    uint64_t v35 = (uint64_t)v49;
    sub_1C41026B4((uint64_t)v21, (uint64_t)v49, type metadata accessor for Peer_Message);
    sub_1C40F9F48(v35, v54, v55, 0x6C616D726F6ELL, 0xE600000000000000);
    uint64_t v36 = *(void *)(v35 + *(int *)(v22 + 20))
        + OBJC_IVAR____TtCV9Coherence12Peer_MessageP33_9CC68E4D751A0306394090738A44396513_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v37 = (uint64_t)v50;
    sub_1C3F970C4(v36, (uint64_t)v50, &qword_1EA39D4C8);
    uint64_t v38 = type metadata accessor for Peer_Message.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 48))(v37, 1, v38) == 1) {
      goto LABEL_5;
    }
    uint64_t v43 = v53;
    sub_1C3F970C4(v37, v53, &qword_1EA39D4C8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 5)
    {
      uint64_t v45 = (uint64_t)v48;
      sub_1C41026B4(v43, (uint64_t)v48, type metadata accessor for Peer_Heartbeat);
      sub_1C40FBB64(v45);
      swift_release();
      uint64_t v46 = type metadata accessor for Peer_Heartbeat;
    }
    else
    {
      if (EnumCaseMultiPayload == 4)
      {
        uint64_t v45 = v52;
        sub_1C41026B4(v43, v52, type metadata accessor for Proto_Document);
        sub_1C40FB670(v45);
      }
      else
      {
        if (EnumCaseMultiPayload != 2)
        {
          sub_1C410271C(v43, type metadata accessor for Peer_Message.OneOf_TaggedOneOf);
LABEL_5:
          if (qword_1EA39BA30 != -1) {
            swift_once();
          }
          uint64_t v39 = sub_1C4496C58();
          __swift_project_value_buffer(v39, (uint64_t)qword_1EA3B8CD8);
          uint64_t v40 = sub_1C4496C38();
          os_log_type_t v41 = sub_1C44979C8();
          if (os_log_type_enabled(v40, v41))
          {
            uint64_t v42 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v42 = 0;
            _os_log_impl(&dword_1C3F4F000, v40, v41, "Unexpected multicast message.", v42, 2u);
            MEMORY[0x1C8782060](v42, -1, -1);
          }
          swift_release();

          goto LABEL_10;
        }
        uint64_t v45 = v51;
        sub_1C41026B4(v43, v51, type metadata accessor for Proto_Document);
        sub_1C40FAF04(v45);
      }
      swift_release();
      uint64_t v46 = type metadata accessor for Proto_Document;
    }
    sub_1C410271C(v45, v46);
LABEL_10:
    sub_1C410271C(v35, type metadata accessor for Peer_Message);
    uint64_t v33 = &qword_1EA39D4C8;
    uint64_t v34 = v37;
    return sub_1C3F962E0(v34, v33);
  }
  return result;
}

uint64_t sub_1C40FAF04(uint64_t a1)
{
  uint64_t v40 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v36 = *(void *)(*v1 + 88);
  uint64_t v38 = *(void *)(v36 + 16);
  uint64_t v39 = v3;
  uint64_t v4 = type metadata accessor for Capsule();
  uint64_t v5 = sub_1C4497B38();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v43 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = *(void *)(v2 + 112);
  os_log_type_t v41 = v1;
  uint64_t v12 = (uint64_t)v1 + v11;
  swift_beginAccess();
  uint64_t v42 = *(void (**)(void))(v6 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v42)(v10, v12, v5);
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48);
  LODWORD(v2) = v13(v10, 1, v4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  if (v2 != 1)
  {
    type metadata accessor for CRDecoder(0);
    uint64_t v15 = swift_allocObject();
    uint64_t v16 = MEMORY[0x1E4FBC860];
    *(void *)(v15 + 16) = 0;
    *(void *)(v15 + 24) = v16;
    uint64_t v17 = MEMORY[0x1E4FBC868];
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v17;
    *(unsigned char *)(v15 + 48) = 0;
    *(void *)(v15 + 56) = 0;
    uint64_t v18 = v15 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
    uint64_t v19 = type metadata accessor for Proto_CRDT(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
    uint64_t v20 = v15 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
    uint64_t v21 = type metadata accessor for Proto_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
    *(void *)(v15 + 16) = 0;
    swift_release();
    *(_WORD *)(v15 + 48) = 513;
    uint64_t v22 = (uint64_t)v43;
    v42();
    uint64_t v42 = (void (*)(void))v13;
    uint64_t result = v13((char *)v22, 1, v4);
    if (result != 1)
    {
      uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(uint64_t *)((char *)v41 + *(void *)(*v41 + 120))
                                                                     + OBJC_IVAR___CRContext_assetManager);
      swift_retain();
      uint64_t v24 = v51;
      sub_1C3FFD184(v40, v22, v23, v39, v38, &v44);
      if (v24)
      {
        swift_release();
        swift_release();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v22, v4);
      }
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v22, v4);
      uint64_t v51 = v44;
      uint64_t v43 = v45;
      uint64_t v39 = v47;
      uint64_t v40 = v46;
      uint64_t v25 = v49;
      uint64_t v38 = v48;
      uint64_t v26 = v50;
      swift_beginAccess();
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v42)(v12, 1, v4))
      {
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1C40F93BC(0, 0, 7892834, 0xE300000000000000, 0, 0xE000000000000000);
      }
      else
      {
        uint64_t v44 = v51;
        uint64_t v45 = v43;
        uint64_t v46 = v40;
        uint64_t v47 = v39;
        uint64_t v48 = v38;
        uint64_t v49 = v25;
        uint64_t v50 = v26;
        unsigned __int8 v27 = Capsule<>.merge(delta:)(&v44, v4);
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1C40F93BC(0, 0, 7892834, 0xE300000000000000, 0, 0xE000000000000000);
        if (v27)
        {
          if (qword_1EA39BA30 != -1) {
            swift_once();
          }
          uint64_t v28 = sub_1C4496C58();
          __swift_project_value_buffer(v28, (uint64_t)qword_1EA3B8CD8);
          __int16 v29 = sub_1C4496C38();
          os_log_type_t v30 = sub_1C44979B8();
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v31 = 0;
            _os_log_impl(&dword_1C3F4F000, v29, v30, "Delta merge succeed", v31, 2u);
            MEMORY[0x1C8782060](v31, -1, -1);
          }

          sub_1C40FDBA4();
          goto LABEL_18;
        }
      }
      if (qword_1EA39BA30 != -1) {
        swift_once();
      }
      uint64_t v32 = sub_1C4496C58();
      __swift_project_value_buffer(v32, (uint64_t)qword_1EA3B8CD8);
      uint64_t v33 = sub_1C4496C38();
      os_log_type_t v34 = sub_1C44979B8();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl(&dword_1C3F4F000, v33, v34, "Delta merge fail", v35, 2u);
        MEMORY[0x1C8782060](v35, -1, -1);
      }

      sub_1C40F7A08(0);
LABEL_18:
      swift_setDeallocating();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1C3F962E0(v15 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1EBBC04F8);
      sub_1C3F962E0(v15 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1EBBC0540);
      return swift_deallocClassInstance();
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1C40FB670(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  uint64_t v5 = *(void *)(*(void *)v1 + 88);
  uint64_t v43 = *(void *)(v5 + 16);
  uint64_t v6 = type metadata accessor for Capsule();
  uint64_t v7 = sub_1C4497B38();
  uint64_t v44 = *(char **)(v7 - 8);
  uint64_t v45 = v7;
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v40 - v11;
  uint64_t v13 = type metadata accessor for Proto_Document(0);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v16 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v40 - v17;
  v47[0] = 2;
  sub_1C41027C0(a1, (uint64_t)v16, type metadata accessor for Proto_Document);
  uint64_t v19 = *(void *)(v2 + *(void *)(*(void *)v2 + 120));
  uint64_t v20 = *(void *)(v19 + OBJC_IVAR___CRContext_assetManager);
  swift_retain();
  uint64_t v21 = v20;
  uint64_t v22 = v48;
  uint64_t result = sub_1C3F74E7C(v47, 0, (uint64_t)v16, 0, v21, v4, v5, (uint64_t)v18);
  if (!v22)
  {
    v40[0] = v19;
    v40[1] = v4;
    os_log_type_t v41 = v10;
    uint64_t v42 = v18;
    uint64_t v24 = v44;
    uint64_t v48 = 0;
    uint64_t v25 = *(void *)(*(void *)v2 + 192);
    if (*(void *)(v2 + v25))
    {
      swift_retain();
      sub_1C4496DE8();
      swift_release();
    }
    uint64_t v26 = v46;
    uint64_t v27 = v6;
    *(void *)(v2 + v25) = 0;
    swift_release();
    uint64_t v28 = (char *)(v2 + *(void *)(*(void *)v2 + 112));
    swift_beginAccess();
    __int16 v29 = (void (*)(char *, uint64_t, uint64_t))*((void *)v24 + 2);
    os_log_type_t v30 = v12;
    uint64_t v31 = v12;
    uint64_t v44 = v28;
    uint64_t v32 = v45;
    v29(v31, (uint64_t)v28, v45);
    uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
    int v34 = v33(v30, 1, v27);
    (*((void (**)(char *, uint64_t))v24 + 1))(v30, v32);
    uint64_t v35 = v42;
    if (v34 == 1)
    {
      uint64_t v36 = v41;
      (*(void (**)(char *, void *, uint64_t))(v26 + 16))(v41, v42, v27);
      uint64_t v37 = v27;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v36, 0, 1, v27);
      uint64_t v38 = v44;
      swift_beginAccess();
      (*((void (**)(char *, char *, uint64_t))v24 + 5))(v38, v36, v32);
      swift_endAccess();
    }
    else
    {
      uint64_t v39 = v44;
      swift_beginAccess();
      if (!v33(v39, 1, v27)) {
        Capsule.merge<A>(_:)((uint64_t)v35, v27);
      }
      swift_endAccess();
      swift_beginAccess();
      if (v33(v39, 1, v27))
      {
        uint64_t v37 = v27;
      }
      else
      {
        uint64_t v37 = v27;
        Capsule.finalizeTimestamps(_:)(v40[0], v27);
      }
      swift_endAccess();
      uint64_t v26 = v46;
    }
    sub_1C40FDBA4();
    sub_1C40F93BC(0, 0, 7892834, 0xE300000000000000, 0, 0xE000000000000000);
    sub_1C40FD018(v35);
    return (*(uint64_t (**)(void *, uint64_t))(v26 + 8))(v35, v37);
  }
  return result;
}

uint64_t sub_1C40FBB64(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v39 = a1;
  uint64_t v3 = *v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39D4F0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Proto_Document(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Capsule();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v36 - v13;
  uint64_t v15 = (char *)v2 + *(void *)(v3 + 112);
  swift_beginAccess();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v15, 1, v11);
  if (!result)
  {
    uint64_t v37 = v7;
    uint64_t v38 = v8;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v15, v11);
    Capsule.version.getter(v11, v41);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v18 = v41[0];
    uint64_t v17 = v41[1];
    uint64_t v19 = *(void *)(v39 + *(int *)(type metadata accessor for Peer_Heartbeat(0) + 20));
    uint64_t v20 = (unsigned char *)(v19
                  + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__isInitialHeartbeat);
    swift_beginAccess();
    if (*v20 != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v21 = (char *)v2 + *(void *)(*v2 + 160);
      swift_beginAccess();
      uint64_t v22 = *(void *)v21;
      if (*(void *)(*(void *)v21 + 16))
      {
        uint64_t v18 = *(void *)(v22 + 32);
        uint64_t v17 = *(void *)(v22 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v18 = 0;
        uint64_t v17 = 0;
      }
    }
    uint64_t v39 = v17;
    type metadata accessor for CRDecoder(0);
    uint64_t v23 = swift_allocObject();
    uint64_t v24 = MEMORY[0x1E4FBC860];
    *(void *)(v23 + 16) = 0;
    *(void *)(v23 + 24) = v24;
    uint64_t v25 = MEMORY[0x1E4FBC868];
    *(void *)(v23 + 32) = v24;
    *(void *)(v23 + 40) = v25;
    *(unsigned char *)(v23 + 48) = 0;
    *(void *)(v23 + 56) = 0;
    uint64_t v26 = v23 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
    uint64_t v27 = type metadata accessor for Proto_CRDT(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
    uint64_t v28 = v23 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
    uint64_t v29 = type metadata accessor for Proto_Value(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v28, 1, 1, v29);
    *(void *)(v23 + 16) = 0;
    swift_release();
    *(unsigned char *)(v23 + 49) = 2;
    uint64_t v30 = v19 + OBJC_IVAR____TtCV9Coherence14Peer_HeartbeatP33_9CC68E4D751A0306394090738A44396513_StorageClass__version;
    swift_beginAccess();
    sub_1C3F970C4(v30, (uint64_t)v6, &qword_1EA39D4F0);
    uint64_t v31 = v37;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v6, 1, v37) == 1)
    {
      sub_1C4496888();
      uint64_t v32 = *(int *)(v31 + 20);
      uint64_t v33 = v42;
      if (qword_1EBBC0328 != -1) {
        swift_once();
      }
      *(void *)&v10[v32] = qword_1EBBC05C0;
      swift_retain();
      sub_1C3F962E0((uint64_t)v6, &qword_1EA39D4F0);
    }
    else
    {
      sub_1C41026B4((uint64_t)v6, (uint64_t)v10, type metadata accessor for Proto_Document);
      uint64_t v33 = v42;
    }
    sub_1C3FFC790((uint64_t)v10, &v40);
    sub_1C410271C((uint64_t)v10, type metadata accessor for Proto_Document);
    if (v33)
    {
      swift_release();
      return sub_1C3F870F4(v18);
    }
    swift_setDeallocating();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C3F962E0(v23 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1EBBC04F8);
    sub_1C3F962E0(v23 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1EBBC0540);
    swift_deallocClassInstance();
    uint64_t v34 = v40;
    if (v18)
    {
      if (sub_1C4112134(v39, *((uint64_t *)&v40 + 1)))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1C3F870F4(v18);
        return sub_1C40FC1D4();
      }
      char v35 = sub_1C4112134(v18, v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1C3F870F4(v18);
      if (v35) {
        return sub_1C40FC1D4();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return sub_1C40F93BC(0, 0, 0x746E696F70, 0xE500000000000000, 0, 0xE000000000000000);
  }
  return result;
}

uint64_t sub_1C40FC1D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = sub_1C4496DC8();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = sub_1C4496D68();
  MEMORY[0x1F4188790](v10);
  uint64_t v11 = v2[24];
  if (*(void *)((char *)v0 + v11))
  {
    return sub_1C40F93BC(0, 0, 0x746E696F70, 0xE500000000000000, 0, 0xE000000000000000);
  }
  else
  {
    sub_1C40F93BC(0, 0, 0x6570617274766E69, 0xEC0000006D75697ALL, 0, 0xE000000000000000);
    uint64_t v13 = swift_allocObject();
    uint64_t v25 = v3;
    uint64_t v14 = v13;
    swift_weakInit();
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = v2[10];
    v15[3] = v2[11];
    v15[4] = v14;
    aBlock[4] = sub_1C41027B4;
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1C3F61AC0;
    aBlock[3] = &block_descriptor_78;
    uint64_t v23 = _Block_copy(aBlock);
    uint64_t v26 = MEMORY[0x1E4FBC860];
    sub_1C3F70988((unint64_t *)&qword_1EBBC07F0, MEMORY[0x1E4FBCB00]);
    uint64_t v24 = v7;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0960);
    sub_1C3F70AF0((unint64_t *)&qword_1EBBC0968, &qword_1EBBC0960);
    sub_1C4497BF8();
    sub_1C4496DF8();
    swift_allocObject();
    uint64_t v16 = sub_1C4496DD8();
    uint64_t v17 = v25;
    swift_release();
    swift_release();
    *(void *)((char *)v1 + v11) = v16;
    uint64_t v18 = swift_release();
    sub_1C4100D88(v18, 0.01, 0.05);
    double v20 = v19;
    uint64_t v21 = v24;
    sub_1C4496DB8();
    MEMORY[0x1C877FA60](v21, v20);
    uint64_t v22 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
    uint64_t result = v22(v21, v17);
    if (*(void *)((char *)v1 + v11))
    {
      swift_retain();
      sub_1C4497A18();
      swift_release();
      return v22(v9, v17);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1C40FC618()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_1C40FC878();
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(void *)(result + *(void *)(*(void *)result + 192)) = 0;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1C40FC878()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1F4188790](v3 - 8);
  os_log_type_t v41 = (uint64_t *)((char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for Peer_Message(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v42 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v2[10];
  uint64_t v39 = v2[11];
  uint64_t v40 = v7;
  uint64_t v8 = type metadata accessor for Capsule();
  uint64_t v9 = sub_1C4497B38();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v14 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v38 - v15;
  uint64_t v17 = (char *)v1 + v2[14];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v17, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v8) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, v8);
  if (qword_1EA39BA30 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_1C4496C58();
  __swift_project_value_buffer(v19, (uint64_t)qword_1EA3B8CD8);
  double v20 = sub_1C4496C38();
  os_log_type_t v21 = sub_1C44979B8();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = (uint64_t)v42;
  if (v22)
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl(&dword_1C3F4F000, v20, v21, "Send fullModel", v24, 2u);
    MEMORY[0x1C8782060](v24, -1, -1);
  }

  sub_1C40F93BC(0, 0, 0x75697A6570617274, 0xE90000000000006DLL, 0, 0xE000000000000000);
  sub_1C4496888();
  uint64_t v25 = *(int *)(v5 + 20);
  if (qword_1EA39BA58 != -1) {
    swift_once();
  }
  *(void *)(v23 + v25) = qword_1EA39FFD8;
  uint64_t v26 = *(void **)((char *)v1 + *(void *)(*v1 + 120));
  type metadata accessor for CREncoder();
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = MEMORY[0x1E4FBC860];
  uint64_t v29 = MEMORY[0x1E4FBC868];
  *(void *)(v27 + 32) = MEMORY[0x1E4FBC868];
  *(void *)(v27 + 40) = v28;
  *(void *)(v27 + 48) = v28;
  *(void *)(v27 + 56) = v29;
  *(void *)(v27 + 64) = v28;
  *(void *)(v27 + 80) = 0;
  *(void *)(v27 + 88) = 0;
  *(void *)(v27 + 16) = v26;
  *(void *)(v27 + 24) = v28;
  *(unsigned char *)(v27 + 72) = 2;
  swift_retain();
  id v30 = v26;
  uint64_t v31 = v41;
  uint64_t v32 = v44;
  sub_1C3F73630((uint64_t)v16, 0, 0, 0, v40, v39, (uint64_t)v41);
  if (v32)
  {
    swift_release();
    sub_1C410271C(v23, type metadata accessor for Peer_Message);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v8);
  }
  else
  {
    swift_release();
    sub_1C43D8A88((uint64_t)v31);
    uint64_t v33 = (uint64_t)v1 + *(void *)(*v1 + 136);
    swift_beginAccess();
    if (*(void *)(v33 + 24))
    {
      uint64_t v44 = v16;
      sub_1C40F7954(v33, (uint64_t)v43);
      swift_endAccess();
      uint64_t v34 = v43[4];
      os_log_type_t v41 = __swift_project_boxed_opaque_existential_1(v43, v43[3]);
      uint64_t v35 = sub_1C40FCE78();
      unint64_t v37 = v36;
      (*(void (**)(void))(v34 + 8))();
      sub_1C3F7E2CC(v35, v37);
      sub_1C410271C(v23, type metadata accessor for Peer_Message);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v44, v8);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    }
    else
    {
      sub_1C410271C(v23, type metadata accessor for Peer_Message);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v8);
      return swift_endAccess();
    }
  }
}

uint64_t sub_1C40FCE78()
{
  uint64_t v2 = (unsigned __int8 *)(v0 + *(void *)(*(void *)v0 + 168));
  int v3 = v2[1];
  uint64_t v4 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 176));
  unint64_t v5 = v4[1];
  if (v3 == 1 && v5 >> 60 == 15)
  {
    type metadata accessor for Peer_Message(0);
    sub_1C3F70988((unint64_t *)&unk_1EA39D4B8, (void (*)(uint64_t))type metadata accessor for Peer_Message);
    return sub_1C4496AA8();
  }
  else
  {
    uint64_t v7 = sub_1C40F5574(6, *v2 | (unsigned __int16)((_WORD)v3 << 8), *v4, v5);
    unint64_t v9 = v8;
    type metadata accessor for Peer_Message(0);
    sub_1C3F70988((unint64_t *)&unk_1EA39D4B8, (void (*)(uint64_t))type metadata accessor for Peer_Message);
    uint64_t v10 = sub_1C4496AA8();
    if (v1)
    {
      return sub_1C3F7E2CC(v7, v9);
    }
    else
    {
      uint64_t v13 = v10;
      unint64_t v14 = v11;
      sub_1C4496588();
      sub_1C3F7E2CC(v13, v14);
      return v7;
    }
  }
}

uint64_t sub_1C40FD018(void *a1)
{
  int v82 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v81 = (unint64_t)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v79 = type metadata accessor for Peer_Message(0);
  MEMORY[0x1F4188790](v79);
  uint64_t v80 = (uint64_t)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Capsule();
  uint64_t v7 = sub_1C4497B38();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unint64_t v11 = (char *)&v69 - v10;
  int64_t v12 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v14 = (char *)&v69 - v13;
  uint64_t v15 = (uint64_t)v1 + *(void *)(v2 + 112);
  swift_beginAccess();
  uint64_t v16 = v15;
  uint64_t v17 = v6;
  int64_t v18 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v16, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v17) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, v17);
  uint64_t v20 = *(void *)(*v1 + 192);
  if (*(uint64_t *)((char *)v1 + v20))
  {
    swift_retain();
    sub_1C4496DE8();
    swift_release();
    *(uint64_t *)((char *)v1 + v20) = 0;
    swift_release();
    sub_1C40FC878();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v17);
  }
  uint64_t v21 = *(void *)(*v1 + 120);
  uint64_t v72 = v1;
  uint64_t v22 = *(uint64_t *)((char *)v1 + v21);
  Capsule<>.delta(_:from:)(v22, (uint64_t)v82, v17, &v85);
  if (!v85)
  {
    if (qword_1EA39BA30 != -1) {
      goto LABEL_52;
    }
    goto LABEL_14;
  }
  uint64_t v78 = (void *)v22;
  uint64_t v70 = v14;
  uint64_t v71 = v85;
  uint64_t v23 = v86;
  unint64_t v14 = v87;
  int v82 = v88;
  uint64_t v77 = v89;
  uint64_t v24 = v91;
  uint64_t v76 = v90;
  if (qword_1EA39BA30 != -1) {
LABEL_50:
  }
    swift_once();
  uint64_t v25 = sub_1C4496C58();
  __swift_project_value_buffer(v25, (uint64_t)qword_1EA3B8CD8);
  uint64_t v26 = sub_1C4496C38();
  os_log_type_t v27 = sub_1C44979B8();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v29 = v80;
  if (v28)
  {
    id v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v30 = 0;
    _os_log_impl(&dword_1C3F4F000, v26, v27, "Send delta", v30, 2u);
    MEMORY[0x1C8782060](v30, -1, -1);
  }
  uint64_t v73 = v23;

  sub_1C4496888();
  uint64_t v31 = v29;
  uint64_t v32 = *(int *)(v79 + 20);
  if (qword_1EA39BA58 != -1) {
    swift_once();
  }
  *(void *)(v31 + v32) = qword_1EA39FFD8;
  type metadata accessor for CREncoder();
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = MEMORY[0x1E4FBC860];
  uint64_t v35 = MEMORY[0x1E4FBC868];
  *(void *)(v33 + 32) = MEMORY[0x1E4FBC868];
  *(void *)(v33 + 40) = v34;
  *(void *)(v33 + 48) = v34;
  *(void *)(v33 + 56) = v35;
  *(void *)(v33 + 64) = v34;
  *(void *)(v33 + 80) = 0;
  *(void *)(v33 + 88) = 0;
  unint64_t v36 = v78;
  *(void *)(v33 + 16) = v78;
  *(void *)(v33 + 24) = v34;
  *(unsigned char *)(v33 + 72) = 2;
  uint64_t v23 = v71;
  uint64_t v85 = v71;
  uint64_t v86 = v73;
  int64_t v79 = (int64_t)v14;
  uint64_t v87 = v14;
  uint64_t v88 = v82;
  uint64_t v89 = v77;
  uint64_t v90 = v76;
  uint64_t v91 = v24;
  swift_retain();
  id v37 = v36;
  uint64_t v38 = v81;
  id v69 = v37;
  uint64_t v39 = v83;
  sub_1C4006A2C(v37, (uint64_t)&v85, v81);
  if (v39)
  {
    swift_release();
    sub_1C410271C(v31, type metadata accessor for Peer_Message);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v70, v17);
    return sub_1C4102314(v23);
  }
  int64_t v74 = v18;
  uint64_t v83 = 0;
  swift_release();
  sub_1C43D8CF8(v38);
  uint64_t v44 = *(void *)(v24 + 56);
  uint64_t v78 = (void *)(v24 + 56);
  uint64_t v45 = 1 << *(unsigned char *)(v24 + 32);
  swift_bridgeObjectRetain();
  sub_1C4102314(v23);
  uint64_t v46 = -1;
  if (v45 < 64) {
    uint64_t v46 = ~(-1 << v45);
  }
  unint64_t v47 = v46 & v44;
  unint64_t v14 = (char *)v72 + *(void *)(*v72 + 136);
  uint64_t v76 = OBJC_IVAR___CRContext_assetManager;
  swift_beginAccess();
  int64_t v18 = 0;
  int64_t v79 = (unint64_t)(v45 + 63) >> 6;
  uint64_t v77 = v17;
  uint64_t v75 = v24;
  while (1)
  {
    while (v47)
    {
      unint64_t v48 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      unint64_t v49 = v48 | (v18 << 6);
      if (*((void *)v14 + 3)) {
        goto LABEL_34;
      }
    }
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_50;
    }
    if (v18 >= v79)
    {
      uint64_t v60 = (uint64_t)v14;
      uint64_t v52 = v83;
      int64_t v53 = v74;
      goto LABEL_43;
    }
    unint64_t v51 = *((void *)v78 + v18);
    uint64_t v52 = v83;
    int64_t v53 = v74;
    if (!v51) {
      break;
    }
LABEL_33:
    unint64_t v47 = (v51 - 1) & v51;
    unint64_t v49 = __clz(__rbit64(v51)) + (v18 << 6);
    if (*((void *)v14 + 3))
    {
LABEL_34:
      unint64_t v81 = v47;
      uint64_t v55 = (uint64_t *)(*(void *)(v24 + 48) + 16 * v49);
      uint64_t v56 = *v55;
      unint64_t v57 = v55[1];
      sub_1C40F7954((uint64_t)v14, (uint64_t)&v85);
      uint64_t v58 = (uint64_t)v88;
      uint64_t v23 = v89;
      int v82 = __swift_project_boxed_opaque_existential_1(&v85, (uint64_t)v88);
      sub_1C3F7E324(v56, v57);
      swift_retain();
      sub_1C43C63D4(v56, v57, v84);
      swift_release();
      uint64_t v59 = v83;
      uint64_t v92 = v84[0];
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v23 + 16))(&v92, v58, v23);
      uint64_t v83 = v59;
      if (v59)
      {
        sub_1C3F7E2CC(v56, v57);
        swift_release();
        swift_release();
        sub_1C410271C(v80, type metadata accessor for Peer_Message);
        (*(void (**)(char *, uint64_t))(v74 + 8))(v70, v77);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      }
      swift_release();
      sub_1C3F7E2CC(v56, v57);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
      uint64_t v17 = v77;
      uint64_t v24 = v75;
      unint64_t v47 = v81;
    }
  }
  int64_t v54 = v18 + 1;
  if (v18 + 1 >= v79) {
    goto LABEL_42;
  }
  unint64_t v51 = *((void *)v78 + v54);
  if (v51) {
    goto LABEL_32;
  }
  int64_t v54 = v18 + 2;
  if (v18 + 2 >= v79) {
    goto LABEL_42;
  }
  unint64_t v51 = *((void *)v78 + v54);
  if (v51) {
    goto LABEL_32;
  }
  int64_t v54 = v18 + 3;
  if (v18 + 3 >= v79)
  {
LABEL_42:
    uint64_t v60 = (uint64_t)v14;
LABEL_43:
    uint64_t v61 = v70;
    swift_release();
    swift_beginAccess();
    if (*(void *)(v60 + 24))
    {
      sub_1C40F7954(v60, (uint64_t)&v85);
      swift_endAccess();
      uint64_t v62 = v89;
      __swift_project_boxed_opaque_existential_1(&v85, (uint64_t)v88);
      uint64_t v63 = v80;
      uint64_t v64 = sub_1C40FCE78();
      if (v52)
      {
        uint64_t v66 = v63;
      }
      else
      {
        uint64_t v67 = v64;
        unint64_t v68 = v65;
        (*(void (**)(void))(v62 + 8))();
        sub_1C3F7E2CC(v67, v68);
        uint64_t v66 = v80;
      }
      sub_1C410271C(v66, type metadata accessor for Peer_Message);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v61, v77);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
    }
    else
    {
      sub_1C410271C(v80, type metadata accessor for Peer_Message);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v61, v17);
      return swift_endAccess();
    }
  }
  unint64_t v51 = *((void *)v78 + v54);
  if (v51)
  {
LABEL_32:
    int64_t v18 = v54;
    goto LABEL_33;
  }
  while (1)
  {
    int64_t v18 = v54 + 1;
    if (__OFADD__(v54, 1)) {
      break;
    }
    if (v18 >= v79) {
      goto LABEL_42;
    }
    unint64_t v51 = *((void *)v78 + v18);
    ++v54;
    if (v51) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_52:
  swift_once();
LABEL_14:
  uint64_t v40 = sub_1C4496C58();
  __swift_project_value_buffer(v40, (uint64_t)qword_1EA3B8CD8);
  os_log_type_t v41 = sub_1C4496C38();
  os_log_type_t v42 = sub_1C44979B8();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v43 = 0;
    _os_log_impl(&dword_1C3F4F000, v41, v42, "No delta to send", v43, 2u);
    MEMORY[0x1C8782060](v43, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v14, v17);
}

uint64_t sub_1C40FDBA4()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC0980);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v2[10];
  uint64_t v44 = v2[11];
  uint64_t v45 = v6;
  uint64_t v7 = type metadata accessor for Capsule();
  uint64_t v8 = sub_1C4497B38();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  int64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = *(void *)(v7 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = MEMORY[0x1F4188790](v10);
  uint64_t v43 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v38 - v16;
  int64_t v18 = (char *)v1 + v2[14];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v18, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  uint64_t v41 = v13;
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  uint64_t v40 = v13 + 32;
  v39(v17, v12, v7);
  if (qword_1EA39BA30 != -1) {
    swift_once();
  }
  os_log_type_t v42 = v5;
  uint64_t v20 = sub_1C4496C58();
  __swift_project_value_buffer(v20, (uint64_t)qword_1EA3B8CD8);
  uint64_t v21 = sub_1C4496C38();
  os_log_type_t v22 = sub_1C44979B8();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_1C3F4F000, v21, v22, "Publish changes", v23, 2u);
    MEMORY[0x1C8782060](v23, -1, -1);
  }

  swift_beginAccess();
  uint64_t v24 = v1[2];
  uint64_t v25 = type metadata accessor for CRMulticastSyncManagerSubscription();
  uint64_t v26 = swift_bridgeObjectRetain();
  if (MEMORY[0x1C8780160](v26, v25))
  {
    uint64_t v27 = 4;
    do
    {
      uint64_t v28 = v27 - 4;
      char v29 = sub_1C44974A8();
      sub_1C4497438();
      if (v29)
      {
        swift_retain();
        uint64_t v30 = v27 - 3;
        if (__OFADD__(v28, 1)) {
          goto LABEL_15;
        }
      }
      else
      {
        sub_1C4497DA8();
        uint64_t v30 = v27 - 3;
        if (__OFADD__(v28, 1))
        {
LABEL_15:
          __break(1u);
          break;
        }
      }
      sub_1C4496D48();
      swift_release();
      ++v27;
    }
    while (v30 != MEMORY[0x1C8780160](v24, v25));
  }
  swift_bridgeObjectRelease();
  uint64_t v31 = sub_1C44975A8();
  uint64_t v32 = (uint64_t)v42;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v42, 1, 1, v31);
  uint64_t v33 = v41;
  uint64_t v34 = v43;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v43, v17, v7);
  unint64_t v35 = (*(unsigned __int8 *)(v33 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  unint64_t v36 = (char *)swift_allocObject();
  *((void *)v36 + 2) = 0;
  *((void *)v36 + 3) = 0;
  uint64_t v37 = v44;
  *((void *)v36 + 4) = v45;
  *((void *)v36 + 5) = v37;
  *((void *)v36 + 6) = v1;
  v39(&v36[v35], v34, v7);
  swift_retain();
  sub_1C3F61348(v32, (uint64_t)&unk_1EA39D4E8, (uint64_t)v36);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v17, v7);
}

uint64_t sub_1C40FE0D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return MEMORY[0x1F4188298](sub_1C40FE0F8, 0, 0);
}

uint64_t sub_1C40FE0F8(uint64_t (*a1)(), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(v3 + 16) + *(void *)(**(void **)(v3 + 16) + 200));
  *(void *)(v3 + 32) = v4;
  if (v4)
  {
    swift_retain();
    a1 = sub_1C40FE18C;
    a2 = v4;
    a3 = 0;
  }
  else
  {
    __break(1u);
  }
  return MEMORY[0x1F4188298](a1, a2, a3);
}

uint64_t sub_1C40FE18C()
{
  sub_1C4207390(*(void *)(v0 + 24));
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t CRMulticastSyncManager.getModel()()
{
  return sub_1C4497A58();
}

uint64_t sub_1C40FE2C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + *(void *)(*(void *)a1 + 112);
  swift_beginAccess();
  uint64_t v6 = type metadata accessor for Capsule();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6)) {
    Capsule.finalizeTimestamps(_:)(a2, v6);
  }
  swift_endAccess();
  uint64_t v7 = sub_1C4497B38();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a3, v5, v7);
}

uint64_t sub_1C40FE404@<X0>(uint64_t a1@<X8>)
{
  return sub_1C40FE2C8(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t CRMulticastSyncManager.sync(_:sendDelta:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  int v26 = a2;
  uint64_t v5 = (void *)*v2;
  uint64_t v28 = sub_1C4496D68();
  uint64_t v31 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v27 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1C4496DA8();
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v30 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v5[10];
  uint64_t v11 = v5[11];
  uint64_t v12 = type metadata accessor for Capsule();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v25 = *(void *)((char *)v3 + v5[16]);
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, v12);
  unint64_t v18 = (*(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v19 = v18 + v14;
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = v10;
  *((void *)v20 + 3) = v11;
  *((void *)v20 + 4) = v17;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v20[v18], v16, v12);
  v20[v19] = v26;
  aBlock[4] = sub_1C40FECEC;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1C3F61AC0;
  aBlock[3] = &block_descriptor_10;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  sub_1C4496D88();
  uint64_t v32 = MEMORY[0x1E4FBC860];
  sub_1C3F70988((unint64_t *)&qword_1EBBC07F0, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0960);
  sub_1C3F70AF0((unint64_t *)&qword_1EBBC0968, &qword_1EBBC0960);
  uint64_t v23 = v27;
  uint64_t v22 = v28;
  sub_1C4497BF8();
  MEMORY[0x1C87806C0](0, v9, v23, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v23, v22);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v30);
  swift_release();
  return swift_release();
}

uint64_t sub_1C40FE828(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 + 16);
  uint64_t v34 = type metadata accessor for Capsule();
  uint64_t v9 = sub_1C4497B38();
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)v27 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)v27 - v16;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v27[1] = a4;
    uint64_t v28 = v12;
    v27[0] = v8;
    uint64_t v29 = a2;
    int v32 = a3;
    uint64_t v19 = result + *(void *)(*(void *)result + 112);
    swift_beginAccess();
    uint64_t v20 = v33;
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
    uint64_t v31 = v17;
    v21(v17, v19, v9);
    v21(v15, v19, v9);
    uint64_t v22 = *(void *)(v34 - 8);
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v22 + 48);
    LODWORD(v21) = v23(v15, 1);
    uint64_t v30 = *(void (**)(char *, uint64_t))(v20 + 8);
    v30(v15, v9);
    if (v21 == 1)
    {
      uint64_t v24 = v28;
      uint64_t v25 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v28, v29, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v25);
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 40))(v19, v24, v9);
    }
    else
    {
      swift_beginAccess();
      if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v23)(v19, 1, v34)) {
        Capsule.merge<A>(_:)(v29, v34);
      }
    }
    swift_endAccess();
    uint64_t v26 = (uint64_t)v31;
    sub_1C40FED98((uint64_t)v31, v32 & 1);
    swift_release();
    return ((uint64_t (*)(uint64_t, uint64_t))v30)(v26, v9);
  }
  return result;
}

uint64_t sub_1C40FEB6C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for Capsule();
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(*(void *)(v2 - 8) + 64);
  swift_release();
  uint64_t v6 = (uint64_t *)(v0 + v4);
  unint64_t v7 = *(void *)(v0 + v4 + 8);
  if (v7 >> 60 != 15) {
    sub_1C3F7E2CC(*v6, v7);
  }
  uint64_t v8 = (char *)v6 + *(int *)(v2 + 36);
  uint64_t v9 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v1)) {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v1);
  }
  swift_release();
  return MEMORY[0x1F4186498](v0, v5 + v4 + 1, v3 | 7);
}

uint64_t sub_1C40FECEC()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = *(void *)(type metadata accessor for Capsule() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v0[4];
  int v6 = *((unsigned __int8 *)v0 + v4 + *(void *)(v3 + 64));
  return sub_1C40FE828(v5, (uint64_t)v0 + v4, v6, v1, v2);
}

uint64_t sub_1C40FED98(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  int v31 = a2;
  uint64_t v5 = *v2;
  uint64_t v6 = type metadata accessor for Capsule();
  uint64_t v7 = sub_1C4497B38();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v30 = (char *)v28 - v10;
  uint64_t v11 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (void *)((char *)v28 - v12);
  uint64_t v14 = (char *)v3 + *(void *)(v5 + 112);
  swift_beginAccess();
  uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (!v29(v14, 1, v6)) {
    Capsule.finalizeTimestamps(_:)(*(void *)((char *)v3 + *(void *)(*v3 + 120)), v6);
  }
  swift_endAccess();
  if (qword_1EA39BA30 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_1C4496C58();
  v28[1] = __swift_project_value_buffer(v15, (uint64_t)qword_1EA3B8CD8);
  uint64_t v16 = sub_1C4496C38();
  os_log_type_t v17 = sub_1C44979B8();
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    v28[0] = v6;
    uint64_t v19 = v13;
    uint64_t v20 = v8;
    uint64_t v21 = v11;
    uint64_t v22 = v7;
    uint64_t v23 = a1;
    uint64_t v24 = v18;
    *(_WORD *)unint64_t v18 = 0;
    _os_log_impl(&dword_1C3F4F000, v16, v17, "New state", v18, 2u);
    uint64_t v25 = v24;
    a1 = v23;
    uint64_t v7 = v22;
    uint64_t v11 = v21;
    uint64_t v8 = v20;
    uint64_t v13 = v19;
    uint64_t v6 = v28[0];
    MEMORY[0x1C8782060](v25, -1, -1);
  }

  uint64_t result = sub_1C40F93BC(0, 0, 1818326639, 0xE400000000000000, 0x663D656C7974732CLL, 0xED000064656C6C69);
  if (v31)
  {
    uint64_t v27 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v30, a1, v7);
    if (v29(v27, 1, v6) == 1)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v27, v7);
      return sub_1C40FC878();
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 32))(v13, v27, v6);
      sub_1C40FD018(v13);
      return (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v6);
    }
  }
  return result;
}

uint64_t CRMulticastSyncManager.merge<A>(_:sendDelta:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  int v27 = a2;
  uint64_t v7 = (void *)*v4;
  uint64_t v30 = sub_1C4496D68();
  uint64_t v33 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v29 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1C4496DA8();
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v32 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Capsule();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v28 = *(void *)((char *)v5 + v7[16]);
  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, v12);
  unint64_t v18 = (*(unsigned __int8 *)(v13 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v19 = v18 + v14;
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = v7[10];
  *((void *)v20 + 3) = v25;
  *((void *)v20 + 4) = v7[11];
  *((void *)v20 + 5) = v26;
  *((void *)v20 + 6) = v17;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v20[v18], v16, v12);
  v20[v19] = v27;
  aBlock[4] = sub_1C40FFB28;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1C3F61AC0;
  aBlock[3] = &block_descriptor_19_0;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  sub_1C4496D88();
  uint64_t v34 = MEMORY[0x1E4FBC860];
  sub_1C3F70988((unint64_t *)&qword_1EBBC07F0, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0960);
  sub_1C3F70AF0((unint64_t *)&qword_1EBBC0968, &qword_1EBBC0960);
  uint64_t v23 = v29;
  uint64_t v22 = v30;
  sub_1C4497BF8();
  MEMORY[0x1C87806C0](0, v11, v23, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v32);
  swift_release();
  return swift_release();
}

uint64_t sub_1C40FF704(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = type metadata accessor for Capsule();
  uint64_t v12 = sub_1C4497B38();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = &v26[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v14);
  unint64_t v18 = &v26[-v17];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v28 = a2;
    uint64_t v29 = a5;
    uint64_t v30 = a7;
    uint64_t v20 = result + *(void *)(*(void *)result + 112);
    swift_beginAccess();
    uint64_t v21 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 16);
    v21(v18, v20, v12);
    v21(v16, v20, v12);
    uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    if (v22((uint64_t)v16, 1, v11) == 1)
    {
      swift_release();
      uint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v13 + 8);
      v23(v16, v12);
      return ((uint64_t (*)(unsigned char *, uint64_t))v23)(v18, v12);
    }
    else
    {
      int v27 = a3;
      uint64_t v24 = v16;
      uint64_t v25 = *(void (**)(unsigned char *, uint64_t))(v13 + 8);
      v25(v24, v12);
      swift_beginAccess();
      if (!v22(v20, 1, v11)) {
        Capsule.merge<A>(_:)(v28, v11);
      }
      swift_endAccess();
      sub_1C40FED98((uint64_t)v18, v27 & 1);
      swift_release();
      return ((uint64_t (*)(unsigned char *, uint64_t))v25)(v18, v12);
    }
  }
  return result;
}

uint64_t sub_1C40FF9A8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for Capsule();
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = *(void *)(*(void *)(v2 - 8) + 64);
  swift_release();
  uint64_t v6 = (uint64_t *)(v0 + v4);
  unint64_t v7 = *(void *)(v0 + v4 + 8);
  if (v7 >> 60 != 15) {
    sub_1C3F7E2CC(*v6, v7);
  }
  uint64_t v8 = (char *)v6 + *(int *)(v2 + 36);
  uint64_t v9 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v1)) {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v1);
  }
  swift_release();
  return MEMORY[0x1F4186498](v0, v5 + v4 + 1, v3 | 7);
}

uint64_t sub_1C40FFB28()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void *)(type metadata accessor for Capsule() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v0[6];
  int v8 = *((unsigned __int8 *)v0 + v6 + *(void *)(v5 + 64));
  return sub_1C40FF704(v7, (uint64_t)v0 + v6, v8, v1, v2, v3, v4);
}

uint64_t CRMulticastSyncManager.sync(_:)(uint64_t a1)
{
  return CRMulticastSyncManager.sync(_:sendDelta:)(a1, 1);
}

void *CRMulticastSyncManager.__allocating_init(_:sendHeartbeats:)(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for Capsule();
  uint64_t v5 = sub_1C4497B38();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v14 - v7;
  *(void *)&long long v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  id v9 = _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(0, (uint64_t)&v17);
  sub_1C3F962E0((uint64_t)&v17, qword_1EBBC0C90);
  uint64_t v10 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a1, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v4);
  uint64_t v11 = 0x3FF0000000000000;
  if ((a2 & 1) == 0) {
    uint64_t v11 = 0;
  }
  uint64_t v15 = v11;
  BOOL v16 = (a2 & 1) == 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v12 = sub_1C41019F0(v9, (uint64_t)v8, &v15, 256, 0, 0xF000000000000000, (uint64_t *)&v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v4);
  return v12;
}

void *CRMulticastSyncManager.__allocating_init(_:model:appFormat:identifier:catchup:)(void *a1, uint64_t a2, __int16 a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  char v10 = *(unsigned char *)(a6 + 8);
  uint64_t v14 = *(void *)a6;
  char v15 = v10;
  memset(v16, 0, sizeof(v16));
  uint64_t v11 = sub_1C41019F0(a1, a2, &v14, a3 & 0x1FF, a4, a5, (uint64_t *)v16);
  sub_1C3F6C6F0(a4, a5);

  type metadata accessor for Capsule();
  uint64_t v12 = sub_1C4497B38();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a2, v12);
  return v11;
}

void *CRMulticastSyncManager.__allocating_init(_:model:appFormat:identifier:sendHeartbeats:)(void *a1, unsigned char *a2, __int16 a3, uint64_t a4, unint64_t a5, char a6)
{
  type metadata accessor for Capsule();
  uint64_t v12 = sub_1C4497B38();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  char v15 = &v20[-v14];
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 16))(&v20[-v14], a2, v12);
  uint64_t v16 = 0x3FF0000000000000;
  if ((a6 & 1) == 0) {
    uint64_t v16 = 0;
  }
  uint64_t v21 = v16;
  BOOL v22 = (a6 & 1) == 0;
  memset(v23, 0, sizeof(v23));
  long long v17 = sub_1C41019F0(a1, (uint64_t)v15, &v21, a3 & 0x1FF, a4, a5, (uint64_t *)v23);
  sub_1C3F6C6F0(a4, a5);
  long long v18 = *(void (**)(unsigned char *, uint64_t))(v13 + 8);
  v18(v15, v12);

  v18(a2, v12);
  return v17;
}

void *CRMulticastSyncManager.__allocating_init(_:model:sendHeartbeats:)(void *a1, unsigned char *a2, char a3)
{
  type metadata accessor for Capsule();
  uint64_t v6 = sub_1C4497B38();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  id v9 = &v14[-v8];
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16))(&v14[-v8], a2, v6);
  uint64_t v10 = 0x3FF0000000000000;
  if ((a3 & 1) == 0) {
    uint64_t v10 = 0;
  }
  uint64_t v15 = v10;
  BOOL v16 = (a3 & 1) == 0;
  memset(v17, 0, sizeof(v17));
  uint64_t v11 = sub_1C41019F0(a1, (uint64_t)v9, &v15, 256, 0, 0xF000000000000000, (uint64_t *)v17);
  uint64_t v12 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v12(v9, v6);

  v12(a2, v6);
  return v11;
}

void *CRMulticastSyncManager.__allocating_init(_:model:sendHeartbeats:)(void *a1, uint64_t a2, char a3)
{
  uint64_t v6 = type metadata accessor for Capsule();
  uint64_t v7 = sub_1C4497B38();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v15[-v9];
  uint64_t v11 = *(void *)(v6 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(&v15[-v9], a2, v6);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, v6);
  uint64_t v12 = 0x3FF0000000000000;
  if ((a3 & 1) == 0) {
    uint64_t v12 = 0;
  }
  uint64_t v16 = v12;
  BOOL v17 = (a3 & 1) == 0;
  memset(v18, 0, sizeof(v18));
  uint64_t v13 = sub_1C41019F0(a1, (uint64_t)v10, &v16, 256, 0, 0xF000000000000000, (uint64_t *)v18);
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, v6);
  return v13;
}

uint64_t CRMulticastSyncManager.updates.getter()
{
  if (*(void *)(v0 + *(void *)(*(void *)v0 + 200)))
  {
    swift_retain();
    sub_1C420861C();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CRMulticastSyncManager.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + qword_1EA3B8D00;
  uint64_t v2 = sub_1C4496678();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 112);
  type metadata accessor for Capsule();
  uint64_t v4 = sub_1C4497B38();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  sub_1C3F962E0(v0 + *(void *)(*(void *)v0 + 136), qword_1EA39D288);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C3F6C6F0(*(void *)(v0 + *(void *)(*(void *)v0 + 176)), *(void *)(v0 + *(void *)(*(void *)v0 + 176) + 8));
  sub_1C4101A7C(*(void *)(v0 + *(void *)(*(void *)v0 + 184)), *(void *)(v0 + *(void *)(*(void *)v0 + 184) + 8));
  swift_release();
  swift_release();
  return v0;
}

uint64_t CRMulticastSyncManager.__deallocating_deinit()
{
  return sub_1C4100628((void (*)(void))CRMulticastSyncManager.deinit);
}

uint64_t sub_1C4100628(void (*a1)(void))
{
  a1();
  return swift_deallocClassInstance();
}

uint64_t CRMulticastSyncManager.receive(subscription:)(void *a1)
{
  return sub_1C4028640(a1);
}

uint64_t CRMulticastSyncManager.receive(_:)(uint64_t a1)
{
  uint64_t v1 = CRMulticastSyncManager.sync(_:sendDelta:)(a1, 1);
  return MEMORY[0x1F40D6900](v1);
}

uint64_t sub_1C41006E8(uint64_t a1)
{
  return CRMulticastSyncManager.receive(_:)(a1);
}

uint64_t sub_1C410070C(void *a1, uint64_t a2, __int16 a3, uint64_t a4, unint64_t a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = a1[1];
  switch(v5 >> 62)
  {
    case 1uLL:
      *(void *)&long long v31 = *a1;
      *((void *)&v31 + 1) = v5 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1C3F6C704(a4, a5);
      sub_1C41009EC((int *)&v31, a2, a3 & 0x1FF, a4, a5);
      uint64_t result = sub_1C3F6C6F0(a4, a5);
      uint64_t v17 = *((void *)&v31 + 1) | 0x4000000000000000;
      *a1 = v31;
      a1[1] = v17;
      return result;
    case 2uLL:
      unsigned int v29 = a2;
      *(void *)&long long v31 = *a1;
      *((void *)&v31 + 1) = v5 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1C44964A8();
      uint64_t v18 = *((void *)&v31 + 1);
      uint64_t v19 = *(void *)(v31 + 16);
      uint64_t v30 = *(void *)(v31 + 24);
      uint64_t v20 = sub_1C4496298();
      if (!v20)
      {
        __break(1u);
        JUMPOUT(0x1C41009DCLL);
      }
      uint64_t v21 = v20;
      uint64_t v22 = sub_1C44962C8();
      uint64_t v23 = v19 - v22;
      if (__OFSUB__(v19, v22))
      {
        __break(1u);
LABEL_14:
        __break(1u);
      }
      BOOL v24 = __OFSUB__(v30, v19);
      uint64_t v25 = v30 - v19;
      if (v24) {
        goto LABEL_14;
      }
      uint64_t v26 = v23;
      uint64_t v27 = sub_1C44962B8();
      if (v27 >= v25) {
        uint64_t v28 = v25;
      }
      else {
        uint64_t v28 = v27;
      }
      sub_1C40F56C8(v21 + v26, v21 + v26 + v28, v29, a3 & 0x1FF, a4, a5);
      uint64_t result = sub_1C3F6C6F0(a4, a5);
      *a1 = v31;
      a1[1] = v18 | 0x8000000000000000;
      return result;
    case 3uLL:
      *(void *)((char *)&v31 + 7) = 0;
      *(void *)&long long v31 = 0;
      sub_1C40F56C8((uint64_t)&v31, (uint64_t)&v31, a2, a3 & 0x1FF, a4, a5);
      return sub_1C3F6C6F0(a4, a5);
    default:
      *(void *)&long long v31 = *a1;
      WORD4(v31) = v5;
      BYTE10(v31) = BYTE2(v5);
      BYTE11(v31) = BYTE3(v5);
      BYTE12(v31) = BYTE4(v5);
      BYTE13(v31) = BYTE5(v5);
      BYTE14(v31) = BYTE6(v5);
      sub_1C40F56C8((uint64_t)&v31, (uint64_t)&v31 + BYTE6(v5), a2, a3 & 0x1FF, a4, a5);
      uint64_t v11 = v31;
      uint64_t v12 = DWORD2(v31);
      uint64_t v13 = BYTE12(v31);
      uint64_t v14 = BYTE13(v31);
      uint64_t v15 = BYTE14(v31);
      uint64_t result = sub_1C3F6C6F0(a4, a5);
      *a1 = v11;
      a1[1] = v12 | (v13 << 32) | (v14 << 40) | (v15 << 48);
      return result;
  }
}

uint64_t sub_1C41009EC(int *a1, uint64_t a2, __int16 a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = sub_1C44964C8();
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  if ((int)v11 < (int)v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v19 = a4;
  unint64_t v20 = a5;
  __int16 v13 = a3;
  uint64_t result = sub_1C4496298();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v14 = result;
  uint64_t result = sub_1C44962C8();
  uint64_t v15 = v12 - result;
  if (__OFSUB__(v12, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v16 = v11 - v12;
  uint64_t v17 = sub_1C44962B8();
  if (v17 >= v16) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = v17;
  }
  sub_1C40F56C8(v14 + v15, v14 + v15 + v18, a2, v13 & 0x1FF, v19, v20);
  return sub_1C3F6C6F0(v19, v20);
}

uint64_t sub_1C4100AD8(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      swift_retain();
      sub_1C4100CE0((int)a1, a1 >> 32);
      uint64_t result = sub_1C3F7E2CC(a1, a2);
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      sub_1C4100CE0(v5, v6);
      swift_release();
      uint64_t result = swift_release();
      break;
    default:
      uint64_t result = sub_1C4496508();
      break;
  }
  return result;
}

uint64_t sub_1C4100CE0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1C4496298();
  if (!result || (uint64_t result = sub_1C44962C8(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_1C44962B8();
      return sub_1C4496508();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C4100D88(uint64_t result, double a2, double a3)
{
  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  double v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t result = MEMORY[0x1C8782080](&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3) {
    return sub_1C4100D88(v6, a2, a3);
  }
  return result;
}

uint64_t sub_1C4100E34(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      sub_1C44962E8();
      swift_allocObject();
      sub_1C44962A8();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_1C44964E8();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_1C4100ED4(uint64_t a1, uint64_t a2)
{
  swift_weakInit();
  uint64_t v4 = v2 + *(void *)(*(void *)v2 + 96);
  type metadata accessor for Capsule();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBBC00F0);
  uint64_t v5 = sub_1C4496CE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a2, v5);
  swift_weakAssign();
  return v2;
}

void *sub_1C4100FE8(id a1, uint64_t a2, uint64_t *a3, int a4, uint64_t a5, unint64_t a6, uint64_t *a7)
{
  uint64_t v8 = v7;
  uint64_t v77 = a2;
  uint64_t v78 = a7;
  uint64_t v80 = a5;
  unint64_t v81 = a6;
  int v79 = a4;
  id v76 = a1;
  uint64_t v82 = *v8;
  uint64_t v10 = *(void *)(v82 + 80);
  uint64_t v72 = *(void *)(v82 + 88);
  *(void *)&long long v83 = v10;
  uint64_t v11 = type metadata accessor for Capsule();
  uint64_t v73 = *(void *)(v11 - 8);
  uint64_t v12 = v73;
  MEMORY[0x1F4188790](v11);
  uint64_t v62 = (char *)&v61 - v13;
  uint64_t v14 = sub_1C4497A38();
  uint64_t v70 = *(void *)(v14 - 8);
  uint64_t v71 = v14;
  MEMORY[0x1F4188790](v14);
  id v69 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_1C4497A08();
  MEMORY[0x1F4188790](v68);
  uint64_t v66 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1C4496DA8();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v18 = sub_1C4496678();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = *a3;
  int v74 = *((unsigned __int8 *)a3 + 8);
  type metadata accessor for CRMulticastSyncManagerSubscription();
  v8[2] = sub_1C4496EB8();
  sub_1C4496668();
  uint64_t v67 = (char *)v8 + *(void *)(*v8 + 112);
  uint64_t v22 = *(void (**)(void))(v12 + 56);
  uint64_t v63 = v11;
  v22();
  uint64_t v65 = *(void *)(*v8 + 128);
  uint64_t v64 = sub_1C3FF32D4(0, (unint64_t *)&qword_1EBBC1290);
  *(void *)&long long v84 = 0;
  *((void *)&v84 + 1) = 0xE000000000000000;
  sub_1C4497D28();
  swift_bridgeObjectRelease();
  *(void *)&long long v84 = 0xD000000000000010;
  *((void *)&v84 + 1) = 0x80000001C44B2660;
  sub_1C4496668();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07E0);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1C449B4A0;
  char v24 = sub_1C4496658();
  uint64_t v25 = MEMORY[0x1E4FBC358];
  uint64_t v26 = MEMORY[0x1E4FBC3B0];
  *(void *)(v23 + 56) = MEMORY[0x1E4FBC358];
  *(void *)(v23 + 64) = v26;
  *(unsigned char *)(v23 + 32) = v24;
  uint64_t v27 = sub_1C4496658();
  *(void *)(v23 + 96) = v25;
  *(void *)(v23 + 104) = v26;
  *(unsigned char *)(v23 + 72) = BYTE1(v27);
  sub_1C44971E8();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  sub_1C4497268();
  swift_bridgeObjectRelease();
  sub_1C4496D98();
  uint64_t v28 = MEMORY[0x1E4FBC860];
  *(void *)&long long v84 = MEMORY[0x1E4FBC860];
  sub_1C3F70988(qword_1EBBC1060, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC1040);
  sub_1C3F70AF0((unint64_t *)&qword_1EBBC1050, (uint64_t *)&unk_1EBBC1040);
  sub_1C4497BF8();
  (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, *MEMORY[0x1E4FBCC58], v71);
  *(void *)((char *)v8 + v65) = sub_1C4497A78();
  unsigned int v29 = (char *)v8 + *(void *)(*v8 + 136);
  *((void *)v29 + 4) = 0;
  *(_OWORD *)unsigned int v29 = 0u;
  *((_OWORD *)v29 + 1) = 0u;
  *(void *)((char *)v8 + *(void *)(*v8 + 152)) = 0;
  *(void *)((char *)v8 + *(void *)(*v8 + 160)) = v28;
  uint64_t v30 = (char *)v8 + *(void *)(*v8 + 184);
  *(_OWORD *)uint64_t v30 = 0u;
  *((_OWORD *)v30 + 1) = 0u;
  *((_OWORD *)v30 + 2) = 0u;
  *((_OWORD *)v30 + 3) = 0u;
  *(void *)((char *)v8 + *(void *)(*v8 + 192)) = 0;
  *(void *)((char *)v8 + *(void *)(*v8 + 200)) = 0;
  id v31 = v76;
  *(void *)((char *)v8 + *(void *)(*v8 + 120)) = v76;
  uint64_t v32 = v67;
  swift_beginAccess();
  uint64_t v33 = sub_1C4497B38();
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 24);
  id v76 = v31;
  v34(v32, v77, v33);
  swift_endAccess();
  uint64_t v35 = *(void *)v30;
  uint64_t v36 = *((void *)v30 + 1);
  type metadata accessor for CRMulticastSyncManager.DebugInfo();
  uint64_t v37 = sub_1C4497B38();
  uint64_t v38 = v30;
  uint64_t v39 = v78;
  (*(void (**)(char *, uint64_t *, uint64_t))(*(void *)(v37 - 8) + 32))(v38, v78, v37);
  sub_1C4102288(v39);
  uint64_t v40 = v63;
  uint64_t v41 = v73;
  sub_1C4101A7C(v35, v36);
  os_log_type_t v42 = (char *)v8 + *(void *)(*v8 + 144);
  *(void *)os_log_type_t v42 = v75;
  v42[8] = v74;
  uint64_t v43 = (char *)v8 + *(void *)(*v8 + 168);
  char v44 = BYTE1(v79);
  *uint64_t v43 = v79;
  v43[1] = v44 & 1;
  uint64_t v45 = (void *)((char *)v8 + *(void *)(*v8 + 176));
  uint64_t v47 = v80;
  unint64_t v46 = v81;
  *uint64_t v45 = v80;
  v45[1] = v46;
  unint64_t v48 = (char *)v8 + *(void *)(*v8 + 112);
  swift_beginAccess();
  unint64_t v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 48);
  LODWORD(v34) = v49(v48, 1, v40);
  sub_1C3F6C704(v47, v46);
  if (!v34) {
    Capsule.finalizeTimestamps(_:)((uint64_t)v76, v40);
  }
  swift_endAccess();
  swift_getWitnessTable();
  type metadata accessor for AsyncUpdatesActor();
  swift_retain();
  uint64_t v50 = sub_1C4208F78();
  swift_release();
  *(void *)((char *)v8 + *(void *)(*v8 + 200)) = v50;
  swift_release();
  unint64_t v51 = (void **)((char *)v8 + *(void *)(*v8 + 160));
  swift_beginAccess();
  uint64_t v52 = *v51;
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v51 = v52;
  if (!isUniquelyReferenced_nonNull_native || v52[3] <= 3uLL)
  {
    if (v52[2] <= 2uLL) {
      int64_t v54 = 2;
    }
    else {
      int64_t v54 = v52[2];
    }
    uint64_t v52 = sub_1C3FF1D08(isUniquelyReferenced_nonNull_native, v54, 0, v52);
  }
  *unint64_t v51 = v52;
  swift_endAccess();
  if (!v49(v48, 1, v40))
  {
    uint64_t v55 = v62;
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v62, v48, v40);
    Capsule.version.getter(v40, &v84);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v55, v40);
    long long v83 = v84;
    swift_beginAccess();
    uint64_t v56 = *v51;
    char v57 = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v51 = v56;
    if ((v57 & 1) == 0)
    {
      uint64_t v56 = sub_1C3FF1D08(0, v56[2] + 1, 1, v56);
      *unint64_t v51 = v56;
    }
    unint64_t v59 = v56[2];
    unint64_t v58 = v56[3];
    if (v59 >= v58 >> 1)
    {
      uint64_t v56 = sub_1C3FF1D08((void *)(v58 > 1), v59 + 1, 1, v56);
      *unint64_t v51 = v56;
    }
    v56[2] = v59 + 1;
    *(_OWORD *)&v56[2 * v59 + 4] = v83;
    swift_endAccess();
  }
  return v8;
}

void *sub_1C41019F0(void *a1, uint64_t a2, uint64_t *a3, __int16 a4, uint64_t a5, unint64_t a6, uint64_t *a7)
{
  return sub_1C4100FE8(a1, a2, a3, a4 & 0x1FF, a5, a6, a7);
}

uint64_t sub_1C4101A7C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1C4101ACC(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 88);
}

uint64_t sub_1C4101AD4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C4101AF0()
{
  type metadata accessor for Capsule();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBBC00F0);
  uint64_t result = sub_1C4496CE8();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CRMulticastSyncManagerSubscription()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of CRMulticastLink.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of CRMulticastLink.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for MulticastLogger()
{
  return self;
}

ValueMetadata *type metadata accessor for CRMulticastSyncManagerCatchupBehavior()
{
  return &type metadata for CRMulticastSyncManagerCatchupBehavior;
}

uint64_t sub_1C4101C54()
{
  uint64_t result = sub_1C4496678();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Capsule();
    uint64_t result = sub_1C4497B38();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t type metadata accessor for CRMulticastSyncManager()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for CRMulticastSyncManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CRMulticastSyncManager);
}

uint64_t sub_1C4101DC4()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_1C4101E08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_1C4101E68(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v4 = a2[4];
  a1[3] = a2[3];
  a1[4] = v4;
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1C4101F14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t sub_1C4101F84(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C4101FCC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for CRMulticastSyncManager.DebugInfo()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C4102034()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C4102050()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C410206C()
{
  return MEMORY[0x1E4FBC0F0];
}

uint64_t sub_1C4102078()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1C41020B0()
{
  return sub_1C442E164(*(void *)(v0 + 16));
}

uint64_t sub_1C41020B8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t sub_1C4102140@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = v1
     + ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC00F0);
  return sub_1C442E240(v4, v3, a1);
}

uint64_t sub_1C41021E4@<X0>(void *a1@<X8>)
{
  return sub_1C442E59C(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1C41021EC()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_1C4102224@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C442E5E4((void *)(v1 + 16), a1);
}

uint64_t sub_1C410222C()
{
  return sub_1C442E690((void *)(v0 + 16));
}

uint64_t sub_1C4102234()
{
  return sub_1C442E200((void *)(v0 + 16));
}

uint64_t sub_1C410223C()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1C410227C()
{
  return sub_1C40F504C(v0[2], v0[3], v0[4]);
}

uint64_t *sub_1C4102288(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1C41022C4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_1C4102314(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1C41023A0(double *a1@<X8>)
{
}

uint64_t sub_1C41023B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1C41023E4()
{
  swift_release();
  sub_1C3F7E2CC(*(void *)(v0 + 40), *(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_1C410242C()
{
  return sub_1C40FA6E0(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_1C4102440()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = type metadata accessor for Capsule();
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = *(void *)(*(void *)(v2 - 8) + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v6 = (uint64_t *)(v0 + v4);
  unint64_t v7 = *(void *)(v0 + v4 + 8);
  if (v7 >> 60 != 15) {
    sub_1C3F7E2CC(*v6, v7);
  }
  uint64_t v8 = (char *)v6 + *(int *)(v2 + 36);
  uint64_t v9 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v1)) {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v1);
  }
  swift_release();
  return MEMORY[0x1F4186498](v0, v4 + v5, v3 | 7);
}

uint64_t sub_1C41025C4()
{
  uint64_t v2 = *(void *)(type metadata accessor for Capsule() - 8);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[2] = v3;
  v5[3] = v4;
  v5[1] = sub_1C40182C8;
  return MEMORY[0x1F4188298](sub_1C40FE0F8, 0, 0);
}

uint64_t sub_1C41026B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C410271C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C410277C()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1C41027B4()
{
  return sub_1C40FC618();
}

uint64_t sub_1C41027C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1C4102828(double *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  double v3 = *(double *)(v1 + 24) + 1.0;
  if (v3 <= *(double *)(v2 + 40) + 0.1) {
    double v3 = *(double *)(v2 + 40) + 0.1;
  }
  *(double *)(v2 + 40) = v3;
  *a1 = v3;
}

uint64_t sub_1C410285C()
{
  return sub_1C40F90CC();
}

uint64_t sub_1C41028B0()
{
  uint64_t result = sub_1C4497B38();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1C410294C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  double v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  int v9 = v7 + 16;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v10 = *(void *)(v5 + 64);
  }
  else {
    size_t v10 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v11 = ((v7 + 16) & ~(unint64_t)v7) + v10;
  int v12 = v7 & 0x100000;
  if (v8 > 7 || v12 != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    uint64_t *v3 = *a2;
    double v3 = (uint64_t *)(v15 + ((v8 & 0xF8 ^ 0x1F8) & v9));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v16 = (void *)(((unint64_t)a1 + v8 + 16) & ~v8);
    uint64_t v17 = (const void *)(((unint64_t)a2 + v8 + 16) & ~v8);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)a2 + v8 + 16) & ~v8, 1, v4))
    {
      memcpy(v16, v17, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v16, v17, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v4);
    }
  }
  return v3;
}

uint64_t sub_1C4102AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v2 - 8);
  unint64_t v3 = (a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v2);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
    return v5(v3, v2);
  }
  return result;
}

_OWORD *sub_1C4102B8C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v9 = *(void *)(v5 + 64);
    }
    else {
      size_t v9 = *(void *)(v5 + 64) + 1;
    }
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

void *sub_1C4102CA8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  uint64_t v8 = (void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  size_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, v4);
  int v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      return a1;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, v4);
      return a1;
    }
    uint64_t v15 = *(void (**)(void *, uint64_t))(v5 + 8);
    uint64_t v14 = v5 + 8;
    v15(v7, v4);
    int v12 = *(_DWORD *)(v14 + 76);
    size_t v13 = *(void *)(v14 + 56);
  }
  if (v12) {
    size_t v16 = v13;
  }
  else {
    size_t v16 = v13 + 1;
  }
  memcpy(v7, v8, v16);
  return a1;
}

_OWORD *sub_1C4102E3C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84)) {
      size_t v9 = *(void *)(v5 + 64);
    }
    else {
      size_t v9 = *(void *)(v5 + 64) + 1;
    }
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

_OWORD *sub_1C4102F58(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 16) & ~v6);
  uint64_t v8 = (void *)(((unint64_t)a2 + v6 + 16) & ~v6);
  size_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, v4);
  int v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      return a1;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, v4);
      return a1;
    }
    uint64_t v15 = *(void (**)(void *, uint64_t))(v5 + 8);
    uint64_t v14 = v5 + 8;
    v15(v7, v4);
    int v12 = *(_DWORD *)(v14 + 76);
    size_t v13 = *(void *)(v14 + 56);
  }
  if (v12) {
    size_t v16 = v13;
  }
  else {
    size_t v16 = v13 + 1;
  }
  memcpy(v7, v8, v16);
  return a1;
}

uint64_t sub_1C41030E4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v6;
  if (a2 > v6)
  {
    uint64_t v10 = v8 + ((v7 + 16) & ~v7);
    char v11 = 8 * v10;
    if (v10 > 3) {
      goto LABEL_8;
    }
    unsigned int v13 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (v12) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2) {
          goto LABEL_23;
        }
LABEL_8:
        int v12 = *((unsigned __int8 *)a1 + v10);
        if (!*((unsigned char *)a1 + v10)) {
          goto LABEL_23;
        }
LABEL_15:
        int v14 = (v12 - 1) << v11;
        if (v10 > 3) {
          int v14 = 0;
        }
        if (v10)
        {
          if (v10 > 3) {
            LODWORD(v10) = 4;
          }
          switch((int)v10)
          {
            case 2:
              LODWORD(v10) = *a1;
              break;
            case 3:
              LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v10) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v10) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return v6 + (v10 | v14) + 1;
      }
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_15;
      }
    }
  }
LABEL_23:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 16) & ~v7);
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void sub_1C410329C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = v11 + ((v10 + 16) & ~v10);
  BOOL v13 = a3 >= v9;
  unsigned int v14 = a3 - v9;
  if (v14 == 0 || !v13)
  {
LABEL_15:
    if (v9 < a2) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  if (v12 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  unsigned int v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
  if (!HIWORD(v15))
  {
    if (v15 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v15 > 1;
    }
    goto LABEL_15;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_16:
    unsigned int v16 = ~v9 + a2;
    if (v12 < 4)
    {
      int v17 = (v16 >> (8 * v12)) + 1;
      if (v12)
      {
        int v18 = v16 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v17;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v12] = v17;
        return;
      default:
        return;
    }
  }
LABEL_23:
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1C41034F4);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_27;
    default:
LABEL_27:
      if (a2)
      {
LABEL_28:
        if (v8 >= 2)
        {
          unint64_t v19 = (unint64_t)&a1[v10 + 16] & ~v10;
          uint64_t v20 = a2 + 1;
          uint64_t v21 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
          v21(v19, v20);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for Run()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for RLE()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C410354C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = sub_1C4497B38();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  unsigned int v8 = (char *)v16 - v7;
  uint64_t v9 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, &v1[*(int *)(a1 + 36)], v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    uint64_t v12 = *((void *)v1 + 1);
    v16[0] = *(void *)v1;
    uint64_t v17 = v12;
    uint64_t v18 = 0;
    unint64_t v19 = 0xE000000000000000;
    sub_1C4497E88();
    sub_1C4497268();
    sub_1C4497E88();
    sub_1C4497268();
    return v18;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, v3);
    uint64_t v18 = 0;
    unint64_t v19 = 0xE000000000000000;
    uint64_t v14 = *(void *)v1;
    v16[2] = *((void *)v1 + 1);
    uint64_t v17 = v14;
    v16[0] = 0;
    v16[1] = 0xE000000000000000;
    sub_1C4497E88();
    sub_1C4497268();
    sub_1C4497E88();
    sub_1C4497268();
    swift_bridgeObjectRelease();
    sub_1C4497268();
    sub_1C44982A8();
    uint64_t v13 = v18;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v3);
  }
  return v13;
}

BOOL sub_1C4103848(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1C4497B38();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v14 = *(void *)(v11 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v51 - v17;
  MEMORY[0x1F4188790](v16);
  char v24 = (char *)&v51 - v23;
  BOOL result = 0;
  if (*a1 == *(void *)a2 && a1[1] == *((void *)a2 + 1))
  {
    uint64_t v55 = v10;
    uint64_t v56 = v19;
    uint64_t v57 = v22;
    uint64_t v61 = v11;
    uint64_t v62 = a2;
    uint64_t v26 = v8;
    uint64_t v27 = v20;
    uint64_t v54 = a4;
    uint64_t v28 = a3;
    uint64_t v29 = v21;
    uint64_t v30 = type metadata accessor for Run();
    id v31 = (char *)a1 + *(int *)(v30 + 36);
    uint64_t v59 = v14;
    uint64_t v32 = v61;
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    v33(v24, v31, v61);
    v33(v18, &v62[*(int *)(v30 + 36)], v32);
    uint64_t v58 = v29;
    uint64_t v34 = &v27[*(int *)(v29 + 48)];
    v33(v27, v24, v32);
    uint64_t v60 = v34;
    uint64_t v35 = v32;
    v33(v34, v18, v32);
    uint64_t v36 = v26;
    uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
    uint64_t v62 = v27;
    uint64_t v38 = v27;
    uint64_t v39 = v28;
    if (v37((uint64_t)v38, 1, v28) == 1)
    {
      uint64_t v40 = v62;
      uint64_t v41 = *(void (**)(char *, uint64_t))(v59 + 8);
      v41(v18, v35);
      v41(v24, v35);
      if (v37((uint64_t)v60, 1, v28) == 1)
      {
        v41(v40, v35);
        return 1;
      }
    }
    else
    {
      uint64_t v52 = v18;
      int64_t v53 = v24;
      os_log_type_t v42 = v56;
      uint64_t v43 = v35;
      v33(v56, v62, v35);
      char v44 = v60;
      uint64_t v45 = v39;
      if (v37((uint64_t)v60, 1, v39) != 1)
      {
        uint64_t v47 = v55;
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v55, v44, v39);
        char v48 = sub_1C4497178();
        unint64_t v49 = *(void (**)(char *, uint64_t))(v36 + 8);
        v49(v47, v45);
        uint64_t v50 = *(void (**)(char *, uint64_t))(v59 + 8);
        v50(v52, v43);
        v50(v53, v43);
        v49(v42, v45);
        v50(v62, v43);
        return (v48 & 1) != 0;
      }
      uint64_t v40 = v62;
      unint64_t v46 = *(void (**)(char *, uint64_t))(v59 + 8);
      v46(v52, v43);
      v46(v53, v43);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v42, v39);
    }
    (*(void (**)(char *, uint64_t))(v57 + 8))(v40, v58);
    return 0;
  }
  return result;
}

BOOL sub_1C4103D4C(void *a1, char *a2, uint64_t a3)
{
  return sub_1C4103848(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t sub_1C4103D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v13 = type metadata accessor for Proto_OrderedSet(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C410A130(a1, (uint64_t)v15);
  uint64_t v16 = sub_1C4496678();
  uint64_t v17 = sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  sub_1C420A788((uint64_t)v15, a2, v16, a3, &protocol witness table for UUID, v17, a4, a5, v20);
  uint64_t result = sub_1C3F922FC(a1, type metadata accessor for Proto_OrderedSet);
  if (!v6)
  {
    uint64_t v19 = v20[1];
    *a6 = v20[0];
    a6[1] = v19;
  }
  return result;
}

uint64_t sub_1C4103EAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Proto_OrderedSet(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v3;
  uint64_t v11 = v3[1];
  sub_1C4496888();
  uint64_t v12 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  if (qword_1EBBC0668 != -1) {
    swift_once();
  }
  *(void *)(a3 + v12) = qword_1EBBC0660;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  uint64_t v13 = sub_1C4496678();
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  swift_retain();
  swift_retain();
  swift_retain();
  v19[0] = v13;
  v19[1] = v14;
  long long v19[2] = &protocol witness table for UUID;
  v19[3] = v15;
  long long v20 = *(_OWORD *)(a2 + 24);
  uint64_t v16 = type metadata accessor for CROrderedDictionary();
  uint64_t v17 = v23;
  sub_1C420B040(a1, v16, (uint64_t)v9);
  swift_release();
  swift_release();
  if (v17) {
    return sub_1C3F922FC(a3, type metadata accessor for Proto_CRDT);
  }
  else {
    return sub_1C43F0E50((uint64_t)v9);
  }
}

uint64_t CRArray.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *v3;
  uint64_t v7 = v3[1];
  if (*(void *)(*(void *)a1 + 16))
  {
    uint64_t v24 = v6;
    uint64_t v25 = v7;
    uint64_t v8 = MEMORY[0x1F4188790](a1);
    uint64_t v10 = a2[3];
    uint64_t v20 = a2[2];
    uint64_t v9 = v20;
    uint64_t v21 = v10;
    uint64_t v11 = a2[4];
    uint64_t v22 = v11;
    uint64_t v23 = v8;
    uint64_t v24 = CRArray.map<A>(_:)((void (*)(char *))sub_1C41041D8, (uint64_t)&v19, a2);
    uint64_t v12 = sub_1C4497528();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v14 = a3;
    uint64_t v15 = v9;
    uint64_t v16 = v12;
  }
  else
  {
    uint64_t v24 = v6;
    uint64_t v25 = v7;
    uint64_t v17 = a2[2];
    uint64_t v10 = a2[3];
    uint64_t v11 = a2[4];
    swift_retain();
    swift_retain();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v14 = a3;
    uint64_t v15 = v17;
    uint64_t v16 = (uint64_t)a2;
  }
  return CRArray.init<A>(_:)((uint64_t)&v24, v15, v16, v10, v11, WitnessTable, v14);
}

uint64_t sub_1C41041D8()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0[3] + 8) + 24))(v0[5], v0[2]);
}

uint64_t CRArray.map<A>(_:)(void (*a1)(char *), uint64_t a2, void *a3)
{
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  MEMORY[0x1F4188790](a1);
  v27[1] = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = a3[2];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v28 = *(void (***)(char *, uint64_t))(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v29 = (char *)v27 - v9;
  uint64_t v36 = v10;
  uint64_t v11 = sub_1C4497B38();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)v27 - v12;
  uint64_t v14 = *v3;
  uint64_t v15 = v3[1];
  uint64_t v46 = sub_1C4496EB8();
  uint64_t v37 = v14;
  uint64_t v38 = v15;
  CRArray.count.getter();
  void v27[2] = sub_1C4497528();
  sub_1C4497458();
  uint64_t v43 = v14;
  uint64_t v44 = v15;
  uint64_t v16 = sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  uint64_t v17 = a3[3];
  uint64_t v18 = a3[4];
  uint64_t v37 = v6;
  uint64_t v38 = v7;
  uint64_t v39 = &protocol witness table for UUID;
  uint64_t v40 = v16;
  uint64_t v33 = v17;
  uint64_t v34 = v16;
  uint64_t v41 = v17;
  uint64_t v42 = v18;
  uint64_t v32 = v18;
  type metadata accessor for CROrderedDictionary();
  CROrderedDictionary.makeIterator()(&v45);
  uint64_t v19 = (unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 6);
  v27[4] = v6 - 8;
  v27[3] = v7 - 8;
  ++v28;
  for (i = v29; ; (*v28)(i, v36))
  {
    uint64_t v37 = v6;
    uint64_t v38 = v7;
    uint64_t v39 = &protocol witness table for UUID;
    uint64_t v40 = v34;
    uint64_t v41 = v33;
    uint64_t v42 = v32;
    uint64_t v21 = (void *)type metadata accessor for CROrderedDictionary.Iterator();
    CROrderedDictionary.Iterator.next()(v21, v13);
    if ((*v19)(v13, 1, v36) == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return v46;
    }
    uint64_t v22 = *(int *)(v36 + 48);
    uint64_t v23 = &v13[v22];
    uint64_t v24 = &i[v22];
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(i, v13, v6);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v24, v23, v7);
    uint64_t v25 = v35;
    v30(v24);
    if (v25) {
      break;
    }
    uint64_t v35 = 0;
    sub_1C44974D8();
  }
  (*v28)(i, v36);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t CRArray.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v46 = a6;
  uint64_t v49 = a4;
  uint64_t v50 = a5;
  uint64_t v41 = a7;
  uint64_t v42 = a1;
  uint64_t v9 = sub_1C4496678();
  uint64_t v44 = *(void (***)(char *, uint64_t))(v9 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1C4497B38();
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v47 = sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  uint64_t v48 = v9;
  CROrderedDictionary.init()(&v52);
  uint64_t v58 = v52;
  uint64_t v59 = v53;
  uint64_t v39 = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v42, a3);
  sub_1C44972B8();
  uint64_t v40 = a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1C4497B58();
  uint64_t v26 = v51;
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
  if (v27(v18, 1, a2) != 1)
  {
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    ++v44;
    uint64_t v45 = v28;
    uint64_t v51 = v26 + 32;
    uint64_t v43 = (void (**)(char *, uint64_t))(v26 + 8);
    uint64_t v46 = AssociatedConformanceWitness;
    do
    {
      v45(v14, v18, a2);
      sub_1C4496668();
      uint64_t v29 = v24;
      uint64_t v30 = AssociatedTypeWitness;
      uint64_t v31 = v48;
      uint64_t v52 = v48;
      uint64_t v53 = a2;
      uint64_t v54 = &protocol witness table for UUID;
      uint64_t v55 = v47;
      uint64_t v56 = v49;
      uint64_t v57 = v50;
      uint64_t v32 = type metadata accessor for CROrderedDictionary();
      CROrderedDictionary.append(value:forKey:)((uint64_t)v14, (uint64_t)v12, v32);
      uint64_t v33 = v31;
      uint64_t AssociatedTypeWitness = v30;
      uint64_t v24 = v29;
      (*v44)(v12, v33);
      (*v43)(v14, a2);
      sub_1C4497B58();
    }
    while (v27(v18, 1, a2) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v42, v40);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v24, AssociatedTypeWitness);
  uint64_t v35 = v59;
  uint64_t v36 = v41;
  *uint64_t v41 = v58;
  v36[1] = v35;
  return result;
}

uint64_t CRArray.copy(renamingReferences:)@<X0>(unint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!a1) {
    a1 = sub_1C3FE49A0(MEMORY[0x1E4FBC860]);
  }
  unint64_t v6 = a1;
  swift_bridgeObjectRetain();
  CRArray.copy(renamingReferences:)((uint64_t)&v6, a2, a3);
  return swift_bridgeObjectRelease();
}

void CRArray.init(_:)(void *a1@<X0>, void *a2@<X8>)
{
  CRArray.init()(v5);

  uint64_t v4 = v5[1];
  *a2 = v5[0];
  a2[1] = v4;
}

void CRArray.init()(void *a1@<X8>)
{
  sub_1C4496678();
  sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  CROrderedDictionary.init()(v3);
  uint64_t v2 = v3[1];
  *a1 = v3[0];
  a1[1] = v2;
}

uint64_t CRArray.init<A>(_:_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v16 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v18 = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v18);
  CRArray.init<A>(_:)((uint64_t)v18, a3, a4, a5, a6, a7, v21);

  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a2, a4);
  uint64_t v20 = v21[1];
  *a8 = v21[0];
  a8[1] = v20;
  return result;
}

uint64_t CRArray.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C4496678();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C4496668();
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  v12[0] = v4;
  v12[1] = v8;
  v12[2] = &protocol witness table for UUID;
  v12[3] = v9;
  long long v13 = *(_OWORD *)(a2 + 24);
  uint64_t v10 = type metadata accessor for CROrderedDictionary();
  CROrderedDictionary.append(value:forKey:)(a1, (uint64_t)v7, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Void __swiftcall CRArray.remove(at:)(Swift::Int at)
{
  sub_1C41058F0(at, v1, (uint64_t (*)(uint64_t, uint64_t))CROrderedDictionary.remove(at:));
}

uint64_t CRArray.merge(_:)(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  sub_1C4496678();
  sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  uint64_t v2 = type metadata accessor for CROrderedDictionary();
  return CROrderedDictionary.merge(_:)(v4, v2);
}

uint64_t CRArray.visitReferences(_:)(uint64_t a1)
{
  return CROrderedDictionary.visitReferences(_:)(a1);
}

id CRArray.count.getter()
{
  return CROrderedDictionary.count.getter();
}

uint64_t CRArray.array.getter(uint64_t a1)
{
  uint64_t v2 = v1[1];
  uint64_t v6 = *v1;
  uint64_t v7 = v2;
  v4[1] = *(_OWORD *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  return CRArray.map<A>(_:)((void (*)(char *))sub_1C4105184, (uint64_t)v4, (void *)a1);
}

uint64_t sub_1C4105184@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 16) - 8) + 16))(a2, a1);
}

uint64_t CRArray.insert(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C4496668();
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  v14[0] = v6;
  v14[1] = v10;
  void v14[2] = &protocol witness table for UUID;
  v14[3] = v11;
  long long v15 = *(_OWORD *)(a3 + 24);
  uint64_t v12 = type metadata accessor for CROrderedDictionary();
  CROrderedDictionary.insert(value:forKey:at:)(a1, (uint64_t)v9, a2, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Void __swiftcall CRArray.move(from:to:)(Swift::Int from, Swift::Int to)
{
}

uint64_t CRArray.index(where:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v27 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v35 = sub_1C4497B38();
  uint64_t v9 = *(void *)(v35 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v35);
  uint64_t v34 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  long long v13 = (uint64_t *)((char *)&v26 - v12);
  uint64_t v14 = v3[1];
  uint64_t v36 = *v3;
  uint64_t v37 = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x1C877FF50](v38, a3, WitnessTable);
  uint64_t v36 = v38[0];
  uint64_t v37 = v38[1];
  sub_1C4497F98();
  sub_1C4497F68();
  uint64_t v16 = sub_1C4497F88();
  uint64_t v32 = (void (**)(uint64_t *, char *, uint64_t))(v9 + 32);
  uint64_t v33 = v16;
  uint64_t v31 = TupleTypeMetadata2 - 8;
  uint64_t v26 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v17 = v28;
  while (1)
  {
    uint64_t v18 = v34;
    sub_1C4497F78();
    (*v32)(v13, v18, v35);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v13, 1, TupleTypeMetadata2) == 1)break; {
    uint64_t v19 = *v13;
    }
    uint64_t v20 = TupleTypeMetadata2;
    uint64_t v21 = (char *)v13 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v22 = v27;
    (*v26)(v27, v21, v17);
    uint64_t v23 = v39;
    char v24 = v29(v22);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v22, v17);
    uint64_t v39 = v23;
    if (!v23)
    {
      TupleTypeMetadata2 = v20;
      if ((v24 & 1) == 0) {
        continue;
      }
    }
    goto LABEL_7;
  }
  uint64_t v19 = 0;
LABEL_7:
  swift_release();
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t CRArray.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((uint64_t)CRArray.count.getter() < 1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56);
    uint64_t v5 = a2;
    uint64_t v6 = 1;
  }
  else
  {
    CRArray.subscript.getter(0, a2);
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56);
    uint64_t v5 = a2;
    uint64_t v6 = 0;
  }
  return v4(v5, v6, 1);
}

id CRArray.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1C4496678();
  sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  uint64_t v4 = type metadata accessor for CROrderedDictionary();
  return CROrderedDictionary.subscript.getter(a1, v4, a2);
}

Swift::Bool __swiftcall CRArray.needToFinalizeTimestamps()()
{
  return sub_1C4106378(v0, (uint64_t (*)(uint64_t))CROrderedDictionary.needToFinalizeTimestamps());
}

uint64_t CRArray.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2)
{
  return sub_1C41058F0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))CROrderedDictionary.finalizeTimestamps(_:));
}

uint64_t sub_1C41058F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  sub_1C4496678();
  sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  uint64_t v5 = type metadata accessor for CROrderedDictionary();
  return a3(a1, v5);
}

void CRArray.actionUndoingDifference(from:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = v2[1];
  v9[2] = *v2;
  v9[3] = v6;
  v9[0] = v4;
  v9[1] = v5;
  sub_1C4496678();
  sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  uint64_t v7 = type metadata accessor for CROrderedDictionary();
  CROrderedDictionary.actionUndoingDifference(from:)((uint64_t)v9, v7, &v10);
  if (v10 == 1) {
    long long v8 = 0uLL;
  }
  else {
    long long v8 = v11;
  }
  *(void *)a2 = v10;
  *(_OWORD *)(a2 + 8) = v8;
}

void CRArray.apply(_:)(uint64_t a1)
{
  unsigned int v1 = *(void *)a1 == 1;
  uint64_t v5 = *(void *)a1;
  int32x2_t v2 = vdup_n_s32(v1);
  v3.i64[0] = v2.u32[0];
  v3.i64[1] = v2.u32[1];
  int8x16_t v6 = vandq_s8(*(int8x16_t *)(a1 + 8), (int8x16_t)vcgezq_s64(vshlq_n_s64(v3, 0x3FuLL)));
  sub_1C4496678();
  sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  uint64_t v4 = type metadata accessor for CROrderedDictionary();
  CROrderedDictionary.apply(_:)(&v5, v4);
}

uint64_t CRArray.hasDelta(from:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = v1[1];
  v6[2] = *v1;
  v6[3] = v4;
  v6[0] = v2;
  v6[1] = v3;
  sub_1C4496678();
  sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  type metadata accessor for CROrderedDictionary();
  return CROrderedDictionary.hasDelta(from:)(v6) & 1;
}

uint64_t CRArray.delta(_:from:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  swift_retain();
  return swift_retain();
}

uint64_t CRArray.canMerge(delta:)()
{
  return 1;
}

uint64_t sub_1C4105C68(uint64_t *a1)
{
  return 1;
}

uint64_t CRArray.merge(delta:)(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  CRArray.merge(_:)(v3);
  return 1;
}

uint64_t CRArray.observableDifference(from:with:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v41 = a1;
  uint64_t v44 = a4;
  uint64_t v5 = sub_1C44967E8();
  uint64_t v39 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v38 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v37 = (char *)&v36 - v8;
  uint64_t v9 = sub_1C4496678();
  uint64_t v10 = a3[2];
  uint64_t v11 = sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  uint64_t v12 = a3[3];
  uint64_t v13 = a3[4];
  uint64_t v46 = v9;
  uint64_t v47 = v10;
  uint64_t v48 = &protocol witness table for UUID;
  uint64_t v49 = v11;
  uint64_t v50 = v12;
  uint64_t v51 = v13;
  uint64_t v14 = (int *)type metadata accessor for CROrderedDictionary.ObservableDifference();
  uint64_t v36 = sub_1C4497B38();
  uint64_t v15 = *(void *)(v36 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v36);
  uint64_t v18 = (uint64_t *)((char *)&v36 - v17);
  uint64_t v19 = *((void *)v14 - 1);
  MEMORY[0x1F4188790](v16);
  uint64_t v21 = (uint64_t *)((char *)&v36 - v20);
  uint64_t v22 = *v41;
  uint64_t v23 = v41[1];
  uint64_t v24 = v42[1];
  v45[2] = *v42;
  v45[3] = v24;
  v45[0] = v22;
  v45[1] = v23;
  uint64_t v46 = v9;
  uint64_t v47 = v10;
  uint64_t v48 = &protocol witness table for UUID;
  uint64_t v49 = v11;
  uint64_t v50 = v12;
  uint64_t v51 = v13;
  uint64_t v25 = (void *)type metadata accessor for CROrderedDictionary();
  CROrderedDictionary.observableDifference(from:with:)(v45, v43, v25, v18);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v19 + 48))(v18, 1, v14) == 1)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v18, v36);
    uint64_t v26 = type metadata accessor for CRArray.ObservableDifference();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v44, 1, 1, v26);
  }
  else
  {
    (*(void (**)(uint64_t *, void *, int *))(v19 + 32))(v21, v18, v14);
    uint64_t v43 = *v21;
    uint64_t v28 = v40;
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    uint64_t v30 = (uint64_t)v37;
    v29(v37, (char *)v21 + v14[17], v40);
    uint64_t v31 = *(uint64_t *)((char *)v21 + v14[18]);
    uint64_t v32 = (char *)v21 + v14[19];
    uint64_t v33 = (uint64_t)v38;
    v29(v38, v32, v28);
    uint64_t v34 = v44;
    sub_1C410875C(v43, v30, v31, v33, v44);
    uint64_t v35 = type metadata accessor for CRArray.ObservableDifference();
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 0, 1, v35);
  }
}

uint64_t sub_1C41060BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return CRArray.init(from:)(a1, *(void *)(a2 + 16), *(uint64_t **)(a2 + 24), *(void *)(a2 + 32), a3);
}

uint64_t CRArray.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v22 = a5;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1C4108BA8(v13, (uint64_t)v12);
  uint64_t v14 = type metadata accessor for Proto_CRDT(0);
  LODWORD(v13) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v12, 1, v14);
  sub_1C3F962E0((uint64_t)v12, &qword_1EBBC04F8);
  if (v13 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v15 = 0xD000000000000014;
    *(void *)(v15 + 8) = 0x80000001C44B0EE0;
    *(unsigned char *)(v15 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = a1;
    *(void *)(inited + 24) = 0;
    *(unsigned char *)(inited + 32) = 1;
    sub_1C4000364(a2, a3, a4, v21);
    uint64_t result = swift_release();
    if (!v5)
    {
      uint64_t v18 = v21[1];
      uint64_t v19 = v22;
      *uint64_t v22 = v21[0];
      v19[1] = v18;
    }
  }
  return result;
}

uint64_t sub_1C41062BC()
{
  return CRArray.encode(to:)();
}

uint64_t CRArray.encode(to:)()
{
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  uint64_t result = sub_1C3F62C10();
  if (!v1)
  {
    v5[0] = v2;
    v5[1] = v3;
    swift_retain();
    sub_1C400CA7C(v5);
    return swift_release();
  }
  return result;
}

uint64_t CRArray.hasEncodedData.getter(uint64_t a1)
{
  return sub_1C4106378(a1, (uint64_t (*)(uint64_t))CROrderedDictionary.hasEncodedData.getter);
}

uint64_t sub_1C4106378(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  sub_1C4496678();
  sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  uint64_t v3 = type metadata accessor for CROrderedDictionary();
  return a2(v3) & 1;
}

void sub_1C410642C(unsigned char *a1@<X8>)
{
}

void CRArray.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CRArray.index(of:)(uint64_t a1, uint64_t a2)
{
  v24[0] = a1;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v26 = sub_1C4497B38();
  uint64_t v9 = *(void *)(v26 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v26);
  uint64_t v25 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = v2[1];
  v29[2] = *v2;
  v29[3] = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x1C877FF50](v29, a2, WitnessTable);
  uint64_t v27 = v29[0];
  uint64_t v28 = v29[1];
  sub_1C4497F98();
  sub_1C4497F68();
  v24[1] = a2;
  uint64_t v16 = sub_1C4497F88();
  uint64_t v17 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  v24[2] = TupleTypeMetadata2 - 8;
  v24[3] = v16;
  uint64_t v18 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v19 = (void (**)(char *, uint64_t))(v5 + 8);
  while (1)
  {
    uint64_t v20 = v25;
    sub_1C4497F78();
    (*v17)(v13, v20, v26);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v13, 1, TupleTypeMetadata2) == 1)break; {
    uint64_t v21 = *(void *)v13;
    }
    (*v18)(v7, &v13[*(int *)(TupleTypeMetadata2 + 48)], v4);
    char v22 = sub_1C4497178();
    (*v19)(v7, v4);
    if (v22) {
      goto LABEL_6;
    }
  }
  uint64_t v21 = 0;
LABEL_6:
  swift_release();
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t CRArray.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1C4496678();
  uint64_t v5 = *(void *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = sub_1C4497B38();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v18 - v12;
  uint64_t v14 = sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  v18[0] = v4;
  v18[1] = v5;
  v18[2] = &protocol witness table for UUID;
  void v18[3] = v14;
  long long v19 = *(_OWORD *)(a1 + 24);
  uint64_t v15 = (void *)type metadata accessor for CROrderedDictionary.Iterator();
  CROrderedDictionary.Iterator.next()(v15, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v13, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v11, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a2, 1, 1, v5);
  }
  else
  {
    uint64_t v17 = *(void *)(v5 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a2, &v11[*(int *)(TupleTypeMetadata2 + 48)], v5);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(a2, 0, 1, v5);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v11, v4);
  }
}

double CRArray.makeIterator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[1];
  uint64_t v14 = *v2;
  uint64_t v15 = v5;
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)&long long v10 = v6;
  *((void *)&v10 + 1) = v7;
  uint64_t v11 = &protocol witness table for UUID;
  uint64_t v12 = sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  long long v13 = *(_OWORD *)(a1 + 24);
  type metadata accessor for CROrderedDictionary();
  CROrderedDictionary.makeIterator()((uint64_t *)&v10);
  double result = *(double *)&v10;
  uint64_t v9 = v11;
  *(_OWORD *)a2 = v10;
  *(void *)(a2 + 16) = v9;
  return result;
}

uint64_t sub_1C4106AE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CRArray.makeIterator()(a1, a2);
  swift_release();
  return swift_release();
}

uint64_t sub_1C4106B24(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t sub_1C4106B78()
{
  return 2;
}

uint64_t sub_1C4106B80()
{
  swift_getWitnessTable();
  uint64_t v0 = sub_1C3F54C8C();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1C4106BF0()
{
  return sub_1C4497318();
}

uint64_t CRArray.startIndex.getter()
{
  return 0;
}

id CRArray.endIndex.getter()
{
  return CRArray.count.getter();
}

id sub_1C4106C50@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  type metadata accessor for CRArray();
  return CRArray.subscript.getter(v3, a2);
}

id sub_1C4106CB8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  type metadata accessor for CRArray();
  return sub_1C4108D7C(a1, v4);
}

uint64_t CRArray.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C4108D7C(a1, a2);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8);
  return v5(a1);
}

void (*CRArray.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  *uint64_t v7 = a2;
  v7[1] = a3;
  uint64_t v8 = *(void *)(a3 + 16);
  v7[2] = v3;
  v7[3] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[4] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[5] = malloc(v10);
  uint64_t v11 = malloc(v10);
  v7[6] = v11;
  CRArray.subscript.getter(a2, (uint64_t)v11);
  return sub_1C4106E6C;
}

void sub_1C4106E6C(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[5];
  uint64_t v4 = (void *)(*a1)[6];
  uint64_t v5 = (*a1)[3];
  uint64_t v6 = (*a1)[4];
  uint64_t v7 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[5], v4, v5);
    sub_1C4108D7C((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    sub_1C4108D7C((*a1)[6], v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

Swift::Int __swiftcall CRArray.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t CRArray.replaceSubrange<A>(_:with:)(char *a1, char *a2, void (**a3)(char *, void), uint64_t a4, void (**a5)(void, void), uint64_t a6)
{
  uint64_t v39 = a2;
  uint64_t v38 = a4;
  uint64_t v10 = sub_1C4496678();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  long long v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1C44967E8();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1C4497808())
  {
    sub_1C4496698();
    uint64_t v18 = v38;
    uint64_t v19 = *(void *)(v38 + 16);
    uint64_t v20 = sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
    uint64_t v40 = v10;
    uint64_t v41 = v19;
    uint64_t v42 = &protocol witness table for UUID;
    uint64_t v43 = v20;
    long long v44 = *(_OWORD *)(v18 + 24);
    uint64_t v21 = (void *)type metadata accessor for CROrderedDictionary();
    CROrderedDictionary.remove(atOffsets:)((uint64_t)v17, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  else
  {
    uint64_t v37 = a1;
    uint64_t v23 = sub_1C44977F8();
    unint64_t v24 = sub_1C3FA2EC0(0, v23 & ~(v23 >> 63), 0, MEMORY[0x1E4FBC860]);
    uint64_t result = sub_1C44977F8();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v25 = result;
      uint64_t v35 = a6;
      uint64_t v36 = a5;
      if (result)
      {
        uint64_t v26 = v38;
        do
        {
          sub_1C4496668();
          unint64_t v28 = *(void *)(v24 + 16);
          unint64_t v27 = *(void *)(v24 + 24);
          if (v28 >= v27 >> 1) {
            unint64_t v24 = sub_1C3FA2EC0(v27 > 1, v28 + 1, 1, v24);
          }
          *(void *)(v24 + 16) = v28 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v24+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v28, v13, v10);
          --v25;
        }
        while (v25);
      }
      else
      {
        uint64_t v26 = v38;
      }
      unint64_t v45 = v24;
      uint64_t v29 = *(void *)(v26 + 16);
      uint64_t v30 = sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
      uint64_t v40 = v10;
      uint64_t v41 = v29;
      uint64_t v42 = &protocol witness table for UUID;
      uint64_t v43 = v30;
      long long v44 = *(_OWORD *)(v26 + 24);
      uint64_t v31 = type metadata accessor for CROrderedDictionary();
      uint64_t v32 = (void (**)(uint64_t, uint64_t))__swift_instantiateConcreteTypeFromMangledName(&qword_1EA39D5A0);
      unint64_t v33 = sub_1C4108E34();
      sub_1C420EC94(v37, v39, (uint64_t)&v45, a3, v31, v32, v36, v33, v35);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t CRArray.filter(_:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v60 = a1;
  uint64_t v56 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC150);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v52 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC148);
  uint64_t v8 = MEMORY[0x1F4188790](v53);
  uint64_t v51 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v51 - v11;
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = v16;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v18 = sub_1C4497B38();
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v51 - v19;
  uint64_t v58 = sub_1C44967E8();
  uint64_t v57 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  uint64_t v23 = *v4;
  uint64_t v22 = v4[1];
  uint64_t v59 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C44967D8();
  uint64_t v70 = v23;
  uint64_t v71 = v22;
  uint64_t v54 = v23;
  uint64_t v76 = v23;
  uint64_t v77 = v22;
  uint64_t v55 = v22;
  swift_getWitnessTable();
  uint64_t v24 = MEMORY[0x1E4FBB590];
  sub_1C44977B8();
  long long v75 = v67;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39D5B0);
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v27 = sub_1C4108E90();
  uint64_t v73 = v24;
  unint64_t v74 = v27;
  uint64_t v28 = swift_getWitnessTable();
  sub_1C4498538();
  uint64_t v70 = v76;
  uint64_t v71 = v77;
  long long v72 = v78;
  *(void *)&long long v67 = a3;
  uint64_t v65 = v25;
  *((void *)&v67 + 1) = v25;
  uint64_t v64 = WitnessTable;
  uint64_t v68 = WitnessTable;
  uint64_t v69 = v28;
  uint64_t v63 = v28;
  sub_1C4497D98();
  sub_1C4497D68();
  uint64_t v62 = TupleTypeMetadata2 - 8;
  uint64_t v29 = (void (**)(char *, char *, uint64_t))(v13 + 32);
  for (i = (void (**)(char *, uint64_t))(v13 + 8); ; (*i)(v15, v66))
  {
    uint64_t v76 = a3;
    uint64_t v77 = v65;
    *(void *)&long long v78 = v64;
    *((void *)&v78 + 1) = v63;
    sub_1C4497D88();
    sub_1C4497D78();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v20, 1, TupleTypeMetadata2) == 1)break; {
    (*v29)(v15, v20, v66);
    }
    uint64_t v31 = v80;
    char v32 = v60(v15);
    uint64_t v80 = v31;
    if (v31)
    {
      (*i)(v15, v66);
      swift_release();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v59, v58);
    }
    if ((v32 & 1) == 0) {
      sub_1C4496748();
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t v33 = v59;
  if (sub_1C4496768())
  {
    (*(void (**)(char *, uint64_t))(v57 + 8))(v33, v58);
    uint64_t v34 = v56;
    uint64_t v35 = v55;
    void *v56 = v54;
    v34[1] = v35;
    swift_retain();
    return swift_retain();
  }
  else
  {
    uint64_t v76 = v54;
    uint64_t v77 = v55;
    swift_retain();
    swift_retain();
    uint64_t v37 = v52;
    sub_1C44967C8();
    uint64_t v38 = sub_1C44967A8();
    uint64_t v39 = *(void *)(v38 - 8);
    uint64_t v40 = (uint64_t)v51;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v51, v37, v38);
    sub_1C4108F4C((unint64_t *)&qword_1EBBBEE28, MEMORY[0x1E4F27CE0]);
    sub_1C4497818();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
    uint64_t v41 = v53;
    *(void *)(v40 + *(int *)(v53 + 36)) = v79[0];
    sub_1C4108EE4(v40, (uint64_t)v12);
    uint64_t v42 = &v12[*(int *)(v41 + 36)];
    uint64_t v43 = *(void *)v42;
    sub_1C44977D8();
    if (v43 != v79[0])
    {
      sub_1C4108F4C(qword_1EA39D5B8, MEMORY[0x1E4F27CE0]);
      do
      {
        sub_1C4497098();
        long long v44 = (void (*)(void *, void))sub_1C44978C8();
        uint64_t v46 = *v45;
        uint64_t v47 = v45[1];
        v44(v79, 0);
        v79[0] = v46;
        v79[1] = v47;
        swift_getWitnessTable();
        sub_1C44978F8();
        uint64_t v48 = *(void *)v42;
        sub_1C44977D8();
      }
      while (v48 != v79[0]);
    }
    sub_1C3F962E0((uint64_t)v12, &qword_1EBBBC148);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v59, v58);
    uint64_t v49 = v77;
    uint64_t v50 = v56;
    void *v56 = v76;
    v50[1] = v49;
  }
  return result;
}

uint64_t sub_1C4107AF8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4107E80(a1, a2, a3, a4, (void (*)(uint64_t, void))sub_1C4108D7C);
}

uint64_t (*sub_1C4107B10(void *a1, uint64_t *a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  uint64_t v6[4] = CRArray.subscript.modify(v6, *a2, a3);
  return sub_1C406188C;
}

uint64_t sub_1C4107B80()
{
  return swift_release();
}

uint64_t (*sub_1C4107BC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = sub_1C44313C8(v8, a2, a3, a4);
  return sub_1C406188C;
}

uint64_t sub_1C4107C40()
{
  return sub_1C4497148();
}

uint64_t sub_1C4107CC4()
{
  return sub_1C4497128();
}

uint64_t sub_1C4107CE8()
{
  return sub_1C4497118();
}

uint64_t sub_1C4107D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41842B8](a1, a2, a3, a4, MEMORY[0x1E4FBB590]);
}

uint64_t sub_1C4107D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41842C8](a1, a2, a3, a4, MEMORY[0x1E4FBB590]);
}

void sub_1C4107D28(void *a1@<X8>)
{
}

uint64_t sub_1C4107D38(char **a1, void (**a2)(char *, void), void (**a3)(void, void), uint64_t a4, uint64_t a5)
{
  CRArray.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a5, a3, a4);
  uint64_t v7 = (uint64_t (*)(void, void))*((void *)*(a3 - 1) + 1);
  return v7(a2, a3);
}

uint64_t sub_1C4107DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return nullsub_1(a2, a3);
}

uint64_t sub_1C4107DCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  return CRArray.init<A>(_:)(a1, a4[2], a2, a4[3], a4[4], a3, a5);
}

uint64_t sub_1C4107DE4(uint64_t a1, uint64_t a2)
{
  CRArray.append(_:)(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);
  return v4(a1);
}

uint64_t sub_1C4107E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184500](a1, a4, a2, a5, a3);
}

uint64_t sub_1C4107E68(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4107E80(a1, a2, a3, a4, (void (*)(uint64_t, void))CRArray.insert(_:at:));
}

uint64_t sub_1C4107E80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void))
{
  a5(a1, *a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8);
  return v7(a1);
}

uint64_t sub_1C4107EF4()
{
  return sub_1C4497928();
}

uint64_t sub_1C4107F18()
{
  return sub_1C3FBC9F8();
}

uint64_t sub_1C4107F30()
{
  return sub_1C4497968();
}

void sub_1C4107FA8(void *a1@<X8>)
{
  *a1 = 0;
}

id sub_1C4107FB0@<X0>(void *a1@<X8>)
{
  id result = CRArray.endIndex.getter();
  *a1 = result;
  return result;
}

void (*sub_1C4107FD8(void *a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  uint64_t v6[4] = sub_1C4108090(v6, *a2, a3);
  return sub_1C4108048;
}

void sub_1C4108048(void *a1)
{
  BOOL v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1C4108090(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v5 = *(void *)(a3 + 16);
  *a1 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  a1[1] = v6;
  uint64_t v7 = malloc(*(void *)(v6 + 64));
  a1[2] = v7;
  CRArray.subscript.getter(a2, (uint64_t)v7);
  return sub_1C4108148;
}

void sub_1C4108148(void *a1)
{
  BOOL v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t sub_1C4108194@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_1C443173C(a1, a2, WitnessTable, a3);
}

uint64_t sub_1C41081FC()
{
  swift_getWitnessTable();
  return sub_1C44977B8();
}

void sub_1C4108270(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void *sub_1C410828C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *sub_1C41082A4(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

uint64_t sub_1C41082BC()
{
  swift_getWitnessTable();
  return sub_1C4497798();
}

uint64_t sub_1C410832C(void *a1)
{
  swift_getWitnessTable();
  uint64_t result = sub_1C4497798();
  *a1 = v3;
  return result;
}

uint64_t sub_1C410839C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];
  return MEMORY[0x1F41842B8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1C4108420()
{
  swift_getWitnessTable();
  return sub_1C4497788();
}

uint64_t sub_1C41084A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];
  return MEMORY[0x1F41842C8](a1, a2, a3, WitnessTable, v7);
}

uint64_t Move.from.getter()
{
  return *(void *)v0;
}

uint64_t Move.from.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*Move.from.modify())(void, void)
{
  return nullsub_1;
}

uint64_t Move.fromInSequence.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t Move.fromInSequence.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*Move.fromInSequence.modify())(void, void)
{
  return nullsub_1;
}

uint64_t Move.toInSequence.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Move.toInSequence.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*Move.toInSequence.modify())(void, void)
{
  return nullsub_1;
}

uint64_t Move.toInSequencePostMove.getter()
{
  return *(void *)(v0 + 16) - (*(void *)(v0 + 8) < *(void *)(v0 + 16));
}

uint64_t Move.to.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t Move.to.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*Move.to.modify())(void, void)
{
  return nullsub_1;
}

uint64_t CRArray.ObservableDifference.contents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CRArray.ObservableDifference.removed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = sub_1C44967E8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t CRArray.ObservableDifference.moved.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CRArray.ObservableDifference.added.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 52);
  uint64_t v5 = sub_1C44967E8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t CRArray.ObservableDifference.subscript.getter(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v5 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return MEMORY[0x1C877FC90](&v5, v2, MEMORY[0x1E4FBB550], AssociatedTypeWitness, MEMORY[0x1E4FBB560]);
}

uint64_t sub_1C410875C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  uint64_t v9 = (int *)type metadata accessor for CRArray.ObservableDifference();
  uint64_t v10 = (char *)a5 + v9[11];
  uint64_t v11 = sub_1C44967E8();
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32);
  ((void (*)(void *__return_ptr, char *, uint64_t, uint64_t))v14)((void *)(v11 - 8), v10, a2, v11);
  *(void *)((char *)a5 + v9[12]) = a3;
  uint64_t v12 = (char *)a5 + v9[13];
  return v14(v12, a4, v11);
}

uint64_t CRArray<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1C4497B38();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v11 = *v3;
  uint64_t v26 = v3[1];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1;
  uint64_t v15 = (char *)&v21 - v14;
  __swift_project_boxed_opaque_existential_1(v13, v12);
  sub_1C4498688();
  uint64_t v27 = v11;
  uint64_t v28 = v26;
  CRArray.makeIterator()(a2, (uint64_t)&v29);
  uint64_t v16 = type metadata accessor for CRArray.Iterator();
  CRArray.Iterator.next()(v16, (uint64_t)v15);
  uint64_t v17 = v7;
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v18(v15, 1, v6) != 1)
  {
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v24 = v9;
    uint64_t v22 = (void (**)(char *, uint64_t))(v17 + 8);
    do
    {
      v23(v9, v15, v6);
      uint64_t v26 = v32;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v30, v31);
      uint64_t v19 = v33;
      sub_1C4498158();
      (*v22)(v9, v6);
      uint64_t v33 = v19;
      if (v19) {
        break;
      }
      CRArray.Iterator.next()(v16, (uint64_t)v15);
    }
    while (v18(v15, 1, v6) != 1);
  }
  swift_release();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
}

uint64_t sub_1C4108AD0(void *a1, uint64_t a2, uint64_t a3)
{
  return CRArray<>.encode(to:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t CRArray.Partial.merge(delta:)(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  v3[0] = *a1;
  v3[1] = v1;
  type metadata accessor for CRArray();
  CRArray.merge(_:)(v3);
  return 1;
}

uint64_t CRArray.Partial.canMerge(delta:)()
{
  return 1;
}

uint64_t CRArray.Partial.visitReferences(_:)(uint64_t a1)
{
  return CRArray.visitReferences(_:)(a1);
}

uint64_t type metadata accessor for CRArray.ObservableDifference()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C4108BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t CRArray.Partial.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t result = CRArray.init(from:)(a1, a2, a3, a4, v9);
  if (!v5)
  {
    uint64_t v8 = v9[1];
    *a5 = v9[0];
    a5[1] = v8;
  }
  return result;
}

uint64_t CRArray.Partial.encode(to:)()
{
  return swift_release();
}

uint64_t sub_1C4108CE4(uint64_t *a1)
{
  return 1;
}

uint64_t sub_1C4108D04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return CRArray.Partial.init(from:)(a1, *(void *)(a2 + 16), *(uint64_t **)(a2 + 24), *(void *)(a2 + 32), a3);
}

uint64_t sub_1C4108D28()
{
  return CRArray.Partial.encode(to:)();
}

BOOL _s9Coherence4MoveV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

id sub_1C4108D7C(uint64_t a1, uint64_t a2)
{
  sub_1C4496678();
  sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  uint64_t v4 = type metadata accessor for CROrderedDictionary();
  return sub_1C4215210(a1, a2, v4);
}

unint64_t sub_1C4108E34()
{
  unint64_t result = qword_1EA39D5A8;
  if (!qword_1EA39D5A8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA39D5A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D5A8);
  }
  return result;
}

unint64_t sub_1C4108E90()
{
  unint64_t result = qword_1EA39B058;
  if (!qword_1EA39B058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39B058);
  }
  return result;
}

uint64_t sub_1C4108EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC148);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C4108F4C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for CRArray.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CRArray()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **sub_1C4108FC4()
{
  return &protocol witness table for CRArray<A>.Partial;
}

uint64_t sub_1C4108FD0(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1C410900C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C4109028()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C4109044()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C41090A8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C41090C4()
{
  return sub_1C4109218();
}

uint64_t sub_1C41090DC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C4109140()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C41091A4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C41091C0()
{
  return MEMORY[0x1E4FBB568];
}

uint64_t sub_1C41091CC()
{
  return sub_1C4109218();
}

uint64_t sub_1C41091E4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C4109200()
{
  return sub_1C4109218();
}

uint64_t sub_1C4109218()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C4109264()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C41092D0()
{
  return 24;
}

__n128 sub_1C41092DC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void *sub_1C4109300(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *sub_1C4109340(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

void *sub_1C41093A8(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetActor.Item(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetActor.Item(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Move(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Move(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Move()
{
  return &type metadata for Move;
}

uint64_t sub_1C41094D4()
{
  uint64_t result = sub_1C44967E8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1C4109574(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[11];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_1C44967E8();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[13];
    *(uint64_t *)((char *)v7 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    uint64_t v14 = (char *)v7 + v13;
    uint64_t v15 = (char *)a2 + v13;
    swift_bridgeObjectRetain();
    v12(v14, v15, v11);
  }
  return v7;
}

uint64_t sub_1C4109698(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = sub_1C44967E8();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v8)((void *)(v5 - 8), v4, v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 52);
  return v8(v6, v5);
}

void *sub_1C4109754(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[11];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1C44967E8();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  swift_bridgeObjectRetain();
  v10(v12, v13, v9);
  return a1;
}

char *sub_1C410982C(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[11];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1C44967E8();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10(&a1[a3[13]], &a2[a3[13]], v9);
  return a1;
}

char *sub_1C410990C(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = a3[11];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1C44967E8();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[13];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  v10(&a1[v11], &a2[v11], v9);
  return a1;
}

char *sub_1C41099C8(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[11];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1C44967E8();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40);
  v10(v7, v8, v9);
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_bridgeObjectRelease();
  v10(&a1[a3[13]], &a2[a3[13]], v9);
  return a1;
}

uint64_t sub_1C4109A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C4109AAC);
}

uint64_t sub_1C4109AAC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1C44967E8();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1C4109B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C4109B70);
}

void *sub_1C4109B70(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1C44967E8();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 44);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1C4109C1C(void *a1)
{
  if (*a1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v2 = (void *)a1[2];
}

void *sub_1C4109C64(void *a1, void *a2)
{
  if (*a2)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v5 = (void *)a2[2];
  a1[2] = v5;
  id v6 = v5;
  return a1;
}

uint64_t *sub_1C4109CC8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  if (!v4)
  {
    if (v5)
    {
      *a1 = v5;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v5)
  {
    sub_1C4496678();
    sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
    uint64_t v6 = type metadata accessor for CRDictionary.MutatingAction();
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
    goto LABEL_7;
  }
  *a1 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v7 = (void *)a1[2];
  uint64_t v8 = (void *)a2[2];
  a1[2] = (uint64_t)v8;
  id v9 = v8;

  return a1;
}

void *sub_1C4109E1C(void *a1, uint64_t a2)
{
  if (!*a1) {
    goto LABEL_5;
  }
  if (!*(void *)a2)
  {
    sub_1C4496678();
    sub_1C4108F4C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
    uint64_t v4 = type metadata accessor for CRDictionary.MutatingAction();
    (*(void (**)(void *, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  a1[1] = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v5 = (void *)a1[2];
  a1[2] = *(void *)(a2 + 16);

  return a1;
}

uint64_t sub_1C4109F3C(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1C4109F98(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for CRArray.MutatingAction()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C410A004()
{
  swift_release();
  return swift_release();
}

void *sub_1C410A040(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_1C410A078(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_1C410A0D8(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t type metadata accessor for CRArray.Partial()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C410A130(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_OrderedSet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C410A1B8()
{
  uint64_t v0 = sub_1C44967A8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C44967C8();
  sub_1C410BBE4();
  uint64_t v4 = sub_1C44977F8();
  uint64_t v5 = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v6 = v4;
    uint64_t v26 = MEMORY[0x1E4FBC860];
    sub_1C3F67EA0(0, v4 & ~(v4 >> 63), 0);
    uint64_t v5 = v26;
    uint64_t result = sub_1C44977D8();
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v22 = v1;
      while (1)
      {
        uint64_t v8 = (uint64_t (*)(uint64_t *, void))sub_1C44978C8();
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        uint64_t result = v8(&v24, 0);
        BOOL v12 = __OFSUB__(v11, 1);
        uint64_t v13 = v11 - 1;
        if (v12) {
          break;
        }
        if (v10 == v13)
        {
          uint64_t v24 = v10;
          uint64_t v14 = sub_1C4498088();
          uint64_t v16 = v15;
        }
        else
        {
          uint64_t v23 = v10;
          uint64_t v24 = sub_1C4498088();
          uint64_t v25 = v17;
          sub_1C4497268();
          uint64_t v23 = v13;
          sub_1C4498088();
          sub_1C4497268();
          swift_bridgeObjectRelease();
          uint64_t v14 = v24;
          uint64_t v16 = v25;
        }
        uint64_t v26 = v5;
        unint64_t v19 = *(void *)(v5 + 16);
        unint64_t v18 = *(void *)(v5 + 24);
        if (v19 >= v18 >> 1)
        {
          sub_1C3F67EA0(v18 > 1, v19 + 1, 1);
          uint64_t v5 = v26;
        }
        *(void *)(v5 + 16) = v19 + 1;
        unint64_t v20 = v5 + 16 * v19;
        *(void *)(v20 + 32) = v14;
        *(void *)(v20 + 40) = v16;
        sub_1C4497828();
        if (!--v6)
        {
          uint64_t v1 = v22;
          goto LABEL_12;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    uint64_t v24 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39AD70);
    sub_1C410BCA4();
    uint64_t v21 = sub_1C44970B8();
    swift_bridgeObjectRelease();
    return v21;
  }
  return result;
}

void sub_1C410A47C(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v36 = a4;
  uint64_t v37 = a8;
  uint64_t v35 = a3;
  uint64_t v13 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1C8780110](v16, v17);
  id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28F80]), sel_init);
  uint64_t v20 = (uint64_t)objc_msgSend(v19, sel_activeProcessorCount);

  uint64_t v21 = 3 * v20;
  if ((unsigned __int128)(v20 * (__int128)3) >> 64 != (3 * v20) >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (!v21)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  if (v18 == 0x8000000000000000 && v21 == -1) {
    goto LABEL_11;
  }
  uint64_t v22 = v18 / v21;
  if (v22 <= 0)
  {
    a1();
    sub_1C40811FC(a7, a7);
    uint64_t v26 = v13;
    swift_allocObject();
    uint64_t v27 = sub_1C4497428();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v28, v15, a7);
    sub_1C408045C();
    uint64_t v34 = (uint64_t)&v34;
    uint64_t v38 = a5;
    MEMORY[0x1F4188790](v27);
    *(&v34 - 6) = a6;
    *(&v34 - 5) = a7;
    uint64_t v29 = v37;
    uint64_t v30 = v35;
    *(&v34 - 4) = v37;
    *(&v34 - 3) = v30;
    *(&v34 - 2) = v36;
    *(&v34 - 1) = (uint64_t)v15;
    uint64_t v31 = sub_1C4497528();
    uint64_t WitnessTable = swift_getWitnessTable();
    sub_1C41275E0((void (*)(char *, char *))sub_1C410BD00, (uint64_t)(&v34 - 8), v31, v29, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v33);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v15, a7);
    return;
  }
  uint64_t v38 = 0;
  uint64_t v23 = MEMORY[0x1F4188790](v18 / v22);
  *(&v34 - 12) = a6;
  *(&v34 - 11) = a7;
  *(&v34 - 10) = v37;
  *(&v34 - 9) = v23;
  *(&v34 - 8) = (uint64_t)&v38;
  *(&v34 - 7) = v18;
  *(&v34 - 6) = v24;
  *(&v34 - 5) = (uint64_t)a1;
  *(&v34 - 4) = a2;
  *(&v34 - 3) = a5;
  uint64_t v25 = v36;
  *(&v34 - 2) = v35;
  *(&v34 - 1) = v25;
  sub_1C4497498();
  if (!v38) {
    goto LABEL_12;
  }
}

uint64_t sub_1C410A7B0(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  *a2 = a3;
  uint64_t result = sub_1C4497B48();
  if (result)
  {
    MEMORY[0x1F4188790](result);
    *a4 = sub_1C4497498();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C410A8B0(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = a3;
  uint64_t result = sub_1C4497B48();
  if (result)
  {
    unint64_t v4 = sub_1C3F60AA0();
    MEMORY[0x1F4188790](v4);
    return sub_1C4497A28();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C410A9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(char *, char *), uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v68 = a11;
  uint64_t v69 = a7;
  uint64_t v12 = MEMORY[0x1F4188790](a1);
  long long v67 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v12);
  uint64_t v66 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = *(void *)(a12 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v18);
  uint64_t v71 = (char *)&v58 - v28;
  uint64_t v29 = result * v22;
  if ((unsigned __int128)(result * (__int128)v22) >> 64 != (result * v22) >> 63)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v30 = v29 + v22;
  if (__OFADD__(v29, v22))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!__OFADD__(v30, v22))
  {
    uint64_t v61 = v27;
    if (v30 + v22 > v23) {
      uint64_t v30 = v23;
    }
    uint64_t v64 = v30;
    uint64_t v31 = v71;
    uint64_t v32 = v25;
    uint64_t v33 = v26;
    uint64_t v34 = result;
    v24();
    uint64_t v35 = v59;
    uint64_t v36 = v32 + *(void *)(v59 + 72) * v34;
    uint64_t v37 = v31;
    uint64_t v38 = v15;
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v20, v37, a12);
    uint64_t v39 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 32);
    uint64_t v58 = a12;
    v39(v36, v20, a12);
    uint64_t v40 = *(void *)(v15 + 72);
    uint64_t v41 = v33 + v40 * v29;
    uint64_t v65 = v40;
    uint64_t v42 = v33 + v40 * v64;
    *(void *)&long long v79 = v41;
    *(void *)&long long v77 = v42;
    uint64_t v43 = sub_1C4497B28();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t result = sub_1C4497108();
    if ((result & 1) == 0) {
      goto LABEL_18;
    }
    uint64_t v64 = a10;
    uint64_t v63 = a9;
    *(void *)&long long v77 = v41;
    *((void *)&v77 + 1) = v42;
    uint64_t v45 = sub_1C4497978();
    uint64_t v46 = swift_getWitnessTable();
    unint64_t v47 = sub_1C4108E90();
    sub_1C4497988();
    *(void *)&long long v79 = v41;
    *((void *)&v79 + 1) = v42;
    ++v61;
    uint64_t v60 = (void (**)(uint64_t, char *, uint64_t))(v38 + 32);
    uint64_t v62 = v45;
    uint64_t v48 = v66;
    uint64_t v49 = v67;
    while (1)
    {
      uint64_t v50 = v78;
      sub_1C4497998();
      if (v50 == (void)v77) {
        return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v71, v58);
      }
      long long v77 = v79;
      sub_1C4497988();
      sub_1C4497998();
      uint64_t result = sub_1C4497108();
      if ((result & 1) == 0) {
        break;
      }
      v76[0] = v75;
      v76[1] = v74;
      uint64_t v72 = v46;
      unint64_t v73 = v47;
      swift_getWitnessTable();
      sub_1C410BFA8((uint64_t)&v78, (uint64_t)v76);
      uint64_t v78 = v50 + v65;
      uint64_t v51 = v29;
      unint64_t v52 = v47;
      uint64_t v53 = v46;
      uint64_t v54 = WitnessTable;
      uint64_t v55 = v43;
      uint64_t v56 = v68;
      sub_1C4497568();
      v63(v71, v49);
      uint64_t v57 = v56;
      uint64_t v43 = v55;
      uint64_t WitnessTable = v54;
      uint64_t v46 = v53;
      unint64_t v47 = v52;
      (*v61)(v49, v57);
      (*v60)(v50, v48, v70);
      uint64_t v29 = v51 + 1;
      if (__OFADD__(v51, 1))
      {
        __break(1u);
        return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v71, v58);
      }
    }
    __break(1u);
    goto LABEL_15;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1C410AED8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v5 = sub_1C44967A8();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for IndexSetBoundaryIterator();
  uint64_t v13 = a3 + v12[6];
  *(_OWORD *)uint64_t v13 = 0u;
  *(unsigned char *)(v13 + 16) = 1;
  uint64_t v14 = a3 + v12[7];
  long long v42 = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  uint64_t v39 = (void *)v14;
  *(unsigned char *)(v14 + 16) = 1;
  uint64_t v41 = a1;
  sub_1C44967C8();
  sub_1C4496798();
  uint64_t v38 = v6;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v8, v5);
  sub_1C410BC3C((uint64_t)v11, a3);
  sub_1C44967C8();
  sub_1C4496798();
  uint64_t v36 = v15;
  uint64_t v37 = v6 + 8;
  v15(v8, v5);
  uint64_t v40 = v12;
  uint64_t v16 = a3 + v12[5];
  sub_1C410BC3C((uint64_t)v11, v16);
  uint64_t v35 = v9;
  uint64_t v17 = *(void *)(a3 + *(int *)(v9 + 36));
  sub_1C410BBE4();
  sub_1C4497818();
  uint64_t v18 = v44[0];
  if (v17 != v44[0])
  {
    uint64_t v19 = (void (*)(void *, void))sub_1C44978C8();
    long long v42 = *v20;
    v19(v44, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v8, a3, v5);
    sub_1C4497828();
    v36(v8, v5);
  }
  *(_OWORD *)uint64_t v13 = v42;
  *(unsigned char *)(v13 + 16) = v17 == v18;
  uint64_t v21 = *(void *)(v16 + *(int *)(v35 + 36));
  sub_1C4497818();
  uint64_t v22 = v44[0];
  if (v21 == v44[0])
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v25 = (void (*)(void *, void))sub_1C44978C8();
    uint64_t v24 = v26[1];
    *(void *)&long long v42 = *v26;
    v25(v44, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v8, v16, v5);
    sub_1C4497828();
    uint64_t v27 = v8;
    uint64_t v23 = v42;
    v36(v27, v5);
  }
  BOOL v28 = v21 == v22;
  uint64_t v29 = sub_1C44967E8();
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8);
  v30(v43, v29);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v30)(v41, v29);
  uint64_t v32 = v39;
  uint64_t v33 = v40;
  *uint64_t v39 = v23;
  v32[1] = v24;
  *((unsigned char *)v32 + 16) = v28;
  *(unsigned char *)(a3 + v33[8]) = 0;
  *(unsigned char *)(a3 + v33[9]) = 0;
  return result;
}

uint64_t sub_1C410B2C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1C44967A8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (int *)type metadata accessor for IndexSetBoundaryIterator();
  uint64_t v7 = v6;
  uint64_t v8 = v1 + v6[6];
  if (*(unsigned char *)(v8 + 16) != 1)
  {
    uint64_t v11 = (uint64_t *)(v8 + 8);
    char v12 = *(unsigned char *)(v1 + v6[8]);
    if (!v12) {
      uint64_t v11 = (uint64_t *)(v1 + v6[6]);
    }
    uint64_t v13 = *v11;
    uint64_t v9 = v1 + v6[7];
    uint64_t v14 = (BOOL *)(v9 + 16);
    char v15 = *(unsigned char *)(v9 + 16);
    uint64_t v16 = (void *)(v9 + 8);
    uint64_t v59 = v5;
    uint64_t v60 = v3;
    if (v15)
    {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
      if ((v12 & 1) == 0)
      {
        if (v13 != 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_33:
          uint64_t v18 = (unsigned char *)(v1 + v7[8]);
          uint64_t v10 = v13;
          goto LABEL_34;
        }
LABEL_23:
        uint64_t v34 = v7[9];
        if (*(unsigned char *)(v1 + v34) == 1)
        {
          uint64_t v57 = v16;
          uint64_t v58 = v14;
          uint64_t v35 = v1 + v7[5];
          uint64_t v56 = (void *)(v35 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78) + 36));
          uint64_t v36 = (void *)*v56;
          sub_1C410BBE4();
          sub_1C4497818();
          uint64_t v37 = (void *)v61[0];
          if (v36 == (void *)v61[0])
          {
            uint64_t v38 = 0;
            uint64_t v39 = 0;
          }
          else
          {
            uint64_t v54 = (void *)v61[0];
            unint64_t v47 = (void (*)(void *, void))sub_1C44978C8();
            uint64_t v53 = (void *)*v48;
            *(void *)&long long v52 = v48[1];
            v47(v61, 0);
            uint64_t v55 = v36;
            uint64_t v49 = v59;
            uint64_t v50 = v60;
            (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v35, v2);
            sub_1C4497828();
            (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v2);
            uint64_t v39 = v52;
            uint64_t v38 = v53;
            uint64_t v37 = v54;
            uint64_t v36 = v55;
          }
          *(void *)uint64_t v9 = v38;
          *uint64_t v57 = v39;
          *uint64_t v58 = v36 == v37;
          char v41 = *(unsigned char *)(v1 + v34) ^ 1;
        }
        else
        {
          char v41 = 1;
        }
        *(unsigned char *)(v1 + v34) = v41 & 1;
        uint64_t v13 = v10;
        goto LABEL_33;
      }
      goto LABEL_18;
    }
LABEL_11:
    uint64_t v17 = (uint64_t *)(v9 + 8);
    uint64_t v18 = (unsigned char *)(v1 + v6[9]);
    if (!*v18) {
      uint64_t v17 = (uint64_t *)v9;
    }
    uint64_t v10 = *v17;
    if (*v17 < v13)
    {
      if (!*v18)
      {
        char v40 = 1;
LABEL_35:
        *uint64_t v18 = v40 & 1;
        return v10;
      }
      uint64_t v57 = v16;
      uint64_t v58 = v14;
      uint64_t v19 = v1 + v6[5];
      uint64_t v20 = *(void **)(v19 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78) + 36));
      sub_1C410BBE4();
      sub_1C4497818();
      uint64_t v21 = (void *)v61[0];
      if (v20 == (void *)v61[0])
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
      else
      {
        long long v42 = (void (*)(void *, void))sub_1C44978C8();
        long long v44 = (void *)*v43;
        uint64_t v54 = (void *)v43[1];
        uint64_t v55 = v44;
        v42(v61, 0);
        uint64_t v56 = v20;
        uint64_t v46 = v59;
        uint64_t v45 = v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v19, v2);
        sub_1C4497828();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v2);
        uint64_t v23 = v54;
        uint64_t v22 = v55;
        uint64_t v20 = v56;
      }
      *(void *)uint64_t v9 = v22;
      *uint64_t v57 = v23;
      *uint64_t v58 = v20 == v21;
LABEL_34:
      char v40 = *v18 ^ 1;
      goto LABEL_35;
    }
    if (*(unsigned char *)(v1 + v6[8]) != 1)
    {
LABEL_21:
      BOOL v33 = v13 == v10;
      uint64_t v10 = v13;
      if (!v33) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
LABEL_18:
    uint64_t v57 = v16;
    uint64_t v58 = v14;
    uint64_t v55 = (void *)(v1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78) + 36));
    uint64_t v24 = (void *)*v55;
    sub_1C410BBE4();
    uint64_t v56 = (void *)v2;
    sub_1C4497818();
    uint64_t v25 = (void *)v61[0];
    long long v26 = 0uLL;
    if (v24 != (void *)v61[0])
    {
      uint64_t v27 = v56;
      uint64_t v53 = (void *)v61[0];
      BOOL v28 = (void (*)(void *, void))sub_1C44978C8();
      long long v52 = *v29;
      v28(v61, 0);
      uint64_t v54 = v24;
      uint64_t v30 = v59;
      uint64_t v31 = v60;
      (*(void (**)(char *, uint64_t, void *))(v60 + 16))(v59, v1, v27);
      sub_1C4497828();
      uint64_t v32 = v31;
      uint64_t v24 = v54;
      (*(void (**)(char *, void *))(v32 + 8))(v30, v27);
      long long v26 = v52;
      uint64_t v25 = v53;
    }
    *(_OWORD *)uint64_t v8 = v26;
    *(unsigned char *)(v8 + 16) = v24 == v25;
    uint64_t v2 = (uint64_t)v56;
    uint64_t v16 = v57;
    uint64_t v14 = v58;
    goto LABEL_21;
  }
  uint64_t v9 = v1 + v6[7];
  if ((*(unsigned char *)(v9 + 16) & 1) == 0)
  {
    uint64_t v59 = v5;
    uint64_t v60 = v3;
    uint64_t v14 = (BOOL *)(v9 + 16);
    uint64_t v16 = (void *)(v9 + 8);
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_11;
  }
  return 0;
}

uint64_t sub_1C410B7EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1C410B2C8();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1C410B81C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1C44967E8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v37 = (char *)&v37 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v37 - v12;
  MEMORY[0x1F4188790](v11);
  char v15 = (char *)&v37 - v14;
  uint64_t v16 = type metadata accessor for IndexSetBoundaryIterator();
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v40 = v2;
  v19(v15, v2, v4);
  uint64_t v39 = a1;
  v19(v13, a1, v4);
  sub_1C410AED8((uint64_t)v15, (uint64_t)v13, (uint64_t)v18);
  uint64_t v20 = sub_1C410B2C8();
  uint64_t v21 = 0;
  if (v22)
  {
LABEL_18:
    sub_1C410BB88((uint64_t)v18);
    return v21;
  }
  uint64_t v23 = v20;
  uint64_t v21 = 0;
  uint64_t v24 = v5;
  char v25 = 0;
  uint64_t v38 = 0;
  long long v26 = (uint64_t (**)(char *, uint64_t))(v24 + 8);
  while (1)
  {
    char v28 = sub_1C4496788();
    if ((v25 & 1) == 0)
    {
      BOOL v33 = v37;
      v19(v37, v39, v4);
      if (v28)
      {
        char v34 = sub_1C4496788();
        uint64_t v35 = v33;
        char v25 = v34;
        (*v26)(v35, v4);
        uint64_t v36 = v38;
        if (v25) {
          uint64_t v36 = v23;
        }
        uint64_t v38 = v36;
        goto LABEL_4;
      }
      (*v26)(v33, v4);
      goto LABEL_12;
    }
    v19(v8, v39, v4);
    if ((v28 & 1) == 0) {
      break;
    }
    char v29 = sub_1C4496788();
    uint64_t result = (*v26)(v8, v4);
    if ((v29 & 1) == 0) {
      goto LABEL_10;
    }
    char v25 = 1;
LABEL_4:
    uint64_t v23 = sub_1C410B2C8();
    if (v27) {
      goto LABEL_18;
    }
  }
  uint64_t result = (*v26)(v8, v4);
LABEL_10:
  uint64_t v31 = v23 - v38;
  if (!__OFSUB__(v23, v38))
  {
    BOOL v32 = __OFADD__(v21, v31);
    v21 += v31;
    if (v32) {
      goto LABEL_20;
    }
LABEL_12:
    char v25 = 0;
    goto LABEL_4;
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for IndexSetBoundaryIterator()
{
  uint64_t result = qword_1EBBBB458;
  if (!qword_1EBBBB458) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C410BB88(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IndexSetBoundaryIterator();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1C410BBE4()
{
  unint64_t result = qword_1EBBBEE28;
  if (!qword_1EBBBEE28)
  {
    sub_1C44967A8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBBEE28);
  }
  return result;
}

uint64_t sub_1C410BC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1C410BCA4()
{
  unint64_t result = qword_1EA39AD78;
  if (!qword_1EA39AD78)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA39AD70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39AD78);
  }
  return result;
}

uint64_t sub_1C410BD00(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 40))(*(void *)(v1 + 56), a1);
}

uint64_t sub_1C410BD3C(uint64_t a1, void *a2)
{
  return sub_1C410A7B0(a1, a2, *(void *)(v2 + 40), *(uint64_t **)(v2 + 48));
}

uint64_t sub_1C410BD84(uint64_t a1, void *a2)
{
  return sub_1C410A8B0(a1, a2, *(void *)(v2 + 40));
}

uint64_t sub_1C410BDCC(uint64_t a1)
{
  return sub_1C410A9AC(a1, *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), *(void (**)(char *, char *))(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1C410BE0C()
{
  unint64_t v20 = sub_1C4496658();
  LOWORD(v21) = v0;
  BYTE2(v21) = v1;
  BYTE3(v21) = v2;
  BYTE4(v21) = v3;
  BYTE5(v21) = v4;
  BYTE6(v21) = v5;
  HIBYTE(v21) = v6;
  unint64_t v18 = sub_1C4496658();
  LOWORD(v19) = v7;
  BYTE2(v19) = v8;
  BYTE3(v19) = v9;
  BYTE4(v19) = v10;
  BYTE5(v19) = v11;
  BYTE6(v19) = v12;
  HIBYTE(v19) = v13;
  unint64_t v14 = bswap64(v20);
  unint64_t v15 = bswap64(v18);
  if (v14 == v15 && (v14 = bswap64(v21), unint64_t v15 = bswap64(v19), v14 == v15))
  {
    unsigned int v16 = 0;
  }
  else if (v14 < v15)
  {
    unsigned int v16 = -1;
  }
  else
  {
    unsigned int v16 = 1;
  }
  return v16 >> 31;
}

uint64_t sub_1C410BFA8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = sub_1C4497978();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  char v9 = (char *)&v16 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v7);
  char v12 = (char *)&v16 - v11;
  char v13 = sub_1C44970D8();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v5);
  if ((v13 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v14 = sub_1C44970C8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  if ((v14 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

void *sub_1C410C200(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1C44967A8();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78);
    *(void *)((char *)a1 + *(int *)(v9 + 36)) = *(void *)((char *)a2 + *(int *)(v9 + 36));
    uint64_t v10 = a3[5];
    uint64_t v11 = (char *)a1 + v10;
    char v12 = (char *)a2 + v10;
    v8((void *)((char *)a1 + v10), (void *)((char *)a2 + v10), v7);
    *(void *)&v11[*(int *)(v9 + 36)] = *(void *)&v12[*(int *)(v9 + 36)];
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    unint64_t v15 = (char *)a1 + v13;
    uint64_t v16 = (char *)a2 + v13;
    unsigned char v15[16] = v16[16];
    *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
    uint64_t v17 = (char *)a1 + v14;
    unint64_t v18 = (char *)a2 + v14;
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    v17[16] = v18[16];
    uint64_t v19 = a3[9];
    *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    *((unsigned char *)a1 + v19) = *((unsigned char *)a2 + v19);
  }
  return a1;
}

uint64_t sub_1C410C370(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C44967A8();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v4 - 8), a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  return v7(v5, v4);
}

uint64_t sub_1C410C410(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1C44967A8();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78);
  *(void *)(a1 + *(int *)(v8 + 36)) = *(void *)(a2 + *(int *)(v8 + 36));
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  v7(a1 + v9, a2 + v9, v6);
  *(void *)(v10 + *(int *)(v8 + 36)) = *(void *)(v11 + *(int *)(v8 + 36));
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  uint64_t v16 = a1 + v13;
  uint64_t v17 = a2 + v13;
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
  uint64_t v18 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  return a1;
}

uint64_t sub_1C410C530(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1C44967A8();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78);
  *(void *)(a1 + *(int *)(v8 + 36)) = *(void *)(a2 + *(int *)(v8 + 36));
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  v7(a1 + v9, a2 + v9, v6);
  *(void *)(v10 + *(int *)(v8 + 36)) = *(void *)(v11 + *(int *)(v8 + 36));
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  char v15 = *(unsigned char *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(unsigned char *)(v13 + 16) = v15;
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  char v19 = *(unsigned char *)(v18 + 16);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(unsigned char *)(v17 + 16) = v19;
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1C410C658(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1C44967A8();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78);
  *(void *)(a1 + *(int *)(v8 + 36)) = *(void *)(a2 + *(int *)(v8 + 36));
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  v7(a1 + v9, a2 + v9, v6);
  *(void *)(v10 + *(int *)(v8 + 36)) = *(void *)(v11 + *(int *)(v8 + 36));
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  uint64_t v16 = a1 + v13;
  uint64_t v17 = a2 + v13;
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
  uint64_t v18 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  return a1;
}

uint64_t sub_1C410C778(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1C44967A8();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78);
  *(void *)(a1 + *(int *)(v8 + 36)) = *(void *)(a2 + *(int *)(v8 + 36));
  uint64_t v9 = a3[5];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  v7(a1 + v9, a2 + v9, v6);
  *(void *)(v10 + *(int *)(v8 + 36)) = *(void *)(v11 + *(int *)(v8 + 36));
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  uint64_t v16 = a1 + v13;
  uint64_t v17 = a2 + v13;
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
  uint64_t v18 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  return a1;
}

uint64_t sub_1C410C898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C410C8AC);
}

uint64_t sub_1C410C8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 32));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1C410C980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C410C994);
}

uint64_t sub_1C410C994(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 32)) = a2 + 1;
  }
  return result;
}

void sub_1C410CA54()
{
  sub_1C410CAF8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1C410CAF8()
{
  if (!qword_1EBBBB4F0[0])
  {
    sub_1C44967A8();
    sub_1C410BBE4();
    unint64_t v0 = sub_1C4497E98();
    if (!v1) {
      atomic_store(v0, qword_1EBBBB4F0);
    }
  }
}

void CRVersion.init()(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC868];
  *a1 = MEMORY[0x1E4FBC868];
  a1[1] = v1;
}

uint64_t CRVersion.hasDelta(from:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  if (sub_1C4112134(v1[1], a1[1])) {
    return 1;
  }
  return sub_1C4112134(v3, v2);
}

uint64_t sub_1C410CBCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  v24[1] = a3;
  v24[2] = a2;
  uint64_t v7 = type metadata accessor for Replica();
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1C44967E8();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *v4;
  uint64_t v25 = v14;
  *uint64_t v5 = 0x8000000000000000;
  unint64_t v16 = sub_1C3F8F160(a1);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_10;
  }
  char v3 = v15;
  if (*(void *)(v14 + 24) >= v19)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_6;
    }
LABEL_10:
    sub_1C3FA50F8();
    uint64_t v14 = v25;
    goto LABEL_6;
  }
  sub_1C3F9188C(v19, isUniquelyReferenced_nonNull_native);
  uint64_t v14 = v25;
  unint64_t v20 = sub_1C3F8F160(a1);
  if ((v3 & 1) != (v21 & 1))
  {
    uint64_t result = sub_1C4498558();
    __break(1u);
    return result;
  }
  unint64_t v16 = v20;
LABEL_6:
  *uint64_t v5 = v14;
  swift_bridgeObjectRelease();
  char v22 = (void *)*v5;
  swift_bridgeObjectRetain();
  if ((v3 & 1) == 0)
  {
    sub_1C44967D8();
    sub_1C3F8EF8C(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Replica);
    sub_1C3F9179C(v16, (uint64_t)v9, (uint64_t)v12, v22);
  }
  swift_bridgeObjectRelease();
  return sub_1C4496728();
}

uint64_t sub_1C410CDF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C44967E8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)&v23 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v14 = type metadata accessor for Replica();
  MEMORY[0x1F4188790](v14 - 8);
  unint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C3F8EF8C(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Replica);
  uint64_t v17 = sub_1C40501E4(v25, (uint64_t)v16);
  uint64_t v19 = v18;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v18, 1, v4))
  {
    ((void (*)(void *, void))v17)(v25, 0);
  }
  else
  {
    uint64_t v24 = v17;
    uint64_t v20 = a2;
    char v21 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v21(v11, v19, v4);
    v21(v8, v20, v4);
    sub_1C3FA0E84(&qword_1EBBBC330, MEMORY[0x1E4F27D00]);
    sub_1C4497BE8();
    sub_1C4497BD8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
    ((void (*)(void *, void))v24)(v25, 0);
  }
  return sub_1C3F902AC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Replica);
}

uint64_t sub_1C410D0A4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09D0);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v116 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  __n128 v131 = (char *)&v116 - v7;
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v118 = (char *)&v116 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v122 = (char *)&v116 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v135 = (char *)&v116 - v12;
  uint64_t v13 = sub_1C44967E8();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  unint64_t v130 = (char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v120 = (char *)&v116 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v126 = (char *)&v116 - v20;
  MEMORY[0x1F4188790](v19);
  char v22 = (char *)&v116 - v21;
  uint64_t v116 = type metadata accessor for Replica();
  uint64_t v138 = *(void *)(v116 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v116);
  uint64_t v139 = (uint64_t)&v116 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v121 = (uint64_t)&v116 - v26;
  MEMORY[0x1F4188790](v25);
  char v28 = (char *)&v116 - v27;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v30 = MEMORY[0x1F4188790](v29 - 8);
  BOOL v32 = (char *)&v116 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  char v34 = (char *)&v116 - v33;
  uint64_t v35 = *(void *)(a1 + 64);
  uint64_t v124 = a1 + 64;
  uint64_t v36 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v37 = -1;
  if (v36 < 64) {
    uint64_t v37 = ~(-1 << v36);
  }
  unint64_t v143 = v37 & v35;
  uint64_t v142 = (void (**)(char *, char *, uint64_t))(v14 + 16);
  unint64_t v144 = (void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v38 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  unint64_t v136 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  uint64_t v125 = (void (**)(unint64_t, char *, uint64_t))(v14 + 40);
  uint64_t v140 = v14;
  uint64_t v132 = (void (**)(char *, uint64_t))(v14 + 8);
  int64_t v128 = (unint64_t)(v36 + 63) >> 6;
  int64_t v117 = v128 - 1;
  uint64_t v129 = a1;
  swift_bridgeObjectRetain();
  int64_t v137 = 0;
  uint64_t v134 = v22;
  __n128 v146 = v28;
  uint64_t v141 = v34;
  uint64_t v127 = v5;
  uint64_t v133 = v32;
  uint64_t v119 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  while (1)
  {
    if (v143)
    {
      unint64_t v41 = __clz(__rbit64(v143));
      v143 &= v143 - 1;
      unint64_t v42 = v41 | (v137 << 6);
LABEL_10:
      uint64_t v43 = v129;
      sub_1C3F8EF8C(*(void *)(v129 + 48) + *(void *)(v138 + 72) * v42, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v44 = v140;
      unint64_t v45 = *(void *)(v43 + 56) + *(void *)(v140 + 72) * v42;
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
      (*(void (**)(char *, unint64_t, uint64_t))(v44 + 16))(&v32[*(int *)(v46 + 48)], v45, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v32, 0, 1, v46);
      char v28 = v146;
      char v34 = v141;
      goto LABEL_29;
    }
    int64_t v47 = v137 + 1;
    if (__OFADD__(v137, 1)) {
      goto LABEL_73;
    }
    if (v47 < v128)
    {
      unint64_t v48 = *(void *)(v124 + 8 * v47);
      if (v48) {
        goto LABEL_14;
      }
      int64_t v49 = v137 + 2;
      ++v137;
      if (v47 + 1 < v128)
      {
        unint64_t v48 = *(void *)(v124 + 8 * v49);
        if (v48) {
          goto LABEL_17;
        }
        int64_t v137 = v47 + 1;
        if (v47 + 2 < v128)
        {
          unint64_t v48 = *(void *)(v124 + 8 * (v47 + 2));
          if (v48)
          {
            v47 += 2;
            goto LABEL_14;
          }
          int64_t v49 = v47 + 3;
          int64_t v137 = v47 + 2;
          if (v47 + 3 < v128) {
            break;
          }
        }
      }
    }
LABEL_28:
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v32, 1, 1, v50);
    unint64_t v143 = 0;
LABEL_29:
    sub_1C3F961BC((uint64_t)v32, (uint64_t)v34, &qword_1EBBC07A0);
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 48))(v34, 1, v51) == 1) {
      return swift_release();
    }
    long long v52 = &v34[*(int *)(v51 + 48)];
    sub_1C3F8F7B0((uint64_t)v34, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v145 = *v144;
    v145(v22, v52, v13);
    uint64_t v53 = *v147;
    if (*(void *)(*v147 + 16))
    {
      unint64_t v54 = sub_1C3F8F160((uint64_t)v28);
      uint64_t v55 = v139;
      uint64_t v56 = v136;
      if (v57)
      {
        uint64_t v58 = v140;
        uint64_t v59 = *(void *)(v140 + 72);
        unint64_t v60 = *(void *)(v53 + 56) + v59 * v54;
        uint64_t v61 = (uint64_t)v135;
        (*(void (**)(char *, unint64_t, uint64_t))(v140 + 16))(v135, v60, v13);
        uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
        v62((char *)v61, 0, 1, v13);
        uint64_t v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
        if (v63(v61, 1, v13) != 1)
        {
          uint64_t v123 = v59;
          v145(v126, (char *)v61, v13);
          uint64_t v89 = v121;
          sub_1C3F8EF8C((uint64_t)v146, v121, (uint64_t (*)(void))type metadata accessor for Replica);
          uint64_t v90 = (uint64_t)v122;
          sub_1C4496718();
          v62((char *)v90, 0, 1, v13);
          if (v63(v90, 1, v13) == 1)
          {
            sub_1C3F962E0(v90, (uint64_t *)&unk_1EBBC09D0);
            swift_bridgeObjectRetain();
            unint64_t v91 = sub_1C3F8F160(v89);
            char v93 = v92;
            swift_bridgeObjectRelease();
            uint64_t v94 = (uint64_t)v118;
            if (v93)
            {
              uint64_t v95 = v147;
              int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v97 = *v95;
              uint64_t v148 = (void *)*v95;
              *uint64_t v95 = 0x8000000000000000;
              uint64_t v38 = v119;
              if (!isUniquelyReferenced_nonNull_native)
              {
                sub_1C3FA50F8();
                uint64_t v97 = (uint64_t)v148;
              }
              sub_1C3F902AC(*(void *)(v97 + 48) + *(void *)(v138 + 72) * v91, (uint64_t (*)(void))type metadata accessor for Replica);
              v145((char *)v94, (char *)(*(void *)(v97 + 56) + v91 * v123), v13);
              sub_1C3FA5A34(v91, v97);
              uint64_t *v147 = v97;
              swift_bridgeObjectRelease();
              uint64_t v98 = 0;
            }
            else
            {
              uint64_t v98 = 1;
              uint64_t v38 = v119;
            }
            v62((char *)v94, v98, 1, v13);
            sub_1C3F902AC(v89, (uint64_t (*)(void))type metadata accessor for Replica);
            sub_1C3F962E0(v94, (uint64_t *)&unk_1EBBC09D0);
            BOOL v32 = v133;
            char v22 = v134;
            char v28 = v146;
            char v34 = v141;
          }
          else
          {
            uint64_t v99 = (void (*)(unint64_t, char *, uint64_t))v145;
            v145(v120, (char *)v90, v13);
            uint64_t v100 = v147;
            int v101 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v148 = (void *)*v100;
            unint64_t v102 = v148;
            *uint64_t v100 = 0x8000000000000000;
            unint64_t v104 = sub_1C3F8F160(v89);
            uint64_t v105 = v102[2];
            BOOL v106 = (v103 & 1) == 0;
            uint64_t v107 = v105 + v106;
            if (__OFADD__(v105, v106)) {
              goto LABEL_75;
            }
            char v108 = v103;
            if (v102[3] >= v107)
            {
              uint64_t v38 = v119;
              if ((v101 & 1) == 0) {
                sub_1C3FA50F8();
              }
            }
            else
            {
              sub_1C3F9188C(v107, v101);
              unint64_t v109 = sub_1C3F8F160(v89);
              uint64_t v38 = v119;
              if ((v108 & 1) != (v110 & 1)) {
                goto LABEL_78;
              }
              unint64_t v104 = v109;
            }
            char v34 = v141;
            uint64_t v111 = v148;
            if (v108)
            {
              (*v125)(v148[7] + v104 * v123, v120, v13);
            }
            else
            {
              v148[(v104 >> 6) + 8] |= 1 << v104;
              sub_1C3F8EF8C(v89, v111[6] + *(void *)(v138 + 72) * v104, (uint64_t (*)(void))type metadata accessor for Replica);
              v99(v111[7] + v104 * v123, v120, v13);
              uint64_t v112 = v111[2];
              BOOL v87 = __OFADD__(v112, 1);
              uint64_t v113 = v112 + 1;
              if (v87) {
                goto LABEL_76;
              }
              v111[2] = v113;
            }
            uint64_t *v147 = (uint64_t)v148;
            swift_bridgeObjectRelease();
            sub_1C3F902AC(v89, (uint64_t (*)(void))type metadata accessor for Replica);
            BOOL v32 = v133;
            char v22 = v134;
            char v28 = v146;
          }
          uint64_t v114 = *v132;
          (*v132)(v126, v13);
          v114(v22, v13);
          goto LABEL_7;
        }
        uint64_t v64 = v38;
        char v28 = v146;
      }
      else
      {
        uint64_t v62 = *v38;
        uint64_t v61 = (uint64_t)v135;
        uint64_t v64 = v38;
        (*v38)(v135, 1, 1, v13);
      }
    }
    else
    {
      uint64_t v62 = *v38;
      uint64_t v61 = (uint64_t)v135;
      uint64_t v64 = v38;
      (*v38)(v135, 1, 1, v13);
      uint64_t v55 = v139;
      uint64_t v56 = v136;
    }
    sub_1C3F962E0(v61, (uint64_t *)&unk_1EBBC09D0);
    sub_1C3F8EF8C((uint64_t)v28, v55, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v65 = (uint64_t)v131;
    (*v142)(v131, v22, v13);
    v62((char *)v65, 0, 1, v13);
    if ((*v56)(v65, 1, v13) == 1)
    {
      sub_1C3F962E0(v65, (uint64_t *)&unk_1EBBC09D0);
      swift_bridgeObjectRetain();
      unint64_t v66 = sub_1C3F8F160(v55);
      char v68 = v67;
      swift_bridgeObjectRelease();
      uint64_t v69 = (void (*)(char *, unint64_t, uint64_t))v145;
      if (v68)
      {
        uint64_t v70 = v147;
        int v71 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v72 = *v70;
        uint64_t v148 = (void *)*v70;
        *uint64_t v70 = 0x8000000000000000;
        uint64_t v38 = v64;
        if (!v71)
        {
          sub_1C3FA50F8();
          uint64_t v72 = (uint64_t)v148;
        }
        sub_1C3F902AC(*(void *)(v72 + 48) + *(void *)(v138 + 72) * v66, (uint64_t (*)(void))type metadata accessor for Replica);
        uint64_t v40 = (uint64_t)v127;
        v69(v127, *(void *)(v72 + 56) + *(void *)(v140 + 72) * v66, v13);
        sub_1C3FA5A34(v66, v72);
        uint64_t *v147 = v72;
        swift_bridgeObjectRelease();
        uint64_t v39 = 0;
      }
      else
      {
        uint64_t v39 = 1;
        uint64_t v40 = (uint64_t)v127;
        uint64_t v38 = v64;
      }
      v62((char *)v40, v39, 1, v13);
      sub_1C3F902AC(v139, (uint64_t (*)(void))type metadata accessor for Replica);
      sub_1C3F962E0(v40, (uint64_t *)&unk_1EBBC09D0);
      BOOL v32 = v133;
      char v22 = v134;
      char v28 = v146;
      char v34 = v141;
    }
    else
    {
      unint64_t v73 = (void (*)(unint64_t, char *, uint64_t))v145;
      v145(v130, (char *)v65, v13);
      uint64_t v74 = v147;
      int v75 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v148 = (void *)*v74;
      uint64_t v76 = v148;
      *uint64_t v74 = 0x8000000000000000;
      unint64_t v78 = sub_1C3F8F160(v55);
      uint64_t v79 = v76[2];
      BOOL v80 = (v77 & 1) == 0;
      uint64_t v81 = v79 + v80;
      if (__OFADD__(v79, v80))
      {
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
      char v82 = v77;
      if (v76[3] >= v81)
      {
        uint64_t v38 = v64;
        if ((v75 & 1) == 0) {
          sub_1C3FA50F8();
        }
      }
      else
      {
        sub_1C3F9188C(v81, v75);
        unint64_t v83 = sub_1C3F8F160(v55);
        if ((v82 & 1) != (v84 & 1)) {
          goto LABEL_78;
        }
        unint64_t v78 = v83;
        uint64_t v38 = v64;
      }
      char v34 = v141;
      uint64_t v85 = v148;
      if (v82)
      {
        (*(void (**)(unint64_t, char *, uint64_t))(v140 + 40))(v148[7] + *(void *)(v140 + 72) * v78, v130, v13);
      }
      else
      {
        v148[(v78 >> 6) + 8] |= 1 << v78;
        sub_1C3F8EF8C(v55, v85[6] + *(void *)(v138 + 72) * v78, (uint64_t (*)(void))type metadata accessor for Replica);
        v73(v85[7] + *(void *)(v140 + 72) * v78, v130, v13);
        uint64_t v86 = v85[2];
        BOOL v87 = __OFADD__(v86, 1);
        uint64_t v88 = v86 + 1;
        if (v87) {
          goto LABEL_74;
        }
        v85[2] = v88;
      }
      uint64_t *v147 = (uint64_t)v148;
      swift_bridgeObjectRelease();
      sub_1C3F902AC(v55, (uint64_t (*)(void))type metadata accessor for Replica);
      BOOL v32 = v133;
      char v22 = v134;
      char v28 = v146;
    }
    (*v132)(v22, v13);
LABEL_7:
    sub_1C3F902AC((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for Replica);
  }
  unint64_t v48 = *(void *)(v124 + 8 * v49);
  if (v48)
  {
LABEL_17:
    int64_t v47 = v49;
LABEL_14:
    unint64_t v143 = (v48 - 1) & v48;
    unint64_t v42 = __clz(__rbit64(v48)) + (v47 << 6);
    int64_t v137 = v47;
    goto LABEL_10;
  }
  while (1)
  {
    int64_t v47 = v49 + 1;
    if (__OFADD__(v49, 1)) {
      break;
    }
    if (v47 >= v128)
    {
      int64_t v137 = v117;
      goto LABEL_28;
    }
    unint64_t v48 = *(void *)(v124 + 8 * v47);
    ++v49;
    if (v48) {
      goto LABEL_14;
    }
  }
LABEL_77:
  __break(1u);
LABEL_78:
  uint64_t result = sub_1C4498558();
  __break(1u);
  return result;
}

uint64_t sub_1C410E07C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09D0);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v118 = (char *)&v114 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  int64_t v117 = (char *)&v114 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v120 = (char *)&v114 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v135 = (char *)&v114 - v14;
  uint64_t v15 = sub_1C44967E8();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v119 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v125 = (char *)&v114 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v124 = (char *)&v114 - v22;
  MEMORY[0x1F4188790](v21);
  unint64_t v143 = (char *)&v114 - v23;
  uint64_t v114 = type metadata accessor for Replica();
  uint64_t v138 = *(void *)(v114 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v114);
  uint64_t v121 = (uint64_t)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v114 - v26;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v29 = MEMORY[0x1F4188790](v28 - 8);
  uint64_t v31 = (char *)&v114 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v33 = (char *)&v114 - v32;
  uint64_t v34 = *v2;
  uint64_t v35 = *(void *)(*v2 + 64);
  uint64_t v122 = *v2 + 64;
  uint64_t v36 = 1 << *(unsigned char *)(v34 + 32);
  uint64_t v37 = -1;
  if (v36 < 64) {
    uint64_t v37 = ~(-1 << v36);
  }
  unint64_t v38 = v37 & v35;
  unint64_t v39 = (unint64_t)(v36 + 63) >> 6;
  uint64_t v136 = v16 + 16;
  uint64_t v139 = v16;
  uint64_t v140 = (void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v142 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v127 = v16 + 48;
  uint64_t v132 = (void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v40 = (void (**)(unint64_t, char *, uint64_t))(v16 + 40);
  unint64_t v41 = v38;
  uint64_t v116 = v40;
  int64_t v128 = v39;
  unint64_t v115 = v39 - 1;
  uint64_t v129 = v34;
  swift_bridgeObjectRetain();
  unint64_t v137 = 0;
  uint64_t v134 = a1;
  unint64_t v130 = v7;
  __n128 v131 = v33;
  uint64_t v126 = v2;
  uint64_t v123 = v27;
  uint64_t v133 = v31;
  while (1)
  {
    if (v41)
    {
      uint64_t v44 = (uint64_t)v27;
      uint64_t v45 = a1;
      uint64_t v141 = (v41 - 1) & v41;
      unint64_t v46 = __clz(__rbit64(v41)) | (v137 << 6);
LABEL_10:
      uint64_t v47 = v129;
      sub_1C3F8EF8C(*(void *)(v129 + 48) + *(void *)(v138 + 72) * v46, (uint64_t)v31, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v48 = v139;
      unint64_t v49 = *(void *)(v47 + 56) + *(void *)(v139 + 72) * v46;
      uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(&v31[*(int *)(v50 + 48)], v49, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v31, 0, 1, v50);
      a1 = v45;
      uint64_t v33 = v131;
      goto LABEL_29;
    }
    int64_t v51 = v137 + 1;
    if (__OFADD__(v137, 1))
    {
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    uint64_t v44 = (uint64_t)v27;
    if (v51 < v128)
    {
      unint64_t v52 = *(void *)(v122 + 8 * v51);
      if (v52) {
        goto LABEL_14;
      }
      int64_t v53 = v137 + 2;
      ++v137;
      if (v51 + 1 < v128)
      {
        unint64_t v52 = *(void *)(v122 + 8 * v53);
        if (v52) {
          goto LABEL_17;
        }
        unint64_t v137 = v51 + 1;
        if (v51 + 2 < v128)
        {
          unint64_t v52 = *(void *)(v122 + 8 * (v51 + 2));
          if (v52)
          {
            v51 += 2;
            goto LABEL_14;
          }
          int64_t v53 = v51 + 3;
          unint64_t v137 = v51 + 2;
          if (v51 + 3 < v128) {
            break;
          }
        }
      }
    }
LABEL_28:
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v31, 1, 1, v54);
    uint64_t v141 = 0;
LABEL_29:
    sub_1C3F961BC((uint64_t)v31, (uint64_t)v33, &qword_1EBBC07A0);
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 48))(v33, 1, v55) == 1) {
      return swift_release();
    }
    uint64_t v56 = &v33[*(int *)(v55 + 48)];
    uint64_t v27 = (char *)v44;
    sub_1C3F8F7B0((uint64_t)v33, v44, (uint64_t (*)(void))type metadata accessor for Replica);
    char v57 = *v140;
    (*v140)(v143, v56, v15);
    if (!*(void *)(a1 + 16) || (unint64_t v58 = sub_1C3F8F160(v44), (v59 & 1) == 0))
    {
      uint64_t v65 = *v142;
      uint64_t v64 = (uint64_t)v135;
      (*v142)(v135, 1, 1, v15);
LABEL_35:
      sub_1C3F962E0(v64, (uint64_t *)&unk_1EBBC09D0);
      swift_bridgeObjectRetain();
      unint64_t v67 = sub_1C3F8F160((uint64_t)v27);
      char v69 = v68;
      swift_bridgeObjectRelease();
      if (v69)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v71 = *v2;
        unint64_t v144 = (void *)*v2;
        uint64_t *v2 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_1C3FA50F8();
          uint64_t v71 = (uint64_t)v144;
        }
        sub_1C3F902AC(*(void *)(v71 + 48) + *(void *)(v138 + 72) * v67, (uint64_t (*)(void))type metadata accessor for Replica);
        uint64_t v43 = (uint64_t)v130;
        v57(v130, (char *)(*(void *)(v71 + 56) + *(void *)(v139 + 72) * v67), v15);
        sub_1C3FA5A34(v67, v71);
        uint64_t *v2 = v71;
        swift_bridgeObjectRelease();
        uint64_t v42 = 0;
        a1 = v134;
      }
      else
      {
        uint64_t v42 = 1;
        a1 = v134;
        uint64_t v43 = (uint64_t)v130;
      }
      v65((char *)v43, v42, 1, v15);
      sub_1C3F962E0(v43, (uint64_t *)&unk_1EBBC09D0);
      (*v132)(v143, v15);
LABEL_6:
      uint64_t v31 = v133;
      goto LABEL_7;
    }
    uint64_t v60 = v139;
    uint64_t v61 = *(void *)(v139 + 72);
    unint64_t v62 = *(void *)(a1 + 56) + v61 * v58;
    uint64_t v63 = *(void (**)(char *, unint64_t, uint64_t))(v139 + 16);
    uint64_t v64 = (uint64_t)v135;
    v63(v135, v62, v15);
    uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56);
    v65((char *)v64, 0, 1, v15);
    unint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
    if (v66(v64, 1, v15) == 1)
    {
      uint64_t v2 = v126;
      goto LABEL_35;
    }
    v57(v124, (char *)v64, v15);
    uint64_t v72 = v125;
    sub_1C44966B8();
    if (sub_1C44966F8() < 1)
    {
      uint64_t v2 = v126;
      swift_bridgeObjectRetain();
      uint64_t v27 = v123;
      unint64_t v83 = sub_1C3F8F160((uint64_t)v123);
      char v85 = v84;
      swift_bridgeObjectRelease();
      uint64_t v86 = (uint64_t)v118;
      if (v85)
      {
        unint64_t v87 = v83;
        int v88 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v89 = *v2;
        unint64_t v144 = (void *)*v2;
        uint64_t *v2 = 0x8000000000000000;
        uint64_t v33 = v131;
        if (!v88)
        {
          sub_1C3FA50F8();
          uint64_t v89 = (uint64_t)v144;
        }
        sub_1C3F902AC(*(void *)(v89 + 48) + *(void *)(v138 + 72) * v87, (uint64_t (*)(void))type metadata accessor for Replica);
        v57((char *)v86, (char *)(*(void *)(v89 + 56) + v87 * v61), v15);
        sub_1C3FA5A34(v87, v89);
        uint64_t *v2 = v89;
        swift_bridgeObjectRelease();
        uint64_t v90 = 0;
        a1 = v134;
      }
      else
      {
        uint64_t v90 = 1;
        a1 = v134;
        uint64_t v33 = v131;
      }
      v65((char *)v86, v90, 1, v15);
      sub_1C3F962E0(v86, (uint64_t *)&unk_1EBBC09D0);
      BOOL v106 = *v132;
      (*v132)(v125, v15);
      v106(v124, v15);
      v106(v143, v15);
      goto LABEL_6;
    }
    uint64_t v73 = v121;
    sub_1C3F8EF8C((uint64_t)v123, v121, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v74 = (uint64_t)v120;
    v63(v120, (unint64_t)v72, v15);
    v65((char *)v74, 0, 1, v15);
    if (v66(v74, 1, v15) == 1)
    {
      sub_1C3F962E0(v74, (uint64_t *)&unk_1EBBC09D0);
      uint64_t v2 = v126;
      swift_bridgeObjectRetain();
      unint64_t v75 = sub_1C3F8F160(v73);
      char v77 = v76;
      swift_bridgeObjectRelease();
      uint64_t v33 = v131;
      if (v77)
      {
        unint64_t v78 = v75;
        int v79 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v80 = *v2;
        unint64_t v144 = (void *)*v2;
        uint64_t *v2 = 0x8000000000000000;
        uint64_t v81 = (uint64_t)v117;
        uint64_t v27 = v123;
        if (!v79)
        {
          sub_1C3FA50F8();
          uint64_t v80 = (uint64_t)v144;
        }
        sub_1C3F902AC(*(void *)(v80 + 48) + *(void *)(v138 + 72) * v78, (uint64_t (*)(void))type metadata accessor for Replica);
        v57((char *)v81, (char *)(*(void *)(v80 + 56) + v78 * v61), v15);
        sub_1C3FA5A34(v78, v80);
        uint64_t *v2 = v80;
        swift_bridgeObjectRelease();
        uint64_t v82 = 0;
      }
      else
      {
        uint64_t v82 = 1;
        uint64_t v81 = (uint64_t)v117;
        uint64_t v27 = v123;
      }
      a1 = v134;
      v65((char *)v81, v82, 1, v15);
      sub_1C3F902AC(v121, (uint64_t (*)(void))type metadata accessor for Replica);
      sub_1C3F962E0(v81, (uint64_t *)&unk_1EBBC09D0);
      uint64_t v31 = v133;
    }
    else
    {
      v57(v119, (char *)v74, v15);
      unint64_t v91 = v126;
      int v92 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v144 = (void *)*v91;
      char v93 = v144;
      *unint64_t v91 = 0x8000000000000000;
      unint64_t v95 = sub_1C3F8F160(v73);
      uint64_t v96 = v93[2];
      BOOL v97 = (v94 & 1) == 0;
      uint64_t v98 = v96 + v97;
      uint64_t v33 = v131;
      if (__OFADD__(v96, v97)) {
        goto LABEL_68;
      }
      uint64_t v99 = v73;
      if (v93[3] >= v98)
      {
        uint64_t v105 = v134;
        uint64_t v27 = v123;
        if ((v92 & 1) == 0)
        {
          char v112 = v94;
          sub_1C3FA50F8();
          char v94 = v112;
        }
      }
      else
      {
        char v100 = v94;
        sub_1C3F9188C(v98, v92);
        unint64_t v101 = sub_1C3F8F160(v99);
        int v103 = v102 & 1;
        char v94 = v100;
        BOOL v104 = (v100 & 1) == v103;
        uint64_t v105 = v134;
        uint64_t v27 = v123;
        if (!v104) {
          goto LABEL_71;
        }
        unint64_t v95 = v101;
      }
      uint64_t v2 = v126;
      uint64_t v107 = v144;
      if (v94)
      {
        (*v116)(v144[7] + v95 * v61, v119, v15);
      }
      else
      {
        v144[(v95 >> 6) + 8] |= 1 << v95;
        sub_1C3F8EF8C(v99, v107[6] + *(void *)(v138 + 72) * v95, (uint64_t (*)(void))type metadata accessor for Replica);
        v57((char *)(v107[7] + v95 * v61), v119, v15);
        uint64_t v108 = v107[2];
        BOOL v109 = __OFADD__(v108, 1);
        uint64_t v110 = v108 + 1;
        if (v109) {
          goto LABEL_69;
        }
        v107[2] = v110;
      }
      uint64_t *v2 = (uint64_t)v144;
      swift_bridgeObjectRelease();
      sub_1C3F902AC(v99, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v31 = v133;
      a1 = v105;
    }
    uint64_t v111 = *v132;
    (*v132)(v125, v15);
    v111(v124, v15);
    v111(v143, v15);
LABEL_7:
    unint64_t v41 = v141;
    sub_1C3F902AC((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for Replica);
  }
  unint64_t v52 = *(void *)(v122 + 8 * v53);
  if (v52)
  {
LABEL_17:
    int64_t v51 = v53;
LABEL_14:
    uint64_t v45 = a1;
    uint64_t v141 = (v52 - 1) & v52;
    unint64_t v46 = __clz(__rbit64(v52)) + (v51 << 6);
    unint64_t v137 = v51;
    goto LABEL_10;
  }
  while (1)
  {
    int64_t v51 = v53 + 1;
    if (__OFADD__(v53, 1)) {
      break;
    }
    if (v51 >= v128)
    {
      unint64_t v137 = v115;
      goto LABEL_28;
    }
    unint64_t v52 = *(void *)(v122 + 8 * v51);
    ++v53;
    if (v52) {
      goto LABEL_14;
    }
  }
LABEL_70:
  __break(1u);
LABEL_71:
  uint64_t result = sub_1C4498558();
  __break(1u);
  return result;
}

uint64_t sub_1C410EEFC(uint64_t a1, uint64_t a2, unsigned int (*a3)(void, void, void))
{
  v293 = a3;
  uint64_t v287 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09D0);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  v270 = (char *)&v254 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  v283 = (char *)&v254 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  v286 = (char *)&v254 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  v288 = (char *)&v254 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v262 = (char *)&v254 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  v261 = (char *)&v254 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  v264 = (char *)&v254 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  v290 = (char *)&v254 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v260 = (char *)&v254 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v266 = (char *)&v254 - v25;
  MEMORY[0x1F4188790](v24);
  v289 = (char *)&v254 - v26;
  uint64_t v309 = sub_1C44967E8();
  uint64_t v27 = *(void *)(v309 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v309);
  __n128 v281 = (char *)&v254 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v269 = (char *)&v254 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  v295 = (char *)&v254 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  v305 = (char *)&v254 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v265 = (char *)&v254 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v259 = (char *)&v254 - v39;
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  v273 = (char *)&v254 - v41;
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  uint64_t v271 = (char *)&v254 - v43;
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  uint64_t v272 = (char *)&v254 - v45;
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  uint64_t v280 = (char *)&v254 - v47;
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  v258 = (char *)&v254 - v49;
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  uint64_t v263 = (char *)&v254 - v51;
  uint64_t v52 = MEMORY[0x1F4188790](v50);
  v274 = (char *)&v254 - v53;
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  uint64_t v276 = (char *)&v254 - v55;
  MEMORY[0x1F4188790](v54);
  char v57 = (char *)&v254 - v56;
  uint64_t v254 = type metadata accessor for Replica();
  uint64_t v299 = *(void *)(v254 - 8);
  uint64_t v58 = MEMORY[0x1F4188790](v254);
  uint64_t v60 = (char *)&v254 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = MEMORY[0x1F4188790](v58);
  uint64_t v63 = (char *)&v254 - v62;
  uint64_t v64 = MEMORY[0x1F4188790](v61);
  uint64_t v267 = (uint64_t)&v254 - v65;
  MEMORY[0x1F4188790](v64);
  unint64_t v306 = (unint64_t)&v254 - v66;
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v68 = MEMORY[0x1F4188790](v67 - 8);
  uint64_t v70 = (char *)&v254 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = MEMORY[0x1F4188790](v68);
  uint64_t v291 = (uint64_t)&v254 - v72;
  uint64_t v73 = MEMORY[0x1F4188790](v71);
  uint64_t v292 = (uint64_t)&v254 - v74;
  MEMORY[0x1F4188790](v73);
  char v76 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)&v254 - v75);
  v300 = v3;
  uint64_t v77 = *v3;
  uint64_t v78 = *(void *)(*v3 + 64);
  uint64_t v268 = *v3 + 64;
  uint64_t v79 = 1 << *(unsigned char *)(v77 + 32);
  uint64_t v80 = -1;
  if (v79 < 64) {
    uint64_t v80 = ~(-1 << v79);
  }
  unint64_t v303 = v80 & v78;
  unint64_t v81 = (unint64_t)(v79 + 63) >> 6;
  v307 = (void (**)(char *, uint64_t, uint64_t))(v27 + 32);
  uint64_t v308 = v27;
  v310 = (void (**)(char *, char *, uint64_t))(v27 + 16);
  v311 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
  v298 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  v304 = (void (**)(char *, uint64_t))(v27 + 8);
  unint64_t v255 = v81 - 1;
  uint64_t v82 = swift_bridgeObjectRetain();
  unint64_t v83 = 0;
  int64_t v278 = v81;
  unint64_t v257 = v81 - 5;
  uint64_t v285 = v82;
  uint64_t v256 = v82 + 104;
  __n128 v282 = v60;
  v297 = v63;
  v294 = v70;
  uint64_t v301 = a2;
  unint64_t v279 = (unint64_t)v57;
  for (i = v76; ; char v76 = i)
  {
    if (v303)
    {
      unint64_t v85 = __clz(__rbit64(v303));
      v302 = (void (*)(char *, uint64_t, uint64_t))v83;
      v303 &= v303 - 1;
      unint64_t v86 = v85 | ((void)v83 << 6);
      goto LABEL_9;
    }
    int64_t v93 = (int64_t)(v83 + 1);
    if (__OFADD__(v83, 1)) {
      break;
    }
    if (v93 >= v278)
    {
      unint64_t v95 = v83;
    }
    else
    {
      unint64_t v94 = *(void *)(v268 + 8 * v93);
      if (v94) {
        goto LABEL_13;
      }
      unint64_t v95 = v83 + 1;
      if ((uint64_t)(v83 + 2) < v278)
      {
        unint64_t v94 = *(void *)(v268 + 8 * (void)(v83 + 2));
        if (v94)
        {
          int64_t v93 = (int64_t)(v83 + 2);
          goto LABEL_13;
        }
        unint64_t v95 = v83 + 2;
        if ((uint64_t)(v83 + 3) < v278)
        {
          unint64_t v94 = *(void *)(v268 + 8 * (void)(v83 + 3));
          if (v94)
          {
            int64_t v93 = (int64_t)(v83 + 3);
LABEL_13:
            v302 = (void (*)(char *, uint64_t, uint64_t))v93;
            unint64_t v303 = (v94 - 1) & v94;
            unint64_t v86 = __clz(__rbit64(v94)) + (v93 << 6);
LABEL_9:
            uint64_t v87 = v285;
            uint64_t v88 = v292;
            sub_1C3F8EF8C(*(void *)(v285 + 48) + *(void *)(v299 + 72) * v86, v292, (uint64_t (*)(void))type metadata accessor for Replica);
            uint64_t v89 = v308;
            unint64_t v90 = *(void *)(v87 + 56) + *(void *)(v308 + 72) * v86;
            uint64_t v91 = v88;
            uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v89 + 16))(v91 + *(int *)(v92 + 48), v90, v309);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56))(v91, 0, 1, v92);
            char v76 = i;
            goto LABEL_16;
          }
          int64_t v93 = (int64_t)(v83 + 4);
          unint64_t v95 = v83 + 3;
          if ((uint64_t)(v83 + 4) < v278)
          {
            unint64_t v94 = *(void *)(v268 + 8 * v93);
            if (v94) {
              goto LABEL_13;
            }
            while ((char *)v257 != v83)
            {
              unint64_t v94 = *(void *)(v256 + 8 * (void)v83++);
              if (v94)
              {
                int64_t v93 = (int64_t)(v83 + 4);
                goto LABEL_13;
              }
            }
            unint64_t v95 = (char *)v255;
          }
        }
      }
    }
    uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    uint64_t v97 = v292;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v292, 1, 1, v96);
    v302 = (void (*)(char *, uint64_t, uint64_t))v95;
    unint64_t v303 = 0;
    uint64_t v91 = v97;
LABEL_16:
    sub_1C3F961BC(v91, (uint64_t)v76, &qword_1EBBC07A0);
    uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    uint64_t v99 = *(void *)(v98 - 8);
    char v100 = *(unsigned int (**)(void, void, void))(v99 + 48);
    if (v100(v76, 1, v98) == 1)
    {
      swift_release();
      uint64_t v182 = *(void *)(a2 + 64);
      v290 = (char *)(a2 + 64);
      uint64_t v183 = 1 << *(unsigned char *)(a2 + 32);
      uint64_t v184 = -1;
      if (v183 < 64) {
        uint64_t v184 = ~(-1 << v183);
      }
      unint64_t v306 = v184 & v182;
      unint64_t v185 = (unint64_t)(v183 + 63) >> 6;
      i = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56);
      v289 = (char *)(v308 + 40);
      unint64_t v279 = v185 - 1;
      swift_bridgeObjectRetain();
      unint64_t v186 = 0;
      uint64_t v292 = v185;
      uint64_t v284 = (uint64_t (*)(char *, uint64_t, uint64_t))(v185 - 5);
      uint64_t v285 = a2 + 104;
      uint64_t v187 = v287;
      uint64_t v188 = v286;
      uint64_t v189 = v309;
      v293 = v100;
      while (2)
      {
        if (v306)
        {
          unint64_t v195 = __clz(__rbit64(v306));
          v306 &= v306 - 1;
          unint64_t v303 = v186;
          unint64_t v196 = v195 | (v186 << 6);
          goto LABEL_76;
        }
        uint64_t v231 = v186 + 1;
        if (__OFADD__(v186, 1)) {
          goto LABEL_130;
        }
        if (v231 >= v292)
        {
          unint64_t v303 = v186;
          unint64_t v306 = 0;
          uint64_t v197 = 1;
        }
        else
        {
          unint64_t v232 = *(void *)&v290[8 * v231];
          if (v232)
          {
LABEL_98:
            unint64_t v306 = (v232 - 1) & v232;
            unint64_t v196 = __clz(__rbit64(v232)) + (v231 << 6);
            unint64_t v303 = v231;
LABEL_76:
            sub_1C3F8EF8C(*(void *)(a2 + 48) + *(void *)(v299 + 72) * v196, (uint64_t)v70, (uint64_t (*)(void))type metadata accessor for Replica);
            (*(void (**)(char *, unint64_t, uint64_t))(v308 + 16))(&v70[*(int *)(v98 + 48)], *(void *)(a2 + 56) + *(void *)(v308 + 72) * v196, v189);
            uint64_t v197 = 0;
          }
          else if ((uint64_t)(v186 + 2) >= v292)
          {
            unint64_t v306 = 0;
            uint64_t v197 = 1;
            unint64_t v303 = v186 + 1;
          }
          else
          {
            unint64_t v232 = *(void *)&v290[8 * v186 + 16];
            if (v232)
            {
              uint64_t v231 = v186 + 2;
              goto LABEL_98;
            }
            if ((uint64_t)(v186 + 3) >= v292)
            {
              unint64_t v306 = 0;
              uint64_t v197 = 1;
              unint64_t v303 = v186 + 2;
            }
            else
            {
              unint64_t v232 = *(void *)&v290[8 * v186 + 24];
              if (v232)
              {
                uint64_t v231 = v186 + 3;
                goto LABEL_98;
              }
              uint64_t v231 = v186 + 4;
              if ((uint64_t)(v186 + 4) >= v292)
              {
                unint64_t v306 = 0;
                uint64_t v197 = 1;
                unint64_t v303 = v186 + 3;
              }
              else
              {
                unint64_t v232 = *(void *)&v290[8 * v231];
                if (v232) {
                  goto LABEL_98;
                }
                while (v284 != (uint64_t (*)(char *, uint64_t, uint64_t))v186)
                {
                  unint64_t v232 = *(void *)(v285 + 8 * v186++);
                  if (v232)
                  {
                    uint64_t v231 = v186 + 4;
                    goto LABEL_98;
                  }
                }
                unint64_t v306 = 0;
                uint64_t v197 = 1;
                unint64_t v303 = v279;
              }
            }
          }
        }
        (*i)(v70, v197, 1, v98);
        uint64_t v198 = (uint64_t)v70;
        uint64_t v199 = v291;
        sub_1C3F961BC(v198, v291, &qword_1EBBC07A0);
        if (v100(v199, 1, v98) == 1) {
          return swift_release();
        }
        uint64_t v200 = v199 + *(int *)(v98 + 48);
        sub_1C3F8F7B0(v199, (uint64_t)v63, (uint64_t (*)(void))type metadata accessor for Replica);
        uint64_t v201 = *v307;
        (*v307)(v305, v200, v189);
        uint64_t v202 = *v300;
        if (*(void *)(*v300 + 16) && (unint64_t v203 = sub_1C3F8F160((uint64_t)v63), (v204 & 1) != 0))
        {
          uint64_t v205 = v308;
          unint64_t v206 = *(void *)(v202 + 56) + *(void *)(v308 + 72) * v203;
          uint64_t v207 = (uint64_t)v288;
          (*(void (**)(char *, unint64_t, uint64_t))(v308 + 16))(v288, v206, v189);
          uint64_t v208 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v205 + 56);
          v208((char *)v207, 0, 1, v189);
          uint64_t v209 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v205 + 48);
          uint64_t v63 = v297;
          if (v209(v207, 1, v189) != 1)
          {
            sub_1C3F962E0(v207, (uint64_t *)&unk_1EBBC09D0);
            (*v304)(v305, v189);
            a2 = v301;
            goto LABEL_100;
          }
        }
        else
        {
          uint64_t v208 = *v311;
          uint64_t v207 = (uint64_t)v288;
          (*v311)(v288, 1, 1, v189);
        }
        sub_1C3F962E0(v207, (uint64_t *)&unk_1EBBC09D0);
        if (*(void *)(v187 + 16) && (unint64_t v210 = sub_1C3F8F160((uint64_t)v63), (v211 & 1) != 0))
        {
          uint64_t v212 = *(void *)(v187 + 56);
          uint64_t v213 = v308;
          uint64_t v214 = (uint64_t)v188;
          uint64_t v215 = *(void (**)(char *, char *, uint64_t))(v308 + 16);
          v215((char *)v214, (char *)(v212 + *(void *)(v308 + 72) * v210), v189);
          v208((char *)v214, 0, 1, v189);
          int v216 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v213 + 48))(v214, 1, v189);
          uint64_t v217 = v295;
          if (v216 != 1)
          {
            uint64_t v218 = v269;
            v201(v269, v214, v189);
            uint64_t v219 = v305;
            v215(v280, v305, v189);
            v302 = v201;
            v215(v271, v219, v189);
            v215(v273, v218, v189);
            sub_1C3FA0E84(&qword_1EBBBC330, MEMORY[0x1E4F27D00]);
            uint64_t v220 = v272;
            sub_1C4497BE8();
            char v100 = v293;
            sub_1C4497BC8();
            uint64_t v221 = *v304;
            (*v304)(v220, v189);
            v221(v269, v189);
            uint64_t v201 = v302;
            goto LABEL_89;
          }
        }
        else
        {
          v208(v188, 1, 1, v189);
          uint64_t v214 = (uint64_t)v188;
          uint64_t v217 = v295;
        }
        sub_1C3F962E0(v214, (uint64_t *)&unk_1EBBC09D0);
        uint64_t v215 = *v310;
        (*v310)(v217, v305, v189);
LABEL_89:
        if (sub_1C44966F8() < 1)
        {
          uint64_t v233 = *v304;
          (*v304)(v217, v189);
          v233(v305, v189);
          a2 = v301;
          uint64_t v187 = v287;
          uint64_t v188 = v286;
          uint64_t v63 = v297;
LABEL_100:
          uint64_t v70 = v294;
        }
        else
        {
          v302 = v201;
          uint64_t v222 = (uint64_t)v282;
          sub_1C3F8EF8C((uint64_t)v297, (uint64_t)v282, (uint64_t (*)(void))type metadata accessor for Replica);
          uint64_t v223 = (uint64_t)v283;
          v215(v283, v217, v189);
          v208((char *)v223, 0, 1, v189);
          if ((*v298)(v223, 1, v189) == 1)
          {
            sub_1C3F962E0(v223, (uint64_t *)&unk_1EBBC09D0);
            uint64_t v224 = v300;
            swift_bridgeObjectRetain();
            unint64_t v225 = sub_1C3F8F160(v222);
            char v227 = v226;
            swift_bridgeObjectRelease();
            if (v227)
            {
              int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v229 = *v224;
              v312 = (void *)*v224;
              *uint64_t v224 = 0x8000000000000000;
              __n128 v230 = v224;
              uint64_t v192 = (uint64_t)v297;
              if (!isUniquelyReferenced_nonNull_native)
              {
                sub_1C3FA50F8();
                uint64_t v229 = (uint64_t)v312;
              }
              sub_1C3F902AC(*(void *)(v229 + 48) + *(void *)(v299 + 72) * v225, (uint64_t (*)(void))type metadata accessor for Replica);
              uint64_t v191 = (uint64_t)v270;
              v302(v270, *(void *)(v229 + 56) + *(void *)(v308 + 72) * v225, v189);
              sub_1C3FA5A34(v225, v229);
              *__n128 v230 = v229;
              swift_bridgeObjectRelease();
              uint64_t v190 = 0;
            }
            else
            {
              uint64_t v190 = 1;
              uint64_t v191 = (uint64_t)v270;
              uint64_t v192 = (uint64_t)v297;
            }
            v208((char *)v191, v190, 1, v189);
            sub_1C3F902AC(v222, (uint64_t (*)(void))type metadata accessor for Replica);
            sub_1C3F962E0(v191, (uint64_t *)&unk_1EBBC09D0);
          }
          else
          {
            v302(v281, v223, v189);
            uint64_t v234 = v300;
            int v235 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v236 = v234;
            int v237 = v235;
            uint64_t v238 = (void *)*v234;
            v312 = v238;
            uint64_t *v236 = 0x8000000000000000;
            unint64_t v240 = sub_1C3F8F160(v222);
            uint64_t v241 = v238[2];
            BOOL v242 = (v239 & 1) == 0;
            uint64_t v243 = v241 + v242;
            if (__OFADD__(v241, v242)) {
              goto LABEL_131;
            }
            char v244 = v239;
            if (v238[3] >= v243)
            {
              uint64_t v247 = (uint64_t)v297;
              if ((v237 & 1) == 0) {
                sub_1C3FA50F8();
              }
            }
            else
            {
              sub_1C3F9188C(v243, v237);
              unint64_t v245 = sub_1C3F8F160(v222);
              uint64_t v247 = (uint64_t)v297;
              if ((v244 & 1) != (v246 & 1)) {
                goto LABEL_133;
              }
              unint64_t v240 = v245;
            }
            uint64_t v248 = v300;
            uint64_t v249 = v312;
            if (v244)
            {
              uint64_t v192 = v247;
              (*(void (**)(unint64_t, char *, uint64_t))(v308 + 40))(v312[7] + *(void *)(v308 + 72) * v240, v281, v189);
            }
            else
            {
              v312[(v240 >> 6) + 8] |= 1 << v240;
              sub_1C3F8EF8C(v222, v249[6] + *(void *)(v299 + 72) * v240, (uint64_t (*)(void))type metadata accessor for Replica);
              v302((char *)(v249[7] + *(void *)(v308 + 72) * v240), (uint64_t)v281, v189);
              uint64_t v250 = v249[2];
              BOOL v251 = __OFADD__(v250, 1);
              uint64_t v252 = v250 + 1;
              if (v251) {
                goto LABEL_132;
              }
              uint64_t v192 = v247;
              v249[2] = v252;
            }
            *uint64_t v248 = (uint64_t)v312;
            swift_bridgeObjectRelease();
            sub_1C3F902AC(v222, (uint64_t (*)(void))type metadata accessor for Replica);
          }
          uint64_t v193 = v301;
          uint64_t v187 = v287;
          uint64_t v188 = v286;
          uint64_t v70 = v294;
          uint64_t v194 = *v304;
          (*v304)(v295, v189);
          v194(v305, v189);
          a2 = v193;
          uint64_t v63 = (char *)v192;
          char v100 = v293;
        }
        sub_1C3F902AC((uint64_t)v63, (uint64_t (*)(void))type metadata accessor for Replica);
        unint64_t v186 = v303;
        continue;
      }
    }
    unint64_t v101 = (char *)v76 + *(int *)(v98 + 48);
    uint64_t v102 = v306;
    sub_1C3F8F7B0((uint64_t)v76, v306, (uint64_t (*)(void))type metadata accessor for Replica);
    int v103 = *v307;
    uint64_t v104 = v309;
    (*v307)(v57, (uint64_t)v101, v309);
    if (!*(void *)(a2 + 16) || (unint64_t v105 = sub_1C3F8F160(v102), (v106 & 1) == 0))
    {
      char v112 = *v311;
      uint64_t v118 = v289;
      (*v311)(v289, 1, 1, v104);
      uint64_t v117 = (uint64_t)v118;
      uint64_t v115 = (uint64_t)v290;
      goto LABEL_22;
    }
    uint64_t v107 = v63;
    uint64_t v108 = v308;
    uint64_t v109 = *(void *)(v308 + 72);
    uint64_t v110 = *(void (**)(char *, unint64_t, uint64_t))(v308 + 16);
    uint64_t v111 = v289;
    v110(v289, *(void *)(a2 + 56) + v109 * v105, v104);
    char v112 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56);
    v112(v111, 0, 1, v104);
    uint64_t v284 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v108 + 48);
    int v113 = v284(v111, 1, v104);
    uint64_t v114 = v104;
    uint64_t v115 = (uint64_t)v290;
    uint64_t v116 = v293;
    if (v113 == 1)
    {
      uint64_t v117 = (uint64_t)v111;
      uint64_t v63 = v107;
      char v57 = (char *)v279;
      goto LABEL_23;
    }
    v103(v274, (uint64_t)v111, v114);
    if (!v116[2] || (unint64_t v143 = sub_1C3F8F160(v306), (v144 & 1) == 0))
    {
      uint64_t v147 = v266;
      uint64_t v148 = v309;
      v112(v266, 1, 1, v309);
      uint64_t v63 = v107;
LABEL_41:
      (*v304)(v274, v148);
      uint64_t v117 = (uint64_t)v147;
      char v57 = (char *)v279;
LABEL_22:
      uint64_t v116 = v293;
LABEL_23:
      sub_1C3F962E0(v117, (uint64_t *)&unk_1EBBC09D0);
      if (!v116[2] || (unint64_t v119 = sub_1C3F8F160(v306), (v120 & 1) == 0))
      {
        uint64_t v84 = v309;
        v112((char *)v115, 1, 1, v309);
LABEL_5:
        (*v304)(v57, v84);
        sub_1C3F902AC(v306, (uint64_t (*)(void))type metadata accessor for Replica);
        sub_1C3F962E0(v115, (uint64_t *)&unk_1EBBC09D0);
        goto LABEL_6;
      }
      uint64_t v121 = v116[7];
      uint64_t v122 = v308;
      uint64_t v277 = *(void *)(v308 + 72);
      uint64_t v110 = *(void (**)(char *, unint64_t, uint64_t))(v308 + 16);
      uint64_t v84 = v309;
      v110((char *)v115, v121 + v277 * v119, v309);
      v112((char *)v115, 0, 1, v84);
      uint64_t v123 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48);
      if (v123(v115, 1, v84) == 1) {
        goto LABEL_5;
      }
      uint64_t v284 = (uint64_t (*)(char *, uint64_t, uint64_t))v123;
      uint64_t v124 = v57;
      uint64_t v125 = v265;
      v103(v265, v115, v84);
      v110(v280, (unint64_t)v124, v84);
      v110(v271, (unint64_t)v124, v84);
      v110(v273, (unint64_t)v125, v84);
      sub_1C3FA0E84(&qword_1EBBBC330, MEMORY[0x1E4F27D00]);
      uint64_t v126 = v272;
      sub_1C4497BE8();
      uint64_t v127 = v276;
      sub_1C4497BC8();
      int64_t v128 = *v304;
      (*v304)(v126, v84);
      uint64_t v275 = (void (*)(void, void))v128;
      v128(v125, v84);
      goto LABEL_27;
    }
    uint64_t v145 = v116[7];
    uint64_t v277 = v109;
    unint64_t v146 = v145 + v143 * v109;
    uint64_t v147 = v266;
    uint64_t v148 = v309;
    v110(v266, v146, v309);
    v112(v147, 0, 1, v148);
    uint64_t v63 = v107;
    if (v284(v147, 1, v148) == 1) {
      goto LABEL_41;
    }
    v103(v263, (uint64_t)v147, v148);
    uint64_t v149 = v287;
    unint64_t v150 = v279;
    if (*(void *)(v287 + 16) && (unint64_t v151 = sub_1C3F8F160(v306), (v152 & 1) != 0))
    {
      unint64_t v153 = *(void *)(v149 + 56) + v151 * v277;
      uint64_t v154 = (uint64_t)v260;
      v110(v260, v153, v148);
      v112((char *)v154, 0, 1, v148);
      if (v284((char *)v154, 1, v148) != 1)
      {
        v103(v258, v154, v148);
        __n128 v155 = v272;
        v110(v272, (unint64_t)v263, v148);
        ((void (*)(char *))v110)(v273);
        v110(v259, (unint64_t)v274, v148);
        uint64_t v275 = (void (*)(void, void))sub_1C3FA0E84(&qword_1EBBBC330, MEMORY[0x1E4F27D00]);
        uint64_t v156 = v271;
        sub_1C4497BE8();
        sub_1C4497BC8();
        uint64_t v157 = *v304;
        (*v304)(v156, v148);
        unint64_t v158 = v279;
        v110(v155, v279, v148);
        v110(v273, v158, v148);
        v110(v259, (unint64_t)v280, v148);
        sub_1C4497BE8();
        uint64_t v159 = v272;
        sub_1C4497BC8();
        v157(v156, v148);
        v157(v280, v148);
        __n128 v160 = v159;
        __n128 v161 = v274;
        v110(v160, (unint64_t)v274, v148);
        v110(v273, (unint64_t)v161, v148);
        v110(v259, (unint64_t)v258, v148);
        sub_1C4497BE8();
        uint64_t v162 = v280;
        sub_1C4497BC8();
        v157(v156, v148);
        uint64_t v163 = v276;
        sub_1C44967B8();
        v157(v162, v148);
        v157(v258, v148);
        v157(v263, v148);
        uint64_t v275 = (void (*)(void, void))v157;
        v157(v274, v148);
        uint64_t v127 = v163;
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v154 = (uint64_t)v260;
      v112(v260, 1, 1, v148);
    }
    sub_1C3F962E0(v154, (uint64_t *)&unk_1EBBC09D0);
    v110(v280, v150, v148);
    v110(v271, v150, v148);
    v110(v273, (unint64_t)v263, v148);
    sub_1C3FA0E84(&qword_1EBBBC330, MEMORY[0x1E4F27D00]);
    uint64_t v177 = v272;
    sub_1C4497BE8();
    uint64_t v178 = v276;
    sub_1C4497BC8();
    uint64_t v179 = *v304;
    (*v304)(v177, v148);
    uint64_t v180 = v274;
    sub_1C44967B8();
    v179(v263, v148);
    uint64_t v181 = v180;
    uint64_t v127 = v178;
    uint64_t v275 = (void (*)(void, void))v179;
    v179(v181, v148);
LABEL_27:
    uint64_t v129 = sub_1C44966F8();
    uint64_t v130 = v267;
    if (v129 < 1)
    {
      uint64_t v164 = v300;
      swift_bridgeObjectRetain();
      unint64_t v165 = sub_1C3F8F160(v306);
      char v167 = v166;
      swift_bridgeObjectRelease();
      uint64_t v63 = v297;
      uint64_t v70 = v294;
      char v57 = (char *)v279;
      if (v167)
      {
        int v168 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v169 = *v164;
        v312 = (void *)*v164;
        uint64_t *v164 = 0x8000000000000000;
        if (!v168)
        {
          sub_1C3FA50F8();
          uint64_t v169 = (uint64_t)v312;
        }
        sub_1C3F902AC(*(void *)(v169 + 48) + *(void *)(v299 + 72) * v165, (uint64_t (*)(void))type metadata accessor for Replica);
        uint64_t v170 = v262;
        uint64_t v132 = v309;
        v103(v262, *(void *)(v169 + 56) + v277 * v165, v309);
        sub_1C3FA5A34(v165, v169);
        uint64_t *v164 = v169;
        swift_bridgeObjectRelease();
        uint64_t v171 = 0;
      }
      else
      {
        uint64_t v171 = 1;
        uint64_t v170 = v262;
        uint64_t v132 = v309;
      }
      v112(v170, v171, 1, v132);
      uint64_t v175 = (uint64_t)v170;
      goto LABEL_54;
    }
    sub_1C3F8EF8C(v306, v267, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v131 = (uint64_t)v264;
    uint64_t v132 = v309;
    v110(v264, (unint64_t)v127, v309);
    v112((char *)v131, 0, 1, v132);
    int v133 = v284((char *)v131, 1, v132);
    uint64_t v63 = v297;
    uint64_t v70 = v294;
    char v57 = (char *)v279;
    if (v133 == 1)
    {
      sub_1C3F962E0(v131, (uint64_t *)&unk_1EBBC09D0);
      uint64_t v134 = v300;
      swift_bridgeObjectRetain();
      unint64_t v135 = sub_1C3F8F160(v130);
      char v137 = v136;
      swift_bridgeObjectRelease();
      if (v137)
      {
        int v138 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v139 = *v134;
        v312 = (void *)*v134;
        *uint64_t v134 = 0x8000000000000000;
        if (!v138)
        {
          sub_1C3FA50F8();
          uint64_t v139 = (uint64_t)v312;
        }
        sub_1C3F902AC(*(void *)(v139 + 48) + *(void *)(v299 + 72) * v135, (uint64_t (*)(void))type metadata accessor for Replica);
        unint64_t v140 = *(void *)(v139 + 56) + v277 * v135;
        uint64_t v141 = v261;
        uint64_t v284 = (uint64_t (*)(char *, uint64_t, uint64_t))v135;
        uint64_t v132 = v309;
        v103(v261, v140, v309);
        sub_1C3FA5A34((unint64_t)v284, v139);
        *uint64_t v134 = v139;
        swift_bridgeObjectRelease();
        uint64_t v142 = 0;
      }
      else
      {
        uint64_t v142 = 1;
        uint64_t v141 = v261;
        uint64_t v132 = v309;
      }
      v112(v141, v142, 1, v132);
      sub_1C3F902AC(v267, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v175 = (uint64_t)v141;
LABEL_54:
      sub_1C3F962E0(v175, (uint64_t *)&unk_1EBBC09D0);
      goto LABEL_55;
    }
    uint64_t v172 = (uint64_t)v280;
    v103(v280, v131, v132);
    uint64_t v173 = v300;
    char v174 = swift_isUniquelyReferenced_nonNull_native();
    v312 = (void *)*v173;
    uint64_t *v173 = 0x8000000000000000;
    sub_1C4420ACC(v172, v130, v174);
    uint64_t *v173 = (uint64_t)v312;
    swift_bridgeObjectRelease();
    sub_1C3F902AC(v130, (uint64_t (*)(void))type metadata accessor for Replica);
LABEL_55:
    uint64_t v176 = (void (*)(char *, uint64_t))v275;
    v275(v276, v132);
    v176(v57, v132);
    sub_1C3F902AC(v306, (uint64_t (*)(void))type metadata accessor for Replica);
LABEL_6:
    a2 = v301;
    unint64_t v83 = (char *)v302;
  }
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  uint64_t result = sub_1C4498558();
  __break(1u);
  return result;
}

uint64_t sub_1C41111F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v125 = a1;
  uint64_t v146 = *MEMORY[0x1E4F143B8];
  uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC128);
  MEMORY[0x1F4188790](v128);
  uint64_t v4 = (char *)&v108 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC120);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v131 = (uint64_t)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v108 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v120 = (uint64_t)&v108 - v11;
  uint64_t v118 = type metadata accessor for Replica();
  uint64_t v124 = *(void *)(v118 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v118);
  uint64_t v111 = (uint64_t)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v110 = (uint64_t)&v108 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v108 - v16;
  uint64_t v18 = type metadata accessor for Timestamp(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v139 = (uint64_t)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v114 = (uint64_t)&v108 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v113 = (uint64_t)&v108 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v115 = (uint64_t)&v108 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v116 = (uint64_t)&v108 - v28;
  uint64_t v141 = sub_1C44967E8();
  uint64_t v29 = *(void *)(v141 - 8);
  MEMORY[0x1F4188790](v141);
  int v138 = (char *)&v108 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v32 = MEMORY[0x1F4188790](v31 - 8);
  uint64_t v34 = (char *)&v108 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v36 = (char *)&v108 - v35;
  uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
  uint64_t v37 = v19 + 56;
  uint64_t v140 = a2;
  int v133 = v38;
  v38(a2, 1, 1, v18);
  uint64_t v39 = *(void *)(v125 + 64);
  uint64_t v112 = v125 + 64;
  uint64_t v40 = 1 << *(unsigned char *)(v125 + 32);
  uint64_t v41 = -1;
  if (v40 < 64) {
    uint64_t v41 = ~(-1 << v40);
  }
  unint64_t v42 = v41 & v39;
  uint64_t v122 = v29 + 16;
  uint64_t v129 = (void (**)(char *, uint64_t, uint64_t))(v29 + 32);
  uint64_t v134 = v37;
  uint64_t v132 = (unsigned int (**)(char *, uint64_t, uint64_t))(v37 - 8);
  uint64_t v43 = v116;
  uint64_t v123 = v29;
  uint64_t v126 = (void (**)(char *, uint64_t))(v29 + 8);
  uint64_t v44 = (uint64_t)v36;
  uint64_t v45 = v120;
  int64_t v117 = (unint64_t)(v40 + 63) >> 6;
  int64_t v108 = v117 - 1;
  swift_bridgeObjectRetain();
  int64_t v130 = 0;
  uint64_t v135 = v44;
  char v136 = v34;
  unint64_t v119 = v4;
  uint64_t v127 = v17;
  uint64_t v121 = v18;
  if (!v42) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v137 = (v42 - 1) & v42;
  unint64_t v47 = __clz(__rbit64(v42)) | (v130 << 6);
LABEL_9:
  uint64_t v48 = v45;
  uint64_t v49 = v125;
  sub_1C3F8EF8C(*(void *)(v125 + 48) + *(void *)(v124 + 72) * v47, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for Replica);
  uint64_t v50 = v123;
  unint64_t v51 = *(void *)(v49 + 56) + *(void *)(v123 + 72) * v47;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
  uint64_t v53 = *(void (**)(char *, unint64_t, uint64_t))(v50 + 16);
  uint64_t v34 = v136;
  v53(&v136[*(int *)(v52 + 48)], v51, v141);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v34, 0, 1, v52);
  uint64_t v44 = v135;
  while (1)
  {
    sub_1C3F961BC((uint64_t)v34, v44, &qword_1EBBC07A0);
    uint64_t v58 = v44;
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 48))(v58, 1, v59) == 1) {
      return swift_release();
    }
    (*v129)(v138, v58 + *(int *)(v59 + 48), v141);
    sub_1C3F8F7B0(v58, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v60 = sub_1C44966E8();
    if (v61) {
      goto LABEL_61;
    }
    uint64_t v62 = v60;
    sub_1C3F8F7B0((uint64_t)v17, v43, (uint64_t (*)(void))type metadata accessor for Replica);
    *(void *)(v43 + *(int *)(v18 + 20)) = v62;
    uint64_t v45 = v48;
    v133(v48, 1, 1, v18);
    uint64_t v63 = (uint64_t)&v4[*(int *)(v128 + 48)];
    sub_1C3F970C4(v140, (uint64_t)v4, &qword_1EBBBC120);
    sub_1C3F970C4(v48, v63, &qword_1EBBBC120);
    uint64_t v64 = *v132;
    if ((*v132)(v4, 1, v18) == 1)
    {
      sub_1C3F962E0(v45, &qword_1EBBBC120);
      uint64_t v65 = &qword_1EBBBC128;
      if (v64((char *)v63, 1, v18) == 1)
      {
        sub_1C3F962E0((uint64_t)v4, &qword_1EBBBC120);
        sub_1C3F8EF8C(v43, v139, type metadata accessor for Timestamp);
LABEL_6:
        sub_1C3F902AC(v139, type metadata accessor for Timestamp);
        (*v126)(v138, v141);
        uint64_t v17 = v127;
        unint64_t v42 = v137;
LABEL_7:
        uint64_t v46 = v140;
        sub_1C3F962E0(v140, &qword_1EBBBC120);
        sub_1C3F8F7B0(v43, v46, type metadata accessor for Timestamp);
        v133(v46, 0, 1, v18);
        uint64_t v44 = v135;
        if (v42) {
          goto LABEL_8;
        }
        goto LABEL_10;
      }
      goto LABEL_41;
    }
    uint64_t v66 = (uint64_t)v4;
    uint64_t v67 = (uint64_t)v10;
    sub_1C3F970C4(v66, (uint64_t)v10, &qword_1EBBBC120);
    uint64_t v65 = &qword_1EBBBC128;
    if (v64((char *)v63, 1, v18) == 1) {
      goto LABEL_40;
    }
    uint64_t v68 = v115;
    sub_1C3F8F7B0(v63, v115, type metadata accessor for Timestamp);
    uint64_t v69 = *(int *)(v121 + 20);
    uint64_t v70 = *(void *)&v10[v69];
    uint64_t v71 = *(void *)(v68 + v69);
    uint64_t v72 = v113;
    sub_1C3F8EF8C((uint64_t)v10, v113, type metadata accessor for Timestamp);
    uint64_t v73 = v114;
    sub_1C3F8EF8C(v68, v114, type metadata accessor for Timestamp);
    if (v70 != v71) {
      goto LABEL_39;
    }
    uint64_t v74 = *(int *)(v118 + 20);
    uint64_t v75 = *(void *)(v72 + v74);
    uint64_t v76 = v72;
    uint64_t v77 = *(void *)(v73 + v74);
    uint64_t v78 = v110;
    sub_1C3F8EF8C(v76, v110, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v79 = v111;
    sub_1C3F8EF8C(v73, v111, (uint64_t (*)(void))type metadata accessor for Replica);
    if (v75 != v77)
    {
      sub_1C3F902AC(v79, (uint64_t (*)(void))type metadata accessor for Replica);
      sub_1C3F902AC(v78, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v72 = v76;
      uint64_t v68 = v115;
LABEL_39:
      sub_1C3F902AC(v73, type metadata accessor for Timestamp);
      sub_1C3F902AC(v72, type metadata accessor for Timestamp);
      sub_1C3F902AC(v68, type metadata accessor for Timestamp);
      uint64_t v65 = &qword_1EBBBC120;
      uint64_t v67 = (uint64_t)v10;
      uint64_t v43 = v116;
      uint64_t v34 = v136;
LABEL_40:
      uint64_t v45 = v120;
      sub_1C3F962E0(v120, &qword_1EBBBC120);
      sub_1C3F902AC(v67, type metadata accessor for Timestamp);
      uint64_t v4 = v119;
      uint64_t v18 = v121;
LABEL_41:
      sub_1C3F962E0((uint64_t)v4, v65);
      sub_1C3F8EF8C(v43, v139, type metadata accessor for Timestamp);
      goto LABEL_42;
    }
    int v109 = sub_1C4496618();
    sub_1C3F902AC(v79, (uint64_t (*)(void))type metadata accessor for Replica);
    sub_1C3F902AC(v78, (uint64_t (*)(void))type metadata accessor for Replica);
    sub_1C3F902AC(v73, type metadata accessor for Timestamp);
    sub_1C3F902AC(v76, type metadata accessor for Timestamp);
    sub_1C3F902AC(v115, type metadata accessor for Timestamp);
    uint64_t v45 = v120;
    sub_1C3F962E0(v120, &qword_1EBBBC120);
    sub_1C3F902AC((uint64_t)v10, type metadata accessor for Timestamp);
    uint64_t v4 = v119;
    sub_1C3F962E0((uint64_t)v119, &qword_1EBBBC120);
    uint64_t v43 = v116;
    sub_1C3F8EF8C(v116, v139, type metadata accessor for Timestamp);
    uint64_t v34 = v136;
    uint64_t v18 = v121;
    if (v109) {
      goto LABEL_6;
    }
LABEL_42:
    uint64_t v80 = v131;
    sub_1C3F970C4(v140, v131, &qword_1EBBBC120);
    if (v64((char *)v80, 1, v18) == 1) {
      goto LABEL_62;
    }
    uint64_t v81 = *(int *)(v18 + 20);
    uint64_t v82 = *(void *)(v80 + v81);
    uint64_t v83 = v139;
    uint64_t v84 = *(void *)(v139 + v81);
    BOOL v85 = v82 < v84;
    uint64_t v17 = v127;
    unint64_t v42 = v137;
    if (v82 == v84
      && (uint64_t v86 = *(int *)(v118 + 20),
          uint64_t v87 = *(void *)(v80 + v86),
          uint64_t v88 = *(void *)(v139 + v86),
          BOOL v85 = v87 < v88,
          v87 == v88))
    {
      unint64_t v144 = sub_1C4496658();
      LOWORD(v145) = v89;
      BYTE2(v145) = v90;
      BYTE3(v145) = v91;
      BYTE4(v145) = v92;
      BYTE5(v145) = v93;
      BYTE6(v145) = v94;
      HIBYTE(v145) = v95;
      unint64_t v142 = sub_1C4496658();
      LOWORD(v143) = v96;
      BYTE2(v143) = v97;
      BYTE3(v143) = v98;
      BYTE4(v143) = v99;
      BYTE5(v143) = v100;
      BYTE6(v143) = v101;
      HIBYTE(v143) = v102;
      unint64_t v103 = bswap64(v144);
      unint64_t v104 = bswap64(v142);
      if (v103 == v104 && (unint64_t v103 = bswap64(v145), v104 = bswap64(v143), v103 == v104))
      {
        uint64_t v83 = v139;
        uint64_t v43 = v116;
        int v105 = 0;
      }
      else
      {
        uint64_t v83 = v139;
        if (v103 < v104) {
          unsigned int v106 = -1;
        }
        else {
          unsigned int v106 = 1;
        }
        uint64_t v43 = v116;
        int v105 = v106 >> 31;
      }
    }
    else
    {
      int v105 = v85;
    }
    sub_1C3F902AC(v83, type metadata accessor for Timestamp);
    (*v126)(v138, v141);
    sub_1C3F902AC(v131, type metadata accessor for Timestamp);
    if (v105) {
      goto LABEL_7;
    }
    sub_1C3F902AC(v43, type metadata accessor for Timestamp);
    uint64_t v44 = v135;
    if (v42) {
      goto LABEL_8;
    }
LABEL_10:
    int64_t v54 = v130 + 1;
    if (__OFADD__(v130, 1))
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
    }
    if (v54 < v117)
    {
      unint64_t v55 = *(void *)(v112 + 8 * v54);
      if (v55) {
        goto LABEL_13;
      }
      int64_t v56 = v130 + 2;
      ++v130;
      if (v54 + 1 < v117)
      {
        unint64_t v55 = *(void *)(v112 + 8 * v56);
        if (v55) {
          goto LABEL_16;
        }
        int64_t v130 = v54 + 1;
        if (v54 + 2 < v117)
        {
          unint64_t v55 = *(void *)(v112 + 8 * (v54 + 2));
          if (v55)
          {
            v54 += 2;
            goto LABEL_13;
          }
          int64_t v56 = v54 + 3;
          int64_t v130 = v54 + 2;
          if (v54 + 3 < v117)
          {
            unint64_t v55 = *(void *)(v112 + 8 * v56);
            if (v55)
            {
LABEL_16:
              int64_t v54 = v56;
LABEL_13:
              uint64_t v137 = (v55 - 1) & v55;
              unint64_t v47 = __clz(__rbit64(v55)) + (v54 << 6);
              int64_t v130 = v54;
              goto LABEL_9;
            }
            while (1)
            {
              int64_t v54 = v56 + 1;
              if (__OFADD__(v56, 1)) {
                goto LABEL_60;
              }
              if (v54 >= v117) {
                break;
              }
              unint64_t v55 = *(void *)(v112 + 8 * v54);
              ++v56;
              if (v55) {
                goto LABEL_13;
              }
            }
            int64_t v130 = v108;
          }
        }
      }
    }
    uint64_t v48 = v45;
    uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v34, 1, 1, v57);
    uint64_t v137 = 0;
  }
}

uint64_t sub_1C4112134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09D0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v69 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Replica();
  uint64_t v57 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v68 = (uint64_t)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1C44967E8();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  char v61 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v67 = (char *)&v52 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v52 - v17;
  unint64_t v19 = *(void *)(a1 + 16);
  uint64_t v62 = a2;
  if (*(void *)(a2 + 16) < v19) {
    return 1;
  }
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v54 = a1 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  uint64_t v63 = v9 + 16;
  uint64_t v64 = v9;
  uint64_t v66 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  uint64_t v58 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  uint64_t v59 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
  uint64_t v60 = (void (**)(char *, uint64_t))(v9 + 8);
  int64_t v55 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v56 = a1;
  int64_t v53 = v55 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v65 = 0;
  uint64_t v25 = &qword_1EBBC0798;
  uint64_t v26 = v60;
  while (1)
  {
    if (v23)
    {
      unint64_t v27 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v28 = v27 | (v65 << 6);
LABEL_7:
      uint64_t v29 = v56;
      sub_1C3F8EF8C(*(void *)(v56 + 48) + *(void *)(v57 + 72) * v28, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v30 = v64;
      unint64_t v31 = *(void *)(v29 + 56) + *(void *)(v64 + 72) * v28;
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(v25);
      (*(void (**)(char *, unint64_t, uint64_t))(v30 + 16))(&v16[*(int *)(v32 + 48)], v31, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v16, 0, 1, v32);
      goto LABEL_26;
    }
    int64_t v33 = v65 + 1;
    if (__OFADD__(v65, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v33 < v55)
    {
      unint64_t v34 = *(void *)(v54 + 8 * v33);
      if (v34) {
        goto LABEL_11;
      }
      int64_t v35 = v65 + 2;
      ++v65;
      if (v33 + 1 < v55)
      {
        unint64_t v34 = *(void *)(v54 + 8 * v35);
        if (v34) {
          goto LABEL_14;
        }
        int64_t v65 = v33 + 1;
        if (v33 + 2 < v55)
        {
          unint64_t v34 = *(void *)(v54 + 8 * (v33 + 2));
          if (v34)
          {
            v33 += 2;
            goto LABEL_11;
          }
          int64_t v35 = v33 + 3;
          int64_t v65 = v33 + 2;
          if (v33 + 3 < v55) {
            break;
          }
        }
      }
    }
LABEL_25:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(v25);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v16, 1, 1, v36);
    unint64_t v23 = 0;
LABEL_26:
    sub_1C3F961BC((uint64_t)v16, (uint64_t)v18, &qword_1EBBC07A0);
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(v25);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v18, 1, v37) == 1)
    {
      swift_release();
      return 0;
    }
    uint64_t v38 = *v66;
    (*v66)(v67, &v18[*(int *)(v37 + 48)], v8);
    sub_1C3F8F7B0((uint64_t)v18, v68, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v39 = v62;
    if (*(void *)(v62 + 16) && (uint64_t v40 = (uint64_t)v69, v41 = sub_1C3F8F160(v68), (v42 & 1) != 0))
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v64 + 16))(v40, *(void *)(v39 + 56) + *(void *)(v64 + 72) * v41, v8);
      uint64_t v43 = 0;
    }
    else
    {
      uint64_t v43 = 1;
    }
    uint64_t v44 = (uint64_t)v69;
    (*v59)((uint64_t)v69, v43, 1, v8);
    sub_1C3F902AC(v68, (uint64_t (*)(void))type metadata accessor for Replica);
    if ((*v58)(v44, 1, v8) == 1)
    {
      (*v60)(v67, v8);
      swift_release();
      sub_1C3F962E0((uint64_t)v69, (uint64_t *)&unk_1EBBC09D0);
      return 1;
    }
    uint64_t v45 = v61;
    v38(v61, v69, v8);
    uint64_t v46 = v16;
    unint64_t v47 = v25;
    uint64_t v48 = v67;
    char v49 = sub_1C4496778();
    uint64_t v50 = *v26;
    (*v26)(v45, v8);
    unint64_t v51 = v48;
    uint64_t v25 = v47;
    uint64_t v16 = v46;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v50)(v51, v8);
    if ((v49 & 1) == 0)
    {
      swift_release();
      return 1;
    }
  }
  unint64_t v34 = *(void *)(v54 + 8 * v35);
  if (v34)
  {
LABEL_14:
    int64_t v33 = v35;
LABEL_11:
    unint64_t v23 = (v34 - 1) & v34;
    unint64_t v28 = __clz(__rbit64(v34)) + (v33 << 6);
    int64_t v65 = v33;
    goto LABEL_7;
  }
  while (1)
  {
    int64_t v33 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v33 >= v55)
    {
      int64_t v65 = v53;
      goto LABEL_25;
    }
    unint64_t v34 = *(void *)(v54 + 8 * v33);
    ++v35;
    if (v34) {
      goto LABEL_11;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1C41127E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09D0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v64 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Replica();
  uint64_t v61 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1C44967E8();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v60 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v74 = (char *)&v54 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  unint64_t v19 = (char *)&v54 - v18;
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v58 = a1 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v72 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v68 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  uint64_t v69 = v10 + 16;
  uint64_t v70 = v10;
  uint64_t v66 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v67 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  uint64_t v24 = a2;
  unint64_t v25 = v22 & v20;
  unint64_t v55 = v23 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v27 = 0;
  int64_t v59 = v23;
  uint64_t v62 = a1;
  uint64_t v56 = a1 + 104;
  unint64_t v57 = v23 - 5;
  uint64_t v71 = v8;
  uint64_t v65 = v24;
  while (1)
  {
    if (v25)
    {
      unint64_t v28 = __clz(__rbit64(v25));
      uint64_t v29 = (v25 - 1) & v25;
      unint64_t v30 = v28 | (v27 << 6);
      goto LABEL_7;
    }
    int64_t v36 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v36 >= v59)
    {
      unint64_t v38 = v27;
    }
    else
    {
      unint64_t v37 = *(void *)(v58 + 8 * v36);
      if (v37) {
        goto LABEL_11;
      }
      unint64_t v38 = v27 + 1;
      if ((uint64_t)(v27 + 2) < v59)
      {
        unint64_t v37 = *(void *)(v58 + 8 * (v27 + 2));
        if (v37)
        {
          int64_t v36 = v27 + 2;
          goto LABEL_11;
        }
        unint64_t v38 = v27 + 2;
        if ((uint64_t)(v27 + 3) < v59)
        {
          unint64_t v37 = *(void *)(v58 + 8 * (v27 + 3));
          if (v37)
          {
            int64_t v36 = v27 + 3;
LABEL_11:
            uint64_t v29 = (v37 - 1) & v37;
            unint64_t v30 = __clz(__rbit64(v37)) + (v36 << 6);
            unint64_t v27 = v36;
LABEL_7:
            uint64_t v31 = v62;
            sub_1C3F8EF8C(*(void *)(v62 + 48) + *(void *)(v61 + 72) * v30, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Replica);
            uint64_t v32 = *(void *)(v31 + 56);
            uint64_t v33 = v70;
            uint64_t v34 = v32 + *(void *)(v70 + 72) * v30;
            uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
            (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(&v17[*(int *)(v35 + 48)], v34, v9);
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v17, 0, 1, v35);
            uint64_t v8 = v71;
            goto LABEL_14;
          }
          int64_t v36 = v27 + 4;
          unint64_t v38 = v27 + 3;
          if ((uint64_t)(v27 + 4) < v59)
          {
            unint64_t v37 = *(void *)(v58 + 8 * v36);
            if (v37) {
              goto LABEL_11;
            }
            while (v57 != v27)
            {
              unint64_t v37 = *(void *)(v56 + 8 * v27++);
              if (v37)
              {
                int64_t v36 = v27 + 4;
                goto LABEL_11;
              }
            }
            unint64_t v38 = v55;
          }
        }
      }
    }
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v17, 1, 1, v39);
    uint64_t v29 = 0;
    unint64_t v27 = v38;
LABEL_14:
    sub_1C3F961BC((uint64_t)v17, (uint64_t)v19, &qword_1EBBC07A0);
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    int v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v19, 1, v40);
    if (v41 == 1) {
      goto LABEL_34;
    }
    char v42 = &v19[*(int *)(v40 + 48)];
    uint64_t v43 = *v72;
    (*v72)(v74, v42, v9);
    sub_1C3F8F7B0((uint64_t)v19, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v44 = *(void *)(v24 + 16);
    unint64_t v73 = v29;
    if (v44 && (unint64_t v45 = sub_1C3F8F160((uint64_t)v8), (v46 & 1) != 0))
    {
      unint64_t v47 = v27;
      uint64_t v48 = (uint64_t)v64;
      (*(void (**)(char *, unint64_t, uint64_t))(v70 + 16))(v64, *(void *)(v24 + 56) + *(void *)(v70 + 72) * v45, v9);
      uint64_t v49 = 0;
    }
    else
    {
      unint64_t v47 = v27;
      uint64_t v49 = 1;
      uint64_t v48 = (uint64_t)v64;
    }
    (*v68)(v48, v49, 1, v9);
    sub_1C3F902AC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Replica);
    if ((*v67)(v48, 1, v9) == 1)
    {
      (*v66)(v74, v9);
      uint64_t result = sub_1C3F962E0(v48, (uint64_t *)&unk_1EBBC09D0);
      uint64_t v24 = v65;
      unint64_t v27 = v47;
      unint64_t v25 = v73;
    }
    else
    {
      uint64_t v50 = v48;
      unint64_t v51 = v74;
      uint64_t v52 = (uint64_t)v60;
      v43(v60, (char *)v50, v9);
      BOOL v63 = sub_1C411B3BC(v52);
      int64_t v53 = *v66;
      (*v66)((char *)v52, v9);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v53)(v51, v9);
      uint64_t v8 = v71;
      uint64_t v24 = v65;
      unint64_t v27 = v47;
      unint64_t v25 = v73;
      if (v63)
      {
LABEL_34:
        swift_release();
        return v41 != 1;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1C4112ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09D0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v72 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Replica();
  uint64_t v69 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v81 = (uint64_t)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1C44967E8();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v71 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v63 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v63 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v63 - v21;
  uint64_t v23 = *(void *)(a1 + 64);
  uint64_t v66 = a1 + 64;
  uint64_t v24 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v83 = v25 & v23;
  unint64_t v26 = (unint64_t)(v24 + 63) >> 6;
  unint64_t v27 = (void (**)(char *, char *, uint64_t))(v9 + 16);
  uint64_t v79 = (void (**)(char *, uint64_t, uint64_t))(v9 + 32);
  uint64_t v74 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  uint64_t v75 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
  uint64_t v77 = v9;
  unint64_t v73 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v28 = (uint64_t)v22;
  unint64_t v63 = v26 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  BOOL v30 = 0;
  int v31 = 0;
  unint64_t v32 = 0;
  int64_t v67 = v26;
  uint64_t v68 = v20;
  unint64_t v33 = v26 - 5;
  uint64_t v34 = v27;
  uint64_t v35 = v8;
  uint64_t v70 = a1;
  uint64_t v64 = a1 + 104;
  unint64_t v65 = v33;
  uint64_t v78 = a2;
LABEL_4:
  int v76 = v31;
  while (1)
  {
    BOOL v82 = v30;
    if (v83)
    {
      unint64_t v38 = __clz(__rbit64(v83));
      v83 &= v83 - 1;
      unint64_t v80 = v32;
      unint64_t v39 = v38 | (v32 << 6);
      goto LABEL_9;
    }
    int64_t v45 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v45 >= v67)
    {
      unint64_t v47 = v32;
    }
    else
    {
      unint64_t v46 = *(void *)(v66 + 8 * v45);
      if (v46) {
        goto LABEL_13;
      }
      unint64_t v47 = v32 + 1;
      if ((uint64_t)(v32 + 2) < v67)
      {
        unint64_t v46 = *(void *)(v66 + 8 * (v32 + 2));
        if (v46)
        {
          int64_t v45 = v32 + 2;
          goto LABEL_13;
        }
        unint64_t v47 = v32 + 2;
        if ((uint64_t)(v32 + 3) < v67)
        {
          unint64_t v46 = *(void *)(v66 + 8 * (v32 + 3));
          if (v46)
          {
            int64_t v45 = v32 + 3;
LABEL_13:
            unint64_t v83 = (v46 - 1) & v46;
            unint64_t v39 = __clz(__rbit64(v46)) + (v45 << 6);
            unint64_t v80 = v45;
LABEL_9:
            uint64_t v40 = v70;
            sub_1C3F8EF8C(*(void *)(v70 + 48) + *(void *)(v69 + 72) * v39, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for Replica);
            uint64_t v41 = *(void *)(v40 + 56);
            uint64_t v42 = v77;
            uint64_t v43 = v41 + *(void *)(v77 + 72) * v39;
            uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
            (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(&v20[*(int *)(v44 + 48)], v43, v35);
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v20, 0, 1, v44);
            a2 = v78;
            goto LABEL_16;
          }
          int64_t v45 = v32 + 4;
          unint64_t v47 = v32 + 3;
          if ((uint64_t)(v32 + 4) < v67)
          {
            unint64_t v46 = *(void *)(v66 + 8 * v45);
            if (v46) {
              goto LABEL_13;
            }
            while (v65 != v32)
            {
              unint64_t v46 = *(void *)(v64 + 8 * v32++);
              if (v46)
              {
                int64_t v45 = v32 + 4;
                goto LABEL_13;
              }
            }
            unint64_t v47 = v63;
          }
        }
      }
    }
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v20, 1, 1, v48);
    unint64_t v83 = 0;
    unint64_t v80 = v47;
LABEL_16:
    sub_1C3F961BC((uint64_t)v20, v28, &qword_1EBBC07A0);
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 48))(v28, 1, v49) == 1)
    {
      swift_release();
      if (v82)
      {
        char v61 = v76;
        goto LABEL_47;
      }
      int v62 = 0;
      char v61 = v76;
      return v62 | v61 & 1u;
    }
    uint64_t v50 = *v79;
    (*v79)(v16, v28 + *(int *)(v49 + 48), v35);
    uint64_t v51 = v81;
    sub_1C3F8F7B0(v28, v81, (uint64_t (*)(void))type metadata accessor for Replica);
    if (*(void *)(a2 + 16) && (unint64_t v52 = sub_1C3F8F160(v51), (v53 & 1) != 0))
    {
      uint64_t v54 = (uint64_t)v72;
      (*(void (**)(char *, unint64_t, uint64_t))(v77 + 16))(v72, *(void *)(a2 + 56) + *(void *)(v77 + 72) * v52, v35);
      uint64_t v55 = 0;
    }
    else
    {
      uint64_t v55 = 1;
      uint64_t v54 = (uint64_t)v72;
    }
    (*v75)(v54, v55, 1, v35);
    sub_1C3F902AC(v81, (uint64_t (*)(void))type metadata accessor for Replica);
    if ((*v74)(v54, 1, v35) == 1)
    {
      (*v73)(v16, v35);
      uint64_t result = sub_1C3F962E0(v54, (uint64_t *)&unk_1EBBC09D0);
      BOOL v30 = 0;
      int v31 = 1;
      unint64_t v32 = v80;
      if (!v82) {
        goto LABEL_4;
      }
LABEL_44:
      swift_release();
      char v61 = 1;
LABEL_47:
      int v62 = 256;
      return v62 | v61 & 1u;
    }
    v50(v14, v54, v35);
    uint64_t v56 = sub_1C410B81C((uint64_t)v16);
    unint64_t v57 = v71;
    (*v34)(v71, v16, v35);
    if (v76)
    {
      int64_t v36 = v57;
      unint64_t v37 = *v73;
      (*v73)(v36, v35);
      v37(v14, v35);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v37)(v16, v35);
    }
    else
    {
      uint64_t v58 = sub_1C44966F8();
      int64_t v59 = *v73;
      (*v73)(v57, v35);
      v59(v14, v35);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v59)(v16, v35);
      a2 = v78;
      BOOL v60 = v56 < v58;
      uint64_t v20 = v68;
      if (v60)
      {
        BOOL v30 = 0;
        int v31 = 1;
        unint64_t v32 = v80;
        if (v82 || v56 > 0) {
          goto LABEL_44;
        }
        goto LABEL_4;
      }
    }
    BOOL v30 = 1;
    unint64_t v32 = v80;
    if (!v82)
    {
      BOOL v30 = v56 > 0;
      int v31 = (v56 < 1) & v76;
      if (v56 >= 1 && ((v76 ^ 1) & 1) == 0) {
        goto LABEL_44;
      }
      goto LABEL_4;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1C41136F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v86 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09D0);
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v80 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Replica();
  uint64_t v74 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1C44967E8();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v72 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v70 = (char *)&v67 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  BOOL v85 = (char *)&v67 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v67 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v67 - v23;
  uint64_t v25 = *(void *)(a1 + 64);
  uint64_t v68 = a1 + 64;
  uint64_t v26 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & v25;
  uint64_t v84 = (void (**)(char *, char *, uint64_t))(v11 + 16);
  uint64_t v29 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  uint64_t v78 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  uint64_t v79 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v82 = v11;
  uint64_t v87 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v30 = v22;
  int64_t v73 = (unint64_t)(v26 + 63) >> 6;
  int64_t v67 = v73 - 1;
  uint64_t v75 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v81 = 0;
  int64_t v83 = 0;
  int v76 = v24;
  uint64_t v77 = a3;
  uint64_t v88 = v9;
  uint64_t v89 = v30;
  uint64_t v71 = v19;
  uint64_t v69 = v29;
  while (1)
  {
    if (v28)
    {
      unint64_t v35 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      unint64_t v36 = v35 | (v83 << 6);
LABEL_8:
      uint64_t v37 = v75;
      sub_1C3F8EF8C(*(void *)(v75 + 48) + *(void *)(v74 + 72) * v36, v30, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v38 = v82;
      unint64_t v39 = *(void *)(v37 + 56) + *(void *)(v82 + 72) * v36;
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
      uint64_t v41 = *(void (**)(uint64_t, unint64_t, uint64_t))(v38 + 16);
      uint64_t v30 = v89;
      v41(v89 + *(int *)(v40 + 48), v39, v10);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v30, 0, 1, v40);
      uint64_t v9 = v88;
      goto LABEL_27;
    }
    int64_t v42 = v83 + 1;
    if (__OFADD__(v83, 1)) {
      goto LABEL_48;
    }
    if (v42 < v73)
    {
      unint64_t v43 = *(void *)(v68 + 8 * v42);
      if (v43) {
        goto LABEL_12;
      }
      int64_t v44 = v83 + 2;
      ++v83;
      if (v42 + 1 < v73)
      {
        unint64_t v43 = *(void *)(v68 + 8 * v44);
        if (v43) {
          goto LABEL_15;
        }
        int64_t v83 = v42 + 1;
        if (v42 + 2 < v73)
        {
          unint64_t v43 = *(void *)(v68 + 8 * (v42 + 2));
          if (v43)
          {
            v42 += 2;
LABEL_12:
            unint64_t v28 = (v43 - 1) & v43;
            unint64_t v36 = __clz(__rbit64(v43)) + (v42 << 6);
            int64_t v83 = v42;
            goto LABEL_8;
          }
          int64_t v44 = v42 + 3;
          int64_t v83 = v42 + 2;
          if (v42 + 3 < v73)
          {
            unint64_t v43 = *(void *)(v68 + 8 * v44);
            if (!v43)
            {
              while (1)
              {
                int64_t v42 = v44 + 1;
                if (__OFADD__(v44, 1)) {
                  goto LABEL_49;
                }
                if (v42 >= v73)
                {
                  int64_t v83 = v67;
                  goto LABEL_26;
                }
                unint64_t v43 = *(void *)(v68 + 8 * v42);
                ++v44;
                if (v43) {
                  goto LABEL_12;
                }
              }
            }
LABEL_15:
            int64_t v42 = v44;
            goto LABEL_12;
          }
        }
      }
    }
LABEL_26:
    uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v30, 1, 1, v45);
    unint64_t v28 = 0;
LABEL_27:
    sub_1C3F961BC(v30, (uint64_t)v24, &qword_1EBBC07A0);
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v24, 1, v46) == 1) {
      break;
    }
    unint64_t v47 = &v24[*(int *)(v46 + 48)];
    uint64_t v48 = *v29;
    (*v29)(v19, v47, v10);
    sub_1C3F8F7B0((uint64_t)v24, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Replica);
    if (*(void *)(a3 + 16) && (unint64_t v49 = sub_1C3F8F160((uint64_t)v9), (v50 & 1) != 0))
    {
      unint64_t v51 = *(void *)(a3 + 56) + *(void *)(v82 + 72) * v49;
      uint64_t v52 = (uint64_t)v80;
      (*(void (**)(char *, unint64_t, uint64_t))(v82 + 16))(v80, v51, v10);
      uint64_t v53 = 0;
    }
    else
    {
      uint64_t v53 = 1;
      uint64_t v52 = (uint64_t)v80;
    }
    (*v79)(v52, v53, 1, v10);
    sub_1C3F902AC((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Replica);
    int v54 = (*v78)(v52, 1, v10);
    uint64_t v55 = v87;
    if (v54 == 1)
    {
      sub_1C3F962E0(v52, (uint64_t *)&unk_1EBBC09D0);
      uint64_t v32 = *v86 | 1;
      *uint64_t v86 = v32;
      unint64_t v33 = *v55;
      uint64_t v34 = v19;
      goto LABEL_5;
    }
    v48(v85, (char *)v52, v10);
    uint64_t v34 = v19;
    if (sub_1C4496778())
    {
      uint64_t v56 = sub_1C44966F8();
      uint64_t v57 = 2 * (v56 != sub_1C44966F8());
      unint64_t v33 = *v87;
    }
    else
    {
      uint64_t v58 = sub_1C44966F8();
      int64_t v59 = v85;
      uint64_t v60 = sub_1C44966F8();
      char v61 = *v84;
      int v62 = v70;
      (*v84)(v70, v19, v10);
      unint64_t v63 = v59;
      uint64_t v64 = v72;
      v61(v72, v63, v10);
      if (v60 >= v58)
      {
        unint64_t v33 = *v87;
        (*v87)(v64, v10);
        v33(v62, v10);
        uint64_t v30 = v89;
        uint64_t v29 = v69;
LABEL_40:
        uint64_t v57 = 3;
        uint64_t v34 = v71;
        goto LABEL_41;
      }
      char v65 = sub_1C4496778();
      unint64_t v33 = *v87;
      (*v87)(v64, v10);
      v33(v62, v10);
      if ((v65 & 1) == 0)
      {
        uint64_t v30 = v89;
        uint64_t v29 = v69;
        goto LABEL_40;
      }
      uint64_t v57 = 1;
      uint64_t v34 = v71;
      uint64_t v30 = v89;
      uint64_t v29 = v69;
    }
LABEL_41:
    uint64_t v66 = v85;
    *v86 |= v57;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v66, v10);
    if (__OFADD__(v81, 1))
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      return result;
    }
    ++v81;
    uint64_t v32 = *v86;
LABEL_5:
    uint64_t v19 = v34;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v34, v10);
    uint64_t v24 = v76;
    a3 = v77;
    uint64_t v9 = v88;
    if (v32 == 3) {
      return swift_release();
    }
  }
  uint64_t result = swift_release();
  if (v81 != *(void *)(a3 + 16)) {
    *v86 |= 2uLL;
  }
  return result;
}

uint64_t sub_1C4113F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C44967E8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v60 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v52 - v8;
  uint64_t v10 = type metadata accessor for Replica();
  uint64_t v59 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10 - 8);
  char v61 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v13);
  unint64_t v63 = (char *)&v52 - v17;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v62 = 0;
  uint64_t v55 = a1;
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v19 = a1 + 64;
  uint64_t v18 = v20;
  uint64_t v21 = 1 << *(unsigned char *)(v19 - 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v18;
  uint64_t v65 = v5 + 16;
  uint64_t v56 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v57 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v58 = a2;
  uint64_t v53 = v19;
  int64_t v54 = (unint64_t)(v21 + 63) >> 6;
  int64_t v52 = v54 - 1;
  uint64_t v24 = &qword_1EBBC0798;
  uint64_t v25 = (uint64_t)v61;
  while (1)
  {
    if (v23)
    {
      unint64_t v26 = __clz(__rbit64(v23));
      uint64_t v27 = (v23 - 1) & v23;
      unint64_t v28 = v26 | (v62 << 6);
LABEL_8:
      uint64_t v29 = v55;
      sub_1C3F8EF8C(*(void *)(v55 + 48) + *(void *)(v59 + 72) * v28, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Replica);
      unint64_t v30 = *(void *)(v29 + 56) + *(void *)(v5 + 72) * v28;
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(v24);
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(&v15[*(int *)(v31 + 48)], v30, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v15, 0, 1, v31);
      uint64_t v32 = (uint64_t)v63;
      goto LABEL_27;
    }
    int64_t v33 = v62 + 1;
    if (__OFADD__(v62, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    uint64_t v32 = (uint64_t)v63;
    if (v33 < v54)
    {
      unint64_t v34 = *(void *)(v53 + 8 * v33);
      if (v34) {
        goto LABEL_12;
      }
      int64_t v35 = v62 + 2;
      ++v62;
      if (v33 + 1 < v54)
      {
        unint64_t v34 = *(void *)(v53 + 8 * v35);
        if (v34) {
          goto LABEL_15;
        }
        int64_t v62 = v33 + 1;
        if (v33 + 2 < v54)
        {
          unint64_t v34 = *(void *)(v53 + 8 * (v33 + 2));
          if (v34)
          {
            v33 += 2;
            goto LABEL_12;
          }
          int64_t v35 = v33 + 3;
          int64_t v62 = v33 + 2;
          if (v33 + 3 < v54) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(v24);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v15, 1, 1, v36);
    uint64_t v27 = 0;
LABEL_27:
    sub_1C3F961BC((uint64_t)v15, v32, &qword_1EBBC07A0);
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(v24);
    int v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v32, 1, v37);
    BOOL v64 = v38 == 1;
    if (v38 == 1) {
      return v64;
    }
    unint64_t v39 = v27;
    uint64_t v40 = v24;
    uint64_t v41 = v15;
    uint64_t v42 = v32 + *(int *)(v37 + 48);
    sub_1C3F8F7B0(v32, v25, (uint64_t (*)(void))type metadata accessor for Replica);
    (*v56)(v9, v42, v4);
    uint64_t v43 = v58;
    int64_t v44 = v9;
    unint64_t v45 = sub_1C3F8F160(v25);
    char v47 = v46;
    sub_1C3F902AC(v25, (uint64_t (*)(void))type metadata accessor for Replica);
    if ((v47 & 1) == 0)
    {
      (*v57)(v44, v4);
      return 0;
    }
    unint64_t v48 = *(void *)(v43 + 56) + *(void *)(v5 + 72) * v45;
    unint64_t v49 = v60;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v60, v48, v4);
    sub_1C3FA0E84(&qword_1EBBBBCD8, MEMORY[0x1E4F27D00]);
    char v50 = sub_1C4497178();
    unint64_t v51 = *(void (**)(char *, uint64_t))(v5 + 8);
    v51(v49, v4);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v51)(v44, v4);
    uint64_t v9 = v44;
    uint64_t v15 = v41;
    uint64_t v24 = v40;
    unint64_t v23 = v39;
    if ((v50 & 1) == 0) {
      return v64;
    }
  }
  unint64_t v34 = *(void *)(v53 + 8 * v35);
  if (v34)
  {
LABEL_15:
    int64_t v33 = v35;
LABEL_12:
    uint64_t v27 = (v34 - 1) & v34;
    unint64_t v28 = __clz(__rbit64(v34)) + (v33 << 6);
    int64_t v62 = v33;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v33 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v33 >= v54)
    {
      int64_t v62 = v52;
      goto LABEL_26;
    }
    unint64_t v34 = *(void *)(v53 + 8 * v33);
    ++v35;
    if (v34) {
      goto LABEL_12;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1C41145B4(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = 8 * v11;
    uint64_t v16 = *(void *)(*(void *)(v3 + 56) + v15);
    unint64_t v17 = sub_1C40619F4(*(void *)(*(void *)(v3 + 48) + v15));
    if (v18)
    {
      uint64_t v19 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(a2 + 56) + 8 * v17) + 96);
      swift_retain();
      swift_retain();
      LOBYTE(v19) = v19(v16);
      swift_release();
      uint64_t result = swift_release();
      if (v19) {
        continue;
      }
    }
    return 0;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1C4114778(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1C44967A8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09D0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v60 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78);
  MEMORY[0x1F4188790](v59);
  unint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Replica();
  uint64_t v62 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v65 = (uint64_t)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_bridgeObjectRetain();
  *(void *)&long long v73 = sub_1C411DC8C(v14);
  sub_1C41187C8((void **)&v73);
  uint64_t v58 = 0;
  uint64_t v61 = a2;
  swift_bridgeObjectRelease();
  uint64_t v15 = v73;
  uint64_t v57 = *(void *)(v73 + 16);
  if (v57)
  {
    unint64_t v16 = 0;
    uint64_t v56 = v73 + ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80));
    uint64_t v70 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v68 = (void (**)(char *, char *, uint64_t))(v5 + 16);
    long long v67 = xmmword_1C449B490;
    uint64_t v66 = v7;
    uint64_t v55 = v73;
    uint64_t v64 = a1;
    while (1)
    {
      if (v16 >= *(void *)(v15 + 16)) {
        goto LABEL_37;
      }
      unint64_t v17 = v16 + 1;
      sub_1C3F8EF8C(v56 + *(void *)(v62 + 72) * v16, v65, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v18 = sub_1C3F5DF48();
      uint64_t v20 = v18;
      unint64_t v21 = v19;
      unint64_t v63 = v17;
      switch(v19 >> 62)
      {
        case 1uLL:
          if (v18 >> 32 < (int)v18) {
            goto LABEL_40;
          }
          sub_1C3F7E324(v18, v19);
          uint64_t v25 = v58;
          sub_1C43D28AC((int)v20, v20 >> 32);
          uint64_t v58 = v25;
          break;
        case 2uLL:
          uint64_t v22 = *(void *)(v18 + 16);
          uint64_t v23 = *(void *)(v18 + 24);
          sub_1C3F7E324(v18, v19);
          swift_retain();
          swift_retain();
          uint64_t v24 = v58;
          sub_1C43D28AC(v22, v23);
          uint64_t v58 = v24;
          swift_release();
          swift_release();
          break;
        case 3uLL:
          sub_1C4496E98();
          sub_1C3FA0E84(&qword_1EA39CB80, MEMORY[0x1E4F25170]);
          *(void *)&long long v73 = 0;
          *(void *)((char *)&v73 + 6) = 0;
          goto LABEL_9;
        default:
          *(void *)&long long v73 = v18;
          WORD4(v73) = v19;
          BYTE10(v73) = BYTE2(v19);
          BYTE11(v73) = BYTE3(v19);
          BYTE12(v73) = BYTE4(v19);
          BYTE13(v73) = BYTE5(v19);
          sub_1C4496E98();
          sub_1C3FA0E84(&qword_1EA39CB80, MEMORY[0x1E4F25170]);
LABEL_9:
          sub_1C4496E18();
          break;
      }
      sub_1C3F7E2CC(v20, v21);
      sub_1C3F7E2CC(v20, v21);
      uint64_t v26 = v61;
      if (!*(void *)(v61 + 16) || (unint64_t v27 = sub_1C3F8F160(v65), (v28 & 1) == 0))
      {
LABEL_41:
        uint64_t v54 = sub_1C44967E8();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v60, 1, 1, v54);
LABEL_42:
        __break(1u);
      }
      unint64_t v29 = v27;
      uint64_t v30 = *(void *)(v26 + 56);
      uint64_t v31 = sub_1C44967E8();
      uint64_t v32 = *(void *)(v31 - 8);
      int64_t v33 = v60;
      (*(void (**)(char *, unint64_t, uint64_t))(v32 + 16))(v60, v30 + *(void *)(v32 + 72) * v29, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v33, 0, 1, v31);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v33, 1, v31) == 1) {
        goto LABEL_42;
      }
      unint64_t v34 = v66;
      sub_1C44967C8();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v31);
      sub_1C4496798();
      uint64_t v69 = *v70;
      v69(v34, v4);
      int64_t v35 = &v11[*(int *)(v59 + 36)];
      sub_1C3FA0E84((unint64_t *)&qword_1EBBBEE28, MEMORY[0x1E4F27CE0]);
      while (1)
      {
        uint64_t v36 = *(void *)v35;
        sub_1C4497818();
        if (v36 == (void)v73) {
          break;
        }
        uint64_t v37 = (void (*)(long long *, void))sub_1C44978C8();
        uint64_t v39 = *v38;
        uint64_t v40 = v38[1];
        v37(&v73, 0);
        (*v68)(v34, v11, v4);
        sub_1C4497828();
        v69(v34, v4);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BFA8);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v67;
        *(void *)(inited + 32) = v39;
        *(void *)(inited + 40) = v40;
        uint64_t v74 = MEMORY[0x1E4FBB2B8];
        uint64_t v75 = MEMORY[0x1E4F27EF0];
        *(void *)&long long v73 = inited + 32;
        *((void *)&v73 + 1) = inited + 48;
        uint64_t v42 = (const void **)__swift_project_boxed_opaque_existential_1(&v73, MEMORY[0x1E4FBB2B8]);
        uint64_t v43 = *v42;
        if (!*v42 || (v44 = v42[1], uint64_t v45 = v44 - v43, v44 == v43))
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
          swift_setDeallocating();
          sub_1C4496E98();
          sub_1C3FA0E84(&qword_1EA39CB80, MEMORY[0x1E4F25170]);
          *(void *)&long long v73 = 0;
          *(void *)((char *)&v73 + 6) = 0;
          goto LABEL_17;
        }
        if (v45 < 15)
        {
          memset(__dst, 0, sizeof(__dst));
          char v72 = (_BYTE)v44 - (_BYTE)v43;
          memcpy(__dst, v43, v44 - v43);
          __int16 v47 = *(_WORD *)&__dst[12];
          uint64_t v48 = *(void *)__dst;
          int v49 = *(_DWORD *)&__dst[8];
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
          swift_setDeallocating();
          *(void *)&long long v73 = v48;
          DWORD2(v73) = v49;
          WORD6(v73) = v47;
          sub_1C4496E98();
          sub_1C3FA0E84(&qword_1EA39CB80, MEMORY[0x1E4F25170]);
LABEL_17:
          sub_1C4496E18();
        }
        else
        {
          sub_1C44962E8();
          swift_allocObject();
          uint64_t v46 = sub_1C4496288();
          if ((unint64_t)v45 >= 0x7FFFFFFF)
          {
            sub_1C44964E8();
            uint64_t v50 = swift_initStackObject();
            *(void *)(v50 + 16) = 0;
            *(void *)(v50 + 24) = v45;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
            swift_bridgeObjectRelease();
            uint64_t v52 = *(void *)(v50 + 16);
            uint64_t v51 = *(void *)(v50 + 24);
            swift_retain();
            if (sub_1C4496298() && __OFSUB__(v52, sub_1C44962C8())) {
              goto LABEL_39;
            }
            if (__OFSUB__(v51, v52))
            {
              __break(1u);
LABEL_37:
              __break(1u);
LABEL_38:
              __break(1u);
LABEL_39:
              __break(1u);
LABEL_40:
              __break(1u);
              goto LABEL_41;
            }
            sub_1C44962B8();
            sub_1C4496E98();
            sub_1C3FA0E84(&qword_1EA39CB80, MEMORY[0x1E4F25170]);
            sub_1C4496E18();
            swift_release();
            swift_setDeallocating();
            sub_1C44964F8();
            swift_release();
          }
          else
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
            swift_setDeallocating();
            sub_1C3F7E324(v45 << 32, v46 | 0x4000000000000000);
            if (sub_1C4496298() && __OFSUB__(0, sub_1C44962C8())) {
              goto LABEL_38;
            }
            sub_1C44962B8();
            sub_1C4496E98();
            sub_1C3FA0E84(&qword_1EA39CB80, MEMORY[0x1E4F25170]);
            sub_1C4496E18();
            swift_release_n();
          }
          unint64_t v34 = v66;
        }
      }
      sub_1C3F962E0((uint64_t)v11, &qword_1EBBBCA78);
      sub_1C3F902AC(v65, (uint64_t (*)(void))type metadata accessor for Replica);
      unint64_t v16 = v63;
      uint64_t v15 = v55;
      if (v63 == v57) {
        return swift_release();
      }
    }
  }
  return swift_release();
}

uint64_t sub_1C41153B0()
{
  uint64_t v1 = *v0;
  sub_1C44985F8();
  sub_1C411AAA4(v3, v1);
  return sub_1C4498628();
}

uint64_t sub_1C41153F8(long long *a1)
{
  return sub_1C411AAA4(a1, *v1);
}

uint64_t sub_1C4115400()
{
  uint64_t v1 = *v0;
  sub_1C44985F8();
  sub_1C411AAA4(v3, v1);
  return sub_1C4498628();
}

uint64_t sub_1C4115444(uint64_t *a1, uint64_t *a2)
{
  return sub_1C4113F94(*a1, *a2);
}

uint64_t CRVersion.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Replica();
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  uint64_t v10 = sub_1C4496678();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, a1, v10);
  *(void *)&v8[*(int *)(v6 + 28)] = 0;
  if (*(void *)(v9 + 16) && (unint64_t v11 = sub_1C3F8F160((uint64_t)v8), (v12 & 1) != 0))
  {
    unint64_t v13 = v11;
    uint64_t v14 = *(void *)(v9 + 56);
    uint64_t v15 = sub_1C44967E8();
    uint64_t v16 = *(void *)(v15 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v16 + 16))(a2, v14 + *(void *)(v16 + 72) * v13, v15);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(a2, 0, 1, v15);
  }
  else
  {
    uint64_t v17 = sub_1C44967E8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a2, 1, 1, v17);
  }
  return sub_1C3F902AC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Replica);
}

uint64_t sub_1C4115634(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t v42 = a1;
  uint64_t v43 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09D0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Replica();
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  unint64_t v13 = (char *)&v39 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v39 - v14;
  uint64_t v16 = sub_1C4496678();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = v17;
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  v20(v19, v43, v16);
  uint64_t v41 = v16;
  v20(v15, v19, v16);
  uint64_t v39 = v7;
  *(void *)&v15[*(int *)(v7 + 20)] = 0;
  sub_1C3F8EF8C((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Replica);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = v13;
  sub_1C3F8EF8C((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Replica);
  uint64_t v44 = *a2;
  uint64_t v22 = v44;
  *a2 = 0x8000000000000000;
  unint64_t v24 = sub_1C3F8F160((uint64_t)v10);
  uint64_t v25 = *(void *)(v22 + 16);
  BOOL v26 = (v23 & 1) == 0;
  uint64_t v27 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
    __break(1u);
    goto LABEL_10;
  }
  LOBYTE(v20) = v23;
  if (*(void *)(v22 + 24) >= v27)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v23) {
        goto LABEL_8;
      }
LABEL_11:
      uint64_t v34 = sub_1C44967E8();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v6, 1, 1, v34);
      goto LABEL_12;
    }
LABEL_10:
    sub_1C3FA50F8();
    if (v20) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
  sub_1C3F9188C(v27, isUniquelyReferenced_nonNull_native);
  unint64_t v28 = sub_1C3F8F160((uint64_t)v10);
  if ((v20 & 1) == (v29 & 1))
  {
    unint64_t v24 = v28;
    if ((v20 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_8:
    uint64_t v30 = *(void *)(v44 + 56);
    uint64_t v31 = sub_1C44967E8();
    uint64_t v32 = a2;
    uint64_t v33 = *(void *)(v31 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v33 + 32))(v6, v30 + *(void *)(v33 + 72) * v24, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v6, 0, 1, v31);
    a2 = v32;
LABEL_12:
    uint64_t v35 = (uint64_t)v43;
    uint64_t v37 = v40;
    uint64_t v36 = v41;
    sub_1C4118760(v42, (uint64_t)v6);
    sub_1C406C4BC((uint64_t)v6, v20 & 1, &v44, v24, (uint64_t)v10);
    sub_1C3F962E0((uint64_t)v6, (uint64_t *)&unk_1EBBC09D0);
    sub_1C3F902AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Replica);
    *a2 = v44;
    sub_1C3F902AC(v35, (uint64_t (*)(void))type metadata accessor for Replica);
    sub_1C3F902AC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Replica);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v19, v36);
  }
  uint64_t result = sub_1C4498558();
  __break(1u);
  return result;
}

void (*CRVersion.subscript.modify(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  uint64_t v5 = (int *)(type metadata accessor for Replica() - 8);
  uint64_t v6 = (char *)malloc(*(void *)(*(void *)v5 + 64));
  v4[4] = v6;
  uint64_t v7 = sub_1C4496678();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v6, a2, v7);
  *(void *)&v6[v5[7]] = 0;
  v4[5] = sub_1C40501E4(v4, (uint64_t)v6);
  return sub_1C4115B50;
}

void sub_1C4115B50(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 32);
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  sub_1C3F902AC((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for Replica);
  free(v2);
  free(v1);
}

uint64_t CRVersion.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v47 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09D0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v44 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Replica();
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  unint64_t v13 = (char *)&v44 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v44 - v14;
  uint64_t v16 = sub_1C4496678();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = v17;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v50 = a2;
  v20(v19, a2, v16);
  uint64_t v46 = v19;
  unint64_t v21 = v19;
  uint64_t v22 = v16;
  uint64_t v23 = (uint64_t)v15;
  v20(v15, (uint64_t)v21, v22);
  *(void *)&v15[*(int *)(v7 + 20)] = 0;
  sub_1C3F8EF8C((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Replica);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v48 = v13;
  sub_1C3F8EF8C((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Replica);
  uint64_t v25 = *v2;
  uint64_t v51 = v25;
  int v49 = v3;
  void *v3 = 0x8000000000000000;
  unint64_t v27 = sub_1C3F8F160((uint64_t)v10);
  uint64_t v28 = *(void *)(v25 + 16);
  BOOL v29 = (v26 & 1) == 0;
  uint64_t v30 = v28 + v29;
  if (__OFADD__(v28, v29))
  {
    __break(1u);
    goto LABEL_10;
  }
  LOBYTE(v3) = v26;
  if (*(void *)(v25 + 24) >= v30)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v26) {
        goto LABEL_8;
      }
LABEL_11:
      uint64_t v39 = sub_1C44967E8();
      uint64_t v38 = (uint64_t)v44;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v44, 1, 1, v39);
      goto LABEL_12;
    }
LABEL_10:
    sub_1C3FA50F8();
    if (v3) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
  sub_1C3F9188C(v30, isUniquelyReferenced_nonNull_native);
  unint64_t v31 = sub_1C3F8F160((uint64_t)v10);
  if ((v3 & 1) == (v32 & 1))
  {
    unint64_t v27 = v31;
    if ((v3 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_8:
    uint64_t v33 = *(void *)(v51 + 56);
    uint64_t v34 = sub_1C44967E8();
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t v36 = v35;
    uint64_t v37 = v33 + *(void *)(v35 + 72) * v27;
    uint64_t v38 = (uint64_t)v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v44, v37, v34);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v38, 0, 1, v34);
LABEL_12:
    uint64_t v40 = v47;
    sub_1C4118760(v47, v38);
    sub_1C406C4BC(v38, v3 & 1, &v51, v27, (uint64_t)v10);
    sub_1C3F962E0(v38, (uint64_t *)&unk_1EBBC09D0);
    sub_1C3F902AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v41 = (uint64_t)v48;
    *int v49 = v51;
    sub_1C3F902AC(v41, (uint64_t (*)(void))type metadata accessor for Replica);
    sub_1C3F902AC(v23, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v42(v50, v22);
    sub_1C3F962E0(v40, (uint64_t *)&unk_1EBBC09D0);
    return ((uint64_t (*)(char *, uint64_t))v42)(v46, v22);
  }
  uint64_t result = sub_1C4498558();
  __break(1u);
  return result;
}

Swift::Bool __swiftcall CRVersion.needToFinalizeTimestamps()()
{
  return *(void *)(*(void *)(v0 + 8) + 16) != 0;
}

uint64_t CRVersion.finalizeTimestamps(_:)(uint64_t result)
{
  if (*(void *)(*(void *)(v1 + 8) + 16))
  {
    uint64_t v2 = qword_1EBBC10F0;
    swift_bridgeObjectRetain();
    uint64_t v3 = swift_bridgeObjectRetain();
    if (v2 != -1) {
      uint64_t v3 = swift_once();
    }
    MEMORY[0x1F4188790](v3);
    swift_retain();
    sub_1C4497A58();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = swift_release();
    sub_1C3F8D910(v4, 0, v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t CRVersion.finalized(_:)@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1[1];
  uint64_t v4 = *(void *)(v3 + 16);
  *a1 = *v1;
  a1[1] = v3;
  if (v4)
  {
    uint64_t v5 = qword_1EBBC10F0;
    swift_bridgeObjectRetain();
    uint64_t v6 = swift_bridgeObjectRetain();
    if (v5 != -1) {
      uint64_t v6 = swift_once();
    }
    MEMORY[0x1F4188790](v6);
    swift_retain();
    sub_1C4497A58();
    uint64_t v7 = swift_release();
    sub_1C3F8D910(v7, 0, v9);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
}

uint64_t CRVersion.__hasDelta(from:)()
{
  return 0;
}

uint64_t static CRVersion.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if ((sub_1C4113F94(a1[1], a2[1]) & 1) == 0) {
    return 0;
  }
  return sub_1C4113F94(v2, v3);
}

uint64_t CRVersion.description.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39AD68);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C449B4A0;
  *(void *)(v0 + 32) = sub_1C3F674E0();
  *(void *)(v0 + 40) = sub_1C3F674E0();
  __swift_instantiateConcreteTypeFromMangledName(qword_1EA39AD98);
  sub_1C3F69264();
  sub_1C44970B8();
  swift_bridgeObjectRelease();
  sub_1C4497268();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1C4497268();
  swift_bridgeObjectRelease();
  return 91;
}

uint64_t CRVersion.init(from:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_bridgeObjectRelease_n();
  uint64_t v8 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v8, (uint64_t)v7, &qword_1EBBC0540);
  uint64_t v9 = type metadata accessor for Proto_Value(0);
  LODWORD(v8) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9);
  sub_1C3F962E0((uint64_t)v7, &qword_1EBBC0540);
  if (v8 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v10 = 0xD000000000000017;
    *(void *)(v10 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v10 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(void *)(swift_initStackObject() + 16) = a1;
    sub_1C4002D6C(&v13);
    uint64_t result = swift_release();
    if (!v2) {
      *a2 = v13;
    }
  }
  return result;
}

uint64_t CRVersion.encode(to:)()
{
  uint64_t v2 = type metadata accessor for Proto_Version(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (void *)((char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7[0] = *v0;
  uint64_t result = sub_1C3F6DD10();
  if (!v1)
  {
    v7[1] = v7[0];
    uint64_t v6 = *(void *)(result + 16);
    swift_retain();
    sub_1C3F9FF10(v6, v4);
    swift_beginAccess();
    sub_1C43EF158((uint64_t)v4);
    return swift_release();
  }
  return result;
}

void CRVersion.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t CRVersion.hash(into:)(long long *a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain();
  sub_1C411AAA4(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1C411AAA4(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t CRVersion.hashValue.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  sub_1C44985F8();
  swift_bridgeObjectRetain();
  sub_1C411AAA4(v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1C411AAA4(v4, v2);
  swift_bridgeObjectRelease();
  return sub_1C4498628();
}

uint64_t sub_1C41167DC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  sub_1C44985F8();
  swift_bridgeObjectRetain();
  sub_1C411AAA4(v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1C411AAA4(v4, v2);
  swift_bridgeObjectRelease();
  return sub_1C4498628();
}

uint64_t sub_1C4116850(long long *a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  swift_bridgeObjectRetain();
  sub_1C411AAA4(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1C411AAA4(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C41168C0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  sub_1C44985F8();
  swift_bridgeObjectRetain();
  sub_1C411AAA4(v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1C411AAA4(v4, v2);
  swift_bridgeObjectRelease();
  return sub_1C4498628();
}

BOOL sub_1C4116934()
{
  return *(void *)(*(void *)(v0 + 8) + 16) != 0;
}

uint64_t sub_1C411694C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if ((sub_1C4113F94(a1[1], a2[1]) & 1) == 0) {
    return 0;
  }
  return sub_1C4113F94(v2, v3);
}

uint64_t sub_1C41169A0@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return CRVersion.init(from:)(a1, a2);
}

uint64_t sub_1C41169B8()
{
  uint64_t v2 = type metadata accessor for Proto_Version(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (void *)((char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7[0] = *v0;
  uint64_t result = sub_1C3F6DD10();
  if (!v1)
  {
    v7[1] = v7[0];
    uint64_t v6 = *(void *)(result + 16);
    swift_retain();
    sub_1C3F9FF10(v6, v4);
    swift_beginAccess();
    sub_1C43EF158((uint64_t)v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_1C4116AA8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1C3F8F160(a1);
  LOBYTE(a1) = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *v3;
    uint64_t v13 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1C4067C04();
      uint64_t v10 = v13;
    }
    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = type metadata accessor for Replica();
    sub_1C3F902AC(v11 + *(void *)(*(void *)(v12 - 8) + 72) * v6, (uint64_t (*)(void))type metadata accessor for Replica);
    sub_1C3FAAC94(*(void *)(v10 + 56) + 16 * v6, (uint64_t)v14);
    sub_1C3FAE060(v6, v10);
    uint64_t *v3 = v10;
    swift_bridgeObjectRelease();
    return sub_1C3FAAC94((uint64_t)v14, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t sub_1C4116BB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1C3F54E50(a1);
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v3;
    uint64_t v14 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1C4067E9C();
      uint64_t v11 = v14;
    }
    uint64_t v12 = *(void *)(v11 + 48);
    uint64_t v13 = sub_1C4496498();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * v6, v13);
    sub_1C3FDA248(*(void *)(v11 + 56) + 8 * v6, a2);
    sub_1C41172C0(v6, v11);
    uint64_t *v3 = v11;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

double sub_1C4116CCC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1C4061A38(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1C40689D0();
      uint64_t v9 = v11;
    }

    sub_1C3FF2864((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_1C41175E8(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_1C4116DC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1C4061A50(a1, a2);
  LOBYTE(a2) = v9;
  uint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v4;
    uint64_t v16 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1C4069B28();
      uint64_t v12 = v16;
    }
    sub_1C3F7E2CC(*(void *)(*(void *)(v12 + 48) + 16 * v8), *(void *)(*(void *)(v12 + 48) + 16 * v8 + 8));
    uint64_t v13 = (uint64_t *)(*(void *)(v12 + 56) + 16 * v8);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    *a3 = v15;
    a3[1] = v14;
    sub_1C41179B4(v8, v12);
    *uint64_t v4 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

double sub_1C4116EC8@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1C3F850CC(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1C3F85144();
      uint64_t v11 = v15;
    }
    sub_1C3F7E2CC(*(void *)(*(void *)(v11 + 48) + 16 * v8), *(void *)(*(void *)(v11 + 48) + 16 * v8 + 8));
    uint64_t v12 = (_OWORD *)(*(void *)(v11 + 56) + 48 * v8);
    long long v13 = v12[1];
    *a3 = *v12;
    a3[1] = v13;
    a3[2] = v12[2];
    sub_1C4117B9C(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return result;
}

double sub_1C4116FDC@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1C3F850CC(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1C406AA88();
      uint64_t v11 = v13;
    }
    sub_1C3F7E2CC(*(void *)(*(void *)(v11 + 48) + 16 * v8), *(void *)(*(void *)(v11 + 48) + 16 * v8 + 8));
    sub_1C3FF2864((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_1C4117D94(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1C41170E0(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1C3FA1598(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1C406AE18();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = sub_1C4496678();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1C4118170(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1C41171D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1C4061A50(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1C406B0B4();
    uint64_t v9 = v12;
  }
  sub_1C3F7E2CC(*(void *)(*(void *)(v9 + 48) + 16 * v6), *(void *)(*(void *)(v9 + 48) + 16 * v6 + 8));
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_1C41179B4(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_1C41172C0(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C4496498();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = sub_1C4497C08();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v34 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v35 = v13;
      char v32 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      uint64_t v33 = v14;
      uint64_t v16 = v15;
      do
      {
        uint64_t v17 = v9;
        uint64_t v18 = v16;
        int64_t v19 = v16 * v11;
        v33(v8, *(void *)(a2 + 48) + v16 * v11, v4);
        sub_1C3FA0E84(&qword_1EBBBCA80, MEMORY[0x1E4F276F0]);
        uint64_t v20 = sub_1C4497078();
        unint64_t result = (*v32)(v8, v4);
        unint64_t v21 = v20 & v12;
        if (a1 >= (uint64_t)v34)
        {
          if (v21 >= v34 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v16 = v18;
            if (v18 * a1 < v19
              || *(void *)(a2 + 48) + v18 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v18 * a1 != v19)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v24 = *(void *)(a2 + 56);
            unint64_t result = v24 + 8 * a1;
            uint64_t v9 = v17;
            if (a1 < (uint64_t)v11 || result >= v24 + 8 * v11 + 8)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
            }
            else
            {
              BOOL v25 = a1 == v11;
              a1 = v11;
              if (!v25)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v34 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v17;
        uint64_t v16 = v18;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    char v26 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1 << a1) - 1;
  }
  else
  {
    char v26 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1 << a1) - 1;
  }
  *char v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  BOOL v30 = __OFSUB__(v29, 1);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1C41175E8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_1C4497C08();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        sub_1C44971B8();
        sub_1C44985F8();
        id v11 = v10;
        sub_1C4497248();
        uint64_t v12 = sub_1C4498628();

        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_OWORD *)(v17 + 32 * v3);
          int64_t v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 2))
          {
            long long v9 = v19[1];
            *uint64_t v18 = *v19;
            v18[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1C41177DC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_1C4497C08();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1C44985F8();
        swift_bridgeObjectRetain();
        sub_1C4497248();
        uint64_t v9 = sub_1C4498628();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1C41179B4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_1C4497C08();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        unint64_t v11 = v9[1];
        sub_1C44985F8();
        sub_1C3F7E324(v10, v11);
        sub_1C4496568();
        uint64_t v12 = sub_1C4498628();
        unint64_t result = sub_1C3F7E2CC(v10, v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_OWORD *)(v17 + 16 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1C4117B9C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_1C4497C08();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v11 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v12 = *v11;
        unint64_t v13 = v11[1];
        sub_1C44985F8();
        sub_1C3F7E324(v12, v13);
        sub_1C4496568();
        uint64_t v14 = sub_1C4498628();
        unint64_t result = sub_1C3F7E2CC(v12, v13);
        unint64_t v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8) {
            goto LABEL_5;
          }
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          uint64_t v16 = *(void *)(a2 + 48);
          uint64_t v17 = (_OWORD *)(v16 + 16 * v3);
          uint64_t v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1) {
            *uint64_t v17 = *v18;
          }
          uint64_t v19 = *(void *)(a2 + 56);
          uint64_t v20 = (long long *)(v19 + 48 * v3);
          uint64_t v21 = (long long *)(v19 + 48 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 3))
          {
            long long v9 = *v21;
            long long v10 = v21[2];
            v20[1] = v21[1];
            void v20[2] = v10;
            *uint64_t v20 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1C4117D94(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_1C4497C08();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        unint64_t v12 = v10[1];
        sub_1C44985F8();
        sub_1C3F7E324(v11, v12);
        sub_1C4496568();
        uint64_t v13 = sub_1C4498628();
        unint64_t result = sub_1C3F7E2CC(v11, v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *uint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          uint64_t v19 = (_OWORD *)(v18 + 32 * v3);
          uint64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            long long v9 = v20[1];
            *uint64_t v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1C4117F7C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_1C4497C08();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        unint64_t v12 = v10[1];
        sub_1C44985F8();
        sub_1C3F7E324(v11, v12);
        sub_1C4496568();
        uint64_t v13 = sub_1C4498628();
        unint64_t result = sub_1C3F7E2CC(v11, v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *uint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          unint64_t v19 = v18 + 24 * v3;
          uint64_t v20 = (long long *)(v18 + 24 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= (unint64_t)v20 + 24))
          {
            long long v9 = *v20;
            *(void *)(v19 + 16) = *((void *)v20 + 2);
            *(_OWORD *)unint64_t v19 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1C4118170(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C4496678();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = sub_1C4497C08();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      char v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_1C3FA0E84((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
        uint64_t v17 = sub_1C4497078();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *uint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    BOOL v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    BOOL v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *BOOL v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1C4118468(int64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C4496498();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = sub_1C4497C08();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      char v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_1C3FA0E84(&qword_1EBBBCA80, MEMORY[0x1E4F276F0]);
        uint64_t v17 = sub_1C4497078();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *uint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    BOOL v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    BOOL v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *BOOL v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1C4118760(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C41187C8(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for Replica() - 8);
  int64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v3 = (void *)sub_1C411E934(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  uint64_t result = sub_1C4118870(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1C4118870(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v208 = *MEMORY[0x1E4F143B8];
  uint64_t v198 = type metadata accessor for Replica();
  uint64_t v196 = *(void *)(v198 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v198);
  uint64_t v190 = (uint64_t)&v184 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v199 = (uint64_t)&v184 - v7;
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  unint64_t v10 = (char *)&v184 - v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v184 - v12;
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  int64_t v16 = (char *)&v184 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  unint64_t v19 = (char *)&v184 - v18;
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v22 = (char *)&v184 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v184 - v23;
  unint64_t v203 = a1;
  uint64_t v25 = a1[1];
  uint64_t result = sub_1C4498068();
  if (result >= v25)
  {
    if (v25 < 0) {
      goto LABEL_167;
    }
    if (v25) {
      return sub_1C4119764(0, v25, 1, v203);
    }
  }
  else
  {
    if (v25 >= 0) {
      uint64_t v27 = v25;
    }
    else {
      uint64_t v27 = v25 + 1;
    }
    if (v25 < -1)
    {
      uint64_t result = sub_1C4497F48();
      __break(1u);
    }
    else
    {
      uint64_t v201 = v13;
      uint64_t v194 = v19;
      uint64_t v188 = v22;
      uint64_t v187 = v24;
      uint64_t v185 = result;
      if (v25 >= 2)
      {
        uint64_t v28 = v27 >> 1;
        uint64_t v29 = sub_1C4497488();
        *(void *)(v29 + 16) = v28;
        uint64_t v30 = *(unsigned __int8 *)(v196 + 80);
        uint64_t v184 = v29;
        unint64_t v195 = v29 + ((v30 + 32) & ~v30);
LABEL_12:
        uint64_t v32 = 0;
        unint64_t v31 = (char *)MEMORY[0x1E4FBC860];
        uint64_t v193 = v16;
        uint64_t v200 = v10;
        while (1)
        {
          uint64_t v34 = v32;
          uint64_t v35 = v32 + 1;
          uint64_t v192 = v32;
          if (v32 + 1 >= v25)
          {
            uint64_t v62 = v32 + 1;
            goto LABEL_84;
          }
          uint64_t v197 = v25;
          unint64_t v186 = v31;
          uint64_t v36 = *v203;
          uint64_t v37 = *(void *)(v196 + 72);
          uint64_t v38 = (uint64_t)v187;
          sub_1C3F8EF8C(*v203 + v37 * v35, (uint64_t)v187, (uint64_t (*)(void))type metadata accessor for Replica);
          uint64_t v202 = v37;
          uint64_t v39 = v36 + v37 * v34;
          uint64_t v40 = (uint64_t)v188;
          sub_1C3F8EF8C(v39, (uint64_t)v188, (uint64_t (*)(void))type metadata accessor for Replica);
          uint64_t v41 = *(int *)(v198 + 20);
          uint64_t v42 = *(void *)(v38 + v41);
          uint64_t v43 = *(void *)(v40 + v41);
          if (v42 != v43)
          {
            LODWORD(v191) = v42 < v43;
            uint64_t v60 = v197;
            goto LABEL_27;
          }
          unint64_t v206 = sub_1C4496658();
          LOWORD(v207) = v44;
          BYTE2(v207) = v45;
          BYTE3(v207) = v46;
          BYTE4(v207) = v47;
          BYTE5(v207) = v48;
          BYTE6(v207) = v49;
          HIBYTE(v207) = v50;
          unint64_t v204 = sub_1C4496658();
          LOWORD(v205) = v51;
          BYTE2(v205) = v52;
          BYTE3(v205) = v53;
          BYTE4(v205) = v54;
          BYTE5(v205) = v55;
          BYTE6(v205) = v56;
          HIBYTE(v205) = v57;
          unint64_t v58 = bswap64(v206);
          unint64_t v59 = bswap64(v204);
          if (v58 != v59) {
            break;
          }
          unint64_t v58 = bswap64(v207);
          unint64_t v59 = bswap64(v205);
          uint64_t v60 = v197;
          if (v58 != v59) {
            goto LABEL_23;
          }
          unsigned int v61 = 0;
LABEL_26:
          LODWORD(v191) = v61 >> 31;
LABEL_27:
          sub_1C3F902AC((uint64_t)v188, (uint64_t (*)(void))type metadata accessor for Replica);
          sub_1C3F902AC((uint64_t)v187, (uint64_t (*)(void))type metadata accessor for Replica);
          uint64_t v62 = v34 + 2;
          if (v34 + 2 >= v60)
          {
LABEL_41:
            if (!v191) {
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v63 = v202 * v35;
            uint64_t v64 = v36;
            uint64_t v65 = v202 * v62;
            while (1)
            {
              uint64_t v66 = (uint64_t)v194;
              sub_1C3F8EF8C(v64 + v65, (uint64_t)v194, (uint64_t (*)(void))type metadata accessor for Replica);
              sub_1C3F8EF8C(v64 + v63, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Replica);
              uint64_t v67 = *(int *)(v198 + 20);
              uint64_t v68 = *(void *)(v66 + v67);
              uint64_t v69 = *(void *)&v16[v67];
              if (v68 == v69)
              {
                unint64_t v206 = sub_1C4496658();
                LOWORD(v207) = v70;
                BYTE2(v207) = v71;
                BYTE3(v207) = v72;
                BYTE4(v207) = v73;
                BYTE5(v207) = v74;
                BYTE6(v207) = v75;
                HIBYTE(v207) = v76;
                unint64_t v204 = sub_1C4496658();
                LOWORD(v205) = v77;
                BYTE2(v205) = v78;
                BYTE3(v205) = v79;
                BYTE4(v205) = v80;
                BYTE5(v205) = v81;
                BYTE6(v205) = v82;
                HIBYTE(v205) = v83;
                unint64_t v84 = bswap64(v206);
                unint64_t v85 = bswap64(v204);
                if (v84 != v85) {
                  goto LABEL_34;
                }
                unint64_t v84 = bswap64(v207);
                unint64_t v85 = bswap64(v205);
                if (v84 == v85)
                {
                  unsigned int v86 = 0;
                }
                else
                {
LABEL_34:
                  unsigned int v87 = v84 < v85 ? -1 : 1;
                  unsigned int v86 = v87 >> 31;
                }
              }
              else
              {
                unsigned int v86 = v68 < v69;
              }
              sub_1C3F902AC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Replica);
              sub_1C3F902AC((uint64_t)v194, (uint64_t (*)(void))type metadata accessor for Replica);
              if (v191 != v86) {
                break;
              }
              ++v62;
              v64 += v202;
              uint64_t v60 = v197;
              if (v197 == v62)
              {
                uint64_t v62 = v197;
                uint64_t v34 = v192;
                goto LABEL_41;
              }
            }
            uint64_t v34 = v192;
            uint64_t v60 = v197;
            if (!v191)
            {
LABEL_56:
              unint64_t v31 = v186;
              if (v62 >= v60) {
                goto LABEL_84;
              }
LABEL_59:
              if (__OFSUB__(v62, v34)) {
                goto LABEL_166;
              }
              if (v62 - v34 < v185)
              {
                if (__OFADD__(v34, v185)) {
                  goto LABEL_169;
                }
                if (v34 + v185 >= v60) {
                  uint64_t v93 = v60;
                }
                else {
                  uint64_t v93 = v34 + v185;
                }
                if (v93 < v34)
                {
LABEL_170:
                  __break(1u);
LABEL_171:
                  __break(1u);
LABEL_172:
                  __break(1u);
LABEL_173:
                  __break(1u);
LABEL_174:
                  __break(1u);
                }
                if (v62 != v93)
                {
                  unint64_t v186 = v31;
                  uint64_t v189 = v2;
                  uint64_t v94 = *(void *)(v196 + 72);
                  uint64_t v202 = v94 * (v62 - 1);
                  uint64_t v197 = v94;
                  uint64_t v95 = v62 * v94;
                  uint64_t v191 = v93;
                  do
                  {
                    uint64_t v96 = 0;
                    uint64_t v97 = v34;
                    do
                    {
                      uint64_t v98 = v62;
                      uint64_t v99 = *v203;
                      uint64_t v100 = (uint64_t)v201;
                      sub_1C3F8EF8C(v95 + v96 + *v203, (uint64_t)v201, (uint64_t (*)(void))type metadata accessor for Replica);
                      uint64_t v101 = v202 + v96 + v99;
                      uint64_t v102 = (uint64_t)v200;
                      sub_1C3F8EF8C(v101, (uint64_t)v200, (uint64_t (*)(void))type metadata accessor for Replica);
                      uint64_t v103 = *(int *)(v198 + 20);
                      uint64_t v104 = *(void *)(v100 + v103);
                      uint64_t v105 = *(void *)(v102 + v103);
                      if (v104 == v105)
                      {
                        unint64_t v206 = sub_1C4496658();
                        LOWORD(v207) = v106;
                        BYTE2(v207) = v107;
                        BYTE3(v207) = v108;
                        BYTE4(v207) = v109;
                        BYTE5(v207) = v110;
                        BYTE6(v207) = v111;
                        HIBYTE(v207) = v112;
                        unint64_t v204 = sub_1C4496658();
                        LOWORD(v205) = v113;
                        BYTE2(v205) = v114;
                        BYTE3(v205) = v115;
                        BYTE4(v205) = v116;
                        BYTE5(v205) = v117;
                        BYTE6(v205) = v118;
                        HIBYTE(v205) = v119;
                        unint64_t v120 = bswap64(v206);
                        unint64_t v121 = bswap64(v204);
                        if (v120 == v121 && (unint64_t v120 = bswap64(v207), v121 = bswap64(v205), v120 == v121))
                        {
                          BOOL v122 = 0;
                        }
                        else
                        {
                          if (v120 < v121) {
                            unsigned int v123 = -1;
                          }
                          else {
                            unsigned int v123 = 1;
                          }
                          BOOL v122 = v123 >> 31;
                        }
                      }
                      else
                      {
                        BOOL v122 = v104 < v105;
                      }
                      sub_1C3F902AC((uint64_t)v200, (uint64_t (*)(void))type metadata accessor for Replica);
                      sub_1C3F902AC((uint64_t)v201, (uint64_t (*)(void))type metadata accessor for Replica);
                      if (!v122) {
                        break;
                      }
                      uint64_t v124 = *v203;
                      if (!*v203) {
                        goto LABEL_171;
                      }
                      uint64_t v125 = v124 + v202 + v96;
                      sub_1C3F8F7B0(v124 + v95 + v96, v199, (uint64_t (*)(void))type metadata accessor for Replica);
                      swift_arrayInitWithTakeFrontToBack();
                      sub_1C3F8F7B0(v199, v125, (uint64_t (*)(void))type metadata accessor for Replica);
                      v96 -= v197;
                      ++v97;
                      uint64_t v62 = v98;
                    }
                    while (v98 != v97);
                    ++v62;
                    v202 += v197;
                    v95 += v197;
                    uint64_t v34 = v192;
                  }
                  while (v62 != v191);
                  uint64_t v62 = v191;
                  uint64_t v2 = v189;
                  unint64_t v31 = v186;
                  int64_t v16 = v193;
                }
              }
              goto LABEL_84;
            }
          }
          if (v62 < v34) {
            goto LABEL_168;
          }
          if (v34 >= v62) {
            goto LABEL_56;
          }
          uint64_t v88 = 0;
          uint64_t v89 = v202 * (v62 - 1);
          uint64_t v90 = v62 * v202;
          uint64_t v91 = v34 * v202;
          uint64_t v189 = v36;
          do
          {
            if (v34 != v62 + v88 - 1)
            {
              if (!v36) {
                goto LABEL_173;
              }
              uint64_t v191 = v36 + v89;
              sub_1C3F8F7B0(v36 + v91, v190, (uint64_t (*)(void))type metadata accessor for Replica);
              if (v91 < v89 || v36 + v91 >= (unint64_t)(v36 + v90))
              {
                uint64_t v92 = v191;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v92 = v191;
                if (v91 != v89) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              sub_1C3F8F7B0(v190, v92, (uint64_t (*)(void))type metadata accessor for Replica);
              uint64_t v36 = v189;
            }
            ++v34;
            --v88;
            v89 -= v202;
            v90 -= v202;
            v91 += v202;
          }
          while (v34 < v62 + v88);
          unint64_t v31 = v186;
          uint64_t v34 = v192;
          int64_t v16 = v193;
          uint64_t v60 = v197;
          if (v62 < v197) {
            goto LABEL_59;
          }
LABEL_84:
          if (v62 < v34) {
            goto LABEL_161;
          }
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v202 = v62;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            unint64_t v31 = sub_1C411E2A8(0, *((void *)v31 + 2) + 1, 1, v31);
          }
          unint64_t v128 = *((void *)v31 + 2);
          unint64_t v127 = *((void *)v31 + 3);
          unint64_t v33 = v128 + 1;
          if (v128 >= v127 >> 1) {
            unint64_t v31 = sub_1C411E2A8((char *)(v127 > 1), v128 + 1, 1, v31);
          }
          *((void *)v31 + 2) = v33;
          uint64_t v129 = v31 + 32;
          int64_t v130 = &v31[16 * v128 + 32];
          uint64_t v131 = v202;
          *(void *)int64_t v130 = v34;
          *((void *)v130 + 1) = v131;
          if (v128)
          {
            while (1)
            {
              unint64_t v132 = v33 - 1;
              if (v33 >= 4)
              {
                uint64_t v137 = &v129[16 * v33];
                uint64_t v138 = *((void *)v137 - 8);
                uint64_t v139 = *((void *)v137 - 7);
                BOOL v143 = __OFSUB__(v139, v138);
                uint64_t v140 = v139 - v138;
                if (v143) {
                  goto LABEL_150;
                }
                uint64_t v142 = *((void *)v137 - 6);
                uint64_t v141 = *((void *)v137 - 5);
                BOOL v143 = __OFSUB__(v141, v142);
                uint64_t v135 = v141 - v142;
                char v136 = v143;
                if (v143) {
                  goto LABEL_151;
                }
                unint64_t v144 = v33 - 2;
                unint64_t v145 = &v129[16 * v33 - 32];
                uint64_t v147 = *(void *)v145;
                uint64_t v146 = *((void *)v145 + 1);
                BOOL v143 = __OFSUB__(v146, v147);
                uint64_t v148 = v146 - v147;
                if (v143) {
                  goto LABEL_153;
                }
                BOOL v143 = __OFADD__(v135, v148);
                uint64_t v149 = v135 + v148;
                if (v143) {
                  goto LABEL_156;
                }
                if (v149 >= v140)
                {
                  char v167 = &v129[16 * v132];
                  uint64_t v169 = *(void *)v167;
                  uint64_t v168 = *((void *)v167 + 1);
                  BOOL v143 = __OFSUB__(v168, v169);
                  uint64_t v170 = v168 - v169;
                  if (v143) {
                    goto LABEL_160;
                  }
                  BOOL v160 = v135 < v170;
                  goto LABEL_121;
                }
              }
              else
              {
                if (v33 != 3)
                {
                  uint64_t v161 = *((void *)v31 + 4);
                  uint64_t v162 = *((void *)v31 + 5);
                  BOOL v143 = __OFSUB__(v162, v161);
                  uint64_t v154 = v162 - v161;
                  char v155 = v143;
                  goto LABEL_115;
                }
                uint64_t v134 = *((void *)v31 + 4);
                uint64_t v133 = *((void *)v31 + 5);
                BOOL v143 = __OFSUB__(v133, v134);
                uint64_t v135 = v133 - v134;
                char v136 = v143;
              }
              if (v136) {
                goto LABEL_152;
              }
              unint64_t v144 = v33 - 2;
              unint64_t v150 = &v129[16 * v33 - 32];
              uint64_t v152 = *(void *)v150;
              uint64_t v151 = *((void *)v150 + 1);
              BOOL v153 = __OFSUB__(v151, v152);
              uint64_t v154 = v151 - v152;
              char v155 = v153;
              if (v153) {
                goto LABEL_155;
              }
              uint64_t v156 = &v129[16 * v132];
              uint64_t v158 = *(void *)v156;
              uint64_t v157 = *((void *)v156 + 1);
              BOOL v143 = __OFSUB__(v157, v158);
              uint64_t v159 = v157 - v158;
              if (v143) {
                goto LABEL_158;
              }
              if (__OFADD__(v154, v159)) {
                goto LABEL_159;
              }
              if (v154 + v159 >= v135)
              {
                BOOL v160 = v135 < v159;
LABEL_121:
                if (v160) {
                  unint64_t v132 = v144;
                }
                goto LABEL_123;
              }
LABEL_115:
              if (v155) {
                goto LABEL_154;
              }
              uint64_t v163 = &v129[16 * v132];
              uint64_t v165 = *(void *)v163;
              uint64_t v164 = *((void *)v163 + 1);
              BOOL v143 = __OFSUB__(v164, v165);
              uint64_t v166 = v164 - v165;
              if (v143) {
                goto LABEL_157;
              }
              if (v166 < v154) {
                goto LABEL_14;
              }
LABEL_123:
              unint64_t v171 = v132 - 1;
              if (v132 - 1 >= v33)
              {
                __break(1u);
LABEL_147:
                __break(1u);
LABEL_148:
                __break(1u);
LABEL_149:
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
                goto LABEL_170;
              }
              if (!*v203) {
                goto LABEL_172;
              }
              uint64_t v172 = v31;
              uint64_t v173 = &v129[16 * v171];
              uint64_t v174 = *(void *)v173;
              uint64_t v175 = &v129[16 * v132];
              uint64_t v176 = *((void *)v175 + 1);
              sub_1C411A2FC(*v203 + *(void *)(v196 + 72) * *(void *)v173, *v203 + *(void *)(v196 + 72) * *(void *)v175, *v203 + *(void *)(v196 + 72) * v176, v195);
              if (v2) {
                goto LABEL_144;
              }
              if (v176 < v174) {
                goto LABEL_147;
              }
              if (v132 > *((void *)v172 + 2)) {
                goto LABEL_148;
              }
              *(void *)uint64_t v173 = v174;
              *(void *)&v129[16 * v171 + 8] = v176;
              unint64_t v177 = *((void *)v172 + 2);
              if (v132 >= v177) {
                goto LABEL_149;
              }
              unint64_t v31 = v172;
              unint64_t v33 = v177 - 1;
              memmove(&v129[16 * v132], v175 + 16, 16 * (v177 - 1 - v132));
              *((void *)v172 + 2) = v177 - 1;
              int64_t v16 = v193;
              if (v177 <= 2) {
                goto LABEL_14;
              }
            }
          }
          unint64_t v33 = 1;
LABEL_14:
          uint64_t v25 = v203[1];
          uint64_t v32 = v202;
          if (v202 >= v25) {
            goto LABEL_133;
          }
        }
        uint64_t v60 = v197;
LABEL_23:
        if (v58 < v59) {
          unsigned int v61 = -1;
        }
        else {
          unsigned int v61 = 1;
        }
        goto LABEL_26;
      }
      unint64_t v31 = (char *)MEMORY[0x1E4FBC860];
      unint64_t v195 = MEMORY[0x1E4FBC860]
           + ((*(unsigned __int8 *)(v196 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v196 + 80));
      uint64_t v184 = MEMORY[0x1E4FBC860];
      if (v25 == 1) {
        goto LABEL_12;
      }
      unint64_t v33 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_133:
      if (v33 >= 2)
      {
        uint64_t v178 = *v203;
        do
        {
          unint64_t v179 = v33 - 2;
          if (v33 < 2) {
            goto LABEL_162;
          }
          if (!v178) {
            goto LABEL_174;
          }
          uint64_t v180 = *(void *)&v31[16 * v179 + 32];
          uint64_t v181 = *(void *)&v31[16 * v33 + 24];
          sub_1C411A2FC(v178 + *(void *)(v196 + 72) * v180, v178 + *(void *)(v196 + 72) * *(void *)&v31[16 * v33 + 16], v178 + *(void *)(v196 + 72) * v181, v195);
          if (v2) {
            break;
          }
          if (v181 < v180) {
            goto LABEL_163;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v31 = sub_1C411E87C((uint64_t)v31);
          }
          if (v179 >= *((void *)v31 + 2)) {
            goto LABEL_164;
          }
          uint64_t v182 = &v31[16 * v179 + 32];
          *(void *)uint64_t v182 = v180;
          *((void *)v182 + 1) = v181;
          unint64_t v183 = *((void *)v31 + 2);
          if (v33 > v183) {
            goto LABEL_165;
          }
          memmove(&v31[16 * v33 + 16], &v31[16 * v33 + 32], 16 * (v183 - v33));
          *((void *)v31 + 2) = v183 - 1;
          unint64_t v33 = v183 - 1;
        }
        while (v183 > 2);
      }
LABEL_144:
      swift_bridgeObjectRelease();
      *(void *)(v184 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1C4119764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v50 = a4;
  uint64_t v45 = a1;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v48 = type metadata accessor for Replica();
  uint64_t v6 = MEMORY[0x1F4188790](v48);
  uint64_t v49 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  unint64_t v10 = (char *)&v43 - v9;
  uint64_t result = MEMORY[0x1F4188790](v8);
  uint64_t v14 = (char *)&v43 - v13;
  uint64_t v47 = a3;
  uint64_t v44 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v51 = v15 * (v47 - 1);
    uint64_t v46 = v15;
    uint64_t v16 = v15 * v47;
    do
    {
      uint64_t v17 = 0;
      uint64_t v18 = v45;
      do
      {
        uint64_t v19 = *v50;
        sub_1C3F8EF8C(v16 + v17 + *v50, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Replica);
        sub_1C3F8EF8C(v51 + v17 + v19, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Replica);
        uint64_t v20 = *(int *)(v48 + 20);
        uint64_t v21 = *(void *)&v14[v20];
        uint64_t v22 = *(void *)&v10[v20];
        if (v21 == v22)
        {
          unint64_t v54 = sub_1C4496658();
          LOWORD(v55) = v23;
          BYTE2(v55) = v24;
          BYTE3(v55) = v25;
          BYTE4(v55) = v26;
          BYTE5(v55) = v27;
          BYTE6(v55) = v28;
          HIBYTE(v55) = v29;
          unint64_t v52 = sub_1C4496658();
          LOWORD(v53) = v30;
          BYTE2(v53) = v31;
          BYTE3(v53) = v32;
          BYTE4(v53) = v33;
          BYTE5(v53) = v34;
          BYTE6(v53) = v35;
          HIBYTE(v53) = v36;
          unint64_t v37 = bswap64(v54);
          unint64_t v38 = bswap64(v52);
          if (v37 == v38 && (v37 = bswap64(v55), unint64_t v38 = bswap64(v53), v37 == v38))
          {
            BOOL v39 = 0;
          }
          else
          {
            if (v37 < v38) {
              unsigned int v40 = -1;
            }
            else {
              unsigned int v40 = 1;
            }
            BOOL v39 = v40 >> 31;
          }
        }
        else
        {
          BOOL v39 = v21 < v22;
        }
        sub_1C3F902AC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Replica);
        uint64_t result = sub_1C3F902AC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Replica);
        if (!v39) {
          break;
        }
        uint64_t v41 = *v50;
        if (!*v50) {
          __break(1u);
        }
        uint64_t v42 = v41 + v51 + v17;
        sub_1C3F8F7B0(v41 + v16 + v17, v49, (uint64_t (*)(void))type metadata accessor for Replica);
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = sub_1C3F8F7B0(v49, v42, (uint64_t (*)(void))type metadata accessor for Replica);
        v17 -= v46;
        ++v18;
      }
      while (v47 != v18);
      v51 += v46;
      v16 += v46;
      ++v47;
    }
    while (v47 != v44);
  }
  return result;
}

uint64_t sub_1C4119B58(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  v89[1] = *MEMORY[0x1E4F143B8];
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
  uint64_t v8 = MEMORY[0x1F4188790](v81);
  unint64_t v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v79 - v12;
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v79 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v79 - v17;
  char v82 = *(char **)(v19 + 72);
  if (!v82)
  {
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  if (a2 - a1 == 0x8000000000000000 && v82 == (char *)-1) {
    goto LABEL_79;
  }
  int64_t v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v82 == (char *)-1) {
LABEL_80:
  }
    __break(1u);
  uint64_t v21 = (uint64_t)(a2 - a1) / (uint64_t)v82;
  unint64_t v88 = a4;
  v89[0] = a1;
  uint64_t v22 = v20 / (uint64_t)v82;
  if (v21 >= v20 / (uint64_t)v82)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      uint64_t v24 = v22 * (void)v82;
      if (a4 < a2 || a2 + v24 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v51 = a4 + v24;
      unint64_t v87 = a4 + v24;
      v89[0] = a2;
      unint64_t v80 = a1;
      if (v24 >= 1 && a1 < a2)
      {
        uint64_t v53 = -(uint64_t)v82;
        char v82 = v13;
        do
        {
          sub_1C3F970C4(v51 + v53, (uint64_t)v13, &qword_1EBBC0798);
          unint64_t v54 = a2 + v53;
          sub_1C3F970C4(a2 + v53, (uint64_t)v10, &qword_1EBBC0798);
          uint64_t v55 = *(int *)(type metadata accessor for Replica() + 20);
          uint64_t v56 = *(void *)&v13[v55];
          uint64_t v57 = *(void *)&v10[v55];
          if (v56 == v57)
          {
            unint64_t v85 = sub_1C4496658();
            LOWORD(v86) = v58;
            BYTE2(v86) = v59;
            BYTE3(v86) = v60;
            BYTE4(v86) = v61;
            BYTE5(v86) = v62;
            BYTE6(v86) = v63;
            HIBYTE(v86) = v64;
            unint64_t v83 = sub_1C4496658();
            LOWORD(v84) = v65;
            BYTE2(v84) = v66;
            BYTE3(v84) = v67;
            BYTE4(v84) = v68;
            BYTE5(v84) = v69;
            BYTE6(v84) = v70;
            HIBYTE(v84) = v71;
            unint64_t v72 = bswap64(v85);
            unint64_t v73 = bswap64(v83);
            if (v72 == v73 && (v72 = bswap64(v86), unint64_t v73 = bswap64(v84), v72 == v73))
            {
              BOOL v74 = 0;
            }
            else
            {
              if (v72 < v73) {
                unsigned int v75 = -1;
              }
              else {
                unsigned int v75 = 1;
              }
              BOOL v74 = v75 >> 31;
            }
          }
          else
          {
            BOOL v74 = v56 < v57;
          }
          unint64_t v76 = a3 + v53;
          sub_1C3F962E0((uint64_t)v10, &qword_1EBBC0798);
          sub_1C3F962E0((uint64_t)v82, &qword_1EBBC0798);
          if (v74)
          {
            if (a3 < a2 || v76 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v89[0] += v53;
          }
          else
          {
            unint64_t v77 = v87;
            v87 += v53;
            if (a3 < v77 || v76 >= v77)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v54 = a2;
            }
            else
            {
              if (a3 != v77) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v54 = a2;
            }
          }
          uint64_t v13 = v82;
          unint64_t v51 = v87;
          if (v87 <= a4) {
            break;
          }
          a2 = v54;
          a3 += v53;
        }
        while (v54 > v80);
      }
      goto LABEL_77;
    }
  }
  else if ((v21 & 0x8000000000000000) == 0)
  {
    uint64_t v23 = v21 * (void)v82;
    if (a4 < a1 || a1 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v25 = a4 + v23;
    unint64_t v87 = a4 + v23;
    if (v23 >= 1 && a2 < a3)
    {
      do
      {
        sub_1C3F970C4(a2, (uint64_t)v18, &qword_1EBBC0798);
        sub_1C3F970C4(a4, (uint64_t)v16, &qword_1EBBC0798);
        uint64_t v27 = *(int *)(type metadata accessor for Replica() + 20);
        uint64_t v28 = *(void *)&v18[v27];
        uint64_t v29 = *(void *)&v16[v27];
        if (v28 == v29)
        {
          unint64_t v85 = sub_1C4496658();
          LOWORD(v86) = v30;
          BYTE2(v86) = v31;
          BYTE3(v86) = v32;
          BYTE4(v86) = v33;
          BYTE5(v86) = v34;
          BYTE6(v86) = v35;
          HIBYTE(v86) = v36;
          unint64_t v83 = sub_1C4496658();
          LOWORD(v84) = v37;
          BYTE2(v84) = v38;
          BYTE3(v84) = v39;
          BYTE4(v84) = v40;
          BYTE5(v84) = v41;
          BYTE6(v84) = v42;
          HIBYTE(v84) = v43;
          unint64_t v44 = bswap64(v85);
          unint64_t v45 = bswap64(v83);
          if (v44 == v45 && (v44 = bswap64(v86), unint64_t v45 = bswap64(v84), v44 == v45))
          {
            BOOL v46 = 0;
          }
          else
          {
            if (v44 < v45) {
              unsigned int v47 = -1;
            }
            else {
              unsigned int v47 = 1;
            }
            BOOL v46 = v47 >> 31;
          }
        }
        else
        {
          BOOL v46 = v28 < v29;
        }
        sub_1C3F962E0((uint64_t)v16, &qword_1EBBC0798);
        sub_1C3F962E0((uint64_t)v18, &qword_1EBBC0798);
        unint64_t v48 = v89[0];
        if (v46)
        {
          unint64_t v49 = (unint64_t)&v82[a2];
          if (v89[0] < a2 || v89[0] >= v49)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v89[0] == a2)
          {
            unint64_t v48 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v50 = (unint64_t)&v82[v88];
          if (v89[0] < v88 || v89[0] >= v50)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v89[0] != v88)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v88 = v50;
          unint64_t v49 = a2;
        }
        v89[0] = (unint64_t)&v82[v48];
        a4 = v88;
        if (v88 >= v25) {
          break;
        }
        a2 = v49;
      }
      while (v49 < a3);
    }
LABEL_77:
    sub_1C411E3A4(v89, &v88, (uint64_t *)&v87);
    return 1;
  }
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C411A2FC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  v91[1] = *MEMORY[0x1E4F143B8];
  uint64_t v84 = type metadata accessor for Replica();
  uint64_t v8 = MEMORY[0x1F4188790](v84);
  uint64_t v83 = (uint64_t)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v81 - v11;
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v81 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v81 - v16;
  uint64_t v19 = *(void *)(v18 + 72);
  if (!v19)
  {
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  unint64_t v20 = a1;
  if (a2 - a1 == 0x8000000000000000 && v19 == -1) {
    goto LABEL_79;
  }
  int64_t v21 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v19 == -1) {
LABEL_80:
  }
    __break(1u);
  uint64_t v22 = (uint64_t)(a2 - a1) / v19;
  unint64_t v90 = a4;
  v91[0] = a1;
  uint64_t v23 = v21 / v19;
  if (v22 >= v21 / v19)
  {
    if ((v23 & 0x8000000000000000) == 0)
    {
      unint64_t v82 = a1;
      uint64_t v25 = v23 * v19;
      if (a4 < a2 || a2 + v25 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
        uint64_t v26 = v83;
      }
      else
      {
        uint64_t v26 = v83;
        if (a4 != a2) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      unint64_t v53 = a4 + v25;
      unint64_t v89 = a4 + v25;
      v91[0] = a2;
      if (v25 >= 1 && v82 < a2)
      {
        uint64_t v55 = -v19;
        do
        {
          sub_1C3F8EF8C(v53 + v55, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Replica);
          unint64_t v56 = a2 + v55;
          sub_1C3F8EF8C(a2 + v55, v26, (uint64_t (*)(void))type metadata accessor for Replica);
          uint64_t v57 = *(int *)(v84 + 20);
          uint64_t v58 = *(void *)&v12[v57];
          uint64_t v59 = *(void *)(v26 + v57);
          if (v58 == v59)
          {
            unint64_t v87 = sub_1C4496658();
            LOWORD(v88) = v60;
            BYTE2(v88) = v61;
            BYTE3(v88) = v62;
            BYTE4(v88) = v63;
            BYTE5(v88) = v64;
            BYTE6(v88) = v65;
            HIBYTE(v88) = v66;
            unint64_t v85 = sub_1C4496658();
            LOWORD(v86) = v67;
            BYTE2(v86) = v68;
            BYTE3(v86) = v69;
            BYTE4(v86) = v70;
            BYTE5(v86) = v71;
            BYTE6(v86) = v72;
            HIBYTE(v86) = v73;
            unint64_t v74 = bswap64(v87);
            unint64_t v75 = bswap64(v85);
            if (v74 == v75 && (unint64_t v74 = bswap64(v88), v75 = bswap64(v86), v74 == v75))
            {
              BOOL v76 = 0;
            }
            else
            {
              if (v74 < v75) {
                unsigned int v77 = -1;
              }
              else {
                unsigned int v77 = 1;
              }
              BOOL v76 = v77 >> 31;
            }
          }
          else
          {
            BOOL v76 = v58 < v59;
          }
          unint64_t v78 = a3 + v55;
          sub_1C3F902AC(v83, (uint64_t (*)(void))type metadata accessor for Replica);
          sub_1C3F902AC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Replica);
          if (v76)
          {
            if (a3 < a2 || v78 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v26 = v83;
            }
            else
            {
              uint64_t v26 = v83;
              if (a3 != a2) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v91[0] += v55;
          }
          else
          {
            unint64_t v79 = v89;
            v89 += v55;
            if (a3 < v79 || v78 >= v79)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v56 = a2;
              uint64_t v26 = v83;
            }
            else
            {
              uint64_t v26 = v83;
              if (a3 != v79) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v56 = a2;
            }
          }
          unint64_t v53 = v89;
          if (v89 <= a4) {
            break;
          }
          a2 = v56;
          a3 += v55;
        }
        while (v56 > v82);
      }
      goto LABEL_77;
    }
  }
  else if ((v22 & 0x8000000000000000) == 0)
  {
    uint64_t v24 = v22 * v19;
    if (a4 < v20 || v20 + v24 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != v20)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v27 = a4 + v24;
    unint64_t v89 = a4 + v24;
    if (v24 >= 1 && a2 < a3)
    {
      do
      {
        sub_1C3F8EF8C(a2, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Replica);
        sub_1C3F8EF8C(a4, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Replica);
        uint64_t v29 = *(int *)(v84 + 20);
        uint64_t v30 = *(void *)&v17[v29];
        uint64_t v31 = *(void *)&v15[v29];
        if (v30 == v31)
        {
          unint64_t v87 = sub_1C4496658();
          LOWORD(v88) = v32;
          BYTE2(v88) = v33;
          BYTE3(v88) = v34;
          BYTE4(v88) = v35;
          BYTE5(v88) = v36;
          BYTE6(v88) = v37;
          HIBYTE(v88) = v38;
          unint64_t v85 = sub_1C4496658();
          LOWORD(v86) = v39;
          BYTE2(v86) = v40;
          BYTE3(v86) = v41;
          BYTE4(v86) = v42;
          BYTE5(v86) = v43;
          BYTE6(v86) = v44;
          HIBYTE(v86) = v45;
          unint64_t v46 = bswap64(v87);
          unint64_t v47 = bswap64(v85);
          if (v46 == v47 && (unint64_t v46 = bswap64(v88), v47 = bswap64(v86), v46 == v47))
          {
            BOOL v48 = 0;
          }
          else
          {
            if (v46 < v47) {
              unsigned int v49 = -1;
            }
            else {
              unsigned int v49 = 1;
            }
            BOOL v48 = v49 >> 31;
          }
        }
        else
        {
          BOOL v48 = v30 < v31;
        }
        sub_1C3F902AC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Replica);
        sub_1C3F902AC((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Replica);
        unint64_t v50 = v91[0];
        if (v48)
        {
          unint64_t v51 = a2 + v19;
          if (v91[0] < a2 || v91[0] >= v51)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v91[0] == a2)
          {
            unint64_t v50 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v52 = v90 + v19;
          if (v91[0] < v90 || v91[0] >= v52)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v91[0] != v90)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v90 = v52;
          unint64_t v51 = a2;
        }
        v91[0] = v50 + v19;
        a4 = v90;
        if (v90 >= v27) {
          break;
        }
        a2 = v51;
      }
      while (v51 < a3);
    }
LABEL_77:
    sub_1C411E64C(v91, &v90, (uint64_t *)&v89);
    return 1;
  }
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C411AAA4(long long *a1, uint64_t a2)
{
  uint64_t v4 = sub_1C44967E8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unsigned int v49 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for Replica();
  uint64_t v46 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v40 - v13;
  uint64_t v15 = *(void *)(a2 + 64);
  uint64_t v42 = a2 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v45 = v5 + 16;
  uint64_t v47 = v5;
  unint64_t v50 = (void (**)(char *, uint64_t))(v5 + 8);
  unint64_t v51 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  int64_t v43 = (unint64_t)(v16 + 63) >> 6;
  int64_t v41 = v43 - 1;
  uint64_t v48 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v20 = 0;
  int64_t v53 = 0;
  uint64_t v44 = v4;
  if (!v18) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v21 = v20;
  unint64_t v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  unint64_t v23 = v22 | (v53 << 6);
LABEL_5:
  uint64_t v24 = v48;
  sub_1C3F8EF8C(*(void *)(v48 + 48) + *(void *)(v46 + 72) * v23, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Replica);
  uint64_t v25 = v47;
  unint64_t v26 = *(void *)(v24 + 56) + *(void *)(v47 + 72) * v23;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
  uint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v25 + 16);
  uint64_t v4 = v44;
  v28(&v12[*(int *)(v27 + 48)], v26, v44);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v12, 0, 1, v27);
  uint64_t v20 = v21;
  while (1)
  {
    sub_1C3F961BC((uint64_t)v12, (uint64_t)v14, &qword_1EBBC07A0);
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v14, 1, v34) == 1)
    {
      swift_release();
      return sub_1C4498608();
    }
    char v35 = &v14[*(int *)(v34 + 48)];
    sub_1C3F8F7B0((uint64_t)v14, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Replica);
    char v36 = v49;
    (*v51)(v49, v35, v4);
    uint64_t v37 = *((void *)a1 + 8);
    long long v38 = a1[1];
    long long v54 = *a1;
    long long v55 = v38;
    long long v39 = a1[3];
    long long v56 = a1[2];
    long long v57 = v39;
    uint64_t v58 = v37;
    sub_1C4496638();
    sub_1C4498608();
    sub_1C3F902AC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Replica);
    sub_1C3FA0E84(&qword_1EA39D850, MEMORY[0x1E4F27D00]);
    sub_1C4497088();
    (*v50)(v36, v4);
    uint64_t result = sub_1C4498628();
    v20 ^= result;
    if (v18) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v29 = v53 + 1;
    if (__OFADD__(v53, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 < v43)
    {
      unint64_t v30 = *(void *)(v42 + 8 * v29);
      if (v30) {
        goto LABEL_9;
      }
      int64_t v31 = v53 + 2;
      ++v53;
      if (v29 + 1 < v43)
      {
        unint64_t v30 = *(void *)(v42 + 8 * v31);
        if (v30)
        {
          ++v29;
LABEL_9:
          uint64_t v21 = v20;
          unint64_t v18 = (v30 - 1) & v30;
          unint64_t v23 = __clz(__rbit64(v30)) + (v29 << 6);
          int64_t v53 = v29;
          goto LABEL_5;
        }
        int64_t v32 = v29 + 2;
        int64_t v53 = v29 + 1;
        if (v29 + 2 < v43) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v12, 1, 1, v33);
    unint64_t v18 = 0;
  }
  unint64_t v30 = *(void *)(v42 + 8 * v32);
  if (v30)
  {
    v29 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v29 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v29 >= v43)
    {
      int64_t v53 = v41;
      goto LABEL_21;
    }
    unint64_t v30 = *(void *)(v42 + 8 * v29);
    ++v32;
    if (v30) {
      goto LABEL_9;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1C411B03C(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  int64_t v10 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v18 >= v7) {
      goto LABEL_19;
    }
    unint64_t v19 = *(void *)(v21 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v7) {
        goto LABEL_19;
      }
      unint64_t v19 = *(void *)(v21 + 8 * v10);
      if (!v19) {
        break;
      }
    }
LABEL_18:
    unint64_t v6 = (v19 - 1) & v19;
    unint64_t v12 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_5:
    uint64_t v13 = *(void *)(*(void *)(a2 + 56) + 8 * v12);
    uint64_t v14 = *(void *)(a1 + 64);
    long long v15 = *(_OWORD *)(a1 + 16);
    v22[0] = *(_OWORD *)a1;
    v22[1] = v15;
    long long v16 = *(_OWORD *)(a1 + 48);
    void v22[2] = *(_OWORD *)(a1 + 32);
    v22[3] = v16;
    uint64_t v23 = v14;
    sub_1C4498608();
    uint64_t v17 = *(void (**)(_OWORD *))(*(void *)v13 + 88);
    swift_retain();
    v17(v22);
    swift_release();
    uint64_t result = sub_1C4498628();
    v9 ^= result;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v7)
  {
LABEL_19:
    swift_release();
    return sub_1C4498608();
  }
  unint64_t v19 = *(void *)(v21 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_19;
    }
    unint64_t v19 = *(void *)(v21 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_18;
    }
  }
LABEL_21:
  __break(1u);
  return result;
}

unint64_t sub_1C411B204()
{
  unint64_t result = qword_1EA39D840;
  if (!qword_1EA39D840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D840);
  }
  return result;
}

uint64_t sub_1C411B258@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return CRVersion.subscript.getter(a1, a2);
}

uint64_t sub_1C411B294()
{
  return 0;
}

void *assignWithCopy for CRVersion(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for CRVersion(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CRVersion()
{
  return &type metadata for CRVersion;
}

ValueMetadata *type metadata accessor for Seen()
{
  return &type metadata for Seen;
}

unint64_t sub_1C411B368()
{
  unint64_t result = qword_1EA39D848;
  if (!qword_1EA39D848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D848);
  }
  return result;
}

BOOL sub_1C411B3BC(uint64_t a1)
{
  uint64_t v19 = a1;
  uint64_t v1 = sub_1C44967A8();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78);
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C44967C8();
  sub_1C4496798();
  long long v16 = *(void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v17 = v4;
  v16(v4, v1);
  uint64_t v9 = &v8[*(int *)(v6 + 44)];
  sub_1C3FA0E84((unint64_t *)&qword_1EBBBEE28, MEMORY[0x1E4F27CE0]);
  uint64_t v18 = v2 + 8;
  int64_t v10 = (void (**)(char *, char *, uint64_t))(v2 + 16);
  do
  {
    uint64_t v11 = *(void *)v9;
    sub_1C4497818();
    uint64_t v12 = v20[0];
    if (v11 == v20[0]) {
      break;
    }
    uint64_t v13 = (void (*)(uint64_t *, void))sub_1C44978C8();
    v13(v20, 0);
    uint64_t v14 = v17;
    (*v10)(v17, v8, v1);
    sub_1C4497828();
    v16(v14, v1);
  }
  while ((sub_1C44966A8() & 1) == 0);
  sub_1C3F962E0((uint64_t)v8, &qword_1EBBBCA78);
  return v11 != v12;
}

uint64_t sub_1C411B61C@<X0>(uint64_t a1@<X8>)
{
  return sub_1C3F63904(a1);
}

void sub_1C411B634(uint64_t a1, uint64_t (*a2)(id *))
{
  type metadata accessor for Key(0);
  sub_1C3F8B6B0((unint64_t *)&qword_1EA39B340, type metadata accessor for Key);
  uint64_t v4 = (void *)sub_1C44976A8();
  int64_t i = 0;
  uint64_t v7 = a1 + 64;
  uint64_t v6 = *(void *)(a1 + 64);
  v19[1] = v4;
  uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
  if (-v8 < 64) {
    uint64_t v9 = ~(-1 << -(char)v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & v6;
  int64_t v11 = (unint64_t)(63 - v8) >> 6;
  if ((v9 & v6) != 0) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v14 = i + 1;
  if (!__OFADD__(i, 1))
  {
    if (v14 < v11)
    {
      unint64_t v15 = *(void *)(v7 + 8 * v14);
      int64_t v16 = i + 1;
      if (v15) {
        goto LABEL_25;
      }
      int64_t v16 = i + 2;
      if (i + 2 >= v11) {
        goto LABEL_29;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v16);
      if (v15) {
        goto LABEL_25;
      }
      int64_t v16 = i + 3;
      if (i + 3 >= v11) {
        goto LABEL_29;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v16);
      if (v15) {
        goto LABEL_25;
      }
      int64_t v16 = i + 4;
      if (i + 4 >= v11) {
        goto LABEL_29;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v16);
      if (v15) {
        goto LABEL_25;
      }
      int64_t v16 = i + 5;
      if (i + 5 >= v11) {
        goto LABEL_29;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v16);
      if (v15)
      {
LABEL_25:
        unint64_t v10 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
        for (i = v16; ; unint64_t v13 = v12 | (i << 6))
        {
          v19[0] = *(id *)(*(void *)(a1 + 48) + 8 * v13);
          id v18 = v19[0];
          if (a2(v19))
          {
            sub_1C406CA18(v19, v18);

            if (!v10) {
              goto LABEL_8;
            }
          }
          else
          {

            if (!v10) {
              goto LABEL_8;
            }
          }
LABEL_7:
          unint64_t v12 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
        }
      }
      int64_t v17 = i + 6;
      if (i + 6 < v11)
      {
        unint64_t v15 = *(void *)(v7 + 8 * v17);
        if (v15)
        {
          int64_t v16 = i + 6;
          goto LABEL_25;
        }
        while (1)
        {
          int64_t v16 = v17 + 1;
          if (__OFADD__(v17, 1)) {
            goto LABEL_31;
          }
          if (v16 >= v11) {
            break;
          }
          unint64_t v15 = *(void *)(v7 + 8 * v16);
          ++v17;
          if (v15) {
            goto LABEL_25;
          }
        }
      }
    }
LABEL_29:
    sub_1C3F7FCE8();
    swift_release();
    return;
  }
  __break(1u);
LABEL_31:
  __break(1u);
}

uint64_t sub_1C411B868(uint64_t a1)
{
  sub_1C411FA58();
  uint64_t result = sub_1C44976A8();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    int64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    sub_1C3F7E324(*v11, v13);
    sub_1C406E980(v17, v12, v13);
    uint64_t result = sub_1C3F7E2CC(v17[0], v17[1]);
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1C411BA08(char *a1)
{
  char v61 = a1;
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC690);
  uint64_t v58 = *(void *)(v63 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v63);
  uint64_t v4 = (char *)v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (void *)((char *)v55 - v5);
  uint64_t v7 = type metadata accessor for Proto_Value(0);
  uint64_t v62 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v9 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Proto_CustomCRValue(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v1;
  uint64_t v13 = *(void *)(v1 + 16);
  uint64_t v14 = type metadata accessor for CRStructEncoder();
  uint64_t v15 = swift_allocObject();
  int64_t v16 = (void *)(v15 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value);
  uint64_t v17 = MEMORY[0x1E4FBC860];
  *int64_t v16 = MEMORY[0x1E4FBC860];
  v16[1] = v17;
  swift_retain();
  sub_1C4496888();
  *(void *)(v15 + 16) = v13;
  v65[3] = v14;
  uint64_t v18 = v15;
  v65[4] = sub_1C3F8B6B0((unint64_t *)&qword_1EBBBC658, (void (*)(uint64_t))type metadata accessor for CRStructEncoder);
  v65[0] = v15;
  sub_1C4496498();
  sub_1C3F8B6B0(&qword_1EA39D910, MEMORY[0x1E4F276F0]);
  swift_retain();
  uint64_t v19 = v66;
  sub_1C4497068();
  if (v19)
  {
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
  }
  else
  {
    long long v57 = v12;
    __int16 v60 = v9;
    char v61 = v4;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
    uint64_t v21 = (void *)(v15 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value);
    swift_beginAccess();
    unint64_t v22 = (void *)*v21;
    if (*(void *)(*v21 + 16))
    {
      long long v56 = v21;
      uint64_t v23 = v21[1];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v24 = (void *)sub_1C3F6E780((uint64_t)v22, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v64 = v24;
      sub_1C3F6EEDC(&v64);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v26 = v63;
      uint64_t v25 = v64;
      int64_t v27 = v64[2];
      uint64_t v28 = (uint64_t *)v61;
      uint64_t v29 = v58;
      if (v27)
      {
        v55[2] = 0;
        v55[3] = v18;
        char v64 = (void *)MEMORY[0x1E4FBC860];
        sub_1C3F6ECAC(0, v27, 0);
        uint64_t v30 = *(unsigned __int8 *)(v29 + 80);
        v55[1] = v25;
        uint64_t v31 = (uint64_t)v25 + ((v30 + 32) & ~v30);
        uint64_t v66 = *(void *)(v29 + 72);
        int64_t v32 = v64;
        uint64_t v33 = v31;
        int64_t v34 = v27;
        do
        {
          sub_1C3F970C4(v33, (uint64_t)v6, &qword_1EBBBC690);
          uint64_t v35 = *(int *)(v26 + 48);
          uint64_t v36 = (uint64_t)v28 + v35;
          uint64_t v37 = (uint64_t)v6 + v35;
          long long v38 = v28;
          uint64_t v39 = *v6;
          *long long v38 = *v6;
          sub_1C3F8B348(v37, v36, type metadata accessor for Proto_Value);
          sub_1C3F8B108(v36, type metadata accessor for Proto_Value);
          sub_1C3F962E0((uint64_t)v6, &qword_1EBBBC690);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1C3F6ECAC(0, v32[2] + 1, 1);
            int64_t v32 = v64;
          }
          unint64_t v41 = v32[2];
          unint64_t v40 = v32[3];
          if (v41 >= v40 >> 1)
          {
            sub_1C3F6ECAC(v40 > 1, v41 + 1, 1);
            int64_t v32 = v64;
          }
          v32[2] = v41 + 1;
          v32[v41 + 4] = v39;
          v33 += v66;
          --v34;
          uint64_t v26 = v63;
          uint64_t v28 = (uint64_t *)v61;
        }
        while (v34);
        void *v56 = v32;
        swift_bridgeObjectRelease();
        char v64 = (void *)MEMORY[0x1E4FBC860];
        sub_1C3F6EE30(0, v27, 0);
        uint64_t v42 = v64;
        uint64_t v43 = (uint64_t)v60;
        do
        {
          sub_1C3F970C4(v31, (uint64_t)v6, &qword_1EBBBC690);
          uint64_t v44 = *(int *)(v26 + 48);
          uint64_t v45 = (uint64_t)v28 + v44;
          sub_1C3F8B348((uint64_t)v6 + v44, (uint64_t)v28 + v44, type metadata accessor for Proto_Value);
          sub_1C3F8AC40(v45, v43, type metadata accessor for Proto_Value);
          sub_1C3F962E0((uint64_t)v6, &qword_1EBBBC690);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1C3F6EE30(0, v42[2] + 1, 1);
            uint64_t v42 = v64;
          }
          uint64_t v46 = v62;
          unint64_t v48 = v42[2];
          unint64_t v47 = v42[3];
          if (v48 >= v47 >> 1)
          {
            sub_1C3F6EE30(v47 > 1, v48 + 1, 1);
            uint64_t v46 = v62;
            uint64_t v42 = v64;
          }
          v42[2] = v48 + 1;
          uint64_t v49 = (uint64_t)v42
              + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))
              + *(void *)(v46 + 72) * v48;
          uint64_t v43 = (uint64_t)v60;
          sub_1C3F8AC40((uint64_t)v60, v49, type metadata accessor for Proto_Value);
          v31 += v66;
          --v27;
        }
        while (v27);
        swift_release();
        unint64_t v50 = (void *)MEMORY[0x1E4FBC860];
        uint64_t v21 = v56;
      }
      else
      {
        uint64_t v21 = v56;
        unint64_t v50 = (void *)MEMORY[0x1E4FBC860];
        void *v56 = MEMORY[0x1E4FBC860];
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v42 = v50;
      }
      v21[1] = v42;
      swift_bridgeObjectRelease();
      unint64_t v22 = (void *)*v21;
      unint64_t v51 = *(void *)(*v21 + 16);
    }
    else
    {
      unint64_t v51 = 0;
      unint64_t v50 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v52 = (uint64_t)v57;
    int64_t v53 = sub_1C3F8B454(0, v51);
    BOOL v54 = sub_1C3F6EED8(v22, v53);
    swift_release();
    if (v54)
    {
      *uint64_t v21 = v50;
      swift_bridgeObjectRelease();
    }
    sub_1C3F8B348((uint64_t)v21, v52, type metadata accessor for Proto_CustomCRValue);
    swift_beginAccess();
    sub_1C3F6FE54(v52);
    return swift_release();
  }
}

uint64_t sub_1C411C118(char *a1)
{
  uint64_t v58 = a1;
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC690);
  uint64_t v56 = *(void *)(v61 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v61);
  char v65 = (void *)((char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (void *)((char *)v53 - v4);
  uint64_t v6 = type metadata accessor for Proto_Value(0);
  uint64_t v59 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v60 = (uint64_t)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_CustomCRValue(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39D8C8);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = v1;
  uint64_t v15 = *(void *)(v1 + 16);
  type metadata accessor for CRStructEncoder();
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = (void *)(v16 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value);
  uint64_t v18 = MEMORY[0x1E4FBC860];
  *uint64_t v17 = MEMORY[0x1E4FBC860];
  v17[1] = v18;
  swift_retain();
  sub_1C4496888();
  *(void *)(v16 + 16) = v15;
  uint64_t v64 = v16;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39D8E0);
  sub_1C3F815A4(&qword_1EA39D8E8, &qword_1EA39D8E0);
  sub_1C4498058();
  uint64_t v64 = (uint64_t)v58;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBBBCB8);
  sub_1C411F824(&qword_1EA39D8D0, (void (*)(void))sub_1C411F8A0);
  uint64_t v19 = v62;
  sub_1C4498048();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (v19) {
    return swift_release();
  }
  uint64_t v21 = v56;
  uint64_t v58 = v10;
  unint64_t v22 = (void *)(v16 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value);
  swift_beginAccess();
  uint64_t v23 = (void *)*v22;
  uint64_t v24 = v16;
  if (*(void *)(*v22 + 16))
  {
    BOOL v54 = v22;
    uint64_t v25 = v22[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v26 = (void *)sub_1C3F6E780((uint64_t)v23, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v63 = v26;
    sub_1C3F6EEDC(&v63);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v27 = v63;
    int64_t v28 = v63[2];
    uint64_t v29 = v61;
    uint64_t v30 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v55 = 0;
    if (v28)
    {
      v53[2] = v24;
      uint64_t v63 = (void *)MEMORY[0x1E4FBC860];
      sub_1C3F6ECAC(0, v28, 0);
      uint64_t v31 = *(unsigned __int8 *)(v21 + 80);
      v53[1] = v27;
      uint64_t v32 = (uint64_t)v27 + ((v31 + 32) & ~v31);
      uint64_t v62 = *(void *)(v21 + 72);
      uint64_t v33 = v63;
      uint64_t v34 = v32;
      int64_t v35 = v28;
      do
      {
        sub_1C3F970C4(v34, (uint64_t)v5, &qword_1EBBBC690);
        uint64_t v36 = *(int *)(v29 + 48);
        uint64_t v37 = v65;
        uint64_t v38 = (uint64_t)v65 + v36;
        uint64_t v39 = *v5;
        uint64_t *v65 = *v5;
        sub_1C3F8B348((uint64_t)v5 + v36, (uint64_t)v37 + v36, type metadata accessor for Proto_Value);
        sub_1C3F8B108(v38, type metadata accessor for Proto_Value);
        sub_1C3F962E0((uint64_t)v5, &qword_1EBBBC690);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1C3F6ECAC(0, v33[2] + 1, 1);
          uint64_t v33 = v63;
        }
        unint64_t v41 = v33[2];
        unint64_t v40 = v33[3];
        if (v41 >= v40 >> 1)
        {
          sub_1C3F6ECAC(v40 > 1, v41 + 1, 1);
          uint64_t v33 = v63;
        }
        v33[2] = v41 + 1;
        v33[v41 + 4] = v39;
        uint64_t v29 = v61;
        v34 += v62;
        --v35;
      }
      while (v35);
      *BOOL v54 = v33;
      swift_bridgeObjectRelease();
      uint64_t v63 = (void *)MEMORY[0x1E4FBC860];
      sub_1C3F6EE30(0, v28, 0);
      uint64_t v30 = v63;
      uint64_t v42 = v60;
      do
      {
        sub_1C3F970C4(v32, (uint64_t)v5, &qword_1EBBBC690);
        uint64_t v43 = *(int *)(v29 + 48);
        uint64_t v44 = (uint64_t)v65 + v43;
        sub_1C3F8B348((uint64_t)v5 + v43, (uint64_t)v65 + v43, type metadata accessor for Proto_Value);
        sub_1C3F8AC40(v44, v42, type metadata accessor for Proto_Value);
        sub_1C3F962E0((uint64_t)v5, &qword_1EBBBC690);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1C3F6EE30(0, v30[2] + 1, 1);
          uint64_t v30 = v63;
        }
        uint64_t v45 = v59;
        unint64_t v47 = v30[2];
        unint64_t v46 = v30[3];
        if (v47 >= v46 >> 1)
        {
          sub_1C3F6EE30(v46 > 1, v47 + 1, 1);
          uint64_t v45 = v59;
          uint64_t v30 = v63;
        }
        v30[2] = v47 + 1;
        uint64_t v48 = (uint64_t)v30
            + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))
            + *(void *)(v45 + 72) * v47;
        uint64_t v42 = v60;
        sub_1C3F8AC40(v60, v48, type metadata accessor for Proto_Value);
        v32 += v62;
        --v28;
      }
      while (v28);
      swift_release();
      unint64_t v22 = v54;
    }
    else
    {
      unint64_t v22 = v54;
      *BOOL v54 = MEMORY[0x1E4FBC860];
      swift_release();
      swift_bridgeObjectRelease();
    }
    v22[1] = v30;
    swift_bridgeObjectRelease();
    uint64_t v23 = (void *)*v22;
    unint64_t v49 = *(void *)(*v22 + 16);
  }
  else
  {
    uint64_t v55 = 0;
    unint64_t v49 = 0;
  }
  uint64_t v50 = (uint64_t)v58;
  unint64_t v51 = sub_1C3F8B454(0, v49);
  BOOL v52 = sub_1C3F6EED8(v23, v51);
  swift_release();
  if (v52)
  {
    *unint64_t v22 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRelease();
  }
  sub_1C3F8B348((uint64_t)v22, v50, type metadata accessor for Proto_CustomCRValue);
  swift_beginAccess();
  sub_1C3F6FE54(v50);
  return swift_release();
}

void CRValueStruct.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1C411C8E0()
{
  return sub_1C4498628();
}

uint64_t sub_1C411C924()
{
  return sub_1C4498608();
}

uint64_t sub_1C411C94C()
{
  return sub_1C4498628();
}

void *sub_1C411C98C@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != -1;
  return result;
}

void sub_1C411C9A0(void *a1@<X8>)
{
  *a1 = -1;
}

unint64_t sub_1C411C9AC()
{
  return 0xD000000000000010;
}

uint64_t sub_1C411C9C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C411F748(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1C411C9F4()
{
  return -1;
}

uint64_t sub_1C411CA00@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != -1;
  return result;
}

void sub_1C411CA10(void *a1@<X8>)
{
  *a1 = &unk_1F1F9A2F0;
}

uint64_t sub_1C411CA24()
{
  uint64_t v0 = sub_1C3FF1BEC(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v2 = v0[2];
  unint64_t v1 = v0[3];
  if (v2 >= v1 >> 1) {
    uint64_t v0 = sub_1C3FF1BEC((void *)(v1 > 1), v2 + 1, 1, v0);
  }
  v0[2] = v2 + 1;
  v0[v2 + 4] = -1;
  uint64_t v3 = sub_1C3FAE4F0((uint64_t)v0);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1C411CABC()
{
  uint64_t v0 = byte_1F1F9E1D8;
  unint64_t v1 = sub_1C3FF1BEC(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  int64_t v4 = v2 >> 1;
  unint64_t v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    unint64_t v1 = sub_1C3FF1BEC((void *)(v2 > 1), v3 + 1, 1, v1);
    unint64_t v2 = v1[3];
    int64_t v4 = v2 >> 1;
  }
  v1[2] = v5;
  v1[v3 + 4] = v0;
  uint64_t v6 = byte_1F1F9E1D9;
  if (v4 < (uint64_t)(v3 + 2)) {
    unint64_t v1 = sub_1C3FF1BEC((void *)(v2 > 1), v3 + 2, 1, v1);
  }
  v1[2] = v3 + 2;
  v1[v5 + 4] = v6;
  uint64_t v7 = sub_1C3FAE4F0((uint64_t)v1);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1C411CBAC(uint64_t a1)
{
  unint64_t v2 = sub_1C411F3F4();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C411CBE8(uint64_t a1)
{
  unint64_t v2 = sub_1C411F3F4();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1C411CC24(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39D8C8);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C411F3F4();
  sub_1C44986A8();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBBBCB8);
  sub_1C411F824(&qword_1EA39D8D0, (void (*)(void))sub_1C411F8A0);
  sub_1C4498048();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1C411CDAC()
{
  uint64_t v1 = *v0;
  sub_1C44985F8();
  swift_bridgeObjectRetain();
  sub_1C411B03C((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1C4498628();
}

uint64_t sub_1C411CE04(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_bridgeObjectRetain();
  sub_1C411B03C(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C411CE50()
{
  uint64_t v1 = *v0;
  sub_1C44985F8();
  swift_bridgeObjectRetain();
  sub_1C411B03C((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_1C4498628();
}

uint64_t sub_1C411CEA4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C411CEAC(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t sub_1C411CED8(uint64_t *a1, uint64_t *a2)
{
  return sub_1C41145B4(*a1, *a2);
}

void *sub_1C411CEE4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1C411EB80(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1C411CF10(void *a1)
{
  return sub_1C411CC24(a1, *v1);
}

uint64_t sub_1C411CF2C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_1C411D6D0(v4, a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t CRExtendableValueStruct.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a4, v4, a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  uint64_t v9 = sub_1C411D6D0(v8, a1);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(v9, a2, a3);
}

uint64_t sub_1C411D05C@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (!a1) {
    a1 = sub_1C3FE49A0(MEMORY[0x1E4FBC860]);
  }
  unint64_t v6 = a1;
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_1C411D6D0(v3, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t CRExtendableValueStruct.copy(renamingReferences:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    a1 = sub_1C3FE49A0(MEMORY[0x1E4FBC860]);
  }
  unint64_t v8 = a1;
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 8) + 8) + 8);
  unint64_t v6 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v5 + 24);
  swift_bridgeObjectRetain();
  v6(&v8, a2, v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C411D198(uint64_t a1)
{
  return sub_1C411D1A0(a1, *v1);
}

uint64_t sub_1C411D1A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v10);
        if (!v15)
        {
          int64_t v10 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v10);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_5:
    uint64_t v13 = *(void (**)(uint64_t))(**(void **)(*(void *)(a2 + 56) + 8 * v12) + 120);
    swift_retain();
    v13(a1);
    uint64_t result = swift_release();
  }
  int64_t v16 = v14 + 4;
  if (v16 < v8)
  {
    unint64_t v15 = *(void *)(v4 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v10 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_27;
        }
        if (v10 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v10);
        ++v16;
        if (v15) {
          goto LABEL_22;
        }
      }
    }
    int64_t v10 = v16;
    goto LABEL_22;
  }
LABEL_23:
  return swift_release();
}

uint64_t CRExtendableValueStruct.visitReferences(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  uint64_t v5 = result;
  int64_t v6 = 0;
  uint64_t v7 = result + 64;
  uint64_t v8 = 1 << *(unsigned char *)(result + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(result + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_25:
      __break(1u);
      return result;
    }
    if (v15 >= v11) {
      goto LABEL_21;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    ++v6;
    if (!v16)
    {
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v11) {
        goto LABEL_21;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v6);
      if (!v16)
      {
        int64_t v6 = v15 + 2;
        if (v15 + 2 >= v11) {
          goto LABEL_21;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v6);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v13 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    int64_t v14 = *(void (**)(uint64_t))(**(void **)(*(void *)(v5 + 56) + 8 * v13) + 120);
    swift_retain();
    v14(a1);
    uint64_t result = swift_release();
  }
  int64_t v17 = v15 + 3;
  if (v17 < v11)
  {
    unint64_t v16 = *(void *)(v7 + 8 * v17);
    if (!v16)
    {
      while (1)
      {
        int64_t v6 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          goto LABEL_25;
        }
        if (v6 >= v11) {
          goto LABEL_21;
        }
        unint64_t v16 = *(void *)(v7 + 8 * v6);
        ++v17;
        if (v16) {
          goto LABEL_20;
        }
      }
    }
    int64_t v6 = v17;
    goto LABEL_20;
  }
LABEL_21:
  return swift_release();
}

uint64_t sub_1C411D4E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1C4456DCC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1C411D50C()
{
  uint64_t v2 = *v0;
  uint64_t result = sub_1C3F6DD10();
  if (!v1)
  {
    swift_retain();
    sub_1C411C118(v2);
    return swift_release();
  }
  return result;
}

uint64_t AnyCRValue.init(from:)(uint64_t a1)
{
  sub_1C3FE3FF0();
  swift_allocError();
  *(void *)uint64_t v2 = 0xD000000000000027;
  *(void *)(v2 + 8) = 0x80000001C44B2710;
  *(unsigned char *)(v2 + 16) = 3;
  swift_willThrow();
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_1C411D5E0(uint64_t a1)
{
  sub_1C3FE3FF0();
  swift_allocError();
  *(void *)uint64_t v2 = 0xD000000000000027;
  *(void *)(v2 + 8) = 0x80000001C44B2710;
  *(unsigned char *)(v2 + 16) = 3;
  swift_willThrow();
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_1C411D65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C44573B8(a1, a2);
}

uint64_t sub_1C411D674()
{
  uint64_t result = sub_1C3F6DD10();
  if (!v1)
  {
    swift_retain();
    sub_1C411BA08(v0);
    return swift_release();
  }
  return result;
}

uint64_t sub_1C411D6D0(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BFA0);
  uint64_t result = sub_1C4497FB8();
  uint64_t v4 = (void *)result;
  int64_t v5 = 0;
  uint64_t v26 = a1;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = a1 + 64;
  uint64_t v6 = v8;
  uint64_t v9 = 1 << *(unsigned char *)(v7 - 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v6;
  uint64_t v24 = v7;
  int64_t v25 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = result + 64;
  if ((v10 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v13 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v5 << 6))
  {
    uint64_t v18 = *(void *)(*(void *)(v26 + 48) + 8 * i);
    uint64_t v19 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v26 + 56) + 8 * i) + 104);
    swift_retain();
    uint64_t v20 = v19(a2);
    uint64_t result = swift_release();
    *(void *)(v12 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(void *)(v4[6] + 8 * i) = v18;
    *(void *)(v4[7] + 8 * i) = v20;
    uint64_t v21 = v4[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    _OWORD v4[2] = v23;
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_24;
    }
    if (v15 >= v25) {
      return (uint64_t)v4;
    }
    unint64_t v16 = *(void *)(v24 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v25) {
        return (uint64_t)v4;
      }
      unint64_t v16 = *(void *)(v24 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v25) {
          return (uint64_t)v4;
        }
        unint64_t v16 = *(void *)(v24 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v11 = (v16 - 1) & v16;
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v25) {
    return (uint64_t)v4;
  }
  unint64_t v16 = *(void *)(v24 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v25) {
      return (uint64_t)v4;
    }
    unint64_t v16 = *(void *)(v24 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t *sub_1C411D8F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (uint64_t *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBBF48);
  uint64_t v3 = (uint64_t *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  uint64_t v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1C42329D0((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1C3F7FCE8();
  if (v6 != v1)
  {
    __break(1u);
    return (uint64_t *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

void *sub_1C411D9D8(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39B0A8);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = _swift_stdlib_malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      uint64_t v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_1C411E95C((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1C4497FA8();
    swift_bridgeObjectRelease();
    if (!v2) {
      return (void *)MEMORY[0x1E4FBC860];
    }
  }
  return v3;
}

uint64_t sub_1C411DAD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBA228);
  uint64_t v3 = swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size((const void *)v3);
  int64_t v5 = v4 - 32;
  if (v4 < 32) {
    int64_t v5 = v4 - 31;
  }
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v5 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v6 = sub_1C4232BD0(&v8, (_WORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_1C3F7FCE8();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return MEMORY[0x1E4FBC860];
  }
  return v3;
}

uint64_t sub_1C411DBB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39B0A0);
  uint64_t v3 = swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * v4 - 64;
  int64_t v5 = sub_1C4232D64(&v7, (unsigned char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_1C3F7FCE8();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return MEMORY[0x1E4FBC860];
  }
  return v3;
}

size_t sub_1C411DC8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39C0F0);
  uint64_t v3 = *(void *)(type metadata accessor for Replica() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      uint64_t v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      uint64_t v9 = sub_1C42330F8(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_1C3F7FCE8();
      if (v9 == v1) {
        return (size_t)v6;
      }
      __break(1u);
      return MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C411DDE0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC690);
  uint64_t v8 = MEMORY[0x1F4188790](v48);
  uint64_t v50 = (unint64_t *)((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (unint64_t *)((char *)&v45 - v10);
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_70;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_71;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v53 = a1;
  unint64_t v52 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v29 = a4 + v18;
      unint64_t v51 = a4 + v18;
      unint64_t v53 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v31 = -v13;
        unint64_t v46 = a1;
        unint64_t v47 = a4;
        do
        {
          unint64_t v49 = a3 + v31;
          sub_1C3F970C4(v29 + v31, (uint64_t)v11, &qword_1EBBBC690);
          unint64_t v32 = a2 + v31;
          unint64_t v33 = a3;
          uint64_t v34 = v11;
          int64_t v35 = v50;
          sub_1C3F970C4(a2 + v31, (uint64_t)v50, &qword_1EBBBC690);
          unint64_t v36 = *v34;
          unint64_t v37 = *v35;
          uint64_t v38 = (uint64_t)v35;
          unint64_t v11 = v34;
          sub_1C3F962E0(v38, &qword_1EBBBC690);
          sub_1C3F962E0((uint64_t)v34, &qword_1EBBBC690);
          if (v36 >= v37)
          {
            unint64_t v42 = v51;
            v51 += v31;
            a3 = v49;
            if (v33 < v42 || v49 >= v42)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v33 != v42)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v32 = a2;
            unint64_t v41 = v46;
            unint64_t v40 = v47;
          }
          else
          {
            a3 = v49;
            if (v33 < a2 || v49 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v41 = v46;
              unint64_t v40 = v47;
            }
            else
            {
              BOOL v39 = v33 == a2;
              unint64_t v41 = v46;
              unint64_t v40 = v47;
              if (!v39) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v53 += v31;
          }
          unint64_t v29 = v51;
          if (v51 <= v40) {
            break;
          }
          a2 = v32;
        }
        while (v32 > v41);
      }
      goto LABEL_68;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v49 = a4 + v17;
    unint64_t v51 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_1C3F970C4(a2, (uint64_t)v11, &qword_1EBBBC690);
        uint64_t v20 = a4;
        uint64_t v21 = v50;
        sub_1C3F970C4(v20, (uint64_t)v50, &qword_1EBBBC690);
        unint64_t v22 = *v11;
        unint64_t v23 = *v21;
        sub_1C3F962E0((uint64_t)v21, &qword_1EBBBC690);
        sub_1C3F962E0((uint64_t)v11, &qword_1EBBBC690);
        unint64_t v24 = v53;
        if (v22 >= v23)
        {
          unint64_t v27 = v52 + v13;
          if (v53 < v52 || v53 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v53 != v52)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v52 = v27;
          unint64_t v25 = a2;
        }
        else
        {
          unint64_t v25 = a2 + v13;
          if (v53 < a2 || v53 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v53 == a2)
          {
            unint64_t v24 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        unint64_t v53 = v24 + v13;
        a4 = v52;
        if (v52 >= v49) {
          break;
        }
        a2 = v25;
      }
      while (v25 < a3);
    }
LABEL_68:
    sub_1C411E3B0(&v53, &v52, (uint64_t *)&v51, &qword_1EBBBC690);
    return 1;
  }
LABEL_72:
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

char *sub_1C411E2A8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BFA8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1C411E3A4(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1C411E3B0(a1, a2, a3, &qword_1EBBC0798);
}

uint64_t sub_1C411E3B0(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_18;
  }
  if (v9 / v8 < 0)
  {
LABEL_19:
    uint64_t result = sub_1C4497FE8();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v4 != v5)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_1C411E4F0(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  else {
    uint64_t v5 = v4 + 1;
  }
  if (v4 <= -2)
  {
    uint64_t result = (char *)sub_1C4497FE8();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 1;
    if (result != v3 || result >= &v3[2 * v7])
    {
      return (char *)memmove(result, v3, 2 * v7);
    }
  }
  return result;
}

char *sub_1C411E5A8(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  int64_t v4 = *a3 - (void)v3;
  if (v4 < 0)
  {
    uint64_t result = (char *)sub_1C4497FE8();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    if (result != v3 || result >= &v3[v4])
    {
      return (char *)memmove(result, v3, v4);
    }
  }
  return result;
}

uint64_t sub_1C411E64C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1C411E738(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for Replica);
}

char *sub_1C411E664(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)sub_1C4497FE8();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

uint64_t sub_1C411E720(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1C411E738(a1, a2, a3, MEMORY[0x1E4F27990]);
}

uint64_t sub_1C411E738(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = a4(0);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_18;
  }
  if (v9 / v8 < 0)
  {
LABEL_19:
    uint64_t result = sub_1C4497FE8();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v4 != v5)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_1C411E87C(uint64_t a1)
{
  return sub_1C411E2A8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void (*sub_1C411E890(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1C44221B8(v6, a2, a3);
  return sub_1C4108048;
}

uint64_t sub_1C411E8F8(void *a1)
{
  return sub_1C40130C8(0, a1[2], 0, a1);
}

uint64_t sub_1C411E90C(uint64_t a1)
{
  return sub_1C4013538(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1C411E920(uint64_t a1)
{
  return sub_1C4013694(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1C411E934(void *a1)
{
  return sub_1C40137E4(0, a1[2], 0, a1);
}

uint64_t sub_1C411E948(uint64_t a1)
{
  return sub_1C4012F5C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1C411E95C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1C4497FA8();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1C4497FA8();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1C3F815A4(&qword_1EA39D908, &qword_1EA39D900);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39D900);
          uint64_t v12 = sub_1C411E890(v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for CRDecodeContext.AnyDecodingReference();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

void *sub_1C411EB80(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39D8B0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C411F3F4();
  sub_1C4498678();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBBBCB8);
    sub_1C411F824(&qword_1EA39D8B8, (void (*)(void))sub_1C411F7D0);
    sub_1C4498028();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_1C411ED30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1C411F9B0();
  uint64_t result = sub_1C44976A8();
  uint64_t v12 = result;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(a1 + 56);
    do
    {
      uint64_t v5 = *(v4 - 3);
      uint64_t v6 = *(v4 - 2);
      uint64_t v7 = *(v4 - 1);
      unint64_t v8 = *v4;
      sub_1C3FE3ADC(v5);
      sub_1C3F7E324(v7, v8);
      sub_1C406CD38(v11, v5, v6, v7, v8);
      uint64_t v9 = v11[2];
      unint64_t v10 = v11[3];
      sub_1C3F870F4(v11[0]);
      sub_1C3F7E2CC(v9, v10);
      v4 += 4;
      --v2;
    }
    while (v2);
    return v12;
  }
  return result;
}

uint64_t sub_1C411EDFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1C3F782A0();
  uint64_t result = sub_1C44976A8();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      sub_1C3F7E324(v5, *v4);
      sub_1C3F81BF8(v7, v5, v6);
      sub_1C3F7E2CC(v7[0], v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1C411EE98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_1C44976A8();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int16 *)(a1 + 32);
    do
    {
      unsigned int v5 = *v4++;
      sub_1C406E508(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1C411EF0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1C411FA04();
  uint64_t result = sub_1C44976A8();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      unsigned int v5 = *v4++;
      sub_1C406E60C(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1C411EF80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for URLResourceKey(0);
  sub_1C3F8B6B0(&qword_1EBBBC178, type metadata accessor for URLResourceKey);
  uint64_t result = sub_1C44976A8();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      unsigned int v5 = *v4++;
      sub_1C406E72C(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1C411F03C(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1C4497FA8();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for AnyReference();
  sub_1C3F8B6B0((unint64_t *)&qword_1EA39CBA8, (void (*)(uint64_t))type metadata accessor for AnyReference);
  uint64_t result = sub_1C44976A8();
  uint64_t v4 = result;
  uint64_t v9 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1C4497FA8();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v5) {
      return v4;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      return v4;
    }
  }
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = MEMORY[0x1C8780A10](i, a1);
      }
      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * i + 32);
        swift_retain();
      }
      sub_1C406CA38(&v8, v7);
      swift_release();
    }
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t dispatch thunk of CRExtendableValueStruct.additionalFields.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CRExtendableValueStruct.additionalFields.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CRExtendableValueStruct.additionalFields.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static IntCaseIterable.intCases.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for AnyCRValueStruct()
{
  return &type metadata for AnyCRValueStruct;
}

unint64_t sub_1C411F210()
{
  unint64_t result = qword_1EA39D858;
  if (!qword_1EA39D858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D858);
  }
  return result;
}

uint64_t sub_1C411F264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C411F364(a1, a2, a3, (uint64_t (*)(void))sub_1C411F290, (uint64_t (*)(void))sub_1C411F2E4);
}

unint64_t sub_1C411F290()
{
  unint64_t result = qword_1EA39D860;
  if (!qword_1EA39D860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D860);
  }
  return result;
}

unint64_t sub_1C411F2E4()
{
  unint64_t result = qword_1EA39D868;
  if (!qword_1EA39D868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D868);
  }
  return result;
}

uint64_t sub_1C411F338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C411F364(a1, a2, a3, (uint64_t (*)(void))sub_1C411F3A0, (uint64_t (*)(void))sub_1C411F3F4);
}

uint64_t sub_1C411F364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 16) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t sub_1C411F3A0()
{
  unint64_t result = qword_1EA39D870;
  if (!qword_1EA39D870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D870);
  }
  return result;
}

unint64_t sub_1C411F3F4()
{
  unint64_t result = qword_1EA39D878;
  if (!qword_1EA39D878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D878);
  }
  return result;
}

unint64_t sub_1C411F44C()
{
  unint64_t result = qword_1EA39D880;
  if (!qword_1EA39D880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D880);
  }
  return result;
}

unint64_t sub_1C411F4A4()
{
  unint64_t result = qword_1EA39D888;
  if (!qword_1EA39D888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D888);
  }
  return result;
}

uint64_t sub_1C411F4F8()
{
  return sub_1C3F815A4(&qword_1EA39D890, &qword_1EA39D898);
}

unint64_t sub_1C411F534(uint64_t a1)
{
  unint64_t result = sub_1C411F55C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1C411F55C()
{
  unint64_t result = qword_1EA39D8A0;
  if (!qword_1EA39D8A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D8A0);
  }
  return result;
}

unint64_t sub_1C411F5B4()
{
  unint64_t result = qword_1EA39D8A8;
  if (!qword_1EA39D8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D8A8);
  }
  return result;
}

uint64_t sub_1C411F608(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1C411F95C();
  uint64_t result = sub_1C44976A8();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1C406F3CC((uint64_t)&v7, v5, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1C411F6B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_1C44976A8();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1C406F5D8(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1C411F748(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001C44B2740)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_1C44982E8();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_1C411F7D0()
{
  unint64_t result = qword_1EA39D8C0;
  if (!qword_1EA39D8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D8C0);
  }
  return result;
}

uint64_t sub_1C411F824(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EBBBBCB8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1C411F8A0()
{
  unint64_t result = qword_1EA39D8D8;
  if (!qword_1EA39D8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D8D8);
  }
  return result;
}

uint64_t sub_1C411F8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1C411F95C()
{
  unint64_t result = qword_1EA39D8F0;
  if (!qword_1EA39D8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D8F0);
  }
  return result;
}

unint64_t sub_1C411F9B0()
{
  unint64_t result = qword_1EA39D8F8;
  if (!qword_1EA39D8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D8F8);
  }
  return result;
}

unint64_t sub_1C411FA04()
{
  unint64_t result = qword_1EA39AE68;
  if (!qword_1EA39AE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39AE68);
  }
  return result;
}

unint64_t sub_1C411FA58()
{
  unint64_t result = qword_1EA39D918;
  if (!qword_1EA39D918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D918);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AnyCRValueStruct.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C411FB48);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyCRValueStruct.CodingKeys()
{
  return &type metadata for AnyCRValueStruct.CodingKeys;
}

unint64_t sub_1C411FB84()
{
  unint64_t result = qword_1EA39D920;
  if (!qword_1EA39D920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D920);
  }
  return result;
}

uint64_t sub_1C411FBD8()
{
  return swift_initClassMetadata2();
}

void *sub_1C411FC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = (void *)swift_allocObject();
  result[6] = a2;
  result[7] = a5;
  uint64_t v11 = MEMORY[0x1E4FBC868];
  result[8] = a4;
  result[2] = v11;
  result[3] = v11;
  result[4] = a3;
  result[5] = a1;
  return result;
}

uint64_t sub_1C411FCA0()
{
  uint64_t v2 = (uint64_t)v0;
  uint64_t v3 = *v0;
  uint64_t result = sub_1C4217524();
  uint64_t v5 = v1;
  if (v1) {
    return result;
  }
  uint64_t v193 = v3;
  uint64_t v195 = result;
  unint64_t v207 = v0 + 2;
  swift_beginAccess();
  uint64_t v6 = v0[2];
  if (!*(void *)(v6 + 16)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v208 = v0 + 3;
  uint64_t v194 = v0;
  while (1)
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_1C41213B8((uint64_t)sub_1C4121D94, v2, v6);
    uint64_t v191 = v5;
    if ((v7 & 0x8000000000000000) != 0 || (v7 & 0x4000000000000000) != 0)
    {
      uint64_t v8 = (uint64_t)sub_1C411D9D8(v7);
      unint64_t v7 = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = v7 & 0xFFFFFFFFFFFFFF8;
    }
    MEMORY[0x1F4188790](v7);
    uint64_t v10 = *(void *)(v9 + 216);
    v188[2] = *(void *)(v9 + 208);
    v188[3] = v10;
    v188[4] = v195;
    uint64_t v11 = type metadata accessor for CRDecodeContext.AnyDecodingReference();
    uint64_t v12 = type metadata accessor for CRDataStoreBundleDecodeContext();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA39B0B0);
    uint64_t v14 = (uint64_t)v194;
    uint64_t v199 = v8;
    sub_1C410A47C((void (*)(void))sub_1C4121DB4, (uint64_t)v194, (uint64_t)sub_1C4121DBC, (uint64_t)v188, v8, v11, v12, v13);
    uint64_t v16 = v15;
    uint64_t v192 = v17;
    *(void *)(v14 + 16) = sub_1C3FE4ACC(MEMORY[0x1E4FBC860]);
    swift_bridgeObjectRelease();
    uint64_t v18 = swift_bridgeObjectRetain();
    if (MEMORY[0x1C8780160](v18, v12)) {
      break;
    }
LABEL_145:
    swift_bridgeObjectRelease();
    uint64_t v231 = v192;
    uint64_t v142 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39B068);
    uint64_t WitnessTable = swift_getWitnessTable();
    MEMORY[0x1C877FF50](&v222, v142, WitnessTable);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v231 = (void *)v222;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39B078);
    sub_1C4497F68();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39B070);
    sub_1C4497F78();
    int v144 = v229;
    if (v229 != 255)
    {
      unint64_t v145 = v222;
      uint64_t v146 = v223;
      uint64_t v148 = v224;
      uint64_t v147 = v225;
      uint64_t v149 = v226;
      unint64_t v150 = v227;
      uint64_t v151 = v199;
      unint64_t v214 = v199 & 0xC000000000000001;
      int64_t v213 = v199 + 32;
      uint64_t v152 = v228;
      do
      {
        if (v144)
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_willThrow();
        }
        LODWORD(v220) = v144;
        *(void *)&long long v219 = v145;
        uint64_t v221 = v150;
        if (v214)
        {
          sub_1C4121DC8(v146, v148, v147, v149, (uint64_t)v150, v152, 0);
          uint64_t v161 = MEMORY[0x1C8780A10](v145, v151);
        }
        else
        {
          if ((v145 & 0x8000000000000000) != 0) {
            goto LABEL_176;
          }
          if (v145 >= *(void *)(v151 + 16))
          {
LABEL_177:
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
            goto LABEL_182;
          }
          uint64_t v161 = *(void *)(v213 + 8 * v145);
          sub_1C4121F04(v145, v146, v148, v147, v149, (uint64_t)v150, v152, v144);
          swift_retain();
        }
        uint64_t v162 = v152;
        uint64_t v163 = v149;
        uint64_t v164 = *(void *)(v161 + 16);
        unint64_t v165 = *(void *)(v161 + 24);
        sub_1C3F7E324(v164, v165);
        swift_release();
        uint64_t v166 = v208;
        swift_beginAccess();
        uint64_t v216 = (uint64_t)v146;
        *(void *)&long long v218 = v148;
        uint64_t v217 = v147;
        uint64_t v167 = v147;
        uint64_t v168 = v163;
        uint64_t v169 = v163;
        unint64_t v170 = v165;
        uint64_t v171 = v164;
        uint64_t v172 = v221;
        sub_1C4121DC8(v146, v148, v167, v169, (uint64_t)v221, v162, 0);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v231 = (void *)*v166;
        uint64_t v174 = v231;
        void *v166 = 0x8000000000000000;
        unint64_t v176 = sub_1C3F850CC(v171, v170);
        uint64_t v177 = v174[2];
        BOOL v178 = (v175 & 1) == 0;
        uint64_t v179 = v177 + v178;
        if (__OFADD__(v177, v178)) {
          goto LABEL_178;
        }
        char v180 = v175;
        if (v174[3] >= v179)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_1C3F85144();
          }
        }
        else
        {
          sub_1C3F77ABC(v179, isUniquelyReferenced_nonNull_native);
          uint64_t v181 = sub_1C3F850CC(v171, v170);
          if ((v180 & 1) != (v182 & 1)) {
            goto LABEL_184;
          }
          unint64_t v176 = v181;
        }
        unint64_t v183 = v231;
        uint64_t v215 = v231;
        if (v180)
        {
          BOOL v153 = (uint64_t *)(v231[7] + 48 * v176);
          uint64_t v212 = (void *)v153[2];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v154 = (void *)v216;
          uint64_t v155 = v218;
          *BOOL v153 = v216;
          v153[1] = v155;
          unint64_t v156 = v170;
          uint64_t v157 = v217;
          v153[2] = v217;
          v153[3] = v168;
          v153[4] = (uint64_t)v172;
          v153[5] = v162;
          uint64_t v158 = v168;
        }
        else
        {
          v231[(v176 >> 6) + 8] |= 1 << v176;
          uint64_t v184 = (uint64_t *)(v183[6] + 16 * v176);
          *uint64_t v184 = v171;
          v184[1] = v170;
          uint64_t v185 = (uint64_t *)(v183[7] + 48 * v176);
          uint64_t v154 = (void *)v216;
          uint64_t v155 = v218;
          *uint64_t v185 = v216;
          v185[1] = v155;
          unint64_t v156 = v170;
          uint64_t v157 = v217;
          v185[2] = v217;
          v185[3] = v168;
          v185[4] = (uint64_t)v172;
          v185[5] = v162;
          uint64_t v186 = v183[2];
          BOOL v22 = __OFADD__(v186, 1);
          uint64_t v187 = v186 + 1;
          if (v22) {
            goto LABEL_179;
          }
          uint64_t v158 = v168;
          v183[2] = v187;
          sub_1C3F7E324(v171, v156);
        }
        void *v208 = v215;
        swift_bridgeObjectRelease();
        sub_1C3F7E2CC(v171, v156);
        swift_endAccess();
        int v159 = v219;
        unsigned __int8 v160 = v220;
        sub_1C4121E40(v219, v154, v155, v157, v158, (uint64_t)v172, v162, v220);
        sub_1C4121E40(v159, v154, v155, v157, v158, (uint64_t)v172, v162, v160);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39B070);
        sub_1C4497F78();
        unint64_t v145 = v222;
        uint64_t v146 = v223;
        uint64_t v148 = v224;
        uint64_t v147 = v225;
        uint64_t v149 = v226;
        unint64_t v150 = v227;
        uint64_t v152 = v228;
        int v144 = v229;
        uint64_t v151 = v199;
      }
      while (v229 != 255);
    }
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v6 = *v207;
    uint64_t v5 = v191;
    uint64_t v2 = (uint64_t)v194;
    if (!*(void *)(*v207 + 16)) {
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v19 = 0;
  uint64_t v202 = v16 + 32;
  uint64_t v201 = v16;
  uint64_t v200 = v12;
LABEL_10:
  char v21 = sub_1C44974A8();
  sub_1C4497438();
  if (v21)
  {
    uint64_t v209 = *(void *)(v202 + 8 * v19);
    swift_retain();
    BOOL v22 = __OFADD__(v19, 1);
    uint64_t v23 = v19 + 1;
    if (v22) {
      goto LABEL_175;
    }
  }
  else
  {
    uint64_t v209 = sub_1C4497DA8();
    BOOL v22 = __OFADD__(v19, 1);
    uint64_t v23 = v19 + 1;
    if (v22) {
      goto LABEL_175;
    }
  }
  uint64_t v206 = v23;
  uint64_t v24 = v209;
  swift_beginAccess();
  uint64_t v25 = *(void *)(v24 + 16);
  uint64_t v26 = v207;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char v27 = swift_isUniquelyReferenced_nonNull_native();
  int64_t v28 = (void *)*v26;
  __n128 v230 = (void *)*v26;
  *uint64_t v26 = 0x8000000000000000;
  uint64_t v29 = *(void *)(v25 + 64);
  *(void *)&long long v219 = v25 + 64;
  uint64_t v30 = -1 << *(unsigned char *)(v25 + 32);
  uint64_t v217 = ~v30;
  if (-v30 < 64) {
    uint64_t v31 = ~(-1 << -(char)v30);
  }
  else {
    uint64_t v31 = -1;
  }
  unint64_t v32 = v31 & v29;
  unint64_t v33 = (unint64_t)(63 - v30) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v34 = 0;
  *(void *)&long long v218 = v33;
  uint64_t v216 = v33 - 7;
  *(void *)&long long v220 = v25;
  uint64_t v215 = (void *)(v25 + 120);
  while (1)
  {
    if (v32)
    {
      uint64_t v36 = (v32 - 1) & v32;
      unint64_t v37 = __clz(__rbit64(v32)) | (v34 << 6);
      uint64_t v38 = v34;
    }
    else
    {
      uint64_t v38 = v34 + 1;
      if (__OFADD__(v34, 1)) {
        goto LABEL_173;
      }
      if (v38 >= (uint64_t)v218)
      {
LABEL_77:
        swift_bridgeObjectRelease();
        sub_1C3F7FCE8();
        *unint64_t v207 = (uint64_t)v28;
        swift_bridgeObjectRelease();
        swift_endAccess();
        uint64_t v74 = v209;
        swift_beginAccess();
        uint64_t v75 = *(void *)(v74 + 24);
        BOOL v76 = (void **)v208;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        int v77 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v221 = *v76;
        __n128 v230 = v221;
        *BOOL v76 = (void *)0x8000000000000000;
        uint64_t v78 = *(void *)(v75 + 64);
        int64_t v211 = v75 + 64;
        uint64_t v79 = -1 << *(unsigned char *)(v75 + 32);
        uint64_t v205 = ~v79;
        if (-v79 < 64) {
          uint64_t v80 = ~(-1 << -(char)v79);
        }
        else {
          uint64_t v80 = -1;
        }
        unint64_t v81 = v80 & v78;
        unint64_t v82 = (unint64_t)(63 - v79) >> 6;
        swift_bridgeObjectRetain();
        int64_t v83 = 0;
        int64_t v210 = v82;
        unint64_t v204 = v82 - 7;
        uint64_t v212 = (void *)v75;
        uint64_t v203 = v75 + 120;
LABEL_82:
        LODWORD(v218) = v77;
        uint64_t v215 = (void *)v83;
        if (v81)
        {
          uint64_t v216 = (v81 - 1) & v81;
          unint64_t v87 = __clz(__rbit64(v81)) | (v83 << 6);
          int64_t v88 = v83;
LABEL_97:
          uint64_t v91 = (uint64_t *)(v212[6] + 16 * v87);
          uint64_t v93 = *v91;
          unint64_t v92 = v91[1];
          uint64_t v94 = v212[7] + 48 * v87;
          uint64_t v95 = *(void *)v94;
          uint64_t v217 = *(void *)(v94 + 8);
          long long v220 = *(_OWORD *)(v94 + 16);
          long long v219 = *(_OWORD *)(v94 + 32);
          sub_1C3F7E324(v93, v92);
          swift_retain();
          uint64_t v96 = v220;
          swift_bridgeObjectRetain();
          int64_t v97 = *((void *)&v220 + 1);
          swift_bridgeObjectRetain();
          unint64_t v98 = v219;
          swift_bridgeObjectRetain();
          uint64_t v99 = *((void *)&v219 + 1);
          swift_bridgeObjectRetain();
          sub_1C3F7E324(v93, v92);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1C3F7E2CC(v93, v92);
          swift_bridgeObjectRelease();
          unint64_t v214 = v98;
          swift_bridgeObjectRelease();
          int64_t v213 = v97;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          if (v96)
          {
            uint64_t v215 = (void *)v88;
            uint64_t v100 = v221;
            unint64_t v102 = sub_1C3F850CC(v93, v92);
            uint64_t v103 = v100[2];
            BOOL v104 = (v101 & 1) == 0;
            uint64_t v105 = v103 + v104;
            if (!__OFADD__(v103, v104))
            {
              char v106 = v101;
              if (v221[3] < v105)
              {
                sub_1C3F77ABC(v105, v218 & 1);
                char v107 = v230;
                uint64_t v108 = sub_1C3F850CC(v93, v92);
                if ((v106 & 1) != (v109 & 1)) {
                  goto LABEL_184;
                }
                unint64_t v102 = v108;
                if (v106) {
                  goto LABEL_81;
                }
                goto LABEL_105;
              }
              if (v218)
              {
                char v107 = v221;
                if (v101) {
                  goto LABEL_81;
                }
                goto LABEL_105;
              }
              __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF198);
              char v117 = v221;
              uint64_t v118 = sub_1C4497FB8();
              char v107 = (void *)v118;
              if (!v117[2]) {
                goto LABEL_139;
              }
              char v119 = (char *)(v118 + 64);
              unint64_t v120 = (char *)(v221 + 8);
              unint64_t v121 = (unint64_t)((1 << *((unsigned char *)v107 + 32)) + 63) >> 6;
              uint64_t v189 = v221 + 8;
              if (v107 != v221 || v119 >= &v120[8 * v121]) {
                memmove(v119, v120, 8 * v121);
              }
              int64_t v122 = 0;
              unsigned int v123 = v221;
              v107[2] = v221[2];
              uint64_t v124 = 1 << *((unsigned char *)v123 + 32);
              uint64_t v125 = v123[8];
              if (v124 < 64) {
                uint64_t v126 = ~(-1 << v124);
              }
              else {
                uint64_t v126 = -1;
              }
              unint64_t v127 = v126 & v125;
              int64_t v190 = (unint64_t)(v124 + 63) >> 6;
              while (1)
              {
                if (v127)
                {
                  uint64_t v197 = (v127 - 1) & v127;
                  int64_t v128 = v122;
                  unint64_t v129 = __clz(__rbit64(v127)) | (v122 << 6);
                }
                else
                {
                  BOOL v22 = __OFADD__(v122, 1);
                  int64_t v139 = v122 + 1;
                  if (v22) {
                    goto LABEL_181;
                  }
                  if (v139 >= v190) {
                    goto LABEL_139;
                  }
                  unint64_t v140 = v189[v139];
                  if (!v140)
                  {
                    int64_t v141 = v139 + 1;
                    if (v139 + 1 >= v190) {
                      goto LABEL_139;
                    }
                    unint64_t v140 = v189[v141];
                    if (!v140)
                    {
                      int64_t v141 = v139 + 2;
                      if (v139 + 2 >= v190) {
                        goto LABEL_139;
                      }
                      unint64_t v140 = v189[v141];
                      if (!v140)
                      {
                        int64_t v141 = v139 + 3;
                        if (v139 + 3 >= v190) {
                          goto LABEL_139;
                        }
                        unint64_t v140 = v189[v141];
                        if (!v140)
                        {
                          while (1)
                          {
                            int64_t v139 = v141 + 1;
                            if (__OFADD__(v141, 1)) {
                              goto LABEL_183;
                            }
                            if (v139 >= v190) {
                              break;
                            }
                            unint64_t v140 = v189[v139];
                            ++v141;
                            if (v140) {
                              goto LABEL_134;
                            }
                          }
LABEL_139:
                          swift_release();
                          __n128 v230 = v107;
                          if (v106)
                          {
LABEL_81:
                            sub_1C3F7E2CC(v93, v92);
                            uint64_t v84 = (void *)(v107[7] + 48 * v102);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            swift_release();
                            uint64_t v85 = v217;
                            *uint64_t v84 = v95;
                            v84[1] = v85;
                            int64_t v86 = v213;
                            v84[2] = v96;
                            uint64_t v84[3] = v86;
                            int v77 = 1;
                            int64_t v83 = (int64_t)v215;
                            unint64_t v81 = v216;
                            uint64_t v221 = v107;
                            v84[4] = v214;
                            v84[5] = v99;
                            goto LABEL_82;
                          }
LABEL_105:
                          v107[(v102 >> 6) + 8] |= 1 << v102;
                          char v110 = (uint64_t *)(v107[6] + 16 * v102);
                          *char v110 = v93;
                          v110[1] = v92;
                          uint64_t v111 = v107[7] + 48 * v102;
                          uint64_t v112 = v217;
                          *(void *)uint64_t v111 = v95;
                          *(void *)(v111 + 8) = v112;
                          long long v113 = v219;
                          *(_OWORD *)(v111 + 16) = v220;
                          *(_OWORD *)(v111 + 32) = v113;
                          uint64_t v114 = v107[2];
                          BOOL v22 = __OFADD__(v114, 1);
                          uint64_t v115 = v114 + 1;
                          if (!v22)
                          {
                            v107[2] = v115;
                            int v77 = 1;
                            int64_t v83 = (int64_t)v215;
                            unint64_t v81 = v216;
                            uint64_t v221 = v107;
                            goto LABEL_82;
                          }
LABEL_172:
                          __break(1u);
LABEL_173:
                          __break(1u);
LABEL_174:
                          __break(1u);
LABEL_175:
                          __break(1u);
LABEL_176:
                          __break(1u);
                          goto LABEL_177;
                        }
                      }
                    }
                    int64_t v139 = v141;
                  }
LABEL_134:
                  uint64_t v197 = (v140 - 1) & v140;
                  int64_t v128 = v139;
                  unint64_t v129 = __clz(__rbit64(v140)) + (v139 << 6);
                }
                uint64_t v130 = 16 * v129;
                uint64_t v131 = 48 * v129;
                unint64_t v132 = (long long *)(v221[7] + v131);
                uint64_t v133 = v107[6];
                long long v134 = *(_OWORD *)(v221[6] + v130);
                long long v136 = v132[1];
                long long v218 = v132[2];
                long long v135 = v218;
                long long v198 = v136;
                long long v196 = *v132;
                long long v137 = v196;
                *(_OWORD *)(v133 + v130) = v134;
                uint64_t v138 = (_OWORD *)(v107[7] + v131);
                *uint64_t v138 = v137;
                v138[1] = v136;
                v138[2] = v135;
                sub_1C3F7E324(v134, *((unint64_t *)&v134 + 1));
                swift_retain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                int64_t v122 = v128;
                unint64_t v127 = v197;
              }
            }
            goto LABEL_170;
          }
        }
        else
        {
          int64_t v88 = v83 + 1;
          if (__OFADD__(v83, 1)) {
            goto LABEL_174;
          }
          if (v88 < v210)
          {
            unint64_t v89 = *(void *)(v211 + 8 * v88);
            if (!v89)
            {
              int64_t v90 = v83 + 2;
              if (v83 + 2 >= v210) {
                goto LABEL_9;
              }
              unint64_t v89 = *(void *)(v211 + 8 * v90);
              if (v89) {
                goto LABEL_95;
              }
              int64_t v90 = v83 + 3;
              if (v83 + 3 >= v210) {
                goto LABEL_9;
              }
              unint64_t v89 = *(void *)(v211 + 8 * v90);
              if (v89) {
                goto LABEL_95;
              }
              int64_t v90 = v83 + 4;
              if (v83 + 4 >= v210) {
                goto LABEL_9;
              }
              unint64_t v89 = *(void *)(v211 + 8 * v90);
              if (v89) {
                goto LABEL_95;
              }
              int64_t v90 = v83 + 5;
              if (v83 + 5 >= v210) {
                goto LABEL_9;
              }
              unint64_t v89 = *(void *)(v211 + 8 * v90);
              if (v89)
              {
LABEL_95:
                int64_t v88 = v90;
              }
              else
              {
                int64_t v88 = v83 + 6;
                if (v83 + 6 >= v210) {
                  goto LABEL_9;
                }
                unint64_t v89 = *(void *)(v211 + 8 * v88);
                if (!v89)
                {
                  uint64_t v116 = v83;
                  do
                  {
                    if (v204 == v116) {
                      goto LABEL_9;
                    }
                    unint64_t v89 = *(void *)(v203 + 8 * v116++);
                  }
                  while (!v89);
                  int64_t v88 = v116 + 6;
                }
              }
            }
            uint64_t v216 = (v89 - 1) & v89;
            unint64_t v87 = __clz(__rbit64(v89)) + (v88 << 6);
            goto LABEL_97;
          }
        }
LABEL_9:
        swift_bridgeObjectRelease();
        sub_1C3F7FCE8();
        void *v208 = v221;
        swift_bridgeObjectRelease();
        swift_endAccess();
        swift_release();
        uint64_t v20 = MEMORY[0x1C8780160](v201, v200);
        uint64_t v19 = v206;
        if (v206 == v20) {
          goto LABEL_145;
        }
        goto LABEL_10;
      }
      unint64_t v39 = *(void *)(v219 + 8 * v38);
      if (!v39)
      {
        uint64_t v40 = v34 + 2;
        if (v34 + 2 >= (uint64_t)v218) {
          goto LABEL_77;
        }
        unint64_t v39 = *(void *)(v219 + 8 * v40);
        if (v39) {
          goto LABEL_31;
        }
        uint64_t v40 = v34 + 3;
        if (v34 + 3 >= (uint64_t)v218) {
          goto LABEL_77;
        }
        unint64_t v39 = *(void *)(v219 + 8 * v40);
        if (v39) {
          goto LABEL_31;
        }
        uint64_t v40 = v34 + 4;
        if (v34 + 4 >= (uint64_t)v218) {
          goto LABEL_77;
        }
        unint64_t v39 = *(void *)(v219 + 8 * v40);
        if (v39) {
          goto LABEL_31;
        }
        uint64_t v40 = v34 + 5;
        if (v34 + 5 >= (uint64_t)v218) {
          goto LABEL_77;
        }
        unint64_t v39 = *(void *)(v219 + 8 * v40);
        if (v39)
        {
LABEL_31:
          uint64_t v38 = v40;
        }
        else
        {
          uint64_t v38 = v34 + 6;
          if (v34 + 6 >= (uint64_t)v218) {
            goto LABEL_77;
          }
          unint64_t v39 = *(void *)(v219 + 8 * v38);
          if (!v39)
          {
            uint64_t v57 = v34;
            do
            {
              if (v216 == v57) {
                goto LABEL_77;
              }
              unint64_t v39 = v215[v57++];
            }
            while (!v39);
            uint64_t v38 = v57 + 6;
          }
        }
      }
      uint64_t v36 = (v39 - 1) & v39;
      unint64_t v37 = __clz(__rbit64(v39)) + (v38 << 6);
    }
    unint64_t v41 = (uint64_t *)(*(void *)(v220 + 48) + 16 * v37);
    uint64_t v43 = *v41;
    unint64_t v42 = v41[1];
    uint64_t v44 = *(void *)(*(void *)(v220 + 56) + 8 * v37);
    sub_1C3F7E324(*v41, v42);
    swift_retain();
    sub_1C3F7E324(v43, v42);
    swift_retain();
    sub_1C3F7E2CC(v43, v42);
    swift_release();
    if (!v44) {
      goto LABEL_77;
    }
    uint64_t v221 = (void *)v38;
    uint64_t v45 = v28;
    unint64_t v47 = sub_1C3F850CC(v43, v42);
    uint64_t v48 = v28[2];
    BOOL v49 = (v46 & 1) == 0;
    uint64_t v50 = v48 + v49;
    if (__OFADD__(v48, v49))
    {
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
      goto LABEL_172;
    }
    char v51 = v46;
    if (v28[3] >= v50) {
      break;
    }
    sub_1C3F76AA4(v50, v27 & 1);
    uint64_t v45 = v230;
    uint64_t v52 = sub_1C3F850CC(v43, v42);
    if ((v51 & 1) != (v53 & 1)) {
      goto LABEL_184;
    }
    unint64_t v47 = v52;
    if (v51)
    {
LABEL_16:
      sub_1C3F7E2CC(v43, v42);
      uint64_t v35 = v45[7];
      swift_release();
      *(void *)(v35 + 8 * v47) = v44;
      goto LABEL_17;
    }
LABEL_41:
    v45[(v47 >> 6) + 8] |= 1 << v47;
    BOOL v54 = (uint64_t *)(v45[6] + 16 * v47);
    *BOOL v54 = v43;
    v54[1] = v42;
    *(void *)(v45[7] + 8 * v47) = v44;
    uint64_t v55 = v45[2];
    BOOL v22 = __OFADD__(v55, 1);
    uint64_t v56 = v55 + 1;
    if (v22) {
      goto LABEL_171;
    }
    v45[2] = v56;
LABEL_17:
    char v27 = 1;
    uint64_t v34 = (uint64_t)v221;
    unint64_t v32 = v36;
    int64_t v28 = v45;
  }
  if (v27)
  {
    if (v46) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC858);
  uint64_t v58 = sub_1C4497FB8();
  uint64_t v45 = (void *)v58;
  if (!v28[2])
  {
LABEL_75:
    swift_release();
    __n128 v230 = v45;
    if (v51) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
  uint64_t v59 = (void *)(v58 + 64);
  uint64_t v60 = 1 << *((unsigned char *)v45 + 32);
  uint64_t v212 = v28 + 8;
  unint64_t v61 = (unint64_t)(v60 + 63) >> 6;
  if (v45 != v28 || v59 >= &v212[v61]) {
    memmove(v59, v212, 8 * v61);
  }
  int64_t v62 = 0;
  v45[2] = v28[2];
  uint64_t v63 = 1 << *((unsigned char *)v28 + 32);
  if (v63 < 64) {
    uint64_t v64 = ~(-1 << v63);
  }
  else {
    uint64_t v64 = -1;
  }
  unint64_t v65 = v64 & v28[8];
  int64_t v211 = (unint64_t)(v63 + 63) >> 6;
  while (2)
  {
    if (v65)
    {
      unint64_t v214 = (v65 - 1) & v65;
      int64_t v213 = v62;
      unint64_t v66 = __clz(__rbit64(v65)) | (v62 << 6);
LABEL_58:
      uint64_t v67 = 8 * v66;
      uint64_t v68 = *(void *)(v28[7] + 8 * v66);
      uint64_t v69 = 16 * v66;
      long long v70 = *(_OWORD *)(v28[6] + v69);
      *(_OWORD *)(v45[6] + v69) = v70;
      *(void *)(v45[7] + v67) = v68;
      sub_1C3F7E324(v70, *((unint64_t *)&v70 + 1));
      swift_retain();
      int64_t v62 = v213;
      unint64_t v65 = v214;
      continue;
    }
    break;
  }
  BOOL v22 = __OFADD__(v62, 1);
  int64_t v71 = v62 + 1;
  if (v22) {
    goto LABEL_180;
  }
  if (v71 >= v211) {
    goto LABEL_75;
  }
  unint64_t v72 = v212[v71];
  if (v72)
  {
LABEL_70:
    unint64_t v214 = (v72 - 1) & v72;
    int64_t v213 = v71;
    unint64_t v66 = __clz(__rbit64(v72)) + (v71 << 6);
    goto LABEL_58;
  }
  int64_t v73 = v71 + 1;
  if (v71 + 1 >= v211) {
    goto LABEL_75;
  }
  unint64_t v72 = v212[v73];
  if (v72) {
    goto LABEL_69;
  }
  int64_t v73 = v71 + 2;
  if (v71 + 2 >= v211) {
    goto LABEL_75;
  }
  unint64_t v72 = v212[v73];
  if (v72) {
    goto LABEL_69;
  }
  int64_t v73 = v71 + 3;
  if (v71 + 3 >= v211) {
    goto LABEL_75;
  }
  unint64_t v72 = v212[v73];
  if (v72)
  {
LABEL_69:
    int64_t v71 = v73;
    goto LABEL_70;
  }
  while (1)
  {
    int64_t v71 = v73 + 1;
    if (__OFADD__(v73, 1)) {
      break;
    }
    if (v71 >= v211) {
      goto LABEL_75;
    }
    unint64_t v72 = v212[v71];
    ++v73;
    if (v72) {
      goto LABEL_70;
    }
  }
LABEL_182:
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  uint64_t result = sub_1C4498558();
  __break(1u);
  return result;
}

uint64_t sub_1C4121280(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  unint64_t v3 = *(void *)(*(void *)a1 + 24);
  swift_beginAccess();
  if (*(void *)(*(void *)(a2 + 24) + 16))
  {
    sub_1C3F7E324(v4, v3);
    swift_bridgeObjectRetain();
    sub_1C3F850CC(v4, v3);
    if (v5)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1C3F7E2CC(v4, v3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    swift_bridgeObjectRelease();
    sub_1C3F7E2CC(v4, v3);
  }
  return 1;
}

uint64_t sub_1C41213B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  char v5 = (uint64_t (*)(uint64_t *))result;
  int64_t v6 = 0;
  uint64_t v20 = MEMORY[0x1E4FBC860];
  uint64_t v7 = *(void *)(a3 + 64);
  uint64_t v17 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v18 = (unint64_t)(v8 + 63) >> 6;
  if ((v9 & v7) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  if (__OFADD__(v6++, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v6 >= v18) {
    goto LABEL_29;
  }
  unint64_t v14 = *(void *)(v17 + 8 * v6);
  if (v14) {
    goto LABEL_19;
  }
  int64_t v15 = v6 + 1;
  if (v6 + 1 >= v18)
  {
LABEL_29:
    swift_release();
    return v20;
  }
  unint64_t v14 = *(void *)(v17 + 8 * v15);
  if (!v14)
  {
    int64_t v15 = v6 + 2;
    if (v6 + 2 >= v18) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v17 + 8 * v15);
    if (!v14)
    {
      int64_t v15 = v6 + 3;
      if (v6 + 3 >= v18) {
        goto LABEL_29;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v6 + 4;
        if (v6 + 4 < v18)
        {
          unint64_t v14 = *(void *)(v17 + 8 * v15);
          if (v14) {
            goto LABEL_18;
          }
          while (1)
          {
            int64_t v6 = v15 + 1;
            if (__OFADD__(v15, 1)) {
              break;
            }
            if (v6 >= v18) {
              goto LABEL_29;
            }
            unint64_t v14 = *(void *)(v17 + 8 * v6);
            ++v15;
            if (v14) {
              goto LABEL_19;
            }
          }
LABEL_31:
          __break(1u);
          return result;
        }
        goto LABEL_29;
      }
    }
  }
LABEL_18:
  int64_t v6 = v15;
LABEL_19:
  unint64_t v10 = (v14 - 1) & v14;
  for (unint64_t i = __clz(__rbit64(v14)) + (v6 << 6); ; unint64_t i = v11 | (v6 << 6))
  {
    uint64_t v19 = *(void *)(*(void *)(a3 + 56) + 8 * i);
    swift_retain();
    char v16 = v5(&v19);
    if (v3) {
      break;
    }
    if (v16)
    {
      sub_1C4497DD8();
      sub_1C4497E18();
      sub_1C4497E28();
      uint64_t result = sub_1C4497DE8();
      if (!v10) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t result = swift_release();
      if (!v10) {
        goto LABEL_7;
      }
    }
LABEL_6:
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1C41215F4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for CRDataStoreBundleDecodeContext();
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v9 = a1 + 7;
  uint64_t v7 = (void *)a1[7];
  uint64_t v8 = (void *)v9[1];
  unint64_t v10 = (void *)swift_allocObject();
  v10[6] = v6;
  v10[7] = v7;
  uint64_t v11 = MEMORY[0x1E4FBC868];
  v10[8] = v8;
  v10[2] = v11;
  v10[3] = v11;
  v10[4] = v5;
  v10[5] = v4;
  *a2 = v10;
  id v12 = v8;
  id v13 = v7;
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t sub_1C41216BC@<X0>(uint64_t *a1@<X0>, void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = sub_1C412173C(a3, *a2, *a1, &v8);
  long long v6 = v10;
  long long v7 = v11;
  *(_OWORD *)a4 = v9;
  *(_OWORD *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 32) = v7;
  *(unsigned char *)(a4 + 48) = 0;
  return result;
}

uint64_t sub_1C412173C(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_6;
  }
  uint64_t v10 = a2[2];
  unint64_t v9 = a2[3];
  sub_1C3F7E324(v10, v9);
  uint64_t v11 = sub_1C3F850CC(v10, v9);
  if ((v12 & 1) == 0)
  {
    sub_1C3F7E2CC(v10, v9);
LABEL_6:
    sub_1C3FE3FF0();
    uint64_t v20 = swift_allocError();
    *(void *)uint64_t v23 = 0xD00000000000001BLL;
    *(void *)(v23 + 8) = 0x80000001C44B2820;
    *(unsigned char *)(v23 + 16) = 0;
    uint64_t result = swift_willThrow();
    goto LABEL_7;
  }
  id v13 = (uint64_t *)(*(void *)(a1 + 56) + 32 * v11);
  uint64_t v24 = a4;
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  uint64_t v16 = a3;
  uint64_t v17 = v13[2];
  unint64_t v18 = v13[3];
  sub_1C3F7E324(*v13, v15);
  sub_1C3F7E324(v17, v18);
  sub_1C3F7E2CC(v10, v9);
  uint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(*a2 + 104);
  sub_1C3F7E324(v14, v15);
  sub_1C3F7E324(v17, v18);
  v19(v14, v15, v17, v18, v16);
  uint64_t v20 = v4;
  sub_1C3F7E2CC(v17, v18);
  sub_1C3F7E2CC(v14, v15);
  uint64_t v21 = v14;
  a4 = v24;
  sub_1C3F7E2CC(v21, v15);
  uint64_t result = sub_1C3F7E2CC(v17, v18);
  if (v4) {
LABEL_7:
  }
    *a4 = v20;
  return result;
}

uint64_t sub_1C41218FC@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  unint64_t v32 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v31 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  id v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v33 = v14;
  uint64_t v17 = (char *)&v28 + *(int *)(v14 + 48) - v15;
  long long v34 = *a2;
  uint64_t v18 = v35;
  uint64_t result = sub_1C4217548((uint64_t)&v28 - v15, v17, a1, (uint64_t *)&v34, v5, a3, a4);
  if (!v18)
  {
    uint64_t v35 = *(void *)(a3 - 8);
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
    v20(v13, v16, a3);
    uint64_t v21 = *(void *)v17;
    uint64_t v22 = *((void *)v17 + 1);
    sub_1C3F6BC4C((uint64_t)v13, a3, (uint64_t **)&v34);
    uint64_t v30 = v34;
    uint64_t v23 = &v13[*(int *)(v33 + 48)];
    v20(v13, v16, a3);
    *(void *)uint64_t v23 = v21;
    *((void *)v23 + 1) = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v24 = MEMORY[0x1E4FBC860];
    unint64_t v25 = sub_1C3F7E4A4(MEMORY[0x1E4FBC860]);
    unint64_t v29 = sub_1C3F7E37C(v24);
    sub_1C3F7E4A4(v24);
    sub_1C3F7E37C(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v16, v33);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v13, a3);
    uint64_t v26 = v32;
    *unint64_t v32 = v30;
    v26[1] = 0;
    v26[2] = v21;
    v26[3] = v22;
    unint64_t v27 = v29;
    v26[4] = v25;
    v26[5] = v27;
  }
  return result;
}

uint64_t sub_1C4121BA8@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, void *a3@<X8>)
{
  return sub_1C4217D1C(a1, a2, *(void **)(v3 + 64), *(void *)(v3 + 32), a3);
}

void sub_1C4121BE0()
{
  swift_release();
  swift_release();

  uint64_t v1 = *(void **)(v0 + 64);
}

uint64_t sub_1C4121C20()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return v0;
}

uint64_t sub_1C4121C70()
{
  sub_1C4121C20();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRDataStoreBundleDecodeContext()
{
  return __swift_instantiateGenericMetadata();
}

double sub_1C4121CBC@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void sub_1C4121CCC()
{
}

uint64_t sub_1C4121D28()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRDataStorePartialDecodeContext()
{
  return self;
}

uint64_t sub_1C4121D94(uint64_t a1)
{
  return sub_1C4121280(a1, v1) & 1;
}

uint64_t sub_1C4121DB4@<X0>(void *a1@<X8>)
{
  return sub_1C41215F4(v1, a1);
}

uint64_t sub_1C4121DBC@<X0>(uint64_t *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C41216BC(a1, a2, *(void *)(v3 + 32), a3);
}

id sub_1C4121DC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7)
  {
    return a1;
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (id)swift_bridgeObjectRetain();
  }
}

void sub_1C4121E40(int a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  if (a8 != 255) {
    sub_1C4121E74(a2, a3, a4, a5, a6, a7, a8 & 1);
  }
}

void sub_1C4121E74(id a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7)
  {
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
}

id sub_1C4121F04(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  if (a8 != 255) {
    return sub_1C4121DC8(a2, a3, a4, a5, a6, a7, a8 & 1);
  }
  return result;
}

uint64_t sub_1C4121F38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBB2A8);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBB2B0);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  unint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v35 - v11;
  uint64_t v13 = *v1;
  uint64_t v14 = v1[1];
  uint64_t v16 = v1[2];
  int64_t v15 = v1[3];
  int64_t v17 = v15;
  unint64_t v18 = v1[4];
  uint64_t v35 = v5;
  uint64_t v37 = v16;
  if (v18)
  {
    uint64_t v36 = v9;
    uint64_t v19 = v14;
    uint64_t v20 = (v18 - 1) & v18;
    unint64_t v21 = __clz(__rbit64(v18)) | (v15 << 6);
LABEL_3:
    uint64_t v22 = *(void *)(v13 + 48);
    uint64_t v23 = v13;
    uint64_t v24 = type metadata accessor for Replica();
    sub_1C4122314(v22 + *(void *)(*(void *)(v24 - 8) + 72) * v21, (uint64_t)v12);
    sub_1C3FAA63C(*(void *)(v23 + 56) + 16 * v21, (uint64_t)&v12[*(int *)(v2 + 48)]);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v12, 0, 1, v2);
    uint64_t v14 = v19;
    unint64_t v9 = v36;
    goto LABEL_23;
  }
  int64_t v25 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v26 = (unint64_t)(v16 + 64) >> 6;
  if (v25 < v26)
  {
    unint64_t v27 = *(void *)(v14 + 8 * v25);
    if (v27)
    {
LABEL_7:
      uint64_t v36 = v9;
      uint64_t v19 = v14;
      uint64_t v20 = (v27 - 1) & v27;
      unint64_t v21 = __clz(__rbit64(v27)) + (v25 << 6);
      int64_t v17 = v25;
      goto LABEL_3;
    }
    int64_t v28 = v15 + 2;
    int64_t v17 = v15 + 1;
    if (v15 + 2 < v26)
    {
      unint64_t v27 = *(void *)(v14 + 8 * v28);
      if (v27)
      {
LABEL_10:
        int64_t v25 = v28;
        goto LABEL_7;
      }
      int64_t v17 = v15 + 2;
      if (v15 + 3 < v26)
      {
        unint64_t v27 = *(void *)(v14 + 8 * (v15 + 3));
        if (v27)
        {
          int64_t v25 = v15 + 3;
          goto LABEL_7;
        }
        int64_t v28 = v15 + 4;
        int64_t v17 = v15 + 3;
        if (v15 + 4 < v26)
        {
          unint64_t v27 = *(void *)(v14 + 8 * v28);
          if (v27) {
            goto LABEL_10;
          }
          int64_t v25 = v15 + 5;
          int64_t v17 = v15 + 4;
          if (v15 + 5 < v26)
          {
            unint64_t v27 = *(void *)(v14 + 8 * v25);
            if (v27) {
              goto LABEL_7;
            }
            int64_t v17 = v26 - 1;
            int64_t v29 = v15 + 6;
            while (v26 != v29)
            {
              unint64_t v27 = *(void *)(v14 + 8 * v29++);
              if (v27)
              {
                int64_t v25 = v29 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v23 = v13;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v12, 1, 1, v2);
  uint64_t v20 = 0;
LABEL_23:
  uint64_t *v1 = v23;
  v1[1] = v14;
  v1[2] = v37;
  v1[3] = v17;
  v1[4] = v20;
  uint64_t v30 = (void (*)(uint64_t))v1[5];
  sub_1C3F961BC((uint64_t)v12, (uint64_t)v9, &qword_1EBBBB2B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBC0FB0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v38, 1, 1, v31);
  }
  else
  {
    uint64_t v32 = (uint64_t)v35;
    sub_1C3F961BC((uint64_t)v9, (uint64_t)v35, &qword_1EBBBB2A8);
    uint64_t v33 = v38;
    v30(v32);
    sub_1C4122378(v32);
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBC0FB0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 0, 1, v34);
  }
}

uint64_t sub_1C4122314(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Replica();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C4122378(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBB2A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C41223D8(long long *a1)
{
  long long v2 = *a1;
  long long v4 = *v1;
  long long v5 = v2;
  return _s9Coherence9CRKeyPathV1loiySbAC_ACtFZ_0((uint64_t *)&v4, (uint64_t)&v5) & 1;
}

uint64_t CRBuiltInComparable<>._crIsLessThan(_:)()
{
  return sub_1C44970C8() & 1;
}

uint64_t sub_1C4122444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  unint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v34 - v10;
  uint64_t v12 = type metadata accessor for Proto_Value(0);
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Proto_Register(0);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  unint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v34 - v19;
  if (*(unsigned __int8 *)(a1 + 72) >= 2u)
  {
    uint64_t v34 = v9;
    sub_1C4496888();
    uint64_t v23 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
    if (qword_1EBBC0668 != -1) {
      swift_once();
    }
    uint64_t v35 = a3;
    *(void *)(a3 + v23) = qword_1EBBC0660;
    swift_retain();
    sub_1C4496888();
    uint64_t v24 = *(int *)(v15 + 20);
    if (qword_1EBBBF248 != -1) {
      swift_once();
    }
    uint64_t v25 = qword_1EBBBF238;
    *(void *)&v20[v24] = qword_1EBBBF238;
    MEMORY[0x1F4188790](v25);
    *((_OWORD *)&v34 - 3) = *(_OWORD *)(a2 + 16);
    uint64_t v26 = v38;
    *(&v34 - 4) = *(char **)(a2 + 32);
    *(&v34 - 3) = (char *)v26;
    *(&v34 - 2) = (char *)a1;
    swift_retain();
    uint64_t v27 = v39;
    sub_1C3F6DC00((void (*)(uint64_t))sub_1C4124B64, (uint64_t)v14);
    if (v27)
    {
      sub_1C3FBBB18((uint64_t)v20, type metadata accessor for Proto_Register);
      int64_t v28 = type metadata accessor for Proto_CRDT;
      uint64_t v29 = v35;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_Register._StorageClass(0);
        swift_allocObject();
        uint64_t v30 = swift_retain();
        *(void *)&v20[v24] = sub_1C3FB87F8(v30);
        swift_release();
      }
      uint64_t v31 = *(void *)&v20[v24];
      sub_1C3F8ACA8((uint64_t)v14, (uint64_t)v11, type metadata accessor for Proto_Value);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v11, 0, 1, v37);
      uint64_t v32 = (uint64_t)v34;
      sub_1C4124B88((uint64_t)v11, (uint64_t)v34);
      uint64_t v33 = v31 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v32, v33);
      swift_endAccess();
      swift_release();
      sub_1C4124C58((uint64_t)v20, (uint64_t)v18);
      sub_1C43F10C0((uint64_t)v18);
      int64_t v28 = type metadata accessor for Proto_Register;
      uint64_t v29 = (uint64_t)v20;
    }
    return sub_1C3FBBB18(v29, v28);
  }
  else
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v21 = 0xD00000000000003ALL;
    *(void *)(v21 + 8) = 0x80000001C44B2840;
    *(unsigned char *)(v21 + 16) = 3;
    return swift_willThrow();
  }
}

uint64_t CRMaxRegister.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t sub_1C41228D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRMaxRegister();
  uint64_t v3 = (uint64_t (*)(uint64_t *, void))CRMaxRegister.projectedValue.modify();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 24))(v4, a1, v2);
  return v3(&v6, 0);
}

uint64_t (*CRMaxRegister.projectedValue.modify())(void, void)
{
  return nullsub_1;
}

uint64_t CRMaxRegister.projectedValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 40))(v2, a1, a2);
}

uint64_t sub_1C41229D4(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = (char *)&v6 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v6 - v1);
  uint64_t v4 = type metadata accessor for CRMaxRegister();
  return CRMaxRegister.value.setter((uint64_t)v2, v4);
}

uint64_t CRMaxRegister.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 + 24) + 8))(a1, v4);
  uint64_t v6 = *(void *)(v4 - 8);
  if (v5)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
    return v7(v2, a1, v4);
  }
  else
  {
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v9(a1, v4);
  }
}

void (*CRMaxRegister.value.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  char v5 = malloc(0x30uLL);
  *a1 = v5;
  *char v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  void v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v5[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v5[4] = malloc(v9);
  v5[5] = malloc(v9);
  (*(void (**)(void))(v8 + 16))();
  return sub_1C4122C70;
}

void sub_1C4122C70(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  if (a2)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    uint64_t v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    CRMaxRegister.value.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    CRMaxRegister.value.setter((*a1)[5], *v2);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t CRMaxRegister.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  sub_1C41242B4(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);
  return v4(a1);
}

void (*CRMaxRegister.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  void v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v5[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v5[4] = malloc(v9);
  v5[5] = malloc(v9);
  (*(void (**)(void))(v8 + 16))();
  return sub_1C4122E88;
}

void sub_1C4122E88(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v7 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    sub_1C41242B4((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    sub_1C41242B4((*a1)[5], v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t CRMaxRegister.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v14 = (char *)&v17 - v13;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  if (*(void *)(*(void *)v11 + 16))
  {
    v15(v10, v12, v6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 32) + 8) + 24))(a1, v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    v15((char *)&v17 - v13, v12, v6);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v14, v6);
}

uint64_t CRMaxRegister.copy(renamingReferences:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a1) {
    a1 = sub_1C3FE49A0(MEMORY[0x1E4FBC860]);
  }
  unint64_t v6 = a1;
  swift_bridgeObjectRetain();
  CRMaxRegister.copy(renamingReferences:)((uint64_t)&v6, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t CRMaxRegister.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t CRMaxRegister.merge(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v18 - v11;
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13((char *)&v18 - v11, v3, v6);
  v13(v10, a1, v6);
  char v14 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(a2 + 24) + 8))(v10, v6);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v15)(v12, v6);
  if (v14)
  {
    uint64_t v17 = *(void *)(a2 - 8);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v3, a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v3, a1, a2);
  }
  return result;
}

uint64_t CRMaxRegister.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2, v5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 32) + 8) + 48))(a1, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Bool __swiftcall CRMaxRegister.needToFinalizeTimestamps()()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(v0 + 32) + 8) + 56))(*(void *)(v0 + 16));
}

uint64_t CRMaxRegister.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 32) + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v4, v3);
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 64);
    return v6(a1, v4, v3);
  }
  return result;
}

uint64_t sub_1C4123548@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return CRMaxRegister.actionUndoingDifference(from:)(a1, a2);
}

uint64_t CRMaxRegister.actionUndoingDifference(from:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t sub_1C4123598(uint64_t a1, uint64_t a2)
{
  return nullsub_1(a2, a2);
}

uint64_t CRMaxRegister.apply(_:)(uint64_t a1, uint64_t a2)
{
  return nullsub_1(a2, a2);
}

uint64_t CRMaxRegister.hasDelta(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(void (**)(char *))(v5 + 16);
  v11((char *)&v14 - v9);
  ((void (*)(char *, uint64_t, uint64_t))v11)(v8, v2, v4);
  LOBYTE(v3) = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v3 + 24) + 8))(v8, v4);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  return v3 & 1;
}

uint64_t CRMaxRegister.delta(_:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v14 = *(void (**)(char *))(v8 + 16);
  v14((char *)&v20 - v12);
  ((void (*)(char *, uint64_t, uint64_t))v14)(v11, v4, v7);
  char v15 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(a2 + 24) + 8))(v11, v7);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, v7);
  v16(v13, v7);
  uint64_t v17 = *(void *)(a2 - 8);
  if (v15)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v4, a2);
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a3, v18, 1, a2);
}

uint64_t CRMaxRegister.canMerge(delta:)()
{
  return 1;
}

uint64_t sub_1C41238EC(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t CRMaxRegister.merge(delta:)(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t CRMaxRegister.observableDifference(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v6 = a3;
  uint64_t v30 = a2;
  uint64_t v33 = a1;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v29 = *(void *)(*(void *)(a3 + 32) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = sub_1C4497B38();
  uint64_t v10 = *(void *)(v28 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v28);
  uint64_t v13 = (char *)&v28 - v12;
  uint64_t v14 = *(void *)(v8 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v11);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v28 - v18;
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
  uint64_t v32 = a4;
  v20(a4, 1, 1, AssociatedTypeWitness);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v31 = v5;
  uint64_t v22 = v5;
  uint64_t v23 = v33;
  v21(v19, v22, v8);
  v21(v17, v23, v8);
  LOBYTE(v6) = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v6 + 24) + 8))(v17, v8);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v14 + 8);
  v24(v17, v8);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v24)(v19, v8);
  if ((v6 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 40))(v23, v30, v8);
    uint64_t v26 = v32;
    uint64_t v27 = v28;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v32, v28);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v26, v13, v27);
  }
  return result;
}

uint64_t sub_1C4123C04(uint64_t a1, void *a2)
{
  return CRMaxRegister.encode(to:)(a1, a2);
}

uint64_t CRMaxRegister.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t result = sub_1C3F62C10();
  if (!v3)
  {
    uint64_t v6 = a2[2];
    uint64_t v7 = a2[3];
    uint64_t v8 = a2[4];
    swift_retain();
    sub_1C400C588(v2, v6, v7, v8);
    return swift_release();
  }
  return result;
}

uint64_t CRMaxRegister.hasEncodedData.getter(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF878);
  if (swift_dynamicCast())
  {
    uint64_t v3 = *((void *)&v8 + 1);
    uint64_t v4 = v9;
    __swift_project_boxed_opaque_existential_1(&v7, *((uint64_t *)&v8 + 1));
    LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
    char v5 = v3 ^ 1;
  }
  else
  {
    uint64_t v9 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    sub_1C3F962E0((uint64_t)&v7, (uint64_t *)&unk_1EBBBBF20);
    char v5 = 1;
  }
  return v5 & 1;
}

void sub_1C4123DE4(unsigned char *a1@<X8>)
{
}

void CRMaxRegister.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t static CRMaxRegister<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v12 = *(void *)(type metadata accessor for CRMaxRegister() + 16);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  v13(v11, a1, v12);
  v13(v9, a2, v12);
  char v14 = sub_1C4497178();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v9, a3);
  v15(v11, a3);
  return v14 & 1;
}

uint64_t sub_1C4123F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static CRMaxRegister<>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t sub_1C4123FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CRMaxRegister();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v12 + 16) - 8) + 16))(v11, a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a5 + 8) + 8) + 16))(a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a3);
}

uint64_t CRMaxRegister<>.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  char v5 = (void *)MEMORY[0x1F4188790](a1);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  sub_1C4498698();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v7, v2, v3);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
  sub_1C4498348();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t sub_1C4124248(uint64_t a1, uint64_t a2)
{
  return CRMaxRegister<>.encode(to:)(a1, a2);
}

BOOL sub_1C4124264(void *a1)
{
  return *v1 < *a1;
}

BOOL sub_1C4124278(void *a1)
{
  return *v1 < *a1;
}

BOOL sub_1C412428C(float *a1)
{
  return *v1 < *a1;
}

BOOL sub_1C41242A0(double *a1)
{
  return *v1 < *a1;
}

uint64_t sub_1C41242B4(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  return CRMaxRegister.value.setter((uint64_t)v4, a2);
}

_UNKNOWN **sub_1C4124374()
{
  return &protocol witness table for CRMaxRegister<A>;
}

uint64_t sub_1C4124380(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1C41243BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(uint64_t))CRMaxRegister.projectedValue.getter);
}

uint64_t sub_1C41243D8()
{
  return 24;
}

__n128 sub_1C41243E4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1C41243F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(uint64_t))CRMaxRegister.value.getter);
}

uint64_t keypath_getTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5 = type metadata accessor for CRMaxRegister();
  return a4(v5);
}

uint64_t sub_1C4124464()
{
  return 24;
}

__n128 sub_1C4124470(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1C4124484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_0(a1, a2, a3, (uint64_t (*)(uint64_t))CRMaxRegister.wrappedValue.getter);
}

uint64_t sub_1C412449C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRMaxRegister();
  return sub_1C41242B4(a1, v2);
}

uint64_t sub_1C41244E0()
{
  return 24;
}

__n128 sub_1C41244EC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t dispatch thunk of CRBuiltInComparable._crIsLessThan(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_1C4124514()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1C41245A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t sub_1C412465C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_1C4124688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1C41246D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1C4124728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1C4124778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1C41247C8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_1C4124924(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1C4124B3CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_1C4124B64()
{
  return sub_1C4123FA4(v0[5], v0[6], v0[2], v0[3], v0[4]);
}

uint64_t sub_1C4124B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C4124BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C4124C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_Register(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Timestamp.hash(into:)()
{
  return sub_1C4498608();
}

uint64_t static Timestamp.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for Timestamp(0) + 20);
  uint64_t v5 = *(void *)(a1 + v4);
  uint64_t v6 = *(void *)(a2 + v4);
  BOOL v7 = v5 < v6;
  if (v5 != v6) {
    return v7;
  }
  uint64_t v8 = *(int *)(type metadata accessor for Replica() + 20);
  uint64_t v9 = *(void *)(a1 + v8);
  uint64_t v10 = *(void *)(a2 + v8);
  BOOL v7 = v9 < v10;
  if (v9 != v10) {
    return v7;
  }
  return sub_1C410BE0C();
}

uint64_t static Timestamp.< infix(_:_:)()
{
  return sub_1C4496788() & 1;
}

uint64_t sub_1C4124DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = type metadata accessor for Replica();
  MEMORY[0x1F4188790](v6);
  uint64_t v29 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF870);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v11 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  int v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Timestamp(0);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v29 - v18;
  sub_1C3F8EFF4(v4, (uint64_t)&v29 - v18, type metadata accessor for Timestamp);
  uint64_t v20 = *(void *)&v19[*(int *)(v6 + 20)];
  uint64_t result = sub_1C3F8B168((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for Replica);
  if (v20)
  {
    sub_1C3F8EFF4(v4, (uint64_t)v17, type metadata accessor for Timestamp);
    if (*(void *)(a3 + 16) && (unint64_t v22 = sub_1C3F8F160((uint64_t)v17), (v23 & 1) != 0))
    {
      sub_1C3FAA63C(*(void *)(a3 + 56) + 16 * v22, (uint64_t)v31);
    }
    else
    {
      v31[0] = 0;
      v31[1] = 0;
    }
    sub_1C3F8B168((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Replica);
    if (v31[0])
    {
      sub_1C3FAAC94((uint64_t)v31, (uint64_t)v32);
      uint64_t v24 = *(int *)(v14 + 20);
      sub_1C4479060(*(void *)(v4 + v24), (uint64_t)v10);
      sub_1C3F903E8((uint64_t)v32);
      uint64_t v25 = v30;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v30) == 1)
      {
        return sub_1C3F962E0((uint64_t)v10, &qword_1EBBBF870);
      }
      else
      {
        sub_1C3F8B168(v4, type metadata accessor for Timestamp);
        sub_1C3F8AD10((uint64_t)v10, (uint64_t)v13, type metadata accessor for FinalizedTimestamp);
        uint64_t v26 = sub_1C4496678();
        uint64_t v27 = (uint64_t)v29;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v29, v13, v26);
        *(void *)(v27 + *(int *)(v6 + 20)) = 0;
        uint64_t v28 = *(void *)&v13[*(int *)(v25 + 20)];
        sub_1C3F8B168((uint64_t)v13, type metadata accessor for FinalizedTimestamp);
        uint64_t result = sub_1C3F8AD10(v27, v4, (uint64_t (*)(void))type metadata accessor for Replica);
        *(void *)(v4 + v24) = v28;
      }
    }
    else
    {
      return sub_1C3F962E0((uint64_t)v31, qword_1EBBBEE40);
    }
  }
  return result;
}

BOOL Timestamp.needToFinalize.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Replica() + 20)) > 0;
}

uint64_t Timestamp.description.getter()
{
  uint64_t v1 = sub_1C43EEA2C();
  sub_1C4497268();
  type metadata accessor for Timestamp(0);
  sub_1C4498088();
  sub_1C4497268();
  swift_bridgeObjectRelease();
  sub_1C4497268();
  return v1;
}

uint64_t Timestamp.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v33 = (uint64_t)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for Proto_Timestamp(0);
  MEMORY[0x1F4188790](v31);
  uint64_t v35 = (unint64_t *)((char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for Proto_Value(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v32 = (uint64_t)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Timestamp(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v34 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v30 - v15;
  uint64_t v17 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v17, (uint64_t)v16, &qword_1EBBC0540);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v19 = v18(v16, 1, v6);
  sub_1C3F962E0((uint64_t)v16, &qword_1EBBC0540);
  if (v19 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v20 = 0xD000000000000017;
    *(void *)(v20 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v20 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  sub_1C3F970C4(v17, (uint64_t)v14, &qword_1EBBC0540);
  uint64_t result = v18(v14, 1, v6);
  if (result == 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v22 = v32;
  sub_1C3F8AD10((uint64_t)v14, v32, type metadata accessor for Proto_Value);
  uint64_t v23 = *(void *)(v22 + *(int *)(v6 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v24 = v33;
  sub_1C3F970C4(v23, v33, &qword_1EBBBF8A0);
  uint64_t v25 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25) == 1)
  {
    swift_retain();
    sub_1C3F962E0(v24, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 9)
    {
      uint64_t v26 = v24;
      uint64_t v27 = v35;
      sub_1C3F8AD10(v26, (uint64_t)v35, type metadata accessor for Proto_Timestamp);
      swift_retain();
      uint64_t v28 = v36;
      uint64_t v29 = (uint64_t)v34;
      goto LABEL_10;
    }
    swift_retain();
    sub_1C3F8B168(v24, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  uint64_t v28 = v36;
  uint64_t v29 = (uint64_t)v34;
  uint64_t v27 = v35;
  *uint64_t v35 = 0;
  v27[1] = 0;
  sub_1C4496888();
LABEL_10:
  sub_1C3F8B168(v22, type metadata accessor for Proto_Value);
  sub_1C3F8A234(v27, a1, v29);
  uint64_t result = swift_release();
  if (!v28) {
    return sub_1C3F8AD10(v29, v30, type metadata accessor for Timestamp);
  }
  return result;
}

uint64_t Timestamp.encode(to:)()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for Replica();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t result = sub_1C3F6DD10();
  if (!v1)
  {
    *uint64_t v9 = 0;
    v9[1] = 0;
    swift_retain();
    sub_1C4496888();
    sub_1C3F8EFF4(v0, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v13 = sub_1C3FA10C4((uint64_t)v5);
    uint64_t v14 = sub_1C4496678();
    (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v5, v14);
    *uint64_t v9 = v13;
    v9[1] = *(void *)(v2 + *(int *)(type metadata accessor for Timestamp(0) + 20));
    sub_1C3F8AD10((uint64_t)v9, (uint64_t)v11, type metadata accessor for Proto_Timestamp);
    swift_beginAccess();
    sub_1C43EEC70((uint64_t)v11);
    return swift_release();
  }
  return result;
}

uint64_t Timestamp.hashValue.getter()
{
  return sub_1C4498628();
}

uint64_t sub_1C412599C()
{
  return sub_1C4498628();
}

uint64_t sub_1C4125A14()
{
  return sub_1C4498608();
}

uint64_t sub_1C4125A6C()
{
  return sub_1C4498628();
}

uint64_t sub_1C4125AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = *(void *)(a1 + v3);
  uint64_t v5 = *(void *)(a2 + v3);
  BOOL v6 = v4 < v5;
  if (v4 != v5) {
    return v6;
  }
  uint64_t v9 = *(int *)(type metadata accessor for Replica() + 20);
  uint64_t v10 = *(void *)(a1 + v9);
  uint64_t v11 = *(void *)(a2 + v9);
  BOOL v6 = v10 < v11;
  if (v10 != v11) {
    return v6;
  }
  return sub_1C410BE0C();
}

BOOL sub_1C4125B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = *(void *)(a2 + v3);
  uint64_t v5 = *(void *)(a1 + v3);
  BOOL v6 = v4 < v5;
  if (v4 == v5
    && (uint64_t v9 = *(int *)(type metadata accessor for Replica() + 20),
        uint64_t v10 = *(void *)(a2 + v9),
        uint64_t v11 = *(void *)(a1 + v9),
        BOOL v6 = v10 < v11,
        v10 == v11))
  {
    char v12 = sub_1C410BE0C();
  }
  else
  {
    char v12 = v6;
  }
  return (v12 & 1) == 0;
}

BOOL sub_1C4125BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = *(void *)(a1 + v3);
  uint64_t v5 = *(void *)(a2 + v3);
  BOOL v6 = v4 < v5;
  if (v4 == v5
    && (uint64_t v9 = *(int *)(type metadata accessor for Replica() + 20),
        uint64_t v10 = *(void *)(a1 + v9),
        uint64_t v11 = *(void *)(a2 + v9),
        BOOL v6 = v10 < v11,
        v10 == v11))
  {
    char v12 = sub_1C410BE0C();
  }
  else
  {
    char v12 = v6;
  }
  return (v12 & 1) == 0;
}

uint64_t sub_1C4125C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = *(void *)(a2 + v3);
  uint64_t v5 = *(void *)(a1 + v3);
  BOOL v6 = v4 < v5;
  if (v4 != v5) {
    return v6;
  }
  uint64_t v9 = *(int *)(type metadata accessor for Replica() + 20);
  uint64_t v10 = *(void *)(a2 + v9);
  uint64_t v11 = *(void *)(a1 + v9);
  BOOL v6 = v10 < v11;
  if (v10 != v11) {
    return v6;
  }
  return sub_1C410BE0C();
}

uint64_t sub_1C4125CB8()
{
  uint64_t v1 = sub_1C43EEA2C();
  sub_1C4497268();
  sub_1C4498088();
  sub_1C4497268();
  swift_bridgeObjectRelease();
  sub_1C4497268();
  return v1;
}

id sub_1C4125FD8()
{
  return sub_1C41265E0(type metadata accessor for ObjCReplica);
}

id sub_1C4126034()
{
  uint64_t v1 = sub_1C4496678();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Replica();
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Timestamp(0);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  char v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = v0 + OBJC_IVAR___ObjCTimestamp_timestamp;
  sub_1C3F8EFF4(v15, (uint64_t)&v21 - v13, type metadata accessor for Timestamp);
  sub_1C3F8AD10((uint64_t)v14, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Replica);
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v8, v1);
  sub_1C3F8EFF4(v15, (uint64_t)v12, type metadata accessor for Timestamp);
  uint64_t v16 = *(void *)&v12[*(int *)(v6 + 28)];
  sub_1C3F8B168((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Replica);
  uint64_t v17 = (objc_class *)type metadata accessor for ObjCReplica(0);
  uint64_t v18 = (char *)objc_allocWithZone(v17);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(&v18[OBJC_IVAR___ObjCReplica_uuid], v4, v1);
  *(void *)&v18[OBJC_IVAR___ObjCReplica_index] = v16;
  v21.receiver = v18;
  v21.super_class = v17;
  id v19 = objc_msgSendSuper2(&v21, sel_init);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v19;
}

id sub_1C41265C8()
{
  return sub_1C41265E0(type metadata accessor for ObjCTimestamp);
}

id sub_1C41265E0(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t _s9Coherence9TimestampV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Replica();
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v25 - v8;
  uint64_t v10 = type metadata accessor for Timestamp(0);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = *(int *)(v14 + 28);
  uint64_t v18 = *(void *)(a1 + v17);
  uint64_t v19 = *(void *)(a2 + v17);
  sub_1C3F8EFF4(a1, (uint64_t)&v25 - v15, type metadata accessor for Timestamp);
  sub_1C3F8EFF4(a2, (uint64_t)v13, type metadata accessor for Timestamp);
  if (v18 == v19)
  {
    uint64_t v20 = *(int *)(v4 + 20);
    uint64_t v21 = *(void *)&v16[v20];
    uint64_t v22 = *(void *)&v13[v20];
    sub_1C3F8EFF4((uint64_t)v16, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Replica);
    sub_1C3F8EFF4((uint64_t)v13, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Replica);
    if (v21 == v22) {
      char v23 = sub_1C4496618();
    }
    else {
      char v23 = 0;
    }
    sub_1C3F8B168((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Replica);
    sub_1C3F8B168((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Replica);
  }
  else
  {
    char v23 = 0;
  }
  sub_1C3F8B168((uint64_t)v13, type metadata accessor for Timestamp);
  sub_1C3F8B168((uint64_t)v16, type metadata accessor for Timestamp);
  return v23 & 1;
}

unint64_t sub_1C4126880()
{
  unint64_t result = qword_1EA39D928;
  if (!qword_1EA39D928)
  {
    type metadata accessor for Timestamp(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D928);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Timestamp(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1C4496678();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for Replica();
    *(uint64_t *)((char *)a1 + *(int *)(v8 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 20));
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for Timestamp(uint64_t a1)
{
  uint64_t v2 = sub_1C4496678();
  objc_super v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for Timestamp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496678();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Replica();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for Timestamp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496678();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Replica();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for Timestamp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496678();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Replica();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for Timestamp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496678();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Replica();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1C4126C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Replica();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_1C4126CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Replica();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t sub_1C4126D38()
{
  uint64_t result = type metadata accessor for Replica();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C4126DD0()
{
  return type metadata accessor for ObjCReplica(0);
}

uint64_t sub_1C4126DD8()
{
  uint64_t result = sub_1C4496678();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C4126E74()
{
  return type metadata accessor for ObjCTimestamp(0);
}

uint64_t type metadata accessor for ObjCTimestamp(uint64_t a1)
{
  return sub_1C3F9708C(a1, qword_1EA39D930);
}

uint64_t sub_1C4126E9C()
{
  uint64_t result = type metadata accessor for Timestamp(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for RetainedResource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C4126F48()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1C4126FE4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t sub_1C41270DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1C4127158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1C41271D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1C4127250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1C41272CC(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1C41273E0);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void sub_1C41273F4(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1C41275A0);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for RetainedResource.Retained()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C41275E0(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  unsigned int v15 = (char *)&v26 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = sub_1C44977F8();
  if (!v20) {
    return sub_1C4497478();
  }
  uint64_t v21 = v20;
  uint64_t v27 = v15;
  uint64_t v43 = sub_1C4496EB8();
  uint64_t v35 = sub_1C4497E58();
  sub_1C4497DF8();
  unint64_t v41 = v19;
  uint64_t result = sub_1C44977D8();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    char v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    uint64_t v37 = v23;
    uint64_t v24 = v27;
    while (1)
    {
      uint64_t v25 = (void (*)(char *, void))sub_1C44978C8();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      sub_1C4497E38();
      sub_1C4497828();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

uint64_t sub_1C41279DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = a4;
  uint64_t v48 = a2;
  MEMORY[0x1F4188790](a1);
  uint64_t v40 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_Value(0);
  uint64_t v9 = v8 - 8;
  uint64_t v39 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v47 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v45 = (uint64_t)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unsigned int v15 = (char *)&v38 - v14;
  uint64_t v16 = type metadata accessor for Proto_RepeatedValue(0);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (uint64_t *)((char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (uint64_t *)((char *)&v38 - v20);
  uint64_t v49 = a3;
  uint64_t v50 = sub_1C4496EB8();
  uint64_t v22 = (void (*)(uint64_t))*(int *)(v9 + 28);
  uint64_t v43 = a1;
  uint64_t v44 = v22;
  uint64_t v23 = *(void *)((char *)v22 + a1)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v23, (uint64_t)v15, &qword_1EBBBF8A0);
  uint64_t v24 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  unint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48);
  int v25 = v42(v15, 1, v24);
  uint64_t v26 = MEMORY[0x1E4FBC860];
  if (v25 == 1)
  {
    sub_1C3F962E0((uint64_t)v15, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 10)
    {
      sub_1C41295F8((uint64_t)v15, (uint64_t)v21);
      goto LABEL_7;
    }
    sub_1C3F8B1C8((uint64_t)v15, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  *uint64_t v21 = v26;
  sub_1C4496888();
LABEL_7:
  swift_bridgeObjectRetain();
  sub_1C3F8B1C8((uint64_t)v21, type metadata accessor for Proto_RepeatedValue);
  swift_bridgeObjectRelease();
  uint64_t v46 = sub_1C4497528();
  sub_1C4497458();
  uint64_t v27 = *(void *)((char *)v44 + v43)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v28 = v27;
  uint64_t v29 = v45;
  sub_1C3F970C4(v28, v45, &qword_1EBBBF8A0);
  if (v42((char *)v29, 1, v24) == 1)
  {
    sub_1C3F962E0(v29, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 10)
    {
      sub_1C41295F8(v29, (uint64_t)v19);
      goto LABEL_13;
    }
    sub_1C3F8B1C8(v29, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  *uint64_t v19 = MEMORY[0x1E4FBC860];
  sub_1C4496888();
LABEL_13:
  uint64_t v30 = *v19;
  swift_bridgeObjectRetain();
  sub_1C3F8B1C8((uint64_t)v19, type metadata accessor for Proto_RepeatedValue);
  uint64_t v31 = *(void *)(v30 + 16);
  unint64_t v42 = (uint64_t (*)(char *, uint64_t, uint64_t))v30;
  if (v31)
  {
    uint64_t v45 = *(void *)(*(void *)(v41 + 8) + 8);
    uint64_t v44 = *(void (**)(uint64_t))(v45 + 8);
    uint64_t v32 = v30 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
    uint64_t v33 = *(void *)(v39 + 72);
    uint64_t v34 = v48;
    while (1)
    {
      uint64_t v35 = v47;
      sub_1C3F8A1D0(v32, v47);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      sub_1C3F974B0(v35, v34);
      swift_release();
      uint64_t v36 = swift_retain();
      v44(v36);
      if (v4) {
        break;
      }
      sub_1C44974D8();
      swift_release();
      v32 += v33;
      if (!--v31) {
        goto LABEL_17;
      }
    }
    swift_release();
    swift_release();
    sub_1C3F8B1C8(v43, type metadata accessor for Proto_Value);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_17:
    swift_release();
    sub_1C3F8B1C8(v43, type metadata accessor for Proto_Value);
    swift_bridgeObjectRelease();
    return v50;
  }
}

uint64_t sub_1C4127F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v31 = (uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for Proto_RepeatedValue(0);
  MEMORY[0x1F4188790](v29);
  uint64_t v30 = (uint64_t *)((char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1C4496888();
  uint64_t v13 = type metadata accessor for Proto_Value(0);
  uint64_t v14 = v13;
  uint64_t v15 = *(int *)(v13 + 20);
  if (qword_1EBBBF8C8 != -1) {
    uint64_t v13 = swift_once();
  }
  *(void *)(a5 + v15) = qword_1EBBBF8B8;
  uint64_t v33 = a2;
  MEMORY[0x1F4188790](v13);
  *(&v28 - 4) = a3;
  *(&v28 - 3) = a4;
  *(&v28 - 2) = a1;
  uint64_t v16 = sub_1C4497528();
  swift_retain();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC00F0);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = v32;
  uint64_t v20 = sub_1C41275E0((void (*)(char *, char *))sub_1C4129594, (uint64_t)(&v28 - 6), v16, v14, v17, WitnessTable, MEMORY[0x1E4FBC0F0], (uint64_t)&v34);
  if (v19) {
    return sub_1C3F8B1C8(a5, type metadata accessor for Proto_Value);
  }
  uint64_t v22 = v20;
  uint64_t v23 = *(void *)(a5 + v15)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v24 = v31;
  sub_1C3F970C4(v23, v31, &qword_1EBBBF8A0);
  uint64_t v25 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25) == 1)
  {
    sub_1C3F962E0(v24, &qword_1EBBBF8A0);
LABEL_10:
    uint64_t v27 = v30;
    *uint64_t v30 = MEMORY[0x1E4FBC860];
    sub_1C4496888();
    goto LABEL_11;
  }
  if (swift_getEnumCaseMultiPayload() != 10)
  {
    sub_1C3F8B1C8(v24, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_10;
  }
  uint64_t v26 = v24;
  uint64_t v27 = v30;
  sub_1C41295F8(v26, (uint64_t)v30);
LABEL_11:
  swift_bridgeObjectRelease();
  *uint64_t v27 = v22;
  return sub_1C43EF8B0((uint64_t)v27);
}

uint64_t Array<A>.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v11, (uint64_t)v10, &qword_1EBBC0540);
  uint64_t v12 = type metadata accessor for Proto_Value(0);
  LODWORD(v11) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v10, 1, v12);
  sub_1C3F962E0((uint64_t)v10, &qword_1EBBC0540);
  if (v11 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v13 = 0xD000000000000017;
    *(void *)(v13 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v13 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(void *)(swift_initStackObject() + 16) = a1;
    uint64_t v4 = sub_1C4003C00(a2, a3);
  }
  swift_release();
  return v4;
}

uint64_t Array<A>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1C3F6DD10();
  if (!v4)
  {
    swift_retain();
    sub_1C401038C(a2, a3, a4);
    return swift_release();
  }
  return result;
}

uint64_t Array<A>.observableDifference(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = MEMORY[0x1C8780110](a3, a4);
  uint64_t v10 = 0;
  if (v9 == MEMORY[0x1C8780110](a1, a4))
  {
    uint64_t v11 = sub_1C4497528();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v13 = sub_1C4498538();
    long long v30 = v31;
    uint64_t v14 = MEMORY[0x1F4188790](v13);
    v23[8] = a4;
    v23[9] = a5;
    uint64_t v24 = a2;
    MEMORY[0x1F4188790](v14);
    void v23[2] = a4;
    v23[3] = a5;
    _OWORD v23[4] = sub_1C41292FC;
    v23[5] = v15;
    uint64_t v26 = v11;
    uint64_t v27 = v11;
    uint64_t v28 = WitnessTable;
    uint64_t v29 = WitnessTable;
    uint64_t v16 = sub_1C4497D98();
    swift_getAssociatedTypeWitness();
    uint64_t v17 = (char *)sub_1C4497B38();
    uint64_t v18 = swift_getWitnessTable();
    uint64_t v10 = sub_1C3F7182C((void (*)(char *, char *))sub_1C4129348, (uint64_t)v23, v16, v17, MEMORY[0x1E4FBC248], v18, MEMORY[0x1E4FBC278], v19);
    swift_bridgeObjectRelease();
    uint64_t v20 = swift_bridgeObjectRelease();
    uint64_t v26 = v10;
    MEMORY[0x1F4188790](v20);
    uint64_t v24 = a4;
    uint64_t v25 = a5;
    sub_1C4497528();
    swift_getWitnessTable();
    uint64_t v21 = sub_1C4497368();
    if (v21)
    {
      uint64_t v26 = v10;
      MEMORY[0x1F4188790](v21);
      uint64_t v24 = a4;
      uint64_t v25 = a5;
      if (sub_1C4497368())
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  return v10;
}

uint64_t sub_1C41287E8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = sub_1C4497B38();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v11 - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v11 - v5, a1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v6, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
LABEL_6:
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    goto LABEL_7;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39D9C0);
  if (!swift_dynamicCast()) {
    goto LABEL_6;
  }
  uint64_t v7 = *((void *)&v12 + 1);
  if (!*((void *)&v12 + 1))
  {
LABEL_7:
    sub_1C3F962E0((uint64_t)&v11, qword_1EA39C168);
    char v9 = 0;
    return v9 & 1;
  }
  uint64_t v8 = v13;
  __swift_project_boxed_opaque_existential_1(&v11, *((uint64_t *)&v12 + 1));
  char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  return v9 & 1;
}

uint64_t Array<A>.visitReferences(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a1;
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](a1);
  char v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  if (MEMORY[0x1C8780160](a2, a3))
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(a4 + 8);
    long long v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    uint64_t v16 = v8;
    uint64_t v17 = v12;
    while (1)
    {
      char v13 = sub_1C44974A8();
      sub_1C4497438();
      if (v13)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, a2+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v10, a3);
        uint64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t result = sub_1C4497DA8();
        if (v16 != 8)
        {
          __break(1u);
          return result;
        }
        uint64_t v19 = result;
        (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 16))(v9, &v19, a3);
        swift_unknownObjectRelease();
        uint64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_10:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      v17(v18, a3, v11);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
      ++v10;
      if (v14 == MEMORY[0x1C8780160](a2, a3)) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t Array<A>.copy(renamingReferences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[7] = a2;
  void v9[2] = a3;
  v9[3] = a4;
  void v9[4] = a1;
  uint64_t v5 = sub_1C4497528();
  uint64_t WitnessTable = swift_getWitnessTable();
  return sub_1C41275E0((void (*)(char *, char *))sub_1C412945C, (uint64_t)v9, v5, a3, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v7);
}

uint64_t Array<A>.copy(renamingReferences:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    a1 = sub_1C3FE49A0(MEMORY[0x1E4FBC860]);
  }
  unint64_t v9 = a1;
  swift_bridgeObjectRetain();
  uint64_t v7 = Array<A>.copy(renamingReferences:)((uint64_t)&v9, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t Array<A>.needToFinalizeTimestamps()()
{
  return sub_1C4497368() & 1;
}

uint64_t Array<A>.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v26 = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v32 = sub_1C4497B38();
  uint64_t v10 = *(void *)(v32 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v32);
  char v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (void *)((char *)v25 - v14);
  uint64_t v29 = v3;
  v34[1] = *v3;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x1C877FF50](v34, a2, WitnessTable);
  uint64_t v33 = v34[0];
  sub_1C4497F98();
  sub_1C4497F68();
  uint64_t v27 = a2;
  uint64_t v17 = sub_1C4497F88();
  uint64_t v18 = (void (**)(unint64_t *, char *, uint64_t))(v10 + 32);
  uint64_t v30 = TupleTypeMetadata2 - 8;
  uint64_t v31 = v17;
  v25[0] = v6 + 24;
  v25[1] = v6 + 32;
  while (1)
  {
    sub_1C4497F78();
    (*v18)(v15, v13, v32);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8)
                                                                              + 48))(v15, 1, TupleTypeMetadata2) == 1)break;
    unint64_t v19 = *v15;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, (char *)v15 + *(int *)(TupleTypeMetadata2 + 48), v5);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 + 8) + 64))(v26, v5);
    uint64_t v20 = v29;
    sub_1C4497468();
    uint64_t v21 = *v20;
    sub_1C41292A8(v19, v21);
    char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    uint64_t v23 = v21 & 0xFFFFFFFFFFFFFF8;
    if ((isClassOrObjCExistentialType & 1) == 0) {
      uint64_t v23 = v21;
    }
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 24))(v23+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v19, v8, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return swift_bridgeObjectRelease();
}

uint64_t static Array<A>.canContainAssets.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 72))() & 1;
}

uint64_t sub_1C4129158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = Array<A>.copy(renamingReferences:)(a1, *v4, *(void *)(a2 + 16), *(void *)(a3 - 8));
  *a4 = result;
  return result;
}

uint64_t sub_1C4129190@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = Array<A>.copy(renamingReferences:)(a1, *v4, *(void *)(a2 + 16), *(void *)(a3 - 8));
  *a4 = result;
  return result;
}

uint64_t sub_1C41291C8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = Array<A>.observableDifference(from:with:)(*a1, a2, *v5, *(void *)(a3 + 16), *(void *)(a4 - 8));
  *a5 = result;
  return result;
}

uint64_t sub_1C4129204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.visitReferences(_:)(a1, *v3, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t sub_1C4129218()
{
  return Array<A>.needToFinalizeTimestamps()();
}

uint64_t sub_1C412922C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.finalizeTimestamps(_:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t sub_1C4129234(uint64_t a1, uint64_t a2)
{
  return static Array<A>.canContainAssets.getter(*(void *)(a1 + 16), *(void *)(a2 - 8));
}

uint64_t sub_1C4129240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = Array<A>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
  if (!v4) {
    *a4 = result;
  }
  return result;
}

uint64_t sub_1C4129274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.encode(to:)(a1, *v3, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

void Array<A>.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1C41292A8(unint64_t a1, uint64_t a2)
{
  uint64_t result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if ((result & 1) == 0) {
    uint64_t v5 = a2;
  }
  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1C41292FC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)(v2[3] + 8) + 40))(a2, v2[4], v2[2]);
}

uint64_t sub_1C4129348(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

BOOL sub_1C41293B8(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(a1, 1, AssociatedTypeWitness) != 1;
}

uint64_t sub_1C412943C(uint64_t a1)
{
  return sub_1C41287E8(a1) & 1;
}

uint64_t sub_1C412945C()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0[3] + 8) + 24))(v0[4], v0[2]);
}

uint64_t sub_1C41294A8()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(v0 + 24) + 8) + 56))(*(void *)(v0 + 16)) & 1;
}

uint64_t sub_1C41294F4(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C4129544(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C4129594@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1C3F6DC00((void (*)(uint64_t))sub_1C4018244, a2);
  if (v2) {
    *a1 = v2;
  }
  return result;
}

uint64_t sub_1C41295F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_RepeatedValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C412965C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v53 = a5;
  uint64_t v54 = a2;
  uint64_t v47 = *(void *)(a3 - 8);
  uint64_t v48 = a4;
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v45 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  char v51 = (char *)&v43 - v10;
  uint64_t v11 = type metadata accessor for Proto_Value(0);
  uint64_t v12 = v11 - 8;
  uint64_t v44 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v52 = (uint64_t)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v49 = (uint64_t *)((char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v43 - v17;
  uint64_t v19 = type metadata accessor for Proto_RepeatedValue(0);
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  uint64_t v50 = (uint64_t *)((char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (uint64_t *)((char *)&v43 - v22);
  uint64_t v24 = *(int *)(v12 + 28);
  uint64_t v46 = a1;
  uint64_t v25 = *(void *)(a1 + v24);
  uint64_t v26 = v25 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v26, (uint64_t)v18, &qword_1EBBBF8A0);
  uint64_t v27 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48);
  if (v28(v18, 1, v27) == 1)
  {
    sub_1C3F962E0((uint64_t)v18, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 10)
    {
      sub_1C41295F8((uint64_t)v18, (uint64_t)v23);
      goto LABEL_7;
    }
    sub_1C3F8B1C8((uint64_t)v18, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  *uint64_t v23 = MEMORY[0x1E4FBC860];
  sub_1C4496888();
LABEL_7:
  swift_bridgeObjectRetain();
  sub_1C3F8B1C8((uint64_t)v23, type metadata accessor for Proto_RepeatedValue);
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_1C44976A8();
  uint64_t v55 = v29;
  uint64_t v30 = v25 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v31 = v30;
  uint64_t v32 = (uint64_t)v49;
  sub_1C3F970C4(v31, (uint64_t)v49, &qword_1EBBBF8A0);
  if (v28((char *)v32, 1, v27) == 1)
  {
    sub_1C3F962E0(v32, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 10)
    {
      uint64_t v33 = v50;
      sub_1C41295F8(v32, (uint64_t)v50);
      goto LABEL_13;
    }
    sub_1C3F8B1C8(v32, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  uint64_t v33 = v50;
  *uint64_t v50 = MEMORY[0x1E4FBC860];
  sub_1C4496888();
LABEL_13:
  uint64_t v34 = *v33;
  swift_bridgeObjectRetain();
  sub_1C3F8B1C8((uint64_t)v33, type metadata accessor for Proto_RepeatedValue);
  uint64_t v35 = *(void *)(v34 + 16);
  if (v35)
  {
    uint64_t v50 = *(uint64_t **)(*(void *)(v48 + 8) + 8);
    uint64_t v48 = v50[1];
    uint64_t v49 = v50 + 1;
    uint64_t v36 = *(unsigned __int8 *)(v44 + 80);
    uint64_t v43 = v34;
    uint64_t v29 = v34 + ((v36 + 32) & ~v36);
    uint64_t v37 = (void (**)(char *, uint64_t))(v47 + 8);
    uint64_t v47 = *(void *)(v44 + 72);
    while (1)
    {
      uint64_t v38 = v52;
      sub_1C3F8A1D0(v29, v52);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      uint64_t v39 = v54;
      swift_retain();
      sub_1C3F974B0(v38, v39);
      swift_release();
      uint64_t v40 = swift_retain();
      ((void (*)(uint64_t, uint64_t, uint64_t *))v48)(v40, a3, v50);
      if (v5) {
        break;
      }
      sub_1C4497748();
      uint64_t v41 = v51;
      sub_1C44976F8();
      swift_release();
      (*v37)(v41, a3);
      v29 += v47;
      if (!--v35)
      {
        swift_release();
        uint64_t v29 = v55;
        goto LABEL_19;
      }
    }
    swift_release();
    swift_release();
    sub_1C3F8B1C8(v46, type metadata accessor for Proto_Value);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
LABEL_19:
    sub_1C3F8B1C8(v46, type metadata accessor for Proto_Value);
    swift_bridgeObjectRelease();
  }
  return v29;
}

uint64_t sub_1C4129C78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = a4;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v32 = (uint64_t)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for Proto_RepeatedValue(0);
  MEMORY[0x1F4188790](v30);
  uint64_t v31 = (uint64_t *)((char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1C4496888();
  uint64_t v14 = type metadata accessor for Proto_Value(0);
  uint64_t v15 = v14;
  uint64_t v16 = *(int *)(v14 + 20);
  if (qword_1EBBBF8C8 != -1) {
    uint64_t v14 = swift_once();
  }
  *(void *)(a6 + v16) = qword_1EBBBF8B8;
  uint64_t v35 = a2;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = v33;
  *(&v30 - 4) = a3;
  *(&v30 - 3) = v17;
  *(&v30 - 2) = a5;
  *(&v30 - 1) = a1;
  uint64_t v18 = sub_1C4497748();
  swift_retain();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC00F0);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v21 = v34;
  uint64_t v22 = sub_1C41275E0((void (*)(char *, char *))sub_1C412B6AC, (uint64_t)(&v30 - 6), v18, v15, v19, WitnessTable, MEMORY[0x1E4FBC0F0], (uint64_t)&v36);
  if (v21) {
    return sub_1C3F8B1C8(a6, type metadata accessor for Proto_Value);
  }
  uint64_t v24 = v22;
  uint64_t v25 = *(void *)(a6 + v16)
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v26 = v32;
  sub_1C3F970C4(v25, v32, &qword_1EBBBF8A0);
  uint64_t v27 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v26, 1, v27) == 1)
  {
    sub_1C3F962E0(v26, &qword_1EBBBF8A0);
LABEL_10:
    uint64_t v29 = v31;
    *uint64_t v31 = MEMORY[0x1E4FBC860];
    sub_1C4496888();
    goto LABEL_11;
  }
  if (swift_getEnumCaseMultiPayload() != 10)
  {
    sub_1C3F8B1C8(v26, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_10;
  }
  uint64_t v28 = v26;
  uint64_t v29 = v31;
  sub_1C41295F8(v28, (uint64_t)v31);
LABEL_11:
  swift_bridgeObjectRelease();
  *uint64_t v29 = v24;
  return sub_1C43EF8B0((uint64_t)v29);
}

uint64_t Set<>.observableDifference(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v81 = a2;
  uint64_t v82 = *(void *)(a5 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v68 = sub_1C4497B38();
  uint64_t v11 = *(void *)(v68 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v68);
  uint64_t v80 = (char *)v60 - v13;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v67 = (char *)v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  unint64_t v66 = (char *)v60 - v18;
  uint64_t v72 = *(void *)(a4 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v79 = (char *)v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)v60 - v21;
  uint64_t v23 = sub_1C4497B38();
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v25 = (char *)v60 - v24;
  uint64_t v26 = a3;
  uint64_t v27 = sub_1C44976E8();
  uint64_t v87 = a1;
  uint64_t v84 = a6;
  uint64_t v28 = 0;
  if (v27 != sub_1C44976E8()) {
    return v28;
  }
  uint64_t v29 = v11;
  uint64_t v89 = sub_1C4496EB8();
  uint64_t v76 = AssociatedTypeWitness;
  if ((v26 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1C4497C48();
    uint64_t result = sub_1C4497728();
    uint64_t v26 = v90;
    uint64_t v70 = v91;
    uint64_t v31 = v92;
    uint64_t v32 = v93;
    unint64_t v33 = v94;
  }
  else
  {
    uint64_t v34 = -1 << *(unsigned char *)(v26 + 32);
    uint64_t v35 = *(void *)(v26 + 56);
    uint64_t v70 = v26 + 56;
    uint64_t v36 = ~v34;
    uint64_t v37 = -v34;
    if (v37 < 64) {
      uint64_t v38 = ~(-1 << v37);
    }
    else {
      uint64_t v38 = -1;
    }
    unint64_t v33 = v38 & v35;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v31 = v36;
    uint64_t v32 = 0;
  }
  uint64_t v39 = v22;
  v60[2] = v26 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v78 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56);
  v60[1] = v31;
  int64_t v69 = (unint64_t)(v31 + 64) >> 6;
  uint64_t v71 = v72 + 16;
  int v77 = (void (**)(char *, char *, uint64_t))(v72 + 32);
  int64_t v83 = (void (**)(char *, uint64_t))(v72 + 8);
  uint64_t v74 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  uint64_t v75 = v82 + 40;
  uint64_t v64 = (void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v63 = (void (**)(char *, char *, uint64_t))(v14 + 16);
  int64_t v62 = (void (**)(char *, uint64_t))(v14 + 8);
  unint64_t v61 = (uint64_t (**)(char *, uint64_t))(v29 + 8);
  uint64_t v73 = v26;
  unint64_t v65 = v25;
  while (v26 < 0)
  {
    if (!sub_1C4497CB8()) {
      goto LABEL_33;
    }
    sub_1C44982C8();
    swift_unknownObjectRelease();
    uint64_t v85 = v33;
    uint64_t v86 = v32;
LABEL_29:
    (*v78)(v25, 0, 1, a4);
    (*v77)(v39, v25, a4);
    uint64_t v45 = sub_1C4497688();
    if (v47 == 0xFF)
    {
      (*v83)(v39, a4);
      sub_1C3F7FCE8();
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v48 = v45;
    uint64_t v49 = v46;
    unsigned __int8 v50 = v47;
    char v51 = v39;
    uint64_t v52 = v79;
    sub_1C4497768();
    uint64_t v53 = v80;
    (*(void (**)(char *, uint64_t, uint64_t))(v82 + 40))(v52, v81, a4);
    uint64_t v54 = v53;
    uint64_t v55 = *v83;
    (*v83)(v52, a4);
    uint64_t v56 = v53;
    uint64_t v57 = v76;
    if ((*v74)(v56, 1, v76) == 1)
    {
      v55(v51, a4);
      sub_1C3F88298(v48, v49, v50);
      uint64_t result = (*v61)(v54, v68);
    }
    else
    {
      uint64_t v58 = v66;
      (*v64)(v66, v54, v57);
      (*v63)(v67, v58, v57);
      sub_1C4497528();
      sub_1C44974D8();
      sub_1C3F88298(v48, v49, v50);
      uint64_t v59 = v58;
      uint64_t v25 = v65;
      (*v62)(v59, v57);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v55)(v51, a4);
    }
    unint64_t v33 = v85;
    uint64_t v32 = v86;
    uint64_t v26 = v73;
    uint64_t v39 = v51;
  }
  if (v33)
  {
    uint64_t v85 = (v33 - 1) & v33;
    uint64_t v86 = v32;
    unint64_t v40 = __clz(__rbit64(v33)) | (v32 << 6);
LABEL_28:
    (*(void (**)(char *, unint64_t, uint64_t))(v72 + 16))(v25, *(void *)(v26 + 48) + *(void *)(v72 + 72) * v40, a4);
    goto LABEL_29;
  }
  int64_t v41 = v32 + 1;
  if (__OFADD__(v32, 1))
  {
    __break(1u);
    return result;
  }
  if (v41 >= v69) {
    goto LABEL_33;
  }
  unint64_t v42 = *(void *)(v70 + 8 * v41);
  uint64_t v43 = v32 + 1;
  if (v42) {
    goto LABEL_27;
  }
  uint64_t v43 = v32 + 2;
  if (v32 + 2 >= v69) {
    goto LABEL_33;
  }
  unint64_t v42 = *(void *)(v70 + 8 * v43);
  if (v42) {
    goto LABEL_27;
  }
  uint64_t v43 = v32 + 3;
  if (v32 + 3 >= v69) {
    goto LABEL_33;
  }
  unint64_t v42 = *(void *)(v70 + 8 * v43);
  if (v42)
  {
LABEL_27:
    uint64_t v85 = (v42 - 1) & v42;
    uint64_t v86 = v43;
    unint64_t v40 = __clz(__rbit64(v42)) + (v43 << 6);
    goto LABEL_28;
  }
  uint64_t v44 = v32 + 4;
  while (v69 != v44)
  {
    unint64_t v42 = *(void *)(v70 + 8 * v44++);
    if (v42)
    {
      uint64_t v43 = v44 - 1;
      goto LABEL_27;
    }
  }
LABEL_33:
  (*v78)(v25, 1, 1, a4);
  sub_1C3F7FCE8();
  uint64_t v28 = v89;
  uint64_t v88 = v89;
  sub_1C4497528();
  swift_getWitnessTable();
  if (sub_1C4497878())
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  return v28;
}

uint64_t Set<>.visitReferences(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1C4497B38();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v27 - v9;
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1C4497C48();
    uint64_t result = sub_1C4497728();
    a2 = v31;
    uint64_t v29 = v32;
    uint64_t v12 = v33;
    uint64_t v13 = v34;
    unint64_t v14 = v35;
  }
  else
  {
    uint64_t v15 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v16 = *(void *)(a2 + 56);
    uint64_t v29 = a2 + 56;
    uint64_t v17 = ~v15;
    uint64_t v18 = -v15;
    if (v18 < 64) {
      uint64_t v19 = ~(-1 << v18);
    }
    else {
      uint64_t v19 = -1;
    }
    unint64_t v14 = v19 & v16;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v12 = v17;
    uint64_t v13 = 0;
  }
  uint64_t v30 = a2 & 0x7FFFFFFFFFFFFFFFLL;
  v27[1] = v12;
  int64_t v28 = (unint64_t)(v12 + 64) >> 6;
  while (a2 < 0)
  {
    if (!sub_1C4497CB8()) {
      goto LABEL_27;
    }
    sub_1C44982C8();
    swift_unknownObjectRelease();
    uint64_t v22 = *(void *)(a3 - 8);
LABEL_10:
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, a3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 + 8) + 48))(a1, a3);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v10, a3);
  }
  if (v14)
  {
    unint64_t v20 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v21 = v20 | (v13 << 6);
LABEL_9:
    uint64_t v22 = *(void *)(a3 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v22 + 16))(v10, *(void *)(a2 + 48) + *(void *)(v22 + 72) * v21, a3);
    goto LABEL_10;
  }
  int64_t v23 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v23 >= v28) {
      goto LABEL_27;
    }
    unint64_t v24 = *(void *)(v29 + 8 * v23);
    uint64_t v25 = v13 + 1;
    if (!v24)
    {
      uint64_t v25 = v13 + 2;
      if (v13 + 2 >= v28) {
        goto LABEL_27;
      }
      unint64_t v24 = *(void *)(v29 + 8 * v25);
      if (!v24)
      {
        uint64_t v25 = v13 + 3;
        if (v13 + 3 >= v28) {
          goto LABEL_27;
        }
        unint64_t v24 = *(void *)(v29 + 8 * v25);
        if (!v24)
        {
          uint64_t v26 = v13 + 4;
          while (v28 != v26)
          {
            unint64_t v24 = *(void *)(v29 + 8 * v26++);
            if (v24)
            {
              uint64_t v25 = v26 - 1;
              goto LABEL_24;
            }
          }
LABEL_27:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v10, 1, 1, a3);
          return sub_1C3F7FCE8();
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v25 << 6);
    uint64_t v13 = v25;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t Set<>.copy(renamingReferences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  v10[5] = a1;
  uint64_t v6 = sub_1C4497748();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = sub_1C41275E0((void (*)(char *, char *))sub_1C41041D8, (uint64_t)v10, v6, a3, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v8);
  sub_1C4497528();
  swift_getWitnessTable();
  return sub_1C4497758();
}

uint64_t Set<>.copy(renamingReferences:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    a1 = sub_1C3FE49A0(MEMORY[0x1E4FBC860]);
  }
  unint64_t v11 = a1;
  swift_bridgeObjectRetain();
  uint64_t v9 = Set<>.copy(renamingReferences:)((uint64_t)&v11, a2, a3, a4, a5);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t Set<>.needToFinalizeTimestamps()()
{
  return sub_1C4497368() & 1;
}

uint64_t Set<>.finalizeTimestamps(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v53 = a1;
  uint64_t v54 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  unint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  unint64_t v14 = (char *)&v42 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v42 - v15;
  uint64_t v17 = sub_1C4497B38();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v42 - v18;
  uint64_t v20 = *v4;
  uint64_t result = Set<>.needToFinalizeTimestamps()();
  if (result)
  {
    uint64_t v49 = v14;
    unsigned __int8 v50 = v11;
    uint64_t v55 = sub_1C4496EC8();
    sub_1C44976E8();
    uint64_t result = sub_1C44976B8();
    uint64_t v43 = v4;
    uint64_t v51 = a2;
    uint64_t v52 = a3;
    if ((v20 & 0xC000000000000001) != 0)
    {
      sub_1C4497C48();
      uint64_t result = sub_1C4497728();
      uint64_t v20 = v56;
      uint64_t v45 = v57;
      uint64_t v22 = v58;
      uint64_t v47 = v59;
      unint64_t v23 = v60;
    }
    else
    {
      uint64_t v47 = 0;
      uint64_t v24 = -1 << *(unsigned char *)(v20 + 32);
      uint64_t v25 = *(void *)(v20 + 56);
      uint64_t v45 = v20 + 56;
      uint64_t v22 = ~v24;
      uint64_t v26 = -v24;
      if (v26 < 64) {
        uint64_t v27 = ~(-1 << v26);
      }
      else {
        uint64_t v27 = -1;
      }
      unint64_t v23 = v27 & v25;
    }
    uint64_t v28 = v54;
    uint64_t v46 = v20 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v29 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56);
    uint64_t v42 = v22;
    int64_t v44 = (unint64_t)(v22 + 64) >> 6;
    uint64_t v30 = (void (**)(char *, char *, uint64_t))(v54 + 16);
    uint64_t v31 = (void (**)(char *, char *, uint64_t))(v54 + 32);
    uint64_t v32 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    for (i = v20; ; uint64_t v20 = i)
    {
      if (v20 < 0)
      {
        if (!sub_1C4497CB8())
        {
          int64_t v41 = v43;
          goto LABEL_30;
        }
        sub_1C44982C8();
        swift_unknownObjectRelease();
      }
      else
      {
        if (v23)
        {
          unint64_t v33 = __clz(__rbit64(v23));
          v23 &= v23 - 1;
          unint64_t v34 = v33 | (v47 << 6);
        }
        else
        {
          int64_t v37 = v47 + 1;
          if (__OFADD__(v47, 1))
          {
            __break(1u);
            return result;
          }
          if (v37 >= v44) {
            goto LABEL_28;
          }
          unint64_t v38 = *(void *)(v45 + 8 * v37);
          uint64_t v39 = v47 + 1;
          if (!v38)
          {
            uint64_t v39 = v47 + 2;
            if (v47 + 2 >= v44) {
              goto LABEL_28;
            }
            unint64_t v38 = *(void *)(v45 + 8 * v39);
            if (!v38)
            {
              uint64_t v39 = v47 + 3;
              if (v47 + 3 >= v44) {
                goto LABEL_28;
              }
              unint64_t v38 = *(void *)(v45 + 8 * v39);
              if (!v38)
              {
                uint64_t v40 = v47 + 4;
                while (v44 != v40)
                {
                  unint64_t v38 = *(void *)(v45 + 8 * v40++);
                  if (v38)
                  {
                    uint64_t v39 = v40 - 1;
                    goto LABEL_25;
                  }
                }
LABEL_28:
                int64_t v41 = v43;
LABEL_30:
                (*v29)(v19, 1, 1, v7);
                uint64_t result = sub_1C3F7FCE8();
                *int64_t v41 = v55;
                return result;
              }
            }
          }
LABEL_25:
          unint64_t v23 = (v38 - 1) & v38;
          unint64_t v34 = __clz(__rbit64(v38)) + (v39 << 6);
          uint64_t v47 = v39;
        }
        (*(void (**)(char *, unint64_t, uint64_t))(v28 + 16))(v19, *(void *)(v20 + 48) + *(void *)(v28 + 72) * v34, v7);
      }
      (*v29)(v19, 0, 1, v7);
      (*v31)(v16, v19, v7);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 + 8) + 64))(v53, v7);
      (*v30)(v50, v16, v7);
      unint64_t v35 = v49;
      sub_1C44976F8();
      uint64_t v36 = *v32;
      (*v32)(v35, v7);
      uint64_t result = v36(v16, v7);
      uint64_t v28 = v54;
    }
  }
  return result;
}

uint64_t static Set<>.canContainAssets.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 72))() & 1;
}

uint64_t sub_1C412B278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = Set<>.copy(renamingReferences:)(a1, *v4, *(void *)(a2 + 16), *(void *)(a3 - 8), *(void *)(a2 + 24));
  *a4 = result;
  return result;
}

uint64_t sub_1C412B2B0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = Set<>.copy(renamingReferences:)(a1, *v4, *(void *)(a2 + 16), *(void *)(a3 - 8), *(void *)(a2 + 24));
  *a4 = result;
  return result;
}

uint64_t sub_1C412B2E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = Set<>.observableDifference(from:with:)(*a1, a2, *v5, *(void *)(a3 + 16), *(void *)(a4 - 8), *(void *)(a3 + 24));
  *a5 = result;
  return result;
}

uint64_t sub_1C412B324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Set<>.visitReferences(_:)(a1, *v3, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t sub_1C412B338()
{
  return Set<>.needToFinalizeTimestamps()();
}

uint64_t sub_1C412B34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Set<>.finalizeTimestamps(_:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t sub_1C412B354(uint64_t a1, uint64_t a2)
{
  return static Set<>.canContainAssets.getter(*(void *)(a1 + 16), *(void *)(a2 - 8));
}

uint64_t sub_1C412B360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = Set<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), *(void *)(a2 + 24));
  if (!v4) {
    *a4 = result;
  }
  return result;
}

uint64_t Set<>.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v13, (uint64_t)v12, &qword_1EBBC0540);
  uint64_t v14 = type metadata accessor for Proto_Value(0);
  LODWORD(v13) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v12, 1, v14);
  sub_1C3F962E0((uint64_t)v12, &qword_1EBBC0540);
  if (v13 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v15 = 0xD000000000000017;
    *(void *)(v15 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v15 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(void *)(swift_initStackObject() + 16) = a1;
    uint64_t v5 = sub_1C4003DB0(a2, a3, a4);
  }
  swift_release();
  return v5;
}

uint64_t sub_1C412B55C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Set<>.encode(to:)(a1, *v3, *(void *)(a2 + 16), *(void *)(a3 - 8), *(void *)(a2 + 24));
}

uint64_t Set<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_1C3F6DD10();
  if (!v5)
  {
    swift_retain();
    sub_1C4010484(a2, a3, a4, a5);
    return swift_release();
  }
  return result;
}

void Set<>.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1C412B60C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C412B65C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C412B6AC@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1C3F6DC00((void (*)(uint64_t))sub_1C412B714, a2);
  if (v2) {
    *a1 = v2;
  }
  return result;
}

uint64_t sub_1C412B714()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[3] + 8) + 8) + 16))(v0[6], v0[2]);
}

uint64_t Data.init(from:)(uint64_t a1)
{
  return sub_1C412C88C(a1);
}

uint64_t Data.encode(to:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = sub_1C3F6DD10();
  if (!v3)
  {
    swift_beginAccess();
    swift_retain();
    sub_1C3F7E324(a2, a3);
    sub_1C43EFB20(a2, a3);
    return swift_release();
  }
  return result;
}

uint64_t (*Int.init(from:)(uint64_t a1))(void)
{
  return sub_1C3F8B740(a1, sub_1C3F8BCEC);
}

void Int.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static Int.canContainAssets.getter()
{
  return 0;
}

uint64_t (*Int64.init(from:)(uint64_t a1))(void)
{
  return sub_1C3F8B740(a1, sub_1C3F8BCEC);
}

uint64_t Int64.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C3F6DF48(a1, a2);
}

uint64_t static Int64.canContainAssets.getter()
{
  return 0;
}

uint64_t UInt.init(from:)(uint64_t a1)
{
  return sub_1C412CD78(a1);
}

uint64_t (*UInt64.init(from:)(uint64_t a1))(void)
{
  return sub_1C3F8B740(a1, sub_1C4016134);
}

uint64_t UInt.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1C3F6DD10();
  if (!v2)
  {
    if (*(unsigned char *)(*(void *)(result + 16) + 72) == 1 && a2 < 0)
    {
      __break(1u);
    }
    else
    {
      swift_beginAccess();
      swift_retain();
      sub_1C43EEEE0(a2);
      return swift_release();
    }
  }
  return result;
}

uint64_t UInt64.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1C3F6DD10();
  if (!v2)
  {
    if (*(unsigned char *)(*(void *)(result + 16) + 72) == 1 && a2 < 0)
    {
      __break(1u);
    }
    else
    {
      swift_beginAccess();
      swift_retain();
      sub_1C43EEEE0(a2);
      return swift_release();
    }
  }
  return result;
}

uint64_t static UInt.canContainAssets.getter()
{
  return 0;
}

uint64_t sub_1C412BA1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1C412CD78(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1C412BA48(uint64_t a1)
{
  return UInt.encode(to:)(a1, *v1);
}

uint64_t static UInt64.canContainAssets.getter()
{
  return 0;
}

uint64_t (*sub_1C412BA6C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(void)@<X8>))(void)
{
  uint64_t result = sub_1C3F8B740(a1, sub_1C4016134);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1C412BAAC(uint64_t a1)
{
  return UInt64.encode(to:)(a1, *v1);
}

uint64_t String.init(from:)(uint64_t a1)
{
  return sub_1C3F8C390(a1);
}

uint64_t String.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1C3F6DD10();
  if (!v3)
  {
    swift_retain();
    uint64_t v7 = sub_1C4004870(a2, a3);
    swift_beginAccess();
    sub_1C43EF8A8(v7);
    return swift_release();
  }
  return result;
}

void String.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static String.canContainAssets.getter()
{
  return 0;
}

uint64_t sub_1C412BB94()
{
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  uint64_t result = sub_1C3F6DD10();
  if (!v1)
  {
    swift_retain();
    uint64_t v5 = sub_1C4004870(v2, v3);
    swift_beginAccess();
    sub_1C43EF8A8(v5);
    return swift_release();
  }
  return result;
}

uint64_t Date.encode(to:)()
{
  uint64_t result = sub_1C3F6DD10();
  if (!v1)
  {
    swift_retain();
    sub_1C400EEA4(v0);
    return swift_release();
  }
  return result;
}

BOOL Date._crIsLessThan(_:)()
{
  sub_1C44965B8();
  double v1 = v0;
  sub_1C44965B8();
  return v1 < v2;
}

uint64_t static Date.canContainAssets.getter()
{
  return 0;
}

BOOL sub_1C412BCD8()
{
  sub_1C44965B8();
  double v1 = v0;
  sub_1C44965B8();
  return v1 < v2;
}

uint64_t sub_1C412BD18()
{
  uint64_t result = sub_1C3F6DD10();
  if (!v1)
  {
    swift_retain();
    sub_1C400EEA4(v0);
    return swift_release();
  }
  return result;
}

uint64_t Data._crIsLessThan(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  __s1[3] = *MEMORY[0x1E4F143B8];
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      sub_1C3F7E324(a1, a2);
      sub_1C3F7E324(a3, a4);
      char v11 = sub_1C412C7BC((int)a3, a3 >> 32, a4 & 0x3FFFFFFFFFFFFFFFLL, a1, a2, a3, a4);
      goto LABEL_8;
    case 2uLL:
      uint64_t v9 = *(void *)(a3 + 16);
      uint64_t v10 = *(void *)(a3 + 24);
      sub_1C3F7E324(a1, a2);
      sub_1C3F7E324(a3, a4);
      swift_retain();
      swift_retain();
      char v11 = sub_1C412C7BC(v9, v10, a4 & 0x3FFFFFFFFFFFFFFFLL, a1, a2, a3, a4);
      swift_release();
      swift_release();
LABEL_8:
      sub_1C3F7E2CC(a1, a2);
      sub_1C3F7E2CC(a3, a4);
      return v11 & 1;
    case 3uLL:
      memset(__s1, 0, 14);
      sub_1C3F7E324(a1, a2);
      uint64_t v8 = (char *)__s1;
      goto LABEL_5;
    default:
      __s1[0] = a3;
      LOWORD(__s1[1]) = a4;
      BYTE2(__s1[1]) = BYTE2(a4);
      BYTE3(__s1[1]) = BYTE3(a4);
      BYTE4(__s1[1]) = BYTE4(a4);
      BYTE5(__s1[1]) = BYTE5(a4);
      sub_1C3F7E324(a1, a2);
      uint64_t v8 = (char *)__s1 + BYTE6(a4);
LABEL_5:
      sub_1C3FF5D74(__s1, (uint64_t)v8, a1, a2, a3, a4, &v13);
      sub_1C3F7E2CC(a1, a2);
      sub_1C3F7E2CC(a3, a4);
      char v11 = v13;
      return v11 & 1;
  }
}

void Data.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static Data.canContainAssets.getter()
{
  return 0;
}

uint64_t sub_1C412C028(uint64_t a1)
{
  return Data._crIsLessThan(_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)v1, *(void *)(v1 + 8));
}

uint64_t sub_1C412C038@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1C412C88C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t UUID.encode(to:)()
{
  uint64_t result = sub_1C3F6DD10();
  if (!v1)
  {
    swift_retain();
    uint64_t v3 = sub_1C3FA10C4(v0);
    swift_beginAccess();
    sub_1C3F703BC(v3);
    return swift_release();
  }
  return result;
}

uint64_t UUID._crIsLessThan(_:)()
{
  return sub_1C410BE0C();
}

uint64_t static UUID.canContainAssets.getter()
{
  return 0;
}

uint64_t sub_1C412C10C()
{
  return sub_1C410BE0C();
}

float Float.init(from:)(uint64_t a1)
{
  return sub_1C412CBD4(a1);
}

uint64_t Float.encode(to:)(float a1)
{
  uint64_t result = sub_1C3F6DD10();
  if (!v1)
  {
    if (*(unsigned __int8 *)(*(void *)(result + 16) + 72) >= 2u)
    {
      swift_beginAccess();
      swift_retain();
      sub_1C43EFFD8(a1);
    }
    else
    {
      swift_beginAccess();
      swift_retain();
      sub_1C43EFD7C(a1);
    }
    return swift_release();
  }
  return result;
}

void Float.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static Float.canContainAssets.getter()
{
  return 0;
}

void sub_1C412C218(uint64_t a1@<X0>, float *a2@<X8>)
{
  float v4 = sub_1C412CBD4(a1);
  if (!v2) {
    *a2 = v4;
  }
}

uint64_t sub_1C412C244()
{
  return Float.encode(to:)(*v0);
}

double Double.init(from:)(uint64_t a1)
{
  return sub_1C412CA30(a1);
}

uint64_t Double.encode(to:)(double a1)
{
  uint64_t result = sub_1C3F6DD10();
  if (!v1)
  {
    swift_beginAccess();
    swift_retain();
    sub_1C43EFD7C(a1);
    return swift_release();
  }
  return result;
}

void Double.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static Double.canContainAssets.getter()
{
  return 0;
}

void sub_1C412C314(uint64_t a1@<X0>, double *a2@<X8>)
{
  double v4 = sub_1C412CA30(a1);
  if (!v2) {
    *a2 = v4;
  }
}

uint64_t sub_1C412C340()
{
  double v2 = *v0;
  uint64_t result = sub_1C3F6DD10();
  if (!v1)
  {
    swift_beginAccess();
    swift_retain();
    sub_1C43EFD7C(v2);
    return swift_release();
  }
  return result;
}

BOOL Bool.init(from:)(uint64_t a1)
{
  return sub_1C3FBBBA8(a1);
}

uint64_t Bool.encode(to:)(uint64_t a1, char a2)
{
  uint64_t result = sub_1C3F6DD10();
  if (!v2)
  {
    uint64_t v5 = a2 & 1;
    if (*(unsigned char *)(*(void *)(result + 16) + 72) == 1)
    {
      swift_beginAccess();
      swift_retain();
      sub_1C43EEEE0(v5);
    }
    else
    {
      swift_beginAccess();
      swift_retain();
      sub_1C3F700C4(v5);
    }
    return swift_release();
  }
  return result;
}

Swift::Bool __swiftcall Bool._crIsLessThan(_:)(Swift::Bool a1)
{
  return a1 & ~v1 & 1;
}

void Bool.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static Bool.canContainAssets.getter()
{
  return 0;
}

uint64_t sub_1C412C4C0(unsigned char *a1)
{
  return *a1 & ~*v1 & 1;
}

uint64_t sub_1C412C4D4(uint64_t a1)
{
  return Bool.encode(to:)(a1, *v1);
}

uint64_t URL.CodingKeys.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!result) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t URL.CodingKeys.init(stringValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  BOOL v4 = a1 == 1702060386 && a2 == 0xE400000000000000;
  if (v4 || (sub_1C44982E8() & 1) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v8 = 0;
  }
  else if (a1 == 0x65766974616C6572 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v8 = 1;
  }
  else
  {
    char v9 = sub_1C44982E8();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9) {
      char v8 = 1;
    }
    else {
      char v8 = 2;
    }
  }
  *a3 = v8;
  return result;
}

uint64_t URL.CodingKeys.init(intValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (result)
  {
    if (result == 1) {
      *a2 = 1;
    }
    else {
      *a2 = 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void *static URL.CodingKeys.allCases.getter()
{
  return &unk_1F1F96410;
}

uint64_t URL.CodingKeys.intValue.getter()
{
  return *v0;
}

uint64_t URL.CodingKeys.rawValue.getter()
{
  return *v0;
}

uint64_t URL.CodingKeys.stringValue.getter()
{
  if (*v0) {
    return 0x65766974616C6572;
  }
  else {
    return 1702060386;
  }
}

BOOL sub_1C412C680(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void *sub_1C412C698@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_1C412C6B8(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1C412C6C4()
{
  if (*v0) {
    return 0x65766974616C6572;
  }
  else {
    return 1702060386;
  }
}

uint64_t sub_1C412C6FC()
{
  return *v0;
}

uint64_t sub_1C412C708@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!result) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

void sub_1C412C724(void *a1@<X8>)
{
  *a1 = &unk_1F1F964F8;
}

uint64_t sub_1C412C734(uint64_t a1)
{
  unint64_t v2 = sub_1C412CFF0();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C412C770(uint64_t a1)
{
  unint64_t v2 = sub_1C412CFF0();
  return MEMORY[0x1F41862B0](a1, v2);
}

void URL.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t static URL.canContainAssets.getter()
{
  return 0;
}

uint64_t sub_1C412C7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t result = sub_1C4496298();
  uint64_t v15 = (char *)result;
  if (result)
  {
    uint64_t result = sub_1C44962C8();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v15 += a1 - result;
  }
  BOOL v16 = __OFSUB__(a2, a1);
  uint64_t v17 = a2 - a1;
  if (v16)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v18 = sub_1C44962B8();
  if (v18 >= v17) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v18;
  }
  uint64_t v20 = &v15[v19];
  if (v15) {
    uint64_t v21 = (uint64_t)v20;
  }
  else {
    uint64_t v21 = 0;
  }
  sub_1C3FF5D74(v15, v21, a4, a5, a6, a7, &v23);
  if (!v7) {
    char v22 = v23;
  }
  return v22 & 1;
}

uint64_t sub_1C412C88C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F8BC84(v7, (uint64_t)v6);
  uint64_t v8 = type metadata accessor for Proto_Value(0);
  LODWORD(v7) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8);
  sub_1C3F962E0((uint64_t)v6, &qword_1EBBC0540);
  if (v7 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v9 = 0xD000000000000017;
    *(void *)(v9 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v9 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(void *)(swift_initStackObject() + 16) = a1;
    uint64_t v2 = sub_1C3F8D610();
  }
  swift_release();
  return v2;
}

double sub_1C412CA30(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F8BC84(v6, (uint64_t)v5);
  uint64_t v7 = type metadata accessor for Proto_Value(0);
  LODWORD(v6) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7);
  sub_1C3F962E0((uint64_t)v5, &qword_1EBBC0540);
  if (v6 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v8 = 0xD000000000000017;
    *(void *)(v8 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v8 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(void *)(swift_initStackObject() + 16) = a1;
    sub_1C40157D8();
    double v1 = v9;
  }
  swift_release();
  return v1;
}

float sub_1C412CBD4(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F8BC84(v6, (uint64_t)v5);
  uint64_t v7 = type metadata accessor for Proto_Value(0);
  LODWORD(v6) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7);
  sub_1C3F962E0((uint64_t)v5, &qword_1EBBC0540);
  if (v6 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v8 = 0xD000000000000017;
    *(void *)(v8 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v8 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(void *)(swift_initStackObject() + 16) = a1;
    sub_1C4015C7C();
    float v1 = v9;
  }
  swift_release();
  return v1;
}

uint64_t sub_1C412CD78(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F8BC84(v7, (uint64_t)v6);
  uint64_t v8 = type metadata accessor for Proto_Value(0);
  LODWORD(v7) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8);
  sub_1C3F962E0((uint64_t)v6, &qword_1EBBC0540);
  if (v7 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v9 = 0xD000000000000017;
    *(void *)(v9 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v9 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(void *)(swift_initStackObject() + 16) = a1;
    uint64_t v2 = sub_1C4016134();
  }
  swift_release();
  return v2;
}

unint64_t sub_1C412CF18()
{
  unint64_t result = qword_1EA39D9C8;
  if (!qword_1EA39D9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D9C8);
  }
  return result;
}

unint64_t sub_1C412CF6C(uint64_t a1)
{
  *(void *)(a1 + 16) = sub_1C412CF9C();
  unint64_t result = sub_1C412CFF0();
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t sub_1C412CF9C()
{
  unint64_t result = qword_1EA39D9D0;
  if (!qword_1EA39D9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D9D0);
  }
  return result;
}

unint64_t sub_1C412CFF0()
{
  unint64_t result = qword_1EA39D9D8;
  if (!qword_1EA39D9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D9D8);
  }
  return result;
}

unint64_t sub_1C412D048()
{
  unint64_t result = qword_1EA39D9E0;
  if (!qword_1EA39D9E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D9E0);
  }
  return result;
}

unint64_t sub_1C412D0A0()
{
  unint64_t result = qword_1EA39D9E8;
  if (!qword_1EA39D9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D9E8);
  }
  return result;
}

unint64_t sub_1C412D0F8()
{
  unint64_t result = qword_1EA39D9F0;
  if (!qword_1EA39D9F0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EA39D9F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39D9F0);
  }
  return result;
}

unint64_t sub_1C412D158()
{
  unint64_t result = qword_1EA39DA00;
  if (!qword_1EA39DA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39DA00);
  }
  return result;
}

uint64_t sub_1C412D1AC(uint64_t a1)
{
  *(void *)(a1 + 16) = sub_1C412D214(qword_1EA39DA08);
  uint64_t result = sub_1C412D214(&qword_1EA39D910);
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t sub_1C412D214(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1C4496498();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C412D3B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1C412D3DC(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for URL.CodingKeys()
{
  return &type metadata for URL.CodingKeys;
}

uint64_t (*sub_1C412D40C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(void)@<X8>))(void)
{
  return sub_1C3F8C180(a1, a2);
}

uint64_t sub_1C412D428(uint64_t a1)
{
  return sub_1C3F6DF14(a1);
}

double RefBinding.init(wrappedValue:_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v10, a1);
  long long v13 = xmmword_1C449BDD0;
  swift_retain();
  double v11 = Ref.init<A>(_:_:identity:)((uint64_t)v10, (uint64_t *)&v13, a3, &v14);
  (*(void (**)(uint64_t, uint64_t, double))(v8 + 8))(a1, a3, v11);
  double result = *(double *)&v14;
  *(_OWORD *)a4 = v14;
  *(void *)(a4 + 16) = a2;
  return result;
}

__n128 RefBinding.init(wrappedValue:_:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  __n128 result = *a1;
  *a3 = *a1;
  a3[1].n128_u64[0] = a2;
  return result;
}

uint64_t RefBinding.wrappedValue.getter()
{
  uint64_t v1 = *v0;
  unint64_t v3 = v0[1];
  sub_1C3F7E324(*v0, v3);
  type metadata accessor for Ref();
  Ref.subscript.getter();
  return sub_1C3F7E2CC(v1, v3);
}

uint64_t sub_1C412D608()
{
  return RefBinding.wrappedValue.getter();
}

uint64_t sub_1C412D664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v5 = *(_OWORD *)(a4 + a3 - 16);
  v10[0] = *(_OWORD *)(a4 + a3 - 32);
  uint64_t v9 = *(void *)&v10[0];
  v10[1] = v5;
  type metadata accessor for RefBinding();
  unsigned int v6 = RefBinding.wrappedValue.modify(v10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, a1);
  return ((uint64_t (*)(_OWORD *, void))v6)(v10, 0);
}

void (*RefBinding.wrappedValue.modify(void *a1))(void *a1)
{
  unint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  unint64_t v5 = v1[1];
  uint64_t v6 = v1[2];
  long long v3[4] = *v1;
  v3[5] = v5;
  sub_1C3F7E324(v4, v5);
  uint64_t v7 = type metadata accessor for Ref();
  v3[6] = Ref.subscript.modify(v3, v6, v7);
  return sub_1C412D7AC;
}

void sub_1C412D7AC(void *a1)
{
  uint64_t v1 = *a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  sub_1C3F7E2CC(*(void *)(v1 + 32), *(void *)(v1 + 40));
  free((void *)v1);
}

uint64_t RefBinding.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v47 = a1;
  MEMORY[0x1F4188790](a1);
  int64_t v44 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = v2[1];
  uint64_t v8 = *(void *)(v2[2] + *(void *)(*(void *)v2[2] + 112));
  *(void *)&long long v48 = *v2;
  uint64_t v7 = v48;
  *((void *)&v48 + 1) = v6;
  sub_1C3F7E324(v48, v6);
  uint64_t v45 = v7;
  unint64_t v43 = v6;
  sub_1C3F7E324(v7, v6);
  uint64_t v9 = v4;
  uint64_t v10 = type metadata accessor for Ref();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v41 = v10;
  uint64_t v12 = WitnessTable;
  Reference.identity.getter(v10, WitnessTable);
  uint64_t v14 = v53;
  unint64_t v13 = v54;
  uint64_t v42 = v8;
  uint64_t v15 = v8 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  uint64_t v16 = *(int *)(type metadata accessor for PartiallyOrderedReferenceMap() + 20);
  sub_1C3F7E324(v14, v13);
  sub_1C3F7E324(v14, v13);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v51 = *(void *)(v15 + v16);
  uint64_t v18 = v51;
  *(void *)(v15 + v16) = 0x8000000000000000;
  sub_1C3F7E324(v14, v13);
  unint64_t v20 = sub_1C3F850CC(v14, v13);
  uint64_t v21 = *(void *)(v18 + 16);
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
    goto LABEL_13;
  }
  char v3 = v19;
  if (*(void *)(v18 + 24) >= v23)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v19) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
LABEL_13:
    sub_1C3F85144();
    if (v3) {
      goto LABEL_8;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_1C3F77ABC(v23, isUniquelyReferenced_nonNull_native);
  uint64_t v24 = sub_1C3F850CC(v14, v13);
  if ((v3 & 1) != (v25 & 1))
  {
LABEL_16:
    uint64_t result = sub_1C4498558();
    __break(1u);
    return result;
  }
  unint64_t v20 = v24;
  if ((v3 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  uint64_t v26 = (long long *)(*(void *)(v51 + 56) + 48 * v20);
  long long v48 = *v26;
  long long v49 = v26[1];
  long long v50 = v26[2];
  uint64_t v27 = v48;
  if (!(void)v48)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v28 = (*(uint64_t (**)(void))(*(void *)v27 + 160))();
    *(void *)&long long v48 = v28;
    swift_release();
    uint64_t v27 = v28;
  }
  swift_retain();
  sub_1C3F84C64((uint64_t *)&v48, 1, &v51, v20, v14, v13);
  sub_1C3F84B88(v48, *((uint64_t *)&v48 + 1), v49);
  sub_1C3F7E2CC(v14, v13);
  *(void *)(v15 + v16) = v51;
  sub_1C3F7E2CC(v14, v13);
  swift_endAccess();
  sub_1C3F7E2CC(v14, v13);
  uint64_t v29 = sub_1C3F7E2CC(v14, v13);
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v27 + 240))(&v48, v29);
  uint64_t v30 = v44;
  uint64_t v31 = v9;
  swift_dynamicCast();
  uint64_t v32 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 24))(v30, v47, v9);
  *((void *)&v49 + 1) = v9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v48);
  (*(void (**)(uint64_t *, char *, uint64_t))(v32 + 16))(boxed_opaque_existential_1, v30, v9);
  (*(void (**)(long long *))(*(void *)v27 + 248))(&v48);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
  uint64_t v34 = v45;
  unint64_t v35 = v43;
  *(void *)&long long v48 = v45;
  *((void *)&v48 + 1) = v43;
  Reference.identity.getter(v41, v12);
  uint64_t v36 = v53;
  unint64_t v37 = v54;
  swift_beginAccess();
  sub_1C3F81BF8(v52, v36, v37);
  swift_endAccess();
  sub_1C3F7E2CC(v52[0], v52[1]);
  unint64_t v38 = *(void (**)(char *, uint64_t))(v32 + 8);
  v38(v30, v31);
  swift_release();
  swift_release();
  sub_1C3F7E2CC(v34, v35);
  sub_1C3F7E2CC(v34, v35);
  return ((uint64_t (*)(uint64_t, uint64_t))v38)(v47, v31);
}

uint64_t RefBinding.projectedValue.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_1C3F7E324(v2, v3);
}

uint64_t sub_1C412DCFC()
{
  return 32;
}

__n128 sub_1C412DD08(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_1C412DD18(uint64_t a1)
{
  sub_1C3F7E2CC(*(void *)a1, *(void *)(a1 + 8));
  return swift_release();
}

uint64_t *sub_1C412DD58(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1C3F7E324(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  swift_retain();
  return a1;
}

uint64_t *sub_1C412DDA8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1C3F7E324(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1C3F7E2CC(v6, v7);
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *sub_1C412DE0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1C3F7E2CC(v4, v5);
  a1[2] = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for RefBinding()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C412DE70@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1F4188790](v3);
  unint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C3F96414(v1 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded, (uint64_t)v5, type metadata accessor for Proto_Sequence);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1C3F9633C((uint64_t)v5, type metadata accessor for Proto_Sequence);
  id v6 = objc_allocWithZone(MEMORY[0x1E4F28E78]);
  unint64_t v7 = (void *)sub_1C4497188();
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithString_, v7);

  uint64_t result = sub_1C3FF32D4(0, &qword_1EA39BFE0);
  a1[3] = result;
  *a1 = v8;
  return result;
}

id sub_1C412E040()
{
  return sub_1C3FA90F0(&OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__fromVersion, 0xD00000000000001DLL, 0x80000001C44B2C20);
}

id sub_1C412E090()
{
  return sub_1C3FA90F0(&OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__fromAddedByVersion, 0xD000000000000025, 0x80000001C44B2BF0);
}

uint64_t sub_1C412E0E0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C3FA5EC0(a1, &OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removedAddedBy, a2);
}

uint64_t sub_1C412E118(unint64_t a1)
{
  return sub_1C3FA61C8(a1, &OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removedAddedBy);
}

id sub_1C412E190()
{
  return sub_1C412E608(type metadata accessor for CRStringDecoder);
}

uint64_t sub_1C412E1A8()
{
  return type metadata accessor for CRStringDecoder(0);
}

uint64_t sub_1C412E1B4(uint64_t a1, unsigned int a2)
{
  return sub_1C3F586C0(a1, a2, &OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removedAddedBy);
}

uint64_t sub_1C412E1D8(unint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_subsequence;
  swift_beginAccess();
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Subsequence._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = sub_1C3F7273C(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  uint64_t v7 = *(void *)(v3 + v4)
     + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__contentOptions;
  swift_beginAccess();
  *(void *)uint64_t v7 = a1;
  *(unsigned char *)(v7 + 8) = a1 < 3;
  return swift_endAccess();
}

uint64_t sub_1C412E318(uint64_t a1)
{
  sub_1C3F5E790(a1, (uint64_t)v12);
  sub_1C3FF32D4(0, &qword_1EA39BFD0);
  if (swift_dynamicCast())
  {
    uint64_t v2 = sub_1C44971B8();
    uint64_t v4 = v3;
    uint64_t v5 = v1 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence;
    swift_beginAccess();
    uint64_t v6 = *(int *)(type metadata accessor for Proto_Sequence(0) + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Sequence._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = (void *)swift_retain();
      *(void *)(v5 + v6) = sub_1C3F7C6CC(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(v5 + v6);
    swift_beginAccess();
    *(void *)(v8 + 16) = v2;
    *(void *)(v8 + 24) = v4;
    swift_endAccess();

    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v10 = 0xD00000000000001BLL;
    *(void *)(v10 + 8) = 0x80000001C44B2B70;
    *(unsigned char *)(v10 + 16) = 0;
    return swift_willThrow();
  }
}

uint64_t sub_1C412E4C0(uint64_t a1)
{
  return sub_1C3F55264(a1, (void (*)(void *))sub_1C43F1330);
}

uint64_t sub_1C412E540(uint64_t a1)
{
  return sub_1C3F55264(a1, (void (*)(void *))sub_1C43F14F4);
}

id sub_1C412E5F0()
{
  return sub_1C412E608(type metadata accessor for CRStringEncoder);
}

id sub_1C412E608(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t sub_1C412E648()
{
  return type metadata accessor for CRStringEncoder(0);
}

uint64_t sub_1C412E650()
{
  uint64_t result = type metadata accessor for Proto_Sequence(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Proto_Subsequence(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1C412E728()
{
  return swift_release();
}

id sub_1C412E73C()
{
  return sub_1C412E608(type metadata accessor for CRSequenceDecoder);
}

uint64_t sub_1C412E754()
{
  return type metadata accessor for CRSequenceDecoder(0);
}

uint64_t sub_1C412E75C()
{
  return sub_1C412FA34();
}

uint64_t sub_1C412E76C()
{
  return swift_release();
}

id sub_1C412E780()
{
  return sub_1C412E608(type metadata accessor for CRSequenceEncoder);
}

uint64_t sub_1C412E798()
{
  return type metadata accessor for CRSequenceEncoder(0);
}

uint64_t sub_1C412E7A0()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1C412E7E8@<X0>(void *a1@<X8>)
{
  void (*v72)(long long *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  void *v74;
  char v75;
  char v76;
  unint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  char v87;
  char v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  void *v95;
  void *v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  objc_class *v124;
  id v125;
  id v126;
  void *v127;
  id v128;
  id v129;
  void *v130;
  char isUniquelyReferenced_nonNull_native;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t result;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void v142[2];
  uint64_t v143;
  char *v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  unint64_t *v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int (**v156)(uint64_t, uint64_t, uint64_t);
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  id v167;
  uint64_t v168;
  unsigned int (*v169)(uint64_t, uint64_t, uint64_t);
  uint64_t *v170;
  unsigned int (**v171)(uint64_t, uint64_t, uint64_t);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  objc_super v181;
  _OWORD v182[2];
  long long v183;
  ValueMetadata *v184;
  void *v185;

  uint64_t v149 = a1;
  uint64_t v163 = type metadata accessor for Proto_Timestamp(0);
  char v180 = *(void **)(v163 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v163);
  uint64_t v146 = (void *)((char *)v142 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v2);
  uint64_t v148 = (void *)((char *)v142 - v4);
  BOOL v153 = sub_1C4496678();
  unsigned __int8 v160 = *(void *)(v153 - 8);
  MEMORY[0x1F4188790](v153);
  uint64_t v152 = (char *)v142 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v145 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1F4188790](v145);
  int v144 = (char *)v142 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  BOOL v143 = (uint64_t)v142 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v147 = (uint64_t)v142 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v155 = (uint64_t)v142 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v177 = (char *)v142 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v174 = type metadata accessor for Proto_Value(0);
  uint64_t v171 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v174 - 8);
  MEMORY[0x1F4188790](v174);
  uint64_t v173 = (uint64_t)v142 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = type metadata accessor for Proto_Sequence.AttributeRun.Attribute(0);
  uint64_t v157 = *(void *)(v172 - 8);
  MEMORY[0x1F4188790](v172);
  BOOL v178 = (uint64_t)v142 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Proto_Sequence.AttributeRun(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v164 = v17;
  unint64_t v165 = v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v168 = (uint64_t)v142 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Proto_Sequence(0);
  uint64_t v21 = v20 - 8;
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)v142 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v176 = v1;
  uint64_t v24 = v1 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded;
  sub_1C3F96414(v1 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded, (uint64_t)v23, type metadata accessor for Proto_Sequence);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1C3F9633C((uint64_t)v23, type metadata accessor for Proto_Sequence);
  id v25 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
  uint64_t v26 = (void *)sub_1C4497188();
  swift_bridgeObjectRelease();
  uint64_t v167 = objc_msgSend(v25, sel_initWithString_, v26);

  sub_1C3F96414(v24, (uint64_t)v23, type metadata accessor for Proto_Sequence);
  uint64_t v27 = (uint64_t *)(*(void *)&v23[*(int *)(v21 + 28)]
                  + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__attributeRuns);
  swift_beginAccess();
  uint64_t v28 = *v27;
  swift_bridgeObjectRetain();
  sub_1C3F9633C((uint64_t)v23, type metadata accessor for Proto_Sequence);
  uint64_t v154 = *(void *)(v28 + 16);
  if (!v154)
  {
LABEL_58:
    swift_bridgeObjectRelease();
    uint64_t result = sub_1C3FF32D4(0, &qword_1EA39B360);
    long long v137 = v149;
    v149[3] = result;
    *long long v137 = v167;
    return result;
  }
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  uint64_t v31 = v176;
  unint64_t v170 = (uint64_t *)(v176 + OBJC_IVAR____TtC9Coherence25CRAttributedStringDecoder_scope);
  uint64_t v32 = *(unsigned __int8 *)(v165 + 80);
  char v175 = OBJC_IVAR____TtC9Coherence15CRStringDecoder_decoder;
  int v159 = v28 + ((v32 + 32) & ~v32);
  v171 += 6;
  unint64_t v156 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v180 + 6);
  v142[0] = v160 + 32;
  v142[1] = v160 + 16;
  unint64_t v33 = (void *)&unk_1EA39B000;
  unint64_t v150 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v34 = v168;
  uint64_t v35 = (uint64_t)v177;
  uint64_t v36 = v165;
  uint64_t v158 = v28;
  while (1)
  {
    if (v30 >= *(void *)(v28 + 16)) {
      goto LABEL_66;
    }
    uint64_t v161 = v30;
    uint64_t v162 = v29;
    sub_1C3F96414(v159 + *(void *)(v36 + 72) * v30, v34, type metadata accessor for Proto_Sequence.AttributeRun);
    char v180 = (void *)sub_1C3FE4BEC(MEMORY[0x1E4FBC860]);
    uint64_t v37 = *(int *)(v164 + 20);
    uint64_t v38 = *(void *)(v34 + v37);
    swift_beginAccess();
    uint64_t v39 = *(void *)(v38 + 24);
    uint64_t v40 = *(void *)(v39 + 16);
    uint64_t v166 = v37;
    if (v40) {
      break;
    }
LABEL_43:
    unint64_t v102 = *(void *)(v34 + v37) + v33[70];
    swift_beginAccess();
    uint64_t v103 = v155;
    sub_1C3F970C4(v102, v155, &qword_1EBBC0620);
    uint64_t v169 = *v156;
    LODWORD(v102) = v169(v103, 1, v163);
    sub_1C3F962E0(v103, &qword_1EBBC0620);
    if (v102 == 1)
    {
      unint64_t v33 = (void *)&unk_1EA39B000;
    }
    else
    {
      BOOL v104 = *(void *)(v31 + v175);
      uint64_t v105 = *(void *)(v34 + v37)
           + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
      swift_beginAccess();
      char v106 = v105;
      char v107 = v147;
      sub_1C3F970C4(v106, v147, &qword_1EBBC0620);
      uint64_t v108 = v163;
      char v109 = v169;
      if (v169(v107, 1, v163) == 1)
      {
        char v110 = v107;
        uint64_t v111 = v148;
        *uint64_t v148 = 0;
        v111[1] = 0;
        swift_retain();
        sub_1C4496888();
        uint64_t v112 = v110;
        uint64_t v35 = (uint64_t)v177;
        sub_1C3F962E0(v112, &qword_1EBBC0620);
      }
      else
      {
        long long v113 = v107;
        uint64_t v111 = v148;
        sub_1C3F9E890(v113, (uint64_t)v148, type metadata accessor for Proto_Timestamp);
        swift_retain();
      }
      uint64_t v114 = (uint64_t)v111;
      uint64_t v115 = *v111;
      sub_1C3F9633C(v114, type metadata accessor for Proto_Timestamp);
      uint64_t v116 = *(void *)(v104 + 24);
      char v117 = *(void *)(v116 + 16);
      unint64_t v33 = &unk_1EA39B000;
      if (!v117 || v115 >= v117)
      {
        sub_1C3FE3FF0();
        unint64_t v140 = swift_allocError();
        *(_OWORD *)int64_t v141 = xmmword_1C44A0890;
        *(unsigned char *)(v141 + 16) = 0;
        uint64_t v179 = v140;
        swift_willThrow();
        swift_bridgeObjectRelease();

        swift_release();
LABEL_59:
        sub_1C3F9633C(v168, type metadata accessor for Proto_Sequence.AttributeRun);
        return swift_bridgeObjectRelease();
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v160 + 16))(v152, v116+ ((*(unsigned __int8 *)(v160 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80))+ *(void *)(v160 + 72) * v115, v153);
      swift_release();
      uint64_t v118 = *(void *)(v168 + v166)
           + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
      swift_beginAccess();
      char v119 = v118;
      unint64_t v120 = v143;
      sub_1C3F970C4(v119, v143, &qword_1EBBC0620);
      if (v109(v120, 1, v108) == 1)
      {
        unint64_t v121 = v146;
        void *v146 = 0;
        v121[1] = 0;
        sub_1C4496888();
        sub_1C3F962E0(v120, &qword_1EBBC0620);
      }
      else
      {
        unint64_t v121 = v146;
        sub_1C3F9E890(v120, (uint64_t)v146, type metadata accessor for Proto_Timestamp);
      }
      int64_t v122 = v121[1];
      sub_1C3F9633C((uint64_t)v121, type metadata accessor for Proto_Timestamp);
      unsigned int v123 = (uint64_t)v144;
      (*(void (**)(char *, char *, uint64_t))v142[0])(v144, v152, v153);
      *(void *)(v123 + *(int *)(v145 + 20)) = v122;
      uint64_t v124 = (objc_class *)type metadata accessor for ObjCFinalizedTimestamp(0);
      uint64_t v125 = objc_allocWithZone(v124);
      sub_1C3F96414(v123, (uint64_t)v125 + OBJC_IVAR___ObjCFinalizedTimestamp_timestamp, type metadata accessor for FinalizedTimestamp);
      v181.receiver = v125;
      v181.super_class = v124;
      uint64_t v126 = objc_msgSendSuper2(&v181, sel_init);
      sub_1C3F9633C(v123, type metadata accessor for FinalizedTimestamp);
      if (qword_1EA39B330 != -1) {
        swift_once();
      }
      unint64_t v127 = (void *)qword_1EA39B328;
      uint64_t v184 = (ValueMetadata *)v124;
      *(void *)&unint64_t v183 = v126;
      sub_1C3FF2864(&v183, v182);
      int64_t v128 = v127;
      unint64_t v129 = v126;
      uint64_t v130 = v180;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v185 = v130;
      sub_1C4420CA8(v182, v128, isUniquelyReferenced_nonNull_native);

      swift_bridgeObjectRelease();
      uint64_t v37 = v166;
    }
    type metadata accessor for Key(0);
    sub_1C4131DE0();
    unint64_t v132 = (void *)sub_1C4496ED8();
    swift_bridgeObjectRelease();
    uint64_t v34 = v168;
    uint64_t v133 = *(void *)(v168 + v37);
    swift_beginAccess();
    long long v134 = v162;
    objc_msgSend(v167, sel_setAttributes_range_, v132, v162, *(unsigned int *)(v133 + 16));

    long long v135 = *(unsigned int *)(v133 + 16);
    sub_1C3F9633C(v34, type metadata accessor for Proto_Sequence.AttributeRun);
    unint64_t v98 = __OFADD__(v134, v135);
    uint64_t v29 = v134 + v135;
    if (v98) {
      goto LABEL_67;
    }
    unint64_t v30 = v161 + 1;
    uint64_t v28 = v158;
    uint64_t v36 = v165;
    if (v161 + 1 == v154) {
      goto LABEL_58;
    }
  }
  uint64_t v41 = v157;
  uint64_t v42 = v39 + ((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80));
  uint64_t v151 = v39;
  swift_bridgeObjectRetain();
  uint64_t v169 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 72);
  uint64_t v43 = v178;
  while (1)
  {
    sub_1C3F96414(v42, v43, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
    uint64_t v45 = *(int *)(v172 + 20);
    uint64_t v46 = *(void *)(v43 + v45)
        + OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
    swift_beginAccess();
    sub_1C3F970C4(v46, v35, &qword_1EBBC0540);
    uint64_t v47 = v174;
    if ((*v171)(v35, 1, v174) == 1)
    {
      uint64_t v48 = v173;
      sub_1C4496888();
      uint64_t v49 = *(int *)(v47 + 20);
      if (qword_1EBBBF8C8 != -1) {
        swift_once();
      }
      *(void *)(v48 + v49) = qword_1EBBBF8B8;
      swift_retain();
      sub_1C3F962E0(v35, &qword_1EBBC0540);
      uint64_t v50 = v48;
    }
    else
    {
      uint64_t v51 = v35;
      uint64_t v50 = v173;
      sub_1C3F9E890(v51, v173, type metadata accessor for Proto_Value);
    }
    uint64_t v52 = *(void *)(v31 + v175);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    swift_retain();
    uint64_t v53 = sub_1C3F974B0(v50, v52);
    swift_release();
    uint64_t v54 = *(void *)(v43 + v45);
    swift_beginAccess();
    unint64_t v55 = *(unsigned int *)(v54 + 16);
    uint64_t v56 = *(void *)(v53 + 32);
    unint64_t v57 = *(void *)(v56 + 16);
    if (v57) {
      BOOL v58 = v57 > v55;
    }
    else {
      BOOL v58 = 0;
    }
    if (!v58)
    {
      sub_1C3FE3FF0();
      uint64_t v138 = swift_allocError();
      *(_OWORD *)int64_t v139 = xmmword_1C449B6C0;
      *(unsigned char *)(v139 + 16) = 0;
      uint64_t v179 = v138;
      swift_willThrow();
      swift_release();

      sub_1C3F9633C(v43, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_59;
    }
    uint64_t v59 = v56 + 16 * v55;
    uint64_t v60 = *(void *)(v59 + 32);
    uint64_t v61 = *(void *)(v59 + 40);
    uint64_t v62 = *v170;
    uint64_t v63 = v170[1];
    uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t))(v63 + 8);
    swift_bridgeObjectRetain();
    uint64_t v65 = v64(v62, v63);
    if (*(void *)(v65 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v66 = sub_1C3FB9894(v60, v61);
      if (v67)
      {
        uint64_t v68 = (uint64_t *)(*(void *)(v65 + 56) + 16 * v66);
        uint64_t v69 = *v68;
        uint64_t v70 = v68[1];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v71 = (void *)sub_1C4497188();
        swift_bridgeObjectRelease();
        uint64_t v72 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v70 + 8);
        uint64_t v184 = &type metadata for AnyCRValue;
        uint64_t v73 = v179;
        v72(&v183, v53, v69, v70);
        uint64_t v179 = v73;
        if (v73) {
          goto LABEL_60;
        }
        sub_1C3FF2864(&v183, v182);
        uint64_t v74 = v180;
        uint64_t v75 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v185 = v74;
        int v77 = sub_1C4061A38((uint64_t)v71);
        uint64_t v78 = v74[2];
        uint64_t v79 = (v76 & 1) == 0;
        uint64_t v80 = v78 + v79;
        if (__OFADD__(v78, v79)) {
          goto LABEL_64;
        }
        uint64_t v81 = v76;
        if (v74[3] >= v80)
        {
          if ((v75 & 1) == 0) {
            sub_1C40689D0();
          }
        }
        else
        {
          sub_1C4063B44(v80, v75);
          uint64_t v82 = sub_1C4061A38((uint64_t)v71);
          if ((v81 & 1) != (v83 & 1)) {
            goto LABEL_68;
          }
          int v77 = v82;
        }
        uint64_t v43 = v178;
        uint64_t v95 = v185;
        char v180 = v185;
        if ((v81 & 1) == 0)
        {
          v185[(v77 >> 6) + 8] |= 1 << v77;
          *(void *)(v180[6] + 8 * v77) = v71;
          sub_1C3FF2864(v182, (_OWORD *)(v180[7] + 32 * v77));
          uint64_t v96 = v180;
          uint64_t v100 = v180[2];
          unint64_t v98 = __OFADD__(v100, 1);
          uint64_t v99 = v100 + 1;
          if (v98) {
            goto LABEL_65;
          }
LABEL_41:
          v96[2] = v99;
          char v101 = v71;
          goto LABEL_7;
        }
        goto LABEL_6;
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v71 = (void *)sub_1C4497188();
    swift_bridgeObjectRelease();
    uint64_t v184 = &type metadata for AnyCRValue;
    uint64_t v84 = swift_retain();
    uint64_t v85 = v179;
    AnyCRValue.init(from:)(v84, (uint64_t *)&v183);
    uint64_t v179 = v85;
    if (v85)
    {
LABEL_60:
      swift_release();

      sub_1C3F9633C(v178, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1C3F9633C(v168, type metadata accessor for Proto_Sequence.AttributeRun);
      swift_bridgeObjectRelease();
      return __swift_deallocate_boxed_opaque_existential_0((uint64_t)&v183);
    }
    sub_1C3FF2864(&v183, v182);
    uint64_t v86 = v180;
    uint64_t v87 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v185 = v86;
    int v77 = sub_1C4061A38((uint64_t)v71);
    uint64_t v89 = v86[2];
    uint64_t v90 = (v88 & 1) == 0;
    uint64_t v91 = v89 + v90;
    if (__OFADD__(v89, v90)) {
      break;
    }
    uint64_t v92 = v88;
    if (v86[3] >= v91)
    {
      if ((v87 & 1) == 0) {
        sub_1C40689D0();
      }
    }
    else
    {
      sub_1C4063B44(v91, v87);
      uint64_t v93 = sub_1C4061A38((uint64_t)v71);
      if ((v92 & 1) != (v94 & 1)) {
        goto LABEL_68;
      }
      int v77 = v93;
    }
    uint64_t v43 = v178;
    uint64_t v95 = v185;
    char v180 = v185;
    if ((v92 & 1) == 0)
    {
      v185[(v77 >> 6) + 8] |= 1 << v77;
      *(void *)(v180[6] + 8 * v77) = v71;
      sub_1C3FF2864(v182, (_OWORD *)(v180[7] + 32 * v77));
      uint64_t v96 = v180;
      int64_t v97 = v180[2];
      unint64_t v98 = __OFADD__(v97, 1);
      uint64_t v99 = v97 + 1;
      if (v98) {
        goto LABEL_63;
      }
      goto LABEL_41;
    }
LABEL_6:
    int64_t v44 = (_OWORD *)(v95[7] + 32 * v77);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    sub_1C3FF2864(v182, v44);
LABEL_7:
    swift_release();

    swift_bridgeObjectRelease();
    sub_1C3F9633C(v43, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
    uint64_t v31 = v176;
    uint64_t v35 = (uint64_t)v177;
    v42 += (uint64_t)v169;
    if (!--v40)
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = v168;
      unint64_t v33 = &unk_1EA39B000;
      uint64_t v37 = v166;
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  type metadata accessor for Key(0);
  uint64_t result = sub_1C4498558();
  __break(1u);
  return result;
}

id sub_1C412F9E8()
{
  return sub_1C412E608(type metadata accessor for CRAttributedStringDecoder);
}

uint64_t sub_1C412FA00()
{
  return type metadata accessor for CRAttributedStringDecoder(0);
}

uint64_t type metadata accessor for CRAttributedStringDecoder(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EA39B310);
}

uint64_t sub_1C412FA28()
{
  return sub_1C412FA34();
}

uint64_t sub_1C412FA34()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1C412FA70(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Proto_Sequence.AttributeRun(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C3F5E790(a1, (uint64_t)aBlock);
  sub_1C3FF32D4(0, &qword_1EA39DB00);
  if (!swift_dynamicCast())
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v34 = 0xD000000000000019;
    *(void *)(v34 + 8) = 0x80000001C44B2B20;
    *(unsigned char *)(v34 + 16) = 0;
    return swift_willThrow();
  }
  uint64_t v42 = v5;
  uint64_t v43 = v8;
  uint64_t v44 = v6;
  uint64_t v45 = v2;
  id v12 = v48;
  id v13 = objc_msgSend(v48, sel_string);
  uint64_t v14 = sub_1C44971B8();
  uint64_t v16 = v15;

  uint64_t v17 = (uint64_t)v3 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence;
  swift_beginAccess();
  uint64_t v18 = *(int *)(v9 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Sequence._StorageClass(0);
    swift_allocObject();
    uint64_t v19 = (void *)swift_retain();
    *(void *)(v17 + v18) = sub_1C3F7C6CC(v19);
    swift_release();
  }
  uint64_t v20 = *(void *)(v17 + v18);
  swift_beginAccess();
  *(void *)(v20 + 16) = v14;
  *(void *)(v20 + 24) = v16;
  swift_endAccess();
  swift_bridgeObjectRelease();
  id v49 = 0;
  id v21 = objc_msgSend(v12, sel_length);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v3;
  *(void *)(v22 + 24) = &v49;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_1C4131D6C;
  *(void *)(v23 + 24) = v22;
  uint64_t v46 = v22;
  aBlock[4] = sub_1C4131D84;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1C4415038;
  aBlock[3] = &block_descriptor_5;
  uint64_t v24 = (uint64_t *)_Block_copy(aBlock);
  uint64_t v25 = (uint64_t)v12;
  id v26 = v3;
  swift_retain();
  swift_release();
  objc_msgSend(v12, sel_enumerateAttributesInRange_options_usingBlock_, 0, v21, 0, v24);
  _Block_release(v24);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_19:
    swift_once();
    goto LABEL_10;
  }
  sub_1C3F96414(v17, (uint64_t)v11, type metadata accessor for Proto_Sequence);
  uint64_t v24 = &qword_1EBBBAF50[22];
  uint64_t v28 = (uint64_t *)(*(void *)&v11[*(int *)(v9 + 20)]
                  + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__attributeRuns);
  swift_beginAccess();
  uint64_t v29 = *v28;
  swift_bridgeObjectRetain();
  sub_1C3F9633C((uint64_t)v11, type metadata accessor for Proto_Sequence);
  uint64_t v30 = *(void *)(v29 + 16);
  swift_bridgeObjectRelease();
  if (v30)
  {
    id v31 = v49;
    if (v49)
    {
LABEL_7:
      id v32 = v31;
      swift_willThrow();

      return swift_release();
    }
    goto LABEL_17;
  }
  uint64_t v25 = (uint64_t)v43;
  sub_1C4496888();
  uint64_t isEscapingClosureAtFileLocation = *(int *)(v42 + 20);
  if (qword_1EA39B248 != -1) {
    goto LABEL_19;
  }
LABEL_10:
  *(void *)(v25 + isEscapingClosureAtFileLocation) = qword_1EA39B238;
  swift_beginAccess();
  uint64_t v35 = *(int *)(v9 + 20);
  uint64_t v36 = (unint64_t *)(*(void *)(v17 + v35) + v24[508]);
  swift_beginAccess();
  unint64_t v37 = *v36;
  swift_retain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v37 = sub_1C3FF1E18(0, *(void *)(v37 + 16) + 1, 1, v37);
  }
  unint64_t v39 = *(void *)(v37 + 16);
  unint64_t v38 = *(void *)(v37 + 24);
  if (v39 >= v38 >> 1) {
    unint64_t v37 = sub_1C3FF1E18(v38 > 1, v39 + 1, 1, v37);
  }
  *(void *)(v37 + 16) = v39 + 1;
  sub_1C3F9E890(v25, v37+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(void *)(v44 + 72) * v39, type metadata accessor for Proto_Sequence.AttributeRun);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Sequence._StorageClass(0);
    swift_allocObject();
    uint64_t v40 = (void *)swift_retain();
    *(void *)(v17 + v35) = sub_1C3F7C6CC(v40);
    swift_release();
  }
  uint64_t v41 = (unint64_t *)(*(void *)(v17 + v35) + v24[508]);
  swift_beginAccess();
  *uint64_t v41 = v37;
  swift_endAccess();
  swift_bridgeObjectRelease();
  id v31 = v49;
  if (v49) {
    goto LABEL_7;
  }
LABEL_17:

  return swift_release();
}

void sub_1C41300C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char *a5, void **a6)
{
  uint64_t v168 = a6;
  uint64_t v199 = a5;
  uint64_t v196 = a1;
  uint64_t v180 = type metadata accessor for Proto_Value(0);
  int64_t v210 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v180 - 8);
  MEMORY[0x1F4188790](v180);
  uint64_t v181 = (uint64_t)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v174 = (uint64_t)&v165 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v179 = (uint64_t)&v165 - v12;
  uint64_t v175 = type metadata accessor for Proto_Sequence.AttributeRun.Attribute(0);
  uint64_t v173 = *(void *)(v175 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v175);
  uint64_t v177 = (uint64_t)&v165 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v165 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v194 = (uint64_t)&v165 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v205 = (uint64_t)&v165 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v211 = (uint64_t)&v165 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v193 = (uint64_t)&v165 - v24;
  uint64_t v212 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v25 = *(void *)(v212 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v212);
  uint64_t v28 = (char *)&v165 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v200 = (uint64_t *)((char *)&v165 - v29);
  uint64_t v191 = sub_1C4496678();
  uint64_t v30 = *(void *)(v191 - 8);
  MEMORY[0x1F4188790](v191);
  int64_t v190 = (char *)&v165 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v189 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1F4188790](v189);
  uint64_t v188 = (uint64_t)&v165 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for Proto_Sequence.AttributeRun(0);
  uint64_t v34 = v33 - 8;
  uint64_t v172 = *(void *)(v33 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v171 = (uint64_t)&v165 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  unint64_t v38 = (unint64_t)&v165 - v37;
  sub_1C4496888();
  unint64_t v39 = *(int *)(v34 + 28);
  if (qword_1EA39B248 != -1) {
LABEL_76:
  }
    swift_once();
  unint64_t v213 = v39;
  *(void *)(v38 + v39) = qword_1EA39B238;
  if ((a3 & 0x8000000000000000) != 0 || (uint64_t v169 = (unsigned char *)a4, HIDWORD(a3)))
  {
    while (1)
    {
LABEL_77:
      sub_1C4497F48();
      __break(1u);
    }
  }
  uint64_t v40 = v38;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v42 = v213;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for Proto_Sequence.AttributeRun._StorageClass(0);
    swift_allocObject();
    uint64_t v43 = swift_retain();
    unint64_t v42 = v213;
    *(void *)(v38 + v42) = sub_1C4405D24(v43);
    swift_release();
  }
  uint64_t v44 = *(void *)(v38 + v42);
  a4 = 1;
  swift_beginAccess();
  *(_DWORD *)(v44 + 16) = a3;
  uint64_t v45 = *(void *)(v196 + 64);
  uint64_t v176 = v196 + 64;
  uint64_t v46 = 1 << *(unsigned char *)(v196 + 32);
  uint64_t v47 = -1;
  if (v46 < 64) {
    uint64_t v47 = ~(-1 << v46);
  }
  unint64_t v38 = v47 & v45;
  unint64_t v39 = (unint64_t)(v46 + 63) >> 6;
  uint64_t v195 = (uint64_t)v217 + 8;
  long long v198 = &v220;
  BOOL v178 = v210 + 7;
  int64_t v210 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
  uint64_t v186 = (void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  uint64_t v187 = (void (**)(char *, uint64_t, uint64_t))(v30 + 32);
  id v48 = (void (**)(uint64_t, uint64_t))(v30 + 8);
  uint64_t v30 = v40;
  uint64_t v185 = v48;
  unint64_t v204 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  uint64_t v166 = (char *)(v39 - 1);
  uint64_t v49 = swift_bridgeObjectRetain();
  char v182 = 0;
  int64_t v183 = v39;
  uint64_t v167 = (char *)(v39 - 5);
  uint64_t v170 = v49 + 104;
  uint64_t v184 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v208 = v40;
  uint64_t v197 = v16;
  uint64_t v192 = v28;
  uint64_t v28 = 0;
  while (1)
  {
    if (v38)
    {
      unint64_t v52 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      unint64_t v53 = v52 | ((void)v28 << 6);
LABEL_12:
      uint64_t v54 = *(void *)(v196 + 56);
      *(void *)&v217[0] = *(void *)(*(void *)(v196 + 48) + 8 * v53);
      unint64_t v55 = *(void **)&v217[0];
      sub_1C3F5E790(v54 + 32 * v53, v195);
      id v56 = v55;
      goto LABEL_22;
    }
    unint64_t v57 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_76;
    }
    if ((uint64_t)v57 < v183)
    {
      unint64_t v58 = *(void *)(v176 + 8 * (void)v57);
      if (v58) {
        goto LABEL_16;
      }
      if ((uint64_t)(v28 + 2) >= v183)
      {
        ++v28;
      }
      else
      {
        unint64_t v58 = *(void *)(v176 + 8 * (void)(v28 + 2));
        if (v58)
        {
          unint64_t v57 = v28 + 2;
LABEL_16:
          unint64_t v38 = (v58 - 1) & v58;
          unint64_t v53 = __clz(__rbit64(v58)) + ((void)v57 << 6);
          uint64_t v28 = v57;
          goto LABEL_12;
        }
        if ((uint64_t)(v28 + 3) >= v183)
        {
          v28 += 2;
        }
        else
        {
          unint64_t v58 = *(void *)(v176 + 8 * (void)(v28 + 3));
          if (v58)
          {
            unint64_t v57 = v28 + 3;
            goto LABEL_16;
          }
          unint64_t v57 = v28 + 4;
          if ((uint64_t)(v28 + 4) >= v183)
          {
            v28 += 3;
          }
          else
          {
            unint64_t v58 = *(void *)(v176 + 8 * (void)v57);
            if (v58) {
              goto LABEL_16;
            }
            while (v167 != v28)
            {
              unint64_t v58 = *(void *)(v170 + 8 * (void)v28++);
              if (v58)
              {
                unint64_t v57 = v28 + 4;
                goto LABEL_16;
              }
            }
            uint64_t v28 = v166;
          }
        }
      }
    }
    unint64_t v38 = 0;
    uint64_t v218 = 0;
    memset(v217, 0, sizeof(v217));
LABEL_22:
    sub_1C3F961BC((uint64_t)v217, (uint64_t)&v219, &qword_1EA39B320);
    id v59 = v219;
    if (!v219) {
      break;
    }
    sub_1C3FF2864(v198, v217);
    if (qword_1EA39B330 != -1) {
      swift_once();
    }
    uint64_t v60 = sub_1C44971B8();
    unint64_t v39 = v61;
    uint64_t v62 = sub_1C44971B8();
    a4 = v63;
    if (v60 == v62 && v39 == v63)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_29;
    }
    a3 = sub_1C44982E8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (a3)
    {
LABEL_29:
      uint64_t v206 = v28;
      id v207 = v59;
      unint64_t v209 = v38;
      sub_1C3F5E790((uint64_t)v217, (uint64_t)v216);
      type metadata accessor for ObjCFinalizedTimestamp(0);
      swift_dynamicCast();
      uint64_t v202 = &v215[OBJC_IVAR___ObjCFinalizedTimestamp_timestamp];
      id v203 = v215;
      uint64_t v64 = v188;
      sub_1C3F96414((uint64_t)&v215[OBJC_IVAR___ObjCFinalizedTimestamp_timestamp], v188, type metadata accessor for FinalizedTimestamp);
      uint64_t v66 = (uint64_t)v190;
      uint64_t v65 = v191;
      (*v187)(v190, v64, v191);
      char v67 = (objc_class *)type metadata accessor for ObjCReplica(0);
      uint64_t v68 = (char *)objc_allocWithZone(v67);
      uint64_t v69 = *v186;
      (*v186)(&v68[OBJC_IVAR___ObjCReplica_uuid], v66, v65);
      *(void *)&v68[OBJC_IVAR___ObjCReplica_index] = 0;
      v214.receiver = v68;
      v214.super_class = v67;
      swift_retain();
      uint64_t v70 = (char *)objc_msgSendSuper2(&v214, sel_init);
      uint64_t v71 = *v185;
      (*v185)(v66, v65);
      uint64_t v72 = &v70[OBJC_IVAR___ObjCReplica_uuid];
      swift_beginAccess();
      v69((char *)v66, (uint64_t)v72, v65);

      uint64_t v73 = sub_1C3FA10C4(v66);
      swift_release();
      v71(v66, v65);
      uint64_t v30 = v208;
      uint64_t v74 = *(void *)(v208 + v213)
          + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
      swift_beginAccess();
      uint64_t v75 = v74;
      uint64_t v76 = v193;
      uint64_t v25 = (uint64_t)&qword_1EBBC0620;
      sub_1C3F970C4(v75, v193, &qword_1EBBC0620);
      a3 = v212;
      uint64_t v201 = *v204;
      if (v201(v76, 1, v212) == 1)
      {
        int v77 = v200;
        *uint64_t v200 = 0;
        v77[1] = 0;
        sub_1C4496888();
        sub_1C3F962E0(v76, &qword_1EBBC0620);
      }
      else
      {
        int v77 = v200;
        sub_1C3F9E890(v76, (uint64_t)v200, type metadata accessor for Proto_Timestamp);
      }
      *int v77 = v73;
      unint64_t v78 = v213;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v79 = *(void *)(v30 + v78);
        type metadata accessor for Proto_Sequence.AttributeRun._StorageClass(0);
        uint64_t v80 = swift_allocObject();
        *(_DWORD *)(v80 + 16) = 0;
        *(void *)(v80 + 24) = MEMORY[0x1E4FBC860];
        uint64_t v81 = v80
            + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
        (*v210)(v80+ OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp, 1, 1, v212);
        swift_beginAccess();
        int v82 = *(_DWORD *)(v79 + 16);
        swift_beginAccess();
        *(_DWORD *)(v80 + 16) = v82;
        swift_beginAccess();
        uint64_t v83 = *(void *)(v79 + 24);
        swift_beginAccess();
        *(void *)(v80 + 24) = v83;
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v84 = v208;
        swift_bridgeObjectRelease();
        uint64_t v30 = v84;
        uint64_t v85 = v79
            + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
        swift_beginAccess();
        uint64_t v86 = v85;
        uint64_t v87 = v211;
        sub_1C3F970C4(v86, v211, &qword_1EBBC0620);
        a3 = v212;
        swift_release();
        swift_beginAccess();
        unint64_t v78 = v213;
        sub_1C3F98338(v87, v81, &qword_1EBBC0620);
        swift_endAccess();
        *(void *)(v84 + v78) = v80;
        int v77 = v200;
        swift_release();
      }
      uint64_t v88 = *(void *)(v30 + v78);
      uint64_t v89 = v211;
      sub_1C3F9E890((uint64_t)v77, v211, type metadata accessor for Proto_Timestamp);
      uint64_t v90 = *v210;
      (*v210)(v89, 0, 1, a3);
      uint64_t v91 = v205;
      sub_1C3F961BC(v89, v205, &qword_1EBBC0620);
      uint64_t v92 = v88
          + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
      swift_beginAccess();
      swift_retain();
      sub_1C3F98338(v91, v92, &qword_1EBBC0620);
      swift_endAccess();
      swift_release();
      uint64_t v93 = *(void *)&v202[*(int *)(v189 + 20)];
      uint64_t v94 = *(void *)(v30 + v78)
          + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
      swift_beginAccess();
      uint64_t v95 = v94;
      uint64_t v96 = v194;
      sub_1C3F970C4(v95, v194, &qword_1EBBC0620);
      if (v201(v96, 1, a3) == 1)
      {
        int64_t v97 = v192;
        *uint64_t v192 = 0;
        v97[1] = 0;
        sub_1C4496888();
        sub_1C3F962E0(v96, &qword_1EBBC0620);
      }
      else
      {
        int64_t v97 = v192;
        sub_1C3F9E890(v96, (uint64_t)v192, type metadata accessor for Proto_Timestamp);
      }
      v97[1] = v93;
      unint64_t v98 = v213;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v99 = *(void *)(v30 + v98);
        type metadata accessor for Proto_Sequence.AttributeRun._StorageClass(0);
        uint64_t v100 = swift_allocObject();
        *(_DWORD *)(v100 + 16) = 0;
        *(void *)(v100 + 24) = MEMORY[0x1E4FBC860];
        uint64_t v101 = v100
             + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
        v90(v100+ OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp, 1, 1, v212);
        swift_beginAccess();
        int v102 = *(_DWORD *)(v99 + 16);
        swift_beginAccess();
        *(_DWORD *)(v100 + 16) = v102;
        swift_beginAccess();
        uint64_t v103 = *(void *)(v99 + 24);
        swift_beginAccess();
        *(void *)(v100 + 24) = v103;
        uint64_t v104 = v208;
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v25 = (uint64_t)&qword_1EBBC0620;
        swift_bridgeObjectRelease();
        uint64_t v30 = v104;
        uint64_t v105 = v99
             + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
        swift_beginAccess();
        uint64_t v106 = v105;
        uint64_t v107 = v211;
        sub_1C3F970C4(v106, v211, &qword_1EBBC0620);
        a3 = v212;
        swift_release();
        swift_beginAccess();
        uint64_t v108 = v101;
        unint64_t v98 = v213;
        sub_1C3F98338(v107, v108, &qword_1EBBC0620);
        swift_endAccess();
        *(void *)(v104 + v98) = v100;
        swift_release();
      }
      unint64_t v39 = *(void *)(v30 + v98);
      uint64_t v50 = v211;
      sub_1C3F9E890((uint64_t)v97, v211, type metadata accessor for Proto_Timestamp);
      v90(v50, 0, 1, a3);
      uint64_t v51 = v205;
      sub_1C3F961BC(v50, v205, &qword_1EBBC0620);
      a4 = v39
         + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
      swift_beginAccess();
      swift_retain();
      sub_1C3F98338(v51, a4, &qword_1EBBC0620);
      swift_endAccess();

      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v217);
      uint64_t v16 = v197;
      uint64_t v28 = v206;
      unint64_t v38 = v209;
    }
    else
    {
      sub_1C3F5E790((uint64_t)v217, (uint64_t)v216);
      if (swift_dynamicCast())
      {
        unint64_t v209 = v38;
        uint64_t v206 = v28;
        id v109 = v215;
        uint64_t v25 = OBJC_IVAR____TtC9Coherence15CRStringEncoder_encoder;
        uint64_t v110 = sub_1C44971B8();
        uint64_t v112 = v111;
        swift_retain();
        unint64_t v113 = sub_1C4004870(v110, v112);
        swift_release();
        swift_bridgeObjectRelease();
        sub_1C4496888();
        a3 = *(int *)(v175 + 20);
        if (qword_1EA39B1F0 != -1) {
          swift_once();
        }
        *(void *)&v16[a3] = qword_1EA39B1E8;
        if (HIDWORD(v113)) {
          goto LABEL_77;
        }
        swift_retain();
        char v114 = swift_isUniquelyReferenced_nonNull_native();
        id v207 = v59;
        id v203 = v109;
        if ((v114 & 1) == 0)
        {
          uint64_t v115 = *(void *)&v16[a3];
          type metadata accessor for Proto_Sequence.AttributeRun.Attribute._StorageClass(0);
          uint64_t v116 = swift_allocObject();
          *(_DWORD *)(v116 + 16) = 0;
          uint64_t v117 = v116
               + OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
          (*v178)(v116+ OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value, 1, 1, v180);
          swift_beginAccess();
          int v118 = *(_DWORD *)(v115 + 16);
          swift_beginAccess();
          *(_DWORD *)(v116 + 16) = v118;
          uint64_t v16 = v197;
          uint64_t v119 = v115
               + OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
          swift_beginAccess();
          uint64_t v120 = v119;
          uint64_t v121 = v179;
          sub_1C3F970C4(v120, v179, &qword_1EBBC0540);
          swift_beginAccess();
          uint64_t v122 = v117;
          id v109 = v203;
          id v59 = v207;
          uint64_t v30 = v208;
          sub_1C3F98338(v121, v122, &qword_1EBBC0540);
          swift_endAccess();
          *(void *)&v16[a3] = v116;
          swift_release();
        }
        uint64_t v123 = *(void *)&v16[a3];
        swift_beginAccess();
        *(_DWORD *)(v123 + 16) = v113;
        uint64_t v124 = v199;
        swift_retain();
        id v125 = v124;
        uint64_t v126 = swift_retain();
        unint64_t v127 = v125;
        int64_t v128 = v182;
        sub_1C400B9A8(v126, (uint64_t)v109, v127, v181);
        swift_release();
        char v182 = v128;
        if (v128)
        {

          sub_1C3F9633C((uint64_t)v16, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v217);
          swift_release();
          sub_1C3F9633C(v30, type metadata accessor for Proto_Sequence.AttributeRun);
          swift_release();
          uint64_t v162 = *v168;
          uint64_t v163 = v182;
          *uint64_t v168 = v182;
          id v164 = v163;

          *uint64_t v169 = 1;
          return;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v129 = *(void *)&v16[a3];
          type metadata accessor for Proto_Sequence.AttributeRun.Attribute._StorageClass(0);
          uint64_t v130 = swift_allocObject();
          *(_DWORD *)(v130 + 16) = 0;
          uint64_t v131 = v130
               + OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
          (*v178)(v130+ OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value, 1, 1, v180);
          swift_beginAccess();
          uint64_t v25 = *(unsigned int *)(v129 + 16);
          swift_beginAccess();
          *(_DWORD *)(v130 + 16) = v25;
          uint64_t v132 = v129
               + OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
          uint64_t v30 = v208;
          swift_beginAccess();
          uint64_t v133 = v132;
          uint64_t v134 = v179;
          sub_1C3F970C4(v133, v179, &qword_1EBBC0540);
          swift_beginAccess();
          sub_1C3F98338(v134, v131, &qword_1EBBC0540);
          swift_endAccess();
          *(void *)&v16[a3] = v130;
          swift_release();
        }
        uint64_t v135 = *(void *)&v16[a3];
        uint64_t v136 = v179;
        sub_1C3F9E890(v181, v179, type metadata accessor for Proto_Value);
        (*v178)(v136, 0, 1, v180);
        uint64_t v137 = v174;
        sub_1C3F961BC(v136, v174, &qword_1EBBC0540);
        uint64_t v138 = v135
             + OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
        swift_beginAccess();
        swift_retain();
        sub_1C3F98338(v137, v138, &qword_1EBBC0540);
        swift_endAccess();
        swift_release();
        sub_1C3F96414((uint64_t)v16, v177, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
        uint64_t v139 = *(void *)(v30 + v213);
        swift_beginAccess();
        unint64_t v39 = *(void *)(v139 + 24);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v39 = sub_1C3FF1E4C(0, *(void *)(v39 + 16) + 1, 1, v39);
        }
        unint64_t v38 = v209;
        unint64_t v141 = *(void *)(v39 + 16);
        unint64_t v140 = *(void *)(v39 + 24);
        if (v141 >= v140 >> 1) {
          unint64_t v39 = sub_1C3FF1E4C(v140 > 1, v141 + 1, 1, v39);
        }
        *(void *)(v39 + 16) = v141 + 1;
        sub_1C3F9E890(v177, v39+ ((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80))+ *(void *)(v173 + 72) * v141, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
        unint64_t v142 = v213;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          a3 = *(void *)(v30 + v142);
          type metadata accessor for Proto_Sequence.AttributeRun._StorageClass(0);
          uint64_t v25 = swift_allocObject();
          *(_DWORD *)(v25 + 16) = 0;
          *(void *)(v25 + 24) = MEMORY[0x1E4FBC860];
          uint64_t v143 = v25
               + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
          (*v210)(v25+ OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp, 1, 1, v212);
          swift_beginAccess();
          int v144 = *(_DWORD *)(a3 + 16);
          swift_beginAccess();
          *(_DWORD *)(v25 + 16) = v144;
          swift_beginAccess();
          uint64_t v145 = *(void *)(a3 + 24);
          swift_beginAccess();
          *(void *)(v25 + 24) = v145;
          uint64_t v146 = v208;
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v16 = v197;
          swift_bridgeObjectRelease();
          uint64_t v30 = v146;
          uint64_t v147 = a3
               + OBJC_IVAR____TtCVV9Coherence14Proto_Sequence12AttributeRunP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
          swift_beginAccess();
          uint64_t v148 = v147;
          uint64_t v149 = v211;
          sub_1C3F970C4(v148, v211, &qword_1EBBC0620);
          swift_release();
          swift_beginAccess();
          uint64_t v150 = v143;
          unint64_t v142 = v213;
          id v59 = v207;
          sub_1C3F98338(v149, v150, &qword_1EBBC0620);
          swift_endAccess();
          *(void *)(v146 + v142) = v25;
          unint64_t v38 = v209;
          swift_release();
        }
        uint64_t v151 = *(void *)(v30 + v142);
        swift_beginAccess();
        a4 = *(void *)(v151 + 24);
        *(void *)(v151 + 24) = v39;
        swift_release();

        swift_bridgeObjectRelease();
        sub_1C3F9633C((uint64_t)v16, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v217);
        uint64_t v28 = v206;
      }
      else
      {

        __swift_destroy_boxed_opaque_existential_1((uint64_t)v217);
      }
    }
  }
  swift_release();
  uint64_t v152 = v171;
  sub_1C3F96414(v30, v171, type metadata accessor for Proto_Sequence.AttributeRun);
  BOOL v153 = &v199[OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence];
  swift_beginAccess();
  uint64_t v154 = *(int *)(type metadata accessor for Proto_Sequence(0) + 20);
  uint64_t v155 = (unint64_t *)(*(void *)&v153[v154]
                            + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__attributeRuns);
  swift_beginAccess();
  unint64_t v156 = *v155;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v156 = sub_1C3FF1E18(0, *(void *)(v156 + 16) + 1, 1, v156);
  }
  uint64_t v157 = v172;
  unint64_t v159 = *(void *)(v156 + 16);
  unint64_t v158 = *(void *)(v156 + 24);
  if (v159 >= v158 >> 1) {
    unint64_t v156 = sub_1C3FF1E18(v158 > 1, v159 + 1, 1, v156);
  }
  *(void *)(v156 + 16) = v159 + 1;
  sub_1C3F9E890(v152, v156+ ((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80))+ *(void *)(v157 + 72) * v159, type metadata accessor for Proto_Sequence.AttributeRun);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Sequence._StorageClass(0);
    swift_allocObject();
    unsigned __int8 v160 = (void *)swift_retain();
    *(void *)&v153[v154] = sub_1C3F7C6CC(v160);
    swift_release();
  }
  uint64_t v161 = (unint64_t *)(*(void *)&v153[v154]
                            + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__attributeRuns);
  swift_beginAccess();
  *uint64_t v161 = v156;
  swift_endAccess();
  swift_bridgeObjectRelease();
  sub_1C3F9633C(v208, type metadata accessor for Proto_Sequence.AttributeRun);
}

uint64_t sub_1C4131A40(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(unsigned char *))
{
  swift_unknownObjectRetain();
  id v7 = a1;
  sub_1C4497BA8();
  swift_unknownObjectRelease();
  a5(v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);

  return 1;
}

id sub_1C4131B00()
{
  return sub_1C412E608(type metadata accessor for CRAttributedStringEncoder);
}

uint64_t sub_1C4131B18()
{
  return type metadata accessor for CRAttributedStringEncoder(0);
}

uint64_t type metadata accessor for CRAttributedStringEncoder(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EA39DAF0);
}

uint64_t sub_1C4131B40()
{
  return swift_updateClassMetadata2();
}

id sub_1C4131B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = &v4[OBJC_IVAR____TtC9Coherence25CRAttributedStringDecoder_scope];
  *(void *)uint64_t v12 = a3;
  *((void *)v12 + 1) = a4;
  sub_1C3F96414(a1, (uint64_t)v11, type metadata accessor for Proto_Sequence);
  uint64_t v13 = &v4[OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence];
  uint64_t v14 = v4;
  sub_1C4496888();
  uint64_t v15 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  if (qword_1EBBBC0C0 != -1) {
    swift_once();
  }
  *(void *)&v13[v15] = qword_1EBBBC0B8;
  sub_1C3F96414((uint64_t)v11, (uint64_t)&v14[OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded], type metadata accessor for Proto_Sequence);
  *(void *)&v14[OBJC_IVAR____TtC9Coherence15CRStringDecoder_decoder] = a2;
  swift_retain();
  swift_retain();

  uint64_t v16 = (objc_class *)type metadata accessor for CRStringDecoder(0);
  v19.receiver = v14;
  v19.super_class = v16;
  id v17 = objc_msgSendSuper2(&v19, sel_init);
  sub_1C3F9633C((uint64_t)v11, type metadata accessor for Proto_Sequence);
  sub_1C3F9633C(a1, type metadata accessor for Proto_Sequence);
  return v17;
}

uint64_t sub_1C4131D34()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_1C4131D6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  sub_1C41300C8(a1, a2, a3, a4, *(char **)(v4 + 16), *(void ***)(v4 + 24));
}

uint64_t sub_1C4131D74()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1C4131D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4415010(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t __swift_deallocate_boxed_opaque_existential_0(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x1C8782060);
  }
  return result;
}

unint64_t sub_1C4131DE0()
{
  unint64_t result = qword_1EA39B340;
  if (!qword_1EA39B340)
  {
    type metadata accessor for Key(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39B340);
  }
  return result;
}

uint64_t sub_1C4131E38(uint64_t a1)
{
  return sub_1C3FA7B00(a1, (uint64_t)&unk_1F1FA1790, (uint64_t)sub_1C3F62990, (uint64_t)&block_descriptor_10_0);
}

uint64_t sub_1C4131E60(uint64_t a1)
{
  return sub_1C3FA7B00(a1, (uint64_t)&unk_1F1FA1768, (uint64_t)sub_1C4134340, (uint64_t)&block_descriptor_6);
}

uint64_t sub_1C4131E88(uint64_t a1, uint64_t a2)
{
  uint64_t v110 = type metadata accessor for RetainedMapRun(0);
  uint64_t v4 = *(void *)(v110 - 8);
  MEMORY[0x1F4188790](v110);
  uint64_t v106 = (uint64_t)v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBF0A0);
  uint64_t v112 = *(void *)(v114 - 8);
  MEMORY[0x1F4188790](v114);
  id v7 = (char *)v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBEF70);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v109 = (uint64_t)v84 - v12;
  uint64_t v13 = sub_1C44967A8();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v104 = (char *)v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78);
  MEMORY[0x1F4188790](v88);
  id v17 = (char *)v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84[0] = type metadata accessor for Replica();
  uint64_t v18 = MEMORY[0x1F4188790](v84[0]);
  uint64_t v85 = (uint64_t)v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v98 = (uint64_t)v84 - v20;
  uint64_t v96 = sub_1C44967E8();
  uint64_t v21 = *(void *)(v96 - 8);
  MEMORY[0x1F4188790](v96);
  int64_t v97 = (char *)v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v94 = (char *)v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v92 = (uint64_t)v84 - v26;
  uint64_t v91 = a2;
  uint64_t v90 = a2 + 16;
  unint64_t v93 = *(void *)(a1 + 16);
  uint64_t v89 = (void (**)(char *, uint64_t, uint64_t))(v21 + 32);
  v84[1] = &v117;
  uint64_t v103 = (void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v101 = (void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v111 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  uint64_t v108 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56);
  uint64_t v87 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v27 = (uint64_t)v17;
  uint64_t v86 = a1;
  swift_bridgeObjectRetain();
  unint64_t v28 = 0;
  uint64_t v107 = v11;
  uint64_t v100 = v13;
  uint64_t v99 = v17;
  while (1)
  {
    unint64_t v29 = v93;
    if (v28 == v93)
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
      uint64_t v31 = (uint64_t)v94;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v94, 1, 1, v30);
      unint64_t v95 = v29;
    }
    else
    {
      uint64_t v31 = (uint64_t)v94;
      if (v28 >= v93) {
        goto LABEL_41;
      }
      unint64_t v32 = v28;
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
      uint64_t v34 = *(void *)(v33 - 8);
      sub_1C3F970C4(v86+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(void *)(v34 + 72) * v32, v31, &qword_1EBBC0798);
      unint64_t v95 = v32 + 1;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    uint64_t v35 = v92;
    sub_1C3F961BC(v31, v92, &qword_1EBBC07A0);
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48))(v35, 1, v36) == 1) {
      return swift_bridgeObjectRelease();
    }
    (*v89)(v97, v35 + *(int *)(v36 + 48), v96);
    uint64_t v37 = v35;
    uint64_t v38 = v98;
    sub_1C3F8F818(v37, v98, (uint64_t (*)(void))type metadata accessor for Replica);
    swift_beginAccess();
    uint64_t v39 = v91;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v115 = *(void *)(v39 + 32);
    uint64_t v41 = v115;
    *(void *)(v39 + 32) = 0x8000000000000000;
    unint64_t v43 = sub_1C3F8F160(v38);
    uint64_t v44 = *(void *)(v41 + 16);
    BOOL v45 = (v42 & 1) == 0;
    uint64_t v46 = v44 + v45;
    if (__OFADD__(v44, v45)) {
      goto LABEL_40;
    }
    char v47 = v42;
    if (*(void *)(v41 + 24) >= v46)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1C4067C04();
        uint64_t v41 = v115;
      }
    }
    else
    {
      sub_1C3FB7274(v46, isUniquelyReferenced_nonNull_native);
      uint64_t v41 = v115;
      unint64_t v48 = sub_1C3F8F160(v98);
      if ((v47 & 1) != (v49 & 1)) {
        goto LABEL_42;
      }
      unint64_t v43 = v48;
    }
    *(void *)(v39 + 32) = v41;
    swift_bridgeObjectRelease();
    uint64_t v50 = *(void **)(v39 + 32);
    if ((v47 & 1) == 0)
    {
      uint64_t v116 = MEMORY[0x1E4FBC860];
      swift_weakInit();
      swift_weakAssign();
      sub_1C3FAAC94((uint64_t)&v116, (uint64_t)&v115);
      uint64_t v51 = v85;
      sub_1C3F86B60(v98, v85, (uint64_t (*)(void))type metadata accessor for Replica);
      sub_1C3FB71B8(v43, v51, (uint64_t)&v115, v50);
    }
    uint64_t v52 = v50[7];
    unint64_t v53 = v104;
    sub_1C44967C8();
    sub_1C4496798();
    int v102 = *v103;
    v102(v53, v13);
    uint64_t v54 = (void *)(v27 + *(int *)(v88 + 36));
    uint64_t v55 = sub_1C3F709D0((unint64_t *)&qword_1EBBBEE28, MEMORY[0x1E4F27CE0]);
    uint64_t v56 = *v54;
    sub_1C4497818();
    if (v56 != v115) {
      break;
    }
LABEL_2:
    sub_1C3F962E0(v27, &qword_1EBBBCA78);
    swift_endAccess();
    sub_1C3F86C98(v98, (uint64_t (*)(void))type metadata accessor for Replica);
    (*v87)(v97, v96);
    unint64_t v28 = v95;
  }
  unint64_t v57 = (unint64_t *)(v52 + 16 * v43);
  uint64_t v113 = v55;
  while (1)
  {
    id v59 = (void (*)(uint64_t *, void))sub_1C44978C8();
    uint64_t v60 = v27;
    uint64_t v63 = *v61;
    uint64_t v62 = v61[1];
    v59(&v115, 0);
    uint64_t v64 = v104;
    (*v101)(v104, v60, v13);
    sub_1C4497828();
    v102(v64, v13);
    uint64_t v65 = sub_1C3FB3D7C(v63, v62);
    unint64_t v67 = v66;
    uint64_t v105 = v65;
    if (v65 != v66) {
      break;
    }
LABEL_18:
    sub_1C3F9043C(v105, v67);
    uint64_t v58 = *v54;
    uint64_t v27 = (uint64_t)v99;
    uint64_t v13 = v100;
    sub_1C4497818();
    if (v58 == v115) {
      goto LABEL_2;
    }
  }
  if (v66 < v105)
  {
    __break(1u);
  }
  else
  {
    unint64_t v68 = v105;
    if (v105 < v66)
    {
      while ((v68 & 0x8000000000000000) == 0)
      {
        if (v68 >= *(void *)(*v57 + 16)) {
          goto LABEL_34;
        }
        uint64_t v69 = v54;
        unint64_t v70 = (*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80);
        unint64_t v71 = *(void *)(v112 + 72) * v68;
        sub_1C3F970C4(*v57 + v70 + v71, (uint64_t)v7, qword_1EBBBF0A0);
        uint64_t v72 = (uint64_t)v7;
        sub_1C3F970C4((uint64_t)&v7[*(int *)(v114 + 36)], (uint64_t)v11, qword_1EBBBEF70);
        uint64_t v73 = v110;
        if ((*v111)(v11, 1, v110) == 1)
        {
          sub_1C3F962E0((uint64_t)v11, qword_1EBBBEF70);
          uint64_t v74 = type metadata accessor for FinalizedTimestamp(0);
          uint64_t v75 = v109;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v109, 1, 1, v74);
          *(void *)(v75 + *(int *)(v73 + 20)) = 2;
        }
        else
        {
          uint64_t v76 = v106;
          sub_1C3F8F818((uint64_t)v11, v106, type metadata accessor for RetainedMapRun);
          uint64_t v75 = v109;
          sub_1C3F970C4(v76, v109, &qword_1EBBBF870);
          uint64_t v77 = *(int *)(v73 + 20);
          uint64_t v78 = *(void *)(v76 + v77);
          BOOL v79 = __OFADD__(v78, 1);
          uint64_t v80 = v78 + 1;
          if (v79) {
            goto LABEL_36;
          }
          *(void *)(v75 + v77) = v80;
          sub_1C3F86C98(v76, type metadata accessor for RetainedMapRun);
        }
        (*v108)(v75, 0, 1, v73);
        id v7 = (char *)v72;
        sub_1C3F962E0(v72, qword_1EBBBF0A0);
        unint64_t v81 = *v57;
        char v82 = swift_isUniquelyReferenced_nonNull_native();
        *unint64_t v57 = v81;
        if ((v82 & 1) == 0)
        {
          unint64_t v81 = sub_1C4232804(v81);
          *unint64_t v57 = v81;
        }
        if (v68 >= *(void *)(v81 + 16)) {
          goto LABEL_35;
        }
        ++v68;
        sub_1C3F98338(v75, v81 + v70 + *(int *)(v114 + 36) + v71, qword_1EBBBEF70);
        uint64_t v54 = v69;
        uint64_t v11 = v107;
        if (v67 == v68) {
          goto LABEL_18;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  uint64_t result = sub_1C4498558();
  __break(1u);
  return result;
}

uint64_t sub_1C4132AC0(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v51 = a3;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DB20);
  uint64_t v6 = MEMORY[0x1F4188790](v50);
  uint64_t v47 = (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v48 = (uint64_t)&v42 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBEF70);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for RetainedMapRun(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBF0A0);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C3F970C4((uint64_t)v3 + *(int *)(v17 + 36), (uint64_t)v11, qword_1EBBBEF70);
  uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v49 = v12;
  if (v20(v11, 1, v12) == 1)
  {
    uint64_t result = sub_1C3F962E0((uint64_t)v11, qword_1EBBBEF70);
    uint64_t v22 = *v3;
    uint64_t v23 = v51;
    if (*v3 > v51)
    {
      __break(1u);
    }
    else
    {
      uint64_t v24 = v3;
      uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
      uint64_t v26 = v49;
      uint64_t result = v25(&v19[*(int *)(v16 + 36)], 1, 1, v49);
      *(void *)uint64_t v19 = v22;
      *((void *)v19 + 1) = v23;
      uint64_t v27 = v24[1];
      if (v27 >= v23)
      {
        v25(&a2[*(int *)(v16 + 36)], 1, 1, v26);
        *(void *)a2 = v23;
        *((void *)a2 + 1) = v27;
        return sub_1C3F961BC((uint64_t)v19, a1, qword_1EBBBF0A0);
      }
    }
    __break(1u);
    goto LABEL_12;
  }
  uint64_t result = sub_1C3F8F818((uint64_t)v11, (uint64_t)v15, type metadata accessor for RetainedMapRun);
  BOOL v45 = v3;
  uint64_t v28 = *v3;
  uint64_t v29 = v51;
  uint64_t v30 = v51 - *v3;
  if (__OFSUB__(v51, *v3))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v31 = v48;
  uint64_t v46 = v48 + *(int *)(v50 + 48);
  uint64_t result = sub_1C447A214(v48, v46, v30);
  if (v28 > v29)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v43 = a2;
  uint64_t v44 = a1;
  uint64_t v32 = (uint64_t)&v19[*(int *)(v16 + 36)];
  uint64_t v33 = v47;
  uint64_t v34 = v47 + *(int *)(v50 + 48);
  sub_1C3F86B60(v31, v47, type metadata accessor for RetainedMapRun);
  sub_1C3F86B60(v46, v34, type metadata accessor for RetainedMapRun);
  sub_1C3F8F818(v33, v32, type metadata accessor for RetainedMapRun);
  uint64_t v35 = v32;
  uint64_t v36 = v51;
  char v42 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56);
  v42(v35, 0, 1, v49);
  *(void *)uint64_t v19 = v28;
  *((void *)v19 + 1) = v36;
  sub_1C3F86C98(v34, type metadata accessor for RetainedMapRun);
  uint64_t v37 = v45[1];
  uint64_t result = sub_1C3F86C98((uint64_t)v15, type metadata accessor for RetainedMapRun);
  if (v37 >= v36)
  {
    uint64_t v38 = v43;
    uint64_t v39 = (uint64_t)&v43[*(int *)(v16 + 36)];
    uint64_t v40 = v33;
    uint64_t v41 = v33 + *(int *)(v50 + 48);
    sub_1C3F8F818(v31, v40, type metadata accessor for RetainedMapRun);
    sub_1C3F8F818(v46, v41, type metadata accessor for RetainedMapRun);
    sub_1C3F8F818(v41, v39, type metadata accessor for RetainedMapRun);
    v42(v39, 0, 1, v49);
    *(void *)uint64_t v38 = v36;
    *((void *)v38 + 1) = v37;
    sub_1C3F86C98(v40, type metadata accessor for RetainedMapRun);
    a1 = v44;
    return sub_1C3F961BC((uint64_t)v19, a1, qword_1EBBBF0A0);
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1C4132F60()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Timestamp(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBBC10F0 != -1) {
    swift_once();
  }
  uint64_t v5 = v1 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp;
  swift_beginAccess();
  sub_1C3F86B60(v5, (uint64_t)v4, type metadata accessor for Timestamp);
  if (*(void *)&v4[*(int *)(type metadata accessor for Replica() + 20)])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBB2C8);
    uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798) - 8);
    unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1C449B490;
    sub_1C3F86B60((uint64_t)v4, v8 + v7, (uint64_t (*)(void))type metadata accessor for Replica);
    swift_retain();
    sub_1C4496758();
    sub_1C3FA7B00(v8, (uint64_t)&unk_1F1FA17B8, (uint64_t)sub_1C4134F08, (uint64_t)&block_descriptor_16_0);
    swift_release();
    swift_bridgeObjectRelease();
  }
  sub_1C3F86C98((uint64_t)v4, type metadata accessor for Timestamp);
  sub_1C3F86C98(v5, type metadata accessor for Timestamp);
  return swift_deallocClassInstance();
}

uint64_t sub_1C41331E8()
{
  return type metadata accessor for CRTimestampRef();
}

uint64_t type metadata accessor for CRTimestampRef()
{
  uint64_t result = qword_1EA39DB08;
  if (!qword_1EA39DB08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for CRTimestamp()
{
  return &type metadata for CRTimestamp;
}

uint64_t sub_1C413324C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Replica();
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (uint64_t *)&v22[-v11];
  uint64_t v13 = type metadata accessor for Timestamp(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = &v22[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = a2 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp;
  swift_beginAccess();
  sub_1C3F86B60(v16, (uint64_t)v15, type metadata accessor for Timestamp);
  uint64_t v17 = *(void *)&v15[*(int *)(v4 + 28)];
  uint64_t result = sub_1C3F86C98((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Replica);
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *uint64_t v12 = 0;
    sub_1C4496888();
    v12[1] = *(void *)(v16 + *(int *)(v13 + 20));
    sub_1C3F86B60(v16, (uint64_t)v15, type metadata accessor for Timestamp);
    sub_1C3F8F818((uint64_t)v15, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v19 = sub_1C3FA10C4((uint64_t)v6);
    uint64_t v20 = sub_1C4496678();
    (*(void (**)(unsigned char *, uint64_t))(*(void *)(v20 - 8) + 8))(v6, v20);
    *uint64_t v12 = v19;
    uint64_t v21 = v23;
    sub_1C3F6DD10();
    if (!v21)
    {
      sub_1C3F86B60((uint64_t)v12, (uint64_t)v10, type metadata accessor for Proto_Timestamp);
      swift_beginAccess();
      swift_retain();
      sub_1C43EEC70((uint64_t)v10);
      swift_release();
    }
    return sub_1C3F86C98((uint64_t)v12, type metadata accessor for Proto_Timestamp);
  }
  return result;
}

uint64_t sub_1C413353C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Timestamp(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)v32 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v32 - v11;
  uint64_t v13 = *v2 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp;
  swift_beginAccess();
  sub_1C3F86B60(v13, (uint64_t)v12, type metadata accessor for Timestamp);
  uint64_t v14 = type metadata accessor for Replica();
  uint64_t v15 = *(void *)&v12[*(int *)(v14 + 20)];
  uint64_t result = sub_1C3F86C98((uint64_t)v12, type metadata accessor for Timestamp);
  if (v15 >= 1)
  {
    uint64_t v17 = qword_1EBBC0FB0 + 80;
    uint64_t v18 = (void *)&unk_1EBBC5000;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v19 = *v2 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp;
      swift_beginAccess();
      sub_1C3F86B60(v19, (uint64_t)v10, type metadata accessor for Timestamp);
      type metadata accessor for CRTimestampRef();
      uint64_t v20 = swift_allocObject();
      uint64_t v17 = &qword_1EBBC0FB0[10];
      sub_1C3F86B60((uint64_t)v10, v20 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp, type metadata accessor for Timestamp);
      if (qword_1EBBC10F0 != -1) {
        swift_once();
      }
      if (*(void *)&v10[*(int *)(v14 + 20)])
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBB2C8);
        v32[0] = a1;
        uint64_t v21 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798) - 8);
        unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
        uint64_t v23 = swift_allocObject();
        *(_OWORD *)(v23 + 16) = xmmword_1C449B490;
        sub_1C3F86B60((uint64_t)v10, v23 + v22, (uint64_t (*)(void))type metadata accessor for Replica);
        swift_retain();
        sub_1C4496758();
        sub_1C3FA7B00(v23, (uint64_t)&unk_1F1FA1768, (uint64_t)sub_1C4134340, (uint64_t)&block_descriptor_6);
        uint64_t v17 = &qword_1EBBC0FB0[10];
        swift_release();
        a1 = v32[0];
        swift_bridgeObjectRelease();
      }
      sub_1C3F86C98((uint64_t)v10, type metadata accessor for Timestamp);
      uint64_t *v2 = v20;
      swift_release();
      uint64_t v18 = &unk_1EBBC5000;
    }
    uint64_t v35 = MEMORY[0x1E4FBC868];
    uint64_t v36 = MEMORY[0x1E4FBC868];
    uint64_t v24 = *v2 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp;
    swift_beginAccess();
    sub_1C3F86B60(v24, (uint64_t)v7, type metadata accessor for Timestamp);
    sub_1C3F844E4((uint64_t)v7);
    uint64_t v25 = sub_1C3F86C98((uint64_t)v7, type metadata accessor for Timestamp);
    if (v17[30] != -1) {
      uint64_t v25 = swift_once();
    }
    uint64_t v26 = v18[332];
    uint64_t v27 = v35;
    uint64_t v28 = v36;
    MEMORY[0x1F4188790](v25);
    v32[-4] = v26;
    v32[-3] = v27;
    v32[-2] = v28;
    v32[-1] = a1;
    swift_retain();
    sub_1C4497A58();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v29 = v32[2];
    uint64_t v30 = v33;
    uint64_t v31 = v34;
    swift_beginAccess();
    sub_1C4124DE4(v29, v30, v31);
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1C4133A30()
{
}

void sub_1C4133A88()
{
}

void sub_1C4133AD4()
{
}

uint64_t sub_1C4133B28(uint64_t *a1, uint64_t *a2)
{
  return sub_1C4133E50(*a1, *a2);
}

BOOL sub_1C4133B34()
{
  uint64_t v1 = *v0 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp;
  swift_beginAccess();
  return *(void *)(v1 + *(int *)(type metadata accessor for Replica() + 20)) > 0;
}

uint64_t sub_1C4133B98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1C4134778(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1C4133BC4(uint64_t a1)
{
  return sub_1C413324C(a1, *v1);
}

unint64_t sub_1C4133BE4()
{
  unint64_t result = qword_1EA39DB18;
  if (!qword_1EA39DB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39DB18);
  }
  return result;
}

uint64_t sub_1C4133C38(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v5 = *v3;
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = sub_1C3FB46B8(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    unint64_t *v3 = v5;
  }
  uint64_t v14 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(qword_1EBBBF0A0) - 8);
  unint64_t v15 = v5 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  uint64_t v16 = *(void *)(v14 + 72);
  uint64_t v17 = v15 + v16 * a1;
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v5 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_33;
  }
  if (v19 < 0)
  {
LABEL_35:
    uint64_t result = sub_1C4497FE8();
    __break(1u);
    return result;
  }
  unint64_t v20 = v17 + v16;
  unint64_t v21 = v15 + v16 * a2;
  if (v17 + v16 < v21 || v20 >= v21 + v19 * v16)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v20 != v21)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  uint64_t v23 = *(void *)(v5 + 16);
  BOOL v24 = __OFADD__(v23, v9);
  uint64_t v25 = v23 + v9;
  if (v24)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(void *)(v5 + 16) = v25;
LABEL_25:
  if (v16 >= 1) {
    sub_1C3F970C4(a3, v17, qword_1EBBBF0A0);
  }
  return sub_1C3F962E0(a3, &qword_1EBBBF180);
}

uint64_t sub_1C4133E50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Timestamp(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v28 = (uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v29 = (uint64_t)&v28 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v28 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v28 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v28 - v18;
  uint64_t v20 = a1 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp;
  swift_beginAccess();
  uint64_t v21 = type metadata accessor for Replica();
  uint64_t v22 = *(void *)(v20 + *(int *)(v21 + 20));
  uint64_t v23 = a2 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp;
  swift_beginAccess();
  if (v22 > 0 == *(void *)(v23 + *(int *)(v21 + 20)) < 1)
  {
    if (v22 < 1)
    {
      uint64_t v25 = v28;
      sub_1C3F86B60(v23, v28, type metadata accessor for Timestamp);
      uint64_t v26 = v29;
      sub_1C3F86B60(v25, v29, type metadata accessor for Timestamp);
      uint64_t v33 = MEMORY[0x1E4FBC868];
      uint64_t v34 = MEMORY[0x1E4FBC868];
      sub_1C3F844E4(v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1EBBC10F0 != -1) {
        swift_once();
      }
      swift_retain();
      sub_1C4497A58();
      swift_release();
      sub_1C4124DE4(v30, v31, v32);
      swift_bridgeObjectRelease();
      sub_1C3F86C98(v25, type metadata accessor for Timestamp);
      sub_1C3F86B60(v20, (uint64_t)v19, type metadata accessor for Timestamp);
      char v24 = _s9Coherence9TimestampV2eeoiySbAC_ACtFZ_0(v26, (uint64_t)v19);
      uint64_t v17 = v19;
      uint64_t v14 = (char *)v26;
    }
    else
    {
      sub_1C3F86B60(v20, (uint64_t)v11, type metadata accessor for Timestamp);
      sub_1C3F86B60((uint64_t)v11, (uint64_t)v14, type metadata accessor for Timestamp);
      uint64_t v33 = MEMORY[0x1E4FBC868];
      uint64_t v34 = MEMORY[0x1E4FBC868];
      sub_1C3F844E4((uint64_t)v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1EBBC10F0 != -1) {
        swift_once();
      }
      swift_retain();
      sub_1C4497A58();
      swift_release();
      sub_1C4124DE4(v30, v31, v32);
      swift_bridgeObjectRelease();
      sub_1C3F86C98((uint64_t)v11, type metadata accessor for Timestamp);
      sub_1C3F86B60(v23, (uint64_t)v19, type metadata accessor for Timestamp);
      char v24 = _s9Coherence9TimestampV2eeoiySbAC_ACtFZ_0((uint64_t)v14, (uint64_t)v19);
      uint64_t v17 = v19;
    }
  }
  else
  {
    sub_1C3F86B60(v20, (uint64_t)v19, type metadata accessor for Timestamp);
    sub_1C3F86B60(v23, (uint64_t)v17, type metadata accessor for Timestamp);
    char v24 = _s9Coherence9TimestampV2eeoiySbAC_ACtFZ_0((uint64_t)v19, (uint64_t)v17);
    uint64_t v14 = v19;
  }
  sub_1C3F86C98((uint64_t)v17, type metadata accessor for Timestamp);
  sub_1C3F86C98((uint64_t)v14, type metadata accessor for Timestamp);
  return v24 & 1;
}

uint64_t sub_1C4134340()
{
  return sub_1C4131E88(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C4134348(unint64_t *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Timestamp(0);
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v27 - v9;
  uint64_t v11 = type metadata accessor for Replica();
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = *a1;
  uint64_t v15 = *(void *)(a2 + 24);
  unint64_t v16 = *(void *)(v15 + 16);
  if (v16) {
    BOOL v17 = v14 >= v16;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v18 = xmmword_1C44A0890;
    *(unsigned char *)(v18 + 16) = 0;
    swift_willThrow();
    sub_1C3F86C98((uint64_t)a1, type metadata accessor for Proto_Timestamp);
  }
  else
  {
    v27[3] = v2;
    uint64_t v19 = sub_1C4496678();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v13, v15+ ((*(unsigned __int8 *)(*(void *)(v19 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v19 - 8) + 80))+ *(void *)(*(void *)(v19 - 8) + 72) * v14, v19);
    *(void *)&v13[*(int *)(v11 + 20)] = 0;
    sub_1C3F86B60((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Replica);
    *(void *)&v10[*(int *)(v5 + 20)] = a1[1];
    sub_1C3F86B60((uint64_t)v10, (uint64_t)v8, type metadata accessor for Timestamp);
    type metadata accessor for CRTimestampRef();
    uint64_t v15 = swift_allocObject();
    sub_1C3F86B60((uint64_t)v8, v15 + OBJC_IVAR____TtC9Coherence14CRTimestampRef_timestamp, type metadata accessor for Timestamp);
    if (qword_1EBBC10F0 != -1) {
      swift_once();
    }
    if (*(void *)&v8[*(int *)(v11 + 20)])
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBB2C8);
      uint64_t v20 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798) - 8) + 80);
      v27[1] = v5;
      uint64_t v21 = a1;
      uint64_t v22 = v15;
      uint64_t v23 = (v20 + 32) & ~v20;
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_1C449B490;
      uint64_t v25 = v24 + v23;
      uint64_t v15 = v22;
      a1 = v21;
      sub_1C3F86B60((uint64_t)v8, v25, (uint64_t (*)(void))type metadata accessor for Replica);
      swift_retain();
      sub_1C4496758();
      sub_1C3FA7B00(v24, (uint64_t)&unk_1F1FA1768, (uint64_t)sub_1C4134340, (uint64_t)&block_descriptor_6);
      swift_release();
      swift_bridgeObjectRelease();
    }
    sub_1C3F86C98((uint64_t)v8, type metadata accessor for Timestamp);
    sub_1C3F86C98((uint64_t)a1, type metadata accessor for Proto_Timestamp);
    sub_1C3F86C98((uint64_t)v10, type metadata accessor for Timestamp);
    sub_1C3F86C98((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Replica);
  }
  return v15;
}

uint64_t sub_1C4134778(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v30 = (uint64_t)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Proto_Timestamp(0);
  MEMORY[0x1F4188790](v28);
  unsigned __int8 v31 = (unint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for Proto_Value(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v29 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v14, (uint64_t)v13, &qword_1EBBC0540);
  BOOL v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v15 = v6 + 48;
  unint64_t v16 = v17;
  int v18 = v17(v13, 1, v5);
  sub_1C3F962E0((uint64_t)v13, &qword_1EBBC0540);
  if (v18 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v19 = 0xD000000000000017;
    *(void *)(v19 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v19 + 16) = 0;
    swift_willThrow();
    swift_release();
    return v15;
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  *(void *)(swift_initStackObject() + 16) = a1;
  sub_1C3F970C4(v14, (uint64_t)v11, &qword_1EBBC0540);
  uint64_t result = v16(v11, 1, v5);
  if (result != 1)
  {
    uint64_t v21 = v29;
    sub_1C3F8F818((uint64_t)v11, v29, type metadata accessor for Proto_Value);
    swift_retain();
    swift_release();
    uint64_t v22 = *(void *)(v21 + *(int *)(v5 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v23 = v22;
    uint64_t v24 = v30;
    sub_1C3F970C4(v23, v30, &qword_1EBBBF8A0);
    uint64_t v25 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25) == 1)
    {
      sub_1C3F962E0(v24, &qword_1EBBBF8A0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 9)
      {
        uint64_t v26 = v31;
        sub_1C3F8F818(v24, (uint64_t)v31, type metadata accessor for Proto_Timestamp);
LABEL_10:
        sub_1C3F86C98(v21, type metadata accessor for Proto_Value);
        uint64_t v15 = sub_1C4134348(v26, a1);
        swift_release();
        return v15;
      }
      sub_1C3F86C98(v24, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    uint64_t v26 = v31;
    *unsigned __int8 v31 = 0;
    v26[1] = 0;
    sub_1C4496888();
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C4134BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBF0A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

char *sub_1C4134C50(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = sub_1C3FF1668(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  size_t v13 = v12 - a2;
  if (__OFSUB__(v12, a2)) {
    goto LABEL_27;
  }
  if ((v13 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[a1 + 32];
    uint64_t v14 = &v4[a2 + 32];
    if (a1 != a2 || result >= &v14[v13]) {
      uint64_t result = (char *)memmove(result, v14, v13);
    }
    uint64_t v15 = *((void *)v4 + 2);
    BOOL v16 = __OFADD__(v15, v8);
    uint64_t v17 = v15 + v8;
    if (!v16)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      uint64_t *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)sub_1C4497FE8();
  __break(1u);
  return result;
}

char *sub_1C4134DA8(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = sub_1C3FF1764(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[2 * a1 + 32];
    uint64_t v15 = &v4[2 * a2 + 32];
    if (a1 != a2 || result >= &v15[2 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 2 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      uint64_t *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C4134F08()
{
  return sub_1C401B3A8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C4134F10(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_1C3FF1D08(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      _OWORD v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C413508C()
{
  return type metadata accessor for CRStructDecoder();
}

uint64_t sub_1C4135094()
{
  return sub_1C3F5CAB4();
}

uint64_t sub_1C41350C0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  a2[3] = &type metadata for CRStructDecoder.UnkeyedContainer;
  a2[4] = sub_1C4139E2C();
  *a2 = a1;
  a2[1] = 0;
  return swift_retain();
}

uint64_t sub_1C4135114@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[3] = type metadata accessor for CRStructDecoder();
  a2[4] = sub_1C4139F68();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_1C4135168@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  a2[3] = type metadata accessor for CRStructDecoder();
  a2[4] = sub_1C4139F68();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_1C41351BC()
{
  return sub_1C4139FC0();
}

uint64_t sub_1C41351C8(uint64_t a1, uint64_t a2)
{
  sub_1C3F8977C(MEMORY[0x1E4FBB390], *v2, *(void *)(a2 + 16), MEMORY[0x1E4FBB390], (uint64_t)&v6);
  if (!v3) {
    char v4 = v6;
  }
  return v4 & 1;
}

uint64_t sub_1C4135220(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1C3F8977C(MEMORY[0x1E4FBB1A0], *v2, *(void *)(a2 + 16), MEMORY[0x1E4FBB1A0], (uint64_t)&v5);
  if (!v3) {
    return v5;
  }
  return result;
}

double sub_1C4135274(uint64_t a1, uint64_t a2)
{
  sub_1C3F8977C(MEMORY[0x1E4FBB3D0], *v2, *(void *)(a2 + 16), MEMORY[0x1E4FBB3D0], (uint64_t)&v5);
  if (!v3) {
    return v5;
  }
  return result;
}

float sub_1C41352C8(uint64_t a1, uint64_t a2)
{
  sub_1C3F8977C(MEMORY[0x1E4FBB470], *v2, *(void *)(a2 + 16), MEMORY[0x1E4FBB470], (uint64_t)&v5);
  if (!v3) {
    return v5;
  }
  return result;
}

uint64_t sub_1C413531C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4135424(a1, a2, a3, MEMORY[0x1E4FBC098]);
}

uint64_t sub_1C4135344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4135498(a1, a2, a3, MEMORY[0x1E4FBC0F8]);
}

uint64_t sub_1C413536C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C413550C(a1, a2, a3, MEMORY[0x1E4FBC150]);
}

uint64_t sub_1C4135394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F54BB4(a1, a2, a3, MEMORY[0x1E4FBC1C8]);
}

uint64_t sub_1C41353BC()
{
  return sub_1C4498418();
}

uint64_t sub_1C41353D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F54BB4(a1, a2, a3, MEMORY[0x1E4FBB808]);
}

uint64_t sub_1C41353FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4135424(a1, a2, a3, MEMORY[0x1E4FBC358]);
}

uint64_t sub_1C4135424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1C3F8977C(a4, *v4, *(void *)(a2 + 16), a4, (uint64_t)&v7);
  if (!v5) {
    return v7;
  }
  return result;
}

uint64_t sub_1C4135470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4135498(a1, a2, a3, MEMORY[0x1E4FBC450]);
}

uint64_t sub_1C4135498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1C3F8977C(a4, *v4, *(void *)(a2 + 16), a4, (uint64_t)&v7);
  if (!v5) {
    return v7;
  }
  return result;
}

uint64_t sub_1C41354E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C413550C(a1, a2, a3, MEMORY[0x1E4FBC4C0]);
}

uint64_t sub_1C413550C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1C3F8977C(a4, *v4, *(void *)(a2 + 16), a4, (uint64_t)&v7);
  if (!v5) {
    return v7;
  }
  return result;
}

uint64_t sub_1C4135558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F54BB4(a1, a2, a3, MEMORY[0x1E4FBC538]);
}

uint64_t sub_1C4135580()
{
  return sub_1C4498428();
}

uint64_t sub_1C4135598()
{
  return sub_1C44983A8();
}

uint64_t sub_1C41355B0()
{
  return sub_1C4498398();
}

uint64_t sub_1C41355C8()
{
  uint64_t result = sub_1C44983B8();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1C41355EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4135818(a1, a2, a3, MEMORY[0x1E4FBBF60]);
}

uint64_t sub_1C4135618()
{
  uint64_t result = sub_1C44983C8();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1C413563C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4135760(a1, a2, a3, MEMORY[0x1E4FBBF78]);
}

uint64_t sub_1C4135668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C41357BC(a1, a2, a3, MEMORY[0x1E4FBBF80]);
}

uint64_t sub_1C4135694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4135818(a1, a2, a3, MEMORY[0x1E4FBBF88]);
}

uint64_t sub_1C41356C0()
{
  uint64_t result = sub_1C44983F8();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1C41356E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C41358A0(a1, a2, a3, MEMORY[0x1E4FBBFA0]);
}

uint64_t sub_1C4135710()
{
  uint64_t result = sub_1C44983D8();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1C4135734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4135760(a1, a2, a3, MEMORY[0x1E4FBBF98]);
}

uint64_t sub_1C4135760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

uint64_t sub_1C4135790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C41357BC(a1, a2, a3, MEMORY[0x1E4FBBFA8]);
}

uint64_t sub_1C41357BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FFFF;
}

uint64_t sub_1C41357EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4135818(a1, a2, a3, MEMORY[0x1E4FBBFB0]);
}

uint64_t sub_1C4135818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t sub_1C4135850()
{
  uint64_t result = sub_1C4498408();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1C4135874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C41358A0(a1, a2, a3, MEMORY[0x1E4FBBFC0]);
}

uint64_t sub_1C41358A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4();
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t sub_1C41358CC()
{
  return sub_1C4135094();
}

uint64_t sub_1C41358F8@<X0>(void *a1@<X8>)
{
  return sub_1C41350C0(*v1, a1);
}

uint64_t sub_1C413591C@<X0>(void *a1@<X8>)
{
  return sub_1C4135114(*v1, a1);
}

uint64_t sub_1C4135940@<X0>(void *a1@<X8>)
{
  return sub_1C4135168(*v1, a1);
}

uint64_t sub_1C4135964(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Proto_Value(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBB390];
  uint64_t result = swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (!*(void *)(v9 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  sub_1C3F8A1D0(v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
  uint64_t v11 = *(void *)(a1 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v12 = sub_1C3F974B0((uint64_t)v6, v11);
  swift_release();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  v15[3] = v7;
  v15[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v15);
  v13(v12, v7, v10);
  if (v1)
  {
    __swift_deallocate_boxed_opaque_existential_0((uint64_t)v15);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
    swift_dynamicCast();
    char v14 = v16;
  }
  return v14 & 1;
}

uint64_t sub_1C4135B34(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Proto_Value(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v15[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBB1A0];
  uint64_t result = swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (!*(void *)(v9 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  sub_1C3F8A1D0(v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
  uint64_t v11 = *(void *)(a1 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v12 = sub_1C3F974B0((uint64_t)v6, v11);
  swift_release();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  v15[3] = v7;
  v15[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v15);
  v13(v12, v7, v10);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v15);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  swift_dynamicCast();
  return v15[5];
}

uint64_t sub_1C4135D00(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Proto_Value(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBB3D0];
  uint64_t result = swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (!*(void *)(v9 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  sub_1C3F8A1D0(v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
  uint64_t v11 = *(void *)(a1 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v12 = sub_1C3F974B0((uint64_t)v6, v11);
  swift_release();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  v14[3] = v7;
  void v14[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v14);
  v13(v12, v7, v10);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v14);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  return swift_dynamicCast();
}

uint64_t sub_1C4135ECC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Proto_Value(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBB470];
  uint64_t result = swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (!*(void *)(v9 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  sub_1C3F8A1D0(v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
  uint64_t v11 = *(void *)(a1 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v12 = sub_1C3F974B0((uint64_t)v6, v11);
  swift_release();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  v14[3] = v7;
  void v14[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v14);
  v13(v12, v7, v10);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v14);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  return swift_dynamicCast();
}

uint64_t sub_1C4136098(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Proto_Value(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBB550];
  uint64_t result = swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (!*(void *)(v9 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  sub_1C3F8A1D0(v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
  uint64_t v11 = *(void *)(a1 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v12 = sub_1C3F974B0((uint64_t)v6, v11);
  swift_release();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  v14[3] = v7;
  void v14[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v14);
  v13(v12, v7, v10);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v14);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  swift_dynamicCast();
  return v14[5];
}

uint64_t sub_1C4136264(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Proto_Value(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBC098];
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v9 = result;
  }
  else {
    uint64_t v9 = 0;
  }
  if (!result) {
    uint64_t v7 = 0;
  }
  if (v7)
  {
    uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
    if (*(void *)(v10 + 16))
    {
      sub_1C3F8A1D0(v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
      uint64_t v11 = *(void *)(a1 + 16);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      uint64_t v12 = sub_1C3F974B0((uint64_t)v6, v11);
      swift_release();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
      v15[3] = v7;
      v15[4] = v9;
      __swift_allocate_boxed_opaque_existential_1(v15);
      v13(v12, v7, v9);
      if (v1)
      {
        return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v15);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
        swift_dynamicCast();
        return v16;
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v14 = xmmword_1C44A18C0;
    *(unsigned char *)(v14 + 16) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1C4136474(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Proto_Value(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBC0F8];
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v9 = result;
  }
  else {
    uint64_t v9 = 0;
  }
  if (!result) {
    uint64_t v7 = 0;
  }
  if (v7)
  {
    uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
    if (*(void *)(v10 + 16))
    {
      sub_1C3F8A1D0(v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
      uint64_t v11 = *(void *)(a1 + 16);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      uint64_t v12 = sub_1C3F974B0((uint64_t)v6, v11);
      swift_release();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
      v15[3] = v7;
      v15[4] = v9;
      __swift_allocate_boxed_opaque_existential_1(v15);
      v13(v12, v7, v9);
      if (v1)
      {
        return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v15);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
        swift_dynamicCast();
        return v16;
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v14 = xmmword_1C44A18C0;
    *(unsigned char *)(v14 + 16) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1C4136684(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Proto_Value(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBC150];
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v9 = result;
  }
  else {
    uint64_t v9 = 0;
  }
  if (!result) {
    uint64_t v7 = 0;
  }
  if (v7)
  {
    uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
    if (*(void *)(v10 + 16))
    {
      sub_1C3F8A1D0(v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
      uint64_t v11 = *(void *)(a1 + 16);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      uint64_t v12 = sub_1C3F974B0((uint64_t)v6, v11);
      swift_release();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
      v15[3] = v7;
      v15[4] = v9;
      __swift_allocate_boxed_opaque_existential_1(v15);
      v13(v12, v7, v9);
      if (v1)
      {
        return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v15);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
        swift_dynamicCast();
        return v16;
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v14 = xmmword_1C44A18C0;
    *(unsigned char *)(v14 + 16) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1C4136894(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Proto_Value(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBC1C8];
  uint64_t result = swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (!*(void *)(v9 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  sub_1C3F8A1D0(v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
  uint64_t v11 = *(void *)(a1 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v12 = sub_1C3F974B0((uint64_t)v6, v11);
  swift_release();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  v14[3] = v7;
  void v14[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v14);
  v13(v12, v7, v10);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v14);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  swift_dynamicCast();
  return v14[5];
}

uint64_t sub_1C4136A60(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Proto_Value(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBB808];
  uint64_t result = swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (!*(void *)(v9 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  sub_1C3F8A1D0(v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
  uint64_t v11 = *(void *)(a1 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v12 = sub_1C3F974B0((uint64_t)v6, v11);
  swift_release();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  v14[3] = v7;
  void v14[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v14);
  v13(v12, v7, v10);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v14);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  swift_dynamicCast();
  return v14[5];
}

uint64_t sub_1C4136C2C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Proto_Value(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBC358];
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v9 = result;
  }
  else {
    uint64_t v9 = 0;
  }
  if (!result) {
    uint64_t v7 = 0;
  }
  if (v7)
  {
    uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
    if (*(void *)(v10 + 16))
    {
      sub_1C3F8A1D0(v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
      uint64_t v11 = *(void *)(a1 + 16);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      uint64_t v12 = sub_1C3F974B0((uint64_t)v6, v11);
      swift_release();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
      v15[3] = v7;
      v15[4] = v9;
      __swift_allocate_boxed_opaque_existential_1(v15);
      v13(v12, v7, v9);
      if (v1)
      {
        return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v15);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
        swift_dynamicCast();
        return v16;
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v14 = xmmword_1C44A18C0;
    *(unsigned char *)(v14 + 16) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1C4136E3C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Proto_Value(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBC450];
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v9 = result;
  }
  else {
    uint64_t v9 = 0;
  }
  if (!result) {
    uint64_t v7 = 0;
  }
  if (v7)
  {
    uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
    if (*(void *)(v10 + 16))
    {
      sub_1C3F8A1D0(v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
      uint64_t v11 = *(void *)(a1 + 16);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      uint64_t v12 = sub_1C3F974B0((uint64_t)v6, v11);
      swift_release();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
      v15[3] = v7;
      v15[4] = v9;
      __swift_allocate_boxed_opaque_existential_1(v15);
      v13(v12, v7, v9);
      if (v1)
      {
        return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v15);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
        swift_dynamicCast();
        return v16;
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v14 = xmmword_1C44A18C0;
    *(unsigned char *)(v14 + 16) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1C413704C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Proto_Value(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBC4C0];
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v9 = result;
  }
  else {
    uint64_t v9 = 0;
  }
  if (!result) {
    uint64_t v7 = 0;
  }
  if (v7)
  {
    uint64_t v10 = *(void *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
    if (*(void *)(v10 + 16))
    {
      sub_1C3F8A1D0(v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
      uint64_t v11 = *(void *)(a1 + 16);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      uint64_t v12 = sub_1C3F974B0((uint64_t)v6, v11);
      swift_release();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
      v15[3] = v7;
      v15[4] = v9;
      __swift_allocate_boxed_opaque_existential_1(v15);
      v13(v12, v7, v9);
      if (v1)
      {
        return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v15);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
        swift_dynamicCast();
        return v16;
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v14 = xmmword_1C44A18C0;
    *(unsigned char *)(v14 + 16) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1C413725C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Proto_Value(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBC538];
  uint64_t result = swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (!*(void *)(v9 + 16))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  sub_1C3F8A1D0(v9 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), (uint64_t)v6);
  uint64_t v11 = *(void *)(a1 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v12 = sub_1C3F974B0((uint64_t)v6, v11);
  swift_release();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
  v14[3] = v7;
  void v14[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v14);
  v13(v12, v7, v10);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v14);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  swift_dynamicCast();
  return v14[5];
}

uint64_t sub_1C4137428(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Proto_Value(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v17[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v10 = result;
  }
  else {
    uint64_t v10 = 0;
  }
  if (!result) {
    a1 = 0;
  }
  if (a1)
  {
    uint64_t v11 = *(void *)(a2 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
    if (*(void *)(v11 + 16))
    {
      sub_1C3F8A1D0(v11 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), (uint64_t)v8);
      uint64_t v12 = *(void *)(a2 + 16);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      uint64_t v13 = sub_1C3F974B0((uint64_t)v8, v12);
      swift_release();
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 8);
      v17[3] = a1;
      _OWORD v17[4] = v10;
      __swift_allocate_boxed_opaque_existential_1(v17);
      v14(v13, a1, v10);
      if (v2)
      {
        return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
        return swift_dynamicCast();
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v15 = xmmword_1C44A18C0;
    *(unsigned char *)(v15 + 16) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1C413763C()
{
  return sub_1C4135964(*v0) & 1;
}

uint64_t sub_1C413765C()
{
  return sub_1C4135B34(*v0);
}

uint64_t sub_1C4137678()
{
  return sub_1C4135D00(*v0);
}

uint64_t sub_1C4137694()
{
  return sub_1C4135ECC(*v0);
}

uint64_t sub_1C41376B0()
{
  return sub_1C4136098(*v0);
}

uint64_t sub_1C41376CC()
{
  return sub_1C4136264(*v0);
}

uint64_t sub_1C41376E8()
{
  return sub_1C4136474(*v0);
}

uint64_t sub_1C4137704()
{
  return sub_1C4136684(*v0);
}

uint64_t sub_1C4137720()
{
  return sub_1C4136894(*v0);
}

uint64_t sub_1C413773C()
{
  return sub_1C4498328();
}

uint64_t sub_1C4137754()
{
  return sub_1C4136A60(*v0);
}

uint64_t sub_1C4137770()
{
  return sub_1C4136C2C(*v0);
}

uint64_t sub_1C413778C()
{
  return sub_1C4136E3C(*v0);
}

uint64_t sub_1C41377A8()
{
  return sub_1C413704C(*v0);
}

uint64_t sub_1C41377C4()
{
  return sub_1C413725C(*v0);
}

uint64_t sub_1C41377E0()
{
  return sub_1C4498338();
}

uint64_t sub_1C41377F8(uint64_t a1)
{
  return sub_1C4137428(a1, *v1);
}

uint64_t sub_1C413781C()
{
  uint64_t v2 = type metadata accessor for Proto_Value(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1E4FBB390];
  uint64_t result = swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_10;
  }
  unint64_t v8 = v0[1];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v9 = *v0;
  uint64_t v10 = *(void *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v8 >= *(void *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v8;
  v0[1] = v8 + 1;
  sub_1C3F8A1D0(v12, (uint64_t)v5);
  uint64_t v13 = *(void *)(v9 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v14 = sub_1C3F974B0((uint64_t)v5, v13);
  swift_release();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  void v18[3] = v6;
  void v18[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v18);
  v15(v14, v6, v11);
  if (v1)
  {
    __swift_deallocate_boxed_opaque_existential_0((uint64_t)v18);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
    swift_dynamicCast();
    char v16 = v19;
  }
  return v16 & 1;
}

uint64_t sub_1C4137A10()
{
  uint64_t v2 = type metadata accessor for Proto_Value(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v17[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1E4FBB1A0];
  uint64_t result = swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_10;
  }
  unint64_t v8 = v0[1];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v9 = *v0;
  uint64_t v10 = *(void *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v8 >= *(void *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v8;
  v0[1] = v8 + 1;
  sub_1C3F8A1D0(v12, (uint64_t)v5);
  uint64_t v13 = *(void *)(v9 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v14 = sub_1C3F974B0((uint64_t)v5, v13);
  swift_release();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  v17[3] = v6;
  _OWORD v17[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v17);
  v15(v14, v6, v11);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  swift_dynamicCast();
  return v17[5];
}

uint64_t sub_1C4137C00()
{
  uint64_t v2 = type metadata accessor for Proto_Value(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v17[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1E4FBB3D0];
  uint64_t result = swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_10;
  }
  unint64_t v8 = v0[1];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v9 = *v0;
  uint64_t v10 = *(void *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v8 >= *(void *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v8;
  v0[1] = v8 + 1;
  sub_1C3F8A1D0(v12, (uint64_t)v5);
  uint64_t v13 = *(void *)(v9 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v14 = sub_1C3F974B0((uint64_t)v5, v13);
  swift_release();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  v17[3] = v6;
  _OWORD v17[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v17);
  v15(v14, v6, v11);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  return swift_dynamicCast();
}

uint64_t sub_1C4137DF0()
{
  uint64_t v2 = type metadata accessor for Proto_Value(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v17[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1E4FBB470];
  uint64_t result = swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_10;
  }
  unint64_t v8 = v0[1];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v9 = *v0;
  uint64_t v10 = *(void *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v8 >= *(void *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v8;
  v0[1] = v8 + 1;
  sub_1C3F8A1D0(v12, (uint64_t)v5);
  uint64_t v13 = *(void *)(v9 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v14 = sub_1C3F974B0((uint64_t)v5, v13);
  swift_release();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  v17[3] = v6;
  _OWORD v17[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v17);
  v15(v14, v6, v11);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  return swift_dynamicCast();
}

uint64_t sub_1C4137FE0()
{
  uint64_t v2 = type metadata accessor for Proto_Value(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v17[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1E4FBB550];
  uint64_t result = swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_10;
  }
  unint64_t v8 = v0[1];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v9 = *v0;
  uint64_t v10 = *(void *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v8 >= *(void *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v8;
  v0[1] = v8 + 1;
  sub_1C3F8A1D0(v12, (uint64_t)v5);
  uint64_t v13 = *(void *)(v9 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v14 = sub_1C3F974B0((uint64_t)v5, v13);
  swift_release();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  v17[3] = v6;
  _OWORD v17[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v17);
  v15(v14, v6, v11);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  swift_dynamicCast();
  return v17[6];
}

uint64_t sub_1C41381D0()
{
  uint64_t v2 = type metadata accessor for Proto_Value(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1E4FBC098];
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!result) {
    uint64_t v6 = 0;
  }
  if (!v6)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v16 = xmmword_1C44A18C0;
    *(unsigned char *)(v16 + 16) = 4;
    return swift_willThrow();
  }
  unint64_t v9 = v0[1];
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = *v0;
  uint64_t v11 = *(void *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v9 >= *(void *)(v11 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v12 = v11
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v9;
  v0[1] = v9 + 1;
  sub_1C3F8A1D0(v12, (uint64_t)v5);
  uint64_t v13 = *(void *)(v10 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v14 = sub_1C3F974B0((uint64_t)v5, v13);
  swift_release();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8);
  void v18[3] = v6;
  void v18[4] = v8;
  __swift_allocate_boxed_opaque_existential_1(v18);
  v15(v14, v6, v8);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v18);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  swift_dynamicCast();
  return v19;
}

uint64_t sub_1C4138404()
{
  uint64_t v2 = type metadata accessor for Proto_Value(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1E4FBC0F8];
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!result) {
    uint64_t v6 = 0;
  }
  if (!v6)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v16 = xmmword_1C44A18C0;
    *(unsigned char *)(v16 + 16) = 4;
    return swift_willThrow();
  }
  unint64_t v9 = v0[1];
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = *v0;
  uint64_t v11 = *(void *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v9 >= *(void *)(v11 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v12 = v11
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v9;
  v0[1] = v9 + 1;
  sub_1C3F8A1D0(v12, (uint64_t)v5);
  uint64_t v13 = *(void *)(v10 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v14 = sub_1C3F974B0((uint64_t)v5, v13);
  swift_release();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8);
  void v18[3] = v6;
  void v18[4] = v8;
  __swift_allocate_boxed_opaque_existential_1(v18);
  v15(v14, v6, v8);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v18);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  swift_dynamicCast();
  return v19;
}

uint64_t sub_1C4138638()
{
  uint64_t v2 = type metadata accessor for Proto_Value(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1E4FBC150];
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!result) {
    uint64_t v6 = 0;
  }
  if (!v6)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v16 = xmmword_1C44A18C0;
    *(unsigned char *)(v16 + 16) = 4;
    return swift_willThrow();
  }
  unint64_t v9 = v0[1];
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = *v0;
  uint64_t v11 = *(void *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v9 >= *(void *)(v11 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v12 = v11
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v9;
  v0[1] = v9 + 1;
  sub_1C3F8A1D0(v12, (uint64_t)v5);
  uint64_t v13 = *(void *)(v10 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v14 = sub_1C3F974B0((uint64_t)v5, v13);
  swift_release();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8);
  void v18[3] = v6;
  void v18[4] = v8;
  __swift_allocate_boxed_opaque_existential_1(v18);
  v15(v14, v6, v8);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v18);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  swift_dynamicCast();
  return v19;
}

uint64_t sub_1C413886C()
{
  uint64_t v2 = type metadata accessor for Proto_Value(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v17[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1E4FBC1C8];
  uint64_t result = swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_10;
  }
  unint64_t v8 = v0[1];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v9 = *v0;
  uint64_t v10 = *(void *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v8 >= *(void *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v8;
  v0[1] = v8 + 1;
  sub_1C3F8A1D0(v12, (uint64_t)v5);
  uint64_t v13 = *(void *)(v9 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v14 = sub_1C3F974B0((uint64_t)v5, v13);
  swift_release();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  v17[3] = v6;
  _OWORD v17[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v17);
  v15(v14, v6, v11);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  swift_dynamicCast();
  return v17[6];
}

uint64_t sub_1C4138A5C()
{
  uint64_t v2 = type metadata accessor for Proto_Value(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v17[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1E4FBB808];
  uint64_t result = swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_10;
  }
  unint64_t v8 = v0[1];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v9 = *v0;
  uint64_t v10 = *(void *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v8 >= *(void *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v8;
  v0[1] = v8 + 1;
  sub_1C3F8A1D0(v12, (uint64_t)v5);
  uint64_t v13 = *(void *)(v9 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v14 = sub_1C3F974B0((uint64_t)v5, v13);
  swift_release();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  v17[3] = v6;
  _OWORD v17[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v17);
  v15(v14, v6, v11);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  swift_dynamicCast();
  return v17[6];
}

uint64_t sub_1C4138C4C()
{
  uint64_t v2 = type metadata accessor for Proto_Value(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1E4FBC358];
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!result) {
    uint64_t v6 = 0;
  }
  if (!v6)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v16 = xmmword_1C44A18C0;
    *(unsigned char *)(v16 + 16) = 4;
    return swift_willThrow();
  }
  unint64_t v9 = v0[1];
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = *v0;
  uint64_t v11 = *(void *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v9 >= *(void *)(v11 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v12 = v11
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v9;
  v0[1] = v9 + 1;
  sub_1C3F8A1D0(v12, (uint64_t)v5);
  uint64_t v13 = *(void *)(v10 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v14 = sub_1C3F974B0((uint64_t)v5, v13);
  swift_release();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8);
  void v18[3] = v6;
  void v18[4] = v8;
  __swift_allocate_boxed_opaque_existential_1(v18);
  v15(v14, v6, v8);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v18);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  swift_dynamicCast();
  return v19;
}

uint64_t sub_1C4138E80()
{
  uint64_t v2 = type metadata accessor for Proto_Value(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1E4FBC450];
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!result) {
    uint64_t v6 = 0;
  }
  if (!v6)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v16 = xmmword_1C44A18C0;
    *(unsigned char *)(v16 + 16) = 4;
    return swift_willThrow();
  }
  unint64_t v9 = v0[1];
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = *v0;
  uint64_t v11 = *(void *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v9 >= *(void *)(v11 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v12 = v11
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v9;
  v0[1] = v9 + 1;
  sub_1C3F8A1D0(v12, (uint64_t)v5);
  uint64_t v13 = *(void *)(v10 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v14 = sub_1C3F974B0((uint64_t)v5, v13);
  swift_release();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8);
  void v18[3] = v6;
  void v18[4] = v8;
  __swift_allocate_boxed_opaque_existential_1(v18);
  v15(v14, v6, v8);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v18);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  swift_dynamicCast();
  return v19;
}

uint64_t sub_1C41390B4()
{
  uint64_t v2 = type metadata accessor for Proto_Value(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1E4FBC4C0];
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v8 = result;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!result) {
    uint64_t v6 = 0;
  }
  if (!v6)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v16 = xmmword_1C44A18C0;
    *(unsigned char *)(v16 + 16) = 4;
    return swift_willThrow();
  }
  unint64_t v9 = v0[1];
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = *v0;
  uint64_t v11 = *(void *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v9 >= *(void *)(v11 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v12 = v11
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v9;
  v0[1] = v9 + 1;
  sub_1C3F8A1D0(v12, (uint64_t)v5);
  uint64_t v13 = *(void *)(v10 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v14 = sub_1C3F974B0((uint64_t)v5, v13);
  swift_release();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 8);
  void v18[3] = v6;
  void v18[4] = v8;
  __swift_allocate_boxed_opaque_existential_1(v18);
  v15(v14, v6, v8);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v18);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  swift_dynamicCast();
  return v19;
}

uint64_t sub_1C41392E8()
{
  uint64_t v2 = type metadata accessor for Proto_Value(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v17[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1E4FBC538];
  uint64_t result = swift_conformsToProtocol2();
  if (!result) {
    goto LABEL_10;
  }
  unint64_t v8 = v0[1];
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v9 = *v0;
  uint64_t v10 = *(void *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v8 >= *(void *)(v10 + 16))
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v8;
  v0[1] = v8 + 1;
  sub_1C3F8A1D0(v12, (uint64_t)v5);
  uint64_t v13 = *(void *)(v9 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v14 = sub_1C3F974B0((uint64_t)v5, v13);
  swift_release();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 8);
  v17[3] = v6;
  _OWORD v17[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v17);
  v15(v14, v6, v11);
  if (v1) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v17);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  swift_dynamicCast();
  return v17[6];
}

uint64_t sub_1C41394D8(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for Proto_Value(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v19[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v9 = result;
  }
  else {
    uint64_t v9 = 0;
  }
  if (!result) {
    a1 = 0;
  }
  if (!a1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v17 = xmmword_1C44A18C0;
    *(unsigned char *)(v17 + 16) = 4;
    return swift_willThrow();
  }
  unint64_t v10 = v1[1];
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v11 = *v1;
  uint64_t v12 = *(void *)(*v1 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8);
  if (v10 >= *(void *)(v12 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v13 = v12
      + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + *(void *)(v5 + 72) * v10;
  v1[1] = v10 + 1;
  sub_1C3F8A1D0(v13, (uint64_t)v7);
  uint64_t v14 = *(void *)(v11 + 16);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v15 = sub_1C3F974B0((uint64_t)v7, v14);
  swift_release();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
  v19[3] = a1;
  void v19[4] = v9;
  __swift_allocate_boxed_opaque_existential_1(v19);
  v16(v15, a1, v9);
  if (v2) {
    return __swift_deallocate_boxed_opaque_existential_0((uint64_t)v19);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  return swift_dynamicCast();
}

uint64_t sub_1C4139710()
{
  return sub_1C3F5CAB4();
}

uint64_t sub_1C413973C()
{
  return *(void *)(*(void *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8) + 16);
}

BOOL sub_1C413975C()
{
  return v0[1] >= *(void *)(*(void *)(*v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value + 8) + 16);
}

uint64_t sub_1C4139780()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1C4139788()
{
  return sub_1C413781C() & 1;
}

uint64_t sub_1C41397A4()
{
  return sub_1C4137A10();
}

uint64_t sub_1C41397BC()
{
  return sub_1C4137C00();
}

uint64_t sub_1C41397D4()
{
  return sub_1C4137DF0();
}

uint64_t sub_1C41397EC()
{
  return sub_1C4137FE0();
}

uint64_t sub_1C4139804()
{
  return sub_1C41381D0();
}

uint64_t sub_1C413981C()
{
  return sub_1C4138404();
}

uint64_t sub_1C4139834()
{
  return sub_1C4138638();
}

uint64_t sub_1C413984C()
{
  return sub_1C413886C();
}

uint64_t sub_1C4139864()
{
  return sub_1C4498128();
}

uint64_t sub_1C413987C()
{
  return sub_1C4138A5C();
}

uint64_t sub_1C4139894()
{
  return sub_1C4138C4C();
}

uint64_t sub_1C41398AC()
{
  return sub_1C4138E80();
}

uint64_t sub_1C41398C4()
{
  return sub_1C41390B4();
}

uint64_t sub_1C41398DC()
{
  return sub_1C41392E8();
}

uint64_t sub_1C41398F4()
{
  return sub_1C4498138();
}

uint64_t sub_1C413990C(uint64_t a1)
{
  return sub_1C41394D8(a1);
}

uint64_t sub_1C4139924()
{
  return sub_1C44980B8();
}

uint64_t sub_1C413993C()
{
  return sub_1C44980A8();
}

uint64_t sub_1C4139954()
{
  uint64_t result = sub_1C44980C8();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1C4139978(uint64_t a1, uint64_t a2)
{
  return sub_1C4139BA4(a1, a2, MEMORY[0x1E4FBBE18]);
}

uint64_t sub_1C41399A4()
{
  uint64_t result = sub_1C44980D8();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1C41399C8(uint64_t a1, uint64_t a2)
{
  return sub_1C4139AEC(a1, a2, MEMORY[0x1E4FBBE20]);
}

uint64_t sub_1C41399F4(uint64_t a1, uint64_t a2)
{
  return sub_1C4139B48(a1, a2, MEMORY[0x1E4FBBE28]);
}

uint64_t sub_1C4139A20(uint64_t a1, uint64_t a2)
{
  return sub_1C4139BA4(a1, a2, MEMORY[0x1E4FBBE30]);
}

uint64_t sub_1C4139A4C()
{
  uint64_t result = sub_1C4498108();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1C4139A70(uint64_t a1, uint64_t a2)
{
  return sub_1C4139C2C(a1, a2, MEMORY[0x1E4FBBE40]);
}

uint64_t sub_1C4139A9C()
{
  uint64_t result = sub_1C44980E8();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1C4139AC0(uint64_t a1, uint64_t a2)
{
  return sub_1C4139AEC(a1, a2, MEMORY[0x1E4FBBE38]);
}

uint64_t sub_1C4139AEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

uint64_t sub_1C4139B1C(uint64_t a1, uint64_t a2)
{
  return sub_1C4139B48(a1, a2, MEMORY[0x1E4FBBE48]);
}

uint64_t sub_1C4139B48(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FFFF;
}

uint64_t sub_1C4139B78(uint64_t a1, uint64_t a2)
{
  return sub_1C4139BA4(a1, a2, MEMORY[0x1E4FBBE50]);
}

uint64_t sub_1C4139BA4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

uint64_t sub_1C4139BDC()
{
  uint64_t result = sub_1C4498118();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1C4139C00(uint64_t a1, uint64_t a2)
{
  return sub_1C4139C2C(a1, a2, MEMORY[0x1E4FBBE58]);
}

uint64_t sub_1C4139C2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t sub_1C4139C58()
{
  return sub_1C44980F8();
}

uint64_t sub_1C4139C84()
{
  return sub_1C4139710();
}

uint64_t sub_1C4139CA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  a3[3] = a1;
  a3[4] = a2;
  *a3 = v4;
  a3[1] = v5;
  return swift_retain();
}

uint64_t sub_1C4139CD0@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for CRStructDecoder();
  a1[4] = sub_1C4139F68();
  *a1 = v3;
  return swift_retain();
}

unint64_t sub_1C4139D24()
{
  return sub_1C3FE4D1C(MEMORY[0x1E4FBC860]);
}

uint64_t sub_1C4139D30@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = &type metadata for CRStructDecoder.UnkeyedContainer;
  a1[4] = sub_1C4139E2C();
  *a1 = v3;
  a1[1] = 0;
  return swift_retain();
}

uint64_t sub_1C4139D84@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = &type metadata for CRStructDecoder.SingleValueContainer;
  a1[4] = sub_1C4139DD8();
  *a1 = v3;
  return swift_retain();
}

unint64_t sub_1C4139DD8()
{
  unint64_t result = qword_1EA39DB28;
  if (!qword_1EA39DB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39DB28);
  }
  return result;
}

unint64_t sub_1C4139E2C()
{
  unint64_t result = qword_1EA39DB30[0];
  if (!qword_1EA39DB30[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA39DB30);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CRStructDecoder.UnkeyedContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

void *assignWithCopy for CRStructDecoder.UnkeyedContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for CRStructDecoder.UnkeyedContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for CRStructDecoder.UnkeyedContainer()
{
  return &type metadata for CRStructDecoder.UnkeyedContainer;
}

ValueMetadata *type metadata accessor for CRStructDecoder.SingleValueContainer()
{
  return &type metadata for CRStructDecoder.SingleValueContainer;
}

uint64_t sub_1C4139F60(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

unint64_t sub_1C4139F68()
{
  unint64_t result = qword_1EBBBF1B8;
  if (!qword_1EBBBF1B8)
  {
    type metadata accessor for CRStructDecoder();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBBF1B8);
  }
  return result;
}

uint64_t sub_1C4139FC0()
{
  return sub_1C4497478();
}

__n128 sub_1C4139FD0(__n128 *a1)
{
  uint64_t v2 = swift_allocObject();
  __n128 result = *a1;
  *(__n128 *)(v2 + 16) = *a1;
  return result;
}

uint64_t sub_1C413A008(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v64 = a3;
  uint64_t v65 = a4;
  uint64_t v8 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v66 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v55 = (uint64_t)&v52 - v12;
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DBC8);
  uint64_t v13 = MEMORY[0x1F4188790](v63);
  uint64_t v57 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v54 = (uint64_t)&v52 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v53 = (uint64_t)&v52 - v17;
  unint64_t v18 = *(void *)(a1 + 16);
  unint64_t v19 = *(void *)(a2 + 16);
  if (v19 >= v18) {
    int64_t v20 = *(void *)(a1 + 16);
  }
  else {
    int64_t v20 = *(void *)(a2 + 16);
  }
  uint64_t v70 = MEMORY[0x1E4FBC860];
  sub_1C40125EC(0, v20, 0);
  unint64_t v61 = v18;
  uint64_t v62 = a1;
  uint64_t v59 = a2;
  unint64_t v60 = v19;
  int64_t v58 = v20;
  if (v20)
  {
    uint64_t v21 = v70;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v23 = 0;
    uint64_t v56 = v11;
    while (v18 != v23)
    {
      uint64_t result = sub_1C413BC74(a1+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(void *)(v66 + 72) * v23, (uint64_t)v11, type metadata accessor for Proto_KeyPath);
      if (v19 == v23) {
        goto LABEL_35;
      }
      uint64_t v24 = *(void *)(a2 + 8 * v23 + 32);
      uint64_t v25 = *(int *)(v63 + 48);
      uint64_t v26 = v57;
      sub_1C413BCDC((uint64_t)v11, v57);
      *(void *)(v26 + v25) = v24;
      uint64_t v27 = v26;
      uint64_t v28 = v64(&v67, v26, v24);
      if (v5)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return sub_1C413BD40(v26);
      }
      uint64_t v29 = v28;
      uint64_t v69 = v28;
      sub_1C413BD40(v27);
      uint64_t v31 = v67;
      uint64_t v30 = v68;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = sub_1C40125EC(0, *(void *)(v21 + 16) + 1, 1);
        uint64_t v21 = v70;
      }
      unint64_t v33 = *(void *)(v21 + 16);
      unint64_t v32 = *(void *)(v21 + 24);
      if (v33 >= v32 >> 1)
      {
        uint64_t result = sub_1C40125EC(v32 > 1, v33 + 1, 1);
        uint64_t v21 = v70;
      }
      ++v23;
      *(void *)(v21 + 16) = v33 + 1;
      uint64_t v34 = (void *)(v21 + 24 * v33);
      void v34[4] = v31;
      v34[5] = v30;
      v34[6] = v29;
      a2 = v59;
      uint64_t v5 = 0;
      unint64_t v18 = v61;
      a1 = v62;
      unint64_t v19 = v60;
      uint64_t v11 = v56;
      if (v58 == v23) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_35:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
LABEL_16:
    if (v18 <= v19)
    {
LABEL_32:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v70;
    }
    uint64_t v57 = a2 + 32;
    int64_t v35 = v58;
    if (v58 <= (uint64_t)v19) {
      int64_t v36 = v19;
    }
    else {
      int64_t v36 = v58;
    }
    while (v18 != v35)
    {
      uint64_t v37 = v55;
      uint64_t result = sub_1C413BC74(a1+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(void *)(v66 + 72) * v35, v55, type metadata accessor for Proto_KeyPath);
      if (v19 == v35)
      {
        sub_1C413BE08(v37, type metadata accessor for Proto_KeyPath);
        goto LABEL_32;
      }
      if (v36 == v35) {
        goto LABEL_37;
      }
      uint64_t v38 = *(void *)(v57 + 8 * v35);
      uint64_t v39 = v63;
      uint64_t v40 = *(int *)(v63 + 48);
      uint64_t v41 = v37;
      uint64_t v42 = v54;
      sub_1C413BCDC(v41, v54);
      *(void *)(v42 + v40) = v38;
      uint64_t v43 = v53;
      sub_1C413BDA0(v42, v53);
      uint64_t v44 = v64(&v67, v43, *(void *)(v43 + *(int *)(v39 + 48)));
      if (v5)
      {
        sub_1C413BD40(v43);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      uint64_t v45 = v44;
      uint64_t v69 = v44;
      sub_1C413BD40(v43);
      uint64_t v46 = v67;
      uint64_t v47 = v68;
      uint64_t v48 = v70;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = sub_1C40125EC(0, *(void *)(v48 + 16) + 1, 1);
        uint64_t v48 = v70;
      }
      unint64_t v50 = *(void *)(v48 + 16);
      unint64_t v49 = *(void *)(v48 + 24);
      if (v50 >= v49 >> 1)
      {
        uint64_t result = sub_1C40125EC(v49 > 1, v50 + 1, 1);
        uint64_t v48 = v70;
      }
      ++v35;
      *(void *)(v48 + 16) = v50 + 1;
      uint64_t v51 = (void *)(v48 + 24 * v50);
      v51[4] = v46;
      v51[5] = v47;
      v51[6] = v45;
      unint64_t v18 = v61;
      a1 = v62;
      unint64_t v19 = v60;
      if (v61 == v35) {
        goto LABEL_32;
      }
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1C413A528(uint64_t *a1)
{
  uint64_t v3 = (void **)v1;
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  sub_1C3F7E324(*a1, v5);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = (void *)*v1;
  uint64_t v21 = v7;
  uint64_t *v3 = (void *)0x8000000000000000;
  unint64_t v9 = sub_1C3F850CC(v4, v5);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_13;
  }
  char v2 = v8;
  if (v7[3] >= v12)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_14;
    }
  }
  else
  {
    sub_1C406353C(v12, isUniquelyReferenced_nonNull_native);
    uint64_t v13 = sub_1C3F850CC(v4, v5);
    if ((v2 & 1) != (v14 & 1))
    {
      uint64_t result = sub_1C4498558();
      __break(1u);
      return result;
    }
    unint64_t v9 = v13;
  }
  while (1)
  {
    uint64_t *v3 = v7;
    swift_bridgeObjectRelease();
    uint64_t v15 = (uint64_t)*v3;
    if ((v2 & 1) == 0)
    {
      sub_1C4421D64(v9, v4, v5, 0, *v3);
      sub_1C3F7E324(v4, v5);
    }
    uint64_t v16 = *(void *)(v15 + 56);
    uint64_t v17 = *(void *)(v16 + 8 * v9);
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (!v18) {
      break;
    }
LABEL_13:
    __break(1u);
LABEL_14:
    sub_1C4068670();
    uint64_t v7 = v21;
  }
  *(void *)(v16 + 8 * v9) = v19;
  return sub_1C3F7E2CC(v4, v5);
}

uint64_t sub_1C413A68C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Proto_KeyPath(0);
  MEMORY[0x1F4188790](v6 - 8);
  char v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C413BC74(a2, (uint64_t)v8, type metadata accessor for Proto_KeyPath);
  uint64_t v9 = *((void *)v8 + 1);
  unint64_t v10 = *((void *)v8 + 2);
  switch(v10 >> 62)
  {
    case 1uLL:
      if ((int)v9 != v9 >> 32) {
        goto LABEL_3;
      }
      goto LABEL_7;
    case 2uLL:
      if (*(void *)(v9 + 16) == *(void *)(v9 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_7;
    default:
      if ((v10 & 0xFF000000000000) != 0)
      {
LABEL_3:
        sub_1C3F7E324(*((void *)v8 + 1), *((void *)v8 + 2));
        sub_1C413BE08((uint64_t)v8, type metadata accessor for Proto_KeyPath);
        *a1 = v9;
        a1[1] = v10;
      }
      else
      {
LABEL_7:
        sub_1C3FE3FF0();
        swift_allocError();
        *(void *)uint64_t v11 = 0xD000000000000016;
        *(void *)(v11 + 8) = 0x80000001C44B1170;
        *(unsigned char *)(v11 + 16) = 0;
        swift_willThrow();
        sub_1C413BE08((uint64_t)v8, type metadata accessor for Proto_KeyPath);
      }
      return a3;
  }
}

void sub_1C413A82C()
{
}

void sub_1C413A888()
{
}

void sub_1C413A8E4()
{
}

void sub_1C413A940()
{
}

uint64_t type metadata accessor for AnyReference()
{
  return self;
}

uint64_t sub_1C413A9C0()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1C413A9F8()
{
  uint64_t v1 = *v0;
  sub_1C44985F8();
  (*(void (**)(unsigned char *))(*(void *)v1 + 104))(v3);
  return sub_1C4498628();
}

uint64_t sub_1C413AA5C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t sub_1C413AAA0()
{
  sub_1C44985F8();
  (*(void (**)(unsigned char *))(**(void **)v0 + 104))(v2);
  return sub_1C4498628();
}

uint64_t sub_1C413AB00(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 96))(*a2) & 1;
}

uint64_t sub_1C413AB4C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t sub_1C413AB90()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))() & 1;
}

uint64_t sub_1C413ABD8()
{
  type metadata accessor for TypedReference();
  uint64_t v1 = swift_dynamicCastClass();
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    unint64_t v3 = *(void *)(v1 + 24);
    uint64_t v5 = *(void *)(v0 + 16);
    unint64_t v4 = *(void *)(v0 + 24);
    sub_1C3F7E324(v2, v3);
    sub_1C3F7E324(v2, v3);
    sub_1C3F7E324(v5, v4);
    char v6 = sub_1C3FAD630(v2, v3, v5, v4);
    sub_1C3F7E2CC(v5, v4);
    sub_1C3F7E2CC(v2, v3);
    sub_1C3F7E2CC(v2, v3);
    return v6 & 1;
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 16);
    unint64_t v9 = *(void *)(v0 + 24);
    sub_1C3F7E324(v8, v9);
    sub_1C3F6C6F0(0, 0xF000000000000000);
    sub_1C3F6C6F0(v8, v9);
    return 0;
  }
}

uint64_t sub_1C413ACE8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  sub_1C3F7E324(v2, v1);
  sub_1C4496568();
  return sub_1C3F7E2CC(v2, v1);
}

uint64_t sub_1C413AD48@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v5 = *(void *)(*(void *)v2 + 144);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v13 - v6;
  uint64_t v9 = *(void *)(*(void *)(*(void *)(v8 + 152) + 16) + 8);
  unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
  uint64_t v11 = swift_retain();
  uint64_t result = v10(v11, v5, v9);
  if (!v3) {
    return sub_1C3F6BC4C((uint64_t)v7, v5, a2);
  }
  return result;
}

BOOL sub_1C413AE3C(uint64_t a1)
{
  uint64_t v2 = *v1;
  (*(void (**)(void *__return_ptr))(**(void **)a1 + 88))(v5);
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  uint64_t DynamicType = swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  return DynamicType == *(void *)(v2 + 144);
}

uint64_t sub_1C413AEE0()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)v0 + 152) + 16) + 72))() & 1;
}

uint64_t type metadata accessor for TypedReference()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for RetainCounts()
{
  return &type metadata for RetainCounts;
}

uint64_t sub_1C413AF70(uint64_t a1, uint64_t a2)
{
  return sub_1C413BC10(&qword_1EA39DBB8, a2, (void (*)(uint64_t))type metadata accessor for AnyReference);
}

void sub_1C413AFB8(void *a1, char a2, void *a3)
{
  LOBYTE(v4) = a2;
  uint64_t v6 = a1[2];
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_3;
  }
  unint64_t v8 = a1[5];
  unint64_t v7 = a1[6];
  uint64_t v9 = a1[4];
  sub_1C3F7E324(v9, v8);
  if (v8 >> 60 == 15) {
    goto LABEL_3;
  }
  uint64_t v39 = v9;
  unint64_t v40 = v8;
  unint64_t v10 = (void *)*a3;
  unint64_t v11 = sub_1C3F850CC(v9, v8);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  BOOL v15 = __OFADD__(v13, v14);
  uint64_t v16 = v13 + v14;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v17 = v12;
  if (v10[3] < v16)
  {
    sub_1C406353C(v16, v4 & 1);
    unint64_t v11 = sub_1C3F850CC(v9, v8);
    if ((v17 & 1) == (v18 & 1)) {
      goto LABEL_9;
    }
LABEL_7:
    unint64_t v11 = sub_1C4498558();
    __break(1u);
  }
  if (v4)
  {
LABEL_9:
    if (v17) {
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v23 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v24 = (uint64_t *)(v23[6] + 16 * v11);
    *uint64_t v24 = v9;
    v24[1] = v8;
    *(void *)(v23[7] + 8 * v11) = v7;
    uint64_t v25 = v23[2];
    BOOL v15 = __OFADD__(v25, 1);
    uint64_t v26 = v25 + 1;
    if (!v15)
    {
      void v23[2] = v26;
      if (v6 == 1)
      {
LABEL_3:
        swift_bridgeObjectRelease_n();
        return;
      }
      unint64_t v4 = a1 + 9;
      unint64_t v7 = 1;
      while (v7 < a1[2])
      {
        unint64_t v8 = *(v4 - 1);
        uint64_t v27 = *v4;
        uint64_t v9 = *(v4 - 2);
        sub_1C3F7E324(v9, v8);
        if (v8 >> 60 == 15) {
          goto LABEL_3;
        }
        uint64_t v39 = v9;
        unint64_t v40 = v8;
        uint64_t v28 = (void *)*a3;
        unint64_t v29 = sub_1C3F850CC(v9, v8);
        uint64_t v31 = v28[2];
        BOOL v32 = (v30 & 1) == 0;
        BOOL v15 = __OFADD__(v31, v32);
        uint64_t v33 = v31 + v32;
        if (v15) {
          goto LABEL_25;
        }
        char v17 = v30;
        if (v28[3] < v33)
        {
          sub_1C406353C(v33, 1);
          unint64_t v29 = sub_1C3F850CC(v9, v8);
          if ((v17 & 1) != (v34 & 1)) {
            goto LABEL_7;
          }
        }
        if (v17) {
          goto LABEL_10;
        }
        int64_t v35 = (void *)*a3;
        *(void *)(*a3 + 8 * (v29 >> 6) + 64) |= 1 << v29;
        int64_t v36 = (uint64_t *)(v35[6] + 16 * v29);
        *int64_t v36 = v9;
        v36[1] = v8;
        *(void *)(v35[7] + 8 * v29) = v27;
        uint64_t v37 = v35[2];
        BOOL v15 = __OFADD__(v37, 1);
        uint64_t v38 = v37 + 1;
        if (v15) {
          goto LABEL_26;
        }
        ++v7;
        v35[2] = v38;
        v4 += 3;
        if (v6 == v7) {
          goto LABEL_3;
        }
      }
      goto LABEL_27;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  unint64_t v22 = v11;
  sub_1C4068670();
  unint64_t v11 = v22;
  if ((v17 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_10:
  sub_1C3FE3FF0();
  uint64_t v19 = (void *)swift_allocError();
  *(void *)uint64_t v20 = 0xD000000000000015;
  *(void *)(v20 + 8) = 0x80000001C44B15C0;
  *(unsigned char *)(v20 + 16) = 0;
  swift_willThrow();
  id v21 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC00F0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_1C3F7E2CC(v39, v40);
    swift_bridgeObjectRelease();

    return;
  }
LABEL_28:
  sub_1C4497D28();
  sub_1C4497268();
  sub_1C4497E88();
  sub_1C4497268();
  sub_1C4497F58();
  __break(1u);
}

uint64_t sub_1C413B380@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v5;
  a2[3] = v4;
  sub_1C3F7E324(v3, v2);
  return swift_retain();
}

uint64_t sub_1C413B3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Proto_RetainCounts(0);
  MEMORY[0x1F4188790](v5);
  unint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  uint64_t v9 = (uint64_t *)sub_1C3F7E4A4(MEMORY[0x1E4FBC860]);
  unint64_t v67 = sub_1C3F7E37C(v8);
  sub_1C413BC74(a1, (uint64_t)v7, type metadata accessor for Proto_RetainCounts);
  v66[0] = 1;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  uint64_t v10 = sub_1C3FFFA80((uint64_t)v7, v66);
  if (v2)
  {
    swift_release();
    sub_1C413BE08(a1, type metadata accessor for Proto_RetainCounts);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v62 = v9;
    uint64_t v11 = *(int *)(v5 + 20);
    uint64_t v12 = *(void *)(a1 + v11);
    uint64_t v13 = (uint64_t *)(v12
                    + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__referenceKeys);
    uint64_t v14 = v10;
    swift_beginAccess();
    uint64_t v15 = *v13;
    uint64_t v16 = (uint64_t *)(v12
                    + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__referenceRetainCounts);
    swift_beginAccess();
    uint64_t v17 = *v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v18 = (void *)sub_1C413A008(v15, v17, sub_1C413BC58, v14);
    uint64_t v56 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v18[2])
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBA220);
      uint64_t v19 = sub_1C4497FD8();
    }
    else
    {
      uint64_t v19 = MEMORY[0x1E4FBC868];
    }
    v65[0] = v19;
    sub_1C413AFB8(v18, 1, v65);
    uint64_t v61 = a2;
    uint64_t v54 = 0;
    swift_bridgeObjectRelease();
    uint64_t v53 = v65[0];
    uint64_t v55 = a1;
    uint64_t v21 = *(void *)(a1 + v11);
    unint64_t v22 = (uint64_t *)(v21
                    + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assetRetainCounts);
    swift_beginAccess();
    uint64_t v62 = v22;
    int64_t v23 = *(void *)(*v22 + 16);
    uint64_t v24 = sub_1C3FF13E0(0, v23, 0, MEMORY[0x1E4FBC860]);
    int64_t v60 = v23;
    if (v23)
    {
      uint64_t v25 = (uint64_t *)(v21
                      + OBJC_IVAR____TtCV9Coherence18Proto_RetainCountsP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assetDigests);
      uint64_t result = swift_beginAccess();
      uint64_t v26 = 0;
      while (v26 != 0x7FFFFFFFFFFFFFE0)
      {
        if (v26 + 32 <= v26) {
          goto LABEL_26;
        }
        uint64_t v27 = *v25;
        unint64_t v28 = v25[1];
        sub_1C3F7E324(*v25, v28);
        uint64_t v29 = sub_1C4496528();
        unint64_t v31 = v30;
        sub_1C3F7E2CC(v27, v28);
        uint64_t result = sub_1C3FF335C(v29, v31);
        uint64_t v32 = result;
        uint64_t v34 = v33;
        unint64_t v36 = v24[2];
        unint64_t v35 = v24[3];
        if (v36 >= v35 >> 1)
        {
          uint64_t result = (uint64_t)sub_1C3FF13E0((void *)(v35 > 1), v36 + 1, 1, v24);
          uint64_t v24 = (void *)result;
        }
        v24[2] = v36 + 1;
        uint64_t v37 = &v24[2 * v36];
        v37[4] = v32;
        v37[5] = v34;
        v26 += 32;
        if (!--v23) {
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
    }
    else
    {
LABEL_13:
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DBC0);
      sub_1C4496F18();
      uint64_t v38 = *v62;
      int64_t v60 = v24[2];
      uint64_t v52 = v24;
      if (v60)
      {
        uint64_t v39 = *(void *)(v38 + 16);
        unint64_t v40 = v67;
        uint64_t v58 = v38 + 32;
        uint64_t v59 = v39;
        uint64_t result = swift_bridgeObjectRetain();
        unint64_t v41 = 0;
        uint64_t v42 = v24 + 5;
        uint64_t v57 = v38;
        while (v59 != v41)
        {
          if (v41 >= *(void *)(v38 + 16)) {
            goto LABEL_27;
          }
          uint64_t v44 = *(v42 - 1);
          unint64_t v45 = *v42;
          uint64_t v62 = *(uint64_t **)(v58 + 8 * v41);
          sub_1C3F7E324(v44, v45);
          sub_1C43C63D4(v44, v45, &v64);
          uint64_t v46 = v64;
          uint64_t v47 = *(void *)(v64 + 16);
          unint64_t v48 = *(void *)(v64 + 24);
          if (*(void *)(v40 + 16))
          {
            swift_retain();
            sub_1C3F7E324(v47, v48);
            uint64_t v49 = sub_1C4061A50(v47, v48);
            if (v50)
            {
              uint64_t v51 = *(void *)(*(void *)(v40 + 56) + 16 * v49);
              swift_retain();
              sub_1C3F7E2CC(v47, v48);
              swift_release();
              swift_release();
              if (v51)
              {
                __break(1u);
                goto LABEL_23;
              }
            }
            else
            {
              sub_1C3F7E2CC(v47, v48);
              swift_release();
            }
          }
          ++v41;
          v42 += 2;
          swift_retain();
          sub_1C3F7E324(v47, v48);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v63 = v40;
          sub_1C4420F5C(v46, (uint64_t)v62, v47, v48, isUniquelyReferenced_nonNull_native);
          unint64_t v40 = v63;
          unint64_t v67 = v63;
          swift_bridgeObjectRelease();
          sub_1C3F7E2CC(v47, v48);
          sub_1C3F7E2CC(v44, v45);
          uint64_t result = swift_release();
          uint64_t v38 = v57;
          if (v60 == v41) {
            break;
          }
        }
      }
      else
      {
LABEL_23:
        swift_bridgeObjectRetain();
      }
      swift_release();
      swift_release();
      sub_1C413BE08(v55, type metadata accessor for Proto_RetainCounts);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v53;
    }
  }
  return result;
}

uint64_t sub_1C413BA08(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1C44968B8();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v8 = type metadata accessor for Proto_RetainCounts(0);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v15 - v12;
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  sub_1C3F7E324(a1, a2);
  sub_1C44968A8();
  sub_1C413BC10(&qword_1EA39B6F0, 255, (void (*)(uint64_t))type metadata accessor for Proto_RetainCounts);
  sub_1C4496A98();
  if (v3)
  {
    swift_release();
    sub_1C3F7E2CC(a1, a2);
  }
  else
  {
    sub_1C413BC74((uint64_t)v13, (uint64_t)v11, type metadata accessor for Proto_RetainCounts);
    a3 = sub_1C413B3C8((uint64_t)v11, a3);
    sub_1C3F7E2CC(a1, a2);
    sub_1C413BE08((uint64_t)v13, type metadata accessor for Proto_RetainCounts);
  }
  return a3;
}

uint64_t sub_1C413BC10(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C413BC58(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1C413A68C(a1, a2, a3);
}

uint64_t sub_1C413BC74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C413BCDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_KeyPath(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C413BD40(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DBC8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C413BDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DBC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C413BE08(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C413BE68(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1C4497C48();
    type metadata accessor for AnyReference();
    sub_1C413FBE4();
    uint64_t result = sub_1C4497728();
    uint64_t v1 = v25;
    uint64_t v24 = v26;
    uint64_t v3 = v27;
    uint64_t v4 = v28;
    unint64_t v5 = v29;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  int64_t v23 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v10 = v4;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!sub_1C4497CB8()) {
      goto LABEL_38;
    }
    type metadata accessor for AnyReference();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v13 = v30;
    uint64_t v14 = swift_unknownObjectRelease();
    if (!v30) {
      goto LABEL_38;
    }
LABEL_31:
    if ((*(uint64_t (**)(uint64_t))(*v13 + 128))(v14))
    {
      unint64_t v18 = v13[3];
      uint64_t v22 = v13[2];
      sub_1C3F7E324(v22, v18);
      swift_release();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1C3FF12A8(0, v23[2] + 1, 1, v23);
        int64_t v23 = (void *)result;
      }
      unint64_t v20 = v23[2];
      unint64_t v19 = v23[3];
      if (v20 >= v19 >> 1)
      {
        uint64_t result = (uint64_t)sub_1C3FF12A8((void *)(v19 > 1), v20 + 1, 1, v23);
        int64_t v23 = (void *)result;
      }
      void v23[2] = v20 + 1;
      uint64_t v21 = &v23[2 * v20];
      v21[4] = v22;
      v21[5] = v18;
    }
    else
    {
      uint64_t result = swift_release();
    }
  }
  if (v5)
  {
    unint64_t v11 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v12 = v11 | (v4 << 6);
LABEL_30:
    uint64_t v13 = *(void **)(*(void *)(v1 + 48) + 8 * v12);
    uint64_t v14 = swift_retain();
    if (!v13) {
      goto LABEL_38;
    }
    goto LABEL_31;
  }
  int64_t v15 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v15 >= v9) {
      goto LABEL_38;
    }
    unint64_t v16 = *(void *)(v24 + 8 * v15);
    ++v4;
    if (!v16)
    {
      uint64_t v4 = v10 + 2;
      if (v10 + 2 >= v9) {
        goto LABEL_38;
      }
      unint64_t v16 = *(void *)(v24 + 8 * v4);
      if (!v16)
      {
        uint64_t v4 = v10 + 3;
        if (v10 + 3 >= v9) {
          goto LABEL_38;
        }
        unint64_t v16 = *(void *)(v24 + 8 * v4);
        if (!v16)
        {
          uint64_t v4 = v10 + 4;
          if (v10 + 4 >= v9) {
            goto LABEL_38;
          }
          unint64_t v16 = *(void *)(v24 + 8 * v4);
          if (!v16)
          {
            uint64_t v4 = v10 + 5;
            if (v10 + 5 >= v9) {
              goto LABEL_38;
            }
            unint64_t v16 = *(void *)(v24 + 8 * v4);
            if (!v16)
            {
              uint64_t v17 = v10 + 6;
              while (v9 != v17)
              {
                unint64_t v16 = *(void *)(v24 + 8 * v17++);
                if (v16)
                {
                  uint64_t v4 = v17 - 1;
                  goto LABEL_29;
                }
              }
LABEL_38:
              sub_1C3F7FCE8();
              return (uint64_t)v23;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v5 = (v16 - 1) & v16;
    unint64_t v12 = __clz(__rbit64(v16)) + (v4 << 6);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C413C1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v68 = sub_1C413F850(v8);
  uint64_t v67 = a1;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_1C411D8F0(v9);
  if (!v10[2])
  {
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v68;
  }
  uint64_t v56 = v2;
  uint64_t v11 = a2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  uint64_t result = swift_beginAccess();
  unint64_t v13 = 0;
  unint64_t v14 = v10[2];
  uint64_t v57 = v7;
  uint64_t v58 = v5;
  uint64_t v59 = v11;
  while (1)
  {
    if (v13 >= v14)
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    uint64_t v17 = &v10[2 * v13];
    uint64_t v18 = v17[4];
    unint64_t v19 = v17[5];
    sub_1C414028C(v11, (uint64_t)v7);
    uint64_t v20 = *(void *)&v7[*(int *)(v5 + 20)];
    uint64_t v21 = *(void *)(v20 + 16);
    sub_1C3F7E324(v18, v19);
    if (v21)
    {
      uint64_t v22 = sub_1C3F850CC(v18, v19);
      if (v23) {
        break;
      }
    }
    sub_1C41402F0((uint64_t)v7);
    uint64_t v15 = v18;
    unint64_t v16 = v19;
LABEL_4:
    ++v13;
    uint64_t result = sub_1C3F7E2CC(v15, v16);
    unint64_t v14 = v10[2];
    if (v13 >= v14) {
      goto LABEL_39;
    }
  }
  unint64_t v60 = v19;
  uint64_t v61 = v18;
  uint64_t v62 = v10;
  uint64_t v24 = *(void *)(*(void *)(v20 + 56) + 48 * v22);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1C41402F0((uint64_t)v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v24)
  {
LABEL_38:
    uint64_t v15 = v61;
    uint64_t v10 = v62;
    uint64_t v11 = v59;
    unint64_t v16 = v60;
    goto LABEL_4;
  }
  uint64_t v25 = type metadata accessor for RetainVisitor();
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = MEMORY[0x1E4FBC860];
  unint64_t v28 = sub_1C3F7E4A4(MEMORY[0x1E4FBC860]);
  unint64_t v29 = sub_1C3F7E37C(v27);
  *(void *)(v26 + 16) = v28;
  *(void *)(v26 + 24) = v29;
  uint64_t v65 = v25;
  uint64_t v66 = &off_1F1F982A0;
  uint64_t v63 = v26;
  unint64_t v30 = *(void (**)(uint64_t *))(*(void *)v24 + 120);
  swift_retain();
  v30(&v63);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
  swift_release();
  swift_beginAccess();
  uint64_t v31 = *(void *)(v26 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v33 = v31 + 64;
  uint64_t v32 = *(void *)(v31 + 64);
  uint64_t v34 = 1 << *(unsigned char *)(v31 + 32);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v35 = 0;
  if (v34 < 64) {
    uint64_t v36 = ~(-1 << v34);
  }
  else {
    uint64_t v36 = -1;
  }
  unint64_t v37 = v36 & v32;
  int64_t v38 = (unint64_t)(v34 + 63) >> 6;
  while (1)
  {
    if (v37)
    {
      unint64_t v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      unint64_t v40 = v39 | (v35 << 6);
      goto LABEL_14;
    }
    int64_t v45 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v45 >= v38) {
      goto LABEL_37;
    }
    unint64_t v46 = *(void *)(v33 + 8 * v45);
    ++v35;
    if (!v46)
    {
      int64_t v35 = v45 + 1;
      if (v45 + 1 >= v38) {
        goto LABEL_37;
      }
      unint64_t v46 = *(void *)(v33 + 8 * v35);
      if (!v46)
      {
        int64_t v35 = v45 + 2;
        if (v45 + 2 >= v38) {
          goto LABEL_37;
        }
        unint64_t v46 = *(void *)(v33 + 8 * v35);
        if (!v46)
        {
          int64_t v35 = v45 + 3;
          if (v45 + 3 >= v38) {
            goto LABEL_37;
          }
          unint64_t v46 = *(void *)(v33 + 8 * v35);
          if (!v46)
          {
            int64_t v47 = v45 + 4;
            if (v47 >= v38)
            {
LABEL_37:
              swift_release();
              uint64_t v7 = v57;
              uint64_t v5 = v58;
              goto LABEL_38;
            }
            unint64_t v46 = *(void *)(v33 + 8 * v47);
            int64_t v35 = v47;
            if (!v46) {
              break;
            }
          }
        }
      }
    }
LABEL_31:
    unint64_t v37 = (v46 - 1) & v46;
    unint64_t v40 = __clz(__rbit64(v46)) + (v35 << 6);
LABEL_14:
    unint64_t v41 = (uint64_t *)(*(void *)(v31 + 48) + 16 * v40);
    uint64_t v43 = *v41;
    unint64_t v42 = v41[1];
    sub_1C3F7E324(*v41, v42);
    sub_1C3F7E324(v43, v42);
    char v44 = sub_1C3F81BF8(&v63, v43, v42);
    sub_1C3F7E2CC(v63, v64);
    if (v44)
    {
      sub_1C3F7E324(v43, v42);
      sub_1C3F81BF8(&v63, v43, v42);
      sub_1C3F7E2CC(v63, v64);
      sub_1C3F7E324(v43, v42);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v62 = sub_1C3FF12A8(0, v62[2] + 1, 1, v62);
      }
      unint64_t v49 = v62[2];
      unint64_t v48 = v62[3];
      unint64_t v50 = v49 + 1;
      if (v49 >= v48 >> 1)
      {
        unint64_t v55 = v49 + 1;
        uint64_t v53 = sub_1C3FF12A8((void *)(v48 > 1), v49 + 1, 1, v62);
        unint64_t v50 = v55;
        uint64_t v62 = v53;
      }
      uint64_t v51 = v62;
      v62[2] = v50;
      uint64_t v52 = &v51[2 * v49];
      v52[4] = v43;
      v52[5] = v42;
    }
    uint64_t result = sub_1C3F7E2CC(v43, v42);
  }
  while (1)
  {
    int64_t v35 = v47 + 1;
    if (__OFADD__(v47, 1)) {
      break;
    }
    if (v35 >= v38) {
      goto LABEL_37;
    }
    unint64_t v46 = *(void *)(v33 + 8 * v35);
    ++v47;
    if (v46) {
      goto LABEL_31;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1C413C6A8(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = swift_bridgeObjectRetain();
  unint64_t v49 = a2;
  unint64_t v10 = sub_1C413FE90(v9, a2);
  uint64_t v11 = v5;
  unint64_t v53 = v10;
  uint64_t v52 = a1;
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t result = (uint64_t)sub_1C411D8F0(v12);
  unint64_t v48 = (void *)result;
  unint64_t v14 = *(void *)(result + 16);
  if (!v14) {
    goto LABEL_38;
  }
  unint64_t v10 = 0;
  uint64_t v43 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a5 + 88);
  uint64_t v42 = a5;
  while (1)
  {
    if (v10 >= v14) {
      goto LABEL_42;
    }
    uint64_t v17 = &v48[2 * v10];
    uint64_t v15 = v17[4];
    unint64_t v16 = v17[5];
    uint64_t v50 = v15;
    unint64_t v51 = v16;
    sub_1C3F7E324(v15, v16);
    uint64_t v18 = v11;
    uint64_t v19 = v43(&v50, a4, a5);
    if (v11)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1C3F7E2CC(v15, v16);
      swift_bridgeObjectRelease();
      return v10;
    }
    uint64_t v20 = v19;
    if (v19) {
      break;
    }
LABEL_4:
    ++v10;
    uint64_t result = sub_1C3F7E2CC(v15, v16);
    unint64_t v14 = v48[2];
    if (v10 >= v14)
    {
      unint64_t v10 = v53;
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
  }
  unint64_t v45 = v16;
  uint64_t v46 = v15;
  unint64_t v47 = v10;
  uint64_t v22 = v19 + 64;
  uint64_t v21 = *(void *)(v19 + 64);
  uint64_t v23 = 1 << *(unsigned char *)(v19 + 32);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v24 = 0;
  if (v23 < 64) {
    uint64_t v25 = ~(-1 << v23);
  }
  else {
    uint64_t v25 = -1;
  }
  unint64_t v26 = v25 & v21;
  int64_t v27 = (unint64_t)(v23 + 63) >> 6;
  while (v26)
  {
    unint64_t v29 = __clz(__rbit64(v26));
    v26 &= v26 - 1;
    unint64_t v30 = v29 | (v24 << 6);
LABEL_30:
    uint64_t v34 = (uint64_t *)(*(void *)(v20 + 48) + 16 * v30);
    uint64_t v36 = *v34;
    unint64_t v35 = v34[1];
    sub_1C3F7E324(*v34, v35);
    sub_1C3F7E324(v36, v35);
    char v37 = sub_1C3F81BF8(&v50, v36, v35);
    sub_1C3F7E2CC(v50, v51);
    if (v37)
    {
      uint64_t v50 = v36;
      unint64_t v51 = v35;
      if (v49(&v50))
      {
        sub_1C3F7E324(v36, v35);
        sub_1C3F81BF8(&v50, v36, v35);
        sub_1C3F7E2CC(v50, v51);
        sub_1C3F7E324(v36, v35);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v48 = sub_1C3FF12A8(0, v48[2] + 1, 1, v48);
        }
        unint64_t v39 = v48[2];
        unint64_t v38 = v48[3];
        unint64_t v40 = v39 + 1;
        if (v39 >= v38 >> 1)
        {
          unint64_t v41 = sub_1C3FF12A8((void *)(v38 > 1), v39 + 1, 1, v48);
          unint64_t v40 = v39 + 1;
          unint64_t v48 = v41;
        }
        v48[2] = v40;
        unint64_t v28 = &v48[2 * v39];
        v28[4] = v36;
        v28[5] = v35;
      }
    }
    uint64_t result = sub_1C3F7E2CC(v36, v35);
  }
  int64_t v31 = v24 + 1;
  if (__OFADD__(v24, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v31 >= v27) {
    goto LABEL_3;
  }
  unint64_t v32 = *(void *)(v22 + 8 * v31);
  ++v24;
  if (v32) {
    goto LABEL_29;
  }
  int64_t v24 = v31 + 1;
  if (v31 + 1 >= v27) {
    goto LABEL_3;
  }
  unint64_t v32 = *(void *)(v22 + 8 * v24);
  if (v32) {
    goto LABEL_29;
  }
  int64_t v24 = v31 + 2;
  if (v31 + 2 >= v27) {
    goto LABEL_3;
  }
  unint64_t v32 = *(void *)(v22 + 8 * v24);
  if (v32)
  {
LABEL_29:
    unint64_t v26 = (v32 - 1) & v32;
    unint64_t v30 = __clz(__rbit64(v32)) + (v24 << 6);
    goto LABEL_30;
  }
  int64_t v33 = v31 + 3;
  if (v33 >= v27)
  {
LABEL_3:
    swift_release();
    unint64_t v10 = v47;
    uint64_t v11 = v18;
    a5 = v42;
    unint64_t v16 = v45;
    uint64_t v15 = v46;
    goto LABEL_4;
  }
  unint64_t v32 = *(void *)(v22 + 8 * v33);
  if (v32)
  {
    int64_t v24 = v33;
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v24 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v24 >= v27) {
      goto LABEL_3;
    }
    unint64_t v32 = *(void *)(v22 + 8 * v24);
    ++v33;
    if (v32) {
      goto LABEL_29;
    }
  }
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1C413CA44(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v22)(uint64_t *__return_ptr, uint64_t, uint64_t);
  void (*v23)(uint64_t *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  int64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t *);
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t *__return_ptr, uint64_t *, void *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  void v94[2];
  void (*v95)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  int64_t AssociatedTypeWitness;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t AssociatedConformanceWitness;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(void);
  uint64_t v124;
  uint64_t v125;
  void v126[2];
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int64_t v139;
  unint64_t v140;
  uint64_t v141;

  id v125 = a5;
  uint64_t v104 = a4;
  uint64_t v116 = a3;
  uint64_t v123 = a2;
  uint64_t v103 = sub_1C4496678();
  int v102 = *(void *)(v103 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v103);
  uint64_t v101 = (char *)v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v100 = (char *)v94 - v15;
  swift_getAssociatedTypeWitness();
  uint64_t v122 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v108 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v113 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v105 = (char *)v94 - v16;
  uint64_t v109 = swift_checkMetadataState();
  uint64_t v110 = *(void *)(v109 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v109);
  uint64_t v119 = (char *)v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v94 - v19;
  unint64_t v141 = MEMORY[0x1E4FBC870];
  uint64_t v134 = MEMORY[0x1E4FBC870];
  uint64_t v135 = MEMORY[0x1E4FBC870];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a8 + 24))(&v129, a6, a8);
  uint64_t v111 = v129;
  uint64_t v112 = v130;
  uint64_t v115 = v8;
  uint64_t v132 = v8;
  int v118 = a7;
  uint64_t v21 = *(void *)(a7 + 16);
  uint64_t v22 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v21 + 24);
  v22(&v129, v125, v21);
  uint64_t v132 = v129;
  uint64_t v133 = v130;
  uint64_t v23 = *(void (**)(uint64_t *, uint64_t, uint64_t))(a8 + 56);
  uint64_t v120 = a1;
  int64_t v24 = v124;
  v23(&v132, v122, a8);
  uint64_t v124 = v24;
  if (!v24)
  {
    unint64_t v95 = v22;
    uint64_t v96 = v21 + 24;
    uint64_t v121 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v26 = v109;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 40))(v20, v109, AssociatedConformanceWitness, v122, a8);
    int64_t v27 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
    uint64_t v98 = v20;
    v94[1] = v110 + 16;
    v94[0] = v27;
    v27(v119, v20, v26);
    unint64_t v28 = v105;
    sub_1C44972B8();
    unint64_t v29 = AssociatedTypeWitness;
    unint64_t v30 = v28;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    sub_1C4497B58();
    int64_t v31 = v130;
    uint64_t v114 = a8;
    if (v130 >> 60 == 15)
    {
      unint64_t v32 = v118;
      int64_t v33 = v124;
    }
    else
    {
      unint64_t v39 = v129;
      unint64_t v32 = v118;
      uint64_t v107 = v118 + 56;
      uint64_t v99 = a8 + 48;
      int64_t v97 = v118 + 48;
      unint64_t v40 = (uint64_t (*)(uint64_t *))v123;
      int64_t v33 = v124;
      do
      {
        if (v40)
        {
          uint64_t v129 = v39;
          uint64_t v130 = v31;
          swift_retain();
          unint64_t v41 = v40(&v129);
          sub_1C3F7E5BC((uint64_t)v40);
          if ((v41 & 1) == 0) {
            goto LABEL_10;
          }
        }
        sub_1C3F7E324(v39, v31);
        uint64_t v42 = sub_1C3F81BF8(&v129, v39, v31);
        sub_1C3F7E2CC(v129, v130);
        if ((v42 & 1) == 0) {
          goto LABEL_10;
        }
        uint64_t v129 = v39;
        uint64_t v130 = v31;
        (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(v32 + 56))(&v132, &v129, v125, v32);
        if (v33)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, int64_t))(v113 + 8))(v30, v29);
          (*(void (**)(char *, uint64_t))(v110 + 8))(v98, v109);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return sub_1C3F6C6F0(v39, v31);
        }
        uint64_t v43 = v132;
        if (v132)
        {
          uint64_t v132 = v39;
          uint64_t v133 = v31;
          v126[0] = v43;
          char v44 = v114;
          unint64_t v45 = *(void (**)(uint64_t *__return_ptr, uint64_t *, void *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v114 + 48);
          swift_retain();
          v45(&v129, &v132, v126, &type metadata for AnyCRDT, &off_1F1F9CB20, v122, v44);
          int64_t v33 = 0;
          swift_release();
          uint64_t v46 = v129;
          if (v129)
          {
            unint64_t v47 = v130;
            uint64_t v124 = v131;
            sub_1C3F7E324(v39, v31);
            sub_1C3F81BF8(&v129, v39, v31);
            sub_1C3F7E2CC(v129, v130);
            uint64_t v132 = v39;
            uint64_t v133 = v31;
            uint64_t AssociatedTypeWitness = v47;
            v126[0] = v47;
            v126[1] = v124;
            unint64_t v127 = v46;
            (*(void (**)(uint64_t *, uint64_t *, uint64_t *, uint64_t *, void *, uint64_t))(v118 + 48))(&v128, &v129, &v132, &v127, v126, v125);
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_release();
          sub_1C3F6C6F0(v39, v31);
          unint64_t v32 = v118;
        }
        else
        {
LABEL_10:
          sub_1C3F6C6F0(v39, v31);
        }
        sub_1C4497B58();
        unint64_t v39 = v129;
        int64_t v31 = v130;
        unint64_t v40 = (uint64_t (*)(uint64_t *))v123;
      }
      while (v130 >> 60 != 15);
    }
    (*(void (**)(char *, int64_t))(v113 + 8))(v30, v29);
    swift_bridgeObjectRelease();
    uint64_t v34 = v104;
    if (v104)
    {
      unint64_t v35 = v115;
      uint64_t v124 = v33;
      if ((v104 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        sub_1C4497C48();
        type metadata accessor for AnyReference();
        sub_1C413FBE4();
        uint64_t result = sub_1C4497728();
        uint64_t v34 = v136;
        uint64_t v113 = v137;
        uint64_t v36 = v138;
        char v37 = v139;
        unint64_t v38 = v140;
      }
      else
      {
        uint64_t v52 = -1 << *(unsigned char *)(v104 + 32);
        unint64_t v53 = *(void *)(v104 + 56);
        uint64_t v113 = v104 + 56;
        uint64_t v54 = ~v52;
        unint64_t v55 = -v52;
        if (v55 < 64) {
          uint64_t v56 = ~(-1 << v55);
        }
        else {
          uint64_t v56 = -1;
        }
        unint64_t v38 = v56 & v53;
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v36 = v54;
        char v37 = 0;
      }
      unint64_t v51 = v119;
      uint64_t v105 = (char *)(v34 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v99 = v36;
      uint64_t AssociatedTypeWitness = (unint64_t)(v36 + 64) >> 6;
      uint64_t v57 = v121;
      uint64_t v116 = v121 + 64;
      uint64_t v107 = v118 + 64;
      uint64_t v104 = MEMORY[0x1E4FBC838] + 8;
      while (1)
      {
        uint64_t v123 = (uint64_t (*)(void))v37;
        uint64_t AssociatedConformanceWitness = v38;
        if (v34 < 0)
        {
          unint64_t v60 = sub_1C4497CB8();
          if (!v60)
          {
            int64_t v33 = v124;
            uint64_t v50 = v120;
            goto LABEL_60;
          }
          uint64_t v132 = v60;
          type metadata accessor for AnyReference();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          uint64_t v61 = v129;
          swift_unknownObjectRelease();
          uint64_t v57 = v121;
          if (!v61) {
            goto LABEL_54;
          }
        }
        else
        {
          if (v38)
          {
            uint64_t v58 = __clz(__rbit64(v38));
            v38 &= v38 - 1;
            uint64_t v59 = v58 | (v37 << 6);
          }
          else
          {
            if (__OFADD__(v37++, 1))
            {
              __break(1u);
              return result;
            }
            if (v37 >= AssociatedTypeWitness)
            {
              int64_t v33 = v124;
              uint64_t v50 = v120;
              goto LABEL_60;
            }
            uint64_t v63 = *(void *)(v113 + 8 * v37);
            uint64_t v50 = v120;
            if (!v63)
            {
              unint64_t v64 = v37 + 1;
              if (v37 + 1 >= AssociatedTypeWitness) {
                goto LABEL_59;
              }
              uint64_t v63 = *(void *)(v113 + 8 * v64);
              if (v63) {
                goto LABEL_41;
              }
              unint64_t v64 = v37 + 2;
              if (v37 + 2 >= AssociatedTypeWitness) {
                goto LABEL_59;
              }
              uint64_t v63 = *(void *)(v113 + 8 * v64);
              if (v63)
              {
LABEL_41:
                char v37 = v64;
              }
              else
              {
                v37 += 3;
                if (v37 >= AssociatedTypeWitness)
                {
LABEL_59:
                  int64_t v33 = v124;
                  goto LABEL_60;
                }
                uint64_t v63 = *(void *)(v113 + 8 * v37);
                if (!v63)
                {
                  unint64_t v71 = (char *)v123 + 5;
                  while ((char *)AssociatedTypeWitness != v71)
                  {
                    uint64_t v63 = *(void *)(v113 + 8 * (void)v71++);
                    if (v63)
                    {
                      char v37 = (int64_t)(v71 - 1);
                      goto LABEL_42;
                    }
                  }
                  int64_t v33 = v124;
                  goto LABEL_60;
                }
              }
LABEL_42:
              uint64_t v57 = v121;
            }
            unint64_t v38 = (v63 - 1) & v63;
            uint64_t v59 = __clz(__rbit64(v63)) + (v37 << 6);
          }
          uint64_t v61 = *(void *)(*(void *)(v34 + 48) + 8 * v59);
          swift_retain();
          if (!v61)
          {
LABEL_54:
            int64_t v33 = v124;
            uint64_t v50 = v120;
            unint64_t v51 = v119;
LABEL_60:
            sub_1C3F7FCE8();
            unint64_t v32 = v118;
            unint64_t v48 = v125;
            unint64_t v49 = v122;
            goto LABEL_61;
          }
        }
        uint64_t v65 = v34;
        uint64_t v132 = v35;
        uint64_t v66 = v35;
        uint64_t v68 = *(void *)(v61 + 16);
        uint64_t v67 = *(void *)(v61 + 24);
        uint64_t v129 = v68;
        uint64_t v130 = v67;
        uint64_t v69 = v125;
        if ((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v57 + 64))(&v129, v125, v57))
        {
          uint64_t result = swift_release();
          unint64_t v35 = v66;
        }
        else
        {
          sub_1C3F7E324(v68, v67);
          sub_1C3F81BF8(&v129, v68, v67);
          sub_1C3F7E2CC(v129, v130);
          uint64_t v70 = v124;
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v118 + 64))(&v129, v61, v120, v122, v114, v69);
          uint64_t v124 = v70;
          if (v70)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1C3F7FCE8();
            (*(void (**)(char *, uint64_t))(v110 + 8))(v98, v109);
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          unint64_t v35 = v66;
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
        }
        uint64_t v57 = v121;
        unint64_t v51 = v119;
        uint64_t v34 = v65;
      }
    }
    unint64_t v48 = v125;
    unint64_t v49 = v122;
    uint64_t v50 = v120;
    unint64_t v35 = v115;
    unint64_t v51 = v119;
LABEL_61:
    uint64_t v72 = swift_bridgeObjectRetain();
    uint64_t v73 = sub_1C413EB88(v72, v50, v48, v49, v32, v114);
    if (v33)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v110 + 8))(v98, v109);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v75 = v73;
    uint64_t v76 = v74;
    swift_bridgeObjectRelease();
    sub_1C4059A80(v75);
    sub_1C4059A80(v76);
    uint64_t v132 = v35;
    v95(&v129, v48, v121);
    uint64_t v77 = v129;
    if (sub_1C4112134(v130, v112))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v78 = v114;
    }
    else
    {
      BOOL v79 = sub_1C4112134(v77, v111);
      swift_bridgeObjectRelease();
      uint64_t v80 = swift_bridgeObjectRelease();
      unint64_t v81 = v110;
      uint64_t v78 = v114;
      if ((v79 & 1) == 0)
      {
        uint64_t v84 = v111;
LABEL_68:
        MEMORY[0x1F4188790](v80);
        uint64_t v85 = v112;
        v94[-2] = v84;
        v94[-1] = v85;
        uint64_t v86 = v125;
        (*(void (**)(uint64_t (*)()))(v32 + 24))(sub_1C413FBA4);
        uint64_t v132 = v35;
        v95(&v129, v86, v121);
        uint64_t v87 = v129;
        if (sub_1C4113F94(v130, v85))
        {
          uint64_t v88 = sub_1C4113F94(v87, v111);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v88)
          {
            uint64_t v89 = v100;
            (*(void (**)(uint64_t))(v114 + 32))(v122);
LABEL_73:
            uint64_t v90 = v125;
            (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v89, v125, v32);
            (*(void (**)(char *, uint64_t))(v102 + 8))(v89, v103);
            uint64_t v91 = v141;
            if (*(void *)(v141 + 16))
            {
              uint64_t v92 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 40);
              unint64_t v93 = swift_bridgeObjectRetain();
              v92(v93, v90, v32);
              swift_bridgeObjectRelease();
              unint64_t v81 = v110;
            }
            sub_1C4059A80(v91);
            (*(void (**)(uint64_t, uint64_t))(v32 + 104))(v90, v32);
            (*(void (**)(char *, uint64_t))(v81 + 8))(v98, v109);
            return v135;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v89 = v101;
        sub_1C4496668();
        goto LABEL_73;
      }
    }
    uint64_t v129 = v111;
    uint64_t v130 = v112;
    ((void (*)(char *, char *, uint64_t))v94[0])(v51, v98, v109);
    sub_1C3F782A0();
    char v82 = sub_1C4497758();
    uint64_t v83 = sub_1C413F54C(&v129, v82, v120, v125, v122, v32, v78);
    swift_bridgeObjectRelease();
    uint64_t v80 = sub_1C4059A80(v83);
    uint64_t v84 = v111;
    unint64_t v81 = v110;
    goto LABEL_68;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C413DDA4(unint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8 = sub_1C3F7E37C(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v65 = v8;
  sub_1C3F7FAA0(a2, (uint64_t)sub_1C413B380, 0, isUniquelyReferenced_nonNull_native, &v65);
  if (v5) {
    goto LABEL_78;
  }
  unint64_t v10 = v65;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 16))
  {
LABEL_37:
    int64_t v33 = 0;
    unint64_t v61 = v10 + 64;
    uint64_t v34 = 1 << *(unsigned char *)(v10 + 32);
    uint64_t v35 = -1;
    if (v34 < 64) {
      uint64_t v35 = ~(-1 << v34);
    }
    unint64_t v36 = v35 & *(void *)(v10 + 64);
    int64_t v67 = (unint64_t)(v34 + 63) >> 6;
    uint64_t v54 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v55 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v57 = v10;
    while (1)
    {
      if (v36)
      {
        unint64_t v37 = __clz(__rbit64(v36));
        v36 &= v36 - 1;
        unint64_t v38 = v37 | (v33 << 6);
      }
      else
      {
        BOOL v20 = __OFADD__(v33++, 1);
        if (v20) {
          goto LABEL_76;
        }
        if (v33 >= v67)
        {
LABEL_73:
          swift_release();
          return (uint64_t)v54;
        }
        unint64_t v39 = *(void *)(v61 + 8 * v33);
        if (!v39)
        {
          int64_t v40 = v33 + 1;
          if (v33 + 1 >= v67) {
            goto LABEL_73;
          }
          unint64_t v39 = *(void *)(v61 + 8 * v40);
          if (!v39)
          {
            int64_t v40 = v33 + 2;
            if (v33 + 2 >= v67) {
              goto LABEL_73;
            }
            unint64_t v39 = *(void *)(v61 + 8 * v40);
            if (!v39)
            {
              int64_t v40 = v33 + 3;
              if (v33 + 3 >= v67) {
                goto LABEL_73;
              }
              unint64_t v39 = *(void *)(v61 + 8 * v40);
              if (!v39)
              {
                while (1)
                {
                  int64_t v33 = v40 + 1;
                  if (__OFADD__(v40, 1)) {
                    goto LABEL_77;
                  }
                  if (v33 >= v67) {
                    goto LABEL_73;
                  }
                  unint64_t v39 = *(void *)(v61 + 8 * v33);
                  ++v40;
                  if (v39) {
                    goto LABEL_54;
                  }
                }
              }
            }
          }
          int64_t v33 = v40;
        }
LABEL_54:
        unint64_t v36 = (v39 - 1) & v39;
        unint64_t v38 = __clz(__rbit64(v39)) + (v33 << 6);
      }
      uint64_t v41 = 16 * v38;
      uint64_t v42 = (unint64_t *)(*(void *)(v10 + 56) + v41);
      unint64_t v43 = v42[1];
      if (v43)
      {
        long long v63 = *(_OWORD *)(*(void *)(v10 + 48) + v41);
        unint64_t v44 = *v42;
        unint64_t v65 = *v42;
        unint64_t v45 = *(uint64_t (**)(unint64_t *, unint64_t, uint64_t, uint64_t))(a5 + 16);
        swift_retain_n();
        sub_1C3F7E324(v63, *((unint64_t *)&v63 + 1));
        char v46 = v45(&v65, v43, a4, a5);
        swift_release();
        if (v46)
        {
          if (v46 == 1)
          {
            sub_1C3F7E324(v63, *((unint64_t *)&v63 + 1));
            if (swift_isUniquelyReferenced_nonNull_native()) {
              unint64_t v47 = v55;
            }
            else {
              unint64_t v47 = sub_1C3FF13E0(0, v55[2] + 1, 1, v55);
            }
            unint64_t v49 = v47[2];
            unint64_t v48 = v47[3];
            if (v49 >= v48 >> 1) {
              unint64_t v47 = sub_1C3FF13E0((void *)(v48 > 1), v49 + 1, 1, v47);
            }
            v47[2] = v49 + 1;
            unint64_t v55 = v47;
            *(_OWORD *)&v47[2 * v49 + 4] = v63;
          }
        }
        else
        {
          swift_retain();
          if (swift_isUniquelyReferenced_nonNull_native()) {
            uint64_t v50 = v54;
          }
          else {
            uint64_t v50 = sub_1C3FF1870(0, v54[2] + 1, 1, v54);
          }
          unint64_t v52 = v50[2];
          unint64_t v51 = v50[3];
          if (v52 >= v51 >> 1) {
            uint64_t v50 = sub_1C3FF1870((void *)(v51 > 1), v52 + 1, 1, v50);
          }
          v50[2] = v52 + 1;
          uint64_t v54 = v50;
          v50[v52 + 4] = v44;
        }
        sub_1C3F7E2CC(v63, *((unint64_t *)&v63 + 1));
        swift_release();
        unint64_t v10 = v57;
      }
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = MEMORY[0x1E4FBC860];
  while (2)
  {
    unint64_t v56 = v10;
    unint64_t v12 = sub_1C3F7E4A4(v11);
    unint64_t v13 = sub_1C3F7E37C(v11);
    swift_bridgeObjectRelease();
    int64_t v14 = 0;
    unint64_t v65 = v12;
    unint64_t v66 = v13;
    unint64_t v60 = a1 + 64;
    uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
    if (v15 < 64) {
      uint64_t v16 = ~(-1 << v15);
    }
    else {
      uint64_t v16 = -1;
    }
    unint64_t v17 = v16 & *(void *)(a1 + 64);
    int64_t v67 = (unint64_t)(v15 + 63) >> 6;
    while (1)
    {
      if (v17)
      {
        unint64_t v18 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        unint64_t v19 = v18 | (v14 << 6);
        goto LABEL_23;
      }
      BOOL v20 = __OFADD__(v14++, 1);
      if (v20)
      {
        __break(1u);
        goto LABEL_75;
      }
      if (v14 >= v67)
      {
LABEL_33:
        unint64_t v30 = v56;
        uint64_t v11 = MEMORY[0x1E4FBC860];
        goto LABEL_35;
      }
      unint64_t v21 = *(void *)(v60 + 8 * v14);
      if (!v21) {
        break;
      }
LABEL_22:
      unint64_t v17 = (v21 - 1) & v21;
      unint64_t v19 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_23:
      uint64_t v23 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v19);
      uint64_t v24 = *v23;
      unint64_t v25 = v23[1];
      uint64_t v26 = *(void *)(*(void *)(a1 + 56) + 8 * v19);
      if ((a3 & 1) != 0 || v26)
      {
        v64[0] = *v23;
        v64[1] = v25;
        int64_t v27 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(a5 + 8);
        sub_1C3F7E324(v24, v25);
        uint64_t v28 = v27(v64, v26, a4, a5);
        if ((unint64_t)(v28 - 1) < 2)
        {
          sub_1C3F7FECC(v28);
          goto LABEL_9;
        }
        if (!v28 || v28 == 3)
        {
LABEL_9:
          sub_1C3F7E2CC(v24, v25);
        }
        else
        {
          sub_1C3F7FEDC(v28, v29);
          sub_1C3F7E2CC(v24, v25);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
    }
    int64_t v22 = v14 + 1;
    if (v14 + 1 >= v67) {
      goto LABEL_34;
    }
    unint64_t v21 = *(void *)(v60 + 8 * v22);
    if (v21) {
      goto LABEL_21;
    }
    int64_t v22 = v14 + 2;
    if (v14 + 2 >= v67) {
      goto LABEL_34;
    }
    unint64_t v21 = *(void *)(v60 + 8 * v22);
    if (v21) {
      goto LABEL_21;
    }
    int64_t v22 = v14 + 3;
    if (v14 + 3 >= v67)
    {
LABEL_34:
      unint64_t v30 = v56;
      uint64_t v11 = MEMORY[0x1E4FBC860];
LABEL_35:
      swift_release();
      uint64_t v31 = v66;
      swift_bridgeObjectRetain_n();
      char v32 = swift_isUniquelyReferenced_nonNull_native();
      v64[0] = v30;
      sub_1C3F7FAA0(v31, (uint64_t)sub_1C413B380, 0, v32, v64);
      unint64_t v10 = v64[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v65;
      if (!*(void *)(v65 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_37;
      }
      continue;
    }
    break;
  }
  unint64_t v21 = *(void *)(v60 + 8 * v22);
  if (v21)
  {
LABEL_21:
    int64_t v14 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v14 >= v67) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v60 + 8 * v14);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1C413E4B0(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v5 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if (a3) {
      goto LABEL_13;
    }
    if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
    {
      __break(1u);
    }
    else if ((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 56) >> result))
    {
      if (*(_DWORD *)(a4 + 36) == a2) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_13:
      if (sub_1C4497C68() == *(_DWORD *)(a4 + 36))
      {
        uint64_t v15 = sub_1C4497C78();
        type metadata accessor for AnyReference();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v8 = v14[0];
        swift_unknownObjectRelease();
        sub_1C44985F8();
        (*(void (**)(void *))(*(void *)v14[0] + 104))(v14);
        uint64_t v9 = sub_1C4498628();
        uint64_t v10 = -1 << *(unsigned char *)(a4 + 32);
        unint64_t v5 = v9 & ~v10;
        if ((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
        {
          uint64_t v11 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(a4 + 48) + 8 * v5) + 96);
          swift_retain();
          LOBYTE(v11) = v11(v8);
          swift_release();
          if ((v11 & 1) == 0)
          {
            uint64_t v12 = ~v10;
            do
            {
              unint64_t v5 = (v5 + 1) & v12;
              if (((*(void *)(a4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
                goto LABEL_25;
              }
              unint64_t v13 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(a4 + 48) + 8 * v5) + 96);
              swift_retain();
              LOBYTE(v13) = v13(v8);
              swift_release();
            }
            while ((v13 & 1) == 0);
          }
          swift_release();
LABEL_20:
          uint64_t v7 = *(void *)(*(void *)(a4 + 48) + 8 * v5);
          swift_retain();
          return v7;
        }
LABEL_25:
        uint64_t result = swift_release();
        __break(1u);
        goto LABEL_26;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    __break(1u);
    goto LABEL_24;
  }
  if (a3)
  {
    if (a4 < 0) {
      uint64_t v6 = a4;
    }
    else {
      uint64_t v6 = a4 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = MEMORY[0x1C8780900](result, a2, v6);
    type metadata accessor for AnyReference();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v7 = v14[0];
    swift_unknownObjectRelease();
    return v7;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1C413E764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a1;
  uint64_t v50 = MEMORY[0x1E4FBC870];
  uint64_t v6 = a1 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a1 + 56);
  int64_t v39 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  uint64_t v37 = v6;
  uint64_t v38 = result;
  while (1)
  {
    if (v9)
    {
      uint64_t v40 = (v9 - 1) & v9;
      int64_t v41 = v11;
      unint64_t v12 = __clz(__rbit64(v9)) | (v11 << 6);
    }
    else
    {
      BOOL v13 = __OFADD__(v11, 1);
      int64_t v14 = v11 + 1;
      if (v13) {
        goto LABEL_55;
      }
      if (v14 >= v39)
      {
LABEL_52:
        swift_release();
        return v50;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v14);
      if (!v15)
      {
        int64_t v16 = v14 + 1;
        if (v14 + 1 >= v39) {
          goto LABEL_52;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v14 + 2;
          if (v14 + 2 >= v39) {
            goto LABEL_52;
          }
          unint64_t v15 = *(void *)(v6 + 8 * v16);
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v14 + 3 >= v39) {
              goto LABEL_52;
            }
            unint64_t v15 = *(void *)(v6 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                int64_t v14 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_56;
                }
                if (v14 >= v39) {
                  goto LABEL_52;
                }
                unint64_t v15 = *(void *)(v6 + 8 * v14);
                ++v16;
                if (v15) {
                  goto LABEL_19;
                }
              }
            }
          }
        }
        int64_t v14 = v16;
      }
LABEL_19:
      uint64_t v40 = (v15 - 1) & v15;
      int64_t v41 = v14;
      unint64_t v12 = __clz(__rbit64(v15)) + (v14 << 6);
    }
    unint64_t v17 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v12);
    unint64_t v18 = v17[1];
    v49[0] = *v17;
    v49[1] = v18;
    unint64_t v19 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a3 + 88);
    uint64_t v42 = v49[0];
    unint64_t v43 = v18;
    sub_1C3F7E324(v49[0], v18);
    uint64_t v20 = v19(v49, a2, a3);
    uint64_t v48 = v21;
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return sub_1C3F7E2CC(v42, v43);
    }
    if (v20) {
      break;
    }
LABEL_6:
    uint64_t result = sub_1C3F7E2CC(v42, v43);
    unint64_t v9 = v40;
    int64_t v11 = v41;
  }
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v22 = 0;
  uint64_t v23 = *(void *)(v48 + 64);
  uint64_t v44 = v48 + 64;
  uint64_t v24 = 1 << *(unsigned char *)(v48 + 32);
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  else {
    uint64_t v25 = -1;
  }
  unint64_t v26 = v25 & v23;
  int64_t v45 = (unint64_t)(v24 + 63) >> 6;
  if ((v25 & v23) != 0)
  {
    do
    {
      while (1)
      {
        unint64_t v27 = __clz(__rbit64(v26));
        v26 &= v26 - 1;
        unint64_t v28 = v27 | (v22 << 6);
LABEL_40:
        uint64_t v31 = 16 * v28;
        char v32 = (uint64_t *)(*(void *)(v48 + 48) + v31);
        uint64_t v34 = *v32;
        unint64_t v33 = v32[1];
        uint64_t v35 = *(void *)(*(void *)(v48 + 56) + v31);
        unint64_t v36 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a3 + 72);
        sub_1C3F7E324(*v32, v33);
        swift_retain();
        if (v36(v34, v33, a2, a3)) {
          break;
        }
        swift_retain();
        sub_1C406DA54(v49, v35);
        sub_1C3F7E2CC(v34, v33);
        swift_release();
        uint64_t result = swift_release();
        if (!v26) {
          goto LABEL_29;
        }
      }
      swift_release();
      uint64_t result = sub_1C3F7E2CC(v34, v33);
    }
    while (v26);
  }
LABEL_29:
  BOOL v13 = __OFADD__(v22++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_54;
  }
  if (v22 >= v45) {
    goto LABEL_5;
  }
  unint64_t v29 = *(void *)(v44 + 8 * v22);
  if (v29) {
    goto LABEL_39;
  }
  int64_t v30 = v22 + 1;
  if (v22 + 1 >= v45) {
    goto LABEL_5;
  }
  unint64_t v29 = *(void *)(v44 + 8 * v30);
  if (v29) {
    goto LABEL_38;
  }
  int64_t v30 = v22 + 2;
  if (v22 + 2 >= v45) {
    goto LABEL_5;
  }
  unint64_t v29 = *(void *)(v44 + 8 * v30);
  if (v29) {
    goto LABEL_38;
  }
  int64_t v30 = v22 + 3;
  if (v22 + 3 >= v45)
  {
LABEL_5:
    uint64_t v6 = v37;
    uint64_t v5 = v38;
    swift_release();
    goto LABEL_6;
  }
  unint64_t v29 = *(void *)(v44 + 8 * v30);
  if (v29)
  {
LABEL_38:
    int64_t v22 = v30;
LABEL_39:
    unint64_t v26 = (v29 - 1) & v29;
    unint64_t v28 = __clz(__rbit64(v29)) + (v22 << 6);
    goto LABEL_40;
  }
  while (1)
  {
    int64_t v22 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v22 >= v45) {
      goto LABEL_5;
    }
    unint64_t v29 = *(void *)(v44 + 8 * v22);
    ++v30;
    if (v29) {
      goto LABEL_39;
    }
  }
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t sub_1C413EB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void (*v82)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t);
  int64_t v83;
  uint64_t v84;
  uint64_t v85;
  int64_t v86;
  uint64_t v91;
  uint64_t v93;
  unint64_t v94;
  int64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int64_t v106;
  unint64_t v107;
  uint64_t v108;

  uint64_t v8 = v7;
  uint64_t v9 = a5;
  uint64_t v10 = a3;
  uint64_t v11 = a1;
  uint64_t v108 = MEMORY[0x1E4FBC870];
  int v102 = a1;
  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRetain_n();
    while (1)
    {
      uint64_t v12 = sub_1C4140014(v11, v6, a3, v9);
      if (v8)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      uint64_t v13 = v12;
      swift_bridgeObjectRelease();
      unint64_t v93 = v13;
      uint64_t v94 = v13 & 0xC000000000000001;
      if ((v13 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        sub_1C4497C48();
        type metadata accessor for AnyReference();
        sub_1C413FBE4();
        uint64_t result = sub_1C4497728();
        uint64_t v13 = v103;
        uint64_t v84 = v104;
        uint64_t v15 = v105;
        int64_t v16 = v106;
        unint64_t v17 = v107;
      }
      else
      {
        uint64_t v18 = -1 << *(unsigned char *)(v13 + 32);
        uint64_t v84 = v13 + 56;
        uint64_t v19 = ~v18;
        uint64_t v20 = -v18;
        if (v20 < 64) {
          uint64_t v21 = ~(-1 << v20);
        }
        else {
          uint64_t v21 = -1;
        }
        unint64_t v17 = v21 & *(void *)(v13 + 56);
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v15 = v19;
        int64_t v16 = 0;
      }
      uint64_t v83 = (unint64_t)(v15 + 64) >> 6;
      while ((v13 & 0x8000000000000000) == 0)
      {
        if (v17)
        {
          uint64_t v24 = (v17 - 1) & v17;
          unint64_t v25 = __clz(__rbit64(v17)) | (v16 << 6);
          int64_t v26 = v16;
        }
        else
        {
          int64_t v26 = v16 + 1;
          if (__OFADD__(v16, 1))
          {
            __break(1u);
LABEL_92:
            __break(1u);
            goto LABEL_93;
          }
          if (v26 >= v83) {
            goto LABEL_39;
          }
          unint64_t v29 = *(void *)(v84 + 8 * v26);
          if (!v29)
          {
            int64_t v30 = v16 + 2;
            if (v16 + 2 >= v83) {
              goto LABEL_39;
            }
            unint64_t v29 = *(void *)(v84 + 8 * v30);
            if (v29) {
              goto LABEL_27;
            }
            int64_t v30 = v16 + 3;
            if (v16 + 3 >= v83) {
              goto LABEL_39;
            }
            unint64_t v29 = *(void *)(v84 + 8 * v30);
            if (v29)
            {
LABEL_27:
              int64_t v26 = v30;
            }
            else
            {
              int64_t v26 = v16 + 4;
              if (v16 + 4 >= v83) {
                goto LABEL_39;
              }
              unint64_t v29 = *(void *)(v84 + 8 * v26);
              if (!v29)
              {
                int64_t v36 = v16 + 5;
                do
                {
                  if (v83 == v36) {
                    goto LABEL_39;
                  }
                  unint64_t v29 = *(void *)(v84 + 8 * v36++);
                }
                while (!v29);
                int64_t v26 = v36 - 1;
              }
            }
          }
          uint64_t v24 = (v29 - 1) & v29;
          unint64_t v25 = __clz(__rbit64(v29)) + (v26 << 6);
        }
        uint64_t v28 = *(void *)(*(void *)(v13 + 48) + 8 * v25);
        swift_retain();
        if (!v28) {
          goto LABEL_39;
        }
LABEL_30:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 64))(&v96, v28, a2, a4, a6, a3, a5);
        unint64_t v17 = v24;
        uint64_t v31 = v13;
        uint64_t v32 = v96;
        uint64_t v33 = v97;
        uint64_t v98 = v91;
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(a5 + 16) + 24))(&v96, a3);
        uint64_t v34 = v96;
        if (sub_1C41127E8(v97, v33))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_12:
          uint64_t v22 = *(void *)(v28 + 16);
          unint64_t v23 = *(void *)(v28 + 24);
          sub_1C3F7E324(v22, v23);
          sub_1C3F81BF8(&v96, v22, v23);
          swift_release();
          uint64_t result = sub_1C3F7E2CC(v96, v97);
          goto LABEL_13;
        }
        char v35 = sub_1C41127E8(v34, v32);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v35) {
          goto LABEL_12;
        }
        uint64_t result = swift_release();
LABEL_13:
        int64_t v16 = v26;
        uint64_t v13 = v31;
      }
      uint64_t v27 = sub_1C4497CB8();
      if (v27)
      {
        uint64_t v98 = v27;
        type metadata accessor for AnyReference();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v28 = v96;
        swift_unknownObjectRelease();
        int64_t v26 = v16;
        uint64_t v24 = v17;
        if (v28) {
          goto LABEL_30;
        }
      }
LABEL_39:
      sub_1C3F7FCE8();
      if (!v94)
      {
        uint64_t v37 = v93;
        uint64_t v38 = *(void *)(v93 + 16);
        if (!v38) {
          goto LABEL_44;
        }
LABEL_41:
        uint64_t v101 = MEMORY[0x1E4FBC860];
        sub_1C4012680(0, v38 & ~(v38 >> 63), 0);
        if (v94)
        {
          uint64_t result = sub_1C4497C38();
          unsigned __int8 v40 = 1;
        }
        else
        {
          uint64_t result = sub_1C413FB1C(v37);
          unsigned __int8 v40 = v42 & 1;
        }
        uint64_t v98 = result;
        uint64_t v99 = v39;
        uint64_t v100 = v40;
        if ((v38 & 0x8000000000000000) == 0)
        {
          do
          {
            while (1)
            {
              uint64_t v49 = v98;
              uint64_t v48 = v99;
              uint64_t v50 = v100;
              uint64_t v51 = sub_1C413E4B0(v98, v99, v100, v37);
              uint64_t v52 = *(void *)(v51 + 16);
              unint64_t v53 = *(void *)(v51 + 24);
              sub_1C3F7E324(v52, v53);
              swift_release();
              uint64_t v54 = v101;
              uint64_t result = swift_isUniquelyReferenced_nonNull_native();
              if ((result & 1) == 0)
              {
                uint64_t result = sub_1C4012680(0, *(void *)(v54 + 16) + 1, 1);
                uint64_t v54 = v101;
              }
              unint64_t v56 = *(void *)(v54 + 16);
              unint64_t v55 = *(void *)(v54 + 24);
              if (v56 >= v55 >> 1)
              {
                uint64_t result = sub_1C4012680(v55 > 1, v56 + 1, 1);
                uint64_t v54 = v101;
              }
              *(void *)(v54 + 16) = v56 + 1;
              unint64_t v57 = v54 + 16 * v56;
              *(void *)(v57 + 32) = v52;
              *(void *)(v57 + 40) = v53;
              if (v94) {
                break;
              }
              uint64_t v37 = v93;
              uint64_t v43 = sub_1C4233898(v49, v48, v50, v93);
              uint64_t v45 = v44;
              char v47 = v46;
              sub_1C3F882B0(v49, v48, v50);
              uint64_t v98 = v43;
              uint64_t v99 = v45;
              uint64_t v100 = v47 & 1;
              if (!--v38) {
                goto LABEL_58;
              }
            }
            uint64_t v37 = v93;
            if ((v50 & 1) == 0) {
              goto LABEL_95;
            }
            if (sub_1C4497C58()) {
              swift_isUniquelyReferenced_nonNull_native();
            }
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39CBB0);
            uint64_t v58 = (void (*)(uint64_t *, void))sub_1C44976D8();
            sub_1C4497CC8();
            v58(&v96, 0);
            --v38;
          }
          while (v38);
LABEL_58:
          sub_1C3F882B0(v98, v99, v100);
          uint64_t v41 = v101;
          goto LABEL_59;
        }
LABEL_93:
        __break(1u);
        goto LABEL_94;
      }
      uint64_t v37 = v93;
      uint64_t v38 = sub_1C4497C88();
      if (v38) {
        goto LABEL_41;
      }
LABEL_44:
      uint64_t v41 = MEMORY[0x1E4FBC860];
LABEL_59:
      uint64_t v11 = sub_1C411EDFC(v41);
      swift_bridgeObjectRelease();
      uint64_t v59 = sub_1C413BE68(v37);
      uint64_t v8 = 0;
      swift_bridgeObjectRelease();
      uint64_t v60 = *(void *)(v59 + 16);
      if (v60)
      {
        unint64_t v61 = (unint64_t *)(v59 + 40);
        do
        {
          uint64_t v62 = *(v61 - 1);
          unint64_t v63 = *v61;
          sub_1C3F7E324(v62, *v61);
          sub_1C3F81BF8(&v96, v62, v63);
          sub_1C3F7E2CC(v96, v97);
          v61 += 2;
          --v60;
        }
        while (v60);
      }
      swift_bridgeObjectRelease();
      uint64_t v9 = a5;
      uint64_t v6 = v91;
      if (!*(void *)(v11 + 16))
      {
        swift_bridgeObjectRelease();
        uint64_t v10 = a3;
        goto LABEL_65;
      }
    }
  }
  swift_bridgeObjectRetain();
LABEL_65:
  uint64_t v64 = swift_bridgeObjectRetain();
  uint64_t v65 = sub_1C413E764(v64, v10, v9);
  if (v8)
  {
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  uint64_t v66 = v65;
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v67 = 0;
  uint64_t v68 = *(void *)(v66 + 56);
  uint64_t v85 = v66 + 56;
  uint64_t v69 = 1 << *(unsigned char *)(v66 + 32);
  uint64_t v70 = -1;
  if (v69 < 64) {
    uint64_t v70 = ~(-1 << v69);
  }
  unint64_t v71 = v70 & v68;
  uint64_t v86 = (unint64_t)(v69 + 63) >> 6;
  if ((v70 & v68) == 0) {
    goto LABEL_71;
  }
LABEL_70:
  unint64_t v72 = __clz(__rbit64(v71));
  v71 &= v71 - 1;
  unint64_t v95 = v67;
  for (unint64_t i = v72 | (v67 << 6); ; unint64_t i = __clz(__rbit64(v76)) + (v75 << 6))
  {
    uint64_t v78 = v66;
    uint64_t v79 = *(void *)(*(void *)(v66 + 48) + 8 * i);
    uint64_t v80 = *(void *)(v79 + 16);
    unint64_t v81 = *(void *)(v79 + 24);
    char v82 = *(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(a6 + 72);
    swift_retain();
    sub_1C3F7E324(v80, v81);
    v82(&v96, v80, v81, a4, a6);
    sub_1C3F7E2CC(v80, v81);
    uint64_t v98 = v96;
    (*(void (**)(uint64_t *, uint64_t))(a5 + 80))(&v98, v10);
    swift_release();
    uint64_t result = swift_release();
    uint64_t v66 = v78;
    int64_t v67 = v95;
    if (v71) {
      goto LABEL_70;
    }
LABEL_71:
    BOOL v74 = __OFADD__(v67, 1);
    int64_t v75 = v67 + 1;
    if (v74) {
      goto LABEL_92;
    }
    if (v75 >= v86)
    {
LABEL_90:
      swift_release();
      return v108;
    }
    unint64_t v76 = *(void *)(v85 + 8 * v75);
    if (!v76) {
      break;
    }
LABEL_81:
    unint64_t v71 = (v76 - 1) & v76;
    unint64_t v95 = v75;
  }
  int64_t v77 = v75 + 1;
  if (v75 + 1 >= v86) {
    goto LABEL_90;
  }
  unint64_t v76 = *(void *)(v85 + 8 * v77);
  if (v76) {
    goto LABEL_80;
  }
  int64_t v77 = v75 + 2;
  if (v75 + 2 >= v86) {
    goto LABEL_90;
  }
  unint64_t v76 = *(void *)(v85 + 8 * v77);
  if (v76) {
    goto LABEL_80;
  }
  int64_t v77 = v75 + 3;
  if (v75 + 3 >= v86) {
    goto LABEL_90;
  }
  unint64_t v76 = *(void *)(v85 + 8 * v77);
  if (v76)
  {
LABEL_80:
    int64_t v75 = v77;
    goto LABEL_81;
  }
  while (1)
  {
    int64_t v75 = v77 + 1;
    if (__OFADD__(v77, 1)) {
      break;
    }
    if (v75 >= v86) {
      goto LABEL_90;
    }
    unint64_t v76 = *(void *)(v85 + 8 * v75);
    ++v77;
    if (v76) {
      goto LABEL_81;
    }
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}