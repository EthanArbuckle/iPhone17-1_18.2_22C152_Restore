uint64_t sub_1C413F54C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t *__return_ptr, void *, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  char v43[16];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void v50[3];
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v9 = a6;
  v11 = *a1;
  v12 = a1[1];
  v54 = MEMORY[0x1E4FBC870];
  v44 = a4;
  v45 = a5;
  v46 = a6;
  v47 = a7;
  v48 = a3;
  result = sub_1C413C6A8(a2, (uint64_t (*)(uint64_t *))sub_1C413FC3C, (uint64_t)v43, a4, a6);
  if (v8) {
    return swift_bridgeObjectRelease();
  }
  v14 = 0;
  v36 = v11;
  v37 = result + 56;
  v15 = 1 << *(unsigned char *)(result + 32);
  v16 = -1;
  if (v15 < 64) {
    v16 = ~(-1 << v15);
  }
  v17 = v16 & *(void *)(result + 56);
  v38 = (unint64_t)(v15 + 63) >> 6;
  v39 = v12;
  v40 = a4;
  v18 = v7;
  while (1)
  {
    if (v17)
    {
      v42 = v14;
      v41 = (v17 - 1) & v17;
      v21 = __clz(__rbit64(v17)) | (v14 << 6);
      goto LABEL_22;
    }
    v22 = __OFADD__(v14, 1);
    v23 = v14 + 1;
    if (v22)
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v23 >= v38) {
      goto LABEL_30;
    }
    v24 = *(void *)(v37 + 8 * v23);
    if (!v24) {
      break;
    }
LABEL_21:
    v42 = v23;
    v41 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v23 << 6);
LABEL_22:
    v26 = result;
    v27 = (uint64_t *)(*(void *)(result + 48) + 16 * v21);
    v28 = *v27;
    v29 = v27[1];
    v50[2] = v18;
    v50[0] = v28;
    v50[1] = v29;
    v49 = 0;
    v30 = v9;
    v31 = *(void *)(v9 + 16);
    v32 = *(void (**)(uint64_t *__return_ptr, void *, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v31 + 48);
    sub_1C3F7E324(v28, v29);
    v32(&v51, v50, &v49, &type metadata for AnyCRDT, &off_1F1F9CB20, v40, v31);
    result = v51;
    if (!v51) {
      goto LABEL_33;
    }
    v33 = v52;
    v34 = v53;
    swift_release();
    if (sub_1C41127E8(v34, v39))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_7:
      sub_1C3F81BF8(&v51, v28, v29);
      v19 = v51;
      v20 = v52;
      goto LABEL_8;
    }
    v35 = sub_1C41127E8(v33, v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v35) {
      goto LABEL_7;
    }
    v19 = v28;
    v20 = v29;
LABEL_8:
    sub_1C3F7E2CC(v19, v20);
    v9 = v30;
    result = v26;
    v17 = v41;
    v14 = v42;
  }
  v25 = v23 + 1;
  if (v23 + 1 >= v38) {
    goto LABEL_30;
  }
  v24 = *(void *)(v37 + 8 * v25);
  if (v24) {
    goto LABEL_20;
  }
  v25 = v23 + 2;
  if (v23 + 2 >= v38) {
    goto LABEL_30;
  }
  v24 = *(void *)(v37 + 8 * v25);
  if (v24) {
    goto LABEL_20;
  }
  v25 = v23 + 3;
  if (v23 + 3 >= v38)
  {
LABEL_30:
    swift_release();
    return v54;
  }
  v24 = *(void *)(v37 + 8 * v25);
  if (v24)
  {
LABEL_20:
    v23 = v25;
    goto LABEL_21;
  }
  while (1)
  {
    v23 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v23 >= v38) {
      goto LABEL_30;
    }
    v24 = *(void *)(v37 + 8 * v23);
    ++v25;
    if (v24) {
      goto LABEL_21;
    }
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1C413F850(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_1C413F9B4((uint64_t)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v6 = sub_1C413F9B4((uint64_t)v7, v4, v2);
    swift_release();
    MEMORY[0x1C8782060](v7, -1, -1);
  }
  return v6;
}

uint64_t sub_1C413F9B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  size_t v5 = (unint64_t *)result;
  uint64_t v6 = 0;
  int64_t v7 = 0;
  uint64_t v8 = a3 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = *(void *)(a3 + 56) & v10;
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  do
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
    }
    else
    {
      int64_t v16 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_23;
      }
      if (v16 >= v12)
      {
LABEL_21:
        swift_retain();
        return sub_1C43D298C(v5, a2, v6, a3);
      }
      unint64_t v17 = *(void *)(v8 + 8 * v16);
      ++v7;
      if (!v17)
      {
        int64_t v7 = v16 + 1;
        if (v16 + 1 >= v12) {
          goto LABEL_21;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v7);
        if (!v17)
        {
          int64_t v7 = v16 + 2;
          if (v16 + 2 >= v12) {
            goto LABEL_21;
          }
          unint64_t v17 = *(void *)(v8 + 8 * v7);
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v12) {
              goto LABEL_21;
            }
            unint64_t v17 = *(void *)(v8 + 8 * v18);
            if (!v17)
            {
              while (1)
              {
                int64_t v7 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_24;
                }
                if (v7 >= v12) {
                  goto LABEL_21;
                }
                unint64_t v17 = *(void *)(v8 + 8 * v7);
                ++v18;
                if (v17) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v7 = v18;
          }
        }
      }
LABEL_20:
      unint64_t v11 = (v17 - 1) & v17;
      unint64_t v14 = __clz(__rbit64(v17)) + (v7 << 6);
    }
    *(void *)(result + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
  }
  while (!__OFADD__(v6++, 1));
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1C413FB1C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1C413FBA4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_1C410D0A4(*(void *)(v0 + 24));
  return sub_1C410D0A4(v1);
}

unint64_t sub_1C413FBE4()
{
  unint64_t result = qword_1EA39CBA8;
  if (!qword_1EA39CBA8)
  {
    type metadata accessor for AnyReference();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39CBA8);
  }
  return result;
}

BOOL sub_1C413FC3C(long long *a1)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 40);
  long long v5 = *a1;
  return ((*(uint64_t (**)(long long *, uint64_t))(v3 + 64))(&v5, v2) & 1) == 0;
}

uint64_t sub_1C413FC90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *))
{
  v21 = (unint64_t *)result;
  uint64_t v22 = 0;
  int64_t v6 = 0;
  uint64_t v23 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v25 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v16 >= v25) {
      goto LABEL_24;
    }
    unint64_t v17 = *(void *)(v23 + 8 * v16);
    ++v6;
    if (!v17)
    {
      int64_t v6 = v16 + 1;
      if (v16 + 1 >= v25) {
        goto LABEL_24;
      }
      unint64_t v17 = *(void *)(v23 + 8 * v6);
      if (!v17)
      {
        int64_t v6 = v16 + 2;
        if (v16 + 2 >= v25) {
          goto LABEL_24;
        }
        unint64_t v17 = *(void *)(v23 + 8 * v6);
        if (!v17) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v11 = __clz(__rbit64(v17)) + (v6 << 6);
LABEL_5:
    int64_t v12 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    unint64_t v14 = v12[1];
    v24[0] = v13;
    v24[1] = v14;
    sub_1C3F7E324(v13, v14);
    char v15 = a4(v24);
    unint64_t result = sub_1C3F7E2CC(v13, v14);
    if (v15)
    {
      *(unint64_t *)((char *)v21 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v22++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_1C43D298C(v21, a2, v22, a3);
      }
    }
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v25) {
    goto LABEL_24;
  }
  unint64_t v17 = *(void *)(v23 + 8 * v18);
  if (v17)
  {
    int64_t v6 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v6 >= v25) {
      goto LABEL_24;
    }
    unint64_t v17 = *(void *)(v23 + 8 * v6);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1C413FE90(uint64_t isStackAllocationSafe, uint64_t (*a2)(void *))
{
  uint64_t v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1E4F143B8];
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    uint64_t v8 = sub_1C413FC90((uint64_t)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v4, a2);
    swift_release();
    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    unint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    uint64_t v8 = sub_1C413FC90((uint64_t)v9, v6, v4, a2);
    swift_release();
    MEMORY[0x1C8782060](v9, -1, -1);
  }
  return v8;
}

uint64_t sub_1C4140014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = type metadata accessor for MissingTypedRefVisitor();
  uint64_t v28 = sub_1C4234128(a2);
  uint64_t v23 = a1 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 56);
  int64_t v24 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = a2;
  swift_unknownObjectRetain();
  uint64_t v27 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(void *)(v27 + 48) + 16 * i);
    unint64_t v20 = v19[1];
    v29[0] = *v19;
    uint64_t v21 = v29[0];
    v29[1] = v20;
    uint64_t v30 = v28;
    uint64_t v22 = *(void (**)(uint64_t *, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(a4 + 96);
    sub_1C3F7E324(v29[0], v20);
    v22(v29, &v30, v25, &off_1F1F9B798, a3, a4);
    if (v4)
    {
      swift_release();
      swift_release();
      sub_1C3F7E2CC(v21, v20);
      return v11;
    }
    uint64_t result = sub_1C3F7E2CC(v21, v20);
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v13++, 1)) {
      break;
    }
    if (v13 >= v24) {
      goto LABEL_24;
    }
    unint64_t v17 = *(void *)(v23 + 8 * v13);
    if (!v17)
    {
      int64_t v18 = v13 + 1;
      if (v13 + 1 >= v24) {
        goto LABEL_24;
      }
      unint64_t v17 = *(void *)(v23 + 8 * v18);
      if (v17) {
        goto LABEL_14;
      }
      int64_t v18 = v13 + 2;
      if (v13 + 2 >= v24) {
        goto LABEL_24;
      }
      unint64_t v17 = *(void *)(v23 + 8 * v18);
      if (v17)
      {
LABEL_14:
        int64_t v13 = v18;
        goto LABEL_15;
      }
      int64_t v18 = v13 + 3;
      if (v13 + 3 < v24)
      {
        unint64_t v17 = *(void *)(v23 + 8 * v18);
        if (!v17)
        {
          while (1)
          {
            int64_t v13 = v18 + 1;
            if (__OFADD__(v18, 1)) {
              goto LABEL_27;
            }
            if (v13 >= v24) {
              goto LABEL_24;
            }
            unint64_t v17 = *(void *)(v23 + 8 * v13);
            ++v18;
            if (v17) {
              goto LABEL_15;
            }
          }
        }
        goto LABEL_14;
      }
LABEL_24:
      swift_release();
      swift_beginAccess();
      uint64_t v11 = *(void *)(v28 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      return v11;
    }
LABEL_15:
    unint64_t v10 = (v17 - 1) & v17;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1C414028C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PartiallyOrderedReferenceMap();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C41402F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PartiallyOrderedReferenceMap();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C414034C()
{
  return type metadata accessor for CRStructEncoder();
}

uint64_t sub_1C4140354()
{
  return sub_1C3F561BC();
}

uint64_t sub_1C4140380@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  a2[3] = &type metadata for CRStructEncoder.UnkeyedContanier;
  a2[4] = sub_1C41427B0();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_1C41403D0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[3] = type metadata accessor for CRStructEncoder();
  a2[4] = sub_1C3F6FC88();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_1C4140420@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  a2[3] = type metadata accessor for CRStructEncoder();
  a2[4] = sub_1C3F6FC88();
  *a2 = a1;
  return swift_retain();
}

uint64_t sub_1C4140470(char a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(var1) = a1;
  return sub_1C3F6D298(&var1, a2, *v3, *(void *)(a3 + 16), MEMORY[0x1E4FBB390], *(void *)(a3 + 24), MEMORY[0x1E4FBB398]);
}

uint64_t sub_1C41404B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a1;
  v6[1] = a2;
  return sub_1C3F6D298(v6, a3, *v4, *(void *)(a4 + 16), MEMORY[0x1E4FBB1A0], *(void *)(a4 + 24), MEMORY[0x1E4FBB1A8]);
}

uint64_t sub_1C4140500(uint64_t a1, uint64_t a2, double a3)
{
  double v5 = a3;
  return sub_1C3F6D298(&v5, a1, *v3, *(void *)(a2 + 16), MEMORY[0x1E4FBB3D0], *(void *)(a2 + 24), MEMORY[0x1E4FBB3E0]);
}

uint64_t sub_1C4140548(uint64_t a1, uint64_t a2, float a3)
{
  *(float *)&uint64_t var4 = a3;
  return sub_1C3F6D298(&var4, a1, *v3, *(void *)(a2 + 16), MEMORY[0x1E4FBB470], *(void *)(a2 + 24), MEMORY[0x1E4FBB480]);
}

uint64_t sub_1C4140590(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4140698(a1, a2, a3, a4, MEMORY[0x1E4FBC098], MEMORY[0x1E4FBC0A0]);
}

uint64_t sub_1C41405B8(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C41406F8(a1, a2, a3, a4, MEMORY[0x1E4FBC0F8], MEMORY[0x1E4FBC100]);
}

uint64_t sub_1C41405E0(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4140758(a1, a2, a3, a4, MEMORY[0x1E4FBC150], MEMORY[0x1E4FBC158]);
}

uint64_t sub_1C4140608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3F6D260(a1, a2, a3, a4, MEMORY[0x1E4FBC1C8], MEMORY[0x1E4FBC1D0]);
}

uint64_t sub_1C4140630()
{
  return sub_1C44984E8();
}

uint64_t sub_1C4140648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3F6D260(a1, a2, a3, a4, MEMORY[0x1E4FBB808], MEMORY[0x1E4FBB810]);
}

uint64_t sub_1C4140670(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4140698(a1, a2, a3, a4, MEMORY[0x1E4FBC358], MEMORY[0x1E4FBC360]);
}

uint64_t sub_1C4140698(char a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  LOBYTE(var1) = a1;
  return sub_1C3F6D298(&var1, a2, *v6, *(void *)(a3 + 16), a5, *(void *)(a3 + 24), a6);
}

uint64_t sub_1C41406D0(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C41406F8(a1, a2, a3, a4, MEMORY[0x1E4FBC450], MEMORY[0x1E4FBC458]);
}

uint64_t sub_1C41406F8(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  LOWORD(var2) = a1;
  return sub_1C3F6D298(&var2, a2, *v6, *(void *)(a3 + 16), a5, *(void *)(a3 + 24), a6);
}

uint64_t sub_1C4140730(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4140758(a1, a2, a3, a4, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4FBC4C8]);
}

uint64_t sub_1C4140758(int a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  LODWORD(var4) = a1;
  return sub_1C3F6D298(&var4, a2, *v6, *(void *)(a3 + 16), a5, *(void *)(a3 + 24), a6);
}

uint64_t sub_1C4140790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3F6D260(a1, a2, a3, a4, MEMORY[0x1E4FBC538], MEMORY[0x1E4FBC540]);
}

uint64_t sub_1C41407B8()
{
  return sub_1C44984F8();
}

uint64_t sub_1C41407D0()
{
  return sub_1C44984D8();
}

uint64_t sub_1C41407FC()
{
  return sub_1C4498448();
}

uint64_t sub_1C4140814()
{
  return sub_1C4498438();
}

uint64_t sub_1C414082C()
{
  return sub_1C4498458();
}

uint64_t sub_1C4140848(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4140A3C(a1, a2, a3, a4, MEMORY[0x1E4FBBFF0]);
}

uint64_t sub_1C4140874()
{
  return sub_1C4498468();
}

uint64_t sub_1C4140890(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4140994(a1, a2, a3, a4, MEMORY[0x1E4FBC008]);
}

uint64_t sub_1C41408BC(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C41409E8(a1, a2, a3, a4, MEMORY[0x1E4FBC010]);
}

uint64_t sub_1C41408E8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4140A3C(a1, a2, a3, a4, MEMORY[0x1E4FBC018]);
}

uint64_t sub_1C4140914()
{
  return sub_1C4498498();
}

uint64_t sub_1C4140930()
{
  return sub_1C44984A8();
}

uint64_t sub_1C414094C()
{
  return sub_1C4498478();
}

uint64_t sub_1C4140968(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4140994(a1, a2, a3, a4, MEMORY[0x1E4FBC028]);
}

uint64_t sub_1C4140994(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FF);
}

uint64_t sub_1C41409BC(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C41409E8(a1, a2, a3, a4, MEMORY[0x1E4FBC038]);
}

uint64_t sub_1C41409E8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t sub_1C4140A10(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4140A3C(a1, a2, a3, a4, MEMORY[0x1E4FBC040]);
}

uint64_t sub_1C4140A3C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t sub_1C4140A6C()
{
  return sub_1C44984B8();
}

uint64_t sub_1C4140A88()
{
  return sub_1C44984C8();
}

uint64_t sub_1C4140AA4()
{
  return sub_1C4498488();
}

uint64_t sub_1C4140AD0()
{
  return sub_1C4140354();
}

uint64_t sub_1C4140AE8@<X0>(void *a1@<X8>)
{
  return sub_1C4140380(*v1, a1);
}

uint64_t sub_1C4140AF8@<X0>(void *a1@<X8>)
{
  return sub_1C41403D0(*v1, a1);
}

uint64_t sub_1C4140B08@<X0>(void *a1@<X8>)
{
  return sub_1C4140420(*v1, a1);
}

uint64_t sub_1C4140B18()
{
  return sub_1C3F561BC();
}

uint64_t sub_1C4140B44(char a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Proto_Value(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = MEMORY[0x1E4FBB390];
  unint64_t v20 = &protocol witness table for Bool;
  v18[0] = a1;
  int64_t v16 = v18;
  uint64_t v17 = a2;
  sub_1C3F6DC00((void (*)(uint64_t))sub_1C4142814, (uint64_t)v8);
  if (!v2)
  {
    uint64_t v9 = a2 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
    swift_beginAccess();
    unint64_t v10 = *(void *)(v9 + 8);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v9 + 8) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = sub_1C3F6DE60(0, *(void *)(v10 + 16) + 1, 1, v10);
      *(void *)(v9 + 8) = v10;
    }
    unint64_t v13 = *(void *)(v10 + 16);
    unint64_t v12 = *(void *)(v10 + 24);
    if (v13 >= v12 >> 1)
    {
      unint64_t v10 = sub_1C3F6DE60(v12 > 1, v13 + 1, 1, v10);
      *(void *)(v9 + 8) = v10;
    }
    *(void *)(v10 + 16) = v13 + 1;
    sub_1C3F6E654((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v13);
    swift_endAccess();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t sub_1C4140D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Proto_Value(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20[3] = MEMORY[0x1E4FBB1A0];
  v20[4] = &protocol witness table for String;
  v20[0] = a1;
  v20[1] = a2;
  int64_t v18 = v20;
  uint64_t v19 = a3;
  swift_bridgeObjectRetain();
  sub_1C3F6DC00((void (*)(uint64_t))sub_1C4142814, (uint64_t)v10);
  if (!v3)
  {
    uint64_t v11 = a3 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
    swift_beginAccess();
    unint64_t v12 = *(void *)(v11 + 8);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v11 + 8) = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v12 = sub_1C3F6DE60(0, *(void *)(v12 + 16) + 1, 1, v12);
      *(void *)(v11 + 8) = v12;
    }
    unint64_t v15 = *(void *)(v12 + 16);
    unint64_t v14 = *(void *)(v12 + 24);
    if (v15 >= v14 >> 1)
    {
      unint64_t v12 = sub_1C3F6DE60(v14 > 1, v15 + 1, 1, v12);
      *(void *)(v11 + 8) = v12;
    }
    *(void *)(v12 + 16) = v15 + 1;
    sub_1C3F6E654((uint64_t)v10, v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v15);
    swift_endAccess();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t sub_1C4140EE8(uint64_t a1, double a2)
{
  uint64_t v5 = type metadata accessor for Proto_Value(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18[3] = MEMORY[0x1E4FBB3D0];
  v18[4] = &protocol witness table for Double;
  *(double *)int64_t v18 = a2;
  int64_t v16 = v18;
  uint64_t v17 = a1;
  sub_1C3F6DC00((void (*)(uint64_t))sub_1C4142814, (uint64_t)v8);
  if (!v2)
  {
    uint64_t v9 = a1 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
    swift_beginAccess();
    unint64_t v10 = *(void *)(v9 + 8);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v9 + 8) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = sub_1C3F6DE60(0, *(void *)(v10 + 16) + 1, 1, v10);
      *(void *)(v9 + 8) = v10;
    }
    unint64_t v13 = *(void *)(v10 + 16);
    unint64_t v12 = *(void *)(v10 + 24);
    if (v13 >= v12 >> 1)
    {
      unint64_t v10 = sub_1C3F6DE60(v12 > 1, v13 + 1, 1, v10);
      *(void *)(v9 + 8) = v10;
    }
    *(void *)(v10 + 16) = v13 + 1;
    sub_1C3F6E654((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v13);
    swift_endAccess();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t sub_1C41410BC(uint64_t a1, float a2)
{
  uint64_t v5 = type metadata accessor for Proto_Value(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = MEMORY[0x1E4FBB470];
  unint64_t v20 = &protocol witness table for Float;
  *(float *)int64_t v18 = a2;
  int64_t v16 = v18;
  uint64_t v17 = a1;
  sub_1C3F6DC00((void (*)(uint64_t))sub_1C4142814, (uint64_t)v8);
  if (!v2)
  {
    uint64_t v9 = a1 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
    swift_beginAccess();
    unint64_t v10 = *(void *)(v9 + 8);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v9 + 8) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = sub_1C3F6DE60(0, *(void *)(v10 + 16) + 1, 1, v10);
      *(void *)(v9 + 8) = v10;
    }
    unint64_t v13 = *(void *)(v10 + 16);
    unint64_t v12 = *(void *)(v10 + 24);
    if (v13 >= v12 >> 1)
    {
      unint64_t v10 = sub_1C3F6DE60(v12 > 1, v13 + 1, 1, v10);
      *(void *)(v9 + 8) = v10;
    }
    *(void *)(v10 + 16) = v13 + 1;
    sub_1C3F6E654((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v13);
    swift_endAccess();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t sub_1C4141290(char a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v8 = type metadata accessor for Proto_Value(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v26 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  if (swift_dynamicCast())
  {
    uint64_t v12 = sub_1C3F6DE94(v24, (uint64_t)v27);
    MEMORY[0x1F4188790](v12);
    *(&v22 - 2) = (uint64_t)v27;
    *(&v22 - 1) = a2;
    sub_1C3F6DC00(a4, (uint64_t)v11);
    if (!v4)
    {
      uint64_t v13 = a2 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
      swift_beginAccess();
      unint64_t v14 = *(void *)(v13 + 8);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v13 + 8) = v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v14 = sub_1C3F6DE60(0, *(void *)(v14 + 16) + 1, 1, v14);
        *(void *)(v13 + 8) = v14;
      }
      unint64_t v17 = *(void *)(v14 + 16);
      unint64_t v16 = *(void *)(v14 + 24);
      unint64_t v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        unint64_t v23 = v17 + 1;
        uint64_t v21 = sub_1C3F6DE60(v16 > 1, v17 + 1, 1, v14);
        unint64_t v18 = v23;
        unint64_t v14 = v21;
        *(void *)(v13 + 8) = v21;
      }
      *(void *)(v14 + 16) = v18;
      sub_1C3F6E654((uint64_t)v11, v14+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v17);
      swift_endAccess();
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  else
  {
    uint64_t v25 = 0;
    memset(v24, 0, sizeof(v24));
    sub_1C3F962E0((uint64_t)v24, qword_1EA39DBE0);
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v20 = xmmword_1C44A18C0;
    *(unsigned char *)(v20 + 16) = 4;
    return swift_willThrow();
  }
}

uint64_t sub_1C41414FC(__int16 a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v8 = type metadata accessor for Proto_Value(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __int16 v26 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  if (swift_dynamicCast())
  {
    uint64_t v12 = sub_1C3F6DE94(v24, (uint64_t)v27);
    MEMORY[0x1F4188790](v12);
    *(&v22 - 2) = (uint64_t)v27;
    *(&v22 - 1) = a2;
    sub_1C3F6DC00(a4, (uint64_t)v11);
    if (!v4)
    {
      uint64_t v13 = a2 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
      swift_beginAccess();
      unint64_t v14 = *(void *)(v13 + 8);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v13 + 8) = v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v14 = sub_1C3F6DE60(0, *(void *)(v14 + 16) + 1, 1, v14);
        *(void *)(v13 + 8) = v14;
      }
      unint64_t v17 = *(void *)(v14 + 16);
      unint64_t v16 = *(void *)(v14 + 24);
      unint64_t v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        unint64_t v23 = v17 + 1;
        uint64_t v21 = sub_1C3F6DE60(v16 > 1, v17 + 1, 1, v14);
        unint64_t v18 = v23;
        unint64_t v14 = v21;
        *(void *)(v13 + 8) = v21;
      }
      *(void *)(v14 + 16) = v18;
      sub_1C3F6E654((uint64_t)v11, v14+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v17);
      swift_endAccess();
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  else
  {
    uint64_t v25 = 0;
    memset(v24, 0, sizeof(v24));
    sub_1C3F962E0((uint64_t)v24, qword_1EA39DBE0);
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v20 = xmmword_1C44A18C0;
    *(unsigned char *)(v20 + 16) = 4;
    return swift_willThrow();
  }
}

uint64_t sub_1C4141768(int a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v8 = type metadata accessor for Proto_Value(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v26 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  if (swift_dynamicCast())
  {
    uint64_t v12 = sub_1C3F6DE94(v24, (uint64_t)v27);
    MEMORY[0x1F4188790](v12);
    *(&v22 - 2) = (uint64_t)v27;
    *(&v22 - 1) = a2;
    sub_1C3F6DC00(a4, (uint64_t)v11);
    if (!v4)
    {
      uint64_t v13 = a2 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
      swift_beginAccess();
      unint64_t v14 = *(void *)(v13 + 8);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v13 + 8) = v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v14 = sub_1C3F6DE60(0, *(void *)(v14 + 16) + 1, 1, v14);
        *(void *)(v13 + 8) = v14;
      }
      unint64_t v17 = *(void *)(v14 + 16);
      unint64_t v16 = *(void *)(v14 + 24);
      unint64_t v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        unint64_t v23 = v17 + 1;
        uint64_t v21 = sub_1C3F6DE60(v16 > 1, v17 + 1, 1, v14);
        unint64_t v18 = v23;
        unint64_t v14 = v21;
        *(void *)(v13 + 8) = v21;
      }
      *(void *)(v14 + 16) = v18;
      sub_1C3F6E654((uint64_t)v11, v14+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v17);
      swift_endAccess();
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  else
  {
    uint64_t v25 = 0;
    memset(v24, 0, sizeof(v24));
    sub_1C3F962E0((uint64_t)v24, qword_1EA39DBE0);
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v20 = xmmword_1C44A18C0;
    *(unsigned char *)(v20 + 16) = 4;
    return swift_willThrow();
  }
}

uint64_t sub_1C41419D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v11 = type metadata accessor for Proto_Value(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11 - 8);
  unint64_t v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24[3] = a3;
  v24[4] = a4;
  v24[0] = a1;
  uint64_t v22 = v24;
  uint64_t v23 = a2;
  sub_1C3F6DC00(a5, (uint64_t)v14);
  if (!v5)
  {
    uint64_t v15 = a2 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
    swift_beginAccess();
    unint64_t v16 = *(void *)(v15 + 8);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v15 + 8) = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v16 = sub_1C3F6DE60(0, *(void *)(v16 + 16) + 1, 1, v16);
      *(void *)(v15 + 8) = v16;
    }
    unint64_t v19 = *(void *)(v16 + 16);
    unint64_t v18 = *(void *)(v16 + 24);
    if (v19 >= v18 >> 1)
    {
      unint64_t v16 = sub_1C3F6DE60(v18 > 1, v19 + 1, 1, v16);
      *(void *)(v15 + 8) = v16;
    }
    *(void *)(v16 + 16) = v19 + 1;
    sub_1C3F6E654((uint64_t)v14, v16+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * v19);
    swift_endAccess();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
}

uint64_t sub_1C4141B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Proto_Value(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  if (swift_dynamicCast())
  {
    uint64_t v14 = sub_1C3F6DE94(v24, (uint64_t)v26);
    MEMORY[0x1F4188790](v14);
    *(void *)&v24[-1] = v26;
    *((void *)&v24[-1] + 1) = a2;
    sub_1C3F6DC00((void (*)(uint64_t))sub_1C4142814, (uint64_t)v11);
    if (!v3)
    {
      uint64_t v15 = a2 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
      swift_beginAccess();
      unint64_t v16 = *(void *)(v15 + 8);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v15 + 8) = v16;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v16 = sub_1C3F6DE60(0, *(void *)(v16 + 16) + 1, 1, v16);
        *(void *)(v15 + 8) = v16;
      }
      unint64_t v19 = *(void *)(v16 + 16);
      unint64_t v18 = *(void *)(v16 + 24);
      unint64_t v20 = v19 + 1;
      if (v19 >= v18 >> 1)
      {
        unint64_t v27 = v19 + 1;
        uint64_t v23 = sub_1C3F6DE60(v18 > 1, v19 + 1, 1, v16);
        unint64_t v20 = v27;
        unint64_t v16 = v23;
        *(void *)(v15 + 8) = v23;
      }
      *(void *)(v16 + 16) = v20;
      sub_1C3F6E654((uint64_t)v11, v16+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v19);
      swift_endAccess();
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  else
  {
    uint64_t v25 = 0;
    memset(v24, 0, sizeof(v24));
    sub_1C3F962E0((uint64_t)v24, qword_1EA39DBE0);
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v22 = xmmword_1C44A18C0;
    *(unsigned char *)(v22 + 16) = 4;
    return swift_willThrow();
  }
}

uint64_t sub_1C4141E90()
{
  uint64_t v1 = *v0 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
  swift_beginAccess();
  return *(void *)(*(void *)(v1 + 8) + 16);
}

uint64_t sub_1C4141EE0(char a1)
{
  return sub_1C4140B44(a1, *v1);
}

uint64_t sub_1C4141EFC(uint64_t a1, uint64_t a2)
{
  return sub_1C4140D10(a1, a2, *v2);
}

uint64_t sub_1C4141F18(double a1)
{
  return sub_1C4140EE8(*v1, a1);
}

uint64_t sub_1C4141F34(float a1)
{
  return sub_1C41410BC(*v1, a1);
}

uint64_t sub_1C4141F50(uint64_t a1)
{
  return sub_1C41419D4(a1, *v1, MEMORY[0x1E4FBB550], (uint64_t)&protocol witness table for Int, (void (*)(uint64_t))sub_1C4142814);
}

uint64_t sub_1C4141F90(char a1)
{
  return sub_1C4141290(a1, *v1, MEMORY[0x1E4FBC098], (void (*)(uint64_t))sub_1C4142814);
}

uint64_t sub_1C4141FC8(__int16 a1)
{
  return sub_1C41414FC(a1, *v1, MEMORY[0x1E4FBC0F8], (void (*)(uint64_t))sub_1C4142814);
}

uint64_t sub_1C4142000(int a1)
{
  return sub_1C4141768(a1, *v1, MEMORY[0x1E4FBC150], (void (*)(uint64_t))sub_1C4142814);
}

uint64_t sub_1C4142038(uint64_t a1)
{
  return sub_1C41419D4(a1, *v1, MEMORY[0x1E4FBC1C8], (uint64_t)&protocol witness table for Int64, (void (*)(uint64_t))sub_1C4142814);
}

uint64_t sub_1C4142078()
{
  return sub_1C4498368();
}

uint64_t sub_1C41420D8(uint64_t a1)
{
  return sub_1C41419D4(a1, *v1, MEMORY[0x1E4FBB808], (uint64_t)&protocol witness table for UInt, (void (*)(uint64_t))sub_1C4142814);
}

uint64_t sub_1C4142118(char a1)
{
  return sub_1C4141290(a1, *v1, MEMORY[0x1E4FBC358], (void (*)(uint64_t))sub_1C4142814);
}

uint64_t sub_1C4142150(__int16 a1)
{
  return sub_1C41414FC(a1, *v1, MEMORY[0x1E4FBC450], (void (*)(uint64_t))sub_1C4142814);
}

uint64_t sub_1C4142188(int a1)
{
  return sub_1C4141768(a1, *v1, MEMORY[0x1E4FBC4C0], (void (*)(uint64_t))sub_1C4142814);
}

uint64_t sub_1C41421C0(uint64_t a1)
{
  return sub_1C41419D4(a1, *v1, MEMORY[0x1E4FBC538], (uint64_t)&protocol witness table for UInt64, (void (*)(uint64_t))sub_1C4142814);
}

uint64_t sub_1C4142200()
{
  return sub_1C4498378();
}

uint64_t sub_1C4142260(uint64_t a1, uint64_t a2)
{
  return sub_1C4141B94(a1, *v2, a2);
}

uint64_t sub_1C4142284()
{
  return sub_1C4498168();
}

uint64_t sub_1C41422B0()
{
  return sub_1C4498198();
}

uint64_t sub_1C41422DC()
{
  return sub_1C4498188();
}

uint64_t sub_1C4142308()
{
  return sub_1C44981A8();
}

uint64_t sub_1C4142334()
{
  return sub_1C44981B8();
}

uint64_t sub_1C4142360()
{
  return sub_1C44981C8();
}

uint64_t sub_1C414238C()
{
  return sub_1C44981E8();
}

uint64_t sub_1C41423B8()
{
  return sub_1C44981F8();
}

uint64_t sub_1C41423E4()
{
  return sub_1C4498208();
}

uint64_t sub_1C4142410()
{
  return sub_1C4498218();
}

uint64_t sub_1C414243C()
{
  return sub_1C4498238();
}

uint64_t sub_1C4142468()
{
  return sub_1C44981D8();
}

uint64_t sub_1C4142494()
{
  return sub_1C4498228();
}

uint64_t sub_1C41424C0()
{
  return sub_1C4498248();
}

uint64_t sub_1C41424EC()
{
  return sub_1C4498258();
}

uint64_t sub_1C4142518()
{
  return sub_1C4498268();
}

uint64_t sub_1C4142544()
{
  return sub_1C4498278();
}

uint64_t sub_1C4142570()
{
  return sub_1C4498178();
}

uint64_t sub_1C41425A4()
{
  return sub_1C4140B18();
}

uint64_t sub_1C41425B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *v3;
  a3[3] = a1;
  a3[4] = a2;
  *a3 = v4;
  return swift_retain();
}

uint64_t sub_1C41425C8@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for CRStructEncoder();
  a1[4] = sub_1C3F6FC88();
  *a1 = v3;
  return swift_retain();
}

uint64_t sub_1C4142618()
{
  return sub_1C4498368();
}

uint64_t sub_1C4142678()
{
  return sub_1C4498378();
}

uint64_t sub_1C41426D8@<X0>(void *a1@<X8>)
{
  return sub_1C4142708((uint64_t (*)(void))sub_1C41427B0, a1);
}

uint64_t sub_1C41426F0@<X0>(void *a1@<X8>)
{
  return sub_1C4142708((uint64_t (*)(void))sub_1C414275C, a1);
}

uint64_t sub_1C4142708@<X0>(uint64_t (*a1)(void)@<X2>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  a2[3] = &type metadata for CRStructEncoder.UnkeyedContanier;
  a2[4] = a1();
  *a2 = v4;
  return swift_retain();
}

unint64_t sub_1C414275C()
{
  unint64_t result = qword_1EA39DBD0;
  if (!qword_1EA39DBD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39DBD0);
  }
  return result;
}

unint64_t sub_1C41427B0()
{
  unint64_t result = qword_1EA39DBD8;
  if (!qword_1EA39DBD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39DBD8);
  }
  return result;
}

ValueMetadata *type metadata accessor for CRStructEncoder.UnkeyedContanier()
{
  return &type metadata for CRStructEncoder.UnkeyedContanier;
}

uint64_t sub_1C4142814()
{
  return sub_1C414282C();
}

uint64_t sub_1C414282C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(v4 + 16))(*(void *)(v2 + 16), v3, v4);
}

uint64_t sub_1C4142894(uint64_t a1, uint64_t a2)
{
  return sub_1C4141EFC(a1, a2);
}

uint64_t sub_1C41428AC(char a1)
{
  return sub_1C4141EE0(a1);
}

uint64_t sub_1C41428C4(double a1)
{
  return sub_1C4141F18(a1);
}

uint64_t sub_1C41428DC(float a1)
{
  return sub_1C4141F34(a1);
}

uint64_t sub_1C41428F4(uint64_t a1)
{
  return sub_1C4141F50(a1);
}

uint64_t sub_1C414290C(char a1)
{
  return sub_1C4141F90(a1);
}

uint64_t sub_1C4142924(__int16 a1)
{
  return sub_1C4141FC8(a1);
}

uint64_t sub_1C414293C(int a1)
{
  return sub_1C4142000(a1);
}

uint64_t sub_1C4142954(uint64_t a1)
{
  return sub_1C4142038(a1);
}

uint64_t sub_1C414296C(uint64_t a1)
{
  return sub_1C41420D8(a1);
}

uint64_t sub_1C4142984(char a1)
{
  return sub_1C4142118(a1);
}

uint64_t sub_1C414299C(__int16 a1)
{
  return sub_1C4142150(a1);
}

uint64_t sub_1C41429B4(int a1)
{
  return sub_1C4142188(a1);
}

uint64_t sub_1C41429CC(uint64_t a1)
{
  return sub_1C41421C0(a1);
}

uint64_t sub_1C41429E4(uint64_t a1, uint64_t a2)
{
  return sub_1C4142260(a1, a2);
}

uint64_t sub_1C41429FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 648);
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule();
  uint64_t v4 = sub_1C4497B38();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t (*sub_1C4142B20())()
{
  return j__swift_endAccess_0;
}

uint64_t sub_1C4142B8C(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 648);
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule();
  uint64_t v4 = sub_1C4497B38();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(v3, a1, v4);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

void sub_1C4142CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1C4142B20();
  uint64_t v8 = v7;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for Capsule();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9)) {
    Capsule.finalizeTimestamps(_:)(*(void *)(v3 + 72), v9);
  }
  uint64_t v10 = ((uint64_t (*)(uint64_t *, void))v6)(&v12, 0);
  uint64_t v11 = (void *)MEMORY[0x1C8781540](v10);
  sub_1C4142E58((char *)v3, a1, a2);
}

uint64_t sub_1C4142E58(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v4 = *(void *)(*(void *)a1 + 632);
  uint64_t v23 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v22 = (char *)&v20 - v5;
  uint64_t v7 = *(void *)(v6 + 640);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for Capsule();
  uint64_t v9 = sub_1C4497B38();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v14 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v16 = (char *)&v20 - v15;
  sub_1C41429FC((uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v8) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, v8);
  unint64_t v19 = v22;
  uint64_t v18 = v23;
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v22, &a1[*(void *)(*(void *)a1 + 656)], v4);
  (*(void (**)(char *, uint64_t, void, uint64_t, uint64_t, uint64_t))(v7 + 32))(v16, v20, *((void *)a1 + 9), v21, v4, v7);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v8);
}

uint64_t sub_1C4143188(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v17 = a2;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 632);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = *(void *)(v5 + 640);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for Capsule();
  uint64_t v16 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, (uint64_t)v3 + *(void *)(v5 + 656), v6);
  uint64_t v14 = v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 24))(a1, v3[9], v17, v6, v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (!v14)
  {
    LOBYTE(v3) = sub_1C446C7AC((uint64_t)v13);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v11);
  }
  return v3 & 1;
}

uint64_t sub_1C41433F8()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 648);
  uint64_t v2 = *(void *)(*(void *)v0 + 632);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule();
  uint64_t v3 = sub_1C4497B38();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v1, v3);
  uint64_t v4 = v0 + *(void *)(*(void *)v0 + 656);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v5(v4, v2);
}

uint64_t sub_1C4143548()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_1C446A4AC();
  uint64_t v3 = v2 + *(void *)(*(void *)v2 + 648);
  uint64_t v4 = *(void *)(v1 + 632);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule();
  uint64_t v5 = sub_1C4497B38();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v2 + *(void *)(*(void *)v2 + 656), v4);
  return v2;
}

uint64_t sub_1C4143698()
{
  sub_1C4143548();
  return swift_deallocClassInstance();
}

uint64_t CRCustomFileSyncManager.publisher.getter()
{
  return sub_1C446A530();
}

uint64_t CRCustomFileSyncManager.__allocating_init(_:sync:at:customSync:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1C4143DC8(a1, a2, a3, a4);
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v4 + 80) - 8) + 8))(a4, *(void *)(v4 + 80));
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule();
  uint64_t v9 = sub_1C4497B38();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a2, v9);

  return v8;
}

uint64_t CRCustomFileSyncManager.init(_:sync:at:customSync:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *v4;
  uint64_t v9 = sub_1C4143C4C(a1, a2, a3, a4);
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v8 + 80) - 8) + 8))(a4, *(void *)(v8 + 80));
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule();
  uint64_t v10 = sub_1C4497B38();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a2, v10);

  return v9;
}

uint64_t CRCustomFileSyncManager.sync(_:)(uint64_t a1)
{
  return sub_1C446A670(a1);
}

uint64_t CRCustomFileSyncManager.sync(_:finished:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C446AA3C(a1, a2, a3);
}

uint64_t CRCustomFileSyncManager.updates.getter()
{
  return sub_1C446E62C();
}

uint64_t CRCustomFileSyncManager.deinit()
{
  swift_release();
  return v0;
}

uint64_t CRCustomFileSyncManager.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

void *sub_1C4143A18(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v19 = a4;
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v8 = *v6;
  uint64_t v9 = sub_1C4496498();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (uint64_t)v6 + *(void *)(v8 + 648);
  uint64_t v14 = *(void *)(v8 + 632);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for Capsule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v13, 1, 1, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))((uint64_t)v6 + *(void *)(*v6 + 656), v19, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  uint64_t v16 = sub_1C4472CE4(v20, v21, v12, v22, v23);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a3, v9);
  return v16;
}

uint64_t sub_1C4143C4C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = sub_1C4496498();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRCustomFileSyncManagerInternals();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  swift_allocObject();
  uint64_t v14 = sub_1C4143A18(a1, a2, (uint64_t)v13, a4, 0, 0);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a3, v10);
  *(void *)(v5 + 16) = v14;
  return v5;
}

uint64_t sub_1C4143DC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4143C4C(a1, a2, a3, a4);
}

uint64_t dispatch thunk of CRCustomFileSync.read(from:context:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of CRCustomFileSync.write(_:to:context:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t sub_1C4143E7C()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Capsule();
  uint64_t result = sub_1C4497B38();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t type metadata accessor for CRCustomFileSyncManagerInternals()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CRCustomFileSyncManager()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for CRCustomFileSyncManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CRCustomFileSyncManager);
}

uint64_t dispatch thunk of CRCustomFileSyncManager.__allocating_init(_:sync:at:customSync:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_1C4144014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v29 = a6;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v25 = a9;
  uint64_t v26 = a3;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a1 + *(int *)(type metadata accessor for Proto_CRDT(0) + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v19, (uint64_t)v15, &qword_1EBBC0648);
  uint64_t v20 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v15, 1, v20) == 1)
  {
    sub_1C3F962E0((uint64_t)v15, &qword_1EBBC0648);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      sub_1C3F72070((uint64_t)v15, (uint64_t)v18, type metadata accessor for Proto_Set);
      goto LABEL_9;
    }
    sub_1C3F9235C((uint64_t)v15, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v21 = *(int *)(v16 + 20);
  if (qword_1EBBC01E8 != -1) {
    swift_once();
  }
  *(void *)&v18[v21] = qword_1EBBC01E0;
  swift_retain();
LABEL_9:
  uint64_t v22 = v30;
  sub_1C41556EC((uint64_t)v18, a2, 0, 0, v26, v27, v28, v29, &v31, a7, a8);
  uint64_t result = sub_1C3F9235C(a1, type metadata accessor for Proto_CRDT);
  if (!v22) {
    *uint64_t v25 = v31;
  }
  return result;
}

uint64_t sub_1C41442A8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_1C4496888();
  uint64_t v12 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  if (qword_1EBBC0668 != -1) {
    swift_once();
  }
  *(void *)(a3 + v12) = qword_1EBBC0660;
  v17[1] = v11;
  swift_retain();
  uint64_t v13 = sub_1C3F51ACC();
  v17[0] = 0;
  uint64_t v14 = sub_1C4497528();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1C4156DA8(v13, a1, v17, a2, v14, WitnessTable, (uint64_t)v10);
  if (v4)
  {
    sub_1C3F9235C(a3, type metadata accessor for Proto_CRDT);
    return swift_release();
  }
  else
  {
    swift_release();
    return sub_1C43F1AEC((uint64_t)v10);
  }
}

__n128 sub_1C4144444@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_1C3F72070(a1, a5, type metadata accessor for FinalizedTimestamp);
  uint64_t v9 = type metadata accessor for CRDictionaryElement();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v9 + 36), a2, a4);
  __n128 result = *a3;
  *(__n128 *)(a5 + *(int *)(v9 + 40)) = *a3;
  return result;
}

uint64_t sub_1C41444F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = sub_1C4496678();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  uint64_t result = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v14 = *(int *)(result + 20);
  uint64_t v15 = *(void *)(v4 + v14);
  if (*(void *)(a1 + v14) > v15) {
    uint64_t v15 = *(void *)(a1 + v14);
  }
  uint64_t v16 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
  }
  else
  {
    sub_1C3F9235C(v4, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v4, v12, v9);
    *(void *)(v4 + v14) = v16;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 24))(v4 + *(int *)(a3 + 36), a2);
    return sub_1C415C6B0(v4, a4, type metadata accessor for FinalizedTimestamp);
  }
  return result;
}

uint64_t sub_1C414469C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5)
{
  v52 = a4;
  uint64_t v56 = a5;
  uint64_t v50 = *(void *)(a5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  v51 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = *(void *)(v9 + 24);
  uint64_t v49 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v7);
  v57 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v15 = *(unsigned int (**)(void, void, void))v14;
  uint64_t v16 = *(unsigned int (**)(void, void, void))(v14 + 8);
  uint64_t v18 = *(int *)(v17 + 48);
  uint64_t v19 = (uint64_t *)(v5 + v18);
  uint64_t v20 = *(void *)(v5 + v18);
  uint64_t v21 = *(void *)(v5 + v18 + 8);
  uint64_t v22 = (uint64_t *)(a1 + v18);
  uint64_t v23 = *v22;
  uint64_t v24 = v22[1];
  uint64_t v54 = v20;
  swift_bridgeObjectRetain();
  uint64_t v53 = v21;
  uint64_t v25 = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1C410EEFC(v13, v24, v16);
  sub_1C410EEFC(v12, v23, v15);
  uint64_t v26 = v58;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = *(int *)(type metadata accessor for FinalizedTimestamp(0) + 20);
  uint64_t v28 = *(void *)(v26 + v27);
  uint64_t v29 = *(void *)(a1 + v27);
  if (v28 == v29)
  {
    if ((sub_1C410BE0C() & 1) == 0)
    {
      if ((sub_1C410BE0C() & 1) == 0)
      {
LABEL_4:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v56 + 24) + 16))(a1 + *(int *)(v56 + 36), v55);
      }
      goto LABEL_9;
    }
  }
  else if (v28 >= v29)
  {
    if (v29 >= v28) {
      goto LABEL_4;
    }
LABEL_9:
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 + 24) + 16))(a1 + *(int *)(v56 + 36), v55);
    v40 = v52;
    if (*v52)
    {
      char v41 = 1;
    }
    else
    {
      uint64_t v47 = *v19;
      swift_bridgeObjectRetain();
      uint64_t v48 = swift_bridgeObjectRetain();
      if (sub_1C4112134(v48, v53)) {
        char v41 = 1;
      }
      else {
        char v41 = sub_1C4112134(v47, v54);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    unsigned char *v40 = v41 & 1;
    return result;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = v56;
  uint64_t v31 = v57;
  uint64_t v33 = v49;
  uint64_t v34 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v57, a1 + *(int *)(v56 + 36), v55);
  uint64_t v35 = v26 + *(int *)(v32 + 36);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 + 24) + 16))(v35, v34);
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 24))(v35, v31, v34);
  sub_1C415C5EC(a1, v26);
  v36 = v51;
  v37 = v52;
  LOBYTE(v35) = *v52;
  uint64_t v38 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v51, a1, v32);
  if (v35)
  {
    char v39 = 1;
  }
  else
  {
    v42 = (uint64_t *)&v36[*(int *)(v32 + 40)];
    uint64_t v43 = *v42;
    uint64_t v44 = v42[1];
    uint64_t v45 = *v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v46 = swift_bridgeObjectRetain();
    if (sub_1C4112134(v46, v44)) {
      char v39 = 1;
    }
    else {
      char v39 = sub_1C4112134(v45, v43);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36 = v51;
  }
  (*(void (**)(char *, uint64_t))(v38 + 8))(v36, v32);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v57, v34);
  unsigned char *v37 = v39 & 1;
  return result;
}

__n128 sub_1C4144B04@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for FinalizedTimestamp(0);
  __n128 v15 = *a3;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a5, 1, 1, v10);
  uint64_t v11 = type metadata accessor for CRDictionaryElement.Delta();
  uint64_t v12 = a5 + *(int *)(v11 + 36);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(v12, 1, 1, a4);
  sub_1C3F98338(a1, a5, &qword_1EBBBF870);
  uint64_t v13 = sub_1C4497B38();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v12, a2, v13);
  __n128 result = v15;
  *(__n128 *)(a5 + *(int *)(v11 + 40)) = v15;
  return result;
}

uint64_t sub_1C4144C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v208 = a4;
  uint64_t v210 = a2;
  uint64_t v213 = a1;
  uint64_t v7 = sub_1C4497B38();
  uint64_t v202 = *(void *)(v7 - 8);
  uint64_t v203 = v7;
  MEMORY[0x1F4188790](v7);
  v173 = (char *)&v164 - v8;
  uint64_t v197 = type metadata accessor for Proto_Value(0);
  uint64_t v199 = *(void *)(v197 - 8);
  MEMORY[0x1F4188790](v197);
  uint64_t v172 = (uint64_t)&v164 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v187 = (uint64_t)&v164 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v184 = (uint64_t)&v164 - v13;
  uint64_t v198 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v192 = *(void *)(v198 - 8);
  MEMORY[0x1F4188790](v198);
  v178 = (unint64_t *)((char *)&v164 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF870);
  MEMORY[0x1F4188790](v15 - 8);
  v179 = (char *)&v164 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v177 = (uint64_t)&v164 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v195 = (uint64_t)&v164 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  uint64_t v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v171 = (uint64_t)&v164 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v183 = (uint64_t)&v164 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v176 = (uint64_t)&v164 - v27;
  MEMORY[0x1F4188790](v26);
  v194 = (uint64_t *)((char *)&v164 - v28);
  uint64_t v206 = type metadata accessor for Proto_Register(0);
  uint64_t v29 = MEMORY[0x1F4188790](v206);
  uint64_t v186 = (uint64_t)&v164 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  v196 = (char *)&v164 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v191 = (uint64_t)&v164 - v34;
  MEMORY[0x1F4188790](v33);
  v189 = (char *)&v164 - v35;
  uint64_t v211 = type metadata accessor for Proto_CRDT(0);
  uint64_t v205 = *(void *)(v211 - 8);
  uint64_t v36 = MEMORY[0x1F4188790](v211);
  uint64_t v185 = (uint64_t)&v164 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v182 = (uint64_t)&v164 - v39;
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  uint64_t v190 = (uint64_t)&v164 - v41;
  MEMORY[0x1F4188790](v40);
  uint64_t v188 = (uint64_t)&v164 - v42;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  uint64_t v44 = MEMORY[0x1F4188790](v43 - 8);
  uint64_t v180 = (uint64_t)&v164 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  uint64_t v181 = (uint64_t)&v164 - v47;
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  uint64_t v175 = (uint64_t)&v164 - v49;
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  v193 = (uint64_t *)((char *)&v164 - v51);
  MEMORY[0x1F4188790](v50);
  uint64_t v53 = (char *)&v164 - v52;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  MEMORY[0x1F4188790](v54 - 8);
  uint64_t v56 = (char *)&v164 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for Proto_Version(0);
  uint64_t v58 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  v60 = (uint64_t *)((char *)&v164 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v61 = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v62 = *(void *)(v61 - 8);
  v169 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 56);
  uint64_t v170 = v61;
  uint64_t v168 = v62 + 56;
  v169(a5, 1, 1);
  uint64_t v200 = type metadata accessor for CRDictionaryElement.Delta();
  uint64_t v63 = *(int *)(v200 + 36);
  uint64_t v209 = a5;
  uint64_t v64 = a5 + v63;
  uint64_t v65 = *(void *)(a3 - 8);
  v66 = *(void (**)(void))(v65 + 56);
  uint64_t v201 = v64;
  uint64_t v174 = a3;
  uint64_t v166 = v65 + 56;
  v167 = v66;
  v66();
  uint64_t v204 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  uint64_t v67 = *(void *)(v213 + v204)
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  sub_1C3F970C4(v67, (uint64_t)v56, &qword_1EBBC0578);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57) == 1)
  {
    uint64_t v68 = MEMORY[0x1E4FBC860];
    void *v60 = MEMORY[0x1E4FBC860];
    v60[1] = v68;
    sub_1C4496888();
    sub_1C3F962E0((uint64_t)v56, &qword_1EBBC0578);
  }
  else
  {
    sub_1C3F72070((uint64_t)v56, (uint64_t)v60, type metadata accessor for Proto_Version);
  }
  uint64_t v69 = v210;
  swift_retain();
  v70 = v207;
  sub_1C3F8F9D0(v60, v69, &v212);
  v71 = v70;
  uint64_t v72 = v209;
  uint64_t v73 = v213;
  uint64_t v74 = v211;
  if (v70)
  {
    swift_release();
    sub_1C3F9235C(v73, type metadata accessor for Proto_Set.Element);
    goto LABEL_6;
  }
  *(_OWORD *)(v209 + *(int *)(v200 + 40)) = v212;
  uint64_t v76 = (uint64_t)v53;
  uint64_t v77 = v74;
  uint64_t v78 = *(void *)(v73 + v204)
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1C3F970C4(v78, v76, &qword_1EBBC04F8);
  uint64_t v80 = v205 + 48;
  v79 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v205 + 48);
  LODWORD(v78) = v79(v76, 1, v77);
  sub_1C3F962E0(v76, &qword_1EBBC04F8);
  if (v78 == 1)
  {
    swift_release();
    return sub_1C3F9235C(v73, type metadata accessor for Proto_Set.Element);
  }
  uint64_t v81 = *(void *)(v73 + v204)
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  v82 = (unsigned int (*)(void, void, void))v193;
  sub_1C3F970C4(v81, (uint64_t)v193, &qword_1EBBC04F8);
  uint64_t v83 = v211;
  unsigned int v84 = v79((uint64_t)v82, 1, v211);
  v165 = 0;
  uint64_t v205 = v80;
  v207 = v79;
  if (v84 == 1)
  {
    uint64_t v85 = v188;
    sub_1C4496888();
    uint64_t v86 = *(int *)(v83 + 20);
    uint64_t v87 = v192;
    uint64_t v88 = (uint64_t)v189;
    if (qword_1EBBC0668 != -1) {
      swift_once();
    }
    *(void *)(v85 + v86) = qword_1EBBC0660;
    swift_retain();
    sub_1C3F962E0((uint64_t)v82, &qword_1EBBC04F8);
    uint64_t v83 = v211;
    uint64_t v89 = v85;
  }
  else
  {
    uint64_t v89 = v188;
    sub_1C3F72070((uint64_t)v82, v188, type metadata accessor for Proto_CRDT);
    uint64_t v87 = v192;
    uint64_t v88 = (uint64_t)v189;
  }
  uint64_t v90 = *(void *)(v89 + *(int *)(v83 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v91 = v90;
  v92 = (uint64_t (*)(void, void, void))v194;
  sub_1C3F970C4(v91, (uint64_t)v194, &qword_1EBBC0648);
  uint64_t v93 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  uint64_t v94 = *(void *)(v93 - 8);
  v95 = *(void **)(v94 + 48);
  uint64_t v192 = v94 + 48;
  v193 = v95;
  unsigned int v96 = ((uint64_t (*)(void, uint64_t, uint64_t))v95)(v92, 1, v93);
  v97 = &byte_1EBBBF000;
  v98 = v196;
  if (v96 == 1)
  {
    sub_1C3F962E0((uint64_t)v92, &qword_1EBBC0648);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_1C3F72070((uint64_t)v92, v88, type metadata accessor for Proto_Register);
      goto LABEL_22;
    }
    sub_1C3F9235C((uint64_t)v92, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v99 = *(int *)(v206 + 20);
  if (qword_1EBBBF248 != -1) {
    swift_once();
  }
  *(void *)(v88 + v99) = qword_1EBBBF238;
  swift_retain();
LABEL_22:
  sub_1C3F9235C(v89, type metadata accessor for Proto_CRDT);
  uint64_t v100 = *(void *)(v88 + *(int *)(v206 + 20))
       + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  uint64_t v101 = v195;
  sub_1C3F970C4(v100, v195, &qword_1EBBC0620);
  v194 = *(void **)(v87 + 48);
  LODWORD(v100) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v194)(v101, 1, v198);
  sub_1C3F962E0(v101, &qword_1EBBC0620);
  sub_1C3F9235C(v88, type metadata accessor for Proto_Register);
  uint64_t v195 = v93;
  if (v100 == 1)
  {
    v102 = v165;
    uint64_t v103 = v213;
    uint64_t v104 = v204;
    v105 = &byte_1EBBBF000;
    uint64_t v106 = (uint64_t)v98;
    goto LABEL_43;
  }
  uint64_t v107 = *(void *)(v213 + v204)
       + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  uint64_t v108 = v175;
  sub_1C3F970C4(v107, v175, &qword_1EBBC04F8);
  uint64_t v109 = v211;
  uint64_t v106 = (uint64_t)v98;
  if (v207(v108, 1, v211) == 1)
  {
    uint64_t v110 = v190;
    sub_1C4496888();
    uint64_t v111 = *(int *)(v109 + 20);
    v112 = v178;
    if (qword_1EBBC0668 != -1) {
      swift_once();
    }
    *(void *)(v110 + v111) = qword_1EBBC0660;
    swift_retain();
    sub_1C3F962E0(v108, &qword_1EBBC04F8);
    uint64_t v109 = v211;
  }
  else
  {
    uint64_t v110 = v190;
    sub_1C3F72070(v108, v190, type metadata accessor for Proto_CRDT);
    v112 = v178;
  }
  uint64_t v113 = *(void *)(v110 + *(int *)(v109 + 20))
       + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v114 = v113;
  uint64_t v115 = v176;
  sub_1C3F970C4(v114, v176, &qword_1EBBC0648);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v193)(v115, 1, v93) == 1)
  {
    v97 = &byte_1EBBBF000;
    v116 = &byte_1EBBBF000;
    sub_1C3F962E0(v115, &qword_1EBBC0648);
    uint64_t v117 = v191;
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v119 = v115;
    uint64_t v117 = v191;
    v97 = &byte_1EBBBF000;
    if (!EnumCaseMultiPayload)
    {
      sub_1C3F72070(v119, v191, type metadata accessor for Proto_Register);
      goto LABEL_36;
    }
    v116 = &byte_1EBBBF000;
    sub_1C3F9235C(v119, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v120 = *(int *)(v206 + 20);
  if (*((void *)v97 + 73) != -1) {
    swift_once();
  }
  *(void *)(v117 + v120) = *((void *)v116 + 71);
  swift_retain();
LABEL_36:
  sub_1C3F9235C(v190, type metadata accessor for Proto_CRDT);
  uint64_t v121 = *(void *)(v117 + *(int *)(v206 + 20))
       + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  uint64_t v122 = v177;
  sub_1C3F970C4(v121, v177, &qword_1EBBC0620);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v194)(v122, 1, v198) == 1)
  {
    unint64_t *v112 = 0;
    v112[1] = 0;
    sub_1C4496888();
    sub_1C3F962E0(v122, &qword_1EBBC0620);
  }
  else
  {
    sub_1C3F72070(v122, (uint64_t)v112, type metadata accessor for Proto_Timestamp);
  }
  uint64_t v103 = v213;
  uint64_t v123 = (uint64_t)v179;
  sub_1C3F9235C(v191, type metadata accessor for Proto_Register);
  uint64_t v124 = v210;
  swift_retain();
  v125 = v165;
  sub_1C43A3E60(v112, v124, v123);
  v102 = v125;
  if (!v125)
  {
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v169)(v123, 0, 1, v170);
    sub_1C3F98338(v123, v209, &qword_1EBBBF870);
    uint64_t v104 = v204;
    v105 = &byte_1EBBBF000;
LABEL_43:
    uint64_t v126 = *(void *)(v103 + v104) + *((void *)v105 + 62);
    swift_beginAccess();
    uint64_t v127 = v181;
    sub_1C3F970C4(v126, v181, &qword_1EBBC04F8);
    uint64_t v128 = v211;
    unsigned int v129 = v207(v127, 1, v211);
    uint64_t v130 = v182;
    if (v129 == 1)
    {
      sub_1C4496888();
      uint64_t v131 = *(int *)(v128 + 20);
      if (qword_1EBBC0668 != -1) {
        swift_once();
      }
      *(void *)(v130 + v131) = qword_1EBBC0660;
      swift_retain();
      sub_1C3F962E0(v127, &qword_1EBBC04F8);
      uint64_t v128 = v211;
    }
    else
    {
      sub_1C3F72070(v127, v182, type metadata accessor for Proto_CRDT);
    }
    uint64_t v132 = *(void *)(v130 + *(int *)(v128 + 20))
         + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v133 = v132;
    uint64_t v134 = v183;
    sub_1C3F970C4(v133, v183, &qword_1EBBC0648);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v193)(v134, 1, v195) == 1)
    {
      sub_1C3F962E0(v134, &qword_1EBBC0648);
    }
    else
    {
      if (!swift_getEnumCaseMultiPayload())
      {
        sub_1C3F72070(v134, v106, type metadata accessor for Proto_Register);
        goto LABEL_55;
      }
      sub_1C3F9235C(v134, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    }
    sub_1C4496888();
    uint64_t v135 = *(int *)(v206 + 20);
    if (*((void *)v97 + 73) != -1) {
      swift_once();
    }
    *(void *)(v106 + v135) = qword_1EBBBF238;
    swift_retain();
LABEL_55:
    sub_1C3F9235C(v130, type metadata accessor for Proto_CRDT);
    uint64_t v136 = *(void *)(v106 + *(int *)(v206 + 20))
         + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
    swift_beginAccess();
    uint64_t v137 = v184;
    sub_1C3F970C4(v136, v184, &qword_1EBBC0540);
    v138 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v199 + 48);
    v199 += 48;
    LODWORD(v136) = v138(v137, 1, v197);
    sub_1C3F962E0(v137, &qword_1EBBC0540);
    sub_1C3F9235C(v106, type metadata accessor for Proto_Register);
    if (v136 == 1)
    {
      swift_release();
      return sub_1C3F9235C(v213, type metadata accessor for Proto_Set.Element);
    }
    uint64_t v139 = *(void *)(v213 + v204)
         + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
    swift_beginAccess();
    uint64_t v140 = v139;
    uint64_t v141 = v180;
    sub_1C3F970C4(v140, v180, &qword_1EBBC04F8);
    uint64_t v142 = v211;
    if (v207(v141, 1, v211) == 1)
    {
      uint64_t v143 = v185;
      sub_1C4496888();
      uint64_t v144 = *(int *)(v142 + 20);
      uint64_t v145 = v187;
      if (qword_1EBBC0668 != -1) {
        swift_once();
      }
      *(void *)(v143 + v144) = qword_1EBBC0660;
      swift_retain();
      sub_1C3F962E0(v180, &qword_1EBBC04F8);
    }
    else
    {
      uint64_t v143 = v185;
      sub_1C3F72070(v141, v185, type metadata accessor for Proto_CRDT);
      uint64_t v145 = v187;
    }
    uint64_t v146 = *(void *)(v143 + *(int *)(v142 + 20))
         + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v147 = v146;
    uint64_t v148 = v171;
    sub_1C3F970C4(v147, v171, &qword_1EBBC0648);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v193)(v148, 1, v195) == 1)
    {
      v149 = v138;
      sub_1C3F962E0(v148, &qword_1EBBC0648);
      uint64_t v72 = v209;
      uint64_t v150 = v210;
      v151 = v173;
      uint64_t v152 = v186;
    }
    else
    {
      int v153 = swift_getEnumCaseMultiPayload();
      uint64_t v72 = v209;
      uint64_t v150 = v210;
      v151 = v173;
      uint64_t v154 = v148;
      uint64_t v152 = v186;
      if (!v153)
      {
        sub_1C3F72070(v154, v186, type metadata accessor for Proto_Register);
LABEL_69:
        sub_1C3F9235C(v185, type metadata accessor for Proto_CRDT);
        uint64_t v156 = *(void *)(v152 + *(int *)(v206 + 20))
             + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
        swift_beginAccess();
        sub_1C3F970C4(v156, v145, &qword_1EBBC0540);
        uint64_t v157 = v197;
        if (v138(v145, 1, v197) == 1)
        {
          uint64_t v158 = v172;
          sub_1C4496888();
          uint64_t v159 = *(int *)(v157 + 20);
          uint64_t v160 = v213;
          uint64_t v161 = v174;
          if (qword_1EBBBF8C8 != -1) {
            swift_once();
          }
          *(void *)(v158 + v159) = qword_1EBBBF8B8;
          swift_retain();
          sub_1C3F962E0(v187, &qword_1EBBC0540);
        }
        else
        {
          uint64_t v162 = v145;
          uint64_t v158 = v172;
          sub_1C3F72070(v162, v172, type metadata accessor for Proto_Value);
          uint64_t v160 = v213;
          uint64_t v161 = v174;
        }
        sub_1C3F9235C(v186, type metadata accessor for Proto_Register);
        type metadata accessor for CRDecoder(0);
        swift_allocObject();
        swift_retain();
        uint64_t v163 = sub_1C3F974B0(v158, v150);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v208 + 8) + 8) + 8))(v163, v161);
        if (!v102)
        {
          swift_release();
          sub_1C3F9235C(v160, type metadata accessor for Proto_Set.Element);
          ((void (*)(char *, void, uint64_t, uint64_t))v167)(v151, 0, 1, v161);
          return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v202 + 40))(v201, v151, v203);
        }
        swift_release();
        sub_1C3F9235C(v160, type metadata accessor for Proto_Set.Element);
        goto LABEL_76;
      }
      v149 = v138;
      sub_1C3F9235C(v154, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    }
    sub_1C4496888();
    uint64_t v155 = *(int *)(v206 + 20);
    if (qword_1EBBBF248 != -1) {
      swift_once();
    }
    *(void *)(v152 + v155) = qword_1EBBBF238;
    swift_retain();
    v138 = v149;
    uint64_t v145 = v187;
    goto LABEL_69;
  }
  swift_release();
  sub_1C3F9235C(v103, type metadata accessor for Proto_Set.Element);
  uint64_t v72 = v209;
LABEL_76:
  v71 = v165;
LABEL_6:
  sub_1C3F962E0(v72, &qword_1EBBBF870);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v202 + 8))(v201, v203);
  if (!v71)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C414644C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v172 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v138 = (uint64_t)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v137 = (uint64_t)&v132 - v9;
  uint64_t v136 = type metadata accessor for Proto_Value(0);
  uint64_t v135 = *(void *)(v136 - 8);
  MEMORY[0x1F4188790](v136);
  uint64_t v148 = (uint64_t)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v161 = sub_1C4497B38();
  uint64_t v160 = *(void *)(v161 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v161);
  uint64_t v159 = (char *)&v132 - v13;
  uint64_t v164 = v11;
  uint64_t v163 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v150 = (char *)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v144 = (uint64_t)&v132 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v143 = (uint64_t)&v132 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v134 = (uint64_t)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v141 = (uint64_t)&v132 - v22;
  uint64_t v146 = type metadata accessor for Proto_Register(0);
  uint64_t v23 = MEMORY[0x1F4188790](v146);
  uint64_t v139 = (char *)&v132 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  v151 = (char *)&v132 - v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  uint64_t v27 = MEMORY[0x1F4188790](v26 - 8);
  uint64_t v133 = (uint64_t)&v132 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v149 = (uint64_t)&v132 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v147 = (uint64_t)&v132 - v32;
  MEMORY[0x1F4188790](v31);
  uint64_t v140 = (uint64_t)&v132 - v33;
  uint64_t v34 = type metadata accessor for Proto_CRDT(0);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v166 = v34;
  uint64_t v167 = v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v145 = (uint64_t)&v132 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  uint64_t v158 = (uint64_t)&v132 - v38;
  uint64_t v156 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v142 = *(void *)(v156 - 8);
  MEMORY[0x1F4188790](v156);
  uint64_t v155 = (uint64_t *)((char *)&v132 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF870);
  MEMORY[0x1F4188790](v40 - 8);
  uint64_t v153 = (uint64_t)&v132 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v152 = *(void *)(v154 - 8);
  MEMORY[0x1F4188790](v154);
  uint64_t v157 = (uint64_t)&v132 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  uint64_t v44 = MEMORY[0x1F4188790](v43 - 8);
  uint64_t v46 = (char *)&v132 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v44);
  uint64_t v48 = (char *)&v132 - v47;
  uint64_t v49 = type metadata accessor for Proto_Version(0);
  uint64_t v50 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v52 = (uint64_t *)((char *)&v132 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1C4496888();
  uint64_t v53 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  if (qword_1EBBBF1E0 != -1) {
    swift_once();
  }
  *(void *)(a3 + v53) = qword_1EBBBF1D8;
  uint64_t v162 = a2;
  uint64_t v54 = *(int *)(a2 + 40);
  uint64_t v168 = v53;
  uint64_t v169 = v3;
  uint64_t v55 = (uint64_t *)(v3 + v54);
  uint64_t v56 = v55[1];
  uint64_t v170 = *v55;
  uint64_t v171 = v56;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1C3F9FF10(v172, v52);
  uint64_t v57 = v168;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    uint64_t v58 = swift_retain();
    *(void *)(a3 + v57) = sub_1C3F97F64(v58);
    swift_release();
  }
  uint64_t v59 = *(void *)(a3 + v57);
  sub_1C3F72070((uint64_t)v52, (uint64_t)v48, type metadata accessor for Proto_Version);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v48, 0, 1, v49);
  sub_1C3F961BC((uint64_t)v48, (uint64_t)v46, &qword_1EBBC0578);
  uint64_t v60 = v59 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338((uint64_t)v46, v60, &qword_1EBBC0578);
  swift_endAccess();
  swift_release();
  uint64_t v61 = v153;
  sub_1C3F970C4(v169, v153, &qword_1EBBBF870);
  uint64_t v62 = v154;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48))(v61, 1, v154) == 1)
  {
    sub_1C3F962E0(v61, &qword_1EBBBF870);
    uint64_t v64 = v164;
    uint64_t v63 = v165;
    uint64_t v65 = v163;
    uint64_t v66 = v172;
    goto LABEL_24;
  }
  uint64_t v67 = v61;
  uint64_t v68 = v157;
  sub_1C3F72070(v67, v157, type metadata accessor for FinalizedTimestamp);
  uint64_t v69 = v155;
  sub_1C4496888();
  uint64_t v70 = sub_1C3FA10C4(v68);
  uint64_t v71 = *(void *)(v68 + *(int *)(v62 + 20));
  *uint64_t v69 = v70;
  v69[1] = v71;
  uint64_t v72 = *(void *)(a3 + v57)
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  uint64_t v73 = v140;
  sub_1C3F970C4(v72, v140, &qword_1EBBC04F8);
  uint64_t v74 = v166;
  int v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v73, 1, v166);
  uint64_t v76 = v146;
  if (v75 == 1)
  {
    uint64_t v77 = v158;
    sub_1C4496888();
    uint64_t v78 = *(int *)(v74 + 20);
    uint64_t v63 = v165;
    uint64_t v79 = (uint64_t)v151;
    if (qword_1EBBC0668 != -1) {
      swift_once();
    }
    *(void *)(v77 + v78) = qword_1EBBC0660;
    swift_retain();
    sub_1C3F962E0(v73, &qword_1EBBC04F8);
  }
  else
  {
    uint64_t v77 = v158;
    sub_1C3F72070(v73, v158, type metadata accessor for Proto_CRDT);
    uint64_t v63 = v165;
    uint64_t v79 = (uint64_t)v151;
  }
  uint64_t v80 = *(void *)(v77 + *(int *)(v74 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v81 = v141;
  sub_1C3F970C4(v80, v141, &qword_1EBBC0648);
  uint64_t v82 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 48))(v81, 1, v82) == 1)
  {
    sub_1C3F962E0(v81, &qword_1EBBC0648);
LABEL_16:
    sub_1C4496888();
    uint64_t v83 = *(int *)(v76 + 20);
    if (qword_1EBBBF248 != -1) {
      swift_once();
    }
    *(void *)(v79 + v83) = qword_1EBBBF238;
    swift_retain();
    goto LABEL_19;
  }
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1C3F9235C(v81, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_16;
  }
  sub_1C3F72070(v81, v79, type metadata accessor for Proto_Register);
LABEL_19:
  uint64_t v84 = *(int *)(v76 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Register._StorageClass(0);
    swift_allocObject();
    uint64_t v85 = swift_retain();
    uint64_t v86 = sub_1C3FB87F8(v85);
    uint64_t v79 = (uint64_t)v151;
    *(void *)&v151[v84] = v86;
    swift_release();
  }
  uint64_t v87 = *(void *)(v79 + v84);
  uint64_t v88 = v143;
  sub_1C3F72070((uint64_t)v155, v143, type metadata accessor for Proto_Timestamp);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v142 + 56))(v88, 0, 1, v156);
  uint64_t v89 = v144;
  sub_1C3F961BC(v88, v144, &qword_1EBBC0620);
  uint64_t v90 = v87 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v89, v90, &qword_1EBBC0620);
  swift_endAccess();
  swift_release();
  uint64_t v91 = v158;
  sub_1C43F10C0(v79);
  uint64_t v92 = v168;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    uint64_t v93 = swift_retain();
    *(void *)(a3 + v92) = sub_1C3F97F64(v93);
    swift_release();
  }
  uint64_t v94 = *(void *)(a3 + v92);
  uint64_t v95 = v147;
  sub_1C3F72070(v91, v147, type metadata accessor for Proto_CRDT);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v167 + 56))(v95, 0, 1, v74);
  uint64_t v96 = v149;
  sub_1C3F961BC(v95, v149, &qword_1EBBC04F8);
  uint64_t v97 = v94 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v96, v97, &qword_1EBBC04F8);
  swift_endAccess();
  swift_release();
  sub_1C3F9235C(v157, type metadata accessor for FinalizedTimestamp);
  uint64_t v66 = v172;
  uint64_t v64 = v164;
  uint64_t v65 = v163;
LABEL_24:
  uint64_t v98 = v162;
  uint64_t v99 = v160;
  uint64_t v100 = v159;
  uint64_t v101 = v161;
  (*(void (**)(char *, uint64_t, uint64_t))(v160 + 16))(v159, v169 + *(int *)(v162 + 36), v161);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v100, 1, v64) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v100, v101);
  }
  uint64_t v103 = v150;
  uint64_t v104 = (*(uint64_t (**)(char *, char *, uint64_t))(v65 + 32))(v150, v100, v64);
  MEMORY[0x1F4188790](v104);
  uint64_t v105 = *(void *)(v98 + 24);
  *(&v132 - 4) = v64;
  *(&v132 - 3) = v105;
  *(&v132 - 2) = (uint64_t)v103;
  *(&v132 - 1) = v66;
  sub_1C3F6DC00((void (*)(uint64_t))sub_1C4018244, v148);
  if (v63)
  {
    sub_1C3F9235C(a3, type metadata accessor for Proto_Set.Element);
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v103, v64);
  }
  uint64_t v106 = *(void *)(a3 + v168)
       + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  uint64_t v107 = v133;
  sub_1C3F970C4(v106, v133, &qword_1EBBC04F8);
  uint64_t v108 = v166;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v107, 1, v166) == 1)
  {
    uint64_t v109 = v145;
    sub_1C4496888();
    uint64_t v110 = *(int *)(v108 + 20);
    uint64_t v111 = (uint64_t)v139;
    uint64_t v112 = v146;
    if (qword_1EBBC0668 != -1) {
      swift_once();
    }
    *(void *)(v109 + v110) = qword_1EBBC0660;
    swift_retain();
    sub_1C3F962E0(v107, &qword_1EBBC04F8);
  }
  else
  {
    uint64_t v109 = v145;
    sub_1C3F72070(v107, v145, type metadata accessor for Proto_CRDT);
    uint64_t v111 = (uint64_t)v139;
    uint64_t v112 = v146;
  }
  uint64_t v113 = *(void *)(v109 + *(int *)(v166 + 20))
       + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v114 = v134;
  sub_1C3F970C4(v113, v134, &qword_1EBBC0648);
  uint64_t v115 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  uint64_t v116 = v64;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 48))(v114, 1, v115) == 1)
  {
    sub_1C3F962E0(v114, &qword_1EBBC0648);
LABEL_38:
    sub_1C4496888();
    uint64_t v117 = *(int *)(v112 + 20);
    if (qword_1EBBBF248 != -1) {
      swift_once();
    }
    *(void *)(v111 + v117) = qword_1EBBBF238;
    swift_retain();
    goto LABEL_41;
  }
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1C3F9235C(v114, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_38;
  }
  sub_1C3F72070(v114, v111, type metadata accessor for Proto_Register);
LABEL_41:
  uint64_t v118 = v65;
  uint64_t v119 = *(int *)(v112 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Register._StorageClass(0);
    swift_allocObject();
    uint64_t v120 = swift_retain();
    uint64_t v121 = sub_1C3FB87F8(v120);
    uint64_t v111 = (uint64_t)v139;
    *(void *)&v139[v119] = v121;
    swift_release();
  }
  uint64_t v122 = *(void *)(v111 + v119);
  uint64_t v123 = v137;
  sub_1C3F72070(v148, v137, type metadata accessor for Proto_Value);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v135 + 56))(v123, 0, 1, v136);
  uint64_t v124 = v138;
  sub_1C3F961BC(v123, v138, &qword_1EBBC0540);
  uint64_t v125 = v122 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v124, v125, &qword_1EBBC0540);
  swift_endAccess();
  swift_release();
  sub_1C43F10C0(v111);
  uint64_t v126 = v168;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    uint64_t v127 = swift_retain();
    *(void *)(a3 + v126) = sub_1C3F97F64(v127);
    swift_release();
  }
  uint64_t v128 = *(void *)(a3 + v126);
  uint64_t v129 = v147;
  sub_1C3F72070(v145, v147, type metadata accessor for Proto_CRDT);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v167 + 56))(v129, 0, 1, v166);
  uint64_t v130 = v149;
  sub_1C3F961BC(v129, v149, &qword_1EBBC04F8);
  uint64_t v131 = v128 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v130, v131, &qword_1EBBC04F8);
  swift_endAccess();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v118 + 8))(v150, v116);
}

uint64_t sub_1C41478CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v95 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))a1;
  uint64_t v92 = a3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = sub_1C4497B38();
  uint64_t v90 = *(void *)(v5 - 8);
  uint64_t v91 = v5;
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v85 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v84 = (char *)&v79 - v9;
  uint64_t v89 = *(void *)(v4 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v80 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v79 = (char *)&v79 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v81 = (char *)&v79 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF870);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v83 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v86 = (uint64_t)&v79 - v18;
  uint64_t v19 = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v93 = *(void *)(v19 - 8);
  uint64_t v94 = v19;
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  uint64_t v82 = (char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v79 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v26 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v79 - v25);
  uint64_t v96 = a2;
  uint64_t v87 = *(void *)(a2 + 24);
  uint64_t v88 = v4;
  uint64_t v27 = type metadata accessor for CRDictionaryElement();
  uint64_t v28 = sub_1C4497B38();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v32 = (char *)&v79 - v31;
  uint64_t v33 = *(void *)(v27 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v30);
  uint64_t v36 = (char *)&v79 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x1F4188790](v34);
  uint64_t v39 = (char *)&v79 - v38;
  MEMORY[0x1F4188790](v37);
  uint64_t v41 = (char *)&v79 - v40;
  (*(void (**)(char *, uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t))(v29 + 16))(v32, v95, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v32, 1, v27) == 1)
  {
    uint64_t v86 = v27;
    uint64_t v42 = (uint64_t)v24;
    uint64_t v95 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))v33;
    uint64_t v43 = (uint64_t)v82;
    uint64_t v44 = v85;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v28);
    uint64_t v45 = v97;
    uint64_t v46 = (uint64_t)v83;
    sub_1C3F970C4(v97, (uint64_t)v83, &qword_1EBBBF870);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v46, 1, v94) == 1)
    {
      sub_1C3F962E0(v46, &qword_1EBBBF870);
      uint64_t v47 = v92;
      return v95[7](v47, 1, 1, v86);
    }
    uint64_t v53 = v42;
    sub_1C3F72070(v46, v42, type metadata accessor for FinalizedTimestamp);
    uint64_t v54 = v96;
    uint64_t v56 = v90;
    uint64_t v55 = v91;
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v44, v45 + *(int *)(v96 + 36), v91);
    uint64_t v57 = v88;
    uint64_t v58 = v89;
    int v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v89 + 48))(v44, 1, v88);
    uint64_t v47 = v92;
    if (v59 == 1)
    {
      sub_1C3F9235C(v53, type metadata accessor for FinalizedTimestamp);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v44, v55);
      return v95[7](v47, 1, 1, v86);
    }
    uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
    uint64_t v74 = v79;
    v73(v79, v44, v57);
    sub_1C3F72070(v53, v43, type metadata accessor for FinalizedTimestamp);
    uint64_t v75 = (uint64_t)v80;
    v73(v80, v74, v57);
    uint64_t v76 = (unint64_t *)(v97 + *(int *)(v54 + 40));
    unint64_t v77 = v76[1];
    v98.n128_u64[0] = *v76;
    v98.n128_u64[1] = v77;
    __n128 v78 = sub_1C4144444(v43, v75, &v98, v57, v47);
    ((void (*)(uint64_t, void, uint64_t, uint64_t, __n128))v95[7])(v47, 0, 1, v86, v78);
  }
  else
  {
    uint64_t v83 = v36;
    uint64_t v95 = v26;
    uint64_t v48 = v84;
    uint64_t v85 = *(char **)(v33 + 32);
    ((void (*)(char *, char *, uint64_t))v85)(v41, v32, v27);
    uint64_t v49 = v97;
    uint64_t v50 = v86;
    sub_1C3F970C4(v97, v86, &qword_1EBBBF870);
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v39, v41, v27);
    uint64_t v51 = v33;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v50, 1, v94) == 1)
    {
      sub_1C415C6B0((uint64_t)v39, (uint64_t)v95, type metadata accessor for FinalizedTimestamp);
      uint64_t v52 = *(void (**)(char *, uint64_t))(v33 + 8);
      v52(v39, v27);
      sub_1C3F962E0(v50, &qword_1EBBBF870);
    }
    else
    {
      uint64_t v52 = *(void (**)(char *, uint64_t))(v33 + 8);
      v52(v39, v27);
      sub_1C3F72070(v50, (uint64_t)v95, type metadata accessor for FinalizedTimestamp);
    }
    uint64_t v61 = v88;
    uint64_t v62 = (uint64_t)v83;
    uint64_t v63 = v49 + *(int *)(v96 + 36);
    uint64_t v65 = v90;
    uint64_t v64 = v91;
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v48, v63, v91);
    ((void (*)(uint64_t, char *, uint64_t))v85)(v62, v41, v27);
    uint64_t v66 = v62;
    uint64_t v67 = v89;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v48, 1, v61) == 1)
    {
      uint64_t v68 = (uint64_t)v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v81, v66 + *(int *)(v27 + 36), v61);
      v52((char *)v66, v27);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v48, v64);
    }
    else
    {
      v52((char *)v66, v27);
      uint64_t v68 = (uint64_t)v81;
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v81, v48, v61);
    }
    uint64_t v69 = v92;
    uint64_t v70 = (unint64_t *)(v97 + *(int *)(v96 + 40));
    unint64_t v71 = v70[1];
    v98.n128_u64[0] = *v70;
    v98.n128_u64[1] = v71;
    __n128 v72 = sub_1C4144444((uint64_t)v95, v68, &v98, v61, v92);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t, __n128))(v51 + 56))(v69, 0, 1, v27, v72);
  }
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C41481D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1C4144C4C(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t sub_1C41481F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C414644C(a1, a2, a3);
}

uint64_t sub_1C4148214@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v93 = a1;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v91 = a4;
  uint64_t v92 = v7;
  uint64_t v8 = sub_1C4497B38();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v89 = (char *)&v83 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF870);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v88 = (uint64_t)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v87 = *(void *)(v90 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v90);
  uint64_t v14 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v86 = (uint64_t)&v83 - v15;
  uint64_t v16 = sub_1C4497B38();
  uint64_t v95 = *(void *)(v16 - 8);
  uint64_t v96 = v16;
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v85 = (char *)&v83 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v94 = (char *)&v83 - v23;
  uint64_t v97 = *(void *)(a3 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v83 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v83 - v27;
  uint64_t v30 = *a2;
  uint64_t v29 = a2[1];
  uint64_t v32 = *(int *)(v31 + 48);
  uint64_t v98 = v4;
  uint64_t v33 = (uint64_t *)(v4 + v32);
  uint64_t v35 = *v33;
  unint64_t v34 = v33[1];
  swift_bridgeObjectRetain();
  uint64_t v36 = swift_bridgeObjectRetain();
  if ((sub_1C4112134(v36, v29) & 1) == 0)
  {
    uint64_t v84 = v26;
    char v37 = sub_1C4112134(v35, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v37) {
      goto LABEL_4;
    }
    uint64_t v60 = v95;
    uint64_t v59 = v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v19, v93, v96);
    uint64_t v61 = v97;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v19, 1, a3) == 1)
    {
      (*(void (**)(char *, uint64_t))(v60 + 8))(v19, v59);
LABEL_20:
      uint64_t v77 = type metadata accessor for CRDictionaryElement.Delta();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v91, 1, 1, v77);
    }
    uint64_t v69 = v84;
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v84, v19, a3);
    uint64_t v70 = v90;
    uint64_t v71 = *(int *)(v90 + 20);
    uint64_t v72 = *(void *)&v69[v71];
    uint64_t v73 = v98;
    uint64_t v74 = *(void *)(v98 + v71);
    if (v72 == v74)
    {
      char v75 = sub_1C410BE0C();
      uint64_t v76 = v92;
      if ((v75 & 1) == 0)
      {
LABEL_19:
        (*(void (**)(char *, uint64_t))(v61 + 8))(v69, a3);
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v76 = v92;
      if (v72 >= v74) {
        goto LABEL_19;
      }
    }
    uint64_t v78 = v88;
    sub_1C415C6B0(v73, v88, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v87 + 56))(v78, 0, 1, v70);
    uint64_t v79 = v73 + *(int *)(a3 + 36);
    uint64_t v80 = *(void *)(v76 - 8);
    uint64_t v81 = (uint64_t)v89;
    (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v89, v79, v76);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v80 + 56))(v81, 0, 1, v76);
    v100.n128_u64[0] = MEMORY[0x1E4FBC868];
    v100.n128_u64[1] = MEMORY[0x1E4FBC868];
    uint64_t v67 = v91;
    __n128 v82 = sub_1C4144B04(v78, v81, &v100, v76, v91);
    (*(void (**)(char *, uint64_t, __n128))(v61 + 8))(v69, a3, v82);
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_4:
  uint64_t v83 = v14;
  v100.n128_u64[0] = v35;
  v100.n128_u64[1] = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1C3FAB740(v29);
  sub_1C3FAB740(v30);
  uint64_t v38 = v97;
  uint64_t v39 = v93;
  uint64_t v84 = *(char **)(v97 + 48);
  int v40 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v84)(v93, 1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v28, v98, a3);
  uint64_t v41 = v95;
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 16);
  uint64_t v43 = (uint64_t)v28;
  uint64_t v44 = v94;
  uint64_t v45 = v39;
  uint64_t v46 = v96;
  v42(v94, v45, v96);
  if (v40 == 1)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v46);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v43, a3);
    uint64_t v47 = v92;
    uint64_t v48 = v90;
    goto LABEL_13;
  }
  uint64_t v93 = v43;
  uint64_t v49 = v86;
  sub_1C415C6B0(v43, v86, type metadata accessor for FinalizedTimestamp);
  uint64_t v50 = (uint64_t)v85;
  v42(v85, (uint64_t)v44, v46);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v84)(v50, 1, a3);
  if (result != 1)
  {
    uint64_t v52 = (uint64_t)v83;
    sub_1C415C6B0(v50, (uint64_t)v83, type metadata accessor for FinalizedTimestamp);
    uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
    v53(v50, a3);
    uint64_t v48 = v90;
    uint64_t v54 = *(int *)(v90 + 20);
    uint64_t v55 = *(void *)(v52 + v54);
    uint64_t v56 = *(void *)(v49 + v54);
    uint64_t v57 = v49;
    if (v55 == v56) {
      char v58 = sub_1C410BE0C();
    }
    else {
      char v58 = v55 < v56;
    }
    uint64_t v47 = v92;
    sub_1C3F9235C(v52, type metadata accessor for FinalizedTimestamp);
    sub_1C3F9235C(v57, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v94, v96);
    v53(v93, a3);
    if ((v58 & 1) == 0)
    {
      uint64_t v63 = v88;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 56))(v88, 1, 1, v48);
      uint64_t v66 = (uint64_t)v89;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v89, 1, 1, v47);
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v62 = v98;
    uint64_t v63 = v88;
    sub_1C415C6B0(v98, v88, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v87 + 56))(v63, 0, 1, v48);
    uint64_t v64 = v62 + *(int *)(a3 + 36);
    uint64_t v65 = *(void *)(v47 - 8);
    uint64_t v66 = (uint64_t)v89;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v89, v64, v47);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v66, 0, 1, v47);
LABEL_15:
    __n128 v99 = v100;
    uint64_t v67 = v91;
    sub_1C4144B04(v63, v66, &v99, v47, v91);
LABEL_16:
    uint64_t v68 = type metadata accessor for CRDictionaryElement.Delta();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v67, 0, 1, v68);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C4148B60()
{
  return 0;
}

uint64_t sub_1C4148C1C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(v2 + *(int *)(a1 + 40));
  uint64_t v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t (*sub_1C4148C60())(void, void)
{
  return nullsub_1;
}

void *sub_1C4148C90(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1C4148CFC(a1, a2, a3, a4, a5);
}

void *sub_1C4148CFC(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_retain();
  sub_1C4496668();
  sub_1C415C6B0(a5, v5 + qword_1EBBC59A8, type metadata accessor for FinalizedTimestamp);
  swift_release();
  long long v13 = *a2;
  uint64_t v11 = sub_1C3F721A8(a1, &v13, a3, a4);
  sub_1C3F9235C(a5, type metadata accessor for FinalizedTimestamp);
  return v11;
}

void sub_1C4148DD8()
{
}

void *sub_1C4148E14()
{
  return sub_1C4148E48();
}

void *sub_1C4148E48()
{
  uint64_t v1 = v0 + qword_1EBBC59B0;
  swift_retain();
  sub_1C4496668();
  uint64_t v2 = v0 + qword_1EBBC59A8;
  uint64_t v3 = sub_1C4496678();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v2, v1, v3);
  *(void *)(v2 + *(int *)(type metadata accessor for FinalizedTimestamp(0) + 20)) = 0;
  swift_release();
  return sub_1C3F71564();
}

void *sub_1C4148EF8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1EBBC10F0 != -1) {
    swift_once();
  }
  swift_retain();
  sub_1C3F70B40(0, v15);
  v13[0] = v15[0];
  v13[1] = v15[1];
  sub_1C3F73AF0((uint64_t)v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v5 = qword_1EBBC00D0;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  type metadata accessor for ReplicaState();
  sub_1C4497A58();
  swift_release();
  uint64_t v6 = v15[0];
  swift_beginAccess();
  uint64_t v7 = v1[4];
  *(void *)&long long v14 = v1[3];
  *((void *)&v14 + 1) = v7;
  swift_beginAccess();
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = (uint64_t)v1 + qword_1EBBC59A8;
  swift_beginAccess();
  sub_1C415C6B0(v10, (uint64_t)v4, type metadata accessor for FinalizedTimestamp);
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1C4148CFC(v6, &v14, v8, v9, (uint64_t)v4);
}

uint64_t sub_1C414915C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 440);
  uint64_t v6 = type metadata accessor for CRDictionaryElement();
  uint64_t v7 = sub_1C4497B38();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v20 - v9;
  swift_beginAccess();
  uint64_t v11 = v2[5];
  uint64_t v12 = *(void *)(v4 + 432);
  uint64_t v13 = *(void *)(v4 + 456);
  swift_bridgeObjectRetain();
  MEMORY[0x1C877FC90](a1, v11, v12, v6, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v10, 1, v6))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v14 = *(void *)(v5 - 8);
    uint64_t v15 = 1;
    uint64_t v16 = v20;
  }
  else
  {
    uint64_t v17 = &v10[*(int *)(v6 + 36)];
    uint64_t v14 = *(void *)(v5 - 8);
    uint64_t v18 = v20;
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v20, v17, v5);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v15 = 0;
    uint64_t v16 = v18;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v16, v15, 1, v5);
}

uint64_t sub_1C41493F0(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v90 = (char *)a2;
  uint64_t v79 = (void *)*v2;
  uint64_t v5 = v79[54];
  uint64_t v6 = v79[55];
  uint64_t v82 = v79[58];
  uint64_t v7 = type metadata accessor for CRDictionaryElement();
  swift_getTupleTypeMetadata2();
  uint64_t v8 = sub_1C4497B38();
  uint64_t v87 = *(char **)(v8 - 8);
  uint64_t v88 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v86 = (uint64_t)&v71 - v9;
  uint64_t v10 = type metadata accessor for Timestamp(0);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v75 = (uint64_t)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v5 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v77 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v78 = (char *)&v71 - v17;
  uint64_t v85 = v7;
  uint64_t v84 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v81 = (uint64_t)&v71 - v18;
  uint64_t v89 = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v19 = MEMORY[0x1F4188790](v89);
  uint64_t v76 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v74 = (uint64_t)&v71 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v83 = (char *)&v71 - v23;
  uint64_t v24 = sub_1C4497B38();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v71 - v27;
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v26);
  uint64_t v80 = (char *)&v71 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v33 = (char *)&v71 - v32;
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v28, a1, v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v28, 1, v6) == 1)
  {
    unint64_t v34 = *(void (**)(char *, uint64_t))(v25 + 8);
    v34(v28, v24);
    uint64_t v35 = v86;
    uint64_t v36 = (uint64_t)v90;
    sub_1C437E570((uint64_t)v90, v86);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v36, v5);
    v34(a1, v24);
    return (*((uint64_t (**)(uint64_t, uint64_t))v87 + 1))(v35, v88);
  }
  uint64_t v86 = v25;
  uint64_t v72 = v24;
  uint64_t v88 = v5;
  uint64_t v73 = a1;
  uint64_t v71 = v29;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  uint64_t v87 = v33;
  v38(v33, v28, v6);
  swift_beginAccess();
  uint64_t v39 = (uint64_t)v90;
  if (*(void *)(v3[5] + 16))
  {
    uint64_t v40 = v79[57];
    swift_bridgeObjectRetain();
    sub_1C3F88430(v39, v88, v40);
    char v42 = v41;
    swift_bridgeObjectRelease();
    if (v42)
    {
      uint64_t v83 = (char *)v6;
      uint64_t v82 = v13;
      uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      uint64_t v44 = v78;
      uint64_t v45 = v88;
      v43(v78, v39, v88);
      uint64_t v46 = (char *)v3 + qword_1EBBC59B0;
      uint64_t v47 = sub_1C4496678();
      uint64_t v48 = (uint64_t)v76;
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v76, v46, v47);
      uint64_t v49 = (uint64_t)v3 + qword_1EBBC59A8;
      swift_beginAccess();
      *(void *)(v48 + *(int *)(v89 + 20)) = *(void *)(v49 + *(int *)(v89 + 20));
      swift_beginAccess();
      uint64_t v50 = v77;
      v43(v77, (uint64_t)v44, v45);
      uint64_t v51 = v85;
      sub_1C4496FC8();
      uint64_t v52 = v51;
      uint64_t v53 = (void (*)(char *, void))sub_1C4496FD8();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v54, 1, v52);
      if (result != 1)
      {
        uint64_t v55 = v74;
        sub_1C41444F8(v48, (uint64_t)v87, v52, v74);
        sub_1C3F9235C(v48, type metadata accessor for FinalizedTimestamp);
        v53(v91, 0);
        uint64_t v56 = *(void (**)(char *, uint64_t))(v82 + 8);
        v56(v50, v45);
        v56(v78, v45);
        swift_endAccess();
        swift_beginAccess();
        sub_1C4158E4C(v55, v49);
        swift_endAccess();
        uint64_t v57 = v75;
        sub_1C437E0CC(v75);
        swift_beginAccess();
        type metadata accessor for Replica();
        sub_1C3F844E4(v57);
        sub_1C3F9235C(v57, type metadata accessor for Timestamp);
        swift_endAccess();
        v56(v90, v45);
        (*(void (**)(char *, uint64_t))(v86 + 8))(v73, v72);
        return (*(uint64_t (**)(char *, char *))(v71 + 8))(v87, v83);
      }
LABEL_12:
      __break(1u);
      return result;
    }
  }
  char v58 = (char *)v3 + qword_1EBBC59B0;
  uint64_t v59 = sub_1C4496678();
  uint64_t v60 = (uint64_t)v83;
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v83, v58, v59);
  uint64_t v61 = (uint64_t)v3 + qword_1EBBC59A8;
  uint64_t result = swift_beginAccess();
  uint64_t v62 = *(int *)(v89 + 20);
  uint64_t v63 = *(void *)(v61 + v62);
  BOOL v64 = __OFADD__(v63, 1);
  uint64_t v65 = v63 + 1;
  uint64_t v66 = v86;
  if (v64)
  {
    __break(1u);
    goto LABEL_12;
  }
  *(void *)(v60 + v62) = v65;
  swift_beginAccess();
  sub_1C4158E4C(v60, v61);
  swift_endAccess();
  sub_1C415C6B0(v61, v60, type metadata accessor for FinalizedTimestamp);
  uint64_t v67 = v71;
  uint64_t v68 = (uint64_t)v80;
  uint64_t v69 = (uint64_t)v87;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v80, v87, v6);
  v92.n128_u64[0] = MEMORY[0x1E4FBC868];
  v92.n128_u64[1] = MEMORY[0x1E4FBC868];
  uint64_t v70 = v81;
  sub_1C4144444(v60, v68, &v92, v6, v81);
  sub_1C437E1B4(v39, v70);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v39, v88);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v73, v72);
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v70, v85);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 8))(v69, v6);
}

uint64_t sub_1C4149E38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = type metadata accessor for CRDictionaryElement();
  uint64_t v7 = sub_1C4497B38();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v17 - v9;
  swift_beginAccess();
  uint64_t v11 = v2[5];
  uint64_t v12 = *(void *)(v5 + 432);
  uint64_t v13 = *(void *)(v5 + 456);
  swift_bridgeObjectRetain();
  MEMORY[0x1C877FC90](a1, v11, v12, v6, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v10, 1, v6))
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v14 = type metadata accessor for FinalizedTimestamp(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
  else
  {
    sub_1C415C6B0((uint64_t)v10, a2, type metadata accessor for FinalizedTimestamp);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v16 = type metadata accessor for FinalizedTimestamp(0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a2, 0, 1, v16);
  }
}

uint64_t sub_1C414A09C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v21[1] = a3;
  uint64_t v22 = a2;
  uint64_t v23 = a1;
  uint64_t v24 = a4;
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(*v4 + 440);
  uint64_t v7 = type metadata accessor for CRDictionaryElement();
  uint64_t v8 = sub_1C4497B38();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v21 - v11;
  v21[0] = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v21 - v13;
  swift_beginAccess();
  uint64_t v15 = v4[5];
  uint64_t v16 = *(void *)(v5 + 432);
  uint64_t v17 = *(void *)(v5 + 456);
  swift_bridgeObjectRetain();
  MEMORY[0x1C877FC90](v23, v15, v16, v7, v17);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v12, 1, v7))
  {
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return v22(v18);
  }
  else
  {
    uint64_t v20 = v21[0];
    (*(void (**)(char *, char *, uint64_t))(v21[0] + 16))(v14, &v12[*(int *)(v7 + 36)], v6);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(v24, v14, v6);
  }
}

uint64_t sub_1C414A330@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(*(void *)v2 + 432);
  uint64_t v6 = *(void *)(*(void *)v2 + 440);
  uint64_t v7 = type metadata accessor for CRDictionaryElement();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = sub_1C4497B38();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v16 - v11;
  sub_1C437E570(a1, (uint64_t)&v16 - v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v12, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a2, 1, 1, v6);
  }
  else
  {
    uint64_t v14 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v15 = *(void *)(v6 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(a2, &v14[*(int *)(v7 + 36)], v6);
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v14, v7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v6);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v12, v5);
  }
}

uint64_t sub_1C414A5E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v8 = v7 - 8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = &v25[-v13];
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = &v25[-v15];
  sub_1C437ACF8(a1, a2, &v26);
  uint64_t v17 = v3 + qword_1EBBC59A8;
  swift_beginAccess();
  sub_1C415C6B0(v17, (uint64_t)v14, type metadata accessor for FinalizedTimestamp);
  uint64_t v18 = a2 + qword_1EBBC59A8;
  swift_beginAccess();
  sub_1C415C6B0(v18, (uint64_t)v11, type metadata accessor for FinalizedTimestamp);
  uint64_t v19 = *(int *)(v8 + 28);
  uint64_t v20 = *(void *)&v11[v19];
  uint64_t v21 = *(void *)&v14[v19];
  if (v20 == v21)
  {
    char v22 = sub_1C410BE0C();
    uint64_t v23 = (uint64_t)v14;
    if (v22) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v23 = (uint64_t)v14;
  if (v20 >= v21) {
LABEL_5:
  }
    uint64_t v23 = (uint64_t)v11;
LABEL_6:
  sub_1C415C6B0(v23, (uint64_t)v16, type metadata accessor for FinalizedTimestamp);
  sub_1C3F9235C((uint64_t)v11, type metadata accessor for FinalizedTimestamp);
  sub_1C3F9235C((uint64_t)v14, type metadata accessor for FinalizedTimestamp);
  return sub_1C414A818(&v26, (uint64_t)v16, a3);
}

uint64_t sub_1C414A818@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  long long v5 = a1[1];
  *a3 = *a1;
  a3[1] = v5;
  a3[2] = a1[2];
  uint64_t v6 = type metadata accessor for CRDictionary.MergeableDelta();
  return sub_1C3F72070(a2, (uint64_t)a3 + *(int *)(v6 + 68), type metadata accessor for FinalizedTimestamp);
}

uint64_t sub_1C414A890()
{
  sub_1C3F9235C(v0 + qword_1EBBC59A8, type metadata accessor for FinalizedTimestamp);
  uint64_t v1 = v0 + qword_1EBBC59B0;
  uint64_t v2 = sub_1C4496678();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(v1, v2);
}

uint64_t sub_1C414A920()
{
  uint64_t v0 = sub_1C3F70584();
  sub_1C3F9235C(v0 + qword_1EBBC59A8, type metadata accessor for FinalizedTimestamp);
  uint64_t v1 = v0 + qword_1EBBC59B0;
  uint64_t v2 = sub_1C4496678();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1C414A9B0()
{
  sub_1C414A920();
  return swift_deallocClassInstance();
}

uint64_t CRDictionary.copy(renamingReferences:)@<X0>(char *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v74 = a1;
  uint64_t v66 = a3;
  uint64_t v6 = a2[3];
  uint64_t v82 = sub_1C4497B38();
  uint64_t v89 = *(void *)(v82 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v82);
  uint64_t v81 = (char *)&v66 - v8;
  uint64_t v9 = a2[2];
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v73 = (void (*)(char *, uint64_t))((char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v69 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v75 = (char *)&v66 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v87 = (char *)&v66 - v18;
  uint64_t v92 = v19;
  uint64_t v20 = sub_1C4497B38();
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v23 = (char *)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v72 = (void (**)(char *, uint64_t))((char *)&v66 - v24);
  uint64_t v25 = *v4;
  uint64_t v27 = a2[4];
  uint64_t v26 = a2[5];
  uint64_t v29 = a2[6];
  uint64_t v28 = a2[7];
  uint64_t v91 = v9;
  uint64_t v85 = v28;
  uint64_t v86 = v26;
  CRDictionary.init()(&v100);
  uint64_t v30 = *(void *)v74;
  uint64_t v84 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  uint64_t v80 = (void (**)(char *, uint64_t, uint64_t))(v10 + 32);
  uint64_t v31 = *(void *)(v30 + 16);
  uint64_t v90 = v6;
  uint64_t v79 = v6 - 8;
  uint64_t v78 = (void (**)(uint64_t, uint64_t))(v10 + 8);
  uint64_t v77 = (void (**)(uint64_t, uint64_t))(v89 + 8);
  uint64_t v76 = (void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v88 = v29;
  uint64_t v89 = v27;
  uint64_t v83 = a2;
  if (v31)
  {
    uint64_t v93 = v25;
    CRDictionary.makeIterator()(&v99);
    uint64_t v32 = (uint64_t)v72;
    uint64_t v34 = v90;
    uint64_t v33 = v91;
    uint64_t v35 = (uint64_t)v73;
    uint64_t v36 = v74;
    uint64_t v37 = (uint64_t)v81;
    while (1)
    {
      uint64_t v93 = v91;
      uint64_t v94 = v90;
      uint64_t v95 = v27;
      uint64_t v96 = v86;
      uint64_t v97 = v29;
      uint64_t v98 = v85;
      uint64_t v38 = type metadata accessor for CRDictionary.Iterator();
      CRDictionary.Iterator.next()(v38, v32);
      if ((*v84)(v32, 1, v92) == 1) {
        break;
      }
      uint64_t v39 = *(int *)(v92 + 48);
      uint64_t v40 = v32 + v39;
      char v41 = v87;
      char v42 = &v87[v39];
      (*v80)(v87, v32, v33);
      uint64_t v43 = *(void *)(v34 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v42, v40, v34);
      (*(void (**)(char *, uint64_t))(*(void *)(v89 + 8) + 24))(v36, v33);
      (*(void (**)(char *, uint64_t))(*(void *)(v88 + 8) + 24))(v36, v34);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v37, 0, 1, v34);
      uint64_t v27 = v89;
      sub_1C41589BC(v37, v35, (uint64_t)v83);
      (*v78)(v35, v33);
      (*v77)(v37, v82);
      uint64_t v44 = v41;
      uint64_t v29 = v88;
      (*v76)(v44, v92);
    }
  }
  else
  {
    uint64_t v93 = v25;
    CRDictionary.makeIterator()(&v99);
    uint64_t v67 = (void (**)(void))(v10 + 16);
    uint64_t v68 = v23;
    uint64_t v45 = v90;
    while (1)
    {
      uint64_t v93 = v91;
      uint64_t v94 = v90;
      uint64_t v95 = v27;
      uint64_t v96 = v86;
      uint64_t v97 = v29;
      uint64_t v98 = v85;
      uint64_t v46 = type metadata accessor for CRDictionary.Iterator();
      CRDictionary.Iterator.next()(v46, (uint64_t)v23);
      if ((*v84)((uint64_t)v23, 1, v92) == 1) {
        break;
      }
      uint64_t v47 = v92;
      uint64_t v48 = *(int *)(v92 + 48);
      uint64_t v49 = v87;
      uint64_t v50 = &v87[v48];
      uint64_t v71 = &v87[v48];
      uint64_t v51 = &v23[v48];
      uint64_t v52 = v23;
      uint64_t v53 = v91;
      (*v80)(v87, (uint64_t)v52, v91);
      uint64_t v54 = *(void (***)(char *, uint64_t))(v45 - 8);
      uint64_t v72 = v54;
      uint64_t v73 = v54[4];
      ((void (*)(char *, char *, uint64_t))v73)(v50, v51, v45);
      uint64_t v74 = &v75[*(int *)(v47 + 48)];
      uint64_t v55 = v74;
      uint64_t v70 = *v67;
      v70();
      uint64_t v56 = v54[2];
      uint64_t v57 = v71;
      ((void (*)(char *, char *, uint64_t))v56)(v55, v71, v45);
      char v58 = v69;
      uint64_t v59 = &v69[*(int *)(v92 + 48)];
      ((void (*)(char *, char *, uint64_t))v70)(v69, v49, v53);
      ((void (*)(char *, char *, uint64_t))v56)(v59, v57, v45);
      uint64_t v60 = (uint64_t)v75;
      uint64_t v61 = (uint64_t)v81;
      ((void (*)(char *, char *, uint64_t))v73)(v81, v59, v45);
      uint64_t v62 = v72;
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v72[7])(v61, 0, 1, v45);
      sub_1C41589BC(v61, v60, (uint64_t)v83);
      uint64_t v63 = *v78;
      (*v78)(v60, v53);
      (*v77)(v61, v82);
      (*v76)(v87, v92);
      uint64_t v64 = v53;
      uint64_t v23 = v68;
      v63((uint64_t)v58, v64);
      uint64_t v27 = v89;
      v62[1](v74, v45);
      uint64_t v29 = v88;
    }
  }
  uint64_t result = sub_1C3F7FCE8();
  *uint64_t v66 = v100;
  return result;
}

void *CRDictionary.init()@<X0>(void *a1@<X8>)
{
  type metadata accessor for CRDictionaryRef();
  swift_allocObject();
  uint64_t result = sub_1C4148E48();
  *a1 = result;
  return result;
}

uint64_t CRDictionary.makeIterator()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 40);
  uint64_t v5 = -1;
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  if (-v7 < 64) {
    uint64_t v5 = ~(-1 << -(char)v7);
  }
  *a1 = v4;
  a1[1] = v4 + 64;
  a1[2] = ~v7;
  a1[3] = 0;
  a1[4] = v5 & v6;
  return swift_bridgeObjectRetain();
}

uint64_t CRDictionary.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = type metadata accessor for CRDictionaryElement();
  uint64_t v84 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v70 - v8;
  uint64_t v10 = *(void *)(*(void *)(a1 + 16) - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = v13;
  uint64_t v83 = v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = sub_1C4497B38();
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v70 - v18;
  uint64_t v20 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v17);
  uint64_t v22 = MEMORY[0x1F4188790](v21);
  uint64_t result = MEMORY[0x1F4188790](v22);
  uint64_t v74 = (char *)&v70 - v24;
  uint64_t v75 = v25;
  uint64_t v27 = *v2;
  uint64_t v26 = v2[1];
  uint64_t v29 = (char *)v2[2];
  uint64_t v28 = v2[3];
  uint64_t v30 = (void (*)(void, void, void))v28;
  unint64_t v31 = v2[4];
  uint64_t v87 = a2;
  uint64_t v85 = v5;
  uint64_t v81 = v26;
  uint64_t v82 = v10;
  uint64_t v72 = result;
  uint64_t v73 = v32;
  uint64_t v71 = v33;
  uint64_t v80 = v29;
  if (v31)
  {
    uint64_t v78 = v20;
    uint64_t v79 = (void (*)(void, void, void))v28;
    uint64_t v34 = v9;
    uint64_t v76 = (v31 - 1) & v31;
    uint64_t v77 = (void (*)(uint64_t, char *, uint64_t))TupleTypeMetadata2;
    unint64_t v35 = __clz(__rbit64(v31)) | (v28 << 6);
LABEL_3:
    uint64_t v36 = v12;
    uint64_t v37 = v12;
    uint64_t v38 = v86;
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v36, *(void *)(v27 + 48) + *(void *)(v10 + 72) * v35, v86);
    uint64_t v39 = v83;
    uint64_t v40 = v84;
    (*(void (**)(char *, unint64_t, uint64_t))(v84 + 16))(v34, *(void *)(v27 + 56) + *(void *)(v84 + 72) * v35, v83);
    char v41 = &v19[*((int *)v77 + 12)];
    char v42 = v37;
    TupleTypeMetadata2 = (uint64_t)v77;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v19, v42, v38);
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v41, v34, v39);
    uint64_t v20 = v78;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v19, 0, 1, TupleTypeMetadata2);
    uint64_t v43 = v76;
    goto LABEL_18;
  }
  int64_t v44 = v28 + 1;
  if (__OFADD__(v28, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v45 = (unint64_t)(v29 + 64) >> 6;
  if (v44 < v45)
  {
    unint64_t v46 = *(void *)(v26 + 8 * v44);
    if (v46)
    {
LABEL_7:
      uint64_t v77 = (void (*)(uint64_t, char *, uint64_t))TupleTypeMetadata2;
      uint64_t v78 = v20;
      uint64_t v34 = v9;
      uint64_t v76 = (v46 - 1) & v46;
      unint64_t v35 = __clz(__rbit64(v46)) + (v44 << 6);
      uint64_t v79 = (void (*)(void, void, void))v44;
      goto LABEL_3;
    }
    uint64_t v30 = (void (*)(void, void, void))(v28 + 1);
    if (v28 + 2 < v45)
    {
      unint64_t v46 = *(void *)(v26 + 8 * (v28 + 2));
      if (v46)
      {
        int64_t v44 = v28 + 2;
        goto LABEL_7;
      }
      int64_t v44 = v28 + 3;
      uint64_t v30 = (void (*)(void, void, void))(v28 + 2);
      if (v28 + 3 < v45)
      {
        unint64_t v46 = *(void *)(v26 + 8 * v44);
        if (v46) {
          goto LABEL_7;
        }
        uint64_t v30 = (void (*)(void, void, void))(v45 - 1);
        uint64_t v47 = (char *)(v28 + 4);
        while ((char *)v45 != v47)
        {
          unint64_t v46 = *(void *)(v26 + 8 * (void)v47++);
          if (v46)
          {
            int64_t v44 = (int64_t)(v47 - 1);
            goto LABEL_7;
          }
        }
      }
    }
  }
  uint64_t v79 = v30;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v19, 1, 1, TupleTypeMetadata2);
  uint64_t v43 = 0;
LABEL_18:
  uint64_t v48 = v81;
  *uint64_t v2 = v27;
  v2[1] = v48;
  uint64_t v49 = v79;
  v2[2] = (uint64_t)v80;
  v2[3] = (uint64_t)v49;
  v2[4] = v43;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v71 + 8))(v19, v72);
    uint64_t v50 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v87, 1, 1, v50);
  }
  else
  {
    uint64_t v51 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v52 = v74;
    uint64_t v53 = &v74[v51];
    uint64_t v54 = &v19[v51];
    uint64_t v55 = v82;
    uint64_t v56 = *(int **)(v82 + 32);
    uint64_t v76 = (uint64_t)v53;
    uint64_t v77 = (void (*)(uint64_t, char *, uint64_t))v56;
    uint64_t v57 = v19;
    uint64_t v58 = v86;
    ((void (*)(char *, char *, uint64_t))v56)(v74, v57, v86);
    uint64_t v59 = v84;
    uint64_t v79 = *(void (**)(void, void, void))(v84 + 32);
    uint64_t v60 = v53;
    uint64_t v61 = v83;
    v79(v60, v54, v83);
    uint64_t v62 = swift_getTupleTypeMetadata2();
    uint64_t v78 = v87 + *(int *)(v62 + 48);
    uint64_t v63 = v73;
    uint64_t v80 = &v73[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v64 = v80;
    uint64_t v81 = v62;
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v73, v52, v58);
    uint64_t v65 = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v64, v76, v61);
    uint64_t v66 = v77;
    v77(v87, v63, v58);
    uint64_t v67 = v75;
    uint64_t v68 = v75 + *(int *)(TupleTypeMetadata2 + 48);
    v66(v75, v52, v58);
    v79(v68, v65, v61);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v85 - 8) + 16))(v78, v68 + *(int *)(v61 + 36));
    uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v69(v68, v61);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v81 - 8) + 56))(v87, 0, 1);
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v67, v58);
    return ((uint64_t (*)(char *, uint64_t))v69)(v80, v61);
  }
}

uint64_t type metadata accessor for CRDictionary.Iterator()
{
  return swift_getGenericMetadata();
}

uint64_t CRDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C41589BC(a1, a2, a3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8))(a2);
  uint64_t v6 = sub_1C4497B38();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(a1, v6);
}

uint64_t CRDictionary.copy(renamingReferences:)@<X0>(unint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (!a1) {
    a1 = sub_1C3FE49A0(MEMORY[0x1E4FBC860]);
  }
  unint64_t v6 = a1;
  swift_bridgeObjectRetain();
  CRDictionary.copy(renamingReferences:)((char *)&v6, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t CRDictionary.version.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  *a1 = v4;
  a1[1] = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void CRDictionary.init(_:)(void *a1@<X0>, void *a2@<X8>)
{
  CRDictionary.init()(&v4);

  *a2 = v4;
}

uint64_t CRDictionary.MutatingAction.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v88 = a7;
  uint64_t v87 = a6;
  uint64_t v90 = a5;
  uint64_t v86 = a4;
  uint64_t v84 = a3;
  uint64_t v89 = a2;
  uint64_t v78 = a8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v79 = (uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v71 - v12;
  uint64_t v85 = (uint64_t *)type metadata accessor for Proto_Set(0);
  uint64_t v14 = MEMORY[0x1F4188790](v85);
  uint64_t v81 = (uint64_t)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v71 - v16;
  uint64_t v18 = type metadata accessor for Proto_CRDT(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v82 = (uint64_t)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v71 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v24 - 8);
  uint64_t v26 = (char *)&v71 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1C3F970C4(v27, (uint64_t)v26, &qword_1EBBC04F8);
  LODWORD(v27) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v26, 1, v18);
  sub_1C3F962E0((uint64_t)v26, &qword_1EBBC04F8);
  if (v27 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v28 = 0xD000000000000014;
    *(void *)(v28 + 8) = 0x80000001C44B0EE0;
    *(unsigned char *)(v28 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRDTContainer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a1;
  *(void *)(inited + 24) = 0;
  *(unsigned char *)(inited + 32) = 1;
  swift_retain();
  uint64_t v80 = inited;
  sub_1C3FBA924((uint64_t)v23);
  uint64_t v31 = *(void *)&v23[*(int *)(v18 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v31, (uint64_t)v13, &qword_1EBBC0648);
  uint64_t v32 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v76 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  uint64_t v75 = v33 + 48;
  int v34 = v76(v13, 1, v32);
  uint64_t v35 = a1;
  uint64_t v77 = v18;
  uint64_t v74 = v32;
  if (v34 == 1)
  {
    sub_1C3F962E0((uint64_t)v13, &qword_1EBBC0648);
    uint64_t v36 = v84;
    uint64_t v37 = v85;
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v36 = v84;
    uint64_t v37 = v85;
    if (EnumCaseMultiPayload == 1)
    {
      sub_1C3F72070((uint64_t)v13, (uint64_t)v17, type metadata accessor for Proto_Set);
      goto LABEL_11;
    }
    sub_1C3F9235C((uint64_t)v13, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v39 = *((int *)v37 + 5);
  if (qword_1EBBC01E8 != -1) {
    swift_once();
  }
  *(void *)&v17[v39] = qword_1EBBC01E0;
  swift_retain();
LABEL_11:
  sub_1C3F9235C((uint64_t)v23, type metadata accessor for Proto_CRDT);
  uint64_t v40 = (uint64_t *)(*(void *)&v17[*((int *)v37 + 5)]
                  + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
  swift_beginAccess();
  uint64_t v41 = *v40;
  swift_bridgeObjectRetain();
  uint64_t v42 = sub_1C3F9235C((uint64_t)v17, type metadata accessor for Proto_Set);
  uint64_t v93 = v41;
  MEMORY[0x1F4188790](v42);
  uint64_t v43 = v89;
  *(&v71 - 8) = v89;
  *(&v71 - 7) = v36;
  uint64_t v44 = v90;
  *(&v71 - 6) = v86;
  *(&v71 - 5) = v44;
  uint64_t v45 = v88;
  *(&v71 - 4) = v87;
  *(&v71 - 3) = v45;
  *(&v71 - 2) = v35;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC760);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC00F0);
  uint64_t v48 = sub_1C3F815A4((unint64_t *)&qword_1EBBBC768, &qword_1EBBBC760);
  uint64_t v49 = v83;
  uint64_t v50 = sub_1C41275E0((void (*)(char *, char *))sub_1C4158B70, (uint64_t)(&v71 - 10), v46, v43, v47, v48, MEMORY[0x1E4FBC0F0], (uint64_t)v92);
  if (v49)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    return swift_release();
  }
  uint64_t v51 = v50;
  uint64_t v72 = v48;
  uint64_t v83 = v46;
  swift_bridgeObjectRelease();
  uint64_t v93 = v51;
  sub_1C4497528();
  swift_getWitnessTable();
  uint64_t v73 = sub_1C4497758();
  swift_bridgeObjectRetain();
  uint64_t v52 = v82;
  sub_1C3FBA924(v82);
  uint64_t v53 = *(void *)(v52 + *(int *)(v77 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v54 = v79;
  sub_1C3F970C4(v53, v79, &qword_1EBBC0648);
  if (v76((char *)v54, 1, v74) == 1)
  {
    sub_1C3F962E0(v54, &qword_1EBBC0648);
    uint64_t v55 = v81;
    uint64_t v56 = v85;
LABEL_18:
    uint64_t v59 = v47;
    sub_1C4496888();
    uint64_t v60 = *((int *)v56 + 5);
    if (qword_1EBBC01E8 != -1) {
      swift_once();
    }
    uint64_t v58 = v35;
    *(void *)(v55 + v60) = qword_1EBBC01E0;
    swift_retain();
    uint64_t v44 = v90;
    goto LABEL_21;
  }
  int v57 = swift_getEnumCaseMultiPayload();
  uint64_t v55 = v81;
  uint64_t v56 = v85;
  if (v57 != 1)
  {
    sub_1C3F9235C(v54, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_18;
  }
  uint64_t v58 = v35;
  sub_1C3F72070(v54, v81, type metadata accessor for Proto_Set);
  uint64_t v59 = v47;
LABEL_21:
  uint64_t v61 = v72;
  sub_1C3F9235C(v82, type metadata accessor for Proto_CRDT);
  uint64_t v62 = (uint64_t *)(*(void *)(v55 + *((int *)v56 + 5))
                  + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removed);
  swift_beginAccess();
  uint64_t v63 = *v62;
  swift_bridgeObjectRetain();
  uint64_t v64 = sub_1C3F9235C(v55, type metadata accessor for Proto_Set);
  uint64_t v85 = &v71;
  uint64_t v94 = v63;
  MEMORY[0x1F4188790](v64);
  uint64_t v65 = v84;
  *(&v71 - 8) = v89;
  *(&v71 - 7) = v65;
  *(&v71 - 6) = v86;
  *(&v71 - 5) = v44;
  uint64_t v66 = v88;
  *(&v71 - 4) = v87;
  *(&v71 - 3) = v66;
  *(&v71 - 2) = v58;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v68 = sub_1C41275E0((void (*)(char *, char *))sub_1C4158B9C, (uint64_t)(&v71 - 10), v83, TupleTypeMetadata2, v59, v61, MEMORY[0x1E4FBC0F0], (uint64_t)&v91);
  swift_bridgeObjectRelease();
  uint64_t v94 = v68;
  sub_1C4497528();
  swift_getWitnessTable();
  uint64_t v69 = sub_1C4496F38();
  swift_release();
  swift_setDeallocating();
  swift_release();
  uint64_t v70 = v78;
  *uint64_t v78 = v73;
  v70[1] = v69;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C414C708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>, void *a6)
{
  v22[0] = a5;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Proto_Value(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a1 + *(int *)(type metadata accessor for Proto_Set.Element(0) + 20))
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1C3F970C4(v17, (uint64_t)v12, &qword_1EBBC0540);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1C4496888();
    uint64_t v18 = *(int *)(v13 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)&v16[v18] = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0((uint64_t)v12, &qword_1EBBC0540);
  }
  else
  {
    sub_1C3F72070((uint64_t)v12, (uint64_t)v16, type metadata accessor for Proto_Value);
  }
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v19 = sub_1C3F974B0((uint64_t)v16, a2);
  swift_release();
  uint64_t v20 = v22[5];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a4 + 8) + 8) + 8))(v19, a3);
  if (v20) {
    *a6 = v20;
  }
  return result;
}

uint64_t sub_1C414C988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>, void *a8)
{
  uint64_t v61 = a6;
  uint64_t v74 = a5;
  uint64_t v62 = a4;
  uint64_t v76 = a7;
  uint64_t v77 = a3;
  uint64_t v78 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v68 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for Proto_Register(0);
  MEMORY[0x1F4188790](v70);
  uint64_t v73 = (uint64_t)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for Proto_CRDT(0);
  uint64_t v15 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v66 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v69 = (uint64_t)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v61 - v20;
  uint64_t v22 = type metadata accessor for Proto_Value(0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v71 = (uint64_t)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v72 = (char *)&v61 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v61 - v28;
  uint64_t v30 = *(void *)(a1 + *(int *)(type metadata accessor for Proto_Set.Element(0) + 20));
  uint64_t v31 = v30 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1C3F970C4(v31, (uint64_t)v21, &qword_1EBBC0540);
  uint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  uint64_t v65 = v23 + 48;
  uint64_t v64 = v32;
  unsigned int v33 = v32((uint64_t)v21, 1, v22);
  uint64_t v67 = v22;
  if (v33 == 1)
  {
    sub_1C4496888();
    uint64_t v34 = *(int *)(v22 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)&v29[v34] = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0((uint64_t)v21, &qword_1EBBC0540);
  }
  else
  {
    sub_1C3F72070((uint64_t)v21, (uint64_t)v29, type metadata accessor for Proto_Value);
  }
  uint64_t v35 = (uint64_t)v66;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  uint64_t v36 = v78;
  swift_retain();
  uint64_t v66 = (char *)sub_1C3F974B0((uint64_t)v29, v36);
  swift_release();
  uint64_t v37 = v30 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1C3F970C4(v37, (uint64_t)v14, &qword_1EBBC04F8);
  uint64_t v38 = v63;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v63) == 1)
  {
    sub_1C4496888();
    uint64_t v39 = *(int *)(v38 + 20);
    uint64_t v40 = (uint64_t)v72;
    uint64_t v41 = v70;
    if (qword_1EBBC0668 != -1) {
      swift_once();
    }
    *(void *)(v35 + v39) = qword_1EBBC0660;
    swift_retain();
    sub_1C3F962E0((uint64_t)v14, &qword_1EBBC04F8);
  }
  else
  {
    sub_1C3F72070((uint64_t)v14, v35, type metadata accessor for Proto_CRDT);
    uint64_t v40 = (uint64_t)v72;
    uint64_t v41 = v70;
  }
  uint64_t v42 = *(void *)(v35 + *(int *)(v38 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v43 = v68;
  sub_1C3F970C4(v42, v68, &qword_1EBBC0648);
  uint64_t v44 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v43, 1, v44) == 1)
  {
    sub_1C3F962E0(v43, &qword_1EBBC0648);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      uint64_t v45 = v73;
      sub_1C3F72070(v43, v73, type metadata accessor for Proto_Register);
      goto LABEL_18;
    }
    sub_1C3F9235C(v43, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  uint64_t v45 = v73;
  sub_1C4496888();
  uint64_t v46 = *(int *)(v41 + 20);
  if (qword_1EBBBF248 != -1) {
    swift_once();
  }
  *(void *)(v45 + v46) = qword_1EBBBF238;
  swift_retain();
LABEL_18:
  sub_1C3F9235C(v35, type metadata accessor for Proto_CRDT);
  uint64_t v47 = *(void *)(v45 + *(int *)(v41 + 20))
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  uint64_t v48 = v69;
  sub_1C3F970C4(v47, v69, &qword_1EBBC0540);
  uint64_t v49 = v67;
  if (v64(v48, 1, v67) == 1)
  {
    sub_1C4496888();
    uint64_t v50 = *(int *)(v49 + 20);
    uint64_t v51 = v77;
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)(v40 + v50) = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0(v48, &qword_1EBBC0540);
  }
  else
  {
    sub_1C3F72070(v48, v40, type metadata accessor for Proto_Value);
    uint64_t v51 = v77;
  }
  sub_1C3F9235C(v45, type metadata accessor for Proto_Register);
  uint64_t v52 = v71;
  sub_1C415C6B0(v40, v71, type metadata accessor for Proto_Value);
  swift_allocObject();
  uint64_t v53 = v78;
  swift_retain();
  uint64_t v54 = sub_1C3F974B0(v52, v53);
  swift_release();
  uint64_t v55 = *(void *)(*(void *)(v74 + 8) + 8);
  uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 8);
  uint64_t v57 = swift_retain();
  uint64_t v58 = v75;
  v56(v57, v51, v55);
  if (v58)
  {
    sub_1C3F9235C(v40, type metadata accessor for Proto_Value);
    swift_release();
    uint64_t result = swift_release();
    *a8 = v58;
  }
  else
  {
    uint64_t v60 = v62;
    swift_getTupleTypeMetadata2();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v61 + 8) + 8) + 8))(v54, v60);
    sub_1C3F9235C(v40, type metadata accessor for Proto_Value);
    return swift_release();
  }
  return result;
}

uint64_t CRDictionary.MutatingAction.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t v6 = type metadata accessor for Proto_Set(0);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v48 - v10;
  uint64_t v12 = *v2;
  uint64_t v13 = v2[1];
  uint64_t result = sub_1C3F62C10();
  if (!v3)
  {
    uint64_t v62 = a1;
    uint64_t v56 = v13;
    uint64_t v57 = result;
    uint64_t v51 = v9;
    swift_retain();
    uint64_t v15 = sub_1C4496888();
    uint64_t v16 = *(int *)(v6 + 20);
    if (qword_1EBBC01E8 != -1) {
      uint64_t v15 = swift_once();
    }
    uint64_t v59 = &v48;
    *(void *)&v11[v16] = qword_1EBBC01E0;
    v61[3] = v12;
    MEMORY[0x1F4188790](v15);
    uint64_t v53 = v16;
    uint64_t v18 = a2[2];
    uint64_t v17 = a2[3];
    uint64_t v58 = v11;
    *(&v48 - 8) = v18;
    *(&v48 - 7) = v17;
    uint64_t v52 = v17;
    uint64_t v19 = a2[5];
    uint64_t v55 = a2[4];
    *(&v48 - 6) = v55;
    *(&v48 - 5) = v19;
    uint64_t v20 = a2[7];
    uint64_t v54 = a2[6];
    *(&v48 - 4) = v54;
    *(&v48 - 3) = v20;
    *(&v48 - 2) = v62;
    uint64_t v21 = sub_1C4497748();
    uint64_t v22 = type metadata accessor for Proto_Set.Element(0);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC00F0);
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v25 = v23;
    uint64_t v26 = v21;
    uint64_t v27 = v22;
    uint64_t v28 = sub_1C41275E0((void (*)(char *, char *))sub_1C4158BC8, (uint64_t)(&v48 - 10), v26, v22, v23, WitnessTable, MEMORY[0x1E4FBC0F0], (uint64_t)v61);
    uint64_t v48 = v20;
    uint64_t v49 = v25;
    uint64_t v29 = v52;
    uint64_t v50 = v27;
    swift_bridgeObjectRelease();
    uint64_t v30 = (uint64_t)v58;
    uint64_t v31 = v53;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Set._StorageClass(0);
      swift_allocObject();
      uint64_t v32 = swift_retain();
      *(void *)(v30 + v31) = sub_1C3F7B768(v32);
      swift_release();
    }
    unsigned int v33 = (uint64_t *)(*(void *)(v30 + v31)
                    + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
    swift_beginAccess();
    *unsigned int v33 = v28;
    uint64_t v34 = swift_bridgeObjectRelease();
    v61[0] = v56;
    uint64_t v35 = MEMORY[0x1F4188790](v34);
    *(&v48 - 8) = v18;
    *(&v48 - 7) = v29;
    uint64_t v36 = v54;
    *(&v48 - 6) = v55;
    *(&v48 - 5) = v19;
    uint64_t v37 = v48;
    *(&v48 - 4) = v36;
    *(&v48 - 3) = v37;
    *(&v48 - 2) = v62;
    MEMORY[0x1F4188790](v35);
    *(&v48 - 8) = v18;
    *(&v48 - 7) = v29;
    *(&v48 - 6) = v38;
    *(&v48 - 5) = v19;
    *(&v48 - 4) = v39;
    *(&v48 - 3) = v40;
    *(&v48 - 2) = (uint64_t)sub_1C4158BF4;
    *(&v48 - 1) = v41;
    uint64_t v42 = sub_1C4497008();
    swift_bridgeObjectRetain();
    uint64_t v43 = swift_getWitnessTable();
    uint64_t v44 = sub_1C41275E0((void (*)(char *, char *))sub_1C4158C28, (uint64_t)(&v48 - 10), v42, v50, v49, v43, MEMORY[0x1E4FBC0F0], (uint64_t)v60);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Set._StorageClass(0);
      swift_allocObject();
      uint64_t v45 = swift_retain();
      *(void *)(v30 + v31) = sub_1C3F7B768(v45);
      swift_release();
    }
    uint64_t v46 = (uint64_t *)(*(void *)(v30 + v31)
                    + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removed);
    swift_beginAccess();
    *uint64_t v46 = v44;
    swift_bridgeObjectRelease();
    uint64_t v47 = (uint64_t)v51;
    sub_1C415C6B0(v30, (uint64_t)v51, type metadata accessor for Proto_Set);
    swift_beginAccess();
    sub_1C43F187C(v47);
    swift_release();
    return sub_1C3F9235C(v30, type metadata accessor for Proto_Set);
  }
  return result;
}

uint64_t sub_1C414D834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void *a10)
{
  uint64_t v39 = a7;
  uint64_t v40 = a8;
  uint64_t v37 = a1;
  uint64_t v38 = a6;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v36 = (uint64_t)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v20 = type metadata accessor for Proto_Value(0);
  uint64_t v34 = *(void *)(v20 - 8);
  uint64_t v35 = v20;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C4496888();
  uint64_t v23 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  if (qword_1EBBBF1E0 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_1EBBBF1D8;
  *(void *)(a9 + v23) = qword_1EBBBF1D8;
  MEMORY[0x1F4188790](v24);
  *(&v34 - 8) = a3;
  *(&v34 - 7) = a4;
  uint64_t v25 = v38;
  *(&v34 - 6) = a5;
  *(&v34 - 5) = v25;
  uint64_t v26 = v40;
  *(&v34 - 4) = v39;
  *(&v34 - 3) = v26;
  *(&v34 - 2) = v37;
  *(&v34 - 1) = a2;
  swift_retain();
  uint64_t v27 = v41;
  sub_1C3F6DC00((void (*)(uint64_t))sub_1C415C650, (uint64_t)v22);
  if (v27)
  {
    uint64_t result = sub_1C3F9235C(a9, type metadata accessor for Proto_Set.Element);
    *a10 = v27;
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Set.Element._StorageClass(0);
      swift_allocObject();
      uint64_t v29 = swift_retain();
      *(void *)(a9 + v23) = sub_1C3F97F64(v29);
      swift_release();
    }
    uint64_t v30 = *(void *)(a9 + v23);
    sub_1C3F72070((uint64_t)v22, (uint64_t)v19, type metadata accessor for Proto_Value);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v19, 0, 1, v35);
    uint64_t v31 = (uint64_t)v19;
    uint64_t v32 = v36;
    sub_1C3F961BC(v31, v36, &qword_1EBBC0540);
    uint64_t v33 = v30 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
    swift_beginAccess();
    swift_retain();
    sub_1C3F98338(v32, v33, &qword_1EBBC0540);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_1C414DB60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v101 = a5;
  uint64_t v102 = a6;
  uint64_t v103 = a8;
  uint64_t v104 = a7;
  uint64_t v94 = a2;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v85 = (uint64_t)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Proto_Register(0);
  MEMORY[0x1F4188790](v16);
  uint64_t v86 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v89 = (uint64_t)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v88 = (uint64_t)&v82 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v90 = (uint64_t)&v82 - v23;
  uint64_t v87 = type metadata accessor for Proto_CRDT(0);
  uint64_t v93 = *(void *)(v87 - 8);
  MEMORY[0x1F4188790](v87);
  uint64_t v92 = (uint64_t)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v26 = MEMORY[0x1F4188790](v25 - 8);
  uint64_t v97 = (uint64_t)&v82 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v95 = (uint64_t)&v82 - v28;
  uint64_t v96 = type metadata accessor for Proto_Value(0);
  uint64_t v99 = *(void *)(v96 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v96);
  uint64_t v91 = (uint64_t)&v82 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v98 = (uint64_t)&v82 - v32;
  MEMORY[0x1F4188790](v31);
  uint64_t v34 = (char *)&v82 - v33;
  sub_1C4496888();
  uint64_t v35 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  if (qword_1EBBBF1E0 != -1) {
    swift_once();
  }
  uint64_t v36 = qword_1EBBBF1D8;
  *(void *)(a9 + v35) = qword_1EBBBF1D8;
  MEMORY[0x1F4188790](v36);
  uint64_t v37 = v101;
  *(&v82 - 8) = a4;
  *(&v82 - 7) = v37;
  uint64_t v38 = v104;
  *(&v82 - 6) = v102;
  *(&v82 - 5) = v38;
  *(&v82 - 4) = v103;
  *(&v82 - 3) = a10;
  *(&v82 - 2) = a1;
  *(&v82 - 1) = a3;
  swift_retain();
  uint64_t v39 = v100;
  sub_1C3F6DC00((void (*)(uint64_t))sub_1C415C650, (uint64_t)v34);
  if (v39) {
    return sub_1C3F9235C(a9, type metadata accessor for Proto_Set.Element);
  }
  uint64_t v83 = a10;
  uint64_t v84 = a4;
  uint64_t v100 = 0;
  uint64_t v82 = v16;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    uint64_t v40 = swift_retain();
    *(void *)(a9 + v35) = sub_1C3F97F64(v40);
    swift_release();
  }
  uint64_t v41 = *(void *)(a9 + v35);
  uint64_t v42 = v95;
  sub_1C3F72070((uint64_t)v34, v95, type metadata accessor for Proto_Value);
  uint64_t v44 = v99 + 56;
  uint64_t v43 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v99 + 56);
  v43(v42, 0, 1, v96);
  uint64_t v45 = v97;
  sub_1C3F961BC(v42, v97, &qword_1EBBC0540);
  uint64_t v46 = v41 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v45, v46, &qword_1EBBC0540);
  swift_endAccess();
  uint64_t v47 = swift_release();
  MEMORY[0x1F4188790](v47);
  uint64_t v49 = v100;
  uint64_t v48 = v101;
  *(&v82 - 8) = v84;
  *(&v82 - 7) = v48;
  uint64_t v50 = v104;
  *(&v82 - 6) = v102;
  *(&v82 - 5) = v50;
  uint64_t v51 = v83;
  *(&v82 - 4) = v103;
  *(&v82 - 3) = v51;
  *(&v82 - 2) = v94;
  *(&v82 - 1) = a3;
  uint64_t v52 = v98;
  sub_1C3F6DC00((void (*)(uint64_t))sub_1C415C668, v98);
  if (v49) {
    return sub_1C3F9235C(a9, type metadata accessor for Proto_Set.Element);
  }
  uint64_t v99 = v44;
  uint64_t v100 = 0;
  sub_1C415C6B0(v52, v91, type metadata accessor for Proto_Value);
  uint64_t v104 = v35;
  uint64_t v103 = a9;
  uint64_t v54 = *(void *)(a9 + v35)
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  uint64_t v55 = v54;
  uint64_t v56 = v90;
  sub_1C3F970C4(v55, v90, &qword_1EBBC04F8);
  uint64_t v57 = v87;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v56, 1, v87) == 1)
  {
    uint64_t v58 = v92;
    sub_1C4496888();
    uint64_t v59 = *(int *)(v57 + 20);
    uint64_t v60 = (uint64_t)v86;
    uint64_t v61 = v95;
    uint64_t v62 = v96;
    if (qword_1EBBC0668 != -1) {
      swift_once();
    }
    *(void *)(v58 + v59) = qword_1EBBC0660;
    swift_retain();
    sub_1C3F962E0(v90, &qword_1EBBC04F8);
  }
  else
  {
    uint64_t v58 = v92;
    sub_1C3F72070(v56, v92, type metadata accessor for Proto_CRDT);
    uint64_t v60 = (uint64_t)v86;
    uint64_t v61 = v95;
    uint64_t v62 = v96;
  }
  uint64_t v63 = *(void *)(v58 + *(int *)(v57 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v64 = v85;
  sub_1C3F970C4(v63, v85, &qword_1EBBC0648);
  uint64_t v65 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 48))(v64, 1, v65) == 1)
  {
    sub_1C3F962E0(v64, &qword_1EBBC0648);
LABEL_17:
    sub_1C4496888();
    uint64_t v66 = *(int *)(v82 + 20);
    if (qword_1EBBBF248 != -1) {
      swift_once();
    }
    *(void *)(v60 + v66) = qword_1EBBBF238;
    swift_retain();
    goto LABEL_20;
  }
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1C3F9235C(v64, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_17;
  }
  sub_1C3F72070(v64, v60, type metadata accessor for Proto_Register);
LABEL_20:
  uint64_t v67 = *(int *)(v82 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Register._StorageClass(0);
    swift_allocObject();
    uint64_t v68 = swift_retain();
    *(void *)(v60 + v67) = sub_1C3FB87F8(v68);
    swift_release();
  }
  uint64_t v69 = *(void *)(v60 + v67);
  sub_1C3F72070(v91, v61, type metadata accessor for Proto_Value);
  v43(v61, 0, 1, v62);
  uint64_t v70 = v97;
  sub_1C3F961BC(v61, v97, &qword_1EBBC0540);
  uint64_t v71 = v60;
  uint64_t v72 = v69 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v70, v72, &qword_1EBBC0540);
  swift_endAccess();
  swift_release();
  uint64_t v73 = v92;
  sub_1C43F10C0(v71);
  uint64_t v74 = v104;
  uint64_t v75 = v103;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    uint64_t v76 = swift_retain();
    *(void *)(v75 + v74) = sub_1C3F97F64(v76);
    swift_release();
  }
  uint64_t v77 = *(void *)(v75 + v74);
  uint64_t v78 = v73;
  uint64_t v79 = v88;
  sub_1C3F72070(v78, v88, type metadata accessor for Proto_CRDT);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v93 + 56))(v79, 0, 1, v57);
  uint64_t v80 = v89;
  sub_1C3F961BC(v79, v89, &qword_1EBBC04F8);
  uint64_t v81 = v77 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v80, v81, &qword_1EBBC04F8);
  swift_endAccess();
  swift_release();
  return sub_1C3F9235C(v98, type metadata accessor for Proto_Value);
}

void CRDictionary.MutatingAction.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1C414E620@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return CRDictionary.MutatingAction.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a3);
}

uint64_t sub_1C414E648(uint64_t a1, void *a2)
{
  return CRDictionary.MutatingAction.encode(to:)(a1, a2);
}

void sub_1C414E660(unsigned char *a1@<X8>)
{
}

uint64_t CRDictionary.actionUndoingDifference(from:)@<X0>(char **a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v112 = a3;
  uint64_t v6 = 0;
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (char *)*((void *)a2 + 3);
  uint64_t v8 = sub_1C4497B38();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v117 = (char *)&v110 - v9;
  uint64_t v10 = (char *)*((void *)v4 + 6);
  uint64_t v128 = v7;
  uint64_t v147 = v10;
  uint64_t v11 = type metadata accessor for CRDictionaryElement();
  uint64_t v123 = sub_1C4497B38();
  int64_t v149 = *(void *)(v123 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v123);
  uint64_t v14 = (char *)&v110 - v13;
  uint64_t v132 = *(void *)(v11 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v148 = (char *)&v110 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v129 = (char *)&v110 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v140 = (char *)&v110 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v110 - v22;
  uint64_t v131 = *(void *)(*((void *)v4 + 2) - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v118 = (char *)&v110 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v125 = (char *)&v110 - v26;
  uint64_t v126 = v27;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v144 = sub_1C4497B38();
  uint64_t v141 = *(void (***)(void))(v144 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v144);
  uint64_t v145 = (char *)&v110 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v143 = (char *)&v110 - v31;
  uint64_t v32 = *a1;
  uint64_t v33 = *(void **)v3;
  if (*(void *)(*(void *)v3 + 48) == *((void *)*a1 + 6))
  {
    uint64_t v110 = 0;
    swift_retain();
    swift_retain();
    uint64_t v34 = v126;
    uint64_t v35 = v33;
    goto LABEL_5;
  }
  uint64_t v146 = v4;
  if (qword_1EBBC10F0 == -1) {
    goto LABEL_4;
  }
  while (1)
  {
    swift_once();
LABEL_4:
    swift_retain();
    sub_1C4497A58();
    uint64_t v110 = v6;
    swift_release();
    uint64_t v36 = v156;
    char v37 = BYTE8(v156);
    uint64_t v38 = v157;
    uint64_t v32 = (char *)sub_1C437D33C(v156, SBYTE8(v156), v157);
    uint64_t v35 = sub_1C437D33C(v36, v37, v38);
    swift_bridgeObjectRelease();
    uint64_t v34 = v126;
    uint64_t v4 = v146;
LABEL_5:
    uint64_t v39 = (char *)*((void *)v4 + 5);
    uint64_t v155 = sub_1C4496EC8();
    uint64_t v40 = v128;
    uint64_t v41 = sub_1C4496EA8();
    uint64_t v142 = &v110;
    uint64_t v154 = v41;
    uint64_t v158 = 0;
    long long v156 = 0u;
    long long v157 = 0u;
    uint64_t v42 = MEMORY[0x1F4188790](v41);
    *(&v110 - 8) = v34;
    *(&v110 - 7) = v40;
    *(&v110 - 6) = (char *)*((void *)v4 + 4);
    *(&v110 - 5) = v39;
    uint64_t v146 = v39;
    uint64_t v43 = (char *)*((void *)v4 + 7);
    *(&v110 - 4) = v147;
    *(&v110 - 3) = v43;
    *(&v110 - 2) = (char *)&v155;
    MEMORY[0x1F4188790](v42);
    uint64_t v121 = v44;
    *(&v110 - 4) = v44;
    *(&v110 - 3) = (char *)&v154;
    *(&v110 - 2) = v32;
    sub_1C4380CE0((uint64_t)v32, (uint64_t)&v156, (void (*)(char *))sub_1C4158CA8, v45, (void (*)(char *))sub_1C4158CAC, (uint64_t)(&v110 - 6));
    sub_1C3F962E0((uint64_t)&v156, &qword_1EBBBC198);
    swift_beginAccess();
    uint64_t v113 = v35;
    uint64_t v46 = v35[5];
    uint64_t v47 = *(void *)(v46 + 64);
    uint64_t v119 = v46 + 64;
    uint64_t v48 = 1 << *(unsigned char *)(v46 + 32);
    uint64_t v49 = -1;
    if (v48 < 64) {
      uint64_t v49 = ~(-1 << v48);
    }
    uint64_t v50 = v32;
    unint64_t v51 = v49 & v47;
    uint64_t v114 = v50;
    uint64_t v52 = (uint64_t *)(v50 + 40);
    uint64_t v130 = v46;
    swift_bridgeObjectRetain();
    uint64_t v139 = v52;
    swift_beginAccess();
    int64_t v53 = 0;
    uint64_t v142 = (char **)(TupleTypeMetadata2 - 8);
    uint64_t v134 = (void (**)(char *, char *, char *))(v131 + 16);
    uint64_t v147 = (char *)(v132 + 16);
    v141 += 4;
    uint64_t v138 = (void (**)(char *, char *, char *))(v131 + 32);
    uint64_t v54 = (void (**)(char *, char *, uint64_t))(v132 + 32);
    uint64_t v137 = (unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48);
    uint64_t v136 = (void (**)(char *, uint64_t))(v132 + 8);
    uint64_t v115 = v40 - 8;
    uint64_t v135 = (void (**)(char *, char *))(v131 + 8);
    uint64_t v120 = (void (**)(char *, uint64_t))(v149 + 8);
    int64_t v124 = (unint64_t)(v48 + 63) >> 6;
    int64_t v111 = v124 - 1;
    uint64_t v122 = v14;
    uint64_t v55 = v125;
    uint64_t v6 = v145;
    uint64_t v133 = (void (**)(char *, char *, uint64_t))(v132 + 32);
    uint64_t v116 = TupleTypeMetadata2;
    if (v51) {
      break;
    }
LABEL_13:
    int64_t v60 = v53 + 1;
    if (__OFADD__(v53, 1))
    {
      __break(1u);
      goto LABEL_55;
    }
    if (v60 >= v124)
    {
      int64_t v149 = v53;
LABEL_18:
      unint64_t v51 = 0;
      uint64_t v59 = 1;
      goto LABEL_19;
    }
    unint64_t v61 = *(void *)(v119 + 8 * v60);
    if (v61) {
      goto LABEL_16;
    }
    if (v53 + 2 >= v124)
    {
      unint64_t v51 = 0;
      uint64_t v59 = 1;
      int64_t v149 = v53 + 1;
      goto LABEL_19;
    }
    unint64_t v61 = *(void *)(v119 + 8 * (v53 + 2));
    if (v61)
    {
      int64_t v60 = v53 + 2;
LABEL_16:
      unint64_t v51 = (v61 - 1) & v61;
      unint64_t v57 = __clz(__rbit64(v61)) + (v60 << 6);
      int64_t v149 = v60;
      goto LABEL_12;
    }
    uint64_t v102 = v53 + 3;
    if (v53 + 3 >= v124)
    {
      int64_t v149 = v53 + 2;
      goto LABEL_18;
    }
    unint64_t v61 = *(void *)(v119 + 8 * v102);
    if (v61)
    {
      int64_t v60 = v53 + 3;
      goto LABEL_16;
    }
    while (1)
    {
      int64_t v60 = v102 + 1;
      if (__OFADD__(v102, 1)) {
        break;
      }
      if (v60 >= v124)
      {
        unint64_t v51 = 0;
        uint64_t v59 = 1;
        int64_t v149 = v111;
        goto LABEL_19;
      }
      unint64_t v61 = *(void *)(v119 + 8 * v60);
      ++v102;
      if (v61) {
        goto LABEL_16;
      }
    }
LABEL_55:
    __break(1u);
  }
  while (1)
  {
    unint64_t v56 = __clz(__rbit64(v51));
    v51 &= v51 - 1;
    int64_t v149 = v53;
    unint64_t v57 = v56 | (v53 << 6);
LABEL_12:
    uint64_t v58 = v130;
    (*(void (**)(char *, unint64_t, char *))(v131 + 16))(v6, *(void *)(v130 + 48) + *(void *)(v131 + 72) * v57, v34);
    (*(void (**)(char *, unint64_t, uint64_t))(v132 + 16))(&v6[*(int *)(TupleTypeMetadata2 + 48)], *(void *)(v58 + 56) + *(void *)(v132 + 72) * v57, v11);
    uint64_t v59 = 0;
    uint64_t v54 = v133;
LABEL_19:
    uint64_t v62 = *(void *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56))(v6, v59, 1, TupleTypeMetadata2);
    uint64_t v63 = v143;
    (*v141)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v63, 1, TupleTypeMetadata2) == 1) {
      break;
    }
    uint64_t v64 = &v63[*(int *)(TupleTypeMetadata2 + 48)];
    (*v138)(v55, v63, v34);
    uint64_t v65 = *v54;
    (*v54)(v23, v64, v11);
    uint64_t v66 = *v139;
    swift_bridgeObjectRetain();
    MEMORY[0x1C877FC90](v55, v66, v34, v11, v146);
    swift_bridgeObjectRelease();
    if ((*v137)(v14, 1, v11) == 1)
    {
      (*v136)(v23, v11);
      (*v135)(v55, v34);
      (*v120)(v14, v123);
      goto LABEL_10;
    }
    uint64_t v67 = v23;
    uint64_t v68 = v140;
    v65(v140, v14, v11);
    uint64_t v127 = &v68[*(int *)(v11 + 36)];
    char v69 = sub_1C4497178();
    uint64_t v70 = *(void (**)(char *, char *, uint64_t))v147;
    uint64_t v71 = v129;
    uint64_t v72 = v68;
    uint64_t v23 = v67;
    (*(void (**)(char *, char *, uint64_t))v147)(v129, v72, v11);
    v70(v148, v67, v11);
    uint64_t v73 = v136;
    if (v69)
    {
      uint64_t v74 = v71;
      uint64_t v75 = *v136;
      (*v136)(v148, v11);
      v75(v74, v11);
LABEL_34:
      uint64_t v6 = v145;
      v75(v140, v11);
      v75(v67, v11);
      uint64_t v55 = v125;
      uint64_t v34 = v126;
      (*v135)(v125, v126);
      uint64_t v14 = v122;
      int64_t v53 = v149;
      if (!v51) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v76 = *(int *)(type metadata accessor for FinalizedTimestamp(0) + 20);
      uint64_t v77 = *(void *)&v71[v76];
      uint64_t v78 = *(void *)&v148[v76];
      if (v77 == v78)
      {
        unint64_t v152 = sub_1C4496658();
        LOWORD(v153) = v79;
        BYTE2(v153) = v80;
        BYTE3(v153) = v81;
        BYTE4(v153) = v82;
        BYTE5(v153) = v83;
        BYTE6(v153) = v84;
        HIBYTE(v153) = v85;
        unint64_t v150 = sub_1C4496658();
        LOWORD(v151) = v86;
        BYTE2(v151) = v87;
        BYTE3(v151) = v88;
        BYTE4(v151) = v89;
        BYTE5(v151) = v90;
        BYTE6(v151) = v91;
        HIBYTE(v151) = v92;
        unint64_t v93 = bswap64(v152);
        unint64_t v94 = bswap64(v150);
        if (v93 == v94 && (unint64_t v93 = bswap64(v153), v94 = bswap64(v151), v93 == v94))
        {
          LOBYTE(v95) = 0;
        }
        else
        {
          if (v93 < v94) {
            unsigned int v96 = -1;
          }
          else {
            unsigned int v96 = 1;
          }
          unsigned int v95 = v96 >> 31;
        }
      }
      else
      {
        LOBYTE(v95) = v77 < v78;
      }
      uint64_t v75 = *v73;
      (*v73)(v148, v11);
      v75(v129, v11);
      if ((v95 & 1) == 0) {
        goto LABEL_34;
      }
      uint64_t v97 = v125;
      uint64_t v98 = v126;
      (*v134)(v118, v125, v126);
      uint64_t v99 = v128;
      uint64_t v100 = *((void *)v128 - 1);
      uint64_t v101 = v117;
      (*(void (**)(char *, char *, char *))(v100 + 16))(v117, v127, v128);
      (*(void (**)(char *, void, uint64_t, char *))(v100 + 56))(v101, 0, 1, v99);
      uint64_t v34 = v98;
      uint64_t v54 = v133;
      sub_1C4497008();
      uint64_t v23 = v67;
      uint64_t v55 = v97;
      TupleTypeMetadata2 = v116;
      sub_1C4497048();
      v75(v140, v11);
      v75(v23, v11);
      (*v135)(v55, v34);
      uint64_t v14 = v122;
LABEL_10:
      uint64_t v6 = v145;
      int64_t v53 = v149;
      if (!v51) {
        goto LABEL_13;
      }
    }
  }
  swift_release();
  uint64_t v103 = v155;
  swift_bridgeObjectRetain();
  uint64_t v104 = sub_1C44976E8();
  swift_bridgeObjectRelease();
  if (v104 >= 1)
  {
    swift_release();
    uint64_t result = swift_release();
    goto LABEL_52;
  }
  swift_bridgeObjectRetain();
  uint64_t v106 = sub_1C4496F68();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  if (v106 < 1)
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v109 = v112;
    uint64_t *v112 = 0;
    v109[1] = 0;
  }
  else
  {
LABEL_52:
    uint64_t v107 = v154;
    uint64_t v108 = v112;
    uint64_t *v112 = v103;
    v108[1] = v107;
  }
  return result;
}

uint64_t sub_1C414F638(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v23 = a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(void *)(*a3 + 88);
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = *(void *)(v6 + 16);
  uint64_t v11 = sub_1C4497B38();
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(void *)(v5 + 80);
  MEMORY[0x1F4188790](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v23 - v16, a1, v15);
  swift_beginAccess();
  uint64_t v18 = a3[5];
  uint64_t v19 = *(void *)(v5 + 104);
  swift_bridgeObjectRetain();
  MEMORY[0x1C877FC90](a1, v18, v15, v6, v19);
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v9, 1, v6);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v22 = *(void *)(v10 - 8);
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v14, &v9[*(int *)(v6 + 36)], v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, v10);
    sub_1C4497008();
    sub_1C4497048();
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v9, v6);
  }
  return result;
}

uint64_t CRDictionary.apply(_:)(unint64_t *a1, uint64_t a2)
{
  int64_t v3 = v2;
  uint64_t v4 = a2;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v101 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  char v91 = (char *)&v80 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v100 = (char *)&v80 - v14;
  uint64_t v107 = v15;
  uint64_t v16 = sub_1C4497B38();
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v80 - v17;
  uint64_t v103 = sub_1C4497B38();
  uint64_t v98 = *(void (***)(uint64_t, uint64_t))(v103 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v103);
  uint64_t v102 = (char *)&v80 - v20;
  uint64_t v93 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = v6;
  uint64_t v23 = sub_1C4497B38();
  uint64_t result = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v26 = (char *)&v80 - v25;
  unint64_t v27 = *a1;
  if (!*a1) {
    return result;
  }
  uint64_t v89 = v9;
  __int16 v86 = (void (**)(char *, uint64_t))a1[1];
  sub_1C4150408();
  uint64_t v106 = v7;
  unint64_t v28 = v27;
  if ((v27 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1C4497C48();
    uint64_t result = sub_1C4497728();
    unint64_t v28 = v108;
    char v92 = v109;
    unint64_t v29 = v110;
    unsigned int v95 = v111;
    unint64_t v30 = v112;
  }
  else
  {
    uint64_t v31 = -1 << *(unsigned char *)(v27 + 32);
    uint64_t v32 = *(void *)(v27 + 56);
    char v92 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
    uint64_t v33 = ~v31;
    uint64_t v34 = -v31;
    if (v34 < 64) {
      uint64_t v35 = ~(-1 << v34);
    }
    else {
      uint64_t v35 = -1;
    }
    unint64_t v30 = v35 & v32;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v29 = v33;
    unsigned int v95 = 0;
  }
  unint64_t v94 = (void (*)(char *, char *, uint64_t))(v28 & 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v36 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56);
  unint64_t v87 = v29;
  int64_t v90 = (v29 + 64) >> 6;
  uint64_t v105 = (void (**)(void))(v93 + 16);
  ++v98;
  uint64_t v99 = (void (**)(char *, char *, uint64_t))(v93 + 32);
  unint64_t v96 = v28;
  uint64_t v97 = (void (**)(uint64_t, uint64_t))(v93 + 8);
  uint64_t v37 = v104;
  while ((v28 & 0x8000000000000000) != 0)
  {
    if (!sub_1C4497CB8())
    {
LABEL_28:
      unint64_t v48 = (unint64_t)v86;
      (*v36)(v26, 1, 1, v104);
      sub_1C3F7FCE8();
      if ((v48 & 0xC000000000000001) != 0)
      {
        uint64_t v49 = sub_1C4497F08();
        unint64_t v82 = 0;
        uint64_t v50 = 0;
        unint64_t v51 = 0;
        unint64_t v52 = v49 | 0x8000000000000000;
      }
      else
      {
        uint64_t v53 = -1 << *(unsigned char *)(v48 + 32);
        uint64_t v50 = ~v53;
        uint64_t v54 = *(void *)(v48 + 64);
        unint64_t v82 = v48 + 64;
        uint64_t v55 = -v53;
        if (v55 < 64) {
          uint64_t v56 = ~(-1 << v55);
        }
        else {
          uint64_t v56 = -1;
        }
        unint64_t v51 = v56 & v54;
        unint64_t v52 = v48;
      }
      uint64_t v57 = v106;
      uint64_t v83 = v52 & 0x7FFFFFFFFFFFFFFFLL;
      char v92 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v89 + 56);
      uint64_t v80 = v50;
      int64_t v81 = (unint64_t)(v50 + 64) >> 6;
      uint64_t v85 = v106 - 8;
      __int16 v86 = (void (**)(char *, uint64_t))(v89 + 8);
      uint64_t result = swift_bridgeObjectRetain();
      int64_t v84 = 0;
      int64_t v90 = v3;
      uint64_t v89 = v4;
      unint64_t v87 = v52;
      char v88 = v18;
      while (1)
      {
        if ((v52 & 0x8000000000000000) != 0)
        {
          if (!sub_1C4497F28()) {
            goto LABEL_54;
          }
          unint64_t v96 = v51;
          sub_1C44982C8();
          swift_unknownObjectRelease();
          sub_1C44982C8();
          swift_unknownObjectRelease();
        }
        else
        {
          if (v51)
          {
            unint64_t v58 = __clz(__rbit64(v51));
            uint64_t v59 = (v51 - 1) & v51;
            unint64_t v60 = v58 | (v84 << 6);
          }
          else
          {
            int64_t v76 = v84 + 1;
            if (__OFADD__(v84, 1)) {
              goto LABEL_57;
            }
            if (v76 >= v81)
            {
LABEL_54:
              (*v92)(v18, 1, 1, v107);
              return sub_1C3F7FCE8();
            }
            unint64_t v77 = *(void *)(v82 + 8 * v76);
            int64_t v78 = v84 + 1;
            if (!v77)
            {
              int64_t v78 = v84 + 2;
              if (v84 + 2 >= v81) {
                goto LABEL_54;
              }
              unint64_t v77 = *(void *)(v82 + 8 * v78);
              if (!v77)
              {
                int64_t v79 = v84 + 3;
                if (v84 + 3 >= v81) {
                  goto LABEL_54;
                }
                unint64_t v77 = *(void *)(v82 + 8 * v79);
                if (!v77)
                {
                  while (1)
                  {
                    int64_t v78 = v79 + 1;
                    if (__OFADD__(v79, 1)) {
                      goto LABEL_58;
                    }
                    if (v78 >= v81) {
                      goto LABEL_54;
                    }
                    unint64_t v77 = *(void *)(v82 + 8 * v78);
                    ++v79;
                    if (v77) {
                      goto LABEL_53;
                    }
                  }
                }
                int64_t v78 = v84 + 3;
              }
            }
LABEL_53:
            uint64_t v59 = (v77 - 1) & v77;
            unint64_t v60 = __clz(__rbit64(v77)) + (v78 << 6);
            int64_t v84 = v78;
          }
          unint64_t v96 = v59;
          (*(void (**)(char *, unint64_t, uint64_t))(v93 + 16))(v18, *(void *)(v52 + 48) + *(void *)(v93 + 72) * v60, v104);
          (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v57 - 8) + 16))(&v18[*(int *)(v107 + 48)], *(void *)(v52 + 56) + *(void *)(*(void *)(v57 - 8) + 72) * v60, v57);
        }
        uint64_t v61 = v107;
        (*v92)(v18, 0, 1, v107);
        uint64_t v62 = *(int *)(v61 + 48);
        uint64_t v63 = v100;
        uint64_t v64 = &v100[v62];
        uint64_t v65 = &v18[v62];
        uint64_t v66 = v104;
        (*v99)(v100, v18, v104);
        uint64_t v67 = *(void *)(v57 - 8);
        unint64_t v94 = *(void (**)(char *, char *, uint64_t))(v67 + 32);
        v94(v64, v65, v106);
        uint64_t v68 = (uint64_t)v91;
        unsigned int v95 = &v91[*(int *)(v107 + 48)];
        char v69 = v95;
        uint64_t v70 = *v105;
        ((void (*)(char *, char *, uint64_t))*v105)(v91, v63, v66);
        uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
        v71(v69, v64, v106);
        uint64_t v72 = &v101[*(int *)(v107 + 48)];
        v70();
        v71(v72, v64, v106);
        uint64_t v73 = v66;
        uint64_t v74 = (uint64_t)v102;
        v94(v102, v72, v106);
        uint64_t v57 = v106;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v67 + 56))(v74, 0, 1, v106);
        sub_1C41589BC(v74, v68, v89);
        uint64_t v75 = *v97;
        (*v97)(v68, v73);
        (*v98)(v74, v103);
        (*v86)(v100, v107);
        v75((uint64_t)v101, v73);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v95, v57);
        uint64_t v18 = v88;
        unint64_t v52 = v87;
        unint64_t v51 = v96;
      }
    }
    sub_1C44982C8();
    swift_unknownObjectRelease();
LABEL_11:
    (*v36)(v26, 0, 1, v37);
    (*v99)(v22, v26, v37);
    sub_1C4150408();
    int64_t v40 = v3;
    uint64_t v41 = v4;
    uint64_t v42 = (uint64_t)v102;
    sub_1C414A330((uint64_t)v22, (uint64_t)v102);
    uint64_t v43 = v42;
    uint64_t v4 = v41;
    int64_t v3 = v40;
    (*v98)(v43, v103);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v97)(v22, v37);
    unint64_t v28 = v96;
  }
  if (v30)
  {
    unint64_t v38 = __clz(__rbit64(v30));
    v30 &= v30 - 1;
    unint64_t v39 = v38 | ((void)v95 << 6);
LABEL_10:
    (*(void (**)(char *, unint64_t, uint64_t))(v93 + 16))(v26, *(void *)(v28 + 48) + *(void *)(v93 + 72) * v39, v104);
    goto LABEL_11;
  }
  int64_t v44 = (int64_t)(v95 + 1);
  if (!__OFADD__(v95, 1))
  {
    if (v44 >= v90) {
      goto LABEL_28;
    }
    unint64_t v45 = (unint64_t)v92[v44];
    uint64_t v46 = v95 + 1;
    if (!v45)
    {
      uint64_t v46 = v95 + 2;
      if ((uint64_t)(v95 + 2) >= v90) {
        goto LABEL_28;
      }
      unint64_t v45 = (unint64_t)v92[(void)v46];
      if (!v45)
      {
        uint64_t v46 = v95 + 3;
        if ((uint64_t)(v95 + 3) >= v90) {
          goto LABEL_28;
        }
        unint64_t v45 = (unint64_t)v92[(void)v46];
        if (!v45)
        {
          uint64_t v47 = v95 + 4;
          do
          {
            if ((char *)v90 == v47) {
              goto LABEL_28;
            }
            unint64_t v45 = (unint64_t)v92[(void)v47++];
          }
          while (!v45);
          uint64_t v46 = v47 - 1;
        }
      }
    }
    unint64_t v30 = (v45 - 1) & v45;
    unint64_t v39 = __clz(__rbit64(v45)) + ((void)v46 << 6);
    unsigned int v95 = v46;
    goto LABEL_10;
  }
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

uint64_t sub_1C4150408()
{
  type metadata accessor for CRDictionaryRef();
  uint64_t result = sub_1C4498298();
  if ((result & 1) == 0)
  {
    int64_t v2 = sub_1C4148EF8();
    uint64_t result = swift_release();
    *uint64_t v0 = v2;
  }
  return result;
}

uint64_t CRDictionary.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C414A330(a1, a2);
}

uint64_t CRDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C414915C(a1, a2);
}

uint64_t sub_1C41504E4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return CRDictionary.subscript.getter(a1, a2);
}

uint64_t sub_1C4150550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CRDictionary();
  return sub_1C41589BC(a1, a3, v5);
}

void (*CRDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x48uLL);
  *a1 = v7;
  void *v7 = a3;
  v7[1] = v3;
  uint64_t v8 = sub_1C4497B38();
  v7[2] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[3] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[4] = malloc(v10);
  uint64_t v11 = malloc(v10);
  uint64_t v12 = *(void *)(a3 + 16);
  v7[5] = v11;
  v7[6] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13;
  v7[7] = v13;
  v7[8] = malloc(*(void *)(v13 + 64));
  (*(void (**)(void))(v14 + 16))();
  sub_1C414915C(a2, (uint64_t)v11);
  return sub_1C4150710;
}

void sub_1C4150710(uint64_t **a1, char a2)
{
}

uint64_t sub_1C4150728@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C4149E38(a1, a2);
}

uint64_t CRDictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = &v14[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *))(v10 + 16))(v12);
  uint64_t v15 = v9;
  long long v16 = *(_OWORD *)(a4 + 24);
  long long v17 = *(_OWORD *)(a4 + 40);
  uint64_t v18 = *(void *)(a4 + 56);
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  sub_1C414A09C((uint64_t)v12, (uint64_t (*)(uint64_t))sub_1C4158CB8, (uint64_t)v14, a5);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t CRDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1C4158CE8(a1, a2, a5);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a5 + 16) - 8) + 8))(a2);
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a5 + 24) - 8) + 8);
  return v8(a1);
}

void (*CRDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t **a1, char a2)
{
  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  *uint64_t v11 = a5;
  v11[1] = v5;
  uint64_t v12 = *(void *)(a5 + 24);
  void v11[2] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v11[3] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[4] = malloc(v14);
  uint64_t v15 = malloc(v14);
  uint64_t v16 = *(void *)(a5 + 16);
  v11[5] = v15;
  v11[6] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = v17;
  v11[7] = v17;
  v11[8] = malloc(*(void *)(v17 + 64));
  (*(void (**)(void))(v18 + 16))();
  CRDictionary.subscript.getter(a2, a3, a4, a5, (uint64_t)v15);
  return sub_1C4150AA8;
}

void sub_1C4150AA8(uint64_t **a1, char a2)
{
}

void sub_1C4150AC0(uint64_t **a1, char a2, void (*a3)(void *, void *, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v6 = (*a1)[7];
  uint64_t v5 = (void *)(*a1)[8];
  uint64_t v7 = (void *)(*a1)[5];
  uint64_t v13 = (*a1)[6];
  uint64_t v9 = (*a1)[3];
  uint64_t v8 = (void *)(*a1)[4];
  uint64_t v10 = (*a1)[2];
  uint64_t v11 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v9 + 16))(v4[4], v7, v4[2]);
    a3(v8, v5, v11);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v13);
    uint64_t v12 = *(void (**)(void *, uint64_t))(v9 + 8);
    v12(v8, v10);
    v12(v7, v10);
  }
  else
  {
    a3(v7, v5, *v4);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v13);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v7, v10);
  }
  free(v5);
  free(v7);
  free(v8);
  free(v4);
}

uint64_t CRDictionary.index(where:)@<X0>(uint64_t (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = a3;
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t v36 = a4;
  uint64_t v7 = *(void *)(a3 + 24);
  unint64_t v38 = *(void (***)(char *, uint64_t))(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v42 = (uint64_t)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v34 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v49 = *v4;
  uint64_t v14 = v49;
  CRDictionary.startIndex.getter(v15, (uint64_t)&v51);
  uint64_t v35 = v14;
  *(void *)&long long v47 = v14;
  CRDictionary.endIndex.getter(v6, (uint64_t)&v49);
  long long v46 = v49;
  LODWORD(v14) = v50;
  uint64_t v16 = *(void *)(v6 + 40);
  uint64_t v41 = v7;
  uint64_t v17 = type metadata accessor for CRDictionaryElement();
  uint64_t v19 = *((void *)&v51 + 1);
  uint64_t v18 = v51;
  char v20 = v52;
  uint64_t v40 = v16;
  int v45 = v14;
  uint64_t v39 = v17;
  if (sub_1C4496F48())
  {
LABEL_6:
    sub_1C3F882B0(v18, v19, v20);
    uint64_t result = sub_1C3F882B0(v46, *((uint64_t *)&v46 + 1), v45);
    uint64_t v32 = v36;
    void *v36 = 0;
    v32[1] = 0;
    char v33 = -1;
  }
  else
  {
    uint64_t v37 = (void (**)(uint64_t, uint64_t))(v38 + 1);
    unint64_t v38 = (void (**)(char *, uint64_t))(v34 + 8);
    uint64_t v21 = v35;
    while (1)
    {
      *(void *)&long long v47 = v21;
      *(void *)&long long v49 = v18;
      *((void *)&v49 + 1) = v19;
      unsigned __int8 v50 = v20 & 1;
      uint64_t v22 = v42;
      CRDictionary.subscript.getter((uint64_t)v13, v42, (uint64_t)&v49, v6);
      char v23 = v43(v13, v22);
      if (v5)
      {
        sub_1C3F882B0(v46, *((uint64_t *)&v46 + 1), v45);
        (*v37)(v22, v41);
        (*v38)(v13, v11);
        return sub_1C3F882B0(v51, *((uint64_t *)&v51 + 1), v52);
      }
      char v24 = v23;
      (*v37)(v22, v41);
      (*v38)(v13, v11);
      if (v24) {
        break;
      }
      uint64_t v53 = v21;
      uint64_t v26 = *((void *)&v51 + 1);
      uint64_t v25 = v51;
      uint64_t v27 = v11;
      uint64_t v28 = v6;
      char v29 = v52;
      long long v47 = v51;
      char v48 = v52;
      CRDictionary.index(after:)((uint64_t)&v49);
      char v30 = v29;
      uint64_t v6 = v28;
      uint64_t v11 = v27;
      sub_1C3F882B0(v25, v26, v30);
      uint64_t v19 = *((void *)&v49 + 1);
      uint64_t v18 = v49;
      char v20 = v50;
      long long v51 = v49;
      char v52 = v50;
      if (sub_1C4496F48()) {
        goto LABEL_6;
      }
    }
    uint64_t result = sub_1C3F882B0(v46, *((uint64_t *)&v46 + 1), v45);
    char v33 = v52;
    uint64_t v32 = v36;
    *(_OWORD *)uint64_t v36 = v51;
  }
  *((unsigned char *)v32 + 16) = v33;
  return result;
}

uint64_t CRDictionary.startIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C4150FF4(a1, MEMORY[0x1E4FBAE00], a2);
}

uint64_t CRDictionary.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C4150FF4(a1, MEMORY[0x1E4FBAE98], a2);
}

uint64_t sub_1C4150FF4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = type metadata accessor for CRDictionaryElement();
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = a2(v9, v6, v7, v8);
  uint64_t v12 = v11;
  LOBYTE(v6) = v13;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v12;
  *(unsigned char *)(a3 + 16) = v6 & 1;
  return result;
}

uint64_t CRDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a2;
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v5 = *(void *)(a4 + 24);
  uint64_t v32 = a1;
  uint64_t v33 = v5;
  uint64_t v7 = type metadata accessor for CRDictionaryElement();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = TupleTypeMetadata2 - 8;
  uint64_t v10 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v31 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v28 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v28 - v15;
  LODWORD(v30) = *(unsigned __int8 *)(a3 + 16);
  uint64_t v17 = (char *)&v28 + *(int *)(v9 + 56) - v15;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v18 = v17;
  char v29 = v17;
  sub_1C4497058();
  swift_bridgeObjectRelease();
  char v30 = &v14[*(int *)(v9 + 56)];
  uint64_t v19 = v30;
  uint64_t v20 = *(void *)(v6 - 8);
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v14, v16, v6);
  uint64_t v21 = *(void *)(v7 - 8);
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v19, v18, v7);
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 32);
  v22(v32, v14, v6);
  uint64_t v23 = *(int *)(v9 + 56);
  char v24 = v31;
  uint64_t v25 = &v31[v23];
  v22((uint64_t)v31, v16, v6);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v25, v29, v7);
  (*(void (**)(uint64_t, char *))(*(void *)(v33 - 8) + 16))(v34, &v25[*(int *)(v7 + 36)]);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v21 + 8);
  v26(v25, v7);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v6);
  return ((uint64_t (*)(char *, uint64_t))v26)(v30, v7);
}

uint64_t CRDictionary.index(after:)@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  type metadata accessor for CRDictionaryElement();
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_1C4496F78();
  uint64_t v4 = v3;
  char v6 = v5;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v6 & 1;
  return result;
}

uint64_t CRDictionary.merge(_:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t result = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v38 - v15;
  v42[0] = *a1;
  uint64_t v17 = v42[0];
  if (*v3 != v42[0])
  {
    uint64_t v38 = result;
    uint64_t v39 = v14;
    uint64_t v40 = v13;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v19 = (void *)sub_1C4385090((uint64_t)v42, a2, WitnessTable);
    uint64_t v20 = *v3;
    swift_beginAccess();
    uint64_t v21 = *(void *)(v20 + 24);
    uint64_t v22 = *(void *)(v20 + 32);
    swift_beginAccess();
    uint64_t v23 = v19[3];
    v41[0] = 0;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v24 = swift_bridgeObjectRetain();
    sub_1C41136F0(v24, v41, v22);
    sub_1C41136F0(v23, v41, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v41[0] == 1)
    {
      sub_1C4153928();
      uint64_t v34 = *v3;
      uint64_t v35 = v17 + qword_1EBBC59A8;
      swift_beginAccess();
      sub_1C415C6B0(v35, (uint64_t)v16, type metadata accessor for FinalizedTimestamp);
      uint64_t v36 = v34 + qword_1EBBC59A8;
      swift_beginAccess();
      sub_1C4158E4C((uint64_t)v16, v36);
      return swift_endAccess();
    }
    if (v41[0] != 3) {
      return swift_release();
    }
    sub_1C4150408();
    swift_retain();
    sub_1C4380528(v19);
    swift_release();
    swift_release();
    uint64_t v25 = *v3 + qword_1EBBC59A8;
    swift_beginAccess();
    sub_1C415C6B0(v25, (uint64_t)v10, type metadata accessor for FinalizedTimestamp);
    uint64_t v26 = v17 + qword_1EBBC59A8;
    swift_beginAccess();
    uint64_t v27 = v26;
    uint64_t v28 = v39;
    sub_1C415C6B0(v27, v39, type metadata accessor for FinalizedTimestamp);
    uint64_t v29 = *(int *)(v38 + 20);
    uint64_t v30 = *(void *)(v28 + v29);
    uint64_t v31 = *(void *)&v10[v29];
    if (v30 == v31)
    {
      char v32 = sub_1C410BE0C();
      uint64_t v33 = (uint64_t)v10;
      if (v32) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v33 = (uint64_t)v10;
      if (v30 < v31)
      {
LABEL_11:
        uint64_t v37 = v40;
        sub_1C415C6B0(v33, v40, type metadata accessor for FinalizedTimestamp);
        sub_1C3F9235C(v28, type metadata accessor for FinalizedTimestamp);
        sub_1C3F9235C((uint64_t)v10, type metadata accessor for FinalizedTimestamp);
        swift_beginAccess();
        sub_1C4158E4C(v37, v25);
        return swift_endAccess();
      }
    }
    uint64_t v33 = v28;
    goto LABEL_11;
  }
  return result;
}

uint64_t CRDictionary.visitReferences(_:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v60 = a1;
  uint64_t v5 = a2[3];
  uint64_t v58 = a2[6];
  uint64_t v59 = v5;
  uint64_t v6 = type metadata accessor for CRDictionaryElement();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v53 = (char *)&v44 - v9;
  uint64_t v61 = a2;
  uint64_t v10 = *(void *)(a2[2] - 8);
  MEMORY[0x1F4188790](v8);
  char v52 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = v12;
  uint64_t v66 = v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v64 = sub_1C4497B38();
  uint64_t v15 = *(void *)(v64 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v64);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v44 - v19;
  uint64_t v21 = *v3;
  swift_beginAccess();
  uint64_t v22 = *(void *)(v21 + 40);
  uint64_t v23 = *(void *)(v22 + 64);
  uint64_t v45 = v22 + 64;
  uint64_t v24 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & v23;
  uint64_t v63 = TupleTypeMetadata2 - 8;
  uint64_t v48 = v10 + 16;
  uint64_t v47 = v7 + 16;
  uint64_t v62 = (void (**)(char *, char *, uint64_t))(v15 + 32);
  uint64_t v56 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v57 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v50 = v7;
  uint64_t v55 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v49 = v10;
  uint64_t v54 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  int64_t v46 = (unint64_t)(v24 + 63) >> 6;
  int64_t v44 = v46 - 1;
  uint64_t v51 = v22;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v28 = 0;
  uint64_t v30 = v52;
  uint64_t v29 = v53;
  uint64_t v31 = v65;
  uint64_t v32 = v66;
  if (!v26) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v33 = __clz(__rbit64(v26));
  v26 &= v26 - 1;
  int64_t v67 = v28;
  unint64_t v34 = v33 | (v28 << 6);
LABEL_5:
  uint64_t v35 = v51;
  (*(void (**)(char *, unint64_t, uint64_t))(v49 + 16))(v18, *(void *)(v51 + 48) + *(void *)(v49 + 72) * v34, v65);
  (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(&v18[*(int *)(TupleTypeMetadata2 + 48)], *(void *)(v35 + 56) + *(void *)(v50 + 72) * v34, v66);
  for (uint64_t i = 0; ; uint64_t i = 1)
  {
    while (1)
    {
LABEL_12:
      uint64_t v39 = *(void *)(TupleTypeMetadata2 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v18, i, 1, TupleTypeMetadata2);
      (*v62)(v20, v18, v64);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v20, 1, TupleTypeMetadata2) == 1) {
        return swift_release();
      }
      uint64_t v40 = &v20[*(int *)(TupleTypeMetadata2 + 48)];
      (*v57)(v30, v20, v31);
      (*v56)(v29, v40, v32);
      uint64_t v41 = v60;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v61[4] + 8) + 48))(v60, v31);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 + 8) + 48))(v41, v59);
      (*v55)(v29, v32);
      uint64_t result = (*v54)(v30, v31);
      int64_t v28 = v67;
      if (v26) {
        goto LABEL_4;
      }
LABEL_6:
      int64_t v37 = v28 + 1;
      if (__OFADD__(v28, 1))
      {
        __break(1u);
        goto LABEL_30;
      }
      if (v37 >= v46)
      {
        int64_t v67 = v28;
        goto LABEL_11;
      }
      unint64_t v38 = *(void *)(v45 + 8 * v37);
      if (v38) {
        goto LABEL_9;
      }
      int64_t v42 = v28 + 2;
      if (v28 + 2 < v46) {
        break;
      }
      unint64_t v26 = 0;
      uint64_t i = 1;
      int64_t v67 = v28 + 1;
    }
    unint64_t v38 = *(void *)(v45 + 8 * v42);
    if (v38)
    {
      int64_t v37 = v28 + 2;
LABEL_9:
      unint64_t v26 = (v38 - 1) & v38;
      unint64_t v34 = __clz(__rbit64(v38)) + (v37 << 6);
      int64_t v67 = v37;
      goto LABEL_5;
    }
    int64_t v43 = v28 + 3;
    if (v43 < v46) {
      break;
    }
    int64_t v67 = v42;
LABEL_11:
    unint64_t v26 = 0;
  }
  unint64_t v38 = *(void *)(v45 + 8 * v43);
  if (v38)
  {
    int64_t v37 = v43;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v37 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v37 >= v46)
    {
      unint64_t v26 = 0;
      uint64_t i = 1;
      int64_t v67 = v44;
      goto LABEL_12;
    }
    unint64_t v38 = *(void *)(v45 + 8 * v37);
    ++v43;
    if (v38) {
      goto LABEL_9;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall CRDictionary.needToFinalizeTimestamps()()
{
  return sub_1C3F79798() & 1;
}

uint64_t CRDictionary.finalizeTimestamps(_:)(uint64_t a1)
{
  uint64_t result = sub_1C3F79798();
  if (result)
  {
    sub_1C4150408();
    return sub_1C4383764(a1);
  }
  return result;
}

uint64_t static CRDictionary.== infix(_:_:)(uint64_t a1, void **a2)
{
  return sub_1C437D3D8(*a2) & 1;
}

uint64_t CRDictionary.description.getter()
{
  uint64_t v1 = sub_1C4496678();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  uint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  sub_1C4497D28();
  uint64_t v16 = v14;
  unint64_t v17 = v15;
  sub_1C4497268();
  uint64_t v6 = *(void *)(v5 + 16) + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07E0);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C449B4A0;
  char v8 = sub_1C4496658();
  uint64_t v9 = MEMORY[0x1E4FBC358];
  uint64_t v10 = MEMORY[0x1E4FBC3B0];
  *(void *)(v7 + 56) = MEMORY[0x1E4FBC358];
  *(void *)(v7 + 64) = v10;
  *(unsigned char *)(v7 + 32) = v8;
  uint64_t v11 = sub_1C4496658();
  *(void *)(v7 + 96) = v9;
  *(void *)(v7 + 104) = v10;
  *(unsigned char *)(v7 + 72) = BYTE1(v11);
  sub_1C44971E8();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_1C4497268();
  swift_bridgeObjectRelease();
  sub_1C4497268();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1C3F67294();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C4497268();
  swift_beginAccess();
  uint64_t v13 = *(void *)(v5 + 40);
  type metadata accessor for CRDictionaryElement();
  sub_1C4497008();
  swift_getWitnessTable();
  sub_1C44982B8();
  sub_1C4497268();
  return v16;
}

uint64_t CRDictionary.hasDelta(from:)(void **a1)
{
  return sub_1C43832E4(*a1) & 1;
}

uint64_t CRDictionary.delta(_:from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = *v4;
  uint64_t v23 = *a2;
  uint64_t v24 = v8;
  swift_retain();
  swift_retain();
  CRDictionary.finalizeTimestamps(_:)(a1);
  CRDictionary.finalizeTimestamps(_:)(a1);
  uint64_t v9 = v24;
  v22[0] = v24;
  CRDictionary.version.getter(&v18);
  long long v10 = v18;
  uint64_t v21 = v23;
  CRDictionary.version.getter(v22);
  uint64_t v11 = v22[0];
  if (sub_1C4112134(*((uint64_t *)&v10 + 1), v22[1]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_4:
    swift_retain();
    swift_retain();
    sub_1C414A5E8(a1, v9, a4);
    swift_release_n();
    swift_release_n();
    long long v13 = a3[2];
    long long v18 = a3[1];
    long long v19 = v13;
    long long v20 = a3[3];
    uint64_t v14 = type metadata accessor for CRDictionary.MergeableDelta();
    return (*(uint64_t (**)(_OWORD *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a4, 0, 1, v14);
  }
  char v12 = sub_1C4112134(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12) {
    goto LABEL_4;
  }
  swift_release();
  swift_release();
  long long v16 = a3[2];
  long long v18 = a3[1];
  long long v19 = v16;
  long long v20 = a3[3];
  uint64_t v17 = type metadata accessor for CRDictionary.MergeableDelta();
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a4, 1, 1, v17);
}

uint64_t CRDictionary.canMerge(delta:)(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v2 = sub_1C4381EC8(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t CRDictionary.merge(delta:)(void *a1, _OWORD *a2)
{
  uint64_t v27 = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v5 = MEMORY[0x1F4188790](v27);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v28 = (uint64_t)&v26 - v8;
  unint64_t v26 = a2;
  sub_1C4150408();
  uint64_t v9 = *v2;
  uint64_t v10 = a1[1];
  uint64_t v12 = a1[2];
  uint64_t v11 = a1[3];
  uint64_t v13 = a1[4];
  uint64_t v14 = a1[5];
  *(void *)&long long v29 = *a1;
  *((void *)&v29 + 1) = v10;
  *(void *)&long long v30 = v12;
  *((void *)&v30 + 1) = v11;
  *(void *)&long long v31 = v13;
  *((void *)&v31 + 1) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v15 = sub_1C4382094(&v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v16 = v9 + qword_1EBBC59A8;
    swift_beginAccess();
    sub_1C415C6B0(v16, (uint64_t)v7, type metadata accessor for FinalizedTimestamp);
    long long v17 = v26[2];
    long long v29 = v26[1];
    long long v30 = v17;
    long long v31 = v26[3];
    long long v18 = (char *)a1 + *(int *)(type metadata accessor for CRDictionary.MergeableDelta() + 68);
    uint64_t v19 = *(int *)(v27 + 20);
    uint64_t v20 = *(void *)&v18[v19];
    uint64_t v21 = *(void *)&v7[v19];
    if (v20 == v21)
    {
      char v22 = sub_1C410BE0C();
      uint64_t v23 = (uint64_t)v7;
      if (v22) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v23 = (uint64_t)v7;
      if (v20 < v21)
      {
LABEL_7:
        uint64_t v24 = v28;
        sub_1C415C6B0(v23, v28, type metadata accessor for FinalizedTimestamp);
        sub_1C3F9235C((uint64_t)v7, type metadata accessor for FinalizedTimestamp);
        swift_beginAccess();
        sub_1C4158E4C(v24, v16);
        swift_endAccess();
        return v15 & 1;
      }
    }
    uint64_t v23 = (uint64_t)v18;
    goto LABEL_7;
  }
  return v15 & 1;
}

uint64_t CRDictionary.observableDifference(from:with:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  v159[7] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[3];
  uint64_t v119 = *(void *)(v10 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = sub_1C4497B38();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v118 = (char *)&v110 - v13;
  uint64_t v135 = v11;
  uint64_t v14 = v10;
  uint64_t v15 = type metadata accessor for CRDictionaryElement();
  uint64_t v125 = sub_1C4497B38();
  int64_t v151 = *(void *)(v125 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v125);
  uint64_t v127 = (char *)&v110 - v17;
  uint64_t v134 = *(void *)(v15 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v128 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v129 = (char *)&v110 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v143 = (char *)&v110 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  unint64_t v152 = (char *)&v110 - v25;
  uint64_t v26 = a3[2];
  uint64_t v133 = *(void *)(v26 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v117 = (char *)&v110 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v126 = (char *)&v110 - v29;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v145 = sub_1C4497B38();
  uint64_t v31 = MEMORY[0x1F4188790](v145);
  uint64_t v146 = (char *)&v110 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v31);
  uint64_t v144 = (char *)&v110 - v35;
  uint64_t v36 = *a1;
  uint64_t v37 = *v5;
  uint64_t v120 = a2;
  if (!*(void *)(a2 + 24) && v37 == v36)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  unint64_t v112 = a4;
  uint64_t v38 = a3[5];
  uint64_t v39 = v34;
  v159[0] = sub_1C4496EC8();
  uint64_t v158 = sub_1C4496EC8();
  uint64_t v157 = sub_1C4496EA8();
  uint64_t v40 = MEMORY[0x1F4188790](v157);
  uint64_t v41 = v135;
  *(&v110 - 8) = v26;
  *(&v110 - 7) = v41;
  *(&v110 - 6) = a3[4];
  *(&v110 - 5) = v38;
  uint64_t v42 = a3[7];
  *(&v110 - 4) = v14;
  *(&v110 - 3) = v42;
  *(&v110 - 2) = (uint64_t)v159;
  MEMORY[0x1F4188790](v40);
  *(&v110 - 8) = v26;
  *(&v110 - 7) = v43;
  *(&v110 - 6) = v44;
  *(&v110 - 5) = v38;
  uint64_t v150 = v38;
  *(&v110 - 4) = v14;
  *(&v110 - 3) = v45;
  uint64_t v123 = v45;
  *(&v110 - 2) = (uint64_t)&v158;
  sub_1C4380CE0(v36, v120, (void (*)(char *))sub_1C4158CA8, v46, (void (*)(char *))sub_1C4158CA8, (uint64_t)(&v110 - 10));
  swift_beginAccess();
  uint64_t v47 = *(void *)(v36 + 40);
  uint64_t v48 = *(void *)(v47 + 64);
  uint64_t v113 = v47 + 64;
  uint64_t v49 = 1 << *(unsigned char *)(v47 + 32);
  uint64_t v50 = -1;
  if (v49 < 64) {
    uint64_t v50 = ~(-1 << v49);
  }
  unint64_t v51 = v50 & v48;
  uint64_t v130 = v47;
  swift_bridgeObjectRetain();
  uint64_t v140 = (uint64_t *)(v37 + 40);
  swift_beginAccess();
  int64_t v52 = 0;
  uint64_t v142 = TupleTypeMetadata2 - 8;
  uint64_t v147 = (void (**)(char *, char *, uint64_t))(v133 + 16);
  int64_t v149 = (void (**)(char *, char *, uint64_t))(v134 + 16);
  uint64_t v141 = (void (**)(void))(v39 + 32);
  uint64_t v139 = (void (**)(char *, char *, uint64_t))(v133 + 32);
  uint64_t v53 = (void (**)(char *, char *, uint64_t))(v134 + 32);
  uint64_t v138 = (unsigned int (**)(char *, uint64_t, uint64_t))(v134 + 48);
  uint64_t v136 = (void (**)(char *, uint64_t))(v134 + 8);
  uint64_t v137 = (void (**)(char *, uint64_t))(v133 + 8);
  uint64_t v114 = v119 + 40;
  uint64_t v122 = (void (**)(char *, uint64_t))(v151 + 8);
  int64_t v124 = (unint64_t)(v49 + 63) >> 6;
  int64_t v111 = v124 - 1;
  uint64_t v54 = v127;
  uint64_t v55 = v126;
  uint64_t v116 = v26;
  uint64_t v115 = TupleTypeMetadata2;
  uint64_t v148 = (void (**)(char *, char *, uint64_t))(v134 + 32);
  uint64_t v56 = v146;
  if (!v51) {
    goto LABEL_10;
  }
LABEL_7:
  unint64_t v57 = __clz(__rbit64(v51));
  v51 &= v51 - 1;
  unint64_t v58 = v57 | (v52 << 6);
LABEL_8:
  uint64_t v59 = v130;
  (*(void (**)(char *, unint64_t, uint64_t))(v133 + 16))(v56, *(void *)(v130 + 48) + *(void *)(v133 + 72) * v58, v26);
  (*(void (**)(char *, unint64_t, uint64_t))(v134 + 16))(&v56[*(int *)(TupleTypeMetadata2 + 48)], *(void *)(v59 + 56) + *(void *)(v134 + 72) * v58, v15);
  uint64_t v60 = 0;
  uint64_t v53 = v148;
  while (1)
  {
    uint64_t v64 = *(void *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v56, v60, 1, TupleTypeMetadata2);
    uint64_t v65 = v144;
    (*v141)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v65, 1, TupleTypeMetadata2) == 1) {
      break;
    }
    int64_t v151 = v52;
    uint64_t v66 = &v65[*(int *)(TupleTypeMetadata2 + 48)];
    (*v139)(v55, v65, v26);
    int64_t v67 = *v53;
    uint64_t v68 = v152;
    (*v53)(v152, v66, v15);
    uint64_t v69 = *v140;
    swift_bridgeObjectRetain();
    MEMORY[0x1C877FC90](v55, v69, v26, v15, v150);
    swift_bridgeObjectRelease();
    if ((*v138)(v54, 1, v15) == 1)
    {
      (*v136)(v68, v15);
      (*v137)(v55, v26);
      (*v122)(v54, v125);
      goto LABEL_39;
    }
    uint64_t v70 = v143;
    v67(v143, v54, v15);
    uint64_t v71 = *(int *)(v15 + 36);
    uint64_t v132 = &v70[v71];
    uint64_t v131 = &v152[v71];
    char v72 = sub_1C4497178();
    uint64_t v73 = *v149;
    uint64_t v74 = v129;
    uint64_t v75 = v70;
    int64_t v76 = v152;
    (*v149)(v129, v75, v15);
    unint64_t v77 = v128;
    v73(v128, v76, v15);
    if (v72)
    {
      int64_t v78 = *v136;
      (*v136)(v77, v15);
      v78(v74, v15);
    }
    else
    {
      uint64_t v79 = *(int *)(type metadata accessor for FinalizedTimestamp(0) + 20);
      uint64_t v80 = *(void *)&v77[v79];
      uint64_t v81 = *(void *)&v74[v79];
      unint64_t v82 = v136;
      if (v80 == v81)
      {
        unint64_t v155 = sub_1C4496658();
        LOWORD(v156) = v83;
        BYTE2(v156) = v84;
        BYTE3(v156) = v85;
        BYTE4(v156) = v86;
        BYTE5(v156) = v87;
        BYTE6(v156) = v88;
        HIBYTE(v156) = v89;
        unint64_t v153 = sub_1C4496658();
        LOWORD(v154) = v90;
        BYTE2(v154) = v91;
        BYTE3(v154) = v92;
        BYTE4(v154) = v93;
        BYTE5(v154) = v94;
        BYTE6(v154) = v95;
        HIBYTE(v154) = v96;
        unint64_t v97 = bswap64(v155);
        unint64_t v98 = bswap64(v153);
        if (v97 == v98 && (unint64_t v97 = bswap64(v156), v98 = bswap64(v154), v97 == v98))
        {
          unint64_t v77 = v128;
          BOOL v99 = 0;
        }
        else
        {
          unint64_t v77 = v128;
          if (v97 < v98) {
            unsigned int v100 = -1;
          }
          else {
            unsigned int v100 = 1;
          }
          BOOL v99 = v100 >> 31;
        }
      }
      else
      {
        BOOL v99 = v80 < v81;
      }
      int64_t v78 = *v82;
      (*v82)(v77, v15);
      v78(v129, v15);
      if (!v99)
      {
        v78(v143, v15);
        v78(v76, v15);
        uint64_t v55 = v126;
        (*v137)(v126, v26);
        uint64_t v54 = v127;
        goto LABEL_38;
      }
    }
    uint64_t v101 = v126;
    uint64_t v26 = v116;
    (*v147)(v117, v126, v116);
    (*(void (**)(char *, uint64_t, uint64_t))(v119 + 40))(v131, v120, v135);
    sub_1C4497008();
    sub_1C4497048();
    v78(v143, v15);
    v78(v152, v15);
    uint64_t v55 = v101;
    (*v137)(v101, v26);
    uint64_t v54 = v127;
    TupleTypeMetadata2 = v115;
LABEL_38:
    uint64_t v53 = v148;
LABEL_39:
    int64_t v52 = v151;
    uint64_t v56 = v146;
    if (v51) {
      goto LABEL_7;
    }
LABEL_10:
    int64_t v61 = v52 + 1;
    if (__OFADD__(v52, 1))
    {
      __break(1u);
LABEL_52:
      __break(1u);
    }
    if (v61 >= v124) {
      goto LABEL_21;
    }
    unint64_t v62 = *(void *)(v113 + 8 * v61);
    if (v62) {
      goto LABEL_13;
    }
    v52 += 2;
    if (v61 + 1 >= v124)
    {
      unint64_t v51 = 0;
      uint64_t v60 = 1;
      int64_t v52 = v61;
    }
    else
    {
      unint64_t v62 = *(void *)(v113 + 8 * v52);
      if (v62)
      {
        ++v61;
LABEL_13:
        unint64_t v51 = (v62 - 1) & v62;
        unint64_t v58 = __clz(__rbit64(v62)) + (v61 << 6);
        int64_t v52 = v61;
        goto LABEL_8;
      }
      int64_t v63 = v61 + 2;
      if (v61 + 2 >= v124)
      {
LABEL_21:
        unint64_t v51 = 0;
        uint64_t v60 = 1;
      }
      else
      {
        unint64_t v62 = *(void *)(v113 + 8 * v63);
        if (v62)
        {
          v61 += 2;
          goto LABEL_13;
        }
        while (1)
        {
          int64_t v61 = v63 + 1;
          if (__OFADD__(v63, 1)) {
            goto LABEL_52;
          }
          if (v61 >= v124) {
            break;
          }
          unint64_t v62 = *(void *)(v113 + 8 * v61);
          ++v63;
          if (v62) {
            goto LABEL_13;
          }
        }
        unint64_t v51 = 0;
        uint64_t v60 = 1;
        int64_t v52 = v111;
      }
    }
  }
  swift_release();
  uint64_t v102 = v159[0];
  swift_bridgeObjectRetain();
  uint64_t v103 = sub_1C44976E8();
  uint64_t result = swift_bridgeObjectRelease();
  if (v103 <= 0
    && (swift_bridgeObjectRetain(), v104 = sub_1C44976E8(), uint64_t result = swift_bridgeObjectRelease(), v104 <= 0)
    && (swift_bridgeObjectRetain(), v105 = sub_1C4496F68(), uint64_t result = swift_bridgeObjectRelease(), v105 < 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v109 = v112;
    void *v112 = 0;
    v109[1] = 0;
    v109[2] = 0;
  }
  else
  {
    uint64_t v107 = v157;
    uint64_t v106 = v158;
    unint64_t v108 = v112;
    void *v112 = v102;
    v108[1] = v106;
    v108[2] = v107;
  }
  return result;
}

uint64_t sub_1C41535E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return CRDictionary.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 40), *(uint64_t **)(a2 + 48), *(void *)(a2 + 56), a3);
}

uint64_t CRDictionary.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v24 = a7;
  uint64_t v22 = a8;
  uint64_t v23 = a6;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1C3F970C4(v16, (uint64_t)v15, &qword_1EBBC04F8);
  uint64_t v17 = type metadata accessor for Proto_CRDT(0);
  LODWORD(v16) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v15, 1, v17);
  sub_1C3F962E0((uint64_t)v15, &qword_1EBBC04F8);
  if (v16 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v18 = 0xD000000000000014;
    *(void *)(v18 + 8) = 0x80000001C44B0EE0;
    *(unsigned char *)(v18 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = a1;
    *(void *)(inited + 24) = 0;
    *(unsigned char *)(inited + 32) = 1;
    uint64_t v21 = v25;
    sub_1C40001B0(a2, a3, a4, a5, v23, v24, &v26);
    uint64_t result = swift_release();
    if (!v21) {
      *uint64_t v22 = v26;
    }
  }
  return result;
}

uint64_t sub_1C41537F0(uint64_t a1, void *a2)
{
  return CRDictionary.encode(to:)(a1, a2);
}

uint64_t CRDictionary.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t v5 = *v2;
  uint64_t result = sub_1C3F62C10();
  if (!v3)
  {
    uint64_t v13 = v5;
    uint64_t v7 = a2[2];
    uint64_t v8 = a2[3];
    uint64_t v9 = a2[4];
    uint64_t v10 = a2[5];
    uint64_t v12 = a2[6];
    uint64_t v11 = a2[7];
    swift_retain();
    sub_1C400C808(&v13, v7, v8, v9, v10, v12, v11);
    return swift_release();
  }
  return result;
}

BOOL CRDictionary.hasEncodedData.getter()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(void *)(*(void *)(v1 + 32) + 16) || *(void *)(*(void *)(v1 + 24) + 16) != 0;
}

void sub_1C4153908(unsigned char *a1@<X8>)
{
}

void CRDictionary.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1C4153928()
{
  type metadata accessor for CRDictionaryRef();
  uint64_t v1 = swift_dynamicCastClassUnconditional();
  uint64_t result = swift_release();
  *uint64_t v0 = v1;
  return result;
}

uint64_t sub_1C4153994()
{
  sub_1C4158CE0();
  return swift_retain();
}

uint64_t CRDictionary.ObservableDifference.addedKeys.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CRDictionary.ObservableDifference.removedKeys.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CRDictionary.ObservableDifference.contents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C41539D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(char *))(v4 + 16))(v7);
  sub_1C4497748();
  sub_1C44976F8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, a3);
}

uint64_t sub_1C4153AF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v52 = a8;
  uint64_t v67 = a6;
  uint64_t v59 = a3;
  uint64_t v60 = a5;
  uint64_t v55 = a9;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v54 = (uint64_t)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v53 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  uint64_t v16 = (void *)((char *)v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = a1;
  sub_1C415C6B0(a1, (uint64_t)v22, type metadata accessor for Proto_Set);
  uint64_t v23 = a7;
  uint64_t v24 = type metadata accessor for CRDictionaryElement();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v26 = v57;
  sub_1C4383AD8((uint64_t)v22, a2, v59, v24, v60, v67, WitnessTable, &v61);
  uint64_t v57 = v26;
  if (v26)
  {
    swift_release();
    return sub_1C3F9235C(v58, type metadata accessor for Proto_Set);
  }
  else
  {
    uint64_t v48 = a2;
    uint64_t v49 = v16;
    uint64_t v50 = v19;
    uint64_t v51 = a4;
    uint64_t v28 = v23;
    uint64_t v29 = v62;
    uint64_t v31 = v63;
    uint64_t v30 = v64;
    uint64_t v32 = v65;
    uint64_t v33 = v66;
    uint64_t v34 = v55;
    *uint64_t v55 = v61;
    v34[1] = v29;
    v34[2] = v31;
    v34[3] = v30;
    v47[2] = v30;
    v47[1] = v32;
    v34[4] = v32;
    v34[5] = v33;
    v47[0] = v33;
    uint64_t v35 = v58;
    uint64_t v36 = *(void *)(v58 + *(int *)(v20 + 20))
        + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
    swift_beginAccess();
    uint64_t v37 = v54;
    sub_1C3F970C4(v36, v54, &qword_1EBBC0620);
    int v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v37, 1, v56);
    v47[4] = v29;
    v47[3] = v31;
    uint64_t v39 = v35;
    uint64_t v40 = v49;
    if (v38 == 1)
    {
      *uint64_t v49 = 0;
      v40[1] = 0;
      sub_1C4496888();
      sub_1C3F962E0(v37, &qword_1EBBC0620);
    }
    else
    {
      sub_1C3F72070(v37, (uint64_t)v49, type metadata accessor for Proto_Timestamp);
    }
    uint64_t v41 = v67;
    uint64_t v42 = v60;
    uint64_t v43 = (uint64_t)v50;
    uint64_t v44 = v51;
    uint64_t v45 = v57;
    sub_1C43A3E60(v40, v48, (uint64_t)v50);
    sub_1C3F9235C(v39, type metadata accessor for Proto_Set);
    if (v45)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v61 = v59;
      uint64_t v62 = v44;
      uint64_t v63 = v42;
      uint64_t v64 = v41;
      uint64_t v65 = v28;
      uint64_t v66 = v52;
      uint64_t v46 = type metadata accessor for CRDictionary.MergeableDelta();
      return sub_1C3F72070(v43, (uint64_t)v55 + *(int *)(v46 + 68), type metadata accessor for FinalizedTimestamp);
    }
  }
}

uint64_t CRDictionary.MergeableDelta.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v39 = a8;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v42 = (uint64_t)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1F4188790](v40);
  uint64_t v44 = (uint64_t)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Proto_CRDT(0);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v41 = (uint64_t)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v51 = a2;
  uint64_t v52 = a3;
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  uint64_t v53 = a4;
  uint64_t v54 = a5;
  uint64_t v49 = a6;
  uint64_t v50 = a7;
  uint64_t v55 = a6;
  uint64_t v56 = a7;
  uint64_t v38 = type metadata accessor for CRDictionary.MergeableDelta();
  uint64_t v21 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v43 = (uint64_t *)((char *)&v38 - v22);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v25 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1C3F970C4(v26, (uint64_t)v25, &qword_1EBBC04F8);
  LODWORD(v26) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v25, 1, v18);
  sub_1C3F962E0((uint64_t)v25, &qword_1EBBC04F8);
  if (v26 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v27 = 0xD000000000000014;
    *(void *)(v27 + 8) = 0x80000001C44B0EE0;
    *(unsigned char *)(v27 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRDTContainer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a1;
  *(void *)(inited + 24) = 0;
  *(unsigned char *)(inited + 32) = 1;
  swift_retain();
  uint64_t v30 = v41;
  sub_1C3FBA924(v41);
  uint64_t v31 = *(void *)(v30 + *(int *)(v18 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v32 = v42;
  sub_1C3F970C4(v31, v42, &qword_1EBBC0648);
  uint64_t v33 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v32, 1, v33) == 1)
  {
    sub_1C3F962E0(v32, &qword_1EBBC0648);
LABEL_8:
    uint64_t v34 = v44;
    sub_1C4496888();
    uint64_t v35 = *(int *)(v40 + 20);
    if (qword_1EBBC01E8 != -1) {
      swift_once();
    }
    *(void *)(v34 + v35) = qword_1EBBC01E0;
    swift_retain();
    goto LABEL_11;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1C3F9235C(v32, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_8;
  }
  uint64_t v34 = v44;
  sub_1C3F72070(v32, v44, type metadata accessor for Proto_Set);
LABEL_11:
  sub_1C3F9235C(v30, type metadata accessor for Proto_CRDT);
  uint64_t v36 = v43;
  uint64_t v37 = v57;
  sub_1C4153AF4(v34, a1, v45, v46, v47, v48, v49, v50, v43);
  swift_setDeallocating();
  uint64_t result = swift_release();
  if (!v37) {
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v21 + 32))(v39, v36, v38);
  }
  return result;
}

uint64_t sub_1C41544A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v4 = v3;
  uint64_t v51 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v35 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v34 = (char *)&v32 - v9;
  uint64_t v37 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v33 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  uint64_t v36 = (uint64_t *)((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = v3[1];
  uint64_t v13 = v3[2];
  uint64_t v12 = v3[3];
  uint64_t v15 = v3[4];
  uint64_t v14 = v3[5];
  uint64_t v45 = *v3;
  uint64_t v46 = v11;
  uint64_t v47 = v13;
  uint64_t v48 = v12;
  uint64_t v49 = v15;
  uint64_t v50 = v14;
  uint64_t v38 = *(void *)(a2 + 16);
  uint64_t v16 = type metadata accessor for CRDictionaryElement();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v41 = v38;
  uint64_t v42 = v16;
  long long v43 = *(_OWORD *)(a2 + 32);
  uint64_t v44 = WitnessTable;
  uint64_t v18 = (void *)type metadata accessor for CRSetRefMergeableDelta();
  uint64_t v19 = v39;
  sub_1C4384638(v40, v18, v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v19)
  {
    uint64_t v39 = 0;
    uint64_t v22 = v33;
    uint64_t v21 = (uint64_t)v34;
    uint64_t v23 = (uint64_t)v4 + *(int *)(a2 + 68);
    uint64_t v24 = v37;
    uint64_t v25 = (uint64_t)v35;
    uint64_t v26 = v36;
    sub_1C4496888();
    *uint64_t v26 = sub_1C3FA10C4(v23);
    v26[1] = *(void *)(v23 + *(int *)(type metadata accessor for FinalizedTimestamp(0) + 20));
    uint64_t v27 = *(int *)(type metadata accessor for Proto_Set(0) + 20);
    uint64_t v28 = v51;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Set._StorageClass(0);
      swift_allocObject();
      uint64_t v29 = swift_retain();
      *(void *)(v28 + v27) = sub_1C3F7B768(v29);
      swift_release();
    }
    uint64_t v30 = *(void *)(v28 + v27);
    sub_1C3F72070((uint64_t)v26, v21, type metadata accessor for Proto_Timestamp);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v21, 0, 1, v24);
    sub_1C3F961BC(v21, v25, &qword_1EBBC0620);
    uint64_t v31 = v30 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
    swift_beginAccess();
    swift_retain();
    sub_1C3F98338(v25, v31, &qword_1EBBC0620);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t CRDictionary.MergeableDelta.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Proto_Set(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_1C3F62C10();
  if (!v2)
  {
    swift_retain();
    sub_1C41544A8(a1, a2, (uint64_t)v7);
    swift_beginAccess();
    sub_1C43F187C((uint64_t)v7);
    return swift_release();
  }
  return result;
}

uint64_t CRDictionary.MergeableDelta.visitReferences(_:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v61 = a1;
  uint64_t v5 = a2[3];
  uint64_t v59 = a2[6];
  uint64_t v60 = v5;
  uint64_t v6 = type metadata accessor for CRDictionaryElement.Delta();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v54 = (char *)&v44 - v9;
  uint64_t v62 = a2;
  uint64_t v10 = *(void *)(a2[2] - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v53 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = v12;
  uint64_t v67 = v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v65 = sub_1C4497B38();
  uint64_t v15 = MEMORY[0x1F4188790](v65);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v44 - v19;
  uint64_t v21 = *(void *)(v3 + 40);
  uint64_t v22 = *(void *)(v21 + 64);
  uint64_t v46 = v21 + 64;
  uint64_t v23 = 1 << *(unsigned char *)(v21 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & v22;
  uint64_t v48 = v7 + 16;
  uint64_t v49 = v10 + 16;
  uint64_t v63 = (void (**)(char *, char *, uint64_t))(v18 + 32);
  uint64_t v64 = TupleTypeMetadata2 - 8;
  uint64_t v57 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v58 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v50 = v10;
  uint64_t v51 = v7;
  uint64_t v55 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  uint64_t v56 = (void (**)(char *, uint64_t))(v7 + 8);
  int64_t v47 = (unint64_t)(v23 + 63) >> 6;
  int64_t v45 = v47 - 1;
  uint64_t v52 = v21;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v27 = 0;
  uint64_t v29 = v53;
  uint64_t v28 = v54;
  uint64_t v30 = v66;
  uint64_t v31 = v67;
  if (!v25) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v32 = __clz(__rbit64(v25));
  v25 &= v25 - 1;
  int64_t v68 = v27;
  unint64_t v33 = v32 | (v27 << 6);
LABEL_5:
  uint64_t v34 = v52;
  (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v17, *(void *)(v52 + 48) + *(void *)(v50 + 72) * v33, v66);
  (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(&v17[*(int *)(TupleTypeMetadata2 + 48)], *(void *)(v34 + 56) + *(void *)(v51 + 72) * v33, v67);
  for (uint64_t i = 0; ; uint64_t i = 1)
  {
    while (1)
    {
LABEL_12:
      uint64_t v38 = *(void *)(TupleTypeMetadata2 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v17, i, 1, TupleTypeMetadata2);
      (*v63)(v20, v17, v65);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v20, 1, TupleTypeMetadata2) == 1) {
        return swift_release();
      }
      uint64_t v39 = &v20[*(int *)(TupleTypeMetadata2 + 48)];
      (*v58)(v29, v20, v30);
      (*v57)(v28, v39, v31);
      uint64_t v40 = v61;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v62[4] + 8) + 48))(v61, v30);
      uint64_t v41 = sub_1C4497B38();
      Optional<A>.visitReferences(_:)(v40, v41, v59);
      (*v56)(v28, v31);
      uint64_t result = (*v55)(v29, v30);
      int64_t v27 = v68;
      if (v25) {
        goto LABEL_4;
      }
LABEL_6:
      int64_t v36 = v27 + 1;
      if (__OFADD__(v27, 1))
      {
        __break(1u);
        goto LABEL_30;
      }
      if (v36 >= v47)
      {
        int64_t v68 = v27;
        goto LABEL_11;
      }
      unint64_t v37 = *(void *)(v46 + 8 * v36);
      if (v37) {
        goto LABEL_9;
      }
      int64_t v42 = v27 + 2;
      if (v27 + 2 < v47) {
        break;
      }
      unint64_t v25 = 0;
      uint64_t i = 1;
      int64_t v68 = v27 + 1;
    }
    unint64_t v37 = *(void *)(v46 + 8 * v42);
    if (v37)
    {
      int64_t v36 = v27 + 2;
LABEL_9:
      unint64_t v25 = (v37 - 1) & v37;
      unint64_t v33 = __clz(__rbit64(v37)) + (v36 << 6);
      int64_t v68 = v36;
      goto LABEL_5;
    }
    int64_t v43 = v27 + 3;
    if (v43 < v47) {
      break;
    }
    int64_t v68 = v42;
LABEL_11:
    unint64_t v25 = 0;
  }
  unint64_t v37 = *(void *)(v46 + 8 * v43);
  if (v37)
  {
    int64_t v36 = v43;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v36 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v36 >= v47)
    {
      unint64_t v25 = 0;
      uint64_t i = 1;
      int64_t v68 = v45;
      goto LABEL_12;
    }
    unint64_t v37 = *(void *)(v46 + 8 * v36);
    ++v43;
    if (v37) {
      goto LABEL_9;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void CRDictionary.MergeableDelta.merge(delta:)()
{
}

void CRDictionary.MergeableDelta.canMerge(delta:)()
{
}

void sub_1C4154F20()
{
}

void sub_1C4154F28()
{
}

uint64_t sub_1C4154F78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return CRDictionary.MergeableDelta.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a3);
}

uint64_t sub_1C4154FA0(uint64_t a1, uint64_t a2)
{
  return CRDictionary.MergeableDelta.encode(to:)(a1, a2);
}

uint64_t sub_1C4154FBC@<X0>(void *a1@<X8>)
{
  CRDictionary.makeIterator()(a1);
  return swift_release();
}

uint64_t sub_1C4154FE8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t sub_1C415503C()
{
  swift_getWitnessTable();
  uint64_t v0 = sub_1C3F54C8C();
  swift_release();
  return v0;
}

uint64_t static CRDictionary.Index.< infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1C41551A0(a1, a2, a3, a4, a5, a6, a7, a8, MEMORY[0x1E4FBAE48]) & 1;
}

uint64_t CRDictionary.Index.hash(into:)()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  sub_1C4158F54(v1, v2, v3);
  type metadata accessor for CRDictionaryElement();
  sub_1C4496F58();
  return sub_1C3F882B0(v1, v2, v3);
}

uint64_t static CRDictionary.Index.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1C41551A0(a1, a2, a3, a4, a5, a6, a7, a8, MEMORY[0x1E4FBAE50]) & 1;
}

uint64_t sub_1C41551A0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  uint64_t v13 = *((unsigned __int8 *)a1 + 16);
  uint64_t v14 = *a2;
  uint64_t v15 = a2[1];
  uint64_t v16 = *((unsigned __int8 *)a2 + 16);
  uint64_t v17 = type metadata accessor for CRDictionaryElement();
  return a9(v11, v12, v13, v14, v15, v16, a3, v17, a6);
}

uint64_t CRDictionary.Index.hashValue.getter()
{
  return sub_1C4498628();
}

uint64_t sub_1C41552A4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static CRDictionary.Index.< infix(_:_:)(a1, a2, a3[2], a3[3], a5, a3[5], a3[6], a8);
}

uint64_t sub_1C41552C8()
{
  return sub_1C4498628();
}

uint64_t sub_1C415530C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static CRDictionary.Index.== infix(_:_:)(a1, a2, a3[2], a3[3], a5, a3[5], a3[6], a8);
}

uint64_t CRDictionary.count.getter()
{
  swift_beginAccess();
  type metadata accessor for CRDictionaryElement();
  swift_bridgeObjectRetain();
  uint64_t v0 = sub_1C4496F68();
  swift_bridgeObjectRelease();
  return v0;
}

void (*sub_1C41553B0(uint64_t **a1, uint64_t a2, uint64_t a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t v6 = (uint64_t *)malloc(0x40uLL);
  *a1 = v6;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6[4] = TupleTypeMetadata2;
  uint64_t v10 = *(void *)(TupleTypeMetadata2 - 8);
  v6[5] = v10;
  uint64_t v11 = (char *)malloc(*(void *)(v10 + 64));
  v6[6] = (uint64_t)v11;
  uint64_t v12 = sub_1C4155594(v6, a2, a3);
  uint64_t v14 = v13;
  v6[7] = (uint64_t)v12;
  (*(void (**)(char *))(*(void *)(v8 - 8) + 16))(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(&v11[*(int *)(TupleTypeMetadata2 + 48)], v14, v7);
  return sub_1C415551C;
}

void sub_1C415551C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  (*(void (**)(void, void))(*(void *)(*a1 + 40) + 8))(*(void *)(*a1 + 48), *(void *)(*a1 + 32));
  uint64_t v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);
  free((void *)v3);
}

void (*sub_1C4155594(uint64_t *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v7 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  CRDictionary.subscript.getter((uint64_t)v8, (uint64_t)v8 + *(int *)(TupleTypeMetadata2 + 48), a2, a3);
  return sub_1C4108148;
}

void sub_1C4155680(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -2;
}

double sub_1C41556A0(uint64_t a1)
{
  CRDictionary.index(after:)((uint64_t)&v4);
  sub_1C3F882B0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  char v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(unsigned char *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_1C41556EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t *a10, uint64_t a11)
{
  uint64_t v86 = a8;
  uint64_t v96 = a7;
  uint64_t v95 = a6;
  uint64_t v94 = a5;
  uint64_t v98 = a4;
  BOOL v99 = (void (*)(uint64_t))a3;
  __int16 v83 = a9;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v88 = *(void *)(v89 - 8);
  MEMORY[0x1F4188790](v89);
  char v87 = (unint64_t *)((char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v82 = (uint64_t)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v78 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  MEMORY[0x1F4188790](v22 - 8);
  *((void *)&v93 + 1) = (char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v93 = type metadata accessor for Proto_Version(0);
  char v92 = *(uint64_t **)(v93 - 8);
  MEMORY[0x1F4188790](v93);
  __int16 v90 = (uint64_t *)((char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0FA0);
  MEMORY[0x1F4188790](v25 - 8);
  int64_t v27 = (char *)&v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_1C4496678();
  uint64_t v29 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v31 = (char *)&v78 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v97 = (uint64_t *)*(int *)(type metadata accessor for Proto_Set(0) + 20);
  uint64_t v32 = *(uint64_t *)((char *)v97 + a1);
  swift_beginAccess();
  uint64_t v33 = *(void *)(a2 + 24);
  unint64_t v34 = *(void *)(v33 + 16);
  if (!v34 || (unint64_t v35 = *(void *)(v32 + 16), v35 >= v34))
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v46 = xmmword_1C44A0890;
    *(unsigned char *)(v46 + 16) = 0;
    swift_willThrow();
    sub_1C3F7E5BC((uint64_t)v99);
    swift_release();
    uint64_t v47 = a1;
    return sub_1C3F9235C(v47, type metadata accessor for Proto_Set);
  }
  uint64_t v81 = v15;
  uint64_t v79 = v21;
  uint64_t v84 = a2;
  (*(void (**)(char *, unint64_t, uint64_t))(v29 + 16))(v31, v33+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v35, v28);
  type metadata accessor for ReplicaState();
  uint64_t v36 = swift_allocObject();
  uint64_t v85 = a1;
  uint64_t v37 = v36 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  uint64_t v38 = type metadata accessor for Replica();
  uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56);
  v39(v37, 1, 1, v38);
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v36 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v31, v28);
  *(void *)(v36 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  uint64_t v80 = v36;
  *(void *)(v36 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
  v39((uint64_t)v27, 1, 1, v38);
  swift_beginAccess();
  uint64_t v40 = v85;
  sub_1C3F98338((uint64_t)v27, v37, &qword_1EBBC0FA0);
  swift_endAccess();
  uint64_t v41 = *(uint64_t *)((char *)v97 + v40)
      + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  uint64_t v42 = v41;
  uint64_t v43 = *((void *)&v93 + 1);
  sub_1C3F970C4(v42, *((uint64_t *)&v93 + 1), &qword_1EBBC0578);
  if (((unsigned int (*)(uint64_t, uint64_t, void))v92[6])(v43, 1, v93) == 1)
  {
    uint64_t v44 = MEMORY[0x1E4FBC860];
    int64_t v45 = v90;
    *__int16 v90 = MEMORY[0x1E4FBC860];
    v45[1] = v44;
    sub_1C4496888();
    sub_1C3F962E0(v43, &qword_1EBBC0578);
  }
  else
  {
    int64_t v45 = v90;
    sub_1C3F72070(v43, (uint64_t)v90, type metadata accessor for Proto_Version);
  }
  uint64_t v48 = v84;
  uint64_t v49 = v96;
  uint64_t v50 = v95;
  uint64_t v51 = v94;
  uint64_t v52 = v91;
  swift_retain();
  sub_1C3F8F9D0(v45, v48, &v100);
  uint64_t v53 = (uint64_t)v81;
  if (v52)
  {
    swift_release();
    sub_1C3F7E5BC((uint64_t)v99);
    swift_release();
    uint64_t v47 = v40;
    return sub_1C3F9235C(v47, type metadata accessor for Proto_Set);
  }
  *((void *)&v93 + 1) = *((void *)&v100 + 1);
  uint64_t v54 = v100;
  uint64_t v55 = *(uint64_t *)((char *)v97 + v40)
      + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  sub_1C3F970C4(v55, v53, &qword_1EBBC0620);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v53, 1, v89) == 1)
  {
    uint64_t v56 = v87;
    *char v87 = 0;
    v56[1] = 0;
    sub_1C4496888();
    sub_1C3F962E0(v53, &qword_1EBBC0620);
  }
  else
  {
    uint64_t v56 = v87;
    sub_1C3F72070(v53, (uint64_t)v87, type metadata accessor for Proto_Timestamp);
  }
  swift_retain();
  sub_1C43A3E60(v56, v48, (uint64_t)v79);
  *(void *)&long long v93 = v54;
  uint64_t v58 = (void *)(*(uint64_t *)((char *)v97 + v40)
                 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
  swift_beginAccess();
  unint64_t v97 = &v78;
  *(void *)&long long v100 = *v58;
  MEMORY[0x1F4188790](v100);
  char v92 = &v78 - 10;
  *(&v78 - 8) = v51;
  *(&v78 - 7) = v50;
  uint64_t v59 = v86;
  *(&v78 - 6) = v49;
  *(&v78 - 5) = v59;
  *(&v78 - 4) = (uint64_t)a10;
  *(&v78 - 3) = a11;
  uint64_t v91 = a11;
  *(&v78 - 2) = v48;
  swift_bridgeObjectRetain();
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC760);
  type metadata accessor for CRDictionaryElement();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC00F0);
  uint64_t v63 = sub_1C3F815A4((unint64_t *)&qword_1EBBBC768, &qword_1EBBBC760);
  uint64_t v64 = sub_1C41275E0((void (*)(char *, char *))sub_1C415C888, (uint64_t)v92, v60, TupleTypeMetadata2, v62, v63, MEMORY[0x1E4FBC0F0], (uint64_t)&v105);
  uint64_t v65 = swift_bridgeObjectRelease();
  uint64_t v66 = v99;
  if (v99)
  {
    swift_retain();
    v66(v64);
    uint64_t v65 = sub_1C3F7E5BC((uint64_t)v66);
  }
  unint64_t v97 = &v78;
  *(void *)&long long v100 = v64;
  MEMORY[0x1F4188790](v65);
  uint64_t v67 = v94;
  uint64_t v68 = v95;
  *(&v78 - 6) = v94;
  *(&v78 - 5) = v68;
  uint64_t v69 = v96;
  uint64_t v70 = v86;
  *(&v78 - 4) = v96;
  *(&v78 - 3) = v70;
  char v92 = a10;
  *(&v78 - 2) = (uint64_t)a10;
  uint64_t v71 = v91;
  *(&v78 - 1) = v91;
  sub_1C4497528();
  swift_getWitnessTable();
  uint64_t v72 = sub_1C4497018();
  *(void *)&long long v100 = v67;
  *((void *)&v100 + 1) = v68;
  uint64_t v101 = v69;
  uint64_t v102 = v70;
  uint64_t v103 = v92;
  uint64_t v104 = v71;
  type metadata accessor for CRDictionaryRef();
  long long v100 = v93;
  uint64_t v73 = v85;
  if (qword_1EBBC10F0 != -1) {
    swift_once();
  }
  swift_retain();
  sub_1C4497A58();
  swift_release();
  uint64_t v74 = v105;
  uint64_t v75 = (uint64_t)v79;
  uint64_t v76 = v82;
  sub_1C415C6B0((uint64_t)v79, v82, type metadata accessor for FinalizedTimestamp);
  unint64_t v77 = sub_1C4148C90(v80, &v100, v72, v74, v76);
  sub_1C3F7E5BC((uint64_t)v99);
  swift_release();
  sub_1C3F9235C(v73, type metadata accessor for Proto_Set);
  uint64_t result = sub_1C3F9235C(v75, type metadata accessor for FinalizedTimestamp);
  *__int16 v83 = v77;
  return result;
}

uint64_t sub_1C41563C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>, void *a8)
{
  uint64_t v81 = a5;
  uint64_t v83 = a2;
  uint64_t v65 = a7;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v72 = (uint64_t)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for Proto_Version(0);
  uint64_t v68 = *(void *)(v70 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v70);
  uint64_t v71 = (uint64_t *)((char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v66 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v74 = (uint64_t)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v73 = (uint64_t)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = a6;
  uint64_t v80 = a4;
  uint64_t v64 = type metadata accessor for CRDictionaryElement();
  uint64_t v63 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  uint64_t v62 = (uint64_t)&v62 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for Proto_CRDT(0);
  uint64_t v76 = *(void *)(v77 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v77);
  uint64_t v78 = (uint64_t)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = a3;
  uint64_t v75 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v23);
  char v87 = (char *)&v62 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v27 - 8);
  uint64_t v29 = (char *)&v62 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for Proto_Value(0);
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v33 = (char *)&v62 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  uint64_t v69 = a1;
  uint64_t v67 = v34;
  uint64_t v35 = *(void *)(a1 + v34);
  uint64_t v36 = v35 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1C3F970C4(v36, (uint64_t)v29, &qword_1EBBC0540);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    sub_1C4496888();
    uint64_t v37 = *(int *)(v30 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)&v33[v37] = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0((uint64_t)v29, &qword_1EBBC0540);
  }
  else
  {
    sub_1C3F72070((uint64_t)v29, (uint64_t)v33, type metadata accessor for Proto_Value);
  }
  uint64_t v38 = v25;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  uint64_t v39 = v83;
  swift_retain();
  sub_1C3F974B0((uint64_t)v33, v39);
  swift_release();
  uint64_t v40 = *(void *)(*(void *)(v81 + 8) + 8);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 8);
  uint64_t v42 = swift_retain();
  uint64_t v43 = v82;
  v41(v42, v38, v40);
  if (v43)
  {
    uint64_t result = swift_release();
    *a8 = v43;
  }
  else
  {
    uint64_t v44 = v35 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
    swift_beginAccess();
    sub_1C3F970C4(v44, (uint64_t)v22, &qword_1EBBC04F8);
    uint64_t v45 = v77;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v22, 1, v77) == 1)
    {
      uint64_t v46 = v78;
      sub_1C4496888();
      uint64_t v47 = *(int *)(v45 + 20);
      uint64_t v48 = v79;
      if (qword_1EBBC0668 != -1) {
        swift_once();
      }
      *(void *)(v46 + v47) = qword_1EBBC0660;
      swift_retain();
      sub_1C3F962E0((uint64_t)v22, &qword_1EBBC04F8);
      uint64_t v49 = v48;
      uint64_t v50 = v80;
    }
    else
    {
      uint64_t v46 = v78;
      sub_1C3F72070((uint64_t)v22, v78, type metadata accessor for Proto_CRDT);
      uint64_t v49 = v79;
      uint64_t v50 = v80;
    }
    swift_retain();
    sub_1C41FAA24(v46, v39, v50, v49, v85);
    uint64_t v52 = v85[0];
    uint64_t v53 = type metadata accessor for CRRegister();
    CRRegister.timestamp.getter(v73);
    v85[0] = v52;
    CRRegister.value.getter(v53, v74);
    uint64_t v54 = *(void *)(v69 + v67)
        + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
    swift_beginAccess();
    uint64_t v55 = v54;
    uint64_t v56 = v72;
    sub_1C3F970C4(v55, v72, &qword_1EBBC0578);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v56, 1, v70) == 1)
    {
      uint64_t v57 = MEMORY[0x1E4FBC860];
      uint64_t v58 = v71;
      *uint64_t v71 = MEMORY[0x1E4FBC860];
      v58[1] = v57;
      sub_1C4496888();
      sub_1C3F962E0(v56, &qword_1EBBC0578);
    }
    else
    {
      uint64_t v58 = v71;
      sub_1C3F72070(v56, (uint64_t)v71, type metadata accessor for Proto_Version);
    }
    swift_retain();
    sub_1C3F8F9D0(v58, v39, &v86);
    swift_release();
    swift_release();
    __n128 v84 = v86;
    uint64_t v59 = v62;
    sub_1C4144444(v73, v74, &v84, v50, v62);
    uint64_t v60 = v64;
    uint64_t v61 = v65 + *(int *)(swift_getTupleTypeMetadata2() + 48);
    (*(void (**)(void))(v75 + 32))();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 32))(v61, v59, v60);
  }
  return result;
}

uint64_t sub_1C4156DA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v116 = a6;
  uint64_t v115 = a4;
  uint64_t v114 = a3;
  uint64_t v124 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v106 = (uint64_t)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v103 = (char *)&v100 - v14;
  uint64_t v105 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1F4188790](v105);
  uint64_t v104 = (uint64_t)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v101 = *(void *)(v102 - 8);
  MEMORY[0x1F4188790](v102);
  uint64_t v119 = (uint64_t *)((char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v113 = sub_1C4497B38();
  uint64_t v112 = *(void *)(v113 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v113);
  int64_t v111 = (char *)&v100 - v18;
  uint64_t v118 = a5;
  uint64_t v120 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v107 = (char *)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v110 = (uint64_t)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v100 - v23;
  uint64_t v109 = type metadata accessor for Proto_Version(0);
  uint64_t v108 = *(void *)(v109 - 8);
  MEMORY[0x1F4188790](v109);
  uint64_t v26 = (uint64_t *)((char *)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = sub_1C4496678();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v100 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = *v7;
  sub_1C4496888();
  uint64_t v31 = *(int *)(type metadata accessor for Proto_Set(0) + 20);
  if (qword_1EBBC01E8 != -1) {
    swift_once();
  }
  *(void *)(a7 + v31) = qword_1EBBC01E0;
  uint64_t v121 = a1;
  uint64_t v32 = *(void *)(a1 + 16) + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v30, v32, v27);
  swift_retain();
  uint64_t v33 = sub_1C3FA10C4((uint64_t)v30);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  uint64_t v34 = a7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set._StorageClass(0);
    swift_allocObject();
    uint64_t v35 = swift_retain();
    *(void *)(a7 + v31) = sub_1C3F7B768(v35);
    swift_release();
  }
  uint64_t v36 = *(void *)(a7 + v31);
  swift_beginAccess();
  *(void *)(v36 + 16) = v33;
  uint64_t v37 = v121;
  swift_beginAccess();
  uint64_t v38 = *(void *)(v37 + 32);
  v123[0] = *(void *)(v37 + 24);
  v123[1] = v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v39 = v124;
  sub_1C3F9FF10(v124, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v41 = v120;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for Proto_Set._StorageClass(0);
    swift_allocObject();
    uint64_t v42 = swift_retain();
    *(void *)(v34 + v31) = sub_1C3F7B768(v42);
    swift_release();
  }
  uint64_t v43 = *(void *)(v34 + v31);
  sub_1C3F72070((uint64_t)v26, (uint64_t)v24, type metadata accessor for Proto_Version);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v108 + 56))(v24, 0, 1, v109);
  uint64_t v44 = (uint64_t)v24;
  uint64_t v45 = v110;
  sub_1C3F961BC(v44, v110, &qword_1EBBC0578);
  uint64_t v46 = v43 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v45, v46, &qword_1EBBC0578);
  swift_endAccess();
  swift_release();
  uint64_t v47 = v112;
  uint64_t v48 = v111;
  uint64_t v49 = v113;
  (*(void (**)(char *, uint64_t *, uint64_t))(v112 + 16))(v111, v114, v113);
  uint64_t v50 = v118;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v48, 1, v118) == 1)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
    uint64_t v51 = v121;
    uint64_t v52 = swift_beginAccess();
    v122[3] = *(void *)(v51 + 40);
    uint64_t v53 = MEMORY[0x1F4188790](v52);
    uint64_t v54 = v115;
    uint64_t v56 = v115[2];
    uint64_t v55 = v115[3];
    *(&v100 - 10) = v56;
    *(&v100 - 9) = v55;
    uint64_t v57 = v54[4];
    uint64_t v58 = v54[5];
    *(&v100 - 8) = v50;
    *(&v100 - 7) = v57;
    uint64_t v59 = v54[6];
    uint64_t v60 = v54[7];
    *(&v100 - 6) = v58;
    *(&v100 - 5) = v59;
    uint64_t v61 = v116;
    *(&v100 - 4) = v60;
    *(&v100 - 3) = v61;
    *(&v100 - 2) = v39;
    MEMORY[0x1F4188790](v53);
    *(&v100 - 10) = v56;
    *(&v100 - 9) = v62;
    *(&v100 - 8) = v50;
    *(&v100 - 7) = v63;
    *(&v100 - 6) = v58;
    *(&v100 - 5) = v64;
    *(&v100 - 4) = v65;
    *(&v100 - 3) = v66;
    *(&v100 - 2) = (uint64_t)sub_1C415C760;
    *(&v100 - 1) = v67;
    type metadata accessor for CRDictionaryElement();
    uint64_t v68 = sub_1C4497008();
    uint64_t v69 = type metadata accessor for Proto_Set.Element(0);
    swift_bridgeObjectRetain();
    uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC00F0);
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v72 = v117;
    uint64_t v73 = sub_1C41275E0((void (*)(char *, char *))sub_1C415C79C, (uint64_t)(&v100 - 12), v68, v69, v70, WitnessTable, MEMORY[0x1E4FBC0F0], (uint64_t)v122);
    swift_bridgeObjectRelease();
    uint64_t v74 = v119;
    if (v72) {
      return sub_1C3F9235C(v34, type metadata accessor for Proto_Set);
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Set._StorageClass(0);
      swift_allocObject();
      uint64_t v84 = swift_retain();
      *(void *)(v34 + v31) = sub_1C3F7B768(v84);
      swift_release();
    }
    uint64_t v85 = (uint64_t *)(*(void *)(v34 + v31)
                    + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
    swift_beginAccess();
    *uint64_t v85 = v73;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v76 = v107;
    uint64_t v77 = (*(uint64_t (**)(char *, char *, uint64_t))(v41 + 32))(v107, v48, v50);
    uint64_t v114 = &v100;
    MEMORY[0x1F4188790](v77);
    uint64_t v78 = v115[7];
    *(&v100 - 6) = v50;
    *(&v100 - 5) = v78;
    uint64_t v79 = v116;
    *(&v100 - 4) = v116;
    *(&v100 - 3) = v39;
    *(&v100 - 2) = v121;
    uint64_t v80 = (char *)type metadata accessor for Proto_Set.Element(0);
    uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC00F0);
    uint64_t v82 = v117;
    uint64_t v83 = sub_1C3F7182C((void (*)(char *, char *))sub_1C415C7E0, (uint64_t)(&v100 - 8), v50, v80, v81, v79, MEMORY[0x1E4FBC0F0], (uint64_t)v123);
    if (v82)
    {
      (*(void (**)(char *, uint64_t))(v41 + 8))(v76, v50);
      return sub_1C3F9235C(v34, type metadata accessor for Proto_Set);
    }
    uint64_t v86 = v83;
    uint64_t v74 = v119;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Set._StorageClass(0);
      swift_allocObject();
      uint64_t v87 = swift_retain();
      *(void *)(v34 + v31) = sub_1C3F7B768(v87);
      swift_release();
    }
    uint64_t v88 = (uint64_t *)(*(void *)(v34 + v31)
                    + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
    swift_beginAccess();
    *uint64_t v88 = v86;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v120 + 8))(v76, v50);
  }
  uint64_t v89 = (uint64_t)v103;
  uint64_t v90 = v102;
  uint64_t v91 = v101;
  uint64_t v92 = v100 + qword_1EBBC59A8;
  swift_beginAccess();
  uint64_t v93 = v104;
  sub_1C415C6B0(v92, v104, type metadata accessor for FinalizedTimestamp);
  sub_1C4496888();
  uint64_t v94 = sub_1C3FA10C4(v93);
  uint64_t v95 = *(void *)(v93 + *(int *)(v105 + 20));
  *uint64_t v74 = v94;
  v74[1] = v95;
  sub_1C3F9235C(v93, type metadata accessor for FinalizedTimestamp);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set._StorageClass(0);
    swift_allocObject();
    uint64_t v96 = swift_retain();
    *(void *)(v34 + v31) = sub_1C3F7B768(v96);
    swift_release();
  }
  uint64_t v97 = *(void *)(v34 + v31);
  sub_1C3F72070((uint64_t)v74, v89, type metadata accessor for Proto_Timestamp);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v91 + 56))(v89, 0, 1, v90);
  uint64_t v98 = v106;
  sub_1C3F961BC(v89, v106, &qword_1EBBC0620);
  uint64_t v99 = v97 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v98, v99, &qword_1EBBC0620);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1C4157AB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v82 = a2;
  uint64_t v87 = a7;
  uint64_t v88 = a8;
  uint64_t v92 = a5;
  uint64_t v80 = a1;
  uint64_t v85 = a12;
  uint64_t v86 = a6;
  uint64_t v83 = a11;
  uint64_t v84 = a4;
  uint64_t v89 = a10;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v78 = (uint64_t)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v77 = (uint64_t)&v68 - v17;
  uint64_t v18 = type metadata accessor for Proto_Version(0);
  uint64_t v75 = *(void *)(v18 - 8);
  uint64_t v76 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v74 = (uint64_t *)((char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v73 = (uint64_t)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v72 = (uint64_t)&v68 - v23;
  uint64_t v71 = type metadata accessor for Proto_Value(0);
  uint64_t v70 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  uint64_t v79 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  uint64_t v26 = MEMORY[0x1F4188790](v25 - 8);
  uint64_t v28 = (char *)&v68 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v68 - v29;
  uint64_t v31 = type metadata accessor for Proto_CRDT(0);
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v34 = (char *)&v68 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C4496888();
  uint64_t v35 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
  if (qword_1EBBBF1E0 != -1) {
    swift_once();
  }
  uint64_t v36 = qword_1EBBBF1D8;
  *(void *)(a9 + v35) = qword_1EBBBF1D8;
  MEMORY[0x1F4188790](v36);
  uint64_t v37 = v92;
  *(&v68 - 10) = v84;
  *(&v68 - 9) = v37;
  uint64_t v38 = v87;
  *(&v68 - 8) = v86;
  *(&v68 - 7) = v38;
  uint64_t v39 = v89;
  *(&v68 - 6) = v88;
  *(&v68 - 5) = v39;
  uint64_t v40 = v85;
  *(&v68 - 4) = v83;
  *(&v68 - 3) = v40;
  *(&v68 - 2) = v82;
  *(&v68 - 1) = a3;
  swift_retain();
  uint64_t v41 = v81;
  sub_1C3F5585C((void (*)(uint64_t))sub_1C415C808, (uint64_t)v34);
  uint64_t v81 = v41;
  if (v41) {
    return sub_1C3F9235C(a9, type metadata accessor for Proto_Set.Element);
  }
  uint64_t v69 = a3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    uint64_t v42 = swift_retain();
    *(void *)(a9 + v35) = sub_1C3F97F64(v42);
    swift_release();
  }
  uint64_t v43 = *(void *)(a9 + v35);
  sub_1C3F72070((uint64_t)v34, (uint64_t)v30, type metadata accessor for Proto_CRDT);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v30, 0, 1, v31);
  sub_1C3F961BC((uint64_t)v30, (uint64_t)v28, &qword_1EBBC04F8);
  uint64_t v44 = v43 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338((uint64_t)v28, v44, &qword_1EBBC04F8);
  swift_endAccess();
  uint64_t v45 = swift_release();
  MEMORY[0x1F4188790](v45);
  uint64_t v46 = v92;
  *(&v68 - 10) = v84;
  *(&v68 - 9) = v46;
  uint64_t v47 = v87;
  *(&v68 - 8) = v86;
  *(&v68 - 7) = v47;
  uint64_t v48 = v89;
  *(&v68 - 6) = v88;
  *(&v68 - 5) = v48;
  uint64_t v49 = v85;
  *(&v68 - 4) = v83;
  *(&v68 - 3) = v49;
  uint64_t v50 = (uint64_t)v79;
  uint64_t v51 = v69;
  *(&v68 - 2) = v80;
  *(&v68 - 1) = v51;
  uint64_t v52 = v81;
  sub_1C3F6DC00((void (*)(uint64_t))sub_1C415C840, v50);
  if (v52) {
    return sub_1C3F9235C(a9, type metadata accessor for Proto_Set.Element);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    uint64_t v54 = swift_retain();
    *(void *)(a9 + v35) = sub_1C3F97F64(v54);
    swift_release();
  }
  uint64_t v55 = *(void *)(a9 + v35);
  uint64_t v56 = v50;
  uint64_t v57 = v72;
  sub_1C3F72070(v56, v72, type metadata accessor for Proto_Value);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 56))(v57, 0, 1, v71);
  uint64_t v58 = v73;
  sub_1C3F961BC(v57, v73, &qword_1EBBC0540);
  uint64_t v59 = v55 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v58, v59, &qword_1EBBC0540);
  swift_endAccess();
  swift_release();
  uint64_t v60 = (uint64_t *)(v82 + *(int *)(type metadata accessor for CRDictionaryElement() + 40));
  uint64_t v61 = v60[1];
  uint64_t v90 = *v60;
  uint64_t v91 = v61;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v62 = v74;
  sub_1C3F9FF10(v69, v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    uint64_t v63 = swift_retain();
    *(void *)(a9 + v35) = sub_1C3F97F64(v63);
    swift_release();
  }
  uint64_t v64 = *(void *)(a9 + v35);
  uint64_t v65 = v77;
  sub_1C3F72070((uint64_t)v62, v77, type metadata accessor for Proto_Version);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v75 + 56))(v65, 0, 1, v76);
  uint64_t v66 = v78;
  sub_1C3F961BC(v65, v78, &qword_1EBBC0578);
  uint64_t v67 = v64 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v66, v67, &qword_1EBBC0578);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1C41582BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CRDictionaryElement();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1 + *(int *)(v14 + 36), a4);
  sub_1C415C6B0(a1, (uint64_t)v10, type metadata accessor for FinalizedTimestamp);
  sub_1C41FC6C4((uint64_t)v13, (uint64_t)v10, &v18);
  uint64_t v17 = v18;
  uint64_t v15 = type metadata accessor for CRRegister();
  CRRegister.encode(to:)(a2, v15);
  return swift_release();
}

uint64_t sub_1C4158460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v23 = a7;
  uint64_t v24 = a6;
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v27 = a4;
  uint64_t v11 = *a3;
  uint64_t v12 = *a3;
  uint64_t v13 = *(void *)(*a3 + 88);
  uint64_t v14 = sub_1C4497B38();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v23 - v15;
  swift_beginAccess();
  uint64_t v17 = a3[5];
  uint64_t v18 = *(void *)(v11 + 80);
  uint64_t v19 = *(void *)(v11 + 104);
  swift_bridgeObjectRetain();
  MEMORY[0x1C877FC90](a1, v17, v18, v13, v19);
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v13 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v16, 1, v13);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v22 = v28;
    sub_1C4157AB4(a1, (uint64_t)v16, v26, v18, *(void *)(v13 + 16), v27, *(void *)(v12 + 96), v19, a8, *(void *)(v13 + 24), v25, v24);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v16, v13);
    if (v22) {
      *uint64_t v23 = v22;
    }
  }
  return result;
}

uint64_t sub_1C4158678(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  type metadata accessor for CRDictionaryElement();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t result = a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
  if (v12) {
    *a12 = v12;
  }
  return result;
}

uint64_t CRDictionary<>.encode(to:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v40[0] = *v4;
  uint64_t v8 = a2[3];
  uint64_t v30 = a2[2];
  uint64_t v31 = v8;
  uint64_t v9 = a2[5];
  uint64_t v32 = a2[4];
  uint64_t v33 = a3;
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  uint64_t v34 = v9;
  uint64_t v35 = v10;
  uint64_t v36 = a4;
  uint64_t v37 = v11;
  uint64_t v19 = v30;
  uint64_t v20 = v8;
  uint64_t v21 = v32;
  uint64_t v22 = a3;
  uint64_t v23 = v9;
  uint64_t v24 = v10;
  uint64_t v25 = a4;
  uint64_t v26 = v11;
  uint64_t v27 = sub_1C4158F60;
  uint64_t v28 = &v29;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t WitnessTable = swift_getWitnessTable();
  v40[0] = sub_1C41275E0((void (*)(char *, char *))sub_1C4159000, (uint64_t)v18, (uint64_t)a2, TupleTypeMetadata2, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v14);
  sub_1C4497528();
  swift_getWitnessTable();
  uint64_t v15 = sub_1C4496F38();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C4498698();
  v40[7] = v15;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v40, v40[3]);
  sub_1C4497008();
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  swift_getWitnessTable();
  sub_1C4498348();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
}

uint64_t sub_1C4158938(void *a1, void *a2, uint64_t a3)
{
  return CRDictionary<>.encode(to:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

void sub_1C4158958()
{
}

uint64_t sub_1C41589BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4497B38();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C4150408();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  return sub_1C41493F0(v10, (uint64_t)v14);
}

uint64_t type metadata accessor for CRDictionaryRef()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for CRDictionaryElement()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C4158B70(uint64_t a1, uint64_t a2)
{
  return sub_1C415C8B4(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, uint64_t))sub_1C414C708);
}

uint64_t sub_1C4158B9C(uint64_t a1, uint64_t a2)
{
  return sub_1C415C8B4(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, uint64_t))sub_1C414C988);
}

uint64_t sub_1C4158BC8(uint64_t a1, uint64_t a2)
{
  return sub_1C415C8B4(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, uint64_t))sub_1C414D834);
}

uint64_t sub_1C4158BF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C414DB60(a1, a2, v3[8], v3[2], v3[3], v3[4], v3[5], v3[6], a3, v3[7]);
}

uint64_t sub_1C4158C28(uint64_t a1, void *a2)
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 64);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t result = v6(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
  if (v3) {
    *a2 = v3;
  }
  return result;
}

uint64_t sub_1C4158CAC(uint64_t a1)
{
  return sub_1C414F638(a1, *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1C4158CB8()
{
  return (*(uint64_t (**)(void))(v0 + 64))();
}

uint64_t sub_1C4158CE0()
{
  return *(void *)v0;
}

uint64_t sub_1C4158CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = sub_1C4497B38();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v13 - v9;
  sub_1C4150408();
  uint64_t v11 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, a1, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, v6);
  sub_1C41589BC((uint64_t)v10, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1C4158E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FinalizedTimestamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for CRDictionary.MergeableDelta()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C4158EC8(uint64_t a1)
{
  return sub_1C41539D8(a1, *(void *)(v1 + 64), *(void *)(v1 + 16));
}

uint64_t type metadata accessor for CRDictionaryElement.Delta()
{
  return __swift_instantiateGenericMetadata();
}

void sub_1C4158F08()
{
}

uint64_t sub_1C4158F54(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1C4158F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(v4 + 16);
  uint64_t v9 = *(void *)(v4 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a3);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  return v10(a2, a4, v9);
}

uint64_t sub_1C4159000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 80);
  uint64_t v6 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v5(a2, a2 + *(int *)(TupleTypeMetadata2 + 48), a1, v6);
}

_UNKNOWN **sub_1C41590A4()
{
  return &protocol witness table for CRDictionary<A, B>.MergeableDelta;
}

uint64_t sub_1C41590B0(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1C41590EC(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t sub_1C41590F4(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 40);
}

uint64_t sub_1C41590FC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C4159118()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C4159134()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C4159150()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C415916C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C4159188()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C41591AC()
{
  return 48;
}

__n128 sub_1C41591B8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_1C41591CC()
{
  uint64_t result = type metadata accessor for FinalizedTimestamp(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_1C4496678();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for CRDictionary()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for CRDictionary.MutatingAction()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C41592C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 64);
}

uint64_t _s9Coherence17CapsuleUndoActionVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *_s9Coherence17CapsuleUndoActionVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s9Coherence17CapsuleUndoActionVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s9Coherence17CapsuleUndoActionVwta_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for CRDictionary.ObservableDifference()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C4159448()
{
  uint64_t result = type metadata accessor for FinalizedTimestamp(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1C41594E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    char v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    char v5 = a1;
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    uint64_t v7 = a2[4];
    a1[3] = a2[3];
    a1[4] = v7;
    uint64_t v8 = *(int *)(a3 + 68);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    a1[5] = a2[5];
    uint64_t v11 = sub_1C4496678();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v9, v10, v11);
    uint64_t v12 = type metadata accessor for FinalizedTimestamp(0);
    *(void *)&v9[*(int *)(v12 + 20)] = *(void *)&v10[*(int *)(v12 + 20)];
  }
  return v5;
}

uint64_t sub_1C415962C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 68);
  uint64_t v5 = sub_1C4496678();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *sub_1C41596CC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[5];
  uint64_t v7 = *(int *)(a3 + 68);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  uint64_t v10 = sub_1C4496678();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v8, v9, v10);
  uint64_t v11 = type metadata accessor for FinalizedTimestamp(0);
  *(void *)&v8[*(int *)(v11 + 20)] = *(void *)&v9[*(int *)(v11 + 20)];
  return a1;
}

void *sub_1C41597C4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 68);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1C4496678();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for FinalizedTimestamp(0);
  *(void *)&v7[*(int *)(v10 + 20)] = *(void *)&v8[*(int *)(v10 + 20)];
  return a1;
}

_OWORD *sub_1C41598E4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 68);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_1C4496678();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  uint64_t v9 = type metadata accessor for FinalizedTimestamp(0);
  *(void *)&v6[*(int *)(v9 + 20)] = *(void *)&v7[*(int *)(v9 + 20)];
  return a1;
}

void *sub_1C415997C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 68);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1C4496678();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for FinalizedTimestamp(0);
  *(void *)&v7[*(int *)(v10 + 20)] = *(void *)&v8[*(int *)(v10 + 20)];
  return a1;
}

uint64_t sub_1C4159A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C4159A80);
}

uint64_t sub_1C4159A80(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for FinalizedTimestamp(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 68);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1C4159B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C4159B44);
}

void *sub_1C4159B44(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for FinalizedTimestamp(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 68);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t destroy for PartiallyOrderedReferenceMap.Iterator()
{
  return sub_1C3F7FCE8();
}

void *initializeWithCopy for PartiallyOrderedReferenceMap.Iterator(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  sub_1C407D598();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

void *assignWithCopy for PartiallyOrderedReferenceMap.Iterator(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  sub_1C407D598();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  sub_1C3F7FCE8();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PartiallyOrderedReferenceMap.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v3;
  sub_1C3F7FCE8();
  return a1;
}

uint64_t getEnumTagSinglePayload for PartiallyOrderedReferenceMap.Iterator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PartiallyOrderedReferenceMap.Iterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_OWORD *)(result + 8) = 0u;
      *(_OWORD *)(result + 24) = 0u;
    }
  }
  return result;
}

uint64_t sub_1C4159DFC(uint64_t a1)
{
  return sub_1C3F882B0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_1C4159E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1C4158F54(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_1C4159E58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1C4158F54(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1C3F882B0(v6, v7, v8);
  return a1;
}

uint64_t sub_1C4159EB0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1C3F882B0(v4, v5, v6);
  return a1;
}

uint64_t sub_1C4159EF8(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_1C4159F40(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for CRDictionary.Index()
{
  return swift_getGenericMetadata();
}

void sub_1C4159F9C()
{
  sub_1C415B838();
  if (v0 <= 0x3F)
  {
    sub_1C4497B38();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *sub_1C415A070(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v7 + 64);
  unint64_t v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  size_t v11 = v10 + 8;
  size_t v12 = v10 + 9;
  if (v8) {
    size_t v13 = v11;
  }
  else {
    size_t v13 = v12;
  }
  uint64_t v35 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(v35 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80);
  size_t v16 = v13 + v15;
  if (*(_DWORD *)(v14 + 84)) {
    size_t v17 = *(void *)(*(void *)(v35 - 8) + 64);
  }
  else {
    size_t v17 = *(void *)(*(void *)(v35 - 8) + 64) + 1;
  }
  unsigned int v18 = v15 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v18 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v14 + 80)) & 0x100000) != 0
    || ((v17 + ((v13 + v15) & ~v15) + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    uint64_t v22 = (void *)(v21 + (((v18 | 7) + 16) & ~(unint64_t)(v18 | 7)));
    swift_retain();
    return v22;
  }
  uint64_t v23 = v6;
  size_t v33 = v11;
  uint64_t v34 = ~v15;
  if (v8)
  {
    if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, v8, v6))
    {
LABEL_24:
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v23);
      uint64_t v22 = a1;
      *(void *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v26 = v34;
      uint64_t v27 = v35;
      if (!v8) {
        *((unsigned char *)v22 + v33) = 0;
      }
      goto LABEL_26;
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + v11)) {
      goto LABEL_24;
    }
    int v24 = *((unsigned __int8 *)a2 + v11) - 1;
    int v25 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0)
    {
      int v24 = 0;
      int v25 = *(_DWORD *)a2;
    }
    if ((v25 | v24) == 0xFFFFFFFF) {
      goto LABEL_24;
    }
  }
  uint64_t v22 = a1;
  memcpy(a1, a2, v13);
  uint64_t v26 = v34;
  uint64_t v27 = v35;
LABEL_26:
  uint64_t v28 = (void *)(((unint64_t)v22 + v16) & v26);
  char v29 = (const void *)(((unint64_t)a2 + v16) & v26);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v29, 1, v27))
  {
    memcpy(v28, v29, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v28, v29, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v28, 0, 1, v27);
  }
  uint64_t v30 = (void *)(((unint64_t)v28 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = (void *)(((unint64_t)v29 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v22;
}

uint64_t sub_1C415A36C(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_1C4496678();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  unint64_t v7 = (*(void *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = v7 + 8;
  if (v6)
  {
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_8;
  }
  int v9 = *((unsigned __int8 *)a1 + v8) - 1;
  int v10 = v8 & 0xFFFFFFF8;
  if ((v8 & 0xFFFFFFF8) != 0)
  {
    int v9 = 0;
    int v10 = *a1;
  }
  if ((v10 | v9) == 0xFFFFFFFF) {
LABEL_8:
  }
    (*(void (**)(_DWORD *, uint64_t))(v5 + 8))(a1, v4);
LABEL_9:
  unint64_t v11 = v7 + 9;
  if (v6) {
    unint64_t v11 = v7 + 8;
  }
  size_t v12 = (char *)a1 + v11;
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  unint64_t v15 = (unint64_t)&v12[*(unsigned __int8 *)(v14 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13)) {
    (*(void (**)(unint64_t, uint64_t))(v14 + 8))(v15, v13);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_1C415A54C(void *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v7 + 64);
  unint64_t v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = v10 + 8;
  if (!v8)
  {
    if (!*((unsigned char *)a2 + v11)) {
      goto LABEL_12;
    }
    int v12 = *((unsigned __int8 *)a2 + v11) - 1;
    int v13 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0)
    {
      int v12 = 0;
      int v13 = *a2;
    }
    if ((v13 | v12) == 0xFFFFFFFF) {
      goto LABEL_12;
    }
LABEL_8:
    if (v8) {
      size_t v14 = v10 + 8;
    }
    else {
      size_t v14 = v10 + 9;
    }
    memcpy(a1, a2, v14);
    goto LABEL_14;
  }
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48))(a2, v8, v6)) {
    goto LABEL_8;
  }
LABEL_12:
  (*(void (**)(void *, _DWORD *, uint64_t))(v7 + 16))(a1, a2, v6);
  *(void *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    *((unsigned char *)a1 + v11) = 0;
  }
LABEL_14:
  if (v8) {
    unint64_t v15 = v10 + 8;
  }
  else {
    unint64_t v15 = v10 + 9;
  }
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = (void *)(((unint64_t)a1 + v19) & ~v18);
  uint64_t v21 = (const void *)(((unint64_t)a2 + v19) & ~v18);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v21, 1, v16))
  {
    int v22 = *(_DWORD *)(v17 + 84);
    size_t v23 = *(void *)(v17 + 64);
    if (v22) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v23 + 1;
    }
    memcpy(v20, v21, v24);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v20, v21, v16);
    uint64_t v26 = *(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56);
    uint64_t v25 = v17 + 56;
    v26(v20, 0, 1, v16);
    int v22 = *(_DWORD *)(v25 + 28);
    size_t v23 = *(void *)(v25 + 8);
  }
  if (v22) {
    size_t v27 = v23;
  }
  else {
    size_t v27 = v23 + 1;
  }
  uint64_t v28 = (void *)(((unint64_t)v20 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
  char v29 = (void *)(((unint64_t)v21 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

int *sub_1C415A7DC(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v7 + 64);
  unint64_t v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = v10 + 8;
  uint64_t v41 = v7;
  if (v8)
  {
    int v12 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v7 + 48);
    int v13 = v12(a1, v8, v6);
    int v14 = v8;
    int v15 = v13;
    int v42 = v14;
    int v16 = ((uint64_t (*)(int *))v12)(a2);
    if (v15)
    {
      LODWORD(v8) = v42;
      if (!v16) {
        goto LABEL_29;
      }
LABEL_25:
      if (v8) {
        size_t v23 = v10 + 8;
      }
      else {
        size_t v23 = v10 + 9;
      }
      memcpy(a1, a2, v23);
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  if (!*((unsigned char *)a1 + v11)
    || ((int v17 = *((unsigned __int8 *)a1 + v11) - 1, v10 == -8) ? (v18 = 0) : (int v17 = 0, v18 = *a1),
        (v18 | v17) == 0xFFFFFFFF))
  {
    if (!*((unsigned char *)a2 + v11)) {
      goto LABEL_22;
    }
    int v21 = *((unsigned __int8 *)a2 + v11) - 1;
    if (v10 != -8) {
      int v21 = 0;
    }
    int v42 = 0;
    if (v10 == -8) {
      int v22 = 0;
    }
    else {
      int v22 = *a2;
    }
    int v16 = (v22 | v21) + 1;
LABEL_20:
    LODWORD(v8) = v42;
    uint64_t v7 = v41;
    if (v16)
    {
      (*(void (**)(int *, uint64_t))(v41 + 8))(a1, v6);
      goto LABEL_25;
    }
LABEL_22:
    (*(void (**)(int *, int *, uint64_t))(v7 + 24))(a1, a2, v6);
    *(void *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_31;
  }
  if (*((unsigned char *)a2 + v11))
  {
    int v19 = *((unsigned __int8 *)a2 + v11) - 1;
    if (v10 == -8)
    {
      int v20 = 0;
    }
    else
    {
      int v19 = 0;
      int v20 = *a2;
    }
    if ((v20 | v19) != 0xFFFFFFFF) {
      goto LABEL_25;
    }
  }
LABEL_29:
  (*(void (**)(int *, int *, uint64_t))(v41 + 16))(a1, a2, v6);
  *(void *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    *((unsigned char *)a1 + v11) = 0;
  }
LABEL_31:
  if (v8) {
    unint64_t v24 = v10 + 8;
  }
  else {
    unint64_t v24 = v10 + 9;
  }
  uint64_t v25 = *(void *)(a3 + 16);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v28 = v24 + v27;
  char v29 = (void *)(((unint64_t)a1 + v28) & ~v27);
  uint64_t v30 = (void *)(((unint64_t)a2 + v28) & ~v27);
  uint64_t v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v26 + 48);
  int v32 = v31(v29, 1, v25);
  int v33 = v31(v30, 1, v25);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 16))(v29, v30, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v29, 0, 1, v25);
      goto LABEL_45;
    }
    int v34 = *(_DWORD *)(v26 + 84);
    size_t v35 = *(void *)(v26 + 64);
  }
  else
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 24))(v29, v30, v25);
      goto LABEL_45;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v29, v25);
    int v34 = *(_DWORD *)(v26 + 84);
    size_t v35 = *(void *)(v26 + 64);
  }
  if (v34) {
    size_t v36 = v35;
  }
  else {
    size_t v36 = v35 + 1;
  }
  memcpy(v29, v30, v36);
LABEL_45:
  if (*(_DWORD *)(v26 + 84)) {
    uint64_t v37 = *(void *)(v26 + 64);
  }
  else {
    uint64_t v37 = *(void *)(v26 + 64) + 1;
  }
  uint64_t v38 = (void *)(((unint64_t)v29 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v39 = (void *)(((unint64_t)v30 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v38 = *v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1C415AC08(void *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v7 + 64);
  unint64_t v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = v10 + 8;
  if (!v8)
  {
    if (!*((unsigned char *)a2 + v11)) {
      goto LABEL_12;
    }
    int v12 = *((unsigned __int8 *)a2 + v11) - 1;
    int v13 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0)
    {
      int v12 = 0;
      int v13 = *a2;
    }
    if ((v13 | v12) == 0xFFFFFFFF) {
      goto LABEL_12;
    }
LABEL_8:
    if (v8) {
      size_t v14 = v10 + 8;
    }
    else {
      size_t v14 = v10 + 9;
    }
    memcpy(a1, a2, v14);
    goto LABEL_14;
  }
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48))(a2, v8, v6)) {
    goto LABEL_8;
  }
LABEL_12:
  (*(void (**)(void *, _DWORD *, uint64_t))(v7 + 32))(a1, a2, v6);
  *(void *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    *((unsigned char *)a1 + v11) = 0;
  }
LABEL_14:
  if (v8) {
    unint64_t v15 = v10 + 8;
  }
  else {
    unint64_t v15 = v10 + 9;
  }
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = v15 + v18;
  int v20 = (void *)(((unint64_t)a1 + v19) & ~v18);
  int v21 = (const void *)(((unint64_t)a2 + v19) & ~v18);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v21, 1, v16))
  {
    int v22 = *(_DWORD *)(v17 + 84);
    size_t v23 = *(void *)(v17 + 64);
    if (v22) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v23 + 1;
    }
    memcpy(v20, v21, v24);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v20, v21, v16);
    uint64_t v26 = *(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56);
    uint64_t v25 = v17 + 56;
    v26(v20, 0, 1, v16);
    int v22 = *(_DWORD *)(v25 + 28);
    size_t v23 = *(void *)(v25 + 8);
  }
  if (v22) {
    size_t v27 = v23;
  }
  else {
    size_t v27 = v23 + 1;
  }
  *(_OWORD *)(((unint64_t)v20 + v27 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v21 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

int *sub_1C415AE84(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(v7 + 64);
  unint64_t v10 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = v10 + 8;
  uint64_t v41 = v7;
  if (v8)
  {
    int v12 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v7 + 48);
    int v13 = v12(a1, v8, v6);
    int v14 = v8;
    int v15 = v13;
    int v42 = v14;
    int v16 = ((uint64_t (*)(int *))v12)(a2);
    if (v15)
    {
      LODWORD(v8) = v42;
      if (!v16) {
        goto LABEL_29;
      }
LABEL_25:
      if (v8) {
        size_t v23 = v10 + 8;
      }
      else {
        size_t v23 = v10 + 9;
      }
      memcpy(a1, a2, v23);
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  if (!*((unsigned char *)a1 + v11)
    || ((int v17 = *((unsigned __int8 *)a1 + v11) - 1, v10 == -8) ? (v18 = 0) : (int v17 = 0, v18 = *a1),
        (v18 | v17) == 0xFFFFFFFF))
  {
    if (!*((unsigned char *)a2 + v11)) {
      goto LABEL_22;
    }
    int v21 = *((unsigned __int8 *)a2 + v11) - 1;
    if (v10 != -8) {
      int v21 = 0;
    }
    int v42 = 0;
    if (v10 == -8) {
      int v22 = 0;
    }
    else {
      int v22 = *a2;
    }
    int v16 = (v22 | v21) + 1;
LABEL_20:
    LODWORD(v8) = v42;
    uint64_t v7 = v41;
    if (v16)
    {
      (*(void (**)(int *, uint64_t))(v41 + 8))(a1, v6);
      goto LABEL_25;
    }
LABEL_22:
    (*(void (**)(int *, int *, uint64_t))(v7 + 40))(a1, a2, v6);
    *(void *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_31;
  }
  if (*((unsigned char *)a2 + v11))
  {
    int v19 = *((unsigned __int8 *)a2 + v11) - 1;
    if (v10 == -8)
    {
      int v20 = 0;
    }
    else
    {
      int v19 = 0;
      int v20 = *a2;
    }
    if ((v20 | v19) != 0xFFFFFFFF) {
      goto LABEL_25;
    }
  }
LABEL_29:
  (*(void (**)(int *, int *, uint64_t))(v41 + 32))(a1, a2, v6);
  *(void *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (!v8) {
    *((unsigned char *)a1 + v11) = 0;
  }
LABEL_31:
  if (v8) {
    unint64_t v24 = v10 + 8;
  }
  else {
    unint64_t v24 = v10 + 9;
  }
  uint64_t v25 = *(void *)(a3 + 16);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v28 = v24 + v27;
  char v29 = (void *)(((unint64_t)a1 + v28) & ~v27);
  uint64_t v30 = (void *)(((unint64_t)a2 + v28) & ~v27);
  uint64_t v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v26 + 48);
  int v32 = v31(v29, 1, v25);
  int v33 = v31(v30, 1, v25);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 32))(v29, v30, v25);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v29, 0, 1, v25);
      goto LABEL_45;
    }
    int v34 = *(_DWORD *)(v26 + 84);
    size_t v35 = *(void *)(v26 + 64);
  }
  else
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 40))(v29, v30, v25);
      goto LABEL_45;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v29, v25);
    int v34 = *(_DWORD *)(v26 + 84);
    size_t v35 = *(void *)(v26 + 64);
  }
  if (v34) {
    size_t v36 = v35;
  }
  else {
    size_t v36 = v35 + 1;
  }
  memcpy(v29, v30, v36);
LABEL_45:
  if (*(_DWORD *)(v26 + 84)) {
    uint64_t v37 = *(void *)(v26 + 64);
  }
  else {
    uint64_t v37 = *(void *)(v26 + 64) + 1;
  }
  uint64_t v38 = (void *)(((unint64_t)v29 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v39 = (void *)(((unint64_t)v30 + v37 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v38 = *v39;
  swift_bridgeObjectRelease();
  v38[1] = v39[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1C415B2A0(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(sub_1C4496678() - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10;
  uint64_t v12 = *(unsigned int *)(v10 + 84);
  if (v12) {
    unsigned int v13 = v12 - 1;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v13 <= v9) {
    unsigned int v14 = v9;
  }
  else {
    unsigned int v14 = v13;
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  if (v8) {
    uint64_t v15 = 8;
  }
  else {
    uint64_t v15 = 9;
  }
  uint64_t v16 = *(void *)(v6 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = *(void *)(v10 + 64);
  if (!v12) {
    ++v18;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v19 = ((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + v15 + v17;
  uint64_t v20 = v18 + 7;
  if (v14 < a2)
  {
    unint64_t v21 = ((v20 + (v19 & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 16;
    if ((v21 & 0xFFFFFFF8) != 0) {
      unsigned int v22 = 2;
    }
    else {
      unsigned int v22 = a2 - v14 + 1;
    }
    if (v22 >= 0x10000) {
      unsigned int v23 = 4;
    }
    else {
      unsigned int v23 = 2;
    }
    if (v22 < 0x100) {
      unsigned int v23 = 1;
    }
    if (v22 >= 2) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    switch(v24)
    {
      case 1:
        int v25 = *((unsigned __int8 *)a1 + v21);
        if (!*((unsigned char *)a1 + v21)) {
          break;
        }
        goto LABEL_34;
      case 2:
        int v25 = *(unsigned __int16 *)((char *)a1 + v21);
        if (*(_WORD *)((char *)a1 + v21)) {
          goto LABEL_34;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1C415B504);
      case 4:
        int v25 = *(_DWORD *)((char *)a1 + v21);
        if (!v25) {
          break;
        }
LABEL_34:
        int v26 = v25 - 1;
        if ((v21 & 0xFFFFFFF8) != 0)
        {
          int v26 = 0;
          int v27 = *a1;
        }
        else
        {
          int v27 = 0;
        }
        return v14 + (v27 | v26) + 1;
      default:
        break;
    }
  }
  if (v9 == v14)
  {
    if (v8 >= 2)
    {
      unsigned int v28 = (*(uint64_t (**)(_DWORD *))(v7 + 48))(a1);
      goto LABEL_47;
    }
    return 0;
  }
  unint64_t v29 = ((unint64_t)a1 + v19) & ~v17;
  if (v13 == v14)
  {
    if (v12 >= 2)
    {
      unsigned int v28 = (*(uint64_t (**)(unint64_t, uint64_t))(v11 + 48))(v29, v12);
LABEL_47:
      if (v28 >= 2) {
        return v28 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  unint64_t v31 = *(void *)((v20 + v29) & 0xFFFFFFFFFFFFFFF8);
  if (v31 >= 0xFFFFFFFF) {
    LODWORD(v31) = -1;
  }
  return (v31 + 1);
}

void sub_1C415B518(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(sub_1C4496678() - 8);
  uint64_t v9 = v8;
  unsigned int v10 = *(_DWORD *)(v8 + 84);
  if (v10) {
    unsigned int v11 = v10 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  uint64_t v12 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  if (v13) {
    unsigned int v16 = v13 - 1;
  }
  else {
    unsigned int v16 = 0;
  }
  if (v16 <= v11) {
    unsigned int v17 = v11;
  }
  else {
    unsigned int v17 = v16;
  }
  if (v17 <= 0x7FFFFFFF) {
    unsigned int v17 = 0x7FFFFFFF;
  }
  unint64_t v18 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  size_t v19 = v18 + 8;
  size_t v20 = v18 + 9;
  if (v10) {
    size_t v20 = v19;
  }
  size_t v21 = v20 + v15;
  size_t v22 = (v20 + v15) & ~v15;
  if (v13) {
    uint64_t v23 = *(void *)(v12 + 64);
  }
  else {
    uint64_t v23 = *(void *)(v12 + 64) + 1;
  }
  uint64_t v24 = v23 + 7;
  size_t v25 = ((v24 + v22) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v24 + v22) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v26 = a3 - v17 + 1;
  }
  else {
    unsigned int v26 = 2;
  }
  if (v26 >= 0x10000) {
    int v27 = 4;
  }
  else {
    int v27 = 2;
  }
  if (v26 < 0x100) {
    int v27 = 1;
  }
  if (v26 >= 2) {
    unsigned int v28 = v27;
  }
  else {
    unsigned int v28 = 0;
  }
  if (v17 < a3) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0;
  }
  if (a2 > v17)
  {
    if (v25) {
      int v30 = 1;
    }
    else {
      int v30 = a2 - v17;
    }
    if (v25)
    {
      int v31 = ~v17 + a2;
      bzero(a1, v25);
      *a1 = v31;
    }
    switch(v29)
    {
      case 1:
        *((unsigned char *)a1 + v25) = v30;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v25) = v30;
        return;
      case 3:
        goto LABEL_65;
      case 4:
        *(_DWORD *)((char *)a1 + v25) = v30;
        return;
      default:
        return;
    }
  }
  uint64_t v32 = ~v15;
  switch(v29)
  {
    case 1:
      *((unsigned char *)a1 + v25) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_46;
    case 2:
      *(_WORD *)((char *)a1 + v25) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_46;
    case 3:
LABEL_65:
      __break(1u);
      JUMPOUT(0x1C415B810);
    case 4:
      *(_DWORD *)((char *)a1 + v25) = 0;
      goto LABEL_45;
    default:
LABEL_45:
      if (a2)
      {
LABEL_46:
        if (v11 == v17)
        {
          if (a2 + 1 <= v10)
          {
            if (a2 != -1)
            {
              size_t v36 = *(void (**)(_DWORD *, void))(v9 + 56);
              v36(a1, a2 + 1);
            }
          }
          else if (v19)
          {
            int v33 = a2 - v10;
            bzero(a1, v19);
            *a1 = v33;
          }
        }
        else
        {
          unint64_t v34 = ((unint64_t)a1 + v21) & v32;
          if (v16 == v17)
          {
            size_t v35 = *(void (**)(unint64_t, void, uint64_t))(v12 + 56);
            v35(v34, a2 + 1, v13);
          }
          else
          {
            uint64_t v37 = (void *)((v24 + v34) & 0xFFFFFFFFFFFFFFF8);
            if ((a2 & 0x80000000) != 0)
            {
              uint64_t v38 = a2 ^ 0x80000000;
              v37[1] = 0;
            }
            else
            {
              uint64_t v38 = a2 - 1;
            }
            void *v37 = v38;
          }
        }
      }
      return;
  }
}

void sub_1C415B838()
{
  if (!qword_1EBBBF008)
  {
    type metadata accessor for FinalizedTimestamp(255);
    unint64_t v0 = sub_1C4497B38();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBBBF008);
    }
  }
}

uint64_t sub_1C415B890()
{
  uint64_t result = type metadata accessor for FinalizedTimestamp(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1C415B964(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  unint64_t v12 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  uint64_t v13 = *(void *)(v10 + 64) + 7;
  unsigned int v14 = v11 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v14 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) != 0
    || ((v13 + (v12 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v18 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v19 = ((unint64_t)a2 + v12) & v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v12) & v18, v19, v9);
    size_t v20 = (void *)((v13 + (((unint64_t)a1 + v12) & v18)) & 0xFFFFFFFFFFFFFFF8);
    size_t v21 = (void *)((v13 + v19) & 0xFFFFFFFFFFFFFFF8);
    *size_t v20 = *v21;
    v20[1] = v21[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1C415BB44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C4496678();
  uint64_t v5 = *(void *)(v4 - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, v4);
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1
                                                                                            + ((*(void *)(v5 + 56)
                                                                                              + 7) & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C415BC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(v6 - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 48) + 7;
  *(void *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  unint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  unint64_t v13 = (v12 + a1) & ~v11;
  unint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(unint64_t, unint64_t))(v9 + 16))(v13, v14);
  uint64_t v15 = *(void *)(v10 + 48) + 7;
  unsigned int v16 = (void *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1C415BD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(v6 - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 40) + 7;
  *(void *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  unint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  unint64_t v13 = (v12 + a1) & ~v11;
  unint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))(v13, v14);
  uint64_t v15 = *(void *)(v10 + 40) + 7;
  unsigned int v16 = (void *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v16 = *v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1C415BE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(v6 - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 32) + 7;
  *(void *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  unint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  unint64_t v13 = (v12 + a1) & ~v11;
  unint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(unint64_t, unint64_t))(v9 + 32))(v13, v14);
  *(_OWORD *)((*(void *)(v10 + 32) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v10 + 32)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1C415BF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(v6 - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 24) + 7;
  *(void *)((v8 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v8 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  unint64_t v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  unint64_t v13 = (v12 + a1) & ~v11;
  unint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(unint64_t, unint64_t))(v9 + 40))(v13, v14);
  uint64_t v15 = *(void *)(v10 + 24) + 7;
  unsigned int v16 = (void *)((v15 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)((v15 + v14) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v16 = *v17;
  swift_bridgeObjectRelease();
  v16[1] = v17[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1C415C088(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  unint64_t v13 = ((*(void *)(*(void *)(v6 - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  uint64_t v14 = *(void *)(v9 + 64) + 7;
  if (v12 < a2)
  {
    unint64_t v15 = ((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v16 = v15 & 0xFFFFFFF8;
    if ((v15 & 0xFFFFFFF8) != 0) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = a2 - v12 + 1;
    }
    if (v17 >= 0x10000) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v17 < 0x100) {
      unsigned int v18 = 1;
    }
    if (v17 >= 2) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    switch(v19)
    {
      case 1:
        int v20 = *((unsigned __int8 *)a1 + v15);
        if (!v20) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v20 = *(unsigned __int16 *)((char *)a1 + v15);
        if (v20) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1C415C2DCLL);
      case 4:
        int v20 = *(int *)((char *)a1 + v15);
        if (!v20) {
          break;
        }
LABEL_24:
        int v22 = v20 - 1;
        if (v16)
        {
          int v22 = 0;
          int v23 = *a1;
        }
        else
        {
          int v23 = 0;
        }
        return v12 + (v23 | v22) + 1;
      default:
        break;
    }
  }
  if (v8 == v12)
  {
    uint64_t v24 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v7 + 48);
    return v24(a1, v8, v6);
  }
  else
  {
    unint64_t v25 = ((unint64_t)a1 + v13) & ~v11;
    if (v10 == v12)
    {
      unsigned int v26 = *(uint64_t (**)(unint64_t))(v9 + 48);
      return v26(v25);
    }
    else
    {
      unint64_t v27 = *(void *)((v14 + v25) & 0xFFFFFFFFFFFFFFF8);
      if (v27 >= 0xFFFFFFFF) {
        LODWORD(v27) = -1;
      }
      return (v27 + 1);
    }
  }
}

void sub_1C415C2F0(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = sub_1C4496678();
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v10) {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  unint64_t v15 = ((*(void *)(*(void *)(v8 - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + v13 + 8;
  uint64_t v16 = *(void *)(v11 + 64) + 7;
  unint64_t v17 = ((v16 + (v15 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v14 >= a3)
  {
    int v20 = 0;
    int v21 = a2 - v14;
    if (a2 <= v14)
    {
LABEL_19:
      uint64_t v22 = ~v13;
      switch(v20)
      {
        case 1:
          *((unsigned char *)a1 + v17) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)((char *)a1 + v17) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)((char *)a1 + v17) = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v10 == v14)
            {
              unint64_t v25 = *(void (**)(_DWORD *, uint64_t))(v9 + 56);
              v25(a1, a2);
            }
            else
            {
              unint64_t v26 = ((unint64_t)a1 + v15) & v22;
              if (v12 == v14)
              {
                unint64_t v27 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 56);
                v27(v26, a2, v12);
              }
              else
              {
                unsigned int v28 = (void *)((v16 + v26) & 0xFFFFFFFFFFFFFFF8);
                if ((a2 & 0x80000000) != 0)
                {
                  uint64_t v29 = a2 ^ 0x80000000;
                  v28[1] = 0;
                }
                else
                {
                  uint64_t v29 = (a2 - 1);
                }
                *unsigned int v28 = v29;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v18 = a3 - v14 + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    int v21 = a2 - v14;
    if (a2 <= v14) {
      goto LABEL_19;
    }
  }
  if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v23 = v21;
  }
  else {
    int v23 = 1;
  }
  if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v24 = ~v14 + a2;
    bzero(a1, ((v16 + (v15 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v24;
  }
  switch(v20)
  {
    case 1:
      *((unsigned char *)a1 + v17) = v23;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v17) = v23;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x1C415C5A8);
    case 4:
      *(_DWORD *)((char *)a1 + v17) = v23;
      break;
    default:
      return;
  }
}

uint64_t sub_1C415C5D0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C415C5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FinalizedTimestamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C415C650()
{
  return sub_1C415C718();
}

uint64_t sub_1C415C668()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[6] + 8) + 8) + 16))(v0[9], v0[3]);
}

uint64_t sub_1C415C6B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C415C718()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[4] + 8) + 8) + 16))(v0[9], v0[2]);
}

uint64_t sub_1C415C760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4157AB4(a1, a2, v3[10], v3[2], v3[3], v3[4], v3[5], v3[6], a3, v3[7], v3[8], v3[9]);
}

uint64_t sub_1C415C79C(uint64_t a1, void *a2)
{
  return sub_1C4158678(a1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 80), *(void *)(v2 + 88), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 72), a2);
}

uint64_t sub_1C415C7E0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C4158460(a1, *(void *)(v3 + 40), *(void **)(v3 + 48), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), a2, a3);
}

uint64_t sub_1C415C808()
{
  return sub_1C41582BC(v0[10], v0[11], v0[2], v0[3]);
}

uint64_t sub_1C415C840()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[5] + 8) + 8) + 16))(v0[11], v0[2]);
}

uint64_t sub_1C415C888(uint64_t a1, uint64_t a2)
{
  return sub_1C415C8B4(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, uint64_t))sub_1C41563C0);
}

uint64_t sub_1C415C8B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, void, void, void, void, void, void, uint64_t))
{
  return a3(a1, v3[8], v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], a2);
}

uint64_t sub_1C415C8F4()
{
  sub_1C3FE3FF0();
  swift_allocError();
  *(void *)uint64_t v0 = 0xD00000000000001DLL;
  *(void *)(v0 + 8) = 0x80000001C44B2E90;
  *(unsigned char *)(v0 + 16) = 0;
  return swift_willThrow();
}

uint64_t CRCodable.minAppFormatVersion.getter()
{
  return 0;
}

uint64_t CRCodable.hasEncodedData.getter()
{
  return 1;
}

void CRCodable.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t dispatch thunk of CRCodable.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of CRCodable.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CRCodable.hasEncodedData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void sub_1C415C9E0(unsigned char *a1@<X8>)
{
}

uint64_t dispatch thunk of CRCodable.minEncodingVersion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CRCodable.minAppFormatVersion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_1C415CA20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *))(v3 + 16))(v6);
  sub_1C44976F8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t sub_1C415CB2C()
{
  uint64_t v0 = sub_1C4497B38();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v5 - v2;
  sub_1C4497708();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1C415CC04(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a3[2];
  uint64_t v5 = a3[3];
  uint64_t v7 = a3[4];
  uint64_t v8 = type metadata accessor for TreeNode();
  uint64_t v9 = sub_1C4497B38();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v17 - v11;
  uint64_t v13 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v17 - v11, a2, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v12, 0, 1, v8);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17[2] = v6;
  v17[3] = v8;
  v17[4] = v5;
  v17[5] = v7;
  v17[6] = &off_1F1F9D5B8;
  v17[7] = WitnessTable;
  uint64_t v15 = type metadata accessor for CRDictionary();
  sub_1C41589BC((uint64_t)v12, a1, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1C415CDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(char *))(v3 + 16))(v6);
  sub_1C4497748();
  sub_1C44976F8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t CRUnorderedTree.insert(_:inParent:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = a3[2];
  uint64_t v9 = a3[4];
  uint64_t v52 = a3[3];
  uint64_t v54 = v9;
  uint64_t v10 = type metadata accessor for TreeNode();
  uint64_t v57 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v47 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v53 = (char *)&v43 - v14;
  uint64_t v56 = *(void *)(v8 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v55 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v48 = (char *)&v43 - v17;
  unint64_t v58 = sub_1C4497B38();
  uint64_t v51 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  int v19 = (char *)&v43 - v18;
  uint64_t v20 = sub_1C4497B38();
  uint64_t v49 = *(void *)(v20 - 8);
  uint64_t v50 = (void *)v20;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v43 - v21;
  uint64_t v23 = *((void *)v3 + 2);
  long long v59 = *v3;
  uint64_t v60 = v23;
  uint64_t v24 = a1;
  uint64_t result = sub_1C43941DC(a1, a2, a3);
  if ((result & 1) == 0) {
    return result;
  }
  uint64_t v45 = a3;
  sub_1C4394864(a1, a3);
  uint64_t v51 = *(void *)(v51 + 16);
  uint64_t v46 = a2;
  ((void (*)(char *, uint64_t, unint64_t))v51)(v19, a2, v58);
  uint64_t v26 = v52;
  uint64_t v27 = v54;
  sub_1C444E42C((uint64_t)v19, v8, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v22, 0, 1, v10);
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v59 = v8;
  *((void *)&v59 + 1) = v10;
  uint64_t v60 = v26;
  uint64_t v61 = v27;
  uint64_t v62 = &off_1F1F9D5B8;
  uint64_t v63 = WitnessTable;
  uint64_t v29 = type metadata accessor for CRDictionary();
  uint64_t v44 = v24;
  sub_1C41589BC((uint64_t)v22, v24, v29);
  (*(void (**)(char *, void *))(v49 + 8))(v22, v50);
  ((void (*)(char *, uint64_t, unint64_t))v51)(v19, v46, v58);
  int v30 = v53;
  sub_1C444E42C((uint64_t)v19, v8, v53);
  int v31 = (void *)swift_allocObject();
  v31[2] = v8;
  v31[3] = v26;
  v31[4] = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, v24, v8);
  uint64_t v32 = (void *)swift_allocObject();
  v32[2] = v8;
  v32[3] = v26;
  v32[4] = v27;
  v32[5] = sub_1C415D7D8;
  v32[6] = v31;
  LODWORD(v52) = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v59 = *((void *)v3 + 1);
  uint64_t v33 = v59;
  *((void *)v4 + 1) = 0x8000000000000000;
  uint64_t v34 = swift_getWitnessTable();
  unint64_t v35 = sub_1C3F88430((uint64_t)v30, v10, v34);
  if (__OFADD__(*(void *)(v33 + 16), (v36 & 1) == 0))
  {
    __break(1u);
LABEL_11:
    uint64_t result = sub_1C4498558();
    __break(1u);
    return result;
  }
  char v37 = v36;
  unint64_t v58 = v35;
  uint64_t v50 = v31;
  uint64_t v51 = v8;
  sub_1C4497748();
  sub_1C4497EF8();
  if (sub_1C4497EC8())
  {
    unint64_t v58 = sub_1C3F88430((uint64_t)v30, v10, v34);
    if ((v37 & 1) != (v38 & 1)) {
      goto LABEL_11;
    }
  }
  *((void *)v4 + 1) = v59;
  swift_bridgeObjectRelease();
  uint64_t v43 = v4;
  if (v37)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = v57;
    uint64_t v40 = v30;
  }
  else
  {
    uint64_t v41 = swift_bridgeObjectRetain();
    *(void *)&long long v59 = ((uint64_t (*)(uint64_t))v32[5])(v41);
    uint64_t v39 = v57;
    uint64_t v40 = v30;
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v47, v30, v10);
    sub_1C4497EE8();
  }
  swift_bridgeObjectRelease();
  int v42 = v48;
  sub_1C44976F8();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v42, v51);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v10);
  sub_1C4394DC0(v44, v45);
  swift_release();
  return swift_release();
}

uint64_t sub_1C415D528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1C4497478();
  if (MEMORY[0x1C8780170](v5, a1)) {
    uint64_t v6 = sub_1C4163618(v5, a1, a3);
  }
  else {
    uint64_t v6 = MEMORY[0x1E4FBC870];
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1C415D59C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t CRUnorderedTree.children(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a1;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = sub_1C4497B38();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = type metadata accessor for TreeNode();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v16 - v10;
  uint64_t v12 = *(void *)(v2 + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v16, v4);
  sub_1C444E42C((uint64_t)v7, v3, v11);
  uint64_t v13 = sub_1C4497748();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x1C877FC90](&v17, v11, v12, v8, v13, WitnessTable);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t result = v17;
  if (!v17) {
    return sub_1C4496EC8();
  }
  return result;
}

uint64_t sub_1C415D7C8()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1C415D7D8()
{
  return sub_1C415D528(v0[2], v0[3], v0[4]);
}

uint64_t sub_1C415D7E4()
{
  return MEMORY[0x1F4186498](v0, 56, 7);
}

_UNKNOWN **sub_1C415D7F4()
{
  return &protocol witness table for CRUnorderedTree<A>.MergeableDelta;
}

uint64_t sub_1C415D804()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_1C415D848(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1C415D898(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1C415D910(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for CRUnorderedTree()
{
  return __swift_instantiateGenericMetadata();
}

void CRDictionary_v1.init(_:)(void *a1@<X0>, void *a2@<X8>)
{
  CRDictionary.init()(&v5);
  uint64_t v4 = v5;

  *a2 = v4;
}

void *CRDictionary_v1.init()@<X0>(void *a1@<X8>)
{
  uint64_t result = CRDictionary.init()(&v3);
  *a1 = v3;
  return result;
}

uint64_t CRDictionary_v1.copy(renamingReferences:)@<X0>(char *a1@<X0>, _OWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v10 = *v3;
  long long v6 = a2[2];
  v9[0] = a2[1];
  v9[1] = v6;
  void v9[2] = a2[3];
  uint64_t v7 = (void *)type metadata accessor for CRDictionary();
  uint64_t result = CRDictionary.copy(renamingReferences:)(a1, v7, v9);
  *a3 = *(void *)&v9[0];
  return result;
}

uint64_t CRDictionary_v1.copy(renamingReferences:)@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X1>, void *a3@<X8>)
{
  if (!a1) {
    a1 = sub_1C3FE49A0(MEMORY[0x1E4FBC860]);
  }
  unint64_t v6 = a1;
  swift_bridgeObjectRetain();
  CRDictionary_v1.copy(renamingReferences:)((char *)&v6, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t CRDictionary_v1.actionUndoingDifference(from:)@<X0>(char **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  v7[0] = *a1;
  v7[1] = v4;
  uint64_t v5 = (char *)type metadata accessor for CRDictionary();
  return CRDictionary.actionUndoingDifference(from:)(v7, v5, a2);
}

uint64_t CRDictionary_v1.apply(_:)(long long *a1)
{
  long long v3 = *a1;
  uint64_t v1 = type metadata accessor for CRDictionary();
  return CRDictionary.apply(_:)((unint64_t *)&v3, v1);
}

uint64_t CRDictionary_v1.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CRDictionary.subscript.getter(a1, a2);
}

uint64_t sub_1C415DC28@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return CRDictionary_v1.subscript.getter(a1, a2);
}

uint64_t sub_1C415DC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C415FAA4(a1, a3);
}

uint64_t CRDictionary_v1.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C415FAA4(a1, a2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8))(a2);
  uint64_t v6 = sub_1C4497B38();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  return v7(a1, v6);
}

void (*CRDictionary_v1.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x48uLL);
  *a1 = v7;
  void *v7 = a3;
  v7[1] = v3;
  uint64_t v8 = sub_1C4497B38();
  v7[2] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[3] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[4] = malloc(v10);
  uint64_t v11 = malloc(v10);
  uint64_t v12 = *(void *)(a3 + 16);
  v7[5] = v11;
  v7[6] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13;
  v7[7] = v13;
  v7[8] = malloc(*(void *)(v13 + 64));
  (*(void (**)(void))(v14 + 16))();
  CRDictionary_v1.subscript.getter(a2, (uint64_t)v11);
  return sub_1C415DF18;
}

void sub_1C415DF18(uint64_t **a1, char a2)
{
}

uint64_t CRDictionary_v1.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v20 = a3;
  uint64_t v21 = a5;
  uint64_t v8 = a4[2];
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v5;
  (*(void (**)(char *))(v9 + 16))(v11);
  uint64_t v13 = a4[3];
  uint64_t v14 = a4[4];
  uint64_t v23 = v8;
  uint64_t v24 = v13;
  uint64_t v15 = a4[5];
  uint64_t v16 = a4[6];
  uint64_t v25 = v14;
  uint64_t v26 = v15;
  uint64_t v17 = a4[7];
  uint64_t v27 = v16;
  uint64_t v28 = v17;
  uint64_t v29 = a2;
  uint64_t v30 = v20;
  uint64_t v37 = v12;
  swift_retain();
  uint64_t v31 = v8;
  uint64_t v32 = v13;
  uint64_t v33 = v14;
  uint64_t v34 = v15;
  uint64_t v35 = v16;
  uint64_t v36 = v17;
  uint64_t v18 = type metadata accessor for CRDictionary();
  CRDictionary.subscript.getter((uint64_t)v11, (uint64_t)sub_1C4158CB8, (uint64_t)v22, v18, v21);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t CRDictionary_v1.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1C415FB04(a1, a2, a5);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a5 + 16) - 8) + 8))(a2);
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a5 + 24) - 8) + 8);
  return v8(a1);
}

void (*CRDictionary_v1.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5))(uint64_t **a1, char a2)
{
  uint64_t v11 = malloc(0x48uLL);
  *a1 = v11;
  *uint64_t v11 = a5;
  v11[1] = v5;
  uint64_t v12 = a5[3];
  void v11[2] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v11[3] = v13;
  size_t v14 = *(void *)(v13 + 64);
  v11[4] = malloc(v14);
  uint64_t v15 = malloc(v14);
  uint64_t v16 = a5[2];
  v11[5] = v15;
  v11[6] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = v17;
  v11[7] = v17;
  v11[8] = malloc(*(void *)(v17 + 64));
  (*(void (**)(void))(v18 + 16))();
  CRDictionary_v1.subscript.getter(a2, a3, a4, a5, (uint64_t)v15);
  return sub_1C415E2C4;
}

void sub_1C415E2C4(uint64_t **a1, char a2)
{
}

void sub_1C415E2DC(uint64_t **a1, char a2, void (*a3)(void *, void *, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v6 = (*a1)[7];
  uint64_t v5 = (void *)(*a1)[8];
  uint64_t v7 = (void *)(*a1)[5];
  uint64_t v13 = (*a1)[6];
  uint64_t v9 = (*a1)[3];
  uint64_t v8 = (void *)(*a1)[4];
  uint64_t v10 = (*a1)[2];
  uint64_t v11 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v9 + 16))(v4[4], v7, v4[2]);
    a3(v8, v5, v11);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v13);
    uint64_t v12 = *(void (**)(void *, uint64_t))(v9 + 8);
    v12(v8, v10);
    v12(v7, v10);
  }
  else
  {
    a3(v7, v5, *v4);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v13);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v7, v10);
  }
  free(v5);
  free(v7);
  free(v8);
  free(v4);
}

uint64_t CRDictionary_v1.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CRDictionary.removeValue(forKey:)(a1, a2);
}

uint64_t CRDictionary_v1.index(where:)@<X0>(uint64_t (*a1)(char *, uint64_t)@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  swift_retain();
  uint64_t v6 = type metadata accessor for CRDictionary();
  CRDictionary.index(where:)(a1, a2, v6, a3);
  return swift_release();
}

uint64_t CRDictionary_v1.merge(_:)(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  long long v4 = a2[2];
  v9[0] = a2[1];
  v9[1] = v4;
  void v9[2] = a2[3];
  uint64_t v5 = type metadata accessor for CRDictionary();
  sub_1C4150408();
  *(void *)&v9[0] = v3;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = (void *)sub_1C4385090((uint64_t)v9, v5, WitnessTable);
  *(void *)&v9[0] = *v2;
  sub_1C4158CE0();
  swift_retain();
  sub_1C4380528(v7);
  swift_release();
  return swift_release();
}

uint64_t CRDictionary_v1.visitReferences(_:)(uint64_t a1)
{
  uint64_t v2 = (void *)type metadata accessor for CRDictionary();
  return CRDictionary.visitReferences(_:)(a1, v2);
}

Swift::Bool __swiftcall CRDictionary_v1.needToFinalizeTimestamps()()
{
  return CRDictionary.needToFinalizeTimestamps()();
}

uint64_t CRDictionary_v1.finalizeTimestamps(_:)(uint64_t a1)
{
  return CRDictionary.finalizeTimestamps(_:)(a1);
}

uint64_t static CRDictionary_v1.== infix(_:_:)(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  long long v4 = *a2;
  uint64_t v5 = v2;
  return static CRDictionary.== infix(_:_:)((uint64_t)&v5, &v4) & 1;
}

uint64_t CRDictionary_v1.description.getter()
{
  return CRDictionary.description.getter();
}

uint64_t CRDictionary_v1.hasDelta(from:)(void **a1)
{
  uint64_t v2 = *v1;
  uint64_t v7 = *a1;
  uint64_t v8 = v2;
  type metadata accessor for CRDictionary();
  if (CRDictionary.hasDelta(from:)(&v7))
  {
    char v3 = 1;
  }
  else
  {
    uint64_t v4 = sub_1C4158CE0();
    uint64_t v5 = swift_beginAccess();
    uint64_t v8 = *(void *)(v4 + 40);
    MEMORY[0x1F4188790](v5);
    type metadata accessor for CRDictionaryElement();
    sub_1C4497008();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    char v3 = sub_1C4497368();
    swift_bridgeObjectRelease();
  }
  return v3 & 1;
}

uint64_t CRDictionary_v1.delta(_:from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *v3;
  v9[0] = *a2;
  v9[1] = v6;
  swift_retain();
  swift_retain();
  uint64_t v7 = (_OWORD *)type metadata accessor for CRDictionary();
  CRDictionary.delta(_:from:)(a1, v9, v7, a3);
  swift_release();
  return swift_release();
}

uint64_t CRDictionary_v1.canMerge(delta:)(uint64_t *a1)
{
  return CRDictionary.canMerge(delta:)(a1) & 1;
}

uint64_t CRDictionary_v1.merge(delta:)(void *a1)
{
  uint64_t v2 = (_OWORD *)type metadata accessor for CRDictionary();
  return CRDictionary.merge(delta:)(a1, v2) & 1;
}

uint64_t sub_1C415EA64(uint64_t *a1, void **a2)
{
  return static CRDictionary_v1.== infix(_:_:)(a1, a2);
}

uint64_t CRDictionary_v1.observableDifference(from:with:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  v9[1] = *v3;
  v9[0] = v6;
  uint64_t v7 = (void *)type metadata accessor for CRDictionary();
  return CRDictionary.observableDifference(from:with:)(v9, a2, v7, a3);
}

uint64_t sub_1C415EB0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return CRDictionary_v1.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 40), *(uint64_t **)(a2 + 48), *(void *)(a2 + 56), a3);
}

uint64_t CRDictionary_v1.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t result = CRDictionary.init(from:)(a1, a2, a3, a4, a5, a6, a7, &v11);
  if (!v8) {
    *a8 = v11;
  }
  return result;
}

uint64_t sub_1C415EB68(uint64_t a1)
{
  return CRDictionary_v1.encode(to:)(a1);
}

uint64_t CRDictionary_v1.encode(to:)(uint64_t a1)
{
  swift_retain();
  uint64_t v2 = (void *)type metadata accessor for CRDictionary();
  CRDictionary.encode(to:)(a1, v2);
  return swift_release();
}

void sub_1C415EC08(unsigned char *a1@<X8>)
{
}

void CRDictionary_v1.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1C415EC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, void, void), uint64_t a6, uint64_t a7, void (*a8)(void))
{
  uint64_t v96 = a8;
  uint64_t v95 = a5;
  uint64_t v100 = a1;
  uint64_t v79 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v78 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for FinalizedTimestamp(0);
  MEMORY[0x1F4188790](v86);
  uint64_t v85 = (uint64_t)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CRDictionaryElement();
  uint64_t v83 = (void (*)(char *, uint64_t))sub_1C4497B38();
  uint64_t v82 = (void (**)(void))*((void *)v83 - 1);
  MEMORY[0x1F4188790](v83);
  uint64_t v93 = (char *)&v75 - v16;
  uint64_t v91 = v15;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v90 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v89 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v88 = (char *)&v75 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v84 = (char *)&v75 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v75 - v25;
  uint64_t v27 = *(void *)(v15 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v24);
  uint64_t v87 = (char *)&v75 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  uint64_t v97 = (char *)&v75 - v30;
  uint64_t v107 = a2;
  uint64_t v101 = a3;
  uint64_t v102 = a4;
  uint64_t v81 = a4;
  uint64_t v103 = v95;
  uint64_t v104 = a6;
  uint64_t v80 = a7;
  uint64_t v105 = a7;
  uint64_t v106 = v96;
  type metadata accessor for CRDictionary();
  uint64_t v31 = sub_1C4158CE0();
  uint64_t v98 = TupleTypeMetadata2;
  uint64_t v32 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v33 = &v26[v32];
  uint64_t v34 = v100 + v32;
  uint64_t v35 = (void (**)(void))(*(void *)(a3 - 8) + 16);
  uint64_t v96 = *v35;
  v96(v26);
  uint64_t v36 = *(void (**)(void, void, void))(v27 + 16);
  uint64_t v92 = v33;
  uint64_t v37 = v33;
  uint64_t v38 = v91;
  uint64_t v94 = v34;
  uint64_t v95 = v36;
  v36(v37, v34, v91);
  swift_beginAccess();
  uint64_t v39 = *(void *)(v31 + 40);
  swift_bridgeObjectRetain();
  uint64_t v99 = a3;
  uint64_t v40 = a3;
  uint64_t v41 = a6;
  int v42 = v35;
  uint64_t v43 = v93;
  MEMORY[0x1C877FC90](v26, v39, v40, v38, v41);
  swift_bridgeObjectRelease();
  uint64_t v44 = (void (**)(char *, uint64_t))(v27 + 8);
  uint64_t v45 = (char *)(v35 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v43, 1, v38) == 1)
  {
    ((void (*)(char *, void *))v82[1])(v43, v83);
    (*v44)(v92, v38);
    (*(void (**)(char *, uint64_t))v45)(v26, v99);
    char v46 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v97, v43, v38);
    uint64_t v93 = (char *)(v27 + 16);
    uint64_t v47 = *(void (**)(char *, uint64_t))(v27 + 8);
    v47(v92, v38);
    uint64_t v48 = *(void (**)(char *, uint64_t))v45;
    uint64_t v49 = v99;
    uint64_t v92 = v45;
    uint64_t v83 = v48;
    v48(v26, v99);
    uint64_t v50 = v98;
    uint64_t v51 = v84;
    uint64_t v52 = (uint64_t)&v84[*(int *)(v98 + 48)];
    uint64_t v53 = v100;
    uint64_t v82 = v42;
    ((void (*)(char *, uint64_t, uint64_t))v96)(v84, v100, v49);
    v95(v52, v94, v38);
    uint64_t v54 = v85;
    sub_1C408030C(v52, v85);
    uint64_t v76 = v47;
    v47((char *)v52, v38);
    uint64_t v55 = *(int *)(v86 + 20);
    uint64_t v56 = *(void *)&v97[v55];
    uint64_t v57 = *(void *)(v54 + v55);
    uint64_t v58 = v49;
    uint64_t v59 = v53;
    uint64_t v60 = v54;
    uint64_t v61 = v51;
    uint64_t v77 = v44;
    uint64_t v62 = v97;
    if (v56 == v57) {
      LODWORD(v86) = sub_1C410BE0C();
    }
    else {
      LODWORD(v86) = v56 < v57;
    }
    uint64_t v63 = v88;
    sub_1C4080370(v60);
    v83(v61, v58);
    uint64_t v64 = &v63[*(int *)(v50 + 48)];
    uint64_t v65 = (void (*)(void))v96;
    ((void (*)(char *, uint64_t, uint64_t))v96)(v63, v59, v58);
    uint64_t v66 = (void (*)(char *, char *, uint64_t))v95;
    v95(v64, v94, v38);
    uint64_t v67 = v87;
    v66(v87, v62, v38);
    if (v86)
    {
      uint64_t v68 = v76;
      v76(v67, v38);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v63, v98);
      v68(v62, v38);
      char v46 = 1;
    }
    else
    {
      uint64_t v69 = &v89[*(int *)(v98 + 48)];
      v65();
      v66(v69, v64, v38);
      uint64_t v70 = v79;
      uint64_t v71 = v78;
      uint64_t v72 = v81;
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v78, &v69[*(int *)(v38 + 36)], v81);
      uint64_t v73 = v76;
      v76(v69, v38);
      char v46 = (*(uint64_t (**)(char *, uint64_t))(v80 + 24))(&v67[*(int *)(v38 + 36)], v72);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v72);
      v73(v67, v38);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v63, v98);
      v73(v97, v38);
      v83(v89, v99);
    }
  }
  return v46 & 1;
}

uint64_t CRDictionary_v1.makeIterator()@<X0>(void *a1@<X8>)
{
  return CRDictionary.makeIterator()(a1);
}

uint64_t sub_1C415F4FC@<X0>(void *a1@<X8>)
{
  CRDictionary_v1.makeIterator()(a1);
  return swift_release();
}

uint64_t sub_1C415F528(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t sub_1C415F57C()
{
  swift_getWitnessTable();
  uint64_t v0 = sub_1C3F54C8C();
  swift_release();
  return v0;
}

uint64_t CRDictionary_v1.startIndex.getter(uint64_t a1)
{
  return sub_1C415F608(a1, (uint64_t (*)(uint64_t))CRDictionary.startIndex.getter);
}

uint64_t CRDictionary_v1.endIndex.getter(uint64_t a1)
{
  return sub_1C415F608(a1, (uint64_t (*)(uint64_t))CRDictionary.endIndex.getter);
}

uint64_t sub_1C415F608(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = type metadata accessor for CRDictionary();
  return a2(v3);
}

uint64_t CRDictionary_v1.subscript.getter(uint64_t a1, uint64_t a2, long long *a3)
{
  char v6 = *((unsigned char *)a3 + 16);
  uint64_t v12 = *v3;
  long long v7 = *a3;
  char v11 = v6;
  long long v10 = v7;
  uint64_t v8 = type metadata accessor for CRDictionary();
  return CRDictionary.subscript.getter(a1, a2, (uint64_t)&v10, v8);
}

uint64_t CRDictionary_v1.index(after:)@<X0>(uint64_t a1@<X8>)
{
  return CRDictionary.index(after:)(a1);
}

void (*sub_1C415F760(uint64_t **a1, long long *a2, uint64_t a3))(uint64_t *a1, uint64_t a2)
{
  char v6 = (uint64_t *)malloc(0x40uLL);
  *a1 = v6;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6[4] = TupleTypeMetadata2;
  uint64_t v10 = *(void *)(TupleTypeMetadata2 - 8);
  v6[5] = v10;
  char v11 = (char *)malloc(*(void *)(v10 + 64));
  v6[6] = (uint64_t)v11;
  uint64_t v12 = sub_1C415F8CC(v6, a2);
  uint64_t v14 = v13;
  v6[7] = (uint64_t)v12;
  (*(void (**)(char *))(*(void *)(v8 - 8) + 16))(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(&v11[*(int *)(TupleTypeMetadata2 + 48)], v14, v7);
  return sub_1C415551C;
}

void (*sub_1C415F8CC(uint64_t *a1, long long *a2))(void *a1)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v5 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v5;
  char v6 = malloc(*(void *)(v5 + 64));
  a1[2] = (uint64_t)v6;
  CRDictionary_v1.subscript.getter((uint64_t)v6, (uint64_t)v6 + *(int *)(TupleTypeMetadata2 + 48), a2);
  return sub_1C4108148;
}

double sub_1C415F9B4(uint64_t a1)
{
  CRDictionary_v1.index(after:)((uint64_t)&v4);
  sub_1C3F882B0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  char v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(unsigned char *)(a1 + 16) = v2;
  return result;
}

uint64_t CRDictionary_v1<>.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)type metadata accessor for CRDictionary();
  return CRDictionary<>.encode(to:)(a1, v7, a3, a4);
}

uint64_t sub_1C415FA84(void *a1, uint64_t a2, uint64_t a3)
{
  return CRDictionary_v1<>.encode(to:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t sub_1C415FAA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CRDictionary();
  return sub_1C41589BC(a1, a2, v4);
}

uint64_t sub_1C415FB04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = sub_1C4497B38();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v15 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v15 - v9, a1, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, v6);
  v15[0] = *(void *)(a3 + 16);
  v15[1] = v6;
  long long v12 = *(_OWORD *)(a3 + 48);
  long long v16 = *(_OWORD *)(a3 + 32);
  long long v17 = v12;
  uint64_t v13 = type metadata accessor for CRDictionary();
  sub_1C41589BC((uint64_t)v10, a2, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1C415FC80(uint64_t a1)
{
  return sub_1C415EC28(a1, *(void *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void, void, void))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void (**)(void))(v1 + 56)) & 1;
}

_UNKNOWN **sub_1C415FCAC()
{
  return &protocol witness table for CRDictionary<A, B>.MergeableDelta;
}

uint64_t sub_1C415FCB8(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1C415FCF4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C415FD10()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C415FD2C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C415FD50()
{
  return 48;
}

__n128 sub_1C415FD5C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t type metadata accessor for CRDictionary_v1()
{
  return swift_getGenericMetadata();
}

ValueMetadata *type metadata accessor for CRUnknownCRDT()
{
  return &type metadata for CRUnknownCRDT;
}

uint64_t sub_1C415FD98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  long long v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  long long v3 = sub_1C3FF14F0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C415FEEC(uint64_t a1)
{
  return sub_1C3FB56A4(a1, (uint64_t (*)(void))sub_1C3F6DE60, type metadata accessor for Proto_Value);
}

uint64_t sub_1C415FF18(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  long long v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  long long v3 = sub_1C3FF1870(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[v9 + 4];
  if (a1 + 32 < v10 + 8 * v8 && v10 < a1 + 32 + 8 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C4160070(uint64_t result)
{
  uint64_t v3 = *(void *)(result + 16);
  int64_t v4 = *(void **)v1;
  int64_t v5 = *(void *)(*(void *)v1 + 16);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = result;
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v9 = v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6) {
      int64_t v10 = v5 + v3;
    }
    else {
      int64_t v10 = v5;
    }
    int64_t v4 = sub_1C3FF12A8(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    int64_t v9 = v4[3] >> 1;
  }
  uint64_t v11 = v4[2];
  uint64_t v12 = v9 - v11;
  uint64_t result = sub_1C4232EF8((uint64_t)v40, &v4[2 * v11 + 4], v9 - v11, v7);
  if (result < v3) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, result);
    uint64_t v15 = v13 + result;
    if (v14)
    {
      __break(1u);
      goto LABEL_51;
    }
    uint64_t v4[2] = v15;
  }
  if (result != v12) {
    goto LABEL_13;
  }
LABEL_16:
  int64_t v2 = v4[2];
  uint64_t v7 = v41;
  uint64_t v38 = v40[1];
  uint64_t v39 = v40[0];
  int64_t v6 = v42;
  uint64_t v37 = v41;
  if (!v43)
  {
LABEL_51:
    int64_t v30 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v21 = (unint64_t)(v7 + 64) >> 6;
    if (v30 >= v21) {
      goto LABEL_13;
    }
    unint64_t v34 = *(void *)(v38 + 8 * v30);
    if (!v34)
    {
      int64_t v35 = v6 + 2;
      if (v6 + 2 >= v21) {
        goto LABEL_13;
      }
      unint64_t v34 = *(void *)(v38 + 8 * v35);
      if (v34)
      {
LABEL_59:
        int64_t v30 = v35;
      }
      else
      {
        if (v6 + 3 >= v21) {
          goto LABEL_13;
        }
        unint64_t v34 = *(void *)(v38 + 8 * (v6 + 3));
        if (!v34) {
          goto LABEL_65;
        }
        int64_t v30 = v6 + 3;
      }
    }
LABEL_54:
    unint64_t v16 = (v34 - 1) & v34;
    unint64_t v17 = __clz(__rbit64(v34)) + (v30 << 6);
    int64_t v6 = v30;
    uint64_t v7 = v37;
    goto LABEL_18;
  }
  unint64_t v16 = (v43 - 1) & v43;
  unint64_t v17 = __clz(__rbit64(v43)) | (v42 << 6);
LABEL_18:
  uint64_t v18 = (uint64_t *)(*(void *)(v39 + 48) + 16 * v17);
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  sub_1C3F7E324(*v18, v20);
  if (v20 >> 60 == 15) {
    goto LABEL_13;
  }
  int64_t v22 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    unint64_t v23 = v4[3];
    int64_t v24 = v23 >> 1;
    if ((uint64_t)(v23 >> 1) < v2 + 1)
    {
      int64_t v4 = sub_1C3FF12A8((void *)(v23 > 1), v2 + 1, 1, v4);
      int64_t v24 = v4[3] >> 1;
    }
    if (v2 < v24) {
      break;
    }
LABEL_20:
    uint64_t v4[2] = v2;
    if (v20 >> 60 == 15) {
      goto LABEL_13;
    }
  }
  while (1)
  {
    uint64_t v29 = &v4[2 * v2 + 4];
    *uint64_t v29 = v19;
    v29[1] = v20;
    ++v2;
    if (!v16) {
      break;
    }
    unint64_t v25 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v26 = v25 | (v6 << 6);
LABEL_26:
    uint64_t v27 = (uint64_t *)(*(void *)(v39 + 48) + 16 * v26);
    uint64_t v19 = *v27;
    unint64_t v20 = v27[1];
    sub_1C3F7E324(*v27, v20);
    if (v20 >> 60 == 15 || v2 >= v24) {
      goto LABEL_20;
    }
  }
  int64_t v30 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v30 >= v22) {
      goto LABEL_55;
    }
    unint64_t v31 = *(void *)(v38 + 8 * v30);
    if (v31) {
      goto LABEL_41;
    }
    int64_t v32 = v6 + 2;
    if (v6 + 2 >= v22) {
      goto LABEL_55;
    }
    unint64_t v31 = *(void *)(v38 + 8 * v32);
    if (!v31)
    {
      if (v6 + 3 >= v22) {
        goto LABEL_55;
      }
      unint64_t v31 = *(void *)(v38 + 8 * (v6 + 3));
      if (v31)
      {
        int64_t v30 = v6 + 3;
        goto LABEL_41;
      }
      int64_t v32 = v6 + 4;
      if (v6 + 4 >= v22) {
        goto LABEL_55;
      }
      unint64_t v31 = *(void *)(v38 + 8 * v32);
      if (!v31)
      {
        int64_t v30 = v6 + 5;
        if (v6 + 5 >= v22) {
          goto LABEL_55;
        }
        unint64_t v31 = *(void *)(v38 + 8 * v30);
        if (!v31)
        {
          int64_t v33 = v6 + 6;
          while (v22 != v33)
          {
            unint64_t v31 = *(void *)(v38 + 8 * v33++);
            if (v31)
            {
              int64_t v30 = v33 - 1;
              goto LABEL_41;
            }
          }
LABEL_55:
          uint64_t v4[2] = v2;
          goto LABEL_13;
        }
        goto LABEL_41;
      }
    }
    int64_t v30 = v32;
LABEL_41:
    unint64_t v16 = (v31 - 1) & v31;
    unint64_t v26 = __clz(__rbit64(v31)) + (v30 << 6);
    int64_t v6 = v30;
    goto LABEL_26;
  }
  __break(1u);
LABEL_65:
  int64_t v35 = v30 + 3;
  if (v30 + 3 < v21)
  {
    unint64_t v34 = *(void *)(v38 + 8 * v35);
    if (v34) {
      goto LABEL_59;
    }
    v30 += 4;
    if (v30 >= v21) {
      goto LABEL_13;
    }
    unint64_t v34 = *(void *)(v38 + 8 * v30);
    if (!v34)
    {
      int64_t v36 = v6 + 6;
      while (v21 != v36)
      {
        unint64_t v34 = *(void *)(v38 + 8 * v36++);
        if (v34)
        {
          int64_t v30 = v36 - 1;
          goto LABEL_54;
        }
      }
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_13:
  uint64_t result = sub_1C3F7FCE8();
  *(void *)uint64_t v1 = v4;
  return result;
}

uint64_t sub_1C4160494(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1C3FF1198(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C41605E8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native)
  {
    int64_t v8 = v3[3] >> 1;
    if (v8 >= v5)
    {
      unint64_t v9 = *(void *)(a1 + 16);
      if (v9) {
        goto LABEL_5;
      }
LABEL_18:
      if (!v2) {
        goto LABEL_19;
      }
      goto LABEL_21;
    }
  }
  if (v4 <= v5) {
    int64_t v16 = v4 + v2;
  }
  else {
    int64_t v16 = v4;
  }
  uint64_t v3 = sub_1C3FF1FA4(isUniquelyReferenced_nonNull_native, v16, 1, v3);
  int64_t v8 = v3[3] >> 1;
  unint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = v3[2];
  if (v8 - v10 < (uint64_t)v9)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v11 = (unint64_t)&v3[3 * v10 + 4];
  if (a1 + 32 < v11 + 24 * v9 && v11 < a1 + 32 + 24 * v9) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BF90);
  swift_arrayInitWithCopy();
  if (v9 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v13 = v3[2];
  BOOL v14 = __OFADD__(v13, v9);
  uint64_t v15 = v13 + v9;
  if (!v14)
  {
    v3[2] = v15;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C4160768(long long *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[2];
  unint64_t v5 = v1[3];
  if (*v1)
  {
    uint64_t v6 = v1[1];
    sub_1C4498618();
    sub_1C3FE3ADC(v3);
    swift_bridgeObjectRetain();
    sub_1C411AAA4(a1, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1C411AAA4(a1, v6);
    swift_bridgeObjectRelease();
    sub_1C3F870F4(v3);
  }
  else
  {
    sub_1C4498618();
  }
  sub_1C3F7E324(v4, v5);
  sub_1C4496568();
  return sub_1C3F7E2CC(v4, v5);
}

uint64_t sub_1C4160848()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  sub_1C44985F8();
  sub_1C4498618();
  if (v1)
  {
    sub_1C3FE3ADC(v1);
    swift_bridgeObjectRetain();
    sub_1C411AAA4(v6, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1C411AAA4(v6, v2);
    swift_bridgeObjectRelease();
    sub_1C3F870F4(v1);
  }
  sub_1C3F7E324(v3, v4);
  sub_1C4496568();
  sub_1C3F7E2CC(v3, v4);
  return sub_1C4498628();
}

uint64_t sub_1C4160934()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  unint64_t v4 = v0[3];
  sub_1C44985F8();
  sub_1C4498618();
  if (v1)
  {
    sub_1C3FE3ADC(v1);
    swift_bridgeObjectRetain();
    sub_1C411AAA4(v6, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1C411AAA4(v6, v2);
    swift_bridgeObjectRelease();
    sub_1C3F870F4(v1);
  }
  sub_1C3F7E324(v3, v4);
  sub_1C4496568();
  sub_1C3F7E2CC(v3, v4);
  return sub_1C4498628();
}

uint64_t sub_1C4160A18(uint64_t a1, uint64_t a2)
{
  __s1[3] = *MEMORY[0x1E4F143B8];
  uint64_t v37 = *(void *)(a2 + 16);
  if (!v37) {
    return 0;
  }
  uint64_t v3 = a2 + 32;
  swift_bridgeObjectRetain_n();
  uint64_t v4 = 0;
  unint64_t v5 = (unint64_t *)(a1 + 56);
  uint64_t v39 = a1;
  int64_t v33 = (unint64_t *)(a1 + 56);
  uint64_t v34 = v3;
  while (2)
  {
    uint64_t v6 = (uint64_t *)(v3 + 32 * v4);
    uint64_t v7 = *v6;
    if (*v6 && (uint64_t v8 = *(void *)(a1 + 16)) != 0)
    {
      uint64_t v9 = v6[1];
      uint64_t v10 = v6[2];
      uint64_t v38 = v4 + 1;
      unint64_t v11 = v6[3];
      swift_bridgeObjectRetain_n();
      uint64_t v46 = v9;
      sub_1C3FE3ADC(v7);
      unint64_t v45 = v11 >> 62;
      sub_1C3F7E324(v10, v11);
      BOOL v12 = __OFSUB__(HIDWORD(v10), v10);
      BOOL v43 = v12;
      uint64_t v41 = v10;
      uint64_t v42 = HIDWORD(v10) - (int)v10;
      uint64_t v44 = BYTE6(v11);
      uint64_t v40 = v7;
      while (1)
      {
        uint64_t v14 = *(v5 - 3);
        uint64_t v13 = *(v5 - 2);
        uint64_t v16 = *(v5 - 1);
        unint64_t v15 = *v5;
        if (!v14)
        {
          uint64_t v17 = 0;
          switch(v15 >> 62)
          {
            case 1uLL:
              LODWORD(v17) = HIDWORD(v16) - v16;
              if (!__OFSUB__(HIDWORD(v16), v16))
              {
                uint64_t v17 = (int)v17;
LABEL_17:
                uint64_t v21 = v44;
                switch((int)v45)
                {
                  case 1:
                    uint64_t v21 = v42;
                    if (v43) {
                      goto LABEL_50;
                    }
                    goto LABEL_21;
                  case 2:
                    uint64_t v23 = *(void *)(v10 + 16);
                    uint64_t v22 = *(void *)(v10 + 24);
                    BOOL v20 = __OFSUB__(v22, v23);
                    uint64_t v21 = v22 - v23;
                    if (!v20) {
                      goto LABEL_21;
                    }
                    goto LABEL_51;
                  case 3:
                    if (!v17) {
                      goto LABEL_41;
                    }
                    goto LABEL_10;
                  default:
LABEL_21:
                    if (v17 == v21)
                    {
                      if (v17 < 1) {
                        goto LABEL_41;
                      }
                      switch(v15 >> 62)
                      {
                        case 1uLL:
                          if (v16 >> 32 < (int)v16) {
                            goto LABEL_52;
                          }
                          sub_1C3FE3ADC(0);
                          sub_1C3F7E324(v16, v15);
                          sub_1C3F7E324(v16, v15);
                          uint64_t v24 = sub_1C4496298();
                          if (!v24) {
                            goto LABEL_31;
                          }
                          uint64_t v25 = sub_1C44962C8();
                          if (__OFSUB__((int)v16, v25)) {
                            goto LABEL_55;
                          }
                          v24 += (int)v16 - v25;
LABEL_31:
                          sub_1C44962B8();
                          uint64_t v26 = v24;
                          uint64_t v10 = v41;
                          sub_1C3FAD970(v26, v41, v11, (char *)__s1);
                          sub_1C3F7E2CC(v16, v15);
                          break;
                        case 2uLL:
                          unint64_t v35 = v11;
                          uint64_t v27 = *(void *)(v16 + 16);
                          uint64_t v36 = *(void *)(v16 + 24);
                          sub_1C3FE3ADC(0);
                          sub_1C3F7E324(v16, v15);
                          swift_retain();
                          swift_retain();
                          uint64_t v28 = sub_1C4496298();
                          if (!v28) {
                            goto LABEL_35;
                          }
                          uint64_t v29 = sub_1C44962C8();
                          if (__OFSUB__(v27, v29)) {
                            goto LABEL_54;
                          }
                          v28 += v27 - v29;
LABEL_35:
                          if (__OFSUB__(v36, v27)) {
                            goto LABEL_53;
                          }
                          sub_1C44962B8();
                          uint64_t v30 = v28;
                          uint64_t v10 = v41;
                          unint64_t v11 = v35;
                          sub_1C3FAD970(v30, v41, v35, (char *)__s1);
                          swift_release();
                          swift_release();
                          break;
                        case 3uLL:
                          memset(__s1, 0, 14);
                          sub_1C3FE3ADC(0);
                          sub_1C3F7E324(v16, v15);
                          goto LABEL_40;
                        default:
                          __s1[0] = *(v5 - 1);
                          LOWORD(__s1[1]) = v15;
                          BYTE2(__s1[1]) = BYTE2(v15);
                          BYTE3(__s1[1]) = BYTE3(v15);
                          BYTE4(__s1[1]) = BYTE4(v15);
                          BYTE5(__s1[1]) = BYTE5(v15);
                          sub_1C3FE3ADC(0);
                          sub_1C3F7E324(v16, v15);
LABEL_40:
                          sub_1C3FAD970((uint64_t)__s1, v10, v11, &v47);
                          sub_1C3F870F4(0);
                          sub_1C3F7E2CC(v16, v15);
                          if (v47) {
                            goto LABEL_41;
                          }
                          goto LABEL_10;
                      }
                      sub_1C3F870F4(0);
                      sub_1C3F7E2CC(v16, v15);
                      uint64_t v7 = v40;
                      if (__s1[0]) {
                        goto LABEL_41;
                      }
                    }
                    goto LABEL_10;
                }
              }
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              __break(1u);
              return result;
            case 2uLL:
              uint64_t v19 = *(void *)(v16 + 16);
              uint64_t v18 = *(void *)(v16 + 24);
              BOOL v20 = __OFSUB__(v18, v19);
              uint64_t v17 = v18 - v19;
              if (!v20) {
                goto LABEL_17;
              }
              goto LABEL_49;
            case 3uLL:
              goto LABEL_17;
            default:
              uint64_t v17 = BYTE6(v15);
              goto LABEL_17;
          }
        }
        __s1[0] = 0;
        sub_1C3FE3ADC(v14);
        sub_1C3F7E324(v16, v15);
        sub_1C41136F0(v13, __s1, v46);
        sub_1C41136F0(v14, __s1, v7);
        sub_1C3F870F4(v14);
        sub_1C3F7E2CC(v16, v15);
        if ((__s1[0] & 2) == 0) {
          break;
        }
LABEL_10:
        v5 += 4;
        if (!--v8)
        {
          swift_bridgeObjectRelease_n();
          sub_1C3F870F4(v7);
          sub_1C3F7E2CC(v10, v11);
          goto LABEL_44;
        }
      }
LABEL_41:
      a1 = v39;
      swift_bridgeObjectRelease_n();
      sub_1C3F870F4(v7);
      sub_1C3F7E2CC(v10, v11);
      uint64_t v4 = v38;
      unint64_t v5 = v33;
      uint64_t v3 = v34;
      if (v38 != v37) {
        continue;
      }
      uint64_t v31 = 0;
    }
    else
    {
LABEL_44:
      uint64_t v31 = 1;
    }
    break;
  }
  swift_bridgeObjectRelease_n();
  return v31;
}

uint64_t sub_1C4160FBC()
{
  uint64_t v1 = type metadata accessor for Proto_CustomCRDT(0);
  uint64_t v2 = MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (uint64_t *)((char *)&v11 - v5);
  uint64_t result = sub_1C3F62C10();
  if (!v0)
  {
    uint64_t v8 = result;
    swift_retain();
    sub_1C4496888();
    swift_retain();
    uint64_t v9 = swift_bridgeObjectRetain();
    uint64_t v10 = sub_1C4161CFC(v9, v8);
    swift_bridgeObjectRelease();
    swift_release();
    *uint64_t v6 = v10;
    sub_1C41622EC((uint64_t)v6, (uint64_t)v4);
    swift_beginAccess();
    sub_1C43EF638((uint64_t)v4);
    swift_release();
    return sub_1C41628AC((uint64_t)v6, type metadata accessor for Proto_CustomCRDT);
  }
  return result;
}

void sub_1C4161134(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1C4161140(uint64_t *a1)
{
  return sub_1C4160A18(*a1, *v1);
}

uint64_t sub_1C4161150@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  if (!a1) {
    sub_1C3FE49A0(MEMORY[0x1E4FBC860]);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1C41611B8()
{
  uint64_t v1 = v0;
  uint64_t v7 = *v0;
  swift_bridgeObjectRetain();
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_1C415FD98(v2);
  uint64_t v3 = sub_1C411ED30(v7);
  swift_bridgeObjectRelease();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_1C4162604(v4, v3);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = v5;
  return result;
}

uint64_t *sub_1C4161258@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t result = sub_1C41618CC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1C4161284()
{
  return sub_1C4160FBC();
}

_UNKNOWN **sub_1C41612A0()
{
  return &off_1F1F98128;
}

uint64_t sub_1C41612AC()
{
  uint64_t v1 = v0;
  uint64_t v7 = *v0;
  swift_bridgeObjectRetain();
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_1C415FD98(v2);
  uint64_t v3 = sub_1C411ED30(v7);
  swift_bridgeObjectRelease();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_1C4162604(v4, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *uint64_t v1 = v5;
  return 1;
}

uint64_t sub_1C4161350(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v5 = a1[3];
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  if (!*a1)
  {
    if (!v7) {
      goto LABEL_7;
    }
    goto LABEL_11;
  }
  uint64_t v10 = *a1;
  if (!v7)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_11:
    sub_1C3FE3ADC(v7);
    sub_1C3F870F4(v3);
    uint64_t v13 = v7;
LABEL_13:
    sub_1C3F870F4(v13);
    return 0;
  }
  sub_1C3FE3ADC(v10);
  sub_1C3FE3ADC(v3);
  sub_1C3FE3ADC(v7);
  if ((sub_1C4113F94(v2, v6) & 1) == 0)
  {
    sub_1C3F870F4(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = v3;
    goto LABEL_13;
  }
  char v11 = sub_1C4113F94(v3, v7);
  sub_1C3F870F4(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C3F870F4(v3);
  if ((v11 & 1) == 0) {
    return 0;
  }
LABEL_7:
  return sub_1C3FAD630(v4, v5, v8, v9);
}

void *sub_1C41614B4(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a2;
  uint64_t v4 = type metadata accessor for Proto_Version(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v36 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v43 = (uint64_t)&v35 - v11;
  int64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    unint64_t v35 = v7;
    uint64_t v42 = v2;
    uint64_t v46 = (void *)MEMORY[0x1E4FBC860];
    sub_1C40124AC(0, v12, 0);
    uint64_t v41 = type metadata accessor for Proto_CustomCRDT.Sibling(0);
    uint64_t v13 = a1
        + ((*(unsigned __int8 *)(*(void *)(v41 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v41 - 8) + 80));
    uint64_t v39 = *(void *)(*(void *)(v41 - 8) + 72);
    uint64_t v40 = v4;
    uint64_t v14 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    unint64_t v15 = 0x1EA39A000uLL;
    uint64_t v38 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    while (1)
    {
      int64_t v44 = v12;
      uint64_t v16 = *(int *)(v41 + 20);
      uint64_t v17 = *(void *)(v13 + v16) + *(void *)(v15 + 3736);
      swift_beginAccess();
      uint64_t v18 = v43;
      sub_1C3F970C4(v17, v43, &qword_1EBBC0578);
      uint64_t v19 = *v14;
      LODWORD(v17) = (*v14)(v18, 1, v4);
      sub_1C3F962E0(v18, &qword_1EBBC0578);
      if (v17 == 1)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v22 = *(void *)(v13 + v16) + *(void *)(v15 + 3736);
        swift_beginAccess();
        uint64_t v23 = v36;
        sub_1C3F970C4(v22, v36, &qword_1EBBC0578);
        if (v19(v23, 1, v4) == 1)
        {
          uint64_t v24 = v35;
          uint64_t v25 = MEMORY[0x1E4FBC860];
          *unint64_t v35 = MEMORY[0x1E4FBC860];
          v24[1] = v25;
          sub_1C4496888();
          sub_1C3F962E0(v23, &qword_1EBBC0578);
        }
        else
        {
          uint64_t v24 = v35;
          sub_1C416290C(v23, (uint64_t)v35, type metadata accessor for Proto_Version);
        }
        uint64_t v26 = v42;
        uint64_t v27 = *(void *)(v37 + 16);
        swift_retain();
        sub_1C3F8F9D0(v24, v27, &v45);
        if (v26)
        {
          swift_release();
          return v24;
        }
        uint64_t v42 = 0;
        uint64_t v21 = *((void *)&v45 + 1);
        uint64_t v20 = v45;
      }
      uint64_t v28 = (uint64_t *)(*(void *)(v13 + v16)
                      + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__data);
      swift_beginAccess();
      uint64_t v30 = *v28;
      unint64_t v29 = v28[1];
      uint64_t v24 = v46;
      sub_1C3F7E324(v30, v29);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1C40124AC(0, v24[2] + 1, 1);
        uint64_t v24 = v46;
      }
      unint64_t v32 = v24[2];
      unint64_t v31 = v24[3];
      if (v32 >= v31 >> 1)
      {
        sub_1C40124AC(v31 > 1, v32 + 1, 1);
        uint64_t v24 = v46;
      }
      long long v24[2] = v32 + 1;
      int64_t v33 = &v24[4 * v32];
      v33[4] = v20;
      v33[5] = v21;
      v33[6] = v30;
      v33[7] = v29;
      uint64_t v4 = v40;
      v13 += v39;
      int64_t v12 = v44 - 1;
      uint64_t v14 = v38;
      unint64_t v15 = 0x1EA39A000;
      if (v44 == 1) {
        return v24;
      }
    }
  }
  return (void *)MEMORY[0x1E4FBC860];
}

uint64_t *sub_1C41618CC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Proto_CustomCRDT(0);
  MEMORY[0x1F4188790](v21);
  uint64_t v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for Proto_CRDT(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1C3F970C4(v14, (uint64_t)v13, &qword_1EBBC04F8);
  LODWORD(v14) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7);
  sub_1C3F962E0((uint64_t)v13, &qword_1EBBC04F8);
  if (v14 != 1)
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = a1;
    *(void *)(inited + 24) = 0;
    *(unsigned char *)(inited + 32) = 1;
    swift_retain();
    sub_1C3FBA924((uint64_t)v10);
    uint64_t v17 = *(void *)&v10[*(int *)(v7 + 20)]
        + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1C3F970C4(v17, (uint64_t)v4, &qword_1EBBC0648);
    uint64_t v18 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v4, 1, v18) == 1)
    {
      sub_1C3F962E0((uint64_t)v4, &qword_1EBBC0648);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 9)
      {
        sub_1C416290C((uint64_t)v4, (uint64_t)v6, type metadata accessor for Proto_CustomCRDT);
LABEL_9:
        sub_1C41628AC((uint64_t)v10, type metadata accessor for Proto_CRDT);
        uint64_t v19 = *v6;
        swift_bridgeObjectRetain();
        sub_1C41628AC((uint64_t)v6, type metadata accessor for Proto_CustomCRDT);
        swift_retain();
        uint64_t v6 = sub_1C41614B4(v19, inited);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_setDeallocating();
        swift_release();
        return v6;
      }
      sub_1C41628AC((uint64_t)v4, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    }
    *uint64_t v6 = MEMORY[0x1E4FBC860];
    sub_1C4496888();
    goto LABEL_9;
  }
  sub_1C3FE3FF0();
  swift_allocError();
  *(void *)uint64_t v15 = 0xD000000000000014;
  *(void *)(v15 + 8) = 0x80000001C44B0EE0;
  *(unsigned char *)(v15 + 16) = 0;
  swift_willThrow();
  swift_release();
  return v6;
}

uint64_t sub_1C4161CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = a2;
  uint64_t v56 = type metadata accessor for Proto_Version(0);
  uint64_t v4 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  uint64_t v6 = (uint64_t *)((char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v48 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v55 = (uint64_t)&v46 - v10;
  uint64_t v53 = type metadata accessor for Proto_CustomCRDT.Sibling(0);
  uint64_t v52 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = MEMORY[0x1E4FBC860];
  if (v13)
  {
    uint64_t v46 = v2;
    uint64_t v62 = MEMORY[0x1E4FBC860];
    sub_1C4012434(0, v13, 0);
    uint64_t v54 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    uint64_t v15 = (unint64_t *)(a1 + 56);
    uint64_t v14 = v62;
    char v47 = v6;
    do
    {
      uint64_t v57 = v14;
      int64_t v58 = v13;
      uint64_t v16 = *(v15 - 3);
      uint64_t v17 = *(v15 - 1);
      unint64_t v18 = *v15;
      uint64_t v59 = *(v15 - 2);
      sub_1C3FE3ADC(v16);
      sub_1C3F7E324(v17, v18);
      sub_1C4496888();
      uint64_t v19 = *(int *)(v53 + 20);
      if (qword_1EA39AE88 != -1) {
        swift_once();
      }
      *(void *)&v12[v19] = qword_1EA39AE78;
      swift_retain();
      sub_1C3F7E324(v17, v18);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v20 = *(void *)&v12[v19];
        type metadata accessor for Proto_CustomCRDT.Sibling._StorageClass(0);
        uint64_t v21 = swift_allocObject();
        uint64_t v51 = v17;
        uint64_t v22 = v21
            + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
        (*v54)(v21+ OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version, 1, 1, v56);
        unint64_t v50 = v18;
        uint64_t v23 = (uint64_t *)(v21
                        + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__data);
        swift_retain();
        *uint64_t v23 = sub_1C4496868();
        v23[1] = v24;
        uint64_t v25 = v20
            + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
        swift_beginAccess();
        uint64_t v26 = v25;
        uint64_t v27 = v55;
        sub_1C3F970C4(v26, v55, &qword_1EBBC0578);
        swift_beginAccess();
        sub_1C4162350(v27, v22);
        swift_endAccess();
        uint64_t v28 = (uint64_t *)(v20
                        + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__data);
        swift_beginAccess();
        uint64_t v30 = *v28;
        unint64_t v29 = v28[1];
        sub_1C3F7E324(v30, v29);
        uint64_t v6 = v47;
        swift_release();
        swift_beginAccess();
        uint64_t v31 = *v23;
        unint64_t v32 = v23[1];
        *uint64_t v23 = v30;
        v23[1] = v29;
        unint64_t v18 = v50;
        uint64_t v17 = v51;
        sub_1C3F7E2CC(v31, v32);
        *(void *)&v12[v19] = v21;
        swift_release();
      }
      int64_t v33 = (uint64_t *)(*(void *)&v12[v19]
                      + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__data);
      swift_beginAccess();
      uint64_t v34 = *v33;
      unint64_t v35 = v33[1];
      *int64_t v33 = v17;
      v33[1] = v18;
      sub_1C3F7E2CC(v34, v35);
      if (v16)
      {
        unint64_t v36 = v18;
        uint64_t v37 = v17;
        uint64_t v60 = v16;
        uint64_t v61 = v59;
        sub_1C3F9FF10(*(void *)(v49 + 16), v6);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_CustomCRDT.Sibling._StorageClass(0);
          swift_allocObject();
          uint64_t v38 = swift_retain();
          *(void *)&v12[v19] = sub_1C4401FE4(v38);
          swift_release();
        }
        uint64_t v39 = *(void *)&v12[v19];
        uint64_t v40 = v55;
        sub_1C416290C((uint64_t)v6, v55, type metadata accessor for Proto_Version);
        (*v54)(v40, 0, 1, v56);
        uint64_t v41 = v48;
        sub_1C41623B8(v40, v48);
        uint64_t v42 = v39
            + OBJC_IVAR____TtCVV9Coherence16Proto_CustomCRDT7SiblingP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
        swift_beginAccess();
        swift_retain();
        sub_1C4162350(v41, v42);
        swift_endAccess();
        swift_release();
        uint64_t v17 = v37;
        unint64_t v18 = v36;
      }
      sub_1C3F870F4(v16);
      sub_1C3F7E2CC(v17, v18);
      uint64_t v14 = v57;
      uint64_t v62 = v57;
      unint64_t v44 = *(void *)(v57 + 16);
      unint64_t v43 = *(void *)(v57 + 24);
      if (v44 >= v43 >> 1)
      {
        sub_1C4012434(v43 > 1, v44 + 1, 1);
        uint64_t v14 = v62;
      }
      v15 += 4;
      *(void *)(v14 + 16) = v44 + 1;
      sub_1C416290C((uint64_t)v12, v14+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(void *)(v52 + 72) * v44, type metadata accessor for Proto_CustomCRDT.Sibling);
      int64_t v13 = v58 - 1;
    }
    while (v58 != 1);
  }
  return v14;
}

uint64_t sub_1C41622EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_CustomCRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C4162350(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C41623B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C4162420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_22;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v8) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          goto LABEL_25;
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v8) {
            goto LABEL_25;
          }
          unint64_t v14 = *(void *)(v4 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_22:
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 32 * v12);
    uint64_t v17 = *v16;
    if (*v16)
    {
      uint64_t v19 = v16[2];
      unint64_t v18 = v16[3];
      uint64_t v20 = v16[1];
      uint64_t v24 = 0;
      sub_1C3FE3ADC(v17);
      sub_1C3F7E324(v19, v18);
      sub_1C41136F0(v20, &v24, a3);
      sub_1C41136F0(v17, &v24, a2);
      sub_1C3F870F4(v17);
      uint64_t result = sub_1C3F7E2CC(v19, v18);
      if (v24 == 1)
      {
        uint64_t v21 = 1;
LABEL_26:
        swift_release();
        return v21;
      }
    }
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v8)
  {
LABEL_25:
    uint64_t v21 = 0;
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1C4162604(uint64_t a1, uint64_t a2)
{
  int64_t v2 = 0;
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t result = a1 + 56;
  uint64_t v4 = v5;
  uint64_t v25 = result;
  uint64_t v6 = 1 << *(unsigned char *)(result - 24);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v4;
  int64_t v26 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if ((v7 & v4) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v10 | (v2 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v2 << 6))
  {
    int64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 32 * i);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v19 = v15[2];
    unint64_t v18 = v15[3];
    if (*v15)
    {
      sub_1C3FE3ADC(*v15);
      sub_1C3F7E324(v19, v18);
      sub_1C3FE3ADC(v16);
      char v20 = sub_1C4162420(a2, v16, v17);
      sub_1C3F870F4(v16);
      if (v20)
      {
        sub_1C3F870F4(v16);
        uint64_t result = sub_1C3F7E2CC(v19, v18);
        if (v8) {
          goto LABEL_4;
        }
        goto LABEL_5;
      }
    }
    else
    {
      sub_1C3FE3ADC(0);
      sub_1C3F7E324(v19, v18);
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      uint64_t result = sub_1C40124AC(0, *(void *)(v9 + 16) + 1, 1);
    }
    unint64_t v22 = *(void *)(v9 + 16);
    unint64_t v21 = *(void *)(v9 + 24);
    unint64_t v23 = v22 + 1;
    if (v22 >= v21 >> 1)
    {
      uint64_t result = sub_1C40124AC(v21 > 1, v22 + 1, 1);
      unint64_t v23 = v22 + 1;
    }
    *(void *)(v9 + 16) = v23;
    uint64_t v24 = (void *)(v9 + 32 * v22);
    v24[4] = v16;
    void v24[5] = v17;
    v24[6] = v19;
    v24[7] = v18;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v2++, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v2 >= v26) {
      goto LABEL_33;
    }
    unint64_t v13 = *(void *)(v25 + 8 * v2);
    if (!v13) {
      break;
    }
LABEL_17:
    unint64_t v8 = (v13 - 1) & v13;
  }
  int64_t v14 = v2 + 1;
  if (v2 + 1 >= v26) {
    goto LABEL_33;
  }
  unint64_t v13 = *(void *)(v25 + 8 * v14);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v2 + 2;
  if (v2 + 2 >= v26) {
    goto LABEL_33;
  }
  unint64_t v13 = *(void *)(v25 + 8 * v14);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v2 + 3;
  if (v2 + 3 >= v26) {
    goto LABEL_33;
  }
  unint64_t v13 = *(void *)(v25 + 8 * v14);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v2 + 4;
  if (v2 + 4 >= v26)
  {
LABEL_33:
    swift_release();
    return v9;
  }
  unint64_t v13 = *(void *)(v25 + 8 * v14);
  if (v13)
  {
LABEL_16:
    int64_t v2 = v14;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v2 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v2 >= v26) {
      goto LABEL_33;
    }
    unint64_t v13 = *(void *)(v25 + 8 * v2);
    ++v14;
    if (v13) {
      goto LABEL_17;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1C41628AC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C416290C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for CRUnknownCRDT.MergeableDelta()
{
  return &type metadata for CRUnknownCRDT.MergeableDelta;
}

uint64_t destroy for CRUnknownCRDT.Sibling(void *a1)
{
  if (*a1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  return sub_1C3F7E2CC(v2, v3);
}

void *initializeWithCopy for CRUnknownCRDT.Sibling(void *a1, void *a2)
{
  if (*a2)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v6 = a2[2];
  unint64_t v5 = a2[3];
  sub_1C3F7E324(v6, v5);
  a1[2] = v6;
  a1[3] = v5;
  return a1;
}

uint64_t *assignWithCopy for CRUnknownCRDT.Sibling(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  if (!v4)
  {
    if (v5)
    {
      *a1 = v5;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v5)
  {
    sub_1C4162AF0((uint64_t)a1);
    goto LABEL_7;
  }
  *a1 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  sub_1C3F7E324(v7, v6);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  sub_1C3F7E2CC(v8, v9);
  return a1;
}

uint64_t sub_1C4162AF0(uint64_t a1)
{
  return a1;
}

void *assignWithTake for CRUnknownCRDT.Sibling(void *a1, uint64_t a2)
{
  if (!*a1) {
    goto LABEL_5;
  }
  if (!*(void *)a2)
  {
    sub_1C4162AF0((uint64_t)a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  a1[1] = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v4 = a1[2];
  unint64_t v5 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_1C3F7E2CC(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRUnknownCRDT.Sibling(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CRUnknownCRDT.Sibling(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRUnknownCRDT.Sibling()
{
  return &type metadata for CRUnknownCRDT.Sibling;
}

unint64_t sub_1C4162C7C()
{
  unint64_t result = qword_1EA39DDE8[0];
  if (!qword_1EA39DDE8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA39DDE8);
  }
  return result;
}

BOOL Optional.isDefaultState.getter(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 48))(v1, 1) == 1;
}

uint64_t Optional.init(defaultState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t sub_1C4162D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Optional.init(defaultState:)(*(void *)(a1 + 16), a2);
}

BOOL Int.isDefaultState.getter(uint64_t a1)
{
  return a1 == 0;
}

uint64_t Int.init(defaultState:)()
{
  return 0;
}

BOOL sub_1C4162D78()
{
  return *v0 == 0;
}

BOOL Float.isDefaultState.getter(float a1)
{
  return a1 == 0.0;
}

double Float.init(defaultState:)()
{
  return 0.0;
}

BOOL sub_1C4162D9C()
{
  return *v0 == 0.0;
}

void sub_1C4162DAC(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL Double.isDefaultState.getter(double a1)
{
  return a1 == 0.0;
}

double Double.init(defaultState:)()
{
  return 0.0;
}

BOOL sub_1C4162DC8()
{
  return *v0 == 0.0;
}

BOOL Bool.isDefaultState.getter(char a1)
{
  return (a1 & 1) == 0;
}

uint64_t Bool.init(defaultState:)()
{
  return 0;
}

BOOL sub_1C4162DEC()
{
  return (*v0 & 1) == 0;
}

BOOL String.isDefaultState.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  return v2 == 0;
}

uint64_t String.init(defaultState:)()
{
  return 0;
}

BOOL sub_1C4162E24()
{
  unint64_t v1 = v0[1];
  uint64_t v2 = *v0 & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(v1) & 0xF;
  }
  return v2 == 0;
}

void sub_1C4162E44(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
}

BOOL Data.isDefaultState.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v3 = (int)a1;
      uint64_t v2 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v2 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      return v3 == v2;
    default:
      uint64_t v3 = 0;
      uint64_t v2 = BYTE6(a2);
      break;
  }
  return v3 == v2;
}

uint64_t Data.init(defaultState:)()
{
  return 0;
}

BOOL sub_1C4162EC0()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = (int)v1;
      uint64_t v3 = v1 >> 32;
      break;
    case 2uLL:
      uint64_t v4 = *(void *)(v1 + 16);
      uint64_t v3 = *(void *)(v1 + 24);
      break;
    case 3uLL:
      return v4 == v3;
    default:
      uint64_t v4 = 0;
      uint64_t v3 = BYTE6(v2);
      break;
  }
  return v4 == v3;
}

double sub_1C4162F28@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_1C44A2CF0;
  return result;
}

uint64_t Array.isDefaultState.getter()
{
  return sub_1C4497878() & 1;
}

uint64_t Array.init(defaultState:)()
{
  return sub_1C4497478();
}

uint64_t sub_1C4162FA8()
{
  return Array.isDefaultState.getter();
}

uint64_t sub_1C4162FB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Array.init(defaultState:)();
  *a1 = result;
  return result;
}

uint64_t Set.init(defaultState:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C4497478();
  if (MEMORY[0x1C8780170](v4, a1)) {
    uint64_t v5 = sub_1C4163618(v4, a1, a2);
  }
  else {
    uint64_t v5 = MEMORY[0x1E4FBC870];
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1C416305C(uint64_t a1)
{
  return Set.isDefaultState.getter(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_1C416306C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Set.init(defaultState:)(*(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t Dictionary.init(defaultState:)()
{
  swift_getTupleTypeMetadata2();
  sub_1C4497478();
  return sub_1C4496F28();
}

void sub_1C4163110(void *a1)
{
  Dictionary.isDefaultState.getter(*v1, a1[2], a1[3], a1[4]);
}

uint64_t sub_1C4163124@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Dictionary.init(defaultState:)();
  *a1 = result;
  return result;
}

uint64_t RawRepresentable<>.isDefaultState.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1C4497398();
  LOBYTE(a3) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(AssociatedTypeWitness, a3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  return a3 & 1;
}

uint64_t RawRepresentable<>.init(defaultState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = sub_1C4497B38();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(AssociatedTypeWitness, a2);
  sub_1C44973A8();
  uint64_t v10 = *(void *)(a1 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, a1);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v9, a1);
  }
  __break(1u);
  return result;
}

uint64_t CRExtensible<>.isDefaultState.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v9 - v6;
  CRExtensible.rawValue.getter(a1, (uint64_t)&v9 - v6);
  LOBYTE(a2) = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(AssociatedTypeWitness, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  return a2 & 1;
}

uint64_t CRExtensible<>.init(defaultState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int64_t v14 = (char *)&v16 - v13;
  (*(void (**)(void))(a3 + 16))();
  return CRExtensible.init(rawValue:)((uint64_t)v14, a1, a2, a4, a5, a6);
}

uint64_t sub_1C41635FC(uint64_t a1, uint64_t a2)
{
  return CRExtensible<>.isDefaultState.getter(a1, *(void *)(a2 - 8));
}

uint64_t sub_1C4163604@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return CRExtensible<>.init(defaultState:)(a1[2], a1[3], *(void *)(a2 - 8), a1[4], a1[5], a3);
}

uint64_t sub_1C4163618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v51 = (char *)&v39 - v11;
  uint64_t v40 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  int64_t v15 = (char *)&v39 - v14;
  if (MEMORY[0x1C8780110](v13))
  {
    sub_1C4497D18();
    uint64_t v16 = sub_1C4497D08();
  }
  else
  {
    uint64_t v16 = MEMORY[0x1E4FBC870];
  }
  uint64_t v44 = MEMORY[0x1C8780170](v5, a2);
  if (!v44) {
    return v16;
  }
  uint64_t v17 = 0;
  uint64_t v49 = (void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
  uint64_t v50 = v16 + 56;
  uint64_t v46 = v6 + 32;
  uint64_t v48 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v41 = v6;
  uint64_t v42 = v5;
  unint64_t v43 = v15;
  while (1)
  {
    char v18 = sub_1C44974A8();
    sub_1C4497438();
    if (v18)
    {
      uint64_t v19 = *(void (**)(char *, uint64_t *, uint64_t))(v6 + 16);
      v19(v15, (uint64_t *)(v5+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v17), a2);
      BOOL v20 = __OFADD__(v17, 1);
      uint64_t v21 = v17 + 1;
      if (v20) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t result = sub_1C4497DA8();
      if (v40 != 8) {
        goto LABEL_23;
      }
      uint64_t v52 = result;
      uint64_t v19 = *v49;
      (*v49)(v15, &v52, a2);
      swift_unknownObjectRelease();
      BOOL v20 = __OFADD__(v17, 1);
      uint64_t v21 = v17 + 1;
      if (v20)
      {
LABEL_20:
        __break(1u);
        return v16;
      }
    }
    uint64_t v47 = v21;
    long long v45 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v45(v51, v15, a2);
    uint64_t v22 = sub_1C4497078();
    uint64_t v23 = v16;
    uint64_t v24 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v25 = v22 & ~v24;
    unint64_t v26 = v25 >> 6;
    uint64_t v27 = *(void *)(v50 + 8 * (v25 >> 6));
    uint64_t v28 = 1 << v25;
    uint64_t v29 = *(void *)(v6 + 72);
    if (((1 << v25) & v27) != 0)
    {
      uint64_t v30 = ~v24;
      do
      {
        v19(v9, (uint64_t *)(*(void *)(v23 + 48) + v29 * v25), a2);
        uint64_t v31 = a3;
        char v32 = sub_1C4497178();
        int64_t v33 = *v48;
        (*v48)(v9, a2);
        if (v32)
        {
          v33(v51, a2);
          a3 = v31;
          uint64_t v6 = v41;
          uint64_t v5 = v42;
          uint64_t v16 = v23;
          goto LABEL_7;
        }
        unint64_t v25 = (v25 + 1) & v30;
        unint64_t v26 = v25 >> 6;
        uint64_t v27 = *(void *)(v50 + 8 * (v25 >> 6));
        uint64_t v28 = 1 << v25;
        a3 = v31;
      }
      while ((v27 & (1 << v25)) != 0);
      uint64_t v6 = v41;
      uint64_t v5 = v42;
    }
    uint64_t v34 = v51;
    *(void *)(v50 + 8 * v26) = v28 | v27;
    unint64_t v35 = *(void *)(v23 + 48) + v29 * v25;
    uint64_t v16 = v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v45)(v35, v34, a2);
    uint64_t v37 = *(void *)(v23 + 16);
    BOOL v20 = __OFADD__(v37, 1);
    uint64_t v38 = v37 + 1;
    if (v20) {
      break;
    }
    *(void *)(v23 + 16) = v38;
LABEL_7:
    int64_t v15 = v43;
    uint64_t v17 = v47;
    if (v47 == v44) {
      return v16;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of CRDefaultStateRepresentable.isDefaultState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CRDefaultStateRepresentable.init(defaultState:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t CRExtensible.rawValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a2, v9, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    sub_1C4497398();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
}

uint64_t static CRExtensible.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v20 - v15;
  v20[0] = a3;
  v20[1] = a4;
  v20[2] = a5;
  v20[3] = a6;
  uint64_t v17 = type metadata accessor for CRExtensible();
  CRExtensible.rawValue.getter(v17, (uint64_t)v16);
  CRExtensible.rawValue.getter(v17, (uint64_t)v14);
  LOBYTE(a5) = sub_1C4497178();
  char v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v14, AssociatedTypeWitness);
  v18(v16, AssociatedTypeWitness);
  return a5 & 1;
}

uint64_t type metadata accessor for CRExtensible()
{
  return swift_getGenericMetadata();
}

uint64_t CRExtensible.init(rawValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v22 - v11;
  uint64_t v13 = sub_1C4497B38();
  uint64_t v23 = *(void *)(v13 - 8);
  uint64_t v24 = v13;
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v17 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, AssociatedTypeWitness);
  sub_1C44973A8();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v24);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v27, a1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, AssociatedTypeWitness);
    BOOL v20 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v20(v19, v16, a2);
    v20(v27, v19, a2);
  }
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v30 = v25;
  uint64_t v31 = v26;
  type metadata accessor for CRExtensible();
  return swift_storeEnumTagMultiPayload();
}

uint64_t CRValue<>.init(from:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v31 = a4;
  uint64_t v7 = sub_1C4497B38();
  uint64_t v32 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v34 = (char *)&v30 - v8;
  uint64_t v33 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v35 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 8);
  uint64_t v16 = swift_retain();
  uint64_t v17 = v14;
  uint64_t v18 = v38;
  uint64_t v38 = AssociatedTypeWitness;
  v15(v16, AssociatedTypeWitness, a3);
  if (v18) {
    return swift_release();
  }
  uint64_t v20 = v32;
  uint64_t v21 = v35;
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
  uint64_t v30 = v17;
  v22(v12, v17, v38);
  uint64_t v23 = v34;
  sub_1C44973A8();
  uint64_t v24 = *(void *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v23, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v7);
    uint64_t v36 = 0;
    unint64_t v37 = 0xE000000000000000;
    sub_1C4497D28();
    sub_1C4497268();
    sub_1C44986E8();
    sub_1C4497268();
    swift_bridgeObjectRelease();
    sub_1C4497268();
    uint64_t v25 = v30;
    uint64_t v26 = v38;
    sub_1C44982A8();
    sub_1C4497268();
    uint64_t v27 = v36;
    unint64_t v28 = v37;
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v29 = v27;
    *(void *)(v29 + 8) = v28;
    *(unsigned char *)(v29 + 16) = 0;
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v25, v26);
  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v30, v38);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v31, v23, a1);
  }
}

uint64_t CRValue<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v12 - v9;
  sub_1C4497398();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 16))(a1, AssociatedTypeWitness, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t CRValue<>.minEncodingVersion.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v10 - v7;
  sub_1C4497398();
  (*(void (**)(uint64_t, uint64_t))(a4 + 32))(AssociatedTypeWitness, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
}

uint64_t CRExtensible.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1C4164720@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  CRExtensible.init(rawValue:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
  uint64_t v5 = *(uint64_t (**)(char *, void, uint64_t, uint64_t *))(*(a2 - 1) + 56);
  return v5(a3, 0, 1, a2);
}

uint64_t CRExtensible.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v8 - v5;
  CRExtensible.rawValue.getter(a2, (uint64_t)&v8 - v5);
  sub_1C4497088();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
}

uint64_t CRExtensible.minEncodingVersion.getter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v7 - v4;
  CRExtensible.rawValue.getter(a1, (uint64_t)&v7 - v4);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 8) + 32))(AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
}

uint64_t sub_1C41649A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static CRExtensible.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t sub_1C41649B8()
{
  swift_getWitnessTable();
  return sub_1C44973B8();
}

uint64_t sub_1C4164A24()
{
  swift_getWitnessTable();
  return sub_1C44973C8();
}

uint64_t sub_1C4164A90@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return CRValue<>.init(from:)(a1, WitnessTable, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 8), a2);
}

uint64_t sub_1C4164B00(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return CRValue<>.encode(to:)(a1, a2, v5, WitnessTable, *(void *)(*(void *)(*(void *)(a2 + 32) + 8) + 8));
}

uint64_t CRExtensible<>.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X6>, char *a6@<X8>)
{
  uint64_t v18 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = &v17[-v13 - 8];
  sub_1C40F7954(a1, (uint64_t)v17);
  sub_1C4497678();
  if (!v6) {
    CRExtensible.init(rawValue:)((uint64_t)v14, a2, a3, a4, v18, a6);
  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t CRExtensible<>.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v8 - v5;
  CRExtensible.rawValue.getter(a2, (uint64_t)&v8 - v5);
  sub_1C4497068();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
}

uint64_t sub_1C4164D9C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1C4164DB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  return CRExtensible<>.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t sub_1C4164DE0(uint64_t a1, uint64_t a2)
{
  return CRExtensible<>.encode(to:)(a1, a2);
}

uint64_t sub_1C4164DFC()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

void *sub_1C4164EE8(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  if (*(void *)(v9 + 64) > v7) {
    unint64_t v7 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  uint64_t v10 = (*(unsigned char *)(v9 + 80) | *(unsigned char *)(v6 + 80));
  if (v10 <= 7 && v7 + 1 <= 0x18 && ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0)
  {
    unsigned int v14 = a2[v7];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v16 = v7;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_20;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_20;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_20;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_20:
          int v18 = (v17 | (v15 << (8 * v7))) + 2;
          unsigned int v14 = v17 + 2;
          if (v7 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v9 + 16))(a1, a2, AssociatedTypeWitness);
      *((unsigned char *)a1 + v7) = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      *((unsigned char *)a1 + v7) = 0;
    }
  }
  else
  {
    uint64_t v13 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1C41650F0(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v7 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (v7 <= v5) {
    unint64_t v7 = v5;
  }
  unsigned int v8 = a1[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a1;
        goto LABEL_12;
      case 2:
        int v11 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v11 = *(_DWORD *)a1;
LABEL_12:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 1) {
    uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  }
  else {
    uint64_t v13 = v4;
  }
  if (v8 == 1) {
    uint64_t v14 = AssociatedTypeWitness;
  }
  else {
    uint64_t v14 = v3;
  }
  unsigned int v15 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v13 + 8);
  return v15(a1, v14);
}

uint64_t sub_1C4165280(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  if (*(void *)(v9 + 64) > v7) {
    unint64_t v7 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  unsigned int v10 = a2[v7];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v12 = v7;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_12;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_12;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_12;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_12:
        int v14 = (v13 | (v11 << (8 * v7))) + 2;
        unsigned int v10 = v13 + 2;
        if (v7 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  BOOL v15 = v10 == 1;
  if (v10 == 1)
  {
    uint64_t v16 = AssociatedTypeWitness;
  }
  else
  {
    uint64_t v9 = v6;
    uint64_t v16 = v5;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v9 + 16))(a1, a2, v16);
  *(unsigned char *)(a1 + v7) = v15;
  return a1;
}

unsigned __int8 *sub_1C4165420(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v9 = AssociatedTypeWitness;
    uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
    if (*(void *)(v10 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    unsigned int v11 = a1[v7];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v13 = v7;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_13;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_13;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_13;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_13:
          int v15 = (v14 | (v12 << (8 * v7))) + 2;
          unsigned int v11 = v14 + 2;
          if (v7 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
    }
    else {
      uint64_t v16 = v6;
    }
    if (v11 == 1) {
      uint64_t v17 = AssociatedTypeWitness;
    }
    else {
      uint64_t v17 = v5;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v7];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v20 = v7;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_30;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_30;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_30;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_30:
          int v22 = (v21 | (v19 << (8 * v7))) + 2;
          unsigned int v18 = v21 + 2;
          if (v7 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    BOOL v23 = v18 == 1;
    if (v18 == 1) {
      uint64_t v24 = v10;
    }
    else {
      uint64_t v24 = v6;
    }
    if (v18 == 1) {
      uint64_t v25 = v9;
    }
    else {
      uint64_t v25 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 16))(a1, a2, v25);
    a1[v7] = v23;
  }
  return a1;
}

uint64_t sub_1C4165680(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  if (*(void *)(v9 + 64) > v7) {
    unint64_t v7 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  unsigned int v10 = a2[v7];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v12 = v7;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_12;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_12;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_12;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_12:
        int v14 = (v13 | (v11 << (8 * v7))) + 2;
        unsigned int v10 = v13 + 2;
        if (v7 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  BOOL v15 = v10 == 1;
  if (v10 == 1)
  {
    uint64_t v16 = AssociatedTypeWitness;
  }
  else
  {
    uint64_t v9 = v6;
    uint64_t v16 = v5;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v9 + 32))(a1, a2, v16);
  *(unsigned char *)(a1 + v7) = v15;
  return a1;
}

unsigned __int8 *sub_1C4165820(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v9 = AssociatedTypeWitness;
    uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
    if (*(void *)(v10 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    unsigned int v11 = a1[v7];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v13 = v7;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_13;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_13;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_13;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_13:
          int v15 = (v14 | (v12 << (8 * v7))) + 2;
          unsigned int v11 = v14 + 2;
          if (v7 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
    }
    else {
      uint64_t v16 = v6;
    }
    if (v11 == 1) {
      uint64_t v17 = AssociatedTypeWitness;
    }
    else {
      uint64_t v17 = v5;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v7];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v20 = v7;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_30;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_30;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_30;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_30:
          int v22 = (v21 | (v19 << (8 * v7))) + 2;
          unsigned int v18 = v21 + 2;
          if (v7 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    BOOL v23 = v18 == 1;
    if (v18 == 1) {
      uint64_t v24 = v10;
    }
    else {
      uint64_t v24 = v6;
    }
    if (v18 == 1) {
      uint64_t v25 = v9;
    }
    else {
      uint64_t v25 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 32))(a1, a2, v25);
    a1[v7] = v23;
  }
  return a1;
}

uint64_t sub_1C4165A80(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = v6;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_23;
  }
  unint64_t v8 = v7 + 1;
  char v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    unsigned int v12 = ((a2 + ~(-1 << v9) - 254) >> v9) + 1;
    if (HIWORD(v12))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v12 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v12 < 2)
    {
LABEL_23:
      unsigned int v14 = *((unsigned __int8 *)a1 + v7);
      if (v14 >= 2) {
        return (v14 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_23;
  }
LABEL_15:
  int v13 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v13 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v8 | v13) + 255;
}

void sub_1C4165C0C(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v7 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 <= v7) {
    unint64_t v8 = v7;
  }
  size_t v9 = v8 + 1;
  if (a3 < 0xFF)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v9)) - 254) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v11 = a2 - 255;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v8 != -1)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v8 + 1);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x1C4165E08);
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v8] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1C4165E30(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v4 <= v3) {
    unint64_t v4 = v3;
  }
  uint64_t result = a1[v4];
  if (result >= 2)
  {
    if (v4 <= 3) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | ((result - 2) << (8 * v4))) + 2;
        unsigned int v9 = v7 + 2;
        if (v4 >= 4) {
          uint64_t result = v9;
        }
        else {
          uint64_t result = v8;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1C4165F2C(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (a2 > 1)
  {
    size_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    size_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v8 > v7) {
      size_t v7 = v8;
    }
    unsigned int v9 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v10 = v9 >> (8 * v7);
      int v11 = v9 & ~(-1 << (8 * v7));
      a1[v7] = v10 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
  }
  else
  {
    unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v6 <= *(void *)(v5 + 64)) {
      unint64_t v6 = *(void *)(v5 + 64);
    }
    a1[v6] = a2;
  }
}

uint64_t sub_1C4166090@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1C4497B38();
  uint64_t v5 = swift_getWitnessTable();
  return CRValue<>.init(from:)(a1, WitnessTable, v5, a2);
}

uint64_t sub_1C4166138(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1C4497B38();
  uint64_t v5 = swift_getWitnessTable();
  return CRValue<>.encode(to:)(a1, a2, v6, WitnessTable, v5);
}

uint64_t sub_1C41661D8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_1C4497B38();
  uint64_t v3 = swift_getWitnessTable();
  return CRValue<>.minEncodingVersion.getter(a1, v4, WitnessTable, v3);
}

uint64_t dispatch thunk of EncryptionDelegate.encrypt(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of EncryptionDelegate.decrypt(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of EncryptionDelegate.encrypt(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

void sub_1C41662C4()
{
}

void sub_1C4166320()
{
}

void sub_1C416637C()
{
}

void sub_1C41663D8()
{
}

void sub_1C4166434()
{
}

void sub_1C4166490()
{
}

void sub_1C41664EC()
{
}

uint64_t sub_1C4166548()
{
  return 0x6D6F435243796E41;
}

uint64_t sub_1C416656C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRComparableBox()
{
  return self;
}

uint64_t sub_1C41665A0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C4166634(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  size_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  unsigned int v10 = &v20[-v9];
  MEMORY[0x1F4188790](v8);
  int v12 = &v20[-v11];
  uint64_t v13 = swift_dynamicCastClass();
  if (v13)
  {
    uint64_t v14 = v13 + *(void *)(*(void *)v13 + 208);
    swift_beginAccess();
    int v15 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16);
    v15(v10, v14, v3);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v4 + 32))(v12, v10, v3);
    uint64_t v16 = (uint64_t)v1 + *(void *)(*v1 + 208);
    swift_beginAccess();
    v15(v7, v16, v3);
    char v17 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v2 + 192) + 8))(v12, v3);
    unsigned int v18 = *(void (**)(unsigned char *, uint64_t))(v4 + 8);
    v18(v7, v3);
    v18(v12, v3);
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_1C4166880(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 184) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 208), a1);
  return v2;
}

uint64_t sub_1C4166914@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 208);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v3 + 184);
  a1[3] = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(boxed_opaque_existential_1, v4, v5);
}

uint64_t sub_1C41669C4(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 184);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unsigned int v10 = (char *)&v13 - v9;
  uint64_t v11 = (uint64_t)v1 + *(void *)(v3 + 208);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v11, v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 200) + 8) + 24))(a1, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return sub_1C4166880((uint64_t)v10);
}

uint64_t sub_1C4166B84(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 184);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = (uint64_t)v1 + *(void *)(v3 + 208);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 200) + 8) + 48))(a1, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1C4166CE0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v10 - v5;
  uint64_t v7 = (uint64_t)v1 + *(void *)(v2 + 208);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  char v8 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v2 + 200) + 8) + 56))(v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v8 & 1;
}

uint64_t sub_1C4166E34(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v3 + 200) + 8) + 64))(a1, *(void *)(v3 + 184));
  return swift_endAccess();
}

uint64_t sub_1C4166EE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v7 = v1 + *(void *)(v6 + 208);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  return sub_1C4166880((uint64_t)v5);
}

uint64_t sub_1C4167014(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 184);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = (uint64_t)v1 + *(void *)(v3 + 208);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)(v3 + 200) + 8) + 8) + 16))(a1, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1C4167184()
{
  return sub_1C41671D4(&qword_1EBBBBF40, MEMORY[0x1E4FBBDF8], (uint64_t *)&unk_1EA39D498);
}

uint64_t sub_1C41671AC()
{
  return sub_1C41671D4(&qword_1EA39DE98, MEMORY[0x1E4FBBF30], qword_1EA39DEA0);
}

uint64_t sub_1C41671D4(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t *a3)
{
  uint64_t v7 = *(void *)(*(void *)v3 + 184);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v12 = v3 + *(void *)(v11 + 208);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  if (swift_dynamicCast())
  {
    uint64_t v13 = *((void *)&v19 + 1);
    uint64_t v14 = v20;
    __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v19 + 1));
    uint64_t v15 = a2(v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  }
  else
  {
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    sub_1C3F962E0((uint64_t)&v18, a3);
    return 0x6D6F435243796E41;
  }
  return v15;
}

uint64_t sub_1C4167380()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 184) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 208));
}

uint64_t sub_1C41673D8()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 184) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 208));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRComparableBoxHelperBuiltIn()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for AnyCRBuiltInComparable()
{
  return &type metadata for AnyCRBuiltInComparable;
}

uint64_t sub_1C41674AC(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)v1 + 88))(*a1) & 1;
}

uint64_t sub_1C41674F8()
{
  (*(void (**)(void *__return_ptr))(**(void **)v0 + 80))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DE70);
  swift_dynamicCast();
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  sub_1C4497068();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t sub_1C41675C4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t sub_1C4167608()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t sub_1C416764C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 96))();
  *a1 = result;
  return result;
}

uint64_t sub_1C4167698@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  if (!a1) {
    a1 = sub_1C3FE49A0(MEMORY[0x1E4FBC860]);
  }
  unint64_t v8 = a1;
  uint64_t v5 = *(uint64_t (**)(unint64_t *))(*(void *)v4 + 96);
  swift_bridgeObjectRetain();
  uint64_t v6 = v5(&v8);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t sub_1C4167734()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t sub_1C4167778()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))() & 1;
}

uint64_t sub_1C41677C0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 120))();
  if (result)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      *(void *)uint64_t v1 = (*(uint64_t (**)(void))(**(void **)v1 + 136))();
      swift_release();
    }
    return (*(uint64_t (**)(uint64_t))(**(void **)v1 + 128))(a1);
  }
  return result;
}

uint64_t sub_1C4167884@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1C41678F4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1C41678B0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t sub_1C41678F4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v45 = (uint64_t)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Proto_Value(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v43 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v42 = *(void *)(v44 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v44);
  uint64_t v41 = (uint64_t *)((char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v7);
  uint64_t v40 = (uint64_t)&v40 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v40 - v14;
  uint64_t v16 = a1;
  uint64_t v17 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v17, (uint64_t)v15, &qword_1EBBC0540);
  long long v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v19 = v18(v15, 1, v4);
  sub_1C3F962E0((uint64_t)v15, &qword_1EBBC0540);
  if (v19 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v20 = 0xD000000000000017;
    *(void *)(v20 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v20 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(void *)(swift_initStackObject() + 16) = v16;
    sub_1C3F970C4(v17, (uint64_t)v13, &qword_1EBBC0540);
    if (v18(v13, 1, v4) == 1)
    {
      __break(1u);
LABEL_28:
      sub_1C4497F58();
      __break(1u);
      JUMPOUT(0x1C41681BCLL);
    }
    uint64_t v22 = (uint64_t)v13;
    uint64_t v23 = v43;
    sub_1C3F8AD78(v22, v43, type metadata accessor for Proto_Value);
    uint64_t v24 = *(void *)(v23 + *(int *)(v4 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v25 = v24;
    uint64_t v26 = v45;
    sub_1C3F970C4(v25, v45, &qword_1EBBBF8A0);
    swift_retain();
    sub_1C3F8B228(v23, type metadata accessor for Proto_Value);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v26, 1, v44) == 1)
    {
      sub_1C3F962E0(v26, &qword_1EBBBF8A0);
      sub_1C3FE3FF0();
      swift_allocError();
      *(void *)uint64_t v27 = 0xD00000000000001DLL;
      *(void *)(v27 + 8) = 0x80000001C44B2F00;
      *(unsigned char *)(v27 + 16) = 0;
      swift_willThrow();
      swift_release();
      swift_setDeallocating();
      return swift_release();
    }
    else
    {
      uint64_t v28 = v40;
      sub_1C3F8AD78(v26, v40, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      uint64_t v29 = v41;
      sub_1C41681F8(v28, (uint64_t)v41);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          swift_release();
          swift_release();
          sub_1C3F8B228(v28, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          uint64_t v39 = *v29;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DE80);
          uint64_t result = swift_allocObject();
          *(void *)(result + 16) = v39;
          return result;
        case 2u:
          sub_1C3FE3FF0();
          swift_allocError();
          *(void *)uint64_t v37 = 0xD000000000000028;
          *(void *)(v37 + 8) = 0x80000001C44B30C0;
          *(unsigned char *)(v37 + 16) = 0;
          swift_willThrow();
          swift_release();
          swift_release();
          uint64_t v38 = v28;
          goto LABEL_25;
        case 3u:
        case 5u:
          goto LABEL_28;
        case 4u:
          swift_release();
          swift_release();
          uint64_t v30 = *v29;
          sub_1C3F8B228(v28, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          uint64_t v31 = (uint64_t *)&unk_1EA39DE90;
          goto LABEL_21;
        case 6u:
          sub_1C3FE3FF0();
          swift_allocError();
          uint64_t v35 = "Cannot decode version as AnyCRComparable.";
          unint64_t v36 = 0xD000000000000029;
          goto LABEL_17;
        case 7u:
          sub_1C3FE3FF0();
          swift_allocError();
          uint64_t v35 = "Cannot decode reference as AnyCRComparable.";
          goto LABEL_13;
        case 8u:
          sub_1C3FE3FF0();
          swift_allocError();
          uint64_t v35 = "Cannot decode optional as AnyCRComparable.";
          unint64_t v36 = 0xD00000000000002ALL;
          goto LABEL_17;
        case 9u:
          sub_1C3FE3FF0();
          swift_allocError();
          uint64_t v35 = "Cannot decode timestamp as AnyCRComparable.";
LABEL_13:
          unint64_t v36 = 0xD00000000000002BLL;
          goto LABEL_17;
        case 0xAu:
          sub_1C3FE3FF0();
          swift_allocError();
          uint64_t v35 = "Cannot decode repeated as AnyCRComparable.";
          unint64_t v36 = 0xD00000000000002ALL;
          goto LABEL_17;
        case 0xBu:
          sub_1C3FE3FF0();
          swift_allocError();
          uint64_t v33 = "Cannot decode tagged as AnyCRComparable.";
          goto LABEL_23;
        case 0xCu:
          sub_1C3FE3FF0();
          swift_allocError();
          uint64_t v35 = "Cannot decode asset as AnyCRComparable.";
          unint64_t v36 = 0xD000000000000027;
LABEL_17:
          *(void *)uint64_t v32 = v36;
          *(void *)(v32 + 8) = (unint64_t)(v35 - 32) | 0x8000000000000000;
          goto LABEL_24;
        case 0xDu:
          sub_1C3FE3FF0();
          swift_allocError();
          uint64_t v33 = "Cannot decode custom as AnyCRComparable.";
LABEL_23:
          *(void *)uint64_t v32 = 0xD000000000000028;
          *(void *)(v32 + 8) = (unint64_t)(v33 - 32) | 0x8000000000000000;
LABEL_24:
          *(unsigned char *)(v32 + 16) = 0;
          swift_willThrow();
          swift_release();
          swift_release();
          sub_1C3F8B228(v28, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          uint64_t v38 = (uint64_t)v29;
LABEL_25:
          uint64_t result = sub_1C3F8B228(v38, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          break;
        case 0xEu:
          swift_release();
          swift_release();
          sub_1C3F8B228(v28, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          int v34 = *(_DWORD *)v29;
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DE78);
          uint64_t result = swift_allocObject();
          *(_DWORD *)(result + 16) = v34;
          break;
        default:
          swift_release();
          swift_release();
          uint64_t v30 = *v29;
          sub_1C3F8B228(v28, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          uint64_t v31 = (uint64_t *)&unk_1EA39DE88;
LABEL_21:
          __swift_instantiateConcreteTypeFromMangledName(v31);
          uint64_t result = swift_allocObject();
          *(void *)(result + 16) = v30;
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1C41681F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL TaggedValue_1.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  BOOL v5 = swift_getEnumCaseMultiPayload() == 2;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1C4168344()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_1.taggedEnum.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TaggedValue_1.TaggedEnum();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t type metadata accessor for TaggedValue_1.TaggedEnum()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TaggedValue_1.taggedEnum.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TaggedValue_1.TaggedEnum();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*TaggedValue_1.taggedEnum.modify())(void, void)
{
  return nullsub_1;
}

uint64_t TaggedValue_1.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for TaggedValue_1.TaggedEnum();
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_1.init(tag:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a2;
  *a3 = a1;
  a3[1] = v4;
  type metadata accessor for TaggedValue_1.TaggedEnum();
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_1.tagged1.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for TaggedValue_1.TaggedEnum();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, v3, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v10 = *(void *)(v5 - 8);
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v10 = *(void *)(v5 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v9, v5);
    uint64_t v11 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a2, v11, 1, v5);
}

uint64_t TaggedValue_1.unknown.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for TaggedValue_1.TaggedEnum();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v10 - v6, v2, v4);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v9 = *((void *)v7 + 1);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v9 = 0;
  }
  *a1 = v9;
  return result;
}

uint64_t TaggedValue_1.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 24);
  uint64_t v11 = type metadata accessor for TaggedValue_1.TaggedEnum();
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v16 - v12, v3, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t))(**((void **)v13 + 1) + 120))(a1);
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v13, v5);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 + 8) + 48))(a1, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t TaggedValue_1.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v15 = *(void *)(v14 + 24);
  uint64_t v16 = type metadata accessor for TaggedValue_1.TaggedEnum();
  MEMORY[0x1F4188790](v16);
  long long v18 = (char *)&v23 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v23 - v17, v4, v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *(void *)v18;
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(**((void **)v18 + 1) + 104))(a1);
    swift_release();
    *a3 = v20;
    a3[1] = v21;
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v18, v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 + 8) + 24))(a1, v7);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return TaggedValue_1.init(_:)((uint64_t)v11, v7, (uint64_t)a3);
  }
}

uint64_t TaggedValue_1.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C41874F0(a1, a2, (void (*)(unint64_t *, uint64_t))TaggedValue_1.copy(renamingReferences:));
}

uint64_t TaggedValue_1.observableDifference(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v64 = a1;
  uint64_t v58 = a2;
  uint64_t v66 = a4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v56 = *(void *)(v4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1C4497B38();
  uint64_t v52 = *(void *)(v7 - 8);
  uint64_t v53 = v7;
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v59 = (char *)&v51 - v9;
  uint64_t v60 = AssociatedTypeWitness;
  uint64_t v57 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v51 = (char *)&v51 - v11;
  uint64_t v61 = *(void *)(v5 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v55 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v54 = (char *)&v51 - v14;
  uint64_t v65 = v4;
  uint64_t v15 = type metadata accessor for TaggedValue_1.TaggedEnum();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (uint64_t *)((char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v51 - v20;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v23 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v26 = (char *)&v51 - v25;
  uint64_t v27 = (uint64_t *)((char *)&v51 + *(int *)(v24 + 48) - v25);
  uint64_t v62 = v16;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v28((char *)&v51 - v25, v63, v15);
  v28((char *)v27, v64, v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v28((char *)v19, (uint64_t)v26, v15);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v29 = *v19;
      uint64_t v30 = *v27;
      swift_release();
      swift_release();
      uint64_t v31 = type metadata accessor for TaggedValue_1.ObservableDifference();
      uint64_t v32 = v31;
      if (v29 == v30)
      {
        uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56);
        int v34 = v66;
        uint64_t v35 = 1;
LABEL_14:
        v33((uint64_t)v34, v35, 1, v32);
        goto LABEL_15;
      }
      uint64_t v47 = v66;
LABEL_13:
      swift_storeEnumTagMultiPayload();
      uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56);
      int v34 = v47;
      uint64_t v35 = 0;
      goto LABEL_14;
    }
    swift_release();
  }
  else
  {
    v28(v21, (uint64_t)v26, v15);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v38 = v61;
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
      uint64_t v40 = v54;
      v39(v54, v21, v5);
      uint64_t v41 = v55;
      v39(v55, (char *)v27, v5);
      uint64_t v42 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 40))(v41, v58, v5);
      uint64_t v43 = *(void (**)(char *, uint64_t))(v38 + 8);
      v43(v41, v5);
      v43(v40, v5);
      uint64_t v44 = v57;
      uint64_t v45 = v60;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v42, 1, v60) == 1)
      {
        (*(void (**)(char *, uint64_t))(v52 + 8))(v42, v53);
        uint64_t v46 = type metadata accessor for TaggedValue_1.ObservableDifference();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v66, 1, 1, v46);
LABEL_15:
        uint64_t v23 = v62;
        return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v26, v15);
      }
      uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
      uint64_t v49 = v51;
      v48(v51, v42, v45);
      uint64_t v47 = v66;
      v48(v66, v49, v45);
      uint64_t v32 = type metadata accessor for TaggedValue_1.ObservableDifference();
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v61 + 8))(v21, v5);
  }
  uint64_t v36 = type metadata accessor for TaggedValue_1.ObservableDifference();
  uint64_t v37 = v66;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v37, 0, 1, v36);
  uint64_t v15 = TupleTypeMetadata2;
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v26, v15);
}

uint64_t type metadata accessor for TaggedValue_1.ObservableDifference()
{
  return __swift_instantiateGenericMetadata();
}

BOOL TaggedValue_2.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  BOOL v5 = swift_getEnumCaseMultiPayload() == 3;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1C4169424()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_2.taggedEnum.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TaggedValue_2.TaggedEnum();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t type metadata accessor for TaggedValue_2.TaggedEnum()
{
  return swift_getGenericMetadata();
}

uint64_t TaggedValue_2.taggedEnum.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TaggedValue_2.TaggedEnum();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*TaggedValue_2.taggedEnum.modify())(void, void)
{
  return nullsub_1;
}

uint64_t TaggedValue_2.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_2.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_2.init(tag:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a2;
  *a3 = a1;
  a3[1] = v4;
  type metadata accessor for TaggedValue_2.TaggedEnum();
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_2.tagged1.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = *(_OWORD *)(a1 + 32);
  v14[0] = *(_OWORD *)(a1 + 16);
  v14[1] = v14[0];
  v14[2] = v5;
  uint64_t v6 = type metadata accessor for TaggedValue_2.TaggedEnum();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v14 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v14 - v8, v3, v6);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v10 = *(void *)&v14[0];
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    (*(void (**)(uint64_t, char *))(v11 + 32))(a2, v9);
    uint64_t v10 = *(void *)&v14[0];
    uint64_t v12 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a2, v12, 1, v10);
}

uint64_t TaggedValue_2.tagged2.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 16);
  long long v13 = *(_OWORD *)(a1 + 24);
  long long v15 = v13;
  uint64_t v16 = v5;
  uint64_t v6 = type metadata accessor for TaggedValue_2.TaggedEnum();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, v3, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, char *))(v10 + 32))(a2, v9);
    uint64_t v11 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v10 + 56))(a2, v11, 1, v13);
}

uint64_t TaggedValue_2.unknown.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = *(_OWORD *)(a1 + 32);
  v12[0] = *(_OWORD *)(a1 + 16);
  v12[1] = v5;
  uint64_t v6 = type metadata accessor for TaggedValue_2.TaggedEnum();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v12 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v12 - v8, v3, v6);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v11 = *((void *)v9 + 1);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v11 = 0;
  }
  *a2 = v11;
  return result;
}

uint64_t TaggedValue_2.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = a1;
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v13 + 32);
  uint64_t v14 = *(void *)(v13 + 40);
  uint64_t v25 = v9;
  uint64_t v26 = v4;
  uint64_t v27 = v15;
  uint64_t v28 = v14;
  uint64_t v16 = type metadata accessor for TaggedValue_2.TaggedEnum();
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v23 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v23 - v17, v3, v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = v23;
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v7, v18, v4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 + 8) + 48))(v24, v4);
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v7, v4);
    }
    else
    {
      (*(void (**)(uint64_t))(**((void **)v18 + 1) + 120))(v24);
      return swift_release();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v18, v9);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 + 8) + 48))(v24, v9);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

uint64_t TaggedValue_2.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v36 = a3;
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  uint64_t v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v31 - v7;
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v6);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v31 - v15;
  uint64_t v19 = *(void *)(v17 + 32);
  uint64_t v18 = *(void *)(v17 + 40);
  uint64_t v37 = v10;
  uint64_t v38 = v3;
  uint64_t v39 = v19;
  uint64_t v40 = v18;
  uint64_t v20 = type metadata accessor for TaggedValue_2.TaggedEnum();
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v31 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))((char *)&v31 - v21, v34, v20);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v25 = v33;
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v8, v22, v3);
      uint64_t v26 = (uint64_t)v32;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 + 8) + 24))(v35, v3);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v3);
      return TaggedValue_2.init(_:)(v26, v3, (uint64_t)v36);
    }
    else
    {
      uint64_t v28 = *(void *)v22;
      uint64_t v29 = (*(uint64_t (**)(uint64_t))(**((void **)v22 + 1) + 104))(v35);
      swift_release();
      uint64_t v30 = v36;
      void *v36 = v28;
      v30[1] = v29;
      uint64_t v37 = v10;
      uint64_t v38 = v3;
      uint64_t v39 = v19;
      uint64_t v40 = v18;
      type metadata accessor for TaggedValue_2.TaggedEnum();
      return swift_storeEnumTagMultiPayload();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v22, v10);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 + 8) + 24))(v35, v10);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    return TaggedValue_2.init(_:)((uint64_t)v14, v10, (uint64_t)v36);
  }
}

uint64_t TaggedValue_2.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C41874F0(a1, a2, (void (*)(unint64_t *, uint64_t))TaggedValue_2.copy(renamingReferences:));
}

uint64_t TaggedValue_2.observableDifference(from:with:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v119 = a4;
  uint64_t v108 = a2;
  uint64_t v120 = a1;
  uint64_t v5 = a3[5];
  uint64_t v6 = a3[3];
  uint64_t v104 = *(void *)(v5 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v97 = sub_1C4497B38();
  uint64_t v96 = *(void *)(v97 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v97);
  uint64_t v106 = (char *)&v92 - v9;
  uint64_t v107 = AssociatedTypeWitness;
  uint64_t v105 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v95 = (char *)&v92 - v11;
  uint64_t v112 = *(void *)(v6 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v103 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v102 = (char *)&v92 - v14;
  uint64_t v15 = a3[4];
  uint64_t v16 = a3[2];
  uint64_t v98 = *(void *)(v15 + 8);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v94 = sub_1C4497B38();
  uint64_t v93 = *(void *)(v94 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v94);
  uint64_t v99 = (char *)&v92 - v19;
  uint64_t v101 = v17;
  uint64_t v100 = *(void *)(v17 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v92 = (char *)&v92 - v21;
  uint64_t v111 = *(void *)(v16 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v110 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v109 = (char *)&v92 - v24;
  uint64_t v116 = v6;
  uint64_t v117 = v16;
  uint64_t v121 = v16;
  uint64_t v122 = v6;
  uint64_t v114 = v5;
  uint64_t v115 = v15;
  uint64_t v123 = v15;
  uint64_t v124 = v5;
  uint64_t v25 = type metadata accessor for TaggedValue_2.TaggedEnum();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v29 = (uint64_t *)((char *)&v92 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  uint64_t v32 = (char *)&v92 - v31;
  MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v92 - v33;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v36 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v39 = (char *)&v92 - v38;
  uint64_t v40 = (uint64_t *)((char *)&v92 + *(int *)(v37 + 48) - v38);
  uint64_t v113 = v26;
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  v41((char *)&v92 - v38, v118, v25);
  v41((char *)v40, (uint64_t)v120, v25);
  uint64_t v120 = v39;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v55 = v109;
    uint64_t v56 = v110;
    uint64_t v57 = v111;
    v41(v34, (uint64_t)v120, v25);
    if (swift_getEnumCaseMultiPayload())
    {
      uint64_t v58 = v117;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v34, v117);
      uint64_t v59 = v119;
      uint64_t v60 = v120;
      uint64_t v61 = v114;
      uint64_t v62 = v115;
      uint64_t v63 = v116;
LABEL_14:
      uint64_t v121 = v58;
      uint64_t v122 = v63;
      uint64_t v123 = v62;
      uint64_t v124 = v61;
      uint64_t v67 = type metadata accessor for TaggedValue_2.ObservableDifference();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v59, 0, 1, v67);
      uint64_t v25 = TupleTypeMetadata2;
      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v60, v25);
    }
    uint64_t v68 = v57;
    uint64_t v69 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
    uint64_t v70 = v117;
    v69(v55, v34, v117);
    v69(v56, (char *)v40, v70);
    uint64_t v71 = v99;
    (*(void (**)(char *, uint64_t, uint64_t))(v98 + 40))(v56, v108, v70);
    uint64_t v72 = *(void (**)(char *, uint64_t))(v68 + 8);
    v72(v56, v70);
    v72(v55, v70);
    uint64_t v73 = v100;
    uint64_t v74 = v101;
    int v75 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v100 + 48))(v71, 1, v101);
    uint64_t v76 = v119;
    uint64_t v60 = v120;
    uint64_t v36 = v113;
    uint64_t v77 = v114;
    uint64_t v78 = v116;
    if (v75 == 1)
    {
      (*(void (**)(char *, uint64_t))(v93 + 8))(v71, v94);
      uint64_t v121 = v70;
      uint64_t v122 = v78;
      uint64_t v123 = v115;
      uint64_t v124 = v77;
      uint64_t v79 = type metadata accessor for TaggedValue_2.ObservableDifference();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v76, 1, 1, v79);
      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v60, v25);
    }
    uint64_t v88 = *(void (**)(char *, char *, uint64_t))(v73 + 32);
    uint64_t v89 = v92;
    v88(v92, v71, v74);
    uint64_t v90 = v119;
    v88(v119, v89, v74);
    uint64_t v121 = v70;
    uint64_t v122 = v78;
    uint64_t v123 = v115;
    uint64_t v124 = v77;
    uint64_t v84 = type metadata accessor for TaggedValue_2.ObservableDifference();
    swift_storeEnumTagMultiPayload();
    uint64_t v86 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56);
    uint64_t v87 = v90;
    goto LABEL_21;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v60 = v120;
    v41((char *)v29, (uint64_t)v120, v25);
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      swift_release();
      uint64_t v59 = v119;
      uint64_t v61 = v114;
      uint64_t v63 = v116;
      goto LABEL_13;
    }
    uint64_t v64 = *v29;
    uint64_t v65 = *v40;
    swift_release();
    swift_release();
    if (v64 == v65)
    {
      uint64_t v121 = v117;
      uint64_t v122 = v116;
      uint64_t v123 = v115;
      uint64_t v124 = v114;
      uint64_t v66 = type metadata accessor for TaggedValue_2.ObservableDifference();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v119, 1, 1, v66);
LABEL_22:
      uint64_t v36 = v113;
      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v60, v25);
    }
    uint64_t v121 = v117;
    uint64_t v122 = v116;
    uint64_t v123 = v115;
    uint64_t v124 = v114;
    uint64_t v84 = type metadata accessor for TaggedValue_2.ObservableDifference();
    uint64_t v85 = v119;
    swift_storeEnumTagMultiPayload();
    uint64_t v86 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56);
    uint64_t v87 = v85;
LABEL_21:
    v86((uint64_t)v87, 0, 1, v84);
    goto LABEL_22;
  }
  v41(v32, (uint64_t)v120, v25);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v63 = v116;
    (*(void (**)(char *, uint64_t))(v112 + 8))(v32, v116);
    uint64_t v59 = v119;
    uint64_t v60 = v120;
    uint64_t v61 = v114;
LABEL_13:
    uint64_t v62 = v115;
    uint64_t v58 = v117;
    goto LABEL_14;
  }
  uint64_t v43 = v112;
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v112 + 32);
  uint64_t v45 = v102;
  uint64_t v46 = v116;
  v44(v102, v32, v116);
  uint64_t v47 = v103;
  v44(v103, (char *)v40, v46);
  uint64_t v48 = v106;
  (*(void (**)(char *, uint64_t, uint64_t))(v104 + 40))(v47, v108, v46);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v43 + 8);
  v49(v47, v46);
  v49(v45, v46);
  uint64_t v50 = v105;
  uint64_t v51 = v107;
  int v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v105 + 48))(v48, 1, v107);
  uint64_t v53 = v117;
  if (v52 == 1)
  {
    (*(void (**)(char *, uint64_t))(v96 + 8))(v48, v97);
    uint64_t v121 = v53;
    uint64_t v122 = v46;
    uint64_t v123 = v115;
    uint64_t v124 = v114;
    uint64_t v54 = type metadata accessor for TaggedValue_2.ObservableDifference();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v119, 1, 1, v54);
  }
  else
  {
    uint64_t v80 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
    uint64_t v81 = v95;
    v80(v95, v48, v51);
    uint64_t v82 = v119;
    v80(v119, v81, v51);
    uint64_t v121 = v53;
    uint64_t v122 = v46;
    uint64_t v123 = v115;
    uint64_t v124 = v114;
    uint64_t v83 = type metadata accessor for TaggedValue_2.ObservableDifference();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56))(v82, 0, 1, v83);
  }
  uint64_t v36 = v113;
  uint64_t v60 = v120;
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v60, v25);
}

uint64_t type metadata accessor for TaggedValue_2.ObservableDifference()
{
  return swift_getGenericMetadata();
}

BOOL TaggedValue_3.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  BOOL v5 = swift_getEnumCaseMultiPayload() == 4;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1C416AF10()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_3.taggedEnum.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TaggedValue_3.TaggedEnum();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t type metadata accessor for TaggedValue_3.TaggedEnum()
{
  return swift_getGenericMetadata();
}

uint64_t TaggedValue_3.taggedEnum.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TaggedValue_3.TaggedEnum();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*TaggedValue_3.taggedEnum.modify())(void, void)
{
  return nullsub_1;
}

uint64_t TaggedValue_3.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_3.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_3.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_3.init(tag:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a2;
  *a3 = a1;
  a3[1] = v4;
  type metadata accessor for TaggedValue_3.TaggedEnum();
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_3.tagged1.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v15[0] = a1[1];
  v15[1] = v15[0];
  long long v6 = a1[3];
  void v15[2] = v5;
  v15[3] = v6;
  uint64_t v7 = type metadata accessor for TaggedValue_3.TaggedEnum();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v15 - v9, v3, v7);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v11 = *(void *)&v15[0];
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    uint64_t v13 = 1;
  }
  else
  {
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    (*(void (**)(uint64_t, char *))(v12 + 32))(a2, v10);
    uint64_t v11 = *(void *)&v15[0];
    uint64_t v13 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, v13, 1, v11);
}

uint64_t TaggedValue_3.tagged2.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 16);
  long long v13 = *(_OWORD *)(a1 + 24);
  long long v15 = v13;
  long long v16 = *(_OWORD *)(a1 + 40);
  uint64_t v17 = v5;
  uint64_t v6 = type metadata accessor for TaggedValue_3.TaggedEnum();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, v3, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, char *))(v10 + 32))(a2, v9);
    uint64_t v11 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v10 + 56))(a2, v11, 1, v13);
}

uint64_t TaggedValue_3.tagged3.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[1];
  v14[0] = a1[2];
  v14[1] = v5;
  long long v6 = a1[3];
  v14[2] = v14[0];
  _OWORD v14[3] = v6;
  uint64_t v7 = type metadata accessor for TaggedValue_3.TaggedEnum();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v14 - v9, v3, v7);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    (*(void (**)(uint64_t, char *))(v11 + 32))(a2, v10);
    uint64_t v12 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    uint64_t v12 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v11 + 56))(a2, v12, 1, *(void *)&v14[0]);
}

uint64_t TaggedValue_3.unknown.getter@<X0>(_OWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v12[0] = a1[1];
  v12[1] = v5;
  _OWORD v12[2] = a1[3];
  uint64_t v6 = type metadata accessor for TaggedValue_3.TaggedEnum();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v12 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v12 - v8, v3, v6);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 3)
  {
    uint64_t v11 = *((void *)v9 + 1);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v11 = 0;
  }
  *a2 = v11;
  return result;
}

uint64_t TaggedValue_3.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a1;
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v30 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](a1);
  uint64_t v29 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v28 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v3);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 16);
  uint64_t v27 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v7);
  long long v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v14[5];
  uint64_t v15 = v14[6];
  uint64_t v17 = v14[7];
  uint64_t v33 = v11;
  uint64_t v34 = v6;
  uint64_t v35 = v2;
  uint64_t v36 = v16;
  uint64_t v37 = v15;
  uint64_t v38 = v17;
  uint64_t v18 = type metadata accessor for TaggedValue_3.TaggedEnum();
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v27 - v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))((char *)&v27 - v19, v32, v18);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v26 = v28;
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v9, v20, v6);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 + 8) + 48))(v31, v6);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v9, v6);
      break;
    case 2u:
      uint64_t v25 = v29;
      uint64_t v24 = v30;
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v29, v20, v2);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 + 8) + 48))(v31, v2);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v25, v2);
      break;
    case 3u:
      (*(void (**)(uint64_t))(**((void **)v20 + 1) + 120))(v31);
      uint64_t result = swift_release();
      break;
    default:
      uint64_t v22 = v27;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v13, v20, v11);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 + 8) + 48))(v31, v11);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v13, v11);
      break;
  }
  return result;
}

uint64_t TaggedValue_3.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v48 = a3;
  uint64_t v47 = a1;
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  uint64_t v42 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v40 - v7;
  uint64_t v10 = *(void *)(v9 + 24);
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v6);
  long long v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v40 - v15;
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v40 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v14);
  uint64_t v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v26 = v24[5];
  uint64_t v25 = v24[6];
  uint64_t v27 = v24[7];
  uint64_t v50 = v18;
  uint64_t v51 = v10;
  uint64_t v52 = v3;
  uint64_t v53 = v26;
  uint64_t v44 = v26;
  uint64_t v45 = v25;
  uint64_t v54 = v25;
  uint64_t v55 = v27;
  uint64_t v46 = v27;
  uint64_t v28 = type metadata accessor for TaggedValue_3.TaggedEnum();
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v40 - v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))((char *)&v40 - v29, v49, v28);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v39 = v41;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v16, v30, v10);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 + 8) + 24))(v47, v10);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v16, v10);
      uint64_t result = TaggedValue_3.init(_:)((uint64_t)v13, v10, (uint64_t)v48);
      break;
    case 2u:
      uint64_t v34 = v43;
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v8, v30, v3);
      uint64_t v35 = (uint64_t)v42;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 + 8) + 24))(v47, v3);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v3);
      uint64_t result = TaggedValue_3.init(_:)(v35, v3, (uint64_t)v48);
      break;
    case 3u:
      uint64_t v36 = *(void *)v30;
      uint64_t v37 = (*(uint64_t (**)(uint64_t))(**((void **)v30 + 1) + 104))(v47);
      swift_release();
      uint64_t v38 = v48;
      *uint64_t v48 = v36;
      v38[1] = v37;
      uint64_t v50 = v18;
      uint64_t v51 = v10;
      uint64_t v52 = v3;
      uint64_t v53 = v44;
      uint64_t v54 = v45;
      uint64_t v55 = v46;
      type metadata accessor for TaggedValue_3.TaggedEnum();
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
    default:
      uint64_t v32 = v40;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v23, v30, v18);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 + 8) + 24))(v47, v18);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v23, v18);
      uint64_t result = TaggedValue_3.init(_:)((uint64_t)v21, v18, (uint64_t)v48);
      break;
  }
  return result;
}

uint64_t TaggedValue_3.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C41874F0(a1, a2, (void (*)(unint64_t *, uint64_t))TaggedValue_3.copy(renamingReferences:));
}

uint64_t TaggedValue_3.observableDifference(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v154 = a1;
  uint64_t v145 = a2;
  int64_t v151 = a4;
  uint64_t v5 = a3[7];
  uint64_t v6 = a3[4];
  uint64_t v140 = *(void *)(v5 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v123 = sub_1C4497B38();
  uint64_t v122 = *(void *)(v123 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v123);
  uint64_t v139 = (char *)&v115 - v9;
  uint64_t v141 = AssociatedTypeWitness;
  uint64_t v138 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v121 = (char *)&v115 - v11;
  uint64_t v144 = *(void *)(v6 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v136 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v135 = (char *)&v115 - v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = a3[3];
  uint64_t v133 = *(void *)(v15 + 8);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v120 = sub_1C4497B38();
  uint64_t v119 = *(void *)(v120 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v120);
  uint64_t v134 = (char *)&v115 - v19;
  uint64_t v137 = v17;
  uint64_t v132 = *(void *)(v17 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v118 = (char *)&v115 - v21;
  uint64_t v143 = *(void *)(v16 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v131 = (char *)&v115 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v130 = (char *)&v115 - v24;
  uint64_t v25 = a3[5];
  uint64_t v26 = a3[2];
  uint64_t v127 = *(void *)(v25 + 8);
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v117 = sub_1C4497B38();
  uint64_t v116 = *(void *)(v117 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v117);
  uint64_t v128 = (char *)&v115 - v29;
  uint64_t v129 = v27;
  uint64_t v126 = *(void *)(v27 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v115 = (char *)&v115 - v31;
  uint64_t v142 = *(void *)(v26 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v125 = (char *)&v115 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v124 = (char *)&v115 - v34;
  uint64_t v155 = v26;
  uint64_t v156 = v5;
  uint64_t v158 = v26;
  uint64_t v159 = v16;
  uint64_t v152 = v16;
  uint64_t v148 = v25;
  uint64_t v149 = v6;
  uint64_t v160 = v6;
  uint64_t v161 = v25;
  uint64_t v150 = v15;
  uint64_t v162 = v15;
  uint64_t v163 = v5;
  uint64_t v35 = type metadata accessor for TaggedValue_3.TaggedEnum();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v39 = (uint64_t *)((char *)&v115 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = MEMORY[0x1F4188790](v37);
  uint64_t v42 = (char *)&v115 - v41;
  uint64_t v43 = MEMORY[0x1F4188790](v40);
  uint64_t v45 = (char *)&v115 - v44;
  MEMORY[0x1F4188790](v43);
  uint64_t v47 = (char *)&v115 - v46;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v147 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v49 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v51 = (char *)&v115 - v50;
  uint64_t v52 = (uint64_t *)((char *)&v115 + *(int *)(v49 + 48) - v50);
  uint64_t v146 = v36;
  uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  v53((char *)&v115 - v50, v153, v35);
  v53((char *)v52, v154, v35);
  uint64_t v157 = v51;
  uint64_t v54 = v35;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v56 = v155;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v57 = v157;
      v53(v45, (uint64_t)v157, v54);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v80 = v152;
        (*(void (**)(char *, uint64_t))(v143 + 8))(v45, v152);
        uint64_t v81 = v150;
        uint64_t v82 = v151;
        uint64_t v83 = v156;
        uint64_t v84 = v149;
        goto LABEL_19;
      }
      uint64_t v58 = v143;
      uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v143 + 32);
      uint64_t v60 = v130;
      uint64_t v61 = v152;
      v59(v130, v45, v152);
      uint64_t v62 = v131;
      v59(v131, (char *)v52, v61);
      uint64_t v63 = v134;
      (*(void (**)(char *, uint64_t, uint64_t))(v133 + 40))(v62, v145, v61);
      uint64_t v64 = *(void (**)(char *, uint64_t))(v58 + 8);
      v64(v62, v61);
      v64(v60, v61);
      uint64_t v65 = v132;
      uint64_t v66 = v137;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v63, 1, v137) == 1)
      {
        (*(void (**)(char *, uint64_t))(v119 + 8))(v63, v120);
        uint64_t v158 = v56;
        uint64_t v159 = v61;
        uint64_t v160 = v149;
        goto LABEL_10;
      }
      uint64_t v101 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
      uint64_t v102 = v118;
      v101(v118, v63, v66);
      uint64_t v103 = v151;
      v101(v151, v102, v66);
      uint64_t v158 = v56;
      uint64_t v159 = v61;
      uint64_t v160 = v149;
      uint64_t v161 = v148;
      uint64_t v162 = v150;
      uint64_t v163 = v156;
      uint64_t v104 = type metadata accessor for TaggedValue_3.ObservableDifference();
      goto LABEL_24;
    case 2:
      v53(v42, (uint64_t)v157, v54);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        uint64_t v84 = v149;
        (*(void (**)(char *, uint64_t))(v144 + 8))(v42, v149);
        uint64_t v82 = v151;
        uint64_t v83 = v156;
        uint64_t v57 = v157;
        goto LABEL_18;
      }
      uint64_t v67 = v144;
      uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v144 + 32);
      uint64_t v69 = v135;
      uint64_t v70 = v149;
      v68(v135, v42, v149);
      uint64_t v71 = v136;
      v68(v136, (char *)v52, v70);
      uint64_t v72 = v139;
      (*(void (**)(char *, uint64_t, uint64_t))(v140 + 40))(v71, v145, v70);
      uint64_t v73 = *(void (**)(char *, uint64_t))(v67 + 8);
      v73(v71, v70);
      v73(v69, v70);
      uint64_t v74 = v138;
      uint64_t v75 = v141;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48))(v72, 1, v141) == 1)
      {
        (*(void (**)(char *, uint64_t))(v122 + 8))(v72, v123);
        uint64_t v158 = v56;
        uint64_t v159 = v152;
        uint64_t v160 = v70;
LABEL_10:
        uint64_t v161 = v148;
        uint64_t v162 = v150;
        uint64_t v163 = v156;
        uint64_t v76 = type metadata accessor for TaggedValue_3.ObservableDifference();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v151, 1, 1, v76);
      }
      else
      {
        uint64_t v105 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
        uint64_t v106 = v121;
        v105(v121, v72, v75);
        uint64_t v103 = v151;
        v105(v151, v106, v75);
        uint64_t v158 = v56;
        uint64_t v159 = v152;
        uint64_t v160 = v70;
        uint64_t v161 = v148;
        uint64_t v162 = v150;
        uint64_t v163 = v156;
        uint64_t v104 = type metadata accessor for TaggedValue_3.ObservableDifference();
LABEL_24:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56))(v103, 0, 1, v104);
      }
      uint64_t v85 = v146;
      TupleTypeMetadata2 = v54;
      uint64_t v57 = v157;
      return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v57, TupleTypeMetadata2);
    case 3:
      uint64_t v57 = v157;
      v53((char *)v39, (uint64_t)v157, v54);
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        swift_release();
        goto LABEL_17;
      }
      uint64_t v77 = *v39;
      uint64_t v78 = *v52;
      swift_release();
      swift_release();
      if (v77 == v78)
      {
        uint64_t v158 = v56;
        uint64_t v159 = v152;
        uint64_t v160 = v149;
        uint64_t v161 = v148;
        uint64_t v162 = v150;
        uint64_t v163 = v156;
        uint64_t v79 = type metadata accessor for TaggedValue_3.ObservableDifference();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v151, 1, 1, v79);
        goto LABEL_29;
      }
      uint64_t v158 = v56;
      uint64_t v159 = v152;
      uint64_t v160 = v149;
      uint64_t v161 = v148;
      uint64_t v162 = v150;
      uint64_t v163 = v156;
      uint64_t v107 = type metadata accessor for TaggedValue_3.ObservableDifference();
      uint64_t v108 = v151;
      swift_storeEnumTagMultiPayload();
      uint64_t v109 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56);
      uint64_t v110 = v108;
      goto LABEL_28;
    default:
      uint64_t v57 = v157;
      v53(v47, (uint64_t)v157, v54);
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v142 + 8))(v47, v56);
LABEL_17:
        uint64_t v82 = v151;
        uint64_t v83 = v156;
        uint64_t v84 = v149;
LABEL_18:
        uint64_t v81 = v150;
        uint64_t v80 = v152;
LABEL_19:
        uint64_t v85 = v147;
        uint64_t v158 = v56;
        uint64_t v159 = v80;
        uint64_t v160 = v84;
        uint64_t v161 = v148;
        uint64_t v162 = v81;
        uint64_t v163 = v83;
        uint64_t v86 = type metadata accessor for TaggedValue_3.ObservableDifference();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v82, 0, 1, v86);
      }
      else
      {
        uint64_t v87 = v142;
        uint64_t v88 = *(void (**)(char *, char *, uint64_t))(v142 + 32);
        uint64_t v89 = v124;
        v88(v124, v47, v56);
        uint64_t v90 = v125;
        v88(v125, (char *)v52, v56);
        uint64_t v91 = v128;
        (*(void (**)(char *, uint64_t, uint64_t))(v127 + 40))(v90, v145, v56);
        uint64_t v92 = *(void (**)(char *, uint64_t))(v87 + 8);
        v92(v90, v56);
        v92(v89, v56);
        uint64_t v93 = v126;
        uint64_t v94 = v129;
        int v95 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v126 + 48))(v91, 1, v129);
        uint64_t v96 = v156;
        uint64_t v98 = v148;
        uint64_t v97 = v149;
        uint64_t v99 = v146;
        if (v95 == 1)
        {
          (*(void (**)(char *, uint64_t))(v116 + 8))(v91, v117);
          uint64_t v158 = v56;
          uint64_t v159 = v152;
          uint64_t v160 = v97;
          uint64_t v161 = v98;
          uint64_t v162 = v150;
          uint64_t v163 = v96;
          uint64_t v100 = type metadata accessor for TaggedValue_3.ObservableDifference();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v151, 1, 1, v100);
          uint64_t v85 = v99;
        }
        else
        {
          uint64_t v111 = *(void (**)(char *, char *, uint64_t))(v93 + 32);
          uint64_t v112 = v115;
          v111(v115, v91, v94);
          uint64_t v113 = v151;
          v111(v151, v112, v94);
          uint64_t v158 = v56;
          uint64_t v159 = v152;
          uint64_t v160 = v97;
          uint64_t v161 = v98;
          uint64_t v162 = v150;
          uint64_t v163 = v156;
          uint64_t v107 = type metadata accessor for TaggedValue_3.ObservableDifference();
          swift_storeEnumTagMultiPayload();
          uint64_t v109 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56);
          uint64_t v110 = v113;
LABEL_28:
          v109((uint64_t)v110, 0, 1, v107);
LABEL_29:
          uint64_t v85 = v146;
        }
        TupleTypeMetadata2 = v54;
      }
      return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v57, TupleTypeMetadata2);
  }
}

uint64_t type metadata accessor for TaggedValue_3.ObservableDifference()
{
  return swift_getGenericMetadata();
}

BOOL TaggedValue_4.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  BOOL v5 = swift_getEnumCaseMultiPayload() == 5;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1C416D3F4()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_4.taggedEnum.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TaggedValue_4.TaggedEnum();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t type metadata accessor for TaggedValue_4.TaggedEnum()
{
  return swift_getGenericMetadata();
}

uint64_t TaggedValue_4.taggedEnum.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TaggedValue_4.TaggedEnum();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*TaggedValue_4.taggedEnum.modify())(void, void)
{
  return nullsub_1;
}

uint64_t TaggedValue_4.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_4.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_4.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_4.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_4.init(tag:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  *a3 = a1;
  a3[1] = v3;
  type metadata accessor for TaggedValue_4.TaggedEnum();
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_4.tagged1.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v16[0] = a1[1];
  v16[1] = v16[0];
  long long v6 = a1[3];
  long long v7 = a1[4];
  v16[2] = v5;
  v16[3] = v6;
  v16[4] = v7;
  uint64_t v8 = type metadata accessor for TaggedValue_4.TaggedEnum();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v16 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v16 - v10, v3, v8);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v12 = *(void *)&v16[0];
    uint64_t v13 = *(void *)(*(void *)&v16[0] - 8);
    uint64_t v14 = 1;
  }
  else
  {
    uint64_t v13 = *(void *)(*(void *)&v16[0] - 8);
    (*(void (**)(uint64_t, char *))(v13 + 32))(a2, v11);
    uint64_t v12 = *(void *)&v16[0];
    uint64_t v14 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a2, v14, 1, v12);
}

uint64_t TaggedValue_4.tagged2.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 16);
  long long v13 = *(_OWORD *)(a1 + 24);
  long long v15 = v13;
  long long v16 = *(_OWORD *)(a1 + 40);
  long long v17 = *(_OWORD *)(a1 + 56);
  uint64_t v18 = v5;
  uint64_t v6 = type metadata accessor for TaggedValue_4.TaggedEnum();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, v3, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, char *))(v10 + 32))(a2, v9);
    uint64_t v11 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v10 + 56))(a2, v11, 1, v13);
}

uint64_t TaggedValue_4.tagged3.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[1];
  v15[0] = a1[2];
  v15[1] = v5;
  long long v6 = a1[3];
  long long v7 = a1[4];
  void v15[2] = v15[0];
  v15[3] = v6;
  _OWORD v15[4] = v7;
  uint64_t v8 = type metadata accessor for TaggedValue_4.TaggedEnum();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v15 - v10, v3, v8);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    (*(void (**)(uint64_t, char *))(v12 + 32))(a2, v11);
    uint64_t v13 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    uint64_t v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v12 + 56))(a2, v13, 1, *(void *)&v15[0]);
}

uint64_t TaggedValue_4.tagged4.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 32);
  v14[0] = *(_OWORD *)(a1 + 40);
  v14[1] = v6;
  long long v16 = v14[0];
  long long v17 = *(_OWORD *)(a1 + 56);
  uint64_t v18 = v5;
  uint64_t v7 = type metadata accessor for TaggedValue_4.TaggedEnum();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v14 - v9, v3, v7);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    (*(void (**)(uint64_t, char *))(v11 + 32))(a2, v10);
    uint64_t v12 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    uint64_t v12 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v11 + 56))(a2, v12, 1, *(void *)&v14[0]);
}

uint64_t TaggedValue_4.unknown.getter@<X0>(_OWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v13[0] = a1[1];
  v13[1] = v5;
  long long v6 = a1[4];
  v13[2] = a1[3];
  void v13[3] = v6;
  uint64_t v7 = type metadata accessor for TaggedValue_4.TaggedEnum();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v13 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v13 - v9, v3, v7);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 4)
  {
    uint64_t v12 = *((void *)v10 + 1);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v12 = 0;
  }
  *a2 = v12;
  return result;
}

uint64_t TaggedValue_4.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = a1;
  uint64_t v42 = *(void *)(*(void *)(a2 + 40) - 8);
  uint64_t v2 = MEMORY[0x1F4188790](a1);
  uint64_t v41 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v4 + 32);
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v2);
  uint64_t v39 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v38 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v6);
  uint64_t v37 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v36 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v16[6];
  uint64_t v18 = v16[7];
  uint64_t v19 = v16[8];
  uint64_t v20 = v16[9];
  uint64_t v46 = v13;
  uint64_t v47 = v9;
  uint64_t v48 = v5;
  uint64_t v49 = v21;
  uint64_t v43 = v21;
  uint64_t v50 = v17;
  uint64_t v51 = v18;
  uint64_t v52 = v19;
  uint64_t v53 = v20;
  uint64_t v22 = type metadata accessor for TaggedValue_4.TaggedEnum();
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v36 - v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))((char *)&v36 - v23, v44, v22);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v28 = v37;
      uint64_t v29 = v38;
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v37, v24, v9);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 + 8) + 48))(v45, v9);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v28, v9);
      break;
    case 2u:
      uint64_t v30 = v39;
      uint64_t v31 = v40;
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v39, v24, v5);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 + 8) + 48))(v45, v5);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v30, v5);
      break;
    case 3u:
      uint64_t v32 = v41;
      uint64_t v33 = v42;
      uint64_t v34 = v24;
      uint64_t v35 = v43;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v34, v43);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 + 8) + 48))(v45, v35);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v32, v35);
      break;
    case 4u:
      (*(void (**)(uint64_t))(**((void **)v24 + 1) + 120))(v45);
      uint64_t result = swift_release();
      break;
    default:
      uint64_t v26 = v36;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v15, v24, v13);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 + 8) + 48))(v45, v13);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v15, v13);
      break;
  }
  return result;
}

uint64_t TaggedValue_4.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v65 = a1;
  uint64_t v67 = a3;
  uint64_t v60 = *(void *)(*(void *)(a2 + 40) - 8);
  uint64_t v61 = v3;
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  uint64_t v59 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v58 = (char *)&v54 - v7;
  uint64_t v57 = *(void *)(*(void *)(v8 + 32) - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v56 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v54 - v12;
  uint64_t v15 = *(void *)(v14 + 24);
  uint64_t v55 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v11);
  uint64_t v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v54 - v20;
  uint64_t v23 = *(void *)(v22 + 16);
  uint64_t v54 = *(void *)(v23 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v19);
  uint64_t v26 = (char *)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v54 - v27;
  uint64_t v31 = v29[6];
  uint64_t v30 = v29[7];
  uint64_t v32 = v29[8];
  uint64_t v33 = v29[9];
  uint64_t v69 = v23;
  uint64_t v70 = v15;
  uint64_t v66 = v34;
  uint64_t v71 = v34;
  uint64_t v72 = v35;
  uint64_t v68 = v35;
  uint64_t v62 = v31;
  uint64_t v63 = v30;
  uint64_t v73 = v31;
  uint64_t v74 = v30;
  uint64_t v64 = v32;
  uint64_t v75 = v32;
  uint64_t v76 = v33;
  uint64_t v36 = type metadata accessor for TaggedValue_4.TaggedEnum();
  MEMORY[0x1F4188790](v36);
  uint64_t v38 = (char *)&v54 - v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))((char *)&v54 - v37, v61, v36);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v42 = v55;
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v21, v38, v15);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 + 8) + 24))(v65, v15);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v21, v15);
      uint64_t result = TaggedValue_4.init(_:)((uint64_t)v18, v15, (uint64_t)v67);
      break;
    case 2u:
      uint64_t v43 = v57;
      uint64_t v44 = v66;
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v13, v38, v66);
      uint64_t v45 = (uint64_t)v56;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v64 + 8) + 24))(v65, v44);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v44);
      uint64_t result = TaggedValue_4.init(_:)(v45, v44, (uint64_t)v67);
      break;
    case 3u:
      uint64_t v46 = v60;
      uint64_t v47 = v58;
      uint64_t v48 = v68;
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v58, v38, v68);
      uint64_t v49 = (uint64_t)v59;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 + 8) + 24))(v65, v48);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v48);
      uint64_t result = TaggedValue_4.init(_:)(v49, v48, (uint64_t)v67);
      break;
    case 4u:
      uint64_t v50 = *(void *)v38;
      uint64_t v51 = (*(uint64_t (**)(uint64_t))(**((void **)v38 + 1) + 104))(v65);
      swift_release();
      uint64_t v52 = v66;
      uint64_t v53 = v67;
      *uint64_t v67 = v50;
      v53[1] = v51;
      uint64_t v69 = v23;
      uint64_t v70 = v15;
      uint64_t v71 = v52;
      uint64_t v72 = v68;
      uint64_t v73 = v62;
      uint64_t v74 = v63;
      uint64_t v75 = v64;
      uint64_t v76 = v33;
      type metadata accessor for TaggedValue_4.TaggedEnum();
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
    default:
      uint64_t v40 = v54;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v28, v38, v23);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 + 8) + 24))(v65, v23);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v23);
      uint64_t result = TaggedValue_4.init(_:)((uint64_t)v26, v23, (uint64_t)v67);
      break;
  }
  return result;
}

uint64_t TaggedValue_4.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C41874F0(a1, a2, (void (*)(unint64_t *, uint64_t))TaggedValue_4.copy(renamingReferences:));
}

uint64_t TaggedValue_4.observableDifference(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v191 = a2;
  uint64_t v205 = a1;
  uint64_t v199 = a4;
  uint64_t v5 = a3[9];
  uint64_t v6 = a3[5];
  uint64_t v185 = *(void *)(v5 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v162 = sub_1C4497B38();
  uint64_t v161 = *(void *)(v162 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v162);
  uint64_t v184 = (char *)&v150 - v9;
  uint64_t v186 = AssociatedTypeWitness;
  uint64_t v183 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v160 = (char *)&v150 - v11;
  uint64_t v190 = *(void *)(v6 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v181 = (char *)&v150 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v180 = (char *)&v150 - v14;
  uint64_t v15 = a3[8];
  uint64_t v16 = a3[4];
  uint64_t v178 = *(void *)(v15 + 8);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v159 = sub_1C4497B38();
  uint64_t v158 = *(void *)(v159 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v159);
  v179 = (char *)&v150 - v19;
  uint64_t v182 = v17;
  uint64_t v177 = *(void *)(v17 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v157 = (char *)&v150 - v21;
  uint64_t v189 = *(void *)(v16 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v175 = (char *)&v150 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v174 = (char *)&v150 - v24;
  uint64_t v25 = a3[7];
  uint64_t v26 = a3[3];
  uint64_t v172 = *(void *)(v25 + 8);
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v156 = sub_1C4497B38();
  uint64_t v155 = *(void *)(v156 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v156);
  v173 = (char *)&v150 - v29;
  uint64_t v176 = v27;
  uint64_t v171 = *(void *)(v27 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v154 = (char *)&v150 - v31;
  uint64_t v188 = *(void *)(v26 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v170 = (char *)&v150 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v169 = (char *)&v150 - v34;
  uint64_t v35 = a3[6];
  uint64_t v36 = a3[2];
  uint64_t v166 = *(void *)(v35 + 8);
  uint64_t v37 = swift_getAssociatedTypeWitness();
  uint64_t v153 = sub_1C4497B38();
  uint64_t v152 = *(void *)(v153 - 8);
  uint64_t v38 = MEMORY[0x1F4188790](v153);
  uint64_t v167 = (char *)&v150 - v39;
  uint64_t v168 = v37;
  uint64_t v165 = *(void *)(v37 - 8);
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  int64_t v151 = (char *)&v150 - v41;
  uint64_t v187 = *(void *)(v36 - 8);
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  uint64_t v164 = (char *)&v150 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v42);
  uint64_t v163 = (char *)&v150 - v44;
  uint64_t v202 = v6;
  uint64_t v203 = v36;
  uint64_t v207 = v36;
  uint64_t v208 = v26;
  uint64_t v200 = v26;
  uint64_t v201 = v16;
  uint64_t v209 = v16;
  uint64_t v210 = v6;
  uint64_t v195 = v35;
  uint64_t v196 = v25;
  uint64_t v211 = v35;
  uint64_t v212 = v25;
  uint64_t v197 = v15;
  uint64_t v198 = v5;
  uint64_t v213 = v15;
  uint64_t v214 = v5;
  uint64_t v45 = type metadata accessor for TaggedValue_4.TaggedEnum();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v49 = (uint64_t *)((char *)&v150 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v50 = MEMORY[0x1F4188790](v47);
  uint64_t v52 = (char *)&v150 - v51;
  uint64_t v53 = MEMORY[0x1F4188790](v50);
  uint64_t v55 = (char *)&v150 - v54;
  uint64_t v56 = MEMORY[0x1F4188790](v53);
  uint64_t v58 = (char *)&v150 - v57;
  MEMORY[0x1F4188790](v56);
  uint64_t v60 = (char *)&v150 - v59;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v194 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v62 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v64 = (char *)&v150 - v63;
  uint64_t v193 = v62;
  uint64_t v65 = (uint64_t *)((char *)&v150 + *(int *)(v62 + 48) - v63);
  uint64_t v192 = v46;
  uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  v66((char *)&v150 - v63, v204, v45);
  v66((char *)v65, v205, v45);
  uint64_t v206 = v64;
  uint64_t v67 = v45;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v68 = v206;
      v66(v58, (uint64_t)v206, v45);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v76 = v200;
        (*(void (**)(char *, uint64_t))(v188 + 8))(v58, v200);
        uint64_t v70 = v198;
        uint64_t v71 = v199;
        uint64_t v73 = v201;
        uint64_t v72 = v202;
        uint64_t v75 = v196;
        uint64_t v74 = v197;
        goto LABEL_23;
      }
      uint64_t v78 = v188;
      uint64_t v79 = *(void (**)(char *, char *, uint64_t))(v188 + 32);
      uint64_t v80 = v169;
      uint64_t v81 = v200;
      v79(v169, v58, v200);
      uint64_t v82 = v170;
      v79(v170, (char *)v65, v81);
      uint64_t v83 = v173;
      (*(void (**)(char *, uint64_t, uint64_t))(v172 + 40))(v82, v191, v81);
      uint64_t v84 = *(void (**)(char *, uint64_t))(v78 + 8);
      v84(v82, v81);
      v84(v80, v81);
      uint64_t v85 = v171;
      uint64_t v86 = v176;
      int v87 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v171 + 48))(v83, 1, v176);
      uint64_t v88 = v201;
      uint64_t v89 = v203;
      if (v87 == 1)
      {
        (*(void (**)(char *, uint64_t))(v155 + 8))(v83, v156);
        uint64_t v207 = v89;
        uint64_t v208 = v81;
        uint64_t v209 = v88;
        uint64_t v210 = v202;
        goto LABEL_10;
      }
      uint64_t v131 = *(void (**)(char *, char *, uint64_t))(v85 + 32);
      uint64_t v132 = v154;
      v131(v154, v83, v86);
      uint64_t v133 = v199;
      v131(v199, v132, v86);
      uint64_t v207 = v89;
      uint64_t v208 = v81;
      uint64_t v209 = v88;
      uint64_t v210 = v202;
      uint64_t v211 = v195;
      uint64_t v212 = v196;
      uint64_t v213 = v197;
      uint64_t v214 = v198;
      uint64_t v134 = type metadata accessor for TaggedValue_4.ObservableDifference();
      swift_storeEnumTagMultiPayload();
      uint64_t v135 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v134 - 8) + 56);
      uint64_t v136 = v133;
      goto LABEL_31;
    case 2u:
      v66(v55, (uint64_t)v206, v45);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        uint64_t v73 = v201;
        (*(void (**)(char *, uint64_t))(v189 + 8))(v55, v201);
        uint64_t v70 = v198;
        uint64_t v71 = v199;
        uint64_t v72 = v202;
        uint64_t v74 = v197;
        uint64_t v68 = v206;
        goto LABEL_22;
      }
      uint64_t v90 = v189;
      uint64_t v91 = *(void (**)(char *, char *, uint64_t))(v189 + 32);
      uint64_t v92 = v174;
      uint64_t v93 = v201;
      v91(v174, v55, v201);
      uint64_t v94 = v175;
      v91(v175, (char *)v65, v93);
      int v95 = v179;
      (*(void (**)(char *, uint64_t, uint64_t))(v178 + 40))(v94, v191, v93);
      uint64_t v96 = *(void (**)(char *, uint64_t))(v90 + 8);
      v96(v94, v93);
      v96(v92, v93);
      uint64_t v97 = v177;
      uint64_t v98 = v182;
      int v99 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v177 + 48))(v95, 1, v182);
      uint64_t v100 = v202;
      uint64_t v101 = v203;
      if (v99 == 1)
      {
        (*(void (**)(char *, uint64_t))(v158 + 8))(v95, v159);
        uint64_t v207 = v101;
        uint64_t v208 = v200;
        uint64_t v209 = v93;
        uint64_t v210 = v100;
LABEL_10:
        uint64_t v211 = v195;
        uint64_t v212 = v196;
        uint64_t v213 = v197;
        uint64_t v214 = v198;
        uint64_t v102 = type metadata accessor for TaggedValue_4.ObservableDifference();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 56))(v199, 1, 1, v102);
      }
      else
      {
        uint64_t v137 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
        uint64_t v138 = v157;
        v137(v157, v95, v98);
        uint64_t v139 = v199;
        v137(v199, v138, v98);
        uint64_t v207 = v101;
        uint64_t v208 = v200;
        uint64_t v209 = v93;
        uint64_t v210 = v100;
        uint64_t v211 = v195;
        uint64_t v212 = v196;
        uint64_t v213 = v197;
        uint64_t v214 = v198;
        uint64_t v134 = type metadata accessor for TaggedValue_4.ObservableDifference();
        swift_storeEnumTagMultiPayload();
        uint64_t v135 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v134 - 8) + 56);
        uint64_t v136 = v139;
LABEL_31:
        v135((uint64_t)v136, 0, 1, v134);
      }
      uint64_t v116 = v192;
      uint64_t v68 = v206;
      return (*(uint64_t (**)(char *, uint64_t))(v116 + 8))(v68, v67);
    case 3u:
      uint64_t v68 = v206;
      v66(v52, (uint64_t)v206, v45);
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        uint64_t v72 = v202;
        (*(void (**)(char *, uint64_t))(v190 + 8))(v52, v202);
        uint64_t v70 = v198;
        uint64_t v71 = v199;
        goto LABEL_21;
      }
      uint64_t v103 = v190;
      uint64_t v104 = *(void (**)(char *, char *, uint64_t))(v190 + 32);
      uint64_t v105 = v180;
      uint64_t v106 = v202;
      v104(v180, v52, v202);
      uint64_t v107 = v181;
      v104(v181, (char *)v65, v106);
      uint64_t v108 = v184;
      (*(void (**)(char *, uint64_t, uint64_t))(v185 + 40))(v107, v191, v106);
      uint64_t v109 = *(void (**)(char *, uint64_t))(v103 + 8);
      v109(v107, v106);
      v109(v105, v106);
      uint64_t v110 = v183;
      uint64_t v111 = v186;
      int v112 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v183 + 48))(v108, 1, v186);
      uint64_t v113 = v203;
      if (v112 == 1)
      {
        (*(void (**)(char *, uint64_t))(v161 + 8))(v108, v162);
        uint64_t v207 = v113;
        uint64_t v208 = v200;
        uint64_t v209 = v201;
        uint64_t v210 = v106;
        goto LABEL_28;
      }
      uint64_t v140 = *(void (**)(char *, char *, uint64_t))(v110 + 32);
      uint64_t v141 = v160;
      v140(v160, v108, v111);
      uint64_t v142 = v199;
      v140(v199, v141, v111);
      uint64_t v207 = v113;
      uint64_t v208 = v200;
      uint64_t v209 = v201;
      uint64_t v210 = v106;
      uint64_t v211 = v195;
      uint64_t v212 = v196;
      uint64_t v213 = v197;
      uint64_t v214 = v198;
      uint64_t v143 = type metadata accessor for TaggedValue_4.ObservableDifference();
      goto LABEL_35;
    case 4u:
      uint64_t v68 = v206;
      v66((char *)v49, (uint64_t)v206, v45);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        swift_release();
        uint64_t v70 = v198;
        uint64_t v71 = v199;
        uint64_t v72 = v202;
LABEL_21:
        uint64_t v74 = v197;
        uint64_t v73 = v201;
LABEL_22:
        uint64_t v75 = v196;
        uint64_t v76 = v200;
LABEL_23:
        uint64_t v77 = v195;
        uint64_t v69 = v203;
        goto LABEL_24;
      }
      uint64_t v114 = *v49;
      uint64_t v115 = *v65;
      swift_release();
      swift_release();
      if (v114 == v115)
      {
        uint64_t v207 = v203;
        uint64_t v208 = v200;
        uint64_t v209 = v201;
        goto LABEL_27;
      }
      uint64_t v207 = v203;
      uint64_t v208 = v200;
      uint64_t v209 = v201;
      uint64_t v210 = v202;
      uint64_t v211 = v195;
      uint64_t v212 = v196;
      uint64_t v213 = v197;
      uint64_t v214 = v198;
      uint64_t v143 = type metadata accessor for TaggedValue_4.ObservableDifference();
      uint64_t v142 = v199;
LABEL_35:
      swift_storeEnumTagMultiPayload();
      uint64_t v144 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v143 - 8) + 56);
      uint64_t v145 = v142;
      goto LABEL_37;
    default:
      uint64_t v68 = v206;
      v66(v60, (uint64_t)v206, v45);
      if (swift_getEnumCaseMultiPayload())
      {
        uint64_t v69 = v203;
        (*(void (**)(char *, uint64_t))(v187 + 8))(v60, v203);
        uint64_t v70 = v198;
        uint64_t v71 = v199;
        uint64_t v73 = v201;
        uint64_t v72 = v202;
        uint64_t v75 = v196;
        uint64_t v74 = v197;
        uint64_t v76 = v200;
        uint64_t v77 = v195;
LABEL_24:
        uint64_t v116 = v194;
        uint64_t v67 = v193;
        uint64_t v207 = v69;
        uint64_t v208 = v76;
        uint64_t v209 = v73;
        uint64_t v210 = v72;
        uint64_t v211 = v77;
        uint64_t v212 = v75;
        uint64_t v213 = v74;
        uint64_t v214 = v70;
        uint64_t v117 = type metadata accessor for TaggedValue_4.ObservableDifference();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v117 - 8) + 56))(v71, 0, 1, v117);
      }
      else
      {
        uint64_t v118 = v187;
        uint64_t v119 = *(void (**)(char *, char *, uint64_t))(v187 + 32);
        uint64_t v120 = v163;
        uint64_t v121 = v203;
        v119(v163, v60, v203);
        uint64_t v122 = v164;
        v119(v164, (char *)v65, v121);
        uint64_t v123 = v167;
        (*(void (**)(char *, uint64_t, uint64_t))(v166 + 40))(v122, v191, v121);
        uint64_t v124 = *(void (**)(char *, uint64_t))(v118 + 8);
        v124(v122, v121);
        v124(v120, v121);
        uint64_t v125 = v165;
        uint64_t v126 = v168;
        int v127 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v165 + 48))(v123, 1, v168);
        uint64_t v129 = v200;
        uint64_t v128 = v201;
        if (v127 == 1)
        {
          (*(void (**)(char *, uint64_t))(v152 + 8))(v123, v153);
          uint64_t v207 = v121;
          uint64_t v208 = v129;
          uint64_t v209 = v128;
LABEL_27:
          uint64_t v210 = v202;
LABEL_28:
          uint64_t v211 = v195;
          uint64_t v212 = v196;
          uint64_t v213 = v197;
          uint64_t v214 = v198;
          uint64_t v130 = type metadata accessor for TaggedValue_4.ObservableDifference();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v130 - 8) + 56))(v199, 1, 1, v130);
        }
        else
        {
          uint64_t v146 = *(void (**)(char *, char *, uint64_t))(v125 + 32);
          uint64_t v147 = v151;
          v146(v151, v123, v126);
          uint64_t v148 = v199;
          v146(v199, v147, v126);
          uint64_t v207 = v121;
          uint64_t v208 = v129;
          uint64_t v209 = v128;
          uint64_t v210 = v202;
          uint64_t v211 = v195;
          uint64_t v212 = v196;
          uint64_t v213 = v197;
          uint64_t v214 = v198;
          uint64_t v143 = type metadata accessor for TaggedValue_4.ObservableDifference();
          swift_storeEnumTagMultiPayload();
          uint64_t v144 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v143 - 8) + 56);
          uint64_t v145 = v148;
LABEL_37:
          v144((uint64_t)v145, 0, 1, v143);
        }
        uint64_t v116 = v192;
      }
      return (*(uint64_t (**)(char *, uint64_t))(v116 + 8))(v68, v67);
  }
}

uint64_t type metadata accessor for TaggedValue_4.ObservableDifference()
{
  return swift_getGenericMetadata();
}

BOOL TaggedValue_5.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  BOOL v5 = swift_getEnumCaseMultiPayload() == 6;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1C41702B0()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_5.taggedEnum.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TaggedValue_5.TaggedEnum();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t type metadata accessor for TaggedValue_5.TaggedEnum()
{
  return swift_getGenericMetadata();
}

uint64_t TaggedValue_5.taggedEnum.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TaggedValue_5.TaggedEnum();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*TaggedValue_5.taggedEnum.modify())(void, void)
{
  return nullsub_1;
}

uint64_t TaggedValue_5.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_5.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_5.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_5.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_5.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_5.init(tag:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  *a3 = a1;
  a3[1] = v3;
  type metadata accessor for TaggedValue_5.TaggedEnum();
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_5.tagged1.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v17[0] = a1[1];
  v17[1] = v17[0];
  long long v6 = a1[3];
  long long v7 = a1[4];
  uint64_t v17[2] = v5;
  v17[3] = v6;
  long long v8 = a1[5];
  v17[4] = v7;
  v17[5] = v8;
  uint64_t v9 = type metadata accessor for TaggedValue_5.TaggedEnum();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v17 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v17 - v11, v3, v9);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v13 = *(void *)&v17[0];
    uint64_t v14 = *(void *)(*(void *)&v17[0] - 8);
    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v14 = *(void *)(*(void *)&v17[0] - 8);
    (*(void (**)(uint64_t, char *))(v14 + 32))(a2, v12);
    uint64_t v13 = *(void *)&v17[0];
    uint64_t v15 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(a2, v15, 1, v13);
}

uint64_t TaggedValue_5.tagged2.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 16);
  long long v13 = *(_OWORD *)(a1 + 24);
  long long v15 = v13;
  long long v16 = *(_OWORD *)(a1 + 40);
  long long v17 = *(_OWORD *)(a1 + 56);
  long long v18 = *(_OWORD *)(a1 + 72);
  uint64_t v19 = v5;
  uint64_t v6 = type metadata accessor for TaggedValue_5.TaggedEnum();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, v3, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, char *))(v10 + 32))(a2, v9);
    uint64_t v11 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v10 + 56))(a2, v11, 1, v13);
}

uint64_t TaggedValue_5.tagged3.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[1];
  v16[0] = a1[2];
  v16[1] = v5;
  long long v6 = a1[3];
  long long v7 = a1[4];
  v16[2] = v16[0];
  v16[3] = v6;
  long long v8 = a1[5];
  v16[4] = v7;
  _OWORD v16[5] = v8;
  uint64_t v9 = type metadata accessor for TaggedValue_5.TaggedEnum();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v16 - v11, v3, v9);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v13 = *(void *)(*(void *)&v16[0] - 8);
    (*(void (**)(uint64_t, char *))(v13 + 32))(a2, v12);
    uint64_t v14 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v13 = *(void *)(*(void *)&v16[0] - 8);
    uint64_t v14 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v13 + 56))(a2, v14, 1, *(void *)&v16[0]);
}

uint64_t TaggedValue_5.tagged4.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 88);
  long long v6 = *(_OWORD *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 32);
  v14[0] = *(_OWORD *)(a1 + 40);
  v14[1] = v6;
  long long v16 = v14[0];
  long long v17 = *(_OWORD *)(a1 + 56);
  long long v18 = *(_OWORD *)(a1 + 72);
  uint64_t v19 = v5;
  uint64_t v7 = type metadata accessor for TaggedValue_5.TaggedEnum();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v14 - v9, v3, v7);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    (*(void (**)(uint64_t, char *))(v11 + 32))(a2, v10);
    uint64_t v12 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    uint64_t v12 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v11 + 56))(a2, v12, 1, *(void *)&v14[0]);
}

uint64_t TaggedValue_5.tagged5.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v14[1] = a1[1];
  _OWORD v14[2] = v5;
  long long v6 = a1[4];
  v14[0] = a1[3];
  _OWORD v14[3] = v14[0];
  _OWORD v14[4] = v6;
  v14[5] = a1[5];
  uint64_t v7 = type metadata accessor for TaggedValue_5.TaggedEnum();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v14 - v9, v3, v7);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    (*(void (**)(uint64_t, char *))(v11 + 32))(a2, v10);
    uint64_t v12 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    uint64_t v12 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v11 + 56))(a2, v12, 1, *(void *)&v14[0]);
}

uint64_t TaggedValue_5.unknown.getter@<X0>(_OWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v13[0] = a1[1];
  v13[1] = v5;
  long long v6 = a1[4];
  v13[2] = a1[3];
  void v13[3] = v6;
  _OWORD v13[4] = a1[5];
  uint64_t v7 = type metadata accessor for TaggedValue_5.TaggedEnum();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v13 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v13 - v9, v3, v7);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 5)
  {
    uint64_t v12 = *((void *)v10 + 1);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v12 = 0;
  }
  *a2 = v12;
  return result;
}

uint64_t TaggedValue_5.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v49 = a1;
  uint64_t v47 = *(void *)(*(void *)(a2 + 48) - 8);
  uint64_t v2 = MEMORY[0x1F4188790](a1);
  uint64_t v46 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = *(void *)(*(void *)(v4 + 40) - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v2);
  uint64_t v43 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = *(void *)(*(void *)(v7 + 32) - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v40 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 24);
  uint64_t v39 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v8);
  uint64_t v38 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v37 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v12);
  long long v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v18[7];
  uint64_t v19 = v18[8];
  uint64_t v21 = v18[9];
  uint64_t v22 = v18[10];
  uint64_t v23 = v18[11];
  uint64_t v51 = v15;
  uint64_t v52 = v11;
  uint64_t v42 = v24;
  uint64_t v53 = v24;
  uint64_t v54 = v25;
  uint64_t v45 = v25;
  uint64_t v48 = v26;
  uint64_t v55 = v26;
  uint64_t v56 = v20;
  uint64_t v57 = v19;
  uint64_t v58 = v21;
  uint64_t v59 = v22;
  uint64_t v60 = v23;
  uint64_t v27 = type metadata accessor for TaggedValue_5.TaggedEnum();
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v36 - v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))((char *)&v36 - v28, v50, v27);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v33 = v39;
      uint64_t v34 = v38;
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v38, v29, v11);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 + 8) + 48))(v49, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v34, v11);
    case 2u:
      long long v17 = v40;
      uint64_t v31 = v41;
      uint64_t v15 = v42;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v40, v29, v42);
      uint64_t v32 = *(void *)(v21 + 8);
      goto LABEL_7;
    case 3u:
      long long v17 = v43;
      uint64_t v31 = v44;
      uint64_t v15 = v45;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v43, v29, v45);
      uint64_t v32 = *(void *)(v22 + 8);
      goto LABEL_7;
    case 4u:
      long long v17 = v46;
      uint64_t v31 = v47;
      uint64_t v15 = v48;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v46, v29, v48);
      uint64_t v32 = *(void *)(v23 + 8);
      goto LABEL_7;
    case 5u:
      (*(void (**)(uint64_t))(**((void **)v29 + 1) + 120))(v49);
      return swift_release();
    default:
      uint64_t v31 = v37;
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v17, v29, v15);
      uint64_t v32 = *(void *)(v20 + 8);
LABEL_7:
      (*(void (**)(uint64_t, uint64_t))(v32 + 48))(v49, v15);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v17, v15);
  }
}

uint64_t TaggedValue_5.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v77 = a1;
  uint64_t v81 = a3;
  uint64_t v72 = *(void *)(*(void *)(a2 + 48) - 8);
  uint64_t v3 = MEMORY[0x1F4188790](a1);
  uint64_t v71 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v70 = (char *)&v63 - v6;
  uint64_t v69 = *(void *)(*(void *)(v7 + 40) - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v68 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v63 - v11;
  uint64_t v67 = *(void *)(*(void *)(v13 + 32) - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v10);
  uint64_t v66 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  long long v18 = (char *)&v63 - v17;
  uint64_t v20 = *(void *)(v19 + 24);
  uint64_t v65 = *(void *)(v20 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v16);
  uint64_t v23 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v26 = (char *)&v63 - v25;
  uint64_t v28 = *(void *)(v27 + 16);
  uint64_t v64 = *(void *)(v28 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v24);
  uint64_t v31 = (char *)&v63 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v33 = (char *)&v63 - v32;
  uint64_t v36 = v34[7];
  uint64_t v35 = v34[8];
  uint64_t v37 = v34[9];
  uint64_t v38 = v34[10];
  uint64_t v39 = v34[11];
  uint64_t v84 = v28;
  uint64_t v85 = v20;
  uint64_t v79 = v41;
  uint64_t v80 = v40;
  uint64_t v86 = v41;
  uint64_t v87 = v40;
  uint64_t v82 = v42;
  uint64_t v88 = v42;
  uint64_t v89 = v36;
  uint64_t v75 = v37;
  uint64_t v76 = v36;
  uint64_t v78 = v35;
  uint64_t v90 = v35;
  uint64_t v91 = v37;
  uint64_t v73 = v39;
  uint64_t v74 = v38;
  uint64_t v92 = v38;
  uint64_t v93 = v39;
  uint64_t v43 = type metadata accessor for TaggedValue_5.TaggedEnum();
  MEMORY[0x1F4188790](v43);
  uint64_t v45 = (char *)&v63 - v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))((char *)&v63 - v44, v83, v43);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v49 = v65;
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v26, v45, v20);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v78 + 8) + 24))(v77, v20);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v26, v20);
      uint64_t result = TaggedValue_5.init(_:)((uint64_t)v23, v20, (uint64_t)v81);
      break;
    case 2u:
      uint64_t v50 = v67;
      uint64_t v51 = v79;
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v18, v45, v79);
      uint64_t v52 = (uint64_t)v66;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v75 + 8) + 24))(v77, v51);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v18, v51);
      uint64_t result = TaggedValue_5.init(_:)(v52, v51, (uint64_t)v81);
      break;
    case 3u:
      uint64_t v53 = v69;
      uint64_t v54 = v80;
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v12, v45, v80);
      uint64_t v55 = (uint64_t)v68;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v74 + 8) + 24))(v77, v54);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v12, v54);
      uint64_t result = TaggedValue_5.init(_:)(v55, v54, (uint64_t)v81);
      break;
    case 4u:
      uint64_t v56 = v72;
      uint64_t v57 = v70;
      uint64_t v58 = v82;
      (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v70, v45, v82);
      uint64_t v59 = (uint64_t)v71;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v73 + 8) + 24))(v77, v58);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v58);
      uint64_t result = TaggedValue_5.init(_:)(v59, v58, (uint64_t)v81);
      break;
    case 5u:
      uint64_t v60 = *(void *)v45;
      uint64_t v61 = (*(uint64_t (**)(uint64_t))(**((void **)v45 + 1) + 104))(v77);
      swift_release();
      uint64_t v62 = v81;
      *uint64_t v81 = v60;
      v62[1] = v61;
      uint64_t v84 = v28;
      uint64_t v85 = v20;
      uint64_t v86 = v79;
      uint64_t v87 = v80;
      uint64_t v88 = v82;
      uint64_t v89 = v76;
      uint64_t v90 = v78;
      uint64_t v91 = v75;
      uint64_t v92 = v74;
      uint64_t v93 = v73;
      type metadata accessor for TaggedValue_5.TaggedEnum();
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
    default:
      uint64_t v47 = v64;
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v33, v45, v28);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v76 + 8) + 24))(v77, v28);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v28);
      uint64_t result = TaggedValue_5.init(_:)((uint64_t)v31, v28, (uint64_t)v81);
      break;
  }
  return result;
}

uint64_t TaggedValue_5.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C41874F0(a1, a2, (void (*)(unint64_t *, uint64_t))TaggedValue_5.copy(renamingReferences:));
}

uint64_t TaggedValue_5.observableDifference(from:with:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v226 = a2;
  v234 = a4;
  uint64_t v241 = a3[11];
  v242 = a1;
  uint64_t v5 = a3[6];
  uint64_t v218 = *(void *)(v241 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v189 = sub_1C4497B38();
  uint64_t v188 = *(void *)(v189 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v189);
  v217 = (char *)&v174 - v8;
  uint64_t v219 = AssociatedTypeWitness;
  uint64_t v216 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v187 = (char *)&v174 - v10;
  uint64_t v225 = *(void *)(v5 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v214 = (char *)&v174 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v213 = (char *)&v174 - v13;
  uint64_t v14 = a3[10];
  uint64_t v15 = a3[5];
  uint64_t v211 = *(void *)(v14 + 8);
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v186 = sub_1C4497B38();
  uint64_t v185 = *(void *)(v186 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v186);
  uint64_t v212 = (char *)&v174 - v18;
  uint64_t v215 = v16;
  uint64_t v210 = *(void *)(v16 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v184 = (char *)&v174 - v20;
  uint64_t v224 = *(void *)(v15 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v208 = (char *)&v174 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v207 = (char *)&v174 - v23;
  uint64_t v24 = a3[9];
  uint64_t v25 = a3[4];
  uint64_t v205 = *(void *)(v24 + 8);
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v183 = sub_1C4497B38();
  uint64_t v182 = *(void *)(v183 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v183);
  uint64_t v206 = (char *)&v174 - v28;
  uint64_t v209 = v26;
  uint64_t v204 = *(void *)(v26 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v181 = (char *)&v174 - v30;
  uint64_t v223 = *(void *)(v25 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v202 = (char *)&v174 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  uint64_t v201 = (char *)&v174 - v33;
  uint64_t v34 = a3[8];
  uint64_t v35 = a3[3];
  uint64_t v199 = *(void *)(v34 + 8);
  uint64_t v36 = swift_getAssociatedTypeWitness();
  uint64_t v180 = sub_1C4497B38();
  uint64_t v179 = *(void *)(v180 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v180);
  uint64_t v200 = (char *)&v174 - v38;
  uint64_t v203 = v36;
  uint64_t v198 = *(void *)(v36 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v178 = (char *)&v174 - v40;
  uint64_t v222 = *(void *)(v35 - 8);
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v197 = (char *)&v174 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v41);
  uint64_t v196 = (char *)&v174 - v43;
  uint64_t v44 = a3[7];
  uint64_t v45 = a3[2];
  uint64_t v193 = *(void *)(v44 + 8);
  uint64_t v46 = swift_getAssociatedTypeWitness();
  uint64_t v177 = sub_1C4497B38();
  uint64_t v176 = *(void *)(v177 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v177);
  uint64_t v194 = (char *)&v174 - v48;
  uint64_t v195 = v46;
  uint64_t v192 = *(void *)(v46 - 8);
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v175 = (char *)&v174 - v50;
  uint64_t v221 = *(void *)(v45 - 8);
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v191 = (char *)&v174 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v51);
  uint64_t v190 = (char *)&v174 - v53;
  uint64_t v238 = v45;
  uint64_t v239 = v35;
  uint64_t v243 = v45;
  uint64_t v244 = v35;
  uint64_t v235 = v25;
  uint64_t v236 = v15;
  uint64_t v245 = v25;
  uint64_t v246 = v15;
  uint64_t v237 = v5;
  uint64_t v247 = v5;
  uint64_t v248 = v44;
  uint64_t v230 = v44;
  uint64_t v231 = v34;
  uint64_t v249 = v34;
  uint64_t v250 = v24;
  uint64_t v232 = v24;
  uint64_t v233 = v14;
  uint64_t v251 = v14;
  uint64_t v252 = v241;
  uint64_t v54 = type metadata accessor for TaggedValue_5.TaggedEnum();
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v56 = MEMORY[0x1F4188790](v54);
  uint64_t v58 = (uint64_t *)((char *)&v174 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v59 = MEMORY[0x1F4188790](v56);
  v220 = (char *)&v174 - v60;
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  uint64_t v63 = (char *)&v174 - v62;
  uint64_t v64 = MEMORY[0x1F4188790](v61);
  uint64_t v66 = (char *)&v174 - v65;
  uint64_t v67 = MEMORY[0x1F4188790](v64);
  uint64_t v69 = (char *)&v174 - v68;
  MEMORY[0x1F4188790](v67);
  uint64_t v71 = (char *)&v174 - v70;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v229 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v73 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v75 = (char *)&v174 - v74;
  uint64_t v228 = v73;
  uint64_t v76 = (uint64_t *)((char *)&v174 + *(int *)(v73 + 48) - v74);
  uint64_t v227 = v55;
  uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 16);
  v77((char *)&v174 - v74, v240, v54);
  v77((char *)v76, (uint64_t)v242, v54);
  v242 = v75;
  uint64_t v78 = v54;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v77(v69, (uint64_t)v242, v54);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v88 = v239;
        (*(void (**)(char *, uint64_t))(v222 + 8))(v69, v239);
        uint64_t v80 = v233;
        uint64_t v81 = v234;
        uint64_t v82 = v241;
        uint64_t v84 = v236;
        uint64_t v83 = v237;
        uint64_t v85 = v232;
        uint64_t v86 = v235;
        uint64_t v87 = v231;
        goto LABEL_28;
      }
      uint64_t v90 = v222;
      uint64_t v91 = *(void (**)(char *, char *, uint64_t))(v222 + 32);
      uint64_t v92 = v196;
      uint64_t v93 = v239;
      v91(v196, v69, v239);
      uint64_t v94 = v197;
      v91(v197, (char *)v76, v93);
      int v95 = v200;
      (*(void (**)(char *, uint64_t, uint64_t))(v199 + 40))(v94, v226, v93);
      uint64_t v96 = *(void (**)(char *, uint64_t))(v90 + 8);
      v96(v94, v93);
      v96(v92, v93);
      uint64_t v97 = v198;
      uint64_t v98 = v203;
      int v99 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v198 + 48))(v95, 1, v203);
      uint64_t v101 = v236;
      uint64_t v100 = v237;
      if (v99 == 1)
      {
        (*(void (**)(char *, uint64_t))(v179 + 8))(v95, v180);
        uint64_t v243 = v238;
        uint64_t v244 = v93;
        goto LABEL_32;
      }
      uint64_t v156 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
      uint64_t v157 = v178;
      v156(v178, v95, v98);
      uint64_t v158 = v234;
      v156(v234, v157, v98);
      uint64_t v243 = v238;
      uint64_t v244 = v93;
      uint64_t v245 = v235;
      uint64_t v246 = v101;
      uint64_t v247 = v100;
      uint64_t v248 = v230;
      uint64_t v249 = v231;
      uint64_t v250 = v232;
      uint64_t v251 = v233;
      uint64_t v252 = v241;
      uint64_t v159 = type metadata accessor for TaggedValue_5.ObservableDifference();
      goto LABEL_41;
    case 2u:
      v77(v66, (uint64_t)v242, v54);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        uint64_t v86 = v235;
        (*(void (**)(char *, uint64_t))(v223 + 8))(v66, v235);
        uint64_t v80 = v233;
        uint64_t v81 = v234;
        uint64_t v82 = v241;
        uint64_t v84 = v236;
        uint64_t v83 = v237;
        uint64_t v85 = v232;
        goto LABEL_27;
      }
      uint64_t v102 = v223;
      uint64_t v103 = *(void (**)(char *, char *, uint64_t))(v223 + 32);
      uint64_t v104 = v201;
      uint64_t v105 = v235;
      v103(v201, v66, v235);
      uint64_t v106 = v202;
      v103(v202, (char *)v76, v105);
      uint64_t v107 = v206;
      (*(void (**)(char *, uint64_t, uint64_t))(v205 + 40))(v106, v226, v105);
      uint64_t v108 = *(void (**)(char *, uint64_t))(v102 + 8);
      v108(v106, v105);
      v108(v104, v105);
      uint64_t v109 = v204;
      uint64_t v110 = v209;
      int v111 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v204 + 48))(v107, 1, v209);
      uint64_t v112 = v236;
      uint64_t v114 = v238;
      uint64_t v113 = v239;
      if (v111 == 1)
      {
        (*(void (**)(char *, uint64_t))(v182 + 8))(v107, v183);
        uint64_t v243 = v114;
        uint64_t v244 = v113;
        uint64_t v245 = v105;
        uint64_t v246 = v112;
        goto LABEL_19;
      }
      uint64_t v160 = *(void (**)(char *, char *, uint64_t))(v109 + 32);
      uint64_t v161 = v181;
      v160(v181, v107, v110);
      uint64_t v162 = v234;
      v160(v234, v161, v110);
      uint64_t v243 = v114;
      uint64_t v244 = v113;
      uint64_t v245 = v105;
      uint64_t v246 = v112;
      uint64_t v247 = v237;
      uint64_t v248 = v230;
      uint64_t v249 = v231;
      uint64_t v250 = v232;
      uint64_t v251 = v233;
      uint64_t v252 = v241;
      uint64_t v159 = type metadata accessor for TaggedValue_5.ObservableDifference();
      goto LABEL_39;
    case 3u:
      v77(v63, (uint64_t)v242, v54);
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        uint64_t v84 = v236;
        (*(void (**)(char *, uint64_t))(v224 + 8))(v63, v236);
        uint64_t v80 = v233;
        uint64_t v81 = v234;
        uint64_t v82 = v241;
        uint64_t v83 = v237;
        goto LABEL_26;
      }
      uint64_t v115 = v224;
      uint64_t v116 = *(void (**)(char *, char *, uint64_t))(v224 + 32);
      uint64_t v117 = v207;
      uint64_t v101 = v236;
      v116(v207, v63, v236);
      uint64_t v118 = v208;
      v116(v208, (char *)v76, v101);
      uint64_t v119 = v212;
      (*(void (**)(char *, uint64_t, uint64_t))(v211 + 40))(v118, v226, v101);
      uint64_t v120 = *(void (**)(char *, uint64_t))(v115 + 8);
      v120(v118, v101);
      v120(v117, v101);
      uint64_t v121 = v210;
      uint64_t v122 = v215;
      int v123 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v210 + 48))(v119, 1, v215);
      uint64_t v100 = v237;
      uint64_t v124 = v238;
      if (v123 == 1)
      {
        (*(void (**)(char *, uint64_t))(v185 + 8))(v119, v186);
        uint64_t v243 = v124;
        uint64_t v244 = v239;
        goto LABEL_32;
      }
      uint64_t v163 = *(void (**)(char *, char *, uint64_t))(v121 + 32);
      uint64_t v164 = v184;
      v163(v184, v119, v122);
      uint64_t v165 = v234;
      v163(v234, v164, v122);
      uint64_t v243 = v124;
      uint64_t v244 = v239;
      uint64_t v245 = v235;
      uint64_t v246 = v101;
      uint64_t v247 = v100;
      uint64_t v248 = v230;
      uint64_t v249 = v231;
      uint64_t v250 = v232;
      uint64_t v251 = v233;
      uint64_t v252 = v241;
      uint64_t v159 = type metadata accessor for TaggedValue_5.ObservableDifference();
      swift_storeEnumTagMultiPayload();
      uint64_t v166 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v159 - 8) + 56);
      uint64_t v167 = v165;
      goto LABEL_43;
    case 4u:
      uint64_t v125 = v220;
      v77(v220, (uint64_t)v242, v54);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        uint64_t v83 = v237;
        (*(void (**)(char *, uint64_t))(v225 + 8))(v125, v237);
        uint64_t v81 = v234;
        uint64_t v82 = v241;
        goto LABEL_25;
      }
      uint64_t v126 = v225;
      int v127 = *(void (**)(char *, char *, uint64_t))(v225 + 32);
      uint64_t v128 = v213;
      uint64_t v129 = v125;
      uint64_t v100 = v237;
      v127(v213, v129, v237);
      uint64_t v130 = v214;
      v127(v214, (char *)v76, v100);
      uint64_t v131 = v217;
      (*(void (**)(char *, uint64_t, uint64_t))(v218 + 40))(v130, v226, v100);
      uint64_t v132 = *(void (**)(char *, uint64_t))(v126 + 8);
      v132(v130, v100);
      v132(v128, v100);
      uint64_t v133 = v216;
      uint64_t v134 = v219;
      int v135 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v216 + 48))(v131, 1, v219);
      uint64_t v136 = v235;
      uint64_t v138 = v238;
      uint64_t v137 = v239;
      if (v135 == 1)
      {
        (*(void (**)(char *, uint64_t))(v188 + 8))(v131, v189);
        uint64_t v243 = v138;
        uint64_t v244 = v137;
        uint64_t v245 = v136;
        uint64_t v246 = v236;
        goto LABEL_33;
      }
      uint64_t v168 = *(void (**)(char *, char *, uint64_t))(v133 + 32);
      uint64_t v169 = v187;
      v168(v187, v131, v134);
      uint64_t v162 = v234;
      v168(v234, v169, v134);
      uint64_t v243 = v138;
      uint64_t v244 = v137;
      uint64_t v245 = v136;
      uint64_t v246 = v236;
      uint64_t v247 = v100;
      uint64_t v248 = v230;
      uint64_t v249 = v231;
      uint64_t v250 = v232;
      uint64_t v251 = v233;
      uint64_t v252 = v241;
      uint64_t v159 = type metadata accessor for TaggedValue_5.ObservableDifference();
LABEL_39:
      swift_storeEnumTagMultiPayload();
      uint64_t v166 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v159 - 8) + 56);
      uint64_t v167 = v162;
      goto LABEL_43;
    case 5u:
      v77((char *)v58, (uint64_t)v242, v54);
      if (swift_getEnumCaseMultiPayload() != 5)
      {
        swift_release();
        uint64_t v81 = v234;
        uint64_t v82 = v241;
        uint64_t v83 = v237;
LABEL_25:
        uint64_t v80 = v233;
        uint64_t v84 = v236;
LABEL_26:
        uint64_t v85 = v232;
        uint64_t v86 = v235;
LABEL_27:
        uint64_t v87 = v231;
        uint64_t v88 = v239;
LABEL_28:
        uint64_t v89 = v230;
        uint64_t v79 = v238;
        goto LABEL_29;
      }
      uint64_t v139 = *v58;
      uint64_t v140 = *v76;
      swift_release();
      swift_release();
      if (v139 != v140)
      {
        uint64_t v243 = v238;
        uint64_t v244 = v239;
        uint64_t v245 = v235;
        uint64_t v246 = v236;
        uint64_t v247 = v237;
        uint64_t v248 = v230;
        uint64_t v249 = v231;
        uint64_t v250 = v232;
        uint64_t v251 = v233;
        uint64_t v252 = v241;
        uint64_t v159 = type metadata accessor for TaggedValue_5.ObservableDifference();
        uint64_t v158 = v234;
LABEL_41:
        swift_storeEnumTagMultiPayload();
        uint64_t v166 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v159 - 8) + 56);
        uint64_t v167 = v158;
        goto LABEL_43;
      }
      uint64_t v243 = v238;
      uint64_t v244 = v239;
      uint64_t v245 = v235;
      uint64_t v246 = v236;
LABEL_19:
      uint64_t v247 = v237;
      goto LABEL_34;
    default:
      v77(v71, (uint64_t)v242, v54);
      if (swift_getEnumCaseMultiPayload())
      {
        uint64_t v79 = v238;
        (*(void (**)(char *, uint64_t))(v221 + 8))(v71, v238);
        uint64_t v80 = v233;
        uint64_t v81 = v234;
        uint64_t v82 = v241;
        uint64_t v84 = v236;
        uint64_t v83 = v237;
        uint64_t v85 = v232;
        uint64_t v86 = v235;
        uint64_t v87 = v231;
        uint64_t v88 = v239;
        uint64_t v89 = v230;
LABEL_29:
        uint64_t v141 = v229;
        uint64_t v142 = v228;
        uint64_t v243 = v79;
        uint64_t v244 = v88;
        uint64_t v245 = v86;
        uint64_t v246 = v84;
        uint64_t v247 = v83;
        uint64_t v248 = v89;
        uint64_t v249 = v87;
        uint64_t v250 = v85;
        uint64_t v251 = v80;
        uint64_t v252 = v82;
        uint64_t v143 = type metadata accessor for TaggedValue_5.ObservableDifference();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v143 - 8) + 56))(v81, 0, 1, v143);
      }
      else
      {
        uint64_t v144 = v221;
        uint64_t v145 = *(void (**)(char *, char *, uint64_t))(v221 + 32);
        uint64_t v146 = v190;
        uint64_t v147 = v238;
        v145(v190, v71, v238);
        uint64_t v148 = v191;
        v145(v191, (char *)v76, v147);
        uint64_t v149 = v194;
        (*(void (**)(char *, uint64_t, uint64_t))(v193 + 40))(v148, v226, v147);
        uint64_t v150 = *(void (**)(char *, uint64_t))(v144 + 8);
        v150(v148, v147);
        v150(v146, v147);
        uint64_t v151 = v192;
        uint64_t v152 = v195;
        int v153 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v192 + 48))(v149, 1, v195);
        uint64_t v101 = v236;
        uint64_t v100 = v237;
        uint64_t v154 = v239;
        if (v153 == 1)
        {
          (*(void (**)(char *, uint64_t))(v176 + 8))(v149, v177);
          uint64_t v243 = v147;
          uint64_t v244 = v154;
LABEL_32:
          uint64_t v245 = v235;
          uint64_t v246 = v101;
LABEL_33:
          uint64_t v247 = v100;
LABEL_34:
          uint64_t v248 = v230;
          uint64_t v249 = v231;
          uint64_t v250 = v232;
          uint64_t v251 = v233;
          uint64_t v252 = v241;
          uint64_t v155 = type metadata accessor for TaggedValue_5.ObservableDifference();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v155 - 8) + 56))(v234, 1, 1, v155);
        }
        else
        {
          uint64_t v170 = *(void (**)(char *, char *, uint64_t))(v151 + 32);
          uint64_t v171 = v175;
          v170(v175, v149, v152);
          uint64_t v172 = v234;
          v170(v234, v171, v152);
          uint64_t v243 = v147;
          uint64_t v244 = v154;
          uint64_t v245 = v235;
          uint64_t v246 = v101;
          uint64_t v247 = v100;
          uint64_t v248 = v230;
          uint64_t v249 = v231;
          uint64_t v250 = v232;
          uint64_t v251 = v233;
          uint64_t v252 = v241;
          uint64_t v159 = type metadata accessor for TaggedValue_5.ObservableDifference();
          swift_storeEnumTagMultiPayload();
          uint64_t v166 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v159 - 8) + 56);
          uint64_t v167 = v172;
LABEL_43:
          v166((uint64_t)v167, 0, 1, v159);
        }
        uint64_t v141 = v227;
        uint64_t v142 = v78;
      }
      return (*(uint64_t (**)(char *, uint64_t))(v141 + 8))(v242, v142);
  }
}

uint64_t type metadata accessor for TaggedValue_5.ObservableDifference()
{
  return swift_getGenericMetadata();
}

BOOL TaggedValue_6.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  BOOL v5 = swift_getEnumCaseMultiPayload() == 7;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1C4173B70()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_6.taggedEnum.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TaggedValue_6.TaggedEnum();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t type metadata accessor for TaggedValue_6.TaggedEnum()
{
  return swift_getGenericMetadata();
}

uint64_t TaggedValue_6.taggedEnum.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TaggedValue_6.TaggedEnum();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*TaggedValue_6.taggedEnum.modify())(void, void)
{
  return nullsub_1;
}

uint64_t TaggedValue_6.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_6.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_6.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_6.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_6.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_6.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_6.init(tag:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  *a3 = a1;
  a3[1] = v3;
  type metadata accessor for TaggedValue_6.TaggedEnum();
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_6.tagged1.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v18[0] = a1[1];
  v18[1] = v18[0];
  long long v6 = a1[3];
  long long v7 = a1[4];
  v18[2] = v5;
  v18[3] = v6;
  long long v8 = a1[5];
  long long v9 = a1[6];
  v18[4] = v7;
  void v18[5] = v8;
  _DWORD v18[6] = v9;
  uint64_t v10 = type metadata accessor for TaggedValue_6.TaggedEnum();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v18 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v18 - v12, v3, v10);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v14 = *(void *)&v18[0];
    uint64_t v15 = *(void *)(*(void *)&v18[0] - 8);
    uint64_t v16 = 1;
  }
  else
  {
    uint64_t v15 = *(void *)(*(void *)&v18[0] - 8);
    (*(void (**)(uint64_t, char *))(v15 + 32))(a2, v13);
    uint64_t v14 = *(void *)&v18[0];
    uint64_t v16 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a2, v16, 1, v14);
}

uint64_t TaggedValue_6.tagged2.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v14 = *(void *)(a1 + 16);
  long long v13 = *(_OWORD *)(a1 + 24);
  long long v15 = v13;
  long long v16 = *(_OWORD *)(a1 + 40);
  long long v17 = *(_OWORD *)(a1 + 56);
  long long v18 = *(_OWORD *)(a1 + 72);
  long long v19 = *(_OWORD *)(a1 + 88);
  uint64_t v20 = v5;
  uint64_t v6 = type metadata accessor for TaggedValue_6.TaggedEnum();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  long long v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, v3, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, char *))(v10 + 32))(a2, v9);
    uint64_t v11 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v10 + 56))(a2, v11, 1, v13);
}

uint64_t TaggedValue_6.tagged3.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[1];
  v17[0] = a1[2];
  v17[1] = v5;
  long long v6 = a1[3];
  long long v7 = a1[4];
  uint64_t v17[2] = v17[0];
  v17[3] = v6;
  long long v8 = a1[5];
  long long v9 = a1[6];
  v17[4] = v7;
  v17[5] = v8;
  _OWORD v17[6] = v9;
  uint64_t v10 = type metadata accessor for TaggedValue_6.TaggedEnum();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  long long v13 = (char *)v17 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v17 - v12, v3, v10);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v14 = *(void *)(*(void *)&v17[0] - 8);
    (*(void (**)(uint64_t, char *))(v14 + 32))(a2, v13);
    uint64_t v15 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v14 = *(void *)(*(void *)&v17[0] - 8);
    uint64_t v15 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v14 + 56))(a2, v15, 1, *(void *)&v17[0]);
}

uint64_t TaggedValue_6.tagged4.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 104);
  long long v6 = *(_OWORD *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 32);
  v14[0] = *(_OWORD *)(a1 + 40);
  v14[1] = v6;
  long long v16 = v14[0];
  long long v17 = *(_OWORD *)(a1 + 56);
  long long v18 = *(_OWORD *)(a1 + 72);
  long long v19 = *(_OWORD *)(a1 + 88);
  uint64_t v20 = v5;
  uint64_t v7 = type metadata accessor for TaggedValue_6.TaggedEnum();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v14 - v9, v3, v7);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    (*(void (**)(uint64_t, char *))(v11 + 32))(a2, v10);
    uint64_t v12 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    uint64_t v12 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v11 + 56))(a2, v12, 1, *(void *)&v14[0]);
}

uint64_t TaggedValue_6.tagged5.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v15[1] = a1[1];
  void v15[2] = v5;
  long long v6 = a1[4];
  v15[0] = a1[3];
  v15[3] = v15[0];
  _OWORD v15[4] = v6;
  long long v7 = a1[6];
  _OWORD v15[5] = a1[5];
  v15[6] = v7;
  uint64_t v8 = type metadata accessor for TaggedValue_6.TaggedEnum();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v15 - v10, v3, v8);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    (*(void (**)(uint64_t, char *))(v12 + 32))(a2, v11);
    uint64_t v13 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    uint64_t v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v12 + 56))(a2, v13, 1, *(void *)&v15[0]);
}

uint64_t TaggedValue_6.tagged6.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 104);
  long long v7 = *(_OWORD *)(a1 + 32);
  v15[1] = *(_OWORD *)(a1 + 16);
  void v15[2] = v7;
  uint64_t v16 = v5;
  v15[0] = *(_OWORD *)(a1 + 56);
  long long v17 = v15[0];
  long long v18 = *(_OWORD *)(a1 + 72);
  long long v19 = *(_OWORD *)(a1 + 88);
  uint64_t v20 = v6;
  uint64_t v8 = type metadata accessor for TaggedValue_6.TaggedEnum();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v15 - v10, v3, v8);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    (*(void (**)(uint64_t, char *))(v12 + 32))(a2, v11);
    uint64_t v13 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    uint64_t v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v12 + 56))(a2, v13, 1, *(void *)&v15[0]);
}

uint64_t TaggedValue_6.unknown.getter@<X0>(_OWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v14[0] = a1[1];
  v14[1] = v5;
  long long v6 = a1[4];
  _OWORD v14[2] = a1[3];
  _OWORD v14[3] = v6;
  long long v7 = a1[6];
  _OWORD v14[4] = a1[5];
  v14[5] = v7;
  uint64_t v8 = type metadata accessor for TaggedValue_6.TaggedEnum();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v14 - v10, v3, v8);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 6)
  {
    uint64_t v13 = *((void *)v11 + 1);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v13 = 0;
  }
  *a2 = v13;
  return result;
}

uint64_t TaggedValue_6.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v62 = a1;
  uint64_t v59 = *(void *)(*(void *)(a2 + 56) - 8);
  uint64_t v2 = MEMORY[0x1F4188790](a1);
  uint64_t v58 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = *(void *)(*(void *)(v4 + 48) - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v2);
  uint64_t v55 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = *(void *)(*(void *)(v7 + 40) - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v52 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = *(void *)(*(void *)(v10 + 32) - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v49 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 24);
  uint64_t v48 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v11);
  uint64_t v47 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v46 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v45 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v20[8];
  uint64_t v21 = v20[9];
  uint64_t v23 = v20[10];
  uint64_t v24 = v20[11];
  uint64_t v26 = v20[12];
  uint64_t v25 = v20[13];
  uint64_t v63 = v18;
  uint64_t v64 = v14;
  uint64_t v51 = v27;
  uint64_t v65 = v27;
  uint64_t v66 = v28;
  uint64_t v54 = v28;
  uint64_t v57 = v29;
  uint64_t v67 = v29;
  uint64_t v68 = v30;
  uint64_t v60 = v30;
  uint64_t v69 = v22;
  uint64_t v70 = v21;
  uint64_t v71 = v23;
  uint64_t v72 = v24;
  uint64_t v73 = v26;
  uint64_t v74 = v25;
  uint64_t v31 = type metadata accessor for TaggedValue_6.TaggedEnum();
  MEMORY[0x1F4188790](v31);
  uint64_t v33 = (char *)&v44 - v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))((char *)&v44 - v32, v61, v31);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v38 = v48;
      uint64_t v39 = v47;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v47, v33, v14);
      uint64_t v40 = *(void *)(v21 + 8);
      goto LABEL_7;
    case 2u:
      uint64_t v38 = v50;
      uint64_t v39 = v49;
      uint64_t v14 = v51;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v49, v33, v51);
      uint64_t v40 = *(void *)(v23 + 8);
      goto LABEL_7;
    case 3u:
      uint64_t v38 = v53;
      uint64_t v39 = v52;
      uint64_t v14 = v54;
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v52, v33, v54);
      uint64_t v40 = *(void *)(v24 + 8);
      goto LABEL_7;
    case 4u:
      uint64_t v39 = v55;
      uint64_t v38 = v56;
      uint64_t v14 = v57;
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v55, v33, v57);
      uint64_t v40 = *(void *)(v26 + 8);
LABEL_7:
      (*(void (**)(uint64_t, uint64_t))(v40 + 48))(v62, v14);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v39, v14);
      break;
    case 5u:
      uint64_t v42 = v58;
      uint64_t v41 = v59;
      uint64_t v43 = v60;
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v58, v33, v60);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 + 8) + 48))(v62, v43);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v42, v43);
      break;
    case 6u:
      (*(void (**)(uint64_t))(**((void **)v33 + 1) + 120))(v62);
      uint64_t result = swift_release();
      break;
    default:
      uint64_t v35 = v46;
      uint64_t v36 = v45;
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v45, v33, v18);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 + 8) + 48))(v62, v18);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v36, v18);
      break;
  }
  return result;
}

uint64_t TaggedValue_6.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v92 = a1;
  uint64_t v98 = a3;
  uint64_t v85 = *(void *)(*(void *)(a2 + 56) - 8);
  uint64_t v3 = MEMORY[0x1F4188790](a1);
  uint64_t v84 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v83 = (char *)&v75 - v6;
  uint64_t v82 = *(void *)(*(void *)(v7 + 48) - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v81 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v80 = (char *)&v75 - v11;
  uint64_t v79 = *(void *)(*(void *)(v12 + 40) - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v78 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v75 - v15;
  uint64_t v18 = *(void *)(v17 + 32);
  uint64_t v77 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v24 = (char *)&v75 - v23;
  uint64_t v76 = *(void *)(*(void *)(v25 + 24) - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v22);
  uint64_t v28 = (char *)&v75 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  uint64_t v31 = (char *)&v75 - v30;
  uint64_t v33 = *(void *)(v32 + 16);
  uint64_t v75 = *(void *)(v33 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v29);
  uint64_t v36 = (char *)&v75 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x1F4188790](v34);
  uint64_t v39 = (char *)&v75 - v38;
  uint64_t v41 = v40[8];
  uint64_t v42 = v40[9];
  uint64_t v43 = v40[10];
  uint64_t v44 = v40[11];
  uint64_t v45 = v40[12];
  uint64_t v46 = v40[13];
  uint64_t v100 = v33;
  uint64_t v101 = v47;
  uint64_t v94 = v47;
  uint64_t v95 = v37;
  uint64_t v102 = v37;
  uint64_t v103 = v48;
  uint64_t v96 = v48;
  uint64_t v97 = v49;
  uint64_t v104 = v49;
  uint64_t v105 = v50;
  uint64_t v99 = v50;
  uint64_t v93 = v41;
  uint64_t v106 = v41;
  uint64_t v107 = v42;
  uint64_t v91 = v42;
  uint64_t v90 = v43;
  uint64_t v108 = v43;
  uint64_t v109 = v44;
  uint64_t v89 = v44;
  uint64_t v88 = v45;
  uint64_t v110 = v45;
  uint64_t v111 = v46;
  uint64_t v87 = v46;
  uint64_t v51 = type metadata accessor for TaggedValue_6.TaggedEnum();
  MEMORY[0x1F4188790](v51);
  uint64_t v53 = (char *)&v75 - v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))((char *)&v75 - v52, v86, v51);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v57 = v76;
      uint64_t v58 = v94;
      (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v31, v53, v94);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 + 8) + 24))(v92, v58);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v31, v58);
      uint64_t result = TaggedValue_6.init(_:)((uint64_t)v28, v58, (uint64_t)v98);
      break;
    case 2u:
      uint64_t v59 = v77;
      uint64_t v60 = v95;
      (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v24, v53, v95);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v90 + 8) + 24))(v92, v60);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v24, v60);
      uint64_t result = TaggedValue_6.init(_:)((uint64_t)v21, v60, (uint64_t)v98);
      break;
    case 3u:
      uint64_t v61 = v79;
      uint64_t v62 = v96;
      (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v16, v53, v96);
      uint64_t v63 = (uint64_t)v78;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v89 + 8) + 24))(v92, v62);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v16, v62);
      uint64_t result = TaggedValue_6.init(_:)(v63, v62, (uint64_t)v98);
      break;
    case 4u:
      uint64_t v64 = v82;
      uint64_t v65 = v80;
      uint64_t v66 = v97;
      (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v80, v53, v97);
      uint64_t v67 = (uint64_t)v81;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v88 + 8) + 24))(v92, v66);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
      uint64_t result = TaggedValue_6.init(_:)(v67, v66, (uint64_t)v98);
      break;
    case 5u:
      uint64_t v68 = v85;
      uint64_t v69 = v83;
      uint64_t v70 = v99;
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v83, v53, v99);
      uint64_t v71 = (uint64_t)v84;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v87 + 8) + 24))(v92, v70);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
      uint64_t result = TaggedValue_6.init(_:)(v71, v70, (uint64_t)v98);
      break;
    case 6u:
      uint64_t v72 = *(void *)v53;
      uint64_t v73 = (*(uint64_t (**)(uint64_t))(**((void **)v53 + 1) + 104))(v92);
      swift_release();
      uint64_t v74 = v98;
      void *v98 = v72;
      v74[1] = v73;
      uint64_t v100 = v33;
      uint64_t v101 = v94;
      uint64_t v102 = v95;
      uint64_t v103 = v96;
      uint64_t v104 = v97;
      uint64_t v105 = v99;
      uint64_t v106 = v93;
      uint64_t v107 = v91;
      uint64_t v108 = v90;
      uint64_t v109 = v89;
      uint64_t v110 = v88;
      uint64_t v111 = v87;
      type metadata accessor for TaggedValue_6.TaggedEnum();
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
    default:
      uint64_t v55 = v75;
      (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v39, v53, v33);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v93 + 8) + 24))(v92, v33);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v39, v33);
      uint64_t result = TaggedValue_6.init(_:)((uint64_t)v36, v33, (uint64_t)v98);
      break;
  }
  return result;
}

uint64_t TaggedValue_6.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C41874F0(a1, a2, (void (*)(unint64_t *, uint64_t))TaggedValue_6.copy(renamingReferences:));
}

uint64_t TaggedValue_6.observableDifference(from:with:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v278 = a2;
  v293 = a1;
  v286 = a4;
  uint64_t v295 = a3[13];
  uint64_t v5 = a3[7];
  uint64_t v267 = *(void *)(v295 + 8);
  uint64_t v6 = v5;
  uint64_t v296 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v232 = sub_1C4497B38();
  uint64_t v231 = *(void *)(v232 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v232);
  v266 = (char *)&v214 - v9;
  uint64_t v268 = AssociatedTypeWitness;
  uint64_t v265 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v230 = (char *)&v214 - v11;
  uint64_t v277 = *(void *)(v6 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  v263 = (char *)&v214 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  v262 = (char *)&v214 - v14;
  uint64_t v294 = a3[12];
  uint64_t v15 = a3[6];
  uint64_t v260 = *(void *)(v294 + 8);
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v229 = sub_1C4497B38();
  uint64_t v228 = *(void *)(v229 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v229);
  v261 = (char *)&v214 - v18;
  uint64_t v264 = v16;
  uint64_t v259 = *(void *)(v16 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v227 = (char *)&v214 - v20;
  uint64_t v276 = *(void *)(v15 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  v257 = (char *)&v214 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  v256 = (char *)&v214 - v23;
  uint64_t v24 = a3[11];
  uint64_t v25 = a3[5];
  uint64_t v254 = *(void *)(v24 + 8);
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v226 = sub_1C4497B38();
  uint64_t v225 = *(void *)(v226 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v226);
  v255 = (char *)&v214 - v28;
  uint64_t v258 = v26;
  uint64_t v253 = *(void *)(v26 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v224 = (char *)&v214 - v30;
  uint64_t v275 = *(void *)(v25 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v251 = (char *)&v214 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  uint64_t v250 = (char *)&v214 - v33;
  uint64_t v34 = a3[10];
  uint64_t v35 = a3[4];
  uint64_t v248 = *(void *)(v34 + 8);
  uint64_t v36 = swift_getAssociatedTypeWitness();
  uint64_t v223 = sub_1C4497B38();
  uint64_t v222 = *(void *)(v223 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v223);
  uint64_t v249 = (char *)&v214 - v38;
  uint64_t v252 = v36;
  uint64_t v247 = *(void *)(v36 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v221 = (char *)&v214 - v40;
  uint64_t v274 = *(void *)(v35 - 8);
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v245 = (char *)&v214 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v41);
  uint64_t v244 = (char *)&v214 - v43;
  uint64_t v44 = a3[9];
  uint64_t v45 = a3[3];
  uint64_t v242 = *(void *)(v44 + 8);
  uint64_t v46 = swift_getAssociatedTypeWitness();
  uint64_t v220 = sub_1C4497B38();
  uint64_t v219 = *(void *)(v220 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v220);
  uint64_t v243 = (char *)&v214 - v48;
  uint64_t v246 = v46;
  uint64_t v241 = *(void *)(v46 - 8);
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v218 = (char *)&v214 - v50;
  uint64_t v273 = *(void *)(v45 - 8);
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v240 = (char *)&v214 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v51);
  uint64_t v239 = (char *)&v214 - v53;
  uint64_t v54 = a3[8];
  uint64_t v55 = a3[2];
  uint64_t v236 = *(void *)(v54 + 8);
  uint64_t v56 = swift_getAssociatedTypeWitness();
  uint64_t v217 = sub_1C4497B38();
  uint64_t v216 = *(void *)(v217 - 8);
  uint64_t v57 = MEMORY[0x1F4188790](v217);
  uint64_t v237 = (char *)&v214 - v58;
  uint64_t v238 = v56;
  uint64_t v235 = *(void *)(v56 - 8);
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v215 = (char *)&v214 - v60;
  uint64_t v269 = *(void *)(v55 - 8);
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  v234 = (char *)&v214 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v61);
  uint64_t v233 = (char *)&v214 - v63;
  uint64_t v288 = v45;
  uint64_t v289 = v55;
  uint64_t v297 = v55;
  uint64_t v298 = v45;
  uint64_t v292 = v35;
  uint64_t v299 = v35;
  uint64_t v300 = v25;
  uint64_t v287 = v25;
  uint64_t v291 = v15;
  uint64_t v301 = v15;
  uint64_t v302 = v296;
  uint64_t v282 = v54;
  uint64_t v303 = v54;
  uint64_t v304 = v44;
  uint64_t v283 = v44;
  uint64_t v284 = v34;
  uint64_t v305 = v34;
  uint64_t v306 = v24;
  uint64_t v285 = v24;
  uint64_t v307 = v294;
  uint64_t v308 = v295;
  uint64_t v64 = type metadata accessor for TaggedValue_6.TaggedEnum();
  uint64_t v65 = *(void *)(v64 - 8);
  uint64_t v66 = MEMORY[0x1F4188790](v64);
  v271 = (char *)&v214 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = MEMORY[0x1F4188790](v66);
  v272 = (char *)&v214 - v69;
  uint64_t v70 = MEMORY[0x1F4188790](v68);
  v270 = (char *)&v214 - v71;
  uint64_t v72 = MEMORY[0x1F4188790](v70);
  uint64_t v74 = (char *)&v214 - v73;
  uint64_t v75 = MEMORY[0x1F4188790](v72);
  uint64_t v77 = (char *)&v214 - v76;
  uint64_t v78 = MEMORY[0x1F4188790](v75);
  uint64_t v80 = (char *)&v214 - v79;
  MEMORY[0x1F4188790](v78);
  uint64_t v82 = (char *)&v214 - v81;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v281 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v84 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v86 = (char *)&v214 - v85;
  uint64_t v280 = v84;
  uint64_t v87 = (char *)&v214 + *(int *)(v84 + 48) - v85;
  uint64_t v279 = v65;
  uint64_t v88 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
  v88((char *)&v214 - v85, v290, v64);
  uint64_t v89 = v87;
  v88(v87, (uint64_t)v293, v64);
  v293 = v86;
  uint64_t v90 = v64;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v91 = v293;
      v88(v80, (uint64_t)v293, v64);
      uint64_t v106 = v89;
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v104 = v288;
        (*(void (**)(char *, uint64_t))(v273 + 8))(v80, v288);
        uint64_t v94 = v286;
        uint64_t v95 = v295;
        uint64_t v96 = v296;
        uint64_t v97 = v294;
        uint64_t v98 = v291;
        uint64_t v99 = v292;
        uint64_t v100 = v285;
        uint64_t v101 = v287;
        uint64_t v102 = v284;
        uint64_t v103 = v283;
        goto LABEL_33;
      }
      uint64_t v107 = v273;
      uint64_t v108 = *(void (**)(char *, char *, uint64_t))(v273 + 32);
      uint64_t v109 = v239;
      uint64_t v110 = v288;
      v108(v239, v80, v288);
      uint64_t v111 = v240;
      v108(v240, v106, v110);
      uint64_t v112 = v243;
      (*(void (**)(char *, uint64_t, uint64_t))(v242 + 40))(v111, v278, v110);
      uint64_t v113 = *(void (**)(char *, uint64_t))(v107 + 8);
      v113(v111, v110);
      v113(v109, v110);
      uint64_t v114 = v241;
      uint64_t v115 = v246;
      int v116 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v241 + 48))(v112, 1, v246);
      uint64_t v117 = v296;
      uint64_t v118 = v291;
      uint64_t v119 = v289;
      if (v116 == 1)
      {
        (*(void (**)(char *, uint64_t))(v219 + 8))(v112, v220);
        uint64_t v297 = v119;
        uint64_t v298 = v110;
        uint64_t v299 = v292;
        uint64_t v300 = v287;
        uint64_t v301 = v118;
        goto LABEL_13;
      }
      uint64_t v193 = *(void (**)(char *, char *, uint64_t))(v114 + 32);
      uint64_t v194 = v218;
      v193(v218, v112, v115);
      uint64_t v195 = v286;
      v193(v286, v194, v115);
      uint64_t v297 = v119;
      uint64_t v298 = v110;
      uint64_t v299 = v292;
      uint64_t v300 = v287;
      uint64_t v301 = v118;
      uint64_t v302 = v296;
      uint64_t v303 = v282;
      uint64_t v304 = v283;
      uint64_t v305 = v284;
      uint64_t v306 = v285;
      uint64_t v307 = v294;
      uint64_t v308 = v295;
      uint64_t v196 = type metadata accessor for TaggedValue_6.ObservableDifference();
      goto LABEL_44;
    case 2u:
      uint64_t v91 = v293;
      v88(v77, (uint64_t)v293, v64);
      uint64_t v120 = v89;
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        uint64_t v99 = v292;
        (*(void (**)(char *, uint64_t))(v274 + 8))(v77, v292);
        uint64_t v94 = v286;
        uint64_t v95 = v295;
        uint64_t v96 = v296;
        uint64_t v97 = v294;
        uint64_t v98 = v291;
        uint64_t v100 = v285;
        uint64_t v101 = v287;
        uint64_t v102 = v284;
        goto LABEL_32;
      }
      uint64_t v121 = v274;
      uint64_t v122 = *(void (**)(char *, char *, uint64_t))(v274 + 32);
      int v123 = v244;
      uint64_t v124 = v292;
      v122(v244, v77, v292);
      uint64_t v125 = v245;
      v122(v245, v120, v124);
      uint64_t v126 = v249;
      (*(void (**)(char *, uint64_t, uint64_t))(v248 + 40))(v125, v278, v124);
      int v127 = *(void (**)(char *, uint64_t))(v121 + 8);
      v127(v125, v124);
      v127(v123, v124);
      uint64_t v128 = v247;
      uint64_t v129 = v252;
      int v130 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v247 + 48))(v126, 1, v252);
      uint64_t v131 = v296;
      uint64_t v132 = v291;
      if (v130 == 1)
      {
        (*(void (**)(char *, uint64_t))(v222 + 8))(v126, v223);
        uint64_t v297 = v289;
        uint64_t v298 = v288;
        uint64_t v299 = v124;
        uint64_t v300 = v287;
        uint64_t v301 = v132;
        uint64_t v302 = v131;
        goto LABEL_38;
      }
      uint64_t v197 = *(void (**)(char *, char *, uint64_t))(v128 + 32);
      uint64_t v198 = v221;
      v197(v221, v126, v129);
      uint64_t v199 = v286;
      v197(v286, v198, v129);
      uint64_t v297 = v289;
      uint64_t v298 = v288;
      uint64_t v299 = v124;
      uint64_t v300 = v287;
      uint64_t v301 = v132;
      uint64_t v302 = v131;
      uint64_t v303 = v282;
      uint64_t v304 = v283;
      uint64_t v305 = v284;
      uint64_t v306 = v285;
      uint64_t v307 = v294;
      uint64_t v308 = v295;
      uint64_t v196 = type metadata accessor for TaggedValue_6.ObservableDifference();
      swift_storeEnumTagMultiPayload();
      uint64_t v200 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v196 - 8) + 56);
      uint64_t v201 = v199;
      goto LABEL_45;
    case 3u:
      uint64_t v91 = v293;
      v88(v74, (uint64_t)v293, v64);
      uint64_t v133 = v89;
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        uint64_t v101 = v287;
        (*(void (**)(char *, uint64_t))(v275 + 8))(v74, v287);
        uint64_t v94 = v286;
        uint64_t v95 = v295;
        uint64_t v96 = v296;
        uint64_t v97 = v294;
        uint64_t v98 = v291;
        uint64_t v100 = v285;
        goto LABEL_31;
      }
      uint64_t v134 = v275;
      int v135 = *(void (**)(char *, char *, uint64_t))(v275 + 32);
      uint64_t v136 = v250;
      uint64_t v137 = v287;
      v135(v250, v74, v287);
      uint64_t v138 = v251;
      v135(v251, v133, v137);
      uint64_t v139 = v255;
      (*(void (**)(char *, uint64_t, uint64_t))(v254 + 40))(v138, v278, v137);
      uint64_t v140 = *(void (**)(char *, uint64_t))(v134 + 8);
      v140(v138, v137);
      v140(v136, v137);
      uint64_t v141 = v253;
      uint64_t v142 = v258;
      int v143 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v253 + 48))(v139, 1, v258);
      uint64_t v117 = v296;
      uint64_t v144 = v292;
      uint64_t v145 = v289;
      if (v143 != 1)
      {
        uint64_t v202 = *(void (**)(char *, char *, uint64_t))(v141 + 32);
        uint64_t v203 = v224;
        v202(v224, v139, v142);
        uint64_t v195 = v286;
        v202(v286, v203, v142);
        uint64_t v297 = v145;
        uint64_t v298 = v288;
        uint64_t v299 = v144;
        uint64_t v300 = v137;
        uint64_t v301 = v291;
        uint64_t v302 = v296;
        uint64_t v303 = v282;
        uint64_t v304 = v283;
        uint64_t v305 = v284;
        uint64_t v306 = v285;
        uint64_t v307 = v294;
        uint64_t v308 = v295;
        uint64_t v196 = type metadata accessor for TaggedValue_6.ObservableDifference();
        goto LABEL_44;
      }
      (*(void (**)(char *, uint64_t))(v225 + 8))(v139, v226);
      uint64_t v297 = v145;
      uint64_t v298 = v288;
      uint64_t v299 = v144;
      uint64_t v300 = v137;
      uint64_t v301 = v291;
LABEL_13:
      uint64_t v302 = v117;
      goto LABEL_38;
    case 4u:
      uint64_t v146 = v270;
      uint64_t v91 = v293;
      v88(v270, (uint64_t)v293, v64);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        uint64_t v98 = v291;
        (*(void (**)(char *, uint64_t))(v276 + 8))(v146, v291);
        uint64_t v94 = v286;
        uint64_t v95 = v295;
        uint64_t v96 = v296;
        uint64_t v97 = v294;
        goto LABEL_30;
      }
      uint64_t v147 = v276;
      uint64_t v148 = *(void (**)(char *, char *, uint64_t))(v276 + 32);
      uint64_t v149 = v89;
      uint64_t v150 = v256;
      uint64_t v151 = v291;
      v148(v256, v146, v291);
      uint64_t v152 = v257;
      v148(v257, v149, v151);
      int v153 = v261;
      (*(void (**)(char *, uint64_t, uint64_t))(v260 + 40))(v152, v278, v151);
      uint64_t v154 = *(void (**)(char *, uint64_t))(v147 + 8);
      v154(v152, v151);
      v154(v150, v151);
      uint64_t v155 = v259;
      uint64_t v156 = v264;
      int v157 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v259 + 48))(v153, 1, v264);
      uint64_t v158 = v292;
      uint64_t v159 = v288;
      uint64_t v160 = v289;
      if (v157 == 1)
      {
        (*(void (**)(char *, uint64_t))(v228 + 8))(v153, v229);
        uint64_t v297 = v160;
        uint64_t v298 = v159;
        uint64_t v299 = v158;
        uint64_t v300 = v287;
        uint64_t v301 = v151;
        goto LABEL_37;
      }
      uint64_t v204 = *(void (**)(char *, char *, uint64_t))(v155 + 32);
      uint64_t v205 = v227;
      v204(v227, v153, v156);
      uint64_t v195 = v286;
      v204(v286, v205, v156);
      uint64_t v297 = v160;
      uint64_t v298 = v159;
      uint64_t v299 = v292;
      uint64_t v300 = v287;
      uint64_t v301 = v151;
      uint64_t v302 = v296;
      uint64_t v303 = v282;
      uint64_t v304 = v283;
      uint64_t v305 = v284;
      uint64_t v306 = v285;
      uint64_t v307 = v294;
      uint64_t v308 = v295;
      uint64_t v196 = type metadata accessor for TaggedValue_6.ObservableDifference();
      goto LABEL_44;
    case 5u:
      uint64_t v161 = v272;
      uint64_t v91 = v293;
      v88(v272, (uint64_t)v293, v64);
      uint64_t v162 = v89;
      if (swift_getEnumCaseMultiPayload() != 5)
      {
        uint64_t v96 = v296;
        (*(void (**)(char *, uint64_t))(v277 + 8))(v161, v296);
        uint64_t v94 = v286;
        uint64_t v97 = v294;
        uint64_t v95 = v295;
        goto LABEL_29;
      }
      uint64_t v163 = v277;
      uint64_t v164 = *(void (**)(char *, char *, uint64_t))(v277 + 32);
      uint64_t v165 = v262;
      uint64_t v166 = v296;
      v164(v262, v161, v296);
      uint64_t v167 = v263;
      v164(v263, v162, v166);
      uint64_t v168 = v266;
      (*(void (**)(char *, uint64_t, uint64_t))(v267 + 40))(v167, v278, v166);
      uint64_t v169 = *(void (**)(char *, uint64_t))(v163 + 8);
      v169(v167, v166);
      v169(v165, v166);
      uint64_t v170 = v265;
      uint64_t v171 = v268;
      int v172 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v265 + 48))(v168, 1, v268);
      uint64_t v173 = v291;
      uint64_t v174 = v292;
      uint64_t v175 = v289;
      if (v172 == 1)
      {
        (*(void (**)(char *, uint64_t))(v231 + 8))(v168, v232);
        uint64_t v297 = v175;
        uint64_t v298 = v288;
        uint64_t v299 = v174;
        uint64_t v300 = v287;
        uint64_t v301 = v173;
        uint64_t v302 = v166;
        goto LABEL_38;
      }
      uint64_t v206 = *(void (**)(char *, char *, uint64_t))(v170 + 32);
      uint64_t v207 = v230;
      v206(v230, v168, v171);
      uint64_t v195 = v286;
      v206(v286, v207, v171);
      uint64_t v297 = v175;
      uint64_t v298 = v288;
      uint64_t v299 = v174;
      uint64_t v300 = v287;
      uint64_t v301 = v291;
      uint64_t v302 = v166;
      uint64_t v303 = v282;
      uint64_t v304 = v283;
      uint64_t v305 = v284;
      uint64_t v306 = v285;
      uint64_t v307 = v294;
      uint64_t v308 = v295;
      uint64_t v196 = type metadata accessor for TaggedValue_6.ObservableDifference();
LABEL_44:
      swift_storeEnumTagMultiPayload();
      uint64_t v200 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v196 - 8) + 56);
      uint64_t v201 = v195;
      goto LABEL_45;
    case 6u:
      uint64_t v176 = (uint64_t *)v271;
      v88(v271, (uint64_t)v293, v64);
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        uint64_t v177 = *v176;
        uint64_t v178 = *(void *)v89;
        swift_release();
        swift_release();
        uint64_t v297 = v289;
        uint64_t v298 = v288;
        uint64_t v299 = v292;
        uint64_t v300 = v287;
        uint64_t v301 = v291;
        uint64_t v302 = v296;
        uint64_t v303 = v282;
        uint64_t v304 = v283;
        uint64_t v305 = v284;
        uint64_t v306 = v285;
        uint64_t v307 = v294;
        uint64_t v308 = v295;
        if (v177 == v178)
        {
          uint64_t v179 = type metadata accessor for TaggedValue_6.ObservableDifference();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v179 - 8) + 56))(v286, 1, 1, v179);
        }
        else
        {
          uint64_t v209 = type metadata accessor for TaggedValue_6.ObservableDifference();
          uint64_t v210 = v286;
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v209 - 8) + 56))(v210, 0, 1, v209);
        }
        uint64_t v180 = v279;
        uint64_t v181 = v90;
        uint64_t v91 = v293;
        return (*(uint64_t (**)(char *, uint64_t))(v180 + 8))(v91, v181);
      }
      swift_release();
      uint64_t v94 = v286;
      uint64_t v95 = v295;
      uint64_t v96 = v296;
      uint64_t v91 = v293;
      uint64_t v97 = v294;
LABEL_29:
      uint64_t v98 = v291;
LABEL_30:
      uint64_t v100 = v285;
      uint64_t v101 = v287;
LABEL_31:
      uint64_t v102 = v284;
      uint64_t v99 = v292;
LABEL_32:
      uint64_t v103 = v283;
      uint64_t v104 = v288;
LABEL_33:
      uint64_t v105 = v282;
      uint64_t v93 = v289;
      goto LABEL_34;
    default:
      uint64_t v91 = v293;
      v88(v82, (uint64_t)v293, v64);
      uint64_t v92 = v89;
      if (swift_getEnumCaseMultiPayload())
      {
        uint64_t v93 = v289;
        (*(void (**)(char *, uint64_t))(v269 + 8))(v82, v289);
        uint64_t v94 = v286;
        uint64_t v95 = v295;
        uint64_t v96 = v296;
        uint64_t v97 = v294;
        uint64_t v98 = v291;
        uint64_t v99 = v292;
        uint64_t v100 = v285;
        uint64_t v101 = v287;
        uint64_t v102 = v284;
        uint64_t v103 = v283;
        uint64_t v104 = v288;
        uint64_t v105 = v282;
LABEL_34:
        uint64_t v180 = v281;
        uint64_t v181 = v280;
        uint64_t v297 = v93;
        uint64_t v298 = v104;
        uint64_t v299 = v99;
        uint64_t v300 = v101;
        uint64_t v301 = v98;
        uint64_t v302 = v96;
        uint64_t v303 = v105;
        uint64_t v304 = v103;
        uint64_t v305 = v102;
        uint64_t v306 = v100;
        uint64_t v307 = v97;
        uint64_t v308 = v95;
        uint64_t v182 = type metadata accessor for TaggedValue_6.ObservableDifference();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v182 - 8) + 56))(v94, 0, 1, v182);
      }
      else
      {
        uint64_t v183 = v269;
        uint64_t v184 = *(void (**)(char *, char *, uint64_t))(v269 + 32);
        uint64_t v185 = v233;
        uint64_t v186 = v289;
        v184(v233, v82, v289);
        uint64_t v187 = v234;
        v184(v234, v92, v186);
        uint64_t v188 = v237;
        (*(void (**)(char *, uint64_t, uint64_t))(v236 + 40))(v187, v278, v186);
        uint64_t v189 = *(void (**)(char *, uint64_t))(v183 + 8);
        v189(v187, v186);
        v189(v185, v186);
        uint64_t v190 = v235;
        uint64_t v191 = v238;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v235 + 48))(v188, 1, v238) == 1)
        {
          (*(void (**)(char *, uint64_t))(v216 + 8))(v188, v217);
          uint64_t v297 = v186;
          uint64_t v298 = v288;
          uint64_t v299 = v292;
          uint64_t v300 = v287;
          uint64_t v301 = v291;
LABEL_37:
          uint64_t v302 = v296;
LABEL_38:
          uint64_t v303 = v282;
          uint64_t v304 = v283;
          uint64_t v305 = v284;
          uint64_t v306 = v285;
          uint64_t v307 = v294;
          uint64_t v308 = v295;
          uint64_t v192 = type metadata accessor for TaggedValue_6.ObservableDifference();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v192 - 8) + 56))(v286, 1, 1, v192);
        }
        else
        {
          uint64_t v211 = *(void (**)(char *, char *, uint64_t))(v190 + 32);
          uint64_t v212 = v215;
          v211(v215, v188, v191);
          uint64_t v213 = v286;
          v211(v286, v212, v191);
          uint64_t v297 = v186;
          uint64_t v298 = v288;
          uint64_t v299 = v292;
          uint64_t v300 = v287;
          uint64_t v301 = v291;
          uint64_t v302 = v296;
          uint64_t v303 = v282;
          uint64_t v304 = v283;
          uint64_t v305 = v284;
          uint64_t v306 = v285;
          uint64_t v307 = v294;
          uint64_t v308 = v295;
          uint64_t v196 = type metadata accessor for TaggedValue_6.ObservableDifference();
          swift_storeEnumTagMultiPayload();
          uint64_t v200 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v196 - 8) + 56);
          uint64_t v201 = v213;
LABEL_45:
          v200((uint64_t)v201, 0, 1, v196);
        }
        uint64_t v180 = v279;
        uint64_t v181 = v90;
      }
      return (*(uint64_t (**)(char *, uint64_t))(v180 + 8))(v91, v181);
  }
}

uint64_t type metadata accessor for TaggedValue_6.ObservableDifference()
{
  return swift_getGenericMetadata();
}

BOOL TaggedValue_7.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  BOOL v5 = swift_getEnumCaseMultiPayload() == 8;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1C41781F4()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_7.taggedEnum.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TaggedValue_7.TaggedEnum();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t type metadata accessor for TaggedValue_7.TaggedEnum()
{
  return swift_getGenericMetadata();
}

uint64_t TaggedValue_7.taggedEnum.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TaggedValue_7.TaggedEnum();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*TaggedValue_7.taggedEnum.modify())(void, void)
{
  return nullsub_1;
}

uint64_t TaggedValue_7.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_7.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_7.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_7.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_7.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_7.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_7.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_7.init(tag:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  *a3 = a1;
  a3[1] = v3;
  type metadata accessor for TaggedValue_7.TaggedEnum();
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_7.tagged1.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v19[0] = a1[1];
  v19[1] = v19[0];
  long long v6 = a1[3];
  long long v7 = a1[4];
  v19[2] = v5;
  v19[3] = v6;
  long long v8 = a1[5];
  long long v9 = a1[6];
  v19[4] = v7;
  v19[5] = v8;
  long long v10 = a1[7];
  v19[6] = v9;
  v19[7] = v10;
  uint64_t v11 = type metadata accessor for TaggedValue_7.TaggedEnum();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v19 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v19 - v13, v3, v11);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v15 = *(void *)&v19[0];
    uint64_t v16 = *(void *)(*(void *)&v19[0] - 8);
    uint64_t v17 = 1;
  }
  else
  {
    uint64_t v16 = *(void *)(*(void *)&v19[0] - 8);
    (*(void (**)(uint64_t, char *))(v16 + 32))(a2, v14);
    uint64_t v15 = *(void *)&v19[0];
    uint64_t v17 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a2, v17, 1, v15);
}

uint64_t TaggedValue_7.tagged2.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 120);
  uint64_t v14 = *(void *)(a1 + 16);
  long long v13 = *(_OWORD *)(a1 + 24);
  long long v15 = v13;
  long long v16 = *(_OWORD *)(a1 + 40);
  long long v17 = *(_OWORD *)(a1 + 56);
  long long v18 = *(_OWORD *)(a1 + 72);
  long long v19 = *(_OWORD *)(a1 + 88);
  long long v20 = *(_OWORD *)(a1 + 104);
  uint64_t v21 = v5;
  uint64_t v6 = type metadata accessor for TaggedValue_7.TaggedEnum();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  long long v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, v3, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, char *))(v10 + 32))(a2, v9);
    uint64_t v11 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v10 + 56))(a2, v11, 1, v13);
}

uint64_t TaggedValue_7.tagged3.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[1];
  v18[0] = a1[2];
  v18[1] = v5;
  long long v6 = a1[3];
  long long v7 = a1[4];
  v18[2] = v18[0];
  v18[3] = v6;
  long long v8 = a1[5];
  long long v9 = a1[6];
  v18[4] = v7;
  void v18[5] = v8;
  long long v10 = a1[7];
  _DWORD v18[6] = v9;
  _OWORD v18[7] = v10;
  uint64_t v11 = type metadata accessor for TaggedValue_7.TaggedEnum();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v18 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v18 - v13, v3, v11);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v15 = *(void *)(*(void *)&v18[0] - 8);
    (*(void (**)(uint64_t, char *))(v15 + 32))(a2, v14);
    uint64_t v16 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v15 = *(void *)(*(void *)&v18[0] - 8);
    uint64_t v16 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v15 + 56))(a2, v16, 1, *(void *)&v18[0]);
}

uint64_t TaggedValue_7.tagged4.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 120);
  long long v6 = *(_OWORD *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 32);
  v14[0] = *(_OWORD *)(a1 + 40);
  v14[1] = v6;
  long long v16 = v14[0];
  long long v17 = *(_OWORD *)(a1 + 56);
  long long v18 = *(_OWORD *)(a1 + 72);
  long long v19 = *(_OWORD *)(a1 + 88);
  long long v20 = *(_OWORD *)(a1 + 104);
  uint64_t v21 = v5;
  uint64_t v7 = type metadata accessor for TaggedValue_7.TaggedEnum();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  long long v10 = (char *)v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v14 - v9, v3, v7);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    (*(void (**)(uint64_t, char *))(v11 + 32))(a2, v10);
    uint64_t v12 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    uint64_t v12 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v11 + 56))(a2, v12, 1, *(void *)&v14[0]);
}

uint64_t TaggedValue_7.tagged5.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v15[1] = a1[1];
  void v15[2] = v5;
  long long v6 = a1[4];
  v15[0] = a1[3];
  _OWORD v15[3] = v15[0];
  _OWORD v15[4] = v6;
  long long v7 = a1[6];
  _OWORD v15[5] = a1[5];
  v15[6] = v7;
  _OWORD v15[7] = a1[7];
  uint64_t v8 = type metadata accessor for TaggedValue_7.TaggedEnum();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v15 - v10, v3, v8);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    (*(void (**)(uint64_t, char *))(v12 + 32))(a2, v11);
    uint64_t v13 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    uint64_t v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v12 + 56))(a2, v13, 1, *(void *)&v15[0]);
}

uint64_t TaggedValue_7.tagged6.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 120);
  long long v7 = *(_OWORD *)(a1 + 32);
  v15[1] = *(_OWORD *)(a1 + 16);
  void v15[2] = v7;
  uint64_t v16 = v5;
  v15[0] = *(_OWORD *)(a1 + 56);
  long long v17 = v15[0];
  long long v18 = *(_OWORD *)(a1 + 72);
  long long v19 = *(_OWORD *)(a1 + 88);
  long long v20 = *(_OWORD *)(a1 + 104);
  uint64_t v21 = v6;
  uint64_t v8 = type metadata accessor for TaggedValue_7.TaggedEnum();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v15 - v10, v3, v8);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    (*(void (**)(uint64_t, char *))(v12 + 32))(a2, v11);
    uint64_t v13 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    uint64_t v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v12 + 56))(a2, v13, 1, *(void *)&v15[0]);
}

uint64_t TaggedValue_7.tagged7.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v15[1] = a1[1];
  void v15[2] = v5;
  long long v6 = a1[4];
  _OWORD v15[3] = a1[3];
  _OWORD v15[4] = v6;
  v15[0] = v6;
  long long v7 = a1[6];
  _OWORD v15[5] = a1[5];
  v15[6] = v7;
  _OWORD v15[7] = a1[7];
  uint64_t v8 = type metadata accessor for TaggedValue_7.TaggedEnum();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v15 - v10, v3, v8);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    (*(void (**)(uint64_t, char *))(v12 + 32))(a2, v11);
    uint64_t v13 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    uint64_t v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v12 + 56))(a2, v13, 1, *(void *)&v15[0]);
}

uint64_t TaggedValue_7.unknown.getter@<X0>(_OWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v14[0] = a1[1];
  v14[1] = v5;
  long long v6 = a1[4];
  _OWORD v14[2] = a1[3];
  _OWORD v14[3] = v6;
  long long v7 = a1[6];
  _OWORD v14[4] = a1[5];
  v14[5] = v7;
  _OWORD v14[6] = a1[7];
  uint64_t v8 = type metadata accessor for TaggedValue_7.TaggedEnum();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v14 - v10, v3, v8);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 7)
  {
    uint64_t v13 = *((void *)v11 + 1);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v13 = 0;
  }
  *a2 = v13;
  return result;
}

uint64_t TaggedValue_7.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v78 = a1;
  uint64_t v75 = *(void *)(*(void *)(a2 + 64) - 8);
  uint64_t v2 = MEMORY[0x1F4188790](a1);
  uint64_t v74 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = *(void *)(*(void *)(v4 + 56) - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v2);
  uint64_t v71 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = *(void *)(*(void *)(v7 + 48) - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v68 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = *(void *)(*(void *)(v10 + 40) - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v65 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 + 32);
  uint64_t v63 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v62 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 + 24);
  uint64_t v61 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v14);
  uint64_t v60 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(v20 + 16);
  uint64_t v59 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v18);
  uint64_t v58 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = v24[9];
  uint64_t v26 = v24[10];
  uint64_t v28 = v24[11];
  uint64_t v27 = v24[12];
  uint64_t v29 = v24[13];
  uint64_t v30 = v24[14];
  uint64_t v31 = v24[15];
  uint64_t v79 = v21;
  uint64_t v80 = v17;
  uint64_t v64 = v22;
  uint64_t v81 = v22;
  uint64_t v82 = v32;
  uint64_t v67 = v32;
  uint64_t v70 = v33;
  uint64_t v83 = v33;
  uint64_t v84 = v34;
  uint64_t v73 = v34;
  uint64_t v76 = v35;
  uint64_t v85 = v35;
  uint64_t v86 = v25;
  uint64_t v57 = v25;
  uint64_t v87 = v26;
  uint64_t v88 = v28;
  uint64_t v89 = v27;
  uint64_t v90 = v29;
  uint64_t v91 = v30;
  uint64_t v92 = v31;
  uint64_t v36 = type metadata accessor for TaggedValue_7.TaggedEnum();
  MEMORY[0x1F4188790](v36);
  uint64_t v38 = (char *)&v56 - v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))((char *)&v56 - v37, v77, v36);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v43 = v61;
      uint64_t v44 = v60;
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v60, v38, v17);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 + 8) + 48))(v78, v17);
      return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v44, v17);
    case 2u:
      uint64_t v45 = v63;
      uint64_t v46 = v62;
      uint64_t v47 = v64;
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v62, v38, v64);
      uint64_t v48 = *(void *)(v28 + 8);
      goto LABEL_9;
    case 3u:
      uint64_t v45 = v66;
      uint64_t v46 = v65;
      uint64_t v47 = v67;
      (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v65, v38, v67);
      uint64_t v48 = *(void *)(v27 + 8);
      goto LABEL_9;
    case 4u:
      uint64_t v49 = v69;
      uint64_t v50 = v68;
      uint64_t v51 = v38;
      uint64_t v52 = v70;
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v68, v51, v70);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 + 8) + 48))(v78, v52);
      return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v50, v52);
    case 5u:
      uint64_t v54 = v72;
      uint64_t v53 = v73;
      uint64_t v55 = v71;
      (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v71, v38, v73);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 + 8) + 48))(v78, v53);
      return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v55, v53);
    case 6u:
      uint64_t v46 = v74;
      uint64_t v45 = v75;
      uint64_t v47 = v76;
      (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v74, v38, v76);
      uint64_t v48 = *(void *)(v31 + 8);
LABEL_9:
      (*(void (**)(uint64_t, uint64_t))(v48 + 48))(v78, v47);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v46, v47);
      break;
    case 7u:
      (*(void (**)(uint64_t))(**((void **)v38 + 1) + 120))(v78);
      uint64_t result = swift_release();
      break;
    default:
      uint64_t v40 = v59;
      uint64_t v41 = v58;
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v58, v38, v21);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 + 8) + 48))(v78, v21);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v41, v21);
      break;
  }
  return result;
}

uint64_t TaggedValue_7.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v109 = a1;
  uint64_t v114 = a3;
  uint64_t v99 = *(void *)(*(void *)(a2 + 64) - 8);
  uint64_t v3 = MEMORY[0x1F4188790](a1);
  uint64_t v100 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v98 = (char *)&v86 - v6;
  uint64_t v96 = *(void *)(*(void *)(v7 + 56) - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v97 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v95 = (char *)&v86 - v11;
  uint64_t v93 = *(void *)(*(void *)(v12 + 48) - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v94 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v92 = (char *)&v86 - v15;
  uint64_t v17 = *(void *)(v16 + 40);
  uint64_t v90 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v91 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v86 - v21;
  uint64_t v89 = *(void *)(*(void *)(v23 + 32) - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v20);
  uint64_t v26 = (char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v29 = (char *)&v86 - v28;
  uint64_t v88 = *(void *)(*(void *)(v30 + 24) - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v27);
  uint64_t v33 = (char *)&v86 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x1F4188790](v31);
  uint64_t v36 = (char *)&v86 - v35;
  uint64_t v38 = *(void *)(v37 + 16);
  uint64_t v87 = *(void *)(v38 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v34);
  uint64_t v41 = (char *)&v86 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = MEMORY[0x1F4188790](v39);
  uint64_t v44 = (char *)&v86 - v43;
  uint64_t v46 = v45[9];
  uint64_t v47 = v45[10];
  uint64_t v48 = v45[11];
  uint64_t v49 = v45[12];
  uint64_t v50 = v45[13];
  uint64_t v51 = v45[14];
  uint64_t v52 = v45[15];
  uint64_t v117 = v38;
  uint64_t v118 = v53;
  uint64_t v110 = v53;
  uint64_t v111 = v54;
  uint64_t v119 = v54;
  uint64_t v120 = v42;
  uint64_t v112 = v42;
  uint64_t v113 = v55;
  uint64_t v121 = v55;
  uint64_t v122 = v56;
  uint64_t v115 = v56;
  uint64_t v116 = v57;
  uint64_t v123 = v57;
  uint64_t v124 = v46;
  uint64_t v108 = v46;
  uint64_t v107 = v47;
  uint64_t v125 = v47;
  uint64_t v126 = v48;
  uint64_t v106 = v48;
  uint64_t v105 = v49;
  uint64_t v127 = v49;
  uint64_t v128 = v50;
  uint64_t v104 = v50;
  uint64_t v103 = v51;
  uint64_t v129 = v51;
  uint64_t v130 = v52;
  uint64_t v102 = v52;
  uint64_t v58 = type metadata accessor for TaggedValue_7.TaggedEnum();
  MEMORY[0x1F4188790](v58);
  uint64_t v60 = (char *)&v86 - v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))((char *)&v86 - v59, v101, v58);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v64 = v88;
      uint64_t v65 = v110;
      (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v36, v60, v110);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v107 + 8) + 24))(v109, v65);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v36, v65);
      uint64_t result = TaggedValue_7.init(_:)((uint64_t)v33, v65, (uint64_t)v114);
      break;
    case 2u:
      uint64_t v66 = v89;
      uint64_t v67 = v111;
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v29, v60, v111);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v106 + 8) + 24))(v109, v67);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v29, v67);
      uint64_t result = TaggedValue_7.init(_:)((uint64_t)v26, v67, (uint64_t)v114);
      break;
    case 3u:
      uint64_t v68 = v90;
      uint64_t v69 = v112;
      (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v22, v60, v112);
      uint64_t v70 = (uint64_t)v91;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v105 + 8) + 24))(v109, v69);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v22, v69);
      uint64_t result = TaggedValue_7.init(_:)(v70, v69, (uint64_t)v114);
      break;
    case 4u:
      uint64_t v71 = v93;
      uint64_t v72 = v92;
      uint64_t v73 = v113;
      (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v92, v60, v113);
      uint64_t v74 = (uint64_t)v94;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v104 + 8) + 24))(v109, v73);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
      uint64_t result = TaggedValue_7.init(_:)(v74, v73, (uint64_t)v114);
      break;
    case 5u:
      uint64_t v75 = v96;
      uint64_t v76 = v95;
      uint64_t v77 = v115;
      (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v95, v60, v115);
      uint64_t v78 = (uint64_t)v97;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 + 8) + 24))(v109, v77);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v77);
      uint64_t result = TaggedValue_7.init(_:)(v78, v77, (uint64_t)v114);
      break;
    case 6u:
      uint64_t v79 = v99;
      uint64_t v80 = v98;
      uint64_t v81 = v116;
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v98, v60, v116);
      uint64_t v82 = (uint64_t)v100;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v102 + 8) + 24))(v109, v81);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v81);
      uint64_t result = TaggedValue_7.init(_:)(v82, v81, (uint64_t)v114);
      break;
    case 7u:
      uint64_t v83 = *(void *)v60;
      uint64_t v84 = (*(uint64_t (**)(uint64_t))(**((void **)v60 + 1) + 104))(v109);
      swift_release();
      uint64_t v85 = v114;
      *uint64_t v114 = v83;
      v85[1] = v84;
      uint64_t v117 = v38;
      uint64_t v118 = v110;
      uint64_t v119 = v111;
      uint64_t v120 = v112;
      uint64_t v121 = v113;
      uint64_t v122 = v115;
      uint64_t v123 = v116;
      uint64_t v124 = v108;
      uint64_t v125 = v107;
      uint64_t v126 = v106;
      uint64_t v127 = v105;
      uint64_t v128 = v104;
      uint64_t v129 = v103;
      uint64_t v130 = v102;
      type metadata accessor for TaggedValue_7.TaggedEnum();
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
    default:
      uint64_t v62 = v87;
      (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v44, v60, v38);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v108 + 8) + 24))(v109, v38);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v44, v38);
      uint64_t result = TaggedValue_7.init(_:)((uint64_t)v41, v38, (uint64_t)v114);
      break;
  }
  return result;
}

uint64_t TaggedValue_7.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C41874F0(a1, a2, (void (*)(unint64_t *, uint64_t))TaggedValue_7.copy(renamingReferences:));
}

uint64_t TaggedValue_7.observableDifference(from:with:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v332 = a2;
  v347 = a1;
  v344 = a4;
  uint64_t v350 = a3[15];
  uint64_t v5 = a3[8];
  uint64_t v319 = *(void *)(v350 + 8);
  uint64_t v6 = v5;
  uint64_t v352 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v278 = sub_1C4497B38();
  uint64_t v277 = *(void *)(v278 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v278);
  v318 = (char *)&v258 - v9;
  uint64_t v320 = AssociatedTypeWitness;
  uint64_t v317 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v276 = (char *)&v258 - v11;
  uint64_t v327 = *(void *)(v6 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  v315 = (char *)&v258 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  v314 = (char *)&v258 - v14;
  uint64_t v349 = a3[14];
  uint64_t v15 = a3[7];
  uint64_t v312 = *(void *)(v349 + 8);
  uint64_t v16 = v15;
  uint64_t v351 = v15;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v275 = sub_1C4497B38();
  uint64_t v274 = *(void *)(v275 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v275);
  v313 = (char *)&v258 - v19;
  uint64_t v316 = v17;
  uint64_t v311 = *(void *)(v17 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v273 = (char *)&v258 - v21;
  uint64_t v326 = *(void *)(v16 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  v309 = (char *)&v258 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v308 = (char *)&v258 - v24;
  uint64_t v348 = a3[13];
  uint64_t v25 = a3[6];
  uint64_t v306 = *(void *)(v348 + 8);
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v272 = sub_1C4497B38();
  uint64_t v271 = *(void *)(v272 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v272);
  uint64_t v307 = (char *)&v258 - v28;
  uint64_t v310 = v26;
  uint64_t v305 = *(void *)(v26 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  v270 = (char *)&v258 - v30;
  uint64_t v325 = *(void *)(v25 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v303 = (char *)&v258 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  uint64_t v302 = (char *)&v258 - v33;
  uint64_t v34 = a3[12];
  uint64_t v35 = a3[5];
  uint64_t v300 = *(void *)(v34 + 8);
  uint64_t v36 = swift_getAssociatedTypeWitness();
  uint64_t v269 = sub_1C4497B38();
  uint64_t v268 = *(void *)(v269 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v269);
  uint64_t v301 = (char *)&v258 - v38;
  uint64_t v304 = v36;
  uint64_t v299 = *(void *)(v36 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v267 = (char *)&v258 - v40;
  uint64_t v324 = *(void *)(v35 - 8);
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v297 = (char *)&v258 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v41);
  uint64_t v296 = (char *)&v258 - v43;
  uint64_t v44 = a3[11];
  uint64_t v45 = a3[4];
  uint64_t v294 = *(void *)(v44 + 8);
  uint64_t v46 = swift_getAssociatedTypeWitness();
  uint64_t v266 = sub_1C4497B38();
  uint64_t v265 = *(void *)(v266 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v266);
  uint64_t v295 = (char *)&v258 - v48;
  uint64_t v298 = v46;
  uint64_t v293 = *(void *)(v46 - 8);
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v264 = (char *)&v258 - v50;
  uint64_t v323 = *(void *)(v45 - 8);
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v291 = (char *)&v258 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v51);
  uint64_t v290 = (char *)&v258 - v53;
  uint64_t v54 = a3[10];
  uint64_t v55 = a3[3];
  uint64_t v288 = *(void *)(v54 + 8);
  uint64_t v56 = swift_getAssociatedTypeWitness();
  uint64_t v263 = sub_1C4497B38();
  uint64_t v262 = *(void *)(v263 - 8);
  uint64_t v57 = MEMORY[0x1F4188790](v263);
  uint64_t v289 = (char *)&v258 - v58;
  uint64_t v292 = v56;
  uint64_t v287 = *(void *)(v56 - 8);
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  v261 = (char *)&v258 - v60;
  uint64_t v322 = *(void *)(v55 - 8);
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  v286 = (char *)&v258 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v61);
  uint64_t v285 = (char *)&v258 - v63;
  uint64_t v64 = a3[9];
  uint64_t v65 = a3[2];
  uint64_t v282 = *(void *)(v64 + 8);
  uint64_t v66 = swift_getAssociatedTypeWitness();
  uint64_t v260 = sub_1C4497B38();
  uint64_t v259 = *(void *)(v260 - 8);
  uint64_t v67 = MEMORY[0x1F4188790](v260);
  uint64_t v283 = (char *)&v258 - v68;
  uint64_t v284 = v66;
  uint64_t v281 = *(void *)(v66 - 8);
  uint64_t v69 = MEMORY[0x1F4188790](v67);
  uint64_t v258 = (char *)&v258 - v70;
  uint64_t v321 = *(void *)(v65 - 8);
  uint64_t v71 = MEMORY[0x1F4188790](v69);
  uint64_t v280 = (char *)&v258 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v71);
  uint64_t v279 = (char *)&v258 - v73;
  uint64_t v336 = v65;
  uint64_t v353 = v65;
  uint64_t v354 = v55;
  uint64_t v341 = v55;
  uint64_t v342 = v45;
  uint64_t v355 = v45;
  uint64_t v356 = v35;
  uint64_t v343 = v35;
  uint64_t v346 = v25;
  uint64_t v357 = v25;
  uint64_t v358 = v351;
  uint64_t v359 = v352;
  uint64_t v360 = v64;
  uint64_t v337 = v64;
  uint64_t v338 = v54;
  uint64_t v361 = v54;
  uint64_t v362 = v44;
  uint64_t v339 = v44;
  uint64_t v340 = v34;
  uint64_t v363 = v34;
  uint64_t v364 = v348;
  uint64_t v365 = v349;
  uint64_t v366 = v350;
  uint64_t v74 = type metadata accessor for TaggedValue_7.TaggedEnum();
  uint64_t v75 = *(void *)(v74 - 8);
  uint64_t v76 = MEMORY[0x1F4188790](v74);
  v331 = (char *)&v258 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = MEMORY[0x1F4188790](v76);
  v330 = (char *)&v258 - v79;
  uint64_t v80 = MEMORY[0x1F4188790](v78);
  v329 = (char *)&v258 - v81;
  uint64_t v82 = MEMORY[0x1F4188790](v80);
  v328 = (char *)&v258 - v83;
  uint64_t v84 = MEMORY[0x1F4188790](v82);
  uint64_t v86 = (char *)&v258 - v85;
  uint64_t v87 = MEMORY[0x1F4188790](v84);
  uint64_t v89 = (char *)&v258 - v88;
  uint64_t v90 = MEMORY[0x1F4188790](v87);
  uint64_t v92 = (char *)&v258 - v91;
  MEMORY[0x1F4188790](v90);
  uint64_t v94 = (char *)&v258 - v93;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v334 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v96 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v98 = (char *)&v258 - v97;
  uint64_t v335 = v96;
  uint64_t v99 = (char *)&v258 + *(int *)(v96 + 48) - v97;
  uint64_t v333 = v75;
  uint64_t v100 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
  v100((char *)&v258 - v97, v345, v74);
  uint64_t v101 = v99;
  v100(v99, (uint64_t)v347, v74);
  v347 = v98;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v100(v92, (uint64_t)v347, v74);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v117 = v341;
        (*(void (**)(char *, uint64_t))(v322 + 8))(v92, v341);
        uint64_t v104 = v344;
        uint64_t v106 = v349;
        uint64_t v105 = v350;
        uint64_t v108 = v351;
        uint64_t v107 = v352;
        uint64_t v102 = v347;
        uint64_t v109 = v348;
        uint64_t v110 = v340;
        uint64_t v111 = v346;
        uint64_t v112 = v339;
        uint64_t v113 = v343;
        uint64_t v114 = v338;
        uint64_t v115 = v342;
        uint64_t v116 = v337;
        goto LABEL_41;
      }
      uint64_t v345 = v74;
      uint64_t v118 = v322;
      uint64_t v119 = *(void (**)(char *, char *, uint64_t))(v322 + 32);
      uint64_t v120 = v285;
      uint64_t v121 = v341;
      v119(v285, v92, v341);
      uint64_t v122 = v286;
      v119(v286, v99, v121);
      uint64_t v123 = v289;
      (*(void (**)(char *, uint64_t, uint64_t))(v288 + 40))(v122, v332, v121);
      uint64_t v124 = v123;
      uint64_t v125 = *(void (**)(char *, uint64_t))(v118 + 8);
      v125(v122, v121);
      v125(v120, v121);
      uint64_t v126 = v287;
      uint64_t v127 = v292;
      int v128 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v287 + 48))(v124, 1, v292);
      uint64_t v130 = v351;
      uint64_t v129 = v352;
      uint64_t v131 = v346;
      uint64_t v132 = v343;
      uint64_t v133 = v342;
      if (v128 == 1)
      {
        (*(void (**)(char *, uint64_t))(v262 + 8))(v124, v263);
        uint64_t v353 = v336;
        uint64_t v354 = v121;
        uint64_t v355 = v133;
        uint64_t v356 = v132;
        uint64_t v357 = v131;
        uint64_t v358 = v130;
        uint64_t v359 = v129;
        uint64_t v360 = v337;
        uint64_t v361 = v338;
        uint64_t v362 = v339;
        uint64_t v363 = v340;
        uint64_t v364 = v348;
        uint64_t v365 = v349;
        uint64_t v366 = v350;
        uint64_t v134 = type metadata accessor for TaggedValue_7.ObservableDifference();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v134 - 8) + 56))(v344, 1, 1, v134);
      }
      else
      {
        uint64_t v232 = *(void (**)(char *, char *, uint64_t))(v126 + 32);
        uint64_t v233 = v261;
        v232(v261, v124, v127);
        v234 = v344;
        v232(v344, v233, v127);
        uint64_t v353 = v336;
        uint64_t v354 = v121;
        uint64_t v355 = v133;
        uint64_t v356 = v132;
        uint64_t v357 = v131;
        uint64_t v358 = v130;
        uint64_t v359 = v352;
        uint64_t v360 = v337;
        uint64_t v361 = v338;
        uint64_t v362 = v339;
        uint64_t v363 = v340;
        uint64_t v364 = v348;
        uint64_t v365 = v349;
        uint64_t v366 = v350;
        uint64_t v235 = type metadata accessor for TaggedValue_7.ObservableDifference();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v235 - 8) + 56))(v234, 0, 1, v235);
      }
      uint64_t v213 = v333;
      uint64_t v236 = v345;
      uint64_t v102 = v347;
      return (*(uint64_t (**)(char *, uint64_t))(v213 + 8))(v102, v236);
    case 2u:
      uint64_t v102 = v347;
      v100(v89, (uint64_t)v347, v74);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        uint64_t v115 = v342;
        (*(void (**)(char *, uint64_t))(v323 + 8))(v89, v342);
        uint64_t v104 = v344;
        uint64_t v106 = v349;
        uint64_t v105 = v350;
        uint64_t v108 = v351;
        uint64_t v107 = v352;
        uint64_t v109 = v348;
        uint64_t v110 = v340;
        uint64_t v111 = v346;
        uint64_t v112 = v339;
        uint64_t v113 = v343;
        uint64_t v114 = v338;
        goto LABEL_40;
      }
      uint64_t v345 = v74;
      uint64_t v135 = v323;
      uint64_t v136 = *(void (**)(char *, char *, uint64_t))(v323 + 32);
      uint64_t v137 = v290;
      uint64_t v138 = v89;
      uint64_t v139 = v342;
      v136(v290, v138, v342);
      uint64_t v140 = v291;
      v136(v291, v99, v139);
      uint64_t v141 = v295;
      (*(void (**)(char *, uint64_t, uint64_t))(v294 + 40))(v140, v332, v139);
      uint64_t v142 = v141;
      int v143 = *(void (**)(char *, uint64_t))(v135 + 8);
      v143(v140, v139);
      v143(v137, v139);
      uint64_t v144 = v293;
      uint64_t v145 = v298;
      int v146 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v293 + 48))(v142, 1, v298);
      uint64_t v148 = v351;
      uint64_t v147 = v352;
      uint64_t v149 = v346;
      uint64_t v150 = v343;
      if (v146 == 1)
      {
        (*(void (**)(char *, uint64_t))(v265 + 8))(v142, v266);
        uint64_t v353 = v336;
        uint64_t v354 = v341;
        uint64_t v355 = v139;
        goto LABEL_13;
      }
      uint64_t v237 = *(void (**)(char *, char *, uint64_t))(v144 + 32);
      uint64_t v238 = v264;
      v237(v264, v142, v145);
      uint64_t v239 = v344;
      v237(v344, v238, v145);
      uint64_t v353 = v336;
      uint64_t v354 = v341;
      uint64_t v355 = v139;
      uint64_t v356 = v150;
      uint64_t v357 = v149;
      uint64_t v358 = v148;
      uint64_t v359 = v352;
      uint64_t v360 = v337;
      uint64_t v361 = v338;
      uint64_t v362 = v339;
      uint64_t v363 = v340;
      uint64_t v364 = v348;
      uint64_t v365 = v349;
      uint64_t v366 = v350;
      uint64_t v240 = type metadata accessor for TaggedValue_7.ObservableDifference();
      goto LABEL_55;
    case 3u:
      uint64_t v102 = v347;
      v100(v86, (uint64_t)v347, v74);
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        uint64_t v113 = v343;
        (*(void (**)(char *, uint64_t))(v324 + 8))(v86, v343);
        uint64_t v104 = v344;
        uint64_t v106 = v349;
        uint64_t v105 = v350;
        uint64_t v108 = v351;
        uint64_t v107 = v352;
        uint64_t v109 = v348;
        uint64_t v110 = v340;
        uint64_t v111 = v346;
        uint64_t v112 = v339;
        goto LABEL_39;
      }
      uint64_t v345 = v74;
      uint64_t v151 = v324;
      uint64_t v152 = *(void (**)(char *, char *, uint64_t))(v324 + 32);
      int v153 = v296;
      uint64_t v150 = v343;
      v152(v296, v86, v343);
      uint64_t v154 = v297;
      v152(v297, v101, v150);
      uint64_t v155 = v301;
      (*(void (**)(char *, uint64_t, uint64_t))(v300 + 40))(v154, v332, v150);
      uint64_t v156 = v155;
      int v157 = *(void (**)(char *, uint64_t))(v151 + 8);
      v157(v154, v150);
      v157(v153, v150);
      uint64_t v158 = v299;
      uint64_t v159 = v304;
      int v160 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v299 + 48))(v156, 1, v304);
      uint64_t v148 = v351;
      uint64_t v147 = v352;
      uint64_t v149 = v346;
      uint64_t v161 = v341;
      if (v160 != 1)
      {
        uint64_t v241 = *(void (**)(char *, char *, uint64_t))(v158 + 32);
        uint64_t v242 = v267;
        v241(v267, v156, v159);
        uint64_t v239 = v344;
        v241(v344, v242, v159);
        uint64_t v353 = v336;
        uint64_t v354 = v161;
        uint64_t v355 = v342;
        uint64_t v356 = v150;
        uint64_t v357 = v149;
        uint64_t v358 = v148;
        uint64_t v359 = v352;
        uint64_t v360 = v337;
        uint64_t v361 = v338;
        uint64_t v362 = v339;
        uint64_t v363 = v340;
        uint64_t v364 = v348;
        uint64_t v365 = v349;
        uint64_t v366 = v350;
        uint64_t v240 = type metadata accessor for TaggedValue_7.ObservableDifference();
        goto LABEL_55;
      }
      (*(void (**)(char *, uint64_t))(v268 + 8))(v156, v269);
      uint64_t v353 = v336;
      uint64_t v354 = v161;
      uint64_t v355 = v342;
LABEL_13:
      uint64_t v356 = v150;
      goto LABEL_17;
    case 4u:
      uint64_t v162 = v328;
      uint64_t v102 = v347;
      v100(v328, (uint64_t)v347, v74);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        uint64_t v212 = v162;
        uint64_t v111 = v346;
        (*(void (**)(char *, uint64_t))(v325 + 8))(v212, v346);
        uint64_t v104 = v344;
        uint64_t v106 = v349;
        uint64_t v105 = v350;
        uint64_t v108 = v351;
        uint64_t v107 = v352;
        uint64_t v109 = v348;
        uint64_t v110 = v340;
        goto LABEL_38;
      }
      uint64_t v345 = v74;
      uint64_t v163 = v325;
      uint64_t v164 = *(void (**)(char *, char *, uint64_t))(v325 + 32);
      uint64_t v165 = v302;
      uint64_t v149 = v346;
      v164(v302, v162, v346);
      uint64_t v166 = v303;
      v164(v303, v99, v149);
      uint64_t v167 = v307;
      (*(void (**)(char *, uint64_t, uint64_t))(v306 + 40))(v166, v332, v149);
      uint64_t v168 = *(void (**)(char *, uint64_t))(v163 + 8);
      v168(v166, v149);
      v168(v165, v149);
      uint64_t v169 = v305;
      uint64_t v170 = v310;
      int v171 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v305 + 48))(v167, 1, v310);
      uint64_t v148 = v351;
      uint64_t v147 = v352;
      uint64_t v172 = v342;
      if (v171 != 1)
      {
        uint64_t v243 = *(void (**)(char *, char *, uint64_t))(v169 + 32);
        uint64_t v244 = v270;
        v243(v270, v167, v170);
        uint64_t v245 = v344;
        v243(v344, v244, v170);
        uint64_t v353 = v336;
        uint64_t v354 = v341;
        uint64_t v355 = v172;
        uint64_t v356 = v343;
        uint64_t v357 = v149;
        uint64_t v358 = v148;
        uint64_t v359 = v147;
        uint64_t v360 = v337;
        uint64_t v361 = v338;
        uint64_t v362 = v339;
        uint64_t v363 = v340;
        uint64_t v364 = v348;
        uint64_t v365 = v349;
        uint64_t v366 = v350;
        uint64_t v240 = type metadata accessor for TaggedValue_7.ObservableDifference();
        swift_storeEnumTagMultiPayload();
        uint64_t v246 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v240 - 8) + 56);
        uint64_t v247 = v245;
        goto LABEL_56;
      }
      (*(void (**)(char *, uint64_t))(v271 + 8))(v167, v272);
      uint64_t v353 = v336;
      uint64_t v354 = v341;
      uint64_t v355 = v172;
      uint64_t v356 = v343;
LABEL_17:
      uint64_t v357 = v149;
      goto LABEL_21;
    case 5u:
      uint64_t v173 = v329;
      uint64_t v102 = v347;
      v100(v329, (uint64_t)v347, v74);
      if (swift_getEnumCaseMultiPayload() != 5)
      {
        uint64_t v108 = v351;
        (*(void (**)(char *, uint64_t))(v326 + 8))(v173, v351);
        uint64_t v104 = v344;
        uint64_t v106 = v349;
        uint64_t v105 = v350;
        uint64_t v107 = v352;
        uint64_t v109 = v348;
        goto LABEL_37;
      }
      uint64_t v345 = v74;
      uint64_t v174 = v326;
      uint64_t v175 = *(void (**)(char *, char *, uint64_t))(v326 + 32);
      uint64_t v176 = v308;
      uint64_t v177 = v173;
      uint64_t v148 = v351;
      v175(v308, v177, v351);
      uint64_t v178 = v309;
      v175(v309, v99, v148);
      uint64_t v179 = v313;
      (*(void (**)(char *, uint64_t, uint64_t))(v312 + 40))(v178, v332, v148);
      uint64_t v180 = v179;
      uint64_t v181 = *(void (**)(char *, uint64_t))(v174 + 8);
      v181(v178, v148);
      v181(v176, v148);
      uint64_t v182 = v311;
      uint64_t v183 = v316;
      int v184 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v311 + 48))(v180, 1, v316);
      uint64_t v147 = v352;
      uint64_t v185 = v343;
      uint64_t v186 = v342;
      uint64_t v187 = v341;
      if (v184 != 1)
      {
        uint64_t v248 = *(void (**)(char *, char *, uint64_t))(v182 + 32);
        uint64_t v249 = v273;
        v248(v273, v180, v183);
        uint64_t v239 = v344;
        v248(v344, v249, v183);
        uint64_t v353 = v336;
        uint64_t v354 = v187;
        uint64_t v355 = v186;
        uint64_t v356 = v185;
        uint64_t v357 = v346;
        uint64_t v358 = v148;
        uint64_t v359 = v352;
        uint64_t v360 = v337;
        uint64_t v361 = v338;
        uint64_t v362 = v339;
        uint64_t v363 = v340;
        uint64_t v364 = v348;
        uint64_t v365 = v349;
        uint64_t v366 = v350;
        uint64_t v240 = type metadata accessor for TaggedValue_7.ObservableDifference();
        goto LABEL_55;
      }
      (*(void (**)(char *, uint64_t))(v274 + 8))(v180, v275);
      uint64_t v353 = v336;
      uint64_t v354 = v187;
      uint64_t v355 = v186;
      uint64_t v356 = v185;
      uint64_t v357 = v346;
LABEL_21:
      uint64_t v358 = v148;
      uint64_t v359 = v147;
      goto LABEL_22;
    case 6u:
      uint64_t v189 = v330;
      uint64_t v102 = v347;
      v100(v330, (uint64_t)v347, v74);
      uint64_t v190 = v99;
      if (swift_getEnumCaseMultiPayload() != 6)
      {
        uint64_t v107 = v352;
        (*(void (**)(char *, uint64_t))(v327 + 8))(v189, v352);
        uint64_t v104 = v344;
        uint64_t v106 = v349;
        uint64_t v105 = v350;
        goto LABEL_36;
      }
      uint64_t v345 = v74;
      uint64_t v191 = v327;
      uint64_t v192 = *(void (**)(char *, char *, uint64_t))(v327 + 32);
      uint64_t v193 = v314;
      uint64_t v194 = v189;
      uint64_t v195 = v352;
      v192(v314, v194, v352);
      uint64_t v196 = v315;
      v192(v315, v190, v195);
      uint64_t v197 = v318;
      (*(void (**)(char *, uint64_t, uint64_t))(v319 + 40))(v196, v332, v195);
      uint64_t v198 = v197;
      uint64_t v199 = *(void (**)(char *, uint64_t))(v191 + 8);
      v199(v196, v195);
      v199(v193, v195);
      uint64_t v200 = v317;
      uint64_t v201 = v320;
      int v202 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v317 + 48))(v198, 1, v320);
      uint64_t v203 = v346;
      uint64_t v204 = v343;
      uint64_t v205 = v342;
      uint64_t v206 = v341;
      if (v202 != 1)
      {
        uint64_t v250 = *(void (**)(char *, char *, uint64_t))(v200 + 32);
        uint64_t v251 = v276;
        v250(v276, v198, v201);
        uint64_t v239 = v344;
        v250(v344, v251, v201);
        uint64_t v353 = v336;
        uint64_t v354 = v206;
        uint64_t v355 = v205;
        uint64_t v356 = v204;
        uint64_t v357 = v346;
        uint64_t v358 = v351;
        uint64_t v359 = v195;
        uint64_t v360 = v337;
        uint64_t v361 = v338;
        uint64_t v362 = v339;
        uint64_t v363 = v340;
        uint64_t v364 = v348;
        uint64_t v365 = v349;
        uint64_t v366 = v350;
        uint64_t v240 = type metadata accessor for TaggedValue_7.ObservableDifference();
        goto LABEL_55;
      }
      (*(void (**)(char *, uint64_t))(v277 + 8))(v198, v278);
      uint64_t v353 = v336;
      uint64_t v354 = v206;
      uint64_t v355 = v205;
      uint64_t v356 = v204;
      uint64_t v357 = v203;
      uint64_t v358 = v351;
      uint64_t v359 = v195;
LABEL_22:
      uint64_t v360 = v337;
      uint64_t v361 = v338;
      uint64_t v362 = v339;
      uint64_t v363 = v340;
      uint64_t v364 = v348;
      uint64_t v365 = v349;
      uint64_t v366 = v350;
      uint64_t v188 = type metadata accessor for TaggedValue_7.ObservableDifference();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v188 - 8) + 56))(v344, 1, 1, v188);
      goto LABEL_57;
    case 7u:
      uint64_t v207 = (uint64_t *)v331;
      uint64_t v102 = v347;
      v100(v331, (uint64_t)v347, v74);
      uint64_t v208 = v74;
      if (swift_getEnumCaseMultiPayload() == 7)
      {
        uint64_t v209 = *v207;
        uint64_t v210 = *(void *)v99;
        swift_release();
        swift_release();
        uint64_t v353 = v336;
        uint64_t v354 = v341;
        uint64_t v355 = v342;
        uint64_t v356 = v343;
        uint64_t v357 = v346;
        uint64_t v358 = v351;
        uint64_t v359 = v352;
        uint64_t v360 = v337;
        uint64_t v361 = v338;
        uint64_t v362 = v339;
        uint64_t v363 = v340;
        uint64_t v364 = v348;
        uint64_t v365 = v349;
        uint64_t v366 = v350;
        if (v209 == v210)
        {
          uint64_t v211 = type metadata accessor for TaggedValue_7.ObservableDifference();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v211 - 8) + 56))(v344, 1, 1, v211);
        }
        else
        {
          uint64_t v252 = type metadata accessor for TaggedValue_7.ObservableDifference();
          uint64_t v253 = v344;
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v252 - 8) + 56))(v253, 0, 1, v252);
        }
        uint64_t v213 = v333;
        uint64_t v236 = v208;
        return (*(uint64_t (**)(char *, uint64_t))(v213 + 8))(v102, v236);
      }
      swift_release();
      uint64_t v104 = v344;
      uint64_t v106 = v349;
      uint64_t v105 = v350;
      uint64_t v107 = v352;
LABEL_36:
      uint64_t v109 = v348;
      uint64_t v108 = v351;
LABEL_37:
      uint64_t v110 = v340;
      uint64_t v111 = v346;
LABEL_38:
      uint64_t v112 = v339;
      uint64_t v113 = v343;
LABEL_39:
      uint64_t v114 = v338;
      uint64_t v115 = v342;
LABEL_40:
      uint64_t v116 = v337;
      uint64_t v117 = v341;
LABEL_41:
      uint64_t v103 = v336;
      goto LABEL_42;
    default:
      uint64_t v102 = v347;
      v100(v94, (uint64_t)v347, v74);
      if (swift_getEnumCaseMultiPayload())
      {
        uint64_t v103 = v336;
        (*(void (**)(char *, uint64_t))(v321 + 8))(v94, v336);
        uint64_t v104 = v344;
        uint64_t v106 = v349;
        uint64_t v105 = v350;
        uint64_t v108 = v351;
        uint64_t v107 = v352;
        uint64_t v109 = v348;
        uint64_t v110 = v340;
        uint64_t v111 = v346;
        uint64_t v112 = v339;
        uint64_t v113 = v343;
        uint64_t v114 = v338;
        uint64_t v115 = v342;
        uint64_t v116 = v337;
        uint64_t v117 = v341;
LABEL_42:
        uint64_t v213 = v334;
        uint64_t v353 = v103;
        uint64_t v354 = v117;
        uint64_t v355 = v115;
        uint64_t v356 = v113;
        uint64_t v357 = v111;
        uint64_t v358 = v108;
        uint64_t v359 = v107;
        uint64_t v360 = v116;
        uint64_t v361 = v114;
        uint64_t v362 = v112;
        uint64_t v363 = v110;
        uint64_t v364 = v109;
        uint64_t v365 = v106;
        uint64_t v366 = v105;
        uint64_t v214 = type metadata accessor for TaggedValue_7.ObservableDifference();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v214 - 8) + 56))(v104, 0, 1, v214);
        uint64_t v215 = (uint64_t *)&v367;
      }
      else
      {
        uint64_t v345 = v74;
        uint64_t v216 = v321;
        uint64_t v217 = *(void (**)(char *, char *, uint64_t))(v321 + 32);
        uint64_t v218 = v279;
        uint64_t v219 = v336;
        v217(v279, v94, v336);
        uint64_t v220 = v280;
        v217(v280, v101, v219);
        uint64_t v221 = v283;
        (*(void (**)(char *, uint64_t, uint64_t))(v282 + 40))(v220, v332, v219);
        uint64_t v222 = *(void (**)(char *, uint64_t))(v216 + 8);
        v222(v220, v219);
        v222(v218, v219);
        uint64_t v223 = v281;
        uint64_t v224 = v284;
        int v225 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v281 + 48))(v221, 1, v284);
        uint64_t v226 = v351;
        uint64_t v227 = v333;
        uint64_t v228 = v346;
        uint64_t v229 = v343;
        uint64_t v230 = v342;
        if (v225 == 1)
        {
          (*(void (**)(char *, uint64_t))(v259 + 8))(v221, v260);
          uint64_t v353 = v219;
          uint64_t v354 = v341;
          uint64_t v355 = v230;
          uint64_t v356 = v229;
          uint64_t v357 = v228;
          uint64_t v358 = v226;
          uint64_t v359 = v352;
          uint64_t v360 = v337;
          uint64_t v361 = v338;
          uint64_t v362 = v339;
          uint64_t v363 = v340;
          uint64_t v364 = v348;
          uint64_t v365 = v349;
          uint64_t v366 = v350;
          uint64_t v231 = type metadata accessor for TaggedValue_7.ObservableDifference();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v231 - 8) + 56))(v344, 1, 1, v231);
          uint64_t v213 = v227;
        }
        else
        {
          uint64_t v254 = v221;
          v255 = *(void (**)(char *, char *, uint64_t))(v223 + 32);
          v256 = v258;
          v255(v258, v254, v224);
          v255(v344, v256, v224);
          uint64_t v353 = v219;
          uint64_t v354 = v341;
          uint64_t v355 = v230;
          uint64_t v356 = v229;
          uint64_t v357 = v228;
          uint64_t v358 = v226;
          uint64_t v359 = v352;
          uint64_t v360 = v337;
          uint64_t v361 = v338;
          uint64_t v362 = v339;
          uint64_t v363 = v340;
          uint64_t v364 = v348;
          uint64_t v365 = v349;
          uint64_t v366 = v350;
          uint64_t v240 = type metadata accessor for TaggedValue_7.ObservableDifference();
          uint64_t v239 = v344;
LABEL_55:
          swift_storeEnumTagMultiPayload();
          uint64_t v246 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v240 - 8) + 56);
          uint64_t v247 = v239;
LABEL_56:
          v246((uint64_t)v247, 0, 1, v240);
LABEL_57:
          uint64_t v213 = v333;
        }
        uint64_t v215 = &v368;
      }
      uint64_t v236 = *(v215 - 32);
      return (*(uint64_t (**)(char *, uint64_t))(v213 + 8))(v102, v236);
  }
}

uint64_t type metadata accessor for TaggedValue_7.ObservableDifference()
{
  return swift_getGenericMetadata();
}

BOOL TaggedValue_8.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  BOOL v5 = swift_getEnumCaseMultiPayload() == 9;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1C417D744()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_8.taggedEnum.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TaggedValue_8.TaggedEnum();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t type metadata accessor for TaggedValue_8.TaggedEnum()
{
  return swift_getGenericMetadata();
}

uint64_t TaggedValue_8.taggedEnum.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TaggedValue_8.TaggedEnum();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*TaggedValue_8.taggedEnum.modify())(void, void)
{
  return nullsub_1;
}

uint64_t TaggedValue_8.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_8.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_8.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_8.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_8.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_8.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_8.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_8.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_8.init(tag:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  *a3 = a1;
  a3[1] = v3;
  type metadata accessor for TaggedValue_8.TaggedEnum();
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_8.tagged1.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v20[0] = a1[1];
  v20[1] = v20[0];
  long long v6 = a1[3];
  long long v7 = a1[4];
  v20[2] = v5;
  v20[3] = v6;
  long long v8 = a1[5];
  long long v9 = a1[6];
  void v20[4] = v7;
  void v20[5] = v8;
  long long v10 = a1[7];
  long long v11 = a1[8];
  v20[6] = v9;
  v20[7] = v10;
  v20[8] = v11;
  uint64_t v12 = type metadata accessor for TaggedValue_8.TaggedEnum();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v20 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v20 - v14, v3, v12);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v16 = *(void *)&v20[0];
    uint64_t v17 = *(void *)(*(void *)&v20[0] - 8);
    uint64_t v18 = 1;
  }
  else
  {
    uint64_t v17 = *(void *)(*(void *)&v20[0] - 8);
    (*(void (**)(uint64_t, char *))(v17 + 32))(a2, v15);
    uint64_t v16 = *(void *)&v20[0];
    uint64_t v18 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a2, v18, 1, v16);
}

uint64_t TaggedValue_8.tagged2.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v14 = *(void *)(a1 + 16);
  long long v13 = *(_OWORD *)(a1 + 24);
  long long v15 = v13;
  long long v16 = *(_OWORD *)(a1 + 40);
  long long v17 = *(_OWORD *)(a1 + 56);
  long long v18 = *(_OWORD *)(a1 + 72);
  long long v19 = *(_OWORD *)(a1 + 88);
  long long v20 = *(_OWORD *)(a1 + 104);
  long long v21 = *(_OWORD *)(a1 + 120);
  uint64_t v22 = v5;
  uint64_t v6 = type metadata accessor for TaggedValue_8.TaggedEnum();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  long long v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, v3, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, char *))(v10 + 32))(a2, v9);
    uint64_t v11 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v10 + 56))(a2, v11, 1, v13);
}

uint64_t TaggedValue_8.tagged3.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[1];
  v19[0] = a1[2];
  v19[1] = v5;
  long long v6 = a1[3];
  long long v7 = a1[4];
  v19[2] = v19[0];
  v19[3] = v6;
  long long v8 = a1[5];
  long long v9 = a1[6];
  v19[4] = v7;
  v19[5] = v8;
  long long v10 = a1[7];
  long long v11 = a1[8];
  v19[6] = v9;
  v19[7] = v10;
  _OWORD v19[8] = v11;
  uint64_t v12 = type metadata accessor for TaggedValue_8.TaggedEnum();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v15 = (char *)v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v19 - v14, v3, v12);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v16 = *(void *)(*(void *)&v19[0] - 8);
    (*(void (**)(uint64_t, char *))(v16 + 32))(a2, v15);
    uint64_t v17 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v16 = *(void *)(*(void *)&v19[0] - 8);
    uint64_t v17 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v16 + 56))(a2, v17, 1, *(void *)&v19[0]);
}

uint64_t TaggedValue_8.tagged4.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 136);
  long long v6 = *(_OWORD *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 32);
  v14[0] = *(_OWORD *)(a1 + 40);
  v14[1] = v6;
  long long v16 = v14[0];
  long long v17 = *(_OWORD *)(a1 + 56);
  long long v18 = *(_OWORD *)(a1 + 72);
  long long v19 = *(_OWORD *)(a1 + 88);
  long long v20 = *(_OWORD *)(a1 + 104);
  long long v21 = *(_OWORD *)(a1 + 120);
  uint64_t v22 = v5;
  uint64_t v7 = type metadata accessor for TaggedValue_8.TaggedEnum();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  long long v10 = (char *)v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v14 - v9, v3, v7);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    (*(void (**)(uint64_t, char *))(v11 + 32))(a2, v10);
    uint64_t v12 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    uint64_t v12 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v11 + 56))(a2, v12, 1, *(void *)&v14[0]);
}

uint64_t TaggedValue_8.tagged5.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v16[1] = a1[1];
  v16[2] = v5;
  long long v6 = a1[4];
  v16[0] = a1[3];
  v16[3] = v16[0];
  v16[4] = v6;
  long long v7 = a1[6];
  _OWORD v16[5] = a1[5];
  _OWORD v16[6] = v7;
  long long v8 = a1[8];
  v16[7] = a1[7];
  v16[8] = v8;
  uint64_t v9 = type metadata accessor for TaggedValue_8.TaggedEnum();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v16 - v11, v3, v9);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    uint64_t v13 = *(void *)(*(void *)&v16[0] - 8);
    (*(void (**)(uint64_t, char *))(v13 + 32))(a2, v12);
    uint64_t v14 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v13 = *(void *)(*(void *)&v16[0] - 8);
    uint64_t v14 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v13 + 56))(a2, v14, 1, *(void *)&v16[0]);
}

uint64_t TaggedValue_8.tagged6.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 136);
  long long v7 = *(_OWORD *)(a1 + 32);
  v15[1] = *(_OWORD *)(a1 + 16);
  void v15[2] = v7;
  uint64_t v16 = v5;
  v15[0] = *(_OWORD *)(a1 + 56);
  long long v17 = v15[0];
  long long v18 = *(_OWORD *)(a1 + 72);
  long long v19 = *(_OWORD *)(a1 + 88);
  long long v20 = *(_OWORD *)(a1 + 104);
  long long v21 = *(_OWORD *)(a1 + 120);
  uint64_t v22 = v6;
  uint64_t v8 = type metadata accessor for TaggedValue_8.TaggedEnum();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v15 - v10, v3, v8);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    (*(void (**)(uint64_t, char *))(v12 + 32))(a2, v11);
    uint64_t v13 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    uint64_t v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v12 + 56))(a2, v13, 1, *(void *)&v15[0]);
}

uint64_t TaggedValue_8.tagged7.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v16[1] = a1[1];
  v16[2] = v5;
  long long v6 = a1[4];
  v16[3] = a1[3];
  v16[4] = v6;
  v16[0] = v6;
  long long v7 = a1[6];
  _OWORD v16[5] = a1[5];
  _OWORD v16[6] = v7;
  long long v8 = a1[8];
  v16[7] = a1[7];
  v16[8] = v8;
  uint64_t v9 = type metadata accessor for TaggedValue_8.TaggedEnum();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v16 - v11, v3, v9);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    uint64_t v13 = *(void *)(*(void *)&v16[0] - 8);
    (*(void (**)(uint64_t, char *))(v13 + 32))(a2, v12);
    uint64_t v14 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v13 = *(void *)(*(void *)&v16[0] - 8);
    uint64_t v14 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v13 + 56))(a2, v14, 1, *(void *)&v16[0]);
}

uint64_t TaggedValue_8.tagged8.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 136);
  long long v7 = *(_OWORD *)(a1 + 32);
  v15[1] = *(_OWORD *)(a1 + 16);
  void v15[2] = v7;
  _OWORD v15[3] = *(_OWORD *)(a1 + 48);
  uint64_t v16 = v5;
  v15[0] = *(_OWORD *)(a1 + 72);
  long long v17 = v15[0];
  long long v18 = *(_OWORD *)(a1 + 88);
  long long v19 = *(_OWORD *)(a1 + 104);
  long long v20 = *(_OWORD *)(a1 + 120);
  uint64_t v21 = v6;
  uint64_t v8 = type metadata accessor for TaggedValue_8.TaggedEnum();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v15 - v10, v3, v8);
  if (swift_getEnumCaseMultiPayload() == 7)
  {
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    (*(void (**)(uint64_t, char *))(v12 + 32))(a2, v11);
    uint64_t v13 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    uint64_t v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v12 + 56))(a2, v13, 1, *(void *)&v15[0]);
}

uint64_t TaggedValue_8.unknown.getter@<X0>(_OWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v15[0] = a1[1];
  v15[1] = v5;
  long long v6 = a1[4];
  void v15[2] = a1[3];
  _OWORD v15[3] = v6;
  long long v7 = a1[6];
  _OWORD v15[4] = a1[5];
  _OWORD v15[5] = v7;
  long long v8 = a1[8];
  v15[6] = a1[7];
  _OWORD v15[7] = v8;
  uint64_t v9 = type metadata accessor for TaggedValue_8.TaggedEnum();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v15 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v15 - v11, v3, v9);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 8)
  {
    uint64_t v14 = *((void *)v12 + 1);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v14 = 0;
  }
  *a2 = v14;
  return result;
}

uint64_t TaggedValue_8.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v86 = a1;
  uint64_t v83 = *(void *)(*(void *)(a2 + 72) - 8);
  uint64_t v2 = MEMORY[0x1F4188790](a1);
  uint64_t v82 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = *(void *)(*(void *)(v4 + 64) - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v2);
  uint64_t v79 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = *(void *)(*(void *)(v7 + 56) - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v76 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = *(void *)(*(void *)(v10 + 48) - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v73 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 + 40);
  uint64_t v71 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v70 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = *(void *)(*(void *)(v16 + 32) - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v67 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v19 + 24);
  uint64_t v66 = *(void *)(v20 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v17);
  uint64_t v65 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v64 = *(void *)(v24 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v21);
  uint64_t v63 = (char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = v27[10];
  uint64_t v29 = v27[11];
  uint64_t v31 = v27[12];
  uint64_t v30 = v27[13];
  uint64_t v33 = v27[14];
  uint64_t v32 = v27[15];
  uint64_t v35 = v27[16];
  uint64_t v34 = v27[17];
  uint64_t v87 = v24;
  uint64_t v88 = v20;
  uint64_t v69 = v36;
  uint64_t v89 = v36;
  uint64_t v90 = v25;
  uint64_t v72 = v25;
  uint64_t v75 = v37;
  uint64_t v91 = v37;
  uint64_t v92 = v38;
  uint64_t v78 = v38;
  uint64_t v81 = v39;
  uint64_t v93 = v39;
  uint64_t v94 = v40;
  uint64_t v84 = v40;
  uint64_t v62 = v28;
  uint64_t v95 = v28;
  uint64_t v96 = v29;
  uint64_t v61 = v29;
  uint64_t v97 = v31;
  uint64_t v98 = v30;
  uint64_t v99 = v33;
  uint64_t v100 = v32;
  uint64_t v101 = v35;
  uint64_t v102 = v34;
  uint64_t v41 = type metadata accessor for TaggedValue_8.TaggedEnum();
  MEMORY[0x1F4188790](v41);
  uint64_t v43 = (char *)&v60 - v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))((char *)&v60 - v42, v85, v41);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v48 = v66;
      uint64_t v49 = v65;
      (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v65, v43, v20);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 + 8) + 48))(v86, v20);
      return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v49, v20);
    case 2u:
      uint64_t v50 = v68;
      uint64_t v51 = v67;
      uint64_t v52 = v69;
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v67, v43, v69);
      uint64_t v53 = *(void *)(v31 + 8);
      goto LABEL_10;
    case 3u:
      uint64_t v54 = v71;
      uint64_t v55 = v70;
      uint64_t v56 = v72;
      (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v70, v43, v72);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 + 8) + 48))(v86, v56);
      return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v55, v56);
    case 4u:
      uint64_t v50 = v74;
      uint64_t v51 = v73;
      uint64_t v52 = v75;
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v73, v43, v75);
      uint64_t v53 = *(void *)(v33 + 8);
      goto LABEL_10;
    case 5u:
      uint64_t v57 = v77;
      uint64_t v58 = v76;
      uint64_t v59 = v78;
      (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v76, v43, v78);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 + 8) + 48))(v86, v59);
      return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v58, v59);
    case 6u:
      uint64_t v50 = v80;
      uint64_t v51 = v79;
      uint64_t v52 = v81;
      (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v79, v43, v81);
      uint64_t v53 = *(void *)(v35 + 8);
      goto LABEL_10;
    case 7u:
      uint64_t v51 = v82;
      uint64_t v50 = v83;
      uint64_t v52 = v84;
      (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v82, v43, v84);
      uint64_t v53 = *(void *)(v34 + 8);
LABEL_10:
      (*(void (**)(uint64_t, uint64_t))(v53 + 48))(v86, v52);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v51, v52);
      break;
    case 8u:
      (*(void (**)(uint64_t))(**((void **)v43 + 1) + 120))(v86);
      uint64_t result = swift_release();
      break;
    default:
      uint64_t v45 = v64;
      uint64_t v46 = v63;
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v63, v43, v24);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 + 8) + 48))(v86, v24);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v46, v24);
      break;
  }
  return result;
}

uint64_t TaggedValue_8.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v123 = a1;
  uint64_t v131 = a3;
  uint64_t v112 = *(void *)(*(void *)(a2 + 72) - 8);
  uint64_t v3 = MEMORY[0x1F4188790](a1);
  uint64_t v113 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v111 = (char *)&v98 - v6;
  uint64_t v109 = *(void *)(*(void *)(v7 + 64) - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v110 = (char *)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v108 = (char *)&v98 - v11;
  uint64_t v106 = *(void *)(*(void *)(v12 + 56) - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v107 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v105 = (char *)&v98 - v15;
  uint64_t v17 = *(void *)(v16 + 48);
  uint64_t v103 = *(void *)(v17 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v104 = (char *)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v102 = (char *)&v98 - v21;
  uint64_t v100 = *(void *)(*(void *)(v22 + 40) - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  uint64_t v101 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v98 - v26;
  uint64_t v99 = *(void *)(*(void *)(v28 + 32) - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v25);
  uint64_t v31 = (char *)&v98 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x1F4188790](v29);
  uint64_t v34 = (char *)&v98 - v33;
  uint64_t v98 = *(void *)(*(void *)(v35 + 24) - 8);
  uint64_t v36 = MEMORY[0x1F4188790](v32);
  uint64_t v38 = (char *)&v98 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x1F4188790](v36);
  uint64_t v41 = (char *)&v98 - v40;
  uint64_t v43 = *(void *)(*(void *)(v42 + 16) - 8);
  uint64_t v44 = MEMORY[0x1F4188790](v39);
  uint64_t v46 = (char *)&v98 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = MEMORY[0x1F4188790](v44);
  uint64_t v49 = (char *)&v98 - v48;
  uint64_t v51 = v50[10];
  uint64_t v52 = v50[11];
  uint64_t v53 = v50[12];
  uint64_t v54 = v50[13];
  uint64_t v55 = v50[14];
  uint64_t v56 = v50[15];
  uint64_t v58 = v50[16];
  uint64_t v57 = v50[17];
  uint64_t v124 = v59;
  uint64_t v133 = v59;
  uint64_t v134 = v60;
  uint64_t v125 = v60;
  uint64_t v126 = v61;
  uint64_t v135 = v61;
  uint64_t v136 = v62;
  uint64_t v127 = v62;
  uint64_t v128 = v47;
  uint64_t v129 = v63;
  uint64_t v137 = v47;
  uint64_t v138 = v64;
  uint64_t v130 = v64;
  uint64_t v132 = v65;
  uint64_t v139 = v65;
  uint64_t v140 = v63;
  uint64_t v122 = v51;
  uint64_t v141 = v51;
  uint64_t v142 = v52;
  uint64_t v121 = v52;
  uint64_t v120 = v53;
  uint64_t v143 = v53;
  uint64_t v144 = v54;
  uint64_t v119 = v54;
  uint64_t v118 = v55;
  uint64_t v145 = v55;
  uint64_t v146 = v56;
  uint64_t v117 = v56;
  uint64_t v116 = v58;
  uint64_t v147 = v58;
  uint64_t v148 = v57;
  uint64_t v115 = v57;
  uint64_t v66 = type metadata accessor for TaggedValue_8.TaggedEnum();
  MEMORY[0x1F4188790](v66);
  uint64_t v68 = (char *)&v98 - v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))((char *)&v98 - v67, v114, v66);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v72 = v98;
      uint64_t v73 = v125;
      (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v41, v68, v125);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v121 + 8) + 24))(v123, v73);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v41, v73);
      uint64_t result = TaggedValue_8.init(_:)((uint64_t)v38, v73, (uint64_t)v131);
      break;
    case 2u:
      uint64_t v74 = v99;
      uint64_t v75 = v126;
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v34, v68, v126);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v120 + 8) + 24))(v123, v75);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v34, v75);
      uint64_t result = TaggedValue_8.init(_:)((uint64_t)v31, v75, (uint64_t)v131);
      break;
    case 3u:
      uint64_t v76 = v100;
      uint64_t v77 = v127;
      (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v27, v68, v127);
      uint64_t v78 = (uint64_t)v101;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v119 + 8) + 24))(v123, v77);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v27, v77);
      uint64_t result = TaggedValue_8.init(_:)(v78, v77, (uint64_t)v131);
      break;
    case 4u:
      uint64_t v79 = v103;
      uint64_t v80 = v102;
      uint64_t v81 = v128;
      (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v102, v68, v128);
      uint64_t v82 = (uint64_t)v104;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v118 + 8) + 24))(v123, v81);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v81);
      uint64_t result = TaggedValue_8.init(_:)(v82, v81, (uint64_t)v131);
      break;
    case 5u:
      uint64_t v83 = v106;
      uint64_t v84 = v105;
      uint64_t v85 = v130;
      (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v105, v68, v130);
      uint64_t v86 = (uint64_t)v107;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v117 + 8) + 24))(v123, v85);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v85);
      uint64_t result = TaggedValue_8.init(_:)(v86, v85, (uint64_t)v131);
      break;
    case 6u:
      uint64_t v87 = v109;
      uint64_t v88 = v108;
      uint64_t v89 = v132;
      (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v108, v68, v132);
      uint64_t v90 = (uint64_t)v110;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v116 + 8) + 24))(v123, v89);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v88, v89);
      uint64_t result = TaggedValue_8.init(_:)(v90, v89, (uint64_t)v131);
      break;
    case 7u:
      uint64_t v91 = v112;
      uint64_t v92 = v111;
      uint64_t v93 = v129;
      (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v111, v68, v129);
      uint64_t v94 = (uint64_t)v113;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v115 + 8) + 24))(v123, v93);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v92, v93);
      uint64_t result = TaggedValue_8.init(_:)(v94, (uint64_t)v131, v93);
      break;
    case 8u:
      uint64_t v95 = *(void *)v68;
      uint64_t v96 = (*(uint64_t (**)(uint64_t))(**((void **)v68 + 1) + 104))(v123);
      swift_release();
      uint64_t v97 = v131;
      *uint64_t v131 = v95;
      v97[1] = v96;
      uint64_t v133 = v124;
      uint64_t v134 = v125;
      uint64_t v135 = v126;
      uint64_t v136 = v127;
      uint64_t v137 = v128;
      uint64_t v138 = v130;
      uint64_t v139 = v132;
      uint64_t v140 = v129;
      uint64_t v141 = v122;
      uint64_t v142 = v121;
      uint64_t v143 = v120;
      uint64_t v144 = v119;
      uint64_t v145 = v118;
      uint64_t v146 = v117;
      uint64_t v147 = v116;
      uint64_t v148 = v115;
      type metadata accessor for TaggedValue_8.TaggedEnum();
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
    default:
      uint64_t v70 = v124;
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v49, v68, v124);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v122 + 8) + 24))(v123, v70);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v49, v70);
      uint64_t result = TaggedValue_8.init(_:)((uint64_t)v46, v70, (uint64_t)v131);
      break;
  }
  return result;
}

uint64_t TaggedValue_8.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C41874F0(a1, a2, (void (*)(unint64_t *, uint64_t))TaggedValue_8.copy(renamingReferences:));
}

uint64_t TaggedValue_8.observableDifference(from:with:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v381 = a2;
  v396 = a1;
  v389 = a4;
  uint64_t v400 = a3[17];
  uint64_t v5 = a3[9];
  uint64_t v366 = *(void *)(v400 + 8);
  uint64_t v6 = v5;
  uint64_t v402 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v319 = sub_1C4497B38();
  uint64_t v318 = *(void *)(v319 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v319);
  uint64_t v365 = (char *)&v295 - v9;
  uint64_t v367 = AssociatedTypeWitness;
  uint64_t v364 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v317 = (char *)&v295 - v11;
  uint64_t v380 = *(void *)(v6 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v362 = (char *)&v295 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v361 = (char *)&v295 - v14;
  uint64_t v399 = a3[16];
  uint64_t v15 = a3[8];
  uint64_t v359 = *(void *)(v399 + 8);
  uint64_t v16 = v15;
  uint64_t v403 = v15;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v316 = sub_1C4497B38();
  uint64_t v315 = *(void *)(v316 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v316);
  uint64_t v360 = (char *)&v295 - v19;
  uint64_t v363 = v17;
  uint64_t v358 = *(void *)(v17 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  v314 = (char *)&v295 - v21;
  uint64_t v379 = *(void *)(v16 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v356 = (char *)&v295 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v355 = (char *)&v295 - v24;
  uint64_t v398 = a3[15];
  uint64_t v25 = a3[7];
  uint64_t v353 = *(void *)(v398 + 8);
  uint64_t v26 = v25;
  uint64_t v401 = v25;
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v313 = sub_1C4497B38();
  uint64_t v312 = *(void *)(v313 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v313);
  uint64_t v354 = (char *)&v295 - v29;
  uint64_t v357 = v27;
  uint64_t v352 = *(void *)(v27 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v311 = (char *)&v295 - v31;
  uint64_t v378 = *(void *)(v26 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v350 = (char *)&v295 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v349 = (char *)&v295 - v34;
  uint64_t v397 = a3[14];
  uint64_t v35 = a3[6];
  uint64_t v347 = *(void *)(v397 + 8);
  uint64_t v36 = swift_getAssociatedTypeWitness();
  uint64_t v310 = sub_1C4497B38();
  uint64_t v309 = *(void *)(v310 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v310);
  uint64_t v348 = (char *)&v295 - v38;
  uint64_t v351 = v36;
  uint64_t v346 = *(void *)(v36 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v308 = (char *)&v295 - v40;
  uint64_t v377 = *(void *)(v35 - 8);
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  v344 = (char *)&v295 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v41);
  uint64_t v343 = (char *)&v295 - v43;
  uint64_t v44 = a3[13];
  uint64_t v45 = a3[5];
  uint64_t v341 = *(void *)(v44 + 8);
  uint64_t v46 = swift_getAssociatedTypeWitness();
  uint64_t v307 = sub_1C4497B38();
  uint64_t v306 = *(void *)(v307 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v307);
  uint64_t v342 = (char *)&v295 - v48;
  uint64_t v345 = v46;
  uint64_t v340 = *(void *)(v46 - 8);
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v305 = (char *)&v295 - v50;
  uint64_t v376 = *(void *)(v45 - 8);
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v338 = (char *)&v295 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v51);
  uint64_t v337 = (char *)&v295 - v53;
  uint64_t v54 = a3[12];
  uint64_t v55 = a3[4];
  uint64_t v335 = *(void *)(v54 + 8);
  uint64_t v56 = swift_getAssociatedTypeWitness();
  uint64_t v304 = sub_1C4497B38();
  uint64_t v303 = *(void *)(v304 - 8);
  uint64_t v57 = MEMORY[0x1F4188790](v304);
  uint64_t v336 = (char *)&v295 - v58;
  uint64_t v339 = v56;
  uint64_t v334 = *(void *)(v56 - 8);
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v302 = (char *)&v295 - v60;
  uint64_t v375 = *(void *)(v55 - 8);
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  uint64_t v332 = (char *)&v295 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v61);
  v331 = (char *)&v295 - v63;
  uint64_t v64 = a3[11];
  uint64_t v65 = a3[3];
  uint64_t v329 = *(void *)(v64 + 8);
  uint64_t v66 = swift_getAssociatedTypeWitness();
  uint64_t v301 = sub_1C4497B38();
  uint64_t v300 = *(void *)(v301 - 8);
  uint64_t v67 = MEMORY[0x1F4188790](v301);
  v330 = (char *)&v295 - v68;
  uint64_t v333 = v66;
  uint64_t v328 = *(void *)(v66 - 8);
  uint64_t v69 = MEMORY[0x1F4188790](v67);
  uint64_t v299 = (char *)&v295 - v70;
  uint64_t v374 = *(void *)(v65 - 8);
  uint64_t v71 = MEMORY[0x1F4188790](v69);
  uint64_t v327 = (char *)&v295 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v71);
  uint64_t v326 = (char *)&v295 - v73;
  uint64_t v74 = a3[10];
  uint64_t v75 = a3[2];
  uint64_t v323 = *(void *)(v74 + 8);
  uint64_t v76 = swift_getAssociatedTypeWitness();
  uint64_t v298 = sub_1C4497B38();
  uint64_t v297 = *(void *)(v298 - 8);
  uint64_t v77 = MEMORY[0x1F4188790](v298);
  uint64_t v324 = (char *)&v295 - v78;
  uint64_t v325 = v76;
  uint64_t v322 = *(void *)(v76 - 8);
  uint64_t v79 = MEMORY[0x1F4188790](v77);
  uint64_t v296 = (char *)&v295 - v80;
  uint64_t v373 = *(void *)(v75 - 8);
  uint64_t v81 = MEMORY[0x1F4188790](v79);
  uint64_t v321 = (char *)&v295 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v81);
  uint64_t v320 = (char *)&v295 - v83;
  uint64_t v390 = v75;
  uint64_t v404 = v75;
  uint64_t v405 = v65;
  uint64_t v391 = v65;
  uint64_t v392 = v55;
  uint64_t v406 = v55;
  uint64_t v407 = v45;
  uint64_t v393 = v45;
  uint64_t v395 = v35;
  uint64_t v408 = v35;
  uint64_t v409 = v401;
  uint64_t v410 = v403;
  uint64_t v411 = v402;
  uint64_t v385 = v74;
  uint64_t v412 = v74;
  uint64_t v413 = v64;
  uint64_t v386 = v64;
  uint64_t v387 = v54;
  uint64_t v414 = v54;
  uint64_t v415 = v44;
  uint64_t v388 = v44;
  uint64_t v416 = v397;
  uint64_t v417 = v398;
  uint64_t v418 = v399;
  uint64_t v419 = v400;
  uint64_t v84 = type metadata accessor for TaggedValue_8.TaggedEnum();
  uint64_t v85 = *(void *)(v84 - 8);
  uint64_t v86 = MEMORY[0x1F4188790](v84);
  v372 = (char *)&v295 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = MEMORY[0x1F4188790](v86);
  v371 = (char *)&v295 - v89;
  uint64_t v90 = MEMORY[0x1F4188790](v88);
  v370 = (char *)&v295 - v91;
  uint64_t v92 = MEMORY[0x1F4188790](v90);
  v369 = (char *)&v295 - v93;
  uint64_t v94 = MEMORY[0x1F4188790](v92);
  uint64_t v368 = (char *)&v295 - v95;
  uint64_t v96 = MEMORY[0x1F4188790](v94);
  uint64_t v98 = (char *)&v295 - v97;
  uint64_t v99 = MEMORY[0x1F4188790](v96);
  uint64_t v101 = (char *)&v295 - v100;
  uint64_t v102 = MEMORY[0x1F4188790](v99);
  uint64_t v104 = (char *)&v295 - v103;
  MEMORY[0x1F4188790](v102);
  uint64_t v106 = (char *)&v295 - v105;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v384 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v108 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v110 = (char *)&v295 - v109;
  uint64_t v383 = v108;
  uint64_t v111 = (char *)&v295 + *(int *)(v108 + 48) - v109;
  uint64_t v382 = v85;
  uint64_t v112 = *(void (**)(char *, uint64_t, uint64_t))(v85 + 16);
  v112((char *)&v295 - v109, v394, v84);
  uint64_t v113 = (uint64_t *)v111;
  v112(v111, (uint64_t)v396, v84);
  v396 = v110;
  uint64_t v114 = v84;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v115 = v396;
      v112(v104, (uint64_t)v396, v84);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v132 = v391;
        (*(void (**)(char *, uint64_t))(v374 + 8))(v104, v391);
        uint64_t v117 = v389;
        uint64_t v119 = v399;
        uint64_t v118 = v400;
        uint64_t v120 = v402;
        uint64_t v121 = v403;
        uint64_t v122 = v398;
        uint64_t v123 = v397;
        uint64_t v124 = v401;
        uint64_t v125 = v388;
        uint64_t v126 = v395;
        uint64_t v127 = v387;
        uint64_t v128 = v393;
        uint64_t v129 = v386;
        uint64_t v130 = v392;
        uint64_t v131 = v385;
        goto LABEL_46;
      }
      uint64_t v133 = v374;
      uint64_t v134 = *(void (**)(char *, char *, uint64_t))(v374 + 32);
      uint64_t v135 = v326;
      uint64_t v136 = v391;
      v134(v326, v104, v391);
      uint64_t v137 = v327;
      v134(v327, (char *)v113, v136);
      uint64_t v138 = v330;
      (*(void (**)(char *, uint64_t, uint64_t))(v329 + 40))(v137, v381, v136);
      uint64_t v139 = *(void (**)(char *, uint64_t))(v133 + 8);
      v139(v137, v136);
      v139(v135, v136);
      uint64_t v140 = v138;
      uint64_t v141 = v328;
      uint64_t v142 = v333;
      int v143 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v328 + 48))(v140, 1, v333);
      uint64_t v144 = v403;
      uint64_t v145 = v395;
      uint64_t v146 = v393;
      uint64_t v147 = v392;
      if (v143 == 1)
      {
        uint64_t v148 = v401;
        (*(void (**)(char *, uint64_t))(v300 + 8))(v140, v301);
        goto LABEL_16;
      }
      uint64_t v266 = *(void (**)(char *, char *, uint64_t))(v141 + 32);
      uint64_t v267 = v299;
      v266(v299, v140, v142);
      uint64_t v268 = v142;
      uint64_t v269 = v389;
      v266(v389, v267, v268);
      uint64_t v404 = v390;
      uint64_t v405 = v136;
      uint64_t v406 = v147;
      uint64_t v407 = v146;
      uint64_t v408 = v145;
      uint64_t v409 = v401;
      uint64_t v410 = v403;
      uint64_t v411 = v402;
      uint64_t v412 = v385;
      uint64_t v413 = v386;
      uint64_t v414 = v387;
      uint64_t v415 = v388;
      uint64_t v416 = v397;
      uint64_t v417 = v398;
      uint64_t v418 = v399;
      uint64_t v419 = v400;
      uint64_t v270 = type metadata accessor for TaggedValue_8.ObservableDifference();
      goto LABEL_60;
    case 2u:
      uint64_t v115 = v396;
      v112(v101, (uint64_t)v396, v84);
      uint64_t v149 = v111;
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        uint64_t v130 = v392;
        (*(void (**)(char *, uint64_t))(v375 + 8))(v101, v392);
        uint64_t v117 = v389;
        uint64_t v119 = v399;
        uint64_t v118 = v400;
        uint64_t v120 = v402;
        uint64_t v121 = v403;
        uint64_t v122 = v398;
        uint64_t v123 = v397;
        uint64_t v124 = v401;
        uint64_t v125 = v388;
        uint64_t v126 = v395;
        uint64_t v127 = v387;
        uint64_t v128 = v393;
        uint64_t v129 = v386;
        goto LABEL_45;
      }
      uint64_t v150 = v375;
      uint64_t v151 = *(void (**)(char *, char *, uint64_t))(v375 + 32);
      uint64_t v152 = v331;
      uint64_t v147 = v392;
      v151(v331, v101, v392);
      int v153 = v332;
      v151(v332, v149, v147);
      uint64_t v154 = v336;
      (*(void (**)(char *, uint64_t, uint64_t))(v335 + 40))(v153, v381, v147);
      uint64_t v155 = *(void (**)(char *, uint64_t))(v150 + 8);
      v155(v153, v147);
      v155(v152, v147);
      uint64_t v156 = v154;
      uint64_t v157 = v334;
      uint64_t v158 = v339;
      int v159 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v334 + 48))(v156, 1, v339);
      uint64_t v144 = v403;
      uint64_t v145 = v395;
      uint64_t v146 = v393;
      uint64_t v136 = v391;
      if (v159 == 1)
      {
        uint64_t v148 = v401;
        (*(void (**)(char *, uint64_t))(v303 + 8))(v156, v304);
        goto LABEL_16;
      }
      uint64_t v271 = *(void (**)(char *, char *, uint64_t))(v157 + 32);
      uint64_t v272 = v302;
      v271(v302, v156, v158);
      uint64_t v273 = v158;
      uint64_t v269 = v389;
      v271(v389, v272, v273);
      uint64_t v404 = v390;
      uint64_t v405 = v136;
      uint64_t v406 = v147;
      uint64_t v407 = v146;
      uint64_t v408 = v145;
      uint64_t v409 = v401;
      uint64_t v410 = v403;
      uint64_t v411 = v402;
      uint64_t v412 = v385;
      uint64_t v413 = v386;
      uint64_t v414 = v387;
      uint64_t v415 = v388;
      uint64_t v416 = v397;
      uint64_t v417 = v398;
      uint64_t v418 = v399;
      uint64_t v419 = v400;
      uint64_t v270 = type metadata accessor for TaggedValue_8.ObservableDifference();
      goto LABEL_60;
    case 3u:
      v112(v98, (uint64_t)v396, v84);
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        uint64_t v128 = v393;
        (*(void (**)(char *, uint64_t))(v376 + 8))(v98, v393);
        uint64_t v117 = v389;
        uint64_t v119 = v399;
        uint64_t v118 = v400;
        uint64_t v120 = v402;
        uint64_t v121 = v403;
        uint64_t v122 = v398;
        uint64_t v115 = v396;
        uint64_t v123 = v397;
        uint64_t v124 = v401;
        uint64_t v125 = v388;
        uint64_t v126 = v395;
        uint64_t v127 = v387;
        goto LABEL_44;
      }
      uint64_t v160 = v376;
      uint64_t v161 = *(void (**)(char *, char *, uint64_t))(v376 + 32);
      uint64_t v162 = v337;
      uint64_t v163 = v393;
      v161(v337, v98, v393);
      uint64_t v164 = v338;
      v161(v338, (char *)v113, v163);
      uint64_t v165 = v342;
      (*(void (**)(char *, uint64_t, uint64_t))(v341 + 40))(v164, v381, v163);
      uint64_t v166 = *(void (**)(char *, uint64_t))(v160 + 8);
      v166(v164, v163);
      v166(v162, v163);
      uint64_t v167 = v165;
      uint64_t v168 = v340;
      uint64_t v169 = v345;
      int v170 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v340 + 48))(v167, 1, v345);
      uint64_t v171 = v402;
      uint64_t v172 = v395;
      uint64_t v173 = v392;
      uint64_t v174 = v391;
      uint64_t v175 = v390;
      if (v170 == 1)
      {
        uint64_t v176 = v403;
        (*(void (**)(char *, uint64_t))(v306 + 8))(v167, v307);
        uint64_t v404 = v175;
        uint64_t v405 = v174;
        uint64_t v406 = v173;
        uint64_t v407 = v163;
        uint64_t v408 = v172;
        uint64_t v409 = v401;
        uint64_t v410 = v176;
        uint64_t v411 = v171;
        uint64_t v412 = v385;
        uint64_t v413 = v386;
        uint64_t v414 = v387;
        uint64_t v415 = v388;
        uint64_t v416 = v397;
        uint64_t v417 = v398;
        uint64_t v418 = v399;
        uint64_t v419 = v400;
        uint64_t v177 = type metadata accessor for TaggedValue_8.ObservableDifference();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v177 - 8) + 56))(v389, 1, 1, v177);
      }
      else
      {
        uint64_t v274 = *(void (**)(char *, char *, uint64_t))(v168 + 32);
        uint64_t v275 = v305;
        v274(v305, v167, v169);
        uint64_t v276 = v169;
        uint64_t v277 = v389;
        v274(v389, v275, v276);
        uint64_t v404 = v175;
        uint64_t v405 = v174;
        uint64_t v406 = v173;
        uint64_t v407 = v163;
        uint64_t v408 = v172;
        uint64_t v409 = v401;
        uint64_t v410 = v403;
        uint64_t v411 = v402;
        uint64_t v412 = v385;
        uint64_t v413 = v386;
        uint64_t v414 = v387;
        uint64_t v415 = v388;
        uint64_t v416 = v397;
        uint64_t v417 = v398;
        uint64_t v418 = v399;
        uint64_t v419 = v400;
        uint64_t v278 = type metadata accessor for TaggedValue_8.ObservableDifference();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v278 - 8) + 56))(v277, 0, 1, v278);
      }
      uint64_t v249 = v382;
      uint64_t v250 = v114;
      uint64_t v115 = v396;
      return (*(uint64_t (**)(char *, uint64_t))(v249 + 8))(v115, v250);
    case 4u:
      uint64_t v178 = v368;
      uint64_t v115 = v396;
      v112(v368, (uint64_t)v396, v84);
      uint64_t v179 = v111;
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        uint64_t v126 = v395;
        (*(void (**)(char *, uint64_t))(v377 + 8))(v178, v395);
        uint64_t v117 = v389;
        uint64_t v119 = v399;
        uint64_t v118 = v400;
        uint64_t v120 = v402;
        uint64_t v121 = v403;
        uint64_t v122 = v398;
        uint64_t v123 = v397;
        uint64_t v124 = v401;
        uint64_t v125 = v388;
        goto LABEL_43;
      }
      uint64_t v180 = v377;
      uint64_t v181 = *(void (**)(char *, char *, uint64_t))(v377 + 32);
      uint64_t v182 = v343;
      uint64_t v145 = v395;
      v181(v343, v178, v395);
      uint64_t v183 = v344;
      v181(v344, v179, v145);
      int v184 = v348;
      (*(void (**)(char *, uint64_t, uint64_t))(v347 + 40))(v183, v381, v145);
      uint64_t v185 = *(void (**)(char *, uint64_t))(v180 + 8);
      v185(v183, v145);
      v185(v182, v145);
      uint64_t v186 = v184;
      uint64_t v187 = v346;
      uint64_t v188 = v351;
      int v189 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v346 + 48))(v186, 1, v351);
      uint64_t v144 = v403;
      uint64_t v146 = v393;
      uint64_t v147 = v392;
      uint64_t v136 = v391;
      if (v189 != 1)
      {
        uint64_t v279 = *(void (**)(char *, char *, uint64_t))(v187 + 32);
        uint64_t v280 = v308;
        v279(v308, v186, v188);
        uint64_t v281 = v188;
        uint64_t v269 = v389;
        v279(v389, v280, v281);
        uint64_t v404 = v390;
        uint64_t v405 = v136;
        uint64_t v406 = v147;
        uint64_t v407 = v146;
        uint64_t v408 = v145;
        uint64_t v409 = v401;
        uint64_t v410 = v403;
        uint64_t v411 = v402;
        uint64_t v412 = v385;
        uint64_t v413 = v386;
        uint64_t v414 = v387;
        uint64_t v415 = v388;
        uint64_t v416 = v397;
        uint64_t v417 = v398;
        uint64_t v418 = v399;
        uint64_t v419 = v400;
        uint64_t v270 = type metadata accessor for TaggedValue_8.ObservableDifference();
        goto LABEL_60;
      }
      uint64_t v148 = v401;
      (*(void (**)(char *, uint64_t))(v309 + 8))(v186, v310);
LABEL_16:
      uint64_t v404 = v390;
      uint64_t v405 = v136;
      uint64_t v406 = v147;
      uint64_t v407 = v146;
      uint64_t v408 = v145;
      uint64_t v409 = v148;
      uint64_t v410 = v144;
      goto LABEL_30;
    case 5u:
      uint64_t v190 = v369;
      uint64_t v115 = v396;
      v112(v369, (uint64_t)v396, v84);
      if (swift_getEnumCaseMultiPayload() != 5)
      {
        uint64_t v247 = v190;
        uint64_t v124 = v401;
        (*(void (**)(char *, uint64_t))(v378 + 8))(v247, v401);
        uint64_t v117 = v389;
        uint64_t v119 = v399;
        uint64_t v118 = v400;
        uint64_t v120 = v402;
        uint64_t v121 = v403;
        uint64_t v122 = v398;
        uint64_t v123 = v397;
        goto LABEL_42;
      }
      uint64_t v191 = v378;
      uint64_t v192 = *(void (**)(char *, char *, uint64_t))(v378 + 32);
      uint64_t v193 = v349;
      uint64_t v194 = v190;
      uint64_t v195 = v401;
      v192(v349, v194, v401);
      uint64_t v196 = v350;
      v192(v350, (char *)v113, v195);
      uint64_t v197 = v354;
      (*(void (**)(char *, uint64_t, uint64_t))(v353 + 40))(v196, v381, v195);
      uint64_t v198 = *(void (**)(char *, uint64_t))(v191 + 8);
      v198(v196, v195);
      v198(v193, v195);
      uint64_t v199 = v197;
      uint64_t v200 = v352;
      uint64_t v201 = v357;
      int v202 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v352 + 48))(v199, 1, v357);
      uint64_t v203 = v402;
      uint64_t v204 = v393;
      uint64_t v205 = v392;
      uint64_t v206 = v391;
      if (v202 == 1)
      {
        uint64_t v207 = v395;
        (*(void (**)(char *, uint64_t))(v312 + 8))(v199, v313);
        uint64_t v404 = v390;
        uint64_t v405 = v206;
        uint64_t v406 = v205;
        uint64_t v407 = v204;
        uint64_t v408 = v207;
        uint64_t v409 = v195;
        uint64_t v410 = v403;
        goto LABEL_23;
      }
      uint64_t v282 = *(void (**)(char *, char *, uint64_t))(v200 + 32);
      uint64_t v283 = v311;
      v282(v311, v199, v201);
      uint64_t v284 = v201;
      uint64_t v269 = v389;
      v282(v389, v283, v284);
      uint64_t v404 = v390;
      uint64_t v405 = v206;
      uint64_t v406 = v205;
      uint64_t v407 = v204;
      uint64_t v408 = v395;
      uint64_t v409 = v195;
      uint64_t v410 = v403;
      uint64_t v411 = v402;
      uint64_t v412 = v385;
      uint64_t v413 = v386;
      uint64_t v414 = v387;
      uint64_t v415 = v388;
      uint64_t v416 = v397;
      uint64_t v417 = v398;
      uint64_t v418 = v399;
      uint64_t v419 = v400;
      uint64_t v270 = type metadata accessor for TaggedValue_8.ObservableDifference();
      goto LABEL_60;
    case 6u:
      uint64_t v208 = v370;
      uint64_t v115 = v396;
      v112(v370, (uint64_t)v396, v84);
      if (swift_getEnumCaseMultiPayload() != 6)
      {
        uint64_t v121 = v403;
        (*(void (**)(char *, uint64_t))(v379 + 8))(v208, v403);
        uint64_t v117 = v389;
        uint64_t v119 = v399;
        uint64_t v118 = v400;
        uint64_t v120 = v402;
        uint64_t v122 = v398;
        goto LABEL_41;
      }
      uint64_t v209 = v379;
      uint64_t v210 = *(void (**)(char *, char *, uint64_t))(v379 + 32);
      uint64_t v211 = v355;
      uint64_t v212 = v208;
      uint64_t v213 = v403;
      v210(v355, v212, v403);
      uint64_t v214 = v356;
      v210(v356, (char *)v113, v213);
      uint64_t v215 = v360;
      (*(void (**)(char *, uint64_t, uint64_t))(v359 + 40))(v214, v381, v213);
      uint64_t v216 = *(void (**)(char *, uint64_t))(v209 + 8);
      v216(v214, v213);
      v216(v211, v213);
      uint64_t v217 = v215;
      uint64_t v218 = v358;
      uint64_t v219 = v363;
      int v220 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v358 + 48))(v217, 1, v363);
      uint64_t v203 = v402;
      uint64_t v221 = v393;
      uint64_t v222 = v392;
      uint64_t v223 = v391;
      if (v220 != 1)
      {
        uint64_t v285 = *(void (**)(char *, char *, uint64_t))(v218 + 32);
        v286 = v314;
        v285(v314, v217, v219);
        uint64_t v287 = v219;
        uint64_t v269 = v389;
        v285(v389, v286, v287);
        uint64_t v404 = v390;
        uint64_t v405 = v223;
        uint64_t v406 = v222;
        uint64_t v407 = v221;
        uint64_t v408 = v395;
        uint64_t v409 = v401;
        uint64_t v410 = v213;
        uint64_t v411 = v402;
        uint64_t v412 = v385;
        uint64_t v413 = v386;
        uint64_t v414 = v387;
        uint64_t v415 = v388;
        uint64_t v416 = v397;
        uint64_t v417 = v398;
        uint64_t v418 = v399;
        uint64_t v419 = v400;
        uint64_t v270 = type metadata accessor for TaggedValue_8.ObservableDifference();
        goto LABEL_60;
      }
      uint64_t v224 = v395;
      (*(void (**)(char *, uint64_t))(v315 + 8))(v217, v316);
      uint64_t v404 = v390;
      uint64_t v405 = v223;
      uint64_t v406 = v222;
      uint64_t v407 = v221;
      uint64_t v408 = v224;
      uint64_t v409 = v401;
      uint64_t v410 = v213;
LABEL_23:
      uint64_t v411 = v203;
      goto LABEL_31;
    case 7u:
      int v225 = v371;
      uint64_t v115 = v396;
      v112(v371, (uint64_t)v396, v114);
      if (swift_getEnumCaseMultiPayload() != 7)
      {
        uint64_t v120 = v402;
        (*(void (**)(char *, uint64_t))(v380 + 8))(v225, v402);
        uint64_t v117 = v389;
        uint64_t v119 = v399;
        uint64_t v118 = v400;
        goto LABEL_40;
      }
      uint64_t v226 = v380;
      uint64_t v227 = *(void (**)(char *, char *, uint64_t))(v380 + 32);
      uint64_t v228 = v361;
      uint64_t v229 = v402;
      v227(v361, v225, v402);
      uint64_t v230 = v362;
      v227(v362, v111, v229);
      uint64_t v231 = v365;
      (*(void (**)(char *, uint64_t, uint64_t))(v366 + 40))(v230, v381, v229);
      uint64_t v232 = *(void (**)(char *, uint64_t))(v226 + 8);
      v232(v230, v229);
      v232(v228, v229);
      uint64_t v233 = v231;
      uint64_t v234 = v364;
      uint64_t v235 = v367;
      int v236 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v364 + 48))(v233, 1, v367);
      uint64_t v237 = v403;
      uint64_t v238 = v393;
      uint64_t v239 = v392;
      uint64_t v240 = v391;
      if (v236 == 1)
      {
        uint64_t v241 = v395;
        (*(void (**)(char *, uint64_t))(v318 + 8))(v233, v319);
        uint64_t v404 = v390;
        uint64_t v405 = v240;
        uint64_t v406 = v239;
        uint64_t v407 = v238;
        uint64_t v408 = v241;
        uint64_t v409 = v401;
        uint64_t v410 = v237;
        uint64_t v411 = v229;
        goto LABEL_31;
      }
      uint64_t v288 = *(void (**)(char *, char *, uint64_t))(v234 + 32);
      uint64_t v289 = v317;
      v288(v317, v233, v235);
      uint64_t v290 = v235;
      uint64_t v269 = v389;
      v288(v389, v289, v290);
      uint64_t v404 = v390;
      uint64_t v405 = v240;
      uint64_t v406 = v239;
      uint64_t v407 = v238;
      uint64_t v408 = v395;
      uint64_t v409 = v401;
      uint64_t v410 = v403;
      uint64_t v411 = v229;
      uint64_t v412 = v385;
      uint64_t v413 = v386;
      uint64_t v414 = v387;
      uint64_t v415 = v388;
      uint64_t v416 = v397;
      uint64_t v417 = v398;
      uint64_t v418 = v399;
      uint64_t v419 = v400;
      uint64_t v270 = type metadata accessor for TaggedValue_8.ObservableDifference();
      goto LABEL_60;
    case 8u:
      uint64_t v242 = (uint64_t *)v372;
      uint64_t v115 = v396;
      v112(v372, (uint64_t)v396, v84);
      uint64_t v243 = v113;
      if (swift_getEnumCaseMultiPayload() != 8)
      {
        swift_release();
        uint64_t v117 = v389;
        uint64_t v119 = v399;
        uint64_t v118 = v400;
        uint64_t v120 = v402;
LABEL_40:
        uint64_t v122 = v398;
        uint64_t v121 = v403;
LABEL_41:
        uint64_t v123 = v397;
        uint64_t v124 = v401;
LABEL_42:
        uint64_t v125 = v388;
        uint64_t v126 = v395;
LABEL_43:
        uint64_t v127 = v387;
        uint64_t v128 = v393;
LABEL_44:
        uint64_t v129 = v386;
        uint64_t v130 = v392;
LABEL_45:
        uint64_t v131 = v385;
        uint64_t v132 = v391;
LABEL_46:
        uint64_t v116 = v390;
        goto LABEL_47;
      }
      uint64_t v244 = *v242;
      uint64_t v245 = *v243;
      swift_release();
      swift_release();
      if (v244 != v245)
      {
        uint64_t v404 = v390;
        uint64_t v405 = v391;
        uint64_t v406 = v392;
        uint64_t v407 = v393;
        uint64_t v408 = v395;
        uint64_t v409 = v401;
        uint64_t v410 = v403;
        uint64_t v411 = v402;
        uint64_t v412 = v385;
        uint64_t v413 = v386;
        uint64_t v414 = v387;
        uint64_t v415 = v388;
        uint64_t v416 = v397;
        uint64_t v417 = v398;
        uint64_t v418 = v399;
        uint64_t v419 = v400;
        uint64_t v270 = type metadata accessor for TaggedValue_8.ObservableDifference();
        uint64_t v269 = v389;
        goto LABEL_60;
      }
      uint64_t v404 = v390;
      uint64_t v405 = v391;
      uint64_t v406 = v392;
      uint64_t v407 = v393;
      uint64_t v408 = v395;
      uint64_t v409 = v401;
      uint64_t v410 = v403;
LABEL_30:
      uint64_t v411 = v402;
      goto LABEL_31;
    default:
      uint64_t v115 = v396;
      v112(v106, (uint64_t)v396, v84);
      if (swift_getEnumCaseMultiPayload())
      {
        uint64_t v116 = v390;
        (*(void (**)(char *, uint64_t))(v373 + 8))(v106, v390);
        uint64_t v117 = v389;
        uint64_t v119 = v399;
        uint64_t v118 = v400;
        uint64_t v120 = v402;
        uint64_t v121 = v403;
        uint64_t v122 = v398;
        uint64_t v123 = v397;
        uint64_t v124 = v401;
        uint64_t v125 = v388;
        uint64_t v126 = v395;
        uint64_t v127 = v387;
        uint64_t v128 = v393;
        uint64_t v129 = v386;
        uint64_t v130 = v392;
        uint64_t v131 = v385;
        uint64_t v132 = v391;
LABEL_47:
        uint64_t v404 = v116;
        uint64_t v405 = v132;
        uint64_t v406 = v130;
        uint64_t v407 = v128;
        uint64_t v408 = v126;
        uint64_t v409 = v124;
        uint64_t v410 = v121;
        uint64_t v411 = v120;
        uint64_t v412 = v131;
        uint64_t v413 = v129;
        uint64_t v414 = v127;
        uint64_t v415 = v125;
        uint64_t v416 = v123;
        uint64_t v417 = v122;
        uint64_t v418 = v119;
        uint64_t v419 = v118;
        uint64_t v248 = type metadata accessor for TaggedValue_8.ObservableDifference();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v248 - 8) + 56))(v117, 0, 1, v248);
        uint64_t v249 = v384;
        uint64_t v250 = v383;
      }
      else
      {
        uint64_t v251 = v373;
        uint64_t v252 = *(void (**)(char *, char *, uint64_t))(v373 + 32);
        uint64_t v253 = v320;
        uint64_t v254 = v390;
        v252(v320, v106, v390);
        v255 = v321;
        v252(v321, (char *)v113, v254);
        v256 = v324;
        (*(void (**)(char *, uint64_t, uint64_t))(v323 + 40))(v255, v381, v254);
        v257 = *(void (**)(char *, uint64_t))(v251 + 8);
        v257(v255, v254);
        v257(v253, v254);
        uint64_t v258 = v256;
        uint64_t v259 = v322;
        uint64_t v260 = v325;
        int v261 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v322 + 48))(v258, 1, v325);
        uint64_t v262 = v402;
        uint64_t v263 = v393;
        uint64_t v264 = v392;
        uint64_t v265 = v391;
        if (v261 == 1)
        {
          (*(void (**)(char *, uint64_t))(v297 + 8))(v258, v298);
          uint64_t v404 = v254;
          uint64_t v405 = v265;
          uint64_t v406 = v264;
          uint64_t v407 = v263;
          uint64_t v408 = v395;
          uint64_t v409 = v401;
          uint64_t v410 = v403;
          uint64_t v411 = v262;
LABEL_31:
          uint64_t v412 = v385;
          uint64_t v413 = v386;
          uint64_t v414 = v387;
          uint64_t v415 = v388;
          uint64_t v416 = v397;
          uint64_t v417 = v398;
          uint64_t v418 = v399;
          uint64_t v419 = v400;
          uint64_t v246 = type metadata accessor for TaggedValue_8.ObservableDifference();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v246 - 8) + 56))(v389, 1, 1, v246);
        }
        else
        {
          uint64_t v291 = *(void (**)(char *, char *, uint64_t))(v259 + 32);
          uint64_t v292 = v296;
          v291(v296, v258, v260);
          uint64_t v293 = v260;
          uint64_t v269 = v389;
          v291(v389, v292, v293);
          uint64_t v404 = v254;
          uint64_t v405 = v265;
          uint64_t v406 = v264;
          uint64_t v407 = v263;
          uint64_t v408 = v395;
          uint64_t v409 = v401;
          uint64_t v410 = v403;
          uint64_t v411 = v402;
          uint64_t v412 = v385;
          uint64_t v413 = v386;
          uint64_t v414 = v387;
          uint64_t v415 = v388;
          uint64_t v416 = v397;
          uint64_t v417 = v398;
          uint64_t v418 = v399;
          uint64_t v419 = v400;
          uint64_t v270 = type metadata accessor for TaggedValue_8.ObservableDifference();
LABEL_60:
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v270 - 8) + 56))(v269, 0, 1, v270);
        }
        uint64_t v249 = v382;
        uint64_t v250 = v114;
      }
      return (*(uint64_t (**)(char *, uint64_t))(v249 + 8))(v115, v250);
  }
}

uint64_t type metadata accessor for TaggedValue_8.ObservableDifference()
{
  return swift_getGenericMetadata();
}

BOOL TaggedValue_9.ObservableDifference.isIdentityChanged.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  BOOL v5 = swift_getEnumCaseMultiPayload() == 10;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

uint64_t sub_1C41838E8()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_9.taggedEnum.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TaggedValue_9.TaggedEnum();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t type metadata accessor for TaggedValue_9.TaggedEnum()
{
  return swift_getGenericMetadata();
}

uint64_t TaggedValue_9.taggedEnum.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TaggedValue_9.TaggedEnum();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*TaggedValue_9.taggedEnum.modify())(void, void)
{
  return nullsub_1;
}

uint64_t TaggedValue_9.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_9.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_9.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_9.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_9.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_9.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_9.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_9.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_9.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_9.init(tag:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  *a3 = a1;
  a3[1] = v3;
  type metadata accessor for TaggedValue_9.TaggedEnum();
  return swift_storeEnumTagMultiPayload();
}

uint64_t TaggedValue_9.tagged1.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v21[0] = a1[1];
  v21[1] = v21[0];
  long long v6 = a1[3];
  long long v7 = a1[4];
  void v21[2] = v5;
  v21[3] = v6;
  long long v8 = a1[5];
  long long v9 = a1[6];
  v21[4] = v7;
  v21[5] = v8;
  long long v10 = a1[7];
  long long v11 = a1[8];
  v21[6] = v9;
  v21[7] = v10;
  long long v12 = a1[9];
  v21[8] = v11;
  v21[9] = v12;
  uint64_t v13 = type metadata accessor for TaggedValue_9.TaggedEnum();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v21 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)v21 - v15, v3, v13);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v17 = *(void *)&v21[0];
    uint64_t v18 = *(void *)(*(void *)&v21[0] - 8);
    uint64_t v19 = 1;
  }
  else
  {
    uint64_t v18 = *(void *)(*(void *)&v21[0] - 8);
    (*(void (**)(uint64_t, char *))(v18 + 32))(a2, v16);
    uint64_t v17 = *(void *)&v21[0];
    uint64_t v19 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(a2, v19, 1, v17);
}

uint64_t TaggedValue_9.tagged2.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 152);
  uint64_t v14 = *(void *)(a1 + 16);
  long long v13 = *(_OWORD *)(a1 + 24);
  long long v15 = v13;
  long long v16 = *(_OWORD *)(a1 + 40);
  long long v17 = *(_OWORD *)(a1 + 56);
  long long v18 = *(_OWORD *)(a1 + 72);
  long long v19 = *(_OWORD *)(a1 + 88);
  long long v20 = *(_OWORD *)(a1 + 104);
  long long v21 = *(_OWORD *)(a1 + 120);
  long long v22 = *(_OWORD *)(a1 + 136);
  uint64_t v23 = v5;
  uint64_t v6 = type metadata accessor for TaggedValue_9.TaggedEnum();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  long long v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v13 - v8, v3, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, char *))(v10 + 32))(a2, v9);
    uint64_t v11 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v10 + 56))(a2, v11, 1, v13);
}

uint64_t TaggedValue_9.tagged3.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[1];
  v20[0] = a1[2];
  v20[1] = v5;
  long long v6 = a1[3];
  long long v7 = a1[4];
  v20[2] = v20[0];
  v20[3] = v6;
  long long v8 = a1[5];
  long long v9 = a1[6];
  void v20[4] = v7;
  void v20[5] = v8;
  long long v10 = a1[7];
  long long v11 = a1[8];
  v20[6] = v9;
  v20[7] = v10;
  long long v12 = a1[9];
  v20[8] = v11;
  _OWORD v20[9] = v12;
  uint64_t v13 = type metadata accessor for TaggedValue_9.TaggedEnum();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  long long v16 = (char *)v20 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)v20 - v15, v3, v13);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v17 = *(void *)(*(void *)&v20[0] - 8);
    (*(void (**)(uint64_t, char *))(v17 + 32))(a2, v16);
    uint64_t v18 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v17 = *(void *)(*(void *)&v20[0] - 8);
    uint64_t v18 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v17 + 56))(a2, v18, 1, *(void *)&v20[0]);
}

uint64_t TaggedValue_9.tagged4.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 152);
  long long v6 = *(_OWORD *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 32);
  v14[0] = *(_OWORD *)(a1 + 40);
  v14[1] = v6;
  long long v16 = v14[0];
  long long v17 = *(_OWORD *)(a1 + 56);
  long long v18 = *(_OWORD *)(a1 + 72);
  long long v19 = *(_OWORD *)(a1 + 88);
  long long v20 = *(_OWORD *)(a1 + 104);
  long long v21 = *(_OWORD *)(a1 + 120);
  long long v22 = *(_OWORD *)(a1 + 136);
  uint64_t v23 = v5;
  uint64_t v7 = type metadata accessor for TaggedValue_9.TaggedEnum();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  long long v10 = (char *)v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v14 - v9, v3, v7);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    (*(void (**)(uint64_t, char *))(v11 + 32))(a2, v10);
    uint64_t v12 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v11 = *(void *)(*(void *)&v14[0] - 8);
    uint64_t v12 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v11 + 56))(a2, v12, 1, *(void *)&v14[0]);
}

uint64_t TaggedValue_9.tagged5.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v16[1] = a1[1];
  v16[2] = v5;
  long long v6 = a1[4];
  v16[0] = a1[3];
  v16[3] = v16[0];
  v16[4] = v6;
  long long v7 = a1[6];
  _OWORD v16[5] = a1[5];
  _OWORD v16[6] = v7;
  long long v8 = a1[8];
  v16[7] = a1[7];
  v16[8] = v8;
  _OWORD v16[9] = a1[9];
  uint64_t v9 = type metadata accessor for TaggedValue_9.TaggedEnum();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v16 - v11, v3, v9);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    uint64_t v13 = *(void *)(*(void *)&v16[0] - 8);
    (*(void (**)(uint64_t, char *))(v13 + 32))(a2, v12);
    uint64_t v14 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v13 = *(void *)(*(void *)&v16[0] - 8);
    uint64_t v14 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v13 + 56))(a2, v14, 1, *(void *)&v16[0]);
}

uint64_t TaggedValue_9.tagged6.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 152);
  long long v7 = *(_OWORD *)(a1 + 32);
  v15[1] = *(_OWORD *)(a1 + 16);
  void v15[2] = v7;
  uint64_t v16 = v5;
  v15[0] = *(_OWORD *)(a1 + 56);
  long long v17 = v15[0];
  long long v18 = *(_OWORD *)(a1 + 72);
  long long v19 = *(_OWORD *)(a1 + 88);
  long long v20 = *(_OWORD *)(a1 + 104);
  long long v21 = *(_OWORD *)(a1 + 120);
  long long v22 = *(_OWORD *)(a1 + 136);
  uint64_t v23 = v6;
  uint64_t v8 = type metadata accessor for TaggedValue_9.TaggedEnum();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v15 - v10, v3, v8);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    (*(void (**)(uint64_t, char *))(v12 + 32))(a2, v11);
    uint64_t v13 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    uint64_t v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v12 + 56))(a2, v13, 1, *(void *)&v15[0]);
}

uint64_t TaggedValue_9.tagged7.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v16[1] = a1[1];
  v16[2] = v5;
  long long v6 = a1[4];
  v16[3] = a1[3];
  v16[4] = v6;
  v16[0] = v6;
  long long v7 = a1[6];
  _OWORD v16[5] = a1[5];
  _OWORD v16[6] = v7;
  long long v8 = a1[8];
  v16[7] = a1[7];
  v16[8] = v8;
  _OWORD v16[9] = a1[9];
  uint64_t v9 = type metadata accessor for TaggedValue_9.TaggedEnum();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v16 - v11, v3, v9);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    uint64_t v13 = *(void *)(*(void *)&v16[0] - 8);
    (*(void (**)(uint64_t, char *))(v13 + 32))(a2, v12);
    uint64_t v14 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v13 = *(void *)(*(void *)&v16[0] - 8);
    uint64_t v14 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v13 + 56))(a2, v14, 1, *(void *)&v16[0]);
}

uint64_t TaggedValue_9.tagged8.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 152);
  long long v7 = *(_OWORD *)(a1 + 32);
  v15[1] = *(_OWORD *)(a1 + 16);
  void v15[2] = v7;
  _OWORD v15[3] = *(_OWORD *)(a1 + 48);
  uint64_t v16 = v5;
  v15[0] = *(_OWORD *)(a1 + 72);
  long long v17 = v15[0];
  long long v18 = *(_OWORD *)(a1 + 88);
  long long v19 = *(_OWORD *)(a1 + 104);
  long long v20 = *(_OWORD *)(a1 + 120);
  long long v21 = *(_OWORD *)(a1 + 136);
  uint64_t v22 = v6;
  uint64_t v8 = type metadata accessor for TaggedValue_9.TaggedEnum();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v15 - v10, v3, v8);
  if (swift_getEnumCaseMultiPayload() == 7)
  {
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    (*(void (**)(uint64_t, char *))(v12 + 32))(a2, v11);
    uint64_t v13 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v12 = *(void *)(*(void *)&v15[0] - 8);
    uint64_t v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v12 + 56))(a2, v13, 1, *(void *)&v15[0]);
}

uint64_t TaggedValue_9.tagged9.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v16[1] = a1[1];
  v16[2] = v5;
  long long v6 = a1[4];
  v16[3] = a1[3];
  v16[4] = v6;
  long long v7 = a1[6];
  v16[0] = a1[5];
  _OWORD v16[5] = v16[0];
  _OWORD v16[6] = v7;
  long long v8 = a1[8];
  v16[7] = a1[7];
  v16[8] = v8;
  _OWORD v16[9] = a1[9];
  uint64_t v9 = type metadata accessor for TaggedValue_9.TaggedEnum();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v16 - v11, v3, v9);
  if (swift_getEnumCaseMultiPayload() == 8)
  {
    uint64_t v13 = *(void *)(*(void *)&v16[0] - 8);
    (*(void (**)(uint64_t, char *))(v13 + 32))(a2, v12);
    uint64_t v14 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v13 = *(void *)(*(void *)&v16[0] - 8);
    uint64_t v14 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v13 + 56))(a2, v14, 1, *(void *)&v16[0]);
}

uint64_t TaggedValue_9.unknown.getter@<X0>(_OWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[2];
  v15[0] = a1[1];
  v15[1] = v5;
  long long v6 = a1[4];
  void v15[2] = a1[3];
  _OWORD v15[3] = v6;
  long long v7 = a1[6];
  _OWORD v15[4] = a1[5];
  _OWORD v15[5] = v7;
  long long v8 = a1[8];
  v15[6] = a1[7];
  _OWORD v15[7] = v8;
  _OWORD v15[8] = a1[9];
  uint64_t v9 = type metadata accessor for TaggedValue_9.TaggedEnum();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v15 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v15 - v11, v3, v9);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 9)
  {
    uint64_t v14 = *((void *)v12 + 1);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v14 = 0;
  }
  *a2 = v14;
  return result;
}

uint64_t TaggedValue_9.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v95 = a1;
  uint64_t v92 = *(void *)(*(void *)(a2 + 80) - 8);
  uint64_t v2 = MEMORY[0x1F4188790](a1);
  uint64_t v91 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = *(void *)(*(void *)(v4 + 72) - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v2);
  uint64_t v88 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = *(void *)(*(void *)(v7 + 64) - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v85 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = *(void *)(*(void *)(v10 + 56) - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v82 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 + 48);
  uint64_t v80 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v79 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = *(void *)(*(void *)(v16 + 40) - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v76 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = *(void *)(*(void *)(v19 + 32) - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v73 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v22 + 24);
  uint64_t v72 = *(void *)(v23 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v20);
  uint64_t v71 = (char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(v26 + 16);
  uint64_t v70 = *(void *)(v27 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v24);
  uint64_t v69 = (char *)&v65 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v30[11];
  uint64_t v32 = v30[12];
  uint64_t v33 = v30[13];
  uint64_t v34 = v30[14];
  uint64_t v36 = v30[15];
  uint64_t v35 = v30[16];
  uint64_t v38 = v30[17];
  uint64_t v37 = v30[18];
  uint64_t v39 = v30[19];
  uint64_t v96 = v27;
  uint64_t v97 = v23;
  uint64_t v75 = v40;
  uint64_t v98 = v40;
  uint64_t v99 = v41;
  uint64_t v78 = v41;
  uint64_t v81 = v28;
  uint64_t v100 = v28;
  uint64_t v101 = v42;
  uint64_t v84 = v42;
  uint64_t v87 = v43;
  uint64_t v102 = v43;
  uint64_t v103 = v44;
  uint64_t v90 = v44;
  uint64_t v93 = v45;
  uint64_t v104 = v45;
  uint64_t v105 = v31;
  uint64_t v68 = v31;
  uint64_t v67 = v32;
  uint64_t v106 = v32;
  uint64_t v107 = v33;
  uint64_t v66 = v33;
  uint64_t v108 = v34;
  uint64_t v109 = v36;
  uint64_t v110 = v35;
  uint64_t v111 = v38;
  uint64_t v112 = v37;
  uint64_t v113 = v39;
  uint64_t v46 = type metadata accessor for TaggedValue_9.TaggedEnum();
  MEMORY[0x1F4188790](v46);
  uint64_t v48 = (char *)&v65 - v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))((char *)&v65 - v47, v94, v46);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v53 = v72;
      uint64_t v54 = v71;
      (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v71, v48, v23);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v67 + 8) + 48))(v95, v23);
      return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v54, v23);
    case 2u:
      uint64_t v55 = v74;
      uint64_t v56 = v73;
      uint64_t v57 = v75;
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v73, v48, v75);
      uint64_t v58 = *(void *)(v66 + 8);
      goto LABEL_11;
    case 3u:
      uint64_t v55 = v77;
      uint64_t v56 = v76;
      uint64_t v57 = v78;
      (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v76, v48, v78);
      uint64_t v58 = *(void *)(v34 + 8);
      goto LABEL_11;
    case 4u:
      uint64_t v55 = v80;
      uint64_t v56 = v79;
      uint64_t v57 = v81;
      (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v79, v48, v81);
      uint64_t v58 = *(void *)(v36 + 8);
      goto LABEL_11;
    case 5u:
      uint64_t v59 = v83;
      uint64_t v60 = v82;
      uint64_t v61 = v84;
      (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v82, v48, v84);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 + 8) + 48))(v95, v61);
      return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v60, v61);
    case 6u:
      uint64_t v55 = v86;
      uint64_t v56 = v85;
      uint64_t v57 = v87;
      (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v85, v48, v87);
      uint64_t v58 = *(void *)(v38 + 8);
      goto LABEL_11;
    case 7u:
      uint64_t v62 = v89;
      uint64_t v63 = v88;
      uint64_t v64 = v90;
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v88, v48, v90);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 + 8) + 48))(v95, v64);
      return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v63, v64);
    case 8u:
      uint64_t v55 = v92;
      uint64_t v56 = v91;
      uint64_t v57 = v93;
      (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v91, v48, v93);
      uint64_t v58 = *(void *)(v39 + 8);
LABEL_11:
      (*(void (**)(uint64_t, uint64_t))(v58 + 48))(v95, v57);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v56, v57);
      break;
    case 9u:
      (*(void (**)(uint64_t))(**((void **)v48 + 1) + 120))(v95);
      uint64_t result = swift_release();
      break;
    default:
      uint64_t v50 = v70;
      uint64_t v51 = v69;
      (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v69, v48, v27);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v68 + 8) + 48))(v95, v27);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v51, v27);
      break;
  }
  return result;
}

uint64_t TaggedValue_9.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v139 = a1;
  uint64_t v149 = a3;
  uint64_t v127 = *(void *)(*(void *)(a2 + 80) - 8);
  uint64_t v3 = MEMORY[0x1F4188790](a1);
  uint64_t v128 = (char *)&v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v126 = (char *)&v109 - v5;
  uint64_t v7 = *(void *)(v6 + 72);
  uint64_t v124 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v125 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v123 = (char *)&v109 - v11;
  uint64_t v121 = *(void *)(*(void *)(v12 + 64) - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v122 = (char *)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v120 = (char *)&v109 - v16;
  uint64_t v118 = *(void *)(*(void *)(v17 + 56) - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v119 = (char *)&v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v117 = (char *)&v109 - v21;
  uint64_t v115 = *(void *)(*(void *)(v22 + 48) - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  uint64_t v116 = (char *)&v109 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v109 - v26;
  uint64_t v113 = *(void *)(*(void *)(v28 + 40) - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v25);
  uint64_t v114 = (char *)&v109 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v33 = (char *)&v109 - v32;
  uint64_t v112 = *(void *)(*(void *)(v34 + 32) - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v31);
  uint64_t v37 = (char *)&v109 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x1F4188790](v35);
  uint64_t v40 = (char *)&v109 - v39;
  uint64_t v111 = *(void *)(*(void *)(v41 + 24) - 8);
  uint64_t v42 = MEMORY[0x1F4188790](v38);
  uint64_t v44 = (char *)&v109 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x1F4188790](v42);
  uint64_t v47 = (char *)&v109 - v46;
  uint64_t v110 = *(void *)(*(void *)(v48 + 16) - 8);
  uint64_t v49 = MEMORY[0x1F4188790](v45);
  uint64_t v51 = (char *)&v109 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = MEMORY[0x1F4188790](v49);
  uint64_t v54 = (char *)&v109 - v53;
  uint64_t v56 = v55[11];
  uint64_t v57 = v55[12];
  uint64_t v58 = v55[13];
  uint64_t v59 = v55[14];
  uint64_t v60 = v55[15];
  uint64_t v61 = v55[16];
  uint64_t v63 = v55[17];
  uint64_t v62 = v55[18];
  uint64_t v64 = v55[19];
  uint64_t v140 = v65;
  uint64_t v150 = v65;
  uint64_t v151 = v66;
  uint64_t v141 = v66;
  uint64_t v142 = v67;
  uint64_t v152 = v67;
  uint64_t v153 = v68;
  uint64_t v143 = v68;
  uint64_t v144 = v69;
  uint64_t v154 = v69;
  uint64_t v155 = v70;
  uint64_t v146 = v70;
  uint64_t v148 = v71;
  uint64_t v156 = v71;
  uint64_t v157 = v52;
  uint64_t v145 = v52;
  uint64_t v147 = v72;
  uint64_t v158 = v72;
  uint64_t v159 = v56;
  uint64_t v138 = v56;
  uint64_t v137 = v57;
  uint64_t v160 = v57;
  uint64_t v161 = v58;
  uint64_t v136 = v58;
  uint64_t v135 = v59;
  uint64_t v162 = v59;
  uint64_t v163 = v60;
  uint64_t v134 = v60;
  uint64_t v133 = v61;
  uint64_t v164 = v61;
  uint64_t v165 = v63;
  uint64_t v132 = v63;
  uint64_t v131 = v62;
  uint64_t v166 = v62;
  uint64_t v167 = v64;
  uint64_t v130 = v64;
  uint64_t v73 = type metadata accessor for TaggedValue_9.TaggedEnum();
  MEMORY[0x1F4188790](v73);
  uint64_t v75 = (char *)&v109 - v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))((char *)&v109 - v74, v129, v73);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v80 = v111;
      uint64_t v81 = v141;
      (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v47, v75, v141);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v137 + 8) + 24))(v139, v81);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v47, v81);
      uint64_t result = TaggedValue_9.init(_:)((uint64_t)v44, v81, (uint64_t)v149);
      break;
    case 2u:
      uint64_t v82 = v112;
      uint64_t v83 = v142;
      (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v40, v75, v142);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v136 + 8) + 24))(v139, v83);
      (*(void (**)(char *, uint64_t))(v82 + 8))(v40, v83);
      uint64_t result = TaggedValue_9.init(_:)((uint64_t)v37, v83, (uint64_t)v149);
      break;
    case 3u:
      uint64_t v84 = v113;
      uint64_t v85 = v143;
      (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v33, v75, v143);
      uint64_t v86 = (uint64_t)v114;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v135 + 8) + 24))(v139, v85);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v33, v85);
      uint64_t result = TaggedValue_9.init(_:)(v86, v85, (uint64_t)v149);
      break;
    case 4u:
      uint64_t v87 = v115;
      uint64_t v88 = v144;
      (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v27, v75, v144);
      uint64_t v89 = (uint64_t)v116;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v134 + 8) + 24))(v139, v88);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v27, v88);
      uint64_t result = TaggedValue_9.init(_:)(v89, v88, (uint64_t)v149);
      break;
    case 5u:
      uint64_t v90 = v118;
      uint64_t v91 = v117;
      uint64_t v92 = v146;
      (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v117, v75, v146);
      uint64_t v93 = (uint64_t)v119;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v133 + 8) + 24))(v139, v92);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v92);
      uint64_t result = TaggedValue_9.init(_:)(v93, v92, (uint64_t)v149);
      break;
    case 6u:
      uint64_t v94 = v121;
      uint64_t v95 = v120;
      uint64_t v96 = v148;
      (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v120, v75, v148);
      uint64_t v97 = (uint64_t)v122;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v132 + 8) + 24))(v139, v96);
      (*(void (**)(char *, uint64_t))(v94 + 8))(v95, v96);
      uint64_t result = TaggedValue_9.init(_:)(v97, v96, (uint64_t)v149);
      break;
    case 7u:
      uint64_t v98 = v124;
      uint64_t v99 = v123;
      uint64_t v100 = v145;
      (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v123, v75, v145);
      uint64_t v101 = (uint64_t)v125;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v131 + 8) + 24))(v139, v100);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v99, v100);
      uint64_t result = TaggedValue_9.init(_:)(v101, (uint64_t)v149, v100);
      break;
    case 8u:
      uint64_t v102 = v127;
      uint64_t v103 = v126;
      uint64_t v104 = v147;
      (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v126, v75, v147);
      uint64_t v105 = (uint64_t)v128;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v130 + 8) + 24))(v139, v104);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v103, v104);
      uint64_t result = TaggedValue_9.init(_:)(v105, (uint64_t)v149, v145, v104);
      break;
    case 9u:
      uint64_t v106 = *(void *)v75;
      uint64_t v107 = (*(uint64_t (**)(uint64_t))(**((void **)v75 + 1) + 104))(v139);
      swift_release();
      uint64_t v108 = v149;
      *uint64_t v149 = v106;
      v108[1] = v107;
      uint64_t v150 = v140;
      uint64_t v151 = v141;
      uint64_t v152 = v142;
      uint64_t v153 = v143;
      uint64_t v154 = v144;
      uint64_t v155 = v146;
      uint64_t v156 = v148;
      uint64_t v157 = v145;
      uint64_t v158 = v147;
      uint64_t v159 = v138;
      uint64_t v160 = v137;
      uint64_t v161 = v136;
      uint64_t v162 = v135;
      uint64_t v163 = v134;
      uint64_t v164 = v133;
      uint64_t v165 = v132;
      uint64_t v166 = v131;
      uint64_t v167 = v130;
      type metadata accessor for TaggedValue_9.TaggedEnum();
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
    default:
      uint64_t v77 = v110;
      uint64_t v78 = v140;
      (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v54, v75, v140);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v138 + 8) + 24))(v139, v78);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v54, v78);
      uint64_t result = TaggedValue_9.init(_:)((uint64_t)v51, v78, (uint64_t)v149);
      break;
  }
  return result;
}

uint64_t TaggedValue_9.copy(renamingReferences:)(unint64_t a1, uint64_t a2)
{
  return sub_1C41874F0(a1, a2, (void (*)(unint64_t *, uint64_t))TaggedValue_9.copy(renamingReferences:));
}

uint64_t sub_1C41874F0(unint64_t a1, uint64_t a2, void (*a3)(unint64_t *, uint64_t))
{
  if (!a1) {
    a1 = sub_1C3FE49A0(MEMORY[0x1E4FBC860]);
  }
  unint64_t v6 = a1;
  swift_bridgeObjectRetain();
  a3(&v6, a2);
  return swift_bridgeObjectRelease();
}

uint64_t TaggedValue_9.observableDifference(from:with:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v432 = a2;
  v447 = a1;
  v444 = a4;
  uint64_t v452 = a3[19];
  uint64_t v5 = a3[10];
  uint64_t v415 = *(void *)(v452 + 8);
  uint64_t v6 = v5;
  uint64_t v455 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v362 = sub_1C4497B38();
  uint64_t v361 = *(void *)(v362 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v362);
  uint64_t v414 = (char *)&v336 - v9;
  uint64_t v416 = AssociatedTypeWitness;
  uint64_t v413 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v360 = (char *)&v336 - v11;
  uint64_t v431 = *(void *)(v6 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v411 = (char *)&v336 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v410 = (char *)&v336 - v14;
  uint64_t v451 = a3[18];
  uint64_t v15 = a3[9];
  uint64_t v408 = *(void *)(v451 + 8);
  uint64_t v16 = v15;
  uint64_t v456 = v15;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v359 = sub_1C4497B38();
  uint64_t v358 = *(void *)(v359 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v359);
  uint64_t v409 = (char *)&v336 - v19;
  uint64_t v412 = v17;
  uint64_t v407 = *(void *)(v17 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v357 = (char *)&v336 - v21;
  uint64_t v430 = *(void *)(v16 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v405 = (char *)&v336 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v404 = (char *)&v336 - v24;
  uint64_t v450 = a3[17];
  uint64_t v25 = a3[8];
  uint64_t v402 = *(void *)(v450 + 8);
  uint64_t v26 = v25;
  uint64_t v454 = v25;
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v356 = sub_1C4497B38();
  uint64_t v355 = *(void *)(v356 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v356);
  uint64_t v403 = (char *)&v336 - v29;
  uint64_t v406 = v27;
  uint64_t v401 = *(void *)(v27 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v354 = (char *)&v336 - v31;
  uint64_t v429 = *(void *)(v26 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v399 = (char *)&v336 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v398 = (char *)&v336 - v34;
  uint64_t v449 = a3[16];
  uint64_t v35 = a3[7];
  uint64_t v396 = *(void *)(v449 + 8);
  uint64_t v36 = v35;
  uint64_t v453 = v35;
  uint64_t v37 = swift_getAssociatedTypeWitness();
  uint64_t v353 = sub_1C4497B38();
  uint64_t v352 = *(void *)(v353 - 8);
  uint64_t v38 = MEMORY[0x1F4188790](v353);
  uint64_t v397 = (char *)&v336 - v39;
  uint64_t v400 = v37;
  uint64_t v395 = *(void *)(v37 - 8);
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  uint64_t v351 = (char *)&v336 - v41;
  uint64_t v428 = *(void *)(v36 - 8);
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  uint64_t v393 = (char *)&v336 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v42);
  uint64_t v392 = (char *)&v336 - v44;
  uint64_t v448 = a3[15];
  uint64_t v45 = a3[6];
  uint64_t v390 = *(void *)(v448 + 8);
  uint64_t v46 = swift_getAssociatedTypeWitness();
  uint64_t v350 = sub_1C4497B38();
  uint64_t v349 = *(void *)(v350 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v350);
  uint64_t v391 = (char *)&v336 - v48;
  uint64_t v394 = v46;
  uint64_t v389 = *(void *)(v46 - 8);
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v348 = (char *)&v336 - v50;
  uint64_t v427 = *(void *)(v45 - 8);
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v387 = (char *)&v336 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v51);
  uint64_t v386 = (char *)&v336 - v53;
  uint64_t v54 = a3[14];
  uint64_t v55 = a3[5];
  uint64_t v384 = *(void *)(v54 + 8);
  uint64_t v56 = swift_getAssociatedTypeWitness();
  uint64_t v347 = sub_1C4497B38();
  uint64_t v346 = *(void *)(v347 - 8);
  uint64_t v57 = MEMORY[0x1F4188790](v347);
  uint64_t v385 = (char *)&v336 - v58;
  uint64_t v388 = v56;
  uint64_t v383 = *(void *)(v56 - 8);
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v345 = (char *)&v336 - v60;
  uint64_t v426 = *(void *)(v55 - 8);
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  uint64_t v381 = (char *)&v336 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v61);
  uint64_t v380 = (char *)&v336 - v63;
  uint64_t v64 = a3[13];
  uint64_t v65 = a3[4];
  uint64_t v378 = *(void *)(v64 + 8);
  uint64_t v66 = swift_getAssociatedTypeWitness();
  uint64_t v344 = sub_1C4497B38();
  uint64_t v343 = *(void *)(v344 - 8);
  uint64_t v67 = MEMORY[0x1F4188790](v344);
  uint64_t v379 = (char *)&v336 - v68;
  uint64_t v382 = v66;
  uint64_t v377 = *(void *)(v66 - 8);
  uint64_t v69 = MEMORY[0x1F4188790](v67);
  uint64_t v342 = (char *)&v336 - v70;
  uint64_t v425 = *(void *)(v65 - 8);
  uint64_t v71 = MEMORY[0x1F4188790](v69);
  uint64_t v375 = (char *)&v336 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v71);
  uint64_t v374 = (char *)&v336 - v73;
  uint64_t v74 = a3[12];
  uint64_t v75 = a3[3];
  uint64_t v372 = *(void *)(v74 + 8);
  uint64_t v76 = swift_getAssociatedTypeWitness();
  uint64_t v341 = sub_1C4497B38();
  uint64_t v340 = *(void *)(v341 - 8);
  uint64_t v77 = MEMORY[0x1F4188790](v341);
  uint64_t v373 = (char *)&v336 - v78;
  uint64_t v376 = v76;
  uint64_t v371 = *(void *)(v76 - 8);
  uint64_t v79 = MEMORY[0x1F4188790](v77);
  uint64_t v339 = (char *)&v336 - v80;
  uint64_t v424 = *(void *)(v75 - 8);
  uint64_t v81 = MEMORY[0x1F4188790](v79);
  v370 = (char *)&v336 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v81);
  v369 = (char *)&v336 - v83;
  uint64_t v84 = a3[11];
  uint64_t v85 = a3[2];
  uint64_t v366 = *(void *)(v84 + 8);
  uint64_t v86 = swift_getAssociatedTypeWitness();
  uint64_t v338 = sub_1C4497B38();
  uint64_t v337 = *(void *)(v338 - 8);
  uint64_t v87 = MEMORY[0x1F4188790](v338);
  uint64_t v367 = (char *)&v336 - v88;
  uint64_t v368 = v86;
  uint64_t v365 = *(void *)(v86 - 8);
  uint64_t v89 = MEMORY[0x1F4188790](v87);
  uint64_t v336 = (char *)&v336 - v90;
  uint64_t v423 = *(void *)(v85 - 8);
  uint64_t v91 = MEMORY[0x1F4188790](v89);
  uint64_t v364 = (char *)&v336 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v91);
  uint64_t v363 = (char *)&v336 - v93;
  uint64_t v446 = v85;
  uint64_t v457 = v85;
  uint64_t v458 = v75;
  uint64_t v440 = v75;
  uint64_t v443 = v65;
  uint64_t v459 = v65;
  uint64_t v460 = v55;
  uint64_t v441 = v55;
  uint64_t v442 = v45;
  uint64_t v461 = v45;
  uint64_t v462 = v453;
  uint64_t v463 = v454;
  uint64_t v464 = v456;
  uint64_t v465 = v455;
  uint64_t v466 = v84;
  uint64_t v436 = v84;
  uint64_t v437 = v74;
  uint64_t v467 = v74;
  uint64_t v468 = v64;
  uint64_t v438 = v64;
  uint64_t v439 = v54;
  uint64_t v469 = v54;
  uint64_t v470 = v448;
  uint64_t v471 = v449;
  uint64_t v472 = v450;
  uint64_t v473 = v451;
  uint64_t v474 = v452;
  uint64_t v94 = type metadata accessor for TaggedValue_9.TaggedEnum();
  uint64_t v95 = *(void *)(v94 - 8);
  uint64_t v96 = MEMORY[0x1F4188790](v94);
  v422 = (char *)&v336 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = MEMORY[0x1F4188790](v96);
  v421 = (char *)&v336 - v99;
  uint64_t v100 = MEMORY[0x1F4188790](v98);
  v420 = (char *)&v336 - v101;
  uint64_t v102 = MEMORY[0x1F4188790](v100);
  uint64_t v419 = (char *)&v336 - v103;
  uint64_t v104 = MEMORY[0x1F4188790](v102);
  uint64_t v418 = (char *)&v336 - v105;
  uint64_t v106 = MEMORY[0x1F4188790](v104);
  uint64_t v417 = (char *)&v336 - v107;
  uint64_t v108 = MEMORY[0x1F4188790](v106);
  uint64_t v110 = (char *)&v336 - v109;
  uint64_t v111 = MEMORY[0x1F4188790](v108);
  uint64_t v113 = (char *)&v336 - v112;
  uint64_t v114 = MEMORY[0x1F4188790](v111);
  uint64_t v116 = (char *)&v336 - v115;
  MEMORY[0x1F4188790](v114);
  uint64_t v118 = (char *)&v336 - v117;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v435 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v120 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v122 = (char *)&v336 - v121;
  uint64_t v434 = v120;
  uint64_t v123 = (char *)&v336 + *(int *)(v120 + 48) - v121;
  uint64_t v433 = v95;
  uint64_t v124 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 16);
  v124((char *)&v336 - v121, v445, v94);
  uint64_t v125 = v123;
  v124(v123, (uint64_t)v447, v94);
  v447 = v122;
  uint64_t v126 = v94;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v127 = v447;
      v124(v116, (uint64_t)v447, v94);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v269 = v440;
        (*(void (**)(char *, uint64_t))(v424 + 8))(v116, v440);
        uint64_t v270 = v444;
        uint64_t v271 = v452;
        uint64_t v272 = v451;
        uint64_t v273 = v455;
        uint64_t v274 = v456;
        uint64_t v275 = v450;
        uint64_t v276 = v449;
        uint64_t v277 = v454;
        uint64_t v278 = v448;
        uint64_t v279 = v453;
        uint64_t v280 = v439;
        uint64_t v281 = v442;
        uint64_t v282 = v438;
        uint64_t v283 = v441;
        uint64_t v284 = v437;
        uint64_t v285 = v443;
        uint64_t v286 = v436;
        goto LABEL_49;
      }
      uint64_t v129 = v424;
      uint64_t v130 = *(void (**)(char *, char *, uint64_t))(v424 + 32);
      uint64_t v131 = v369;
      uint64_t v132 = v440;
      v130(v369, v116, v440);
      uint64_t v133 = v370;
      v130(v370, v125, v132);
      uint64_t v134 = v373;
      (*(void (**)(char *, uint64_t, uint64_t))(v372 + 40))(v133, v432, v132);
      uint64_t v135 = *(void (**)(char *, uint64_t))(v129 + 8);
      v135(v133, v132);
      v135(v131, v132);
      uint64_t v136 = v371;
      uint64_t v137 = v376;
      int v138 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v371 + 48))(v134, 1, v376);
      uint64_t v139 = v456;
      uint64_t v140 = v442;
      uint64_t v141 = v441;
      uint64_t v142 = v443;
      if (v138 == 1)
      {
        uint64_t v143 = v453;
        uint64_t v144 = v454;
        (*(void (**)(char *, uint64_t))(v340 + 8))(v134, v341);
        uint64_t v457 = v446;
        uint64_t v458 = v132;
        uint64_t v459 = v142;
        uint64_t v460 = v141;
        uint64_t v461 = v140;
        uint64_t v462 = v143;
        uint64_t v463 = v144;
        uint64_t v464 = v139;
        goto LABEL_31;
      }
      uint64_t v305 = v134;
      uint64_t v306 = *(void (**)(char *, char *, uint64_t))(v136 + 32);
      uint64_t v307 = v339;
      v306(v339, v305, v137);
      v306(v444, v307, v137);
      uint64_t v457 = v446;
      uint64_t v458 = v132;
      uint64_t v459 = v142;
      uint64_t v460 = v141;
      uint64_t v461 = v140;
      uint64_t v462 = v453;
      uint64_t v463 = v454;
      uint64_t v464 = v456;
      uint64_t v465 = v455;
      uint64_t v466 = v436;
      uint64_t v467 = v437;
      uint64_t v468 = v438;
      uint64_t v469 = v439;
      uint64_t v470 = v448;
      uint64_t v471 = v449;
      uint64_t v472 = v450;
      uint64_t v473 = v451;
      uint64_t v474 = v452;
      uint64_t v308 = type metadata accessor for TaggedValue_9.ObservableDifference();
      uint64_t v309 = v444;
      goto LABEL_66;
    case 2u:
      uint64_t v127 = v447;
      v124(v113, (uint64_t)v447, v94);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        uint64_t v285 = v443;
        (*(void (**)(char *, uint64_t))(v425 + 8))(v113, v443);
        uint64_t v270 = v444;
        uint64_t v271 = v452;
        uint64_t v272 = v451;
        uint64_t v273 = v455;
        uint64_t v274 = v456;
        uint64_t v275 = v450;
        uint64_t v276 = v449;
        uint64_t v277 = v454;
        uint64_t v278 = v448;
        uint64_t v279 = v453;
        uint64_t v280 = v439;
        uint64_t v281 = v442;
        uint64_t v282 = v438;
        uint64_t v283 = v441;
        uint64_t v284 = v437;
        goto LABEL_48;
      }
      uint64_t v145 = v425;
      uint64_t v146 = *(void (**)(char *, char *, uint64_t))(v425 + 32);
      uint64_t v147 = v374;
      uint64_t v148 = v125;
      uint64_t v149 = v443;
      v146(v374, v113, v443);
      uint64_t v150 = v375;
      v146(v375, v148, v149);
      uint64_t v151 = v379;
      (*(void (**)(char *, uint64_t, uint64_t))(v378 + 40))(v150, v432, v149);
      uint64_t v152 = *(void (**)(char *, uint64_t))(v145 + 8);
      v152(v150, v149);
      v152(v147, v149);
      uint64_t v153 = v151;
      uint64_t v154 = v377;
      uint64_t v155 = v382;
      int v156 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v377 + 48))(v153, 1, v382);
      uint64_t v157 = v455;
      uint64_t v158 = v453;
      uint64_t v159 = v442;
      uint64_t v160 = v441;
      if (v156 == 1)
      {
        uint64_t v161 = v454;
        (*(void (**)(char *, uint64_t))(v343 + 8))(v153, v344);
        uint64_t v457 = v446;
        uint64_t v458 = v440;
        uint64_t v459 = v149;
        uint64_t v460 = v160;
        uint64_t v461 = v159;
        uint64_t v462 = v158;
        uint64_t v463 = v161;
        goto LABEL_52;
      }
      uint64_t v310 = *(void (**)(char *, char *, uint64_t))(v154 + 32);
      uint64_t v311 = v342;
      v310(v342, v153, v155);
      uint64_t v312 = v155;
      uint64_t v309 = v444;
      v310(v444, v311, v312);
      uint64_t v457 = v446;
      uint64_t v458 = v440;
      uint64_t v459 = v149;
      uint64_t v460 = v160;
      uint64_t v461 = v159;
      uint64_t v462 = v158;
      uint64_t v463 = v454;
      uint64_t v464 = v456;
      uint64_t v465 = v455;
      uint64_t v466 = v436;
      uint64_t v467 = v437;
      uint64_t v468 = v438;
      uint64_t v469 = v439;
      uint64_t v470 = v448;
      uint64_t v471 = v449;
      uint64_t v472 = v450;
      uint64_t v473 = v451;
      uint64_t v474 = v452;
      uint64_t v308 = type metadata accessor for TaggedValue_9.ObservableDifference();
      goto LABEL_66;
    case 3u:
      uint64_t v127 = v447;
      v124(v110, (uint64_t)v447, v94);
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        uint64_t v283 = v441;
        (*(void (**)(char *, uint64_t))(v426 + 8))(v110, v441);
        uint64_t v270 = v444;
        uint64_t v271 = v452;
        uint64_t v272 = v451;
        uint64_t v273 = v455;
        uint64_t v274 = v456;
        uint64_t v275 = v450;
        uint64_t v276 = v449;
        uint64_t v277 = v454;
        uint64_t v278 = v448;
        uint64_t v279 = v453;
        uint64_t v280 = v439;
        uint64_t v281 = v442;
        uint64_t v282 = v438;
        goto LABEL_47;
      }
      uint64_t v162 = v426;
      uint64_t v163 = *(void (**)(char *, char *, uint64_t))(v426 + 32);
      uint64_t v164 = v380;
      uint64_t v165 = v441;
      v163(v380, v110, v441);
      uint64_t v166 = v381;
      v163(v381, v125, v165);
      uint64_t v167 = v385;
      (*(void (**)(char *, uint64_t, uint64_t))(v384 + 40))(v166, v432, v165);
      uint64_t v168 = *(void (**)(char *, uint64_t))(v162 + 8);
      v168(v166, v165);
      v168(v164, v165);
      uint64_t v169 = v167;
      uint64_t v170 = v383;
      uint64_t v171 = v388;
      int v172 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v383 + 48))(v169, 1, v388);
      uint64_t v173 = v456;
      uint64_t v174 = v453;
      uint64_t v175 = v442;
      uint64_t v176 = v443;
      if (v172 == 1)
      {
        uint64_t v177 = v454;
        (*(void (**)(char *, uint64_t))(v346 + 8))(v169, v347);
        uint64_t v457 = v446;
        uint64_t v458 = v440;
        uint64_t v459 = v176;
        uint64_t v460 = v165;
        uint64_t v461 = v175;
        uint64_t v462 = v174;
        uint64_t v463 = v177;
        uint64_t v464 = v173;
        goto LABEL_31;
      }
      uint64_t v313 = *(void (**)(char *, char *, uint64_t))(v170 + 32);
      v314 = v345;
      v313(v345, v169, v171);
      uint64_t v315 = v171;
      uint64_t v309 = v444;
      v313(v444, v314, v315);
      uint64_t v457 = v446;
      uint64_t v458 = v440;
      uint64_t v459 = v176;
      uint64_t v460 = v165;
      uint64_t v461 = v175;
      uint64_t v462 = v174;
      uint64_t v463 = v454;
      uint64_t v464 = v456;
      uint64_t v465 = v455;
      uint64_t v466 = v436;
      uint64_t v467 = v437;
      uint64_t v468 = v438;
      uint64_t v469 = v439;
      uint64_t v470 = v448;
      uint64_t v471 = v449;
      uint64_t v472 = v450;
      uint64_t v473 = v451;
      uint64_t v474 = v452;
      uint64_t v308 = type metadata accessor for TaggedValue_9.ObservableDifference();
      goto LABEL_66;
    case 4u:
      uint64_t v178 = v417;
      uint64_t v127 = v447;
      v124(v417, (uint64_t)v447, v94);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        uint64_t v281 = v442;
        (*(void (**)(char *, uint64_t))(v427 + 8))(v178, v442);
        uint64_t v270 = v444;
        uint64_t v271 = v452;
        uint64_t v272 = v451;
        uint64_t v273 = v455;
        uint64_t v274 = v456;
        uint64_t v275 = v450;
        uint64_t v276 = v449;
        uint64_t v277 = v454;
        uint64_t v278 = v448;
        uint64_t v279 = v453;
        uint64_t v280 = v439;
        goto LABEL_46;
      }
      uint64_t v179 = v427;
      uint64_t v180 = *(void (**)(char *, char *, uint64_t))(v427 + 32);
      uint64_t v181 = v386;
      uint64_t v182 = v442;
      v180(v386, v178, v442);
      uint64_t v183 = v387;
      v180(v387, v125, v182);
      int v184 = v391;
      (*(void (**)(char *, uint64_t, uint64_t))(v390 + 40))(v183, v432, v182);
      uint64_t v185 = v184;
      uint64_t v186 = *(void (**)(char *, uint64_t))(v179 + 8);
      v186(v183, v182);
      v186(v181, v182);
      uint64_t v187 = v389;
      uint64_t v188 = v394;
      int v189 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v389 + 48))(v185, 1, v394);
      uint64_t v190 = v455;
      uint64_t v191 = v456;
      uint64_t v192 = v441;
      uint64_t v193 = v443;
      if (v189 == 1)
      {
        (*(void (**)(char *, uint64_t))(v349 + 8))(v185, v350);
        uint64_t v457 = v446;
        uint64_t v458 = v440;
        uint64_t v459 = v193;
        uint64_t v460 = v192;
        uint64_t v461 = v182;
        uint64_t v462 = v453;
        uint64_t v463 = v454;
        uint64_t v464 = v191;
        uint64_t v465 = v190;
        goto LABEL_54;
      }
      uint64_t v316 = *(void (**)(char *, char *, uint64_t))(v187 + 32);
      uint64_t v317 = v348;
      v316(v348, v185, v188);
      uint64_t v309 = v444;
      v316(v444, v317, v188);
      uint64_t v457 = v446;
      uint64_t v458 = v440;
      uint64_t v459 = v193;
      uint64_t v460 = v192;
      uint64_t v461 = v182;
      uint64_t v462 = v453;
      uint64_t v463 = v454;
      uint64_t v464 = v456;
      uint64_t v465 = v455;
      uint64_t v466 = v436;
      uint64_t v467 = v437;
      uint64_t v468 = v438;
      uint64_t v469 = v439;
      uint64_t v470 = v448;
      uint64_t v471 = v449;
      uint64_t v472 = v450;
      uint64_t v473 = v451;
      uint64_t v474 = v452;
      uint64_t v308 = type metadata accessor for TaggedValue_9.ObservableDifference();
      goto LABEL_66;
    case 5u:
      uint64_t v194 = v418;
      v124(v418, (uint64_t)v447, v94);
      if (swift_getEnumCaseMultiPayload() != 5)
      {
        uint64_t v279 = v453;
        (*(void (**)(char *, uint64_t))(v428 + 8))(v194, v453);
        uint64_t v270 = v444;
        uint64_t v271 = v452;
        uint64_t v272 = v451;
        uint64_t v273 = v455;
        uint64_t v274 = v456;
        uint64_t v275 = v450;
        uint64_t v127 = v447;
        uint64_t v276 = v449;
        uint64_t v277 = v454;
        uint64_t v278 = v448;
        goto LABEL_45;
      }
      uint64_t v195 = v428;
      uint64_t v196 = *(void (**)(char *, char *, uint64_t))(v428 + 32);
      uint64_t v197 = v392;
      uint64_t v198 = v453;
      v196(v392, v194, v453);
      uint64_t v199 = v393;
      v196(v393, v125, v198);
      uint64_t v200 = v397;
      (*(void (**)(char *, uint64_t, uint64_t))(v396 + 40))(v199, v432, v198);
      uint64_t v201 = *(void (**)(char *, uint64_t))(v195 + 8);
      v201(v199, v198);
      v201(v197, v198);
      int v202 = v200;
      uint64_t v203 = v395;
      uint64_t v204 = v400;
      int v205 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v395 + 48))(v202, 1, v400);
      uint64_t v206 = v455;
      uint64_t v207 = v454;
      uint64_t v208 = v442;
      uint64_t v209 = v441;
      uint64_t v210 = v443;
      if (v205 == 1)
      {
        uint64_t v211 = v456;
        (*(void (**)(char *, uint64_t))(v352 + 8))(v202, v353);
        uint64_t v457 = v446;
        uint64_t v458 = v440;
        uint64_t v459 = v210;
        uint64_t v460 = v209;
        uint64_t v461 = v208;
        uint64_t v462 = v198;
        uint64_t v463 = v207;
        uint64_t v464 = v211;
        uint64_t v465 = v206;
        uint64_t v466 = v436;
        uint64_t v467 = v437;
        uint64_t v468 = v438;
        uint64_t v469 = v439;
        uint64_t v470 = v448;
        uint64_t v471 = v449;
        uint64_t v472 = v450;
        uint64_t v473 = v451;
        uint64_t v474 = v452;
        uint64_t v212 = type metadata accessor for TaggedValue_9.ObservableDifference();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v212 - 8) + 56))(v444, 1, 1, v212);
      }
      else
      {
        uint64_t v318 = *(void (**)(char *, char *, uint64_t))(v203 + 32);
        uint64_t v319 = v351;
        v318(v351, v202, v204);
        uint64_t v320 = v204;
        uint64_t v321 = v444;
        v318(v444, v319, v320);
        uint64_t v457 = v446;
        uint64_t v458 = v440;
        uint64_t v459 = v210;
        uint64_t v460 = v209;
        uint64_t v461 = v208;
        uint64_t v462 = v198;
        uint64_t v463 = v207;
        uint64_t v464 = v456;
        uint64_t v465 = v455;
        uint64_t v466 = v436;
        uint64_t v467 = v437;
        uint64_t v468 = v438;
        uint64_t v469 = v439;
        uint64_t v470 = v448;
        uint64_t v471 = v449;
        uint64_t v472 = v450;
        uint64_t v473 = v451;
        uint64_t v474 = v452;
        uint64_t v322 = type metadata accessor for TaggedValue_9.ObservableDifference();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v322 - 8) + 56))(v321, 0, 1, v322);
      }
      uint64_t v288 = v433;
      uint64_t v289 = v126;
      uint64_t v127 = v447;
      return (*(uint64_t (**)(char *, uint64_t))(v288 + 8))(v127, v289);
    case 6u:
      uint64_t v213 = v419;
      uint64_t v127 = v447;
      v124(v419, (uint64_t)v447, v94);
      if (swift_getEnumCaseMultiPayload() != 6)
      {
        uint64_t v277 = v454;
        (*(void (**)(char *, uint64_t))(v429 + 8))(v213, v454);
        uint64_t v270 = v444;
        uint64_t v271 = v452;
        uint64_t v272 = v451;
        uint64_t v273 = v455;
        uint64_t v274 = v456;
        uint64_t v275 = v450;
        uint64_t v276 = v449;
        goto LABEL_44;
      }
      uint64_t v214 = v429;
      uint64_t v215 = *(void (**)(char *, char *, uint64_t))(v429 + 32);
      uint64_t v216 = v398;
      uint64_t v217 = v213;
      uint64_t v218 = v454;
      v215(v398, v217, v454);
      uint64_t v219 = v399;
      v215(v399, v125, v218);
      int v220 = v403;
      (*(void (**)(char *, uint64_t, uint64_t))(v402 + 40))(v219, v432, v218);
      uint64_t v221 = *(void (**)(char *, uint64_t))(v214 + 8);
      v221(v219, v218);
      v221(v216, v218);
      uint64_t v222 = v220;
      uint64_t v223 = v401;
      uint64_t v224 = v406;
      int v225 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v401 + 48))(v222, 1, v406);
      uint64_t v157 = v455;
      uint64_t v226 = v442;
      uint64_t v227 = v441;
      uint64_t v228 = v443;
      if (v225 == 1)
      {
        uint64_t v229 = v456;
        (*(void (**)(char *, uint64_t))(v355 + 8))(v222, v356);
        uint64_t v457 = v446;
        uint64_t v458 = v440;
        uint64_t v459 = v228;
        uint64_t v460 = v227;
        uint64_t v461 = v226;
        uint64_t v462 = v453;
        uint64_t v463 = v218;
        uint64_t v464 = v229;
        goto LABEL_53;
      }
      uint64_t v323 = *(void (**)(char *, char *, uint64_t))(v223 + 32);
      uint64_t v324 = v354;
      v323(v354, v222, v224);
      uint64_t v325 = v224;
      uint64_t v309 = v444;
      v323(v444, v324, v325);
      uint64_t v457 = v446;
      uint64_t v458 = v440;
      uint64_t v459 = v228;
      uint64_t v460 = v227;
      uint64_t v461 = v226;
      uint64_t v462 = v453;
      uint64_t v463 = v218;
      uint64_t v464 = v456;
      uint64_t v465 = v455;
      uint64_t v466 = v436;
      uint64_t v467 = v437;
      uint64_t v468 = v438;
      uint64_t v469 = v439;
      uint64_t v470 = v448;
      uint64_t v471 = v449;
      uint64_t v472 = v450;
      uint64_t v473 = v451;
      uint64_t v474 = v452;
      uint64_t v308 = type metadata accessor for TaggedValue_9.ObservableDifference();
      goto LABEL_66;
    case 7u:
      uint64_t v230 = v420;
      uint64_t v127 = v447;
      v124(v420, (uint64_t)v447, v94);
      if (swift_getEnumCaseMultiPayload() != 7)
      {
        uint64_t v274 = v456;
        (*(void (**)(char *, uint64_t))(v430 + 8))(v230, v456);
        uint64_t v270 = v444;
        uint64_t v271 = v452;
        uint64_t v272 = v451;
        uint64_t v273 = v455;
        uint64_t v275 = v450;
        goto LABEL_43;
      }
      uint64_t v231 = v430;
      uint64_t v232 = *(void (**)(char *, char *, uint64_t))(v430 + 32);
      uint64_t v233 = v404;
      uint64_t v234 = v230;
      uint64_t v235 = v456;
      v232(v404, v234, v456);
      int v236 = v405;
      v232(v405, v125, v235);
      uint64_t v237 = v409;
      (*(void (**)(char *, uint64_t, uint64_t))(v408 + 40))(v236, v432, v235);
      uint64_t v238 = *(void (**)(char *, uint64_t))(v231 + 8);
      v238(v236, v235);
      v238(v233, v235);
      uint64_t v239 = v237;
      uint64_t v240 = v407;
      uint64_t v241 = v412;
      int v242 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v407 + 48))(v239, 1, v412);
      uint64_t v243 = v455;
      uint64_t v244 = v442;
      uint64_t v245 = v441;
      uint64_t v246 = v443;
      if (v242 == 1)
      {
        uint64_t v247 = v454;
        (*(void (**)(char *, uint64_t))(v358 + 8))(v239, v359);
        uint64_t v457 = v446;
        uint64_t v458 = v440;
        uint64_t v459 = v246;
        uint64_t v460 = v245;
        uint64_t v461 = v244;
        uint64_t v462 = v453;
        uint64_t v463 = v247;
        uint64_t v464 = v235;
        uint64_t v465 = v243;
        goto LABEL_54;
      }
      uint64_t v326 = *(void (**)(char *, char *, uint64_t))(v240 + 32);
      uint64_t v327 = v357;
      v326(v357, v239, v241);
      uint64_t v328 = v241;
      uint64_t v309 = v444;
      v326(v444, v327, v328);
      uint64_t v457 = v446;
      uint64_t v458 = v440;
      uint64_t v459 = v246;
      uint64_t v460 = v245;
      uint64_t v461 = v244;
      uint64_t v462 = v453;
      uint64_t v463 = v454;
      uint64_t v464 = v235;
      uint64_t v465 = v455;
      uint64_t v466 = v436;
      uint64_t v467 = v437;
      uint64_t v468 = v438;
      uint64_t v469 = v439;
      uint64_t v470 = v448;
      uint64_t v471 = v449;
      uint64_t v472 = v450;
      uint64_t v473 = v451;
      uint64_t v474 = v452;
      uint64_t v308 = type metadata accessor for TaggedValue_9.ObservableDifference();
      goto LABEL_66;
    case 8u:
      uint64_t v248 = v421;
      uint64_t v127 = v447;
      v124(v421, (uint64_t)v447, v94);
      if (swift_getEnumCaseMultiPayload() != 8)
      {
        uint64_t v273 = v455;
        (*(void (**)(char *, uint64_t))(v431 + 8))(v248, v455);
        uint64_t v270 = v444;
        uint64_t v271 = v452;
        uint64_t v272 = v451;
        goto LABEL_42;
      }
      uint64_t v249 = v431;
      uint64_t v250 = *(void (**)(char *, char *, uint64_t))(v431 + 32);
      uint64_t v251 = v410;
      uint64_t v252 = v248;
      uint64_t v253 = v455;
      v250(v410, v252, v455);
      uint64_t v254 = v411;
      v250(v411, v125, v253);
      v255 = v414;
      (*(void (**)(char *, uint64_t, uint64_t))(v415 + 40))(v254, v432, v253);
      v256 = *(void (**)(char *, uint64_t))(v249 + 8);
      v256(v254, v253);
      v256(v251, v253);
      v257 = v255;
      uint64_t v258 = v413;
      uint64_t v259 = v416;
      int v260 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v413 + 48))(v257, 1, v416);
      uint64_t v261 = v456;
      uint64_t v262 = v442;
      uint64_t v263 = v441;
      uint64_t v264 = v443;
      if (v260 == 1)
      {
        uint64_t v265 = v454;
        (*(void (**)(char *, uint64_t))(v361 + 8))(v257, v362);
        uint64_t v457 = v446;
        uint64_t v458 = v440;
        uint64_t v459 = v264;
        uint64_t v460 = v263;
        uint64_t v461 = v262;
        uint64_t v462 = v453;
        uint64_t v463 = v265;
        uint64_t v464 = v261;
        uint64_t v465 = v253;
        goto LABEL_54;
      }
      uint64_t v329 = *(void (**)(char *, char *, uint64_t))(v258 + 32);
      v330 = v360;
      v329(v360, v257, v259);
      uint64_t v331 = v259;
      uint64_t v309 = v444;
      v329(v444, v330, v331);
      uint64_t v457 = v446;
      uint64_t v458 = v440;
      uint64_t v459 = v264;
      uint64_t v460 = v263;
      uint64_t v461 = v262;
      uint64_t v462 = v453;
      uint64_t v463 = v454;
      uint64_t v464 = v456;
      uint64_t v465 = v253;
      uint64_t v466 = v436;
      uint64_t v467 = v437;
      uint64_t v468 = v438;
      uint64_t v469 = v439;
      uint64_t v470 = v448;
      uint64_t v471 = v449;
      uint64_t v472 = v450;
      uint64_t v473 = v451;
      uint64_t v474 = v452;
      uint64_t v308 = type metadata accessor for TaggedValue_9.ObservableDifference();
      goto LABEL_66;
    case 9u:
      uint64_t v266 = (uint64_t *)v422;
      uint64_t v127 = v447;
      v124(v422, (uint64_t)v447, v94);
      if (swift_getEnumCaseMultiPayload() != 9)
      {
        swift_release();
        goto LABEL_41;
      }
      uint64_t v267 = *v266;
      uint64_t v268 = *(void *)v125;
      swift_release();
      swift_release();
      if (v267 != v268)
      {
        uint64_t v457 = v446;
        uint64_t v458 = v440;
        uint64_t v459 = v443;
        uint64_t v460 = v441;
        uint64_t v461 = v442;
        uint64_t v462 = v453;
        uint64_t v463 = v454;
        uint64_t v464 = v456;
        uint64_t v465 = v455;
        uint64_t v466 = v436;
        uint64_t v467 = v437;
        uint64_t v468 = v438;
        uint64_t v469 = v439;
        uint64_t v470 = v448;
        uint64_t v471 = v449;
        uint64_t v472 = v450;
        uint64_t v473 = v451;
        uint64_t v474 = v452;
        uint64_t v308 = type metadata accessor for TaggedValue_9.ObservableDifference();
        uint64_t v309 = v444;
        goto LABEL_66;
      }
      uint64_t v457 = v446;
      uint64_t v458 = v440;
      uint64_t v459 = v443;
      uint64_t v460 = v441;
      uint64_t v461 = v442;
      uint64_t v462 = v453;
      uint64_t v463 = v454;
      uint64_t v464 = v456;
LABEL_31:
      uint64_t v465 = v455;
      goto LABEL_54;
    default:
      uint64_t v127 = v447;
      v124(v118, (uint64_t)v447, v94);
      uint64_t v128 = v125;
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v423 + 8))(v118, v446);
LABEL_41:
        uint64_t v270 = v444;
        uint64_t v271 = v452;
        uint64_t v272 = v451;
        uint64_t v273 = v455;
LABEL_42:
        uint64_t v275 = v450;
        uint64_t v274 = v456;
LABEL_43:
        uint64_t v276 = v449;
        uint64_t v277 = v454;
LABEL_44:
        uint64_t v278 = v448;
        uint64_t v279 = v453;
LABEL_45:
        uint64_t v280 = v439;
        uint64_t v281 = v442;
LABEL_46:
        uint64_t v282 = v438;
        uint64_t v283 = v441;
LABEL_47:
        uint64_t v284 = v437;
        uint64_t v285 = v443;
LABEL_48:
        uint64_t v286 = v436;
        uint64_t v269 = v440;
LABEL_49:
        uint64_t v457 = v446;
        uint64_t v458 = v269;
        uint64_t v459 = v285;
        uint64_t v460 = v283;
        uint64_t v461 = v281;
        uint64_t v462 = v279;
        uint64_t v463 = v277;
        uint64_t v464 = v274;
        uint64_t v465 = v273;
        uint64_t v466 = v286;
        uint64_t v467 = v284;
        uint64_t v468 = v282;
        uint64_t v469 = v280;
        uint64_t v470 = v278;
        uint64_t v471 = v276;
        uint64_t v472 = v275;
        uint64_t v473 = v272;
        uint64_t v474 = v271;
        uint64_t v287 = type metadata accessor for TaggedValue_9.ObservableDifference();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v287 - 8) + 56))(v270, 0, 1, v287);
        uint64_t v288 = v435;
        uint64_t v289 = v434;
      }
      else
      {
        uint64_t v290 = v423;
        uint64_t v291 = *(void (**)(char *, char *, uint64_t))(v423 + 32);
        uint64_t v292 = v363;
        uint64_t v293 = v446;
        v291(v363, v118, v446);
        uint64_t v294 = v364;
        v291(v364, v128, v293);
        uint64_t v295 = v367;
        (*(void (**)(char *, uint64_t, uint64_t))(v366 + 40))(v294, v432, v293);
        uint64_t v296 = *(void (**)(char *, uint64_t))(v290 + 8);
        v296(v294, v293);
        v296(v292, v293);
        uint64_t v297 = v295;
        uint64_t v298 = v365;
        uint64_t v299 = v368;
        int v300 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v365 + 48))(v297, 1, v368);
        uint64_t v301 = v454;
        uint64_t v157 = v455;
        uint64_t v302 = v442;
        uint64_t v303 = v441;
        if (v300 == 1)
        {
          (*(void (**)(char *, uint64_t))(v337 + 8))(v297, v338);
          uint64_t v457 = v293;
          uint64_t v458 = v440;
          uint64_t v459 = v443;
          uint64_t v460 = v303;
          uint64_t v461 = v302;
          uint64_t v462 = v453;
          uint64_t v463 = v301;
LABEL_52:
          uint64_t v464 = v456;
LABEL_53:
          uint64_t v465 = v157;
LABEL_54:
          uint64_t v466 = v436;
          uint64_t v467 = v437;
          uint64_t v468 = v438;
          uint64_t v469 = v439;
          uint64_t v470 = v448;
          uint64_t v471 = v449;
          uint64_t v472 = v450;
          uint64_t v473 = v451;
          uint64_t v474 = v452;
          uint64_t v304 = type metadata accessor for TaggedValue_9.ObservableDifference();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v304 - 8) + 56))(v444, 1, 1, v304);
        }
        else
        {
          uint64_t v332 = *(void (**)(char *, char *, uint64_t))(v298 + 32);
          uint64_t v333 = v336;
          v332(v336, v297, v299);
          uint64_t v334 = v299;
          uint64_t v309 = v444;
          v332(v444, v333, v334);
          uint64_t v457 = v293;
          uint64_t v458 = v440;
          uint64_t v459 = v443;
          uint64_t v460 = v303;
          uint64_t v461 = v302;
          uint64_t v462 = v453;
          uint64_t v463 = v301;
          uint64_t v464 = v456;
          uint64_t v465 = v455;
          uint64_t v466 = v436;
          uint64_t v467 = v437;
          uint64_t v468 = v438;
          uint64_t v469 = v439;
          uint64_t v470 = v448;
          uint64_t v471 = v449;
          uint64_t v472 = v450;
          uint64_t v473 = v451;
          uint64_t v474 = v452;
          uint64_t v308 = type metadata accessor for TaggedValue_9.ObservableDifference();
LABEL_66:
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v308 - 8) + 56))(v309, 0, 1, v308);
        }
        uint64_t v288 = v433;
        uint64_t v289 = v126;
      }
      return (*(uint64_t (**)(char *, uint64_t))(v288 + 8))(v127, v289);
  }
}

uint64_t type metadata accessor for TaggedValue_9.ObservableDifference()
{
  return swift_getGenericMetadata();
}

uint64_t static TaggedValue_1<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v34 = a2;
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v32 = a5;
  uint64_t v33 = v7;
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v31 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v30 = (char *)&v29 - v10;
  uint64_t v11 = type metadata accessor for TaggedValue_1.TaggedEnum();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v29 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v19 = (char *)&v29 - v18;
  uint64_t v20 = (char *)&v29 + *(int *)(v17 + 48) - v18;
  uint64_t v29 = v12;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v21((char *)&v29 - v18, a1, v11);
  v21(v20, v34, v11);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v21(v14, (uint64_t)v19, v11);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v23 = v33;
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
      uint64_t v25 = v30;
      v24(v30, v14, a3);
      uint64_t v26 = v31;
      v24(v31, v20, a3);
      char v22 = sub_1C4497178();
      uint64_t v27 = *(void (**)(char *, uint64_t))(v23 + 8);
      v27(v26, a3);
      v27(v25, a3);
      uint64_t v16 = v29;
      TupleTypeMetadata2 = v11;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v14, a3);
  }
  char v22 = 0;
LABEL_6:
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, TupleTypeMetadata2);
  return v22 & 1;
}

uint64_t sub_1C418AC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static TaggedValue_1<>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8));
}

uint64_t static TaggedValue_2<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v56 = a8;
  uint64_t v53 = a6;
  uint64_t v61 = a1;
  uint64_t v62 = a2;
  uint64_t v58 = *(void *)(a4 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v55 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v54 = (char *)&v51 - v12;
  uint64_t v60 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v52 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v51 = (char *)&v51 - v16;
  uint64_t v63 = v17;
  uint64_t v64 = v18;
  uint64_t v59 = v18;
  uint64_t v65 = v19;
  uint64_t v66 = v20;
  uint64_t v21 = type metadata accessor for TaggedValue_2.TaggedEnum();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v51 - v26;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v29 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v32 = (char *)&v51 - v31;
  uint64_t v33 = (char *)&v51 + *(int *)(v30 + 48) - v31;
  uint64_t v57 = v22;
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v34((char *)&v51 - v31, v61, v21);
  v34(v33, v62, v21);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v34(v25, (uint64_t)v32, v21);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v37 = v58;
        uint64_t v36 = v59;
        uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
        uint64_t v39 = v54;
        v38(v54, v25, v59);
        uint64_t v40 = v55;
        v38(v55, v33, v36);
        char v41 = sub_1C4497178();
        uint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
        v42(v40, v36);
        v42(v39, v36);
LABEL_10:
        uint64_t v29 = v57;
        TupleTypeMetadata2 = v21;
        goto LABEL_11;
      }
      (*(void (**)(char *, uint64_t))(v58 + 8))(v25, v59);
    }
  }
  else
  {
    uint64_t v43 = v60;
    uint64_t v62 = a3;
    v34(v27, (uint64_t)v32, v21);
    if (!swift_getEnumCaseMultiPayload())
    {
      uint64_t v44 = v43;
      uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
      uint64_t v46 = v51;
      uint64_t v47 = v62;
      v45(v51, v27, v62);
      uint64_t v48 = v52;
      v45(v52, v33, v47);
      char v41 = sub_1C4497178();
      uint64_t v49 = *(void (**)(char *, uint64_t))(v44 + 8);
      v49(v48, v47);
      v49(v46, v47);
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v43 + 8))(v27, v62);
  }
  char v41 = 0;
LABEL_11:
  (*(void (**)(char *, uint64_t))(v29 + 8))(v32, TupleTypeMetadata2);
  return v41 & 1;
}

uint64_t sub_1C418B16C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static TaggedValue_2<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], *(void *)(a4 - 8), a3[5], *(void *)(a4 - 16));
}

uint64_t static TaggedValue_3<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v68 = a7;
  uint64_t v83 = a1;
  uint64_t v74 = a11;
  uint64_t v76 = *(void *)(a5 - 8);
  uint64_t v72 = a9;
  uint64_t v12 = MEMORY[0x1F4188790](a1);
  uint64_t v73 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v71 = (char *)&v65 - v15;
  uint64_t v75 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v70 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v69 = (char *)&v65 - v20;
  uint64_t v80 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v67 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v66 = (char *)&v65 - v24;
  uint64_t v81 = v25;
  uint64_t v84 = v25;
  uint64_t v85 = v26;
  uint64_t v77 = v26;
  uint64_t v78 = v27;
  uint64_t v86 = v27;
  uint64_t v87 = v28;
  uint64_t v88 = v29;
  uint64_t v89 = v30;
  uint64_t v31 = type metadata accessor for TaggedValue_3.TaggedEnum();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v79 = (char *)&v65 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v37 = (char *)&v65 - v36;
  MEMORY[0x1F4188790](v35);
  uint64_t v39 = (char *)&v65 - v38;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v41 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v42 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v44 = (char *)&v65 - v43;
  uint64_t v45 = (char *)&v65 + *(int *)(v42 + 48) - v43;
  uint64_t v82 = v32;
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
  v46((char *)&v65 - v43, v83, v31);
  v46(v45, a2, v31);
  char v47 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v46(v37, (uint64_t)v44, v31);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v48 = v75;
        uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
        uint64_t v50 = v69;
        uint64_t v51 = v77;
        v49(v69, v37, v77);
        uint64_t v52 = v70;
        v49(v70, v45, v51);
        char v47 = sub_1C4497178();
        uint64_t v53 = *(void (**)(char *, uint64_t))(v48 + 8);
        v53(v52, v51);
        v53(v50, v51);
        goto LABEL_13;
      }
      (*(void (**)(char *, uint64_t))(v75 + 8))(v37, v77);
      goto LABEL_10;
    case 2u:
      uint64_t v54 = v79;
      v46(v79, (uint64_t)v44, v31);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v55 = v76;
        uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v76 + 32);
        uint64_t v57 = v71;
        uint64_t v58 = v54;
        uint64_t v59 = v78;
        v56(v71, v58, v78);
        uint64_t v60 = v73;
        v56(v73, v45, v59);
        goto LABEL_12;
      }
      (*(void (**)(char *, uint64_t))(v76 + 8))(v54, v78);
      goto LABEL_10;
    case 3u:
      goto LABEL_14;
    default:
      v46(v39, (uint64_t)v44, v31);
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v80 + 8))(v39, v81);
LABEL_10:
        char v47 = 0;
      }
      else
      {
        uint64_t v55 = v80;
        uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v80 + 32);
        uint64_t v57 = v66;
        uint64_t v62 = v39;
        uint64_t v59 = v81;
        v61(v66, v62, v81);
        uint64_t v60 = v67;
        v61(v67, v45, v59);
LABEL_12:
        char v47 = sub_1C4497178();
        uint64_t v63 = *(void (**)(char *, uint64_t))(v55 + 8);
        v63(v60, v59);
        v63(v57, v59);
LABEL_13:
        uint64_t v41 = v82;
        TupleTypeMetadata2 = v31;
      }
LABEL_14:
      (*(void (**)(char *, uint64_t))(v41 + 8))(v44, TupleTypeMetadata2);
      return v47 & 1;
  }
}

uint64_t sub_1C418B804(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static TaggedValue_3<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], *(void *)(a4 - 8), a3[6], *(void *)(a4 - 16), a3[7], *(void *)(a4 - 24)) & 1;
}

uint64_t static TaggedValue_4<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v78 = a8;
  uint64_t v99 = a1;
  uint64_t v87 = a14;
  uint64_t v86 = a12;
  uint64_t v90 = *(void *)(a6 - 8);
  uint64_t v84 = a10;
  uint64_t v15 = MEMORY[0x1F4188790](a1);
  uint64_t v85 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v83 = (char *)&v75 - v18;
  uint64_t v89 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v82 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v81 = (char *)&v75 - v23;
  uint64_t v88 = *(void *)(v24 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  uint64_t v80 = (char *)&v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v79 = (char *)&v75 - v28;
  uint64_t v96 = *(void *)(v29 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  uint64_t v77 = (char *)&v75 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v76 = (char *)&v75 - v32;
  uint64_t v97 = v33;
  uint64_t v100 = v33;
  uint64_t v101 = v34;
  uint64_t v91 = v34;
  uint64_t v92 = v35;
  uint64_t v102 = v35;
  uint64_t v103 = v36;
  uint64_t v93 = v36;
  uint64_t v104 = v37;
  uint64_t v105 = v38;
  uint64_t v106 = v40;
  uint64_t v107 = v39;
  uint64_t v41 = type metadata accessor for TaggedValue_4.TaggedEnum();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v95 = (char *)&v75 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v94 = (char *)&v75 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v49 = (char *)&v75 - v48;
  MEMORY[0x1F4188790](v47);
  uint64_t v51 = (char *)&v75 - v50;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v53 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v54 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v56 = (char *)&v75 - v55;
  uint64_t v57 = (char *)&v75 + *(int *)(v54 + 48) - v55;
  uint64_t v98 = v42;
  uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v58((char *)&v75 - v55, v99, v41);
  v58(v57, a2, v41);
  char v59 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v58(v49, (uint64_t)v56, v41);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v60 = v88;
        uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v88 + 32);
        uint64_t v62 = v79;
        uint64_t v63 = v91;
        v61(v79, v49, v91);
        uint64_t v64 = v80;
        v61(v80, v57, v63);
        goto LABEL_15;
      }
      (*(void (**)(char *, uint64_t))(v88 + 8))(v49, v91);
      goto LABEL_13;
    case 2u:
      uint64_t v65 = v94;
      v58(v94, (uint64_t)v56, v41);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v60 = v89;
        uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v89 + 32);
        uint64_t v62 = v81;
        uint64_t v67 = v65;
        uint64_t v63 = v92;
        v66(v81, v67, v92);
        uint64_t v64 = v82;
        v66(v82, v57, v63);
        goto LABEL_15;
      }
      (*(void (**)(char *, uint64_t))(v89 + 8))(v65, v92);
      goto LABEL_13;
    case 3u:
      uint64_t v68 = v95;
      v58(v95, (uint64_t)v56, v41);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v60 = v90;
        uint64_t v69 = *(void (**)(char *, char *, uint64_t))(v90 + 32);
        uint64_t v62 = v83;
        uint64_t v70 = v68;
        uint64_t v63 = v93;
        v69(v83, v70, v93);
        uint64_t v64 = v85;
        v69(v85, v57, v63);
        goto LABEL_15;
      }
      (*(void (**)(char *, uint64_t))(v90 + 8))(v68, v93);
      goto LABEL_13;
    case 4u:
      goto LABEL_16;
    default:
      v58(v51, (uint64_t)v56, v41);
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v96 + 8))(v51, v97);
LABEL_13:
        char v59 = 0;
      }
      else
      {
        uint64_t v60 = v96;
        uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v96 + 32);
        uint64_t v62 = v76;
        uint64_t v72 = v51;
        uint64_t v63 = v97;
        v71(v76, v72, v97);
        uint64_t v64 = v77;
        v71(v77, v57, v63);
LABEL_15:
        char v59 = sub_1C4497178();
        uint64_t v73 = *(void (**)(char *, uint64_t))(v60 + 8);
        v73(v64, v63);
        v73(v62, v63);
        uint64_t v53 = v98;
        TupleTypeMetadata2 = v41;
      }
LABEL_16:
      (*(void (**)(char *, uint64_t))(v53 + 8))(v56, TupleTypeMetadata2);
      return v59 & 1;
  }
}

uint64_t sub_1C418C044(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static TaggedValue_4<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], *(void *)(a4 - 8), a3[7], *(void *)(a4 - 16), a3[8], *(void *)(a4 - 24), a3[9], *(void *)(a4 - 32)) & 1;
}

uint64_t static TaggedValue_5<>.== infix(_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v124 = a1;
  uint64_t v125 = a2;
  uint64_t v109 = a17;
  uint64_t v108 = a15;
  uint64_t v107 = a13;
  uint64_t v106 = a11;
  uint64_t v113 = *(void *)(a7 - 8);
  uint64_t v97 = a9;
  MEMORY[0x1F4188790](a1);
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v105 = (char *)&v95 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v104 = (char *)&v95 - v19;
  uint64_t v112 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v19);
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v103 = (char *)&v95 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  uint64_t v102 = (char *)&v95 - v23;
  uint64_t v111 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v23);
  unint64_t v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v101 = (char *)&v95 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v26);
  uint64_t v100 = (char *)&v95 - v27;
  uint64_t v110 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v27);
  unint64_t v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v99 = (char *)&v95 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v30);
  uint64_t v98 = (char *)&v95 - v31;
  uint64_t v121 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v31);
  unint64_t v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v96 = (char *)&v95 - v34;
  uint64_t v95 = (char *)&v95 - MEMORY[0x1F4188790](v34);
  uint64_t v122 = v35;
  uint64_t v126 = v35;
  uint64_t v127 = v36;
  uint64_t v114 = v36;
  uint64_t v115 = v37;
  uint64_t v116 = v38;
  uint64_t v128 = v37;
  uint64_t v129 = v38;
  uint64_t v117 = v39;
  uint64_t v130 = v39;
  uint64_t v131 = v40;
  uint64_t v132 = v42;
  uint64_t v133 = v41;
  uint64_t v134 = v44;
  uint64_t v135 = v43;
  uint64_t v45 = type metadata accessor for TaggedValue_5.TaggedEnum();
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v120 = (char *)&v95 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v119 = (char *)&v95 - v50;
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v118 = (char *)&v95 - v52;
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  uint64_t v55 = (char *)&v95 - v54;
  MEMORY[0x1F4188790](v53);
  uint64_t v57 = (char *)&v95 - v56;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v59 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v60 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v62 = (char *)&v95 - v61;
  uint64_t v63 = v60;
  uint64_t v64 = (char *)&v95 + *(int *)(v60 + 48) - v61;
  uint64_t v123 = v46;
  uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  v65((char *)&v95 - v61, v124, v45);
  v65(v64, (uint64_t)v125, v45);
  uint64_t v125 = v62;
  char v66 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v65(v55, (uint64_t)v125, v45);
      uint64_t v68 = v64;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v69 = v110;
        uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v110 + 32);
        uint64_t v71 = v98;
        uint64_t v72 = v114;
        v70(v98, v55, v114);
        uint64_t v73 = v99;
        v70(v99, v68, v72);
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(v110 + 8))(v55, v114);
      goto LABEL_16;
    case 2u:
      uint64_t v74 = v118;
      v65(v118, (uint64_t)v125, v45);
      uint64_t v75 = v64;
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v69 = v111;
        uint64_t v76 = *(void (**)(char *, char *, uint64_t))(v111 + 32);
        uint64_t v71 = v100;
        uint64_t v77 = v74;
        uint64_t v72 = v115;
        v76(v100, v77, v115);
        uint64_t v73 = v101;
        v76(v101, v75, v72);
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(v111 + 8))(v74, v115);
      goto LABEL_16;
    case 3u:
      uint64_t v78 = v119;
      v65(v119, (uint64_t)v125, v45);
      uint64_t v79 = v64;
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v80 = v112;
        uint64_t v81 = *(void (**)(char *, char *, uint64_t))(v112 + 32);
        uint64_t v82 = v102;
        uint64_t v83 = v78;
        uint64_t v84 = v116;
        v81(v102, v83, v116);
        uint64_t v85 = v103;
        v81(v103, v79, v84);
        char v66 = sub_1C4497178();
        uint64_t v86 = *(void (**)(char *, uint64_t))(v80 + 8);
        v86(v85, v84);
        v86(v82, v84);
        goto LABEL_19;
      }
      (*(void (**)(char *, uint64_t))(v112 + 8))(v78, v116);
      goto LABEL_16;
    case 4u:
      uint64_t v87 = v120;
      v65(v120, (uint64_t)v125, v45);
      uint64_t v88 = v64;
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v69 = v113;
        uint64_t v89 = *(void (**)(char *, char *, uint64_t))(v113 + 32);
        uint64_t v71 = v104;
        uint64_t v90 = v87;
        uint64_t v72 = v117;
        v89(v104, v90, v117);
        uint64_t v73 = v105;
        v89(v105, v88, v72);
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(v113 + 8))(v87, v117);
      goto LABEL_16;
    case 5u:
      goto LABEL_20;
    default:
      v65(v57, (uint64_t)v125, v45);
      uint64_t v67 = v64;
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v121 + 8))(v57, v122);
LABEL_16:
        char v66 = 0;
      }
      else
      {
        uint64_t v69 = v121;
        uint64_t v91 = *(void (**)(char *, char *, uint64_t))(v121 + 32);
        uint64_t v71 = v95;
        uint64_t v92 = v57;
        uint64_t v72 = v122;
        v91(v95, v92, v122);
        uint64_t v73 = v96;
        v91(v96, v67, v72);
LABEL_18:
        char v66 = sub_1C4497178();
        uint64_t v93 = *(void (**)(char *, uint64_t))(v69 + 8);
        v93(v73, v72);
        v93(v71, v72);
LABEL_19:
        uint64_t v59 = v123;
        uint64_t v63 = v45;
      }
LABEL_20:
      (*(void (**)(char *, uint64_t))(v59 + 8))(v125, v63);
      return v66 & 1;
  }
}

uint64_t sub_1C418CAA0(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4)
{
  return static TaggedValue_5<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], *(void *)(a4 - 8), a3[8], *(void *)(a4 - 16), a3[9], *(void *)(a4 - 24), a3[10], *(void *)(a4 - 32), a3[11], *(void *)(a4 - 40)) & 1;
}

uint64_t static TaggedValue_6<>.== infix(_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v150 = a1;
  uint64_t v151 = a2;
  uint64_t v132 = a20;
  uint64_t v131 = a18;
  uint64_t v130 = a16;
  uint64_t v129 = a14;
  uint64_t v128 = a12;
  uint64_t v137 = *(void *)(a8 - 8);
  uint64_t v117 = a10;
  uint64_t v20 = MEMORY[0x1F4188790](a11);
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v127 = (char *)&v115 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  uint64_t v126 = (char *)&v115 - v22;
  uint64_t v136 = *(void *)(v24 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v125 = (char *)&v115 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v25);
  uint64_t v124 = (char *)&v115 - v27;
  uint64_t v135 = *(void *)(v29 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  unint64_t v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v123 = (char *)&v115 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v30);
  uint64_t v122 = (char *)&v115 - v32;
  uint64_t v134 = *(void *)(v34 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  unint64_t v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v121 = (char *)&v115 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v35);
  uint64_t v120 = (char *)&v115 - v37;
  uint64_t v133 = *(void *)(v39 - 8);
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  unint64_t v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v119 = (char *)&v115 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v40);
  uint64_t v118 = (char *)&v115 - v42;
  uint64_t v147 = *(void *)(v44 - 8);
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  unint64_t v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v116 = (char *)&v115 - v47;
  uint64_t v48 = MEMORY[0x1F4188790](v45);
  uint64_t v115 = (char *)&v115 - v47;
  uint64_t v148 = v49;
  uint64_t v152 = v49;
  uint64_t v153 = v50;
  uint64_t v138 = v50;
  uint64_t v139 = v51;
  uint64_t v154 = v51;
  uint64_t v155 = v52;
  uint64_t v140 = v52;
  uint64_t v141 = v53;
  uint64_t v156 = v53;
  uint64_t v157 = v54;
  uint64_t v142 = v54;
  uint64_t v158 = v55;
  uint64_t v159 = v48;
  uint64_t v160 = v57;
  uint64_t v161 = v56;
  uint64_t v162 = v59;
  uint64_t v163 = v58;
  uint64_t v60 = type metadata accessor for TaggedValue_6.TaggedEnum();
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = MEMORY[0x1F4188790](v60);
  uint64_t v146 = (char *)&v115 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = MEMORY[0x1F4188790](v62);
  uint64_t v145 = (char *)&v115 - v65;
  uint64_t v66 = MEMORY[0x1F4188790](v64);
  uint64_t v144 = (char *)&v115 - v67;
  uint64_t v68 = MEMORY[0x1F4188790](v66);
  uint64_t v143 = (char *)&v115 - v69;
  uint64_t v70 = MEMORY[0x1F4188790](v68);
  uint64_t v72 = (char *)&v115 - v71;
  MEMORY[0x1F4188790](v70);
  uint64_t v74 = (char *)&v115 - v73;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v76 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v77 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v79 = (char *)&v115 - v78;
  uint64_t v80 = v77;
  uint64_t v81 = (char *)&v115 + *(int *)(v77 + 48) - v78;
  uint64_t v149 = v61;
  uint64_t v82 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
  v82((char *)&v115 - v78, v150, v60);
  uint64_t v83 = v81;
  v82(v81, (uint64_t)v151, v60);
  uint64_t v151 = v79;
  char v84 = 0;
  uint64_t v85 = v76;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v82(v72, (uint64_t)v151, v60);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v86 = v133;
        uint64_t v87 = *(void (**)(char *, char *, uint64_t))(v133 + 32);
        uint64_t v88 = v118;
        uint64_t v89 = v138;
        v87(v118, v72, v138);
        uint64_t v90 = v119;
        v87(v119, v83, v89);
        goto LABEL_14;
      }
      uint64_t v105 = *(void (**)(char *, void))(v133 + 8);
      uint64_t v106 = v72;
      uint64_t v107 = &v164;
      goto LABEL_20;
    case 2u:
      uint64_t v91 = v143;
      v82(v143, (uint64_t)v151, v60);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v92 = v134;
        uint64_t v93 = *(void (**)(char *, char *, uint64_t))(v134 + 32);
        uint64_t v94 = v120;
        uint64_t v95 = v139;
        v93(v120, v91, v139);
        uint64_t v96 = v121;
        v93(v121, v83, v95);
        char v84 = sub_1C4497178();
        uint64_t v97 = *(void (**)(char *, uint64_t))(v92 + 8);
        v97(v96, v95);
        v97(v94, v95);
        goto LABEL_24;
      }
      uint64_t v105 = *(void (**)(char *, void))(v134 + 8);
      uint64_t v106 = v91;
      uint64_t v107 = &v165;
      goto LABEL_20;
    case 3u:
      uint64_t v98 = v144;
      v82(v144, (uint64_t)v151, v60);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v86 = v135;
        uint64_t v99 = *(void (**)(char *, char *, uint64_t))(v135 + 32);
        uint64_t v88 = v122;
        uint64_t v89 = v140;
        v99(v122, v98, v140);
        uint64_t v90 = v123;
        v99(v123, v83, v89);
        goto LABEL_14;
      }
      uint64_t v105 = *(void (**)(char *, void))(v135 + 8);
      uint64_t v106 = v98;
      uint64_t v107 = &v166;
      goto LABEL_20;
    case 4u:
      uint64_t v100 = v145;
      v82(v145, (uint64_t)v151, v60);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v86 = v136;
        uint64_t v101 = *(void (**)(char *, char *, uint64_t))(v136 + 32);
        uint64_t v88 = v124;
        uint64_t v89 = v141;
        v101(v124, v100, v141);
        uint64_t v90 = v125;
        v101(v125, v83, v89);
        goto LABEL_14;
      }
      uint64_t v105 = *(void (**)(char *, void))(v136 + 8);
      uint64_t v106 = v100;
      uint64_t v107 = &v167;
      goto LABEL_20;
    case 5u:
      uint64_t v102 = v146;
      v82(v146, (uint64_t)v151, v60);
      if (swift_getEnumCaseMultiPayload() == 5)
      {
        uint64_t v86 = v137;
        uint64_t v103 = *(void (**)(char *, char *, uint64_t))(v137 + 32);
        uint64_t v88 = v126;
        uint64_t v89 = v142;
        v103(v126, v102, v142);
        uint64_t v90 = v127;
        v103(v127, v83, v89);
LABEL_14:
        char v84 = sub_1C4497178();
        uint64_t v104 = *(void (**)(char *, uint64_t))(v86 + 8);
        v104(v90, v89);
        v104(v88, v89);
        goto LABEL_24;
      }
      uint64_t v105 = *(void (**)(char *, void))(v137 + 8);
      uint64_t v106 = v102;
      uint64_t v107 = &v168;
LABEL_20:
      v105(v106, *(v107 - 32));
      goto LABEL_21;
    case 6u:
      goto LABEL_25;
    default:
      v82(v74, (uint64_t)v151, v60);
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v147 + 8))(v74, v148);
LABEL_21:
        char v84 = 0;
      }
      else
      {
        uint64_t v109 = v147;
        uint64_t v108 = v148;
        uint64_t v110 = *(void (**)(char *, char *, uint64_t))(v147 + 32);
        uint64_t v111 = v115;
        v110(v115, v74, v148);
        uint64_t v112 = v116;
        v110(v116, v83, v108);
        char v84 = sub_1C4497178();
        uint64_t v113 = *(void (**)(char *, uint64_t))(v109 + 8);
        v113(v112, v108);
        v113(v111, v108);
LABEL_24:
        uint64_t v85 = v149;
        uint64_t v80 = v60;
      }
LABEL_25:
      (*(void (**)(char *, uint64_t))(v85 + 8))(v151, v80);
      return v84 & 1;
  }
}

uint64_t sub_1C418D6CC(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4)
{
  return static TaggedValue_6<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], *(void *)(a4 - 8), a3[9], *(void *)(a4 - 16), a3[10], *(void *)(a4 - 24), a3[11], *(void *)(a4 - 32), a3[12], *(void *)(a4 - 40), a3[13],
           *(void *)(a4 - 48)) & 1;
}

uint64_t static TaggedValue_7<>.== infix(_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v176 = a2;
  uint64_t v173 = a1;
  uint64_t v154 = a23;
  uint64_t v153 = a21;
  uint64_t v152 = a19;
  uint64_t v151 = a17;
  uint64_t v150 = a15;
  uint64_t v149 = a13;
  uint64_t v160 = *(void *)(a9 - 8);
  uint64_t v136 = a11;
  uint64_t v23 = MEMORY[0x1F4188790](a14);
  unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v148 = (char *)&v134 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  uint64_t v147 = (char *)&v134 - v25;
  uint64_t v159 = *(void *)(v27 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  unint64_t v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v146 = (char *)&v134 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v28);
  uint64_t v145 = (char *)&v134 - v30;
  uint64_t v158 = *(void *)(v32 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  unint64_t v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v144 = (char *)&v134 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v33);
  uint64_t v143 = (char *)&v134 - v35;
  uint64_t v157 = *(void *)(v37 - 8);
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  unint64_t v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v142 = (char *)&v134 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v38);
  uint64_t v141 = (char *)&v134 - v40;
  uint64_t v156 = *(void *)(v42 - 8);
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  unint64_t v45 = (v44 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v140 = (char *)&v134 - v45;
  uint64_t v46 = MEMORY[0x1F4188790](v43);
  uint64_t v139 = (char *)&v134 - v45;
  uint64_t v155 = *(void *)(v47 - 8);
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  unint64_t v50 = (v49 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v138 = (char *)&v134 - v50;
  uint64_t v51 = MEMORY[0x1F4188790](v48);
  uint64_t v137 = (char *)&v134 - v50;
  uint64_t v170 = *(void *)(v52 - 8);
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  unint64_t v55 = (v54 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v135 = (char *)&v134 - v55;
  uint64_t v56 = MEMORY[0x1F4188790](v53);
  uint64_t v134 = (char *)&v134 - v55;
  uint64_t v171 = v57;
  uint64_t v177 = v57;
  uint64_t v178 = v58;
  uint64_t v162 = v58;
  uint64_t v163 = v59;
  uint64_t v179 = v59;
  uint64_t v180 = v60;
  uint64_t v164 = v60;
  uint64_t v165 = v61;
  uint64_t v181 = v61;
  uint64_t v182 = v62;
  uint64_t v166 = v62;
  uint64_t v161 = a9;
  uint64_t v183 = a9;
  uint64_t v184 = v63;
  uint64_t v185 = a12;
  uint64_t v186 = v56;
  uint64_t v187 = v65;
  uint64_t v188 = v64;
  uint64_t v189 = v67;
  uint64_t v190 = v66;
  uint64_t v68 = type metadata accessor for TaggedValue_7.TaggedEnum();
  uint64_t v69 = *(void *)(v68 - 8);
  uint64_t v70 = MEMORY[0x1F4188790](v68);
  uint64_t v169 = (char *)&v134 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = MEMORY[0x1F4188790](v70);
  uint64_t v168 = (char *)&v134 - v73;
  uint64_t v74 = MEMORY[0x1F4188790](v72);
  uint64_t v167 = (char *)&v134 - v75;
  uint64_t v76 = MEMORY[0x1F4188790](v74);
  uint64_t v78 = (char *)&v134 - v77;
  uint64_t v79 = MEMORY[0x1F4188790](v76);
  uint64_t v81 = (char *)&v134 - v80;
  uint64_t v82 = MEMORY[0x1F4188790](v79);
  char v84 = (char *)&v134 - v83;
  MEMORY[0x1F4188790](v82);
  uint64_t v86 = (char *)&v134 - v85;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v175 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v88 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v90 = (char *)&v134 - v89;
  uint64_t v174 = v88;
  uint64_t v91 = (char *)&v134 + *(int *)(v88 + 48) - v89;
  uint64_t v172 = v69;
  uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
  v92((char *)&v134 - v89, v173, v68);
  v92(v91, (uint64_t)v176, v68);
  uint64_t v176 = v90;
  char v93 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v92(v84, (uint64_t)v176, v68);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v94 = v155;
        uint64_t v95 = *(void (**)(char *, char *, uint64_t))(v155 + 32);
        uint64_t v96 = v137;
        uint64_t v97 = v162;
        v95(v137, v84, v162);
        uint64_t v98 = v138;
        v95(v138, v91, v97);
        char v93 = sub_1C4497178();
        uint64_t v99 = *(void (**)(char *, uint64_t))(v94 + 8);
        v99(v98, v97);
        uint64_t v100 = v96;
        uint64_t v101 = v97;
        goto LABEL_12;
      }
      uint64_t v124 = *(void (**)(char *, void))(v155 + 8);
      uint64_t v125 = v84;
      uint64_t v126 = &v192;
      goto LABEL_24;
    case 2u:
      v92(v81, (uint64_t)v176, v68);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v102 = v156;
        uint64_t v103 = *(void (**)(char *, char *, uint64_t))(v156 + 32);
        uint64_t v104 = v139;
        uint64_t v105 = v163;
        v103(v139, v81, v163);
        uint64_t v106 = v140;
        v103(v140, v91, v105);
        goto LABEL_17;
      }
      uint64_t v124 = *(void (**)(char *, void))(v156 + 8);
      uint64_t v125 = v81;
      uint64_t v126 = &v193;
      goto LABEL_24;
    case 3u:
      v92(v78, (uint64_t)v176, v68);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v107 = v157;
        uint64_t v108 = *(void (**)(char *, char *, uint64_t))(v157 + 32);
        uint64_t v109 = v141;
        uint64_t v110 = v164;
        v108(v141, v78, v164);
        uint64_t v111 = v142;
        v108(v142, v91, v110);
        char v93 = sub_1C4497178();
        uint64_t v112 = *(void (**)(char *, uint64_t))(v107 + 8);
        v112(v111, v110);
        v112(v109, v110);
        goto LABEL_28;
      }
      uint64_t v124 = *(void (**)(char *, void))(v157 + 8);
      uint64_t v125 = v78;
      uint64_t v126 = &v194;
      goto LABEL_24;
    case 4u:
      uint64_t v113 = v167;
      v92(v167, (uint64_t)v176, v68);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        uint64_t v124 = *(void (**)(char *, void))(v158 + 8);
        uint64_t v125 = v113;
        uint64_t v126 = &v195;
        goto LABEL_24;
      }
      uint64_t v114 = v158;
      uint64_t v115 = *(void (**)(char *, char *, uint64_t))(v158 + 32);
      uint64_t v116 = v143;
      uint64_t v117 = v165;
      v115(v143, v113, v165);
      uint64_t v118 = v144;
      v115(v144, v91, v117);
      char v93 = sub_1C4497178();
      uint64_t v99 = *(void (**)(char *, uint64_t))(v114 + 8);
      v99(v118, v117);
      uint64_t v100 = v116;
      uint64_t v101 = v117;
LABEL_12:
      v99(v100, v101);
      goto LABEL_28;
    case 5u:
      uint64_t v119 = v168;
      v92(v168, (uint64_t)v176, v68);
      if (swift_getEnumCaseMultiPayload() == 5)
      {
        uint64_t v102 = v159;
        uint64_t v120 = *(void (**)(char *, char *, uint64_t))(v159 + 32);
        uint64_t v104 = v145;
        uint64_t v105 = v166;
        v120(v145, v119, v166);
        uint64_t v106 = v146;
        v120(v146, v91, v105);
        goto LABEL_17;
      }
      uint64_t v124 = *(void (**)(char *, void))(v159 + 8);
      uint64_t v125 = v119;
      uint64_t v126 = &v196;
      goto LABEL_24;
    case 6u:
      uint64_t v121 = v169;
      v92(v169, (uint64_t)v176, v68);
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        uint64_t v102 = v160;
        uint64_t v122 = *(void (**)(char *, char *, uint64_t))(v160 + 32);
        uint64_t v104 = v147;
        uint64_t v105 = v161;
        v122(v147, v121, v161);
        uint64_t v106 = v148;
        v122(v148, v91, v105);
LABEL_17:
        char v93 = sub_1C4497178();
        uint64_t v123 = *(void (**)(char *, uint64_t))(v102 + 8);
        v123(v106, v105);
        v123(v104, v105);
        goto LABEL_28;
      }
      uint64_t v124 = *(void (**)(char *, void))(v160 + 8);
      uint64_t v125 = v121;
      uint64_t v126 = &v191;
LABEL_24:
      v124(v125, *(v126 - 32));
      goto LABEL_25;
    case 7u:
      goto LABEL_29;
    default:
      v92(v86, (uint64_t)v176, v68);
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v170 + 8))(v86, v171);
LABEL_25:
        char v93 = 0;
      }
      else
      {
        uint64_t v128 = v170;
        uint64_t v127 = v171;
        uint64_t v129 = *(void (**)(char *, char *, uint64_t))(v170 + 32);
        uint64_t v130 = v134;
        v129(v134, v86, v171);
        uint64_t v131 = v135;
        v129(v135, v91, v127);
        char v93 = sub_1C4497178();
        uint64_t v132 = *(void (**)(char *, uint64_t))(v128 + 8);
        v132(v131, v127);
        v132(v130, v127);
LABEL_28:
        uint64_t v174 = v68;
        uint64_t v175 = v172;
      }
LABEL_29:
      (*(void (**)(char *, uint64_t))(v175 + 8))(v176, v174);
      return v93 & 1;
  }
}

uint64_t sub_1C418E530(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4)
{
  return static TaggedValue_7<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], *(void *)(a4 - 8), a3[10], *(void *)(a4 - 16), a3[11], *(void *)(a4 - 24), a3[12], *(void *)(a4 - 32), a3[13], *(void *)(a4 - 40),
           a3[14],
           *(void *)(a4 - 48),
           a3[15],
           *(void *)(a4 - 56)) & 1;
}

uint64_t static TaggedValue_8<>.== infix(_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v189 = a2;
  uint64_t v186 = a1;
  uint64_t v164 = a26;
  uint64_t v163 = a24;
  uint64_t v162 = a22;
  uint64_t v161 = a20;
  uint64_t v160 = a18;
  uint64_t v159 = a16;
  uint64_t v158 = a14;
  uint64_t v171 = *(void *)(a10 - 8);
  uint64_t v143 = a12;
  uint64_t v26 = MEMORY[0x1F4188790](a17);
  unint64_t v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v157 = (char *)&v141 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  uint64_t v156 = (char *)&v141 - v28;
  uint64_t v170 = *(void *)(a9 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v29);
  unint64_t v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v155 = (char *)&v141 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v30);
  uint64_t v154 = (char *)&v141 - v32;
  uint64_t v169 = *(void *)(v34 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  unint64_t v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v153 = (char *)&v141 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v35);
  uint64_t v152 = (char *)&v141 - v37;
  uint64_t v168 = *(void *)(v39 - 8);
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  unint64_t v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v151 = (char *)&v141 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v40);
  uint64_t v150 = (char *)&v141 - v42;
  uint64_t v167 = *(void *)(v44 - 8);
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  unint64_t v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v149 = (char *)&v141 - v47;
  uint64_t v48 = MEMORY[0x1F4188790](v45);
  uint64_t v148 = (char *)&v141 - v47;
  uint64_t v166 = *(void *)(v49 - 8);
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  unint64_t v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v147 = (char *)&v141 - v52;
  uint64_t v53 = MEMORY[0x1F4188790](v50);
  uint64_t v146 = (char *)&v141 - v52;
  uint64_t v165 = *(void *)(v54 - 8);
  uint64_t v55 = MEMORY[0x1F4188790](v53);
  unint64_t v57 = (v56 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v145 = (char *)&v141 - v57;
  uint64_t v58 = MEMORY[0x1F4188790](v55);
  uint64_t v144 = (char *)&v141 - v57;
  uint64_t v183 = *(void *)(v59 - 8);
  uint64_t v60 = MEMORY[0x1F4188790](v58);
  unint64_t v62 = (v61 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v142 = (char *)&v141 - v62;
  uint64_t v63 = MEMORY[0x1F4188790](v60);
  uint64_t v141 = (char *)&v141 - v62;
  uint64_t v184 = v64;
  uint64_t v190 = v64;
  uint64_t v191 = v65;
  uint64_t v174 = v65;
  uint64_t v175 = v66;
  uint64_t v192 = v66;
  uint64_t v193 = v67;
  uint64_t v176 = v67;
  uint64_t v177 = v68;
  uint64_t v194 = v68;
  uint64_t v195 = v69;
  uint64_t v178 = v69;
  uint64_t v172 = a9;
  uint64_t v196 = a9;
  uint64_t v197 = a10;
  uint64_t v173 = a10;
  uint64_t v198 = a11;
  uint64_t v199 = a13;
  uint64_t v200 = v70;
  uint64_t v201 = v63;
  uint64_t v202 = v72;
  uint64_t v203 = v71;
  uint64_t v204 = v74;
  uint64_t v205 = v73;
  uint64_t v75 = type metadata accessor for TaggedValue_8.TaggedEnum();
  uint64_t v76 = *(void *)(v75 - 8);
  uint64_t v77 = MEMORY[0x1F4188790](v75);
  uint64_t v182 = (char *)&v141 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = MEMORY[0x1F4188790](v77);
  uint64_t v181 = (char *)&v141 - v80;
  uint64_t v81 = MEMORY[0x1F4188790](v79);
  uint64_t v180 = (char *)&v141 - v82;
  uint64_t v83 = MEMORY[0x1F4188790](v81);
  uint64_t v179 = (char *)&v141 - v84;
  uint64_t v85 = MEMORY[0x1F4188790](v83);
  uint64_t v87 = (char *)&v141 - v86;
  uint64_t v88 = MEMORY[0x1F4188790](v85);
  uint64_t v90 = (char *)&v141 - v89;
  uint64_t v91 = MEMORY[0x1F4188790](v88);
  char v93 = (char *)&v141 - v92;
  MEMORY[0x1F4188790](v91);
  uint64_t v95 = (char *)&v141 - v94;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v188 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v97 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v99 = (char *)&v141 - v98;
  uint64_t v187 = v97;
  uint64_t v100 = (char *)&v141 + *(int *)(v97 + 48) - v98;
  uint64_t v185 = v76;
  uint64_t v101 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 16);
  v101((char *)&v141 - v98, v186, v75);
  uint64_t v102 = v100;
  v101(v100, (uint64_t)v189, v75);
  uint64_t v189 = v99;
  char v103 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v101(v93, (uint64_t)v189, v75);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v104 = v165;
        uint64_t v105 = *(void (**)(char *, char *, uint64_t))(v165 + 32);
        uint64_t v106 = v144;
        uint64_t v107 = v174;
        v105(v144, v93, v174);
        uint64_t v108 = v145;
        v105(v145, v102, v107);
        char v103 = sub_1C4497178();
        uint64_t v109 = *(void (**)(char *, uint64_t))(v104 + 8);
        v109(v108, v107);
        uint64_t v110 = v106;
        goto LABEL_19;
      }
      (*(void (**)(char *, uint64_t))(v165 + 8))(v93, v174);
      goto LABEL_27;
    case 2u:
      v101(v90, (uint64_t)v189, v75);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v111 = v166;
        uint64_t v112 = *(void (**)(char *, char *, uint64_t))(v166 + 32);
        uint64_t v113 = v146;
        uint64_t v114 = v175;
        v112(v146, v90, v175);
        uint64_t v115 = v147;
        v112(v147, v102, v114);
        char v103 = sub_1C4497178();
        uint64_t v116 = *(void (**)(char *, uint64_t))(v111 + 8);
        v116(v115, v114);
        v116(v113, v114);
        goto LABEL_30;
      }
      (*(void (**)(char *, uint64_t))(v166 + 8))(v90, v175);
      goto LABEL_27;
    case 3u:
      v101(v87, (uint64_t)v189, v75);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v117 = v167;
        uint64_t v118 = *(void (**)(char *, char *, uint64_t))(v167 + 32);
        uint64_t v119 = v148;
        uint64_t v120 = v87;
        uint64_t v107 = v176;
        v118(v148, v120, v176);
        uint64_t v121 = v149;
        v118(v149, v100, v107);
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(v167 + 8))(v87, v176);
      goto LABEL_27;
    case 4u:
      uint64_t v122 = v179;
      v101(v179, (uint64_t)v189, v75);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v117 = v168;
        uint64_t v123 = *(void (**)(char *, char *, uint64_t))(v168 + 32);
        uint64_t v119 = v150;
        uint64_t v124 = v122;
        uint64_t v107 = v177;
        v123(v150, v124, v177);
        uint64_t v121 = v151;
        v123(v151, v100, v107);
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(v168 + 8))(v122, v177);
      goto LABEL_27;
    case 5u:
      uint64_t v125 = v180;
      v101(v180, (uint64_t)v189, v75);
      if (swift_getEnumCaseMultiPayload() == 5)
      {
        uint64_t v117 = v169;
        uint64_t v126 = *(void (**)(char *, char *, uint64_t))(v169 + 32);
        uint64_t v119 = v152;
        uint64_t v127 = v125;
        uint64_t v107 = v178;
        v126(v152, v127, v178);
        uint64_t v121 = v153;
        v126(v153, v100, v107);
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(v169 + 8))(v125, v178);
      goto LABEL_27;
    case 6u:
      uint64_t v128 = v181;
      v101(v181, (uint64_t)v189, v75);
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        uint64_t v117 = v170;
        uint64_t v129 = *(void (**)(char *, char *, uint64_t))(v170 + 32);
        uint64_t v119 = v154;
        uint64_t v130 = v128;
        uint64_t v107 = v172;
        v129(v154, v130, v172);
        uint64_t v121 = v155;
        v129(v155, v100, v107);
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t))(v170 + 8))(v128, v172);
      goto LABEL_27;
    case 7u:
      uint64_t v131 = v182;
      v101(v182, (uint64_t)v189, v75);
      if (swift_getEnumCaseMultiPayload() != 7)
      {
        (*(void (**)(char *, uint64_t))(v171 + 8))(v131, v173);
        goto LABEL_27;
      }
      uint64_t v117 = v171;
      uint64_t v132 = *(void (**)(char *, char *, uint64_t))(v171 + 32);
      uint64_t v119 = v156;
      uint64_t v133 = v131;
      uint64_t v107 = v173;
      v132(v156, v133, v173);
      uint64_t v121 = v157;
      v132(v157, v100, v107);
LABEL_18:
      char v103 = sub_1C4497178();
      uint64_t v109 = *(void (**)(char *, uint64_t))(v117 + 8);
      v109(v121, v107);
      uint64_t v110 = v119;
LABEL_19:
      v109(v110, v107);
      goto LABEL_30;
    case 8u:
      goto LABEL_31;
    default:
      v101(v95, (uint64_t)v189, v75);
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v183 + 8))(v95, v184);
LABEL_27:
        char v103 = 0;
      }
      else
      {
        uint64_t v134 = v183;
        uint64_t v135 = *(void (**)(char *, char *, uint64_t))(v183 + 32);
        uint64_t v136 = v141;
        uint64_t v137 = v184;
        v135(v141, v95, v184);
        uint64_t v138 = v142;
        v135(v142, v102, v137);
        char v103 = sub_1C4497178();
        uint64_t v139 = *(void (**)(char *, uint64_t))(v134 + 8);
        v139(v138, v137);
        v139(v136, v137);
LABEL_30:
        uint64_t v187 = v75;
        uint64_t v188 = v185;
      }
LABEL_31:
      (*(void (**)(char *, uint64_t))(v188 + 8))(v189, v187);
      return v103 & 1;
  }
}

uint64_t sub_1C418F508(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4)
{
  return static TaggedValue_8<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10], *(void *)(a4 - 8), a3[11], *(void *)(a4 - 16), a3[12], *(void *)(a4 - 24), a3[13], *(void *)(a4 - 32), a3[14],
           *(void *)(a4 - 40),
           a3[15],
           *(void *)(a4 - 48),
           a3[16],
           *(void *)(a4 - 56),
           a3[17],
           *(void *)(a4 - 64)) & 1;
}

uint64_t static TaggedValue_9<>.== infix(_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v228 = a2;
  uint64_t v226 = a1;
  uint64_t v200 = a29;
  uint64_t v199 = a27;
  uint64_t v198 = a25;
  uint64_t v197 = a23;
  uint64_t v196 = a21;
  uint64_t v195 = a19;
  uint64_t v194 = a17;
  uint64_t v193 = a15;
  uint64_t v208 = *(void *)(a11 - 8);
  uint64_t v176 = a13;
  uint64_t v29 = MEMORY[0x1F4188790](a20);
  unint64_t v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v192 = (char *)&v174 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v29);
  uint64_t v191 = (char *)&v174 - v31;
  uint64_t v207 = *(void *)(a10 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v32);
  unint64_t v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v190 = (char *)&v174 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v33);
  uint64_t v189 = (char *)&v174 - v35;
  uint64_t v206 = *(void *)(a9 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v36);
  unint64_t v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v188 = (char *)&v174 - v39;
  uint64_t v40 = MEMORY[0x1F4188790](v37);
  uint64_t v187 = (char *)&v174 - v39;
  uint64_t v205 = *(void *)(v41 - 8);
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  unint64_t v44 = (v43 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v186 = (char *)&v174 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v42);
  uint64_t v185 = (char *)&v174 - v44;
  uint64_t v204 = *(void *)(v46 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  unint64_t v49 = (v48 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v184 = (char *)&v174 - v49;
  uint64_t v50 = MEMORY[0x1F4188790](v47);
  uint64_t v183 = (char *)&v174 - v49;
  uint64_t v203 = *(void *)(v51 - 8);
  uint64_t v52 = MEMORY[0x1F4188790](v50);
  unint64_t v54 = (v53 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v182 = (char *)&v174 - v54;
  uint64_t v55 = MEMORY[0x1F4188790](v52);
  uint64_t v181 = (char *)&v174 - v54;
  uint64_t v202 = *(void *)(v56 - 8);
  uint64_t v57 = MEMORY[0x1F4188790](v55);
  unint64_t v59 = (v58 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v180 = (char *)&v174 - v59;
  uint64_t v60 = MEMORY[0x1F4188790](v57);
  uint64_t v179 = (char *)&v174 - v59;
  uint64_t v201 = *(void *)(v61 - 8);
  uint64_t v62 = MEMORY[0x1F4188790](v60);
  unint64_t v64 = (v63 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v178 = (char *)&v174 - v64;
  uint64_t v65 = MEMORY[0x1F4188790](v62);
  uint64_t v177 = (char *)&v174 - v64;
  uint64_t v223 = *(void *)(v66 - 8);
  uint64_t v67 = MEMORY[0x1F4188790](v65);
  unint64_t v69 = (v68 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v175 = (char *)&v174 - v69;
  uint64_t v70 = MEMORY[0x1F4188790](v67);
  uint64_t v174 = (char *)&v174 - v69;
  uint64_t v224 = v71;
  uint64_t v229 = v71;
  uint64_t v230 = v72;
  uint64_t v212 = v72;
  uint64_t v213 = v73;
  uint64_t v231 = v73;
  uint64_t v232 = v74;
  uint64_t v214 = v74;
  uint64_t v215 = v75;
  uint64_t v233 = v75;
  uint64_t v234 = v76;
  uint64_t v216 = v76;
  uint64_t v210 = a9;
  uint64_t v235 = a9;
  uint64_t v236 = a10;
  uint64_t v211 = a10;
  uint64_t v209 = a11;
  uint64_t v237 = a11;
  uint64_t v238 = a12;
  uint64_t v239 = a14;
  uint64_t v240 = a16;
  uint64_t v241 = v77;
  uint64_t v242 = v70;
  uint64_t v243 = v79;
  uint64_t v244 = v78;
  uint64_t v245 = v81;
  uint64_t v246 = v80;
  uint64_t v82 = type metadata accessor for TaggedValue_9.TaggedEnum();
  uint64_t v83 = *(void *)(v82 - 8);
  uint64_t v84 = MEMORY[0x1F4188790](v82);
  uint64_t v222 = (char *)&v174 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = MEMORY[0x1F4188790](v84);
  uint64_t v221 = (char *)&v174 - v87;
  uint64_t v88 = MEMORY[0x1F4188790](v86);
  int v220 = (char *)&v174 - v89;
  uint64_t v90 = MEMORY[0x1F4188790](v88);
  uint64_t v219 = (char *)&v174 - v91;
  uint64_t v92 = MEMORY[0x1F4188790](v90);
  uint64_t v218 = (char *)&v174 - v93;
  uint64_t v94 = MEMORY[0x1F4188790](v92);
  uint64_t v217 = (char *)&v174 - v95;
  uint64_t v96 = MEMORY[0x1F4188790](v94);
  uint64_t v98 = (char *)&v174 - v97;
  uint64_t v99 = MEMORY[0x1F4188790](v96);
  uint64_t v101 = (char *)&v174 - v100;
  MEMORY[0x1F4188790](v99);
  char v103 = (char *)&v174 - v102;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v105 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v106 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v108 = (char *)&v174 - v107;
  uint64_t v227 = v106;
  uint64_t v109 = (char *)&v174 + *(int *)(v106 + 48) - v107;
  uint64_t v225 = v83;
  uint64_t v110 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 16);
  v110((char *)&v174 - v107, v226, v82);
  uint64_t v111 = v109;
  v110(v109, (uint64_t)v228, v82);
  uint64_t v228 = v108;
  uint64_t v112 = v82;
  char v113 = 0;
  uint64_t v114 = v105;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v110(v101, (uint64_t)v228, v112);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v115 = v201;
        uint64_t v116 = *(void (**)(char *, char *, uint64_t))(v201 + 32);
        uint64_t v117 = v177;
        uint64_t v118 = v101;
        uint64_t v119 = v212;
        v116(v177, v118, v212);
        uint64_t v120 = v178;
        v116(v178, v111, v119);
        LOBYTE(v116) = sub_1C4497178();
        uint64_t v121 = *(void (**)(char *, uint64_t))(v115 + 8);
        v121(v120, v119);
        uint64_t v122 = v117;
        char v113 = (char)v116;
        v121(v122, v119);
        goto LABEL_23;
      }
      (*(void (**)(char *, uint64_t))(v201 + 8))(v101, v212);
      goto LABEL_32;
    case 2u:
      v110(v98, (uint64_t)v228, v112);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v123 = v202;
        uint64_t v124 = *(void (**)(char *, char *, uint64_t))(v202 + 32);
        uint64_t v125 = v179;
        uint64_t v126 = v213;
        v124(v179, v98, v213);
        uint64_t v127 = v180;
        v124(v180, v111, v126);
        LOBYTE(v124) = sub_1C4497178();
        uint64_t v128 = *(void (**)(char *, uint64_t))(v123 + 8);
        v128(v127, v126);
        uint64_t v129 = v125;
        char v113 = (char)v124;
        v128(v129, v126);
        goto LABEL_23;
      }
      (*(void (**)(char *, uint64_t))(v202 + 8))(v98, v213);
      goto LABEL_32;
    case 3u:
      uint64_t v130 = v217;
      uint64_t v131 = v112;
      v110(v217, (uint64_t)v228, v112);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v132 = v203;
        uint64_t v133 = *(void (**)(char *, char *, uint64_t))(v203 + 32);
        uint64_t v134 = v181;
        uint64_t v135 = v130;
        uint64_t v136 = v214;
        v133(v181, v135, v214);
        uint64_t v137 = v182;
        v133(v182, v111, v136);
        char v138 = sub_1C4497178();
        uint64_t v139 = *(void (**)(char *, uint64_t))(v132 + 8);
        v139(v137, v136);
        uint64_t v140 = v134;
        char v113 = v138;
        v139(v140, v136);
        goto LABEL_12;
      }
      (*(void (**)(char *, uint64_t))(v203 + 8))(v130, v214);
      goto LABEL_32;
    case 4u:
      uint64_t v141 = v218;
      uint64_t v131 = v112;
      v110(v218, (uint64_t)v228, v112);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        (*(void (**)(char *, uint64_t))(v204 + 8))(v141, v215);
        goto LABEL_32;
      }
      uint64_t v142 = v204;
      uint64_t v143 = *(void (**)(char *, char *, uint64_t))(v204 + 32);
      uint64_t v144 = v183;
      uint64_t v145 = v141;
      uint64_t v146 = v215;
      v143(v183, v145, v215);
      uint64_t v147 = v184;
      v143(v184, v111, v146);
      char v113 = sub_1C4497178();
      uint64_t v148 = *(void (**)(char *, uint64_t))(v142 + 8);
      v148(v147, v146);
      v148(v144, v146);
LABEL_12:
      uint64_t v114 = v225;
      uint64_t v227 = v131;
      goto LABEL_33;
    case 5u:
      uint64_t v149 = v219;
      v110(v219, (uint64_t)v228, v112);
      if (swift_getEnumCaseMultiPayload() == 5)
      {
        uint64_t v150 = v205;
        uint64_t v151 = *(void (**)(char *, char *, uint64_t))(v205 + 32);
        uint64_t v152 = v185;
        uint64_t v153 = v149;
        uint64_t v154 = v216;
        v151(v185, v153, v216);
        uint64_t v155 = v186;
        v151(v186, v111, v154);
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v205 + 8))(v149, v216);
      goto LABEL_32;
    case 6u:
      uint64_t v156 = v220;
      v110(v220, (uint64_t)v228, v112);
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        uint64_t v150 = v206;
        uint64_t v157 = *(void (**)(char *, char *, uint64_t))(v206 + 32);
        uint64_t v152 = v187;
        uint64_t v158 = v156;
        uint64_t v154 = v210;
        v157(v187, v158, v210);
        uint64_t v155 = v188;
        v157(v188, v111, v154);
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v206 + 8))(v156, v210);
      goto LABEL_32;
    case 7u:
      uint64_t v159 = v221;
      v110(v221, (uint64_t)v228, v112);
      if (swift_getEnumCaseMultiPayload() == 7)
      {
        uint64_t v150 = v207;
        uint64_t v160 = *(void (**)(char *, char *, uint64_t))(v207 + 32);
        uint64_t v152 = v189;
        uint64_t v161 = v159;
        uint64_t v154 = v211;
        v160(v189, v161, v211);
        uint64_t v155 = v190;
        v160(v190, v111, v154);
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v207 + 8))(v159, v211);
      goto LABEL_32;
    case 8u:
      uint64_t v162 = v222;
      v110(v222, (uint64_t)v228, v112);
      if (swift_getEnumCaseMultiPayload() != 8)
      {
        (*(void (**)(char *, uint64_t))(v208 + 8))(v162, v209);
        goto LABEL_32;
      }
      uint64_t v150 = v208;
      uint64_t v163 = *(void (**)(char *, char *, uint64_t))(v208 + 32);
      uint64_t v152 = v191;
      uint64_t v164 = v162;
      uint64_t v154 = v209;
      v163(v191, v164, v209);
      uint64_t v155 = v192;
      v163(v192, v111, v154);
LABEL_21:
      char v113 = sub_1C4497178();
      uint64_t v165 = *(void (**)(char *, uint64_t))(v150 + 8);
      v165(v155, v154);
      v165(v152, v154);
      goto LABEL_23;
    case 9u:
      goto LABEL_33;
    default:
      v110(v103, (uint64_t)v228, v112);
      if (swift_getEnumCaseMultiPayload())
      {
        (*(void (**)(char *, uint64_t))(v223 + 8))(v103, v224);
LABEL_32:
        char v113 = 0;
      }
      else
      {
        uint64_t v167 = v223;
        uint64_t v168 = *(void (**)(char *, char *, uint64_t))(v223 + 32);
        uint64_t v169 = v174;
        uint64_t v170 = v224;
        v168(v174, v103, v224);
        uint64_t v171 = v175;
        v168(v175, v111, v170);
        LOBYTE(v168) = sub_1C4497178();
        uint64_t v172 = *(void (**)(char *, uint64_t))(v167 + 8);
        v172(v171, v170);
        uint64_t v173 = v169;
        char v113 = (char)v168;
        v172(v173, v170);
LABEL_23:
        uint64_t v114 = v225;
        uint64_t v227 = v112;
      }
LABEL_33:
      (*(void (**)(char *, uint64_t))(v114 + 8))(v228, v227);
      return v113 & 1;
  }
}

uint64_t sub_1C419077C(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4)
{
  return static TaggedValue_9<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a3[8], a3[9], a3[10], a3[11], *(void *)(a4 - 8), a3[12], *(void *)(a4 - 16), a3[13], *(void *)(a4 - 24), a3[14], *(void *)(a4 - 32),
           a3[15],
           *(void *)(a4 - 40),
           a3[16],
           *(void *)(a4 - 48),
           a3[17],
           *(void *)(a4 - 56),
           a3[18],
           *(void *)(a4 - 64),
           a3[19],
           *(void *)(a4 - 72)) & 1;
}

uint64_t TaggedValue_1.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v120 = a4;
  uint64_t v117 = a2;
  uint64_t v122 = a3;
  uint64_t v119 = type metadata accessor for TaggedValue_1.TaggedEnum();
  uint64_t v118 = *(void *)(v119 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v119);
  uint64_t v112 = (void **)((char *)&v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v5);
  uint64_t v116 = (char *)&v112 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v125 = (uint64_t)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v114 = (uint64_t)&v112 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v136 = (uint64_t)&v112 - v13;
  uint64_t v139 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v14 = MEMORY[0x1F4188790](v139);
  uint64_t v127 = (uint64_t)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v121 = (uint64_t)&v112 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v137 = (uint64_t)&v112 - v18;
  uint64_t v19 = type metadata accessor for Proto_Value(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v126 = (char *)&v112 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v138 = (uint64_t)&v112 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v115 = (uint64_t)&v112 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v129 = (uint64_t)&v112 - v28;
  MEMORY[0x1F4188790](v27);
  uint64_t v135 = (uint64_t)&v112 - v29;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v31 = MEMORY[0x1F4188790](v30 - 8);
  uint64_t v130 = (uint64_t)&v112 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v128 = (uint64_t)&v112 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v124 = (uint64_t)&v112 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v123 = (uint64_t)&v112 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v41 = (char *)&v112 - v40;
  MEMORY[0x1F4188790](v39);
  uint64_t v43 = (char *)&v112 - v42;
  uint64_t v44 = a1;
  uint64_t v45 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v45, (uint64_t)v43, &qword_1EBBC0540);
  uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  uint64_t v46 = v20 + 48;
  uint64_t v47 = v48;
  unsigned int v49 = v48((uint64_t)v43, 1, v19);
  sub_1C3F962E0((uint64_t)v43, &qword_1EBBC0540);
  if (v49 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v50 = 0xD000000000000017;
    *(void *)(v50 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v50 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  uint64_t inited = swift_initStackObject();
  uint64_t v133 = v44;
  uint64_t v53 = inited;
  *(void *)(inited + 16) = v44;
  sub_1C3F970C4(v45, (uint64_t)v41, &qword_1EBBC0540);
  uint64_t v132 = v46;
  char v113 = v47;
  uint64_t result = v47((uint64_t)v41, 1, v19);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v54 = v135;
  sub_1C3F8ADE0((uint64_t)v41, v135, type metadata accessor for Proto_Value);
  uint64_t v131 = v19;
  uint64_t v55 = *(void *)(v54 + *(int *)(v19 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v56 = v136;
  sub_1C3F970C4(v55, v136, &qword_1EBBBF8A0);
  uint64_t v57 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 48);
  if (v58(v56, 1, v57) == 1)
  {
    swift_retain();
    sub_1C3F962E0(v56, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      uint64_t v59 = v56;
      uint64_t v60 = v137;
      sub_1C3F8ADE0(v59, v137, type metadata accessor for Proto_TaggedValue);
      uint64_t v61 = v113;
      goto LABEL_12;
    }
    swift_retain();
    sub_1C3F8B288(v56, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  uint64_t v61 = v113;
  uint64_t v60 = v137;
  sub_1C4496888();
  uint64_t v62 = *(int *)(v139 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)(v60 + v62) = qword_1EA39AF60;
LABEL_12:
  swift_retain();
  sub_1C3F8B288(v54, type metadata accessor for Proto_Value);
  uint64_t v63 = *(void *)(v60 + *(int *)(v139 + 20));
  swift_beginAccess();
  uint64_t v64 = *(void *)(v63 + 16);
  sub_1C3F8B288(v60, type metadata accessor for Proto_TaggedValue);
  if (!v64)
  {
    uint64_t v77 = *(void *)(v53 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
    swift_beginAccess();
    uint64_t v78 = v123;
    sub_1C3F970C4(v77, v123, &qword_1EBBC0540);
    uint64_t v79 = v131;
    uint64_t result = v61(v78, 1, v131);
    if (result == 1)
    {
LABEL_48:
      __break(1u);
      return result;
    }
    uint64_t v80 = v129;
    sub_1C3F8ADE0(v78, v129, type metadata accessor for Proto_Value);
    uint64_t v81 = *(void *)(v80 + *(int *)(v79 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v82 = v81;
    uint64_t v83 = v114;
    sub_1C3F970C4(v82, v114, &qword_1EBBBF8A0);
    if (v58(v83, 1, v57) == 1)
    {
      sub_1C3F962E0(v83, &qword_1EBBBF8A0);
      uint64_t v84 = v133;
      uint64_t v85 = v134;
      uint64_t v86 = v117;
      uint64_t v87 = v116;
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v87 = v116;
      if (EnumCaseMultiPayload == 11)
      {
        uint64_t v91 = v121;
        sub_1C3F8ADE0(v83, v121, type metadata accessor for Proto_TaggedValue);
        uint64_t v84 = v133;
        uint64_t v85 = v134;
        uint64_t v86 = v117;
        uint64_t v92 = v131;
        uint64_t v93 = v122;
LABEL_39:
        sub_1C3F8B288(v129, type metadata accessor for Proto_Value);
        uint64_t v104 = *(void *)(v91 + *(int *)(v139 + 20))
             + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
        swift_beginAccess();
        uint64_t v105 = v104;
        uint64_t v106 = v124;
        sub_1C3F970C4(v105, v124, &qword_1EBBC0540);
        if (v113(v106, 1, v92) == 1)
        {
          uint64_t v107 = v115;
          sub_1C4496888();
          uint64_t v108 = *(int *)(v92 + 20);
          if (qword_1EBBBF8C8 != -1) {
            swift_once();
          }
          *(void *)(v107 + v108) = qword_1EBBBF8B8;
          swift_retain();
          sub_1C3F962E0(v124, &qword_1EBBC0540);
        }
        else
        {
          uint64_t v109 = v106;
          uint64_t v107 = v115;
          sub_1C3F8ADE0(v109, v115, type metadata accessor for Proto_Value);
        }
        sub_1C3F8B288(v91, type metadata accessor for Proto_TaggedValue);
        type metadata accessor for CRDecoder(0);
        swift_allocObject();
        swift_retain();
        uint64_t v110 = sub_1C3F974B0(v107, v84);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v93 + 8) + 8) + 8))(v110, v86);
        if (v85) {
          goto LABEL_33;
        }
        swift_release();
        swift_release();
        uint64_t v111 = v119;
        swift_storeEnumTagMultiPayload();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v118 + 32))(v120, v87, v111);
      }
      sub_1C3F8B288(v83, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      uint64_t v84 = v133;
      uint64_t v85 = v134;
      uint64_t v86 = v117;
    }
    uint64_t v92 = v131;
    uint64_t v91 = v121;
    sub_1C4496888();
    uint64_t v103 = *(int *)(v139 + 20);
    uint64_t v93 = v122;
    if (qword_1EA39AF70 != -1) {
      swift_once();
    }
    *(void *)(v91 + v103) = qword_1EA39AF60;
    swift_retain();
    goto LABEL_39;
  }
  uint64_t v65 = *(void *)(v53 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  uint64_t v66 = v128;
  sub_1C3F970C4(v65, v128, &qword_1EBBC0540);
  uint64_t v67 = v131;
  uint64_t result = v61(v66, 1, v131);
  if (result == 1)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v68 = v66;
  uint64_t v69 = v138;
  sub_1C3F8ADE0(v68, v138, type metadata accessor for Proto_Value);
  uint64_t v70 = *(void *)(v69 + *(int *)(v67 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v71 = v70;
  uint64_t v72 = v125;
  sub_1C3F970C4(v71, v125, &qword_1EBBBF8A0);
  if (v58(v72, 1, v57) == 1)
  {
    sub_1C3F962E0(v72, &qword_1EBBBF8A0);
    uint64_t v73 = v133;
    uint64_t v74 = v134;
    uint64_t v75 = v131;
    uint64_t v76 = v127;
LABEL_24:
    sub_1C4496888();
    uint64_t v94 = *(int *)(v139 + 20);
    uint64_t v89 = (uint64_t)v126;
    if (qword_1EA39AF70 != -1) {
      swift_once();
    }
    *(void *)(v76 + v94) = qword_1EA39AF60;
    swift_retain();
    goto LABEL_27;
  }
  int v88 = swift_getEnumCaseMultiPayload();
  uint64_t v76 = v127;
  if (v88 != 11)
  {
    sub_1C3F8B288(v72, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    uint64_t v73 = v133;
    uint64_t v74 = v134;
    uint64_t v75 = v131;
    goto LABEL_24;
  }
  sub_1C3F8ADE0(v72, v127, type metadata accessor for Proto_TaggedValue);
  uint64_t v73 = v133;
  uint64_t v74 = v134;
  uint64_t v75 = v131;
  uint64_t v89 = (uint64_t)v126;
LABEL_27:
  sub_1C3F8B288(v138, type metadata accessor for Proto_Value);
  uint64_t v95 = *(void *)(v76 + *(int *)(v139 + 20))
      + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  uint64_t v96 = v95;
  uint64_t v97 = v130;
  sub_1C3F970C4(v96, v130, &qword_1EBBC0540);
  if (v61(v97, 1, v75) == 1)
  {
    sub_1C4496888();
    uint64_t v98 = *(int *)(v75 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)(v89 + v98) = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0(v130, &qword_1EBBC0540);
  }
  else
  {
    sub_1C3F8ADE0(v97, v89, type metadata accessor for Proto_Value);
  }
  sub_1C3F8B288(v76, type metadata accessor for Proto_TaggedValue);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v99 = sub_1C3F974B0(v89, v73);
  swift_release();
  AnyCRValue.init(from:)(v99, &v140);
  if (v74)
  {
LABEL_33:
    swift_release();
    swift_setDeallocating();
    return swift_release();
  }
  swift_release();
  swift_release();
  uint64_t v100 = v140;
  uint64_t v101 = v112;
  void *v112 = v64;
  v101[1] = v100;
  uint64_t v102 = v119;
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v118 + 32))(v120, v101, v102);
}

uint64_t TaggedValue_1.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v115 = (uint64_t)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v114 = (char *)&v105 - v7;
  uint64_t v124 = type metadata accessor for Proto_Value(0);
  uint64_t v113 = *(void *)(v124 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v124);
  uint64_t v119 = (uint64_t)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v118 = (uint64_t)&v105 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v109 = (uint64_t)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v117 = (uint64_t)&v105 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v110 = (uint64_t)&v105 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v116 = (uint64_t)&v105 - v18;
  uint64_t v123 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v19 = MEMORY[0x1F4188790](v123);
  uint64_t v111 = (uint64_t)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v120 = (uint64_t)&v105 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v112 = (uint64_t)&v105 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v105 - v26;
  uint64_t v28 = *(void *)(a2 + 16);
  uint64_t v121 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v30 = (char *)&v105 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)(a2 + 24);
  uint64_t v32 = type metadata accessor for TaggedValue_1.TaggedEnum();
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v35 = (uint64_t *)((char *)&v105 - v34);
  uint64_t v36 = v125;
  uint64_t result = sub_1C3F6DD10();
  if (v36) {
    return result;
  }
  uint64_t v105 = v27;
  uint64_t v107 = (uint64_t)v30;
  uint64_t v108 = v28;
  uint64_t v106 = a1;
  uint64_t v125 = result;
  (*(void (**)(uint64_t *, unsigned int (*)(uint64_t, uint64_t, uint64_t), uint64_t))(v33 + 16))(v35, v122, v32);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v38 = v35[1];
    uint64_t v121 = *v35;
    uint64_t v122 = 0;
    uint64_t v39 = v125 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
    swift_beginAccess();
    uint64_t v40 = *(void *)(v39 + *(int *)(v124 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v41 = v117;
    sub_1C3F970C4(v40, v117, &qword_1EBBBF8A0);
    uint64_t v42 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48);
    if (v43(v41, 1, v42) == 1)
    {
      swift_retain();
      sub_1C3F962E0(v41, &qword_1EBBBF8A0);
      uint64_t v44 = v106;
      uint64_t v45 = v120;
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v45 = v120;
      if (EnumCaseMultiPayload == 11)
      {
        sub_1C3F8ADE0(v41, v120, type metadata accessor for Proto_TaggedValue);
        swift_retain();
        uint64_t v56 = v123;
        uint64_t v44 = v106;
        goto LABEL_15;
      }
      swift_retain();
      sub_1C3F8B288(v41, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      uint64_t v44 = v106;
    }
    sub_1C4496888();
    uint64_t v56 = v123;
    uint64_t v60 = v45;
    uint64_t v61 = *(int *)(v123 + 20);
    if (qword_1EA39AF70 != -1)
    {
      swift_once();
      uint64_t v56 = v123;
    }
    *(void *)(v60 + v61) = qword_1EA39AF60;
    swift_retain();
    uint64_t v45 = v60;
LABEL_15:
    uint64_t v62 = *(int *)(v56 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_TaggedValue._StorageClass(0);
      swift_allocObject();
      uint64_t v63 = swift_retain();
      uint64_t v64 = sub_1C4400A40(v63);
      uint64_t v45 = v120;
      *(void *)(v120 + v62) = v64;
      swift_release();
    }
    uint64_t v65 = v45;
    uint64_t v66 = *(void *)(v45 + v62);
    swift_beginAccess();
    *(void *)(v66 + 16) = v121;
    sub_1C43F0970(v65);
    swift_endAccess();
    swift_retain();
    uint64_t v67 = swift_retain();
    uint64_t v68 = v122;
    sub_1C400B83C(v67, v38, v44, v119);
    if (v68)
    {
      swift_release();
      return swift_release();
    }
    swift_beginAccess();
    uint64_t v69 = v124;
    uint64_t v70 = *(void *)(v39 + *(int *)(v124 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v71 = v70;
    uint64_t v72 = v109;
    sub_1C3F970C4(v71, v109, &qword_1EBBBF8A0);
    if (v43(v72, 1, v42) == 1)
    {
      sub_1C3F962E0(v72, &qword_1EBBBF8A0);
      uint64_t v73 = (uint64_t)v114;
      uint64_t v74 = v113;
      uint64_t v75 = v111;
    }
    else
    {
      int v89 = swift_getEnumCaseMultiPayload();
      uint64_t v74 = v113;
      uint64_t v75 = v111;
      if (v89 == 11)
      {
        sub_1C3F8ADE0(v72, v111, type metadata accessor for Proto_TaggedValue);
        uint64_t v73 = (uint64_t)v114;
        uint64_t v90 = v123;
LABEL_37:
        uint64_t v94 = *(int *)(v90 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          uint64_t v95 = swift_retain();
          *(void *)(v75 + v94) = sub_1C4400A40(v95);
          swift_release();
        }
        uint64_t v96 = *(void *)(v75 + v94);
        sub_1C3F8ADE0(v119, v73, type metadata accessor for Proto_Value);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56))(v73, 0, 1, v69);
        uint64_t v97 = v73;
        uint64_t v98 = v115;
        sub_1C4124B88(v97, v115);
        uint64_t v99 = v96
            + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
        swift_beginAccess();
        swift_retain();
        sub_1C4124BF0(v98, v99);
        swift_endAccess();
        swift_release();
        sub_1C43F0970(v75);
        swift_endAccess();
        swift_release();
        return swift_release();
      }
      sub_1C3F8B288(v72, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      uint64_t v73 = (uint64_t)v114;
    }
    sub_1C4496888();
    uint64_t v90 = v123;
    uint64_t v93 = *(int *)(v123 + 20);
    if (qword_1EA39AF70 != -1)
    {
      swift_once();
      uint64_t v90 = v123;
    }
    *(void *)(v75 + v93) = qword_1EA39AF60;
    swift_retain();
    goto LABEL_37;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v121 + 32))(v107, v35, v108);
  uint64_t v46 = v125 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
  swift_beginAccess();
  uint64_t v47 = *(void *)(v46 + *(int *)(v124 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v48 = v116;
  sub_1C3F970C4(v47, v116, &qword_1EBBBF8A0);
  uint64_t v49 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  uint64_t v120 = v50 + 48;
  unsigned int v52 = v51(v48, 1, v49);
  uint64_t v122 = v51;
  if (v52 == 1)
  {
    swift_retain();
    sub_1C3F962E0(v48, &qword_1EBBBF8A0);
    uint64_t v53 = v118;
    uint64_t v54 = v31;
  }
  else
  {
    uint64_t v57 = v48;
    uint64_t v54 = v31;
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      uint64_t v58 = (uint64_t)v105;
      sub_1C3F8ADE0(v57, (uint64_t)v105, type metadata accessor for Proto_TaggedValue);
      swift_retain();
      uint64_t v59 = v123;
      uint64_t v53 = v118;
      goto LABEL_25;
    }
    swift_retain();
    sub_1C3F8B288(v57, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    uint64_t v53 = v118;
  }
  uint64_t v58 = (uint64_t)v105;
  sub_1C4496888();
  uint64_t v59 = v123;
  uint64_t v76 = *(int *)(v123 + 20);
  if (qword_1EA39AF70 != -1)
  {
    swift_once();
    uint64_t v59 = v123;
  }
  *(void *)(v58 + v76) = qword_1EA39AF60;
  swift_retain();
LABEL_25:
  uint64_t v77 = *(int *)(v59 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    uint64_t v78 = swift_retain();
    *(void *)(v58 + v77) = sub_1C4400A40(v78);
    swift_release();
  }
  uint64_t v79 = *(void *)(v58 + v77);
  swift_beginAccess();
  *(void *)(v79 + 16) = 0;
  sub_1C43F0970(v58);
  uint64_t v80 = swift_endAccess();
  MEMORY[0x1F4188790](v80);
  *(&v105 - 4) = (char *)v108;
  *(&v105 - 3) = (char *)v54;
  uint64_t v81 = v106;
  *(&v105 - 2) = (char *)v107;
  *(&v105 - 1) = (char *)v81;
  sub_1C3F6DC00((void (*)(uint64_t))sub_1C4018244, v53);
  swift_beginAccess();
  uint64_t v82 = *(void *)(v46 + *(int *)(v124 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v83 = v82;
  uint64_t v84 = v110;
  sub_1C3F970C4(v83, v110, &qword_1EBBBF8A0);
  if (v122(v84, 1, v49) == 1)
  {
    sub_1C3F962E0(v84, &qword_1EBBBF8A0);
    uint64_t v85 = v115;
    uint64_t v86 = (uint64_t)v114;
    uint64_t v87 = v113;
    uint64_t v88 = v112;
LABEL_41:
    sub_1C4496888();
    uint64_t v92 = v123;
    uint64_t v100 = *(int *)(v123 + 20);
    if (qword_1EA39AF70 != -1)
    {
      swift_once();
      uint64_t v92 = v123;
    }
    *(void *)(v88 + v100) = qword_1EA39AF60;
    swift_retain();
    goto LABEL_44;
  }
  int v91 = swift_getEnumCaseMultiPayload();
  uint64_t v86 = (uint64_t)v114;
  uint64_t v87 = v113;
  uint64_t v88 = v112;
  if (v91 != 11)
  {
    sub_1C3F8B288(v84, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    uint64_t v85 = v115;
    goto LABEL_41;
  }
  sub_1C3F8ADE0(v84, v112, type metadata accessor for Proto_TaggedValue);
  uint64_t v85 = v115;
  uint64_t v92 = v123;
LABEL_44:
  uint64_t v101 = *(int *)(v92 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    uint64_t v102 = swift_retain();
    *(void *)(v88 + v101) = sub_1C4400A40(v102);
    swift_release();
  }
  uint64_t v103 = *(void *)(v88 + v101);
  sub_1C3F8ADE0(v118, v86, type metadata accessor for Proto_Value);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v87 + 56))(v86, 0, 1, v124);
  sub_1C4124B88(v86, v85);
  uint64_t v104 = v103
       + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  swift_retain();
  sub_1C4124BF0(v85, v104);
  swift_endAccess();
  swift_release();
  sub_1C43F0970(v88);
  swift_endAccess();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v121 + 8))(v107, v108);
}

void TaggedValue_1.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1C41927D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return TaggedValue_1.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_1C41927F8(uint64_t a1, uint64_t a2)
{
  return TaggedValue_1.encode(to:)(a1, a2);
}

void sub_1C4192810(unsigned char *a1@<X8>)
{
}

uint64_t TaggedValue_1<>.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v14[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaggedValue_1.TaggedEnum();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v14[-1] - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v14[-1] - v9, v3, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(void *__return_ptr))(**((void **)v10 + 1) + 80))(v15);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DE70);
    swift_dynamicCast();
    __swift_project_boxed_opaque_existential_1(v14, v14[3]);
    sub_1C4497068();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    sub_1C4497068();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_1C4192A88(uint64_t a1, uint64_t a2)
{
  return TaggedValue_1<>.encode(to:)(a1, a2);
}

uint64_t TaggedValue_2.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v165 = a6;
  uint64_t v158 = a2;
  uint64_t v177 = a2;
  uint64_t v178 = a3;
  uint64_t v159 = a3;
  uint64_t v156 = a4;
  uint64_t v179 = a4;
  uint64_t v180 = a5;
  uint64_t v157 = a5;
  uint64_t v164 = type metadata accessor for TaggedValue_2.TaggedEnum();
  uint64_t v163 = *(void *)(v164 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v164);
  uint64_t v142 = (void **)((char *)&v142 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v151 = (char *)&v142 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v150 = (char *)&v142 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v144 = (uint64_t)&v142 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v154 = (uint64_t)&v142 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v153 = (uint64_t)&v142 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v174 = (uint64_t)&v142 - v19;
  uint64_t v176 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v20 = MEMORY[0x1F4188790](v176);
  uint64_t v149 = (uint64_t)&v142 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v155 = (uint64_t)&v142 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v147 = (uint64_t)&v142 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v175 = (char *)&v142 - v26;
  uint64_t v27 = type metadata accessor for Proto_Value(0);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v148 = (uint64_t)&v142 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v168 = (uint64_t)&v142 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v146 = (uint64_t)&v142 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v170 = (uint64_t)&v142 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v145 = (uint64_t)&v142 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v169 = (uint64_t)&v142 - v40;
  MEMORY[0x1F4188790](v39);
  uint64_t v173 = (uint64_t)&v142 - v41;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v43 = MEMORY[0x1F4188790](v42 - 8);
  uint64_t v143 = (char *)&v142 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v162 = (uint64_t)&v142 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v166 = (uint64_t)&v142 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v161 = (uint64_t)&v142 - v50;
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v152 = (char *)&v142 - v52;
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  uint64_t v160 = (uint64_t)&v142 - v54;
  uint64_t v55 = MEMORY[0x1F4188790](v53);
  uint64_t v57 = (char *)&v142 - v56;
  MEMORY[0x1F4188790](v55);
  uint64_t v59 = (char *)&v142 - v58;
  uint64_t v60 = a1;
  uint64_t v61 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v61, (uint64_t)v59, &qword_1EBBC0540);
  uint64_t v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  uint64_t v63 = v28 + 48;
  uint64_t v62 = v64;
  unsigned int v65 = v64(v59, 1, v27);
  sub_1C3F962E0((uint64_t)v59, &qword_1EBBC0540);
  if (v65 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v66 = 0xD000000000000017;
    *(void *)(v66 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v66 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  uint64_t inited = swift_initStackObject();
  uint64_t v171 = v60;
  uint64_t v69 = inited;
  *(void *)(inited + 16) = v60;
  sub_1C3F970C4(v61, (uint64_t)v57, &qword_1EBBC0540);
  uint64_t v167 = v63;
  uint64_t result = v62(v57, 1, v27);
  if (result == 1)
  {
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  uint64_t v70 = v173;
  sub_1C3F8ADE0((uint64_t)v57, v173, type metadata accessor for Proto_Value);
  uint64_t v71 = *(void *)(v70 + *(int *)(v27 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v72 = v174;
  sub_1C3F970C4(v71, v174, &qword_1EBBBF8A0);
  uint64_t v73 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 48);
  int v75 = v74(v72, 1, v73);
  uint64_t v76 = (uint64_t)v175;
  if (v75 == 1)
  {
    swift_retain();
    sub_1C3F962E0(v72, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      sub_1C3F8ADE0(v72, v76, type metadata accessor for Proto_TaggedValue);
      goto LABEL_12;
    }
    swift_retain();
    sub_1C3F8B288(v72, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v77 = *(int *)(v176 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)(v76 + v77) = qword_1EA39AF60;
LABEL_12:
  swift_retain();
  sub_1C3F8B288(v70, type metadata accessor for Proto_Value);
  uint64_t v78 = *(void *)(v76 + *(int *)(v176 + 20));
  swift_beginAccess();
  uint64_t v79 = v76;
  uint64_t v80 = *(void *)(v78 + 16);
  sub_1C3F8B288(v79, type metadata accessor for Proto_TaggedValue);
  if (!v80)
  {
    uint64_t v92 = *(void *)(v69 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
    swift_beginAccess();
    uint64_t v93 = v160;
    sub_1C3F970C4(v92, v160, &qword_1EBBC0540);
    uint64_t result = v62((char *)v93, 1, v27);
    if (result == 1)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    uint64_t v94 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v62;
    uint64_t v95 = v169;
    sub_1C3F8ADE0(v93, v169, type metadata accessor for Proto_Value);
    uint64_t v96 = *(void *)(v95 + *(int *)(v27 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v97 = v96;
    uint64_t v98 = v153;
    sub_1C3F970C4(v97, v153, &qword_1EBBBF8A0);
    if (v74(v98, 1, v73) == 1)
    {
      sub_1C3F962E0(v98, &qword_1EBBBF8A0);
      uint64_t v99 = v171;
      uint64_t v100 = v172;
      uint64_t v101 = v27;
      int v91 = v150;
      uint64_t v102 = v147;
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v99 = v171;
      uint64_t v100 = v172;
      int v91 = v150;
      uint64_t v102 = v147;
      if (EnumCaseMultiPayload == 11)
      {
        sub_1C3F8ADE0(v98, v147, type metadata accessor for Proto_TaggedValue);
        uint64_t v101 = v27;
        uint64_t v118 = (uint64_t)v152;
        goto LABEL_44;
      }
      sub_1C3F8B288(v98, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      uint64_t v101 = v27;
    }
    sub_1C4496888();
    uint64_t v128 = *(int *)(v176 + 20);
    uint64_t v118 = (uint64_t)v152;
    if (qword_1EA39AF70 != -1) {
      swift_once();
    }
    *(void *)(v102 + v128) = qword_1EA39AF60;
    swift_retain();
LABEL_44:
    sub_1C3F8B288(v169, type metadata accessor for Proto_Value);
    uint64_t v129 = *(void *)(v102 + *(int *)(v176 + 20))
         + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
    swift_beginAccess();
    sub_1C3F970C4(v129, v118, &qword_1EBBC0540);
    if (v94(v118, 1, v101) == 1)
    {
      uint64_t v130 = v145;
      sub_1C4496888();
      uint64_t v131 = *(int *)(v101 + 20);
      if (qword_1EBBBF8C8 != -1) {
        swift_once();
      }
      *(void *)(v130 + v131) = qword_1EBBBF8B8;
      swift_retain();
      sub_1C3F962E0(v118, &qword_1EBBC0540);
    }
    else
    {
      uint64_t v130 = v145;
      sub_1C3F8ADE0(v118, v145, type metadata accessor for Proto_Value);
    }
    sub_1C3F8B288(v102, type metadata accessor for Proto_TaggedValue);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    swift_retain();
    uint64_t v132 = sub_1C3F974B0(v130, v99);
    swift_release();
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v156 + 8) + 8) + 8))(v132);
    if (!v100) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (v80 == 1)
  {
    uint64_t v81 = *(void *)(v69 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
    swift_beginAccess();
    uint64_t v82 = v161;
    sub_1C3F970C4(v81, v161, &qword_1EBBC0540);
    uint64_t result = v62((char *)v82, 1, v27);
    if (result != 1)
    {
      uint64_t v83 = v82;
      uint64_t v84 = v170;
      sub_1C3F8ADE0(v83, v170, type metadata accessor for Proto_Value);
      uint64_t v85 = *(void *)(v84 + *(int *)(v27 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v86 = v85;
      uint64_t v87 = v154;
      sub_1C3F970C4(v86, v154, &qword_1EBBBF8A0);
      if (v74(v87, 1, v73) == 1)
      {
        sub_1C3F962E0(v87, &qword_1EBBBF8A0);
        uint64_t v88 = v171;
        uint64_t v89 = v172;
        uint64_t v90 = v27;
        int v91 = v151;
      }
      else
      {
        int v114 = swift_getEnumCaseMultiPayload();
        uint64_t v88 = v171;
        uint64_t v89 = v172;
        int v91 = v151;
        if (v114 == 11)
        {
          uint64_t v115 = v155;
          sub_1C3F8ADE0(v87, v155, type metadata accessor for Proto_TaggedValue);
          uint64_t v90 = v27;
          uint64_t v116 = v115;
          goto LABEL_33;
        }
        sub_1C3F8B288(v87, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        uint64_t v90 = v27;
      }
      uint64_t v116 = v155;
      sub_1C4496888();
      uint64_t v121 = *(int *)(v176 + 20);
      if (qword_1EA39AF70 != -1) {
        swift_once();
      }
      *(void *)(v116 + v121) = qword_1EA39AF60;
      swift_retain();
LABEL_33:
      sub_1C3F8B288(v170, type metadata accessor for Proto_Value);
      uint64_t v122 = *(void *)(v116 + *(int *)(v176 + 20))
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      uint64_t v123 = v122;
      uint64_t v124 = v166;
      sub_1C3F970C4(v123, v166, &qword_1EBBC0540);
      if (v62((char *)v124, 1, v90) == 1)
      {
        uint64_t v125 = v146;
        sub_1C4496888();
        uint64_t v126 = *(int *)(v90 + 20);
        if (qword_1EBBBF8C8 != -1) {
          swift_once();
        }
        *(void *)(v125 + v126) = qword_1EBBBF8B8;
        swift_retain();
        sub_1C3F962E0(v166, &qword_1EBBC0540);
      }
      else
      {
        uint64_t v125 = v146;
        sub_1C3F8ADE0(v124, v146, type metadata accessor for Proto_Value);
      }
      sub_1C3F8B288(v116, type metadata accessor for Proto_TaggedValue);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      uint64_t v127 = sub_1C3F974B0(v125, v88);
      swift_release();
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v157 + 8) + 8) + 8))(v127);
      if (!v89)
      {
LABEL_51:
        swift_release();
        swift_release();
        uint64_t v133 = v164;
        swift_storeEnumTagMultiPayload();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v163 + 32))(v165, v91, v133);
      }
LABEL_50:
      swift_release();
      swift_setDeallocating();
      return swift_release();
    }
    goto LABEL_65;
  }
  uint64_t v103 = *(void *)(v69 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  uint64_t v104 = v162;
  sub_1C3F970C4(v103, v162, &qword_1EBBC0540);
  uint64_t result = v62((char *)v104, 1, v27);
  if (result == 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  uint64_t v105 = v104;
  uint64_t v106 = v168;
  sub_1C3F8ADE0(v105, v168, type metadata accessor for Proto_Value);
  uint64_t v107 = *(void *)(v106 + *(int *)(v27 + 20))
       + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v108 = v107;
  uint64_t v109 = v144;
  sub_1C3F970C4(v108, v144, &qword_1EBBBF8A0);
  if (v74(v109, 1, v73) == 1)
  {
    sub_1C3F962E0(v109, &qword_1EBBBF8A0);
    uint64_t v110 = v171;
    uint64_t v111 = v172;
    uint64_t v112 = v27;
    uint64_t v113 = v149;
LABEL_53:
    sub_1C4496888();
    uint64_t v134 = *(int *)(v176 + 20);
    uint64_t v120 = (uint64_t)v143;
    if (qword_1EA39AF70 != -1) {
      swift_once();
    }
    *(void *)(v113 + v134) = qword_1EA39AF60;
    swift_retain();
    goto LABEL_56;
  }
  int v119 = swift_getEnumCaseMultiPayload();
  uint64_t v110 = v171;
  uint64_t v111 = v172;
  uint64_t v113 = v149;
  if (v119 != 11)
  {
    sub_1C3F8B288(v109, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    uint64_t v112 = v27;
    goto LABEL_53;
  }
  sub_1C3F8ADE0(v109, v149, type metadata accessor for Proto_TaggedValue);
  uint64_t v112 = v27;
  uint64_t v120 = (uint64_t)v143;
LABEL_56:
  sub_1C3F8B288(v168, type metadata accessor for Proto_Value);
  uint64_t v135 = *(void *)(v113 + *(int *)(v176 + 20))
       + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  sub_1C3F970C4(v135, v120, &qword_1EBBC0540);
  if (v62((char *)v120, 1, v112) == 1)
  {
    uint64_t v136 = v148;
    sub_1C4496888();
    uint64_t v137 = *(int *)(v112 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)(v136 + v137) = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0(v120, &qword_1EBBC0540);
  }
  else
  {
    uint64_t v136 = v148;
    sub_1C3F8ADE0(v120, v148, type metadata accessor for Proto_Value);
  }
  sub_1C3F8B288(v113, type metadata accessor for Proto_TaggedValue);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v138 = sub_1C3F974B0(v136, v110);
  swift_release();
  AnyCRValue.init(from:)(v138, &v181);
  if (v111) {
    goto LABEL_50;
  }
  swift_release();
  swift_release();
  uint64_t v139 = v181;
  uint64_t v140 = v142;
  *uint64_t v142 = v80;
  v140[1] = v139;
  uint64_t v141 = v164;
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v163 + 32))(v165, v140, v141);
}

uint64_t TaggedValue_2.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[3];
  uint64_t v179 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v180 = (char *)&v154 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v170 = (char *)&v154 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v172 = (uint64_t)&v154 - v9;
  uint64_t v184 = type metadata accessor for Proto_Value(0);
  uint64_t v171 = *(void *)(v184 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v184);
  uint64_t v174 = (uint64_t)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v175 = (uint64_t)&v154 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v173 = (uint64_t)&v154 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v162 = (uint64_t)&v154 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v169 = (uint64_t)&v154 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v163 = (uint64_t)&v154 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v168 = (uint64_t)&v154 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v161 = (uint64_t)&v154 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v167 = (uint64_t)&v154 - v26;
  uint64_t v183 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v27 = MEMORY[0x1F4188790](v183);
  uint64_t v160 = (uint64_t)&v154 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v176 = (uint64_t)&v154 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v165 = (uint64_t)&v154 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v177 = (uint64_t)&v154 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v164 = (uint64_t)&v154 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v166 = (uint64_t)&v154 - v38;
  uint64_t v39 = a2[2];
  uint64_t v178 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 - 8);
  MEMORY[0x1F4188790](v37);
  uint64_t v41 = (char *)&v154 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = a2[4];
  uint64_t v42 = a2[5];
  uint64_t v185 = v39;
  uint64_t v186 = v4;
  uint64_t v181 = v4;
  uint64_t v187 = v43;
  uint64_t v188 = v42;
  uint64_t v44 = type metadata accessor for TaggedValue_2.TaggedEnum();
  uint64_t v45 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v47 = (uint64_t *)((char *)&v154 - v46);
  uint64_t v48 = v189;
  uint64_t result = sub_1C3F6DD10();
  if (v48) {
    return result;
  }
  uint64_t v156 = v43;
  uint64_t v155 = v42;
  uint64_t v157 = v41;
  uint64_t v159 = v39;
  uint64_t v158 = a1;
  uint64_t v189 = result;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v45 + 16))(v47, v182, v44);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v51 = v181;
      (*(void (**)(char *, uint64_t *, uint64_t))(v179 + 32))(v180, v47, v181);
      uint64_t v52 = v189 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v53 = *(void *)(v52 + *(int *)(v184 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v54 = v168;
      sub_1C3F970C4(v53, v168, &qword_1EBBBF8A0);
      uint64_t v55 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 48);
      int v57 = v56(v54, 1, v55);
      uint64_t v178 = v56;
      if (v57 == 1)
      {
        swift_retain();
        sub_1C3F962E0(v54, &qword_1EBBBF8A0);
        uint64_t v58 = v155;
      }
      else
      {
        int v74 = swift_getEnumCaseMultiPayload();
        uint64_t v58 = v155;
        if (v74 == 11)
        {
          uint64_t v75 = v54;
          uint64_t v76 = v177;
          sub_1C3F8ADE0(v75, v177, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v77 = v183;
          goto LABEL_20;
        }
        swift_retain();
        sub_1C3F8B288(v54, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v76 = v177;
      sub_1C4496888();
      uint64_t v77 = v183;
      uint64_t v82 = *(int *)(v183 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v77 = v183;
      }
      *(void *)(v76 + v82) = qword_1EA39AF60;
      swift_retain();
LABEL_20:
      uint64_t v83 = *(int *)(v77 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v84 = swift_retain();
        uint64_t v85 = sub_1C4400A40(v84);
        uint64_t v76 = v177;
        *(void *)(v177 + v83) = v85;
        swift_release();
      }
      uint64_t v86 = *(void *)(v76 + v83);
      swift_beginAccess();
      *(void *)(v86 + 16) = 1;
      sub_1C43F0970(v76);
      uint64_t v87 = swift_endAccess();
      MEMORY[0x1F4188790](v87);
      *(&v154 - 6) = v159;
      *(&v154 - 5) = v51;
      *(&v154 - 4) = v156;
      *(&v154 - 3) = v58;
      uint64_t v88 = v158;
      *(&v154 - 2) = (uint64_t)v180;
      *(&v154 - 1) = v88;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C24F0, v175);
      uint64_t v182 = 0;
      swift_beginAccess();
      uint64_t v89 = v184;
      uint64_t v90 = *(void *)(v52 + *(int *)(v184 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v91 = v163;
      sub_1C3F970C4(v90, v163, &qword_1EBBBF8A0);
      int v92 = v178(v91, 1, v55);
      uint64_t v93 = v179;
      if (v92 == 1)
      {
        sub_1C3F962E0(v91, &qword_1EBBBF8A0);
        uint64_t v94 = (uint64_t)v170;
        uint64_t v95 = v172;
        uint64_t v96 = v175;
      }
      else
      {
        int v128 = swift_getEnumCaseMultiPayload();
        uint64_t v94 = (uint64_t)v170;
        uint64_t v95 = v172;
        uint64_t v96 = v175;
        if (v128 == 11)
        {
          uint64_t v129 = v165;
          sub_1C3F8ADE0(v91, v165, type metadata accessor for Proto_TaggedValue);
          uint64_t v130 = v183;
LABEL_52:
          uint64_t v136 = *(int *)(v130 + 20);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for Proto_TaggedValue._StorageClass(0);
            swift_allocObject();
            uint64_t v137 = swift_retain();
            uint64_t v129 = v165;
            uint64_t v138 = sub_1C4400A40(v137);
            uint64_t v96 = v175;
            *(void *)(v129 + v136) = v138;
            swift_release();
          }
          uint64_t v139 = *(void *)(v129 + v136);
          sub_1C3F8ADE0(v96, v95, type metadata accessor for Proto_Value);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v171 + 56))(v95, 0, 1, v89);
          sub_1C4124B88(v95, v94);
          uint64_t v140 = v139
               + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
          swift_beginAccess();
          swift_retain();
          sub_1C4124BF0(v94, v140);
          swift_endAccess();
          swift_release();
          sub_1C43F0970(v129);
          swift_endAccess();
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v180, v181);
        }
        sub_1C3F8B288(v91, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v129 = v165;
      sub_1C4496888();
      uint64_t v130 = v183;
      uint64_t v135 = *(int *)(v183 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v130 = v183;
      }
      *(void *)(v129 + v135) = qword_1EA39AF60;
      swift_retain();
      goto LABEL_52;
    }
    uint64_t v182 = 0;
    uint64_t v67 = *v47;
    uint64_t v66 = v47[1];
    uint64_t v68 = v189 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
    swift_beginAccess();
    uint64_t v69 = *(void *)(v68 + *(int *)(v184 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v70 = v169;
    sub_1C3F970C4(v69, v169, &qword_1EBBBF8A0);
    uint64_t v71 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    uint64_t v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 48);
    if (v72(v70, 1, v71) == 1)
    {
      swift_retain();
      sub_1C3F962E0(v70, &qword_1EBBBF8A0);
      uint64_t v73 = v176;
    }
    else
    {
      int v80 = swift_getEnumCaseMultiPayload();
      uint64_t v73 = v176;
      if (v80 == 11)
      {
        sub_1C3F8ADE0(v70, v176, type metadata accessor for Proto_TaggedValue);
        swift_retain();
        uint64_t v81 = v183;
        goto LABEL_36;
      }
      swift_retain();
      sub_1C3F8B288(v70, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1C4496888();
    uint64_t v81 = v183;
    uint64_t v112 = v73;
    uint64_t v113 = *(int *)(v183 + 20);
    if (qword_1EA39AF70 != -1)
    {
      swift_once();
      uint64_t v81 = v183;
    }
    *(void *)(v112 + v113) = qword_1EA39AF60;
    swift_retain();
    uint64_t v73 = v112;
LABEL_36:
    uint64_t v114 = *(int *)(v81 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_TaggedValue._StorageClass(0);
      swift_allocObject();
      uint64_t v115 = swift_retain();
      uint64_t v116 = sub_1C4400A40(v115);
      uint64_t v73 = v176;
      *(void *)(v176 + v114) = v116;
      swift_release();
    }
    uint64_t v117 = v73;
    uint64_t v118 = *(void *)(v73 + v114);
    swift_beginAccess();
    *(void *)(v118 + 16) = v67;
    sub_1C43F0970(v117);
    swift_endAccess();
    swift_retain();
    uint64_t v119 = swift_retain();
    uint64_t v120 = v182;
    sub_1C400B83C(v119, v66, v119, v174);
    if (v120)
    {
      swift_release();
      return swift_release();
    }
    swift_beginAccess();
    uint64_t v121 = v184;
    uint64_t v122 = *(void *)(v68 + *(int *)(v184 + 20))
         + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v123 = v122;
    uint64_t v124 = v162;
    sub_1C3F970C4(v123, v162, &qword_1EBBBF8A0);
    if (v72(v124, 1, v71) == 1)
    {
      sub_1C3F962E0(v124, &qword_1EBBBF8A0);
      uint64_t v125 = (uint64_t)v170;
      uint64_t v126 = v171;
      uint64_t v127 = v160;
    }
    else
    {
      int v133 = swift_getEnumCaseMultiPayload();
      uint64_t v126 = v171;
      uint64_t v127 = v160;
      if (v133 == 11)
      {
        sub_1C3F8ADE0(v124, v160, type metadata accessor for Proto_TaggedValue);
        uint64_t v125 = (uint64_t)v170;
        uint64_t v134 = v183;
LABEL_66:
        uint64_t v149 = *(int *)(v134 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          uint64_t v150 = swift_retain();
          *(void *)(v127 + v149) = sub_1C4400A40(v150);
          swift_release();
        }
        uint64_t v151 = *(void *)(v127 + v149);
        uint64_t v152 = v172;
        sub_1C3F8ADE0(v174, v172, type metadata accessor for Proto_Value);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v126 + 56))(v152, 0, 1, v121);
        sub_1C4124B88(v152, v125);
        uint64_t v153 = v151
             + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
        swift_beginAccess();
        swift_retain();
        sub_1C4124BF0(v125, v153);
        swift_endAccess();
        swift_release();
        sub_1C43F0970(v127);
        swift_endAccess();
        swift_release();
        return swift_release();
      }
      sub_1C3F8B288(v124, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      uint64_t v125 = (uint64_t)v170;
    }
    sub_1C4496888();
    uint64_t v134 = v183;
    uint64_t v148 = *(int *)(v183 + 20);
    if (qword_1EA39AF70 != -1)
    {
      swift_once();
      uint64_t v134 = v183;
    }
    *(void *)(v127 + v148) = qword_1EA39AF60;
    swift_retain();
    goto LABEL_66;
  }
  (*((void (**)(char *, uint64_t *, uint64_t))v178 + 4))(v157, v47, v159);
  uint64_t v59 = v189 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
  swift_beginAccess();
  uint64_t v60 = *(void *)(v59 + *(int *)(v184 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v61 = v167;
  sub_1C3F970C4(v60, v167, &qword_1EBBBF8A0);
  uint64_t v62 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 48);
  int v64 = v63(v61, 1, v62);
  uint64_t v65 = v156;
  if (v64 == 1)
  {
    swift_retain();
    sub_1C3F962E0(v61, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      uint64_t v78 = v166;
      sub_1C3F8ADE0(v61, v166, type metadata accessor for Proto_TaggedValue);
      swift_retain();
      uint64_t v79 = v183;
      goto LABEL_28;
    }
    swift_retain();
    sub_1C3F8B288(v61, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  uint64_t v78 = v166;
  sub_1C4496888();
  uint64_t v79 = v183;
  uint64_t v97 = *(int *)(v183 + 20);
  if (qword_1EA39AF70 != -1)
  {
    swift_once();
    uint64_t v79 = v183;
  }
  *(void *)(v78 + v97) = qword_1EA39AF60;
  swift_retain();
LABEL_28:
  uint64_t v98 = *(int *)(v79 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    uint64_t v99 = swift_retain();
    *(void *)(v78 + v98) = sub_1C4400A40(v99);
    swift_release();
  }
  uint64_t v100 = *(void *)(v78 + v98);
  swift_beginAccess();
  *(void *)(v100 + 16) = 0;
  sub_1C43F0970(v78);
  uint64_t v101 = swift_endAccess();
  MEMORY[0x1F4188790](v101);
  uint64_t v102 = v181;
  *(&v154 - 6) = v159;
  *(&v154 - 5) = v102;
  uint64_t v103 = v155;
  *(&v154 - 4) = v65;
  *(&v154 - 3) = v103;
  uint64_t v104 = v158;
  *(&v154 - 2) = (uint64_t)v157;
  *(&v154 - 1) = v104;
  sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2538, v173);
  swift_beginAccess();
  uint64_t v105 = *(void *)(v59 + *(int *)(v184 + 20))
       + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v106 = v161;
  sub_1C3F970C4(v105, v161, &qword_1EBBBF8A0);
  if (v63(v106, 1, v62) == 1)
  {
    sub_1C3F962E0(v106, &qword_1EBBBF8A0);
    uint64_t v107 = (uint64_t)v170;
    uint64_t v108 = v172;
    uint64_t v109 = v171;
    uint64_t v110 = v173;
    uint64_t v111 = v164;
LABEL_56:
    sub_1C4496888();
    uint64_t v132 = v183;
    uint64_t v141 = *(int *)(v183 + 20);
    if (qword_1EA39AF70 != -1)
    {
      swift_once();
      uint64_t v132 = v183;
    }
    *(void *)(v111 + v141) = qword_1EA39AF60;
    swift_retain();
    goto LABEL_59;
  }
  int v131 = swift_getEnumCaseMultiPayload();
  uint64_t v107 = (uint64_t)v170;
  uint64_t v108 = v172;
  uint64_t v109 = v171;
  uint64_t v110 = v173;
  uint64_t v111 = v164;
  if (v131 != 11)
  {
    sub_1C3F8B288(v106, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_56;
  }
  sub_1C3F8ADE0(v106, v164, type metadata accessor for Proto_TaggedValue);
  uint64_t v132 = v183;
LABEL_59:
  uint64_t v142 = *(int *)(v132 + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_TaggedValue._StorageClass(0);
    swift_allocObject();
    uint64_t v143 = swift_retain();
    uint64_t v144 = sub_1C4400A40(v143);
    uint64_t v111 = v164;
    *(void *)(v164 + v142) = v144;
    swift_release();
  }
  uint64_t v145 = *(void *)(v111 + v142);
  sub_1C3F8ADE0(v110, v108, type metadata accessor for Proto_Value);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v109 + 56))(v108, 0, 1, v184);
  sub_1C4124B88(v108, v107);
  uint64_t v146 = v111;
  uint64_t v147 = v145
       + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
  swift_beginAccess();
  swift_retain();
  sub_1C4124BF0(v107, v147);
  swift_endAccess();
  swift_release();
  sub_1C43F0970(v146);
  swift_endAccess();
  swift_release();
  return (*((uint64_t (**)(char *, uint64_t))v178 + 1))(v157, v159);
}

uint64_t sub_1C4195648@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return TaggedValue_2.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a3);
}

uint64_t sub_1C419566C(uint64_t a1, void *a2)
{
  return TaggedValue_2.encode(to:)(a1, a2);
}

uint64_t TaggedValue_2<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  v23[0] = a3;
  v23[1] = a4;
  v23[2] = a1;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = v12;
  v24[1] = v6;
  long long v25 = *(_OWORD *)(v16 + 32);
  uint64_t v17 = type metadata accessor for TaggedValue_2.TaggedEnum();
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v23 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))((char *)v23 - v18, v5, v17);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v19, v6);
      sub_1C4497068();
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    else
    {
      (*(void (**)(void *__return_ptr))(**((void **)v19 + 1) + 80))(v26);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DE70);
      swift_dynamicCast();
      __swift_project_boxed_opaque_existential_1(v24, *((uint64_t *)&v25 + 1));
      sub_1C4497068();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      return swift_release();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v19, v12);
    sub_1C4497068();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
}

uint64_t sub_1C41959B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TaggedValue_2<>.encode(to:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t TaggedValue_3.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v209 = a8;
  uint64_t v199 = a2;
  uint64_t v221 = a2;
  uint64_t v222 = a3;
  uint64_t v201 = a3;
  uint64_t v202 = a4;
  uint64_t v223 = a4;
  uint64_t v224 = a5;
  uint64_t v196 = a5;
  uint64_t v198 = a6;
  uint64_t v225 = a6;
  uint64_t v226 = a7;
  uint64_t v200 = a7;
  uint64_t v208 = type metadata accessor for TaggedValue_3.TaggedEnum();
  uint64_t v207 = *(void *)(v208 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v208);
  uint64_t v177 = (uint64_t *)((char *)&v176 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v197 = (char *)&v176 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v195 = (char *)&v176 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v194 = (char *)&v176 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v185 = (uint64_t)&v176 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v184 = (uint64_t)&v176 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v183 = (uint64_t)&v176 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v182 = (uint64_t)&v176 - v24;
  MEMORY[0x1F4188790](v23);
  uint64_t v217 = (uint64_t)&v176 - v25;
  uint64_t v220 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v26 = MEMORY[0x1F4188790](v220);
  uint64_t v193 = (uint64_t)&v176 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v192 = (uint64_t)&v176 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v191 = (uint64_t)&v176 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v189 = (uint64_t)&v176 - v33;
  MEMORY[0x1F4188790](v32);
  uint64_t v218 = (uint64_t)&v176 - v34;
  uint64_t v35 = type metadata accessor for Proto_Value(0);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v190 = (uint64_t)&v176 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v213 = (uint64_t)&v176 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v188 = (char *)&v176 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v180 = (uint64_t)&v176 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v187 = (uint64_t)&v176 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v212 = (uint64_t)&v176 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v186 = (uint64_t)&v176 - v50;
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v211 = (uint64_t)&v176 - v52;
  MEMORY[0x1F4188790](v51);
  uint64_t v219 = (uint64_t)&v176 - v53;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v55 = MEMORY[0x1F4188790](v54 - 8);
  uint64_t v181 = (char *)&v176 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = MEMORY[0x1F4188790](v55);
  uint64_t v206 = (uint64_t)&v176 - v58;
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v210 = (uint64_t)&v176 - v60;
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  uint64_t v205 = (uint64_t)&v176 - v62;
  uint64_t v63 = MEMORY[0x1F4188790](v61);
  uint64_t v179 = (char *)&v176 - v64;
  uint64_t v65 = MEMORY[0x1F4188790](v63);
  uint64_t v204 = (uint64_t)&v176 - v66;
  uint64_t v67 = MEMORY[0x1F4188790](v65);
  uint64_t v178 = (char *)&v176 - v68;
  uint64_t v69 = MEMORY[0x1F4188790](v67);
  uint64_t v203 = (uint64_t)&v176 - v70;
  uint64_t v71 = MEMORY[0x1F4188790](v69);
  uint64_t v73 = (char *)&v176 - v72;
  MEMORY[0x1F4188790](v71);
  uint64_t v75 = (char *)&v176 - v74;
  uint64_t v76 = a1;
  uint64_t v77 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v77, (uint64_t)v75, &qword_1EBBC0540);
  uint64_t v78 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v79 = v78(v75, 1, v35);
  sub_1C3F962E0((uint64_t)v75, &qword_1EBBC0540);
  if (v79 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v80 = 0xD000000000000017;
    *(void *)(v80 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v80 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v76;
  sub_1C3F970C4(v77, (uint64_t)v73, &qword_1EBBC0540);
  uint64_t result = v78(v73, 1, v35);
  uint64_t v215 = v76;
  if (result == 1)
  {
    __break(1u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  uint64_t v83 = v219;
  sub_1C3F8ADE0((uint64_t)v73, v219, type metadata accessor for Proto_Value);
  uint64_t v84 = v35;
  uint64_t v85 = *(void *)(v83 + *(int *)(v35 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v86 = v217;
  sub_1C3F970C4(v85, v217, &qword_1EBBBF8A0);
  uint64_t v87 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 48);
  int v89 = v88(v86, 1, v87);
  uint64_t v214 = inited;
  if (v89 == 1)
  {
    swift_retain();
    sub_1C3F962E0(v86, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      uint64_t v90 = v218;
      sub_1C3F8ADE0(v86, v218, type metadata accessor for Proto_TaggedValue);
      goto LABEL_12;
    }
    swift_retain();
    sub_1C3F8B288(v86, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  uint64_t v90 = v218;
  sub_1C4496888();
  uint64_t v91 = *(int *)(v220 + 20);
  if (qword_1EA39AF70 != -1) {
    swift_once();
  }
  *(void *)(v90 + v91) = qword_1EA39AF60;
LABEL_12:
  swift_retain();
  sub_1C3F8B288(v219, type metadata accessor for Proto_Value);
  uint64_t v92 = *(void *)(v90 + *(int *)(v220 + 20));
  swift_beginAccess();
  uint64_t v93 = *(void *)(v92 + 16);
  sub_1C3F8B288(v90, type metadata accessor for Proto_TaggedValue);
  switch(v93)
  {
    case 0:
      uint64_t v105 = *(void *)(v214 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
      swift_beginAccess();
      uint64_t v106 = v105;
      uint64_t v107 = v203;
      sub_1C3F970C4(v106, v203, &qword_1EBBC0540);
      uint64_t result = v78((char *)v107, 1, v35);
      if (result == 1)
      {
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      uint64_t v108 = v107;
      uint64_t v109 = v211;
      sub_1C3F8ADE0(v108, v211, type metadata accessor for Proto_Value);
      uint64_t v110 = *(void *)(v109 + *(int *)(v35 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v111 = v110;
      uint64_t v112 = v182;
      sub_1C3F970C4(v111, v182, &qword_1EBBBF8A0);
      if (v88(v112, 1, v87) == 1)
      {
        sub_1C3F962E0(v112, &qword_1EBBBF8A0);
        uint64_t v113 = v216;
        uint64_t v114 = v215;
        uint64_t v115 = v189;
        uint64_t v116 = (uint64_t)v178;
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v115 = v189;
        uint64_t v116 = (uint64_t)v178;
        if (EnumCaseMultiPayload == 11)
        {
          sub_1C3F8ADE0(v112, v189, type metadata accessor for Proto_TaggedValue);
          uint64_t v113 = v216;
          uint64_t v114 = v215;
          goto LABEL_39;
        }
        sub_1C3F8B288(v112, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        uint64_t v113 = v216;
        uint64_t v114 = v215;
      }
      sub_1C4496888();
      uint64_t v146 = *(int *)(v220 + 20);
      if (qword_1EA39AF70 != -1) {
        swift_once();
      }
      *(void *)(v115 + v146) = qword_1EA39AF60;
      swift_retain();
LABEL_39:
      sub_1C3F8B288(v211, type metadata accessor for Proto_Value);
      uint64_t v147 = *(void *)(v115 + *(int *)(v220 + 20))
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      sub_1C3F970C4(v147, v116, &qword_1EBBC0540);
      if (v78((char *)v116, 1, v35) == 1)
      {
        uint64_t v148 = v186;
        sub_1C4496888();
        uint64_t v149 = *(int *)(v35 + 20);
        if (qword_1EBBBF8C8 != -1) {
          swift_once();
        }
        *(void *)(v148 + v149) = qword_1EBBBF8B8;
        swift_retain();
        sub_1C3F962E0(v116, &qword_1EBBC0540);
      }
      else
      {
        uint64_t v148 = v186;
        sub_1C3F8ADE0(v116, v186, type metadata accessor for Proto_Value);
      }
      uint64_t v150 = v194;
      sub_1C3F8B288(v115, type metadata accessor for Proto_TaggedValue);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      uint64_t v151 = sub_1C3F974B0(v148, v114);
      swift_release();
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v196 + 8) + 8) + 8))(v151);
      if (v113) {
        goto LABEL_78;
      }
      goto LABEL_56;
    case 1:
      uint64_t v117 = *(void *)(v214 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
      swift_beginAccess();
      uint64_t v118 = v117;
      uint64_t v119 = v204;
      sub_1C3F970C4(v118, v204, &qword_1EBBC0540);
      uint64_t result = v78((char *)v119, 1, v35);
      if (result == 1)
      {
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
      uint64_t v120 = v119;
      uint64_t v121 = v212;
      sub_1C3F8ADE0(v120, v212, type metadata accessor for Proto_Value);
      uint64_t v122 = *(void *)(v121 + *(int *)(v35 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v123 = v122;
      uint64_t v124 = v183;
      sub_1C3F970C4(v123, v183, &qword_1EBBBF8A0);
      int v125 = v88(v124, 1, v87);
      uint64_t v126 = (uint64_t)v179;
      if (v125 == 1)
      {
        sub_1C3F962E0(v124, &qword_1EBBBF8A0);
        uint64_t v127 = v216;
        uint64_t v128 = v215;
        uint64_t v129 = v191;
      }
      else
      {
        int v143 = swift_getEnumCaseMultiPayload();
        uint64_t v129 = v191;
        if (v143 == 11)
        {
          sub_1C3F8ADE0(v124, v191, type metadata accessor for Proto_TaggedValue);
          uint64_t v127 = v216;
          uint64_t v128 = v215;
          goto LABEL_50;
        }
        sub_1C3F8B288(v124, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        uint64_t v127 = v216;
        uint64_t v128 = v215;
      }
      sub_1C4496888();
      uint64_t v152 = *(int *)(v220 + 20);
      if (qword_1EA39AF70 != -1) {
        swift_once();
      }
      *(void *)(v129 + v152) = qword_1EA39AF60;
      swift_retain();
LABEL_50:
      sub_1C3F8B288(v212, type metadata accessor for Proto_Value);
      uint64_t v153 = *(void *)(v129 + *(int *)(v220 + 20))
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      sub_1C3F970C4(v153, v126, &qword_1EBBC0540);
      if (v78((char *)v126, 1, v35) == 1)
      {
        uint64_t v154 = v187;
        sub_1C4496888();
        uint64_t v155 = *(int *)(v35 + 20);
        uint64_t v150 = v195;
        if (qword_1EBBBF8C8 != -1) {
          swift_once();
        }
        *(void *)(v154 + v155) = qword_1EBBBF8B8;
        swift_retain();
        sub_1C3F962E0(v126, &qword_1EBBC0540);
      }
      else
      {
        uint64_t v154 = v187;
        sub_1C3F8ADE0(v126, v187, type metadata accessor for Proto_Value);
        uint64_t v150 = v195;
      }
      sub_1C3F8B288(v129, type metadata accessor for Proto_TaggedValue);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      uint64_t v156 = sub_1C3F974B0(v154, v128);
      swift_release();
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v198 + 8) + 8) + 8))(v156);
      if (v127) {
        goto LABEL_78;
      }
LABEL_56:
      swift_release();
      swift_release();
      uint64_t v157 = v208;
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v207 + 32))(v209, v150, v157);
    case 2:
      uint64_t v94 = *(void *)(v214 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
      swift_beginAccess();
      uint64_t v95 = v94;
      uint64_t v96 = v205;
      sub_1C3F970C4(v95, v205, &qword_1EBBC0540);
      uint64_t result = v78((char *)v96, 1, v35);
      if (result != 1)
      {
        uint64_t v97 = v180;
        sub_1C3F8ADE0(v96, v180, type metadata accessor for Proto_Value);
        uint64_t v98 = *(void *)(v97 + *(int *)(v35 + 20))
            + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v99 = v98;
        uint64_t v100 = v184;
        sub_1C3F970C4(v99, v184, &qword_1EBBBF8A0);
        if (v88(v100, 1, v87) == 1)
        {
          sub_1C3F962E0(v100, &qword_1EBBBF8A0);
          uint64_t v101 = v216;
          uint64_t v102 = v215;
          uint64_t v103 = v192;
          uint64_t v104 = (uint64_t)v188;
        }
        else
        {
          int v144 = swift_getEnumCaseMultiPayload();
          uint64_t v103 = v192;
          uint64_t v104 = (uint64_t)v188;
          if (v144 == 11)
          {
            sub_1C3F8ADE0(v100, v192, type metadata accessor for Proto_TaggedValue);
            uint64_t v101 = v216;
            uint64_t v102 = v215;
            goto LABEL_61;
          }
          sub_1C3F8B288(v100, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          uint64_t v101 = v216;
          uint64_t v102 = v215;
        }
        sub_1C4496888();
        uint64_t v158 = *(int *)(v220 + 20);
        if (qword_1EA39AF70 != -1) {
          swift_once();
        }
        *(void *)(v103 + v158) = qword_1EA39AF60;
        swift_retain();
LABEL_61:
        sub_1C3F8B288(v97, type metadata accessor for Proto_Value);
        uint64_t v159 = *(void *)(v103 + *(int *)(v220 + 20))
             + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
        swift_beginAccess();
        uint64_t v160 = v159;
        uint64_t v161 = v210;
        sub_1C3F970C4(v160, v210, &qword_1EBBC0540);
        if (v78((char *)v161, 1, v84) == 1)
        {
          sub_1C4496888();
          uint64_t v162 = *(int *)(v84 + 20);
          uint64_t v163 = v202;
          uint64_t v164 = v200;
          uint64_t v165 = v197;
          if (qword_1EBBBF8C8 != -1) {
            swift_once();
          }
          *(void *)(v104 + v162) = qword_1EBBBF8B8;
          swift_retain();
          sub_1C3F962E0(v210, &qword_1EBBC0540);
        }
        else
        {
          sub_1C3F8ADE0(v161, v104, type metadata accessor for Proto_Value);
          uint64_t v163 = v202;
          uint64_t v164 = v200;
          uint64_t v165 = v197;
        }
        sub_1C3F8B288(v103, type metadata accessor for Proto_TaggedValue);
        type metadata accessor for CRDecoder(0);
        swift_allocObject();
        swift_retain();
        uint64_t v166 = sub_1C3F974B0(v104, v102);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v164 + 8) + 8) + 8))(v166, v163);
        if (!v101)
        {
          swift_release();
          swift_release();
          uint64_t v167 = v208;
          swift_storeEnumTagMultiPayload();
          return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v207 + 32))(v209, v165, v167);
        }
        goto LABEL_78;
      }
      goto LABEL_81;
  }
  uint64_t v130 = *(void *)(v214 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  uint64_t v131 = v130;
  uint64_t v132 = v206;
  sub_1C3F970C4(v131, v206, &qword_1EBBC0540);
  uint64_t result = v78((char *)v132, 1, v35);
  if (result != 1)
  {
    uint64_t v133 = v132;
    uint64_t v134 = v213;
    sub_1C3F8ADE0(v133, v213, type metadata accessor for Proto_Value);
    uint64_t v135 = *(void *)(v134 + *(int *)(v35 + 20))
         + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v136 = v135;
    uint64_t v137 = v185;
    sub_1C3F970C4(v136, v185, &qword_1EBBBF8A0);
    if (v88(v137, 1, v87) == 1)
    {
      sub_1C3F962E0(v137, &qword_1EBBBF8A0);
      uint64_t v138 = v216;
      uint64_t v139 = v215;
      uint64_t v140 = v193;
      uint64_t v141 = (uint64_t)v181;
    }
    else
    {
      int v145 = swift_getEnumCaseMultiPayload();
      uint64_t v140 = v193;
      uint64_t v141 = (uint64_t)v181;
      if (v145 == 11)
      {
        sub_1C3F8ADE0(v137, v193, type metadata accessor for Proto_TaggedValue);
        uint64_t v138 = v216;
        uint64_t v139 = v215;
        goto LABEL_72;
      }
      sub_1C3F8B288(v137, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      uint64_t v138 = v216;
      uint64_t v139 = v215;
    }
    sub_1C4496888();
    uint64_t v168 = *(int *)(v220 + 20);
    if (qword_1EA39AF70 != -1) {
      swift_once();
    }
    *(void *)(v140 + v168) = qword_1EA39AF60;
    swift_retain();
LABEL_72:
    sub_1C3F8B288(v213, type metadata accessor for Proto_Value);
    uint64_t v169 = *(void *)(v140 + *(int *)(v220 + 20))
         + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
    swift_beginAccess();
    sub_1C3F970C4(v169, v141, &qword_1EBBC0540);
    if (v78((char *)v141, 1, v84) == 1)
    {
      uint64_t v170 = v190;
      sub_1C4496888();
      uint64_t v171 = *(int *)(v84 + 20);
      if (qword_1EBBBF8C8 != -1) {
        swift_once();
      }
      *(void *)(v170 + v171) = qword_1EBBBF8B8;
      swift_retain();
      sub_1C3F962E0(v141, &qword_1EBBC0540);
    }
    else
    {
      uint64_t v170 = v190;
      sub_1C3F8ADE0(v141, v190, type metadata accessor for Proto_Value);
    }
    sub_1C3F8B288(v140, type metadata accessor for Proto_TaggedValue);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    swift_retain();
    uint64_t v172 = sub_1C3F974B0(v170, v139);
    swift_release();
    AnyCRValue.init(from:)(v172, &v227);
    if (!v138)
    {
      swift_release();
      swift_release();
      uint64_t v173 = v227;
      uint64_t v174 = v177;
      *uint64_t v177 = v93;
      v174[1] = v173;
      uint64_t v175 = v208;
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v207 + 32))(v209, v174, v175);
    }
LABEL_78:
    swift_release();
    swift_setDeallocating();
    return swift_release();
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t TaggedValue_3.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t v259 = a1;
  uint64_t v252 = a2[4];
  uint64_t v247 = *(void *)(v252 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](a1);
  uint64_t v249 = (char *)&v214 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v241 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v240 = (char *)&v214 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v237 = (uint64_t)&v214 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v236 = (uint64_t)&v214 - v11;
  uint64_t v248 = type metadata accessor for Proto_Value(0);
  uint64_t v235 = *(void *)(v248 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v248);
  uint64_t v230 = (uint64_t)&v214 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v233 = (uint64_t)&v214 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v232 = (uint64_t)&v214 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v231 = (uint64_t)&v214 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v221 = (uint64_t)&v214 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v229 = (uint64_t)&v214 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v222 = (uint64_t)&v214 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v228 = (uint64_t)&v214 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v220 = (uint64_t)&v214 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v227 = (uint64_t)&v214 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v219 = (uint64_t)&v214 - v33;
  MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v214 - v34;
  uint64_t v250 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v36 = MEMORY[0x1F4188790](v250);
  uint64_t v224 = (uint64_t)&v214 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v239 = (uint64_t)&v214 - v39;
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  uint64_t v226 = (uint64_t)&v214 - v41;
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  uint64_t v238 = (uint64_t)&v214 - v43;
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  uint64_t v225 = (uint64_t)&v214 - v45;
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  uint64_t v234 = (uint64_t)&v214 - v47;
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  uint64_t v223 = (uint64_t)&v214 - v49;
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  uint64_t v52 = (char *)&v214 - v51;
  uint64_t v53 = a2[2];
  uint64_t v246 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v55 = (char *)&v214 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = a2[5];
  uint64_t v56 = a2[6];
  uint64_t v58 = a2[7];
  uint64_t v253 = v53;
  uint64_t v254 = v6;
  uint64_t v242 = v6;
  uint64_t v255 = v252;
  uint64_t v256 = v57;
  uint64_t v257 = v56;
  uint64_t v258 = v58;
  uint64_t v244 = type metadata accessor for TaggedValue_3.TaggedEnum();
  uint64_t v243 = *(void *)(v244 - 8);
  MEMORY[0x1F4188790](v244);
  uint64_t v60 = (uint64_t *)((char *)&v214 - v59);
  uint64_t v61 = v251;
  uint64_t result = sub_1C3F6DD10();
  if (v61) {
    return result;
  }
  uint64_t v218 = v55;
  uint64_t v215 = v57;
  uint64_t v216 = v56;
  uint64_t v214 = v58;
  uint64_t v217 = v53;
  uint64_t v251 = result;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v243 + 16))(v60, v245, v244);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v245 = 0;
  uint64_t v64 = v248;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v72 = v242;
      (*(void (**)(char *, uint64_t *, uint64_t))(v241 + 32))(v240, v60, v242);
      uint64_t v73 = v251 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v74 = *(void *)(v73 + *(int *)(v64 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v75 = v227;
      sub_1C3F970C4(v74, v227, &qword_1EBBBF8A0);
      uint64_t v76 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 48);
      if (v77(v75, 1, v76) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v75, &qword_1EBBBF8A0);
        uint64_t v78 = v234;
      }
      else
      {
        int v100 = swift_getEnumCaseMultiPayload();
        uint64_t v78 = v234;
        if (v100 == 11)
        {
          sub_1C3F8ADE0(v75, v234, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v101 = v250;
          goto LABEL_33;
        }
        swift_retain();
        sub_1C3F8B288(v75, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v101 = v250;
      uint64_t v125 = *(int *)(v250 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v101 = v250;
      }
      *(void *)(v78 + v125) = qword_1EA39AF60;
      swift_retain();
LABEL_33:
      uint64_t v126 = *(int *)(v101 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v127 = swift_retain();
        uint64_t v128 = sub_1C4400A40(v127);
        uint64_t v78 = v234;
        *(void *)(v234 + v126) = v128;
        swift_release();
      }
      uint64_t v129 = *(void *)(v78 + v126);
      swift_beginAccess();
      *(void *)(v129 + 16) = 1;
      sub_1C43F0970(v78);
      uint64_t v130 = swift_endAccess();
      MEMORY[0x1F4188790](v130);
      *(&v214 - 8) = v217;
      *(&v214 - 7) = v72;
      uint64_t v131 = v215;
      *(&v214 - 6) = v252;
      *(&v214 - 5) = v131;
      uint64_t v132 = v214;
      *(&v214 - 4) = v216;
      *(&v214 - 3) = v132;
      uint64_t v133 = v240;
      uint64_t v134 = v259;
      *(&v214 - 2) = (uint64_t)v240;
      *(&v214 - 1) = v134;
      uint64_t v135 = v245;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C415C668, v232);
      if (v135)
      {
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v241 + 8))(v133, v72);
      }
      swift_beginAccess();
      uint64_t v136 = v248;
      uint64_t v137 = *(void *)(v73 + *(int *)(v248 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v138 = v220;
      sub_1C3F970C4(v137, v220, &qword_1EBBBF8A0);
      unsigned int v139 = v77(v138, 1, v76);
      uint64_t v140 = v241;
      if (v139 == 1)
      {
        sub_1C3F962E0(v138, &qword_1EBBBF8A0);
        uint64_t v141 = v235;
        uint64_t v142 = v225;
      }
      else
      {
        int v179 = swift_getEnumCaseMultiPayload();
        uint64_t v141 = v235;
        uint64_t v142 = v225;
        if (v179 == 11)
        {
          sub_1C3F8ADE0(v138, v225, type metadata accessor for Proto_TaggedValue);
          uint64_t v180 = v250;
LABEL_78:
          uint64_t v245 = 0;
          uint64_t v192 = *(int *)(v180 + 20);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for Proto_TaggedValue._StorageClass(0);
            swift_allocObject();
            uint64_t v193 = swift_retain();
            uint64_t v142 = v225;
            *(void *)(v142 + v192) = sub_1C4400A40(v193);
            swift_release();
          }
          uint64_t v194 = v142;
          uint64_t v195 = *(void *)(v142 + v192);
          uint64_t v196 = v236;
          sub_1C3F8ADE0(v232, v236, type metadata accessor for Proto_Value);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v141 + 56))(v196, 0, 1, v136);
          uint64_t v197 = v237;
          sub_1C4124B88(v196, v237);
          uint64_t v198 = v195
               + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
          swift_beginAccess();
          swift_retain();
          sub_1C4124BF0(v197, v198);
          swift_endAccess();
          swift_release();
          sub_1C43F0970(v194);
          swift_endAccess();
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v140 + 8))(v133, v242);
        }
        sub_1C3F8B288(v138, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v180 = v250;
      uint64_t v190 = v142;
      uint64_t v191 = *(int *)(v250 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v180 = v250;
      }
      *(void *)(v190 + v191) = qword_1EA39AF60;
      swift_retain();
      uint64_t v142 = v190;
      goto LABEL_78;
    case 2:
      uint64_t v79 = v252;
      (*(void (**)(char *, uint64_t *, uint64_t))(v247 + 32))(v249, v60, v252);
      uint64_t v80 = v251 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v81 = *(void *)(v80 + *(int *)(v64 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v82 = v81;
      uint64_t v83 = v228;
      sub_1C3F970C4(v82, v228, &qword_1EBBBF8A0);
      uint64_t v84 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v85 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 48);
      int v86 = v85(v83, 1, v84);
      uint64_t v246 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v85;
      if (v86 == 1)
      {
        swift_retain();
        sub_1C3F962E0(v83, &qword_1EBBBF8A0);
        uint64_t v87 = v214;
        uint64_t v88 = v238;
      }
      else
      {
        int v102 = swift_getEnumCaseMultiPayload();
        uint64_t v87 = v214;
        uint64_t v103 = v83;
        uint64_t v88 = v238;
        if (v102 == 11)
        {
          sub_1C3F8ADE0(v103, v238, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v104 = v250;
          goto LABEL_43;
        }
        swift_retain();
        sub_1C3F8B288(v103, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v104 = v250;
      uint64_t v143 = v88;
      uint64_t v144 = *(int *)(v250 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v104 = v250;
      }
      *(void *)(v143 + v144) = qword_1EA39AF60;
      swift_retain();
      uint64_t v88 = v143;
LABEL_43:
      uint64_t v145 = *(int *)(v104 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v146 = swift_retain();
        uint64_t v147 = sub_1C4400A40(v146);
        uint64_t v88 = v238;
        *(void *)(v238 + v145) = v147;
        swift_release();
      }
      uint64_t v148 = v88;
      uint64_t v149 = *(void *)(v88 + v145);
      swift_beginAccess();
      *(void *)(v149 + 16) = 2;
      sub_1C43F0970(v148);
      uint64_t v150 = swift_endAccess();
      MEMORY[0x1F4188790](v150);
      uint64_t v151 = v242;
      *(&v214 - 8) = v217;
      *(&v214 - 7) = v151;
      uint64_t v152 = v215;
      *(&v214 - 6) = v79;
      *(&v214 - 5) = v152;
      *(&v214 - 4) = v216;
      *(&v214 - 3) = v87;
      uint64_t v153 = v249;
      uint64_t v154 = v259;
      *(&v214 - 2) = (uint64_t)v249;
      *(&v214 - 1) = v154;
      uint64_t v155 = v245;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2580, v233);
      if (v155)
      {
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v247 + 8))(v153, v79);
      }
      uint64_t v245 = 0;
      swift_beginAccess();
      uint64_t v156 = *(void *)(v80 + *(int *)(v64 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v157 = v222;
      sub_1C3F970C4(v156, v222, &qword_1EBBBF8A0);
      if (v246(v157, 1, v84) == 1)
      {
        sub_1C3F962E0(v157, &qword_1EBBBF8A0);
        uint64_t v158 = v237;
        uint64_t v159 = v236;
        uint64_t v160 = v235;
        uint64_t v161 = v233;
        uint64_t v162 = v226;
      }
      else
      {
        int v181 = swift_getEnumCaseMultiPayload();
        uint64_t v158 = v237;
        uint64_t v159 = v236;
        uint64_t v160 = v235;
        uint64_t v161 = v233;
        uint64_t v162 = v226;
        if (v181 == 11)
        {
          sub_1C3F8ADE0(v157, v226, type metadata accessor for Proto_TaggedValue);
          uint64_t v182 = v250;
          goto LABEL_85;
        }
        sub_1C3F8B288(v157, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v182 = v250;
      uint64_t v199 = v162;
      uint64_t v200 = *(int *)(v250 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v182 = v250;
      }
      *(void *)(v199 + v200) = qword_1EA39AF60;
      swift_retain();
      uint64_t v162 = v199;
LABEL_85:
      uint64_t v201 = *(int *)(v182 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v202 = swift_retain();
        uint64_t v203 = sub_1C4400A40(v202);
        uint64_t v162 = v226;
        *(void *)(v226 + v201) = v203;
        swift_release();
      }
      uint64_t v204 = v162;
      uint64_t v205 = *(void *)(v162 + v201);
      sub_1C3F8ADE0(v161, v159, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v160 + 56))(v159, 0, 1, v64);
      sub_1C4124B88(v159, v158);
      uint64_t v206 = v205
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v158, v206);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v204);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v247 + 8))(v249, v252);
    case 3:
      uint64_t v90 = *v60;
      uint64_t v89 = v60[1];
      uint64_t v91 = v251 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v92 = *(void *)(v91 + *(int *)(v64 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v93 = v92;
      uint64_t v94 = v229;
      sub_1C3F970C4(v93, v229, &qword_1EBBBF8A0);
      uint64_t v95 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 48);
      if (v96(v94, 1, v95) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v94, &qword_1EBBBF8A0);
        uint64_t v97 = v239;
      }
      else
      {
        int v105 = swift_getEnumCaseMultiPayload();
        uint64_t v97 = v239;
        if (v105 == 11)
        {
          sub_1C3F8ADE0(v94, v239, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v106 = v250;
          goto LABEL_53;
        }
        swift_retain();
        sub_1C3F8B288(v94, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v106 = v250;
      uint64_t v163 = *(int *)(v250 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v106 = v250;
      }
      *(void *)(v97 + v163) = qword_1EA39AF60;
      swift_retain();
LABEL_53:
      uint64_t v164 = *(int *)(v106 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v165 = swift_retain();
        uint64_t v166 = sub_1C4400A40(v165);
        uint64_t v97 = v239;
        *(void *)(v239 + v164) = v166;
        swift_release();
      }
      uint64_t v167 = *(void *)(v97 + v164);
      swift_beginAccess();
      *(void *)(v167 + 16) = v90;
      sub_1C43F0970(v97);
      swift_endAccess();
      swift_retain();
      uint64_t v168 = swift_retain();
      uint64_t v169 = v230;
      uint64_t v170 = v245;
      sub_1C400B83C(v168, v89, v168, v230);
      if (v170)
      {
        swift_release();
        return swift_release();
      }
      swift_beginAccess();
      uint64_t v171 = *(void *)(v91 + *(int *)(v248 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v172 = v171;
      uint64_t v173 = v221;
      sub_1C3F970C4(v172, v221, &qword_1EBBBF8A0);
      if (v96(v173, 1, v95) == 1)
      {
        sub_1C3F962E0(v173, &qword_1EBBBF8A0);
        uint64_t v174 = v236;
        uint64_t v175 = v248;
        uint64_t v176 = v224;
      }
      else
      {
        int v183 = swift_getEnumCaseMultiPayload();
        uint64_t v176 = v224;
        if (v183 == 11)
        {
          sub_1C3F8ADE0(v173, v224, type metadata accessor for Proto_TaggedValue);
          uint64_t v174 = v236;
          uint64_t v175 = v248;
          uint64_t v184 = v250;
          goto LABEL_92;
        }
        sub_1C3F8B288(v173, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        uint64_t v174 = v236;
        uint64_t v175 = v248;
      }
      sub_1C4496888();
      uint64_t v184 = v250;
      uint64_t v207 = *(int *)(v250 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v184 = v250;
      }
      *(void *)(v176 + v207) = qword_1EA39AF60;
      swift_retain();
LABEL_92:
      uint64_t v208 = *(int *)(v184 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v209 = swift_retain();
        *(void *)(v176 + v208) = sub_1C4400A40(v209);
        swift_release();
      }
      uint64_t v210 = *(void *)(v176 + v208);
      sub_1C3F8ADE0(v169, v174, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v235 + 56))(v174, 0, 1, v175);
      uint64_t v211 = v174;
      uint64_t v212 = v237;
      sub_1C4124B88(v211, v237);
      uint64_t v213 = v210
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v212, v213);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v176);
      swift_endAccess();
      swift_release();
      return swift_release();
    default:
      (*((void (**)(char *, uint64_t *, uint64_t))v246 + 4))(v218, v60, v217);
      uint64_t v65 = v251 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v66 = *(void *)(v65 + *(int *)(v64 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v67 = v66;
      uint64_t v68 = (uint64_t)v35;
      sub_1C3F970C4(v67, (uint64_t)v35, &qword_1EBBBF8A0);
      uint64_t v69 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 48);
      int v71 = v70(v68, 1, v69);
      uint64_t v249 = (char *)v70;
      if (v71 == 1)
      {
        swift_retain();
        sub_1C3F962E0(v68, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          sub_1C3F8ADE0(v68, (uint64_t)v52, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v98 = v250;
          uint64_t v99 = v259;
          goto LABEL_23;
        }
        swift_retain();
        sub_1C3F8B288(v68, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v99 = v259;
      sub_1C4496888();
      uint64_t v98 = v250;
      uint64_t v107 = *(int *)(v250 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v98 = v250;
      }
      *(void *)&v52[v107] = qword_1EA39AF60;
      swift_retain();
LABEL_23:
      uint64_t v108 = *(int *)(v98 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v109 = swift_retain();
        *(void *)&v52[v108] = sub_1C4400A40(v109);
        swift_release();
      }
      uint64_t v110 = *(void *)&v52[v108];
      swift_beginAccess();
      *(void *)(v110 + 16) = 0;
      sub_1C43F0970((uint64_t)v52);
      uint64_t v111 = swift_endAccess();
      MEMORY[0x1F4188790](v111);
      uint64_t v112 = v217;
      uint64_t v113 = v242;
      *(&v214 - 8) = v217;
      *(&v214 - 7) = v113;
      uint64_t v114 = v215;
      *(&v214 - 6) = v252;
      *(&v214 - 5) = v114;
      uint64_t v115 = v214;
      *(&v214 - 4) = v216;
      *(&v214 - 3) = v115;
      uint64_t v116 = v218;
      *(&v214 - 2) = (uint64_t)v218;
      *(&v214 - 1) = v99;
      uint64_t v117 = v245;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C25C8, v231);
      if (v117)
      {
        swift_release();
        return (*((uint64_t (**)(char *, uint64_t))v246 + 1))(v116, v112);
      }
      swift_beginAccess();
      uint64_t v118 = *(void *)(v65 + *(int *)(v64 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v119 = v118;
      uint64_t v120 = v219;
      sub_1C3F970C4(v119, v219, &qword_1EBBBF8A0);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v249)(v120, 1, v69) == 1)
      {
        sub_1C3F962E0(v120, &qword_1EBBBF8A0);
        uint64_t v121 = v237;
        uint64_t v122 = v236;
        uint64_t v123 = v231;
        uint64_t v124 = v223;
      }
      else
      {
        int v177 = swift_getEnumCaseMultiPayload();
        uint64_t v122 = v236;
        uint64_t v123 = v231;
        uint64_t v124 = v223;
        if (v177 == 11)
        {
          sub_1C3F8ADE0(v120, v223, type metadata accessor for Proto_TaggedValue);
          uint64_t v121 = v237;
          uint64_t v178 = v250;
          goto LABEL_71;
        }
        sub_1C3F8B288(v120, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        uint64_t v121 = v237;
      }
      sub_1C4496888();
      uint64_t v178 = v250;
      uint64_t v185 = *(int *)(v250 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v178 = v250;
      }
      *(void *)(v124 + v185) = qword_1EA39AF60;
      swift_retain();
LABEL_71:
      uint64_t v186 = *(int *)(v178 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v187 = swift_retain();
        *(void *)(v124 + v186) = sub_1C4400A40(v187);
        swift_release();
      }
      uint64_t v188 = *(void *)(v124 + v186);
      sub_1C3F8ADE0(v123, v122, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v235 + 56))(v122, 0, 1, v64);
      sub_1C4124B88(v122, v121);
      uint64_t v189 = v188
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v121, v189);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v124);
      swift_endAccess();
      swift_release();
      return (*((uint64_t (**)(char *, uint64_t))v246 + 1))(v218, v217);
  }
}

uint64_t sub_1C4199258@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return TaggedValue_3.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a3);
}

uint64_t sub_1C4199280(uint64_t a1, void *a2)
{
  return TaggedValue_3.encode(to:)(a1, a2);
}

uint64_t TaggedValue_3<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v34 = a1;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v30 = a3;
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 24);
  uint64_t v29 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v6);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v19 + 56);
  v36[0] = v15;
  v36[1] = v10;
  v36[2] = v5;
  long long v37 = *(_OWORD *)(v19 + 40);
  uint64_t v38 = v20;
  uint64_t v21 = type metadata accessor for TaggedValue_3.TaggedEnum();
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v28 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))((char *)&v28 - v22, v39, v21);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v27 = v29;
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v13, v23, v10);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v13, v10);
      break;
    case 2u:
      uint64_t v26 = v33;
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v8, v23, v5);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v8, v5);
      break;
    case 3u:
      (*(void (**)(void *__return_ptr))(**((void **)v23 + 1) + 80))(v35);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DE70);
      swift_dynamicCast();
      __swift_project_boxed_opaque_existential_1(v36, v37);
      sub_1C4497068();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      uint64_t result = swift_release();
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v23, v15);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      break;
  }
  return result;
}

uint64_t sub_1C41996B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TaggedValue_3<>.encode(to:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), *(void *)(a3 - 24));
}

uint64_t TaggedValue_4.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v255 = a9;
  uint64_t v237 = a2;
  uint64_t v271 = a2;
  uint64_t v272 = a3;
  uint64_t v238 = a3;
  uint64_t v239 = a4;
  uint64_t v273 = a4;
  uint64_t v274 = a5;
  uint64_t v240 = a5;
  uint64_t v234 = a6;
  uint64_t v275 = a6;
  uint64_t v276 = a7;
  uint64_t v235 = a7;
  uint64_t v236 = a8;
  uint64_t v277 = a8;
  uint64_t v278 = a10;
  uint64_t v233 = a10;
  uint64_t v253 = type metadata accessor for TaggedValue_4.TaggedEnum();
  uint64_t v254 = *(void *)(v253 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v253);
  uint64_t v218 = (void **)((char *)&v218 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v252 = (char *)&v218 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v251 = (char *)&v218 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v250 = (char *)&v218 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v249 = (char *)&v218 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v228 = (uint64_t)&v218 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v227 = (uint64_t)&v218 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v226 = (uint64_t)&v218 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v225 = (uint64_t)&v218 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v224 = (uint64_t)&v218 - v30;
  MEMORY[0x1F4188790](v29);
  uint64_t v268 = (uint64_t)&v218 - v31;
  uint64_t v270 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v32 = MEMORY[0x1F4188790](v270);
  uint64_t v248 = (uint64_t)&v218 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v264 = (uint64_t)&v218 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v263 = (uint64_t)&v218 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v262 = (uint64_t)&v218 - v39;
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  uint64_t v261 = (uint64_t)&v218 - v41;
  MEMORY[0x1F4188790](v40);
  uint64_t v269 = (uint64_t)&v218 - v42;
  uint64_t v43 = type metadata accessor for Proto_Value(0);
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v247 = (uint64_t)&v218 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v260 = (uint64_t)&v218 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v232 = (uint64_t)&v218 - v50;
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v259 = (uint64_t)&v218 - v52;
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  uint64_t v231 = (uint64_t)&v218 - v54;
  uint64_t v55 = MEMORY[0x1F4188790](v53);
  uint64_t v258 = (uint64_t)&v218 - v56;
  uint64_t v57 = MEMORY[0x1F4188790](v55);
  uint64_t v230 = (uint64_t)&v218 - v58;
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v257 = (uint64_t)&v218 - v60;
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  uint64_t v229 = (uint64_t)&v218 - v62;
  uint64_t v63 = MEMORY[0x1F4188790](v61);
  uint64_t v256 = (uint64_t)&v218 - v64;
  MEMORY[0x1F4188790](v63);
  uint64_t v267 = (uint64_t)&v218 - v65;
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v67 = MEMORY[0x1F4188790](v66 - 8);
  uint64_t v246 = (char *)&v218 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = MEMORY[0x1F4188790](v67);
  uint64_t v245 = (uint64_t)&v218 - v70;
  uint64_t v71 = MEMORY[0x1F4188790](v69);
  uint64_t v223 = (uint64_t)&v218 - v72;
  uint64_t v73 = MEMORY[0x1F4188790](v71);
  uint64_t v244 = (uint64_t)&v218 - v74;
  uint64_t v75 = MEMORY[0x1F4188790](v73);
  uint64_t v222 = (uint64_t)&v218 - v76;
  uint64_t v77 = MEMORY[0x1F4188790](v75);
  uint64_t v243 = (uint64_t)&v218 - v78;
  uint64_t v79 = MEMORY[0x1F4188790](v77);
  uint64_t v221 = (uint64_t)&v218 - v80;
  uint64_t v81 = MEMORY[0x1F4188790](v79);
  uint64_t v242 = (uint64_t)&v218 - v82;
  uint64_t v83 = MEMORY[0x1F4188790](v81);
  uint64_t v220 = (uint64_t)&v218 - v84;
  uint64_t v85 = MEMORY[0x1F4188790](v83);
  uint64_t v241 = (uint64_t)&v218 - v86;
  uint64_t v87 = MEMORY[0x1F4188790](v85);
  uint64_t v89 = (char *)&v218 - v88;
  MEMORY[0x1F4188790](v87);
  uint64_t v91 = (char *)&v218 - v90;
  uint64_t v92 = a1;
  uint64_t v93 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v93, (uint64_t)v91, &qword_1EBBC0540);
  uint64_t v94 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
  unsigned int v95 = v94(v91, 1, v43);
  sub_1C3F962E0((uint64_t)v91, &qword_1EBBC0540);
  if (v95 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v92;
    sub_1C3F970C4(v93, (uint64_t)v89, &qword_1EBBC0540);
    uint64_t v219 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v94;
    unsigned int v98 = v94(v89, 1, v43);
    uint64_t v265 = v92;
    if (v98 == 1)
    {
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
      JUMPOUT(0x1C419B540);
    }
    uint64_t v99 = v267;
    sub_1C3F8ADE0((uint64_t)v89, v267, type metadata accessor for Proto_Value);
    uint64_t v100 = v43;
    uint64_t v101 = *(void *)(v99 + *(int *)(v43 + 20))
         + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v102 = v268;
    sub_1C3F970C4(v101, v268, &qword_1EBBBF8A0);
    uint64_t v103 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    uint64_t v104 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 48);
    if (v104(v102, 1, v103) == 1)
    {
      swift_retain();
      sub_1C3F962E0(v102, &qword_1EBBBF8A0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        uint64_t v105 = v102;
        uint64_t v106 = v269;
        sub_1C3F8ADE0(v105, v269, type metadata accessor for Proto_TaggedValue);
        uint64_t v107 = v106;
LABEL_12:
        swift_retain();
        sub_1C3F8B288(v99, type metadata accessor for Proto_Value);
        uint64_t v109 = v270;
        uint64_t v110 = *(void *)(v107 + *(int *)(v270 + 20));
        swift_beginAccess();
        uint64_t v111 = *(void *)(v110 + 16);
        sub_1C3F8B288(v107, type metadata accessor for Proto_TaggedValue);
        uint64_t v112 = v43;
        switch(v111)
        {
          case 0:
            uint64_t v113 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v114 = v113;
            uint64_t v115 = v241;
            sub_1C3F970C4(v114, v241, &qword_1EBBC0540);
            uint64_t v116 = v219;
            if (v219(v115, 1, v43) == 1) {
              goto LABEL_96;
            }
            uint64_t v117 = v115;
            uint64_t v118 = v256;
            sub_1C3F8ADE0(v117, v256, type metadata accessor for Proto_Value);
            uint64_t v119 = *(void *)(v118 + *(int *)(v43 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v120 = v119;
            uint64_t v121 = v224;
            sub_1C3F970C4(v120, v224, &qword_1EBBBF8A0);
            if (v104(v121, 1, v103) == 1)
            {
              sub_1C3F962E0(v121, &qword_1EBBBF8A0);
              uint64_t v122 = v265;
              uint64_t v123 = v249;
              uint64_t v124 = v261;
            }
            else
            {
              BOOL v169 = swift_getEnumCaseMultiPayload() == 11;
              uint64_t v122 = v265;
              uint64_t v170 = v121;
              uint64_t v124 = v261;
              if (v169)
              {
                sub_1C3F8ADE0(v170, v261, type metadata accessor for Proto_TaggedValue);
                uint64_t v123 = v249;
                goto LABEL_45;
              }
              sub_1C3F8B288(v170, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              uint64_t v123 = v249;
            }
            sub_1C4496888();
            uint64_t v175 = *(int *)(v109 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v124 + v175) = qword_1EA39AF60;
            swift_retain();
LABEL_45:
            sub_1C3F8B288(v256, type metadata accessor for Proto_Value);
            uint64_t v176 = *(void *)(v124 + *(int *)(v109 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v177 = v220;
            sub_1C3F970C4(v176, v220, &qword_1EBBC0540);
            int v178 = v116(v177, 1, v112);
            uint64_t v179 = v229;
            if (v178 == 1)
            {
              sub_1C4496888();
              uint64_t v180 = *(int *)(v112 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v179 + v180) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v177, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v177, v229, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v261, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v181 = sub_1C3F974B0(v179, v122);
            swift_release();
            uint64_t v182 = v266;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v234 + 8) + 8) + 8))(v181);
            if (v182) {
              goto LABEL_92;
            }
            goto LABEL_81;
          case 1:
            uint64_t v125 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v126 = v125;
            uint64_t v127 = v242;
            sub_1C3F970C4(v126, v242, &qword_1EBBC0540);
            uint64_t v128 = v219;
            if (v219(v127, 1, v43) == 1) {
              goto LABEL_97;
            }
            uint64_t v129 = v127;
            uint64_t v130 = v257;
            sub_1C3F8ADE0(v129, v257, type metadata accessor for Proto_Value);
            uint64_t v131 = *(void *)(v130 + *(int *)(v43 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v132 = v131;
            uint64_t v133 = v225;
            sub_1C3F970C4(v132, v225, &qword_1EBBBF8A0);
            if (v104(v133, 1, v103) == 1)
            {
              sub_1C3F962E0(v133, &qword_1EBBBF8A0);
              uint64_t v134 = v265;
              uint64_t v123 = v250;
              uint64_t v135 = v262;
            }
            else
            {
              BOOL v169 = swift_getEnumCaseMultiPayload() == 11;
              uint64_t v134 = v265;
              uint64_t v171 = v133;
              uint64_t v135 = v262;
              if (v169)
              {
                sub_1C3F8ADE0(v171, v262, type metadata accessor for Proto_TaggedValue);
                uint64_t v123 = v250;
                goto LABEL_55;
              }
              sub_1C3F8B288(v171, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              uint64_t v123 = v250;
            }
            sub_1C4496888();
            uint64_t v183 = *(int *)(v109 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v135 + v183) = qword_1EA39AF60;
            swift_retain();
LABEL_55:
            sub_1C3F8B288(v257, type metadata accessor for Proto_Value);
            uint64_t v184 = *(void *)(v135 + *(int *)(v109 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v185 = v221;
            sub_1C3F970C4(v184, v221, &qword_1EBBC0540);
            int v186 = v128(v185, 1, v112);
            uint64_t v187 = v230;
            if (v186 == 1)
            {
              sub_1C4496888();
              uint64_t v188 = *(int *)(v112 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v187 + v188) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v185, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v185, v230, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v262, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v189 = sub_1C3F974B0(v187, v134);
            swift_release();
            uint64_t v190 = v266;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v235 + 8) + 8) + 8))(v189);
            if (!v190) {
              goto LABEL_81;
            }
            goto LABEL_92;
          case 2:
            uint64_t v136 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v137 = v136;
            uint64_t v138 = v243;
            sub_1C3F970C4(v137, v243, &qword_1EBBC0540);
            unsigned int v139 = v219;
            if (v219(v138, 1, v43) == 1) {
              goto LABEL_98;
            }
            uint64_t v140 = v138;
            uint64_t v141 = v258;
            sub_1C3F8ADE0(v140, v258, type metadata accessor for Proto_Value);
            uint64_t v142 = *(void *)(v141 + *(int *)(v43 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v143 = v142;
            uint64_t v144 = v226;
            sub_1C3F970C4(v143, v226, &qword_1EBBBF8A0);
            if (v104(v144, 1, v103) == 1)
            {
              sub_1C3F962E0(v144, &qword_1EBBBF8A0);
              uint64_t v145 = v265;
              uint64_t v123 = v251;
              uint64_t v146 = v263;
            }
            else
            {
              BOOL v169 = swift_getEnumCaseMultiPayload() == 11;
              uint64_t v145 = v265;
              uint64_t v172 = v144;
              uint64_t v146 = v263;
              if (v169)
              {
                sub_1C3F8ADE0(v172, v263, type metadata accessor for Proto_TaggedValue);
                uint64_t v123 = v251;
                goto LABEL_65;
              }
              sub_1C3F8B288(v172, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              uint64_t v123 = v251;
            }
            sub_1C4496888();
            uint64_t v191 = *(int *)(v109 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v146 + v191) = qword_1EA39AF60;
            swift_retain();
LABEL_65:
            sub_1C3F8B288(v258, type metadata accessor for Proto_Value);
            uint64_t v192 = *(void *)(v146 + *(int *)(v109 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v193 = v222;
            sub_1C3F970C4(v192, v222, &qword_1EBBC0540);
            int v194 = v139(v193, 1, v112);
            uint64_t v195 = v231;
            if (v194 == 1)
            {
              sub_1C4496888();
              uint64_t v196 = *(int *)(v112 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v195 + v196) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v193, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v193, v231, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v263, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v197 = sub_1C3F974B0(v195, v145);
            swift_release();
            uint64_t v198 = v266;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v236 + 8) + 8) + 8))(v197);
            if (!v198) {
              goto LABEL_81;
            }
            goto LABEL_92;
          case 3:
            uint64_t v147 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v148 = v147;
            uint64_t v149 = v244;
            sub_1C3F970C4(v148, v244, &qword_1EBBC0540);
            uint64_t v150 = v219;
            if (v219(v149, 1, v43) == 1) {
              goto LABEL_99;
            }
            uint64_t v151 = v149;
            uint64_t v152 = v259;
            sub_1C3F8ADE0(v151, v259, type metadata accessor for Proto_Value);
            uint64_t v153 = *(void *)(v152 + *(int *)(v43 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v154 = v153;
            uint64_t v155 = v227;
            sub_1C3F970C4(v154, v227, &qword_1EBBBF8A0);
            if (v104(v155, 1, v103) == 1)
            {
              sub_1C3F962E0(v155, &qword_1EBBBF8A0);
              uint64_t v156 = v265;
              uint64_t v123 = v252;
              uint64_t v157 = v264;
            }
            else
            {
              BOOL v169 = swift_getEnumCaseMultiPayload() == 11;
              uint64_t v156 = v265;
              uint64_t v173 = v155;
              uint64_t v157 = v264;
              if (v169)
              {
                sub_1C3F8ADE0(v173, v264, type metadata accessor for Proto_TaggedValue);
                uint64_t v123 = v252;
                goto LABEL_75;
              }
              sub_1C3F8B288(v173, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              uint64_t v123 = v252;
            }
            sub_1C4496888();
            uint64_t v199 = *(int *)(v109 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v157 + v199) = qword_1EA39AF60;
            swift_retain();
LABEL_75:
            sub_1C3F8B288(v259, type metadata accessor for Proto_Value);
            uint64_t v200 = *(void *)(v157 + *(int *)(v109 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v201 = v223;
            sub_1C3F970C4(v200, v223, &qword_1EBBC0540);
            int v202 = v150(v201, 1, v112);
            uint64_t v203 = v232;
            if (v202 == 1)
            {
              sub_1C4496888();
              uint64_t v204 = *(int *)(v112 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v203 + v204) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v201, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v201, v232, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v264, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v205 = sub_1C3F974B0(v203, v156);
            swift_release();
            uint64_t v206 = v266;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v233 + 8) + 8) + 8))(v205);
            if (v206) {
              goto LABEL_92;
            }
LABEL_81:
            swift_release();
            swift_release();
            uint64_t v207 = v253;
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v254 + 32))(v255, v123, v207);
          default:
            uint64_t v158 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v159 = v158;
            uint64_t v160 = v245;
            sub_1C3F970C4(v159, v245, &qword_1EBBC0540);
            if (v219(v160, 1, v43) == 1) {
              goto LABEL_100;
            }
            uint64_t v161 = v160;
            uint64_t v162 = v260;
            sub_1C3F8ADE0(v161, v260, type metadata accessor for Proto_Value);
            uint64_t v163 = *(void *)(v162 + *(int *)(v43 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v164 = v163;
            uint64_t v165 = v228;
            sub_1C3F970C4(v164, v228, &qword_1EBBBF8A0);
            if (v104(v165, 1, v103) == 1)
            {
              sub_1C3F962E0(v165, &qword_1EBBBF8A0);
              uint64_t v166 = v266;
              uint64_t v167 = v248;
              uint64_t v168 = (uint64_t)v246;
            }
            else
            {
              int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
              uint64_t v168 = (uint64_t)v246;
              if (EnumCaseMultiPayload == 11)
              {
                uint64_t v167 = v248;
                sub_1C3F8ADE0(v165, v248, type metadata accessor for Proto_TaggedValue);
                uint64_t v166 = v266;
                goto LABEL_86;
              }
              sub_1C3F8B288(v165, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              uint64_t v166 = v266;
              uint64_t v167 = v248;
            }
            sub_1C4496888();
            uint64_t v209 = *(int *)(v109 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v167 + v209) = qword_1EA39AF60;
            swift_retain();
LABEL_86:
            sub_1C3F8B288(v260, type metadata accessor for Proto_Value);
            uint64_t v210 = *(void *)(v167 + *(int *)(v109 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v210, v168, &qword_1EBBC0540);
            if (v219(v168, 1, v100) == 1)
            {
              uint64_t v211 = v247;
              sub_1C4496888();
              uint64_t v212 = *(int *)(v100 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v211 + v212) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v168, &qword_1EBBC0540);
            }
            else
            {
              uint64_t v211 = v247;
              sub_1C3F8ADE0(v168, v247, type metadata accessor for Proto_Value);
            }
            uint64_t v213 = v265;
            sub_1C3F8B288(v167, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v214 = sub_1C3F974B0(v211, v213);
            swift_release();
            AnyCRValue.init(from:)(v214, &v279);
            if (v166)
            {
LABEL_92:
              swift_release();
              swift_setDeallocating();
              return swift_release();
            }
            swift_release();
            swift_release();
            uint64_t v215 = v279;
            uint64_t v216 = v218;
            *uint64_t v218 = v111;
            v216[1] = v215;
            uint64_t v217 = v253;
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v254 + 32))(v255, v216, v217);
        }
      }
      swift_retain();
      sub_1C3F8B288(v102, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    uint64_t v107 = v269;
    sub_1C4496888();
    uint64_t v108 = *(int *)(v270 + 20);
    if (qword_1EA39AF70 != -1) {
      swift_once();
    }
    *(void *)(v107 + v108) = qword_1EA39AF60;
    goto LABEL_12;
  }
  sub_1C3FE3FF0();
  swift_allocError();
  *(void *)uint64_t v96 = 0xD000000000000017;
  *(void *)(v96 + 8) = 0x80000001C44B0F00;
  *(unsigned char *)(v96 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t TaggedValue_4.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t v311 = a1;
  uint64_t v321 = a2[5];
  uint64_t v304 = *(void *)(v321 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](a1);
  uint64_t v307 = (char *)&v262 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v312 = *(void *)(v5 + 32);
  uint64_t v303 = *(void *)(v312 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  uint64_t v306 = (char *)&v262 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v302 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v305 = (char *)&v262 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v293 = (uint64_t)&v262 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v292 = (uint64_t)&v262 - v14;
  uint64_t v309 = type metadata accessor for Proto_Value(0);
  uint64_t v291 = *(void *)(v309 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v309);
  uint64_t v287 = (uint64_t)&v262 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v290 = (uint64_t)&v262 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v289 = (uint64_t)&v262 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v288 = (uint64_t)&v262 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v286 = (uint64_t)&v262 - v23;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v25 = MEMORY[0x1F4188790](v24 - 8);
  uint64_t v273 = (uint64_t)&v262 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v285 = (uint64_t)&v262 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v274 = (uint64_t)&v262 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v284 = (uint64_t)&v262 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v272 = (uint64_t)&v262 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v283 = (uint64_t)&v262 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v271 = (uint64_t)&v262 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v282 = (uint64_t)&v262 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v270 = (uint64_t)&v262 - v42;
  MEMORY[0x1F4188790](v41);
  uint64_t v281 = (uint64_t)&v262 - v43;
  uint64_t v308 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v44 = MEMORY[0x1F4188790](v308);
  uint64_t v276 = (uint64_t)&v262 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  uint64_t v296 = (uint64_t)&v262 - v47;
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  uint64_t v277 = (uint64_t)&v262 - v49;
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  uint64_t v280 = (uint64_t)&v262 - v51;
  uint64_t v52 = MEMORY[0x1F4188790](v50);
  uint64_t v275 = (uint64_t)&v262 - v53;
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  uint64_t v295 = (uint64_t)&v262 - v55;
  uint64_t v56 = MEMORY[0x1F4188790](v54);
  uint64_t v279 = (uint64_t)&v262 - v57;
  uint64_t v58 = MEMORY[0x1F4188790](v56);
  uint64_t v294 = (uint64_t)&v262 - v59;
  uint64_t v60 = MEMORY[0x1F4188790](v58);
  uint64_t v278 = (uint64_t)&v262 - v61;
  uint64_t v62 = MEMORY[0x1F4188790](v60);
  uint64_t v64 = (char *)&v262 - v63;
  uint64_t v65 = a2[2];
  uint64_t v301 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v67 = (char *)&v262 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = a2[6];
  uint64_t v69 = a2[7];
  uint64_t v70 = a2[8];
  uint64_t v71 = a2[9];
  uint64_t v313 = v65;
  uint64_t v314 = v9;
  uint64_t v300 = v9;
  uint64_t v315 = v312;
  uint64_t v316 = v321;
  uint64_t v317 = v68;
  uint64_t v318 = v69;
  uint64_t v319 = v70;
  uint64_t v320 = v71;
  uint64_t v298 = type metadata accessor for TaggedValue_4.TaggedEnum();
  uint64_t v297 = *(void *)(v298 - 8);
  MEMORY[0x1F4188790](v298);
  uint64_t v73 = (uint64_t *)((char *)&v262 - v72);
  uint64_t v74 = v310;
  uint64_t result = sub_1C3F6DD10();
  if (v74) {
    return result;
  }
  uint64_t v263 = v64;
  uint64_t v269 = v67;
  uint64_t v264 = v68;
  uint64_t v265 = v69;
  uint64_t v266 = v70;
  uint64_t v267 = v71;
  uint64_t v268 = v65;
  uint64_t v310 = result;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v297 + 16))(v73, v299, v298);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v77 = v310;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v307 = 0;
      (*(void (**)(char *, uint64_t *, uint64_t))(v302 + 32))(v305, v73, v300);
      uint64_t v86 = v77 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v87 = *(void *)(v86 + *(int *)(v309 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v88 = v87;
      uint64_t v89 = v282;
      sub_1C3F970C4(v88, v282, &qword_1EBBBF8A0);
      uint64_t v90 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v91 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 48);
      if (v91(v89, 1, v90) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v89, &qword_1EBBBF8A0);
        uint64_t v92 = v294;
      }
      else
      {
        int v117 = swift_getEnumCaseMultiPayload();
        uint64_t v92 = v294;
        if (v117 == 11)
        {
          sub_1C3F8ADE0(v89, v294, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v118 = v308;
          goto LABEL_37;
        }
        swift_retain();
        sub_1C3F8B288(v89, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v118 = v308;
      uint64_t v144 = *(int *)(v308 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v118 = v308;
      }
      *(void *)(v92 + v144) = qword_1EA39AF60;
      swift_retain();
LABEL_37:
      uint64_t v145 = *(int *)(v118 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v146 = swift_retain();
        uint64_t v147 = sub_1C4400A40(v146);
        uint64_t v92 = v294;
        *(void *)(v294 + v145) = v147;
        swift_release();
      }
      uint64_t v148 = *(void *)(v92 + v145);
      swift_beginAccess();
      *(void *)(v148 + 16) = 1;
      sub_1C43F0970(v92);
      uint64_t v149 = swift_endAccess();
      MEMORY[0x1F4188790](v149);
      uint64_t v150 = v300;
      *(&v262 - 10) = v268;
      *(&v262 - 9) = v150;
      uint64_t v151 = v321;
      *(&v262 - 8) = v312;
      *(&v262 - 7) = v151;
      uint64_t v152 = v265;
      *(&v262 - 6) = v264;
      *(&v262 - 5) = v152;
      uint64_t v153 = v267;
      *(&v262 - 4) = v266;
      *(&v262 - 3) = v153;
      uint64_t v154 = v305;
      uint64_t v155 = v311;
      *(&v262 - 2) = (uint64_t)v305;
      *(&v262 - 1) = v155;
      uint64_t v156 = v307;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C26A0, v288);
      if (v156)
      {
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v302 + 8))(v154, v150);
      }
      uint64_t v307 = 0;
      swift_beginAccess();
      uint64_t v157 = *(void *)(v86 + *(int *)(v309 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v158 = v271;
      sub_1C3F970C4(v157, v271, &qword_1EBBBF8A0);
      if (v91(v158, 1, v90) == 1)
      {
        sub_1C3F962E0(v158, &qword_1EBBBF8A0);
        uint64_t v159 = v293;
        uint64_t v160 = v292;
        uint64_t v161 = v291;
        uint64_t v162 = v288;
        uint64_t v163 = v279;
      }
      else
      {
        int v216 = swift_getEnumCaseMultiPayload();
        uint64_t v159 = v293;
        uint64_t v160 = v292;
        uint64_t v161 = v291;
        uint64_t v162 = v288;
        uint64_t v163 = v279;
        if (v216 == 11)
        {
          sub_1C3F8ADE0(v158, v279, type metadata accessor for Proto_TaggedValue);
          uint64_t v217 = v308;
LABEL_92:
          uint64_t v234 = *(int *)(v217 + 20);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for Proto_TaggedValue._StorageClass(0);
            swift_allocObject();
            uint64_t v235 = swift_retain();
            uint64_t v236 = sub_1C4400A40(v235);
            uint64_t v163 = v279;
            *(void *)(v279 + v234) = v236;
            swift_release();
          }
          uint64_t v237 = v163;
          uint64_t v238 = *(void *)(v163 + v234);
          sub_1C3F8ADE0(v162, v160, type metadata accessor for Proto_Value);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v161 + 56))(v160, 0, 1, v309);
          sub_1C4124B88(v160, v159);
          uint64_t v239 = v238
               + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
          swift_beginAccess();
          swift_retain();
          sub_1C4124BF0(v159, v239);
          swift_endAccess();
          swift_release();
          sub_1C43F0970(v237);
          swift_endAccess();
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v302 + 8))(v305, v300);
        }
        sub_1C3F8B288(v158, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v217 = v308;
      uint64_t v232 = v163;
      uint64_t v233 = *(int *)(v308 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v217 = v308;
      }
      *(void *)(v232 + v233) = qword_1EA39AF60;
      swift_retain();
      uint64_t v163 = v232;
      goto LABEL_92;
    case 2:
      uint64_t v307 = 0;
      (*(void (**)(char *, uint64_t *, uint64_t))(v303 + 32))(v306, v73, v312);
      uint64_t v93 = v77 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v94 = *(void *)(v93 + *(int *)(v309 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v95 = v283;
      sub_1C3F970C4(v94, v283, &qword_1EBBBF8A0);
      uint64_t v96 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v97 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 48);
      int v98 = v97(v95, 1, v96);
      uint64_t v99 = v300;
      if (v98 == 1)
      {
        swift_retain();
        sub_1C3F962E0(v95, &qword_1EBBBF8A0);
        uint64_t v100 = v295;
      }
      else
      {
        int v119 = swift_getEnumCaseMultiPayload();
        uint64_t v100 = v295;
        if (v119 == 11)
        {
          sub_1C3F8ADE0(v95, v295, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v120 = v308;
          goto LABEL_47;
        }
        swift_retain();
        sub_1C3F8B288(v95, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v120 = v308;
      uint64_t v164 = *(int *)(v308 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v120 = v308;
      }
      *(void *)(v100 + v164) = qword_1EA39AF60;
      swift_retain();
LABEL_47:
      uint64_t v165 = *(int *)(v120 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v166 = swift_retain();
        uint64_t v167 = sub_1C4400A40(v166);
        uint64_t v100 = v295;
        *(void *)(v295 + v165) = v167;
        swift_release();
      }
      uint64_t v168 = *(void *)(v100 + v165);
      swift_beginAccess();
      *(void *)(v168 + 16) = 2;
      sub_1C43F0970(v100);
      uint64_t v169 = swift_endAccess();
      MEMORY[0x1F4188790](v169);
      *(&v262 - 10) = v268;
      *(&v262 - 9) = v99;
      uint64_t v170 = v312;
      uint64_t v171 = v321;
      *(&v262 - 8) = v312;
      *(&v262 - 7) = v171;
      uint64_t v172 = v265;
      *(&v262 - 6) = v264;
      *(&v262 - 5) = v172;
      uint64_t v173 = v267;
      *(&v262 - 4) = v266;
      *(&v262 - 3) = v173;
      uint64_t v174 = v306;
      uint64_t v175 = v311;
      *(&v262 - 2) = (uint64_t)v306;
      *(&v262 - 1) = v175;
      uint64_t v176 = v307;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2658, v289);
      if (v176)
      {
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v303 + 8))(v174, v170);
      }
      swift_beginAccess();
      uint64_t v177 = *(void *)(v93 + *(int *)(v309 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v178 = v177;
      uint64_t v179 = v272;
      sub_1C3F970C4(v178, v272, &qword_1EBBBF8A0);
      if (v97(v179, 1, v96) == 1)
      {
        sub_1C3F962E0(v179, &qword_1EBBBF8A0);
        uint64_t v180 = v291;
        uint64_t v181 = v289;
        uint64_t v182 = v275;
      }
      else
      {
        int v218 = swift_getEnumCaseMultiPayload();
        uint64_t v180 = v291;
        uint64_t v181 = v289;
        uint64_t v182 = v275;
        if (v218 == 11)
        {
          sub_1C3F8ADE0(v179, v275, type metadata accessor for Proto_TaggedValue);
          uint64_t v219 = v308;
          goto LABEL_99;
        }
        sub_1C3F8B288(v179, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v219 = v308;
      uint64_t v240 = *(int *)(v308 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v219 = v308;
      }
      *(void *)(v182 + v240) = qword_1EA39AF60;
      swift_retain();
LABEL_99:
      uint64_t v241 = *(int *)(v219 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v242 = swift_retain();
        *(void *)(v182 + v241) = sub_1C4400A40(v242);
        swift_release();
      }
      uint64_t v243 = *(void *)(v182 + v241);
      uint64_t v244 = v292;
      sub_1C3F8ADE0(v181, v292, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v180 + 56))(v244, 0, 1, v309);
      uint64_t v245 = v293;
      sub_1C4124B88(v244, v293);
      uint64_t v246 = v243
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v245, v246);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v182);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v303 + 8))(v306, v312);
    case 3:
      (*(void (**)(char *, uint64_t *, uint64_t))(v304 + 32))(v307, v73, v321);
      uint64_t v101 = v77 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v102 = *(void *)(v101 + *(int *)(v309 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v103 = v284;
      sub_1C3F970C4(v102, v284, &qword_1EBBBF8A0);
      uint64_t v104 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v105 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 48);
      int v106 = v105(v103, 1, v104);
      uint64_t v306 = (char *)v105;
      if (v106 == 1)
      {
        swift_retain();
        sub_1C3F962E0(v103, &qword_1EBBBF8A0);
        uint64_t v107 = v280;
      }
      else
      {
        int v121 = swift_getEnumCaseMultiPayload();
        uint64_t v107 = v280;
        if (v121 == 11)
        {
          sub_1C3F8ADE0(v103, v280, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v122 = v308;
          goto LABEL_57;
        }
        swift_retain();
        sub_1C3F8B288(v103, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v122 = v308;
      uint64_t v183 = *(int *)(v308 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v122 = v308;
      }
      *(void *)(v107 + v183) = qword_1EA39AF60;
      swift_retain();
LABEL_57:
      uint64_t v184 = *(int *)(v122 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v185 = swift_retain();
        *(void *)(v107 + v184) = sub_1C4400A40(v185);
        swift_release();
      }
      uint64_t v186 = *(void *)(v107 + v184);
      swift_beginAccess();
      *(void *)(v186 + 16) = 3;
      sub_1C43F0970(v107);
      uint64_t v187 = swift_endAccess();
      MEMORY[0x1F4188790](v187);
      uint64_t v188 = v300;
      *(&v262 - 10) = v268;
      *(&v262 - 9) = v188;
      uint64_t v189 = v321;
      *(&v262 - 8) = v312;
      *(&v262 - 7) = v189;
      uint64_t v190 = v265;
      *(&v262 - 6) = v264;
      *(&v262 - 5) = v190;
      uint64_t v191 = v267;
      *(&v262 - 4) = v266;
      *(&v262 - 3) = v191;
      uint64_t v192 = v311;
      *(&v262 - 2) = (uint64_t)v307;
      *(&v262 - 1) = v192;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2610, v290);
      swift_beginAccess();
      uint64_t v193 = *(void *)(v101 + *(int *)(v309 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v194 = v274;
      sub_1C3F970C4(v193, v274, &qword_1EBBBF8A0);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v306)(v194, 1, v104) == 1)
      {
        sub_1C3F962E0(v194, &qword_1EBBBF8A0);
        uint64_t v195 = v292;
        uint64_t v196 = v291;
        uint64_t v197 = v290;
        uint64_t v198 = v277;
      }
      else
      {
        int v220 = swift_getEnumCaseMultiPayload();
        uint64_t v195 = v292;
        uint64_t v196 = v291;
        uint64_t v197 = v290;
        uint64_t v198 = v277;
        if (v220 == 11)
        {
          sub_1C3F8ADE0(v194, v277, type metadata accessor for Proto_TaggedValue);
          uint64_t v221 = v308;
          goto LABEL_106;
        }
        sub_1C3F8B288(v194, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v221 = v308;
      uint64_t v247 = *(int *)(v308 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v221 = v308;
      }
      *(void *)(v198 + v247) = qword_1EA39AF60;
      swift_retain();
LABEL_106:
      uint64_t v248 = *(int *)(v221 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v249 = swift_retain();
        uint64_t v250 = sub_1C4400A40(v249);
        uint64_t v198 = v277;
        *(void *)(v277 + v248) = v250;
        swift_release();
      }
      uint64_t v251 = *(void *)(v198 + v248);
      sub_1C3F8ADE0(v197, v195, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v196 + 56))(v195, 0, 1, v309);
      uint64_t v252 = v293;
      sub_1C4124B88(v195, v293);
      uint64_t v253 = v198;
      uint64_t v254 = v251
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v252, v254);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v253);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v304 + 8))(v307, v321);
    case 4:
      uint64_t v307 = 0;
      uint64_t v109 = *v73;
      uint64_t v108 = v73[1];
      uint64_t v110 = v310 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v111 = *(void *)(v110 + *(int *)(v309 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v112 = v285;
      sub_1C3F970C4(v111, v285, &qword_1EBBBF8A0);
      uint64_t v113 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v114 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 48);
      if (v114(v112, 1, v113) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v112, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v123 = v296;
          sub_1C3F8ADE0(v112, v296, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v124 = v308;
          goto LABEL_65;
        }
        swift_retain();
        sub_1C3F8B288(v112, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v199 = v296;
      sub_1C4496888();
      uint64_t v124 = v308;
      uint64_t v200 = v199;
      uint64_t v201 = *(int *)(v308 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v124 = v308;
      }
      *(void *)(v200 + v201) = qword_1EA39AF60;
      swift_retain();
      uint64_t v123 = v200;
LABEL_65:
      uint64_t v202 = *(int *)(v124 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v203 = swift_retain();
        uint64_t v204 = sub_1C4400A40(v203);
        uint64_t v123 = v296;
        *(void *)(v296 + v202) = v204;
        swift_release();
      }
      uint64_t v205 = *(void *)(v123 + v202);
      swift_beginAccess();
      *(void *)(v205 + 16) = v109;
      sub_1C43F0970(v123);
      swift_endAccess();
      swift_retain();
      uint64_t v206 = swift_retain();
      uint64_t v207 = v307;
      sub_1C400B83C(v206, v108, v206, v287);
      if (v207)
      {
        swift_release();
        return swift_release();
      }
      swift_beginAccess();
      uint64_t v208 = *(void *)(v110 + *(int *)(v309 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v209 = v208;
      uint64_t v210 = v273;
      sub_1C3F970C4(v209, v273, &qword_1EBBBF8A0);
      if (v114(v210, 1, v113) == 1)
      {
        sub_1C3F962E0(v210, &qword_1EBBBF8A0);
        uint64_t v211 = v292;
        uint64_t v212 = v309;
        uint64_t v213 = v276;
      }
      else
      {
        int v222 = swift_getEnumCaseMultiPayload();
        uint64_t v211 = v292;
        uint64_t v213 = v276;
        if (v222 == 11)
        {
          sub_1C3F8ADE0(v210, v276, type metadata accessor for Proto_TaggedValue);
          uint64_t v212 = v309;
          uint64_t v223 = v308;
          goto LABEL_113;
        }
        sub_1C3F8B288(v210, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        uint64_t v212 = v309;
      }
      sub_1C4496888();
      uint64_t v223 = v308;
      uint64_t v255 = *(int *)(v308 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v223 = v308;
      }
      *(void *)(v213 + v255) = qword_1EA39AF60;
      swift_retain();
LABEL_113:
      uint64_t v256 = *(int *)(v223 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v257 = swift_retain();
        *(void *)(v213 + v256) = sub_1C4400A40(v257);
        swift_release();
      }
      uint64_t v258 = *(void *)(v213 + v256);
      sub_1C3F8ADE0(v287, v211, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v291 + 56))(v211, 0, 1, v212);
      uint64_t v259 = v211;
      uint64_t v260 = v293;
      sub_1C4124B88(v259, v293);
      uint64_t v261 = v258
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v260, v261);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v213);
      swift_endAccess();
      swift_release();
      return swift_release();
    default:
      uint64_t v307 = 0;
      (*(void (**)(char *, uint64_t *, uint64_t))(v301 + 32))(v269, v73, v268);
      uint64_t v78 = v77 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v79 = *(void *)(v78 + *(int *)(v309 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v80 = v79;
      uint64_t v81 = v281;
      sub_1C3F970C4(v80, v281, &qword_1EBBBF8A0);
      uint64_t v82 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v83 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 48);
      if (v83(v81, 1, v82) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v81, &qword_1EBBBF8A0);
        uint64_t v84 = v309;
        uint64_t v85 = (uint64_t)v263;
      }
      else
      {
        int v115 = swift_getEnumCaseMultiPayload();
        uint64_t v85 = (uint64_t)v263;
        if (v115 == 11)
        {
          sub_1C3F8ADE0(v81, (uint64_t)v263, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v84 = v309;
          uint64_t v116 = v308;
          goto LABEL_27;
        }
        swift_retain();
        sub_1C3F8B288(v81, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        uint64_t v84 = v309;
      }
      sub_1C4496888();
      uint64_t v116 = v308;
      uint64_t v125 = *(int *)(v308 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v116 = v308;
      }
      *(void *)(v85 + v125) = qword_1EA39AF60;
      swift_retain();
LABEL_27:
      uint64_t v126 = *(int *)(v116 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v127 = swift_retain();
        *(void *)(v85 + v126) = sub_1C4400A40(v127);
        swift_release();
      }
      uint64_t v128 = *(void *)(v85 + v126);
      swift_beginAccess();
      *(void *)(v128 + 16) = 0;
      sub_1C43F0970(v85);
      uint64_t v129 = swift_endAccess();
      MEMORY[0x1F4188790](v129);
      uint64_t v130 = v268;
      uint64_t v131 = v300;
      *(&v262 - 10) = v268;
      *(&v262 - 9) = v131;
      uint64_t v132 = v321;
      *(&v262 - 8) = v312;
      *(&v262 - 7) = v132;
      uint64_t v133 = v265;
      *(&v262 - 6) = v264;
      *(&v262 - 5) = v133;
      uint64_t v134 = v267;
      *(&v262 - 4) = v266;
      *(&v262 - 3) = v134;
      uint64_t v135 = v269;
      uint64_t v136 = v311;
      *(&v262 - 2) = (uint64_t)v269;
      *(&v262 - 1) = v136;
      uint64_t v137 = v307;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C26E8, v286);
      if (v137)
      {
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v301 + 8))(v135, v130);
      }
      uint64_t v307 = 0;
      swift_beginAccess();
      uint64_t v138 = *(void *)(v78 + *(int *)(v84 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v139 = v270;
      sub_1C3F970C4(v138, v270, &qword_1EBBBF8A0);
      if (v83(v139, 1, v82) == 1)
      {
        sub_1C3F962E0(v139, &qword_1EBBBF8A0);
        uint64_t v140 = v293;
        uint64_t v141 = v292;
        uint64_t v142 = v286;
        uint64_t v143 = v278;
      }
      else
      {
        int v214 = swift_getEnumCaseMultiPayload();
        uint64_t v140 = v293;
        uint64_t v141 = v292;
        uint64_t v142 = v286;
        uint64_t v143 = v278;
        if (v214 == 11)
        {
          sub_1C3F8ADE0(v139, v278, type metadata accessor for Proto_TaggedValue);
          uint64_t v215 = v308;
          goto LABEL_85;
        }
        sub_1C3F8B288(v139, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v215 = v308;
      uint64_t v224 = v143;
      uint64_t v225 = *(int *)(v308 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v215 = v308;
      }
      *(void *)(v224 + v225) = qword_1EA39AF60;
      swift_retain();
      uint64_t v143 = v224;
LABEL_85:
      uint64_t v226 = *(int *)(v215 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v227 = swift_retain();
        uint64_t v228 = sub_1C4400A40(v227);
        uint64_t v143 = v278;
        *(void *)(v278 + v226) = v228;
        swift_release();
      }
      uint64_t v229 = v143;
      uint64_t v230 = *(void *)(v143 + v226);
      sub_1C3F8ADE0(v142, v141, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v291 + 56))(v141, 0, 1, v84);
      sub_1C4124B88(v141, v140);
      uint64_t v231 = v230
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v140, v231);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v229);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v301 + 8))(v269, v268);
  }
}

uint64_t sub_1C419DC38@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return TaggedValue_4.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a2[8], a3, a2[9]);
}

uint64_t sub_1C419DC70(uint64_t a1, void *a2)
{
  return TaggedValue_4.encode(to:)(a1, a2);
}

uint64_t TaggedValue_4<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v43 = a6;
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v39 = a3;
  uint64_t v45 = a1;
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v38 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v37 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v7);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 24);
  uint64_t v36 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v11);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v35 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47[0] = v20;
  v47[1] = v15;
  v47[2] = v10;
  uint64_t v48 = v6;
  long long v24 = *(_OWORD *)(v23 + 64);
  long long v49 = *(_OWORD *)(v23 + 48);
  long long v50 = v24;
  uint64_t v25 = type metadata accessor for TaggedValue_4.TaggedEnum();
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v35 - v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))((char *)&v35 - v26, v44, v25);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v31 = v36;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v18, v27, v15);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v18, v15);
      break;
    case 2u:
      uint64_t v32 = v37;
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v13, v27, v10);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v13, v10);
      break;
    case 3u:
      uint64_t v33 = v42;
      uint64_t v34 = v38;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v38, v27, v6);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v34, v6);
      break;
    case 4u:
      (*(void (**)(uint64_t *__return_ptr))(**((void **)v27 + 1) + 80))(v46);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DE70);
      swift_dynamicCast();
      __swift_project_boxed_opaque_existential_1(v47, v48);
      sub_1C4497068();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
      uint64_t result = swift_release();
      break;
    default:
      uint64_t v29 = v35;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v22, v27, v20);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v22, v20);
      break;
  }
  return result;
}

uint64_t sub_1C419E1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TaggedValue_4<>.encode(to:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), *(void *)(a3 - 24), *(void *)(a3 - 32));
}

uint64_t TaggedValue_5.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v303 = a9;
  uint64_t v272 = a2;
  uint64_t v311 = a2;
  uint64_t v312 = a3;
  uint64_t v273 = a3;
  uint64_t v274 = a4;
  uint64_t v313 = a4;
  uint64_t v314 = a5;
  uint64_t v275 = a5;
  uint64_t v276 = a6;
  uint64_t v315 = a6;
  uint64_t v316 = a7;
  uint64_t v270 = a7;
  uint64_t v271 = a8;
  uint64_t v317 = a8;
  uint64_t v318 = a10;
  uint64_t v267 = a10;
  uint64_t v268 = a11;
  uint64_t v319 = a11;
  uint64_t v320 = a12;
  uint64_t v269 = a12;
  uint64_t v301 = type metadata accessor for TaggedValue_5.TaggedEnum();
  uint64_t v302 = *(void *)(v301 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v301);
  uint64_t v249 = (uint64_t *)((char *)&v248 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v294 = (char *)&v248 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v293 = (char *)&v248 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v292 = (char *)&v248 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v291 = (char *)&v248 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v290 = (char *)&v248 - v23;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v25 = MEMORY[0x1F4188790](v24 - 8);
  uint64_t v263 = (uint64_t)&v248 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v262 = (uint64_t)&v248 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v261 = (uint64_t)&v248 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v259 = (uint64_t)&v248 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v258 = (uint64_t)&v248 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v256 = (uint64_t)&v248 - v36;
  MEMORY[0x1F4188790](v35);
  uint64_t v306 = (uint64_t)&v248 - v37;
  uint64_t v309 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v38 = MEMORY[0x1F4188790](v309);
  uint64_t v289 = (uint64_t)&v248 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  uint64_t v288 = (uint64_t)&v248 - v41;
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  uint64_t v287 = (uint64_t)&v248 - v43;
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  uint64_t v286 = (uint64_t)&v248 - v45;
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  uint64_t v285 = (uint64_t)&v248 - v47;
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  uint64_t v284 = (uint64_t)&v248 - v49;
  MEMORY[0x1F4188790](v48);
  uint64_t v307 = (char *)&v248 - v50;
  uint64_t v51 = type metadata accessor for Proto_Value(0);
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  uint64_t v283 = (uint64_t)&v248 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = MEMORY[0x1F4188790](v53);
  uint64_t v300 = (uint64_t)&v248 - v56;
  uint64_t v57 = MEMORY[0x1F4188790](v55);
  uint64_t v266 = (char *)&v248 - v58;
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v299 = (uint64_t)&v248 - v60;
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  uint64_t v265 = (char *)&v248 - v62;
  uint64_t v63 = MEMORY[0x1F4188790](v61);
  uint64_t v298 = (uint64_t)&v248 - v64;
  uint64_t v65 = MEMORY[0x1F4188790](v63);
  uint64_t v264 = (char *)&v248 - v66;
  uint64_t v67 = MEMORY[0x1F4188790](v65);
  uint64_t v297 = (uint64_t)&v248 - v68;
  uint64_t v69 = MEMORY[0x1F4188790](v67);
  uint64_t v260 = (char *)&v248 - v70;
  uint64_t v71 = MEMORY[0x1F4188790](v69);
  uint64_t v296 = (uint64_t)&v248 - v72;
  uint64_t v73 = MEMORY[0x1F4188790](v71);
  uint64_t v257 = (char *)&v248 - v74;
  uint64_t v75 = MEMORY[0x1F4188790](v73);
  uint64_t v295 = (uint64_t)&v248 - v76;
  MEMORY[0x1F4188790](v75);
  uint64_t v310 = (uint64_t)&v248 - v77;
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v79 = MEMORY[0x1F4188790](v78 - 8);
  uint64_t v255 = (char *)&v248 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = MEMORY[0x1F4188790](v79);
  uint64_t v282 = (uint64_t)&v248 - v82;
  uint64_t v83 = MEMORY[0x1F4188790](v81);
  uint64_t v254 = (uint64_t)&v248 - v84;
  uint64_t v85 = MEMORY[0x1F4188790](v83);
  uint64_t v281 = (uint64_t)&v248 - v86;
  uint64_t v87 = MEMORY[0x1F4188790](v85);
  uint64_t v253 = (uint64_t)&v248 - v88;
  uint64_t v89 = MEMORY[0x1F4188790](v87);
  uint64_t v280 = (uint64_t)&v248 - v90;
  uint64_t v91 = MEMORY[0x1F4188790](v89);
  uint64_t v252 = (uint64_t)&v248 - v92;
  uint64_t v93 = MEMORY[0x1F4188790](v91);
  uint64_t v279 = (uint64_t)&v248 - v94;
  uint64_t v95 = MEMORY[0x1F4188790](v93);
  uint64_t v251 = (uint64_t)&v248 - v96;
  uint64_t v97 = MEMORY[0x1F4188790](v95);
  uint64_t v278 = (uint64_t)&v248 - v98;
  uint64_t v99 = MEMORY[0x1F4188790](v97);
  uint64_t v250 = (uint64_t)&v248 - v100;
  uint64_t v101 = MEMORY[0x1F4188790](v99);
  uint64_t v277 = (uint64_t)&v248 - v102;
  uint64_t v103 = MEMORY[0x1F4188790](v101);
  uint64_t v105 = (char *)&v248 - v104;
  MEMORY[0x1F4188790](v103);
  uint64_t v107 = (char *)&v248 - v106;
  uint64_t v108 = a1;
  uint64_t v109 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v109, (uint64_t)v107, &qword_1EBBC0540);
  uint64_t v112 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
  uint64_t v111 = v52 + 48;
  uint64_t v110 = v112;
  unsigned int v113 = v112((uint64_t)v107, 1, v51);
  sub_1C3F962E0((uint64_t)v107, &qword_1EBBC0540);
  if (v113 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v108;
    sub_1C3F970C4(v109, (uint64_t)v105, &qword_1EBBC0540);
    uint64_t v305 = v111;
    uint64_t v116 = v110;
    if (v110((uint64_t)v105, 1, v51) == 1)
    {
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      JUMPOUT(0x1C41A0570);
    }
    uint64_t v117 = v108;
    uint64_t v118 = v310;
    sub_1C3F8ADE0((uint64_t)v105, v310, type metadata accessor for Proto_Value);
    uint64_t v304 = v51;
    uint64_t v119 = *(void *)(v118 + *(int *)(v51 + 20))
         + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v120 = v306;
    sub_1C3F970C4(v119, v306, &qword_1EBBBF8A0);
    uint64_t v121 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    uint64_t v122 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v121 - 8) + 48);
    int v123 = v122(v120, 1, v121);
    uint64_t v124 = (uint64_t)v307;
    if (v123 == 1)
    {
      uint64_t v125 = v121;
      swift_retain();
      sub_1C3F962E0(v120, &qword_1EBBBF8A0);
    }
    else
    {
      uint64_t v125 = v121;
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        sub_1C3F8ADE0(v120, v124, type metadata accessor for Proto_TaggedValue);
        uint64_t v126 = v309;
LABEL_12:
        swift_retain();
        sub_1C3F8B288(v310, type metadata accessor for Proto_Value);
        swift_beginAccess();
        sub_1C3F8B288(v124, type metadata accessor for Proto_TaggedValue);
        uint64_t v128 = inited;
        switch(inited)
        {
          case 0:
            uint64_t v129 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v130 = v277;
            sub_1C3F970C4(v129, v277, &qword_1EBBC0540);
            uint64_t v131 = v304;
            if (v116(v130, 1, v304) == 1) {
              goto LABEL_112;
            }
            uint64_t v132 = v130;
            uint64_t v133 = v295;
            sub_1C3F8ADE0(v132, v295, type metadata accessor for Proto_Value);
            uint64_t v134 = *(void *)(v133 + *(int *)(v131 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v135 = v134;
            uint64_t v136 = v256;
            sub_1C3F970C4(v135, v256, &qword_1EBBBF8A0);
            int v137 = v122(v136, 1, v125);
            uint64_t v138 = (uint64_t)v257;
            if (v137 == 1)
            {
              sub_1C3F962E0(v136, &qword_1EBBBF8A0);
              uint64_t v139 = v308;
              uint64_t v140 = v284;
            }
            else
            {
              int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
              uint64_t v139 = v308;
              uint64_t v140 = v284;
              if (EnumCaseMultiPayload == 11)
              {
                sub_1C3F8ADE0(v136, v284, type metadata accessor for Proto_TaggedValue);
                goto LABEL_47;
              }
              sub_1C3F8B288(v136, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v206 = *(int *)(v126 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v140 + v206) = qword_1EA39AF60;
            swift_retain();
LABEL_47:
            sub_1C3F8B288(v295, type metadata accessor for Proto_Value);
            uint64_t v207 = *(void *)(v140 + *(int *)(v126 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v208 = v250;
            sub_1C3F970C4(v207, v250, &qword_1EBBC0540);
            uint64_t v209 = v304;
            if (v116(v208, 1, v304) == 1)
            {
              sub_1C4496888();
              uint64_t v210 = *(int *)(v209 + 20);
              uint64_t v211 = v290;
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v138 + v210) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v208, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v208, v138, type metadata accessor for Proto_Value);
              uint64_t v211 = v290;
            }
            sub_1C3F8B288(v140, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v212 = sub_1C3F974B0(v138, v117);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v270 + 8) + 8) + 8))(v212);
            if (v139) {
              goto LABEL_97;
            }
            goto LABEL_99;
          case 1:
            uint64_t v141 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v142 = v278;
            sub_1C3F970C4(v141, v278, &qword_1EBBC0540);
            uint64_t v143 = v304;
            if (v116(v142, 1, v304) == 1) {
              goto LABEL_113;
            }
            uint64_t v144 = v142;
            uint64_t v145 = v296;
            sub_1C3F8ADE0(v144, v296, type metadata accessor for Proto_Value);
            uint64_t v146 = *(void *)(v145 + *(int *)(v143 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v147 = v146;
            uint64_t v148 = v258;
            sub_1C3F970C4(v147, v258, &qword_1EBBBF8A0);
            int v149 = v122(v148, 1, v125);
            uint64_t v150 = (uint64_t)v260;
            if (v149 == 1)
            {
              sub_1C3F962E0(v148, &qword_1EBBBF8A0);
              uint64_t v151 = v308;
              uint64_t v152 = v285;
            }
            else
            {
              int v200 = swift_getEnumCaseMultiPayload();
              uint64_t v151 = v308;
              uint64_t v152 = v285;
              if (v200 == 11)
              {
                sub_1C3F8ADE0(v148, v285, type metadata accessor for Proto_TaggedValue);
                goto LABEL_58;
              }
              sub_1C3F8B288(v148, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v213 = *(int *)(v126 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v152 + v213) = qword_1EA39AF60;
            swift_retain();
LABEL_58:
            sub_1C3F8B288(v296, type metadata accessor for Proto_Value);
            uint64_t v214 = *(void *)(v152 + *(int *)(v126 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v215 = v251;
            sub_1C3F970C4(v214, v251, &qword_1EBBC0540);
            uint64_t v216 = v304;
            if (v116(v215, 1, v304) == 1)
            {
              sub_1C4496888();
              uint64_t v217 = *(int *)(v216 + 20);
              uint64_t v211 = v291;
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v150 + v217) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v215, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v215, v150, type metadata accessor for Proto_Value);
              uint64_t v211 = v291;
            }
            sub_1C3F8B288(v152, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v218 = sub_1C3F974B0(v150, v117);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v271 + 8) + 8) + 8))(v218);
            if (!v151) {
              goto LABEL_99;
            }
            goto LABEL_97;
          case 2:
            uint64_t v153 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v154 = v279;
            sub_1C3F970C4(v153, v279, &qword_1EBBC0540);
            uint64_t v155 = v304;
            if (v116(v154, 1, v304) == 1) {
              goto LABEL_114;
            }
            uint64_t v156 = v154;
            uint64_t v157 = v297;
            sub_1C3F8ADE0(v156, v297, type metadata accessor for Proto_Value);
            uint64_t v158 = *(void *)(v157 + *(int *)(v155 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v159 = v158;
            uint64_t v160 = v259;
            sub_1C3F970C4(v159, v259, &qword_1EBBBF8A0);
            int v161 = v122(v160, 1, v125);
            uint64_t v162 = (uint64_t)v264;
            if (v161 == 1)
            {
              sub_1C3F962E0(v160, &qword_1EBBBF8A0);
              uint64_t v163 = v308;
              uint64_t v164 = v286;
            }
            else
            {
              int v201 = swift_getEnumCaseMultiPayload();
              uint64_t v163 = v308;
              uint64_t v164 = v286;
              if (v201 == 11)
              {
                sub_1C3F8ADE0(v160, v286, type metadata accessor for Proto_TaggedValue);
                goto LABEL_69;
              }
              sub_1C3F8B288(v160, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v219 = *(int *)(v126 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v164 + v219) = qword_1EA39AF60;
            swift_retain();
LABEL_69:
            sub_1C3F8B288(v297, type metadata accessor for Proto_Value);
            uint64_t v220 = *(void *)(v164 + *(int *)(v126 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v221 = v252;
            sub_1C3F970C4(v220, v252, &qword_1EBBC0540);
            uint64_t v222 = v304;
            if (v116(v221, 1, v304) == 1)
            {
              sub_1C4496888();
              uint64_t v223 = *(int *)(v222 + 20);
              uint64_t v211 = v292;
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v162 + v223) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v221, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v221, v162, type metadata accessor for Proto_Value);
              uint64_t v211 = v292;
            }
            sub_1C3F8B288(v164, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v224 = sub_1C3F974B0(v162, v117);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v267 + 8) + 8) + 8))(v224);
            if (!v163) {
              goto LABEL_99;
            }
            goto LABEL_97;
          case 3:
            uint64_t v165 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v166 = v280;
            sub_1C3F970C4(v165, v280, &qword_1EBBC0540);
            uint64_t v167 = v304;
            if (v116(v166, 1, v304) == 1) {
              goto LABEL_115;
            }
            uint64_t v168 = v166;
            uint64_t v169 = v298;
            sub_1C3F8ADE0(v168, v298, type metadata accessor for Proto_Value);
            uint64_t v170 = *(void *)(v169 + *(int *)(v167 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v171 = v170;
            uint64_t v172 = v261;
            sub_1C3F970C4(v171, v261, &qword_1EBBBF8A0);
            int v173 = v122(v172, 1, v125);
            uint64_t v174 = (uint64_t)v265;
            if (v173 == 1)
            {
              sub_1C3F962E0(v172, &qword_1EBBBF8A0);
              uint64_t v175 = v308;
              uint64_t v176 = v287;
            }
            else
            {
              int v202 = swift_getEnumCaseMultiPayload();
              uint64_t v175 = v308;
              uint64_t v176 = v287;
              if (v202 == 11)
              {
                sub_1C3F8ADE0(v172, v287, type metadata accessor for Proto_TaggedValue);
                goto LABEL_80;
              }
              sub_1C3F8B288(v172, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v225 = *(int *)(v126 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v176 + v225) = qword_1EA39AF60;
            swift_retain();
LABEL_80:
            sub_1C3F8B288(v298, type metadata accessor for Proto_Value);
            uint64_t v226 = *(void *)(v176 + *(int *)(v126 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v227 = v253;
            sub_1C3F970C4(v226, v253, &qword_1EBBC0540);
            uint64_t v228 = v304;
            if (v116(v227, 1, v304) == 1)
            {
              sub_1C4496888();
              uint64_t v229 = *(int *)(v228 + 20);
              uint64_t v211 = v293;
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v174 + v229) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v227, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v227, v174, type metadata accessor for Proto_Value);
              uint64_t v211 = v293;
            }
            sub_1C3F8B288(v176, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v230 = sub_1C3F974B0(v174, v117);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v268 + 8) + 8) + 8))(v230);
            if (!v175) {
              goto LABEL_99;
            }
            goto LABEL_97;
          case 4:
            uint64_t v177 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v178 = v281;
            sub_1C3F970C4(v177, v281, &qword_1EBBC0540);
            uint64_t v179 = v304;
            if (v116(v178, 1, v304) == 1) {
              goto LABEL_116;
            }
            uint64_t v180 = v178;
            uint64_t v181 = v299;
            sub_1C3F8ADE0(v180, v299, type metadata accessor for Proto_Value);
            uint64_t v182 = *(void *)(v181 + *(int *)(v179 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v183 = v182;
            uint64_t v184 = v262;
            sub_1C3F970C4(v183, v262, &qword_1EBBBF8A0);
            int v185 = v122(v184, 1, v125);
            uint64_t v186 = (uint64_t)v266;
            if (v185 == 1)
            {
              sub_1C3F962E0(v184, &qword_1EBBBF8A0);
              uint64_t v187 = v308;
              uint64_t v188 = v288;
            }
            else
            {
              int v203 = swift_getEnumCaseMultiPayload();
              uint64_t v187 = v308;
              uint64_t v188 = v288;
              if (v203 == 11)
              {
                sub_1C3F8ADE0(v184, v288, type metadata accessor for Proto_TaggedValue);
                goto LABEL_91;
              }
              sub_1C3F8B288(v184, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v231 = *(int *)(v126 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v188 + v231) = qword_1EA39AF60;
            swift_retain();
LABEL_91:
            sub_1C3F8B288(v299, type metadata accessor for Proto_Value);
            uint64_t v232 = *(void *)(v188 + *(int *)(v126 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v233 = v254;
            sub_1C3F970C4(v232, v254, &qword_1EBBC0540);
            uint64_t v234 = v304;
            if (v116(v233, 1, v304) == 1)
            {
              sub_1C4496888();
              uint64_t v235 = *(int *)(v234 + 20);
              uint64_t v211 = v294;
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v186 + v235) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v233, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v233, v186, type metadata accessor for Proto_Value);
              uint64_t v211 = v294;
            }
            sub_1C3F8B288(v188, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v236 = sub_1C3F974B0(v186, v117);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v269 + 8) + 8) + 8))(v236);
            if (v187) {
              goto LABEL_97;
            }
LABEL_99:
            swift_release();
            swift_release();
            uint64_t v238 = v301;
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v302 + 32))(v303, v211, v238);
          default:
            uint64_t v189 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v190 = v282;
            sub_1C3F970C4(v189, v282, &qword_1EBBC0540);
            uint64_t v191 = v304;
            if (v116(v190, 1, v304) == 1) {
              goto LABEL_117;
            }
            uint64_t v192 = v190;
            uint64_t v193 = v300;
            sub_1C3F8ADE0(v192, v300, type metadata accessor for Proto_Value);
            uint64_t v194 = *(void *)(v193 + *(int *)(v191 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v195 = v194;
            uint64_t v196 = v263;
            sub_1C3F970C4(v195, v263, &qword_1EBBBF8A0);
            if (v122(v196, 1, v125) == 1)
            {
              sub_1C3F962E0(v196, &qword_1EBBBF8A0);
              uint64_t v197 = v308;
              uint64_t v198 = v289;
            }
            else
            {
              int v204 = swift_getEnumCaseMultiPayload();
              uint64_t v197 = v308;
              uint64_t v198 = v289;
              if (v204 == 11)
              {
                sub_1C3F8ADE0(v196, v289, type metadata accessor for Proto_TaggedValue);
                uint64_t v205 = (uint64_t)v255;
                goto LABEL_104;
              }
              sub_1C3F8B288(v196, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            uint64_t v205 = (uint64_t)v255;
            sub_1C4496888();
            uint64_t v239 = *(int *)(v309 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v198 + v239) = qword_1EA39AF60;
            swift_retain();
LABEL_104:
            sub_1C3F8B288(v300, type metadata accessor for Proto_Value);
            uint64_t v240 = *(void *)(v198 + *(int *)(v309 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v240, v205, &qword_1EBBC0540);
            uint64_t v241 = v304;
            if (v116(v205, 1, v304) == 1)
            {
              uint64_t v242 = v283;
              sub_1C4496888();
              uint64_t v243 = *(int *)(v241 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v242 + v243) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v205, &qword_1EBBC0540);
            }
            else
            {
              uint64_t v242 = v283;
              sub_1C3F8ADE0(v205, v283, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v198, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v244 = sub_1C3F974B0(v242, v117);
            swift_release();
            AnyCRValue.init(from:)(v244, &v321);
            if (v197)
            {
LABEL_97:
              swift_release();
              swift_setDeallocating();
              return swift_release();
            }
            swift_release();
            swift_release();
            uint64_t v245 = v321;
            uint64_t v246 = v249;
            *uint64_t v249 = v128;
            v246[1] = v245;
            uint64_t v247 = v301;
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v302 + 32))(v303, v246, v247);
        }
      }
      swift_retain();
      sub_1C3F8B288(v120, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1C4496888();
    uint64_t v126 = v309;
    uint64_t v127 = *(int *)(v309 + 20);
    if (qword_1EA39AF70 != -1) {
      swift_once();
    }
    *(void *)(v124 + v127) = qword_1EA39AF60;
    goto LABEL_12;
  }
  sub_1C3FE3FF0();
  swift_allocError();
  *(void *)uint64_t v114 = 0xD000000000000017;
  *(void *)(v114 + 8) = 0x80000001C44B0F00;
  *(unsigned char *)(v114 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t TaggedValue_5.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t v362 = a1;
  uint64_t v376 = a2[6];
  uint64_t v354 = *(void *)(v376 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](a1);
  uint64_t v358 = (char *)&v307 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v363 = *(void *)(v5 + 40);
  uint64_t v353 = *(void *)(v363 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  uint64_t v357 = (char *)&v307 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v365 = *(void *)(v8 + 32);
  uint64_t v352 = *(void *)(v365 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v356 = (char *)&v307 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v364 = *(void *)(v11 + 24);
  uint64_t v351 = *(void *)(v364 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v355 = (char *)&v307 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v346 = (uint64_t)&v307 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v345 = (uint64_t)&v307 - v16;
  uint64_t v359 = type metadata accessor for Proto_Value(0);
  uint64_t v344 = *(void *)(v359 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v359);
  uint64_t v339 = (uint64_t)&v307 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v342 = (uint64_t)&v307 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v341 = (uint64_t)&v307 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v340 = (uint64_t)&v307 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v338 = (uint64_t)&v307 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v337 = (uint64_t)&v307 - v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v29 = MEMORY[0x1F4188790](v28 - 8);
  uint64_t v318 = (uint64_t)&v307 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v336 = (uint64_t)&v307 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v319 = (uint64_t)&v307 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v331 = (uint64_t)&v307 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v317 = (uint64_t)&v307 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v335 = (uint64_t)&v307 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v316 = (uint64_t)&v307 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v334 = (uint64_t)&v307 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v315 = (uint64_t)&v307 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v333 = (uint64_t)&v307 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v314 = (uint64_t)&v307 - v50;
  MEMORY[0x1F4188790](v49);
  uint64_t v332 = (uint64_t)&v307 - v51;
  uint64_t v360 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v52 = MEMORY[0x1F4188790](v360);
  uint64_t v322 = (uint64_t)&v307 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  uint64_t v343 = (uint64_t)&v307 - v55;
  uint64_t v56 = MEMORY[0x1F4188790](v54);
  uint64_t v325 = (uint64_t)&v307 - v57;
  uint64_t v58 = MEMORY[0x1F4188790](v56);
  uint64_t v330 = (uint64_t)&v307 - v59;
  uint64_t v60 = MEMORY[0x1F4188790](v58);
  uint64_t v321 = (uint64_t)&v307 - v61;
  uint64_t v62 = MEMORY[0x1F4188790](v60);
  uint64_t v329 = (uint64_t)&v307 - v63;
  uint64_t v64 = MEMORY[0x1F4188790](v62);
  uint64_t v320 = (uint64_t)&v307 - v65;
  uint64_t v66 = MEMORY[0x1F4188790](v64);
  uint64_t v328 = (uint64_t)&v307 - v67;
  uint64_t v68 = MEMORY[0x1F4188790](v66);
  uint64_t v323 = (uint64_t)&v307 - v69;
  uint64_t v70 = MEMORY[0x1F4188790](v68);
  uint64_t v327 = (uint64_t)&v307 - v71;
  uint64_t v72 = MEMORY[0x1F4188790](v70);
  uint64_t v324 = (uint64_t)&v307 - v73;
  uint64_t v74 = MEMORY[0x1F4188790](v72);
  uint64_t v326 = (uint64_t)&v307 - v75;
  uint64_t v76 = a2[2];
  uint64_t v350 = *(void *)(v76 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v78 = (char *)&v307 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = a2[7];
  uint64_t v80 = a2[8];
  uint64_t v82 = a2[9];
  uint64_t v81 = a2[10];
  uint64_t v83 = a2[11];
  uint64_t v366 = v76;
  uint64_t v367 = v364;
  uint64_t v368 = v365;
  uint64_t v369 = v363;
  uint64_t v370 = v376;
  uint64_t v371 = v79;
  uint64_t v372 = v80;
  uint64_t v373 = v82;
  uint64_t v374 = v81;
  uint64_t v375 = v83;
  uint64_t v348 = type metadata accessor for TaggedValue_5.TaggedEnum();
  uint64_t v347 = *(void *)(v348 - 8);
  MEMORY[0x1F4188790](v348);
  uint64_t v85 = (uint64_t *)((char *)&v307 - v84);
  uint64_t v86 = v361;
  uint64_t result = sub_1C3F6DD10();
  if (v86) {
    return result;
  }
  uint64_t v313 = v78;
  uint64_t v307 = v79;
  uint64_t v308 = v80;
  uint64_t v309 = v82;
  uint64_t v310 = v81;
  uint64_t v311 = v83;
  uint64_t v312 = v76;
  uint64_t v88 = v359;
  uint64_t v361 = result;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v347 + 16))(v85, v349, v348);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v351 + 32))(v355, v85, v364);
      uint64_t v96 = v361 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v97 = *(void *)(v96 + *(int *)(v88 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v98 = v333;
      sub_1C3F970C4(v97, v333, &qword_1EBBBF8A0);
      uint64_t v99 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v100 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 48);
      int v101 = v100(v98, 1, v99);
      uint64_t v358 = (char *)v100;
      if (v101 == 1)
      {
        swift_retain();
        sub_1C3F962E0(v98, &qword_1EBBBF8A0);
        uint64_t v102 = v327;
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v134 = v98;
        uint64_t v102 = v327;
        if (EnumCaseMultiPayload == 11)
        {
          sub_1C3F8ADE0(v134, v327, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v135 = v360;
          goto LABEL_41;
        }
        swift_retain();
        sub_1C3F8B288(v134, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v135 = v360;
      uint64_t v165 = *(int *)(v360 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v135 = v360;
      }
      *(void *)(v102 + v165) = qword_1EA39AF60;
      swift_retain();
LABEL_41:
      uint64_t v166 = *(int *)(v135 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v167 = swift_retain();
        *(void *)(v102 + v166) = sub_1C4400A40(v167);
        swift_release();
      }
      uint64_t v168 = *(void *)(v102 + v166);
      swift_beginAccess();
      *(void *)(v168 + 16) = 1;
      sub_1C43F0970(v102);
      uint64_t v169 = swift_endAccess();
      MEMORY[0x1F4188790](v169);
      uint64_t v170 = v364;
      *(&v307 - 12) = v312;
      *(&v307 - 11) = v170;
      uint64_t v171 = v363;
      *(&v307 - 10) = v365;
      *(&v307 - 9) = v171;
      uint64_t v172 = v307;
      *(&v307 - 8) = v376;
      *(&v307 - 7) = v172;
      uint64_t v173 = v309;
      *(&v307 - 6) = v308;
      *(&v307 - 5) = v173;
      uint64_t v174 = v311;
      *(&v307 - 4) = v310;
      *(&v307 - 3) = v174;
      uint64_t v175 = v362;
      *(&v307 - 2) = (uint64_t)v355;
      *(&v307 - 1) = v175;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2808, v338);
      swift_beginAccess();
      uint64_t v176 = *(void *)(v96 + *(int *)(v88 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v177 = v315;
      sub_1C3F970C4(v176, v315, &qword_1EBBBF8A0);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v358)(v177, 1, v99) == 1)
      {
        sub_1C3F962E0(v177, &qword_1EBBBF8A0);
        uint64_t v178 = v345;
        uint64_t v179 = v344;
        uint64_t v180 = v338;
        uint64_t v181 = v323;
      }
      else
      {
        int v255 = swift_getEnumCaseMultiPayload();
        uint64_t v178 = v345;
        uint64_t v179 = v344;
        uint64_t v180 = v338;
        uint64_t v181 = v323;
        if (v255 == 11)
        {
          sub_1C3F8ADE0(v177, v323, type metadata accessor for Proto_TaggedValue);
          uint64_t v256 = v360;
LABEL_104:
          uint64_t v274 = *(int *)(v256 + 20);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for Proto_TaggedValue._StorageClass(0);
            swift_allocObject();
            uint64_t v275 = swift_retain();
            uint64_t v276 = sub_1C4400A40(v275);
            uint64_t v181 = v323;
            *(void *)(v323 + v274) = v276;
            swift_release();
          }
          uint64_t v277 = *(void *)(v181 + v274);
          sub_1C3F8ADE0(v180, v178, type metadata accessor for Proto_Value);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v179 + 56))(v178, 0, 1, v88);
          uint64_t v278 = v346;
          sub_1C4124B88(v178, v346);
          uint64_t v279 = v181;
          uint64_t v280 = v277
               + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
          swift_beginAccess();
          swift_retain();
          sub_1C4124BF0(v278, v280);
          swift_endAccess();
          swift_release();
          sub_1C43F0970(v279);
          swift_endAccess();
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v351 + 8))(v355, v364);
        }
        sub_1C3F8B288(v177, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v256 = v360;
      uint64_t v273 = *(int *)(v360 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v256 = v360;
      }
      *(void *)(v181 + v273) = qword_1EA39AF60;
      swift_retain();
      goto LABEL_104;
    case 2u:
      uint64_t v357 = 0;
      (*(void (**)(char *, uint64_t *, uint64_t))(v352 + 32))(v356, v85, v365);
      uint64_t v103 = v361 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v104 = *(void *)(v103 + *(int *)(v88 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v105 = v104;
      uint64_t v106 = v334;
      sub_1C3F970C4(v105, v334, &qword_1EBBBF8A0);
      uint64_t v107 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v108 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 48);
      if (v108(v106, 1, v107) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v106, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v136 = v328;
          sub_1C3F8ADE0(v106, v328, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v137 = v360;
          goto LABEL_49;
        }
        swift_retain();
        sub_1C3F8B288(v106, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v136 = v328;
      sub_1C4496888();
      uint64_t v137 = v360;
      uint64_t v182 = *(int *)(v360 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v137 = v360;
      }
      *(void *)(v136 + v182) = qword_1EA39AF60;
      swift_retain();
LABEL_49:
      uint64_t v183 = *(int *)(v137 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v184 = swift_retain();
        *(void *)(v136 + v183) = sub_1C4400A40(v184);
        swift_release();
      }
      uint64_t v185 = *(void *)(v136 + v183);
      swift_beginAccess();
      *(void *)(v185 + 16) = 2;
      sub_1C43F0970(v136);
      uint64_t v186 = swift_endAccess();
      MEMORY[0x1F4188790](v186);
      uint64_t v187 = v364;
      *(&v307 - 12) = v312;
      *(&v307 - 11) = v187;
      uint64_t v188 = v365;
      uint64_t v189 = v363;
      *(&v307 - 10) = v365;
      *(&v307 - 9) = v189;
      uint64_t v190 = v307;
      *(&v307 - 8) = v376;
      *(&v307 - 7) = v190;
      uint64_t v191 = v309;
      *(&v307 - 6) = v308;
      *(&v307 - 5) = v191;
      uint64_t v192 = v311;
      *(&v307 - 4) = v310;
      *(&v307 - 3) = v192;
      uint64_t v193 = v356;
      uint64_t v194 = v362;
      *(&v307 - 2) = (uint64_t)v356;
      *(&v307 - 1) = v194;
      uint64_t v195 = v357;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C27C0, v340);
      if (v195)
      {
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v352 + 8))(v193, v188);
      }
      swift_beginAccess();
      uint64_t v196 = *(void *)(v103 + *(int *)(v88 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v197 = v196;
      uint64_t v198 = v316;
      sub_1C3F970C4(v197, v316, &qword_1EBBBF8A0);
      if (v108(v198, 1, v107) == 1)
      {
        sub_1C3F962E0(v198, &qword_1EBBBF8A0);
        uint64_t v199 = v344;
        uint64_t v200 = v340;
        uint64_t v201 = v320;
      }
      else
      {
        int v257 = swift_getEnumCaseMultiPayload();
        uint64_t v199 = v344;
        uint64_t v200 = v340;
        uint64_t v201 = v320;
        if (v257 == 11)
        {
          sub_1C3F8ADE0(v198, v320, type metadata accessor for Proto_TaggedValue);
          uint64_t v258 = v360;
          goto LABEL_111;
        }
        sub_1C3F8B288(v198, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v258 = v360;
      uint64_t v281 = *(int *)(v360 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v258 = v360;
      }
      *(void *)(v201 + v281) = qword_1EA39AF60;
      swift_retain();
LABEL_111:
      uint64_t v282 = *(int *)(v258 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v283 = swift_retain();
        *(void *)(v201 + v282) = sub_1C4400A40(v283);
        swift_release();
      }
      uint64_t v284 = *(void *)(v201 + v282);
      uint64_t v285 = v345;
      sub_1C3F8ADE0(v200, v345, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v199 + 56))(v285, 0, 1, v88);
      uint64_t v286 = v346;
      sub_1C4124B88(v285, v346);
      uint64_t v287 = v284
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v286, v287);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v201);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v352 + 8))(v356, v365);
    case 3u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v353 + 32))(v357, v85, v363);
      uint64_t v109 = v361 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v110 = *(void *)(v109 + *(int *)(v88 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v111 = v110;
      uint64_t v112 = v335;
      sub_1C3F970C4(v111, v335, &qword_1EBBBF8A0);
      uint64_t v113 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v114 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 48);
      if (v114(v112, 1, v113) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v112, &qword_1EBBBF8A0);
        uint64_t v115 = v329;
      }
      else
      {
        int v138 = swift_getEnumCaseMultiPayload();
        uint64_t v115 = v329;
        if (v138 == 11)
        {
          sub_1C3F8ADE0(v112, v329, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v139 = v360;
          goto LABEL_59;
        }
        swift_retain();
        sub_1C3F8B288(v112, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v139 = v360;
      uint64_t v202 = *(int *)(v360 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v139 = v360;
      }
      *(void *)(v115 + v202) = qword_1EA39AF60;
      swift_retain();
LABEL_59:
      uint64_t v203 = *(int *)(v139 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v204 = swift_retain();
        *(void *)(v115 + v203) = sub_1C4400A40(v204);
        swift_release();
      }
      uint64_t v205 = *(void *)(v115 + v203);
      swift_beginAccess();
      *(void *)(v205 + 16) = 3;
      sub_1C43F0970(v115);
      uint64_t v206 = swift_endAccess();
      MEMORY[0x1F4188790](v206);
      uint64_t v207 = v364;
      *(&v307 - 12) = v312;
      *(&v307 - 11) = v207;
      uint64_t v208 = v363;
      *(&v307 - 10) = v365;
      *(&v307 - 9) = v208;
      uint64_t v209 = v307;
      *(&v307 - 8) = v376;
      *(&v307 - 7) = v209;
      uint64_t v210 = v309;
      *(&v307 - 6) = v308;
      *(&v307 - 5) = v210;
      uint64_t v211 = v311;
      *(&v307 - 4) = v310;
      *(&v307 - 3) = v211;
      uint64_t v212 = v362;
      *(&v307 - 2) = (uint64_t)v357;
      *(&v307 - 1) = v212;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2778, v341);
      swift_beginAccess();
      uint64_t v213 = *(void *)(v109 + *(int *)(v359 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v214 = v213;
      uint64_t v215 = v317;
      sub_1C3F970C4(v214, v317, &qword_1EBBBF8A0);
      if (v114(v215, 1, v113) == 1)
      {
        sub_1C3F962E0(v215, &qword_1EBBBF8A0);
        uint64_t v216 = v346;
        uint64_t v217 = v345;
        uint64_t v218 = v344;
        uint64_t v219 = v341;
        uint64_t v220 = v321;
      }
      else
      {
        int v259 = swift_getEnumCaseMultiPayload();
        uint64_t v216 = v346;
        uint64_t v217 = v345;
        uint64_t v218 = v344;
        uint64_t v219 = v341;
        uint64_t v220 = v321;
        if (v259 == 11)
        {
          sub_1C3F8ADE0(v215, v321, type metadata accessor for Proto_TaggedValue);
          uint64_t v260 = v360;
          goto LABEL_118;
        }
        sub_1C3F8B288(v215, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v260 = v360;
      uint64_t v288 = *(int *)(v360 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v260 = v360;
      }
      *(void *)(v220 + v288) = qword_1EA39AF60;
      swift_retain();
LABEL_118:
      uint64_t v289 = *(int *)(v260 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v290 = swift_retain();
        *(void *)(v220 + v289) = sub_1C4400A40(v290);
        swift_release();
      }
      uint64_t v291 = *(void *)(v220 + v289);
      sub_1C3F8ADE0(v219, v217, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v218 + 56))(v217, 0, 1, v359);
      sub_1C4124B88(v217, v216);
      uint64_t v292 = v291
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v216, v292);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v220);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v353 + 8))(v357, v363);
    case 4u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v354 + 32))(v358, v85, v376);
      uint64_t v116 = v361 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v117 = *(void *)(v116 + *(int *)(v88 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v118 = v117;
      uint64_t v119 = v331;
      sub_1C3F970C4(v118, v331, &qword_1EBBBF8A0);
      uint64_t v120 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v121 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v120 - 8) + 48);
      if (v121(v119, 1, v120) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v119, &qword_1EBBBF8A0);
        uint64_t v122 = v363;
        uint64_t v123 = v330;
      }
      else
      {
        int v140 = swift_getEnumCaseMultiPayload();
        uint64_t v122 = v363;
        uint64_t v123 = v330;
        if (v140 == 11)
        {
          sub_1C3F8ADE0(v119, v330, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v141 = v360;
          goto LABEL_67;
        }
        swift_retain();
        sub_1C3F8B288(v119, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v141 = v360;
      uint64_t v221 = *(int *)(v360 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v141 = v360;
      }
      *(void *)(v123 + v221) = qword_1EA39AF60;
      swift_retain();
LABEL_67:
      uint64_t v222 = *(int *)(v141 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v223 = swift_retain();
        *(void *)(v123 + v222) = sub_1C4400A40(v223);
        swift_release();
      }
      uint64_t v224 = *(void *)(v123 + v222);
      swift_beginAccess();
      *(void *)(v224 + 16) = 4;
      sub_1C43F0970(v123);
      uint64_t v225 = swift_endAccess();
      MEMORY[0x1F4188790](v225);
      uint64_t v226 = v364;
      *(&v307 - 12) = v312;
      *(&v307 - 11) = v226;
      *(&v307 - 10) = v365;
      *(&v307 - 9) = v122;
      uint64_t v227 = v307;
      *(&v307 - 8) = v376;
      *(&v307 - 7) = v227;
      uint64_t v228 = v309;
      *(&v307 - 6) = v308;
      *(&v307 - 5) = v228;
      uint64_t v229 = v311;
      *(&v307 - 4) = v310;
      *(&v307 - 3) = v229;
      uint64_t v230 = v362;
      *(&v307 - 2) = (uint64_t)v358;
      *(&v307 - 1) = v230;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2730, v342);
      uint64_t v357 = 0;
      swift_beginAccess();
      uint64_t v231 = *(void *)(v116 + *(int *)(v359 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v232 = v319;
      sub_1C3F970C4(v231, v319, &qword_1EBBBF8A0);
      if (v121(v232, 1, v120) == 1)
      {
        sub_1C3F962E0(v232, &qword_1EBBBF8A0);
        uint64_t v233 = v346;
        uint64_t v234 = v345;
        uint64_t v235 = v344;
        uint64_t v236 = v376;
        uint64_t v237 = v342;
        uint64_t v238 = v325;
      }
      else
      {
        int v261 = swift_getEnumCaseMultiPayload();
        uint64_t v233 = v346;
        uint64_t v234 = v345;
        uint64_t v235 = v344;
        uint64_t v236 = v376;
        uint64_t v237 = v342;
        uint64_t v238 = v325;
        if (v261 == 11)
        {
          sub_1C3F8ADE0(v232, v325, type metadata accessor for Proto_TaggedValue);
          uint64_t v262 = v360;
          goto LABEL_125;
        }
        sub_1C3F8B288(v232, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v262 = v360;
      uint64_t v293 = v238;
      uint64_t v294 = *(int *)(v360 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v262 = v360;
      }
      *(void *)(v293 + v294) = qword_1EA39AF60;
      swift_retain();
      uint64_t v238 = v293;
LABEL_125:
      uint64_t v295 = *(int *)(v262 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v296 = swift_retain();
        uint64_t v297 = sub_1C4400A40(v296);
        uint64_t v238 = v325;
        *(void *)(v325 + v295) = v297;
        swift_release();
      }
      uint64_t v298 = v238;
      uint64_t v299 = *(void *)(v238 + v295);
      sub_1C3F8ADE0(v237, v234, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v235 + 56))(v234, 0, 1, v359);
      sub_1C4124B88(v234, v233);
      uint64_t v300 = v299
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v233, v300);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v298);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v354 + 8))(v358, v236);
    case 5u:
      uint64_t v357 = 0;
      uint64_t v124 = v85[1];
      uint64_t v376 = *v85;
      uint64_t v125 = v361 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v126 = *(void *)(v125 + *(int *)(v88 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v127 = v336;
      sub_1C3F970C4(v126, v336, &qword_1EBBBF8A0);
      uint64_t v128 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v129 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v128 - 8) + 48);
      if (v129(v127, 1, v128) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v127, &qword_1EBBBF8A0);
        uint64_t v130 = v343;
      }
      else
      {
        int v142 = swift_getEnumCaseMultiPayload();
        uint64_t v130 = v343;
        if (v142 == 11)
        {
          sub_1C3F8ADE0(v127, v343, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v143 = v360;
          goto LABEL_75;
        }
        swift_retain();
        sub_1C3F8B288(v127, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v143 = v360;
      uint64_t v239 = v130;
      uint64_t v240 = *(int *)(v360 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v143 = v360;
      }
      *(void *)(v239 + v240) = qword_1EA39AF60;
      swift_retain();
      uint64_t v130 = v239;
LABEL_75:
      uint64_t v241 = *(int *)(v143 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v242 = swift_retain();
        uint64_t v243 = sub_1C4400A40(v242);
        uint64_t v130 = v343;
        *(void *)(v343 + v241) = v243;
        swift_release();
      }
      uint64_t v244 = v130;
      uint64_t v245 = *(void *)(v130 + v241);
      swift_beginAccess();
      *(void *)(v245 + 16) = v376;
      sub_1C43F0970(v244);
      swift_endAccess();
      swift_retain();
      uint64_t v246 = swift_retain();
      uint64_t v247 = v357;
      sub_1C400B83C(v246, v124, v246, v339);
      if (v247)
      {
        swift_release();
        return swift_release();
      }
      swift_beginAccess();
      uint64_t v248 = *(void *)(v125 + *(int *)(v88 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v249 = v248;
      uint64_t v250 = v318;
      sub_1C3F970C4(v249, v318, &qword_1EBBBF8A0);
      if (v129(v250, 1, v128) == 1)
      {
        sub_1C3F962E0(v250, &qword_1EBBBF8A0);
        uint64_t v251 = v346;
        uint64_t v252 = v322;
      }
      else
      {
        int v263 = swift_getEnumCaseMultiPayload();
        uint64_t v251 = v346;
        uint64_t v252 = v322;
        if (v263 == 11)
        {
          sub_1C3F8ADE0(v250, v322, type metadata accessor for Proto_TaggedValue);
          uint64_t v264 = v360;
          goto LABEL_132;
        }
        sub_1C3F8B288(v250, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v264 = v360;
      uint64_t v301 = *(int *)(v360 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v264 = v360;
      }
      *(void *)(v252 + v301) = qword_1EA39AF60;
      swift_retain();
LABEL_132:
      uint64_t v302 = *(int *)(v264 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v303 = swift_retain();
        *(void *)(v252 + v302) = sub_1C4400A40(v303);
        swift_release();
      }
      uint64_t v304 = *(void *)(v252 + v302);
      uint64_t v305 = v345;
      sub_1C3F8ADE0(v339, v345, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v344 + 56))(v305, 0, 1, v88);
      sub_1C4124B88(v305, v251);
      uint64_t v306 = v304
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v251, v306);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v252);
      swift_endAccess();
      swift_release();
      return swift_release();
    default:
      uint64_t v357 = 0;
      (*(void (**)(char *, uint64_t *, uint64_t))(v350 + 32))(v313, v85, v312);
      uint64_t v89 = v361 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v90 = *(void *)(v89 + *(int *)(v88 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v91 = v90;
      uint64_t v92 = v332;
      sub_1C3F970C4(v91, v332, &qword_1EBBBF8A0);
      uint64_t v93 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v358 = *(char **)(*(void *)(v93 - 8) + 48);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v358)(v92, 1, v93) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v92, &qword_1EBBBF8A0);
        uint64_t v94 = v362;
        uint64_t v95 = v326;
      }
      else
      {
        int v131 = swift_getEnumCaseMultiPayload();
        uint64_t v95 = v326;
        if (v131 == 11)
        {
          sub_1C3F8ADE0(v92, v326, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v132 = v360;
          uint64_t v94 = v362;
          goto LABEL_31;
        }
        swift_retain();
        sub_1C3F8B288(v92, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        uint64_t v94 = v362;
      }
      sub_1C4496888();
      uint64_t v132 = v360;
      uint64_t v144 = *(int *)(v360 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v132 = v360;
      }
      *(void *)(v95 + v144) = qword_1EA39AF60;
      swift_retain();
LABEL_31:
      uint64_t v145 = *(int *)(v132 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v146 = swift_retain();
        *(void *)(v95 + v145) = sub_1C4400A40(v146);
        swift_release();
      }
      uint64_t v147 = *(void *)(v95 + v145);
      swift_beginAccess();
      *(void *)(v147 + 16) = 0;
      sub_1C43F0970(v95);
      uint64_t v148 = swift_endAccess();
      MEMORY[0x1F4188790](v148);
      uint64_t v149 = v312;
      uint64_t v150 = v364;
      *(&v307 - 12) = v312;
      *(&v307 - 11) = v150;
      uint64_t v151 = v363;
      *(&v307 - 10) = v365;
      *(&v307 - 9) = v151;
      uint64_t v152 = v307;
      *(&v307 - 8) = v376;
      *(&v307 - 7) = v152;
      uint64_t v153 = v309;
      *(&v307 - 6) = v308;
      *(&v307 - 5) = v153;
      uint64_t v154 = v311;
      *(&v307 - 4) = v310;
      *(&v307 - 3) = v154;
      uint64_t v155 = v313;
      *(&v307 - 2) = (uint64_t)v313;
      *(&v307 - 1) = v94;
      uint64_t v156 = v357;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2850, v337);
      if (v156)
      {
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v350 + 8))(v155, v149);
      }
      uint64_t v357 = 0;
      swift_beginAccess();
      uint64_t v157 = v88;
      uint64_t v158 = *(void *)(v89 + *(int *)(v88 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v159 = v314;
      sub_1C3F970C4(v158, v314, &qword_1EBBBF8A0);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v358)(v159, 1, v93) == 1)
      {
        sub_1C3F962E0(v159, &qword_1EBBBF8A0);
        uint64_t v160 = v346;
        uint64_t v161 = v345;
        uint64_t v162 = v344;
        uint64_t v163 = v337;
        uint64_t v164 = v324;
      }
      else
      {
        int v253 = swift_getEnumCaseMultiPayload();
        uint64_t v160 = v346;
        uint64_t v161 = v345;
        uint64_t v162 = v344;
        uint64_t v163 = v337;
        uint64_t v164 = v324;
        if (v253 == 11)
        {
          sub_1C3F8ADE0(v159, v324, type metadata accessor for Proto_TaggedValue);
          uint64_t v254 = v360;
          goto LABEL_97;
        }
        sub_1C3F8B288(v159, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v254 = v360;
      uint64_t v265 = v164;
      uint64_t v266 = *(int *)(v360 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v254 = v360;
      }
      *(void *)(v265 + v266) = qword_1EA39AF60;
      swift_retain();
      uint64_t v164 = v265;
LABEL_97:
      uint64_t v267 = *(int *)(v254 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v268 = swift_retain();
        uint64_t v269 = sub_1C4400A40(v268);
        uint64_t v164 = v324;
        *(void *)(v324 + v267) = v269;
        swift_release();
      }
      uint64_t v270 = v164;
      uint64_t v271 = *(void *)(v164 + v267);
      sub_1C3F8ADE0(v163, v161, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v162 + 56))(v161, 0, 1, v157);
      sub_1C4124B88(v161, v160);
      uint64_t v272 = v271
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v160, v272);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v270);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v350 + 8))(v313, v312);
  }
}

uint64_t sub_1C41A3454@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return TaggedValue_5.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a2[8], a3, a2[9], a2[10], a2[11]);
}

uint64_t sub_1C41A3498(uint64_t a1, void *a2)
{
  return TaggedValue_5.encode(to:)(a1, a2);
}

uint64_t TaggedValue_5<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v54 = a6;
  uint64_t v55 = a7;
  uint64_t v51 = a4;
  uint64_t v52 = a5;
  uint64_t v50 = a3;
  uint64_t v56 = a1;
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v49 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 40);
  uint64_t v48 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v8);
  uint64_t v47 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 32);
  uint64_t v46 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v12);
  uint64_t v45 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 + 24);
  uint64_t v44 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v16);
  uint64_t v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v23 + 16);
  uint64_t v43 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v26 = (char *)&v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(v27 + 88);
  v58[0] = v24;
  v58[1] = v19;
  v58[2] = v15;
  uint64_t v59 = v11;
  uint64_t v60 = v7;
  long long v29 = *(_OWORD *)(v27 + 72);
  long long v61 = *(_OWORD *)(v27 + 56);
  long long v62 = v29;
  uint64_t v63 = v28;
  uint64_t v30 = type metadata accessor for TaggedValue_5.TaggedEnum();
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v43 - v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))((char *)&v43 - v31, v64, v30);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v36 = v44;
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v22, v32, v19);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v22, v19);
      break;
    case 2u:
      uint64_t v37 = v46;
      uint64_t v38 = v45;
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v45, v32, v15);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v38, v15);
      break;
    case 3u:
      uint64_t v39 = v48;
      uint64_t v40 = v47;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v47, v32, v11);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v40, v11);
      break;
    case 4u:
      uint64_t v41 = v53;
      uint64_t v42 = v49;
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v49, v32, v7);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v42, v7);
      break;
    case 5u:
      (*(void (**)(uint64_t *__return_ptr))(**((void **)v32 + 1) + 80))(v57);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DE70);
      swift_dynamicCast();
      __swift_project_boxed_opaque_existential_1(v58, v59);
      sub_1C4497068();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
      uint64_t result = swift_release();
      break;
    default:
      uint64_t v34 = v43;
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v26, v32, v24);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v26, v24);
      break;
  }
  return result;
}

uint64_t sub_1C41A3AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TaggedValue_5<>.encode(to:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), *(void *)(a3 - 24), *(void *)(a3 - 32), *(void *)(a3 - 40));
}

uint64_t TaggedValue_6.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v342 = a9;
  uint64_t v327 = a2;
  uint64_t v350 = a2;
  uint64_t v351 = a3;
  uint64_t v328 = a3;
  uint64_t v329 = a4;
  uint64_t v352 = a4;
  uint64_t v353 = a5;
  uint64_t v330 = a5;
  uint64_t v331 = a6;
  uint64_t v354 = a6;
  uint64_t v355 = a7;
  uint64_t v332 = a7;
  uint64_t v326 = a8;
  uint64_t v356 = a8;
  uint64_t v357 = a10;
  uint64_t v321 = a10;
  uint64_t v322 = a11;
  uint64_t v358 = a11;
  uint64_t v359 = a12;
  uint64_t v323 = a12;
  uint64_t v324 = a13;
  uint64_t v360 = a13;
  uint64_t v361 = a14;
  uint64_t v325 = a14;
  uint64_t v340 = type metadata accessor for TaggedValue_6.TaggedEnum();
  uint64_t v341 = *(void *)(v340 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v340);
  uint64_t v279 = (void **)((char *)&v279 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v320 = (char *)&v279 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v319 = (char *)&v279 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v318 = (char *)&v279 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v317 = (char *)&v279 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v316 = (char *)&v279 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v315 = (char *)&v279 - v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v29 = MEMORY[0x1F4188790](v28 - 8);
  uint64_t v306 = (uint64_t)&v279 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v305 = (uint64_t)&v279 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v304 = (uint64_t)&v279 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v302 = (uint64_t)&v279 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v301 = (uint64_t)&v279 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v299 = (uint64_t)&v279 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v298 = (uint64_t)&v279 - v42;
  MEMORY[0x1F4188790](v41);
  uint64_t v345 = (uint64_t)&v279 - v43;
  uint64_t v349 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v44 = MEMORY[0x1F4188790](v349);
  uint64_t v282 = (uint64_t)&v279 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  uint64_t v314 = (uint64_t)&v279 - v47;
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  uint64_t v313 = (uint64_t)&v279 - v49;
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  uint64_t v312 = (uint64_t)&v279 - v51;
  uint64_t v52 = MEMORY[0x1F4188790](v50);
  uint64_t v311 = (uint64_t)&v279 - v53;
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  uint64_t v310 = (uint64_t)&v279 - v55;
  uint64_t v56 = MEMORY[0x1F4188790](v54);
  uint64_t v309 = (uint64_t)&v279 - v57;
  MEMORY[0x1F4188790](v56);
  uint64_t v346 = (char *)&v279 - v58;
  uint64_t v59 = type metadata accessor for Proto_Value(0);
  uint64_t v60 = *(void *)(v59 - 8);
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  uint64_t v281 = (char *)&v279 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = MEMORY[0x1F4188790](v61);
  uint64_t v339 = (uint64_t)&v279 - v64;
  uint64_t v65 = MEMORY[0x1F4188790](v63);
  uint64_t v308 = (char *)&v279 - v66;
  uint64_t v67 = MEMORY[0x1F4188790](v65);
  uint64_t v338 = (uint64_t)&v279 - v68;
  uint64_t v69 = MEMORY[0x1F4188790](v67);
  uint64_t v307 = (char *)&v279 - v70;
  uint64_t v71 = MEMORY[0x1F4188790](v69);
  uint64_t v337 = (uint64_t)&v279 - v72;
  uint64_t v73 = MEMORY[0x1F4188790](v71);
  uint64_t v303 = (char *)&v279 - v74;
  uint64_t v75 = MEMORY[0x1F4188790](v73);
  uint64_t v336 = (uint64_t)&v279 - v76;
  uint64_t v77 = MEMORY[0x1F4188790](v75);
  uint64_t v300 = (uint64_t)&v279 - v78;
  uint64_t v79 = MEMORY[0x1F4188790](v77);
  uint64_t v335 = (uint64_t)&v279 - v80;
  uint64_t v81 = MEMORY[0x1F4188790](v79);
  uint64_t v297 = (uint64_t)&v279 - v82;
  uint64_t v83 = MEMORY[0x1F4188790](v81);
  uint64_t v334 = (uint64_t)&v279 - v84;
  uint64_t v85 = MEMORY[0x1F4188790](v83);
  uint64_t v296 = (uint64_t)&v279 - v86;
  uint64_t v87 = MEMORY[0x1F4188790](v85);
  uint64_t v333 = (uint64_t)&v279 - v88;
  MEMORY[0x1F4188790](v87);
  uint64_t v348 = (char *)&v279 - v89;
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v91 = MEMORY[0x1F4188790](v90 - 8);
  uint64_t v280 = (char *)&v279 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = MEMORY[0x1F4188790](v91);
  uint64_t v289 = (uint64_t)&v279 - v94;
  uint64_t v95 = MEMORY[0x1F4188790](v93);
  uint64_t v295 = (char *)&v279 - v96;
  uint64_t v97 = MEMORY[0x1F4188790](v95);
  uint64_t v288 = (uint64_t)&v279 - v98;
  uint64_t v99 = MEMORY[0x1F4188790](v97);
  uint64_t v294 = (char *)&v279 - v100;
  uint64_t v101 = MEMORY[0x1F4188790](v99);
  uint64_t v287 = (uint64_t)&v279 - v102;
  uint64_t v103 = MEMORY[0x1F4188790](v101);
  uint64_t v293 = (char *)&v279 - v104;
  uint64_t v105 = MEMORY[0x1F4188790](v103);
  uint64_t v286 = (uint64_t)&v279 - v106;
  uint64_t v107 = MEMORY[0x1F4188790](v105);
  uint64_t v292 = (char *)&v279 - v108;
  uint64_t v109 = MEMORY[0x1F4188790](v107);
  uint64_t v285 = (uint64_t)&v279 - v110;
  uint64_t v111 = MEMORY[0x1F4188790](v109);
  uint64_t v291 = (char *)&v279 - v112;
  uint64_t v113 = MEMORY[0x1F4188790](v111);
  uint64_t v284 = (uint64_t)&v279 - v114;
  uint64_t v115 = MEMORY[0x1F4188790](v113);
  uint64_t v290 = (char *)&v279 - v116;
  uint64_t v117 = MEMORY[0x1F4188790](v115);
  uint64_t v283 = (uint64_t)&v279 - v118;
  uint64_t v119 = MEMORY[0x1F4188790](v117);
  uint64_t v121 = (char *)&v279 - v120;
  MEMORY[0x1F4188790](v119);
  uint64_t v123 = (char *)&v279 - v122;
  uint64_t v124 = a1;
  uint64_t v125 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v125, (uint64_t)v123, &qword_1EBBC0540);
  uint64_t v128 = *(char **)(v60 + 48);
  uint64_t v127 = v60 + 48;
  uint64_t v126 = v128;
  unsigned int v129 = ((uint64_t (*)(char *, uint64_t, uint64_t))v128)(v123, 1, v59);
  sub_1C3F962E0((uint64_t)v123, &qword_1EBBC0540);
  if (v129 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    uint64_t inited = (char *)swift_initStackObject();
    *((void *)inited + 2) = v124;
    sub_1C3F970C4(v125, (uint64_t)v121, &qword_1EBBC0540);
    uint64_t v344 = v127;
    uint64_t v133 = v126;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v126)(v121, 1, v59) == 1)
    {
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      JUMPOUT(0x1C41A64C0);
    }
    uint64_t v134 = v124;
    uint64_t v135 = v348;
    sub_1C3F8ADE0((uint64_t)v121, (uint64_t)v348, type metadata accessor for Proto_Value);
    uint64_t v343 = v59;
    uint64_t v136 = *(void *)&v135[*(int *)(v59 + 20)]
         + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v137 = v345;
    sub_1C3F970C4(v136, v345, &qword_1EBBBF8A0);
    uint64_t v138 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    uint64_t v139 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v138 - 8) + 48);
    int v140 = v139(v137, 1, v138);
    uint64_t v141 = (uint64_t)v346;
    if (v140 == 1)
    {
      uint64_t v142 = v137;
      uint64_t v143 = v138;
      swift_retain();
      sub_1C3F962E0(v142, &qword_1EBBBF8A0);
    }
    else
    {
      uint64_t v144 = v137;
      uint64_t v143 = v138;
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        sub_1C3F8ADE0(v144, v141, type metadata accessor for Proto_TaggedValue);
LABEL_12:
        swift_retain();
        sub_1C3F8B288((uint64_t)v348, type metadata accessor for Proto_Value);
        uint64_t v146 = *(void *)(v141 + *(int *)(v349 + 20));
        swift_beginAccess();
        uint64_t v147 = v141;
        uint64_t v148 = *(void *)(v146 + 16);
        sub_1C3F8B288(v147, type metadata accessor for Proto_TaggedValue);
        switch(v148)
        {
          case 0:
            uint64_t v149 = *((void *)inited + 2) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v150 = v283;
            sub_1C3F970C4(v149, v283, &qword_1EBBC0540);
            uint64_t v151 = v343;
            uint64_t v348 = v133;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v133)(v150, 1, v343) == 1) {
              goto LABEL_128;
            }
            uint64_t v152 = v333;
            sub_1C3F8ADE0(v150, v333, type metadata accessor for Proto_Value);
            uint64_t v153 = *(void *)(v152 + *(int *)(v151 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v154 = v298;
            sub_1C3F970C4(v153, v298, &qword_1EBBBF8A0);
            if (v139(v154, 1, v143) == 1)
            {
              sub_1C3F962E0(v154, &qword_1EBBBF8A0);
              uint64_t v155 = v347;
              uint64_t v156 = v315;
              uint64_t v157 = v309;
              uint64_t v158 = (uint64_t)v290;
            }
            else
            {
              BOOL v228 = swift_getEnumCaseMultiPayload() == 11;
              uint64_t v229 = v154;
              uint64_t v155 = v347;
              uint64_t v156 = v315;
              uint64_t v157 = v309;
              uint64_t v158 = (uint64_t)v290;
              if (v228)
              {
                sub_1C3F8ADE0(v229, v309, type metadata accessor for Proto_TaggedValue);
                goto LABEL_55;
              }
              sub_1C3F8B288(v229, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v237 = *(int *)(v349 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v157 + v237) = qword_1EA39AF60;
            swift_retain();
LABEL_55:
            sub_1C3F8B288(v333, type metadata accessor for Proto_Value);
            uint64_t v238 = *(void *)(v157 + *(int *)(v349 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v238, v158, &qword_1EBBC0540);
            uint64_t v239 = v343;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v348)(v158, 1, v343) == 1)
            {
              uint64_t v240 = v296;
              sub_1C4496888();
              uint64_t v241 = *(int *)(v239 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v240 + v241) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v158, &qword_1EBBC0540);
            }
            else
            {
              uint64_t v240 = v296;
              sub_1C3F8ADE0(v158, v296, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v157, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v242 = sub_1C3F974B0(v240, v134);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v326 + 8) + 8) + 8))(v242);
            if (v155) {
              goto LABEL_125;
            }
            goto LABEL_114;
          case 1:
            uint64_t v159 = *((void *)inited + 2) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v160 = v284;
            sub_1C3F970C4(v159, v284, &qword_1EBBC0540);
            uint64_t v161 = v343;
            uint64_t v348 = v133;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v133)(v160, 1, v343) == 1) {
              goto LABEL_129;
            }
            uint64_t v162 = v334;
            sub_1C3F8ADE0(v160, v334, type metadata accessor for Proto_Value);
            uint64_t v163 = *(void *)(v162 + *(int *)(v161 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v164 = v299;
            sub_1C3F970C4(v163, v299, &qword_1EBBBF8A0);
            if (v139(v164, 1, v143) == 1)
            {
              sub_1C3F962E0(v164, &qword_1EBBBF8A0);
              uint64_t v165 = v347;
              uint64_t v156 = v316;
              uint64_t v166 = v310;
              uint64_t v167 = (uint64_t)v291;
            }
            else
            {
              BOOL v228 = swift_getEnumCaseMultiPayload() == 11;
              uint64_t v230 = v164;
              uint64_t v165 = v347;
              uint64_t v156 = v316;
              uint64_t v166 = v310;
              uint64_t v167 = (uint64_t)v291;
              if (v228)
              {
                sub_1C3F8ADE0(v230, v310, type metadata accessor for Proto_TaggedValue);
                goto LABEL_65;
              }
              sub_1C3F8B288(v230, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v243 = *(int *)(v349 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v166 + v243) = qword_1EA39AF60;
            swift_retain();
LABEL_65:
            sub_1C3F8B288(v334, type metadata accessor for Proto_Value);
            uint64_t v244 = *(void *)(v166 + *(int *)(v349 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v244, v167, &qword_1EBBC0540);
            uint64_t v245 = v343;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v348)(v167, 1, v343) == 1)
            {
              uint64_t v246 = v297;
              sub_1C4496888();
              uint64_t v247 = *(int *)(v245 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v246 + v247) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v167, &qword_1EBBC0540);
            }
            else
            {
              uint64_t v246 = v297;
              sub_1C3F8ADE0(v167, v297, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v166, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v248 = sub_1C3F974B0(v246, v134);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v321 + 8) + 8) + 8))(v248);
            if (!v165) {
              goto LABEL_114;
            }
            goto LABEL_125;
          case 2:
            uint64_t v168 = *((void *)inited + 2) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v169 = v285;
            sub_1C3F970C4(v168, v285, &qword_1EBBC0540);
            uint64_t v170 = v343;
            uint64_t v348 = v133;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v133)(v169, 1, v343) == 1) {
              goto LABEL_130;
            }
            uint64_t v171 = v335;
            sub_1C3F8ADE0(v169, v335, type metadata accessor for Proto_Value);
            uint64_t v172 = *(void *)(v171 + *(int *)(v170 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v173 = v301;
            sub_1C3F970C4(v172, v301, &qword_1EBBBF8A0);
            if (v139(v173, 1, v143) == 1)
            {
              sub_1C3F962E0(v173, &qword_1EBBBF8A0);
              uint64_t v174 = v347;
              uint64_t v156 = v317;
              uint64_t v175 = v311;
              uint64_t v176 = (uint64_t)v292;
            }
            else
            {
              BOOL v228 = swift_getEnumCaseMultiPayload() == 11;
              uint64_t v231 = v173;
              uint64_t v174 = v347;
              uint64_t v156 = v317;
              uint64_t v175 = v311;
              uint64_t v176 = (uint64_t)v292;
              if (v228)
              {
                sub_1C3F8ADE0(v231, v311, type metadata accessor for Proto_TaggedValue);
                goto LABEL_75;
              }
              sub_1C3F8B288(v231, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v249 = *(int *)(v349 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v175 + v249) = qword_1EA39AF60;
            swift_retain();
LABEL_75:
            sub_1C3F8B288(v335, type metadata accessor for Proto_Value);
            uint64_t v250 = *(void *)(v175 + *(int *)(v349 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v250, v176, &qword_1EBBC0540);
            uint64_t v251 = v343;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v348)(v176, 1, v343) == 1)
            {
              uint64_t v252 = v300;
              sub_1C4496888();
              uint64_t v253 = *(int *)(v251 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v252 + v253) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v176, &qword_1EBBC0540);
            }
            else
            {
              uint64_t v252 = v300;
              sub_1C3F8ADE0(v176, v300, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v175, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v254 = sub_1C3F974B0(v252, v134);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v322 + 8) + 8) + 8))(v254);
            if (!v174) {
              goto LABEL_114;
            }
            goto LABEL_125;
          case 3:
            uint64_t v177 = *((void *)inited + 2) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v178 = v286;
            sub_1C3F970C4(v177, v286, &qword_1EBBC0540);
            uint64_t v179 = v343;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v133)(v178, 1, v343) == 1) {
              goto LABEL_131;
            }
            uint64_t v180 = v178;
            uint64_t v181 = v336;
            sub_1C3F8ADE0(v180, v336, type metadata accessor for Proto_Value);
            uint64_t v182 = *(void *)(v181 + *(int *)(v179 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v183 = v302;
            sub_1C3F970C4(v182, v302, &qword_1EBBBF8A0);
            int v184 = v139(v183, 1, v143);
            uint64_t v185 = (uint64_t)v303;
            if (v184 == 1)
            {
              sub_1C3F962E0(v183, &qword_1EBBBF8A0);
              uint64_t v186 = v347;
              uint64_t v156 = v318;
              uint64_t v187 = v312;
              uint64_t v188 = (uint64_t)v293;
            }
            else
            {
              BOOL v228 = swift_getEnumCaseMultiPayload() == 11;
              uint64_t v186 = v347;
              uint64_t v156 = v318;
              uint64_t v232 = v183;
              uint64_t v187 = v312;
              uint64_t v188 = (uint64_t)v293;
              if (v228)
              {
                sub_1C3F8ADE0(v232, v312, type metadata accessor for Proto_TaggedValue);
                goto LABEL_85;
              }
              sub_1C3F8B288(v232, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v255 = *(int *)(v349 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v187 + v255) = qword_1EA39AF60;
            swift_retain();
LABEL_85:
            sub_1C3F8B288(v336, type metadata accessor for Proto_Value);
            uint64_t v256 = *(void *)(v187 + *(int *)(v349 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v256, v188, &qword_1EBBC0540);
            uint64_t v257 = v343;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v133)(v188, 1, v343) == 1)
            {
              sub_1C4496888();
              uint64_t v258 = *(int *)(v257 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v185 + v258) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v188, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v188, v185, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v187, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v259 = sub_1C3F974B0(v185, v134);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v323 + 8) + 8) + 8))(v259);
            if (!v186) {
              goto LABEL_114;
            }
            goto LABEL_125;
          case 4:
            uint64_t v348 = inited;
            uint64_t v189 = *((void *)inited + 2) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v190 = v287;
            sub_1C3F970C4(v189, v287, &qword_1EBBC0540);
            uint64_t v191 = v343;
            uint64_t v192 = v133;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v133)(v190, 1, v343) == 1) {
              goto LABEL_132;
            }
            uint64_t v193 = v337;
            sub_1C3F8ADE0(v190, v337, type metadata accessor for Proto_Value);
            uint64_t v194 = *(void *)(v193 + *(int *)(v191 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v195 = v194;
            uint64_t v196 = v304;
            sub_1C3F970C4(v195, v304, &qword_1EBBBF8A0);
            int v197 = v139(v196, 1, v143);
            uint64_t v198 = (uint64_t)v307;
            if (v197 == 1)
            {
              sub_1C3F962E0(v196, &qword_1EBBBF8A0);
              uint64_t v199 = v347;
              uint64_t v156 = v319;
              uint64_t v200 = v313;
              uint64_t v201 = (uint64_t)v294;
            }
            else
            {
              int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
              uint64_t v199 = v347;
              uint64_t v156 = v319;
              uint64_t v200 = v313;
              uint64_t v201 = (uint64_t)v294;
              if (EnumCaseMultiPayload == 11)
              {
                sub_1C3F8ADE0(v196, v313, type metadata accessor for Proto_TaggedValue);
                goto LABEL_96;
              }
              sub_1C3F8B288(v196, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v260 = *(int *)(v349 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v200 + v260) = qword_1EA39AF60;
            swift_retain();
LABEL_96:
            sub_1C3F8B288(v337, type metadata accessor for Proto_Value);
            uint64_t v261 = *(void *)(v200 + *(int *)(v349 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v261, v201, &qword_1EBBC0540);
            uint64_t v262 = v343;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v192)(v201, 1, v343) == 1)
            {
              sub_1C4496888();
              uint64_t v263 = *(int *)(v262 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v198 + v263) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v201, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v201, v198, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v200, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v264 = sub_1C3F974B0(v198, v134);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v324 + 8) + 8) + 8))(v264);
            if (!v199) {
              goto LABEL_114;
            }
            goto LABEL_125;
          case 5:
            uint64_t v348 = inited;
            uint64_t v202 = *((void *)inited + 2) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v203 = v288;
            sub_1C3F970C4(v202, v288, &qword_1EBBC0540);
            uint64_t v204 = v343;
            uint64_t v205 = v133;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v133)(v203, 1, v343) == 1) {
              goto LABEL_133;
            }
            uint64_t v206 = v338;
            sub_1C3F8ADE0(v203, v338, type metadata accessor for Proto_Value);
            uint64_t v207 = *(void *)(v206 + *(int *)(v204 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v208 = v207;
            uint64_t v209 = v305;
            sub_1C3F970C4(v208, v305, &qword_1EBBBF8A0);
            int v210 = v139(v209, 1, v143);
            uint64_t v211 = (uint64_t)v308;
            if (v210 == 1)
            {
              sub_1C3F962E0(v209, &qword_1EBBBF8A0);
              uint64_t v212 = v347;
              uint64_t v156 = v320;
              uint64_t v213 = v314;
              uint64_t v214 = (uint64_t)v295;
            }
            else
            {
              int v234 = swift_getEnumCaseMultiPayload();
              uint64_t v212 = v347;
              uint64_t v156 = v320;
              uint64_t v213 = v314;
              uint64_t v214 = (uint64_t)v295;
              if (v234 == 11)
              {
                sub_1C3F8ADE0(v209, v314, type metadata accessor for Proto_TaggedValue);
                goto LABEL_107;
              }
              sub_1C3F8B288(v209, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v265 = *(int *)(v349 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v213 + v265) = qword_1EA39AF60;
            swift_retain();
LABEL_107:
            sub_1C3F8B288(v338, type metadata accessor for Proto_Value);
            uint64_t v266 = *(void *)(v213 + *(int *)(v349 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v266, v214, &qword_1EBBC0540);
            uint64_t v267 = v343;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v205)(v214, 1, v343) == 1)
            {
              sub_1C4496888();
              uint64_t v268 = *(int *)(v267 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v211 + v268) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v214, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v214, v211, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v213, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v269 = sub_1C3F974B0(v211, v134);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v325 + 8) + 8) + 8))(v269);
            if (v212) {
              goto LABEL_125;
            }
LABEL_114:
            swift_release();
            swift_release();
            uint64_t v270 = v340;
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v341 + 32))(v342, v156, v270);
          default:
            uint64_t v346 = (char *)v134;
            uint64_t v348 = inited;
            uint64_t v215 = *((void *)inited + 2) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v216 = v289;
            sub_1C3F970C4(v215, v289, &qword_1EBBC0540);
            uint64_t v217 = v343;
            uint64_t v218 = v133;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v133)(v216, 1, v343) == 1) {
              goto LABEL_134;
            }
            uint64_t v219 = v339;
            sub_1C3F8ADE0(v216, v339, type metadata accessor for Proto_Value);
            uint64_t v220 = *(void *)(v219 + *(int *)(v217 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v221 = v220;
            uint64_t v222 = v306;
            sub_1C3F970C4(v221, v306, &qword_1EBBBF8A0);
            if (v139(v222, 1, v143) == 1)
            {
              sub_1C3F962E0(v222, &qword_1EBBBF8A0);
              uint64_t v223 = v347;
              uint64_t v224 = v282;
              uint64_t v225 = (uint64_t)v281;
              uint64_t v226 = (uint64_t)v280;
              uint64_t v227 = v218;
            }
            else
            {
              int v235 = swift_getEnumCaseMultiPayload();
              uint64_t v223 = v347;
              uint64_t v224 = v282;
              uint64_t v225 = (uint64_t)v281;
              uint64_t v226 = (uint64_t)v280;
              uint64_t v227 = v218;
              if (v235 == 11)
              {
                sub_1C3F8ADE0(v222, v282, type metadata accessor for Proto_TaggedValue);
                uint64_t v236 = (uint64_t)v346;
                goto LABEL_119;
              }
              sub_1C3F8B288(v222, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            uint64_t v236 = (uint64_t)v346;
            sub_1C4496888();
            uint64_t v271 = *(int *)(v349 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v224 + v271) = qword_1EA39AF60;
            swift_retain();
LABEL_119:
            sub_1C3F8B288(v339, type metadata accessor for Proto_Value);
            uint64_t v272 = *(void *)(v224 + *(int *)(v349 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v272, v226, &qword_1EBBC0540);
            uint64_t v273 = v343;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v227)(v226, 1, v343) == 1)
            {
              sub_1C4496888();
              uint64_t v274 = *(int *)(v273 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v225 + v274) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v226, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v226, v225, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v224, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v275 = sub_1C3F974B0(v225, v236);
            swift_release();
            AnyCRValue.init(from:)(v275, &v362);
            if (v223)
            {
LABEL_125:
              swift_release();
              swift_setDeallocating();
              return swift_release();
            }
            else
            {
              swift_release();
              swift_release();
              uint64_t v276 = v362;
              uint64_t v277 = v279;
              *uint64_t v279 = v148;
              v277[1] = v276;
              uint64_t v278 = v340;
              swift_storeEnumTagMultiPayload();
              return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v341 + 32))(v342, v277, v278);
            }
        }
      }
      swift_retain();
      sub_1C3F8B288(v144, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1C4496888();
    uint64_t v145 = *(int *)(v349 + 20);
    if (qword_1EA39AF70 != -1) {
      swift_once();
    }
    *(void *)(v141 + v145) = qword_1EA39AF60;
    goto LABEL_12;
  }
  sub_1C3FE3FF0();
  swift_allocError();
  *(void *)uint64_t v130 = 0xD000000000000017;
  *(void *)(v130 + 8) = 0x80000001C44B0F00;
  *(unsigned char *)(v130 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t TaggedValue_6.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t v441 = a1;
  uint64_t v443 = (void *)a2[7];
  uint64_t v433 = *(v443 - 1);
  uint64_t v3 = MEMORY[0x1F4188790](a1);
  uint64_t v437 = (char *)&v377 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v442 = *(void **)(v5 + 48);
  uint64_t v432 = *(v442 - 1);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  uint64_t v436 = (char *)&v377 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v455 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 40);
  uint64_t v431 = *((void *)v455 - 1);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v435 = (char *)&v377 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v445 = *(void *)(v11 + 32);
  uint64_t v420 = *(void *)(v445 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  v421 = (char *)&v377 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v444 = *(void *)(v14 + 24);
  uint64_t v430 = *(void *)(v444 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v434 = (char *)&v377 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v423 = (uint64_t)&v377 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v424 = (uint64_t)&v377 - v19;
  uint64_t v439 = type metadata accessor for Proto_Value(0);
  uint64_t v422 = *(void *)(v439 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v439);
  uint64_t v408 = (uint64_t)&v377 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v412 = (uint64_t)&v377 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v411 = (uint64_t)&v377 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v410 = (uint64_t)&v377 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v409 = (uint64_t)&v377 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v413 = (uint64_t)&v377 - v31;
  MEMORY[0x1F4188790](v30);
  uint64_t v407 = (uint64_t)&v377 - v32;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v34 = MEMORY[0x1F4188790](v33 - 8);
  uint64_t v390 = (uint64_t)&v377 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v406 = (uint64_t)&v377 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v391 = (uint64_t)&v377 - v39;
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  uint64_t v405 = (uint64_t)&v377 - v41;
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  uint64_t v389 = (uint64_t)&v377 - v43;
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  uint64_t v404 = (uint64_t)&v377 - v45;
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  uint64_t v388 = (uint64_t)&v377 - v47;
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  uint64_t v403 = (uint64_t)&v377 - v49;
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  uint64_t v387 = (uint64_t)&v377 - v51;
  uint64_t v52 = MEMORY[0x1F4188790](v50);
  uint64_t v402 = (uint64_t)&v377 - v53;
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  uint64_t v386 = (uint64_t)&v377 - v55;
  uint64_t v56 = MEMORY[0x1F4188790](v54);
  uint64_t v401 = (uint64_t)&v377 - v57;
  uint64_t v58 = MEMORY[0x1F4188790](v56);
  uint64_t v385 = (uint64_t)&v377 - v59;
  MEMORY[0x1F4188790](v58);
  uint64_t v400 = (uint64_t)&v377 - v60;
  uint64_t v438 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v61 = MEMORY[0x1F4188790](v438);
  uint64_t v392 = (uint64_t)&v377 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = MEMORY[0x1F4188790](v61);
  uint64_t v419 = (uint64_t)&v377 - v64;
  uint64_t v65 = MEMORY[0x1F4188790](v63);
  uint64_t v398 = (uint64_t)&v377 - v66;
  uint64_t v67 = MEMORY[0x1F4188790](v65);
  uint64_t v417 = (uint64_t)&v377 - v68;
  uint64_t v69 = MEMORY[0x1F4188790](v67);
  uint64_t v397 = (uint64_t)&v377 - v70;
  uint64_t v71 = MEMORY[0x1F4188790](v69);
  uint64_t v416 = (uint64_t)&v377 - v72;
  uint64_t v73 = MEMORY[0x1F4188790](v71);
  uint64_t v396 = (uint64_t)&v377 - v74;
  uint64_t v75 = MEMORY[0x1F4188790](v73);
  uint64_t v415 = (uint64_t)&v377 - v76;
  uint64_t v77 = MEMORY[0x1F4188790](v75);
  uint64_t v395 = (uint64_t)&v377 - v78;
  uint64_t v79 = MEMORY[0x1F4188790](v77);
  uint64_t v399 = (uint64_t)&v377 - v80;
  uint64_t v81 = MEMORY[0x1F4188790](v79);
  uint64_t v393 = (uint64_t)&v377 - v82;
  uint64_t v83 = MEMORY[0x1F4188790](v81);
  uint64_t v418 = (uint64_t)&v377 - v84;
  uint64_t v85 = MEMORY[0x1F4188790](v83);
  uint64_t v394 = (uint64_t)&v377 - v86;
  uint64_t v87 = MEMORY[0x1F4188790](v85);
  uint64_t v414 = (uint64_t)&v377 - v88;
  uint64_t v89 = a2[2];
  uint64_t v429 = *(void *)(v89 - 8);
  MEMORY[0x1F4188790](v87);
  uint64_t v91 = (char *)&v377 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = a2[8];
  uint64_t v92 = a2[9];
  uint64_t v95 = a2[10];
  uint64_t v94 = a2[11];
  uint64_t v97 = a2[12];
  uint64_t v96 = a2[13];
  uint64_t v446 = v89;
  uint64_t v447 = v444;
  uint64_t v448 = v445;
  uint64_t v449 = v455;
  uint64_t v450 = v442;
  uint64_t v451 = v443;
  uint64_t v452 = v93;
  uint64_t v453 = v92;
  v454[0] = v95;
  v454[1] = v94;
  v454[2] = v97;
  v454[3] = v96;
  uint64_t v427 = type metadata accessor for TaggedValue_6.TaggedEnum();
  uint64_t v426 = *(void *)(v427 - 8);
  MEMORY[0x1F4188790](v427);
  uint64_t v425 = (char *)&v377 - v98;
  uint64_t v99 = v440;
  uint64_t result = sub_1C3F6DD10();
  if (!v99)
  {
    uint64_t v384 = v91;
    uint64_t v377 = v93;
    uint64_t v378 = v92;
    uint64_t v379 = v95;
    uint64_t v380 = v94;
    uint64_t v381 = v97;
    uint64_t v382 = v96;
    uint64_t v383 = v89;
    uint64_t v440 = result;
    uint64_t v101 = v425;
    (*(void (**)(char *, uint64_t, uint64_t))(v426 + 16))(v425, v428, v427);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        (*(void (**)(char *, char *, uint64_t))(v430 + 32))(v434, v101, v444);
        uint64_t v110 = v440 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
        swift_beginAccess();
        uint64_t v111 = *(void *)(v110 + *(int *)(v439 + 20))
             + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v112 = v401;
        sub_1C3F970C4(v111, v401, &qword_1EBBBF8A0);
        uint64_t v113 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
        uint64_t v114 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 48);
        if (v114(v112, 1, v113) == 1)
        {
          swift_retain();
          sub_1C3F962E0(v112, &qword_1EBBBF8A0);
          uint64_t v115 = v443;
        }
        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          uint64_t v115 = v443;
          if (EnumCaseMultiPayload == 11)
          {
            uint64_t v159 = v112;
            uint64_t v160 = v418;
            sub_1C3F8ADE0(v159, v418, type metadata accessor for Proto_TaggedValue);
            swift_retain();
            uint64_t v161 = v438;
            goto LABEL_45;
          }
          swift_retain();
          sub_1C3F8B288(v112, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        }
        uint64_t v160 = v418;
        sub_1C4496888();
        uint64_t v161 = v438;
        uint64_t v194 = *(int *)(v438 + 20);
        if (qword_1EA39AF70 != -1)
        {
          swift_once();
          uint64_t v161 = v438;
        }
        *(void *)(v160 + v194) = qword_1EA39AF60;
        swift_retain();
LABEL_45:
        uint64_t v195 = *(int *)(v161 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          uint64_t v196 = swift_retain();
          uint64_t v197 = sub_1C4400A40(v196);
          uint64_t v160 = v418;
          *(void *)(v418 + v195) = v197;
          swift_release();
        }
        uint64_t v198 = *(void *)(v160 + v195);
        swift_beginAccess();
        *(void *)(v198 + 16) = 1;
        sub_1C43F0970(v160);
        uint64_t v199 = swift_endAccess();
        MEMORY[0x1F4188790](v199);
        uint64_t v200 = v444;
        *(&v377 - 14) = v383;
        *(&v377 - 13) = v200;
        uint64_t v201 = v455;
        *(&v377 - 12) = v445;
        *(&v377 - 11) = (uint64_t)v201;
        *(&v377 - 10) = (uint64_t)v442;
        *(&v377 - 9) = (uint64_t)v115;
        uint64_t v202 = v378;
        *(&v377 - 8) = v377;
        *(&v377 - 7) = v202;
        uint64_t v203 = v380;
        *(&v377 - 6) = v379;
        *(&v377 - 5) = v203;
        uint64_t v204 = v382;
        *(&v377 - 4) = v381;
        *(&v377 - 3) = v204;
        uint64_t v205 = v441;
        *(&v377 - 2) = (uint64_t)v434;
        *(&v377 - 1) = v205;
        sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C29B8, v413);
        uint64_t v428 = 0;
        swift_beginAccess();
        uint64_t v206 = *(void *)(v110 + *(int *)(v439 + 20))
             + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v207 = v386;
        sub_1C3F970C4(v206, v386, &qword_1EBBBF8A0);
        if (v114(v207, 1, v113) == 1)
        {
          sub_1C3F962E0(v207, &qword_1EBBBF8A0);
          uint64_t v208 = v424;
          uint64_t v209 = v439;
          uint64_t v192 = v444;
          uint64_t v210 = v413;
        }
        else
        {
          int v306 = swift_getEnumCaseMultiPayload();
          uint64_t v208 = v424;
          uint64_t v192 = v444;
          uint64_t v210 = v413;
          if (v306 == 11)
          {
            uint64_t v307 = v393;
            sub_1C3F8ADE0(v207, v393, type metadata accessor for Proto_TaggedValue);
            uint64_t v209 = v439;
            uint64_t v308 = v438;
LABEL_121:
            uint64_t v330 = *(int *)(v308 + 20);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              type metadata accessor for Proto_TaggedValue._StorageClass(0);
              swift_allocObject();
              uint64_t v331 = swift_retain();
              uint64_t v307 = v393;
              uint64_t v332 = sub_1C4400A40(v331);
              uint64_t v210 = v413;
              *(void *)(v307 + v330) = v332;
              swift_release();
            }
            uint64_t v333 = *(void *)(v307 + v330);
            sub_1C3F8ADE0(v210, v208, type metadata accessor for Proto_Value);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v422 + 56))(v208, 0, 1, v209);
            uint64_t v334 = v423;
            sub_1C4124B88(v208, v423);
            uint64_t v335 = v333
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            swift_retain();
            sub_1C4124BF0(v334, v335);
            swift_endAccess();
            swift_release();
            sub_1C43F0970(v307);
            swift_endAccess();
            swift_release();
            uint64_t v327 = *(uint64_t (**)(char *, uint64_t))(v430 + 8);
            uint64_t v328 = v454;
            goto LABEL_124;
          }
          sub_1C3F8B288(v207, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          uint64_t v209 = v439;
        }
        uint64_t v307 = v393;
        sub_1C4496888();
        uint64_t v308 = v438;
        uint64_t v329 = *(int *)(v438 + 20);
        if (qword_1EA39AF70 != -1)
        {
          swift_once();
          uint64_t v308 = v438;
        }
        *(void *)(v307 + v329) = qword_1EA39AF60;
        swift_retain();
        goto LABEL_121;
      case 2u:
        (*(void (**)(char *, char *, uint64_t))(v420 + 32))(v421, v101, v445);
        uint64_t v116 = v440 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
        swift_beginAccess();
        uint64_t v117 = *(void *)(v116 + *(int *)(v439 + 20))
             + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v118 = v117;
        uint64_t v119 = v402;
        sub_1C3F970C4(v118, v402, &qword_1EBBBF8A0);
        uint64_t v120 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
        uint64_t v121 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v120 - 8) + 48);
        if (v121(v119, 1, v120) == 1)
        {
          swift_retain();
          sub_1C3F962E0(v119, &qword_1EBBBF8A0);
        }
        else
        {
          if (swift_getEnumCaseMultiPayload() == 11)
          {
            uint64_t v162 = v399;
            sub_1C3F8ADE0(v119, v399, type metadata accessor for Proto_TaggedValue);
            swift_retain();
            uint64_t v163 = v438;
            goto LABEL_53;
          }
          swift_retain();
          sub_1C3F8B288(v119, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        }
        uint64_t v162 = v399;
        sub_1C4496888();
        uint64_t v163 = v438;
        uint64_t v211 = *(int *)(v438 + 20);
        if (qword_1EA39AF70 != -1)
        {
          swift_once();
          uint64_t v163 = v438;
        }
        *(void *)(v162 + v211) = qword_1EA39AF60;
        swift_retain();
LABEL_53:
        uint64_t v212 = *(int *)(v163 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          uint64_t v213 = swift_retain();
          *(void *)(v162 + v212) = sub_1C4400A40(v213);
          swift_release();
        }
        uint64_t v214 = *(void *)(v162 + v212);
        swift_beginAccess();
        *(void *)(v214 + 16) = 2;
        sub_1C43F0970(v162);
        uint64_t v215 = swift_endAccess();
        MEMORY[0x1F4188790](v215);
        uint64_t v216 = v444;
        *(&v377 - 14) = v383;
        *(&v377 - 13) = v216;
        uint64_t v217 = v455;
        *(&v377 - 12) = v445;
        *(&v377 - 11) = (uint64_t)v217;
        uint64_t v218 = v443;
        *(&v377 - 10) = (uint64_t)v442;
        *(&v377 - 9) = (uint64_t)v218;
        uint64_t v219 = v378;
        *(&v377 - 8) = v377;
        *(&v377 - 7) = v219;
        uint64_t v220 = v380;
        *(&v377 - 6) = v379;
        *(&v377 - 5) = v220;
        uint64_t v221 = v382;
        *(&v377 - 4) = v381;
        *(&v377 - 3) = v221;
        uint64_t v222 = v441;
        *(&v377 - 2) = (uint64_t)v421;
        *(&v377 - 1) = v222;
        sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2970, v409);
        swift_beginAccess();
        uint64_t v223 = *(void *)(v116 + *(int *)(v439 + 20))
             + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v224 = v387;
        sub_1C3F970C4(v223, v387, &qword_1EBBBF8A0);
        unsigned int v225 = v121(v224, 1, v120);
        uint64_t v226 = v420;
        if (v225 == 1)
        {
          sub_1C3F962E0(v224, &qword_1EBBBF8A0);
          uint64_t v227 = v439;
          BOOL v228 = v421;
          uint64_t v229 = v395;
        }
        else
        {
          int v309 = swift_getEnumCaseMultiPayload();
          BOOL v228 = v421;
          uint64_t v229 = v395;
          if (v309 == 11)
          {
            sub_1C3F8ADE0(v224, v395, type metadata accessor for Proto_TaggedValue);
            uint64_t v227 = v439;
            uint64_t v310 = v438;
            goto LABEL_129;
          }
          sub_1C3F8B288(v224, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          uint64_t v227 = v439;
        }
        sub_1C4496888();
        uint64_t v310 = v438;
        uint64_t v338 = *(int *)(v438 + 20);
        if (qword_1EA39AF70 != -1)
        {
          swift_once();
          uint64_t v310 = v438;
        }
        *(void *)(v229 + v338) = qword_1EA39AF60;
        swift_retain();
LABEL_129:
        uint64_t v339 = *(int *)(v310 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          uint64_t v340 = swift_retain();
          uint64_t v229 = v395;
          *(void *)(v229 + v339) = sub_1C4400A40(v340);
          swift_release();
        }
        uint64_t v341 = *(void *)(v229 + v339);
        uint64_t v342 = v424;
        sub_1C3F8ADE0(v409, v424, type metadata accessor for Proto_Value);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v422 + 56))(v342, 0, 1, v227);
        uint64_t v343 = v423;
        sub_1C4124B88(v342, v423);
        uint64_t v344 = v341
             + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
        swift_beginAccess();
        swift_retain();
        sub_1C4124BF0(v343, v344);
        swift_endAccess();
        swift_release();
        sub_1C43F0970(v229);
        swift_endAccess();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v226 + 8))(v228, v445);
      case 3u:
        uint64_t v428 = 0;
        (*(void (**)(char *, char *, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(v431 + 32))(v435, v101, v455);
        uint64_t v122 = v440 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
        swift_beginAccess();
        uint64_t v123 = *(void *)(v122 + *(int *)(v439 + 20))
             + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v124 = v123;
        uint64_t v125 = v403;
        sub_1C3F970C4(v124, v403, &qword_1EBBBF8A0);
        uint64_t v126 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
        uint64_t v127 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v126 - 8) + 48);
        int v128 = v127(v125, 1, v126);
        uint64_t v129 = v445;
        if (v128 == 1)
        {
          swift_retain();
          sub_1C3F962E0(v125, &qword_1EBBBF8A0);
          uint64_t v130 = v415;
        }
        else
        {
          int v164 = swift_getEnumCaseMultiPayload();
          uint64_t v130 = v415;
          if (v164 == 11)
          {
            sub_1C3F8ADE0(v125, v415, type metadata accessor for Proto_TaggedValue);
            swift_retain();
            uint64_t v165 = v438;
            goto LABEL_61;
          }
          swift_retain();
          sub_1C3F8B288(v125, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        }
        sub_1C4496888();
        uint64_t v165 = v438;
        uint64_t v230 = *(int *)(v438 + 20);
        if (qword_1EA39AF70 != -1)
        {
          swift_once();
          uint64_t v165 = v438;
        }
        *(void *)(v130 + v230) = qword_1EA39AF60;
        swift_retain();
LABEL_61:
        uint64_t v231 = *(int *)(v165 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          uint64_t v232 = swift_retain();
          uint64_t v233 = sub_1C4400A40(v232);
          uint64_t v130 = v415;
          *(void *)(v415 + v231) = v233;
          swift_release();
        }
        uint64_t v234 = *(void *)(v130 + v231);
        swift_beginAccess();
        *(void *)(v234 + 16) = 3;
        sub_1C43F0970(v130);
        uint64_t v235 = swift_endAccess();
        MEMORY[0x1F4188790](v235);
        uint64_t v236 = v444;
        *(&v377 - 14) = v383;
        *(&v377 - 13) = v236;
        *(&v377 - 12) = v129;
        uint64_t v237 = v455;
        uint64_t v238 = v442;
        *(&v377 - 11) = (uint64_t)v455;
        *(&v377 - 10) = (uint64_t)v238;
        uint64_t v239 = v377;
        *(&v377 - 9) = (uint64_t)v443;
        *(&v377 - 8) = v239;
        uint64_t v240 = v379;
        *(&v377 - 7) = v378;
        *(&v377 - 6) = v240;
        uint64_t v241 = v381;
        *(&v377 - 5) = v380;
        *(&v377 - 4) = v241;
        uint64_t v242 = v435;
        *(&v377 - 3) = v382;
        *(&v377 - 2) = (uint64_t)v242;
        *(&v377 - 1) = v441;
        uint64_t v243 = v428;
        sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2928, v410);
        if (v243)
        {
          swift_release();
          uint64_t v244 = (uint64_t *)&v451;
          return (*(uint64_t (**)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(*(v244 - 32) + 8))(v242, v237);
        }
        uint64_t v428 = 0;
        swift_beginAccess();
        uint64_t v245 = *(void *)(v122 + *(int *)(v439 + 20))
             + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v246 = v388;
        sub_1C3F970C4(v245, v388, &qword_1EBBBF8A0);
        if (v127(v246, 1, v126) == 1)
        {
          sub_1C3F962E0(v246, &qword_1EBBBF8A0);
          uint64_t v247 = v423;
          uint64_t v248 = v424;
          uint64_t v249 = v422;
          uint64_t v250 = v439;
          uint64_t v251 = v396;
        }
        else
        {
          int v311 = swift_getEnumCaseMultiPayload();
          uint64_t v247 = v423;
          uint64_t v248 = v424;
          uint64_t v249 = v422;
          uint64_t v251 = v396;
          if (v311 == 11)
          {
            sub_1C3F8ADE0(v246, v396, type metadata accessor for Proto_TaggedValue);
            uint64_t v250 = v439;
            uint64_t v312 = v438;
            goto LABEL_136;
          }
          sub_1C3F8B288(v246, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          uint64_t v250 = v439;
        }
        sub_1C4496888();
        uint64_t v312 = v438;
        uint64_t v345 = v251;
        uint64_t v346 = *(int *)(v438 + 20);
        if (qword_1EA39AF70 != -1)
        {
          swift_once();
          uint64_t v312 = v438;
        }
        *(void *)(v345 + v346) = qword_1EA39AF60;
        swift_retain();
        uint64_t v251 = v345;
LABEL_136:
        uint64_t v347 = *(int *)(v312 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          uint64_t v348 = swift_retain();
          uint64_t v349 = sub_1C4400A40(v348);
          uint64_t v251 = v396;
          *(void *)(v396 + v347) = v349;
          swift_release();
        }
        uint64_t v350 = v251;
        uint64_t v351 = *(void *)(v251 + v347);
        sub_1C3F8ADE0(v410, v248, type metadata accessor for Proto_Value);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v249 + 56))(v248, 0, 1, v250);
        sub_1C4124B88(v248, v247);
        uint64_t v352 = v351
             + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
        swift_beginAccess();
        swift_retain();
        sub_1C4124BF0(v247, v352);
        swift_endAccess();
        swift_release();
        sub_1C43F0970(v350);
        swift_endAccess();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(v431 + 8))(v435, v455);
      case 4u:
        uint64_t v428 = 0;
        (*(void (**)(char *, char *, void *))(v432 + 32))(v436, v101, v442);
        uint64_t v131 = v440 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
        swift_beginAccess();
        uint64_t v132 = *(void *)(v131 + *(int *)(v439 + 20))
             + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v133 = v132;
        uint64_t v134 = v404;
        sub_1C3F970C4(v133, v404, &qword_1EBBBF8A0);
        uint64_t v135 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
        uint64_t v136 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v135 - 8) + 48);
        int v137 = v136(v134, 1, v135);
        uint64_t v138 = v455;
        if (v137 == 1)
        {
          swift_retain();
          sub_1C3F962E0(v134, &qword_1EBBBF8A0);
          uint64_t v139 = v416;
        }
        else
        {
          int v166 = swift_getEnumCaseMultiPayload();
          uint64_t v139 = v416;
          if (v166 == 11)
          {
            sub_1C3F8ADE0(v134, v416, type metadata accessor for Proto_TaggedValue);
            swift_retain();
            uint64_t v167 = v438;
            goto LABEL_71;
          }
          swift_retain();
          sub_1C3F8B288(v134, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        }
        sub_1C4496888();
        uint64_t v167 = v438;
        uint64_t v252 = *(int *)(v438 + 20);
        if (qword_1EA39AF70 != -1)
        {
          swift_once();
          uint64_t v167 = v438;
        }
        *(void *)(v139 + v252) = qword_1EA39AF60;
        swift_retain();
LABEL_71:
        uint64_t v253 = *(int *)(v167 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          uint64_t v254 = swift_retain();
          uint64_t v255 = sub_1C4400A40(v254);
          uint64_t v139 = v416;
          *(void *)(v416 + v253) = v255;
          swift_release();
        }
        uint64_t v256 = *(void *)(v139 + v253);
        swift_beginAccess();
        *(void *)(v256 + 16) = 4;
        sub_1C43F0970(v139);
        uint64_t v257 = swift_endAccess();
        MEMORY[0x1F4188790](v257);
        uint64_t v258 = v444;
        *(&v377 - 14) = v383;
        *(&v377 - 13) = v258;
        *(&v377 - 12) = v445;
        *(&v377 - 11) = (uint64_t)v138;
        uint64_t v237 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v442;
        uint64_t v259 = v443;
        *(&v377 - 10) = (uint64_t)v442;
        *(&v377 - 9) = (uint64_t)v259;
        uint64_t v260 = v378;
        *(&v377 - 8) = v377;
        *(&v377 - 7) = v260;
        uint64_t v261 = v380;
        *(&v377 - 6) = v379;
        *(&v377 - 5) = v261;
        uint64_t v262 = v382;
        *(&v377 - 4) = v381;
        *(&v377 - 3) = v262;
        uint64_t v242 = v436;
        uint64_t v263 = v441;
        *(&v377 - 2) = (uint64_t)v436;
        *(&v377 - 1) = v263;
        uint64_t v264 = v428;
        sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C28E0, v411);
        if (v264)
        {
          swift_release();
          uint64_t v244 = &v452;
          return (*(uint64_t (**)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(*(v244 - 32) + 8))(v242, v237);
        }
        uint64_t v428 = 0;
        swift_beginAccess();
        uint64_t v265 = v439;
        uint64_t v266 = *(void *)(v131 + *(int *)(v439 + 20))
             + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v267 = v389;
        sub_1C3F970C4(v266, v389, &qword_1EBBBF8A0);
        if (v136(v267, 1, v135) == 1)
        {
          sub_1C3F962E0(v267, &qword_1EBBBF8A0);
          uint64_t v268 = v423;
          uint64_t v269 = v424;
          uint64_t v270 = v422;
          uint64_t v271 = v397;
        }
        else
        {
          int v313 = swift_getEnumCaseMultiPayload();
          uint64_t v268 = v423;
          uint64_t v269 = v424;
          uint64_t v270 = v422;
          uint64_t v271 = v397;
          if (v313 == 11)
          {
            sub_1C3F8ADE0(v267, v397, type metadata accessor for Proto_TaggedValue);
            uint64_t v314 = v438;
            goto LABEL_143;
          }
          sub_1C3F8B288(v267, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        }
        sub_1C4496888();
        uint64_t v314 = v438;
        uint64_t v353 = v271;
        uint64_t v354 = *(int *)(v438 + 20);
        if (qword_1EA39AF70 != -1)
        {
          swift_once();
          uint64_t v314 = v438;
        }
        *(void *)(v353 + v354) = qword_1EA39AF60;
        swift_retain();
        uint64_t v271 = v353;
LABEL_143:
        uint64_t v355 = *(int *)(v314 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          uint64_t v356 = swift_retain();
          uint64_t v357 = sub_1C4400A40(v356);
          uint64_t v271 = v397;
          *(void *)(v397 + v355) = v357;
          swift_release();
        }
        uint64_t v358 = v271;
        uint64_t v359 = *(void *)(v271 + v355);
        sub_1C3F8ADE0(v411, v269, type metadata accessor for Proto_Value);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v270 + 56))(v269, 0, 1, v265);
        sub_1C4124B88(v269, v268);
        uint64_t v360 = v359
             + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
        swift_beginAccess();
        swift_retain();
        sub_1C4124BF0(v268, v360);
        swift_endAccess();
        swift_release();
        sub_1C43F0970(v358);
        swift_endAccess();
        swift_release();
        uint64_t v327 = *(uint64_t (**)(char *, uint64_t))(v432 + 8);
        uint64_t v336 = v436;
        uint64_t v361 = &v456;
        goto LABEL_153;
      case 5u:
        uint64_t v428 = 0;
        (*(void (**)(char *, char *, void *))(v433 + 32))(v437, v101, v443);
        uint64_t v140 = v440 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
        swift_beginAccess();
        uint64_t v141 = *(void *)(v140 + *(int *)(v439 + 20))
             + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v142 = v141;
        uint64_t v143 = v405;
        sub_1C3F970C4(v142, v405, &qword_1EBBBF8A0);
        uint64_t v144 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
        uint64_t v145 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v144 - 8) + 48);
        if (v145(v143, 1, v144) == 1)
        {
          swift_retain();
          sub_1C3F962E0(v143, &qword_1EBBBF8A0);
          uint64_t v146 = v442;
          uint64_t v147 = v417;
        }
        else
        {
          int v168 = swift_getEnumCaseMultiPayload();
          uint64_t v146 = v442;
          uint64_t v147 = v417;
          if (v168 == 11)
          {
            sub_1C3F8ADE0(v143, v417, type metadata accessor for Proto_TaggedValue);
            swift_retain();
            uint64_t v169 = v438;
            goto LABEL_81;
          }
          swift_retain();
          sub_1C3F8B288(v143, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        }
        sub_1C4496888();
        uint64_t v169 = v438;
        uint64_t v272 = *(int *)(v438 + 20);
        if (qword_1EA39AF70 != -1)
        {
          swift_once();
          uint64_t v169 = v438;
        }
        *(void *)(v147 + v272) = qword_1EA39AF60;
        swift_retain();
LABEL_81:
        uint64_t v273 = *(int *)(v169 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          uint64_t v274 = swift_retain();
          uint64_t v275 = sub_1C4400A40(v274);
          uint64_t v147 = v417;
          *(void *)(v417 + v273) = v275;
          swift_release();
        }
        uint64_t v276 = *(void *)(v147 + v273);
        swift_beginAccess();
        *(void *)(v276 + 16) = 5;
        sub_1C43F0970(v147);
        uint64_t v277 = swift_endAccess();
        MEMORY[0x1F4188790](v277);
        uint64_t v278 = v444;
        *(&v377 - 14) = v383;
        *(&v377 - 13) = v278;
        uint64_t v279 = v455;
        *(&v377 - 12) = v445;
        *(&v377 - 11) = (uint64_t)v279;
        *(&v377 - 10) = (uint64_t)v146;
        uint64_t v237 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v443;
        uint64_t v280 = v377;
        *(&v377 - 9) = (uint64_t)v443;
        *(&v377 - 8) = v280;
        uint64_t v281 = v379;
        *(&v377 - 7) = v378;
        *(&v377 - 6) = v281;
        uint64_t v282 = v381;
        *(&v377 - 5) = v380;
        *(&v377 - 4) = v282;
        uint64_t v242 = v437;
        *(&v377 - 3) = v382;
        *(&v377 - 2) = (uint64_t)v242;
        *(&v377 - 1) = v441;
        uint64_t v283 = v428;
        sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2898, v412);
        if (v283)
        {
          swift_release();
          uint64_t v244 = &v453;
          return (*(uint64_t (**)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(*(v244 - 32) + 8))(v242, v237);
        }
        uint64_t v428 = 0;
        swift_beginAccess();
        uint64_t v284 = v439;
        uint64_t v285 = *(void *)(v140 + *(int *)(v439 + 20))
             + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v286 = v391;
        sub_1C3F970C4(v285, v391, &qword_1EBBBF8A0);
        if (v145(v286, 1, v144) == 1)
        {
          sub_1C3F962E0(v286, &qword_1EBBBF8A0);
          uint64_t v287 = v423;
          uint64_t v288 = v424;
          uint64_t v289 = v422;
          uint64_t v290 = v398;
        }
        else
        {
          int v315 = swift_getEnumCaseMultiPayload();
          uint64_t v287 = v423;
          uint64_t v288 = v424;
          uint64_t v289 = v422;
          uint64_t v290 = v398;
          if (v315 == 11)
          {
            sub_1C3F8ADE0(v286, v398, type metadata accessor for Proto_TaggedValue);
            uint64_t v316 = v438;
            goto LABEL_150;
          }
          sub_1C3F8B288(v286, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        }
        sub_1C4496888();
        uint64_t v316 = v438;
        uint64_t v362 = v290;
        uint64_t v363 = *(int *)(v438 + 20);
        if (qword_1EA39AF70 != -1)
        {
          swift_once();
          uint64_t v316 = v438;
        }
        *(void *)(v362 + v363) = qword_1EA39AF60;
        swift_retain();
        uint64_t v290 = v362;
LABEL_150:
        uint64_t v364 = *(int *)(v316 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          uint64_t v365 = swift_retain();
          uint64_t v366 = sub_1C4400A40(v365);
          uint64_t v290 = v398;
          *(void *)(v398 + v364) = v366;
          swift_release();
        }
        uint64_t v367 = v290;
        uint64_t v368 = *(void *)(v290 + v364);
        sub_1C3F8ADE0(v412, v288, type metadata accessor for Proto_Value);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v289 + 56))(v288, 0, 1, v284);
        sub_1C4124B88(v288, v287);
        uint64_t v369 = v368
             + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
        swift_beginAccess();
        swift_retain();
        sub_1C4124BF0(v287, v369);
        swift_endAccess();
        swift_release();
        sub_1C43F0970(v367);
        swift_endAccess();
        swift_release();
        uint64_t v327 = *(uint64_t (**)(char *, uint64_t))(v433 + 8);
        uint64_t v336 = v437;
        uint64_t v361 = &v457;
LABEL_153:
        uint64_t v337 = *(v361 - 32);
        return v327(v336, v337);
      case 6u:
        uint64_t v149 = *(void *)v101;
        uint64_t v148 = *((void *)v101 + 1);
        uint64_t v150 = v440 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
        swift_beginAccess();
        uint64_t v151 = *(void *)(v150 + *(int *)(v439 + 20))
             + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v152 = v406;
        sub_1C3F970C4(v151, v406, &qword_1EBBBF8A0);
        uint64_t v153 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
        uint64_t v154 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v153 - 8) + 48);
        unsigned int v155 = v154(v152, 1, v153);
        uint64_t v455 = v154;
        if (v155 == 1)
        {
          swift_retain();
          sub_1C3F962E0(v152, &qword_1EBBBF8A0);
        }
        else
        {
          if (swift_getEnumCaseMultiPayload() == 11)
          {
            uint64_t v170 = v419;
            sub_1C3F8ADE0(v152, v419, type metadata accessor for Proto_TaggedValue);
            swift_retain();
            uint64_t v171 = v438;
            goto LABEL_92;
          }
          swift_retain();
          sub_1C3F8B288(v152, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        }
        uint64_t v291 = v419;
        sub_1C4496888();
        uint64_t v171 = v438;
        uint64_t v292 = *(int *)(v438 + 20);
        if (qword_1EA39AF70 != -1)
        {
          swift_once();
          uint64_t v171 = v438;
        }
        *(void *)(v291 + v292) = qword_1EA39AF60;
        swift_retain();
        uint64_t v170 = v291;
LABEL_92:
        uint64_t v293 = v148;
        uint64_t v294 = *(int *)(v171 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          uint64_t v295 = swift_retain();
          uint64_t v296 = sub_1C4400A40(v295);
          uint64_t v170 = v419;
          *(void *)(v419 + v294) = v296;
          swift_release();
        }
        uint64_t v297 = v170;
        uint64_t v298 = *(void *)(v170 + v294);
        swift_beginAccess();
        *(void *)(v298 + 16) = v149;
        sub_1C43F0970(v297);
        swift_endAccess();
        swift_retain();
        uint64_t v299 = swift_retain();
        sub_1C400B83C(v299, v293, v299, v408);
        swift_beginAccess();
        uint64_t v300 = *(void *)(v150 + *(int *)(v439 + 20))
             + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v301 = v300;
        uint64_t v302 = v390;
        sub_1C3F970C4(v301, v390, &qword_1EBBBF8A0);
        if (v455(v302, 1, v153) == 1)
        {
          sub_1C3F962E0(v302, &qword_1EBBBF8A0);
          uint64_t v303 = v392;
        }
        else
        {
          int v317 = swift_getEnumCaseMultiPayload();
          uint64_t v303 = v392;
          if (v317 == 11)
          {
            sub_1C3F8ADE0(v302, v392, type metadata accessor for Proto_TaggedValue);
            uint64_t v318 = v438;
            goto LABEL_159;
          }
          sub_1C3F8B288(v302, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        }
        sub_1C4496888();
        uint64_t v318 = v438;
        uint64_t v370 = *(int *)(v438 + 20);
        if (qword_1EA39AF70 != -1)
        {
          swift_once();
          uint64_t v318 = v438;
        }
        *(void *)(v303 + v370) = qword_1EA39AF60;
        swift_retain();
LABEL_159:
        uint64_t v371 = *(int *)(v318 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          uint64_t v372 = swift_retain();
          *(void *)(v303 + v371) = sub_1C4400A40(v372);
          swift_release();
        }
        uint64_t v373 = *(void *)(v303 + v371);
        uint64_t v374 = v424;
        sub_1C3F8ADE0(v408, v424, type metadata accessor for Proto_Value);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v422 + 56))(v374, 0, 1, v439);
        uint64_t v375 = v423;
        sub_1C4124B88(v374, v423);
        uint64_t v376 = v373
             + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
        swift_beginAccess();
        swift_retain();
        sub_1C4124BF0(v375, v376);
        swift_endAccess();
        swift_release();
        sub_1C43F0970(v303);
        swift_endAccess();
        swift_release();
        return swift_release();
      default:
        uint64_t v428 = 0;
        (*(void (**)(char *, char *, uint64_t))(v429 + 32))(v384, v101, v383);
        uint64_t v102 = v440 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
        swift_beginAccess();
        uint64_t v103 = *(void *)(v102 + *(int *)(v439 + 20))
             + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v104 = v103;
        uint64_t v105 = v400;
        sub_1C3F970C4(v104, v400, &qword_1EBBBF8A0);
        uint64_t v106 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
        uint64_t v107 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v106 - 8) + 48);
        if (v107(v105, 1, v106) == 1)
        {
          swift_retain();
          sub_1C3F962E0(v105, &qword_1EBBBF8A0);
          uint64_t v108 = v441;
          uint64_t v109 = v414;
        }
        else
        {
          int v156 = swift_getEnumCaseMultiPayload();
          uint64_t v109 = v414;
          if (v156 == 11)
          {
            sub_1C3F8ADE0(v105, v414, type metadata accessor for Proto_TaggedValue);
            swift_retain();
            uint64_t v157 = v438;
            uint64_t v108 = v441;
            goto LABEL_35;
          }
          swift_retain();
          sub_1C3F8B288(v105, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          uint64_t v108 = v441;
        }
        sub_1C4496888();
        uint64_t v157 = v438;
        uint64_t v172 = *(int *)(v438 + 20);
        if (qword_1EA39AF70 != -1)
        {
          swift_once();
          uint64_t v157 = v438;
        }
        *(void *)(v109 + v172) = qword_1EA39AF60;
        swift_retain();
LABEL_35:
        uint64_t v173 = *(int *)(v157 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          uint64_t v174 = swift_retain();
          uint64_t v175 = sub_1C4400A40(v174);
          uint64_t v109 = v414;
          *(void *)(v414 + v173) = v175;
          swift_release();
        }
        uint64_t v176 = *(void *)(v109 + v173);
        swift_beginAccess();
        *(void *)(v176 + 16) = 0;
        sub_1C43F0970(v109);
        uint64_t v177 = swift_endAccess();
        MEMORY[0x1F4188790](v177);
        uint64_t v178 = v383;
        uint64_t v179 = v444;
        *(&v377 - 14) = v383;
        *(&v377 - 13) = v179;
        uint64_t v180 = v455;
        *(&v377 - 12) = v445;
        *(&v377 - 11) = (uint64_t)v180;
        uint64_t v181 = v443;
        *(&v377 - 10) = (uint64_t)v442;
        *(&v377 - 9) = (uint64_t)v181;
        uint64_t v182 = v378;
        *(&v377 - 8) = v377;
        *(&v377 - 7) = v182;
        uint64_t v183 = v380;
        *(&v377 - 6) = v379;
        *(&v377 - 5) = v183;
        uint64_t v184 = v382;
        *(&v377 - 4) = v381;
        *(&v377 - 3) = v184;
        uint64_t v185 = v384;
        *(&v377 - 2) = (uint64_t)v384;
        *(&v377 - 1) = v108;
        uint64_t v186 = v428;
        sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2A00, v407);
        if (v186)
        {
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v429 + 8))(v185, v178);
        }
        uint64_t v428 = 0;
        swift_beginAccess();
        uint64_t v187 = v439;
        uint64_t v188 = *(void *)(v102 + *(int *)(v439 + 20))
             + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v189 = v385;
        sub_1C3F970C4(v188, v385, &qword_1EBBBF8A0);
        if (v107(v189, 1, v106) == 1)
        {
          sub_1C3F962E0(v189, &qword_1EBBBF8A0);
          uint64_t v190 = v423;
          uint64_t v191 = v424;
          uint64_t v192 = v383;
          uint64_t v193 = v394;
        }
        else
        {
          int v304 = swift_getEnumCaseMultiPayload();
          uint64_t v190 = v423;
          uint64_t v191 = v424;
          uint64_t v192 = v383;
          uint64_t v193 = v394;
          if (v304 == 11)
          {
            sub_1C3F8ADE0(v189, v394, type metadata accessor for Proto_TaggedValue);
            uint64_t v305 = v438;
            goto LABEL_114;
          }
          sub_1C3F8B288(v189, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        }
        sub_1C4496888();
        uint64_t v305 = v438;
        uint64_t v319 = v193;
        uint64_t v320 = *(int *)(v438 + 20);
        if (qword_1EA39AF70 != -1)
        {
          swift_once();
          uint64_t v305 = v438;
        }
        *(void *)(v319 + v320) = qword_1EA39AF60;
        swift_retain();
        uint64_t v193 = v319;
LABEL_114:
        uint64_t v321 = *(int *)(v305 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          uint64_t v322 = swift_retain();
          uint64_t v323 = sub_1C4400A40(v322);
          uint64_t v193 = v394;
          *(void *)(v394 + v321) = v323;
          swift_release();
        }
        uint64_t v324 = v193;
        uint64_t v325 = *(void *)(v193 + v321);
        sub_1C3F8ADE0(v407, v191, type metadata accessor for Proto_Value);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v422 + 56))(v191, 0, 1, v187);
        sub_1C4124B88(v191, v190);
        uint64_t v326 = v325
             + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
        swift_beginAccess();
        swift_retain();
        sub_1C4124BF0(v190, v326);
        swift_endAccess();
        swift_release();
        sub_1C43F0970(v324);
        swift_endAccess();
        swift_release();
        uint64_t v327 = *(uint64_t (**)(char *, uint64_t))(v429 + 8);
        uint64_t v328 = &v416;
LABEL_124:
        uint64_t v336 = (char *)*(v328 - 32);
        uint64_t v337 = v192;
        return v327(v336, v337);
    }
  }
  return result;
}

uint64_t sub_1C41A9C4C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return TaggedValue_6.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a2[8], a3, a2[9], a2[10], a2[11], a2[12], a2[13]);
}

uint64_t sub_1C41A9C94(uint64_t a1, void *a2)
{
  return TaggedValue_6.encode(to:)(a1, a2);
}

uint64_t TaggedValue_6<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v61 = a7;
  uint64_t v62 = a8;
  uint64_t v60 = a6;
  uint64_t v58 = a5;
  uint64_t v57 = a4;
  uint64_t v56 = a3;
  uint64_t v64 = a1;
  uint64_t v59 = *(void *)(*(void *)(a2 + 56) - 8);
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  uint64_t v55 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 48);
  uint64_t v54 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v8);
  uint64_t v53 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 40);
  uint64_t v52 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v12);
  uint64_t v51 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 + 32);
  uint64_t v50 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v16);
  uint64_t v49 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v22 + 24);
  uint64_t v48 = *(void *)(v23 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v20);
  uint64_t v26 = (char *)&v47 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(v27 + 16);
  uint64_t v47 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v30 = (char *)&v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66[0] = v28;
  v66[1] = v23;
  v66[2] = v19;
  uint64_t v67 = v15;
  uint64_t v68 = v11;
  uint64_t v69 = v31;
  uint64_t v63 = v31;
  long long v33 = v32[5];
  long long v70 = v32[4];
  long long v71 = v33;
  long long v72 = v32[6];
  uint64_t v34 = type metadata accessor for TaggedValue_6.TaggedEnum();
  MEMORY[0x1F4188790](v34);
  uint64_t v36 = (char *)&v47 - v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))((char *)&v47 - v35, v73, v34);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v40 = v48;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v26, v36, v23);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v26, v23);
      break;
    case 2u:
      uint64_t v41 = v50;
      uint64_t v42 = v49;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v49, v36, v19);
      goto LABEL_8;
    case 3u:
      uint64_t v43 = v52;
      uint64_t v44 = v51;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v51, v36, v15);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v44, v15);
      break;
    case 4u:
      uint64_t v45 = v54;
      uint64_t v46 = v53;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v53, v36, v11);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v46, v11);
      break;
    case 5u:
      uint64_t v41 = v59;
      uint64_t v42 = v55;
      uint64_t v19 = v63;
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v55, v36, v63);
LABEL_8:
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v42, v19);
      break;
    case 6u:
      (*(void (**)(uint64_t *__return_ptr))(**((void **)v36 + 1) + 80))(v65);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DE70);
      swift_dynamicCast();
      __swift_project_boxed_opaque_existential_1(v66, v67);
      sub_1C4497068();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
      uint64_t result = swift_release();
      break;
    default:
      uint64_t v38 = v47;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v30, v36, v28);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v30, v28);
      break;
  }
  return result;
}

uint64_t sub_1C41AA3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TaggedValue_6<>.encode(to:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), *(void *)(a3 - 24), *(void *)(a3 - 32), *(void *)(a3 - 40), *(void *)(a3 - 48));
}

uint64_t TaggedValue_7.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v398 = a9;
  uint64_t v353 = a2;
  uint64_t v354 = a3;
  uint64_t v406 = a2;
  uint64_t v407 = a3;
  uint64_t v355 = a4;
  uint64_t v356 = a5;
  uint64_t v408 = a4;
  uint64_t v409 = a5;
  uint64_t v357 = a6;
  uint64_t v358 = a7;
  uint64_t v410 = a6;
  uint64_t v411 = a7;
  uint64_t v330 = a16;
  uint64_t v331 = a8;
  uint64_t v412 = a8;
  uint64_t v413 = a10;
  uint64_t v347 = a10;
  uint64_t v348 = a11;
  uint64_t v414 = a11;
  uint64_t v415 = a12;
  uint64_t v349 = a12;
  uint64_t v350 = a13;
  uint64_t v416 = a13;
  uint64_t v417 = a14;
  uint64_t v351 = a14;
  uint64_t v352 = a15;
  uint64_t v418 = a15;
  uint64_t v419 = a16;
  uint64_t v396 = type metadata accessor for TaggedValue_7.TaggedEnum();
  uint64_t v397 = *(void *)(v396 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v396);
  uint64_t v325 = (uint64_t *)((char *)&v323 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v329 = (char *)&v323 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v373 = (uint64_t *)((char *)&v323 - v22);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v372 = (uint64_t *)((char *)&v323 - v24);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v371 = (uint64_t *)((char *)&v323 - v26);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v370 = (uint64_t *)((char *)&v323 - v28);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v369 = (uint64_t *)((char *)&v323 - v30);
  MEMORY[0x1F4188790](v29);
  uint64_t v368 = (uint64_t *)((char *)&v323 - v31);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v33 = MEMORY[0x1F4188790](v32 - 8);
  uint64_t v346 = (uint64_t)&v323 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v345 = (uint64_t)&v323 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v344 = (uint64_t)&v323 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v342 = (uint64_t)&v323 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v341 = (uint64_t)&v323 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v339 = (uint64_t)&v323 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v338 = (uint64_t)&v323 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v336 = (uint64_t)&v323 - v48;
  MEMORY[0x1F4188790](v47);
  uint64_t v401 = (uint64_t)&v323 - v49;
  uint64_t v405 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v50 = MEMORY[0x1F4188790](v405);
  uint64_t v367 = (uint64_t)&v323 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = MEMORY[0x1F4188790](v50);
  uint64_t v381 = (uint64_t)&v323 - v53;
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  uint64_t v395 = (uint64_t)&v323 - v55;
  uint64_t v56 = MEMORY[0x1F4188790](v54);
  uint64_t v394 = (uint64_t)&v323 - v57;
  uint64_t v58 = MEMORY[0x1F4188790](v56);
  uint64_t v393 = (uint64_t)&v323 - v59;
  uint64_t v60 = MEMORY[0x1F4188790](v58);
  uint64_t v392 = (uint64_t)&v323 - v61;
  uint64_t v62 = MEMORY[0x1F4188790](v60);
  uint64_t v391 = (uint64_t)&v323 - v63;
  uint64_t v64 = MEMORY[0x1F4188790](v62);
  uint64_t v390 = (uint64_t)&v323 - v65;
  MEMORY[0x1F4188790](v64);
  uint64_t v402 = (char *)&v323 - v66;
  uint64_t v67 = type metadata accessor for Proto_Value(0);
  uint64_t v68 = *(void *)(v67 - 8);
  uint64_t v69 = MEMORY[0x1F4188790](v67);
  uint64_t v366 = (char *)&v323 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = MEMORY[0x1F4188790](v69);
  uint64_t v389 = (uint64_t)&v323 - v72;
  uint64_t v73 = MEMORY[0x1F4188790](v71);
  uint64_t v328 = (uint64_t)&v323 - v74;
  uint64_t v75 = MEMORY[0x1F4188790](v73);
  uint64_t v388 = (uint64_t)&v323 - v76;
  uint64_t v77 = MEMORY[0x1F4188790](v75);
  uint64_t v343 = (uint64_t)&v323 - v78;
  uint64_t v79 = MEMORY[0x1F4188790](v77);
  uint64_t v387 = (uint64_t)&v323 - v80;
  uint64_t v81 = MEMORY[0x1F4188790](v79);
  uint64_t v340 = (uint64_t)&v323 - v82;
  uint64_t v83 = MEMORY[0x1F4188790](v81);
  uint64_t v386 = (uint64_t)&v323 - v84;
  uint64_t v85 = MEMORY[0x1F4188790](v83);
  uint64_t v337 = (uint64_t)&v323 - v86;
  uint64_t v87 = MEMORY[0x1F4188790](v85);
  uint64_t v385 = (uint64_t)&v323 - v88;
  uint64_t v89 = MEMORY[0x1F4188790](v87);
  uint64_t v335 = (uint64_t)&v323 - v90;
  uint64_t v91 = MEMORY[0x1F4188790](v89);
  uint64_t v384 = (uint64_t)&v323 - v92;
  uint64_t v93 = MEMORY[0x1F4188790](v91);
  uint64_t v334 = (uint64_t)&v323 - v94;
  uint64_t v95 = MEMORY[0x1F4188790](v93);
  uint64_t v383 = (uint64_t)&v323 - v96;
  uint64_t v97 = MEMORY[0x1F4188790](v95);
  uint64_t v333 = (uint64_t)&v323 - v98;
  uint64_t v99 = MEMORY[0x1F4188790](v97);
  uint64_t v382 = (uint64_t)&v323 - v100;
  MEMORY[0x1F4188790](v99);
  uint64_t v404 = (uint64_t)&v323 - v101;
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v103 = MEMORY[0x1F4188790](v102 - 8);
  uint64_t v380 = (uint64_t)&v323 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = MEMORY[0x1F4188790](v103);
  uint64_t v365 = (uint64_t)&v323 - v106;
  uint64_t v107 = MEMORY[0x1F4188790](v105);
  uint64_t v327 = (char *)&v323 - v108;
  uint64_t v109 = MEMORY[0x1F4188790](v107);
  uint64_t v332 = (uint64_t)&v323 - v110;
  uint64_t v111 = MEMORY[0x1F4188790](v109);
  uint64_t v379 = (uint64_t)&v323 - v112;
  uint64_t v113 = MEMORY[0x1F4188790](v111);
  uint64_t v364 = (uint64_t)&v323 - v114;
  uint64_t v115 = MEMORY[0x1F4188790](v113);
  uint64_t v378 = (uint64_t)&v323 - v116;
  uint64_t v117 = MEMORY[0x1F4188790](v115);
  uint64_t v363 = (uint64_t)&v323 - v118;
  uint64_t v119 = MEMORY[0x1F4188790](v117);
  uint64_t v377 = (uint64_t)&v323 - v120;
  uint64_t v121 = MEMORY[0x1F4188790](v119);
  uint64_t v362 = (uint64_t)&v323 - v122;
  uint64_t v123 = MEMORY[0x1F4188790](v121);
  uint64_t v376 = (uint64_t)&v323 - v124;
  uint64_t v125 = MEMORY[0x1F4188790](v123);
  uint64_t v361 = (uint64_t)&v323 - v126;
  uint64_t v127 = MEMORY[0x1F4188790](v125);
  uint64_t v375 = (uint64_t)&v323 - v128;
  uint64_t v129 = MEMORY[0x1F4188790](v127);
  uint64_t v360 = (uint64_t)&v323 - v130;
  uint64_t v131 = MEMORY[0x1F4188790](v129);
  uint64_t v374 = (uint64_t)&v323 - v132;
  uint64_t v133 = MEMORY[0x1F4188790](v131);
  uint64_t v359 = (uint64_t)&v323 - v134;
  uint64_t v135 = MEMORY[0x1F4188790](v133);
  int v137 = (char *)&v323 - v136;
  MEMORY[0x1F4188790](v135);
  uint64_t v139 = (char *)&v323 - v138;
  uint64_t v140 = a1;
  uint64_t v141 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v141, (uint64_t)v139, &qword_1EBBC0540);
  uint64_t v142 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48);
  uint64_t v403 = v67;
  LODWORD(v68) = v142(v139, 1, v67);
  sub_1C3F962E0((uint64_t)v139, &qword_1EBBC0540);
  if (v68 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v140;
    sub_1C3F970C4(v141, (uint64_t)v137, &qword_1EBBC0540);
    uint64_t v145 = v403;
    uint64_t v326 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v142;
    unsigned int v146 = v142(v137, 1, v403);
    uint64_t v400 = v140;
    if (v146 == 1)
    {
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      JUMPOUT(0x1C41ACDD0);
    }
    uint64_t v147 = (uint64_t)v137;
    uint64_t v148 = v404;
    sub_1C3F8ADE0(v147, v404, type metadata accessor for Proto_Value);
    uint64_t v149 = v145;
    uint64_t v150 = *(void *)(v148 + *(int *)(v145 + 20))
         + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v151 = v401;
    sub_1C3F970C4(v150, v401, &qword_1EBBBF8A0);
    uint64_t v152 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    uint64_t v324 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v152 - 8) + 48);
    int v153 = v324(v151, 1, v152);
    uint64_t v154 = (uint64_t)v402;
    if (v153 == 1)
    {
      swift_retain();
      sub_1C3F962E0(v151, &qword_1EBBBF8A0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        sub_1C3F8ADE0(v151, v154, type metadata accessor for Proto_TaggedValue);
LABEL_12:
        swift_retain();
        sub_1C3F8B288(v404, type metadata accessor for Proto_Value);
        swift_beginAccess();
        sub_1C3F8B288(v154, type metadata accessor for Proto_TaggedValue);
        uint64_t v156 = inited;
        switch(inited)
        {
          case 0:
            uint64_t v157 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v158 = v157;
            uint64_t v159 = v359;
            sub_1C3F970C4(v158, v359, &qword_1EBBC0540);
            uint64_t v160 = v326;
            if (v326(v159, 1, v149) == 1) {
              goto LABEL_146;
            }
            uint64_t v161 = v159;
            uint64_t v162 = v382;
            sub_1C3F8ADE0(v161, v382, type metadata accessor for Proto_Value);
            uint64_t v163 = *(void *)(v162 + *(int *)(v149 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v164 = v336;
            sub_1C3F970C4(v163, v336, &qword_1EBBBF8A0);
            if (v324(v164, 1, v152) == 1)
            {
              sub_1C3F962E0(v164, &qword_1EBBBF8A0);
              uint64_t v165 = v400;
              int v166 = v368;
            }
            else
            {
              int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
              uint64_t v165 = v400;
              int v166 = v368;
              if (EnumCaseMultiPayload == 11)
              {
                uint64_t v242 = v390;
                sub_1C3F8ADE0(v164, v390, type metadata accessor for Proto_TaggedValue);
                goto LABEL_58;
              }
              sub_1C3F8B288(v164, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            uint64_t v242 = v390;
            sub_1C4496888();
            uint64_t v251 = *(int *)(v405 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v242 + v251) = qword_1EA39AF60;
            swift_retain();
LABEL_58:
            sub_1C3F8B288(v382, type metadata accessor for Proto_Value);
            uint64_t v252 = *(void *)(v242 + *(int *)(v405 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v253 = v252;
            uint64_t v254 = v374;
            sub_1C3F970C4(v253, v374, &qword_1EBBC0540);
            int v255 = v160(v254, 1, v149);
            uint64_t v256 = v333;
            if (v255 == 1)
            {
              sub_1C4496888();
              uint64_t v257 = *(int *)(v149 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v256 + v257) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v374, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v254, v333, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v390, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v258 = sub_1C3F974B0(v256, v165);
            swift_release();
            uint64_t v259 = v399;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v347 + 8) + 8) + 8))(v258);
            if (v259) {
              goto LABEL_142;
            }
            goto LABEL_130;
          case 1:
            uint64_t v179 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v180 = v179;
            uint64_t v181 = v360;
            sub_1C3F970C4(v180, v360, &qword_1EBBC0540);
            uint64_t v182 = v326;
            if (v326(v181, 1, v149) == 1) {
              goto LABEL_148;
            }
            uint64_t v183 = v181;
            uint64_t v184 = v383;
            sub_1C3F8ADE0(v183, v383, type metadata accessor for Proto_Value);
            uint64_t v185 = *(void *)(v184 + *(int *)(v149 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v186 = v338;
            sub_1C3F970C4(v185, v338, &qword_1EBBBF8A0);
            if (v324(v186, 1, v152) == 1)
            {
              sub_1C3F962E0(v186, &qword_1EBBBF8A0);
              uint64_t v187 = v400;
              int v166 = v369;
              uint64_t v188 = v391;
            }
            else
            {
              int v245 = swift_getEnumCaseMultiPayload();
              uint64_t v187 = v400;
              int v166 = v369;
              uint64_t v188 = v391;
              if (v245 == 11)
              {
                sub_1C3F8ADE0(v186, v391, type metadata accessor for Proto_TaggedValue);
                goto LABEL_79;
              }
              sub_1C3F8B288(v186, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v268 = *(int *)(v405 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v188 + v268) = qword_1EA39AF60;
            swift_retain();
LABEL_79:
            sub_1C3F8B288(v383, type metadata accessor for Proto_Value);
            uint64_t v269 = *(void *)(v188 + *(int *)(v405 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v270 = v269;
            uint64_t v271 = v375;
            sub_1C3F970C4(v270, v375, &qword_1EBBC0540);
            int v272 = v182(v271, 1, v149);
            uint64_t v273 = v334;
            if (v272 == 1)
            {
              sub_1C4496888();
              uint64_t v274 = *(int *)(v149 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v273 + v274) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v375, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v271, v334, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v391, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v275 = sub_1C3F974B0(v273, v187);
            swift_release();
            uint64_t v276 = v399;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v348 + 8) + 8) + 8))(v275);
            if (!v276) {
              goto LABEL_130;
            }
            goto LABEL_142;
          case 2:
            uint64_t v189 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v190 = v189;
            uint64_t v191 = v361;
            sub_1C3F970C4(v190, v361, &qword_1EBBC0540);
            uint64_t v192 = v326;
            if (v326(v191, 1, v149) == 1) {
              goto LABEL_149;
            }
            uint64_t v193 = v191;
            uint64_t v194 = v384;
            sub_1C3F8ADE0(v193, v384, type metadata accessor for Proto_Value);
            uint64_t v195 = *(void *)(v194 + *(int *)(v149 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v196 = v339;
            sub_1C3F970C4(v195, v339, &qword_1EBBBF8A0);
            if (v324(v196, 1, v152) == 1)
            {
              sub_1C3F962E0(v196, &qword_1EBBBF8A0);
              uint64_t v197 = v400;
              int v166 = v370;
              uint64_t v198 = v392;
            }
            else
            {
              int v246 = swift_getEnumCaseMultiPayload();
              uint64_t v197 = v400;
              int v166 = v370;
              uint64_t v198 = v392;
              if (v246 == 11)
              {
                sub_1C3F8ADE0(v196, v392, type metadata accessor for Proto_TaggedValue);
                goto LABEL_90;
              }
              sub_1C3F8B288(v196, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v277 = *(int *)(v405 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v198 + v277) = qword_1EA39AF60;
            swift_retain();
LABEL_90:
            sub_1C3F8B288(v384, type metadata accessor for Proto_Value);
            uint64_t v278 = *(void *)(v198 + *(int *)(v405 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v279 = v278;
            uint64_t v280 = v376;
            sub_1C3F970C4(v279, v376, &qword_1EBBC0540);
            int v281 = v192(v280, 1, v149);
            uint64_t v282 = v335;
            if (v281 == 1)
            {
              sub_1C4496888();
              uint64_t v283 = *(int *)(v149 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v282 + v283) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v376, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v280, v335, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v392, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v284 = sub_1C3F974B0(v282, v197);
            swift_release();
            uint64_t v285 = v399;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v349 + 8) + 8) + 8))(v284);
            if (!v285) {
              goto LABEL_130;
            }
            goto LABEL_142;
          case 3:
            uint64_t v199 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v200 = v199;
            uint64_t v201 = v362;
            sub_1C3F970C4(v200, v362, &qword_1EBBC0540);
            uint64_t v202 = v326;
            if (v326(v201, 1, v149) == 1) {
              goto LABEL_150;
            }
            uint64_t v203 = v201;
            uint64_t v204 = v385;
            sub_1C3F8ADE0(v203, v385, type metadata accessor for Proto_Value);
            uint64_t v205 = *(void *)(v204 + *(int *)(v149 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v206 = v341;
            sub_1C3F970C4(v205, v341, &qword_1EBBBF8A0);
            if (v324(v206, 1, v152) == 1)
            {
              sub_1C3F962E0(v206, &qword_1EBBBF8A0);
              uint64_t v207 = v400;
              int v166 = v371;
              uint64_t v208 = v393;
            }
            else
            {
              int v247 = swift_getEnumCaseMultiPayload();
              uint64_t v207 = v400;
              int v166 = v371;
              uint64_t v208 = v393;
              if (v247 == 11)
              {
                sub_1C3F8ADE0(v206, v393, type metadata accessor for Proto_TaggedValue);
                goto LABEL_101;
              }
              sub_1C3F8B288(v206, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v286 = *(int *)(v405 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v208 + v286) = qword_1EA39AF60;
            swift_retain();
LABEL_101:
            sub_1C3F8B288(v385, type metadata accessor for Proto_Value);
            uint64_t v287 = *(void *)(v208 + *(int *)(v405 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v288 = v287;
            uint64_t v289 = v377;
            sub_1C3F970C4(v288, v377, &qword_1EBBC0540);
            int v290 = v202(v289, 1, v149);
            uint64_t v291 = v337;
            if (v290 == 1)
            {
              sub_1C4496888();
              uint64_t v292 = *(int *)(v149 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v291 + v292) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v377, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v289, v337, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v393, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v293 = sub_1C3F974B0(v291, v207);
            swift_release();
            uint64_t v294 = v399;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v350 + 8) + 8) + 8))(v293);
            if (!v294) {
              goto LABEL_130;
            }
            goto LABEL_142;
          case 4:
            uint64_t v209 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v210 = v209;
            uint64_t v211 = v363;
            sub_1C3F970C4(v210, v363, &qword_1EBBC0540);
            uint64_t v212 = v326;
            if (v326(v211, 1, v149) == 1) {
              goto LABEL_151;
            }
            uint64_t v213 = v211;
            uint64_t v214 = v386;
            sub_1C3F8ADE0(v213, v386, type metadata accessor for Proto_Value);
            uint64_t v215 = *(void *)(v214 + *(int *)(v149 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v216 = v342;
            sub_1C3F970C4(v215, v342, &qword_1EBBBF8A0);
            if (v324(v216, 1, v152) == 1)
            {
              sub_1C3F962E0(v216, &qword_1EBBBF8A0);
              uint64_t v217 = v400;
              int v166 = v372;
              uint64_t v218 = v394;
            }
            else
            {
              int v248 = swift_getEnumCaseMultiPayload();
              uint64_t v217 = v400;
              int v166 = v372;
              uint64_t v218 = v394;
              if (v248 == 11)
              {
                sub_1C3F8ADE0(v216, v394, type metadata accessor for Proto_TaggedValue);
                goto LABEL_112;
              }
              sub_1C3F8B288(v216, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v295 = *(int *)(v405 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v218 + v295) = qword_1EA39AF60;
            swift_retain();
LABEL_112:
            sub_1C3F8B288(v386, type metadata accessor for Proto_Value);
            uint64_t v296 = *(void *)(v218 + *(int *)(v405 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v297 = v296;
            uint64_t v298 = v378;
            sub_1C3F970C4(v297, v378, &qword_1EBBC0540);
            int v299 = v212(v298, 1, v149);
            uint64_t v300 = v340;
            if (v299 == 1)
            {
              sub_1C4496888();
              uint64_t v301 = *(int *)(v149 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v300 + v301) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v378, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v298, v340, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v394, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v302 = sub_1C3F974B0(v300, v217);
            swift_release();
            uint64_t v303 = v399;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v351 + 8) + 8) + 8))(v302);
            if (!v303) {
              goto LABEL_130;
            }
            goto LABEL_142;
          case 5:
            uint64_t v219 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v220 = v219;
            uint64_t v221 = v364;
            sub_1C3F970C4(v220, v364, &qword_1EBBC0540);
            uint64_t v222 = v326;
            if (v326(v221, 1, v149) == 1) {
              goto LABEL_152;
            }
            uint64_t v223 = v221;
            uint64_t v224 = v387;
            sub_1C3F8ADE0(v223, v387, type metadata accessor for Proto_Value);
            uint64_t v225 = *(void *)(v224 + *(int *)(v149 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v226 = v344;
            sub_1C3F970C4(v225, v344, &qword_1EBBBF8A0);
            if (v324(v226, 1, v152) == 1)
            {
              sub_1C3F962E0(v226, &qword_1EBBBF8A0);
              uint64_t v227 = v400;
              int v166 = v373;
              uint64_t v228 = v395;
            }
            else
            {
              int v249 = swift_getEnumCaseMultiPayload();
              uint64_t v227 = v400;
              int v166 = v373;
              uint64_t v228 = v395;
              if (v249 == 11)
              {
                sub_1C3F8ADE0(v226, v395, type metadata accessor for Proto_TaggedValue);
                goto LABEL_123;
              }
              sub_1C3F8B288(v226, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v304 = *(int *)(v405 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v228 + v304) = qword_1EA39AF60;
            swift_retain();
LABEL_123:
            sub_1C3F8B288(v387, type metadata accessor for Proto_Value);
            uint64_t v305 = *(void *)(v228 + *(int *)(v405 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v306 = v305;
            uint64_t v307 = v379;
            sub_1C3F970C4(v306, v379, &qword_1EBBC0540);
            int v308 = v222(v307, 1, v149);
            uint64_t v309 = v343;
            if (v308 == 1)
            {
              sub_1C4496888();
              uint64_t v310 = *(int *)(v149 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v309 + v310) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v379, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v307, v343, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v395, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v311 = sub_1C3F974B0(v309, v227);
            swift_release();
            uint64_t v312 = v399;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v352 + 8) + 8) + 8))(v311);
            if (v312) {
              goto LABEL_142;
            }
LABEL_130:
            swift_release();
            swift_release();
            uint64_t v267 = v396;
            goto LABEL_131;
          case 6:
            uint64_t v229 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v230 = v229;
            uint64_t v231 = v332;
            sub_1C3F970C4(v230, v332, &qword_1EBBC0540);
            uint64_t v232 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v326;
            if (v326(v231, 1, v149) == 1) {
              goto LABEL_153;
            }
            uint64_t v404 = v156;
            uint64_t v233 = v231;
            uint64_t v234 = v388;
            sub_1C3F8ADE0(v233, v388, type metadata accessor for Proto_Value);
            uint64_t v235 = *(void *)(v234 + *(int *)(v149 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v236 = v345;
            sub_1C3F970C4(v235, v345, &qword_1EBBBF8A0);
            if (v324(v236, 1, v152) == 1)
            {
              sub_1C3F962E0(v236, &qword_1EBBBF8A0);
              uint64_t v237 = v400;
              uint64_t v238 = v331;
              uint64_t v239 = v381;
              uint64_t v240 = (uint64_t)v327;
            }
            else
            {
              int v250 = swift_getEnumCaseMultiPayload();
              uint64_t v237 = v400;
              uint64_t v238 = v331;
              uint64_t v239 = v381;
              uint64_t v240 = (uint64_t)v327;
              if (v250 == 11)
              {
                sub_1C3F8ADE0(v236, v381, type metadata accessor for Proto_TaggedValue);
                goto LABEL_136;
              }
              sub_1C3F8B288(v236, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v314 = *(int *)(v405 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v239 + v314) = qword_1EA39AF60;
            swift_retain();
LABEL_136:
            sub_1C3F8B288(v388, type metadata accessor for Proto_Value);
            uint64_t v315 = *(void *)(v239 + *(int *)(v405 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v315, v240, &qword_1EBBC0540);
            if (v232(v240, 1, v149) == 1)
            {
              uint64_t v316 = v328;
              sub_1C4496888();
              uint64_t v317 = *(int *)(v149 + 20);
              uint64_t v318 = v329;
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v316 + v317) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v240, &qword_1EBBC0540);
              uint64_t v319 = v330;
            }
            else
            {
              uint64_t v316 = v328;
              sub_1C3F8ADE0(v240, v328, type metadata accessor for Proto_Value);
              uint64_t v318 = v329;
              uint64_t v319 = v330;
            }
            uint64_t v320 = v399;
            sub_1C3F8B288(v381, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v321 = sub_1C3F974B0(v316, v237);
            swift_release();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v319 + 8) + 8) + 8))(v321, v238);
            if (v320) {
              goto LABEL_142;
            }
            swift_release();
            swift_release();
            uint64_t v322 = v396;
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v397 + 32))(v398, v318, v322);
          default:
            uint64_t v404 = inited;
            uint64_t v167 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v168 = v167;
            uint64_t v169 = v365;
            sub_1C3F970C4(v168, v365, &qword_1EBBC0540);
            uint64_t v170 = v149;
            if (v326(v169, 1, v149) == 1) {
              goto LABEL_147;
            }
            uint64_t v171 = v169;
            uint64_t v172 = v389;
            sub_1C3F8ADE0(v171, v389, type metadata accessor for Proto_Value);
            uint64_t v173 = *(void *)(v172 + *(int *)(v149 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v174 = v346;
            sub_1C3F970C4(v173, v346, &qword_1EBBBF8A0);
            if (v324(v174, 1, v152) == 1)
            {
              sub_1C3F962E0(v174, &qword_1EBBBF8A0);
              uint64_t v175 = v399;
              uint64_t v176 = v400;
              uint64_t v178 = (uint64_t)v366;
              uint64_t v177 = v367;
            }
            else
            {
              BOOL v243 = swift_getEnumCaseMultiPayload() == 11;
              uint64_t v244 = v174;
              uint64_t v175 = v399;
              uint64_t v176 = v400;
              uint64_t v178 = (uint64_t)v366;
              uint64_t v177 = v367;
              if (v243)
              {
                sub_1C3F8ADE0(v244, v367, type metadata accessor for Proto_TaggedValue);
                goto LABEL_68;
              }
              sub_1C3F8B288(v244, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v260 = *(int *)(v405 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v177 + v260) = qword_1EA39AF60;
            swift_retain();
LABEL_68:
            sub_1C3F8B288(v389, type metadata accessor for Proto_Value);
            uint64_t v261 = *(void *)(v177 + *(int *)(v405 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v262 = v261;
            uint64_t v263 = v380;
            sub_1C3F970C4(v262, v380, &qword_1EBBC0540);
            if (v326(v263, 1, v170) == 1)
            {
              sub_1C4496888();
              uint64_t v264 = *(int *)(v170 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v178 + v264) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v380, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v263, v178, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v177, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v265 = sub_1C3F974B0(v178, v176);
            swift_release();
            AnyCRValue.init(from:)(v265, &v420);
            if (v175)
            {
LABEL_142:
              swift_release();
              swift_setDeallocating();
              return swift_release();
            }
            swift_release();
            swift_release();
            uint64_t v266 = v420;
            int v166 = v325;
            *uint64_t v325 = inited;
            v166[1] = v266;
            uint64_t v267 = v396;
LABEL_131:
            swift_storeEnumTagMultiPayload();
            return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v397 + 32))(v398, v166, v267);
        }
      }
      swift_retain();
      sub_1C3F8B288(v151, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1C4496888();
    uint64_t v155 = *(int *)(v405 + 20);
    if (qword_1EA39AF70 != -1) {
      swift_once();
    }
    *(void *)(v154 + v155) = qword_1EA39AF60;
    goto LABEL_12;
  }
  sub_1C3FE3FF0();
  swift_allocError();
  *(void *)uint64_t v143 = 0xD000000000000017;
  *(void *)(v143 + 8) = 0x80000001C44B0F00;
  *(unsigned char *)(v143 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t TaggedValue_7.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t v511 = a1;
  uint64_t v523 = a2[8];
  uint64_t v501 = *(void *)(v523 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](a1);
  v507 = (char *)&v438 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v512 = *(void *)(v5 + 56);
  uint64_t v500 = *(void *)(v512 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  v506 = (char *)&v438 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v516 = *(void *)(v8 + 48);
  uint64_t v488 = *(void *)(v516 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  v489 = (char *)&v438 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v515 = *(void *)(v11 + 40);
  uint64_t v499 = *(void *)(v515 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  v505 = (char *)&v438 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v514 = *(void *)(v14 + 32);
  uint64_t v498 = *(void *)(v514 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  v504 = (char *)&v438 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v513 = *(void *)(v17 + 24);
  uint64_t v487 = *(void *)(v513 - 8);
  MEMORY[0x1F4188790](v15);
  v503 = (char *)&v438 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v492 = (uint64_t)&v438 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v491 = (uint64_t)&v438 - v22;
  uint64_t v508 = type metadata accessor for Proto_Value(0);
  uint64_t v490 = *(void *)(v508 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v508);
  uint64_t v475 = (uint64_t)&v438 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v479 = (uint64_t)&v438 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v478 = (uint64_t)&v438 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v477 = (uint64_t)&v438 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v476 = (uint64_t)&v438 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v474 = (uint64_t)&v438 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v473 = (uint64_t)&v438 - v36;
  MEMORY[0x1F4188790](v35);
  uint64_t v472 = (uint64_t)&v438 - v37;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v39 = MEMORY[0x1F4188790](v38 - 8);
  uint64_t v452 = (uint64_t)&v438 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v471 = (uint64_t)&v438 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v454 = (uint64_t)&v438 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v470 = (uint64_t)&v438 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v453 = (uint64_t)&v438 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v469 = (uint64_t)&v438 - v50;
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v451 = (uint64_t)&v438 - v52;
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  uint64_t v468 = (uint64_t)&v438 - v54;
  uint64_t v55 = MEMORY[0x1F4188790](v53);
  uint64_t v450 = (uint64_t)&v438 - v56;
  uint64_t v57 = MEMORY[0x1F4188790](v55);
  uint64_t v467 = (uint64_t)&v438 - v58;
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v449 = (uint64_t)&v438 - v60;
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  uint64_t v466 = (uint64_t)&v438 - v62;
  uint64_t v63 = MEMORY[0x1F4188790](v61);
  uint64_t v448 = (uint64_t)&v438 - v64;
  uint64_t v65 = MEMORY[0x1F4188790](v63);
  uint64_t v465 = (uint64_t)&v438 - v66;
  uint64_t v67 = MEMORY[0x1F4188790](v65);
  uint64_t v447 = (uint64_t)&v438 - v68;
  MEMORY[0x1F4188790](v67);
  uint64_t v464 = (uint64_t)&v438 - v69;
  uint64_t v509 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v70 = MEMORY[0x1F4188790](v509);
  uint64_t v455 = (uint64_t)&v438 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = MEMORY[0x1F4188790](v70);
  uint64_t v486 = (uint64_t)&v438 - v73;
  uint64_t v74 = MEMORY[0x1F4188790](v72);
  uint64_t v462 = (uint64_t)&v438 - v75;
  uint64_t v76 = MEMORY[0x1F4188790](v74);
  uint64_t v485 = (uint64_t)&v438 - v77;
  uint64_t v78 = MEMORY[0x1F4188790](v76);
  uint64_t v461 = (uint64_t)&v438 - v79;
  uint64_t v80 = MEMORY[0x1F4188790](v78);
  uint64_t v484 = (uint64_t)&v438 - v81;
  uint64_t v82 = MEMORY[0x1F4188790](v80);
  uint64_t v460 = (uint64_t)&v438 - v83;
  uint64_t v84 = MEMORY[0x1F4188790](v82);
  uint64_t v483 = (uint64_t)&v438 - v85;
  uint64_t v86 = MEMORY[0x1F4188790](v84);
  uint64_t v459 = (uint64_t)&v438 - v87;
  uint64_t v88 = MEMORY[0x1F4188790](v86);
  uint64_t v463 = (uint64_t)&v438 - v89;
  uint64_t v90 = MEMORY[0x1F4188790](v88);
  uint64_t v458 = (uint64_t)&v438 - v91;
  uint64_t v92 = MEMORY[0x1F4188790](v90);
  uint64_t v482 = (uint64_t)&v438 - v93;
  uint64_t v94 = MEMORY[0x1F4188790](v92);
  uint64_t v457 = (uint64_t)&v438 - v95;
  uint64_t v96 = MEMORY[0x1F4188790](v94);
  uint64_t v481 = (uint64_t)&v438 - v97;
  uint64_t v98 = MEMORY[0x1F4188790](v96);
  uint64_t v456 = (uint64_t)&v438 - v99;
  uint64_t v100 = MEMORY[0x1F4188790](v98);
  uint64_t v480 = (uint64_t)&v438 - v101;
  uint64_t v102 = a2[2];
  uint64_t v497 = *(void *)(v102 - 8);
  MEMORY[0x1F4188790](v100);
  v502 = (char *)&v438 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = a2[9];
  uint64_t v105 = a2[10];
  uint64_t v107 = a2[11];
  uint64_t v106 = a2[12];
  uint64_t v109 = a2[13];
  uint64_t v108 = a2[14];
  uint64_t v110 = a2[15];
  uint64_t v517 = v102;
  uint64_t v518 = v513;
  uint64_t v519 = v514;
  uint64_t v520 = v515;
  v521[0] = v516;
  v521[1] = v512;
  v521[2] = v523;
  v521[3] = v104;
  v521[4] = v105;
  v521[5] = v107;
  v521[6] = v106;
  v521[7] = v109;
  v521[8] = v108;
  v521[9] = v110;
  uint64_t v495 = type metadata accessor for TaggedValue_7.TaggedEnum();
  uint64_t v494 = *(void *)(v495 - 8);
  MEMORY[0x1F4188790](v495);
  v493 = (char *)&v438 - v111;
  uint64_t v112 = v510;
  uint64_t result = sub_1C3F6DD10();
  if (v112) {
    return result;
  }
  uint64_t v439 = v104;
  uint64_t v440 = v105;
  uint64_t v441 = v107;
  uint64_t v442 = v106;
  uint64_t v443 = v109;
  uint64_t v444 = v108;
  uint64_t v445 = v110;
  uint64_t v446 = v102;
  uint64_t v510 = result;
  uint64_t v114 = v493;
  (*(void (**)(char *, uint64_t, uint64_t))(v494 + 16))(v493, v496, v495);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v116 = v114;
  uint64_t v117 = v508;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v124 = v508;
      (*(void (**)(char *, char *, uint64_t))(v487 + 32))(v503, v116, v513);
      uint64_t v125 = v510 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v126 = *(void *)(v125 + *(int *)(v124 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v127 = v126;
      uint64_t v128 = v465;
      sub_1C3F970C4(v127, v465, &qword_1EBBBF8A0);
      uint64_t v129 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v130 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v129 - 8) + 48);
      if (v130(v128, 1, v129) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v128, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v174 = v481;
          sub_1C3F8ADE0(v128, v481, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v175 = v509;
          goto LABEL_49;
        }
        swift_retain();
        sub_1C3F8B288(v128, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v174 = v481;
      sub_1C4496888();
      uint64_t v175 = v509;
      uint64_t v213 = *(int *)(v509 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v175 = v509;
      }
      *(void *)(v174 + v213) = qword_1EA39AF60;
      swift_retain();
LABEL_49:
      uint64_t v214 = *(int *)(v175 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v215 = swift_retain();
        uint64_t v216 = sub_1C4400A40(v215);
        uint64_t v174 = v481;
        *(void *)(v481 + v214) = v216;
        swift_release();
      }
      uint64_t v217 = *(void *)(v174 + v214);
      swift_beginAccess();
      *(void *)(v217 + 16) = 1;
      sub_1C43F0970(v174);
      uint64_t v218 = swift_endAccess();
      MEMORY[0x1F4188790](v218);
      uint64_t v219 = v513;
      *(&v438 - 16) = v446;
      *(&v438 - 15) = v219;
      uint64_t v220 = v515;
      *(&v438 - 14) = v514;
      *(&v438 - 13) = v220;
      uint64_t v221 = v512;
      *(&v438 - 12) = v516;
      *(&v438 - 11) = v221;
      uint64_t v222 = v439;
      *(&v438 - 10) = v523;
      *(&v438 - 9) = v222;
      uint64_t v223 = v441;
      *(&v438 - 8) = v440;
      *(&v438 - 7) = v223;
      uint64_t v224 = v443;
      *(&v438 - 6) = v442;
      *(&v438 - 5) = v224;
      uint64_t v225 = v445;
      *(&v438 - 4) = v444;
      *(&v438 - 3) = v225;
      uint64_t v226 = v511;
      *(&v438 - 2) = (uint64_t)v503;
      *(&v438 - 1) = v226;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2BB0, v473);
      uint64_t v496 = 0;
      swift_beginAccess();
      uint64_t v227 = v508;
      uint64_t v228 = *(void *)(v125 + *(int *)(v508 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v229 = v448;
      sub_1C3F970C4(v228, v448, &qword_1EBBBF8A0);
      unsigned int v230 = v130(v229, 1, v129);
      uint64_t v231 = v487;
      if (v230 == 1)
      {
        sub_1C3F962E0(v229, &qword_1EBBBF8A0);
        uint64_t v232 = v492;
        uint64_t v233 = v491;
        uint64_t v234 = v490;
        uint64_t v235 = v457;
      }
      else
      {
        int v360 = swift_getEnumCaseMultiPayload();
        uint64_t v232 = v492;
        uint64_t v233 = v491;
        uint64_t v234 = v490;
        uint64_t v235 = v457;
        if (v360 == 11)
        {
          sub_1C3F8ADE0(v229, v457, type metadata accessor for Proto_TaggedValue);
          uint64_t v361 = v509;
          goto LABEL_135;
        }
        sub_1C3F8B288(v229, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v361 = v509;
      uint64_t v385 = v235;
      uint64_t v386 = *(int *)(v509 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v361 = v509;
      }
      *(void *)(v385 + v386) = qword_1EA39AF60;
      swift_retain();
      uint64_t v235 = v385;
LABEL_135:
      uint64_t v387 = *(int *)(v361 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v388 = swift_retain();
        uint64_t v389 = sub_1C4400A40(v388);
        uint64_t v235 = v457;
        *(void *)(v457 + v387) = v389;
        swift_release();
      }
      uint64_t v390 = v235;
      uint64_t v391 = *(void *)(v235 + v387);
      sub_1C3F8ADE0(v473, v233, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v234 + 56))(v233, 0, 1, v227);
      sub_1C4124B88(v233, v232);
      uint64_t v392 = v391
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v232, v392);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v390);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v231 + 8))(v503, v513);
    case 2:
      uint64_t v131 = v508;
      (*(void (**)(char *, char *, uint64_t))(v498 + 32))(v504, v116, v514);
      uint64_t v132 = v510 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v133 = *(void *)(v132 + *(int *)(v131 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v134 = v133;
      uint64_t v135 = v466;
      sub_1C3F970C4(v134, v466, &qword_1EBBBF8A0);
      uint64_t v136 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      int v137 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 48);
      if (v137(v135, 1, v136) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v135, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v176 = v482;
          sub_1C3F8ADE0(v135, v482, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v177 = v509;
          goto LABEL_57;
        }
        swift_retain();
        sub_1C3F8B288(v135, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v176 = v482;
      sub_1C4496888();
      uint64_t v177 = v509;
      uint64_t v236 = *(int *)(v509 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v177 = v509;
      }
      *(void *)(v176 + v236) = qword_1EA39AF60;
      swift_retain();
LABEL_57:
      uint64_t v237 = *(int *)(v177 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v238 = swift_retain();
        uint64_t v239 = sub_1C4400A40(v238);
        uint64_t v176 = v482;
        *(void *)(v482 + v237) = v239;
        swift_release();
      }
      uint64_t v240 = *(void *)(v176 + v237);
      swift_beginAccess();
      *(void *)(v240 + 16) = 2;
      sub_1C43F0970(v176);
      uint64_t v241 = swift_endAccess();
      MEMORY[0x1F4188790](v241);
      uint64_t v242 = v513;
      *(&v438 - 16) = v446;
      *(&v438 - 15) = v242;
      uint64_t v243 = v515;
      *(&v438 - 14) = v514;
      *(&v438 - 13) = v243;
      uint64_t v244 = v512;
      *(&v438 - 12) = v516;
      *(&v438 - 11) = v244;
      uint64_t v245 = v439;
      *(&v438 - 10) = v523;
      *(&v438 - 9) = v245;
      uint64_t v246 = v441;
      *(&v438 - 8) = v440;
      *(&v438 - 7) = v246;
      uint64_t v247 = v443;
      *(&v438 - 6) = v442;
      *(&v438 - 5) = v247;
      uint64_t v248 = v445;
      *(&v438 - 4) = v444;
      *(&v438 - 3) = v248;
      uint64_t v249 = v511;
      *(&v438 - 2) = (uint64_t)v504;
      *(&v438 - 1) = v249;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2B68, v474);
      uint64_t v496 = 0;
      swift_beginAccess();
      uint64_t v250 = v508;
      uint64_t v251 = *(void *)(v132 + *(int *)(v508 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v252 = v449;
      sub_1C3F970C4(v251, v449, &qword_1EBBBF8A0);
      if (v137(v252, 1, v136) == 1)
      {
        sub_1C3F962E0(v252, &qword_1EBBBF8A0);
        uint64_t v253 = v492;
        uint64_t v254 = v491;
        uint64_t v255 = v490;
        uint64_t v256 = v474;
        uint64_t v257 = v458;
      }
      else
      {
        int v362 = swift_getEnumCaseMultiPayload();
        uint64_t v253 = v492;
        uint64_t v254 = v491;
        uint64_t v255 = v490;
        uint64_t v256 = v474;
        uint64_t v257 = v458;
        if (v362 == 11)
        {
          sub_1C3F8ADE0(v252, v458, type metadata accessor for Proto_TaggedValue);
          uint64_t v363 = v509;
LABEL_142:
          uint64_t v395 = *(int *)(v363 + 20);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for Proto_TaggedValue._StorageClass(0);
            swift_allocObject();
            uint64_t v396 = swift_retain();
            uint64_t v397 = sub_1C4400A40(v396);
            uint64_t v257 = v458;
            *(void *)(v458 + v395) = v397;
            swift_release();
          }
          uint64_t v398 = v257;
          uint64_t v399 = *(void *)(v257 + v395);
          sub_1C3F8ADE0(v256, v254, type metadata accessor for Proto_Value);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v255 + 56))(v254, 0, 1, v250);
          sub_1C4124B88(v254, v253);
          uint64_t v400 = v399
               + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
          swift_beginAccess();
          swift_retain();
          sub_1C4124BF0(v253, v400);
          swift_endAccess();
          swift_release();
          sub_1C43F0970(v398);
          swift_endAccess();
          swift_release();
          uint64_t v382 = *(uint64_t (**)(char *, uint64_t))(v498 + 8);
          uint64_t v383 = v504;
          uint64_t v384 = &v524;
          goto LABEL_166;
        }
        sub_1C3F8B288(v252, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v363 = v509;
      uint64_t v393 = v257;
      uint64_t v394 = *(int *)(v509 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v363 = v509;
      }
      *(void *)(v393 + v394) = qword_1EA39AF60;
      swift_retain();
      uint64_t v257 = v393;
      goto LABEL_142;
    case 3:
      uint64_t v138 = v508;
      (*(void (**)(char *, char *, uint64_t))(v499 + 32))(v505, v114, v515);
      uint64_t v139 = v510 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v140 = *(void *)(v139 + *(int *)(v138 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v141 = v140;
      uint64_t v142 = v467;
      sub_1C3F970C4(v141, v467, &qword_1EBBBF8A0);
      uint64_t v143 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v144 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 48);
      if (v144(v142, 1, v143) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v142, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v178 = v463;
          sub_1C3F8ADE0(v142, v463, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v179 = v509;
          goto LABEL_65;
        }
        swift_retain();
        sub_1C3F8B288(v142, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v178 = v463;
      sub_1C4496888();
      uint64_t v179 = v509;
      uint64_t v258 = *(int *)(v509 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v179 = v509;
      }
      *(void *)(v178 + v258) = qword_1EA39AF60;
      swift_retain();
LABEL_65:
      uint64_t v259 = *(int *)(v179 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v260 = swift_retain();
        *(void *)(v178 + v259) = sub_1C4400A40(v260);
        swift_release();
      }
      uint64_t v261 = *(void *)(v178 + v259);
      swift_beginAccess();
      *(void *)(v261 + 16) = 3;
      sub_1C43F0970(v178);
      uint64_t v262 = swift_endAccess();
      MEMORY[0x1F4188790](v262);
      uint64_t v263 = v513;
      *(&v438 - 16) = v446;
      *(&v438 - 15) = v263;
      uint64_t v264 = v515;
      *(&v438 - 14) = v514;
      *(&v438 - 13) = v264;
      uint64_t v265 = v512;
      *(&v438 - 12) = v516;
      *(&v438 - 11) = v265;
      uint64_t v266 = v439;
      *(&v438 - 10) = v523;
      *(&v438 - 9) = v266;
      uint64_t v267 = v441;
      *(&v438 - 8) = v440;
      *(&v438 - 7) = v267;
      uint64_t v268 = v443;
      *(&v438 - 6) = v442;
      *(&v438 - 5) = v268;
      uint64_t v269 = v445;
      *(&v438 - 4) = v444;
      *(&v438 - 3) = v269;
      uint64_t v270 = v511;
      *(&v438 - 2) = (uint64_t)v505;
      *(&v438 - 1) = v270;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2B20, v476);
      uint64_t v496 = 0;
      swift_beginAccess();
      uint64_t v271 = v508;
      uint64_t v272 = *(void *)(v139 + *(int *)(v508 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v273 = v450;
      sub_1C3F970C4(v272, v450, &qword_1EBBBF8A0);
      if (v144(v273, 1, v143) == 1)
      {
        sub_1C3F962E0(v273, &qword_1EBBBF8A0);
        uint64_t v274 = v492;
        uint64_t v275 = v491;
        uint64_t v276 = v490;
        uint64_t v277 = v476;
        uint64_t v278 = v459;
      }
      else
      {
        int v364 = swift_getEnumCaseMultiPayload();
        uint64_t v275 = v491;
        uint64_t v276 = v490;
        uint64_t v277 = v476;
        uint64_t v278 = v459;
        if (v364 == 11)
        {
          sub_1C3F8ADE0(v273, v459, type metadata accessor for Proto_TaggedValue);
          uint64_t v274 = v492;
          uint64_t v365 = v509;
          goto LABEL_149;
        }
        sub_1C3F8B288(v273, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        uint64_t v274 = v492;
      }
      sub_1C4496888();
      uint64_t v365 = v509;
      uint64_t v401 = *(int *)(v509 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v365 = v509;
      }
      *(void *)(v278 + v401) = qword_1EA39AF60;
      swift_retain();
LABEL_149:
      uint64_t v402 = *(int *)(v365 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v403 = swift_retain();
        uint64_t v404 = sub_1C4400A40(v403);
        uint64_t v278 = v459;
        *(void *)(v459 + v402) = v404;
        swift_release();
      }
      uint64_t v405 = *(void *)(v278 + v402);
      sub_1C3F8ADE0(v277, v275, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v276 + 56))(v275, 0, 1, v271);
      sub_1C4124B88(v275, v274);
      uint64_t v406 = v405
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v274, v406);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v278);
      swift_endAccess();
      swift_release();
      uint64_t v382 = *(uint64_t (**)(char *, uint64_t))(v499 + 8);
      uint64_t v383 = v505;
      uint64_t v384 = &v525;
      goto LABEL_166;
    case 4:
      (*(void (**)(char *, char *, uint64_t))(v488 + 32))(v489, v114, v516);
      uint64_t v145 = v510 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v146 = *(void *)(v145 + *(int *)(v117 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v147 = v146;
      uint64_t v148 = v468;
      sub_1C3F970C4(v147, v468, &qword_1EBBBF8A0);
      uint64_t v149 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v150 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v149 - 8) + 48);
      if (v150(v148, 1, v149) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v148, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v180 = v483;
          sub_1C3F8ADE0(v148, v483, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v181 = v509;
          goto LABEL_73;
        }
        swift_retain();
        sub_1C3F8B288(v148, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v180 = v483;
      sub_1C4496888();
      uint64_t v181 = v509;
      uint64_t v279 = *(int *)(v509 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v181 = v509;
      }
      *(void *)(v180 + v279) = qword_1EA39AF60;
      swift_retain();
LABEL_73:
      uint64_t v280 = *(int *)(v181 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v281 = swift_retain();
        uint64_t v180 = v483;
        *(void *)(v180 + v280) = sub_1C4400A40(v281);
        swift_release();
      }
      uint64_t v282 = *(void *)(v180 + v280);
      swift_beginAccess();
      *(void *)(v282 + 16) = 4;
      sub_1C43F0970(v180);
      uint64_t v283 = swift_endAccess();
      MEMORY[0x1F4188790](v283);
      uint64_t v284 = v513;
      *(&v438 - 16) = v446;
      *(&v438 - 15) = v284;
      uint64_t v285 = v515;
      *(&v438 - 14) = v514;
      *(&v438 - 13) = v285;
      uint64_t v286 = v512;
      *(&v438 - 12) = v516;
      *(&v438 - 11) = v286;
      uint64_t v287 = v439;
      *(&v438 - 10) = v523;
      *(&v438 - 9) = v287;
      uint64_t v288 = v441;
      *(&v438 - 8) = v440;
      *(&v438 - 7) = v288;
      uint64_t v289 = v443;
      *(&v438 - 6) = v442;
      *(&v438 - 5) = v289;
      uint64_t v290 = v445;
      *(&v438 - 4) = v444;
      *(&v438 - 3) = v290;
      uint64_t v291 = v511;
      *(&v438 - 2) = (uint64_t)v489;
      *(&v438 - 1) = v291;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2AD8, v477);
      swift_beginAccess();
      uint64_t v292 = v508;
      uint64_t v293 = *(void *)(v145 + *(int *)(v508 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v294 = v451;
      sub_1C3F970C4(v293, v451, &qword_1EBBBF8A0);
      unsigned int v295 = v150(v294, 1, v149);
      uint64_t v296 = v488;
      if (v295 == 1)
      {
        sub_1C3F962E0(v294, &qword_1EBBBF8A0);
        uint64_t v297 = v490;
        uint64_t v298 = v460;
      }
      else
      {
        int v366 = swift_getEnumCaseMultiPayload();
        uint64_t v297 = v490;
        uint64_t v298 = v460;
        if (v366 == 11)
        {
          sub_1C3F8ADE0(v294, v460, type metadata accessor for Proto_TaggedValue);
          uint64_t v367 = v509;
          goto LABEL_156;
        }
        sub_1C3F8B288(v294, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v367 = v509;
      uint64_t v407 = *(int *)(v509 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v367 = v509;
      }
      *(void *)(v298 + v407) = qword_1EA39AF60;
      swift_retain();
LABEL_156:
      uint64_t v408 = *(int *)(v367 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v409 = swift_retain();
        uint64_t v298 = v460;
        *(void *)(v298 + v408) = sub_1C4400A40(v409);
        swift_release();
      }
      uint64_t v410 = *(void *)(v298 + v408);
      uint64_t v411 = v491;
      sub_1C3F8ADE0(v477, v491, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v297 + 56))(v411, 0, 1, v292);
      uint64_t v412 = v492;
      sub_1C4124B88(v411, v492);
      uint64_t v413 = v410
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v412, v413);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v298);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v296 + 8))(v489, v516);
    case 5:
      uint64_t v496 = 0;
      (*(void (**)(char *, char *, uint64_t))(v500 + 32))(v506, v114, v512);
      uint64_t v151 = v510 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v152 = *(void *)(v151 + *(int *)(v117 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v153 = v152;
      uint64_t v154 = v469;
      sub_1C3F970C4(v153, v469, &qword_1EBBBF8A0);
      uint64_t v155 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v156 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v155 - 8) + 48);
      if (v156(v154, 1, v155) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v154, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v182 = v484;
          sub_1C3F8ADE0(v154, v484, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v183 = v509;
          goto LABEL_81;
        }
        swift_retain();
        sub_1C3F8B288(v154, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v182 = v484;
      sub_1C4496888();
      uint64_t v183 = v509;
      uint64_t v299 = *(int *)(v509 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v183 = v509;
      }
      *(void *)(v182 + v299) = qword_1EA39AF60;
      swift_retain();
LABEL_81:
      uint64_t v300 = *(int *)(v183 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v301 = swift_retain();
        uint64_t v302 = sub_1C4400A40(v301);
        uint64_t v182 = v484;
        *(void *)(v484 + v300) = v302;
        swift_release();
      }
      uint64_t v303 = *(void *)(v182 + v300);
      swift_beginAccess();
      *(void *)(v303 + 16) = 5;
      sub_1C43F0970(v182);
      uint64_t v304 = swift_endAccess();
      MEMORY[0x1F4188790](v304);
      uint64_t v305 = v513;
      *(&v438 - 16) = v446;
      *(&v438 - 15) = v305;
      uint64_t v306 = v515;
      *(&v438 - 14) = v514;
      *(&v438 - 13) = v306;
      uint64_t v307 = v512;
      *(&v438 - 12) = v516;
      *(&v438 - 11) = v307;
      uint64_t v308 = v439;
      *(&v438 - 10) = v523;
      *(&v438 - 9) = v308;
      uint64_t v309 = v441;
      *(&v438 - 8) = v440;
      *(&v438 - 7) = v309;
      uint64_t v310 = v443;
      *(&v438 - 6) = v442;
      *(&v438 - 5) = v310;
      uint64_t v311 = v445;
      *(&v438 - 4) = v444;
      *(&v438 - 3) = v311;
      uint64_t v312 = v506;
      uint64_t v313 = v511;
      *(&v438 - 2) = (uint64_t)v506;
      *(&v438 - 1) = v313;
      uint64_t v314 = v496;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2A90, v478);
      if (v314)
      {
        swift_release();
        uint64_t v315 = &v520;
        return (*(uint64_t (**)(char *, uint64_t))(*(v315 - 32) + 8))(v312, v307);
      }
      uint64_t v496 = 0;
      swift_beginAccess();
      uint64_t v316 = *(void *)(v151 + *(int *)(v117 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v317 = v453;
      sub_1C3F970C4(v316, v453, &qword_1EBBBF8A0);
      if (v156(v317, 1, v155) == 1)
      {
        sub_1C3F962E0(v317, &qword_1EBBBF8A0);
        uint64_t v318 = v492;
        uint64_t v319 = v491;
        uint64_t v320 = v490;
        uint64_t v321 = v478;
        uint64_t v322 = v461;
      }
      else
      {
        int v368 = swift_getEnumCaseMultiPayload();
        uint64_t v318 = v492;
        uint64_t v319 = v491;
        uint64_t v320 = v490;
        uint64_t v321 = v478;
        uint64_t v322 = v461;
        if (v368 == 11)
        {
          sub_1C3F8ADE0(v317, v461, type metadata accessor for Proto_TaggedValue);
          uint64_t v369 = v509;
          goto LABEL_163;
        }
        sub_1C3F8B288(v317, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v369 = v509;
      uint64_t v414 = v322;
      uint64_t v415 = *(int *)(v509 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v369 = v509;
      }
      *(void *)(v414 + v415) = qword_1EA39AF60;
      swift_retain();
      uint64_t v322 = v414;
LABEL_163:
      uint64_t v416 = *(int *)(v369 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v417 = swift_retain();
        uint64_t v418 = sub_1C4400A40(v417);
        uint64_t v322 = v461;
        *(void *)(v461 + v416) = v418;
        swift_release();
      }
      uint64_t v419 = v322;
      uint64_t v420 = *(void *)(v322 + v416);
      sub_1C3F8ADE0(v321, v319, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v320 + 56))(v319, 0, 1, v117);
      sub_1C4124B88(v319, v318);
      uint64_t v421 = v420
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v318, v421);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v419);
      swift_endAccess();
      swift_release();
      uint64_t v382 = *(uint64_t (**)(char *, uint64_t))(v500 + 8);
      uint64_t v383 = v506;
      uint64_t v384 = &v522;
      goto LABEL_166;
    case 6:
      uint64_t v496 = 0;
      (*(void (**)(char *, char *, uint64_t))(v501 + 32))(v507, v114, v523);
      uint64_t v157 = v510 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v158 = *(void *)(v157 + *(int *)(v117 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v159 = v158;
      uint64_t v160 = v470;
      sub_1C3F970C4(v159, v470, &qword_1EBBBF8A0);
      uint64_t v161 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v162 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v161 - 8) + 48);
      if (v162(v160, 1, v161) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v160, &qword_1EBBBF8A0);
        uint64_t v163 = v512;
      }
      else
      {
        int v184 = swift_getEnumCaseMultiPayload();
        uint64_t v163 = v512;
        if (v184 == 11)
        {
          uint64_t v185 = v485;
          sub_1C3F8ADE0(v160, v485, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v186 = v509;
          goto LABEL_91;
        }
        swift_retain();
        sub_1C3F8B288(v160, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v185 = v485;
      sub_1C4496888();
      uint64_t v186 = v509;
      uint64_t v323 = *(int *)(v509 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v186 = v509;
      }
      *(void *)(v185 + v323) = qword_1EA39AF60;
      swift_retain();
LABEL_91:
      uint64_t v324 = *(int *)(v186 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v325 = swift_retain();
        uint64_t v326 = sub_1C4400A40(v325);
        uint64_t v185 = v485;
        *(void *)(v485 + v324) = v326;
        swift_release();
      }
      uint64_t v327 = *(void *)(v185 + v324);
      swift_beginAccess();
      *(void *)(v327 + 16) = 6;
      sub_1C43F0970(v185);
      uint64_t v328 = swift_endAccess();
      MEMORY[0x1F4188790](v328);
      uint64_t v329 = v513;
      *(&v438 - 16) = v446;
      *(&v438 - 15) = v329;
      uint64_t v330 = v515;
      *(&v438 - 14) = v514;
      *(&v438 - 13) = v330;
      *(&v438 - 12) = v516;
      *(&v438 - 11) = v163;
      uint64_t v307 = v523;
      uint64_t v331 = v439;
      *(&v438 - 10) = v523;
      *(&v438 - 9) = v331;
      uint64_t v332 = v441;
      *(&v438 - 8) = v440;
      *(&v438 - 7) = v332;
      uint64_t v333 = v443;
      *(&v438 - 6) = v442;
      *(&v438 - 5) = v333;
      uint64_t v334 = v445;
      *(&v438 - 4) = v444;
      *(&v438 - 3) = v334;
      uint64_t v312 = v507;
      uint64_t v335 = v511;
      *(&v438 - 2) = (uint64_t)v507;
      *(&v438 - 1) = v335;
      uint64_t v336 = v496;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2A48, v479);
      if (!v336)
      {
        uint64_t v496 = 0;
        swift_beginAccess();
        uint64_t v337 = *(void *)(v157 + *(int *)(v117 + 20))
             + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v338 = v454;
        sub_1C3F970C4(v337, v454, &qword_1EBBBF8A0);
        if (v162(v338, 1, v161) == 1)
        {
          sub_1C3F962E0(v338, &qword_1EBBBF8A0);
          uint64_t v339 = v492;
          uint64_t v340 = v491;
          uint64_t v341 = v490;
          uint64_t v342 = v523;
          uint64_t v343 = v462;
        }
        else
        {
          int v370 = swift_getEnumCaseMultiPayload();
          uint64_t v339 = v492;
          uint64_t v340 = v491;
          uint64_t v341 = v490;
          uint64_t v342 = v523;
          uint64_t v343 = v462;
          if (v370 == 11)
          {
            sub_1C3F8ADE0(v338, v462, type metadata accessor for Proto_TaggedValue);
            uint64_t v371 = v509;
LABEL_171:
            uint64_t v425 = *(int *)(v371 + 20);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              type metadata accessor for Proto_TaggedValue._StorageClass(0);
              swift_allocObject();
              uint64_t v426 = swift_retain();
              uint64_t v427 = sub_1C4400A40(v426);
              uint64_t v343 = v462;
              *(void *)(v462 + v425) = v427;
              swift_release();
            }
            uint64_t v428 = v343;
            uint64_t v429 = *(void *)(v343 + v425);
            sub_1C3F8ADE0(v479, v340, type metadata accessor for Proto_Value);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v341 + 56))(v340, 0, 1, v117);
            sub_1C4124B88(v340, v339);
            uint64_t v430 = v429
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            swift_retain();
            sub_1C4124BF0(v339, v430);
            swift_endAccess();
            swift_release();
            sub_1C43F0970(v428);
            swift_endAccess();
            swift_release();
            uint64_t v382 = *(uint64_t (**)(char *, uint64_t))(v501 + 8);
            uint64_t v383 = v507;
            uint64_t v422 = v342;
            return v382(v383, v422);
          }
          sub_1C3F8B288(v338, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        }
        sub_1C4496888();
        uint64_t v371 = v509;
        uint64_t v423 = v343;
        uint64_t v424 = *(int *)(v509 + 20);
        if (qword_1EA39AF70 != -1)
        {
          swift_once();
          uint64_t v371 = v509;
        }
        *(void *)(v423 + v424) = qword_1EA39AF60;
        swift_retain();
        uint64_t v343 = v423;
        goto LABEL_171;
      }
      swift_release();
      uint64_t v315 = v521;
      return (*(uint64_t (**)(char *, uint64_t))(*(v315 - 32) + 8))(v312, v307);
    case 7:
      uint64_t v496 = 0;
      uint64_t v165 = *(void *)v114;
      uint64_t v164 = *((void *)v114 + 1);
      uint64_t v166 = v510 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v167 = *(void *)(v166 + *(int *)(v117 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v168 = v167;
      uint64_t v169 = v471;
      sub_1C3F970C4(v168, v471, &qword_1EBBBF8A0);
      uint64_t v170 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v171 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v170 - 8) + 48);
      if (v171(v169, 1, v170) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v169, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v187 = v486;
          sub_1C3F8ADE0(v169, v486, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v188 = v509;
          goto LABEL_102;
        }
        swift_retain();
        sub_1C3F8B288(v169, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v344 = v486;
      sub_1C4496888();
      uint64_t v188 = v509;
      uint64_t v345 = *(int *)(v509 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v188 = v509;
      }
      *(void *)(v344 + v345) = qword_1EA39AF60;
      swift_retain();
      uint64_t v187 = v344;
LABEL_102:
      uint64_t v346 = *(int *)(v188 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v347 = swift_retain();
        uint64_t v348 = sub_1C4400A40(v347);
        uint64_t v187 = v486;
        *(void *)(v486 + v346) = v348;
        swift_release();
      }
      uint64_t v349 = *(void *)(v187 + v346);
      swift_beginAccess();
      *(void *)(v349 + 16) = v165;
      sub_1C43F0970(v187);
      swift_endAccess();
      swift_retain();
      uint64_t v350 = swift_retain();
      uint64_t v351 = v496;
      sub_1C400B83C(v350, v164, v350, v475);
      if (v351)
      {
        swift_release();
        return swift_release();
      }
      swift_beginAccess();
      uint64_t v352 = *(void *)(v166 + *(int *)(v508 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v353 = v352;
      uint64_t v354 = v452;
      sub_1C3F970C4(v353, v452, &qword_1EBBBF8A0);
      if (v171(v354, 1, v170) == 1)
      {
        sub_1C3F962E0(v354, &qword_1EBBBF8A0);
        uint64_t v355 = v490;
        uint64_t v356 = v508;
        uint64_t v357 = v455;
      }
      else
      {
        int v372 = swift_getEnumCaseMultiPayload();
        uint64_t v355 = v490;
        uint64_t v357 = v455;
        if (v372 == 11)
        {
          sub_1C3F8ADE0(v354, v455, type metadata accessor for Proto_TaggedValue);
          uint64_t v356 = v508;
          uint64_t v373 = v509;
          goto LABEL_179;
        }
        sub_1C3F8B288(v354, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        uint64_t v356 = v508;
      }
      sub_1C4496888();
      uint64_t v373 = v509;
      uint64_t v431 = *(int *)(v509 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v373 = v509;
      }
      *(void *)(v357 + v431) = qword_1EA39AF60;
      swift_retain();
LABEL_179:
      uint64_t v432 = *(int *)(v373 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v433 = swift_retain();
        *(void *)(v357 + v432) = sub_1C4400A40(v433);
        swift_release();
      }
      uint64_t v434 = *(void *)(v357 + v432);
      uint64_t v435 = v491;
      sub_1C3F8ADE0(v475, v491, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v355 + 56))(v435, 0, 1, v356);
      uint64_t v436 = v492;
      sub_1C4124B88(v435, v492);
      uint64_t v437 = v434
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v436, v437);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v357);
      swift_endAccess();
      swift_release();
      return swift_release();
    default:
      uint64_t v496 = 0;
      (*(void (**)(char *, char *, uint64_t))(v497 + 32))(v502, v114, v446);
      uint64_t v118 = v510 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v119 = *(void *)(v118 + *(int *)(v117 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v120 = v119;
      uint64_t v121 = v464;
      sub_1C3F970C4(v120, v464, &qword_1EBBBF8A0);
      uint64_t v122 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v123 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v122 - 8) + 48);
      if (v123(v121, 1, v122) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v121, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v172 = v480;
          sub_1C3F8ADE0(v121, v480, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v173 = v509;
          goto LABEL_39;
        }
        swift_retain();
        sub_1C3F8B288(v121, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v172 = v480;
      sub_1C4496888();
      uint64_t v173 = v509;
      uint64_t v189 = *(int *)(v509 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v173 = v509;
      }
      *(void *)(v172 + v189) = qword_1EA39AF60;
      swift_retain();
LABEL_39:
      uint64_t v190 = *(int *)(v173 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v191 = swift_retain();
        uint64_t v192 = sub_1C4400A40(v191);
        uint64_t v172 = v480;
        *(void *)(v480 + v190) = v192;
        swift_release();
      }
      uint64_t v193 = *(void *)(v172 + v190);
      swift_beginAccess();
      *(void *)(v193 + 16) = 0;
      sub_1C43F0970(v172);
      uint64_t v194 = swift_endAccess();
      MEMORY[0x1F4188790](v194);
      uint64_t v195 = v446;
      uint64_t v196 = v513;
      *(&v438 - 16) = v446;
      *(&v438 - 15) = v196;
      uint64_t v197 = v515;
      *(&v438 - 14) = v514;
      *(&v438 - 13) = v197;
      uint64_t v198 = v512;
      *(&v438 - 12) = v516;
      *(&v438 - 11) = v198;
      uint64_t v199 = v439;
      *(&v438 - 10) = v523;
      *(&v438 - 9) = v199;
      uint64_t v200 = v441;
      *(&v438 - 8) = v440;
      *(&v438 - 7) = v200;
      uint64_t v201 = v443;
      *(&v438 - 6) = v442;
      *(&v438 - 5) = v201;
      uint64_t v202 = v445;
      *(&v438 - 4) = v444;
      *(&v438 - 3) = v202;
      uint64_t v203 = v502;
      uint64_t v204 = v511;
      *(&v438 - 2) = (uint64_t)v502;
      *(&v438 - 1) = v204;
      uint64_t v205 = v496;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2BF8, v472);
      if (v205)
      {
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v497 + 8))(v203, v195);
      }
      uint64_t v496 = 0;
      swift_beginAccess();
      uint64_t v206 = *(void *)(v118 + *(int *)(v117 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v207 = v447;
      sub_1C3F970C4(v206, v447, &qword_1EBBBF8A0);
      if (v123(v207, 1, v122) == 1)
      {
        sub_1C3F962E0(v207, &qword_1EBBBF8A0);
        uint64_t v208 = v492;
        uint64_t v209 = v491;
        uint64_t v210 = v490;
        uint64_t v211 = v472;
        uint64_t v212 = v456;
      }
      else
      {
        int v358 = swift_getEnumCaseMultiPayload();
        uint64_t v208 = v492;
        uint64_t v209 = v491;
        uint64_t v210 = v490;
        uint64_t v211 = v472;
        uint64_t v212 = v456;
        if (v358 == 11)
        {
          sub_1C3F8ADE0(v207, v456, type metadata accessor for Proto_TaggedValue);
          uint64_t v359 = v509;
          goto LABEL_128;
        }
        sub_1C3F8B288(v207, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v359 = v509;
      uint64_t v374 = v212;
      uint64_t v375 = *(int *)(v509 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v359 = v509;
      }
      *(void *)(v374 + v375) = qword_1EA39AF60;
      swift_retain();
      uint64_t v212 = v374;
LABEL_128:
      uint64_t v376 = *(int *)(v359 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v377 = swift_retain();
        uint64_t v378 = sub_1C4400A40(v377);
        uint64_t v212 = v456;
        *(void *)(v456 + v376) = v378;
        swift_release();
      }
      uint64_t v379 = v212;
      uint64_t v380 = *(void *)(v212 + v376);
      sub_1C3F8ADE0(v211, v209, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v210 + 56))(v209, 0, 1, v117);
      sub_1C4124B88(v209, v208);
      uint64_t v381 = v380
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v208, v381);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v379);
      swift_endAccess();
      swift_release();
      uint64_t v382 = *(uint64_t (**)(char *, uint64_t))(v497 + 8);
      uint64_t v383 = v502;
      uint64_t v384 = &v478;
LABEL_166:
      uint64_t v422 = *(v384 - 32);
      return v382(v383, v422);
  }
}

uint64_t sub_1C41B0D00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return TaggedValue_7.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a2[8], a3, a2[9], a2[10], a2[11], a2[12], a2[13], a2[14], a2[15]);
}

uint64_t sub_1C41B0D50(uint64_t a1, void *a2)
{
  return TaggedValue_7.encode(to:)(a1, a2);
}

uint64_t TaggedValue_7<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v72 = a8;
  uint64_t v71 = a7;
  uint64_t v70 = a6;
  uint64_t v69 = a5;
  uint64_t v68 = a4;
  uint64_t v66 = a3;
  uint64_t v74 = a1;
  uint64_t v67 = *(void *)(*(void *)(a2 + 64) - 8);
  uint64_t v64 = a9;
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v65 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = *(void *)(*(void *)(v11 + 56) - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v61 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 48);
  uint64_t v60 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v12);
  uint64_t v59 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 + 40);
  uint64_t v58 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v16);
  uint64_t v57 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v22 + 32);
  uint64_t v56 = *(void *)(v23 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v20);
  uint64_t v55 = (char *)&v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(v26 + 24);
  uint64_t v54 = *(void *)(v27 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v24);
  uint64_t v30 = (char *)&v53 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *(void *)(v31 + 16);
  uint64_t v53 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v34 = (char *)&v53 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = *(void *)(v35 + 120);
  v76[0] = v32;
  v76[1] = v27;
  v76[2] = v23;
  uint64_t v77 = v19;
  uint64_t v78 = v15;
  uint64_t v79 = v37;
  uint64_t v63 = v37;
  uint64_t v73 = v38;
  uint64_t v80 = v38;
  long long v39 = *(_OWORD *)(v35 + 88);
  long long v81 = *(_OWORD *)(v35 + 72);
  long long v82 = v39;
  long long v83 = *(_OWORD *)(v35 + 104);
  uint64_t v84 = v36;
  uint64_t v40 = type metadata accessor for TaggedValue_7.TaggedEnum();
  MEMORY[0x1F4188790](v40);
  uint64_t v42 = (char *)&v53 - v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))((char *)&v53 - v41, v85, v40);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v46 = v54;
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v30, v42, v27);
      sub_1C4497068();
      return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v30, v27);
    case 2u:
      uint64_t v47 = v56;
      uint64_t v48 = v55;
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v55, v42, v23);
      sub_1C4497068();
      return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v48, v23);
    case 3u:
      uint64_t v49 = v58;
      uint64_t v50 = v57;
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v57, v42, v19);
      goto LABEL_9;
    case 4u:
      uint64_t v51 = v60;
      uint64_t v52 = v59;
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v59, v42, v15);
      sub_1C4497068();
      return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v52, v15);
    case 5u:
      uint64_t v49 = v62;
      uint64_t v50 = v61;
      uint64_t v19 = v63;
      (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v61, v42, v63);
      goto LABEL_9;
    case 6u:
      uint64_t v49 = v67;
      uint64_t v50 = v65;
      uint64_t v19 = v73;
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v65, v42, v73);
LABEL_9:
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v50, v19);
      break;
    case 7u:
      (*(void (**)(uint64_t *__return_ptr))(**((void **)v42 + 1) + 80))(v75);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DE70);
      swift_dynamicCast();
      __swift_project_boxed_opaque_existential_1(v76, v77);
      sub_1C4497068();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
      uint64_t result = swift_release();
      break;
    default:
      uint64_t v44 = v53;
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v34, v42, v32);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v34, v32);
      break;
  }
  return result;
}

uint64_t sub_1C41B1570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TaggedValue_7<>.encode(to:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), *(void *)(a3 - 24), *(void *)(a3 - 32), *(void *)(a3 - 40), *(void *)(a3 - 48), *(void *)(a3 - 56));
}

uint64_t TaggedValue_8.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v406 = a9;
  uint64_t v388 = a2;
  uint64_t v414 = a2;
  uint64_t v415 = a3;
  uint64_t v389 = a3;
  uint64_t v390 = a4;
  uint64_t v416 = a4;
  uint64_t v417 = a5;
  uint64_t v391 = a5;
  uint64_t v392 = a6;
  uint64_t v418 = a6;
  uint64_t v419 = a7;
  uint64_t v393 = a7;
  uint64_t v394 = a8;
  uint64_t v420 = a8;
  uint64_t v421 = a10;
  uint64_t v386 = a18;
  uint64_t v387 = a10;
  uint64_t v379 = a11;
  uint64_t v380 = a12;
  uint64_t v422 = a11;
  uint64_t v423 = a12;
  uint64_t v381 = a13;
  uint64_t v382 = a14;
  uint64_t v424 = a13;
  uint64_t v425 = a14;
  uint64_t v383 = a15;
  uint64_t v384 = a16;
  uint64_t v426 = a15;
  uint64_t v427 = a16;
  uint64_t v385 = a17;
  uint64_t v428 = a17;
  uint64_t v429 = a18;
  uint64_t v404 = type metadata accessor for TaggedValue_8.TaggedEnum();
  uint64_t v405 = *(void *)(v404 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v404);
  uint64_t v324 = (char *)&v323 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  int v360 = (char *)&v323 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v359 = (char *)&v323 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  int v358 = (char *)&v323 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v357 = (char *)&v323 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v356 = (char *)&v323 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v355 = (char *)&v323 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v354 = (char *)&v323 - v34;
  MEMORY[0x1F4188790](v33);
  uint64_t v353 = (char *)&v323 - v35;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v37 = MEMORY[0x1F4188790](v36 - 8);
  uint64_t v378 = (uint64_t)&v323 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v377 = (uint64_t)&v323 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v376 = (uint64_t)&v323 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v375 = (uint64_t)&v323 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v374 = (uint64_t)&v323 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v373 = (uint64_t)&v323 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v372 = (uint64_t)&v323 - v50;
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v371 = (uint64_t)&v323 - v52;
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  uint64_t v370 = (uint64_t)&v323 - v54;
  MEMORY[0x1F4188790](v53);
  uint64_t v410 = (uint64_t)&v323 - v55;
  uint64_t v413 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v56 = MEMORY[0x1F4188790](v413);
  uint64_t v352 = (uint64_t)&v323 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = MEMORY[0x1F4188790](v56);
  uint64_t v351 = (uint64_t)&v323 - v59;
  uint64_t v60 = MEMORY[0x1F4188790](v58);
  uint64_t v350 = (uint64_t)&v323 - v61;
  uint64_t v62 = MEMORY[0x1F4188790](v60);
  uint64_t v349 = (uint64_t)&v323 - v63;
  uint64_t v64 = MEMORY[0x1F4188790](v62);
  uint64_t v348 = (uint64_t)&v323 - v65;
  uint64_t v66 = MEMORY[0x1F4188790](v64);
  uint64_t v347 = (uint64_t)&v323 - v67;
  uint64_t v68 = MEMORY[0x1F4188790](v66);
  uint64_t v346 = (uint64_t)&v323 - v69;
  uint64_t v70 = MEMORY[0x1F4188790](v68);
  uint64_t v345 = (uint64_t)&v323 - v71;
  uint64_t v72 = MEMORY[0x1F4188790](v70);
  uint64_t v344 = (uint64_t)&v323 - v73;
  MEMORY[0x1F4188790](v72);
  uint64_t v409 = (uint64_t)&v323 - v74;
  uint64_t v75 = type metadata accessor for Proto_Value(0);
  uint64_t v76 = *(void *)(v75 - 8);
  uint64_t v77 = MEMORY[0x1F4188790](v75);
  uint64_t v343 = (char *)&v323 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = MEMORY[0x1F4188790](v77);
  uint64_t v403 = (uint64_t)&v323 - v80;
  uint64_t v81 = MEMORY[0x1F4188790](v79);
  uint64_t v342 = (uint64_t)&v323 - v82;
  uint64_t v83 = MEMORY[0x1F4188790](v81);
  uint64_t v402 = (uint64_t)&v323 - v84;
  uint64_t v85 = MEMORY[0x1F4188790](v83);
  uint64_t v341 = (char *)&v323 - v86;
  uint64_t v87 = MEMORY[0x1F4188790](v85);
  uint64_t v401 = (uint64_t)&v323 - v88;
  uint64_t v89 = MEMORY[0x1F4188790](v87);
  uint64_t v340 = (char *)&v323 - v90;
  uint64_t v91 = MEMORY[0x1F4188790](v89);
  uint64_t v400 = (uint64_t)&v323 - v92;
  uint64_t v93 = MEMORY[0x1F4188790](v91);
  uint64_t v339 = (char *)&v323 - v94;
  uint64_t v95 = MEMORY[0x1F4188790](v93);
  uint64_t v399 = (uint64_t)&v323 - v96;
  uint64_t v97 = MEMORY[0x1F4188790](v95);
  uint64_t v338 = (char *)&v323 - v98;
  uint64_t v99 = MEMORY[0x1F4188790](v97);
  uint64_t v398 = (uint64_t)&v323 - v100;
  uint64_t v101 = MEMORY[0x1F4188790](v99);
  uint64_t v337 = (char *)&v323 - v102;
  uint64_t v103 = MEMORY[0x1F4188790](v101);
  uint64_t v397 = (uint64_t)&v323 - v104;
  uint64_t v105 = MEMORY[0x1F4188790](v103);
  uint64_t v336 = (char *)&v323 - v106;
  uint64_t v107 = MEMORY[0x1F4188790](v105);
  uint64_t v396 = (uint64_t)&v323 - v108;
  uint64_t v109 = MEMORY[0x1F4188790](v107);
  uint64_t v335 = (char *)&v323 - v110;
  uint64_t v111 = MEMORY[0x1F4188790](v109);
  uint64_t v395 = (uint64_t)&v323 - v112;
  MEMORY[0x1F4188790](v111);
  uint64_t v412 = (uint64_t)&v323 - v113;
  uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v115 = MEMORY[0x1F4188790](v114 - 8);
  uint64_t v334 = (char *)&v323 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = MEMORY[0x1F4188790](v115);
  uint64_t v369 = (uint64_t)&v323 - v118;
  uint64_t v119 = MEMORY[0x1F4188790](v117);
  uint64_t v333 = (char *)&v323 - v120;
  uint64_t v121 = MEMORY[0x1F4188790](v119);
  uint64_t v368 = (uint64_t)&v323 - v122;
  uint64_t v123 = MEMORY[0x1F4188790](v121);
  uint64_t v332 = (char *)&v323 - v124;
  uint64_t v125 = MEMORY[0x1F4188790](v123);
  uint64_t v367 = (uint64_t)&v323 - v126;
  uint64_t v127 = MEMORY[0x1F4188790](v125);
  uint64_t v331 = (char *)&v323 - v128;
  uint64_t v129 = MEMORY[0x1F4188790](v127);
  uint64_t v366 = (uint64_t)&v323 - v130;
  uint64_t v131 = MEMORY[0x1F4188790](v129);
  uint64_t v330 = (char *)&v323 - v132;
  uint64_t v133 = MEMORY[0x1F4188790](v131);
  uint64_t v365 = (uint64_t)&v323 - v134;
  uint64_t v135 = MEMORY[0x1F4188790](v133);
  uint64_t v329 = (char *)&v323 - v136;
  uint64_t v137 = MEMORY[0x1F4188790](v135);
  uint64_t v364 = (uint64_t)&v323 - v138;
  uint64_t v139 = MEMORY[0x1F4188790](v137);
  uint64_t v328 = (char *)&v323 - v140;
  uint64_t v141 = MEMORY[0x1F4188790](v139);
  uint64_t v363 = (uint64_t)&v323 - v142;
  uint64_t v143 = MEMORY[0x1F4188790](v141);
  uint64_t v327 = (char *)&v323 - v144;
  uint64_t v145 = MEMORY[0x1F4188790](v143);
  uint64_t v362 = (uint64_t)&v323 - v146;
  uint64_t v147 = MEMORY[0x1F4188790](v145);
  uint64_t v326 = (char *)&v323 - v148;
  uint64_t v149 = MEMORY[0x1F4188790](v147);
  uint64_t v361 = (uint64_t)&v323 - v150;
  uint64_t v151 = MEMORY[0x1F4188790](v149);
  uint64_t v153 = (char *)&v323 - v152;
  MEMORY[0x1F4188790](v151);
  uint64_t v155 = (char *)&v323 - v154;
  uint64_t v156 = a1;
  uint64_t v157 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v157, (uint64_t)v155, &qword_1EBBC0540);
  uint64_t v158 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
  uint64_t v411 = v75;
  uint64_t v159 = v75;
  uint64_t v160 = v76 + 48;
  LODWORD(v76) = v158(v155, 1, v159);
  sub_1C3F962E0((uint64_t)v155, &qword_1EBBC0540);
  if (v76 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v156;
    sub_1C3F970C4(v157, (uint64_t)v153, &qword_1EBBC0540);
    uint64_t v164 = v411;
    uint64_t v325 = v160;
    uint64_t v408 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v158;
    if (v158(v153, 1, v411) == 1)
    {
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
      JUMPOUT(0x1C41B4434);
    }
    uint64_t v165 = v412;
    sub_1C3F8ADE0((uint64_t)v153, v412, type metadata accessor for Proto_Value);
    uint64_t v166 = v164;
    uint64_t v167 = *(void *)(v165 + *(int *)(v164 + 20))
         + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v168 = v410;
    sub_1C3F970C4(v167, v410, &qword_1EBBBF8A0);
    uint64_t v169 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    uint64_t v170 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v169 - 8) + 48);
    if (v170(v168, 1, v169) == 1)
    {
      swift_retain();
      sub_1C3F962E0(v168, &qword_1EBBBF8A0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        uint64_t v171 = v168;
        uint64_t v172 = v409;
        sub_1C3F8ADE0(v171, v409, type metadata accessor for Proto_TaggedValue);
LABEL_12:
        swift_retain();
        sub_1C3F8B288(v412, type metadata accessor for Proto_Value);
        swift_beginAccess();
        sub_1C3F8B288(v172, type metadata accessor for Proto_TaggedValue);
        uint64_t v323 = inited;
        uint64_t v174 = v169;
        uint64_t v175 = v166;
        switch(v166)
        {
          case 0:
            uint64_t v176 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v177 = v176;
            uint64_t v178 = v361;
            sub_1C3F970C4(v177, v361, &qword_1EBBC0540);
            if (v408(v178, 1, v166) == 1) {
              goto LABEL_160;
            }
            uint64_t v179 = v178;
            uint64_t v180 = v395;
            sub_1C3F8ADE0(v179, v395, type metadata accessor for Proto_Value);
            uint64_t v181 = *(void *)(v180 + *(int *)(v166 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v182 = v370;
            sub_1C3F970C4(v181, v370, &qword_1EBBBF8A0);
            if (v170(v182, 1, v174) == 1)
            {
              sub_1C3F962E0(v182, &qword_1EBBBF8A0);
              uint64_t v183 = v407;
              uint64_t v184 = v344;
              uint64_t v185 = (uint64_t)v335;
              uint64_t v186 = (uint64_t)v326;
            }
            else
            {
              int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
              uint64_t v183 = v407;
              uint64_t v184 = v344;
              uint64_t v186 = (uint64_t)v326;
              if (EnumCaseMultiPayload == 11)
              {
                sub_1C3F8ADE0(v182, v344, type metadata accessor for Proto_TaggedValue);
                uint64_t v185 = (uint64_t)v335;
                goto LABEL_62;
              }
              sub_1C3F8B288(v182, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              uint64_t v185 = (uint64_t)v335;
            }
            sub_1C4496888();
            uint64_t v283 = *(int *)(v413 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v184 + v283) = qword_1EA39AF60;
            swift_retain();
LABEL_62:
            sub_1C3F8B288(v395, type metadata accessor for Proto_Value);
            uint64_t v284 = *(void *)(v184 + *(int *)(v413 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v284, v186, &qword_1EBBC0540);
            if (v408(v186, 1, v175) == 1)
            {
              sub_1C4496888();
              uint64_t v285 = *(int *)(v175 + 20);
              uint64_t v286 = v353;
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v185 + v285) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v186, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v186, v185, type metadata accessor for Proto_Value);
              uint64_t v286 = v353;
            }
            sub_1C3F8B288(v184, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v287 = sub_1C3F974B0(v185, v156);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v379 + 8) + 8) + 8))(v287);
            if (v183) {
              goto LABEL_156;
            }
            goto LABEL_145;
          case 1:
            uint64_t v187 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v188 = v187;
            uint64_t v189 = v362;
            sub_1C3F970C4(v188, v362, &qword_1EBBC0540);
            if (v408(v189, 1, v166) == 1) {
              goto LABEL_161;
            }
            uint64_t v190 = v189;
            uint64_t v191 = v396;
            sub_1C3F8ADE0(v190, v396, type metadata accessor for Proto_Value);
            uint64_t v192 = *(void *)(v191 + *(int *)(v166 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v193 = v371;
            sub_1C3F970C4(v192, v371, &qword_1EBBBF8A0);
            if (v170(v193, 1, v174) == 1)
            {
              sub_1C3F962E0(v193, &qword_1EBBBF8A0);
              uint64_t v194 = v407;
              uint64_t v195 = v345;
              uint64_t v196 = (uint64_t)v336;
              uint64_t v197 = (uint64_t)v327;
            }
            else
            {
              int v275 = swift_getEnumCaseMultiPayload();
              uint64_t v194 = v407;
              uint64_t v195 = v345;
              uint64_t v197 = (uint64_t)v327;
              if (v275 == 11)
              {
                sub_1C3F8ADE0(v193, v345, type metadata accessor for Proto_TaggedValue);
                uint64_t v196 = (uint64_t)v336;
                goto LABEL_73;
              }
              sub_1C3F8B288(v193, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              uint64_t v196 = (uint64_t)v336;
            }
            sub_1C4496888();
            uint64_t v288 = *(int *)(v413 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v195 + v288) = qword_1EA39AF60;
            swift_retain();
LABEL_73:
            sub_1C3F8B288(v396, type metadata accessor for Proto_Value);
            uint64_t v289 = *(void *)(v195 + *(int *)(v413 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v289, v197, &qword_1EBBC0540);
            if (v408(v197, 1, v175) == 1)
            {
              sub_1C4496888();
              uint64_t v290 = *(int *)(v175 + 20);
              uint64_t v286 = v354;
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v196 + v290) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v197, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v197, v196, type metadata accessor for Proto_Value);
              uint64_t v286 = v354;
            }
            sub_1C3F8B288(v195, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v291 = sub_1C3F974B0(v196, v156);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v380 + 8) + 8) + 8))(v291);
            if (!v194) {
              goto LABEL_145;
            }
            goto LABEL_156;
          case 2:
            uint64_t v198 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v199 = v198;
            uint64_t v200 = v363;
            sub_1C3F970C4(v199, v363, &qword_1EBBC0540);
            if (v408(v200, 1, v166) == 1) {
              goto LABEL_162;
            }
            uint64_t v201 = v200;
            uint64_t v202 = v397;
            sub_1C3F8ADE0(v201, v397, type metadata accessor for Proto_Value);
            uint64_t v203 = *(void *)(v202 + *(int *)(v166 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v204 = v372;
            sub_1C3F970C4(v203, v372, &qword_1EBBBF8A0);
            if (v170(v204, 1, v174) == 1)
            {
              sub_1C3F962E0(v204, &qword_1EBBBF8A0);
              uint64_t v205 = v407;
              uint64_t v206 = v346;
              uint64_t v207 = (uint64_t)v337;
              uint64_t v208 = (uint64_t)v328;
            }
            else
            {
              int v276 = swift_getEnumCaseMultiPayload();
              uint64_t v205 = v407;
              uint64_t v206 = v346;
              uint64_t v208 = (uint64_t)v328;
              if (v276 == 11)
              {
                sub_1C3F8ADE0(v204, v346, type metadata accessor for Proto_TaggedValue);
                uint64_t v207 = (uint64_t)v337;
                goto LABEL_84;
              }
              sub_1C3F8B288(v204, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              uint64_t v207 = (uint64_t)v337;
            }
            sub_1C4496888();
            uint64_t v292 = *(int *)(v413 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v206 + v292) = qword_1EA39AF60;
            swift_retain();
LABEL_84:
            sub_1C3F8B288(v397, type metadata accessor for Proto_Value);
            uint64_t v293 = *(void *)(v206 + *(int *)(v413 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v293, v208, &qword_1EBBC0540);
            if (v408(v208, 1, v175) == 1)
            {
              sub_1C4496888();
              uint64_t v294 = *(int *)(v175 + 20);
              uint64_t v286 = v355;
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v207 + v294) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v208, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v208, v207, type metadata accessor for Proto_Value);
              uint64_t v286 = v355;
            }
            sub_1C3F8B288(v206, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v295 = sub_1C3F974B0(v207, v156);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v381 + 8) + 8) + 8))(v295);
            if (!v205) {
              goto LABEL_145;
            }
            goto LABEL_156;
          case 3:
            uint64_t v209 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v210 = v209;
            uint64_t v211 = v364;
            sub_1C3F970C4(v210, v364, &qword_1EBBC0540);
            if (v408(v211, 1, v166) == 1) {
              goto LABEL_163;
            }
            uint64_t v212 = v211;
            uint64_t v213 = v398;
            sub_1C3F8ADE0(v212, v398, type metadata accessor for Proto_Value);
            uint64_t v214 = *(void *)(v213 + *(int *)(v166 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v215 = v373;
            sub_1C3F970C4(v214, v373, &qword_1EBBBF8A0);
            if (v170(v215, 1, v174) == 1)
            {
              sub_1C3F962E0(v215, &qword_1EBBBF8A0);
              uint64_t v216 = v407;
              uint64_t v217 = v347;
              uint64_t v218 = (uint64_t)v338;
              uint64_t v219 = (uint64_t)v329;
            }
            else
            {
              int v277 = swift_getEnumCaseMultiPayload();
              uint64_t v216 = v407;
              uint64_t v217 = v347;
              uint64_t v219 = (uint64_t)v329;
              if (v277 == 11)
              {
                sub_1C3F8ADE0(v215, v347, type metadata accessor for Proto_TaggedValue);
                uint64_t v218 = (uint64_t)v338;
                goto LABEL_95;
              }
              sub_1C3F8B288(v215, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              uint64_t v218 = (uint64_t)v338;
            }
            sub_1C4496888();
            uint64_t v296 = *(int *)(v413 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v217 + v296) = qword_1EA39AF60;
            swift_retain();
LABEL_95:
            sub_1C3F8B288(v398, type metadata accessor for Proto_Value);
            uint64_t v297 = *(void *)(v217 + *(int *)(v413 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v297, v219, &qword_1EBBC0540);
            if (v408(v219, 1, v175) == 1)
            {
              sub_1C4496888();
              uint64_t v298 = *(int *)(v175 + 20);
              uint64_t v286 = v356;
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v218 + v298) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v219, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v219, v218, type metadata accessor for Proto_Value);
              uint64_t v286 = v356;
            }
            sub_1C3F8B288(v217, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v299 = sub_1C3F974B0(v218, v156);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v382 + 8) + 8) + 8))(v299);
            if (!v216) {
              goto LABEL_145;
            }
            goto LABEL_156;
          case 4:
            uint64_t v220 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v221 = v220;
            uint64_t v222 = v365;
            sub_1C3F970C4(v221, v365, &qword_1EBBC0540);
            if (v408(v222, 1, v166) == 1) {
              goto LABEL_164;
            }
            uint64_t v223 = v222;
            uint64_t v224 = v399;
            sub_1C3F8ADE0(v223, v399, type metadata accessor for Proto_Value);
            uint64_t v225 = *(void *)(v224 + *(int *)(v166 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v226 = v374;
            sub_1C3F970C4(v225, v374, &qword_1EBBBF8A0);
            if (v170(v226, 1, v174) == 1)
            {
              sub_1C3F962E0(v226, &qword_1EBBBF8A0);
              uint64_t v227 = v407;
              uint64_t v228 = v348;
              uint64_t v229 = (uint64_t)v339;
              uint64_t v230 = (uint64_t)v330;
            }
            else
            {
              int v278 = swift_getEnumCaseMultiPayload();
              uint64_t v227 = v407;
              uint64_t v228 = v348;
              uint64_t v230 = (uint64_t)v330;
              if (v278 == 11)
              {
                sub_1C3F8ADE0(v226, v348, type metadata accessor for Proto_TaggedValue);
                uint64_t v229 = (uint64_t)v339;
                goto LABEL_106;
              }
              sub_1C3F8B288(v226, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              uint64_t v229 = (uint64_t)v339;
            }
            sub_1C4496888();
            uint64_t v300 = *(int *)(v413 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v228 + v300) = qword_1EA39AF60;
            swift_retain();
LABEL_106:
            sub_1C3F8B288(v399, type metadata accessor for Proto_Value);
            uint64_t v301 = *(void *)(v228 + *(int *)(v413 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v301, v230, &qword_1EBBC0540);
            if (v408(v230, 1, v175) == 1)
            {
              sub_1C4496888();
              uint64_t v302 = *(int *)(v175 + 20);
              uint64_t v286 = v357;
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v229 + v302) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v230, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v230, v229, type metadata accessor for Proto_Value);
              uint64_t v286 = v357;
            }
            sub_1C3F8B288(v228, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v303 = sub_1C3F974B0(v229, v156);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v383 + 8) + 8) + 8))(v303);
            if (!v227) {
              goto LABEL_145;
            }
            goto LABEL_156;
          case 5:
            uint64_t v231 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v232 = v231;
            uint64_t v233 = v366;
            sub_1C3F970C4(v232, v366, &qword_1EBBC0540);
            if (v408(v233, 1, v166) == 1) {
              goto LABEL_165;
            }
            uint64_t v234 = v233;
            uint64_t v235 = v400;
            sub_1C3F8ADE0(v234, v400, type metadata accessor for Proto_Value);
            uint64_t v236 = *(void *)(v235 + *(int *)(v166 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v237 = v375;
            sub_1C3F970C4(v236, v375, &qword_1EBBBF8A0);
            if (v170(v237, 1, v174) == 1)
            {
              sub_1C3F962E0(v237, &qword_1EBBBF8A0);
              uint64_t v238 = v407;
              uint64_t v239 = v349;
              uint64_t v240 = (uint64_t)v340;
              uint64_t v241 = (uint64_t)v331;
            }
            else
            {
              int v279 = swift_getEnumCaseMultiPayload();
              uint64_t v238 = v407;
              uint64_t v239 = v349;
              uint64_t v241 = (uint64_t)v331;
              if (v279 == 11)
              {
                sub_1C3F8ADE0(v237, v349, type metadata accessor for Proto_TaggedValue);
                uint64_t v240 = (uint64_t)v340;
                goto LABEL_117;
              }
              sub_1C3F8B288(v237, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              uint64_t v240 = (uint64_t)v340;
            }
            sub_1C4496888();
            uint64_t v304 = *(int *)(v413 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v239 + v304) = qword_1EA39AF60;
            swift_retain();
LABEL_117:
            sub_1C3F8B288(v400, type metadata accessor for Proto_Value);
            uint64_t v305 = *(void *)(v239 + *(int *)(v413 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v305, v241, &qword_1EBBC0540);
            if (v408(v241, 1, v175) == 1)
            {
              sub_1C4496888();
              uint64_t v306 = *(int *)(v175 + 20);
              uint64_t v286 = v358;
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v240 + v306) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v241, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v241, v240, type metadata accessor for Proto_Value);
              uint64_t v286 = v358;
            }
            sub_1C3F8B288(v239, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v307 = sub_1C3F974B0(v240, v156);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v384 + 8) + 8) + 8))(v307);
            if (!v238) {
              goto LABEL_145;
            }
            goto LABEL_156;
          case 6:
            uint64_t v242 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v243 = v242;
            uint64_t v244 = v367;
            sub_1C3F970C4(v243, v367, &qword_1EBBC0540);
            if (v408(v244, 1, v166) == 1) {
              goto LABEL_166;
            }
            uint64_t v245 = v244;
            uint64_t v246 = v401;
            sub_1C3F8ADE0(v245, v401, type metadata accessor for Proto_Value);
            uint64_t v247 = *(void *)(v246 + *(int *)(v166 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v248 = v376;
            sub_1C3F970C4(v247, v376, &qword_1EBBBF8A0);
            if (v170(v248, 1, v174) == 1)
            {
              sub_1C3F962E0(v248, &qword_1EBBBF8A0);
              uint64_t v249 = v407;
              uint64_t v250 = v350;
              uint64_t v251 = (uint64_t)v341;
              uint64_t v252 = (uint64_t)v332;
            }
            else
            {
              int v280 = swift_getEnumCaseMultiPayload();
              uint64_t v249 = v407;
              uint64_t v250 = v350;
              uint64_t v252 = (uint64_t)v332;
              if (v280 == 11)
              {
                sub_1C3F8ADE0(v248, v350, type metadata accessor for Proto_TaggedValue);
                uint64_t v251 = (uint64_t)v341;
                goto LABEL_128;
              }
              sub_1C3F8B288(v248, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              uint64_t v251 = (uint64_t)v341;
            }
            sub_1C4496888();
            uint64_t v308 = *(int *)(v413 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v250 + v308) = qword_1EA39AF60;
            swift_retain();
LABEL_128:
            sub_1C3F8B288(v401, type metadata accessor for Proto_Value);
            uint64_t v309 = *(void *)(v250 + *(int *)(v413 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v309, v252, &qword_1EBBC0540);
            if (v408(v252, 1, v175) == 1)
            {
              sub_1C4496888();
              uint64_t v310 = *(int *)(v175 + 20);
              uint64_t v286 = v359;
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v251 + v310) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v252, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v252, v251, type metadata accessor for Proto_Value);
              uint64_t v286 = v359;
            }
            sub_1C3F8B288(v250, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v311 = sub_1C3F974B0(v251, v156);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v385 + 8) + 8) + 8))(v311);
            if (!v249) {
              goto LABEL_145;
            }
            goto LABEL_156;
          case 7:
            uint64_t v253 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v254 = v253;
            uint64_t v255 = v368;
            sub_1C3F970C4(v254, v368, &qword_1EBBC0540);
            if (v408(v255, 1, v166) == 1) {
              goto LABEL_167;
            }
            uint64_t v256 = v255;
            uint64_t v257 = v402;
            sub_1C3F8ADE0(v256, v402, type metadata accessor for Proto_Value);
            uint64_t v258 = *(void *)(v257 + *(int *)(v166 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v259 = v377;
            sub_1C3F970C4(v258, v377, &qword_1EBBBF8A0);
            if (v170(v259, 1, v174) == 1)
            {
              sub_1C3F962E0(v259, &qword_1EBBBF8A0);
              uint64_t v260 = v407;
              uint64_t v261 = v351;
              uint64_t v262 = (uint64_t)v333;
            }
            else
            {
              int v281 = swift_getEnumCaseMultiPayload();
              uint64_t v260 = v407;
              uint64_t v261 = v351;
              uint64_t v262 = (uint64_t)v333;
              if (v281 == 11)
              {
                sub_1C3F8ADE0(v259, v351, type metadata accessor for Proto_TaggedValue);
                goto LABEL_139;
              }
              sub_1C3F8B288(v259, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            sub_1C4496888();
            uint64_t v312 = *(int *)(v413 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v261 + v312) = qword_1EA39AF60;
            swift_retain();
LABEL_139:
            sub_1C3F8B288(v402, type metadata accessor for Proto_Value);
            uint64_t v313 = *(void *)(v261 + *(int *)(v413 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v313, v262, &qword_1EBBC0540);
            if (v408(v262, 1, v166) == 1)
            {
              uint64_t v314 = v342;
              sub_1C4496888();
              uint64_t v315 = *(int *)(v175 + 20);
              uint64_t v286 = v360;
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v314 + v315) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v262, &qword_1EBBC0540);
            }
            else
            {
              uint64_t v314 = v342;
              sub_1C3F8ADE0(v262, v342, type metadata accessor for Proto_Value);
              uint64_t v286 = v360;
            }
            sub_1C3F8B288(v261, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v316 = sub_1C3F974B0(v314, v156);
            swift_release();
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v386 + 8) + 8) + 8))(v316);
            if (v260) {
              goto LABEL_156;
            }
LABEL_145:
            swift_release();
            swift_release();
            uint64_t v317 = v404;
            goto LABEL_158;
          default:
            uint64_t v263 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v264 = v263;
            uint64_t v265 = v369;
            sub_1C3F970C4(v264, v369, &qword_1EBBC0540);
            if (v408(v265, 1, v166) == 1) {
              goto LABEL_168;
            }
            uint64_t v266 = v265;
            uint64_t v267 = v403;
            sub_1C3F8ADE0(v266, v403, type metadata accessor for Proto_Value);
            uint64_t v268 = *(void *)(v267 + *(int *)(v166 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v269 = v378;
            sub_1C3F970C4(v268, v378, &qword_1EBBBF8A0);
            if (v170(v269, 1, v174) == 1)
            {
              sub_1C3F962E0(v269, &qword_1EBBBF8A0);
              uint64_t v270 = v407;
              uint64_t v271 = v352;
              uint64_t v272 = (uint64_t)v343;
              uint64_t v273 = (uint64_t)v334;
            }
            else
            {
              int v282 = swift_getEnumCaseMultiPayload();
              uint64_t v270 = v407;
              uint64_t v271 = v352;
              uint64_t v273 = (uint64_t)v334;
              if (v282 == 11)
              {
                sub_1C3F8ADE0(v269, v352, type metadata accessor for Proto_TaggedValue);
                uint64_t v272 = (uint64_t)v343;
                goto LABEL_150;
              }
              sub_1C3F8B288(v269, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              uint64_t v272 = (uint64_t)v343;
            }
            sub_1C4496888();
            uint64_t v318 = *(int *)(v413 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v271 + v318) = qword_1EA39AF60;
            swift_retain();
LABEL_150:
            sub_1C3F8B288(v403, type metadata accessor for Proto_Value);
            uint64_t v319 = *(void *)(v271 + *(int *)(v413 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v319, v273, &qword_1EBBC0540);
            if (v408(v273, 1, v166) == 1)
            {
              sub_1C4496888();
              uint64_t v320 = *(int *)(v166 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v272 + v320) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v273, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v273, v272, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v271, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v321 = sub_1C3F974B0(v272, v156);
            swift_release();
            AnyCRValue.init(from:)(v321, &v430);
            if (v270)
            {
LABEL_156:
              swift_release();
              swift_setDeallocating();
              return swift_release();
            }
            else
            {
              swift_release();
              swift_release();
              uint64_t v322 = v430;
              uint64_t v286 = v324;
              *(void *)uint64_t v324 = v166;
              *((void *)v286 + 1) = v322;
              uint64_t v317 = v404;
LABEL_158:
              swift_storeEnumTagMultiPayload();
              return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v405 + 32))(v406, v286, v317);
            }
        }
      }
      swift_retain();
      sub_1C3F8B288(v168, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    uint64_t v172 = v409;
    sub_1C4496888();
    uint64_t v173 = *(int *)(v413 + 20);
    if (qword_1EA39AF70 != -1) {
      swift_once();
    }
    *(void *)(v172 + v173) = qword_1EA39AF60;
    goto LABEL_12;
  }
  sub_1C3FE3FF0();
  swift_allocError();
  *(void *)uint64_t v161 = 0xD000000000000017;
  *(void *)(v161 + 8) = 0x80000001C44B0F00;
  *(unsigned char *)(v161 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t TaggedValue_8.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t v585 = a1;
  uint64_t v588 = a2[9];
  uint64_t v573 = *(void *)(v588 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](a1);
  v581 = (char *)&v505 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v587 = *(void *)(v5 + 64);
  uint64_t v572 = *(void *)(v587 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  v580 = (char *)&v505 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v596 = *(void *)(v8 + 56);
  uint64_t v571 = *(void *)(v596 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  v579 = (char *)&v505 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v591 = *(void *)(v11 + 48);
  uint64_t v570 = *(void *)(v591 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  v578 = (char *)&v505 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v590 = *(void *)(v14 + 40);
  uint64_t v569 = *(void *)(v590 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  v577 = (char *)&v505 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v586 = *(void *)(v17 + 32);
  uint64_t v559 = *(void *)(v586 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  v576 = (char *)&v505 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v589 = *(void *)(v20 + 24);
  uint64_t v558 = *(void *)(v589 - 8);
  MEMORY[0x1F4188790](v18);
  v575 = (char *)&v505 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v562 = (uint64_t)&v505 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v561 = (uint64_t)&v505 - v25;
  uint64_t v583 = type metadata accessor for Proto_Value(0);
  uint64_t v560 = *(void *)(v583 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v583);
  uint64_t v546 = (uint64_t)&v505 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v550 = (uint64_t)&v505 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v549 = (uint64_t)&v505 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v548 = (uint64_t)&v505 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v547 = (uint64_t)&v505 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v545 = (uint64_t)&v505 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v544 = (uint64_t)&v505 - v39;
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  uint64_t v543 = (uint64_t)&v505 - v41;
  MEMORY[0x1F4188790](v40);
  uint64_t v542 = (uint64_t)&v505 - v42;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v44 = MEMORY[0x1F4188790](v43 - 8);
  uint64_t v519 = (uint64_t)&v505 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  uint64_t v541 = (uint64_t)&v505 - v47;
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  uint64_t v522 = (uint64_t)&v505 - v49;
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  uint64_t v540 = (uint64_t)&v505 - v51;
  uint64_t v52 = MEMORY[0x1F4188790](v50);
  uint64_t v520 = (uint64_t)&v505 - v53;
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  uint64_t v539 = (uint64_t)&v505 - v55;
  uint64_t v56 = MEMORY[0x1F4188790](v54);
  uint64_t v518 = (uint64_t)&v505 - v57;
  uint64_t v58 = MEMORY[0x1F4188790](v56);
  uint64_t v537 = (uint64_t)&v505 - v59;
  uint64_t v60 = MEMORY[0x1F4188790](v58);
  uint64_t v517 = (uint64_t)&v505 - v61;
  uint64_t v62 = MEMORY[0x1F4188790](v60);
  uint64_t v536 = (uint64_t)&v505 - v63;
  uint64_t v64 = MEMORY[0x1F4188790](v62);
  uint64_t v516 = (uint64_t)&v505 - v65;
  uint64_t v66 = MEMORY[0x1F4188790](v64);
  uint64_t v535 = (uint64_t)&v505 - v67;
  uint64_t v68 = MEMORY[0x1F4188790](v66);
  uint64_t v515 = (uint64_t)&v505 - v69;
  uint64_t v70 = MEMORY[0x1F4188790](v68);
  uint64_t v534 = (uint64_t)&v505 - v71;
  uint64_t v72 = MEMORY[0x1F4188790](v70);
  uint64_t v514 = (uint64_t)&v505 - v73;
  uint64_t v74 = MEMORY[0x1F4188790](v72);
  uint64_t v533 = (uint64_t)&v505 - v75;
  uint64_t v76 = MEMORY[0x1F4188790](v74);
  uint64_t v513 = (uint64_t)&v505 - v77;
  MEMORY[0x1F4188790](v76);
  uint64_t v531 = (uint64_t)&v505 - v78;
  uint64_t v582 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v79 = MEMORY[0x1F4188790](v582);
  uint64_t v521 = (uint64_t)&v505 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = MEMORY[0x1F4188790](v79);
  uint64_t v557 = (uint64_t)&v505 - v82;
  uint64_t v83 = MEMORY[0x1F4188790](v81);
  uint64_t v523 = (uint64_t)&v505 - v84;
  uint64_t v85 = MEMORY[0x1F4188790](v83);
  uint64_t v538 = (uint64_t)&v505 - v86;
  uint64_t v87 = MEMORY[0x1F4188790](v85);
  uint64_t v530 = (uint64_t)&v505 - v88;
  uint64_t v89 = MEMORY[0x1F4188790](v87);
  uint64_t v556 = (uint64_t)&v505 - v90;
  uint64_t v91 = MEMORY[0x1F4188790](v89);
  uint64_t v529 = (uint64_t)&v505 - v92;
  uint64_t v93 = MEMORY[0x1F4188790](v91);
  uint64_t v555 = (uint64_t)&v505 - v94;
  uint64_t v95 = MEMORY[0x1F4188790](v93);
  uint64_t v528 = (uint64_t)&v505 - v96;
  uint64_t v97 = MEMORY[0x1F4188790](v95);
  uint64_t v554 = (uint64_t)&v505 - v98;
  uint64_t v99 = MEMORY[0x1F4188790](v97);
  uint64_t v527 = (uint64_t)&v505 - v100;
  uint64_t v101 = MEMORY[0x1F4188790](v99);
  uint64_t v553 = (uint64_t)&v505 - v102;
  uint64_t v103 = MEMORY[0x1F4188790](v101);
  uint64_t v526 = (uint64_t)&v505 - v104;
  uint64_t v105 = MEMORY[0x1F4188790](v103);
  uint64_t v532 = (uint64_t)&v505 - v106;
  uint64_t v107 = MEMORY[0x1F4188790](v105);
  uint64_t v525 = (uint64_t)&v505 - v108;
  uint64_t v109 = MEMORY[0x1F4188790](v107);
  uint64_t v552 = (uint64_t)&v505 - v110;
  uint64_t v111 = MEMORY[0x1F4188790](v109);
  uint64_t v524 = (uint64_t)&v505 - v112;
  uint64_t v113 = MEMORY[0x1F4188790](v111);
  uint64_t v551 = (uint64_t)&v505 - v114;
  uint64_t v115 = a2[2];
  uint64_t v568 = *(void *)(v115 - 8);
  MEMORY[0x1F4188790](v113);
  v574 = (char *)&v505 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = a2[10];
  uint64_t v118 = a2[11];
  uint64_t v119 = a2[12];
  uint64_t v120 = a2[13];
  uint64_t v122 = a2[14];
  uint64_t v121 = a2[15];
  uint64_t v123 = a2[16];
  uint64_t v124 = a2[17];
  v594[0] = v115;
  v594[1] = v589;
  v594[2] = v586;
  v594[3] = v590;
  v594[4] = v591;
  v594[5] = v596;
  v594[6] = v587;
  v594[7] = v588;
  uint64_t v563 = v117;
  v594[8] = v117;
  v594[9] = v118;
  v594[10] = v119;
  v594[11] = v120;
  v594[12] = v122;
  v594[13] = v121;
  v594[14] = v123;
  uint64_t v595 = v124;
  uint64_t v566 = type metadata accessor for TaggedValue_8.TaggedEnum();
  uint64_t v565 = *(void *)(v566 - 8);
  MEMORY[0x1F4188790](v566);
  v564 = (char *)&v505 - v125;
  uint64_t v126 = v584;
  uint64_t result = sub_1C3F6DD10();
  if (v126) {
    return result;
  }
  uint64_t v505 = v118;
  uint64_t v506 = v119;
  uint64_t v507 = v120;
  uint64_t v508 = v122;
  uint64_t v509 = v121;
  uint64_t v510 = v123;
  uint64_t v511 = v124;
  uint64_t v512 = v115;
  uint64_t v584 = result;
  uint64_t v128 = v564;
  (*(void (**)(char *, uint64_t, uint64_t))(v565 + 16))(v564, v567, v566);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, char *, uint64_t, uint64_t, char *, char *))(v558 + 32))(v575, v128, v589, v568, v574, v576);
      uint64_t v135 = v584 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v136 = *(void *)(v135 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v137 = v136;
      uint64_t v138 = v533;
      sub_1C3F970C4(v137, v533, &qword_1EBBBF8A0);
      uint64_t v139 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v140 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 48);
      if (v140(v138, 1, v139) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v138, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v192 = v552;
          sub_1C3F8ADE0(v138, v552, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v193 = v582;
          goto LABEL_51;
        }
        swift_retain();
        sub_1C3F8B288(v138, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v192 = v552;
      sub_1C4496888();
      uint64_t v193 = v582;
      uint64_t v238 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v193 = v582;
      }
      *(void *)(v192 + v238) = qword_1EA39AF60;
      swift_retain();
LABEL_51:
      uint64_t v239 = *(int *)(v193 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v240 = swift_retain();
        uint64_t v241 = sub_1C4400A40(v240);
        uint64_t v192 = v552;
        *(void *)(v552 + v239) = v241;
        swift_release();
      }
      uint64_t v242 = *(void *)(v192 + v239);
      swift_beginAccess();
      *(void *)(v242 + 16) = 1;
      sub_1C43F0970(v192);
      uint64_t v243 = swift_endAccess();
      MEMORY[0x1F4188790](v243);
      uint64_t v244 = v589;
      *(&v505 - 18) = v512;
      *(&v505 - 17) = v244;
      uint64_t v245 = v590;
      *(&v505 - 16) = v586;
      *(&v505 - 15) = v245;
      uint64_t v246 = v596;
      *(&v505 - 14) = v591;
      *(&v505 - 13) = v246;
      uint64_t v247 = v588;
      *(&v505 - 12) = v587;
      *(&v505 - 11) = v247;
      uint64_t v248 = v505;
      *(&v505 - 10) = v563;
      *(&v505 - 9) = v248;
      uint64_t v249 = v507;
      *(&v505 - 8) = v506;
      *(&v505 - 7) = v249;
      uint64_t v250 = v509;
      *(&v505 - 6) = v508;
      *(&v505 - 5) = v250;
      uint64_t v251 = v511;
      *(&v505 - 4) = v510;
      *(&v505 - 3) = v251;
      uint64_t v252 = v585;
      *(&v505 - 2) = (uint64_t)v575;
      *(&v505 - 1) = v252;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2DF0, v543);
      v581 = 0;
      swift_beginAccess();
      uint64_t v253 = v583;
      uint64_t v254 = *(void *)(v135 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v255 = v514;
      sub_1C3F970C4(v254, v514, &qword_1EBBBF8A0);
      unsigned int v256 = v140(v255, 1, v139);
      uint64_t v257 = v558;
      if (v256 == 1)
      {
        sub_1C3F962E0(v255, &qword_1EBBBF8A0);
        uint64_t v258 = v562;
        uint64_t v259 = v561;
        uint64_t v260 = v560;
        uint64_t v261 = v525;
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v258 = v562;
        uint64_t v259 = v561;
        uint64_t v260 = v560;
        uint64_t v261 = v525;
        if (EnumCaseMultiPayload == 11)
        {
          sub_1C3F8ADE0(v255, v525, type metadata accessor for Proto_TaggedValue);
          uint64_t v415 = v582;
          goto LABEL_149;
        }
        sub_1C3F8B288(v255, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v415 = v582;
      uint64_t v438 = v261;
      uint64_t v439 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v415 = v582;
      }
      *(void *)(v438 + v439) = qword_1EA39AF60;
      swift_retain();
      uint64_t v261 = v438;
LABEL_149:
      uint64_t v440 = *(int *)(v415 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v441 = swift_retain();
        uint64_t v442 = sub_1C4400A40(v441);
        uint64_t v261 = v525;
        *(void *)(v525 + v440) = v442;
        swift_release();
      }
      uint64_t v443 = v261;
      uint64_t v444 = *(void *)(v261 + v440);
      sub_1C3F8ADE0(v543, v259, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v260 + 56))(v259, 0, 1, v253);
      sub_1C4124B88(v259, v258);
      uint64_t v445 = v444
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v258, v445);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v443);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v257 + 8))(v575, v589);
    case 2u:
      (*(void (**)(char *, char *, uint64_t, uint64_t, char *))(v559 + 32))(v576, v128, v586, v568, v574);
      uint64_t v141 = v584 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v142 = *(void *)(v141 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v143 = v534;
      sub_1C3F970C4(v142, v534, &qword_1EBBBF8A0);
      uint64_t v144 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v145 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v144 - 8) + 48);
      if (v145(v143, 1, v144) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v143, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v194 = v143;
          uint64_t v195 = v532;
          sub_1C3F8ADE0(v194, v532, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v196 = v582;
          goto LABEL_59;
        }
        swift_retain();
        sub_1C3F8B288(v143, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v195 = v532;
      sub_1C4496888();
      uint64_t v196 = v582;
      uint64_t v262 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v196 = v582;
      }
      *(void *)(v195 + v262) = qword_1EA39AF60;
      swift_retain();
LABEL_59:
      uint64_t v263 = *(int *)(v196 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v264 = swift_retain();
        *(void *)(v195 + v263) = sub_1C4400A40(v264);
        swift_release();
      }
      uint64_t v265 = *(void *)(v195 + v263);
      swift_beginAccess();
      *(void *)(v265 + 16) = 2;
      sub_1C43F0970(v195);
      uint64_t v266 = swift_endAccess();
      MEMORY[0x1F4188790](v266);
      uint64_t v267 = v589;
      *(&v505 - 18) = v512;
      *(&v505 - 17) = v267;
      uint64_t v268 = v586;
      uint64_t v269 = v590;
      *(&v505 - 16) = v586;
      *(&v505 - 15) = v269;
      uint64_t v270 = v596;
      *(&v505 - 14) = v591;
      *(&v505 - 13) = v270;
      uint64_t v271 = v588;
      *(&v505 - 12) = v587;
      *(&v505 - 11) = v271;
      uint64_t v272 = v505;
      *(&v505 - 10) = v563;
      *(&v505 - 9) = v272;
      uint64_t v273 = v507;
      *(&v505 - 8) = v506;
      *(&v505 - 7) = v273;
      uint64_t v274 = v509;
      *(&v505 - 6) = v508;
      *(&v505 - 5) = v274;
      uint64_t v275 = v511;
      *(&v505 - 4) = v510;
      *(&v505 - 3) = v275;
      uint64_t v276 = v585;
      *(&v505 - 2) = (uint64_t)v576;
      *(&v505 - 1) = v276;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2DA8, v544);
      swift_beginAccess();
      uint64_t v277 = *(void *)(v141 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v278 = v515;
      sub_1C3F970C4(v277, v515, &qword_1EBBBF8A0);
      unsigned int v279 = v145(v278, 1, v144);
      uint64_t v280 = v559;
      if (v279 == 1)
      {
        sub_1C3F962E0(v278, &qword_1EBBBF8A0);
        uint64_t v281 = v560;
        uint64_t v282 = v583;
        uint64_t v283 = v526;
      }
      else
      {
        int v416 = swift_getEnumCaseMultiPayload();
        uint64_t v281 = v560;
        uint64_t v283 = v526;
        if (v416 == 11)
        {
          sub_1C3F8ADE0(v278, v526, type metadata accessor for Proto_TaggedValue);
          uint64_t v282 = v583;
          uint64_t v417 = v582;
          goto LABEL_156;
        }
        sub_1C3F8B288(v278, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        uint64_t v282 = v583;
      }
      sub_1C4496888();
      uint64_t v417 = v582;
      uint64_t v446 = v283;
      uint64_t v447 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v417 = v582;
      }
      *(void *)(v446 + v447) = qword_1EA39AF60;
      swift_retain();
      uint64_t v283 = v446;
LABEL_156:
      v581 = 0;
      uint64_t v448 = *(int *)(v417 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v449 = swift_retain();
        uint64_t v283 = v526;
        *(void *)(v283 + v448) = sub_1C4400A40(v449);
        swift_release();
      }
      uint64_t v450 = v283;
      uint64_t v451 = *(void *)(v283 + v448);
      uint64_t v452 = v561;
      sub_1C3F8ADE0(v544, v561, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v281 + 56))(v452, 0, 1, v282);
      uint64_t v453 = v562;
      sub_1C4124B88(v452, v562);
      uint64_t v454 = v451
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v453, v454);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v450);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v280 + 8))(v576, v268);
    case 3u:
      (*(void (**)(char *, char *, uint64_t, uint64_t, char *, char *))(v569 + 32))(v577, v128, v590, v568, v574, v576);
      uint64_t v146 = v584 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v147 = *(void *)(v146 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v148 = v147;
      uint64_t v149 = v535;
      sub_1C3F970C4(v148, v535, &qword_1EBBBF8A0);
      uint64_t v150 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v151 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v150 - 8) + 48);
      if (v151(v149, 1, v150) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v149, &qword_1EBBBF8A0);
        uint64_t v152 = v588;
      }
      else
      {
        int v197 = swift_getEnumCaseMultiPayload();
        uint64_t v152 = v588;
        if (v197 == 11)
        {
          uint64_t v198 = v553;
          sub_1C3F8ADE0(v149, v553, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v199 = v582;
          goto LABEL_67;
        }
        swift_retain();
        sub_1C3F8B288(v149, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v198 = v553;
      sub_1C4496888();
      uint64_t v199 = v582;
      uint64_t v284 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v199 = v582;
      }
      *(void *)(v198 + v284) = qword_1EA39AF60;
      swift_retain();
LABEL_67:
      uint64_t v285 = *(int *)(v199 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v286 = swift_retain();
        uint64_t v287 = sub_1C4400A40(v286);
        uint64_t v198 = v553;
        *(void *)(v553 + v285) = v287;
        swift_release();
      }
      uint64_t v288 = *(void *)(v198 + v285);
      swift_beginAccess();
      *(void *)(v288 + 16) = 3;
      sub_1C43F0970(v198);
      uint64_t v289 = swift_endAccess();
      MEMORY[0x1F4188790](v289);
      uint64_t v290 = v589;
      *(&v505 - 18) = v512;
      *(&v505 - 17) = v290;
      uint64_t v291 = v590;
      *(&v505 - 16) = v586;
      *(&v505 - 15) = v291;
      uint64_t v292 = v596;
      *(&v505 - 14) = v591;
      *(&v505 - 13) = v292;
      *(&v505 - 12) = v587;
      *(&v505 - 11) = v152;
      uint64_t v293 = v505;
      *(&v505 - 10) = v563;
      *(&v505 - 9) = v293;
      uint64_t v294 = v507;
      *(&v505 - 8) = v506;
      *(&v505 - 7) = v294;
      uint64_t v295 = v509;
      *(&v505 - 6) = v508;
      *(&v505 - 5) = v295;
      uint64_t v296 = v511;
      *(&v505 - 4) = v510;
      *(&v505 - 3) = v296;
      uint64_t v297 = v585;
      *(&v505 - 2) = (uint64_t)v577;
      *(&v505 - 1) = v297;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2D60, v545);
      v581 = 0;
      swift_beginAccess();
      uint64_t v298 = v583;
      uint64_t v299 = *(void *)(v146 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v300 = v516;
      sub_1C3F970C4(v299, v516, &qword_1EBBBF8A0);
      if (v151(v300, 1, v150) == 1)
      {
        sub_1C3F962E0(v300, &qword_1EBBBF8A0);
        uint64_t v301 = v562;
        uint64_t v302 = v561;
        uint64_t v303 = v560;
        uint64_t v304 = v590;
        uint64_t v305 = v527;
      }
      else
      {
        int v418 = swift_getEnumCaseMultiPayload();
        uint64_t v301 = v562;
        uint64_t v302 = v561;
        uint64_t v303 = v560;
        uint64_t v304 = v590;
        uint64_t v305 = v527;
        if (v418 == 11)
        {
          sub_1C3F8ADE0(v300, v527, type metadata accessor for Proto_TaggedValue);
          uint64_t v419 = v582;
          goto LABEL_163;
        }
        sub_1C3F8B288(v300, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v419 = v582;
      uint64_t v455 = v305;
      uint64_t v456 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v419 = v582;
      }
      *(void *)(v455 + v456) = qword_1EA39AF60;
      swift_retain();
      uint64_t v305 = v455;
LABEL_163:
      uint64_t v457 = *(int *)(v419 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v458 = swift_retain();
        uint64_t v459 = sub_1C4400A40(v458);
        uint64_t v305 = v527;
        *(void *)(v527 + v457) = v459;
        swift_release();
      }
      uint64_t v460 = v305;
      uint64_t v461 = *(void *)(v305 + v457);
      sub_1C3F8ADE0(v545, v302, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v303 + 56))(v302, 0, 1, v298);
      sub_1C4124B88(v302, v301);
      uint64_t v462 = v461
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v301, v462);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v460);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v569 + 8))(v577, v304);
    case 4u:
      v581 = 0;
      (*(void (**)(char *, char *, uint64_t, uint64_t, char *, char *))(v570 + 32))(v578, v128, v591, v568, v574, v576);
      uint64_t v153 = v584 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v154 = *(void *)(v153 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v155 = v154;
      uint64_t v156 = v536;
      sub_1C3F970C4(v155, v536, &qword_1EBBBF8A0);
      uint64_t v157 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v158 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v157 - 8) + 48);
      if (v158(v156, 1, v157) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v156, &qword_1EBBBF8A0);
        uint64_t v159 = v585;
      }
      else
      {
        int v200 = swift_getEnumCaseMultiPayload();
        uint64_t v159 = v585;
        if (v200 == 11)
        {
          uint64_t v201 = v554;
          sub_1C3F8ADE0(v156, v554, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v202 = v582;
          goto LABEL_75;
        }
        swift_retain();
        sub_1C3F8B288(v156, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v201 = v554;
      sub_1C4496888();
      uint64_t v202 = v582;
      uint64_t v306 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v202 = v582;
      }
      *(void *)(v201 + v306) = qword_1EA39AF60;
      swift_retain();
LABEL_75:
      uint64_t v307 = *(int *)(v202 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v308 = swift_retain();
        uint64_t v309 = sub_1C4400A40(v308);
        uint64_t v201 = v554;
        *(void *)(v554 + v307) = v309;
        swift_release();
      }
      uint64_t v310 = *(void *)(v201 + v307);
      swift_beginAccess();
      *(void *)(v310 + 16) = 4;
      sub_1C43F0970(v201);
      uint64_t v311 = swift_endAccess();
      MEMORY[0x1F4188790](v311);
      uint64_t v312 = v589;
      *(&v505 - 18) = v512;
      *(&v505 - 17) = v312;
      uint64_t v313 = v590;
      *(&v505 - 16) = v586;
      *(&v505 - 15) = v313;
      uint64_t v314 = v591;
      uint64_t v315 = v596;
      *(&v505 - 14) = v591;
      *(&v505 - 13) = v315;
      uint64_t v316 = v588;
      *(&v505 - 12) = v587;
      *(&v505 - 11) = v316;
      uint64_t v317 = v505;
      *(&v505 - 10) = v563;
      *(&v505 - 9) = v317;
      uint64_t v318 = v507;
      *(&v505 - 8) = v506;
      *(&v505 - 7) = v318;
      uint64_t v319 = v509;
      *(&v505 - 6) = v508;
      *(&v505 - 5) = v319;
      uint64_t v320 = v511;
      *(&v505 - 4) = v510;
      *(&v505 - 3) = v320;
      uint64_t v321 = v578;
      *(&v505 - 2) = (uint64_t)v578;
      *(&v505 - 1) = v159;
      uint64_t v322 = v581;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2D18, v547);
      if (v322)
      {
        swift_release();
        uint64_t v323 = &v592;
        return (*(uint64_t (**)(char *, uint64_t))(*((void *)v323 - 32) + 8))(v321, v314);
      }
      v581 = 0;
      swift_beginAccess();
      uint64_t v324 = v583;
      uint64_t v325 = *(void *)(v153 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v326 = v517;
      sub_1C3F970C4(v325, v517, &qword_1EBBBF8A0);
      if (v158(v326, 1, v157) == 1)
      {
        sub_1C3F962E0(v326, &qword_1EBBBF8A0);
        uint64_t v327 = v562;
        uint64_t v328 = v561;
        uint64_t v329 = v560;
        uint64_t v330 = v547;
        uint64_t v331 = v528;
      }
      else
      {
        int v420 = swift_getEnumCaseMultiPayload();
        uint64_t v327 = v562;
        uint64_t v328 = v561;
        uint64_t v329 = v560;
        uint64_t v330 = v547;
        uint64_t v331 = v528;
        if (v420 == 11)
        {
          sub_1C3F8ADE0(v326, v528, type metadata accessor for Proto_TaggedValue);
          uint64_t v421 = v582;
LABEL_170:
          uint64_t v465 = *(int *)(v421 + 20);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for Proto_TaggedValue._StorageClass(0);
            swift_allocObject();
            uint64_t v466 = swift_retain();
            uint64_t v467 = sub_1C4400A40(v466);
            uint64_t v331 = v528;
            *(void *)(v528 + v465) = v467;
            swift_release();
          }
          uint64_t v468 = v331;
          uint64_t v469 = *(void *)(v331 + v465);
          sub_1C3F8ADE0(v330, v328, type metadata accessor for Proto_Value);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v329 + 56))(v328, 0, 1, v324);
          sub_1C4124B88(v328, v327);
          uint64_t v470 = v469
               + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
          swift_beginAccess();
          swift_retain();
          sub_1C4124BF0(v327, v470);
          swift_endAccess();
          swift_release();
          sub_1C43F0970(v468);
          swift_endAccess();
          swift_release();
          uint64_t v471 = *(uint64_t (**)(char *, void))(v570 + 8);
          uint64_t v472 = v578;
          uint64_t v473 = &v597;
          return v471(v472, *(v473 - 32));
        }
        sub_1C3F8B288(v326, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v421 = v582;
      uint64_t v463 = v331;
      uint64_t v464 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v421 = v582;
      }
      *(void *)(v463 + v464) = qword_1EA39AF60;
      swift_retain();
      uint64_t v331 = v463;
      goto LABEL_170;
    case 5u:
      v581 = 0;
      (*(void (**)(char *, char *, uint64_t, uint64_t, char *, char *))(v571 + 32))(v579, v128, v596, v568, v574, v576);
      uint64_t v160 = v584 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v161 = *(void *)(v160 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v162 = v161;
      uint64_t v163 = v537;
      sub_1C3F970C4(v162, v537, &qword_1EBBBF8A0);
      uint64_t v164 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v165 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v164 - 8) + 48);
      if (v165(v163, 1, v164) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v163, &qword_1EBBBF8A0);
        uint64_t v166 = v585;
      }
      else
      {
        int v203 = swift_getEnumCaseMultiPayload();
        uint64_t v166 = v585;
        if (v203 == 11)
        {
          uint64_t v204 = v555;
          sub_1C3F8ADE0(v163, v555, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v205 = v582;
          goto LABEL_85;
        }
        swift_retain();
        sub_1C3F8B288(v163, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v204 = v555;
      sub_1C4496888();
      uint64_t v205 = v582;
      uint64_t v332 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v205 = v582;
      }
      *(void *)(v204 + v332) = qword_1EA39AF60;
      swift_retain();
LABEL_85:
      uint64_t v333 = v591;
      uint64_t v334 = *(int *)(v205 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v335 = swift_retain();
        uint64_t v336 = sub_1C4400A40(v335);
        uint64_t v204 = v555;
        *(void *)(v555 + v334) = v336;
        swift_release();
      }
      uint64_t v337 = *(void *)(v204 + v334);
      swift_beginAccess();
      *(void *)(v337 + 16) = 5;
      sub_1C43F0970(v204);
      uint64_t v338 = swift_endAccess();
      MEMORY[0x1F4188790](v338);
      uint64_t v339 = v589;
      *(&v505 - 18) = v512;
      *(&v505 - 17) = v339;
      uint64_t v340 = v590;
      *(&v505 - 16) = v586;
      *(&v505 - 15) = v340;
      *(&v505 - 14) = v333;
      uint64_t v314 = v596;
      uint64_t v341 = v587;
      *(&v505 - 13) = v596;
      *(&v505 - 12) = v341;
      uint64_t v342 = v563;
      *(&v505 - 11) = v588;
      *(&v505 - 10) = v342;
      uint64_t v343 = v506;
      *(&v505 - 9) = v505;
      *(&v505 - 8) = v343;
      uint64_t v344 = v508;
      *(&v505 - 7) = v507;
      *(&v505 - 6) = v344;
      uint64_t v345 = v510;
      *(&v505 - 5) = v509;
      *(&v505 - 4) = v345;
      uint64_t v321 = v579;
      *(&v505 - 3) = v511;
      *(&v505 - 2) = (uint64_t)v321;
      *(&v505 - 1) = v166;
      uint64_t v346 = v581;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2CD0, v548);
      if (v346)
      {
        swift_release();
        uint64_t v323 = &v593;
        return (*(uint64_t (**)(char *, uint64_t))(*((void *)v323 - 32) + 8))(v321, v314);
      }
      v581 = 0;
      swift_beginAccess();
      uint64_t v347 = v583;
      uint64_t v348 = *(void *)(v160 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v349 = v518;
      sub_1C3F970C4(v348, v518, &qword_1EBBBF8A0);
      if (v165(v349, 1, v164) == 1)
      {
        sub_1C3F962E0(v349, &qword_1EBBBF8A0);
        uint64_t v350 = v562;
        uint64_t v351 = v561;
        uint64_t v352 = v560;
        uint64_t v353 = v548;
        uint64_t v354 = v529;
      }
      else
      {
        int v422 = swift_getEnumCaseMultiPayload();
        uint64_t v350 = v562;
        uint64_t v351 = v561;
        uint64_t v352 = v560;
        uint64_t v353 = v548;
        uint64_t v354 = v529;
        if (v422 == 11)
        {
          sub_1C3F8ADE0(v349, v529, type metadata accessor for Proto_TaggedValue);
          uint64_t v423 = v582;
          goto LABEL_177;
        }
        sub_1C3F8B288(v349, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v423 = v582;
      uint64_t v474 = v354;
      uint64_t v475 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v423 = v582;
      }
      *(void *)(v474 + v475) = qword_1EA39AF60;
      swift_retain();
      uint64_t v354 = v474;
LABEL_177:
      uint64_t v476 = *(int *)(v423 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v477 = swift_retain();
        uint64_t v478 = sub_1C4400A40(v477);
        uint64_t v354 = v529;
        *(void *)(v529 + v476) = v478;
        swift_release();
      }
      uint64_t v479 = v354;
      uint64_t v480 = *(void *)(v354 + v476);
      sub_1C3F8ADE0(v353, v351, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v352 + 56))(v351, 0, 1, v347);
      sub_1C4124B88(v351, v350);
      uint64_t v481 = v480
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v350, v481);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v479);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v571 + 8))(v579, v596);
    case 6u:
      v581 = 0;
      (*(void (**)(char *, char *, uint64_t, uint64_t, char *, char *))(v572 + 32))(v580, v128, v587, v568, v574, v576);
      uint64_t v167 = v584 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v168 = *(void *)(v167 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v169 = v168;
      uint64_t v170 = v539;
      sub_1C3F970C4(v169, v539, &qword_1EBBBF8A0);
      uint64_t v171 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v172 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v171 - 8) + 48);
      if (v172(v170, 1, v171) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v170, &qword_1EBBBF8A0);
        uint64_t v173 = v585;
      }
      else
      {
        int v206 = swift_getEnumCaseMultiPayload();
        uint64_t v173 = v585;
        if (v206 == 11)
        {
          uint64_t v207 = v556;
          sub_1C3F8ADE0(v170, v556, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v208 = v582;
          goto LABEL_95;
        }
        swift_retain();
        sub_1C3F8B288(v170, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v207 = v556;
      sub_1C4496888();
      uint64_t v208 = v582;
      uint64_t v355 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v208 = v582;
      }
      *(void *)(v207 + v355) = qword_1EA39AF60;
      swift_retain();
LABEL_95:
      uint64_t v356 = v596;
      uint64_t v357 = *(int *)(v208 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v358 = swift_retain();
        uint64_t v359 = sub_1C4400A40(v358);
        uint64_t v207 = v556;
        *(void *)(v556 + v357) = v359;
        swift_release();
      }
      uint64_t v360 = *(void *)(v207 + v357);
      swift_beginAccess();
      *(void *)(v360 + 16) = 6;
      sub_1C43F0970(v207);
      uint64_t v361 = swift_endAccess();
      MEMORY[0x1F4188790](v361);
      uint64_t v362 = v589;
      *(&v505 - 18) = v512;
      *(&v505 - 17) = v362;
      uint64_t v363 = v590;
      *(&v505 - 16) = v586;
      *(&v505 - 15) = v363;
      *(&v505 - 14) = v591;
      *(&v505 - 13) = v356;
      uint64_t v314 = v587;
      uint64_t v364 = v588;
      *(&v505 - 12) = v587;
      *(&v505 - 11) = v364;
      uint64_t v365 = v505;
      *(&v505 - 10) = v563;
      *(&v505 - 9) = v365;
      uint64_t v366 = v507;
      *(&v505 - 8) = v506;
      *(&v505 - 7) = v366;
      uint64_t v367 = v509;
      *(&v505 - 6) = v508;
      *(&v505 - 5) = v367;
      uint64_t v368 = v511;
      *(&v505 - 4) = v510;
      *(&v505 - 3) = v368;
      uint64_t v321 = v580;
      *(&v505 - 2) = (uint64_t)v580;
      *(&v505 - 1) = v173;
      uint64_t v369 = v581;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2C88, v549);
      if (!v369)
      {
        v581 = 0;
        swift_beginAccess();
        uint64_t v370 = v583;
        uint64_t v371 = *(void *)(v167 + *(int *)(v583 + 20))
             + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
        swift_beginAccess();
        uint64_t v372 = v520;
        sub_1C3F970C4(v371, v520, &qword_1EBBBF8A0);
        if (v172(v372, 1, v171) == 1)
        {
          sub_1C3F962E0(v372, &qword_1EBBBF8A0);
          uint64_t v373 = v562;
          uint64_t v374 = v561;
          uint64_t v375 = v560;
          uint64_t v376 = v549;
          uint64_t v377 = v530;
        }
        else
        {
          int v424 = swift_getEnumCaseMultiPayload();
          uint64_t v373 = v562;
          uint64_t v374 = v561;
          uint64_t v375 = v560;
          uint64_t v376 = v549;
          uint64_t v377 = v530;
          if (v424 == 11)
          {
            sub_1C3F8ADE0(v372, v530, type metadata accessor for Proto_TaggedValue);
            uint64_t v425 = v582;
            goto LABEL_184;
          }
          sub_1C3F8B288(v372, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        }
        sub_1C4496888();
        uint64_t v425 = v582;
        uint64_t v482 = v377;
        uint64_t v483 = *(int *)(v582 + 20);
        if (qword_1EA39AF70 != -1)
        {
          swift_once();
          uint64_t v425 = v582;
        }
        *(void *)(v482 + v483) = qword_1EA39AF60;
        swift_retain();
        uint64_t v377 = v482;
LABEL_184:
        uint64_t v484 = *(int *)(v425 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for Proto_TaggedValue._StorageClass(0);
          swift_allocObject();
          uint64_t v485 = swift_retain();
          uint64_t v486 = sub_1C4400A40(v485);
          uint64_t v377 = v530;
          *(void *)(v530 + v484) = v486;
          swift_release();
        }
        uint64_t v487 = v377;
        uint64_t v488 = *(void *)(v377 + v484);
        sub_1C3F8ADE0(v376, v374, type metadata accessor for Proto_Value);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v375 + 56))(v374, 0, 1, v370);
        sub_1C4124B88(v374, v373);
        uint64_t v489 = v488
             + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
        swift_beginAccess();
        swift_retain();
        sub_1C4124BF0(v373, v489);
        swift_endAccess();
        swift_release();
        sub_1C43F0970(v487);
        swift_endAccess();
        swift_release();
        uint64_t v471 = *(uint64_t (**)(char *, void))(v572 + 8);
        uint64_t v472 = v580;
        uint64_t v473 = &v595;
        return v471(v472, *(v473 - 32));
      }
      swift_release();
      uint64_t v323 = (char *)v594;
      return (*(uint64_t (**)(char *, uint64_t))(*((void *)v323 - 32) + 8))(v321, v314);
    case 7u:
      (*(void (**)(char *, char *, uint64_t, uint64_t, char *, char *))(v573 + 32))(v581, v128, v588, v568, v574, v576);
      uint64_t v174 = v584 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v175 = *(void *)(v174 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v176 = v540;
      sub_1C3F970C4(v175, v540, &qword_1EBBBF8A0);
      uint64_t v177 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v178 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v177 - 8) + 48);
      int v179 = v178(v176, 1, v177);
      v580 = (char *)v178;
      if (v179 == 1)
      {
        swift_retain();
        sub_1C3F962E0(v176, &qword_1EBBBF8A0);
        uint64_t v180 = v585;
        uint64_t v181 = v587;
      }
      else
      {
        int v209 = swift_getEnumCaseMultiPayload();
        uint64_t v180 = v585;
        uint64_t v181 = v587;
        if (v209 == 11)
        {
          uint64_t v210 = v176;
          uint64_t v211 = v538;
          sub_1C3F8ADE0(v210, v538, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v212 = v582;
          goto LABEL_106;
        }
        swift_retain();
        sub_1C3F8B288(v176, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v211 = v538;
      sub_1C4496888();
      uint64_t v212 = v582;
      uint64_t v378 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v212 = v582;
      }
      *(void *)(v211 + v378) = qword_1EA39AF60;
      swift_retain();
LABEL_106:
      uint64_t v379 = *(int *)(v212 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v380 = swift_retain();
        *(void *)(v211 + v379) = sub_1C4400A40(v380);
        swift_release();
      }
      uint64_t v381 = *(void *)(v211 + v379);
      swift_beginAccess();
      *(void *)(v381 + 16) = 7;
      sub_1C43F0970(v211);
      uint64_t v382 = swift_endAccess();
      MEMORY[0x1F4188790](v382);
      uint64_t v383 = v589;
      *(&v505 - 18) = v512;
      *(&v505 - 17) = v383;
      uint64_t v384 = v590;
      *(&v505 - 16) = v586;
      *(&v505 - 15) = v384;
      uint64_t v385 = v596;
      *(&v505 - 14) = v591;
      *(&v505 - 13) = v385;
      *(&v505 - 12) = v181;
      uint64_t v386 = v563;
      *(&v505 - 11) = v588;
      *(&v505 - 10) = v386;
      uint64_t v387 = v506;
      *(&v505 - 9) = v505;
      *(&v505 - 8) = v387;
      uint64_t v388 = v508;
      *(&v505 - 7) = v507;
      *(&v505 - 6) = v388;
      uint64_t v389 = v510;
      *(&v505 - 5) = v509;
      *(&v505 - 4) = v389;
      uint64_t v390 = v581;
      *(&v505 - 3) = v511;
      *(&v505 - 2) = (uint64_t)v390;
      *(&v505 - 1) = v180;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2C40, v550);
      swift_beginAccess();
      uint64_t v391 = v583;
      uint64_t v392 = *(void *)(v174 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v393 = v522;
      sub_1C3F970C4(v392, v522, &qword_1EBBBF8A0);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v580)(v393, 1, v177) == 1)
      {
        sub_1C3F962E0(v393, &qword_1EBBBF8A0);
        uint64_t v394 = v561;
        uint64_t v395 = v560;
        uint64_t v396 = v550;
        uint64_t v397 = v523;
      }
      else
      {
        int v426 = swift_getEnumCaseMultiPayload();
        uint64_t v394 = v561;
        uint64_t v395 = v560;
        uint64_t v396 = v550;
        uint64_t v397 = v523;
        if (v426 == 11)
        {
          sub_1C3F8ADE0(v393, v523, type metadata accessor for Proto_TaggedValue);
          uint64_t v427 = v582;
          goto LABEL_192;
        }
        sub_1C3F8B288(v393, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v427 = v582;
      uint64_t v490 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v427 = v582;
      }
      *(void *)(v397 + v490) = qword_1EA39AF60;
      swift_retain();
LABEL_192:
      uint64_t v491 = *(int *)(v427 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v492 = swift_retain();
        uint64_t v493 = sub_1C4400A40(v492);
        uint64_t v397 = v523;
        *(void *)(v523 + v491) = v493;
        swift_release();
      }
      uint64_t v494 = *(void *)(v397 + v491);
      sub_1C3F8ADE0(v396, v394, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v395 + 56))(v394, 0, 1, v391);
      uint64_t v495 = v562;
      sub_1C4124B88(v394, v562);
      uint64_t v496 = v397;
      uint64_t v497 = v494
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v495, v497);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v496);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v573 + 8))(v581, v588);
    case 8u:
      v581 = 0;
      uint64_t v183 = *(void *)v128;
      uint64_t v182 = *((void *)v128 + 1);
      uint64_t v184 = v584 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v185 = *(void *)(v184 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v186 = v185;
      uint64_t v187 = v541;
      sub_1C3F970C4(v186, v541, &qword_1EBBBF8A0);
      uint64_t v188 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v189 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v188 - 8) + 48);
      if (v189(v187, 1, v188) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v187, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v213 = v557;
          sub_1C3F8ADE0(v187, v557, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v214 = v582;
          goto LABEL_114;
        }
        swift_retain();
        sub_1C3F8B288(v187, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v398 = v557;
      sub_1C4496888();
      uint64_t v214 = v582;
      uint64_t v399 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v214 = v582;
      }
      *(void *)(v398 + v399) = qword_1EA39AF60;
      swift_retain();
      uint64_t v213 = v398;
LABEL_114:
      uint64_t v400 = *(int *)(v214 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v401 = swift_retain();
        uint64_t v402 = sub_1C4400A40(v401);
        uint64_t v213 = v557;
        *(void *)(v557 + v400) = v402;
        swift_release();
      }
      uint64_t v403 = *(void *)(v213 + v400);
      swift_beginAccess();
      *(void *)(v403 + 16) = v183;
      sub_1C43F0970(v213);
      swift_endAccess();
      swift_retain();
      uint64_t v404 = swift_retain();
      uint64_t v405 = v581;
      sub_1C400B83C(v404, v182, v404, v546);
      if (v405)
      {
        swift_release();
        return swift_release();
      }
      swift_beginAccess();
      uint64_t v406 = v583;
      uint64_t v407 = *(void *)(v184 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v408 = v407;
      uint64_t v409 = v519;
      sub_1C3F970C4(v408, v519, &qword_1EBBBF8A0);
      if (v189(v409, 1, v188) == 1)
      {
        sub_1C3F962E0(v409, &qword_1EBBBF8A0);
        uint64_t v410 = v560;
        uint64_t v411 = v521;
      }
      else
      {
        int v428 = swift_getEnumCaseMultiPayload();
        uint64_t v410 = v560;
        uint64_t v411 = v521;
        if (v428 == 11)
        {
          sub_1C3F8ADE0(v409, v521, type metadata accessor for Proto_TaggedValue);
          uint64_t v429 = v582;
          goto LABEL_199;
        }
        sub_1C3F8B288(v409, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v429 = v582;
      uint64_t v498 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v429 = v582;
      }
      *(void *)(v411 + v498) = qword_1EA39AF60;
      swift_retain();
LABEL_199:
      uint64_t v499 = *(int *)(v429 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v500 = swift_retain();
        *(void *)(v411 + v499) = sub_1C4400A40(v500);
        swift_release();
      }
      uint64_t v501 = *(void *)(v411 + v499);
      uint64_t v502 = v561;
      sub_1C3F8ADE0(v546, v561, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v410 + 56))(v502, 0, 1, v406);
      uint64_t v503 = v562;
      sub_1C4124B88(v502, v562);
      uint64_t v504 = v501
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v503, v504);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v411);
      swift_endAccess();
      swift_release();
      return swift_release();
    default:
      (*(void (**)(char *, char *, uint64_t))(v568 + 32))(v574, v128, v512);
      uint64_t v129 = v584 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v130 = *(void *)(v129 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v131 = v130;
      uint64_t v132 = v531;
      sub_1C3F970C4(v131, v531, &qword_1EBBBF8A0);
      uint64_t v133 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v134 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v133 - 8) + 48);
      if (v134(v132, 1, v133) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v132, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v190 = v551;
          sub_1C3F8ADE0(v132, v551, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v191 = v582;
          goto LABEL_43;
        }
        swift_retain();
        sub_1C3F8B288(v132, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v190 = v551;
      sub_1C4496888();
      uint64_t v191 = v582;
      uint64_t v215 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v191 = v582;
      }
      *(void *)(v190 + v215) = qword_1EA39AF60;
      swift_retain();
LABEL_43:
      uint64_t v216 = *(int *)(v191 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v217 = swift_retain();
        uint64_t v218 = sub_1C4400A40(v217);
        uint64_t v190 = v551;
        *(void *)(v551 + v216) = v218;
        swift_release();
      }
      uint64_t v219 = *(void *)(v190 + v216);
      swift_beginAccess();
      *(void *)(v219 + 16) = 0;
      sub_1C43F0970(v190);
      uint64_t v220 = swift_endAccess();
      MEMORY[0x1F4188790](v220);
      uint64_t v221 = v589;
      *(&v505 - 18) = v512;
      *(&v505 - 17) = v221;
      uint64_t v222 = v590;
      *(&v505 - 16) = v586;
      *(&v505 - 15) = v222;
      uint64_t v223 = v596;
      *(&v505 - 14) = v591;
      *(&v505 - 13) = v223;
      uint64_t v224 = v588;
      *(&v505 - 12) = v587;
      *(&v505 - 11) = v224;
      uint64_t v225 = v505;
      *(&v505 - 10) = v563;
      *(&v505 - 9) = v225;
      uint64_t v226 = v507;
      *(&v505 - 8) = v506;
      *(&v505 - 7) = v226;
      uint64_t v227 = v509;
      *(&v505 - 6) = v508;
      *(&v505 - 5) = v227;
      uint64_t v228 = v511;
      *(&v505 - 4) = v510;
      *(&v505 - 3) = v228;
      uint64_t v229 = v585;
      *(&v505 - 2) = (uint64_t)v574;
      *(&v505 - 1) = v229;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2E38, v542);
      v581 = 0;
      swift_beginAccess();
      uint64_t v230 = *(void *)(v129 + *(int *)(v583 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v231 = v513;
      sub_1C3F970C4(v230, v513, &qword_1EBBBF8A0);
      if (v134(v231, 1, v133) == 1)
      {
        sub_1C3F962E0(v231, &qword_1EBBBF8A0);
        uint64_t v232 = v561;
        uint64_t v233 = v560;
        uint64_t v234 = v583;
        uint64_t v235 = v512;
        uint64_t v236 = v542;
        uint64_t v237 = v524;
      }
      else
      {
        int v412 = swift_getEnumCaseMultiPayload();
        uint64_t v233 = v560;
        uint64_t v235 = v512;
        uint64_t v236 = v542;
        uint64_t v237 = v524;
        if (v412 == 11)
        {
          sub_1C3F8ADE0(v231, v524, type metadata accessor for Proto_TaggedValue);
          uint64_t v232 = v561;
          uint64_t v234 = v583;
          uint64_t v413 = v582;
          goto LABEL_142;
        }
        sub_1C3F8B288(v231, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        uint64_t v232 = v561;
        uint64_t v234 = v583;
      }
      sub_1C4496888();
      uint64_t v413 = v582;
      uint64_t v430 = *(int *)(v582 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v413 = v582;
      }
      *(void *)(v237 + v430) = qword_1EA39AF60;
      swift_retain();
LABEL_142:
      uint64_t v431 = *(int *)(v413 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v432 = swift_retain();
        uint64_t v433 = sub_1C4400A40(v432);
        uint64_t v237 = v524;
        *(void *)(v524 + v431) = v433;
        swift_release();
      }
      uint64_t v434 = *(void *)(v237 + v431);
      sub_1C3F8ADE0(v236, v232, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v233 + 56))(v232, 0, 1, v234);
      uint64_t v435 = v232;
      uint64_t v436 = v562;
      sub_1C4124B88(v435, v562);
      uint64_t v437 = v434
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v436, v437);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v237);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v568 + 8))(v574, v235);
  }
}

uint64_t sub_1C41B8CB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return TaggedValue_8.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a2[8], a3, a2[9], a2[10], a2[11], a2[12], a2[13], a2[14], a2[15], a2[16], a2[17]);
}

uint64_t sub_1C41B8D0C(uint64_t a1, void *a2)
{
  return TaggedValue_8.encode(to:)(a1, a2);
}

uint64_t TaggedValue_8<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v80 = a8;
  uint64_t v79 = a7;
  uint64_t v78 = a6;
  uint64_t v77 = a5;
  uint64_t v76 = a4;
  uint64_t v75 = a3;
  uint64_t v83 = a1;
  uint64_t v81 = *(void *)(*(void *)(a2 + 72) - 8);
  uint64_t v73 = a10;
  uint64_t v72 = a9;
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v74 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = *(void *)(*(void *)(v12 + 64) - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v69 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = *(void *)(*(void *)(v15 + 56) - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v66 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 + 48);
  uint64_t v65 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v16);
  uint64_t v64 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v22 + 40);
  uint64_t v63 = *(void *)(v23 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v20);
  uint64_t v62 = (char *)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(v26 + 32);
  uint64_t v61 = *(void *)(v27 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v24);
  uint64_t v60 = (char *)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)(v30 + 24);
  uint64_t v59 = *(void *)(v31 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v28);
  uint64_t v34 = (char *)&v58 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = *(void *)(v35 + 16);
  uint64_t v58 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v38 = (char *)&v58 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85[0] = v36;
  v85[1] = v31;
  v85[2] = v27;
  uint64_t v86 = v23;
  uint64_t v87 = v19;
  uint64_t v88 = v39;
  uint64_t v68 = v39;
  uint64_t v71 = v40;
  uint64_t v89 = v40;
  uint64_t v90 = v41;
  uint64_t v82 = v41;
  long long v43 = v42[6];
  long long v91 = v42[5];
  long long v92 = v43;
  long long v44 = v42[8];
  long long v93 = v42[7];
  long long v94 = v44;
  uint64_t v45 = type metadata accessor for TaggedValue_8.TaggedEnum();
  MEMORY[0x1F4188790](v45);
  uint64_t v47 = (char *)&v58 - v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))((char *)&v58 - v46, v95, v45);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v51 = v59;
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v34, v47, v31);
      sub_1C4497068();
      return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v34, v31);
    case 2u:
      uint64_t v52 = v61;
      uint64_t v53 = v60;
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v60, v47, v27);
      sub_1C4497068();
      return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v53, v27);
    case 3u:
      uint64_t v54 = v63;
      uint64_t v55 = v62;
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v62, v47, v23);
      sub_1C4497068();
      return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v55, v23);
    case 4u:
      uint64_t v56 = v65;
      uint64_t v57 = v64;
      (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v64, v47, v19);
      goto LABEL_10;
    case 5u:
      uint64_t v56 = v67;
      uint64_t v57 = v66;
      uint64_t v19 = v68;
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v66, v47, v68);
      goto LABEL_10;
    case 6u:
      uint64_t v56 = v70;
      uint64_t v57 = v69;
      uint64_t v19 = v71;
      (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v69, v47, v71);
      goto LABEL_10;
    case 7u:
      uint64_t v56 = v81;
      uint64_t v57 = v74;
      uint64_t v19 = v82;
      (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v74, v47, v82);
LABEL_10:
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v57, v19);
      break;
    case 8u:
      (*(void (**)(uint64_t *__return_ptr))(**((void **)v47 + 1) + 80))(v84);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DE70);
      swift_dynamicCast();
      __swift_project_boxed_opaque_existential_1(v85, v86);
      sub_1C4497068();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
      uint64_t result = swift_release();
      break;
    default:
      uint64_t v49 = v58;
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v38, v47, v36);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v38, v36);
      break;
  }
  return result;
}

uint64_t sub_1C41B9658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TaggedValue_8<>.encode(to:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), *(void *)(a3 - 24), *(void *)(a3 - 32), *(void *)(a3 - 40), *(void *)(a3 - 48), *(void *)(a3 - 56), *(void *)(a3 - 64));
}

uint64_t TaggedValue_9.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v478 = a9;
  uint64_t v449 = a2;
  uint64_t v450 = a3;
  uint64_t v487 = a2;
  uint64_t v488 = a3;
  uint64_t v451 = a4;
  uint64_t v489 = a4;
  uint64_t v490 = a5;
  uint64_t v452 = a5;
  uint64_t v453 = a6;
  uint64_t v491 = a6;
  uint64_t v492 = a7;
  uint64_t v454 = a7;
  uint64_t v455 = a8;
  uint64_t v493 = a8;
  uint64_t v494 = a10;
  uint64_t v444 = a18;
  uint64_t v445 = a10;
  uint64_t v446 = a19;
  uint64_t v447 = a11;
  uint64_t v495 = a11;
  uint64_t v496 = a12;
  uint64_t v438 = a12;
  uint64_t v439 = a13;
  uint64_t v497 = a13;
  uint64_t v498 = a14;
  uint64_t v440 = a14;
  uint64_t v441 = a15;
  uint64_t v499 = a15;
  uint64_t v500 = a16;
  uint64_t v442 = a16;
  uint64_t v443 = a17;
  uint64_t v501 = a17;
  uint64_t v502 = a18;
  uint64_t v503 = a19;
  uint64_t v504 = a20;
  uint64_t v448 = a20;
  uint64_t v476 = type metadata accessor for TaggedValue_9.TaggedEnum();
  uint64_t v477 = *(void *)(v476 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v476);
  uint64_t v388 = (void *)((char *)v387 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v437 = (char *)v387 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v436 = (char *)v387 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v435 = (char *)v387 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v434 = (char *)v387 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v433 = (char *)v387 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v432 = (char *)v387 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v431 = (char *)v387 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v430 = (char *)v387 - v38;
  MEMORY[0x1F4188790](v37);
  uint64_t v429 = (char *)v387 - v39;
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v41 = MEMORY[0x1F4188790](v40 - 8);
  uint64_t v428 = (uint64_t)v387 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v427 = (uint64_t)v387 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v426 = (uint64_t)v387 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v425 = (uint64_t)v387 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v423 = (uint64_t)v387 - v50;
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v422 = (uint64_t)v387 - v52;
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  uint64_t v420 = (uint64_t)v387 - v54;
  uint64_t v55 = MEMORY[0x1F4188790](v53);
  uint64_t v419 = (uint64_t)v387 - v56;
  uint64_t v57 = MEMORY[0x1F4188790](v55);
  uint64_t v418 = (uint64_t)v387 - v58;
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v416 = (uint64_t)v387 - v60;
  MEMORY[0x1F4188790](v59);
  uint64_t v482 = (uint64_t)v387 - v61;
  uint64_t v486 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v62 = MEMORY[0x1F4188790](v486);
  uint64_t v465 = (uint64_t)v387 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = MEMORY[0x1F4188790](v62);
  uint64_t v464 = (uint64_t)v387 - v65;
  uint64_t v66 = MEMORY[0x1F4188790](v64);
  uint64_t v463 = (uint64_t)v387 - v67;
  uint64_t v68 = MEMORY[0x1F4188790](v66);
  uint64_t v462 = (uint64_t)v387 - v69;
  uint64_t v70 = MEMORY[0x1F4188790](v68);
  uint64_t v461 = (uint64_t)v387 - v71;
  uint64_t v72 = MEMORY[0x1F4188790](v70);
  uint64_t v460 = (uint64_t)v387 - v73;
  uint64_t v74 = MEMORY[0x1F4188790](v72);
  uint64_t v459 = (uint64_t)v387 - v75;
  uint64_t v76 = MEMORY[0x1F4188790](v74);
  uint64_t v458 = (uint64_t)v387 - v77;
  uint64_t v78 = MEMORY[0x1F4188790](v76);
  uint64_t v457 = (uint64_t)v387 - v79;
  uint64_t v80 = MEMORY[0x1F4188790](v78);
  uint64_t v456 = (uint64_t)v387 - v81;
  MEMORY[0x1F4188790](v80);
  uint64_t v481 = (uint64_t)v387 - v82;
  uint64_t v83 = type metadata accessor for Proto_Value(0);
  uint64_t v84 = *(void *)(v83 - 8);
  uint64_t v85 = MEMORY[0x1F4188790](v83);
  uint64_t v394 = (char *)v387 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = MEMORY[0x1F4188790](v85);
  uint64_t v475 = (uint64_t)v387 - v88;
  uint64_t v89 = MEMORY[0x1F4188790](v87);
  uint64_t v424 = (uint64_t)v387 - v90;
  uint64_t v91 = MEMORY[0x1F4188790](v89);
  uint64_t v474 = (uint64_t)v387 - v92;
  uint64_t v93 = MEMORY[0x1F4188790](v91);
  uint64_t v421 = (uint64_t)v387 - v94;
  uint64_t v95 = MEMORY[0x1F4188790](v93);
  uint64_t v473 = (uint64_t)v387 - v96;
  uint64_t v97 = MEMORY[0x1F4188790](v95);
  uint64_t v417 = (uint64_t)v387 - v98;
  uint64_t v99 = MEMORY[0x1F4188790](v97);
  uint64_t v472 = (uint64_t)v387 - v100;
  uint64_t v101 = MEMORY[0x1F4188790](v99);
  uint64_t v415 = (uint64_t)v387 - v102;
  uint64_t v103 = MEMORY[0x1F4188790](v101);
  uint64_t v471 = (uint64_t)v387 - v104;
  uint64_t v105 = MEMORY[0x1F4188790](v103);
  uint64_t v414 = (uint64_t)v387 - v106;
  uint64_t v107 = MEMORY[0x1F4188790](v105);
  uint64_t v470 = (uint64_t)v387 - v108;
  uint64_t v109 = MEMORY[0x1F4188790](v107);
  uint64_t v413 = (uint64_t)v387 - v110;
  uint64_t v111 = MEMORY[0x1F4188790](v109);
  uint64_t v469 = (uint64_t)v387 - v112;
  uint64_t v113 = MEMORY[0x1F4188790](v111);
  uint64_t v412 = (uint64_t)v387 - v114;
  uint64_t v115 = MEMORY[0x1F4188790](v113);
  uint64_t v468 = (uint64_t)v387 - v116;
  uint64_t v117 = MEMORY[0x1F4188790](v115);
  uint64_t v411 = (uint64_t)v387 - v118;
  uint64_t v119 = MEMORY[0x1F4188790](v117);
  uint64_t v467 = (uint64_t)v387 - v120;
  uint64_t v121 = MEMORY[0x1F4188790](v119);
  uint64_t v410 = (uint64_t)v387 - v122;
  uint64_t v123 = MEMORY[0x1F4188790](v121);
  uint64_t v466 = (uint64_t)v387 - v124;
  MEMORY[0x1F4188790](v123);
  uint64_t v484 = (uint64_t)v387 - v125;
  uint64_t v126 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v127 = MEMORY[0x1F4188790](v126 - 8);
  uint64_t v409 = (uint64_t)v387 - ((v128 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = MEMORY[0x1F4188790](v127);
  uint64_t v404 = (uint64_t)v387 - v130;
  uint64_t v131 = MEMORY[0x1F4188790](v129);
  uint64_t v408 = (uint64_t)v387 - v132;
  uint64_t v133 = MEMORY[0x1F4188790](v131);
  uint64_t v403 = (uint64_t)v387 - v134;
  uint64_t v135 = MEMORY[0x1F4188790](v133);
  uint64_t v407 = (uint64_t)v387 - v136;
  uint64_t v137 = MEMORY[0x1F4188790](v135);
  uint64_t v402 = (uint64_t)v387 - v138;
  uint64_t v139 = MEMORY[0x1F4188790](v137);
  uint64_t v406 = (uint64_t)v387 - v140;
  uint64_t v141 = MEMORY[0x1F4188790](v139);
  uint64_t v401 = (uint64_t)v387 - v142;
  uint64_t v143 = MEMORY[0x1F4188790](v141);
  uint64_t v405 = (char *)v387 - v144;
  uint64_t v145 = MEMORY[0x1F4188790](v143);
  uint64_t v400 = (uint64_t)v387 - v146;
  uint64_t v147 = MEMORY[0x1F4188790](v145);
  uint64_t v393 = (char *)v387 - v148;
  uint64_t v149 = MEMORY[0x1F4188790](v147);
  uint64_t v399 = (uint64_t)v387 - v150;
  uint64_t v151 = MEMORY[0x1F4188790](v149);
  uint64_t v392 = (char *)v387 - v152;
  uint64_t v153 = MEMORY[0x1F4188790](v151);
  uint64_t v398 = (uint64_t)v387 - v154;
  uint64_t v155 = MEMORY[0x1F4188790](v153);
  uint64_t v391 = (char *)v387 - v156;
  uint64_t v157 = MEMORY[0x1F4188790](v155);
  uint64_t v397 = (uint64_t)v387 - v158;
  uint64_t v159 = MEMORY[0x1F4188790](v157);
  uint64_t v390 = (char *)v387 - v160;
  uint64_t v161 = MEMORY[0x1F4188790](v159);
  uint64_t v396 = (uint64_t)v387 - v162;
  uint64_t v163 = MEMORY[0x1F4188790](v161);
  uint64_t v389 = (char *)v387 - v164;
  uint64_t v165 = MEMORY[0x1F4188790](v163);
  uint64_t v395 = (uint64_t)v387 - v166;
  uint64_t v167 = MEMORY[0x1F4188790](v165);
  uint64_t v169 = (char *)v387 - v168;
  MEMORY[0x1F4188790](v167);
  uint64_t v171 = (char *)v387 - v170;
  uint64_t v485 = a1;
  uint64_t v172 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v172, (uint64_t)v171, &qword_1EBBC0540);
  uint64_t v173 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48);
  uint64_t v174 = v83;
  uint64_t v175 = v83;
  uint64_t v176 = v84 + 48;
  LODWORD(v84) = v173(v171, 1, v175);
  sub_1C3F962E0((uint64_t)v171, &qword_1EBBC0540);
  if (v84 != 1)
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v485;
    sub_1C3F970C4(v172, (uint64_t)v169, &qword_1EBBC0540);
    v387[1] = v176;
    uint64_t v480 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v173;
    if (v173(v169, 1, v174) == 1)
    {
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
      JUMPOUT(0x1C41BC9B8);
    }
    uint64_t v179 = v484;
    sub_1C3F8ADE0((uint64_t)v169, v484, type metadata accessor for Proto_Value);
    uint64_t v180 = v174;
    uint64_t v181 = *(void *)(v179 + *(int *)(v174 + 20))
         + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v182 = v181;
    uint64_t v183 = v482;
    sub_1C3F970C4(v182, v482, &qword_1EBBBF8A0);
    uint64_t v184 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    uint64_t v185 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v184 - 8) + 48);
    if (v185(v183, 1, v184) == 1)
    {
      swift_retain();
      sub_1C3F962E0(v183, &qword_1EBBBF8A0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 11)
      {
        uint64_t v186 = v481;
        sub_1C3F8ADE0(v183, v481, type metadata accessor for Proto_TaggedValue);
LABEL_12:
        swift_retain();
        sub_1C3F8B288(v484, type metadata accessor for Proto_Value);
        swift_beginAccess();
        sub_1C3F8B288(v186, type metadata accessor for Proto_TaggedValue);
        uint64_t v188 = inited;
        switch(inited)
        {
          case 0:
            uint64_t v189 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v190 = v189;
            uint64_t v191 = v395;
            sub_1C3F970C4(v190, v395, &qword_1EBBC0540);
            uint64_t v192 = v180;
            if (v480(v191, 1, v180) == 1) {
              goto LABEL_177;
            }
            uint64_t v193 = v191;
            uint64_t v194 = v466;
            sub_1C3F8ADE0(v193, v466, type metadata accessor for Proto_Value);
            uint64_t v195 = *(void *)(v194 + *(int *)(v180 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v196 = v416;
            sub_1C3F970C4(v195, v416, &qword_1EBBBF8A0);
            if (v185(v196, 1, v184) == 1)
            {
              sub_1C3F962E0(v196, &qword_1EBBBF8A0);
              int v197 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v198 = v485;
            }
            else
            {
              int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
              int v197 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v198 = v485;
              if (EnumCaseMultiPayload == 11)
              {
                uint64_t v287 = v456;
                sub_1C3F8ADE0(v196, v456, type metadata accessor for Proto_TaggedValue);
                uint64_t v288 = (uint64_t)v389;
                goto LABEL_67;
              }
              sub_1C3F8B288(v196, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            uint64_t v287 = v456;
            uint64_t v288 = (uint64_t)v389;
            sub_1C4496888();
            uint64_t v312 = *(int *)(v486 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v287 + v312) = qword_1EA39AF60;
            swift_retain();
LABEL_67:
            sub_1C3F8B288(v466, type metadata accessor for Proto_Value);
            uint64_t v313 = *(void *)(v287 + *(int *)(v486 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v313, v288, &qword_1EBBC0540);
            int v314 = v197(v288, 1, v192);
            uint64_t v315 = v410;
            if (v314 == 1)
            {
              sub_1C4496888();
              uint64_t v316 = *(int *)(v192 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v315 + v316) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v288, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v288, v410, type metadata accessor for Proto_Value);
            }
            uint64_t v317 = v429;
            sub_1C3F8B288(v456, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v318 = sub_1C3F974B0(v315, v198);
            swift_release();
            uint64_t v319 = v483;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v438 + 8) + 8) + 8))(v318);
            if (v319) {
              goto LABEL_173;
            }
            goto LABEL_150;
          case 1:
            uint64_t v199 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v200 = v199;
            uint64_t v201 = v396;
            sub_1C3F970C4(v200, v396, &qword_1EBBC0540);
            uint64_t v202 = v180;
            if (v480(v201, 1, v180) == 1) {
              goto LABEL_178;
            }
            uint64_t v203 = v201;
            uint64_t v204 = v467;
            sub_1C3F8ADE0(v203, v467, type metadata accessor for Proto_Value);
            uint64_t v205 = *(void *)(v204 + *(int *)(v180 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v206 = v418;
            sub_1C3F970C4(v205, v418, &qword_1EBBBF8A0);
            if (v185(v206, 1, v184) == 1)
            {
              sub_1C3F962E0(v206, &qword_1EBBBF8A0);
              uint64_t v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v208 = v485;
            }
            else
            {
              int v289 = swift_getEnumCaseMultiPayload();
              uint64_t v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v208 = v485;
              if (v289 == 11)
              {
                uint64_t v290 = v457;
                sub_1C3F8ADE0(v206, v457, type metadata accessor for Proto_TaggedValue);
                uint64_t v291 = (uint64_t)v390;
                goto LABEL_78;
              }
              sub_1C3F8B288(v206, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            uint64_t v290 = v457;
            uint64_t v291 = (uint64_t)v390;
            sub_1C4496888();
            uint64_t v320 = *(int *)(v486 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v290 + v320) = qword_1EA39AF60;
            swift_retain();
LABEL_78:
            sub_1C3F8B288(v467, type metadata accessor for Proto_Value);
            uint64_t v321 = *(void *)(v290 + *(int *)(v486 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v321, v291, &qword_1EBBC0540);
            int v322 = v207(v291, 1, v202);
            uint64_t v323 = v411;
            if (v322 == 1)
            {
              sub_1C4496888();
              uint64_t v324 = *(int *)(v202 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v323 + v324) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v291, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v291, v411, type metadata accessor for Proto_Value);
            }
            uint64_t v317 = v430;
            sub_1C3F8B288(v457, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v325 = sub_1C3F974B0(v323, v208);
            swift_release();
            uint64_t v326 = v483;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v439 + 8) + 8) + 8))(v325);
            if (!v326) {
              goto LABEL_150;
            }
            goto LABEL_173;
          case 2:
            uint64_t v209 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v210 = v209;
            uint64_t v211 = v397;
            sub_1C3F970C4(v210, v397, &qword_1EBBC0540);
            uint64_t v212 = v180;
            if (v480(v211, 1, v180) == 1) {
              goto LABEL_179;
            }
            uint64_t v213 = v211;
            uint64_t v214 = v468;
            sub_1C3F8ADE0(v213, v468, type metadata accessor for Proto_Value);
            uint64_t v215 = *(void *)(v214 + *(int *)(v180 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v216 = v419;
            sub_1C3F970C4(v215, v419, &qword_1EBBBF8A0);
            if (v185(v216, 1, v184) == 1)
            {
              sub_1C3F962E0(v216, &qword_1EBBBF8A0);
              uint64_t v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v218 = v485;
            }
            else
            {
              int v292 = swift_getEnumCaseMultiPayload();
              uint64_t v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v218 = v485;
              if (v292 == 11)
              {
                uint64_t v293 = v458;
                sub_1C3F8ADE0(v216, v458, type metadata accessor for Proto_TaggedValue);
                uint64_t v294 = (uint64_t)v391;
                goto LABEL_89;
              }
              sub_1C3F8B288(v216, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            uint64_t v293 = v458;
            uint64_t v294 = (uint64_t)v391;
            sub_1C4496888();
            uint64_t v327 = *(int *)(v486 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v293 + v327) = qword_1EA39AF60;
            swift_retain();
LABEL_89:
            sub_1C3F8B288(v468, type metadata accessor for Proto_Value);
            uint64_t v328 = *(void *)(v293 + *(int *)(v486 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v328, v294, &qword_1EBBC0540);
            int v329 = v217(v294, 1, v212);
            uint64_t v330 = v412;
            if (v329 == 1)
            {
              sub_1C4496888();
              uint64_t v331 = *(int *)(v212 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v330 + v331) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v294, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v294, v412, type metadata accessor for Proto_Value);
            }
            uint64_t v317 = v431;
            sub_1C3F8B288(v458, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v332 = sub_1C3F974B0(v330, v218);
            swift_release();
            uint64_t v333 = v483;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v440 + 8) + 8) + 8))(v332);
            if (!v333) {
              goto LABEL_150;
            }
            goto LABEL_173;
          case 3:
            uint64_t v219 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v220 = v219;
            uint64_t v221 = v398;
            sub_1C3F970C4(v220, v398, &qword_1EBBC0540);
            uint64_t v222 = v180;
            if (v480(v221, 1, v180) == 1) {
              goto LABEL_180;
            }
            uint64_t v223 = v221;
            uint64_t v224 = v469;
            sub_1C3F8ADE0(v223, v469, type metadata accessor for Proto_Value);
            uint64_t v225 = *(void *)(v224 + *(int *)(v180 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v226 = v420;
            sub_1C3F970C4(v225, v420, &qword_1EBBBF8A0);
            if (v185(v226, 1, v184) == 1)
            {
              sub_1C3F962E0(v226, &qword_1EBBBF8A0);
              uint64_t v227 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v228 = v485;
            }
            else
            {
              int v295 = swift_getEnumCaseMultiPayload();
              uint64_t v227 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v228 = v485;
              if (v295 == 11)
              {
                uint64_t v296 = v459;
                sub_1C3F8ADE0(v226, v459, type metadata accessor for Proto_TaggedValue);
                uint64_t v297 = (uint64_t)v392;
                goto LABEL_100;
              }
              sub_1C3F8B288(v226, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            uint64_t v296 = v459;
            uint64_t v297 = (uint64_t)v392;
            sub_1C4496888();
            uint64_t v334 = *(int *)(v486 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v296 + v334) = qword_1EA39AF60;
            swift_retain();
LABEL_100:
            sub_1C3F8B288(v469, type metadata accessor for Proto_Value);
            uint64_t v335 = *(void *)(v296 + *(int *)(v486 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v335, v297, &qword_1EBBC0540);
            int v336 = v227(v297, 1, v222);
            uint64_t v337 = v413;
            if (v336 == 1)
            {
              sub_1C4496888();
              uint64_t v338 = *(int *)(v222 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v337 + v338) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v297, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v297, v413, type metadata accessor for Proto_Value);
            }
            uint64_t v317 = v432;
            sub_1C3F8B288(v459, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v339 = sub_1C3F974B0(v337, v228);
            swift_release();
            uint64_t v340 = v483;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v441 + 8) + 8) + 8))(v339);
            if (!v340) {
              goto LABEL_150;
            }
            goto LABEL_173;
          case 4:
            uint64_t v229 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v230 = v229;
            uint64_t v231 = v399;
            sub_1C3F970C4(v230, v399, &qword_1EBBC0540);
            uint64_t v232 = v180;
            if (v480(v231, 1, v180) == 1) {
              goto LABEL_181;
            }
            uint64_t v233 = v231;
            uint64_t v234 = v470;
            sub_1C3F8ADE0(v233, v470, type metadata accessor for Proto_Value);
            uint64_t v235 = *(void *)(v234 + *(int *)(v180 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v236 = v422;
            sub_1C3F970C4(v235, v422, &qword_1EBBBF8A0);
            if (v185(v236, 1, v184) == 1)
            {
              sub_1C3F962E0(v236, &qword_1EBBBF8A0);
              uint64_t v237 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v238 = v485;
            }
            else
            {
              int v298 = swift_getEnumCaseMultiPayload();
              uint64_t v237 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v238 = v485;
              if (v298 == 11)
              {
                uint64_t v299 = v460;
                sub_1C3F8ADE0(v236, v460, type metadata accessor for Proto_TaggedValue);
                uint64_t v300 = (uint64_t)v393;
                goto LABEL_111;
              }
              sub_1C3F8B288(v236, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            uint64_t v299 = v460;
            uint64_t v300 = (uint64_t)v393;
            sub_1C4496888();
            uint64_t v341 = *(int *)(v486 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v299 + v341) = qword_1EA39AF60;
            swift_retain();
LABEL_111:
            sub_1C3F8B288(v470, type metadata accessor for Proto_Value);
            uint64_t v342 = *(void *)(v299 + *(int *)(v486 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v342, v300, &qword_1EBBC0540);
            int v343 = v237(v300, 1, v232);
            uint64_t v344 = v414;
            if (v343 == 1)
            {
              sub_1C4496888();
              uint64_t v345 = *(int *)(v232 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v344 + v345) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v300, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v300, v414, type metadata accessor for Proto_Value);
            }
            uint64_t v317 = v433;
            sub_1C3F8B288(v460, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v346 = sub_1C3F974B0(v344, v238);
            swift_release();
            uint64_t v347 = v483;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v442 + 8) + 8) + 8))(v346);
            if (!v347) {
              goto LABEL_150;
            }
            goto LABEL_173;
          case 5:
            uint64_t v239 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v240 = v239;
            uint64_t v241 = v400;
            sub_1C3F970C4(v240, v400, &qword_1EBBC0540);
            if (v480(v241, 1, v180) == 1) {
              goto LABEL_182;
            }
            uint64_t v242 = v241;
            uint64_t v243 = v471;
            sub_1C3F8ADE0(v242, v471, type metadata accessor for Proto_Value);
            uint64_t v244 = *(void *)(v243 + *(int *)(v180 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v245 = v423;
            sub_1C3F970C4(v244, v423, &qword_1EBBBF8A0);
            unsigned int v246 = v185(v245, 1, v184);
            uint64_t v247 = (uint64_t)v405;
            if (v246 == 1)
            {
              sub_1C3F962E0(v245, &qword_1EBBBF8A0);
              uint64_t v248 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v249 = v485;
            }
            else
            {
              int v301 = swift_getEnumCaseMultiPayload();
              uint64_t v248 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v249 = v485;
              if (v301 == 11)
              {
                uint64_t v302 = v461;
                sub_1C3F8ADE0(v245, v461, type metadata accessor for Proto_TaggedValue);
                goto LABEL_122;
              }
              sub_1C3F8B288(v245, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            uint64_t v302 = v461;
            sub_1C4496888();
            uint64_t v348 = *(int *)(v486 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v302 + v348) = qword_1EA39AF60;
            swift_retain();
LABEL_122:
            sub_1C3F8B288(v471, type metadata accessor for Proto_Value);
            uint64_t v349 = *(void *)(v302 + *(int *)(v486 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            sub_1C3F970C4(v349, v247, &qword_1EBBC0540);
            int v350 = v248(v247, 1, v180);
            uint64_t v351 = v415;
            if (v350 == 1)
            {
              sub_1C4496888();
              uint64_t v352 = *(int *)(v180 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v351 + v352) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v247, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v247, v415, type metadata accessor for Proto_Value);
            }
            uint64_t v317 = v434;
            sub_1C3F8B288(v461, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v353 = sub_1C3F974B0(v351, v249);
            swift_release();
            uint64_t v354 = v483;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v443 + 8) + 8) + 8))(v353);
            if (!v354) {
              goto LABEL_150;
            }
            goto LABEL_173;
          case 6:
            uint64_t v250 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v251 = v250;
            uint64_t v252 = v401;
            sub_1C3F970C4(v251, v401, &qword_1EBBC0540);
            if (v480(v252, 1, v180) == 1) {
              goto LABEL_183;
            }
            uint64_t v253 = v252;
            uint64_t v254 = v472;
            sub_1C3F8ADE0(v253, v472, type metadata accessor for Proto_Value);
            uint64_t v255 = *(void *)(v254 + *(int *)(v180 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v256 = v425;
            sub_1C3F970C4(v255, v425, &qword_1EBBBF8A0);
            if (v185(v256, 1, v184) == 1)
            {
              sub_1C3F962E0(v256, &qword_1EBBBF8A0);
              uint64_t v257 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v258 = v485;
            }
            else
            {
              int v303 = swift_getEnumCaseMultiPayload();
              uint64_t v257 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v258 = v485;
              if (v303 == 11)
              {
                uint64_t v304 = v462;
                sub_1C3F8ADE0(v256, v462, type metadata accessor for Proto_TaggedValue);
                goto LABEL_133;
              }
              sub_1C3F8B288(v256, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            uint64_t v304 = v462;
            sub_1C4496888();
            uint64_t v355 = *(int *)(v486 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v304 + v355) = qword_1EA39AF60;
            swift_retain();
LABEL_133:
            sub_1C3F8B288(v472, type metadata accessor for Proto_Value);
            uint64_t v356 = *(void *)(v304 + *(int *)(v486 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v357 = v406;
            sub_1C3F970C4(v356, v406, &qword_1EBBC0540);
            int v358 = v257(v357, 1, v180);
            uint64_t v359 = v417;
            if (v358 == 1)
            {
              sub_1C4496888();
              uint64_t v360 = *(int *)(v180 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v359 + v360) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v357, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v357, v417, type metadata accessor for Proto_Value);
            }
            uint64_t v317 = v435;
            sub_1C3F8B288(v462, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v361 = sub_1C3F974B0(v359, v258);
            swift_release();
            uint64_t v362 = v483;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v444 + 8) + 8) + 8))(v361);
            if (!v362) {
              goto LABEL_150;
            }
            goto LABEL_173;
          case 7:
            uint64_t v259 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v260 = v259;
            uint64_t v261 = v402;
            sub_1C3F970C4(v260, v402, &qword_1EBBC0540);
            if (v480(v261, 1, v180) == 1) {
              goto LABEL_184;
            }
            uint64_t v262 = v261;
            uint64_t v263 = v473;
            sub_1C3F8ADE0(v262, v473, type metadata accessor for Proto_Value);
            uint64_t v264 = *(void *)(v263 + *(int *)(v180 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v265 = v426;
            sub_1C3F970C4(v264, v426, &qword_1EBBBF8A0);
            if (v185(v265, 1, v184) == 1)
            {
              sub_1C3F962E0(v265, &qword_1EBBBF8A0);
              uint64_t v266 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v267 = v485;
            }
            else
            {
              int v305 = swift_getEnumCaseMultiPayload();
              uint64_t v266 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v267 = v485;
              if (v305 == 11)
              {
                uint64_t v306 = v463;
                sub_1C3F8ADE0(v265, v463, type metadata accessor for Proto_TaggedValue);
                goto LABEL_144;
              }
              sub_1C3F8B288(v265, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            uint64_t v306 = v463;
            sub_1C4496888();
            uint64_t v363 = *(int *)(v486 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v306 + v363) = qword_1EA39AF60;
            swift_retain();
LABEL_144:
            sub_1C3F8B288(v473, type metadata accessor for Proto_Value);
            uint64_t v364 = *(void *)(v306 + *(int *)(v486 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v365 = v407;
            sub_1C3F970C4(v364, v407, &qword_1EBBC0540);
            int v366 = v266(v365, 1, v180);
            uint64_t v367 = v421;
            if (v366 == 1)
            {
              sub_1C4496888();
              uint64_t v368 = *(int *)(v180 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v367 + v368) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v365, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v365, v421, type metadata accessor for Proto_Value);
            }
            uint64_t v317 = v436;
            sub_1C3F8B288(v463, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v369 = sub_1C3F974B0(v367, v267);
            swift_release();
            uint64_t v370 = v483;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v446 + 8) + 8) + 8))(v369);
            if (!v370) {
              goto LABEL_150;
            }
            goto LABEL_173;
          case 8:
            uint64_t v268 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v269 = v268;
            uint64_t v270 = v403;
            sub_1C3F970C4(v269, v403, &qword_1EBBC0540);
            if (v480(v270, 1, v180) == 1) {
              goto LABEL_185;
            }
            uint64_t v271 = v270;
            uint64_t v272 = v474;
            sub_1C3F8ADE0(v271, v474, type metadata accessor for Proto_Value);
            uint64_t v273 = *(void *)(v272 + *(int *)(v180 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v274 = v427;
            sub_1C3F970C4(v273, v427, &qword_1EBBBF8A0);
            if (v185(v274, 1, v184) == 1)
            {
              sub_1C3F962E0(v274, &qword_1EBBBF8A0);
              uint64_t v275 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v276 = v485;
            }
            else
            {
              int v307 = swift_getEnumCaseMultiPayload();
              uint64_t v275 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v480;
              uint64_t v276 = v485;
              if (v307 == 11)
              {
                uint64_t v308 = v464;
                sub_1C3F8ADE0(v274, v464, type metadata accessor for Proto_TaggedValue);
                goto LABEL_155;
              }
              sub_1C3F8B288(v274, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            uint64_t v308 = v464;
            sub_1C4496888();
            uint64_t v372 = *(int *)(v486 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v308 + v372) = qword_1EA39AF60;
            swift_retain();
LABEL_155:
            sub_1C3F8B288(v474, type metadata accessor for Proto_Value);
            uint64_t v373 = *(void *)(v308 + *(int *)(v486 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v374 = v408;
            sub_1C3F970C4(v373, v408, &qword_1EBBC0540);
            int v375 = v275(v374, 1, v180);
            uint64_t v376 = v424;
            if (v375 == 1)
            {
              sub_1C4496888();
              uint64_t v377 = *(int *)(v180 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v376 + v377) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v374, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v374, v424, type metadata accessor for Proto_Value);
            }
            uint64_t v317 = v437;
            sub_1C3F8B288(v464, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v378 = sub_1C3F974B0(v376, v276);
            swift_release();
            uint64_t v379 = v483;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v448 + 8) + 8) + 8))(v378);
            if (v379) {
              goto LABEL_173;
            }
LABEL_150:
            swift_release();
            swift_release();
            uint64_t v371 = v476;
            goto LABEL_175;
          default:
            uint64_t v277 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
            swift_beginAccess();
            uint64_t v278 = v277;
            uint64_t v279 = v404;
            sub_1C3F970C4(v278, v404, &qword_1EBBC0540);
            if (v480(v279, 1, v180) == 1) {
              goto LABEL_186;
            }
            uint64_t v280 = v279;
            uint64_t v281 = v475;
            sub_1C3F8ADE0(v280, v475, type metadata accessor for Proto_Value);
            uint64_t v282 = *(void *)(v281 + *(int *)(v180 + 20))
                 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
            swift_beginAccess();
            uint64_t v283 = v428;
            sub_1C3F970C4(v282, v428, &qword_1EBBBF8A0);
            if (v185(v283, 1, v184) == 1)
            {
              sub_1C3F962E0(v283, &qword_1EBBBF8A0);
              uint64_t v284 = v480;
              uint64_t v285 = v485;
            }
            else
            {
              int v309 = swift_getEnumCaseMultiPayload();
              uint64_t v284 = v480;
              uint64_t v285 = v485;
              if (v309 == 11)
              {
                uint64_t v310 = v465;
                sub_1C3F8ADE0(v283, v465, type metadata accessor for Proto_TaggedValue);
                uint64_t v311 = (uint64_t)v394;
                goto LABEL_167;
              }
              sub_1C3F8B288(v283, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
            uint64_t v310 = v465;
            uint64_t v311 = (uint64_t)v394;
            sub_1C4496888();
            uint64_t v380 = *(int *)(v486 + 20);
            if (qword_1EA39AF70 != -1) {
              swift_once();
            }
            *(void *)(v310 + v380) = qword_1EA39AF60;
            swift_retain();
LABEL_167:
            sub_1C3F8B288(v475, type metadata accessor for Proto_Value);
            uint64_t v381 = *(void *)(v310 + *(int *)(v486 + 20))
                 + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
            swift_beginAccess();
            uint64_t v382 = v409;
            sub_1C3F970C4(v381, v409, &qword_1EBBC0540);
            if (v284(v382, 1, v180) == 1)
            {
              sub_1C4496888();
              uint64_t v383 = *(int *)(v180 + 20);
              if (qword_1EBBBF8C8 != -1) {
                swift_once();
              }
              *(void *)(v311 + v383) = qword_1EBBBF8B8;
              swift_retain();
              sub_1C3F962E0(v382, &qword_1EBBC0540);
            }
            else
            {
              sub_1C3F8ADE0(v382, v311, type metadata accessor for Proto_Value);
            }
            sub_1C3F8B288(v465, type metadata accessor for Proto_TaggedValue);
            type metadata accessor for CRDecoder(0);
            swift_allocObject();
            swift_retain();
            uint64_t v384 = sub_1C3F974B0(v311, v285);
            swift_release();
            uint64_t v385 = v483;
            AnyCRValue.init(from:)(v384, &v505);
            if (v385)
            {
LABEL_173:
              swift_release();
              swift_setDeallocating();
              return swift_release();
            }
            else
            {
              swift_release();
              swift_release();
              uint64_t v386 = v505;
              uint64_t v317 = (char *)v388;
              *uint64_t v388 = v188;
              *((void *)v317 + 1) = v386;
              uint64_t v371 = v476;
LABEL_175:
              swift_storeEnumTagMultiPayload();
              return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v477 + 32))(v478, v317, v371);
            }
        }
      }
      swift_retain();
      sub_1C3F8B288(v183, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    uint64_t v186 = v481;
    sub_1C4496888();
    uint64_t v187 = *(int *)(v486 + 20);
    if (qword_1EA39AF70 != -1) {
      swift_once();
    }
    *(void *)(v186 + v187) = qword_1EA39AF60;
    goto LABEL_12;
  }
  sub_1C3FE3FF0();
  swift_allocError();
  *(void *)uint64_t v177 = 0xD000000000000017;
  *(void *)(v177 + 8) = 0x80000001C44B0F00;
  *(unsigned char *)(v177 + 16) = 0;
  swift_willThrow();
  return swift_release();
}

uint64_t TaggedValue_9.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t v635 = a1;
  uint64_t v660 = a2[10];
  uint64_t v622 = *(void *)(v660 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](a1);
  v630 = (char *)&v545 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v639 = *(void *)(v5 + 72);
  uint64_t v621 = *(void *)(v639 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  v629 = (char *)&v545 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v638 = *(void *)(v8 + 64);
  uint64_t v620 = *(void *)(v638 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  v628 = (char *)&v545 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v637 = *(void *)(v11 + 56);
  uint64_t v619 = *(void *)(v637 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  v627 = (char *)&v545 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v641 = *(void *)(v14 + 48);
  uint64_t v618 = *(void *)(v641 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  v626 = (char *)&v545 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v636 = *(void *)(v17 + 40);
  uint64_t v605 = *(void *)(v636 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  v625 = (char *)&v545 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v634 = *(void *)(v20 + 32);
  uint64_t v617 = *(void *)(v634 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  v624 = (char *)&v545 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v640 = *(void *)(v23 + 24);
  uint64_t v604 = *(void *)(v640 - 8);
  MEMORY[0x1F4188790](v21);
  v606 = (char *)&v545 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v26 = MEMORY[0x1F4188790](v25 - 8);
  uint64_t v609 = (uint64_t)&v545 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v608 = (uint64_t)&v545 - v28;
  uint64_t v632 = type metadata accessor for Proto_Value(0);
  uint64_t v607 = *(void *)(v632 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v632);
  uint64_t v596 = (uint64_t)&v545 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v592 = (uint64_t)&v545 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v591 = (uint64_t)&v545 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v590 = (uint64_t)&v545 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v589 = (uint64_t)&v545 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v588 = (uint64_t)&v545 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v595 = (uint64_t)&v545 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v597 = (uint64_t)&v545 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v594 = (uint64_t)&v545 - v46;
  MEMORY[0x1F4188790](v45);
  uint64_t v593 = (uint64_t)&v545 - v47;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v49 = MEMORY[0x1F4188790](v48 - 8);
  uint64_t v566 = (uint64_t)&v545 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v587 = (uint64_t)&v545 - v52;
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  uint64_t v568 = (uint64_t)&v545 - v54;
  uint64_t v55 = MEMORY[0x1F4188790](v53);
  uint64_t v586 = (uint64_t)&v545 - v56;
  uint64_t v57 = MEMORY[0x1F4188790](v55);
  uint64_t v567 = (uint64_t)&v545 - v58;
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v585 = (uint64_t)&v545 - v60;
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  uint64_t v565 = (uint64_t)&v545 - v62;
  uint64_t v63 = MEMORY[0x1F4188790](v61);
  uint64_t v584 = (uint64_t)&v545 - v64;
  uint64_t v65 = MEMORY[0x1F4188790](v63);
  uint64_t v564 = (uint64_t)&v545 - v66;
  uint64_t v67 = MEMORY[0x1F4188790](v65);
  uint64_t v583 = (uint64_t)&v545 - v68;
  uint64_t v69 = MEMORY[0x1F4188790](v67);
  uint64_t v563 = (uint64_t)&v545 - v70;
  uint64_t v71 = MEMORY[0x1F4188790](v69);
  uint64_t v582 = (uint64_t)&v545 - v72;
  uint64_t v73 = MEMORY[0x1F4188790](v71);
  uint64_t v562 = (uint64_t)&v545 - v74;
  uint64_t v75 = MEMORY[0x1F4188790](v73);
  uint64_t v581 = (uint64_t)&v545 - v76;
  uint64_t v77 = MEMORY[0x1F4188790](v75);
  uint64_t v561 = (uint64_t)&v545 - v78;
  uint64_t v79 = MEMORY[0x1F4188790](v77);
  uint64_t v579 = (uint64_t)&v545 - v80;
  uint64_t v81 = MEMORY[0x1F4188790](v79);
  uint64_t v560 = (uint64_t)&v545 - v82;
  uint64_t v83 = MEMORY[0x1F4188790](v81);
  uint64_t v578 = (uint64_t)&v545 - v84;
  uint64_t v85 = MEMORY[0x1F4188790](v83);
  uint64_t v559 = (uint64_t)&v545 - v86;
  MEMORY[0x1F4188790](v85);
  uint64_t v577 = (uint64_t)&v545 - v87;
  uint64_t v631 = type metadata accessor for Proto_TaggedValue(0);
  uint64_t v88 = MEMORY[0x1F4188790](v631);
  uint64_t v557 = (uint64_t)&v545 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = MEMORY[0x1F4188790](v88);
  uint64_t v603 = (uint64_t)&v545 - v91;
  uint64_t v92 = MEMORY[0x1F4188790](v90);
  uint64_t v573 = (uint64_t)&v545 - v93;
  uint64_t v94 = MEMORY[0x1F4188790](v92);
  uint64_t v602 = (uint64_t)&v545 - v95;
  uint64_t v96 = MEMORY[0x1F4188790](v94);
  uint64_t v558 = (uint64_t)&v545 - v97;
  uint64_t v98 = MEMORY[0x1F4188790](v96);
  uint64_t v601 = (uint64_t)&v545 - v99;
  uint64_t v100 = MEMORY[0x1F4188790](v98);
  uint64_t v556 = (uint64_t)&v545 - v101;
  uint64_t v102 = MEMORY[0x1F4188790](v100);
  uint64_t v600 = (uint64_t)&v545 - v103;
  uint64_t v104 = MEMORY[0x1F4188790](v102);
  uint64_t v555 = (uint64_t)&v545 - v105;
  uint64_t v106 = MEMORY[0x1F4188790](v104);
  uint64_t v580 = (uint64_t)&v545 - v107;
  uint64_t v108 = MEMORY[0x1F4188790](v106);
  uint64_t v572 = (uint64_t)&v545 - v109;
  uint64_t v110 = MEMORY[0x1F4188790](v108);
  uint64_t v574 = (uint64_t)&v545 - v111;
  uint64_t v112 = MEMORY[0x1F4188790](v110);
  uint64_t v571 = (uint64_t)&v545 - v113;
  uint64_t v114 = MEMORY[0x1F4188790](v112);
  uint64_t v599 = (uint64_t)&v545 - v115;
  uint64_t v116 = MEMORY[0x1F4188790](v114);
  uint64_t v569 = (uint64_t)&v545 - v117;
  uint64_t v118 = MEMORY[0x1F4188790](v116);
  uint64_t v576 = (uint64_t)&v545 - v119;
  uint64_t v120 = MEMORY[0x1F4188790](v118);
  uint64_t v570 = (uint64_t)&v545 - v121;
  uint64_t v122 = MEMORY[0x1F4188790](v120);
  uint64_t v575 = (uint64_t)&v545 - v123;
  uint64_t v124 = MEMORY[0x1F4188790](v122);
  uint64_t v554 = (uint64_t)&v545 - v125;
  uint64_t v126 = MEMORY[0x1F4188790](v124);
  uint64_t v598 = (uint64_t)&v545 - v127;
  uint64_t v128 = a2[2];
  uint64_t v616 = *(void *)(v128 - 8);
  MEMORY[0x1F4188790](v126);
  v623 = (char *)&v545 - ((v129 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = a2[11];
  uint64_t v131 = a2[12];
  uint64_t v132 = a2[13];
  uint64_t v133 = a2[14];
  uint64_t v134 = a2[15];
  uint64_t v135 = a2[16];
  uint64_t v137 = a2[17];
  uint64_t v136 = a2[18];
  uint64_t v138 = a2[19];
  uint64_t v642 = v128;
  uint64_t v643 = v640;
  uint64_t v644 = v634;
  uint64_t v645 = v636;
  uint64_t v646 = v641;
  uint64_t v647 = v637;
  uint64_t v648 = v638;
  uint64_t v649 = v639;
  uint64_t v650 = v660;
  uint64_t v651 = v130;
  uint64_t v610 = v130;
  uint64_t v611 = v131;
  uint64_t v652 = v131;
  uint64_t v653 = v132;
  uint64_t v654 = v133;
  uint64_t v655 = v134;
  uint64_t v656 = v135;
  uint64_t v657 = v137;
  uint64_t v658 = v136;
  uint64_t v659 = v138;
  uint64_t v614 = type metadata accessor for TaggedValue_9.TaggedEnum();
  uint64_t v613 = *(void *)(v614 - 8);
  MEMORY[0x1F4188790](v614);
  v612 = (char *)&v545 - v139;
  uint64_t v140 = v633;
  uint64_t result = sub_1C3F6DD10();
  if (v140) {
    return result;
  }
  uint64_t v546 = v132;
  uint64_t v547 = v133;
  uint64_t v548 = v134;
  uint64_t v549 = v135;
  uint64_t v550 = v137;
  uint64_t v551 = v136;
  uint64_t v552 = v138;
  uint64_t v553 = v128;
  uint64_t v633 = result;
  uint64_t v142 = v612;
  (*(void (**)(char *, uint64_t, uint64_t))(v613 + 16))(v612, v615, v614);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, char *, uint64_t, char *, uint64_t, char *, char *))(v604 + 32))(v606, v142, v640, v624, v616, v623, v625);
      uint64_t v150 = v633 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v151 = *(void *)(v150 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v152 = v578;
      sub_1C3F970C4(v151, v578, &qword_1EBBBF8A0);
      uint64_t v153 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v154 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v153 - 8) + 48);
      if (v154(v152, 1, v153) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v152, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v215 = v152;
          uint64_t v216 = v575;
          sub_1C3F8ADE0(v215, v575, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v217 = v631;
          goto LABEL_55;
        }
        swift_retain();
        sub_1C3F8B288(v152, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v216 = v575;
      sub_1C4496888();
      uint64_t v217 = v631;
      uint64_t v262 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v217 = v631;
      }
      *(void *)(v216 + v262) = qword_1EA39AF60;
      swift_retain();
LABEL_55:
      uint64_t v263 = *(int *)(v217 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v264 = swift_retain();
        *(void *)(v216 + v263) = sub_1C4400A40(v264);
        swift_release();
      }
      uint64_t v265 = *(void *)(v216 + v263);
      swift_beginAccess();
      *(void *)(v265 + 16) = 1;
      sub_1C43F0970(v216);
      uint64_t v266 = swift_endAccess();
      MEMORY[0x1F4188790](v266);
      uint64_t v267 = v640;
      *(&v545 - 20) = v553;
      *(&v545 - 19) = v267;
      uint64_t v268 = v636;
      *(&v545 - 18) = v634;
      *(&v545 - 17) = v268;
      uint64_t v269 = v637;
      *(&v545 - 16) = v641;
      *(&v545 - 15) = v269;
      uint64_t v270 = v639;
      *(&v545 - 14) = v638;
      *(&v545 - 13) = v270;
      uint64_t v271 = v610;
      *(&v545 - 12) = v660;
      *(&v545 - 11) = v271;
      uint64_t v272 = v546;
      *(&v545 - 10) = v611;
      *(&v545 - 9) = v272;
      uint64_t v273 = v548;
      *(&v545 - 8) = v547;
      *(&v545 - 7) = v273;
      uint64_t v274 = v550;
      *(&v545 - 6) = v549;
      *(&v545 - 5) = v274;
      uint64_t v275 = v552;
      *(&v545 - 4) = v551;
      *(&v545 - 3) = v275;
      uint64_t v276 = v635;
      *(&v545 - 2) = (uint64_t)v606;
      *(&v545 - 1) = v276;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C3078, v594);
      swift_beginAccess();
      uint64_t v277 = v632;
      uint64_t v278 = *(void *)(v150 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v279 = v278;
      uint64_t v280 = v560;
      sub_1C3F970C4(v279, v560, &qword_1EBBBF8A0);
      unsigned int v281 = v154(v280, 1, v153);
      uint64_t v282 = v604;
      if (v281 == 1)
      {
        sub_1C3F962E0(v280, &qword_1EBBBF8A0);
        uint64_t v283 = v607;
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v283 = v607;
        if (EnumCaseMultiPayload == 11)
        {
          uint64_t v462 = v570;
          sub_1C3F8ADE0(v280, v570, type metadata accessor for Proto_TaggedValue);
          uint64_t v463 = v631;
LABEL_158:
          uint64_t v491 = *(int *)(v463 + 20);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for Proto_TaggedValue._StorageClass(0);
            swift_allocObject();
            uint64_t v492 = swift_retain();
            uint64_t v462 = v570;
            *(void *)(v462 + v491) = sub_1C4400A40(v492);
            swift_release();
          }
          uint64_t v493 = *(void *)(v462 + v491);
          uint64_t v494 = v608;
          sub_1C3F8ADE0(v594, v608, type metadata accessor for Proto_Value);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v283 + 56))(v494, 0, 1, v277);
          uint64_t v495 = v609;
          sub_1C4124B88(v494, v609);
          uint64_t v496 = v493
               + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
          swift_beginAccess();
          swift_retain();
          sub_1C4124BF0(v495, v496);
          swift_endAccess();
          swift_release();
          sub_1C43F0970(v462);
          swift_endAccess();
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v282 + 8))(v606, v640);
        }
        sub_1C3F8B288(v280, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v462 = v570;
      sub_1C4496888();
      uint64_t v463 = v631;
      uint64_t v490 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v463 = v631;
      }
      *(void *)(v462 + v490) = qword_1EA39AF60;
      swift_retain();
      goto LABEL_158;
    case 2u:
      uint64_t v155 = v634;
      (*(void (**)(char *, char *, uint64_t))(v617 + 32))(v624, v142, v634);
      uint64_t v156 = v633 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v157 = *(void *)(v156 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v158 = v579;
      sub_1C3F970C4(v157, v579, &qword_1EBBBF8A0);
      uint64_t v159 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v160 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v159 - 8) + 48);
      if (v160(v158, 1, v159) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v158, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v218 = v158;
          uint64_t v219 = v576;
          sub_1C3F8ADE0(v218, v576, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v220 = v631;
          goto LABEL_63;
        }
        swift_retain();
        sub_1C3F8B288(v158, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v219 = v576;
      sub_1C4496888();
      uint64_t v220 = v631;
      uint64_t v284 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v220 = v631;
      }
      *(void *)(v219 + v284) = qword_1EA39AF60;
      swift_retain();
LABEL_63:
      uint64_t v285 = *(int *)(v220 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v286 = swift_retain();
        *(void *)(v219 + v285) = sub_1C4400A40(v286);
        swift_release();
      }
      uint64_t v287 = *(void *)(v219 + v285);
      swift_beginAccess();
      *(void *)(v287 + 16) = 2;
      sub_1C43F0970(v219);
      uint64_t v288 = swift_endAccess();
      MEMORY[0x1F4188790](v288);
      uint64_t v289 = v640;
      *(&v545 - 20) = v553;
      *(&v545 - 19) = v289;
      uint64_t v290 = v636;
      *(&v545 - 18) = v155;
      *(&v545 - 17) = v290;
      uint64_t v291 = v637;
      *(&v545 - 16) = v641;
      *(&v545 - 15) = v291;
      uint64_t v292 = v639;
      *(&v545 - 14) = v638;
      *(&v545 - 13) = v292;
      uint64_t v293 = v610;
      *(&v545 - 12) = v660;
      *(&v545 - 11) = v293;
      uint64_t v294 = v546;
      *(&v545 - 10) = v611;
      *(&v545 - 9) = v294;
      uint64_t v295 = v548;
      *(&v545 - 8) = v547;
      *(&v545 - 7) = v295;
      uint64_t v296 = v550;
      *(&v545 - 6) = v549;
      *(&v545 - 5) = v296;
      uint64_t v297 = v552;
      *(&v545 - 4) = v551;
      *(&v545 - 3) = v297;
      uint64_t v298 = v635;
      *(&v545 - 2) = (uint64_t)v624;
      *(&v545 - 1) = v298;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C3030, v597);
      v629 = 0;
      swift_beginAccess();
      uint64_t v299 = v632;
      uint64_t v300 = *(void *)(v156 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v301 = v561;
      sub_1C3F970C4(v300, v561, &qword_1EBBBF8A0);
      if (v160(v301, 1, v159) == 1)
      {
        sub_1C3F962E0(v301, &qword_1EBBBF8A0);
        uint64_t v302 = v608;
        uint64_t v303 = v607;
        uint64_t v304 = v597;
      }
      else
      {
        int v464 = swift_getEnumCaseMultiPayload();
        uint64_t v302 = v608;
        uint64_t v303 = v607;
        uint64_t v304 = v597;
        if (v464 == 11)
        {
          uint64_t v465 = v569;
          sub_1C3F8ADE0(v301, v569, type metadata accessor for Proto_TaggedValue);
          uint64_t v466 = v631;
          goto LABEL_165;
        }
        sub_1C3F8B288(v301, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v465 = v569;
      sub_1C4496888();
      uint64_t v466 = v631;
      uint64_t v497 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v466 = v631;
      }
      *(void *)(v465 + v497) = qword_1EA39AF60;
      swift_retain();
LABEL_165:
      uint64_t v498 = *(int *)(v466 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v499 = swift_retain();
        uint64_t v465 = v569;
        uint64_t v500 = sub_1C4400A40(v499);
        uint64_t v304 = v597;
        *(void *)(v465 + v498) = v500;
        swift_release();
      }
      uint64_t v501 = *(void *)(v465 + v498);
      sub_1C3F8ADE0(v304, v302, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v303 + 56))(v302, 0, 1, v299);
      uint64_t v502 = v609;
      sub_1C4124B88(v302, v609);
      uint64_t v503 = v501
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v502, v503);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v465);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v617 + 8))(v624, v155);
    case 3u:
      v629 = 0;
      (*(void (**)(char *, char *, uint64_t, char *, uint64_t, char *))(v605 + 32))(v625, v142, v636, v624, v616, v623);
      uint64_t v161 = v633 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v162 = *(void *)(v161 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v163 = v162;
      uint64_t v164 = v581;
      sub_1C3F970C4(v163, v581, &qword_1EBBBF8A0);
      uint64_t v165 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v166 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v165 - 8) + 48);
      int v167 = v166(v164, 1, v165);
      uint64_t v168 = v553;
      if (v167 == 1)
      {
        swift_retain();
        sub_1C3F962E0(v164, &qword_1EBBBF8A0);
        uint64_t v169 = v635;
      }
      else
      {
        int v221 = swift_getEnumCaseMultiPayload();
        uint64_t v169 = v635;
        if (v221 == 11)
        {
          uint64_t v222 = v599;
          sub_1C3F8ADE0(v164, v599, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v223 = v631;
          goto LABEL_71;
        }
        swift_retain();
        sub_1C3F8B288(v164, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v222 = v599;
      sub_1C4496888();
      uint64_t v223 = v631;
      uint64_t v305 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v223 = v631;
      }
      *(void *)(v222 + v305) = qword_1EA39AF60;
      swift_retain();
LABEL_71:
      uint64_t v306 = *(int *)(v223 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v307 = swift_retain();
        uint64_t v308 = sub_1C4400A40(v307);
        uint64_t v222 = v599;
        *(void *)(v599 + v306) = v308;
        swift_release();
      }
      uint64_t v309 = *(void *)(v222 + v306);
      swift_beginAccess();
      *(void *)(v309 + 16) = 3;
      sub_1C43F0970(v222);
      uint64_t v310 = swift_endAccess();
      MEMORY[0x1F4188790](v310);
      uint64_t v311 = v640;
      *(&v545 - 20) = v168;
      *(&v545 - 19) = v311;
      uint64_t v312 = v636;
      *(&v545 - 18) = v634;
      *(&v545 - 17) = v312;
      uint64_t v313 = v637;
      *(&v545 - 16) = v641;
      *(&v545 - 15) = v313;
      uint64_t v314 = v639;
      *(&v545 - 14) = v638;
      *(&v545 - 13) = v314;
      uint64_t v315 = v610;
      *(&v545 - 12) = v660;
      *(&v545 - 11) = v315;
      uint64_t v316 = v546;
      *(&v545 - 10) = v611;
      *(&v545 - 9) = v316;
      uint64_t v317 = v548;
      *(&v545 - 8) = v547;
      *(&v545 - 7) = v317;
      uint64_t v318 = v550;
      *(&v545 - 6) = v549;
      *(&v545 - 5) = v318;
      uint64_t v319 = v552;
      *(&v545 - 4) = v551;
      *(&v545 - 3) = v319;
      uint64_t v320 = v625;
      *(&v545 - 2) = (uint64_t)v625;
      *(&v545 - 1) = v169;
      uint64_t v321 = v629;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2FE8, v595);
      if (v321)
      {
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v605 + 8))(v320, v312);
      }
      v629 = 0;
      swift_beginAccess();
      uint64_t v322 = v632;
      uint64_t v323 = *(void *)(v161 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v324 = v323;
      uint64_t v325 = v562;
      sub_1C3F970C4(v324, v562, &qword_1EBBBF8A0);
      int v326 = v166(v325, 1, v165);
      uint64_t v327 = v605;
      if (v326 == 1)
      {
        sub_1C3F962E0(v325, &qword_1EBBBF8A0);
        uint64_t v328 = v609;
        uint64_t v329 = v608;
        uint64_t v330 = v607;
      }
      else
      {
        int v467 = swift_getEnumCaseMultiPayload();
        uint64_t v328 = v609;
        uint64_t v329 = v608;
        uint64_t v330 = v607;
        if (v467 == 11)
        {
          uint64_t v468 = v571;
          sub_1C3F8ADE0(v325, v571, type metadata accessor for Proto_TaggedValue);
          uint64_t v469 = v631;
          goto LABEL_172;
        }
        sub_1C3F8B288(v325, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v468 = v571;
      sub_1C4496888();
      uint64_t v469 = v631;
      uint64_t v504 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v469 = v631;
      }
      *(void *)(v468 + v504) = qword_1EA39AF60;
      swift_retain();
LABEL_172:
      uint64_t v505 = *(int *)(v469 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v506 = swift_retain();
        uint64_t v507 = sub_1C4400A40(v506);
        uint64_t v468 = v571;
        *(void *)(v571 + v505) = v507;
        swift_release();
      }
      uint64_t v508 = *(void *)(v468 + v505);
      sub_1C3F8ADE0(v595, v329, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v330 + 56))(v329, 0, 1, v322);
      sub_1C4124B88(v329, v328);
      uint64_t v509 = v508
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v328, v509);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v468);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v327 + 8))(v625, v636);
    case 4u:
      (*(void (**)(char *, char *, uint64_t, char *, uint64_t, char *, char *))(v618 + 32))(v626, v142, v641, v624, v616, v623, v625);
      uint64_t v170 = v633 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v171 = *(void *)(v170 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v172 = v171;
      uint64_t v173 = v582;
      sub_1C3F970C4(v172, v582, &qword_1EBBBF8A0);
      uint64_t v174 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v175 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v174 - 8) + 48);
      if (v175(v173, 1, v174) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v173, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v224 = v574;
          sub_1C3F8ADE0(v173, v574, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v225 = v631;
          goto LABEL_81;
        }
        swift_retain();
        sub_1C3F8B288(v173, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v224 = v574;
      sub_1C4496888();
      uint64_t v225 = v631;
      uint64_t v331 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v225 = v631;
      }
      *(void *)(v224 + v331) = qword_1EA39AF60;
      swift_retain();
LABEL_81:
      uint64_t v332 = *(int *)(v225 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v333 = swift_retain();
        *(void *)(v224 + v332) = sub_1C4400A40(v333);
        swift_release();
      }
      uint64_t v334 = *(void *)(v224 + v332);
      swift_beginAccess();
      *(void *)(v334 + 16) = 4;
      sub_1C43F0970(v224);
      uint64_t v335 = swift_endAccess();
      MEMORY[0x1F4188790](v335);
      uint64_t v336 = v640;
      *(&v545 - 20) = v553;
      *(&v545 - 19) = v336;
      uint64_t v337 = v636;
      *(&v545 - 18) = v634;
      *(&v545 - 17) = v337;
      uint64_t v338 = v637;
      *(&v545 - 16) = v641;
      *(&v545 - 15) = v338;
      uint64_t v339 = v639;
      *(&v545 - 14) = v638;
      *(&v545 - 13) = v339;
      uint64_t v340 = v610;
      *(&v545 - 12) = v660;
      *(&v545 - 11) = v340;
      uint64_t v341 = v546;
      *(&v545 - 10) = v611;
      *(&v545 - 9) = v341;
      uint64_t v342 = v548;
      *(&v545 - 8) = v547;
      *(&v545 - 7) = v342;
      uint64_t v343 = v550;
      *(&v545 - 6) = v549;
      *(&v545 - 5) = v343;
      uint64_t v344 = v552;
      *(&v545 - 4) = v551;
      *(&v545 - 3) = v344;
      uint64_t v345 = v635;
      *(&v545 - 2) = (uint64_t)v626;
      *(&v545 - 1) = v345;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2FA0, v588);
      v629 = 0;
      swift_beginAccess();
      uint64_t v346 = v632;
      uint64_t v347 = *(void *)(v170 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v348 = v347;
      uint64_t v349 = v563;
      sub_1C3F970C4(v348, v563, &qword_1EBBBF8A0);
      if (v175(v349, 1, v174) == 1)
      {
        sub_1C3F962E0(v349, &qword_1EBBBF8A0);
        uint64_t v350 = v609;
        uint64_t v351 = v608;
        uint64_t v352 = v607;
        uint64_t v353 = v588;
      }
      else
      {
        int v470 = swift_getEnumCaseMultiPayload();
        uint64_t v350 = v609;
        uint64_t v351 = v608;
        uint64_t v352 = v607;
        uint64_t v353 = v588;
        if (v470 == 11)
        {
          uint64_t v471 = v572;
          sub_1C3F8ADE0(v349, v572, type metadata accessor for Proto_TaggedValue);
          uint64_t v472 = v631;
          goto LABEL_179;
        }
        sub_1C3F8B288(v349, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v471 = v572;
      sub_1C4496888();
      uint64_t v472 = v631;
      uint64_t v510 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v472 = v631;
      }
      *(void *)(v471 + v510) = qword_1EA39AF60;
      swift_retain();
LABEL_179:
      uint64_t v511 = *(int *)(v472 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v512 = swift_retain();
        uint64_t v513 = sub_1C4400A40(v512);
        uint64_t v471 = v572;
        *(void *)(v572 + v511) = v513;
        swift_release();
      }
      uint64_t v514 = *(void *)(v471 + v511);
      sub_1C3F8ADE0(v353, v351, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v352 + 56))(v351, 0, 1, v346);
      sub_1C4124B88(v351, v350);
      uint64_t v515 = v514
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v350, v515);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v471);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v618 + 8))(v626, v641);
    case 5u:
      (*(void (**)(char *, char *, uint64_t, char *, uint64_t, char *, char *))(v619 + 32))(v627, v142, v637, v624, v616, v623, v625);
      uint64_t v176 = v633 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v177 = *(void *)(v176 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v178 = v583;
      sub_1C3F970C4(v177, v583, &qword_1EBBBF8A0);
      uint64_t v179 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v180 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v179 - 8) + 48);
      int v181 = v180(v178, 1, v179);
      uint64_t v182 = v553;
      if (v181 == 1)
      {
        swift_retain();
        sub_1C3F962E0(v178, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v226 = v178;
          uint64_t v227 = v580;
          sub_1C3F8ADE0(v226, v580, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v228 = v631;
          goto LABEL_89;
        }
        swift_retain();
        sub_1C3F8B288(v178, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v227 = v580;
      sub_1C4496888();
      uint64_t v228 = v631;
      uint64_t v354 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v228 = v631;
      }
      *(void *)(v227 + v354) = qword_1EA39AF60;
      swift_retain();
LABEL_89:
      uint64_t v355 = *(int *)(v228 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v356 = swift_retain();
        *(void *)(v227 + v355) = sub_1C4400A40(v356);
        swift_release();
      }
      uint64_t v357 = *(void *)(v227 + v355);
      swift_beginAccess();
      *(void *)(v357 + 16) = 5;
      sub_1C43F0970(v227);
      uint64_t v358 = swift_endAccess();
      MEMORY[0x1F4188790](v358);
      uint64_t v359 = v640;
      *(&v545 - 20) = v182;
      *(&v545 - 19) = v359;
      uint64_t v360 = v636;
      *(&v545 - 18) = v634;
      *(&v545 - 17) = v360;
      uint64_t v361 = v637;
      *(&v545 - 16) = v641;
      *(&v545 - 15) = v361;
      uint64_t v362 = v639;
      *(&v545 - 14) = v638;
      *(&v545 - 13) = v362;
      uint64_t v363 = v610;
      *(&v545 - 12) = v660;
      *(&v545 - 11) = v363;
      uint64_t v364 = v546;
      *(&v545 - 10) = v611;
      *(&v545 - 9) = v364;
      uint64_t v365 = v548;
      *(&v545 - 8) = v547;
      *(&v545 - 7) = v365;
      uint64_t v366 = v550;
      *(&v545 - 6) = v549;
      *(&v545 - 5) = v366;
      uint64_t v367 = v552;
      *(&v545 - 4) = v551;
      *(&v545 - 3) = v367;
      uint64_t v368 = v635;
      *(&v545 - 2) = (uint64_t)v627;
      *(&v545 - 1) = v368;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2F58, v589);
      swift_beginAccess();
      uint64_t v369 = *(void *)(v176 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v370 = v369;
      uint64_t v371 = v564;
      sub_1C3F970C4(v370, v564, &qword_1EBBBF8A0);
      if (v180(v371, 1, v179) == 1)
      {
        sub_1C3F962E0(v371, &qword_1EBBBF8A0);
        uint64_t v372 = v608;
        uint64_t v373 = v607;
        uint64_t v374 = v589;
        uint64_t v375 = v555;
      }
      else
      {
        int v473 = swift_getEnumCaseMultiPayload();
        uint64_t v372 = v608;
        uint64_t v373 = v607;
        uint64_t v374 = v589;
        uint64_t v375 = v555;
        if (v473 == 11)
        {
          sub_1C3F8ADE0(v371, v555, type metadata accessor for Proto_TaggedValue);
          uint64_t v474 = v631;
          goto LABEL_186;
        }
        sub_1C3F8B288(v371, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v474 = v631;
      uint64_t v516 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v474 = v631;
      }
      *(void *)(v375 + v516) = qword_1EA39AF60;
      swift_retain();
LABEL_186:
      uint64_t v517 = *(int *)(v474 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v518 = swift_retain();
        *(void *)(v375 + v517) = sub_1C4400A40(v518);
        swift_release();
      }
      uint64_t v519 = *(void *)(v375 + v517);
      sub_1C3F8ADE0(v374, v372, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v373 + 56))(v372, 0, 1, v632);
      uint64_t v520 = v609;
      sub_1C4124B88(v372, v609);
      uint64_t v521 = v519
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v520, v521);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v375);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v619 + 8))(v627, v637);
    case 6u:
      (*(void (**)(char *, char *, uint64_t, char *, uint64_t, char *, char *))(v620 + 32))(v628, v142, v638, v624, v616, v623, v625);
      uint64_t v183 = v633 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v184 = *(void *)(v183 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v185 = v184;
      uint64_t v186 = v584;
      sub_1C3F970C4(v185, v584, &qword_1EBBBF8A0);
      uint64_t v187 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v188 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v187 - 8) + 48);
      if (v188(v186, 1, v187) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v186, &qword_1EBBBF8A0);
        uint64_t v189 = v637;
      }
      else
      {
        int v229 = swift_getEnumCaseMultiPayload();
        uint64_t v189 = v637;
        if (v229 == 11)
        {
          uint64_t v230 = v600;
          sub_1C3F8ADE0(v186, v600, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v231 = v631;
          goto LABEL_97;
        }
        swift_retain();
        sub_1C3F8B288(v186, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v230 = v600;
      sub_1C4496888();
      uint64_t v231 = v631;
      uint64_t v376 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v231 = v631;
      }
      *(void *)(v230 + v376) = qword_1EA39AF60;
      swift_retain();
LABEL_97:
      uint64_t v377 = *(int *)(v231 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v378 = swift_retain();
        uint64_t v379 = sub_1C4400A40(v378);
        uint64_t v230 = v600;
        *(void *)(v600 + v377) = v379;
        swift_release();
      }
      uint64_t v380 = *(void *)(v230 + v377);
      swift_beginAccess();
      *(void *)(v380 + 16) = 6;
      sub_1C43F0970(v230);
      uint64_t v381 = swift_endAccess();
      MEMORY[0x1F4188790](v381);
      uint64_t v382 = v640;
      *(&v545 - 20) = v553;
      *(&v545 - 19) = v382;
      uint64_t v383 = v636;
      *(&v545 - 18) = v634;
      *(&v545 - 17) = v383;
      *(&v545 - 16) = v641;
      *(&v545 - 15) = v189;
      uint64_t v384 = v639;
      *(&v545 - 14) = v638;
      *(&v545 - 13) = v384;
      uint64_t v385 = v610;
      *(&v545 - 12) = v660;
      *(&v545 - 11) = v385;
      uint64_t v386 = v546;
      *(&v545 - 10) = v611;
      *(&v545 - 9) = v386;
      uint64_t v387 = v548;
      *(&v545 - 8) = v547;
      *(&v545 - 7) = v387;
      uint64_t v388 = v550;
      *(&v545 - 6) = v549;
      *(&v545 - 5) = v388;
      uint64_t v389 = v552;
      *(&v545 - 4) = v551;
      *(&v545 - 3) = v389;
      uint64_t v390 = v635;
      *(&v545 - 2) = (uint64_t)v628;
      *(&v545 - 1) = v390;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2F10, v590);
      swift_beginAccess();
      uint64_t v391 = *(void *)(v183 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v392 = v391;
      uint64_t v393 = v565;
      sub_1C3F970C4(v392, v565, &qword_1EBBBF8A0);
      if (v188(v393, 1, v187) == 1)
      {
        sub_1C3F962E0(v393, &qword_1EBBBF8A0);
        uint64_t v394 = v609;
        uint64_t v395 = v608;
        uint64_t v396 = v607;
        uint64_t v397 = v590;
        uint64_t v398 = v556;
      }
      else
      {
        int v475 = swift_getEnumCaseMultiPayload();
        uint64_t v394 = v609;
        uint64_t v395 = v608;
        uint64_t v396 = v607;
        uint64_t v397 = v590;
        uint64_t v398 = v556;
        if (v475 == 11)
        {
          sub_1C3F8ADE0(v393, v556, type metadata accessor for Proto_TaggedValue);
          uint64_t v476 = v631;
          goto LABEL_193;
        }
        sub_1C3F8B288(v393, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v476 = v631;
      uint64_t v522 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v476 = v631;
      }
      *(void *)(v398 + v522) = qword_1EA39AF60;
      swift_retain();
LABEL_193:
      uint64_t v523 = *(int *)(v476 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v524 = swift_retain();
        *(void *)(v398 + v523) = sub_1C4400A40(v524);
        swift_release();
      }
      uint64_t v525 = *(void *)(v398 + v523);
      sub_1C3F8ADE0(v397, v395, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v396 + 56))(v395, 0, 1, v632);
      sub_1C4124B88(v395, v394);
      uint64_t v526 = v525
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v394, v526);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v398);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v620 + 8))(v628, v638);
    case 7u:
      (*(void (**)(char *, char *, uint64_t, char *, uint64_t, char *, char *))(v621 + 32))(v629, v142, v639, v624, v616, v623, v625);
      uint64_t v190 = v633 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v191 = *(void *)(v190 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v192 = v191;
      uint64_t v193 = v585;
      sub_1C3F970C4(v192, v585, &qword_1EBBBF8A0);
      uint64_t v194 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v195 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v194 - 8) + 48);
      if (v195(v193, 1, v194) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v193, &qword_1EBBBF8A0);
        uint64_t v196 = v638;
      }
      else
      {
        int v232 = swift_getEnumCaseMultiPayload();
        uint64_t v196 = v638;
        if (v232 == 11)
        {
          uint64_t v233 = v601;
          sub_1C3F8ADE0(v193, v601, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v234 = v631;
          goto LABEL_105;
        }
        swift_retain();
        sub_1C3F8B288(v193, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v233 = v601;
      sub_1C4496888();
      uint64_t v234 = v631;
      uint64_t v399 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v234 = v631;
      }
      *(void *)(v233 + v399) = qword_1EA39AF60;
      swift_retain();
LABEL_105:
      uint64_t v400 = *(int *)(v234 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v401 = swift_retain();
        uint64_t v402 = sub_1C4400A40(v401);
        uint64_t v233 = v601;
        *(void *)(v601 + v400) = v402;
        swift_release();
      }
      uint64_t v403 = *(void *)(v233 + v400);
      swift_beginAccess();
      *(void *)(v403 + 16) = 7;
      sub_1C43F0970(v233);
      uint64_t v404 = swift_endAccess();
      MEMORY[0x1F4188790](v404);
      uint64_t v405 = v640;
      *(&v545 - 20) = v553;
      *(&v545 - 19) = v405;
      uint64_t v406 = v636;
      *(&v545 - 18) = v634;
      *(&v545 - 17) = v406;
      uint64_t v407 = v637;
      *(&v545 - 16) = v641;
      *(&v545 - 15) = v407;
      *(&v545 - 14) = v196;
      uint64_t v408 = v660;
      *(&v545 - 13) = v639;
      *(&v545 - 12) = v408;
      uint64_t v409 = v611;
      *(&v545 - 11) = v610;
      *(&v545 - 10) = v409;
      uint64_t v410 = v547;
      *(&v545 - 9) = v546;
      *(&v545 - 8) = v410;
      uint64_t v411 = v549;
      *(&v545 - 7) = v548;
      *(&v545 - 6) = v411;
      uint64_t v412 = v551;
      *(&v545 - 5) = v550;
      *(&v545 - 4) = v412;
      uint64_t v413 = v629;
      *(&v545 - 3) = v552;
      *(&v545 - 2) = (uint64_t)v413;
      *(&v545 - 1) = v635;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2EC8, v591);
      swift_beginAccess();
      uint64_t v414 = *(void *)(v190 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v415 = v414;
      uint64_t v416 = v567;
      sub_1C3F970C4(v415, v567, &qword_1EBBBF8A0);
      if (v195(v416, 1, v194) == 1)
      {
        sub_1C3F962E0(v416, &qword_1EBBBF8A0);
        uint64_t v417 = v609;
        uint64_t v418 = v608;
        uint64_t v419 = v607;
        uint64_t v420 = v591;
        uint64_t v421 = v558;
      }
      else
      {
        int v477 = swift_getEnumCaseMultiPayload();
        uint64_t v417 = v609;
        uint64_t v418 = v608;
        uint64_t v419 = v607;
        uint64_t v420 = v591;
        uint64_t v421 = v558;
        if (v477 == 11)
        {
          sub_1C3F8ADE0(v416, v558, type metadata accessor for Proto_TaggedValue);
          uint64_t v478 = v631;
          goto LABEL_200;
        }
        sub_1C3F8B288(v416, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      sub_1C4496888();
      uint64_t v478 = v631;
      uint64_t v527 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v478 = v631;
      }
      *(void *)(v421 + v527) = qword_1EA39AF60;
      swift_retain();
LABEL_200:
      uint64_t v528 = *(int *)(v478 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v529 = swift_retain();
        *(void *)(v421 + v528) = sub_1C4400A40(v529);
        swift_release();
      }
      uint64_t v530 = *(void *)(v421 + v528);
      sub_1C3F8ADE0(v420, v418, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v419 + 56))(v418, 0, 1, v632);
      sub_1C4124B88(v418, v417);
      uint64_t v531 = v530
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v417, v531);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v421);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v621 + 8))(v629, v639);
    case 8u:
      (*(void (**)(char *, char *, uint64_t, char *, uint64_t, char *, char *))(v622 + 32))(v630, v142, v660, v624, v616, v623, v625);
      uint64_t v197 = v633 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v198 = *(void *)(v197 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v199 = v198;
      uint64_t v200 = v586;
      sub_1C3F970C4(v199, v586, &qword_1EBBBF8A0);
      uint64_t v201 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v202 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v201 - 8) + 48);
      if (v202(v200, 1, v201) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v200, &qword_1EBBBF8A0);
        uint64_t v203 = v639;
      }
      else
      {
        int v235 = swift_getEnumCaseMultiPayload();
        uint64_t v203 = v639;
        if (v235 == 11)
        {
          uint64_t v236 = v602;
          sub_1C3F8ADE0(v200, v602, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v237 = v631;
          goto LABEL_113;
        }
        swift_retain();
        sub_1C3F8B288(v200, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v236 = v602;
      sub_1C4496888();
      uint64_t v237 = v631;
      uint64_t v422 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v237 = v631;
      }
      *(void *)(v236 + v422) = qword_1EA39AF60;
      swift_retain();
LABEL_113:
      uint64_t v423 = *(int *)(v237 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v424 = swift_retain();
        uint64_t v425 = sub_1C4400A40(v424);
        uint64_t v236 = v602;
        *(void *)(v602 + v423) = v425;
        swift_release();
      }
      uint64_t v426 = *(void *)(v236 + v423);
      swift_beginAccess();
      *(void *)(v426 + 16) = 8;
      sub_1C43F0970(v236);
      uint64_t v427 = swift_endAccess();
      MEMORY[0x1F4188790](v427);
      uint64_t v428 = v640;
      *(&v545 - 20) = v553;
      *(&v545 - 19) = v428;
      uint64_t v429 = v636;
      *(&v545 - 18) = v634;
      *(&v545 - 17) = v429;
      uint64_t v430 = v637;
      *(&v545 - 16) = v641;
      *(&v545 - 15) = v430;
      *(&v545 - 14) = v638;
      *(&v545 - 13) = v203;
      uint64_t v431 = v610;
      *(&v545 - 12) = v660;
      *(&v545 - 11) = v431;
      uint64_t v432 = v546;
      *(&v545 - 10) = v611;
      *(&v545 - 9) = v432;
      uint64_t v433 = v548;
      *(&v545 - 8) = v547;
      *(&v545 - 7) = v433;
      uint64_t v434 = v550;
      *(&v545 - 6) = v549;
      *(&v545 - 5) = v434;
      uint64_t v435 = v552;
      *(&v545 - 4) = v551;
      *(&v545 - 3) = v435;
      uint64_t v436 = v635;
      *(&v545 - 2) = (uint64_t)v630;
      *(&v545 - 1) = v436;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C2E80, v592);
      v629 = 0;
      swift_beginAccess();
      uint64_t v437 = *(void *)(v197 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v438 = v437;
      uint64_t v439 = v568;
      sub_1C3F970C4(v438, v568, &qword_1EBBBF8A0);
      if (v202(v439, 1, v201) == 1)
      {
        sub_1C3F962E0(v439, &qword_1EBBBF8A0);
        uint64_t v440 = v609;
        uint64_t v441 = v608;
        uint64_t v442 = v607;
        uint64_t v443 = v660;
        uint64_t v444 = v592;
      }
      else
      {
        int v479 = swift_getEnumCaseMultiPayload();
        uint64_t v440 = v609;
        uint64_t v441 = v608;
        uint64_t v442 = v607;
        uint64_t v443 = v660;
        uint64_t v444 = v592;
        if (v479 == 11)
        {
          uint64_t v480 = v573;
          sub_1C3F8ADE0(v439, v573, type metadata accessor for Proto_TaggedValue);
          uint64_t v481 = v631;
          goto LABEL_207;
        }
        sub_1C3F8B288(v439, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v480 = v573;
      sub_1C4496888();
      uint64_t v481 = v631;
      uint64_t v532 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v481 = v631;
      }
      *(void *)(v480 + v532) = qword_1EA39AF60;
      swift_retain();
LABEL_207:
      uint64_t v533 = *(int *)(v481 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v534 = swift_retain();
        uint64_t v535 = sub_1C4400A40(v534);
        uint64_t v480 = v573;
        *(void *)(v573 + v533) = v535;
        swift_release();
      }
      uint64_t v536 = *(void *)(v480 + v533);
      sub_1C3F8ADE0(v444, v441, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v442 + 56))(v441, 0, 1, v632);
      sub_1C4124B88(v441, v440);
      uint64_t v537 = v536
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v440, v537);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v480);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v622 + 8))(v630, v443);
    case 9u:
      v629 = 0;
      uint64_t v205 = *(void *)v142;
      uint64_t v204 = *((void *)v142 + 1);
      uint64_t v206 = v633 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v207 = *(void *)(v206 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v208 = v207;
      uint64_t v209 = v587;
      sub_1C3F970C4(v208, v587, &qword_1EBBBF8A0);
      uint64_t v210 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v211 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v210 - 8) + 48);
      if (v211(v209, 1, v210) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v209, &qword_1EBBBF8A0);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 11)
        {
          uint64_t v238 = v603;
          sub_1C3F8ADE0(v209, v603, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v239 = v631;
          goto LABEL_121;
        }
        swift_retain();
        sub_1C3F8B288(v209, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v445 = v603;
      sub_1C4496888();
      uint64_t v239 = v631;
      uint64_t v446 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v239 = v631;
      }
      *(void *)(v445 + v446) = qword_1EA39AF60;
      swift_retain();
      uint64_t v238 = v445;
LABEL_121:
      uint64_t v447 = *(int *)(v239 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v448 = swift_retain();
        uint64_t v449 = sub_1C4400A40(v448);
        uint64_t v238 = v603;
        *(void *)(v603 + v447) = v449;
        swift_release();
      }
      uint64_t v450 = *(void *)(v238 + v447);
      swift_beginAccess();
      *(void *)(v450 + 16) = v205;
      sub_1C43F0970(v238);
      swift_endAccess();
      swift_retain();
      uint64_t v451 = swift_retain();
      uint64_t v452 = v629;
      sub_1C400B83C(v451, v204, v451, v596);
      if (v452)
      {
        swift_release();
        return swift_release();
      }
      swift_beginAccess();
      uint64_t v453 = *(void *)(v206 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v454 = v453;
      uint64_t v455 = v566;
      sub_1C3F970C4(v454, v566, &qword_1EBBBF8A0);
      if (v211(v455, 1, v210) == 1)
      {
        sub_1C3F962E0(v455, &qword_1EBBBF8A0);
        uint64_t v456 = v607;
        uint64_t v457 = v632;
        uint64_t v458 = v557;
      }
      else
      {
        int v482 = swift_getEnumCaseMultiPayload();
        uint64_t v456 = v607;
        uint64_t v458 = v557;
        if (v482 == 11)
        {
          sub_1C3F8ADE0(v455, v557, type metadata accessor for Proto_TaggedValue);
          uint64_t v457 = v632;
          uint64_t v483 = v631;
          goto LABEL_214;
        }
        sub_1C3F8B288(v455, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        uint64_t v457 = v632;
      }
      sub_1C4496888();
      uint64_t v483 = v631;
      uint64_t v538 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v483 = v631;
      }
      *(void *)(v458 + v538) = qword_1EA39AF60;
      swift_retain();
LABEL_214:
      uint64_t v539 = *(int *)(v483 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v540 = swift_retain();
        *(void *)(v458 + v539) = sub_1C4400A40(v540);
        swift_release();
      }
      uint64_t v541 = *(void *)(v458 + v539);
      uint64_t v542 = v608;
      sub_1C3F8ADE0(v596, v608, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v456 + 56))(v542, 0, 1, v457);
      uint64_t v543 = v609;
      sub_1C4124B88(v542, v609);
      uint64_t v544 = v541
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v543, v544);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v458);
      swift_endAccess();
      swift_release();
      return swift_release();
    default:
      (*(void (**)(char *, char *, uint64_t, char *))(v616 + 32))(v623, v142, v553, v624);
      uint64_t v143 = v633 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_beginAccess();
      uint64_t v144 = *(void *)(v143 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v145 = v144;
      uint64_t v146 = v577;
      sub_1C3F970C4(v145, v577, &qword_1EBBBF8A0);
      uint64_t v147 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
      uint64_t v148 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v147 - 8) + 48);
      if (v148(v146, 1, v147) == 1)
      {
        swift_retain();
        sub_1C3F962E0(v146, &qword_1EBBBF8A0);
        uint64_t v149 = v636;
      }
      else
      {
        int v212 = swift_getEnumCaseMultiPayload();
        uint64_t v149 = v636;
        if (v212 == 11)
        {
          uint64_t v213 = v598;
          sub_1C3F8ADE0(v146, v598, type metadata accessor for Proto_TaggedValue);
          swift_retain();
          uint64_t v214 = v631;
          goto LABEL_47;
        }
        swift_retain();
        sub_1C3F8B288(v146, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
      }
      uint64_t v213 = v598;
      sub_1C4496888();
      uint64_t v214 = v631;
      uint64_t v240 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v214 = v631;
      }
      *(void *)(v213 + v240) = qword_1EA39AF60;
      swift_retain();
LABEL_47:
      uint64_t v241 = *(int *)(v214 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v242 = swift_retain();
        uint64_t v243 = sub_1C4400A40(v242);
        uint64_t v213 = v598;
        *(void *)(v598 + v241) = v243;
        swift_release();
      }
      uint64_t v244 = *(void *)(v213 + v241);
      swift_beginAccess();
      *(void *)(v244 + 16) = 0;
      sub_1C43F0970(v213);
      uint64_t v245 = swift_endAccess();
      MEMORY[0x1F4188790](v245);
      uint64_t v246 = v640;
      *(&v545 - 20) = v553;
      *(&v545 - 19) = v246;
      *(&v545 - 18) = v634;
      *(&v545 - 17) = v149;
      uint64_t v247 = v637;
      *(&v545 - 16) = v641;
      *(&v545 - 15) = v247;
      uint64_t v248 = v639;
      *(&v545 - 14) = v638;
      *(&v545 - 13) = v248;
      uint64_t v249 = v610;
      *(&v545 - 12) = v660;
      *(&v545 - 11) = v249;
      uint64_t v250 = v546;
      *(&v545 - 10) = v611;
      *(&v545 - 9) = v250;
      uint64_t v251 = v548;
      *(&v545 - 8) = v547;
      *(&v545 - 7) = v251;
      uint64_t v252 = v550;
      *(&v545 - 6) = v549;
      *(&v545 - 5) = v252;
      uint64_t v253 = v552;
      *(&v545 - 4) = v551;
      *(&v545 - 3) = v253;
      uint64_t v254 = v635;
      *(&v545 - 2) = (uint64_t)v623;
      *(&v545 - 1) = v254;
      sub_1C3F6DC00((void (*)(uint64_t))sub_1C41C30C0, v593);
      swift_beginAccess();
      uint64_t v255 = v632;
      uint64_t v256 = *(void *)(v143 + *(int *)(v632 + 20))
           + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v257 = v256;
      uint64_t v258 = v559;
      sub_1C3F970C4(v257, v559, &qword_1EBBBF8A0);
      if (v148(v258, 1, v147) == 1)
      {
        sub_1C3F962E0(v258, &qword_1EBBBF8A0);
        uint64_t v259 = v609;
        uint64_t v260 = v607;
        uint64_t v261 = v554;
      }
      else
      {
        int v459 = swift_getEnumCaseMultiPayload();
        uint64_t v260 = v607;
        uint64_t v261 = v554;
        if (v459 == 11)
        {
          sub_1C3F8ADE0(v258, v554, type metadata accessor for Proto_TaggedValue);
          uint64_t v259 = v609;
          uint64_t v460 = v631;
          goto LABEL_151;
        }
        sub_1C3F8B288(v258, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        uint64_t v259 = v609;
      }
      sub_1C4496888();
      uint64_t v460 = v631;
      uint64_t v484 = *(int *)(v631 + 20);
      if (qword_1EA39AF70 != -1)
      {
        swift_once();
        uint64_t v460 = v631;
      }
      *(void *)(v261 + v484) = qword_1EA39AF60;
      swift_retain();
LABEL_151:
      uint64_t v485 = *(int *)(v460 + 20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for Proto_TaggedValue._StorageClass(0);
        swift_allocObject();
        uint64_t v486 = swift_retain();
        *(void *)(v261 + v485) = sub_1C4400A40(v486);
        swift_release();
      }
      uint64_t v487 = *(void *)(v261 + v485);
      uint64_t v488 = v608;
      sub_1C3F8ADE0(v593, v608, type metadata accessor for Proto_Value);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v260 + 56))(v488, 0, 1, v255);
      sub_1C4124B88(v488, v259);
      uint64_t v489 = v487
           + OBJC_IVAR____TtCV9Coherence17Proto_TaggedValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__wrapped;
      swift_beginAccess();
      swift_retain();
      sub_1C4124BF0(v259, v489);
      swift_endAccess();
      swift_release();
      sub_1C43F0970(v261);
      swift_endAccess();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v616 + 8))(v623, v553);
  }
}

uint64_t sub_1C41C19C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return TaggedValue_9.init(from:)(a1, a2[2], a2[3], a2[4], a2[5], a2[6], a2[7], a2[8], a3, a2[9], a2[10], a2[11], a2[12], a2[13], a2[14], a2[15], a2[16], a2[17], a2[18],
           a2[19]);
}

uint64_t sub_1C41C1A1C(uint64_t a1, void *a2)
{
  return TaggedValue_9.encode(to:)(a1, a2);
}

uint64_t TaggedValue_9<>.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v98 = a8;
  uint64_t v97 = a7;
  uint64_t v96 = a6;
  uint64_t v95 = a5;
  uint64_t v94 = a4;
  uint64_t v93 = a3;
  uint64_t v100 = a1;
  uint64_t v91 = a11;
  uint64_t v92 = *(void *)(*(void *)(a2 + 80) - 8);
  uint64_t v87 = a10;
  uint64_t v86 = a9;
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  uint64_t v90 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = *(void *)(*(void *)(v13 + 72) - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v85 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = *(void *)(*(void *)(v16 + 64) - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v82 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v19 + 56);
  uint64_t v80 = *(void *)(v20 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v17);
  uint64_t v79 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v23 + 48);
  uint64_t v78 = *(void *)(v24 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v21);
  uint64_t v77 = (char *)&v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(v27 + 40);
  uint64_t v76 = *(void *)(v28 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v25);
  uint64_t v75 = (char *)&v71 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *(void *)(v31 + 32);
  uint64_t v74 = *(void *)(v32 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v29);
  uint64_t v73 = (char *)&v71 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = *(void *)(v35 + 24);
  uint64_t v72 = *(void *)(v36 - 8);
  uint64_t v37 = MEMORY[0x1F4188790](v33);
  uint64_t v39 = (char *)&v71 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = *(void *)(v40 + 16);
  uint64_t v71 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v37);
  uint64_t v43 = (char *)&v71 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = *(void *)(v44 + 152);
  v102[0] = v41;
  v102[1] = v36;
  v102[2] = v32;
  uint64_t v103 = v28;
  uint64_t v104 = v24;
  uint64_t v105 = v20;
  uint64_t v81 = v20;
  uint64_t v84 = v46;
  uint64_t v106 = v46;
  uint64_t v107 = v47;
  uint64_t v89 = v47;
  uint64_t v99 = v48;
  uint64_t v108 = v48;
  long long v49 = *(_OWORD *)(v44 + 104);
  long long v109 = *(_OWORD *)(v44 + 88);
  long long v110 = v49;
  *(_OWORD *)(v50 + 104) = *(_OWORD *)(v44 + 120);
  *(_OWORD *)(v50 + 120) = *(_OWORD *)(v44 + 136);
  uint64_t v111 = v45;
  uint64_t v51 = type metadata accessor for TaggedValue_9.TaggedEnum();
  MEMORY[0x1F4188790](v51);
  uint64_t v53 = (char *)&v71 - v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))((char *)&v71 - v52, v112, v51);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v57 = v72;
      (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v39, v53, v36);
      sub_1C4497068();
      return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v39, v36);
    case 2u:
      uint64_t v58 = v74;
      uint64_t v59 = v73;
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v73, v53, v32);
      sub_1C4497068();
      return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v59, v32);
    case 3u:
      uint64_t v60 = v76;
      uint64_t v61 = v75;
      (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v75, v53, v28);
      sub_1C4497068();
      return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v61, v28);
    case 4u:
      uint64_t v62 = v78;
      uint64_t v63 = v77;
      (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v77, v53, v24);
      sub_1C4497068();
      return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v63, v24);
    case 5u:
      uint64_t v64 = v80;
      uint64_t v65 = v79;
      uint64_t v66 = v53;
      uint64_t v67 = v81;
      (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v79, v66, v81);
      goto LABEL_11;
    case 6u:
      uint64_t v64 = v83;
      uint64_t v65 = v82;
      uint64_t v68 = v53;
      uint64_t v67 = v84;
      (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v82, v68, v84);
      goto LABEL_11;
    case 7u:
      uint64_t v64 = v88;
      uint64_t v65 = v85;
      uint64_t v69 = v53;
      uint64_t v67 = v89;
      (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v85, v69, v89);
      goto LABEL_11;
    case 8u:
      uint64_t v64 = v92;
      uint64_t v65 = v90;
      uint64_t v70 = v53;
      uint64_t v67 = v99;
      (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v90, v70, v99);
LABEL_11:
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v65, v67);
      break;
    case 9u:
      (*(void (**)(uint64_t *__return_ptr))(**((void **)v53 + 1) + 80))(&v101);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39DE70);
      swift_dynamicCast();
      __swift_project_boxed_opaque_existential_1(v102, v103);
      sub_1C4497068();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      uint64_t result = swift_release();
      break;
    default:
      uint64_t v55 = v71;
      (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v43, v53, v41);
      sub_1C4497068();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v43, v41);
      break;
  }
  return result;
}

uint64_t sub_1C41C24B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TaggedValue_9<>.encode(to:)(a1, a2, *(void *)(a3 - 8), *(void *)(a3 - 16), *(void *)(a3 - 24), *(void *)(a3 - 32), *(void *)(a3 - 40), *(void *)(a3 - 48), *(void *)(a3 - 56), *(void *)(a3 - 64), *(void *)(a3 - 72));
}

uint64_t sub_1C41C24F0()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[5] + 8) + 8) + 16))(v0[7], v0[3]);
}

uint64_t sub_1C41C2538()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[4] + 8) + 8) + 16))(v0[7], v0[2]);
}

uint64_t sub_1C41C2580()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[7] + 8) + 8) + 16))(v0[9], v0[4]);
}

uint64_t sub_1C41C25C8()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[5] + 8) + 8) + 16))(v0[9], v0[2]);
}

uint64_t sub_1C41C2610()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[9] + 8) + 8) + 16))(v0[11], v0[5]);
}

uint64_t sub_1C41C2658()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[8] + 8) + 8) + 16))(v0[11], v0[4]);
}

uint64_t sub_1C41C26A0()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[7] + 8) + 8) + 16))(v0[11], v0[3]);
}

uint64_t sub_1C41C26E8()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[6] + 8) + 8) + 16))(v0[11], v0[2]);
}

uint64_t sub_1C41C2730()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[11] + 8) + 8) + 16))(v0[13], v0[6]);
}

uint64_t sub_1C41C2778()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[10] + 8) + 8) + 16))(v0[13], v0[5]);
}

uint64_t sub_1C41C27C0()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[9] + 8) + 8) + 16))(v0[13], v0[4]);
}

uint64_t sub_1C41C2808()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[8] + 8) + 8) + 16))(v0[13], v0[3]);
}

uint64_t sub_1C41C2850()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[7] + 8) + 8) + 16))(v0[13], v0[2]);
}

uint64_t sub_1C41C2898()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[13] + 8) + 8) + 16))(v0[15], v0[7]);
}

uint64_t sub_1C41C28E0()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[12] + 8) + 8) + 16))(v0[15], v0[6]);
}

uint64_t sub_1C41C2928()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[11] + 8) + 8) + 16))(v0[15], v0[5]);
}

uint64_t sub_1C41C2970()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[10] + 8) + 8) + 16))(v0[15], v0[4]);
}

uint64_t sub_1C41C29B8()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[9] + 8) + 8) + 16))(v0[15], v0[3]);
}

uint64_t sub_1C41C2A00()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[8] + 8) + 8) + 16))(v0[15], v0[2]);
}

uint64_t sub_1C41C2A48()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[15] + 8) + 8) + 16))(v0[17], v0[8]);
}

uint64_t sub_1C41C2A90()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[14] + 8) + 8) + 16))(v0[17], v0[7]);
}

uint64_t sub_1C41C2AD8()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[13] + 8) + 8) + 16))(v0[17], v0[6]);
}

uint64_t sub_1C41C2B20()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[12] + 8) + 8) + 16))(v0[17], v0[5]);
}

uint64_t sub_1C41C2B68()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[11] + 8) + 8) + 16))(v0[17], v0[4]);
}

uint64_t sub_1C41C2BB0()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[10] + 8) + 8) + 16))(v0[17], v0[3]);
}

uint64_t sub_1C41C2BF8()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[9] + 8) + 8) + 16))(v0[17], v0[2]);
}

uint64_t sub_1C41C2C40()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[17] + 8) + 8) + 16))(v0[19], v0[9]);
}

uint64_t sub_1C41C2C88()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[16] + 8) + 8) + 16))(v0[19], v0[8]);
}

uint64_t sub_1C41C2CD0()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[15] + 8) + 8) + 16))(v0[19], v0[7]);
}

uint64_t sub_1C41C2D18()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[14] + 8) + 8) + 16))(v0[19], v0[6]);
}

uint64_t sub_1C41C2D60()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[13] + 8) + 8) + 16))(v0[19], v0[5]);
}

uint64_t sub_1C41C2DA8()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[12] + 8) + 8) + 16))(v0[19], v0[4]);
}

uint64_t sub_1C41C2DF0()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[11] + 8) + 8) + 16))(v0[19], v0[3]);
}

uint64_t sub_1C41C2E38()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[10] + 8) + 8) + 16))(v0[19], v0[2]);
}

uint64_t sub_1C41C2E80()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[19] + 8) + 8) + 16))(v0[21], v0[10]);
}

uint64_t sub_1C41C2EC8()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[18] + 8) + 8) + 16))(v0[21], v0[9]);
}

uint64_t sub_1C41C2F10()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[17] + 8) + 8) + 16))(v0[21], v0[8]);
}

uint64_t sub_1C41C2F58()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[16] + 8) + 8) + 16))(v0[21], v0[7]);
}

uint64_t sub_1C41C2FA0()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[15] + 8) + 8) + 16))(v0[21], v0[6]);
}

uint64_t sub_1C41C2FE8()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[14] + 8) + 8) + 16))(v0[21], v0[5]);
}

uint64_t sub_1C41C3030()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[13] + 8) + 8) + 16))(v0[21], v0[4]);
}

uint64_t sub_1C41C3078()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[12] + 8) + 8) + 16))(v0[21], v0[3]);
}

uint64_t sub_1C41C30C0()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[11] + 8) + 8) + 16))(v0[21], v0[2]);
}

uint64_t sub_1C41C3108(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C41C3144(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C41C3180(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C41C31BC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C41C31F8(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C41C3234(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C41C3270(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C41C32AC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C41C32E8(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C41C3324()
{
  uint64_t result = type metadata accessor for TaggedValue_1.TaggedEnum();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C41C33B8(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x10) {
    unint64_t v2 = 16;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

void *sub_1C41C34B8(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    uint64_t v10 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v10;
    swift_retain();
    char v11 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v11 = 0;
  }
  *((unsigned char *)a1 + v4) = v11;
  return a1;
}

unsigned __int8 *sub_1C41C35F4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      a1[v7] = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  return a1;
}

_OWORD *sub_1C41C3818(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *a1 = *(_OWORD *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_1C41C3950(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t sub_1C41C3B68(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 16;
  if (*(void *)(v3 + 64) > 0x10uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void sub_1C41C3C9C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x1C41C3E64);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t type metadata accessor for TaggedValue_1()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C41C3EA4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_1C41C3F38(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 2;
          unsigned int v9 = v12 + 2;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 != 1)
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v5) = 0;
      return v3;
    }
    uint64_t v14 = *((void *)a2 + 1);
    *uint64_t v3 = *(void *)a2;
    v3[1] = v14;
    *((unsigned char *)v3 + v5) = 1;
  }
  swift_retain();
  return v3;
}

uint64_t sub_1C41C40B0(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x10) {
    unint64_t v2 = 16;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

void *sub_1C41C41B0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    uint64_t v10 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v10;
    swift_retain();
    char v11 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v11 = 0;
  }
  *((unsigned char *)a1 + v4) = v11;
  return a1;
}

unsigned __int8 *sub_1C41C42EC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      a1[v7] = 1;
      swift_retain();
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  return a1;
}

_OWORD *sub_1C41C4510(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *a1 = *(_OWORD *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_1C41C4648(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      swift_release();
    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t sub_1C41C4860(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 16;
  if (*(void *)(v3 + 64) > 0x10uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void sub_1C41C4994(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x1C41C4B5CLL);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1C41C4B84(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 16;
  if (*(void *)(v2 + 64) > 0x10uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void sub_1C41C4C3C(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    size_t v4 = 16;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_1C41C4D14()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_1C41C4DC0(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  size_t v7 = v6 + 1;
  uint64_t v8 = *(_DWORD *)(v5 + 80);
  if (v8 <= 7 && v7 <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    unsigned int v12 = a2[v6];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v14 = v6;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a2;
          goto LABEL_18;
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          goto LABEL_18;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_18;
        case 4:
          int v15 = *(_DWORD *)a2;
LABEL_18:
          int v16 = (v15 | (v13 << (8 * v6))) + 2;
          unsigned int v12 = v15 + 2;
          if (v6 < 4) {
            unsigned int v12 = v16;
          }
          break;
        default:
          break;
      }
    }
    if (v12 == 1)
    {
      *((unsigned char *)a1 + v6) = 1;
    }
    else if (v12)
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((unsigned char *)a1 + v6) = 0;
    }
  }
  else
  {
    uint64_t v11 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1C41C4F68(unsigned __int8 *a1)
{
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(*(void *)(result - 8) + 64);
  unsigned int v4 = a1[v3];
  unsigned int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_10;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_10;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_10;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_10:
        int v8 = (v7 | (v5 << (8 * v3))) + 2;
        unsigned int v4 = v7 + 2;
        if (v3 < 4) {
          unsigned int v4 = v8;
        }
        break;
      default:
        return result;
    }
  }
  if (!v4)
  {
    int v9 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)(result - 8) + 8);
    return v9(a1, result);
  }
  return result;
}

unsigned char *sub_1C41C50AC(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_10;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_10:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    a1[v5] = 1;
  }
  else if (v6)
  {
    memcpy(a1, a2, v5 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
    a1[v5] = 0;
  }
  return a1;
}

unsigned __int8 *sub_1C41C5218(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v6 = *(void *)(v5 + 64);
    unsigned int v7 = a1[v6];
    unsigned int v8 = v7 - 2;
    if (v7 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v9 = v6;
      }
      else {
        uint64_t v9 = 4;
      }
      switch(v9)
      {
        case 1:
          int v10 = *a1;
          goto LABEL_11;
        case 2:
          int v10 = *(unsigned __int16 *)a1;
          goto LABEL_11;
        case 3:
          int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_11;
        case 4:
          int v10 = *(_DWORD *)a1;
LABEL_11:
          int v11 = (v10 | (v8 << (8 * v6))) + 2;
          unsigned int v7 = v10 + 2;
          if (v6 < 4) {
            unsigned int v7 = v11;
          }
          break;
        default:
          goto LABEL_15;
      }
    }
    if (!v7) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
LABEL_15:
    unsigned int v12 = a2[v6];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v14 = v6;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a2;
          goto LABEL_24;
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          goto LABEL_24;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_24;
        case 4:
          int v15 = *(_DWORD *)a2;
LABEL_24:
          int v16 = (v15 | (v13 << (8 * v6))) + 2;
          unsigned int v12 = v15 + 2;
          if (v6 < 4) {
            unsigned int v12 = v16;
          }
          break;
        default:
          break;
      }
    }
    if (v12 == 1)
    {
      a1[v6] = 1;
    }
    else if (v12)
    {
      memcpy(a1, a2, v6 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      a1[v6] = 0;
    }
  }
  return a1;
}

unsigned char *sub_1C41C5444(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_10;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_10:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    a1[v5] = 1;
  }
  else if (v6)
  {
    memcpy(a1, a2, v5 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
    a1[v5] = 0;
  }
  return a1;
}

unsigned __int8 *sub_1C41C55B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v6 = *(void *)(v5 + 64);
    unsigned int v7 = a1[v6];
    unsigned int v8 = v7 - 2;
    if (v7 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v9 = v6;
      }
      else {
        uint64_t v9 = 4;
      }
      switch(v9)
      {
        case 1:
          int v10 = *a1;
          goto LABEL_11;
        case 2:
          int v10 = *(unsigned __int16 *)a1;
          goto LABEL_11;
        case 3:
          int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_11;
        case 4:
          int v10 = *(_DWORD *)a1;
LABEL_11:
          int v11 = (v10 | (v8 << (8 * v6))) + 2;
          unsigned int v7 = v10 + 2;
          if (v6 < 4) {
            unsigned int v7 = v11;
          }
          break;
        default:
          goto LABEL_15;
      }
    }
    if (!v7) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
    }
LABEL_15:
    unsigned int v12 = a2[v6];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v14 = v6;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a2;
          goto LABEL_24;
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          goto LABEL_24;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_24;
        case 4:
          int v15 = *(_DWORD *)a2;
LABEL_24:
          int v16 = (v15 | (v13 << (8 * v6))) + 2;
          unsigned int v12 = v15 + 2;
          if (v6 < 4) {
            unsigned int v12 = v16;
          }
          break;
        default:
          break;
      }
    }
    if (v12 == 1)
    {
      a1[v6] = 1;
    }
    else if (v12)
    {
      memcpy(a1, a2, v6 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      a1[v6] = 0;
    }
  }
  return a1;
}

uint64_t sub_1C41C57DC(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_20;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 253) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (v9 < 2)
    {
LABEL_20:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 3) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_20;
  }
LABEL_12:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 254;
}

void sub_1C41C5940(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  size_t v7 = v6 + 1;
  if (a3 < 0xFE)
  {
    int v8 = 0;
  }
  else if (v7 <= 3)
  {
    unsigned int v11 = ((a3 + ~(-1 << (8 * v7)) - 253) >> (8 * v7)) + 1;
    if (HIWORD(v11))
    {
      int v8 = 4;
    }
    else if (v11 >= 0x100)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 > 1;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v9 = a2 - 254;
    if (v7 < 4)
    {
      int v10 = (v9 >> (8 * v7)) + 1;
      if (v6 != -1)
      {
        int v12 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if (v7 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if (v7 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v6 + 1);
      *(_DWORD *)a1 = v9;
      int v10 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v7] = v10;
        break;
      case 2:
        *(_WORD *)&a1[v7] = v10;
        break;
      case 3:
LABEL_32:
        __break(1u);
        JUMPOUT(0x1C41C5B20);
      case 4:
        *(_DWORD *)&a1[v7] = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v8)
    {
      case 1:
        a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_21;
      case 2:
        *(_WORD *)&a1[v7] = 0;
        goto LABEL_20;
      case 3:
        goto LABEL_32;
      case 4:
        *(_DWORD *)&a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_21;
      default:
LABEL_20:
        if (a2) {
LABEL_21:
        }
          a1[v6] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1C41C5B48(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  uint64_t result = a1[v2];
  if (result >= 2)
  {
    if (v2 <= 3) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = 4;
    }
    switch(v4)
    {
      case 1:
        int v5 = *a1;
        goto LABEL_10;
      case 2:
        int v5 = *(unsigned __int16 *)a1;
        goto LABEL_10;
      case 3:
        int v5 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_10;
      case 4:
        int v5 = *(_DWORD *)a1;
LABEL_10:
        unsigned int v6 = (v5 | ((result - 2) << (8 * v2))) + 2;
        unsigned int v7 = v5 + 2;
        if (v2 >= 4) {
          uint64_t result = v7;
        }
        else {
          uint64_t result = v6;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1C41C5C28(unsigned char *a1, unsigned int a2)
{
  size_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_1C41C5D14()
{
  uint64_t result = type metadata accessor for TaggedValue_2.TaggedEnum();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C41C5DB0(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 24) - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  if (v3 <= 0x10) {
    unint64_t v3 = 16;
  }
  unsigned int v4 = a1[v3];
  unsigned int v5 = v4 - 3;
  if (v4 >= 3)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_14;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_14:
        int v8 = (v7 | (v5 << (8 * v3))) + 3;
        unsigned int v4 = v7 + 3;
        if (v3 < 4) {
          unsigned int v4 = v8;
        }
        break;
      default:
        break;
    }
  }
  if (v4 == 2) {
    return swift_release();
  }
  if (v4 == 1) {
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

void *sub_1C41C5F20(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  if (v5 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (v5 <= 0x10) {
    uint64_t v6 = 16;
  }
  else {
    uint64_t v6 = v5;
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 3;
  if (v7 >= 3)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_15;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_15;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_15;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_15:
        int v11 = (v10 | (v8 << (8 * v6))) + 3;
        unsigned int v7 = v10 + 3;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 2)
  {
    uint64_t v12 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v12;
    *((unsigned char *)a1 + v6) = 2;
    swift_retain();
  }
  else if (v7 == 1)
  {
    (*(void (**)(void *))(v4 + 16))(a1);
    *((unsigned char *)a1 + v6) = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    *((unsigned char *)a1 + v6) = 0;
  }
  return a1;
}

unsigned __int8 *sub_1C41C60DC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    unint64_t v9 = *(void *)(v8 + 64);
    if (v9 <= *(void *)(v7 + 64)) {
      unint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    if (v9 <= 0x10) {
      uint64_t v10 = 16;
    }
    else {
      uint64_t v10 = v9;
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 3;
    if (v11 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_16;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_16;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_16;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_16:
          int v15 = (v14 | (v12 << (8 * v10))) + 3;
          unsigned int v11 = v14 + 3;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 2)
    {
      swift_release();
    }
    else
    {
      if (v11 == 1) {
        int v16 = *(void (**)(void))(v8 + 8);
      }
      else {
        int v16 = *(void (**)(void))(v7 + 8);
      }
      v16();
    }
    unsigned int v17 = a2[v10];
    unsigned int v18 = v17 - 3;
    if (v17 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v19 = v10;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_33;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_33;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_33;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_33:
          int v21 = (v20 | (v18 << (8 * v10))) + 3;
          unsigned int v17 = v20 + 3;
          if (v10 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    if (v17 == 2)
    {
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      a1[v10] = 2;
      swift_retain();
    }
    else if (v17 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v6);
      a1[v10] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
      a1[v10] = 0;
    }
  }
  return a1;
}

_OWORD *sub_1C41C63A0(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  if (v5 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (v5 <= 0x10) {
    uint64_t v6 = 16;
  }
  else {
    uint64_t v6 = v5;
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 3;
  if (v7 >= 3)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_15;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_15;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_15;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_15:
        int v11 = (v10 | (v8 << (8 * v6))) + 3;
        unsigned int v7 = v10 + 3;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 2)
  {
    *a1 = *(_OWORD *)a2;
    char v12 = 2;
  }
  else if (v7 == 1)
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    char v12 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v12 = 0;
  }
  *((unsigned char *)a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_1C41C6554(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    unint64_t v9 = *(void *)(v8 + 64);
    if (v9 <= *(void *)(v7 + 64)) {
      unint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    if (v9 <= 0x10) {
      uint64_t v10 = 16;
    }
    else {
      uint64_t v10 = v9;
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 3;
    if (v11 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_16;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_16;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_16;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_16:
          int v15 = (v14 | (v12 << (8 * v10))) + 3;
          unsigned int v11 = v14 + 3;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 2)
    {
      swift_release();
    }
    else
    {
      if (v11 == 1) {
        int v16 = *(void (**)(void))(v8 + 8);
      }
      else {
        int v16 = *(void (**)(void))(v7 + 8);
      }
      v16();
    }
    unsigned int v17 = a2[v10];
    unsigned int v18 = v17 - 3;
    if (v17 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v19 = v10;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_33;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_33;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_33;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_33:
          int v21 = (v20 | (v18 << (8 * v10))) + 3;
          unsigned int v17 = v20 + 3;
          if (v10 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    if (v17 == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v22 = 2;
    }
    else if (v17 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v6);
      char v22 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
      char v22 = 0;
    }
    a1[v10] = v22;
  }
  return a1;
}

uint64_t sub_1C41C6808(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  uint64_t v5 = 16;
  if (v3 > 0x10) {
    uint64_t v5 = v3;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_24;
  }
  uint64_t v6 = v5 + 1;
  char v7 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    unsigned int v10 = ((a2 + ~(-1 << v7) - 253) >> v7) + 1;
    if (HIWORD(v10))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v10 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v10 < 2)
    {
LABEL_24:
      unsigned int v12 = *((unsigned __int8 *)a1 + v5);
      if (v12 >= 3) {
        return (v12 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_24;
  }
LABEL_16:
  int v11 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v6 | v11) + 254;
}

void sub_1C41C6958(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v8 = a2 - 254;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_36:
        __break(1u);
        JUMPOUT(0x1C41C6B3CLL);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_24;
      case 3:
        goto LABEL_36;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      default:
LABEL_24:
        if (a2) {
LABEL_25:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t type metadata accessor for TaggedValue_2()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C41C6B7C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_1C41C6C50(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (v6 <= *(void *)(v4 + 64)) {
    unint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (v6 <= 0x10) {
    uint64_t v7 = 16;
  }
  else {
    uint64_t v7 = v6;
  }
  int v8 = *(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80);
  if ((unint64_t)(v7 + 1) > 0x18 || (v8 & 0x1000F8) != 0)
  {
    uint64_t v10 = *(void *)a2;
    *unint64_t v3 = *(void *)a2;
    unint64_t v3 = (void *)(v10 + (((v8 & 0xF8 | 7u) + 16) & ~(unint64_t)(v8 & 0xF8 | 7u)));
LABEL_26:
    swift_retain();
    return v3;
  }
  unsigned int v11 = a2[v7];
  unsigned int v12 = v11 - 3;
  if (v11 >= 3)
  {
    if (v7 <= 3) {
      uint64_t v13 = v7;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        goto LABEL_20;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        goto LABEL_20;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_20;
      case 4:
        int v14 = *(_DWORD *)a2;
LABEL_20:
        int v15 = (v14 | (v12 << (8 * v7))) + 3;
        unsigned int v11 = v14 + 3;
        if (v7 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 2)
  {
    uint64_t v16 = *((void *)a2 + 1);
    *unint64_t v3 = *(void *)a2;
    v3[1] = v16;
    *((unsigned char *)v3 + v7) = 2;
    goto LABEL_26;
  }
  if (v11 == 1)
  {
    (*(void (**)(void *))(v5 + 16))(a1);
    *((unsigned char *)v3 + v7) = 1;
  }
  else
  {
    (*(void (**)(void *))(v4 + 16))(a1);
    *((unsigned char *)v3 + v7) = 0;
  }
  return v3;
}

uint64_t sub_1C41C6E50(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 24) - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  if (v3 <= 0x10) {
    unint64_t v3 = 16;
  }
  unsigned int v4 = a1[v3];
  unsigned int v5 = v4 - 3;
  if (v4 >= 3)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_14;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_14:
        int v8 = (v7 | (v5 << (8 * v3))) + 3;
        unsigned int v4 = v7 + 3;
        if (v3 < 4) {
          unsigned int v4 = v8;
        }
        break;
      default:
        break;
    }
  }
  if (v4 == 2) {
    return swift_release();
  }
  if (v4 == 1) {
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

void *sub_1C41C6FC0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  if (v5 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (v5 <= 0x10) {
    uint64_t v6 = 16;
  }
  else {
    uint64_t v6 = v5;
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 3;
  if (v7 >= 3)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_15;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_15;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_15;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_15:
        int v11 = (v10 | (v8 << (8 * v6))) + 3;
        unsigned int v7 = v10 + 3;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 2)
  {
    uint64_t v12 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v12;
    *((unsigned char *)a1 + v6) = 2;
    swift_retain();
  }
  else if (v7 == 1)
  {
    (*(void (**)(void *))(v4 + 16))(a1);
    *((unsigned char *)a1 + v6) = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    *((unsigned char *)a1 + v6) = 0;
  }
  return a1;
}

unsigned __int8 *sub_1C41C717C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    unint64_t v9 = *(void *)(v8 + 64);
    if (v9 <= *(void *)(v7 + 64)) {
      unint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    if (v9 <= 0x10) {
      uint64_t v10 = 16;
    }
    else {
      uint64_t v10 = v9;
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 3;
    if (v11 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_16;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_16;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_16;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_16:
          int v15 = (v14 | (v12 << (8 * v10))) + 3;
          unsigned int v11 = v14 + 3;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 2)
    {
      swift_release();
    }
    else
    {
      if (v11 == 1) {
        uint64_t v16 = *(void (**)(void))(v8 + 8);
      }
      else {
        uint64_t v16 = *(void (**)(void))(v7 + 8);
      }
      v16();
    }
    unsigned int v17 = a2[v10];
    unsigned int v18 = v17 - 3;
    if (v17 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v19 = v10;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_33;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_33;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_33;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_33:
          int v21 = (v20 | (v18 << (8 * v10))) + 3;
          unsigned int v17 = v20 + 3;
          if (v10 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    if (v17 == 2)
    {
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      a1[v10] = 2;
      swift_retain();
    }
    else if (v17 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v6);
      a1[v10] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
      a1[v10] = 0;
    }
  }
  return a1;
}

_OWORD *sub_1C41C7440(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  if (v5 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (v5 <= 0x10) {
    uint64_t v6 = 16;
  }
  else {
    uint64_t v6 = v5;
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 3;
  if (v7 >= 3)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_15;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_15;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_15;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_15:
        int v11 = (v10 | (v8 << (8 * v6))) + 3;
        unsigned int v7 = v10 + 3;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 2)
  {
    *a1 = *(_OWORD *)a2;
    char v12 = 2;
  }
  else if (v7 == 1)
  {
    (*(void (**)(_OWORD *))(v4 + 32))(a1);
    char v12 = 1;
  }
  else
  {
    (*(void (**)(_OWORD *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v12 = 0;
  }
  *((unsigned char *)a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_1C41C75F4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    unint64_t v9 = *(void *)(v8 + 64);
    if (v9 <= *(void *)(v7 + 64)) {
      unint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    if (v9 <= 0x10) {
      uint64_t v10 = 16;
    }
    else {
      uint64_t v10 = v9;
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 3;
    if (v11 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_16;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_16;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_16;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_16:
          int v15 = (v14 | (v12 << (8 * v10))) + 3;
          unsigned int v11 = v14 + 3;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 2)
    {
      swift_release();
    }
    else
    {
      if (v11 == 1) {
        uint64_t v16 = *(void (**)(void))(v8 + 8);
      }
      else {
        uint64_t v16 = *(void (**)(void))(v7 + 8);
      }
      v16();
    }
    unsigned int v17 = a2[v10];
    unsigned int v18 = v17 - 3;
    if (v17 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v19 = v10;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_33;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_33;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_33;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_33:
          int v21 = (v20 | (v18 << (8 * v10))) + 3;
          unsigned int v17 = v20 + 3;
          if (v10 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    if (v17 == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v22 = 2;
    }
    else if (v17 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v6);
      char v22 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
      char v22 = 0;
    }
    a1[v10] = v22;
  }
  return a1;
}

uint64_t sub_1C41C78A8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  uint64_t v5 = 16;
  if (v3 > 0x10) {
    uint64_t v5 = v3;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_24;
  }
  uint64_t v6 = v5 + 1;
  char v7 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    unsigned int v10 = ((a2 + ~(-1 << v7) - 253) >> v7) + 1;
    if (HIWORD(v10))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v10 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v10 < 2)
    {
LABEL_24:
      unsigned int v12 = *((unsigned __int8 *)a1 + v5);
      if (v12 >= 3) {
        return (v12 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_24;
  }
LABEL_16:
  int v11 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v6 | v11) + 254;
}

void sub_1C41C79F8(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v8 = a2 - 254;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_36:
        __break(1u);
        JUMPOUT(0x1C41C7BDCLL);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_24;
      case 3:
        goto LABEL_36;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      default:
LABEL_24:
        if (a2) {
LABEL_25:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1C41C7C04(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8);
  if (*(void *)(v3 + 64) > v2) {
    unint64_t v2 = *(void *)(v3 + 64);
  }
  uint64_t v4 = 16;
  if (v2 > 0x10) {
    uint64_t v4 = v2;
  }
  uint64_t v5 = a1[v4];
  int v6 = v5 - 3;
  if (v5 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_14;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_14:
        unsigned int v9 = (v8 | (v6 << (8 * v4))) + 3;
        LODWORD(v5) = v8 + 3;
        if (v4 >= 4) {
          uint64_t v5 = v5;
        }
        else {
          uint64_t v5 = v9;
        }
        break;
      default:
        return v5;
    }
  }
  return v5;
}

void sub_1C41C7CD8(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 2)
  {
    unint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
    if (*(void *)(v7 + 64) > v6) {
      unint64_t v6 = *(void *)(v7 + 64);
    }
    if (v6 <= 0x10) {
      size_t v8 = 16;
    }
    else {
      size_t v8 = v6;
    }
    unsigned int v9 = a2 - 3;
    if (v8 < 4)
    {
      unsigned int v10 = v9 >> (8 * v8);
      int v11 = v9 & ~(-1 << (8 * v8));
      a1[v8] = v10 + 3;
      bzero(a1, v8);
      if (v8 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if (v8 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
    else
    {
      a1[v8] = 3;
      bzero(a1, v8);
      *(_DWORD *)a1 = v9;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    if (*(void *)(v4 + 64) > v5) {
      unint64_t v5 = *(void *)(v4 + 64);
    }
    if (v5 <= 0x10) {
      unint64_t v5 = 16;
    }
    a1[v5] = a2;
  }
}

uint64_t sub_1C41C7E18()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_1C41C7F20(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  size_t v10 = v9 + 1;
  uint64_t v11 = (*(unsigned char *)(v8 + 80) | *(unsigned char *)(v5 + 80));
  if (v11 <= 7 && v10 <= 0x18 && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) == 0)
  {
    unsigned int v16 = a2[v9];
    unsigned int v17 = v16 - 3;
    if (v16 >= 3)
    {
      if (v9 <= 3) {
        uint64_t v18 = v9;
      }
      else {
        uint64_t v18 = 4;
      }
      switch(v18)
      {
        case 1:
          int v19 = *a2;
          goto LABEL_22;
        case 2:
          int v19 = *(unsigned __int16 *)a2;
          goto LABEL_22;
        case 3:
          int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_22;
        case 4:
          int v19 = *(_DWORD *)a2;
LABEL_22:
          int v20 = (v19 | (v17 << (8 * v9))) + 3;
          unsigned int v16 = v19 + 3;
          if (v9 < 4) {
            unsigned int v16 = v20;
          }
          break;
        default:
          break;
      }
    }
    if (v16 == 2)
    {
      *((unsigned char *)a1 + v9) = 2;
    }
    else if (v16 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v7);
      *((unsigned char *)a1 + v9) = 1;
    }
    else if (v16)
    {
      memcpy(a1, a2, v10);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      *((unsigned char *)a1 + v9) = 0;
    }
  }
  else
  {
    uint64_t v14 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1C41C818C(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = *(void *)(v13 + 64);
  uint64_t result = swift_getAssociatedTypeWitness();
  unint64_t v5 = *(void *)(*(void *)(result - 8) + 64);
  if (v5 <= v3) {
    unint64_t v5 = v3;
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 3;
  if (v6 >= 3)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_12;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_12:
        int v10 = (v9 | (v7 << (8 * v5))) + 3;
        unsigned int v6 = v9 + 3;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6)
  {
    if (v6 != 1) {
      return result;
    }
    uint64_t v11 = *(void *)(result - 8);
    uint64_t AssociatedTypeWitness = result;
  }
  else
  {
    uint64_t v11 = v13;
  }
  unsigned int v12 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v11 + 8);
  return v12(a1, AssociatedTypeWitness);
}

unsigned char *sub_1C41C8388(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(v7 - 8) + 64) <= v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 3;
  if (v9 >= 3)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_13;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_13:
        int v13 = (v12 | (v10 << (8 * v8))) + 3;
        unsigned int v9 = v12 + 3;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 2)
  {
    a1[v8] = 2;
  }
  else if (v9 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    a1[v8] = 1;
  }
  else if (v9)
  {
    memcpy(a1, a2, v8 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    a1[v8] = 0;
  }
  return a1;
}

unsigned __int8 *sub_1C41C85B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  if (*(void *)(v9 + 64) <= v6) {
    unint64_t v10 = v6;
  }
  else {
    unint64_t v10 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unsigned int v11 = a1[v10];
  unsigned int v12 = v11 - 3;
  if (v11 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        goto LABEL_14;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v14 = *(_DWORD *)a1;
LABEL_14:
        int v15 = (v14 | (v12 << (8 * v10))) + 3;
        unsigned int v11 = v14 + 3;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (!v11)
  {
    uint64_t v16 = v5;
    uint64_t v17 = AssociatedTypeWitness;
    goto LABEL_20;
  }
  if (v11 == 1)
  {
    uint64_t v16 = *(void *)(v7 - 8);
    uint64_t v17 = v7;
LABEL_20:
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
  }
  unsigned int v18 = a2[v10];
  unsigned int v19 = v18 - 3;
  if (v18 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v20 = v10;
    }
    else {
      uint64_t v20 = 4;
    }
    switch(v20)
    {
      case 1:
        int v21 = *a2;
        goto LABEL_30;
      case 2:
        int v21 = *(unsigned __int16 *)a2;
        goto LABEL_30;
      case 3:
        int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_30;
      case 4:
        int v21 = *(_DWORD *)a2;
LABEL_30:
        int v22 = (v21 | (v19 << (8 * v10))) + 3;
        unsigned int v18 = v21 + 3;
        if (v10 < 4) {
          unsigned int v18 = v22;
        }
        break;
      default:
        break;
    }
  }
  if (v18 == 2)
  {
    a1[v10] = 2;
  }
  else if (v18 == 1)
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v9 + 16))(a1, a2, v8);
    a1[v10] = 1;
  }
  else if (v18)
  {
    memcpy(a1, a2, v10 + 1);
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    a1[v10] = 0;
  }
  return a1;
}

unsigned char *sub_1C41C88A4(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(v7 - 8) + 64) <= v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 3;
  if (v9 >= 3)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_13;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_13:
        int v13 = (v12 | (v10 << (8 * v8))) + 3;
        unsigned int v9 = v12 + 3;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 2)
  {
    a1[v8] = 2;
  }
  else if (v9 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    a1[v8] = 1;
  }
  else if (v9)
  {
    memcpy(a1, a2, v8 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    a1[v8] = 0;
  }
  return a1;
}

unsigned __int8 *sub_1C41C8ACC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  if (*(void *)(v9 + 64) <= v6) {
    unint64_t v10 = v6;
  }
  else {
    unint64_t v10 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unsigned int v11 = a1[v10];
  unsigned int v12 = v11 - 3;
  if (v11 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        goto LABEL_14;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v14 = *(_DWORD *)a1;
LABEL_14:
        int v15 = (v14 | (v12 << (8 * v10))) + 3;
        unsigned int v11 = v14 + 3;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (!v11)
  {
    uint64_t v16 = v5;
    uint64_t v17 = AssociatedTypeWitness;
    goto LABEL_20;
  }
  if (v11 == 1)
  {
    uint64_t v16 = *(void *)(v7 - 8);
    uint64_t v17 = v7;
LABEL_20:
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
  }
  unsigned int v18 = a2[v10];
  unsigned int v19 = v18 - 3;
  if (v18 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v20 = v10;
    }
    else {
      uint64_t v20 = 4;
    }
    switch(v20)
    {
      case 1:
        int v21 = *a2;
        goto LABEL_30;
      case 2:
        int v21 = *(unsigned __int16 *)a2;
        goto LABEL_30;
      case 3:
        int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_30;
      case 4:
        int v21 = *(_DWORD *)a2;
LABEL_30:
        int v22 = (v21 | (v19 << (8 * v10))) + 3;
        unsigned int v18 = v21 + 3;
        if (v10 < 4) {
          unsigned int v18 = v22;
        }
        break;
      default:
        break;
    }
  }
  if (v18 == 2)
  {
    a1[v10] = 2;
  }
  else if (v18 == 1)
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v9 + 32))(a1, a2, v8);
    a1[v10] = 1;
  }
  else if (v18)
  {
    memcpy(a1, a2, v10 + 1);
  }
  else
  {
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    a1[v10] = 0;
  }
  return a1;
}

uint64_t sub_1C41C8DC0(unsigned __int16 *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_23;
  }
  unint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 252) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v11 < 2)
    {
LABEL_23:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 4) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_23;
  }
LABEL_15:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 253;
}

void sub_1C41C8F7C(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  size_t v8 = v7 + 1;
  if (a3 < 0xFD)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 252) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFC)
  {
    unsigned int v10 = a2 - 253;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v7 != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x1C41C91ACLL);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v7] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1C41C91D4(unsigned __int8 *a1)
{
  unint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v3 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 <= v2) {
    unint64_t v3 = v2;
  }
  uint64_t result = a1[v3];
  if (result >= 3)
  {
    if (v3 <= 3) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | ((result - 3) << (8 * v3))) + 3;
        unsigned int v8 = v6 + 3;
        if (v3 >= 4) {
          uint64_t result = v8;
        }
        else {
          uint64_t result = v7;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1C41C930C(unsigned char *a1, unsigned int a2)
{
  size_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  size_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  if (a2 > 2)
  {
    unsigned int v7 = a2 - 3;
    if (v6 < 4)
    {
      unsigned int v8 = v7 >> (8 * v6);
      int v9 = v7 & ~(-1 << (8 * v6));
      a1[v6] = v8 + 3;
      bzero(a1, v6);
      if (v6 == 3)
      {
        *(_WORD *)a1 = v9;
        a1[2] = BYTE2(v9);
      }
      else if (v6 == 2)
      {
        *(_WORD *)a1 = v9;
      }
      else
      {
        *a1 = v9;
      }
    }
    else
    {
      a1[v6] = 3;
      bzero(a1, v6);
      *(_DWORD *)a1 = v7;
    }
  }
  else
  {
    a1[v6] = a2;
  }
}

uint64_t sub_1C41C9448()
{
  uint64_t result = type metadata accessor for TaggedValue_3.TaggedEnum();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C41C94EC(unsigned __int8 *a1, void *a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2[2] - 8) + 64);
  uint64_t v3 = a2[4];
  uint64_t v4 = *(void *)(a2[3] - 8);
  if (*(void *)(v4 + 64) > v2) {
    unint64_t v2 = *(void *)(v4 + 64);
  }
  unint64_t v5 = *(void *)(*(void *)(v3 - 8) + 64);
  if (v5 <= v2) {
    unint64_t v5 = v2;
  }
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 4;
  if (v6 >= 4)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_16;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_16;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_16;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_16:
        int v10 = (v9 | (v7 << (8 * v5))) + 4;
        unsigned int v6 = v9 + 4;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  switch(v6)
  {
    case 1u:
      uint64_t result = (*(uint64_t (**)(void))(v4 + 8))();
      break;
    case 2u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v3 - 8) + 8))();
      break;
    case 3u:
      uint64_t result = swift_release();
      break;
    default:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2[2] - 8) + 8))();
      break;
  }
  return result;
}

void *sub_1C41C96E0(void *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = a3[4];
  uint64_t v5 = *(void *)(a3[3] - 8);
  if (*(void *)(v5 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v6 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  unint64_t v7 = *(void *)(*(void *)(v4 - 8) + 64);
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  if (v7 <= 0x10) {
    uint64_t v8 = 16;
  }
  else {
    uint64_t v8 = v7;
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 4;
  if (v9 >= 4)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_18;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_18;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_18:
        int v13 = (v12 | (v10 << (8 * v8))) + 4;
        unsigned int v9 = v12 + 4;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  switch(v9)
  {
    case 1u:
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)a1 + v8) = 1;
      break;
    case 2u:
      (*(void (**)(void *))(*(void *)(v4 - 8) + 16))(a1);
      *((unsigned char *)a1 + v8) = 2;
      break;
    case 3u:
      uint64_t v14 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v14;
      *((unsigned char *)a1 + v8) = 3;
      swift_retain();
      break;
    default:
      (*(void (**)(void *))(*(void *)(a3[2] - 8) + 16))(a1);
      *((unsigned char *)a1 + v8) = 0;
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41C9930(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v7 = *(void *)(v5 - 8);
    unint64_t v8 = *(void *)(v7 + 64);
    uint64_t v9 = *(void *)(v6 - 8);
    if (*(void *)(v9 + 64) > v8) {
      unint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v10 = a3[4];
    uint64_t v11 = *(void *)(v10 - 8);
    unint64_t v12 = *(void *)(v11 + 64);
    if (v12 <= v8) {
      unint64_t v12 = v8;
    }
    if (v12 <= 0x10) {
      uint64_t v13 = 16;
    }
    else {
      uint64_t v13 = v12;
    }
    unsigned int v14 = a1[v13];
    unsigned int v15 = v14 - 4;
    if (v14 >= 4)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a1;
          goto LABEL_18;
        case 2:
          int v17 = *(unsigned __int16 *)a1;
          goto LABEL_18;
        case 3:
          int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_18;
        case 4:
          int v17 = *(_DWORD *)a1;
LABEL_18:
          int v18 = (v17 | (v15 << (8 * v13))) + 4;
          unsigned int v14 = v17 + 4;
          if (v13 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    switch(v14)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v9 + 8))(a1, v6);
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v11 + 8))(a1, v10);
        break;
      case 3u:
        swift_release();
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v5);
        break;
    }
    unsigned int v19 = a2[v13];
    unsigned int v20 = v19 - 4;
    if (v19 >= 4)
    {
      if (v13 <= 3) {
        uint64_t v21 = v13;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          goto LABEL_34;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          goto LABEL_34;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_34;
        case 4:
          int v22 = *(_DWORD *)a2;
LABEL_34:
          int v23 = (v22 | (v20 << (8 * v13))) + 4;
          unsigned int v19 = v22 + 4;
          if (v13 < 4) {
            unsigned int v19 = v23;
          }
          break;
        default:
          break;
      }
    }
    switch(v19)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v9 + 16))(a1, a2, v6);
        a1[v13] = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v11 + 16))(a1, a2, v10);
        a1[v13] = 2;
        break;
      case 3u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        a1[v13] = 3;
        swift_retain();
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
        a1[v13] = 0;
        break;
    }
  }
  return a1;
}

_OWORD *sub_1C41C9CE8(_OWORD *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = a3[4];
  uint64_t v5 = *(void *)(a3[3] - 8);
  if (*(void *)(v5 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v6 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  unint64_t v7 = *(void *)(*(void *)(v4 - 8) + 64);
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  if (v7 <= 0x10) {
    uint64_t v8 = 16;
  }
  else {
    uint64_t v8 = v7;
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 4;
  if (v9 >= 4)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_18;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_18;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_18:
        int v13 = (v12 | (v10 << (8 * v8))) + 4;
        unsigned int v9 = v12 + 4;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  switch(v9)
  {
    case 1u:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      char v14 = 1;
      break;
    case 2u:
      (*(void (**)(_OWORD *))(*(void *)(v4 - 8) + 32))(a1);
      char v14 = 2;
      break;
    case 3u:
      *a1 = *(_OWORD *)a2;
      char v14 = 3;
      break;
    default:
      (*(void (**)(_OWORD *))(*(void *)(a3[2] - 8) + 32))(a1);
      char v14 = 0;
      break;
  }
  *((unsigned char *)a1 + v8) = v14;
  return a1;
}

unsigned __int8 *sub_1C41C9F2C(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v7 = *(void *)(v5 - 8);
    unint64_t v8 = *(void *)(v7 + 64);
    uint64_t v9 = *(void *)(v6 - 8);
    if (*(void *)(v9 + 64) > v8) {
      unint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v10 = a3[4];
    uint64_t v11 = *(void *)(v10 - 8);
    unint64_t v12 = *(void *)(v11 + 64);
    if (v12 <= v8) {
      unint64_t v12 = v8;
    }
    if (v12 <= 0x10) {
      uint64_t v13 = 16;
    }
    else {
      uint64_t v13 = v12;
    }
    unsigned int v14 = a1[v13];
    unsigned int v15 = v14 - 4;
    if (v14 >= 4)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a1;
          goto LABEL_18;
        case 2:
          int v17 = *(unsigned __int16 *)a1;
          goto LABEL_18;
        case 3:
          int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_18;
        case 4:
          int v17 = *(_DWORD *)a1;
LABEL_18:
          int v18 = (v17 | (v15 << (8 * v13))) + 4;
          unsigned int v14 = v17 + 4;
          if (v13 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    switch(v14)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v9 + 8))(a1, v6);
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v11 + 8))(a1, v10);
        break;
      case 3u:
        swift_release();
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v5);
        break;
    }
    unsigned int v19 = a2[v13];
    unsigned int v20 = v19 - 4;
    if (v19 >= 4)
    {
      if (v13 <= 3) {
        uint64_t v21 = v13;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          goto LABEL_34;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          goto LABEL_34;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_34;
        case 4:
          int v22 = *(_DWORD *)a2;
LABEL_34:
          int v23 = (v22 | (v20 << (8 * v13))) + 4;
          unsigned int v19 = v22 + 4;
          if (v13 < 4) {
            unsigned int v19 = v23;
          }
          break;
        default:
          break;
      }
    }
    switch(v19)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v9 + 32))(a1, a2, v6);
        char v24 = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v11 + 32))(a1, a2, v10);
        char v24 = 2;
        break;
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v24 = 3;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
        char v24 = 0;
        break;
    }
    a1[v13] = v24;
  }
  return a1;
}

uint64_t sub_1C41CA2D0(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  unint64_t v3 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  uint64_t v5 = *(void *)(a3[4] - 8);
  if (*(void *)(v5 + 64) > v3) {
    unint64_t v3 = *(void *)(v5 + 64);
  }
  uint64_t v6 = 16;
  if (v3 > 0x10) {
    uint64_t v6 = v3;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_26;
  }
  uint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 252) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v11 < 2)
    {
LABEL_26:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 4) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_26;
  }
LABEL_18:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 253;
}

void sub_1C41CA440(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  unint64_t v5 = *(void *)(*(void *)(a4[2] - 8) + 64);
  if (*(void *)(*(void *)(a4[3] - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(a4[3] - 8) + 64);
  }
  uint64_t v6 = *(void *)(a4[4] - 8);
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v7 = v5 + 1;
  if (a3 < 0xFD)
  {
    int v8 = 0;
  }
  else if (v7 <= 3)
  {
    unsigned int v11 = ((a3 + ~(-1 << (8 * v7)) - 252) >> (8 * v7)) + 1;
    if (HIWORD(v11))
    {
      int v8 = 4;
    }
    else if (v11 >= 0x100)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 > 1;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 > 0xFC)
  {
    unsigned int v9 = a2 - 253;
    if (v7 < 4)
    {
      int v10 = (v9 >> (8 * v7)) + 1;
      if (v5 != -1)
      {
        int v12 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if (v7 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if (v7 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v9;
      int v10 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v7] = v10;
        break;
      case 2:
        *(_WORD *)&a1[v7] = v10;
        break;
      case 3:
LABEL_38:
        __break(1u);
        JUMPOUT(0x1C41CA644);
      case 4:
        *(_DWORD *)&a1[v7] = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v8)
    {
      case 1:
        a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_27;
      case 2:
        *(_WORD *)&a1[v7] = 0;
        goto LABEL_26;
      case 3:
        goto LABEL_38;
      case 4:
        *(_DWORD *)&a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_27;
      default:
LABEL_26:
        if (a2) {
LABEL_27:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t type metadata accessor for TaggedValue_3()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C41CA684()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

void *sub_1C41CA798(void *a1, unsigned __int8 *a2, void *a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3[2] - 8);
  uint64_t v5 = *(void *)(a3[3] - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    unint64_t v6 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = *(void *)(a3[4] - 8);
  unint64_t v8 = *(void *)(v7 + 64);
  if (v8 <= v6) {
    unint64_t v8 = v6;
  }
  if (v8 <= 0x10) {
    uint64_t v9 = 16;
  }
  else {
    uint64_t v9 = v8;
  }
  int v10 = *(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v7 + 80);
  if ((unint64_t)(v9 + 1) <= 0x18 && (v10 & 0x1000F8) == 0)
  {
    unsigned int v14 = a2[v9];
    unsigned int v15 = v14 - 4;
    if (v14 >= 4)
    {
      if (v9 <= 3) {
        uint64_t v16 = v9;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_25;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_25;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_25;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_25:
          int v18 = (v17 | (v15 << (8 * v9))) + 4;
          unsigned int v14 = v17 + 4;
          if (v9 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    switch(v14)
    {
      case 1u:
        (*(void (**)(void *))(v5 + 16))(a1);
        *((unsigned char *)v3 + v9) = 1;
        break;
      case 2u:
        (*(void (**)(void *))(v7 + 16))(a1);
        *((unsigned char *)v3 + v9) = 2;
        break;
      case 3u:
        uint64_t v19 = *((void *)a2 + 1);
        *unint64_t v3 = *(void *)a2;
        v3[1] = v19;
        *((unsigned char *)v3 + v9) = 3;
        goto LABEL_14;
      default:
        (*(void (**)(void *))(v4 + 16))(a1);
        *((unsigned char *)v3 + v9) = 0;
        break;
    }
  }
  else
  {
    uint64_t v12 = *(void *)a2;
    *unint64_t v3 = *(void *)a2;
    unint64_t v3 = (void *)(v12 + (((v10 & 0xF8 | 7u) + 16) & ~(unint64_t)(v10 & 0xF8 | 7u)));
LABEL_14:
    swift_retain();
  }
  return v3;
}

uint64_t sub_1C41CAA34(unsigned __int8 *a1, void *a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2[2] - 8) + 64);
  uint64_t v3 = a2[4];
  uint64_t v4 = *(void *)(a2[3] - 8);
  if (*(void *)(v4 + 64) > v2) {
    unint64_t v2 = *(void *)(v4 + 64);
  }
  unint64_t v5 = *(void *)(*(void *)(v3 - 8) + 64);
  if (v5 <= v2) {
    unint64_t v5 = v2;
  }
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 4;
  if (v6 >= 4)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_16;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_16;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_16;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_16:
        int v10 = (v9 | (v7 << (8 * v5))) + 4;
        unsigned int v6 = v9 + 4;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  switch(v6)
  {
    case 1u:
      uint64_t result = (*(uint64_t (**)(void))(v4 + 8))();
      break;
    case 2u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v3 - 8) + 8))();
      break;
    case 3u:
      uint64_t result = swift_release();
      break;
    default:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2[2] - 8) + 8))();
      break;
  }
  return result;
}

void *sub_1C41CAC28(void *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = a3[4];
  uint64_t v5 = *(void *)(a3[3] - 8);
  if (*(void *)(v5 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v6 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  unint64_t v7 = *(void *)(*(void *)(v4 - 8) + 64);
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  if (v7 <= 0x10) {
    uint64_t v8 = 16;
  }
  else {
    uint64_t v8 = v7;
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 4;
  if (v9 >= 4)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_18;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_18;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_18:
        int v13 = (v12 | (v10 << (8 * v8))) + 4;
        unsigned int v9 = v12 + 4;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  switch(v9)
  {
    case 1u:
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)a1 + v8) = 1;
      break;
    case 2u:
      (*(void (**)(void *))(*(void *)(v4 - 8) + 16))(a1);
      *((unsigned char *)a1 + v8) = 2;
      break;
    case 3u:
      uint64_t v14 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v14;
      *((unsigned char *)a1 + v8) = 3;
      swift_retain();
      break;
    default:
      (*(void (**)(void *))(*(void *)(a3[2] - 8) + 16))(a1);
      *((unsigned char *)a1 + v8) = 0;
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41CAE78(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v7 = *(void *)(v5 - 8);
    unint64_t v8 = *(void *)(v7 + 64);
    uint64_t v9 = *(void *)(v6 - 8);
    if (*(void *)(v9 + 64) > v8) {
      unint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v10 = a3[4];
    uint64_t v11 = *(void *)(v10 - 8);
    unint64_t v12 = *(void *)(v11 + 64);
    if (v12 <= v8) {
      unint64_t v12 = v8;
    }
    if (v12 <= 0x10) {
      uint64_t v13 = 16;
    }
    else {
      uint64_t v13 = v12;
    }
    unsigned int v14 = a1[v13];
    unsigned int v15 = v14 - 4;
    if (v14 >= 4)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a1;
          goto LABEL_18;
        case 2:
          int v17 = *(unsigned __int16 *)a1;
          goto LABEL_18;
        case 3:
          int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_18;
        case 4:
          int v17 = *(_DWORD *)a1;
LABEL_18:
          int v18 = (v17 | (v15 << (8 * v13))) + 4;
          unsigned int v14 = v17 + 4;
          if (v13 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    switch(v14)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v9 + 8))(a1, v6);
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v11 + 8))(a1, v10);
        break;
      case 3u:
        swift_release();
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v5);
        break;
    }
    unsigned int v19 = a2[v13];
    unsigned int v20 = v19 - 4;
    if (v19 >= 4)
    {
      if (v13 <= 3) {
        uint64_t v21 = v13;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          goto LABEL_34;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          goto LABEL_34;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_34;
        case 4:
          int v22 = *(_DWORD *)a2;
LABEL_34:
          int v23 = (v22 | (v20 << (8 * v13))) + 4;
          unsigned int v19 = v22 + 4;
          if (v13 < 4) {
            unsigned int v19 = v23;
          }
          break;
        default:
          break;
      }
    }
    switch(v19)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v9 + 16))(a1, a2, v6);
        a1[v13] = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v11 + 16))(a1, a2, v10);
        a1[v13] = 2;
        break;
      case 3u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        a1[v13] = 3;
        swift_retain();
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
        a1[v13] = 0;
        break;
    }
  }
  return a1;
}

_OWORD *sub_1C41CB230(_OWORD *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = a3[4];
  uint64_t v5 = *(void *)(a3[3] - 8);
  if (*(void *)(v5 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v6 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  unint64_t v7 = *(void *)(*(void *)(v4 - 8) + 64);
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  if (v7 <= 0x10) {
    uint64_t v8 = 16;
  }
  else {
    uint64_t v8 = v7;
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 4;
  if (v9 >= 4)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_18;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_18;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_18:
        int v13 = (v12 | (v10 << (8 * v8))) + 4;
        unsigned int v9 = v12 + 4;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  switch(v9)
  {
    case 1u:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      char v14 = 1;
      break;
    case 2u:
      (*(void (**)(_OWORD *))(*(void *)(v4 - 8) + 32))(a1);
      char v14 = 2;
      break;
    case 3u:
      *a1 = *(_OWORD *)a2;
      char v14 = 3;
      break;
    default:
      (*(void (**)(_OWORD *))(*(void *)(a3[2] - 8) + 32))(a1);
      char v14 = 0;
      break;
  }
  *((unsigned char *)a1 + v8) = v14;
  return a1;
}

unsigned __int8 *sub_1C41CB474(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v7 = *(void *)(v5 - 8);
    unint64_t v8 = *(void *)(v7 + 64);
    uint64_t v9 = *(void *)(v6 - 8);
    if (*(void *)(v9 + 64) > v8) {
      unint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v10 = a3[4];
    uint64_t v11 = *(void *)(v10 - 8);
    unint64_t v12 = *(void *)(v11 + 64);
    if (v12 <= v8) {
      unint64_t v12 = v8;
    }
    if (v12 <= 0x10) {
      uint64_t v13 = 16;
    }
    else {
      uint64_t v13 = v12;
    }
    unsigned int v14 = a1[v13];
    unsigned int v15 = v14 - 4;
    if (v14 >= 4)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a1;
          goto LABEL_18;
        case 2:
          int v17 = *(unsigned __int16 *)a1;
          goto LABEL_18;
        case 3:
          int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_18;
        case 4:
          int v17 = *(_DWORD *)a1;
LABEL_18:
          int v18 = (v17 | (v15 << (8 * v13))) + 4;
          unsigned int v14 = v17 + 4;
          if (v13 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    switch(v14)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v9 + 8))(a1, v6);
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v11 + 8))(a1, v10);
        break;
      case 3u:
        swift_release();
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v5);
        break;
    }
    unsigned int v19 = a2[v13];
    unsigned int v20 = v19 - 4;
    if (v19 >= 4)
    {
      if (v13 <= 3) {
        uint64_t v21 = v13;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          goto LABEL_34;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          goto LABEL_34;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_34;
        case 4:
          int v22 = *(_DWORD *)a2;
LABEL_34:
          int v23 = (v22 | (v20 << (8 * v13))) + 4;
          unsigned int v19 = v22 + 4;
          if (v13 < 4) {
            unsigned int v19 = v23;
          }
          break;
        default:
          break;
      }
    }
    switch(v19)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v9 + 32))(a1, a2, v6);
        char v24 = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v11 + 32))(a1, a2, v10);
        char v24 = 2;
        break;
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v24 = 3;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
        char v24 = 0;
        break;
    }
    a1[v13] = v24;
  }
  return a1;
}

uint64_t sub_1C41CB818(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  unint64_t v3 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  uint64_t v5 = *(void *)(a3[4] - 8);
  if (*(void *)(v5 + 64) > v3) {
    unint64_t v3 = *(void *)(v5 + 64);
  }
  uint64_t v6 = 16;
  if (v3 > 0x10) {
    uint64_t v6 = v3;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_26;
  }
  uint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 252) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v11 < 2)
    {
LABEL_26:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 4) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_26;
  }
LABEL_18:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 253;
}

void sub_1C41CB988(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  unint64_t v5 = *(void *)(*(void *)(a4[2] - 8) + 64);
  if (*(void *)(*(void *)(a4[3] - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(a4[3] - 8) + 64);
  }
  uint64_t v6 = *(void *)(a4[4] - 8);
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v7 = v5 + 1;
  if (a3 < 0xFD)
  {
    int v8 = 0;
  }
  else if (v7 <= 3)
  {
    unsigned int v11 = ((a3 + ~(-1 << (8 * v7)) - 252) >> (8 * v7)) + 1;
    if (HIWORD(v11))
    {
      int v8 = 4;
    }
    else if (v11 >= 0x100)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 > 1;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 > 0xFC)
  {
    unsigned int v9 = a2 - 253;
    if (v7 < 4)
    {
      int v10 = (v9 >> (8 * v7)) + 1;
      if (v5 != -1)
      {
        int v12 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if (v7 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if (v7 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v9;
      int v10 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v7] = v10;
        break;
      case 2:
        *(_WORD *)&a1[v7] = v10;
        break;
      case 3:
LABEL_38:
        __break(1u);
        JUMPOUT(0x1C41CBB8CLL);
      case 4:
        *(_DWORD *)&a1[v7] = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v8)
    {
      case 1:
        a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_27;
      case 2:
        *(_WORD *)&a1[v7] = 0;
        goto LABEL_26;
      case 3:
        goto LABEL_38;
      case 4:
        *(_DWORD *)&a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_27;
      default:
LABEL_26:
        if (a2) {
LABEL_27:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1C41CBBB4(unsigned __int8 *a1, void *a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2[2] - 8) + 64);
  uint64_t v3 = *(void *)(a2[3] - 8);
  if (*(void *)(v3 + 64) > v2) {
    unint64_t v2 = *(void *)(v3 + 64);
  }
  uint64_t v4 = *(void *)(a2[4] - 8);
  if (*(void *)(v4 + 64) > v2) {
    unint64_t v2 = *(void *)(v4 + 64);
  }
  uint64_t v5 = 16;
  if (v2 > 0x10) {
    uint64_t v5 = v2;
  }
  uint64_t v6 = a1[v5];
  int v7 = v6 - 4;
  if (v6 >= 4)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_16;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_16;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_16;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_16:
        unsigned int v10 = (v9 | (v7 << (8 * v5))) + 4;
        LODWORD(v6) = v9 + 4;
        if (v5 >= 4) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v10;
        }
        break;
      default:
        return v6;
    }
  }
  return v6;
}

void sub_1C41CBCA8(unsigned char *a1, unsigned int a2, void *a3)
{
  if (a2 > 3)
  {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
    uint64_t v6 = *(void *)(a3[3] - 8);
    if (*(void *)(v6 + 64) > v5) {
      unint64_t v5 = *(void *)(v6 + 64);
    }
    uint64_t v7 = *(void *)(a3[4] - 8);
    if (*(void *)(v7 + 64) > v5) {
      unint64_t v5 = *(void *)(v7 + 64);
    }
    if (v5 <= 0x10) {
      size_t v8 = 16;
    }
    else {
      size_t v8 = v5;
    }
    unsigned int v9 = a2 - 4;
    if (v8 < 4)
    {
      unsigned int v10 = v9 >> (8 * v8);
      int v11 = v9 & ~(-1 << (8 * v8));
      a1[v8] = v10 + 4;
      bzero(a1, v8);
      if (v8 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if (v8 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
    else
    {
      a1[v8] = 4;
      bzero(a1, v8);
      *(_DWORD *)a1 = v9;
    }
  }
  else
  {
    unint64_t v4 = *(void *)(*(void *)(a3[2] - 8) + 64);
    if (*(void *)(*(void *)(a3[3] - 8) + 64) > v4) {
      unint64_t v4 = *(void *)(*(void *)(a3[3] - 8) + 64);
    }
    if (*(void *)(*(void *)(a3[4] - 8) + 64) > v4) {
      unint64_t v4 = *(void *)(*(void *)(a3[4] - 8) + 64);
    }
    if (v4 <= 0x10) {
      unint64_t v4 = 16;
    }
    a1[v4] = a2;
  }
}

uint64_t sub_1C41CBE28()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

void *sub_1C41CBF88(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) > v6) {
    unint64_t v6 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(void *)(v10 + 64) <= v6) {
    unint64_t v11 = v6;
  }
  else {
    unint64_t v11 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  size_t v12 = v11 + 1;
  uint64_t v13 = (*(unsigned char *)(v8 + 80) | *(unsigned char *)(v5 + 80) | *(unsigned char *)(v10 + 80));
  if (v13 <= 7
    && v12 <= 0x18
    && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) == 0)
  {
    unsigned int v18 = a2[v11];
    unsigned int v19 = v18 - 4;
    if (v18 >= 4)
    {
      if (v11 <= 3) {
        uint64_t v20 = v11;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_24;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_24;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_24;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_24:
          int v22 = (v21 | (v19 << (8 * v11))) + 4;
          unsigned int v18 = v21 + 4;
          if (v11 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    switch(v18)
    {
      case 0u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((unsigned char *)a1 + v11) = 0;
        break;
      case 1u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v7);
        *((unsigned char *)a1 + v11) = 1;
        break;
      case 2u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v10 + 16))(a1, a2, v9);
        *((unsigned char *)a1 + v11) = 2;
        break;
      case 3u:
        *((unsigned char *)a1 + v11) = 3;
        break;
      default:
        memcpy(a1, a2, v12);
        break;
    }
  }
  else
  {
    uint64_t v16 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1C41CC2C0(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = *(void *)(v15 + 64);
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(v4 - 8);
  if (*(void *)(v5 + 64) > v3) {
    unint64_t v3 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  uint64_t result = swift_getAssociatedTypeWitness();
  unint64_t v7 = *(void *)(*(void *)(result - 8) + 64);
  if (v7 <= v3) {
    unint64_t v7 = v3;
  }
  unsigned int v8 = a1[v7];
  unsigned int v9 = v8 - 4;
  if (v8 >= 4)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a1;
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v11 = *(_DWORD *)a1;
LABEL_14:
        int v12 = (v11 | (v9 << (8 * v7))) + 4;
        unsigned int v8 = v11 + 4;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8)
  {
    if (v8 == 2)
    {
      uint64_t v13 = *(void *)(result - 8);
      uint64_t AssociatedTypeWitness = result;
    }
    else
    {
      if (v8 != 1) {
        return result;
      }
      uint64_t v13 = v5;
      uint64_t AssociatedTypeWitness = v4;
    }
  }
  else
  {
    uint64_t v13 = v15;
  }
  unsigned int v14 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v13 + 8);
  return v14(a1, AssociatedTypeWitness);
}

unsigned char *sub_1C41CC548(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) > v6) {
    unint64_t v6 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t v9 = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(v9 - 8) + 64) <= v6) {
    unint64_t v10 = v6;
  }
  else {
    unint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  unsigned int v11 = a2[v10];
  unsigned int v12 = v11 - 4;
  if (v11 >= 4)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        goto LABEL_15;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        goto LABEL_15;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_15;
      case 4:
        int v14 = *(_DWORD *)a2;
LABEL_15:
        int v15 = (v14 | (v12 << (8 * v10))) + 4;
        unsigned int v11 = v14 + 4;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  switch(v11)
  {
    case 0u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      a1[v10] = 0;
      break;
    case 1u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v7);
      a1[v10] = 1;
      break;
    case 2u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      a1[v10] = 2;
      break;
    case 3u:
      a1[v10] = 3;
      break;
    default:
      memcpy(a1, a2, v10 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41CC834(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) > v6) {
    unint64_t v6 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  if (*(void *)(v11 + 64) <= v6) {
    unint64_t v12 = v6;
  }
  else {
    unint64_t v12 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  unsigned int v13 = a1[v12];
  unsigned int v14 = v13 - 4;
  if (v13 >= 4)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a1;
        goto LABEL_16;
      case 2:
        int v16 = *(unsigned __int16 *)a1;
        goto LABEL_16;
      case 3:
        int v16 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_16;
      case 4:
        int v16 = *(_DWORD *)a1;
LABEL_16:
        int v17 = (v16 | (v14 << (8 * v12))) + 4;
        unsigned int v13 = v16 + 4;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  switch(v13)
  {
    case 0u:
      uint64_t v18 = v5;
      uint64_t v19 = AssociatedTypeWitness;
      goto LABEL_24;
    case 2u:
      uint64_t v18 = *(void *)(v9 - 8);
      uint64_t v19 = v9;
      goto LABEL_24;
    case 1u:
      uint64_t v18 = v8;
      uint64_t v19 = v7;
LABEL_24:
      (*(void (**)(unsigned __int8 *, uint64_t))(v18 + 8))(a1, v19);
      break;
  }
  unsigned int v20 = a2[v12];
  unsigned int v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v12 <= 3) {
      uint64_t v22 = v12;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *a2;
        goto LABEL_34;
      case 2:
        int v23 = *(unsigned __int16 *)a2;
        goto LABEL_34;
      case 3:
        int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_34;
      case 4:
        int v23 = *(_DWORD *)a2;
LABEL_34:
        int v24 = (v23 | (v21 << (8 * v12))) + 4;
        unsigned int v20 = v23 + 4;
        if (v12 < 4) {
          unsigned int v20 = v24;
        }
        break;
      default:
        break;
    }
  }
  switch(v20)
  {
    case 0u:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      a1[v12] = 0;
      break;
    case 1u:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v7);
      a1[v12] = 1;
      break;
    case 2u:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v11 + 16))(a1, a2, v10);
      a1[v12] = 2;
      break;
    case 3u:
      a1[v12] = 3;
      break;
    default:
      memcpy(a1, a2, v12 + 1);
      break;
  }
  return a1;
}

unsigned char *sub_1C41CCC00(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) > v6) {
    unint64_t v6 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t v9 = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(v9 - 8) + 64) <= v6) {
    unint64_t v10 = v6;
  }
  else {
    unint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  unsigned int v11 = a2[v10];
  unsigned int v12 = v11 - 4;
  if (v11 >= 4)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        goto LABEL_15;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        goto LABEL_15;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_15;
      case 4:
        int v14 = *(_DWORD *)a2;
LABEL_15:
        int v15 = (v14 | (v12 << (8 * v10))) + 4;
        unsigned int v11 = v14 + 4;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  switch(v11)
  {
    case 0u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      a1[v10] = 0;
      break;
    case 1u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v7);
      a1[v10] = 1;
      break;
    case 2u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      a1[v10] = 2;
      break;
    case 3u:
      a1[v10] = 3;
      break;
    default:
      memcpy(a1, a2, v10 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41CCEEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) > v6) {
    unint64_t v6 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  if (*(void *)(v11 + 64) <= v6) {
    unint64_t v12 = v6;
  }
  else {
    unint64_t v12 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  unsigned int v13 = a1[v12];
  unsigned int v14 = v13 - 4;
  if (v13 >= 4)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a1;
        goto LABEL_16;
      case 2:
        int v16 = *(unsigned __int16 *)a1;
        goto LABEL_16;
      case 3:
        int v16 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_16;
      case 4:
        int v16 = *(_DWORD *)a1;
LABEL_16:
        int v17 = (v16 | (v14 << (8 * v12))) + 4;
        unsigned int v13 = v16 + 4;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  switch(v13)
  {
    case 0u:
      uint64_t v18 = v5;
      uint64_t v19 = AssociatedTypeWitness;
      goto LABEL_24;
    case 2u:
      uint64_t v18 = *(void *)(v9 - 8);
      uint64_t v19 = v9;
      goto LABEL_24;
    case 1u:
      uint64_t v18 = v8;
      uint64_t v19 = v7;
LABEL_24:
      (*(void (**)(unsigned __int8 *, uint64_t))(v18 + 8))(a1, v19);
      break;
  }
  unsigned int v20 = a2[v12];
  unsigned int v21 = v20 - 4;
  if (v20 >= 4)
  {
    if (v12 <= 3) {
      uint64_t v22 = v12;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *a2;
        goto LABEL_34;
      case 2:
        int v23 = *(unsigned __int16 *)a2;
        goto LABEL_34;
      case 3:
        int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_34;
      case 4:
        int v23 = *(_DWORD *)a2;
LABEL_34:
        int v24 = (v23 | (v21 << (8 * v12))) + 4;
        unsigned int v20 = v23 + 4;
        if (v12 < 4) {
          unsigned int v20 = v24;
        }
        break;
      default:
        break;
    }
  }
  switch(v20)
  {
    case 0u:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      a1[v12] = 0;
      break;
    case 1u:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v7);
      a1[v12] = 1;
      break;
    case 2u:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v11 + 32))(a1, a2, v10);
      a1[v12] = 2;
      break;
    case 3u:
      a1[v12] = 3;
      break;
    default:
      memcpy(a1, a2, v12 + 1);
      break;
  }
  return a1;
}

uint64_t sub_1C41CD2B8(unsigned __int16 *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 > v4) {
    unint64_t v4 = v5;
  }
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 <= v4) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = v6;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_25;
  }
  unint64_t v8 = v7 + 1;
  char v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    unsigned int v12 = ((a2 + ~(-1 << v9) - 251) >> v9) + 1;
    if (HIWORD(v12))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v12 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v12 < 2)
    {
LABEL_25:
      unsigned int v14 = *((unsigned __int8 *)a1 + v7);
      if (v14 >= 5) {
        return (v14 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_25;
  }
LABEL_17:
  int v13 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v13 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v8 | v13) + 252;
}

void sub_1C41CD4AC(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 > v6) {
    unint64_t v6 = v7;
  }
  unint64_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 <= v6) {
    unint64_t v8 = v6;
  }
  size_t v9 = v8 + 1;
  if (a3 < 0xFC)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v9)) - 251) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 > 0xFB)
  {
    unsigned int v11 = a2 - 252;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v8 != -1)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v8 + 1);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        break;
      case 3:
LABEL_36:
        __break(1u);
        JUMPOUT(0x1C41CD714);
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        goto LABEL_24;
      case 3:
        goto LABEL_36;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      default:
LABEL_24:
        if (a2) {
LABEL_25:
        }
          a1[v8] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1C41CD73C(unsigned __int8 *a1)
{
  unint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v3 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 > v2) {
    unint64_t v2 = v3;
  }
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v4 <= v2) {
    unint64_t v4 = v2;
  }
  uint64_t result = a1[v4];
  if (result >= 4)
  {
    if (v4 <= 3) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_14;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_14:
        unsigned int v8 = (v7 | ((result - 4) << (8 * v4))) + 4;
        unsigned int v9 = v7 + 4;
        if (v4 >= 4) {
          uint64_t result = v9;
        }
        else {
          uint64_t result = v8;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1C41CD8AC(unsigned char *a1, unsigned int a2)
{
  size_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  size_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 > v4) {
    size_t v4 = v5;
  }
  size_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 <= v4) {
    size_t v7 = v4;
  }
  else {
    size_t v7 = v6;
  }
  if (a2 > 3)
  {
    unsigned int v8 = a2 - 4;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 4;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 4;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    a1[v7] = a2;
  }
}

uint64_t sub_1C41CDA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 72);
}

uint64_t sub_1C41CDA28()
{
  uint64_t result = type metadata accessor for TaggedValue_4.TaggedEnum();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C41CDACC(unsigned __int8 *a1, void *a2)
{
  uint64_t v2 = *(void *)(a2[3] - 8);
  if (*(void *)(v2 + 64) <= *(void *)(*(void *)(a2[2] - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(a2[2] - 8) + 64);
  }
  else {
    unint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a2[4];
  uint64_t v5 = a2[5];
  if (*(void *)(*(void *)(v4 - 8) + 64) > v3) {
    unint64_t v3 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  if (v6 <= v3) {
    unint64_t v6 = v3;
  }
  if (v6 <= 0x10) {
    unint64_t v6 = 16;
  }
  unsigned int v7 = a1[v6];
  unsigned int v8 = v7 - 5;
  if (v7 >= 5)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_19;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_19;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_19;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_19:
        int v11 = (v10 | (v8 << (8 * v6))) + 5;
        unsigned int v7 = v10 + 5;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  switch(v7)
  {
    case 1u:
      uint64_t result = (*(uint64_t (**)(void))(v2 + 8))();
      break;
    case 2u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v4 - 8) + 8))();
      break;
    case 3u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v5 - 8) + 8))();
      break;
    case 4u:
      uint64_t result = swift_release();
      break;
    default:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2[2] - 8) + 8))();
      break;
  }
  return result;
}

void *sub_1C41CDD28(void *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = a3[4];
  uint64_t v7 = a3[5];
  if (*(void *)(*(void *)(v6 - 8) + 64) <= v5) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  if (v9 <= v8) {
    unint64_t v9 = v8;
  }
  if (v9 <= 0x10) {
    uint64_t v10 = 16;
  }
  else {
    uint64_t v10 = v9;
  }
  unsigned int v11 = a2[v10];
  if (v11 >= 5)
  {
    if (v10 <= 3) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_21;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_21;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_21;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_21:
        int v14 = (v13 | ((v11 - 5) << (8 * v10))) + 5;
        unsigned int v15 = v13 + 5;
        if (v10 >= 4) {
          unsigned int v11 = v15;
        }
        else {
          unsigned int v11 = v14;
        }
        break;
      default:
        break;
    }
  }
  switch(v11)
  {
    case 1u:
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)a1 + v10) = 1;
      break;
    case 2u:
      (*(void (**)(void *))(*(void *)(v6 - 8) + 16))(a1);
      *((unsigned char *)a1 + v10) = 2;
      break;
    case 3u:
      (*(void (**)(void *))(*(void *)(v7 - 8) + 16))(a1);
      *((unsigned char *)a1 + v10) = 3;
      break;
    case 4u:
      uint64_t v16 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v16;
      *((unsigned char *)a1 + v10) = 4;
      swift_retain();
      break;
    default:
      (*(void (**)(void *))(*(void *)(a3[2] - 8) + 16))(a1);
      *((unsigned char *)a1 + v10) = 0;
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41CDFF0(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v28 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v28 + 64);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v9 = a3[4];
    uint64_t v10 = a3[5];
    uint64_t v11 = *(void *)(v9 - 8);
    if (*(void *)(v11 + 64) > v7) {
      unint64_t v7 = *(void *)(v11 + 64);
    }
    uint64_t v12 = *(void *)(v10 - 8);
    unint64_t v13 = *(void *)(v12 + 64);
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 5;
    if (v15 >= 5)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          goto LABEL_20;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          goto LABEL_20;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_20;
        case 4:
          int v18 = *(_DWORD *)a1;
LABEL_20:
          int v19 = (v18 | (v16 << (8 * v14))) + 5;
          unsigned int v15 = v18 + 5;
          if (v14 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    switch(v15)
    {
      case 1u:
        unsigned int v20 = *(void (**)(void))(v8 + 8);
        goto LABEL_28;
      case 2u:
        unsigned int v20 = *(void (**)(void))(v11 + 8);
        goto LABEL_28;
      case 3u:
        unsigned int v20 = *(void (**)(void))(v12 + 8);
        goto LABEL_28;
      case 4u:
        swift_release();
        goto LABEL_29;
      default:
        unsigned int v20 = *(void (**)(void))(v28 + 8);
LABEL_28:
        v20();
LABEL_29:
        unsigned int v21 = a2[v14];
        unsigned int v22 = v21 - 5;
        if (v21 >= 5)
        {
          if (v14 <= 3) {
            uint64_t v23 = v14;
          }
          else {
            uint64_t v23 = 4;
          }
          switch(v23)
          {
            case 1:
              int v24 = *a2;
              goto LABEL_38;
            case 2:
              int v24 = *(unsigned __int16 *)a2;
              goto LABEL_38;
            case 3:
              int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_38;
            case 4:
              int v24 = *(_DWORD *)a2;
LABEL_38:
              int v25 = (v24 | (v22 << (8 * v14))) + 5;
              unsigned int v21 = v24 + 5;
              if (v14 < 4) {
                unsigned int v21 = v25;
              }
              break;
            default:
              break;
          }
        }
        switch(v21)
        {
          case 1u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v6);
            char v26 = 1;
            goto LABEL_46;
          case 2u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v11 + 16))(a1, a2, v9);
            char v26 = 2;
            goto LABEL_46;
          case 3u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 16))(a1, a2, v10);
            char v26 = 3;
LABEL_46:
            a1[v14] = v26;
            break;
          case 4u:
            *(void *)a1 = *(void *)a2;
            *((void *)a1 + 1) = *((void *)a2 + 1);
            a1[v14] = 4;
            swift_retain();
            break;
          default:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 16))(a1, a2, v5);
            a1[v14] = 0;
            break;
        }
        break;
    }
  }
  return a1;
}

_OWORD *sub_1C41CE424(_OWORD *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = a3[4];
  uint64_t v7 = a3[5];
  if (*(void *)(*(void *)(v6 - 8) + 64) <= v5) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  if (v9 <= v8) {
    unint64_t v9 = v8;
  }
  if (v9 <= 0x10) {
    uint64_t v10 = 16;
  }
  else {
    uint64_t v10 = v9;
  }
  unsigned int v11 = a2[v10];
  if (v11 >= 5)
  {
    if (v10 <= 3) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_21;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_21;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_21;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_21:
        int v14 = (v13 | ((v11 - 5) << (8 * v10))) + 5;
        unsigned int v15 = v13 + 5;
        if (v10 >= 4) {
          unsigned int v11 = v15;
        }
        else {
          unsigned int v11 = v14;
        }
        break;
      default:
        break;
    }
  }
  switch(v11)
  {
    case 1u:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      char v16 = 1;
      break;
    case 2u:
      (*(void (**)(_OWORD *))(*(void *)(v6 - 8) + 32))(a1);
      char v16 = 2;
      break;
    case 3u:
      (*(void (**)(_OWORD *))(*(void *)(v7 - 8) + 32))(a1);
      char v16 = 3;
      break;
    case 4u:
      *a1 = *(_OWORD *)a2;
      char v16 = 4;
      break;
    default:
      (*(void (**)(_OWORD *))(*(void *)(a3[2] - 8) + 32))(a1);
      char v16 = 0;
      break;
  }
  *((unsigned char *)a1 + v10) = v16;
  return a1;
}

unsigned __int8 *sub_1C41CE6DC(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v28 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v28 + 64);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v9 = a3[4];
    uint64_t v10 = a3[5];
    uint64_t v11 = *(void *)(v9 - 8);
    if (*(void *)(v11 + 64) > v7) {
      unint64_t v7 = *(void *)(v11 + 64);
    }
    uint64_t v12 = *(void *)(v10 - 8);
    unint64_t v13 = *(void *)(v12 + 64);
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 5;
    if (v15 >= 5)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          goto LABEL_20;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          goto LABEL_20;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_20;
        case 4:
          int v18 = *(_DWORD *)a1;
LABEL_20:
          int v19 = (v18 | (v16 << (8 * v14))) + 5;
          unsigned int v15 = v18 + 5;
          if (v14 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    switch(v15)
    {
      case 1u:
        unsigned int v20 = *(void (**)(void))(v8 + 8);
        goto LABEL_28;
      case 2u:
        unsigned int v20 = *(void (**)(void))(v11 + 8);
        goto LABEL_28;
      case 3u:
        unsigned int v20 = *(void (**)(void))(v12 + 8);
        goto LABEL_28;
      case 4u:
        swift_release();
        goto LABEL_29;
      default:
        unsigned int v20 = *(void (**)(void))(v28 + 8);
LABEL_28:
        v20();
LABEL_29:
        unsigned int v21 = a2[v14];
        unsigned int v22 = v21 - 5;
        if (v21 >= 5)
        {
          if (v14 <= 3) {
            uint64_t v23 = v14;
          }
          else {
            uint64_t v23 = 4;
          }
          switch(v23)
          {
            case 1:
              int v24 = *a2;
              goto LABEL_38;
            case 2:
              int v24 = *(unsigned __int16 *)a2;
              goto LABEL_38;
            case 3:
              int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_38;
            case 4:
              int v24 = *(_DWORD *)a2;
LABEL_38:
              int v25 = (v24 | (v22 << (8 * v14))) + 5;
              unsigned int v21 = v24 + 5;
              if (v14 < 4) {
                unsigned int v21 = v25;
              }
              break;
            default:
              break;
          }
        }
        switch(v21)
        {
          case 1u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v6);
            char v26 = 1;
            break;
          case 2u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v11 + 32))(a1, a2, v9);
            char v26 = 2;
            break;
          case 3u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 32))(a1, a2, v10);
            char v26 = 3;
            break;
          case 4u:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            char v26 = 4;
            break;
          default:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 32))(a1, a2, v5);
            char v26 = 0;
            break;
        }
        a1[v14] = v26;
        break;
    }
  }
  return a1;
}

uint64_t sub_1C41CEB00(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  unint64_t v3 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  uint64_t v5 = *(void *)(a3[4] - 8);
  if (*(void *)(v5 + 64) > v3) {
    unint64_t v3 = *(void *)(v5 + 64);
  }
  uint64_t v6 = *(void *)(a3[5] - 8);
  if (*(void *)(v6 + 64) > v3) {
    unint64_t v3 = *(void *)(v6 + 64);
  }
  uint64_t v7 = 16;
  if (v3 > 0x10) {
    uint64_t v7 = v3;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_28;
  }
  uint64_t v8 = v7 + 1;
  char v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    unsigned int v12 = ((a2 + ~(-1 << v9) - 251) >> v9) + 1;
    if (HIWORD(v12))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v12 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v12 < 2)
    {
LABEL_28:
      unsigned int v14 = *((unsigned __int8 *)a1 + v7);
      if (v14 >= 5) {
        return (v14 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_28;
  }
LABEL_20:
  int v13 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v13 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v8 | v13) + 252;
}

void sub_1C41CEC90(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  unint64_t v5 = *(void *)(*(void *)(a4[2] - 8) + 64);
  if (*(void *)(*(void *)(a4[3] - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(a4[3] - 8) + 64);
  }
  uint64_t v6 = *(void *)(a4[4] - 8);
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a4[5] - 8);
  if (*(void *)(v7 + 64) > v5) {
    unint64_t v5 = *(void *)(v7 + 64);
  }
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v8 = v5 + 1;
  if (a3 < 0xFC)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 251) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFB)
  {
    unsigned int v10 = a2 - 252;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v5 != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_40:
        __break(1u);
        JUMPOUT(0x1C41CEEB4);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_28;
      case 3:
        goto LABEL_40;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      default:
LABEL_28:
        if (a2) {
LABEL_29:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t type metadata accessor for TaggedValue_4()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C41CEEF4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

void *sub_1C41CF048(void *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  uint64_t v5 = *(void *)(a3[3] - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    unint64_t v6 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t v10 = *(void *)(a3[5] - 8);
  unint64_t v11 = *(void *)(v10 + 64);
  if (v11 <= v9) {
    unint64_t v11 = v9;
  }
  if (v11 <= 0x10) {
    uint64_t v12 = 16;
  }
  else {
    uint64_t v12 = v11;
  }
  int v13 = *(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v8 + 80) | *(_DWORD *)(v10 + 80);
  if ((unint64_t)(v12 + 1) <= 0x18 && (v13 & 0x1000F8) == 0)
  {
    unsigned int v17 = a2[v12];
    if (v17 >= 5)
    {
      if (v12 <= 3) {
        uint64_t v18 = v12;
      }
      else {
        uint64_t v18 = 4;
      }
      switch(v18)
      {
        case 1:
          int v19 = *a2;
          goto LABEL_28;
        case 2:
          int v19 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v19 = *(_DWORD *)a2;
LABEL_28:
          int v20 = (v19 | ((v17 - 5) << (8 * v12))) + 5;
          unsigned int v21 = v19 + 5;
          if (v12 >= 4) {
            unsigned int v17 = v21;
          }
          else {
            unsigned int v17 = v20;
          }
          break;
        default:
          break;
      }
    }
    switch(v17)
    {
      case 1u:
        (*(void (**)(void *))(v5 + 16))(a1);
        *((unsigned char *)a1 + v12) = 1;
        break;
      case 2u:
        (*(void (**)(void *))(v8 + 16))(a1);
        *((unsigned char *)a1 + v12) = 2;
        break;
      case 3u:
        (*(void (**)(void *))(v10 + 16))(a1);
        *((unsigned char *)a1 + v12) = 3;
        break;
      case 4u:
        uint64_t v22 = *((void *)a2 + 1);
        *a1 = *(void *)a2;
        a1[1] = v22;
        *((unsigned char *)a1 + v12) = 4;
        goto LABEL_17;
      default:
        (*(void (**)(void *))(v4 + 16))(a1);
        *((unsigned char *)a1 + v12) = 0;
        break;
    }
  }
  else
  {
    uint64_t v15 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v15 + (((v13 & 0xF8 | 7u) + 16) & ~(unint64_t)(v13 & 0xF8 | 7u)));
LABEL_17:
    swift_retain();
  }
  return a1;
}

uint64_t sub_1C41CF364(unsigned __int8 *a1, void *a2)
{
  uint64_t v2 = *(void *)(a2[3] - 8);
  if (*(void *)(v2 + 64) <= *(void *)(*(void *)(a2[2] - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(a2[2] - 8) + 64);
  }
  else {
    unint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a2[4];
  uint64_t v5 = a2[5];
  if (*(void *)(*(void *)(v4 - 8) + 64) > v3) {
    unint64_t v3 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  if (v6 <= v3) {
    unint64_t v6 = v3;
  }
  if (v6 <= 0x10) {
    unint64_t v6 = 16;
  }
  unsigned int v7 = a1[v6];
  unsigned int v8 = v7 - 5;
  if (v7 >= 5)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_19;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_19;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_19;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_19:
        int v11 = (v10 | (v8 << (8 * v6))) + 5;
        unsigned int v7 = v10 + 5;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  switch(v7)
  {
    case 1u:
      uint64_t result = (*(uint64_t (**)(void))(v2 + 8))();
      break;
    case 2u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v4 - 8) + 8))();
      break;
    case 3u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v5 - 8) + 8))();
      break;
    case 4u:
      uint64_t result = swift_release();
      break;
    default:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2[2] - 8) + 8))();
      break;
  }
  return result;
}

void *sub_1C41CF5C0(void *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = a3[4];
  uint64_t v7 = a3[5];
  if (*(void *)(*(void *)(v6 - 8) + 64) <= v5) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  if (v9 <= v8) {
    unint64_t v9 = v8;
  }
  if (v9 <= 0x10) {
    uint64_t v10 = 16;
  }
  else {
    uint64_t v10 = v9;
  }
  unsigned int v11 = a2[v10];
  if (v11 >= 5)
  {
    if (v10 <= 3) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_21;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_21;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_21;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_21:
        int v14 = (v13 | ((v11 - 5) << (8 * v10))) + 5;
        unsigned int v15 = v13 + 5;
        if (v10 >= 4) {
          unsigned int v11 = v15;
        }
        else {
          unsigned int v11 = v14;
        }
        break;
      default:
        break;
    }
  }
  switch(v11)
  {
    case 1u:
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)a1 + v10) = 1;
      break;
    case 2u:
      (*(void (**)(void *))(*(void *)(v6 - 8) + 16))(a1);
      *((unsigned char *)a1 + v10) = 2;
      break;
    case 3u:
      (*(void (**)(void *))(*(void *)(v7 - 8) + 16))(a1);
      *((unsigned char *)a1 + v10) = 3;
      break;
    case 4u:
      uint64_t v16 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v16;
      *((unsigned char *)a1 + v10) = 4;
      swift_retain();
      break;
    default:
      (*(void (**)(void *))(*(void *)(a3[2] - 8) + 16))(a1);
      *((unsigned char *)a1 + v10) = 0;
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41CF888(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v28 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v28 + 64);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v9 = a3[4];
    uint64_t v10 = a3[5];
    uint64_t v11 = *(void *)(v9 - 8);
    if (*(void *)(v11 + 64) > v7) {
      unint64_t v7 = *(void *)(v11 + 64);
    }
    uint64_t v12 = *(void *)(v10 - 8);
    unint64_t v13 = *(void *)(v12 + 64);
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 5;
    if (v15 >= 5)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          goto LABEL_20;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          goto LABEL_20;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_20;
        case 4:
          int v18 = *(_DWORD *)a1;
LABEL_20:
          int v19 = (v18 | (v16 << (8 * v14))) + 5;
          unsigned int v15 = v18 + 5;
          if (v14 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    switch(v15)
    {
      case 1u:
        int v20 = *(void (**)(void))(v8 + 8);
        goto LABEL_28;
      case 2u:
        int v20 = *(void (**)(void))(v11 + 8);
        goto LABEL_28;
      case 3u:
        int v20 = *(void (**)(void))(v12 + 8);
        goto LABEL_28;
      case 4u:
        swift_release();
        goto LABEL_29;
      default:
        int v20 = *(void (**)(void))(v28 + 8);
LABEL_28:
        v20();
LABEL_29:
        unsigned int v21 = a2[v14];
        unsigned int v22 = v21 - 5;
        if (v21 >= 5)
        {
          if (v14 <= 3) {
            uint64_t v23 = v14;
          }
          else {
            uint64_t v23 = 4;
          }
          switch(v23)
          {
            case 1:
              int v24 = *a2;
              goto LABEL_38;
            case 2:
              int v24 = *(unsigned __int16 *)a2;
              goto LABEL_38;
            case 3:
              int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_38;
            case 4:
              int v24 = *(_DWORD *)a2;
LABEL_38:
              int v25 = (v24 | (v22 << (8 * v14))) + 5;
              unsigned int v21 = v24 + 5;
              if (v14 < 4) {
                unsigned int v21 = v25;
              }
              break;
            default:
              break;
          }
        }
        switch(v21)
        {
          case 1u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v6);
            char v26 = 1;
            goto LABEL_46;
          case 2u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v11 + 16))(a1, a2, v9);
            char v26 = 2;
            goto LABEL_46;
          case 3u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 16))(a1, a2, v10);
            char v26 = 3;
LABEL_46:
            a1[v14] = v26;
            break;
          case 4u:
            *(void *)a1 = *(void *)a2;
            *((void *)a1 + 1) = *((void *)a2 + 1);
            a1[v14] = 4;
            swift_retain();
            break;
          default:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 16))(a1, a2, v5);
            a1[v14] = 0;
            break;
        }
        break;
    }
  }
  return a1;
}

_OWORD *sub_1C41CFCBC(_OWORD *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = a3[4];
  uint64_t v7 = a3[5];
  if (*(void *)(*(void *)(v6 - 8) + 64) <= v5) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  if (v9 <= v8) {
    unint64_t v9 = v8;
  }
  if (v9 <= 0x10) {
    uint64_t v10 = 16;
  }
  else {
    uint64_t v10 = v9;
  }
  unsigned int v11 = a2[v10];
  if (v11 >= 5)
  {
    if (v10 <= 3) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_21;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_21;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_21;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_21:
        int v14 = (v13 | ((v11 - 5) << (8 * v10))) + 5;
        unsigned int v15 = v13 + 5;
        if (v10 >= 4) {
          unsigned int v11 = v15;
        }
        else {
          unsigned int v11 = v14;
        }
        break;
      default:
        break;
    }
  }
  switch(v11)
  {
    case 1u:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      char v16 = 1;
      break;
    case 2u:
      (*(void (**)(_OWORD *))(*(void *)(v6 - 8) + 32))(a1);
      char v16 = 2;
      break;
    case 3u:
      (*(void (**)(_OWORD *))(*(void *)(v7 - 8) + 32))(a1);
      char v16 = 3;
      break;
    case 4u:
      *a1 = *(_OWORD *)a2;
      char v16 = 4;
      break;
    default:
      (*(void (**)(_OWORD *))(*(void *)(a3[2] - 8) + 32))(a1);
      char v16 = 0;
      break;
  }
  *((unsigned char *)a1 + v10) = v16;
  return a1;
}

unsigned __int8 *sub_1C41CFF74(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v28 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v28 + 64);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v9 = a3[4];
    uint64_t v10 = a3[5];
    uint64_t v11 = *(void *)(v9 - 8);
    if (*(void *)(v11 + 64) > v7) {
      unint64_t v7 = *(void *)(v11 + 64);
    }
    uint64_t v12 = *(void *)(v10 - 8);
    unint64_t v13 = *(void *)(v12 + 64);
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 5;
    if (v15 >= 5)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          goto LABEL_20;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          goto LABEL_20;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_20;
        case 4:
          int v18 = *(_DWORD *)a1;
LABEL_20:
          int v19 = (v18 | (v16 << (8 * v14))) + 5;
          unsigned int v15 = v18 + 5;
          if (v14 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    switch(v15)
    {
      case 1u:
        int v20 = *(void (**)(void))(v8 + 8);
        goto LABEL_28;
      case 2u:
        int v20 = *(void (**)(void))(v11 + 8);
        goto LABEL_28;
      case 3u:
        int v20 = *(void (**)(void))(v12 + 8);
        goto LABEL_28;
      case 4u:
        swift_release();
        goto LABEL_29;
      default:
        int v20 = *(void (**)(void))(v28 + 8);
LABEL_28:
        v20();
LABEL_29:
        unsigned int v21 = a2[v14];
        unsigned int v22 = v21 - 5;
        if (v21 >= 5)
        {
          if (v14 <= 3) {
            uint64_t v23 = v14;
          }
          else {
            uint64_t v23 = 4;
          }
          switch(v23)
          {
            case 1:
              int v24 = *a2;
              goto LABEL_38;
            case 2:
              int v24 = *(unsigned __int16 *)a2;
              goto LABEL_38;
            case 3:
              int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_38;
            case 4:
              int v24 = *(_DWORD *)a2;
LABEL_38:
              int v25 = (v24 | (v22 << (8 * v14))) + 5;
              unsigned int v21 = v24 + 5;
              if (v14 < 4) {
                unsigned int v21 = v25;
              }
              break;
            default:
              break;
          }
        }
        switch(v21)
        {
          case 1u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v6);
            char v26 = 1;
            break;
          case 2u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v11 + 32))(a1, a2, v9);
            char v26 = 2;
            break;
          case 3u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 32))(a1, a2, v10);
            char v26 = 3;
            break;
          case 4u:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            char v26 = 4;
            break;
          default:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 32))(a1, a2, v5);
            char v26 = 0;
            break;
        }
        a1[v14] = v26;
        break;
    }
  }
  return a1;
}

uint64_t sub_1C41D0398(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  unint64_t v3 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  uint64_t v5 = *(void *)(a3[4] - 8);
  if (*(void *)(v5 + 64) > v3) {
    unint64_t v3 = *(void *)(v5 + 64);
  }
  uint64_t v6 = *(void *)(a3[5] - 8);
  if (*(void *)(v6 + 64) > v3) {
    unint64_t v3 = *(void *)(v6 + 64);
  }
  uint64_t v7 = 16;
  if (v3 > 0x10) {
    uint64_t v7 = v3;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_28;
  }
  uint64_t v8 = v7 + 1;
  char v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    unsigned int v12 = ((a2 + ~(-1 << v9) - 251) >> v9) + 1;
    if (HIWORD(v12))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v12 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v12 < 2)
    {
LABEL_28:
      unsigned int v14 = *((unsigned __int8 *)a1 + v7);
      if (v14 >= 5) {
        return (v14 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_28;
  }
LABEL_20:
  int v13 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v13 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v8 | v13) + 252;
}

void sub_1C41D0528(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  unint64_t v5 = *(void *)(*(void *)(a4[2] - 8) + 64);
  if (*(void *)(*(void *)(a4[3] - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(a4[3] - 8) + 64);
  }
  uint64_t v6 = *(void *)(a4[4] - 8);
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a4[5] - 8);
  if (*(void *)(v7 + 64) > v5) {
    unint64_t v5 = *(void *)(v7 + 64);
  }
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v8 = v5 + 1;
  if (a3 < 0xFC)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 251) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFB)
  {
    unsigned int v10 = a2 - 252;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v5 != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_40:
        __break(1u);
        JUMPOUT(0x1C41D074CLL);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_28;
      case 3:
        goto LABEL_40;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      default:
LABEL_28:
        if (a2) {
LABEL_29:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1C41D0774(unsigned __int8 *a1, void *a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2[2] - 8) + 64);
  uint64_t v3 = *(void *)(a2[4] - 8);
  if (*(void *)(*(void *)(a2[3] - 8) + 64) > v2) {
    unint64_t v2 = *(void *)(*(void *)(a2[3] - 8) + 64);
  }
  if (*(void *)(v3 + 64) > v2) {
    unint64_t v2 = *(void *)(v3 + 64);
  }
  uint64_t v4 = *(void *)(a2[5] - 8);
  if (*(void *)(v4 + 64) > v2) {
    unint64_t v2 = *(void *)(v4 + 64);
  }
  uint64_t v5 = 16;
  if (v2 > 0x10) {
    uint64_t v5 = v2;
  }
  uint64_t v6 = a1[v5];
  int v7 = v6 - 5;
  if (v6 >= 5)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_18;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_18;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_18;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_18:
        unsigned int v10 = (v9 | (v7 << (8 * v5))) + 5;
        LODWORD(v6) = v9 + 5;
        if (v5 >= 4) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v10;
        }
        break;
      default:
        return v6;
    }
  }
  return v6;
}

void sub_1C41D0888(unsigned char *a1, unsigned int a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  if (a2 > 4)
  {
    uint64_t v6 = *(void *)(a3[3] - 8);
    unint64_t v7 = *(void *)(v4 + 64);
    if (*(void *)(v6 + 64) > v7) {
      unint64_t v7 = *(void *)(v6 + 64);
    }
    uint64_t v8 = *(void *)(a3[4] - 8);
    if (*(void *)(v8 + 64) > v7) {
      unint64_t v7 = *(void *)(v8 + 64);
    }
    uint64_t v9 = *(void *)(a3[5] - 8);
    if (*(void *)(v9 + 64) > v7) {
      unint64_t v7 = *(void *)(v9 + 64);
    }
    if (v7 <= 0x10) {
      size_t v10 = 16;
    }
    else {
      size_t v10 = v7;
    }
    unsigned int v11 = a2 - 5;
    if (v10 < 4)
    {
      unsigned int v12 = v11 >> (8 * v10);
      int v13 = v11 & ~(-1 << (8 * v10));
      a1[v10] = v12 + 5;
      bzero(a1, v10);
      if (v10 == 3)
      {
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
      }
      else if (v10 == 2)
      {
        *(_WORD *)a1 = v13;
      }
      else
      {
        *a1 = v13;
      }
    }
    else
    {
      a1[v10] = 5;
      bzero(a1, v10);
      *(_DWORD *)a1 = v11;
    }
  }
  else
  {
    unint64_t v5 = *(void *)(v4 + 64);
    if (*(void *)(*(void *)(a3[3] - 8) + 64) > v5) {
      unint64_t v5 = *(void *)(*(void *)(a3[3] - 8) + 64);
    }
    if (*(void *)(*(void *)(a3[4] - 8) + 64) > v5) {
      unint64_t v5 = *(void *)(*(void *)(a3[4] - 8) + 64);
    }
    if (*(void *)(*(void *)(a3[5] - 8) + 64) > v5) {
      unint64_t v5 = *(void *)(*(void *)(a3[5] - 8) + 64);
    }
    if (v5 <= 0x10) {
      unint64_t v5 = 16;
    }
    a1[v5] = a2;
  }
}

uint64_t sub_1C41D0A4C()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_getAssociatedTypeWitness();
        if (v4 <= 0x3F)
        {
          swift_initEnumMetadataMultiPayload();
          return 0;
        }
      }
    }
  }
  return result;
}

void *sub_1C41D0C04(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v25 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v25 - 8);
  if (*(void *)(v6 + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(*(void *)(v25 - 8) + 64);
  }
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(void *)(v9 + 64) > v7) {
    unint64_t v7 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(void *)(v11 + 64) <= v7) {
    unint64_t v12 = v7;
  }
  else {
    unint64_t v12 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  size_t v13 = v12 + 1;
  int v14 = *(_DWORD *)(v11 + 80);
  uint64_t v15 = (*(unsigned char *)(v6 + 80) | *(unsigned char *)(v4 + 80) | *(unsigned char *)(v9 + 80) | v14);
  if (v15 <= 7
    && v13 <= 0x18
    && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v9 + 80) | v14) & 0x100000) == 0)
  {
    unsigned int v20 = a2[v12];
    unsigned int v21 = v20 - 5;
    if (v20 >= 5)
    {
      if (v12 <= 3) {
        uint64_t v22 = v12;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *a2;
          goto LABEL_27;
        case 2:
          int v23 = *(unsigned __int16 *)a2;
          goto LABEL_27;
        case 3:
          int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_27;
        case 4:
          int v23 = *(_DWORD *)a2;
LABEL_27:
          int v24 = (v23 | (v21 << (8 * v12))) + 5;
          unsigned int v20 = v23 + 5;
          if (v12 < 4) {
            unsigned int v20 = v24;
          }
          break;
        default:
          break;
      }
    }
    switch(v20)
    {
      case 0u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
        *((unsigned char *)a1 + v12) = 0;
        break;
      case 1u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v25);
        *((unsigned char *)a1 + v12) = 1;
        break;
      case 2u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v9 + 16))(a1, a2, v8);
        *((unsigned char *)a1 + v12) = 2;
        break;
      case 3u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v11 + 16))(a1, a2, v10);
        *((unsigned char *)a1 + v12) = 3;
        break;
      case 4u:
        *((unsigned char *)a1 + v12) = 4;
        break;
      default:
        memcpy(a1, a2, v13);
        break;
    }
  }
  else
  {
    uint64_t v18 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v18 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1C41D0FE4(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = *(void *)(v18 + 64);
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(v4 - 8);
  if (*(void *)(v5 + 64) <= v3) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) > v6) {
    unint64_t v6 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t result = swift_getAssociatedTypeWitness();
  unint64_t v10 = *(void *)(*(void *)(result - 8) + 64);
  if (v10 <= v6) {
    unint64_t v10 = v6;
  }
  unsigned int v11 = a1[v10];
  unsigned int v12 = v11 - 5;
  if (v11 >= 5)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        goto LABEL_17;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        goto LABEL_17;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_17;
      case 4:
        int v14 = *(_DWORD *)a1;
LABEL_17:
        int v15 = (v14 | (v12 << (8 * v10))) + 5;
        unsigned int v11 = v14 + 5;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v16 = v18;
  switch(v11)
  {
    case 0u:
      goto LABEL_23;
    case 1u:
      uint64_t v16 = v5;
      uint64_t AssociatedTypeWitness = v4;
      goto LABEL_23;
    case 2u:
      uint64_t v16 = v8;
      uint64_t AssociatedTypeWitness = v7;
      goto LABEL_23;
    case 3u:
      uint64_t v16 = *(void *)(result - 8);
      uint64_t AssociatedTypeWitness = result;
LABEL_23:
      uint64_t v17 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v16 + 8);
      uint64_t result = v17(a1, AssociatedTypeWitness);
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *sub_1C41D1314(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v5 = *(void *)(v20 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(v6 - 8);
  if (*(void *)(v19 + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(void *)(v9 + 64) > v7) {
    unint64_t v7 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  uint64_t v10 = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(v10 - 8) + 64) <= v7) {
    unint64_t v11 = v7;
  }
  else {
    unint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  unsigned int v12 = a2[v11];
  unsigned int v13 = v12 - 5;
  if (v12 >= 5)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a2;
        goto LABEL_18;
      case 2:
        int v15 = *(unsigned __int16 *)a2;
        goto LABEL_18;
      case 3:
        int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_18;
      case 4:
        int v15 = *(_DWORD *)a2;
LABEL_18:
        int v16 = (v15 | (v13 << (8 * v11))) + 5;
        unsigned int v12 = v15 + 5;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  switch(v12)
  {
    case 0u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v20 + 16))(a1, a2, AssociatedTypeWitness);
      a1[v11] = 0;
      return a1;
    case 1u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v19 + 16))(a1, a2, v6);
      char v17 = 1;
      goto LABEL_27;
    case 2u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v9 + 16))(a1, a2, v8);
      char v17 = 2;
      goto LABEL_27;
    case 3u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      char v17 = 3;
      goto LABEL_27;
    case 4u:
      char v17 = 4;
LABEL_27:
      a1[v11] = v17;
      break;
    default:
      memcpy(a1, a2, v11 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41D169C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v29 = *(void *)(v7 - 8);
    if (*(void *)(v29 + 64) <= v6) {
      unint64_t v8 = v6;
    }
    else {
      unint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    uint64_t v9 = swift_getAssociatedTypeWitness();
    uint64_t v28 = *(void *)(v9 - 8);
    if (*(void *)(v28 + 64) > v8) {
      unint64_t v8 = *(void *)(*(void *)(v9 - 8) + 64);
    }
    uint64_t v10 = swift_getAssociatedTypeWitness();
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)(v10 - 8);
    if (*(void *)(v12 + 64) <= v8) {
      unint64_t v13 = v8;
    }
    else {
      unint64_t v13 = *(void *)(*(void *)(v10 - 8) + 64);
    }
    unsigned int v14 = a1[v13];
    unsigned int v15 = v14 - 5;
    if (v14 >= 5)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a1;
          goto LABEL_19;
        case 2:
          int v17 = *(unsigned __int16 *)a1;
          goto LABEL_19;
        case 3:
          int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_19;
        case 4:
          int v17 = *(_DWORD *)a1;
LABEL_19:
          int v18 = (v17 | (v15 << (8 * v13))) + 5;
          unsigned int v14 = v17 + 5;
          if (v13 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v19 = v5;
    uint64_t v20 = AssociatedTypeWitness;
    switch(v14)
    {
      case 0u:
        goto LABEL_25;
      case 1u:
        uint64_t v19 = v29;
        uint64_t v20 = v7;
        goto LABEL_25;
      case 2u:
        uint64_t v19 = v28;
        uint64_t v20 = v9;
        goto LABEL_25;
      case 3u:
        uint64_t v19 = *(void *)(v10 - 8);
        uint64_t v20 = v10;
LABEL_25:
        (*(void (**)(unsigned __int8 *, uint64_t))(v19 + 8))(a1, v20);
        break;
      default:
        break;
    }
    unsigned int v21 = a2[v13];
    unsigned int v22 = v21 - 5;
    if (v21 >= 5)
    {
      if (v13 <= 3) {
        uint64_t v23 = v13;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *a2;
          goto LABEL_35;
        case 2:
          int v24 = *(unsigned __int16 *)a2;
          goto LABEL_35;
        case 3:
          int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_35;
        case 4:
          int v24 = *(_DWORD *)a2;
LABEL_35:
          int v25 = (v24 | (v22 << (8 * v13))) + 5;
          unsigned int v21 = v24 + 5;
          if (v13 < 4) {
            unsigned int v21 = v25;
          }
          break;
        default:
          break;
      }
    }
    switch(v21)
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        a1[v13] = 0;
        return a1;
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 16))(a1, a2, v7);
        char v26 = 1;
        goto LABEL_44;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 16))(a1, a2, v9);
        char v26 = 2;
        goto LABEL_44;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 16))(a1, a2, v11);
        char v26 = 3;
        goto LABEL_44;
      case 4u:
        char v26 = 4;
LABEL_44:
        a1[v13] = v26;
        break;
      default:
        memcpy(a1, a2, v13 + 1);
        break;
    }
  }
  return a1;
}

unsigned char *sub_1C41D1B34(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v5 = *(void *)(v20 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(v6 - 8);
  if (*(void *)(v19 + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(void *)(v9 + 64) > v7) {
    unint64_t v7 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  uint64_t v10 = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(v10 - 8) + 64) <= v7) {
    unint64_t v11 = v7;
  }
  else {
    unint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  unsigned int v12 = a2[v11];
  unsigned int v13 = v12 - 5;
  if (v12 >= 5)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a2;
        goto LABEL_18;
      case 2:
        int v15 = *(unsigned __int16 *)a2;
        goto LABEL_18;
      case 3:
        int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_18;
      case 4:
        int v15 = *(_DWORD *)a2;
LABEL_18:
        int v16 = (v15 | (v13 << (8 * v11))) + 5;
        unsigned int v12 = v15 + 5;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  switch(v12)
  {
    case 0u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v20 + 32))(a1, a2, AssociatedTypeWitness);
      a1[v11] = 0;
      return a1;
    case 1u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v19 + 32))(a1, a2, v6);
      char v17 = 1;
      goto LABEL_27;
    case 2u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v9 + 32))(a1, a2, v8);
      char v17 = 2;
      goto LABEL_27;
    case 3u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      char v17 = 3;
      goto LABEL_27;
    case 4u:
      char v17 = 4;
LABEL_27:
      a1[v11] = v17;
      break;
    default:
      memcpy(a1, a2, v11 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41D1EBC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v29 = *(void *)(v7 - 8);
    if (*(void *)(v29 + 64) <= v6) {
      unint64_t v8 = v6;
    }
    else {
      unint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    uint64_t v9 = swift_getAssociatedTypeWitness();
    uint64_t v28 = *(void *)(v9 - 8);
    if (*(void *)(v28 + 64) > v8) {
      unint64_t v8 = *(void *)(*(void *)(v9 - 8) + 64);
    }
    uint64_t v10 = swift_getAssociatedTypeWitness();
    uint64_t v11 = v10;
    uint64_t v12 = *(void *)(v10 - 8);
    if (*(void *)(v12 + 64) <= v8) {
      unint64_t v13 = v8;
    }
    else {
      unint64_t v13 = *(void *)(*(void *)(v10 - 8) + 64);
    }
    unsigned int v14 = a1[v13];
    unsigned int v15 = v14 - 5;
    if (v14 >= 5)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a1;
          goto LABEL_19;
        case 2:
          int v17 = *(unsigned __int16 *)a1;
          goto LABEL_19;
        case 3:
          int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_19;
        case 4:
          int v17 = *(_DWORD *)a1;
LABEL_19:
          int v18 = (v17 | (v15 << (8 * v13))) + 5;
          unsigned int v14 = v17 + 5;
          if (v13 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v19 = v5;
    uint64_t v20 = AssociatedTypeWitness;
    switch(v14)
    {
      case 0u:
        goto LABEL_25;
      case 1u:
        uint64_t v19 = v29;
        uint64_t v20 = v7;
        goto LABEL_25;
      case 2u:
        uint64_t v19 = v28;
        uint64_t v20 = v9;
        goto LABEL_25;
      case 3u:
        uint64_t v19 = *(void *)(v10 - 8);
        uint64_t v20 = v10;
LABEL_25:
        (*(void (**)(unsigned __int8 *, uint64_t))(v19 + 8))(a1, v20);
        break;
      default:
        break;
    }
    unsigned int v21 = a2[v13];
    unsigned int v22 = v21 - 5;
    if (v21 >= 5)
    {
      if (v13 <= 3) {
        uint64_t v23 = v13;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *a2;
          goto LABEL_35;
        case 2:
          int v24 = *(unsigned __int16 *)a2;
          goto LABEL_35;
        case 3:
          int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_35;
        case 4:
          int v24 = *(_DWORD *)a2;
LABEL_35:
          int v25 = (v24 | (v22 << (8 * v13))) + 5;
          unsigned int v21 = v24 + 5;
          if (v13 < 4) {
            unsigned int v21 = v25;
          }
          break;
        default:
          break;
      }
    }
    switch(v21)
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        a1[v13] = 0;
        return a1;
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 32))(a1, a2, v7);
        char v26 = 1;
        goto LABEL_44;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 32))(a1, a2, v9);
        char v26 = 2;
        goto LABEL_44;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 32))(a1, a2, v11);
        char v26 = 3;
        goto LABEL_44;
      case 4u:
        char v26 = 4;
LABEL_44:
        a1[v13] = v26;
        break;
      default:
        memcpy(a1, a2, v13 + 1);
        break;
    }
  }
  return a1;
}

uint64_t sub_1C41D2354(unsigned __int16 *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 > v4) {
    unint64_t v4 = v5;
  }
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 > v4) {
    unint64_t v4 = v6;
  }
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v4) {
    unint64_t v8 = v4;
  }
  else {
    unint64_t v8 = v7;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_27;
  }
  unint64_t v9 = v8 + 1;
  char v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    unsigned int v13 = ((a2 + ~(-1 << v10) - 250) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (v13 < 2)
    {
LABEL_27:
      unsigned int v15 = *((unsigned __int8 *)a1 + v8);
      if (v15 >= 6) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_27;
  }
LABEL_19:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v9 | v14) + 251;
}

void sub_1C41D2580(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 > v6) {
    unint64_t v6 = v7;
  }
  unint64_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 > v6) {
    unint64_t v6 = v8;
  }
  unint64_t v9 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v9 <= v6) {
    unint64_t v9 = v6;
  }
  size_t v10 = v9 + 1;
  if (a3 < 0xFB)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 + ~(-1 << (8 * v10)) - 250) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (a2 > 0xFA)
  {
    unsigned int v12 = a2 - 251;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v10] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v13;
        break;
      case 3:
LABEL_38:
        __break(1u);
        JUMPOUT(0x1C41D2820);
      case 4:
        *(_DWORD *)&a1[v10] = v13;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v11)
    {
      case 1:
        a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_27;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        goto LABEL_26;
      case 3:
        goto LABEL_38;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_27;
      default:
LABEL_26:
        if (a2) {
LABEL_27:
        }
          a1[v9] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1C41D2848(unsigned __int8 *a1)
{
  unint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v3 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 > v2) {
    unint64_t v2 = v3;
  }
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v4 > v2) {
    unint64_t v2 = v4;
  }
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v2) {
    unint64_t v5 = v2;
  }
  uint64_t result = a1[v5];
  if (result >= 5)
  {
    if (v5 <= 3) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_16;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_16;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_16;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_16:
        unsigned int v9 = (v8 | ((result - 5) << (8 * v5))) + 5;
        unsigned int v10 = v8 + 5;
        if (v5 >= 4) {
          uint64_t result = v10;
        }
        else {
          uint64_t result = v9;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1C41D29F0(unsigned char *a1, unsigned int a2)
{
  size_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  size_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 > v4) {
    size_t v4 = v5;
  }
  size_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 > v4) {
    size_t v4 = v6;
  }
  size_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v4) {
    size_t v8 = v4;
  }
  else {
    size_t v8 = v7;
  }
  if (a2 > 4)
  {
    unsigned int v9 = a2 - 5;
    if (v8 < 4)
    {
      unsigned int v10 = v9 >> (8 * v8);
      int v11 = v9 & ~(-1 << (8 * v8));
      a1[v8] = v10 + 5;
      bzero(a1, v8);
      if (v8 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if (v8 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
    else
    {
      a1[v8] = 5;
      bzero(a1, v8);
      *(_DWORD *)a1 = v9;
    }
  }
  else
  {
    a1[v8] = a2;
  }
}

uint64_t sub_1C41D2B9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 88);
}

uint64_t sub_1C41D2BA4()
{
  uint64_t result = type metadata accessor for TaggedValue_5.TaggedEnum();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C41D2C50(unsigned __int8 *a1, void *a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2[2] - 8) + 64);
  uint64_t v3 = *(void *)(a2[3] - 8);
  if (*(void *)(v3 + 64) > v2) {
    unint64_t v2 = *(void *)(v3 + 64);
  }
  if (*(void *)(*(void *)(a2[4] - 8) + 64) <= v2) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = *(void *)(*(void *)(a2[4] - 8) + 64);
  }
  uint64_t v5 = a2[5];
  uint64_t v6 = a2[6];
  if (*(void *)(*(void *)(v5 - 8) + 64) > v4) {
    unint64_t v4 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  if (v7 <= v4) {
    unint64_t v7 = v4;
  }
  if (v7 <= 0x10) {
    unint64_t v7 = 16;
  }
  unsigned int v8 = a1[v7];
  unsigned int v9 = v8 - 6;
  if (v8 >= 6)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a1;
        goto LABEL_21;
      case 2:
        int v11 = *(unsigned __int16 *)a1;
        goto LABEL_21;
      case 3:
        int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_21;
      case 4:
        int v11 = *(_DWORD *)a1;
LABEL_21:
        int v12 = (v11 | (v9 << (8 * v7))) + 6;
        unsigned int v8 = v11 + 6;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  switch(v8)
  {
    case 1u:
      uint64_t result = (*(uint64_t (**)(void))(v3 + 8))();
      break;
    case 2u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2[4] - 8) + 8))();
      break;
    case 3u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v5 - 8) + 8))();
      break;
    case 4u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v6 - 8) + 8))();
      break;
    case 5u:
      uint64_t result = swift_release();
      break;
    default:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2[2] - 8) + 8))();
      break;
  }
  return result;
}

void *sub_1C41D2F14(void *a1, unsigned __int8 *a2, void *a3)
{
  unint64_t v4 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v5 = *(void *)(a3[3] - 8);
  if (*(void *)(v5 + 64) > v4) {
    unint64_t v4 = *(void *)(v5 + 64);
  }
  if (*(void *)(*(void *)(a3[4] - 8) + 64) <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = *(void *)(*(void *)(a3[4] - 8) + 64);
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  if (*(void *)(*(void *)(v7 - 8) + 64) > v6) {
    unint64_t v6 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  if (v9 <= v6) {
    unint64_t v9 = v6;
  }
  if (v9 <= 0x10) {
    uint64_t v10 = 16;
  }
  else {
    uint64_t v10 = v9;
  }
  unsigned int v11 = a2[v10];
  if (v11 >= 6)
  {
    if (v10 <= 3) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_22;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_22;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_22:
        int v14 = (v13 | ((v11 - 6) << (8 * v10))) + 6;
        unsigned int v15 = v13 + 6;
        if (v10 >= 4) {
          unsigned int v11 = v15;
        }
        else {
          unsigned int v11 = v14;
        }
        break;
      default:
        break;
    }
  }
  switch(v11)
  {
    case 1u:
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)a1 + v10) = 1;
      break;
    case 2u:
      (*(void (**)(void *))(*(void *)(a3[4] - 8) + 16))(a1);
      *((unsigned char *)a1 + v10) = 2;
      break;
    case 3u:
      (*(void (**)(void *))(*(void *)(v7 - 8) + 16))(a1);
      *((unsigned char *)a1 + v10) = 3;
      break;
    case 4u:
      (*(void (**)(void *))(*(void *)(v8 - 8) + 16))(a1);
      *((unsigned char *)a1 + v10) = 4;
      break;
    case 5u:
      uint64_t v16 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v16;
      *((unsigned char *)a1 + v10) = 5;
      swift_retain();
      break;
    default:
      (*(void (**)(void *))(*(void *)(a3[2] - 8) + 16))(a1);
      *((unsigned char *)a1 + v10) = 0;
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41D3254(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v28 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v28 + 64);
    uint64_t v27 = *(void *)(v6 - 8);
    uint64_t v8 = a3[4];
    uint64_t v9 = a3[5];
    if (*(void *)(v27 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v26 = *(void *)(a3[4] - 8);
    if (*(void *)(v26 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(a3[4] - 8) + 64);
    }
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(void *)(v10 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v9 - 8) + 64);
    }
    uint64_t v11 = a3[6];
    uint64_t v12 = *(void *)(v11 - 8);
    unint64_t v13 = *(void *)(v12 + 64);
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 6;
    if (v15 >= 6)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          goto LABEL_22;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          goto LABEL_22;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_22;
        case 4:
          int v18 = *(_DWORD *)a1;
LABEL_22:
          int v19 = (v18 | (v16 << (8 * v14))) + 6;
          unsigned int v15 = v18 + 6;
          if (v14 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    switch(v15)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v27 + 8))(a1, v6);
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v26 + 8))(a1, v8);
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v10 + 8))(a1, v9);
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v12 + 8))(a1, v11);
        break;
      case 5u:
        swift_release();
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v28 + 8))(a1, v5);
        break;
    }
    unsigned int v20 = a2[v14];
    unsigned int v21 = v20 - 6;
    if (v20 >= 6)
    {
      if (v14 <= 3) {
        uint64_t v22 = v14;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *a2;
          goto LABEL_40;
        case 2:
          int v23 = *(unsigned __int16 *)a2;
          goto LABEL_40;
        case 3:
          int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_40;
        case 4:
          int v23 = *(_DWORD *)a2;
LABEL_40:
          int v24 = (v23 | (v21 << (8 * v14))) + 6;
          unsigned int v20 = v23 + 6;
          if (v14 < 4) {
            unsigned int v20 = v24;
          }
          break;
        default:
          break;
      }
    }
    switch(v20)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 16))(a1, a2, v6);
        a1[v14] = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 16))(a1, a2, v8);
        a1[v14] = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v10 + 16))(a1, a2, v9);
        a1[v14] = 3;
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 16))(a1, a2, v11);
        a1[v14] = 4;
        break;
      case 5u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        a1[v14] = 5;
        swift_retain();
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 16))(a1, a2, v5);
        a1[v14] = 0;
        break;
    }
  }
  return a1;
}

_OWORD *sub_1C41D375C(_OWORD *a1, unsigned __int8 *a2, void *a3)
{
  unint64_t v4 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v5 = *(void *)(a3[3] - 8);
  if (*(void *)(v5 + 64) > v4) {
    unint64_t v4 = *(void *)(v5 + 64);
  }
  if (*(void *)(*(void *)(a3[4] - 8) + 64) <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = *(void *)(*(void *)(a3[4] - 8) + 64);
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  if (*(void *)(*(void *)(v7 - 8) + 64) > v6) {
    unint64_t v6 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  if (v9 <= v6) {
    unint64_t v9 = v6;
  }
  if (v9 <= 0x10) {
    uint64_t v10 = 16;
  }
  else {
    uint64_t v10 = v9;
  }
  unsigned int v11 = a2[v10];
  if (v11 >= 6)
  {
    if (v10 <= 3) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_22;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_22;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_22:
        int v14 = (v13 | ((v11 - 6) << (8 * v10))) + 6;
        unsigned int v15 = v13 + 6;
        if (v10 >= 4) {
          unsigned int v11 = v15;
        }
        else {
          unsigned int v11 = v14;
        }
        break;
      default:
        break;
    }
  }
  switch(v11)
  {
    case 1u:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      char v16 = 1;
      break;
    case 2u:
      (*(void (**)(_OWORD *))(*(void *)(a3[4] - 8) + 32))(a1);
      char v16 = 2;
      break;
    case 3u:
      (*(void (**)(_OWORD *))(*(void *)(v7 - 8) + 32))(a1);
      char v16 = 3;
      break;
    case 4u:
      (*(void (**)(_OWORD *))(*(void *)(v8 - 8) + 32))(a1);
      char v16 = 4;
      break;
    case 5u:
      *a1 = *(_OWORD *)a2;
      char v16 = 5;
      break;
    default:
      (*(void (**)(_OWORD *))(*(void *)(a3[2] - 8) + 32))(a1);
      char v16 = 0;
      break;
  }
  *((unsigned char *)a1 + v10) = v16;
  return a1;
}

unsigned __int8 *sub_1C41D3A88(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v29 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v29 + 64);
    uint64_t v28 = *(void *)(v6 - 8);
    uint64_t v8 = a3[4];
    uint64_t v9 = a3[5];
    if (*(void *)(v28 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v27 = *(void *)(a3[4] - 8);
    if (*(void *)(v27 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(a3[4] - 8) + 64);
    }
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(void *)(v10 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v9 - 8) + 64);
    }
    uint64_t v11 = a3[6];
    uint64_t v12 = *(void *)(v11 - 8);
    unint64_t v13 = *(void *)(v12 + 64);
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 6;
    if (v15 >= 6)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          goto LABEL_22;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          goto LABEL_22;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_22;
        case 4:
          int v18 = *(_DWORD *)a1;
LABEL_22:
          int v19 = (v18 | (v16 << (8 * v14))) + 6;
          unsigned int v15 = v18 + 6;
          if (v14 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    switch(v15)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v28 + 8))(a1, v6);
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v27 + 8))(a1, v8);
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v10 + 8))(a1, v9);
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v12 + 8))(a1, v11);
        break;
      case 5u:
        swift_release();
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v29 + 8))(a1, v5);
        break;
    }
    unsigned int v20 = a2[v14];
    unsigned int v21 = v20 - 6;
    if (v20 >= 6)
    {
      if (v14 <= 3) {
        uint64_t v22 = v14;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *a2;
          goto LABEL_40;
        case 2:
          int v23 = *(unsigned __int16 *)a2;
          goto LABEL_40;
        case 3:
          int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_40;
        case 4:
          int v23 = *(_DWORD *)a2;
LABEL_40:
          int v24 = (v23 | (v21 << (8 * v14))) + 6;
          unsigned int v20 = v23 + 6;
          if (v14 < 4) {
            unsigned int v20 = v24;
          }
          break;
        default:
          break;
      }
    }
    switch(v20)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 32))(a1, a2, v6);
        char v25 = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 32))(a1, a2, v8);
        char v25 = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v10 + 32))(a1, a2, v9);
        char v25 = 3;
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 32))(a1, a2, v11);
        char v25 = 4;
        break;
      case 5u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v25 = 5;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 32))(a1, a2, v5);
        char v25 = 0;
        break;
    }
    a1[v14] = v25;
  }
  return a1;
}

uint64_t sub_1C41D3F74(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  unint64_t v3 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  uint64_t v5 = *(void *)(a3[4] - 8);
  if (*(void *)(v5 + 64) > v3) {
    unint64_t v3 = *(void *)(v5 + 64);
  }
  uint64_t v6 = *(void *)(a3[5] - 8);
  if (*(void *)(v6 + 64) > v3) {
    unint64_t v3 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a3[6] - 8);
  if (*(void *)(v7 + 64) > v3) {
    unint64_t v3 = *(void *)(v7 + 64);
  }
  uint64_t v8 = 16;
  if (v3 > 0x10) {
    uint64_t v8 = v3;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_30;
  }
  uint64_t v9 = v8 + 1;
  char v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    unsigned int v13 = ((a2 + ~(-1 << v10) - 250) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_30;
      }
      goto LABEL_22;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_30;
      }
      goto LABEL_22;
    }
    if (v13 < 2)
    {
LABEL_30:
      unsigned int v15 = *((unsigned __int8 *)a1 + v8);
      if (v15 >= 6) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_30;
  }
LABEL_22:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v9 | v14) + 251;
}

void sub_1C41D4124(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  unint64_t v5 = *(void *)(*(void *)(a4[2] - 8) + 64);
  uint64_t v6 = *(void *)(a4[4] - 8);
  if (*(void *)(*(void *)(a4[3] - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(a4[3] - 8) + 64);
  }
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a4[5] - 8);
  if (*(void *)(v7 + 64) > v5) {
    unint64_t v5 = *(void *)(v7 + 64);
  }
  uint64_t v8 = *(void *)(a4[6] - 8);
  if (*(void *)(v8 + 64) > v5) {
    unint64_t v5 = *(void *)(v8 + 64);
  }
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v9 = v5 + 1;
  if (a3 < 0xFB)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v9)) - 250) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 > 0xFA)
  {
    unsigned int v11 = a2 - 251;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v5 != -1)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        break;
      case 3:
LABEL_42:
        __break(1u);
        JUMPOUT(0x1C41D4368);
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_31;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        goto LABEL_30;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_31;
      default:
LABEL_30:
        if (a2) {
LABEL_31:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t type metadata accessor for TaggedValue_5()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C41D43A8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          uint64_t result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            swift_initEnumMetadataMultiPayload();
            return 0;
          }
        }
      }
    }
  }
  return result;
}

void *sub_1C41D453C(void *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  uint64_t v5 = *(void *)(a3[3] - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    unint64_t v6 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = *(void *)(a3[4] - 8);
  uint64_t v8 = a3[5];
  if (*(void *)(v7 + 64) > v6) {
    unint64_t v6 = *(void *)(v7 + 64);
  }
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(void *)(v9 + 64) > v6) {
    unint64_t v6 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  uint64_t v10 = *(void *)(a3[6] - 8);
  unint64_t v11 = *(void *)(v10 + 64);
  if (v11 <= v6) {
    unint64_t v11 = v6;
  }
  if (v11 <= 0x10) {
    uint64_t v12 = 16;
  }
  else {
    uint64_t v12 = v11;
  }
  int v13 = *(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80) | *(_DWORD *)(v10 + 80);
  if ((unint64_t)(v12 + 1) <= 0x18 && (v13 & 0x1000F8) == 0)
  {
    unsigned int v17 = a2[v12];
    if (v17 >= 6)
    {
      if (v12 <= 3) {
        uint64_t v18 = v12;
      }
      else {
        uint64_t v18 = 4;
      }
      switch(v18)
      {
        case 1:
          int v19 = *a2;
          goto LABEL_29;
        case 2:
          int v19 = *(unsigned __int16 *)a2;
          goto LABEL_29;
        case 3:
          int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_29;
        case 4:
          int v19 = *(_DWORD *)a2;
LABEL_29:
          int v20 = (v19 | ((v17 - 6) << (8 * v12))) + 6;
          unsigned int v21 = v19 + 6;
          if (v12 >= 4) {
            unsigned int v17 = v21;
          }
          else {
            unsigned int v17 = v20;
          }
          break;
        default:
          break;
      }
    }
    switch(v17)
    {
      case 1u:
        (*(void (**)(void *))(v5 + 16))(a1);
        *((unsigned char *)a1 + v12) = 1;
        break;
      case 2u:
        (*(void (**)(void *))(v7 + 16))(a1);
        *((unsigned char *)a1 + v12) = 2;
        break;
      case 3u:
        (*(void (**)(void *))(v9 + 16))(a1);
        *((unsigned char *)a1 + v12) = 3;
        break;
      case 4u:
        (*(void (**)(void *))(v10 + 16))(a1);
        *((unsigned char *)a1 + v12) = 4;
        break;
      case 5u:
        uint64_t v22 = *((void *)a2 + 1);
        *a1 = *(void *)a2;
        a1[1] = v22;
        *((unsigned char *)a1 + v12) = 5;
        goto LABEL_18;
      default:
        (*(void (**)(void *))(v4 + 16))(a1);
        *((unsigned char *)a1 + v12) = 0;
        break;
    }
  }
  else
  {
    uint64_t v15 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v15 + (((v13 & 0xF8 | 7u) + 16) & ~(unint64_t)(v13 & 0xF8 | 7u)));
LABEL_18:
    swift_retain();
  }
  return a1;
}

uint64_t sub_1C41D48D8(unsigned __int8 *a1, void *a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2[2] - 8) + 64);
  uint64_t v3 = *(void *)(a2[3] - 8);
  if (*(void *)(v3 + 64) > v2) {
    unint64_t v2 = *(void *)(v3 + 64);
  }
  if (*(void *)(*(void *)(a2[4] - 8) + 64) <= v2) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = *(void *)(*(void *)(a2[4] - 8) + 64);
  }
  uint64_t v5 = a2[5];
  uint64_t v6 = a2[6];
  if (*(void *)(*(void *)(v5 - 8) + 64) > v4) {
    unint64_t v4 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  if (v7 <= v4) {
    unint64_t v7 = v4;
  }
  if (v7 <= 0x10) {
    unint64_t v7 = 16;
  }
  unsigned int v8 = a1[v7];
  unsigned int v9 = v8 - 6;
  if (v8 >= 6)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a1;
        goto LABEL_21;
      case 2:
        int v11 = *(unsigned __int16 *)a1;
        goto LABEL_21;
      case 3:
        int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_21;
      case 4:
        int v11 = *(_DWORD *)a1;
LABEL_21:
        int v12 = (v11 | (v9 << (8 * v7))) + 6;
        unsigned int v8 = v11 + 6;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  switch(v8)
  {
    case 1u:
      uint64_t result = (*(uint64_t (**)(void))(v3 + 8))();
      break;
    case 2u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2[4] - 8) + 8))();
      break;
    case 3u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v5 - 8) + 8))();
      break;
    case 4u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v6 - 8) + 8))();
      break;
    case 5u:
      uint64_t result = swift_release();
      break;
    default:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2[2] - 8) + 8))();
      break;
  }
  return result;
}

void *sub_1C41D4B9C(void *a1, unsigned __int8 *a2, void *a3)
{
  unint64_t v4 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v5 = *(void *)(a3[3] - 8);
  if (*(void *)(v5 + 64) > v4) {
    unint64_t v4 = *(void *)(v5 + 64);
  }
  if (*(void *)(*(void *)(a3[4] - 8) + 64) <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = *(void *)(*(void *)(a3[4] - 8) + 64);
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  if (*(void *)(*(void *)(v7 - 8) + 64) > v6) {
    unint64_t v6 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  if (v9 <= v6) {
    unint64_t v9 = v6;
  }
  if (v9 <= 0x10) {
    uint64_t v10 = 16;
  }
  else {
    uint64_t v10 = v9;
  }
  unsigned int v11 = a2[v10];
  if (v11 >= 6)
  {
    if (v10 <= 3) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_22;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_22;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_22:
        int v14 = (v13 | ((v11 - 6) << (8 * v10))) + 6;
        unsigned int v15 = v13 + 6;
        if (v10 >= 4) {
          unsigned int v11 = v15;
        }
        else {
          unsigned int v11 = v14;
        }
        break;
      default:
        break;
    }
  }
  switch(v11)
  {
    case 1u:
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)a1 + v10) = 1;
      break;
    case 2u:
      (*(void (**)(void *))(*(void *)(a3[4] - 8) + 16))(a1);
      *((unsigned char *)a1 + v10) = 2;
      break;
    case 3u:
      (*(void (**)(void *))(*(void *)(v7 - 8) + 16))(a1);
      *((unsigned char *)a1 + v10) = 3;
      break;
    case 4u:
      (*(void (**)(void *))(*(void *)(v8 - 8) + 16))(a1);
      *((unsigned char *)a1 + v10) = 4;
      break;
    case 5u:
      uint64_t v16 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v16;
      *((unsigned char *)a1 + v10) = 5;
      swift_retain();
      break;
    default:
      (*(void (**)(void *))(*(void *)(a3[2] - 8) + 16))(a1);
      *((unsigned char *)a1 + v10) = 0;
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41D4EDC(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v28 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v28 + 64);
    uint64_t v27 = *(void *)(v6 - 8);
    uint64_t v8 = a3[4];
    uint64_t v9 = a3[5];
    if (*(void *)(v27 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v26 = *(void *)(a3[4] - 8);
    if (*(void *)(v26 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(a3[4] - 8) + 64);
    }
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(void *)(v10 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v9 - 8) + 64);
    }
    uint64_t v11 = a3[6];
    uint64_t v12 = *(void *)(v11 - 8);
    unint64_t v13 = *(void *)(v12 + 64);
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 6;
    if (v15 >= 6)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          goto LABEL_22;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          goto LABEL_22;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_22;
        case 4:
          int v18 = *(_DWORD *)a1;
LABEL_22:
          int v19 = (v18 | (v16 << (8 * v14))) + 6;
          unsigned int v15 = v18 + 6;
          if (v14 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    switch(v15)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v27 + 8))(a1, v6);
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v26 + 8))(a1, v8);
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v10 + 8))(a1, v9);
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v12 + 8))(a1, v11);
        break;
      case 5u:
        swift_release();
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v28 + 8))(a1, v5);
        break;
    }
    unsigned int v20 = a2[v14];
    unsigned int v21 = v20 - 6;
    if (v20 >= 6)
    {
      if (v14 <= 3) {
        uint64_t v22 = v14;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *a2;
          goto LABEL_40;
        case 2:
          int v23 = *(unsigned __int16 *)a2;
          goto LABEL_40;
        case 3:
          int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_40;
        case 4:
          int v23 = *(_DWORD *)a2;
LABEL_40:
          int v24 = (v23 | (v21 << (8 * v14))) + 6;
          unsigned int v20 = v23 + 6;
          if (v14 < 4) {
            unsigned int v20 = v24;
          }
          break;
        default:
          break;
      }
    }
    switch(v20)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 16))(a1, a2, v6);
        a1[v14] = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 16))(a1, a2, v8);
        a1[v14] = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v10 + 16))(a1, a2, v9);
        a1[v14] = 3;
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 16))(a1, a2, v11);
        a1[v14] = 4;
        break;
      case 5u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        a1[v14] = 5;
        swift_retain();
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 16))(a1, a2, v5);
        a1[v14] = 0;
        break;
    }
  }
  return a1;
}

_OWORD *sub_1C41D53E4(_OWORD *a1, unsigned __int8 *a2, void *a3)
{
  unint64_t v4 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v5 = *(void *)(a3[3] - 8);
  if (*(void *)(v5 + 64) > v4) {
    unint64_t v4 = *(void *)(v5 + 64);
  }
  if (*(void *)(*(void *)(a3[4] - 8) + 64) <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = *(void *)(*(void *)(a3[4] - 8) + 64);
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  if (*(void *)(*(void *)(v7 - 8) + 64) > v6) {
    unint64_t v6 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  if (v9 <= v6) {
    unint64_t v9 = v6;
  }
  if (v9 <= 0x10) {
    uint64_t v10 = 16;
  }
  else {
    uint64_t v10 = v9;
  }
  unsigned int v11 = a2[v10];
  if (v11 >= 6)
  {
    if (v10 <= 3) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_22;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_22;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_22:
        int v14 = (v13 | ((v11 - 6) << (8 * v10))) + 6;
        unsigned int v15 = v13 + 6;
        if (v10 >= 4) {
          unsigned int v11 = v15;
        }
        else {
          unsigned int v11 = v14;
        }
        break;
      default:
        break;
    }
  }
  switch(v11)
  {
    case 1u:
      (*(void (**)(_OWORD *))(v5 + 32))(a1);
      char v16 = 1;
      break;
    case 2u:
      (*(void (**)(_OWORD *))(*(void *)(a3[4] - 8) + 32))(a1);
      char v16 = 2;
      break;
    case 3u:
      (*(void (**)(_OWORD *))(*(void *)(v7 - 8) + 32))(a1);
      char v16 = 3;
      break;
    case 4u:
      (*(void (**)(_OWORD *))(*(void *)(v8 - 8) + 32))(a1);
      char v16 = 4;
      break;
    case 5u:
      *a1 = *(_OWORD *)a2;
      char v16 = 5;
      break;
    default:
      (*(void (**)(_OWORD *))(*(void *)(a3[2] - 8) + 32))(a1);
      char v16 = 0;
      break;
  }
  *((unsigned char *)a1 + v10) = v16;
  return a1;
}

unsigned __int8 *sub_1C41D5710(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v29 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v29 + 64);
    uint64_t v28 = *(void *)(v6 - 8);
    uint64_t v8 = a3[4];
    uint64_t v9 = a3[5];
    if (*(void *)(v28 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v27 = *(void *)(a3[4] - 8);
    if (*(void *)(v27 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(a3[4] - 8) + 64);
    }
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(void *)(v10 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v9 - 8) + 64);
    }
    uint64_t v11 = a3[6];
    uint64_t v12 = *(void *)(v11 - 8);
    unint64_t v13 = *(void *)(v12 + 64);
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 6;
    if (v15 >= 6)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          goto LABEL_22;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          goto LABEL_22;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_22;
        case 4:
          int v18 = *(_DWORD *)a1;
LABEL_22:
          int v19 = (v18 | (v16 << (8 * v14))) + 6;
          unsigned int v15 = v18 + 6;
          if (v14 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    switch(v15)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v28 + 8))(a1, v6);
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v27 + 8))(a1, v8);
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v10 + 8))(a1, v9);
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v12 + 8))(a1, v11);
        break;
      case 5u:
        swift_release();
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v29 + 8))(a1, v5);
        break;
    }
    unsigned int v20 = a2[v14];
    unsigned int v21 = v20 - 6;
    if (v20 >= 6)
    {
      if (v14 <= 3) {
        uint64_t v22 = v14;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *a2;
          goto LABEL_40;
        case 2:
          int v23 = *(unsigned __int16 *)a2;
          goto LABEL_40;
        case 3:
          int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_40;
        case 4:
          int v23 = *(_DWORD *)a2;
LABEL_40:
          int v24 = (v23 | (v21 << (8 * v14))) + 6;
          unsigned int v20 = v23 + 6;
          if (v14 < 4) {
            unsigned int v20 = v24;
          }
          break;
        default:
          break;
      }
    }
    switch(v20)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 32))(a1, a2, v6);
        char v25 = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 32))(a1, a2, v8);
        char v25 = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v10 + 32))(a1, a2, v9);
        char v25 = 3;
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 32))(a1, a2, v11);
        char v25 = 4;
        break;
      case 5u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v25 = 5;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 32))(a1, a2, v5);
        char v25 = 0;
        break;
    }
    a1[v14] = v25;
  }
  return a1;
}

uint64_t sub_1C41D5BFC(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  unint64_t v3 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  uint64_t v5 = *(void *)(a3[4] - 8);
  if (*(void *)(v5 + 64) > v3) {
    unint64_t v3 = *(void *)(v5 + 64);
  }
  uint64_t v6 = *(void *)(a3[5] - 8);
  if (*(void *)(v6 + 64) > v3) {
    unint64_t v3 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a3[6] - 8);
  if (*(void *)(v7 + 64) > v3) {
    unint64_t v3 = *(void *)(v7 + 64);
  }
  uint64_t v8 = 16;
  if (v3 > 0x10) {
    uint64_t v8 = v3;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_30;
  }
  uint64_t v9 = v8 + 1;
  char v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    unsigned int v13 = ((a2 + ~(-1 << v10) - 250) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_30;
      }
      goto LABEL_22;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_30;
      }
      goto LABEL_22;
    }
    if (v13 < 2)
    {
LABEL_30:
      unsigned int v15 = *((unsigned __int8 *)a1 + v8);
      if (v15 >= 6) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_30;
  }
LABEL_22:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v9 | v14) + 251;
}

void sub_1C41D5DAC(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  unint64_t v5 = *(void *)(*(void *)(a4[2] - 8) + 64);
  uint64_t v6 = *(void *)(a4[4] - 8);
  if (*(void *)(*(void *)(a4[3] - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(a4[3] - 8) + 64);
  }
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a4[5] - 8);
  if (*(void *)(v7 + 64) > v5) {
    unint64_t v5 = *(void *)(v7 + 64);
  }
  uint64_t v8 = *(void *)(a4[6] - 8);
  if (*(void *)(v8 + 64) > v5) {
    unint64_t v5 = *(void *)(v8 + 64);
  }
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v9 = v5 + 1;
  if (a3 < 0xFB)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v9)) - 250) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 > 0xFA)
  {
    unsigned int v11 = a2 - 251;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v5 != -1)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        break;
      case 3:
LABEL_42:
        __break(1u);
        JUMPOUT(0x1C41D5FF0);
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_31;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        goto LABEL_30;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_31;
      default:
LABEL_30:
        if (a2) {
LABEL_31:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1C41D6018(unsigned __int8 *a1, void *a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2[2] - 8) + 64);
  uint64_t v3 = *(void *)(a2[3] - 8);
  if (*(void *)(v3 + 64) > v2) {
    unint64_t v2 = *(void *)(v3 + 64);
  }
  uint64_t v4 = *(void *)(a2[5] - 8);
  if (*(void *)(*(void *)(a2[4] - 8) + 64) > v2) {
    unint64_t v2 = *(void *)(*(void *)(a2[4] - 8) + 64);
  }
  if (*(void *)(v4 + 64) > v2) {
    unint64_t v2 = *(void *)(v4 + 64);
  }
  uint64_t v5 = *(void *)(a2[6] - 8);
  if (*(void *)(v5 + 64) > v2) {
    unint64_t v2 = *(void *)(v5 + 64);
  }
  uint64_t v6 = 16;
  if (v2 > 0x10) {
    uint64_t v6 = v2;
  }
  uint64_t v7 = a1[v6];
  int v8 = v7 - 6;
  if (v7 >= 6)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_20;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_20;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_20;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_20:
        unsigned int v11 = (v10 | (v8 << (8 * v6))) + 6;
        LODWORD(v7) = v10 + 6;
        if (v6 >= 4) {
          uint64_t v7 = v7;
        }
        else {
          uint64_t v7 = v11;
        }
        break;
      default:
        return v7;
    }
  }
  return v7;
}

void sub_1C41D6148(unsigned char *a1, unsigned int a2, void *a3)
{
  if (a2 > 5)
  {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
    uint64_t v6 = *(void *)(a3[4] - 8);
    if (*(void *)(*(void *)(a3[3] - 8) + 64) > v5) {
      unint64_t v5 = *(void *)(*(void *)(a3[3] - 8) + 64);
    }
    if (*(void *)(v6 + 64) > v5) {
      unint64_t v5 = *(void *)(v6 + 64);
    }
    uint64_t v7 = *(void *)(a3[5] - 8);
    if (*(void *)(v7 + 64) > v5) {
      unint64_t v5 = *(void *)(v7 + 64);
    }
    uint64_t v8 = *(void *)(a3[6] - 8);
    if (*(void *)(v8 + 64) > v5) {
      unint64_t v5 = *(void *)(v8 + 64);
    }
    if (v5 <= 0x10) {
      size_t v9 = 16;
    }
    else {
      size_t v9 = v5;
    }
    unsigned int v10 = a2 - 6;
    if (v9 < 4)
    {
      unsigned int v11 = v10 >> (8 * v9);
      int v12 = v10 & ~(-1 << (8 * v9));
      a1[v9] = v11 + 6;
      bzero(a1, v9);
      if (v9 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if (v9 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
    else
    {
      a1[v9] = 6;
      bzero(a1, v9);
      *(_DWORD *)a1 = v10;
    }
  }
  else
  {
    unint64_t v4 = *(void *)(*(void *)(a3[2] - 8) + 64);
    if (*(void *)(*(void *)(a3[3] - 8) + 64) > v4) {
      unint64_t v4 = *(void *)(*(void *)(a3[3] - 8) + 64);
    }
    if (*(void *)(*(void *)(a3[4] - 8) + 64) > v4) {
      unint64_t v4 = *(void *)(*(void *)(a3[4] - 8) + 64);
    }
    if (*(void *)(*(void *)(a3[5] - 8) + 64) > v4) {
      unint64_t v4 = *(void *)(*(void *)(a3[5] - 8) + 64);
    }
    if (*(void *)(*(void *)(a3[6] - 8) + 64) > v4) {
      unint64_t v4 = *(void *)(*(void *)(a3[6] - 8) + 64);
    }
    if (v4 <= 0x10) {
      unint64_t v4 = 16;
    }
    a1[v4] = a2;
  }
}

uint64_t sub_1C41D6348()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_getAssociatedTypeWitness();
        if (v4 <= 0x3F)
        {
          uint64_t result = swift_getAssociatedTypeWitness();
          if (v5 <= 0x3F)
          {
            swift_initEnumMetadataMultiPayload();
            return 0;
          }
        }
      }
    }
  }
  return result;
}

void *sub_1C41D6558(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v28 = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(v28 - 8);
  if (*(void *)(v5 + 64) <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = *(void *)(*(void *)(v28 - 8) + 64);
  }
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v27 - 8);
  if (*(void *)(v7 + 64) <= v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = *(void *)(*(void *)(v27 - 8) + 64);
  }
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(void *)(v10 + 64) > v8) {
    unint64_t v8 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(void *)(v12 + 64) <= v8) {
    unint64_t v13 = v8;
  }
  else {
    unint64_t v13 = *(void *)(*(void *)(v11 - 8) + 64);
  }
  size_t v14 = v13 + 1;
  int v15 = *(_DWORD *)(v10 + 80);
  uint64_t v16 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v3 + 80) | *(unsigned char *)(v7 + 80) | v15 | *(unsigned char *)(v12 + 80));
  if (v16 <= 7
    && v14 <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v3 + 80) | *(_DWORD *)(v7 + 80) | v15 | *(_DWORD *)(v12 + 80)) & 0x100000) == 0)
  {
    uint64_t v22 = v3;
    unsigned int v20 = a1;
    unsigned int v23 = a2[v13];
    unsigned int v24 = v23 - 6;
    if (v23 < 6)
    {
LABEL_32:
      switch(v23)
      {
        case 0u:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v22 + 16))(a1, a2, AssociatedTypeWitness);
          *((unsigned char *)a1 + v13) = 0;
          break;
        case 1u:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, v28);
          *((unsigned char *)a1 + v13) = 1;
          break;
        case 2u:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v27);
          *((unsigned char *)a1 + v13) = 2;
          break;
        case 3u:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v10 + 16))(a1, a2, v9);
          *((unsigned char *)a1 + v13) = 3;
          break;
        case 4u:
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v12 + 16))(a1, a2, v11);
          *((unsigned char *)a1 + v13) = 4;
          break;
        case 5u:
          *((unsigned char *)a1 + v13) = 5;
          break;
        default:
          goto LABEL_41;
      }
    }
    else
    {
      if (v13 <= 3) {
        uint64_t v25 = v13;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *a2;
          if (v13 >= 4) {
            goto LABEL_40;
          }
          goto LABEL_31;
        case 2:
          int v26 = *(unsigned __int16 *)a2;
          if (v13 >= 4) {
            goto LABEL_40;
          }
          goto LABEL_31;
        case 3:
          int v26 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v13 < 4) {
            goto LABEL_31;
          }
          goto LABEL_40;
        case 4:
          int v26 = *(_DWORD *)a2;
          if (v13 < 4)
          {
LABEL_31:
            unsigned int v23 = (v26 | (v24 << (8 * v13))) + 6;
            goto LABEL_32;
          }
LABEL_40:
          unsigned int v23 = v26 + 6;
          if (v23 <= 5) {
            goto LABEL_32;
          }
LABEL_41:
          memcpy(a1, a2, v14);
          break;
        default:
          goto LABEL_32;
      }
    }
  }
  else
  {
    uint64_t v19 = *(void *)a2;
    *a1 = *(void *)a2;
    unsigned int v20 = (void *)(v19 + ((v16 + 16) & ~v16));
    swift_retain();
  }
  return v20;
}

uint64_t sub_1C41D6A00(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = *(void *)(v21 + 64);
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v4 - 8);
  if (*(void *)(v20 + 64) <= v3) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(v6 - 8);
  if (*(void *)(v19 + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(void *)(v9 + 64) > v7) {
    unint64_t v7 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  uint64_t result = swift_getAssociatedTypeWitness();
  unint64_t v11 = *(void *)(*(void *)(result - 8) + 64);
  if (v11 <= v7) {
    unint64_t v11 = v7;
  }
  unsigned int v12 = a1[v11];
  unsigned int v13 = v12 - 6;
  if (v12 >= 6)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a1;
        goto LABEL_20;
      case 2:
        int v15 = *(unsigned __int16 *)a1;
        goto LABEL_20;
      case 3:
        int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_20;
      case 4:
        int v15 = *(_DWORD *)a1;
LABEL_20:
        int v16 = (v15 | (v13 << (8 * v11))) + 6;
        unsigned int v12 = v15 + 6;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v17 = v21;
  switch(v12)
  {
    case 0u:
      goto LABEL_27;
    case 1u:
      uint64_t v17 = v20;
      uint64_t AssociatedTypeWitness = v4;
      goto LABEL_27;
    case 2u:
      uint64_t v17 = v19;
      uint64_t AssociatedTypeWitness = v6;
      goto LABEL_27;
    case 3u:
      uint64_t v17 = v9;
      uint64_t AssociatedTypeWitness = v8;
      goto LABEL_27;
    case 4u:
      uint64_t v17 = *(void *)(result - 8);
      uint64_t AssociatedTypeWitness = result;
LABEL_27:
      int v18 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v17 + 8);
      uint64_t result = v18(a1, AssociatedTypeWitness);
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *sub_1C41D6DAC(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v24 = AssociatedTypeWitness;
  unint64_t v5 = *(void *)(v23 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(v6 - 8);
  if (*(void *)(v22 + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(v8 - 8);
  if (*(void *)(v21 + 64) <= v7) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(void *)(v11 + 64) > v9) {
    unint64_t v9 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  uint64_t v12 = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(v12 - 8) + 64) <= v9) {
    unint64_t v13 = v9;
  }
  else {
    unint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  }
  unsigned int v14 = a2[v13];
  unsigned int v15 = v14 - 6;
  if (v14 >= 6)
  {
    if (v13 <= 3) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        goto LABEL_21;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        goto LABEL_21;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_21;
      case 4:
        int v17 = *(_DWORD *)a2;
LABEL_21:
        int v18 = (v17 | (v15 << (8 * v13))) + 6;
        unsigned int v14 = v17 + 6;
        if (v13 < 4) {
          unsigned int v14 = v18;
        }
        break;
      default:
        break;
    }
  }
  switch(v14)
  {
    case 0u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
      a1[v13] = 0;
      return a1;
    case 1u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v22 + 16))(a1, a2, v6);
      char v19 = 1;
      goto LABEL_31;
    case 2u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v21 + 16))(a1, a2, v8);
      char v19 = 2;
      goto LABEL_31;
    case 3u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v11 + 16))(a1, a2, v10);
      char v19 = 3;
      goto LABEL_31;
    case 4u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
      char v19 = 4;
      goto LABEL_31;
    case 5u:
      char v19 = 5;
LABEL_31:
      a1[v13] = v19;
      break;
    default:
      memcpy(a1, a2, v13 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41D71C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v5 = *(void *)(v29 + 64);
    uint64_t v6 = swift_getAssociatedTypeWitness();
    uint64_t v28 = *(void *)(v6 - 8);
    if (*(void *)(v28 + 64) <= v5) {
      unint64_t v7 = v5;
    }
    else {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v8 = swift_getAssociatedTypeWitness();
    uint64_t v27 = *(void *)(v8 - 8);
    if (*(void *)(v27 + 64) <= v7) {
      unint64_t v9 = v7;
    }
    else {
      unint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
    }
    uint64_t v10 = swift_getAssociatedTypeWitness();
    uint64_t v26 = *(void *)(v10 - 8);
    if (*(void *)(v26 + 64) > v9) {
      unint64_t v9 = *(void *)(*(void *)(v10 - 8) + 64);
    }
    uint64_t v11 = swift_getAssociatedTypeWitness();
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(v11 - 8);
    if (*(void *)(v13 + 64) <= v9) {
      unint64_t v14 = v9;
    }
    else {
      unint64_t v14 = *(void *)(*(void *)(v11 - 8) + 64);
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 6;
    if (v15 >= 6)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_23;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_23;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 < 4) {
            goto LABEL_23;
          }
          goto LABEL_38;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4)
          {
LABEL_23:
            unsigned int v15 = (v18 | (v16 << (8 * v14))) + 6;
            break;
          }
LABEL_38:
          unsigned int v15 = v18 + 6;
          if (v15 > 4) {
            goto LABEL_30;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v19 = v29;
    uint64_t v20 = AssociatedTypeWitness;
    switch(v15)
    {
      case 0u:
        goto LABEL_29;
      case 1u:
        uint64_t v19 = v28;
        uint64_t v20 = v6;
        goto LABEL_29;
      case 2u:
        uint64_t v19 = v27;
        uint64_t v20 = v8;
        goto LABEL_29;
      case 3u:
        uint64_t v19 = v26;
        uint64_t v20 = v10;
        goto LABEL_29;
      case 4u:
        uint64_t v19 = *(void *)(v11 - 8);
        uint64_t v20 = v11;
LABEL_29:
        (*(void (**)(unsigned __int8 *, uint64_t))(v19 + 8))(a1, v20);
        break;
      default:
        break;
    }
LABEL_30:
    unsigned int v21 = a2[v14];
    unsigned int v22 = v21 - 6;
    if (v21 < 6)
    {
LABEL_44:
      switch(v21)
      {
        case 0u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 16))(a1, a2, AssociatedTypeWitness);
          a1[v14] = 0;
          break;
        case 1u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 16))(a1, a2, v6);
          a1[v14] = 1;
          break;
        case 2u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 16))(a1, a2, v8);
          a1[v14] = 2;
          break;
        case 3u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 16))(a1, a2, v10);
          a1[v14] = 3;
          break;
        case 4u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v13 + 16))(a1, a2, v12);
          a1[v14] = 4;
          break;
        case 5u:
          a1[v14] = 5;
          break;
        default:
          goto LABEL_53;
      }
    }
    else
    {
      if (v14 <= 3) {
        uint64_t v23 = v14;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *a2;
          if (v14 >= 4) {
            goto LABEL_52;
          }
          goto LABEL_43;
        case 2:
          int v24 = *(unsigned __int16 *)a2;
          if (v14 >= 4) {
            goto LABEL_52;
          }
          goto LABEL_43;
        case 3:
          int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v14 < 4) {
            goto LABEL_43;
          }
          goto LABEL_52;
        case 4:
          int v24 = *(_DWORD *)a2;
          if (v14 < 4)
          {
LABEL_43:
            unsigned int v21 = (v24 | (v22 << (8 * v14))) + 6;
            goto LABEL_44;
          }
LABEL_52:
          unsigned int v21 = v24 + 6;
          if (v21 <= 5) {
            goto LABEL_44;
          }
LABEL_53:
          memcpy(a1, a2, v14 + 1);
          break;
        default:
          goto LABEL_44;
      }
    }
  }
  return a1;
}

unsigned char *sub_1C41D7754(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v24 = AssociatedTypeWitness;
  unint64_t v5 = *(void *)(v23 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(v6 - 8);
  if (*(void *)(v22 + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(v8 - 8);
  if (*(void *)(v21 + 64) <= v7) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(void *)(v11 + 64) > v9) {
    unint64_t v9 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  uint64_t v12 = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(v12 - 8) + 64) <= v9) {
    unint64_t v13 = v9;
  }
  else {
    unint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  }
  unsigned int v14 = a2[v13];
  unsigned int v15 = v14 - 6;
  if (v14 >= 6)
  {
    if (v13 <= 3) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        goto LABEL_21;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        goto LABEL_21;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_21;
      case 4:
        int v17 = *(_DWORD *)a2;
LABEL_21:
        int v18 = (v17 | (v15 << (8 * v13))) + 6;
        unsigned int v14 = v17 + 6;
        if (v13 < 4) {
          unsigned int v14 = v18;
        }
        break;
      default:
        break;
    }
  }
  switch(v14)
  {
    case 0u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
      a1[v13] = 0;
      return a1;
    case 1u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v22 + 32))(a1, a2, v6);
      char v19 = 1;
      goto LABEL_31;
    case 2u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v21 + 32))(a1, a2, v8);
      char v19 = 2;
      goto LABEL_31;
    case 3u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v11 + 32))(a1, a2, v10);
      char v19 = 3;
      goto LABEL_31;
    case 4u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
      char v19 = 4;
      goto LABEL_31;
    case 5u:
      char v19 = 5;
LABEL_31:
      a1[v13] = v19;
      break;
    default:
      memcpy(a1, a2, v13 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41D7B6C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v5 = *(void *)(v29 + 64);
    uint64_t v6 = swift_getAssociatedTypeWitness();
    uint64_t v28 = *(void *)(v6 - 8);
    if (*(void *)(v28 + 64) <= v5) {
      unint64_t v7 = v5;
    }
    else {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v8 = swift_getAssociatedTypeWitness();
    uint64_t v27 = *(void *)(v8 - 8);
    if (*(void *)(v27 + 64) <= v7) {
      unint64_t v9 = v7;
    }
    else {
      unint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
    }
    uint64_t v10 = swift_getAssociatedTypeWitness();
    uint64_t v26 = *(void *)(v10 - 8);
    if (*(void *)(v26 + 64) > v9) {
      unint64_t v9 = *(void *)(*(void *)(v10 - 8) + 64);
    }
    uint64_t v11 = swift_getAssociatedTypeWitness();
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(v11 - 8);
    if (*(void *)(v13 + 64) <= v9) {
      unint64_t v14 = v9;
    }
    else {
      unint64_t v14 = *(void *)(*(void *)(v11 - 8) + 64);
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 6;
    if (v15 >= 6)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_23;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_23;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 < 4) {
            goto LABEL_23;
          }
          goto LABEL_38;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4)
          {
LABEL_23:
            unsigned int v15 = (v18 | (v16 << (8 * v14))) + 6;
            break;
          }
LABEL_38:
          unsigned int v15 = v18 + 6;
          if (v15 > 4) {
            goto LABEL_30;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v19 = v29;
    uint64_t v20 = AssociatedTypeWitness;
    switch(v15)
    {
      case 0u:
        goto LABEL_29;
      case 1u:
        uint64_t v19 = v28;
        uint64_t v20 = v6;
        goto LABEL_29;
      case 2u:
        uint64_t v19 = v27;
        uint64_t v20 = v8;
        goto LABEL_29;
      case 3u:
        uint64_t v19 = v26;
        uint64_t v20 = v10;
        goto LABEL_29;
      case 4u:
        uint64_t v19 = *(void *)(v11 - 8);
        uint64_t v20 = v11;
LABEL_29:
        (*(void (**)(unsigned __int8 *, uint64_t))(v19 + 8))(a1, v20);
        break;
      default:
        break;
    }
LABEL_30:
    unsigned int v21 = a2[v14];
    unsigned int v22 = v21 - 6;
    if (v21 < 6)
    {
LABEL_44:
      switch(v21)
      {
        case 0u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 32))(a1, a2, AssociatedTypeWitness);
          a1[v14] = 0;
          break;
        case 1u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 32))(a1, a2, v6);
          a1[v14] = 1;
          break;
        case 2u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 32))(a1, a2, v8);
          a1[v14] = 2;
          break;
        case 3u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 32))(a1, a2, v10);
          a1[v14] = 3;
          break;
        case 4u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v13 + 32))(a1, a2, v12);
          a1[v14] = 4;
          break;
        case 5u:
          a1[v14] = 5;
          break;
        default:
          goto LABEL_53;
      }
    }
    else
    {
      if (v14 <= 3) {
        uint64_t v23 = v14;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *a2;
          if (v14 >= 4) {
            goto LABEL_52;
          }
          goto LABEL_43;
        case 2:
          int v24 = *(unsigned __int16 *)a2;
          if (v14 >= 4) {
            goto LABEL_52;
          }
          goto LABEL_43;
        case 3:
          int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v14 < 4) {
            goto LABEL_43;
          }
          goto LABEL_52;
        case 4:
          int v24 = *(_DWORD *)a2;
          if (v14 < 4)
          {
LABEL_43:
            unsigned int v21 = (v24 | (v22 << (8 * v14))) + 6;
            goto LABEL_44;
          }
LABEL_52:
          unsigned int v21 = v24 + 6;
          if (v21 <= 5) {
            goto LABEL_44;
          }
LABEL_53:
          memcpy(a1, a2, v14 + 1);
          break;
        default:
          goto LABEL_44;
      }
    }
  }
  return a1;
}

uint64_t sub_1C41D80FC(unsigned __int16 *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 > v4) {
    unint64_t v4 = v5;
  }
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 > v4) {
    unint64_t v4 = v6;
  }
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 > v4) {
    unint64_t v4 = v7;
  }
  unint64_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 <= v4) {
    unint64_t v9 = v4;
  }
  else {
    unint64_t v9 = v8;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_29;
  }
  unint64_t v10 = v9 + 1;
  char v11 = 8 * (v9 + 1);
  if ((v9 + 1) <= 3)
  {
    unsigned int v14 = ((a2 + ~(-1 << v11) - 249) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_29;
      }
      goto LABEL_21;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_29;
      }
      goto LABEL_21;
    }
    if (v14 < 2)
    {
LABEL_29:
      unsigned int v16 = *((unsigned __int8 *)a1 + v9);
      if (v16 >= 7) {
        return (v16 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_29;
  }
LABEL_21:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v10 | v15) + 250;
}

void sub_1C41D8360(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 > v6) {
    unint64_t v6 = v7;
  }
  unint64_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 > v6) {
    unint64_t v6 = v8;
  }
  unint64_t v9 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v9 > v6) {
    unint64_t v6 = v9;
  }
  unint64_t v10 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v10 <= v6) {
    unint64_t v10 = v6;
  }
  size_t v11 = v10 + 1;
  if (a3 < 0xFA)
  {
    int v12 = 0;
  }
  else if (v11 <= 3)
  {
    unsigned int v15 = ((a3 + ~(-1 << (8 * v11)) - 249) >> (8 * v11)) + 1;
    if (HIWORD(v15))
    {
      int v12 = 4;
    }
    else if (v15 >= 0x100)
    {
      int v12 = 2;
    }
    else
    {
      int v12 = v15 > 1;
    }
  }
  else
  {
    int v12 = 1;
  }
  if (a2 > 0xF9)
  {
    unsigned int v13 = a2 - 250;
    if (v11 < 4)
    {
      int v14 = (v13 >> (8 * v11)) + 1;
      if (v10 != -1)
      {
        int v16 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10 + 1);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v11] = v14;
        break;
      case 2:
        *(_WORD *)&a1[v11] = v14;
        break;
      case 3:
LABEL_40:
        __break(1u);
        JUMPOUT(0x1C41D8638);
      case 4:
        *(_DWORD *)&a1[v11] = v14;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v12)
    {
      case 1:
        a1[v11] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      case 2:
        *(_WORD *)&a1[v11] = 0;
        goto LABEL_28;
      case 3:
        goto LABEL_40;
      case 4:
        *(_DWORD *)&a1[v11] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      default:
LABEL_28:
        if (a2) {
LABEL_29:
        }
          a1[v10] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1C41D8660(unsigned __int8 *a1)
{
  unint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v3 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 > v2) {
    unint64_t v2 = v3;
  }
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v4 > v2) {
    unint64_t v2 = v4;
  }
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 > v2) {
    unint64_t v2 = v5;
  }
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 <= v2) {
    unint64_t v6 = v2;
  }
  uint64_t result = a1[v6];
  if (result >= 6)
  {
    if (v6 <= 3) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_18;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_18;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_18;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_18:
        unsigned int v10 = (v9 | ((result - 6) << (8 * v6))) + 6;
        unsigned int v11 = v9 + 6;
        if (v6 >= 4) {
          uint64_t result = v11;
        }
        else {
          uint64_t result = v10;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1C41D8840(unsigned char *a1, unsigned int a2)
{
  size_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  size_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 > v4) {
    size_t v4 = v5;
  }
  size_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 > v4) {
    size_t v4 = v6;
  }
  size_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 > v4) {
    size_t v4 = v7;
  }
  size_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 <= v4) {
    size_t v9 = v4;
  }
  else {
    size_t v9 = v8;
  }
  if (a2 > 5)
  {
    unsigned int v10 = a2 - 6;
    if (v9 < 4)
    {
      unsigned int v11 = v10 >> (8 * v9);
      int v12 = v10 & ~(-1 << (8 * v9));
      a1[v9] = v11 + 6;
      bzero(a1, v9);
      if (v9 == 3)
      {
        *(_WORD *)a1 = v12;
        a1[2] = BYTE2(v12);
      }
      else if (v9 == 2)
      {
        *(_WORD *)a1 = v12;
      }
      else
      {
        *a1 = v12;
      }
    }
    else
    {
      a1[v9] = 6;
      bzero(a1, v9);
      *(_DWORD *)a1 = v10;
    }
  }
  else
  {
    a1[v9] = a2;
  }
}

uint64_t sub_1C41D8A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 104);
}

uint64_t sub_1C41D8A2C()
{
  uint64_t result = type metadata accessor for TaggedValue_6.TaggedEnum();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C41D8AD8(unsigned __int8 *a1, void *a2)
{
  uint64_t v2 = *(void *)(a2[3] - 8);
  if (*(void *)(v2 + 64) <= *(void *)(*(void *)(a2[2] - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(a2[2] - 8) + 64);
  }
  else {
    unint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = *(void *)(a2[4] - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  if (*(void *)(*(void *)(a2[5] - 8) + 64) <= v3) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = *(void *)(*(void *)(a2[5] - 8) + 64);
  }
  uint64_t v6 = a2[6];
  uint64_t v7 = a2[7];
  if (*(void *)(*(void *)(v6 - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  if (v8 <= v5) {
    unint64_t v8 = v5;
  }
  if (v8 <= 0x10) {
    unint64_t v8 = 16;
  }
  unsigned int v9 = a1[v8];
  unsigned int v10 = v9 - 7;
  if (v9 >= 7)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a1;
        goto LABEL_24;
      case 2:
        int v12 = *(unsigned __int16 *)a1;
        goto LABEL_24;
      case 3:
        int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_24;
      case 4:
        int v12 = *(_DWORD *)a1;
LABEL_24:
        int v13 = (v12 | (v10 << (8 * v8))) + 7;
        unsigned int v9 = v12 + 7;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  switch(v9)
  {
    case 1u:
      uint64_t result = (*(uint64_t (**)(void))(v2 + 8))();
      break;
    case 2u:
      uint64_t result = (*(uint64_t (**)(void))(v4 + 8))();
      break;
    case 3u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2[5] - 8) + 8))();
      break;
    case 4u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v6 - 8) + 8))();
      break;
    case 5u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v7 - 8) + 8))();
      break;
    case 6u:
      uint64_t result = swift_release();
      break;
    default:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2[2] - 8) + 8))();
      break;
  }
  return result;
}

void *sub_1C41D8E04(void *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = *(void *)(a3[4] - 8);
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  if (*(void *)(*(void *)(a3[5] - 8) + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(*(void *)(a3[5] - 8) + 64);
  }
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  if (*(void *)(*(void *)(v8 - 8) + 64) > v7) {
    unint64_t v7 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  unint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  if (v10 <= v7) {
    unint64_t v10 = v7;
  }
  if (v10 <= 0x10) {
    uint64_t v11 = 16;
  }
  else {
    uint64_t v11 = v10;
  }
  unsigned int v12 = a2[v11];
  if (v12 >= 7)
  {
    if (v11 <= 3) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        goto LABEL_25;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        goto LABEL_25;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_25;
      case 4:
        int v14 = *(_DWORD *)a2;
LABEL_25:
        int v15 = (v14 | ((v12 - 7) << (8 * v11))) + 7;
        unsigned int v16 = v14 + 7;
        if (v11 >= 4) {
          unsigned int v12 = v16;
        }
        else {
          unsigned int v12 = v15;
        }
        break;
      default:
        break;
    }
  }
  switch(v12)
  {
    case 1u:
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)a1 + v11) = 1;
      break;
    case 2u:
      (*(void (**)(void *))(v6 + 16))(a1);
      *((unsigned char *)a1 + v11) = 2;
      break;
    case 3u:
      (*(void (**)(void *))(*(void *)(a3[5] - 8) + 16))(a1);
      *((unsigned char *)a1 + v11) = 3;
      break;
    case 4u:
      (*(void (**)(void *))(*(void *)(v8 - 8) + 16))(a1);
      *((unsigned char *)a1 + v11) = 4;
      break;
    case 5u:
      (*(void (**)(void *))(*(void *)(v9 - 8) + 16))(a1);
      *((unsigned char *)a1 + v11) = 5;
      break;
    case 6u:
      uint64_t v17 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v17;
      *((unsigned char *)a1 + v11) = 6;
      swift_retain();
      break;
    default:
      (*(void (**)(void *))(*(void *)(a3[2] - 8) + 16))(a1);
      *((unsigned char *)a1 + v11) = 0;
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41D91BC(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v28 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v28 + 64);
    uint64_t v27 = *(void *)(v6 - 8);
    if (*(void *)(v27 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v8 = a3[4];
    uint64_t v9 = a3[5];
    uint64_t v26 = *(void *)(v8 - 8);
    if (*(void *)(v26 + 64) > v7) {
      unint64_t v7 = *(void *)(v26 + 64);
    }
    uint64_t v25 = *(void *)(v9 - 8);
    if (*(void *)(v25 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v9 - 8) + 64);
    }
    uint64_t v10 = a3[6];
    uint64_t v11 = a3[7];
    uint64_t v24 = *(void *)(v10 - 8);
    if (*(void *)(v24 + 64) > v7) {
      unint64_t v7 = *(void *)(v24 + 64);
    }
    uint64_t v12 = *(void *)(v11 - 8);
    unint64_t v13 = *(void *)(v12 + 64);
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 7;
    if (v15 >= 7)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_27;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 >= 4) {
            goto LABEL_27;
          }
          goto LABEL_25;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_27;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_25:
          }
            unsigned int v15 = (v18 | (v16 << (8 * v14))) + 7;
          else {
LABEL_27:
          }
            unsigned int v15 = v18 + 7;
          break;
        default:
          break;
      }
    }
    switch(v15)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v27 + 8))(a1, v6);
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v26 + 8))(a1, v8);
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v25 + 8))(a1, v9);
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v24 + 8))(a1, v10);
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v12 + 8))(a1, v11);
        break;
      case 6u:
        swift_release();
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v28 + 8))(a1, v5);
        break;
    }
    unsigned int v19 = a2[v14];
    unsigned int v20 = v19 - 7;
    if (v19 >= 7)
    {
      if (v14 <= 3) {
        uint64_t v21 = v14;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v14 < 4) {
            goto LABEL_46;
          }
          goto LABEL_48;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v14 >= 4) {
            goto LABEL_48;
          }
          goto LABEL_46;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v14 < 4) {
            goto LABEL_46;
          }
          goto LABEL_48;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v14 < 4) {
LABEL_46:
          }
            unsigned int v19 = (v22 | (v20 << (8 * v14))) + 7;
          else {
LABEL_48:
          }
            unsigned int v19 = v22 + 7;
          break;
        default:
          break;
      }
    }
    switch(v19)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 16))(a1, a2, v6);
        a1[v14] = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 16))(a1, a2, v8);
        a1[v14] = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 16))(a1, a2, v9);
        a1[v14] = 3;
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 16))(a1, a2, v10);
        a1[v14] = 4;
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 16))(a1, a2, v11);
        a1[v14] = 5;
        break;
      case 6u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        a1[v14] = 6;
        swift_retain();
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 16))(a1, a2, v5);
        a1[v14] = 0;
        break;
    }
  }
  return a1;
}

_OWORD *sub_1C41D9798(_OWORD *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = *(void *)(a3[4] - 8);
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  if (*(void *)(*(void *)(a3[5] - 8) + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(*(void *)(a3[5] - 8) + 64);
  }
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  if (*(void *)(*(void *)(v8 - 8) + 64) > v7) {
    unint64_t v7 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  unint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  if (v10 <= v7) {
    unint64_t v10 = v7;
  }
  if (v10 <= 0x10) {
    uint64_t v11 = 16;
  }
  else {
    uint64_t v11 = v10;
  }
  unsigned int v12 = a2[v11];
  if (v12 >= 7)
  {
    if (v11 <= 3) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        goto LABEL_25;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        goto LABEL_25;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_25;
      case 4:
        int v14 = *(_DWORD *)a2;
LABEL_25:
        int v15 = (v14 | ((v12 - 7) << (8 * v11))) + 7;
        unsigned int v16 = v14 + 7;
        if (v11 >= 4) {
          unsigned int v12 = v16;
        }
        else {
          unsigned int v12 = v15;
        }
        break;
      default:
        break;
    }
  }
  switch(v12)
  {
    case 1u:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      char v17 = 1;
      break;
    case 2u:
      (*(void (**)(_OWORD *))(v6 + 32))(a1);
      char v17 = 2;
      break;
    case 3u:
      (*(void (**)(_OWORD *))(*(void *)(a3[5] - 8) + 32))(a1);
      char v17 = 3;
      break;
    case 4u:
      (*(void (**)(_OWORD *))(*(void *)(v8 - 8) + 32))(a1);
      char v17 = 4;
      break;
    case 5u:
      (*(void (**)(_OWORD *))(*(void *)(v9 - 8) + 32))(a1);
      char v17 = 5;
      break;
    case 6u:
      *a1 = *(_OWORD *)a2;
      char v17 = 6;
      break;
    default:
      (*(void (**)(_OWORD *))(*(void *)(a3[2] - 8) + 32))(a1);
      char v17 = 0;
      break;
  }
  *((unsigned char *)a1 + v11) = v17;
  return a1;
}

unsigned __int8 *sub_1C41D9B38(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v29 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v29 + 64);
    uint64_t v28 = *(void *)(v6 - 8);
    if (*(void *)(v28 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v8 = a3[4];
    uint64_t v9 = a3[5];
    uint64_t v27 = *(void *)(v8 - 8);
    if (*(void *)(v27 + 64) > v7) {
      unint64_t v7 = *(void *)(v27 + 64);
    }
    uint64_t v26 = *(void *)(v9 - 8);
    if (*(void *)(v26 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v9 - 8) + 64);
    }
    uint64_t v10 = a3[6];
    uint64_t v11 = a3[7];
    uint64_t v25 = *(void *)(v10 - 8);
    if (*(void *)(v25 + 64) > v7) {
      unint64_t v7 = *(void *)(v25 + 64);
    }
    uint64_t v12 = *(void *)(v11 - 8);
    unint64_t v13 = *(void *)(v12 + 64);
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 7;
    if (v15 >= 7)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_27;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 >= 4) {
            goto LABEL_27;
          }
          goto LABEL_25;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_27;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_25:
          }
            unsigned int v15 = (v18 | (v16 << (8 * v14))) + 7;
          else {
LABEL_27:
          }
            unsigned int v15 = v18 + 7;
          break;
        default:
          break;
      }
    }
    switch(v15)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v28 + 8))(a1, v6);
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v27 + 8))(a1, v8);
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v26 + 8))(a1, v9);
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v25 + 8))(a1, v10);
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v12 + 8))(a1, v11);
        break;
      case 6u:
        swift_release();
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v29 + 8))(a1, v5);
        break;
    }
    unsigned int v19 = a2[v14];
    unsigned int v20 = v19 - 7;
    if (v19 >= 7)
    {
      if (v14 <= 3) {
        uint64_t v21 = v14;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v14 < 4) {
            goto LABEL_46;
          }
          goto LABEL_48;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v14 >= 4) {
            goto LABEL_48;
          }
          goto LABEL_46;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v14 < 4) {
            goto LABEL_46;
          }
          goto LABEL_48;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v14 < 4) {
LABEL_46:
          }
            unsigned int v19 = (v22 | (v20 << (8 * v14))) + 7;
          else {
LABEL_48:
          }
            unsigned int v19 = v22 + 7;
          break;
        default:
          break;
      }
    }
    switch(v19)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 32))(a1, a2, v6);
        char v23 = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 32))(a1, a2, v8);
        char v23 = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 32))(a1, a2, v9);
        char v23 = 3;
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 32))(a1, a2, v10);
        char v23 = 4;
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 32))(a1, a2, v11);
        char v23 = 5;
        break;
      case 6u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v23 = 6;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 32))(a1, a2, v5);
        char v23 = 0;
        break;
    }
    a1[v14] = v23;
  }
  return a1;
}

uint64_t sub_1C41DA0F4(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  unint64_t v3 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  uint64_t v5 = *(void *)(a3[4] - 8);
  if (*(void *)(v5 + 64) > v3) {
    unint64_t v3 = *(void *)(v5 + 64);
  }
  uint64_t v6 = *(void *)(a3[5] - 8);
  if (*(void *)(v6 + 64) > v3) {
    unint64_t v3 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a3[6] - 8);
  if (*(void *)(v7 + 64) > v3) {
    unint64_t v3 = *(void *)(v7 + 64);
  }
  uint64_t v8 = *(void *)(a3[7] - 8);
  if (*(void *)(v8 + 64) > v3) {
    unint64_t v3 = *(void *)(v8 + 64);
  }
  uint64_t v9 = 16;
  if (v3 > 0x10) {
    uint64_t v9 = v3;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_32;
  }
  uint64_t v10 = v9 + 1;
  char v11 = 8 * (v9 + 1);
  if ((v9 + 1) <= 3)
  {
    unsigned int v14 = ((a2 + ~(-1 << v11) - 249) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_32;
      }
      goto LABEL_24;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_32;
      }
      goto LABEL_24;
    }
    if (v14 < 2)
    {
LABEL_32:
      unsigned int v16 = *((unsigned __int8 *)a1 + v9);
      if (v16 >= 7) {
        return (v16 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_32;
  }
LABEL_24:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v10 | v15) + 250;
}

void sub_1C41DA2C4(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  unint64_t v5 = *(void *)(*(void *)(a4[2] - 8) + 64);
  if (*(void *)(*(void *)(a4[3] - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(a4[3] - 8) + 64);
  }
  uint64_t v6 = *(void *)(a4[5] - 8);
  if (*(void *)(*(void *)(a4[4] - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(a4[4] - 8) + 64);
  }
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a4[6] - 8);
  if (*(void *)(v7 + 64) > v5) {
    unint64_t v5 = *(void *)(v7 + 64);
  }
  uint64_t v8 = *(void *)(a4[7] - 8);
  if (*(void *)(v8 + 64) > v5) {
    unint64_t v5 = *(void *)(v8 + 64);
  }
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v9 = v5 + 1;
  if (a3 < 0xFA)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v9)) - 249) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 > 0xF9)
  {
    unsigned int v11 = a2 - 250;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v5 != -1)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        break;
      case 3:
LABEL_44:
        __break(1u);
        JUMPOUT(0x1C41DA524);
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_33;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        goto LABEL_32;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_33;
      default:
LABEL_32:
        if (a2) {
LABEL_33:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t type metadata accessor for TaggedValue_6()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C41DA564()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          uint64_t result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            uint64_t result = swift_checkMetadataState();
            if (v6 <= 0x3F)
            {
              swift_initEnumMetadataMultiPayload();
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

void *sub_1C41DA738(void *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(a3[3] - 8);
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a3[4] - 8);
  if (*(void *)(v7 + 64) <= v5) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = *(void *)(*(void *)(a3[4] - 8) + 64);
  }
  uint64_t v9 = *(void *)(a3[5] - 8);
  if (*(void *)(v9 + 64) <= v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = *(void *)(v9 + 64);
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(void *)(v12 + 64) > v10) {
    unint64_t v10 = *(void *)(*(void *)(v11 - 8) + 64);
  }
  uint64_t v13 = *(void *)(a3[7] - 8);
  unint64_t v14 = *(void *)(v13 + 64);
  if (v14 <= v10) {
    unint64_t v14 = v10;
  }
  if (v14 <= 0x10) {
    uint64_t v15 = 16;
  }
  else {
    uint64_t v15 = v14;
  }
  int v16 = *(_DWORD *)(v6 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80) | *(_DWORD *)(v12 + 80) | *(_DWORD *)(v13 + 80);
  if ((unint64_t)(v15 + 1) <= 0x18 && (v16 & 0x1000F8) == 0)
  {
    unsigned int v20 = a2[v15];
    if (v20 >= 7)
    {
      if (v15 <= 3) {
        uint64_t v21 = v15;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v15 < 4) {
            goto LABEL_33;
          }
          goto LABEL_35;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v15 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_33;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v15 < 4) {
            goto LABEL_33;
          }
          goto LABEL_35;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v15 < 4) {
LABEL_33:
          }
            unsigned int v20 = (v22 | ((v20 - 7) << (8 * v15))) + 7;
          else {
LABEL_35:
          }
            unsigned int v20 = v22 + 7;
          break;
        default:
          break;
      }
    }
    switch(v20)
    {
      case 1u:
        (*(void (**)(void *))(v6 + 16))(a1);
        *((unsigned char *)a1 + v15) = 1;
        break;
      case 2u:
        (*(void (**)(void *))(v7 + 16))(a1);
        *((unsigned char *)a1 + v15) = 2;
        break;
      case 3u:
        (*(void (**)(void *))(v9 + 16))(a1);
        *((unsigned char *)a1 + v15) = 3;
        break;
      case 4u:
        (*(void (**)(void *))(v12 + 16))(a1);
        *((unsigned char *)a1 + v15) = 4;
        break;
      case 5u:
        (*(void (**)(void *))(v13 + 16))(a1);
        *((unsigned char *)a1 + v15) = 5;
        break;
      case 6u:
        uint64_t v23 = *((void *)a2 + 1);
        *a1 = *(void *)a2;
        a1[1] = v23;
        *((unsigned char *)a1 + v15) = 6;
        goto LABEL_21;
      default:
        (*(void (**)(void *))(v4 + 16))(a1);
        *((unsigned char *)a1 + v15) = 0;
        break;
    }
  }
  else
  {
    uint64_t v18 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v18 + (((v16 & 0xF8 | 7u) + 16) & ~(unint64_t)(v16 & 0xF8 | 7u)));
LABEL_21:
    swift_retain();
  }
  return a1;
}

uint64_t sub_1C41DAB6C(unsigned __int8 *a1, void *a2)
{
  uint64_t v2 = *(void *)(a2[3] - 8);
  if (*(void *)(v2 + 64) <= *(void *)(*(void *)(a2[2] - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(a2[2] - 8) + 64);
  }
  else {
    unint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = *(void *)(a2[4] - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  if (*(void *)(*(void *)(a2[5] - 8) + 64) <= v3) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = *(void *)(*(void *)(a2[5] - 8) + 64);
  }
  uint64_t v6 = a2[6];
  uint64_t v7 = a2[7];
  if (*(void *)(*(void *)(v6 - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  unint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  if (v8 <= v5) {
    unint64_t v8 = v5;
  }
  if (v8 <= 0x10) {
    unint64_t v8 = 16;
  }
  unsigned int v9 = a1[v8];
  unsigned int v10 = v9 - 7;
  if (v9 >= 7)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a1;
        goto LABEL_24;
      case 2:
        int v12 = *(unsigned __int16 *)a1;
        goto LABEL_24;
      case 3:
        int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_24;
      case 4:
        int v12 = *(_DWORD *)a1;
LABEL_24:
        int v13 = (v12 | (v10 << (8 * v8))) + 7;
        unsigned int v9 = v12 + 7;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  switch(v9)
  {
    case 1u:
      uint64_t result = (*(uint64_t (**)(void))(v2 + 8))();
      break;
    case 2u:
      uint64_t result = (*(uint64_t (**)(void))(v4 + 8))();
      break;
    case 3u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2[5] - 8) + 8))();
      break;
    case 4u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v6 - 8) + 8))();
      break;
    case 5u:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(v7 - 8) + 8))();
      break;
    case 6u:
      uint64_t result = swift_release();
      break;
    default:
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2[2] - 8) + 8))();
      break;
  }
  return result;
}

void *sub_1C41DAE98(void *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = *(void *)(a3[4] - 8);
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  if (*(void *)(*(void *)(a3[5] - 8) + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(*(void *)(a3[5] - 8) + 64);
  }
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  if (*(void *)(*(void *)(v8 - 8) + 64) > v7) {
    unint64_t v7 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  unint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  if (v10 <= v7) {
    unint64_t v10 = v7;
  }
  if (v10 <= 0x10) {
    uint64_t v11 = 16;
  }
  else {
    uint64_t v11 = v10;
  }
  unsigned int v12 = a2[v11];
  if (v12 >= 7)
  {
    if (v11 <= 3) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        goto LABEL_25;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        goto LABEL_25;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_25;
      case 4:
        int v14 = *(_DWORD *)a2;
LABEL_25:
        int v15 = (v14 | ((v12 - 7) << (8 * v11))) + 7;
        unsigned int v16 = v14 + 7;
        if (v11 >= 4) {
          unsigned int v12 = v16;
        }
        else {
          unsigned int v12 = v15;
        }
        break;
      default:
        break;
    }
  }
  switch(v12)
  {
    case 1u:
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)a1 + v11) = 1;
      break;
    case 2u:
      (*(void (**)(void *))(v6 + 16))(a1);
      *((unsigned char *)a1 + v11) = 2;
      break;
    case 3u:
      (*(void (**)(void *))(*(void *)(a3[5] - 8) + 16))(a1);
      *((unsigned char *)a1 + v11) = 3;
      break;
    case 4u:
      (*(void (**)(void *))(*(void *)(v8 - 8) + 16))(a1);
      *((unsigned char *)a1 + v11) = 4;
      break;
    case 5u:
      (*(void (**)(void *))(*(void *)(v9 - 8) + 16))(a1);
      *((unsigned char *)a1 + v11) = 5;
      break;
    case 6u:
      uint64_t v17 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v17;
      *((unsigned char *)a1 + v11) = 6;
      swift_retain();
      break;
    default:
      (*(void (**)(void *))(*(void *)(a3[2] - 8) + 16))(a1);
      *((unsigned char *)a1 + v11) = 0;
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41DB250(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v28 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v28 + 64);
    uint64_t v27 = *(void *)(v6 - 8);
    if (*(void *)(v27 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v8 = a3[4];
    uint64_t v9 = a3[5];
    uint64_t v26 = *(void *)(v8 - 8);
    if (*(void *)(v26 + 64) > v7) {
      unint64_t v7 = *(void *)(v26 + 64);
    }
    uint64_t v25 = *(void *)(v9 - 8);
    if (*(void *)(v25 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v9 - 8) + 64);
    }
    uint64_t v10 = a3[6];
    uint64_t v11 = a3[7];
    uint64_t v24 = *(void *)(v10 - 8);
    if (*(void *)(v24 + 64) > v7) {
      unint64_t v7 = *(void *)(v24 + 64);
    }
    uint64_t v12 = *(void *)(v11 - 8);
    unint64_t v13 = *(void *)(v12 + 64);
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 7;
    if (v15 >= 7)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_27;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 >= 4) {
            goto LABEL_27;
          }
          goto LABEL_25;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_27;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_25:
          }
            unsigned int v15 = (v18 | (v16 << (8 * v14))) + 7;
          else {
LABEL_27:
          }
            unsigned int v15 = v18 + 7;
          break;
        default:
          break;
      }
    }
    switch(v15)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v27 + 8))(a1, v6);
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v26 + 8))(a1, v8);
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v25 + 8))(a1, v9);
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v24 + 8))(a1, v10);
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v12 + 8))(a1, v11);
        break;
      case 6u:
        swift_release();
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v28 + 8))(a1, v5);
        break;
    }
    unsigned int v19 = a2[v14];
    unsigned int v20 = v19 - 7;
    if (v19 >= 7)
    {
      if (v14 <= 3) {
        uint64_t v21 = v14;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v14 < 4) {
            goto LABEL_46;
          }
          goto LABEL_48;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v14 >= 4) {
            goto LABEL_48;
          }
          goto LABEL_46;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v14 < 4) {
            goto LABEL_46;
          }
          goto LABEL_48;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v14 < 4) {
LABEL_46:
          }
            unsigned int v19 = (v22 | (v20 << (8 * v14))) + 7;
          else {
LABEL_48:
          }
            unsigned int v19 = v22 + 7;
          break;
        default:
          break;
      }
    }
    switch(v19)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 16))(a1, a2, v6);
        a1[v14] = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 16))(a1, a2, v8);
        a1[v14] = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 16))(a1, a2, v9);
        a1[v14] = 3;
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 16))(a1, a2, v10);
        a1[v14] = 4;
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 16))(a1, a2, v11);
        a1[v14] = 5;
        break;
      case 6u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        a1[v14] = 6;
        swift_retain();
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 16))(a1, a2, v5);
        a1[v14] = 0;
        break;
    }
  }
  return a1;
}

_OWORD *sub_1C41DB82C(_OWORD *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = *(void *)(a3[4] - 8);
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  if (*(void *)(*(void *)(a3[5] - 8) + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(*(void *)(a3[5] - 8) + 64);
  }
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  if (*(void *)(*(void *)(v8 - 8) + 64) > v7) {
    unint64_t v7 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  unint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  if (v10 <= v7) {
    unint64_t v10 = v7;
  }
  if (v10 <= 0x10) {
    uint64_t v11 = 16;
  }
  else {
    uint64_t v11 = v10;
  }
  unsigned int v12 = a2[v11];
  if (v12 >= 7)
  {
    if (v11 <= 3) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        goto LABEL_25;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        goto LABEL_25;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_25;
      case 4:
        int v14 = *(_DWORD *)a2;
LABEL_25:
        int v15 = (v14 | ((v12 - 7) << (8 * v11))) + 7;
        unsigned int v16 = v14 + 7;
        if (v11 >= 4) {
          unsigned int v12 = v16;
        }
        else {
          unsigned int v12 = v15;
        }
        break;
      default:
        break;
    }
  }
  switch(v12)
  {
    case 1u:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      char v17 = 1;
      break;
    case 2u:
      (*(void (**)(_OWORD *))(v6 + 32))(a1);
      char v17 = 2;
      break;
    case 3u:
      (*(void (**)(_OWORD *))(*(void *)(a3[5] - 8) + 32))(a1);
      char v17 = 3;
      break;
    case 4u:
      (*(void (**)(_OWORD *))(*(void *)(v8 - 8) + 32))(a1);
      char v17 = 4;
      break;
    case 5u:
      (*(void (**)(_OWORD *))(*(void *)(v9 - 8) + 32))(a1);
      char v17 = 5;
      break;
    case 6u:
      *a1 = *(_OWORD *)a2;
      char v17 = 6;
      break;
    default:
      (*(void (**)(_OWORD *))(*(void *)(a3[2] - 8) + 32))(a1);
      char v17 = 0;
      break;
  }
  *((unsigned char *)a1 + v11) = v17;
  return a1;
}

unsigned __int8 *sub_1C41DBBCC(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v29 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v29 + 64);
    uint64_t v28 = *(void *)(v6 - 8);
    if (*(void *)(v28 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v8 = a3[4];
    uint64_t v9 = a3[5];
    uint64_t v27 = *(void *)(v8 - 8);
    if (*(void *)(v27 + 64) > v7) {
      unint64_t v7 = *(void *)(v27 + 64);
    }
    uint64_t v26 = *(void *)(v9 - 8);
    if (*(void *)(v26 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v9 - 8) + 64);
    }
    uint64_t v10 = a3[6];
    uint64_t v11 = a3[7];
    uint64_t v25 = *(void *)(v10 - 8);
    if (*(void *)(v25 + 64) > v7) {
      unint64_t v7 = *(void *)(v25 + 64);
    }
    uint64_t v12 = *(void *)(v11 - 8);
    unint64_t v13 = *(void *)(v12 + 64);
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 7;
    if (v15 >= 7)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_27;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 >= 4) {
            goto LABEL_27;
          }
          goto LABEL_25;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_27;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_25:
          }
            unsigned int v15 = (v18 | (v16 << (8 * v14))) + 7;
          else {
LABEL_27:
          }
            unsigned int v15 = v18 + 7;
          break;
        default:
          break;
      }
    }
    switch(v15)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v28 + 8))(a1, v6);
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v27 + 8))(a1, v8);
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v26 + 8))(a1, v9);
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v25 + 8))(a1, v10);
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v12 + 8))(a1, v11);
        break;
      case 6u:
        swift_release();
        break;
      default:
        (*(void (**)(unsigned __int8 *, uint64_t))(v29 + 8))(a1, v5);
        break;
    }
    unsigned int v19 = a2[v14];
    unsigned int v20 = v19 - 7;
    if (v19 >= 7)
    {
      if (v14 <= 3) {
        uint64_t v21 = v14;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v14 < 4) {
            goto LABEL_46;
          }
          goto LABEL_48;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v14 >= 4) {
            goto LABEL_48;
          }
          goto LABEL_46;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v14 < 4) {
            goto LABEL_46;
          }
          goto LABEL_48;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v14 < 4) {
LABEL_46:
          }
            unsigned int v19 = (v22 | (v20 << (8 * v14))) + 7;
          else {
LABEL_48:
          }
            unsigned int v19 = v22 + 7;
          break;
        default:
          break;
      }
    }
    switch(v19)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 32))(a1, a2, v6);
        char v23 = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 32))(a1, a2, v8);
        char v23 = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 32))(a1, a2, v9);
        char v23 = 3;
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 32))(a1, a2, v10);
        char v23 = 4;
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 32))(a1, a2, v11);
        char v23 = 5;
        break;
      case 6u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v23 = 6;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 32))(a1, a2, v5);
        char v23 = 0;
        break;
    }
    a1[v14] = v23;
  }
  return a1;
}

uint64_t sub_1C41DC188(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  unint64_t v3 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  uint64_t v5 = *(void *)(a3[4] - 8);
  if (*(void *)(v5 + 64) > v3) {
    unint64_t v3 = *(void *)(v5 + 64);
  }
  uint64_t v6 = *(void *)(a3[5] - 8);
  if (*(void *)(v6 + 64) > v3) {
    unint64_t v3 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a3[6] - 8);
  if (*(void *)(v7 + 64) > v3) {
    unint64_t v3 = *(void *)(v7 + 64);
  }
  uint64_t v8 = *(void *)(a3[7] - 8);
  if (*(void *)(v8 + 64) > v3) {
    unint64_t v3 = *(void *)(v8 + 64);
  }
  uint64_t v9 = 16;
  if (v3 > 0x10) {
    uint64_t v9 = v3;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_32;
  }
  uint64_t v10 = v9 + 1;
  char v11 = 8 * (v9 + 1);
  if ((v9 + 1) <= 3)
  {
    unsigned int v14 = ((a2 + ~(-1 << v11) - 249) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_32;
      }
      goto LABEL_24;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_32;
      }
      goto LABEL_24;
    }
    if (v14 < 2)
    {
LABEL_32:
      unsigned int v16 = *((unsigned __int8 *)a1 + v9);
      if (v16 >= 7) {
        return (v16 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_32;
  }
LABEL_24:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v10 | v15) + 250;
}

void sub_1C41DC358(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  unint64_t v5 = *(void *)(*(void *)(a4[2] - 8) + 64);
  if (*(void *)(*(void *)(a4[3] - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(a4[3] - 8) + 64);
  }
  uint64_t v6 = *(void *)(a4[5] - 8);
  if (*(void *)(*(void *)(a4[4] - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(a4[4] - 8) + 64);
  }
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a4[6] - 8);
  if (*(void *)(v7 + 64) > v5) {
    unint64_t v5 = *(void *)(v7 + 64);
  }
  uint64_t v8 = *(void *)(a4[7] - 8);
  if (*(void *)(v8 + 64) > v5) {
    unint64_t v5 = *(void *)(v8 + 64);
  }
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v9 = v5 + 1;
  if (a3 < 0xFA)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v9)) - 249) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 > 0xF9)
  {
    unsigned int v11 = a2 - 250;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v5 != -1)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        break;
      case 3:
LABEL_44:
        __break(1u);
        JUMPOUT(0x1C41DC5B8);
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_33;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        goto LABEL_32;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_33;
      default:
LABEL_32:
        if (a2) {
LABEL_33:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1C41DC5E0(unsigned __int8 *a1, void *a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2[2] - 8) + 64);
  uint64_t v3 = *(void *)(a2[3] - 8);
  if (*(void *)(v3 + 64) > v2) {
    unint64_t v2 = *(void *)(v3 + 64);
  }
  uint64_t v4 = *(void *)(a2[4] - 8);
  if (*(void *)(v4 + 64) > v2) {
    unint64_t v2 = *(void *)(v4 + 64);
  }
  uint64_t v5 = *(void *)(a2[6] - 8);
  if (*(void *)(*(void *)(a2[5] - 8) + 64) > v2) {
    unint64_t v2 = *(void *)(*(void *)(a2[5] - 8) + 64);
  }
  if (*(void *)(v5 + 64) > v2) {
    unint64_t v2 = *(void *)(v5 + 64);
  }
  uint64_t v6 = *(void *)(a2[7] - 8);
  if (*(void *)(v6 + 64) > v2) {
    unint64_t v2 = *(void *)(v6 + 64);
  }
  uint64_t v7 = 16;
  if (v2 > 0x10) {
    uint64_t v7 = v2;
  }
  uint64_t v8 = a1[v7];
  int v9 = v8 - 7;
  if (v8 >= 7)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a1;
        goto LABEL_22;
      case 2:
        int v11 = *(unsigned __int16 *)a1;
        goto LABEL_22;
      case 3:
        int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_22;
      case 4:
        int v11 = *(_DWORD *)a1;
LABEL_22:
        unsigned int v12 = (v11 | (v9 << (8 * v7))) + 7;
        LODWORD(v8) = v11 + 7;
        if (v7 >= 4) {
          uint64_t v8 = v8;
        }
        else {
          uint64_t v8 = v12;
        }
        break;
      default:
        return v8;
    }
  }
  return v8;
}

void sub_1C41DC730(unsigned char *a1, unsigned int a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  if (a2 > 6)
  {
    unint64_t v14 = *(void *)(*(void *)(a3[2] - 8) + 64);
    uint64_t v15 = *(void *)(a3[3] - 8);
    if (*(void *)(v15 + 64) > v14) {
      unint64_t v14 = *(void *)(v15 + 64);
    }
    uint64_t v16 = *(void *)(a3[5] - 8);
    if (*(void *)(*(void *)(a3[4] - 8) + 64) > v14) {
      unint64_t v14 = *(void *)(*(void *)(a3[4] - 8) + 64);
    }
    if (*(void *)(v16 + 64) > v14) {
      unint64_t v14 = *(void *)(v16 + 64);
    }
    uint64_t v17 = *(void *)(a3[6] - 8);
    if (*(void *)(v17 + 64) > v14) {
      unint64_t v14 = *(void *)(v17 + 64);
    }
    uint64_t v18 = *(void *)(a3[7] - 8);
    if (*(void *)(v18 + 64) > v14) {
      unint64_t v14 = *(void *)(v18 + 64);
    }
    if (v14 <= 0x10) {
      size_t v19 = 16;
    }
    else {
      size_t v19 = v14;
    }
    unsigned int v20 = a2 - 7;
    if (v19 < 4)
    {
      unsigned int v21 = v20 >> (8 * v19);
      int v22 = v20 & ~(-1 << (8 * v19));
      a1[v19] = v21 + 7;
      bzero(a1, v19);
      if (v19 == 3)
      {
        *(_WORD *)a1 = v22;
        a1[2] = BYTE2(v22);
      }
      else if (v19 == 2)
      {
        *(_WORD *)a1 = v22;
      }
      else
      {
        *a1 = v22;
      }
    }
    else
    {
      a1[v19] = 7;
      bzero(a1, v19);
      *(_DWORD *)a1 = v20;
    }
  }
  else
  {
    uint64_t v5 = a3[3];
    uint64_t v6 = *(void *)(a3[4] - 8);
    uint64_t v7 = *(void *)(a3[5] - 8);
    uint64_t v8 = *(void *)(a3[6] - 8);
    unint64_t v9 = *(void *)(*(void *)(a3[7] - 8) + 64);
    unint64_t v10 = *(void *)(v8 + 64);
    unint64_t v11 = *(void *)(v7 + 64);
    unint64_t v12 = *(void *)(v6 + 64);
    unint64_t v13 = *(void *)(v4 + 64);
    if (*(void *)(*(void *)(v5 - 8) + 64) > v13) {
      unint64_t v13 = *(void *)(*(void *)(v5 - 8) + 64);
    }
    if (v12 > v13) {
      unint64_t v13 = v12;
    }
    if (v11 > v13) {
      unint64_t v13 = v11;
    }
    if (v10 > v13) {
      unint64_t v13 = v10;
    }
    if (v9 > v13) {
      unint64_t v13 = v9;
    }
    if (v13 <= 0x10) {
      unint64_t v13 = 16;
    }
    a1[v13] = a2;
  }
}

uint64_t sub_1C41DC974()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_getAssociatedTypeWitness();
        if (v4 <= 0x3F)
        {
          uint64_t result = swift_getAssociatedTypeWitness();
          if (v5 <= 0x3F)
          {
            uint64_t result = swift_getAssociatedTypeWitness();
            if (v6 <= 0x3F)
            {
              swift_initEnumMetadataMultiPayload();
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned char *sub_1C41DCBDC(void *a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(void *)(v5 + 64) > v4) {
    unint64_t v4 = *(void *)(v5 + 64);
  }
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(void *)(v6 + 64) > v4) {
    unint64_t v4 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(void *)(v7 + 64) <= v4) {
    unint64_t v8 = v4;
  }
  else {
    unint64_t v8 = *(void *)(v7 + 64);
  }
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(void *)(v9 + 64) > v8) {
    unint64_t v8 = *(void *)(v9 + 64);
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  if (*(void *)(v11 + 64) <= v8) {
    unint64_t v12 = v8;
  }
  else {
    unint64_t v12 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  size_t v13 = v12 + 1;
  int v14 = *(_DWORD *)(v11 + 80);
  uint64_t v15 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v3 + 80) | *(unsigned char *)(v6 + 80) | *(unsigned char *)(v7 + 80) | *(unsigned char *)(v9 + 80) | v14);
  if (v15 <= 7
    && v13 <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v3 + 80) | *(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80) | v14) & 0x100000) == 0)
  {
    unsigned int v21 = a2[v12];
    unsigned int v22 = v21 - 7;
    char v23 = a2;
    if (v21 < 7)
    {
      size_t v19 = a1;
LABEL_34:
      switch(v21)
      {
        case 0u:
          (*(void (**)(unsigned char *))(v3 + 16))(v19);
          v19[v12] = 0;
          break;
        case 1u:
          (*(void (**)(unsigned char *))(v5 + 16))(v19);
          v19[v12] = 1;
          break;
        case 2u:
          (*(void (**)(unsigned char *))(v6 + 16))(v19);
          v19[v12] = 2;
          break;
        case 3u:
          (*(void (**)(unsigned char *))(v7 + 16))(v19);
          v19[v12] = 3;
          break;
        case 4u:
          (*(void (**)(unsigned char *))(v9 + 16))(v19);
          v19[v12] = 4;
          break;
        case 5u:
          (*(void (**)(unsigned char *))(v11 + 16))(v19);
          v19[v12] = 5;
          break;
        case 6u:
          v19[v12] = 6;
          break;
        default:
          goto LABEL_44;
      }
    }
    else
    {
      if (v12 <= 3) {
        uint64_t v24 = v12;
      }
      else {
        uint64_t v24 = 4;
      }
      size_t v19 = a1;
      switch(v24)
      {
        case 1:
          int v25 = *v23;
          if (v12 >= 4) {
            goto LABEL_43;
          }
          goto LABEL_33;
        case 2:
          int v25 = *(unsigned __int16 *)v23;
          if (v12 >= 4) {
            goto LABEL_43;
          }
          goto LABEL_33;
        case 3:
          int v25 = *(unsigned __int16 *)v23 | (v23[2] << 16);
          if (v12 < 4) {
            goto LABEL_33;
          }
          goto LABEL_43;
        case 4:
          int v25 = *(_DWORD *)v23;
          if (v12 < 4)
          {
LABEL_33:
            unsigned int v21 = (v25 | (v22 << (8 * v12))) + 7;
            goto LABEL_34;
          }
LABEL_43:
          unsigned int v21 = v25 + 7;
          if (v21 <= 6) {
            goto LABEL_34;
          }
LABEL_44:
          memcpy(v19, v23, v13);
          break;
        default:
          goto LABEL_34;
      }
    }
  }
  else
  {
    uint64_t v18 = *(void *)a2;
    *a1 = *(void *)a2;
    size_t v19 = (unsigned char *)(v18 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  return v19;
}

uint64_t sub_1C41DD11C(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = *(void *)(v22 + 64);
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(v4 - 8);
  if (*(void *)(v21 + 64) > v3) {
    unint64_t v3 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v5 - 8);
  if (*(void *)(v20 + 64) > v3) {
    unint64_t v3 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(v6 - 8);
  if (*(void *)(v19 + 64) <= v3) {
    unint64_t v7 = v3;
  }
  else {
    unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v8 - 8);
  if (*(void *)(v18 + 64) > v7) {
    unint64_t v7 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  uint64_t result = swift_getAssociatedTypeWitness();
  unint64_t v10 = *(void *)(*(void *)(result - 8) + 64);
  if (v10 <= v7) {
    unint64_t v10 = v7;
  }
  unsigned int v11 = a1[v10];
  unsigned int v12 = v11 - 7;
  if (v11 >= 7)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        goto LABEL_21;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        goto LABEL_21;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_21;
      case 4:
        int v14 = *(_DWORD *)a1;
LABEL_21:
        int v15 = (v14 | (v12 << (8 * v10))) + 7;
        unsigned int v11 = v14 + 7;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v16 = v22;
  switch(v11)
  {
    case 0u:
      goto LABEL_29;
    case 1u:
      uint64_t v16 = v21;
      uint64_t AssociatedTypeWitness = v4;
      goto LABEL_29;
    case 2u:
      uint64_t v16 = v20;
      uint64_t AssociatedTypeWitness = v5;
      goto LABEL_29;
    case 3u:
      uint64_t v16 = v19;
      uint64_t AssociatedTypeWitness = v6;
      goto LABEL_29;
    case 4u:
      uint64_t v16 = v18;
      uint64_t AssociatedTypeWitness = v8;
      goto LABEL_29;
    case 5u:
      uint64_t v16 = *(void *)(result - 8);
      uint64_t AssociatedTypeWitness = result;
LABEL_29:
      uint64_t v17 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v16 + 8);
      uint64_t result = v17(a1, AssociatedTypeWitness);
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *sub_1C41DD544(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v24 = AssociatedTypeWitness;
  unint64_t v5 = *(void *)(v23 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(v6 - 8);
  if (*(void *)(v22 + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(v7 - 8);
  if (*(void *)(v21 + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v8 - 8);
  if (*(void *)(v20 + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(v9 - 8);
  if (*(void *)(v19 + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  uint64_t v10 = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(v10 - 8) + 64) <= v5) {
    unint64_t v11 = v5;
  }
  else {
    unint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  unsigned int v12 = a2[v11];
  unsigned int v13 = v12 - 7;
  if (v12 >= 7)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a2;
        goto LABEL_21;
      case 2:
        int v15 = *(unsigned __int16 *)a2;
        goto LABEL_21;
      case 3:
        int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_21;
      case 4:
        int v15 = *(_DWORD *)a2;
LABEL_21:
        int v16 = (v15 | (v13 << (8 * v11))) + 7;
        unsigned int v12 = v15 + 7;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  switch(v12)
  {
    case 0u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
      a1[v11] = 0;
      return a1;
    case 1u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v22 + 16))(a1, a2, v6);
      char v17 = 1;
      goto LABEL_32;
    case 2u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v21 + 16))(a1, a2, v7);
      char v17 = 2;
      goto LABEL_32;
    case 3u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v20 + 16))(a1, a2, v8);
      char v17 = 3;
      goto LABEL_32;
    case 4u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v19 + 16))(a1, a2, v9);
      char v17 = 4;
      goto LABEL_32;
    case 5u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      char v17 = 5;
      goto LABEL_32;
    case 6u:
      char v17 = 6;
LABEL_32:
      a1[v11] = v17;
      break;
    default:
      memcpy(a1, a2, v11 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41DD9F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v5 = *(void *)(v29 + 64);
    uint64_t v6 = swift_getAssociatedTypeWitness();
    uint64_t v27 = *(void *)(v6 - 8);
    uint64_t v28 = v6;
    if (*(void *)(v27 + 64) <= v5) {
      unint64_t v7 = v5;
    }
    else {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v8 = swift_getAssociatedTypeWitness();
    uint64_t v26 = *(void *)(v8 - 8);
    if (*(void *)(v26 + 64) <= v7) {
      unint64_t v9 = v7;
    }
    else {
      unint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
    }
    uint64_t v10 = swift_getAssociatedTypeWitness();
    uint64_t v25 = *(void *)(v10 - 8);
    if (*(void *)(v25 + 64) <= v9) {
      unint64_t v11 = v9;
    }
    else {
      unint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
    }
    uint64_t v12 = swift_getAssociatedTypeWitness();
    uint64_t v24 = *(void *)(v12 - 8);
    if (*(void *)(v24 + 64) > v11) {
      unint64_t v11 = *(void *)(*(void *)(v12 - 8) + 64);
    }
    uint64_t v13 = swift_getAssociatedTypeWitness();
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)(v13 - 8);
    if (*(void *)(v15 + 64) <= v11) {
      unint64_t v16 = v11;
    }
    else {
      unint64_t v16 = *(void *)(*(void *)(v13 - 8) + 64);
    }
    uint64_t v17 = v29;
    uint64_t v18 = AssociatedTypeWitness;
    switch((int)v29)
    {
      case 0:
        goto LABEL_22;
      case 1:
        uint64_t v17 = v27;
        uint64_t v18 = v28;
        goto LABEL_22;
      case 2:
        uint64_t v17 = v26;
        uint64_t v18 = v8;
        goto LABEL_22;
      case 3:
        uint64_t v17 = v25;
        uint64_t v18 = v10;
        goto LABEL_22;
      case 4:
        uint64_t v17 = v24;
        uint64_t v18 = v12;
        goto LABEL_22;
      case 5:
        uint64_t v17 = *(void *)(v13 - 8);
        uint64_t v18 = v13;
LABEL_22:
        (*(void (**)(unsigned __int8 *, uint64_t))(v17 + 8))(a1, v18);
        break;
      default:
        break;
    }
    unsigned int v19 = a2[v16];
    unsigned int v20 = v19 - 7;
    if (v19 < 7)
    {
LABEL_34:
      switch(v19)
      {
        case 0u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 16))(a1, a2, AssociatedTypeWitness);
          a1[v16] = 0;
          break;
        case 1u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 16))(a1, a2, v28);
          a1[v16] = 1;
          break;
        case 2u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 16))(a1, a2, v8);
          a1[v16] = 2;
          break;
        case 3u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 16))(a1, a2, v10);
          a1[v16] = 3;
          break;
        case 4u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 16))(a1, a2, v12);
          a1[v16] = 4;
          break;
        case 5u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v15 + 16))(a1, a2, v14);
          a1[v16] = 5;
          break;
        case 6u:
          a1[v16] = 6;
          break;
        default:
          goto LABEL_44;
      }
    }
    else
    {
      if (v16 <= 3) {
        uint64_t v21 = v16;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v16 >= 4) {
            goto LABEL_43;
          }
          goto LABEL_33;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v16 >= 4) {
            goto LABEL_43;
          }
          goto LABEL_33;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v16 < 4) {
            goto LABEL_33;
          }
          goto LABEL_43;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v16 < 4)
          {
LABEL_33:
            unsigned int v19 = (v22 | (v20 << (8 * v16))) + 7;
            goto LABEL_34;
          }
LABEL_43:
          unsigned int v19 = v22 + 7;
          if (v19 <= 6) {
            goto LABEL_34;
          }
LABEL_44:
          memcpy(a1, a2, v16 + 1);
          break;
        default:
          goto LABEL_34;
      }
    }
  }
  return a1;
}

unsigned char *sub_1C41DE01C(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v24 = AssociatedTypeWitness;
  unint64_t v5 = *(void *)(v23 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(v6 - 8);
  if (*(void *)(v22 + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(v7 - 8);
  if (*(void *)(v21 + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v8 - 8);
  if (*(void *)(v20 + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(v9 - 8);
  if (*(void *)(v19 + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  uint64_t v10 = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(v10 - 8) + 64) <= v5) {
    unint64_t v11 = v5;
  }
  else {
    unint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  unsigned int v12 = a2[v11];
  unsigned int v13 = v12 - 7;
  if (v12 >= 7)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a2;
        goto LABEL_21;
      case 2:
        int v15 = *(unsigned __int16 *)a2;
        goto LABEL_21;
      case 3:
        int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_21;
      case 4:
        int v15 = *(_DWORD *)a2;
LABEL_21:
        int v16 = (v15 | (v13 << (8 * v11))) + 7;
        unsigned int v12 = v15 + 7;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  switch(v12)
  {
    case 0u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
      a1[v11] = 0;
      return a1;
    case 1u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v22 + 32))(a1, a2, v6);
      char v17 = 1;
      goto LABEL_32;
    case 2u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v21 + 32))(a1, a2, v7);
      char v17 = 2;
      goto LABEL_32;
    case 3u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v20 + 32))(a1, a2, v8);
      char v17 = 3;
      goto LABEL_32;
    case 4u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v19 + 32))(a1, a2, v9);
      char v17 = 4;
      goto LABEL_32;
    case 5u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      char v17 = 5;
      goto LABEL_32;
    case 6u:
      char v17 = 6;
LABEL_32:
      a1[v11] = v17;
      break;
    default:
      memcpy(a1, a2, v11 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41DE4D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v5 = *(void *)(v29 + 64);
    uint64_t v6 = swift_getAssociatedTypeWitness();
    uint64_t v27 = *(void *)(v6 - 8);
    uint64_t v28 = v6;
    if (*(void *)(v27 + 64) <= v5) {
      unint64_t v7 = v5;
    }
    else {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v8 = swift_getAssociatedTypeWitness();
    uint64_t v26 = *(void *)(v8 - 8);
    if (*(void *)(v26 + 64) <= v7) {
      unint64_t v9 = v7;
    }
    else {
      unint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
    }
    uint64_t v10 = swift_getAssociatedTypeWitness();
    uint64_t v25 = *(void *)(v10 - 8);
    if (*(void *)(v25 + 64) <= v9) {
      unint64_t v11 = v9;
    }
    else {
      unint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
    }
    uint64_t v12 = swift_getAssociatedTypeWitness();
    uint64_t v24 = *(void *)(v12 - 8);
    if (*(void *)(v24 + 64) > v11) {
      unint64_t v11 = *(void *)(*(void *)(v12 - 8) + 64);
    }
    uint64_t v13 = swift_getAssociatedTypeWitness();
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)(v13 - 8);
    if (*(void *)(v15 + 64) <= v11) {
      unint64_t v16 = v11;
    }
    else {
      unint64_t v16 = *(void *)(*(void *)(v13 - 8) + 64);
    }
    uint64_t v17 = v29;
    uint64_t v18 = AssociatedTypeWitness;
    switch((int)v29)
    {
      case 0:
        goto LABEL_22;
      case 1:
        uint64_t v17 = v27;
        uint64_t v18 = v28;
        goto LABEL_22;
      case 2:
        uint64_t v17 = v26;
        uint64_t v18 = v8;
        goto LABEL_22;
      case 3:
        uint64_t v17 = v25;
        uint64_t v18 = v10;
        goto LABEL_22;
      case 4:
        uint64_t v17 = v24;
        uint64_t v18 = v12;
        goto LABEL_22;
      case 5:
        uint64_t v17 = *(void *)(v13 - 8);
        uint64_t v18 = v13;
LABEL_22:
        (*(void (**)(unsigned __int8 *, uint64_t))(v17 + 8))(a1, v18);
        break;
      default:
        break;
    }
    unsigned int v19 = a2[v16];
    unsigned int v20 = v19 - 7;
    if (v19 < 7)
    {
LABEL_34:
      switch(v19)
      {
        case 0u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 32))(a1, a2, AssociatedTypeWitness);
          a1[v16] = 0;
          break;
        case 1u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 32))(a1, a2, v28);
          a1[v16] = 1;
          break;
        case 2u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 32))(a1, a2, v8);
          a1[v16] = 2;
          break;
        case 3u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 32))(a1, a2, v10);
          a1[v16] = 3;
          break;
        case 4u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 32))(a1, a2, v12);
          a1[v16] = 4;
          break;
        case 5u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v15 + 32))(a1, a2, v14);
          a1[v16] = 5;
          break;
        case 6u:
          a1[v16] = 6;
          break;
        default:
          goto LABEL_44;
      }
    }
    else
    {
      if (v16 <= 3) {
        uint64_t v21 = v16;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v16 >= 4) {
            goto LABEL_43;
          }
          goto LABEL_33;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v16 >= 4) {
            goto LABEL_43;
          }
          goto LABEL_33;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v16 < 4) {
            goto LABEL_33;
          }
          goto LABEL_43;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v16 < 4)
          {
LABEL_33:
            unsigned int v19 = (v22 | (v20 << (8 * v16))) + 7;
            goto LABEL_34;
          }
LABEL_43:
          unsigned int v19 = v22 + 7;
          if (v19 <= 6) {
            goto LABEL_34;
          }
LABEL_44:
          memcpy(a1, a2, v16 + 1);
          break;
        default:
          goto LABEL_34;
      }
    }
  }
  return a1;
}

uint64_t sub_1C41DEAF4(unsigned __int16 *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 > v4) {
    unint64_t v4 = v5;
  }
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 > v4) {
    unint64_t v4 = v6;
  }
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 > v4) {
    unint64_t v4 = v7;
  }
  unint64_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 > v4) {
    unint64_t v4 = v8;
  }
  unint64_t v9 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v9 <= v4) {
    unint64_t v10 = v4;
  }
  else {
    unint64_t v10 = v9;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_31;
  }
  unint64_t v11 = v10 + 1;
  char v12 = 8 * (v10 + 1);
  if ((v10 + 1) <= 3)
  {
    unsigned int v15 = ((a2 + ~(-1 << v12) - 248) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_31;
      }
      goto LABEL_23;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_31;
      }
      goto LABEL_23;
    }
    if (v15 < 2)
    {
LABEL_31:
      unsigned int v17 = *((unsigned __int8 *)a1 + v10);
      if (v17 >= 8) {
        return (v17 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_31;
  }
LABEL_23:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v11 | v16) + 249;
}

void sub_1C41DED90(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 > v6) {
    unint64_t v6 = v7;
  }
  unint64_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 > v6) {
    unint64_t v6 = v8;
  }
  unint64_t v9 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v9 > v6) {
    unint64_t v6 = v9;
  }
  unint64_t v10 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v10 > v6) {
    unint64_t v6 = v10;
  }
  unint64_t v11 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v11 <= v6) {
    unint64_t v11 = v6;
  }
  size_t v12 = v11 + 1;
  if (a3 < 0xF9)
  {
    int v13 = 0;
  }
  else if (v12 <= 3)
  {
    unsigned int v16 = ((a3 + ~(-1 << (8 * v12)) - 248) >> (8 * v12)) + 1;
    if (HIWORD(v16))
    {
      int v13 = 4;
    }
    else if (v16 >= 0x100)
    {
      int v13 = 2;
    }
    else
    {
      int v13 = v16 > 1;
    }
  }
  else
  {
    int v13 = 1;
  }
  if (a2 > 0xF8)
  {
    unsigned int v14 = a2 - 249;
    if (v12 < 4)
    {
      int v15 = (v14 >> (8 * v12)) + 1;
      if (v11 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v11 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v12] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v12] = v15;
        break;
      case 3:
LABEL_42:
        __break(1u);
        JUMPOUT(0x1C41DF0A0);
      case 4:
        *(_DWORD *)&a1[v12] = v15;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v13)
    {
      case 1:
        a1[v12] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_31;
      case 2:
        *(_WORD *)&a1[v12] = 0;
        goto LABEL_30;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v12] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_31;
      default:
LABEL_30:
        if (a2) {
LABEL_31:
        }
          a1[v11] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1C41DF0C8(unsigned __int8 *a1)
{
  unint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v3 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 > v2) {
    unint64_t v2 = v3;
  }
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v4 > v2) {
    unint64_t v2 = v4;
  }
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 > v2) {
    unint64_t v2 = v5;
  }
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 > v2) {
    unint64_t v2 = v6;
  }
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v2) {
    unint64_t v7 = v2;
  }
  uint64_t result = a1[v7];
  if (result >= 7)
  {
    if (v7 <= 3) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        if (v7 < 4) {
          goto LABEL_21;
        }
        goto LABEL_23;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        if (v7 >= 4) {
          goto LABEL_23;
        }
        goto LABEL_21;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v7 < 4) {
          goto LABEL_21;
        }
        goto LABEL_23;
      case 4:
        int v10 = *(_DWORD *)a1;
        if (v7 < 4) {
LABEL_21:
        }
          uint64_t result = (v10 | ((result - 7) << (8 * v7))) + 7;
        else {
LABEL_23:
        }
          uint64_t result = (v10 + 7);
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1C41DF2F8(unsigned char *a1, unsigned int a2)
{
  size_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  size_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 > v4) {
    size_t v4 = v5;
  }
  size_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 > v4) {
    size_t v4 = v6;
  }
  size_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 > v4) {
    size_t v4 = v7;
  }
  size_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 > v4) {
    size_t v4 = v8;
  }
  size_t v9 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v9 <= v4) {
    size_t v10 = v4;
  }
  else {
    size_t v10 = v9;
  }
  if (a2 > 6)
  {
    unsigned int v11 = a2 - 7;
    if (v10 < 4)
    {
      unsigned int v12 = v11 >> (8 * v10);
      int v13 = v11 & ~(-1 << (8 * v10));
      a1[v10] = v12 + 7;
      bzero(a1, v10);
      if (v10 == 3)
      {
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
      }
      else if (v10 == 2)
      {
        *(_WORD *)a1 = v13;
      }
      else
      {
        *a1 = v13;
      }
    }
    else
    {
      a1[v10] = 7;
      bzero(a1, v10);
      *(_DWORD *)a1 = v11;
    }
  }
  else
  {
    a1[v10] = a2;
  }
}

uint64_t sub_1C41DF514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 120);
}

uint64_t sub_1C41DF51C()
{
  uint64_t result = type metadata accessor for TaggedValue_7.TaggedEnum();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C41DF5D0(unsigned __int8 *a1, void *a2)
{
  uint64_t v3 = *(void *)(a2[3] - 8);
  if (*(void *)(v3 + 64) <= *(void *)(*(void *)(a2[2] - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(a2[2] - 8) + 64);
  }
  else {
    unint64_t v4 = *(void *)(v3 + 64);
  }
  uint64_t v5 = *(void *)(a2[4] - 8);
  if (*(void *)(v5 + 64) <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = *(void *)(a2[5] - 8);
  if (*(void *)(v7 + 64) > v6) {
    unint64_t v6 = *(void *)(v7 + 64);
  }
  if (*(void *)(*(void *)(a2[6] - 8) + 64) <= v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = *(void *)(*(void *)(a2[6] - 8) + 64);
  }
  uint64_t v9 = a2[7];
  uint64_t v10 = a2[8];
  if (*(void *)(*(void *)(v9 - 8) + 64) <= v8) {
    unint64_t v11 = v8;
  }
  else {
    unint64_t v11 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  unint64_t v12 = *(void *)(*(void *)(v10 - 8) + 64);
  if (v12 <= v11) {
    unint64_t v12 = v11;
  }
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unsigned int v13 = a1[v12];
  if (v13 >= 8)
  {
    if (v12 <= 3) {
      uint64_t v14 = v12;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a1;
        goto LABEL_28;
      case 2:
        int v15 = *(unsigned __int16 *)a1;
        goto LABEL_28;
      case 3:
        int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_28;
      case 4:
        int v15 = *(_DWORD *)a1;
LABEL_28:
        int v16 = (v15 | ((v13 - 8) << (8 * v12))) + 8;
        unsigned int v17 = v15 + 8;
        if (v12 >= 4) {
          unsigned int v13 = v17;
        }
        else {
          unsigned int v13 = v16;
        }
        break;
      default:
        break;
    }
  }
  switch(v13)
  {
    case 1u:
      unsigned int v20 = *(uint64_t (**)(void))(v3 + 8);
      goto LABEL_55;
    case 2u:
      unsigned int v20 = *(uint64_t (**)(void))(v5 + 8);
      goto LABEL_55;
    case 3u:
      unsigned int v20 = *(uint64_t (**)(void))(v7 + 8);
      goto LABEL_55;
    case 4u:
      unsigned int v20 = *(uint64_t (**)(void))(*(void *)(a2[6] - 8) + 8);
      goto LABEL_55;
    case 5u:
      unsigned int v20 = *(uint64_t (**)(void))(*(void *)(v9 - 8) + 8);
      goto LABEL_55;
    case 6u:
      unsigned int v20 = *(uint64_t (**)(void))(*(void *)(v10 - 8) + 8);
LABEL_55:
      uint64_t result = v20();
      break;
    case 7u:
      uint64_t result = swift_release();
      break;
    default:
      uint64_t v18 = *(uint64_t (**)(void))(*(void *)(a2[2] - 8) + 8);
      uint64_t result = v18();
      break;
  }
  return result;
}

void *sub_1C41DF9E8(void *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = *(void *)(a3[4] - 8);
  if (*(void *)(v6 + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(v6 + 64);
  }
  uint64_t v8 = *(void *)(a3[5] - 8);
  if (*(void *)(v8 + 64) > v7) {
    unint64_t v7 = *(void *)(v8 + 64);
  }
  if (*(void *)(*(void *)(a3[6] - 8) + 64) <= v7) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(a3[6] - 8) + 64);
  }
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  if (*(void *)(*(void *)(v10 - 8) + 64) > v9) {
    unint64_t v9 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  unint64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
  if (v12 <= v9) {
    unint64_t v12 = v9;
  }
  if (v12 <= 0x10) {
    uint64_t v13 = 16;
  }
  else {
    uint64_t v13 = v12;
  }
  unsigned int v14 = a2[v13];
  if (v14 >= 8)
  {
    if (v13 <= 3) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        goto LABEL_28;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        goto LABEL_28;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_28;
      case 4:
        int v16 = *(_DWORD *)a2;
LABEL_28:
        int v17 = (v16 | ((v14 - 8) << (8 * v13))) + 8;
        unsigned int v18 = v16 + 8;
        if (v13 >= 4) {
          unsigned int v14 = v18;
        }
        else {
          unsigned int v14 = v17;
        }
        break;
      default:
        break;
    }
  }
  switch(v14)
  {
    case 1u:
      (*(void (**)(void *))(v4 + 16))(a1);
      char v19 = 1;
      goto LABEL_40;
    case 2u:
      (*(void (**)(void *))(v6 + 16))(a1);
      char v19 = 2;
      goto LABEL_40;
    case 3u:
      (*(void (**)(void *))(v8 + 16))(a1);
      char v19 = 3;
      goto LABEL_40;
    case 4u:
      (*(void (**)(void *))(*(void *)(a3[6] - 8) + 16))(a1);
      char v19 = 4;
      goto LABEL_40;
    case 5u:
      (*(void (**)(void *))(*(void *)(v10 - 8) + 16))(a1);
      char v19 = 5;
      goto LABEL_40;
    case 6u:
      (*(void (**)(void *))(*(void *)(v11 - 8) + 16))(a1);
      char v19 = 6;
LABEL_40:
      *((unsigned char *)a1 + v13) = v19;
      break;
    case 7u:
      uint64_t v20 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v20;
      *((unsigned char *)a1 + v13) = 7;
      swift_retain();
      break;
    default:
      (*(void (**)(void *))(*(void *)(a3[2] - 8) + 16))(a1);
      *((unsigned char *)a1 + v13) = 0;
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41DFE0C(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v32 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v32 + 64);
    uint64_t v31 = *(void *)(v6 - 8);
    if (*(void *)(v31 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v8 = a3[4];
    uint64_t v9 = a3[5];
    uint64_t v30 = *(void *)(v8 - 8);
    if (*(void *)(v30 + 64) > v7) {
      unint64_t v7 = *(void *)(v30 + 64);
    }
    uint64_t v29 = *(void *)(v9 - 8);
    uint64_t v10 = a3[6];
    uint64_t v11 = a3[7];
    if (*(void *)(v29 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v9 - 8) + 64);
    }
    uint64_t v28 = *(void *)(a3[6] - 8);
    if (*(void *)(v28 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(a3[6] - 8) + 64);
    }
    uint64_t v27 = *(void *)(v11 - 8);
    if (*(void *)(v27 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v11 - 8) + 64);
    }
    uint64_t v12 = a3[8];
    uint64_t v26 = *(void *)(v12 - 8);
    unint64_t v13 = *(void *)(v26 + 64);
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 8;
    if (v15 >= 8)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_29;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_29;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_29;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_25:
          }
            unsigned int v15 = (v18 | (v16 << (8 * v14))) + 8;
          else {
LABEL_29:
          }
            unsigned int v15 = v18 + 8;
          break;
        default:
          break;
      }
    }
    switch(v15)
    {
      case 1u:
        char v19 = *(void (**)(void))(v31 + 8);
        goto LABEL_39;
      case 2u:
        char v19 = *(void (**)(void))(v30 + 8);
        goto LABEL_39;
      case 3u:
        char v19 = *(void (**)(void))(v29 + 8);
        goto LABEL_39;
      case 4u:
        char v19 = *(void (**)(void))(v28 + 8);
        goto LABEL_39;
      case 5u:
        char v19 = *(void (**)(void))(v27 + 8);
        goto LABEL_39;
      case 6u:
        char v19 = *(void (**)(void))(v26 + 8);
        goto LABEL_39;
      case 7u:
        swift_release();
        goto LABEL_40;
      default:
        char v19 = *(void (**)(void))(v32 + 8);
LABEL_39:
        v19();
LABEL_40:
        unsigned int v20 = a2[v14];
        unsigned int v21 = v20 - 8;
        if (v20 >= 8)
        {
          if (v14 <= 3) {
            uint64_t v22 = v14;
          }
          else {
            uint64_t v22 = 4;
          }
          switch(v22)
          {
            case 1:
              int v23 = *a2;
              if (v14 < 4) {
                goto LABEL_48;
              }
              goto LABEL_52;
            case 2:
              int v23 = *(unsigned __int16 *)a2;
              if (v14 < 4) {
                goto LABEL_48;
              }
              goto LABEL_52;
            case 3:
              int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              if (v14 < 4) {
                goto LABEL_48;
              }
              goto LABEL_52;
            case 4:
              int v23 = *(_DWORD *)a2;
              if (v14 < 4) {
LABEL_48:
              }
                unsigned int v20 = (v23 | (v21 << (8 * v14))) + 8;
              else {
LABEL_52:
              }
                unsigned int v20 = v23 + 8;
              break;
            default:
              break;
          }
        }
        switch(v20)
        {
          case 1u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v31 + 16))(a1, a2, v6);
            char v24 = 1;
            goto LABEL_62;
          case 2u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v30 + 16))(a1, a2, v8);
            char v24 = 2;
            goto LABEL_62;
          case 3u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 16))(a1, a2, v9);
            char v24 = 3;
            goto LABEL_62;
          case 4u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 16))(a1, a2, v10);
            char v24 = 4;
            goto LABEL_62;
          case 5u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 16))(a1, a2, v11);
            char v24 = 5;
            goto LABEL_62;
          case 6u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 16))(a1, a2, v12);
            char v24 = 6;
LABEL_62:
            a1[v14] = v24;
            break;
          case 7u:
            *(void *)a1 = *(void *)a2;
            *((void *)a1 + 1) = *((void *)a2 + 1);
            a1[v14] = 7;
            swift_retain();
            break;
          default:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v32 + 16))(a1, a2, v5);
            a1[v14] = 0;
            break;
        }
        break;
    }
  }
  return a1;
}

_OWORD *sub_1C41E0434(_OWORD *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = *(void *)(a3[4] - 8);
  if (*(void *)(v6 + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(v6 + 64);
  }
  uint64_t v8 = *(void *)(a3[5] - 8);
  if (*(void *)(v8 + 64) > v7) {
    unint64_t v7 = *(void *)(v8 + 64);
  }
  if (*(void *)(*(void *)(a3[6] - 8) + 64) <= v7) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(a3[6] - 8) + 64);
  }
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  if (*(void *)(*(void *)(v10 - 8) + 64) > v9) {
    unint64_t v9 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  unint64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
  if (v12 <= v9) {
    unint64_t v12 = v9;
  }
  if (v12 <= 0x10) {
    uint64_t v13 = 16;
  }
  else {
    uint64_t v13 = v12;
  }
  unsigned int v14 = a2[v13];
  if (v14 >= 8)
  {
    if (v13 <= 3) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        goto LABEL_28;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        goto LABEL_28;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_28;
      case 4:
        int v16 = *(_DWORD *)a2;
LABEL_28:
        int v17 = (v16 | ((v14 - 8) << (8 * v13))) + 8;
        unsigned int v18 = v16 + 8;
        if (v13 >= 4) {
          unsigned int v14 = v18;
        }
        else {
          unsigned int v14 = v17;
        }
        break;
      default:
        break;
    }
  }
  switch(v14)
  {
    case 1u:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      char v19 = 1;
      break;
    case 2u:
      (*(void (**)(_OWORD *))(v6 + 32))(a1);
      char v19 = 2;
      break;
    case 3u:
      (*(void (**)(_OWORD *))(v8 + 32))(a1);
      char v19 = 3;
      break;
    case 4u:
      (*(void (**)(_OWORD *))(*(void *)(a3[6] - 8) + 32))(a1);
      char v19 = 4;
      break;
    case 5u:
      (*(void (**)(_OWORD *))(*(void *)(v10 - 8) + 32))(a1);
      char v19 = 5;
      break;
    case 6u:
      (*(void (**)(_OWORD *))(*(void *)(v11 - 8) + 32))(a1);
      char v19 = 6;
      break;
    case 7u:
      *a1 = *(_OWORD *)a2;
      char v19 = 7;
      break;
    default:
      (*(void (**)(_OWORD *))(*(void *)(a3[2] - 8) + 32))(a1);
      char v19 = 0;
      break;
  }
  *((unsigned char *)a1 + v13) = v19;
  return a1;
}

unsigned __int8 *sub_1C41E0850(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v32 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v32 + 64);
    uint64_t v31 = *(void *)(v6 - 8);
    if (*(void *)(v31 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v8 = a3[4];
    uint64_t v9 = a3[5];
    uint64_t v30 = *(void *)(v8 - 8);
    if (*(void *)(v30 + 64) > v7) {
      unint64_t v7 = *(void *)(v30 + 64);
    }
    uint64_t v29 = *(void *)(v9 - 8);
    uint64_t v10 = a3[6];
    uint64_t v11 = a3[7];
    if (*(void *)(v29 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v9 - 8) + 64);
    }
    uint64_t v28 = *(void *)(a3[6] - 8);
    if (*(void *)(v28 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(a3[6] - 8) + 64);
    }
    uint64_t v27 = *(void *)(v11 - 8);
    if (*(void *)(v27 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v11 - 8) + 64);
    }
    uint64_t v12 = a3[8];
    uint64_t v26 = *(void *)(v12 - 8);
    unint64_t v13 = *(void *)(v26 + 64);
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 8;
    if (v15 >= 8)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_29;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_29;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_29;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_25:
          }
            unsigned int v15 = (v18 | (v16 << (8 * v14))) + 8;
          else {
LABEL_29:
          }
            unsigned int v15 = v18 + 8;
          break;
        default:
          break;
      }
    }
    switch(v15)
    {
      case 1u:
        char v19 = *(void (**)(void))(v31 + 8);
        goto LABEL_39;
      case 2u:
        char v19 = *(void (**)(void))(v30 + 8);
        goto LABEL_39;
      case 3u:
        char v19 = *(void (**)(void))(v29 + 8);
        goto LABEL_39;
      case 4u:
        char v19 = *(void (**)(void))(v28 + 8);
        goto LABEL_39;
      case 5u:
        char v19 = *(void (**)(void))(v27 + 8);
        goto LABEL_39;
      case 6u:
        char v19 = *(void (**)(void))(v26 + 8);
        goto LABEL_39;
      case 7u:
        swift_release();
        goto LABEL_40;
      default:
        char v19 = *(void (**)(void))(v32 + 8);
LABEL_39:
        v19();
LABEL_40:
        unsigned int v20 = a2[v14];
        unsigned int v21 = v20 - 8;
        if (v20 >= 8)
        {
          if (v14 <= 3) {
            uint64_t v22 = v14;
          }
          else {
            uint64_t v22 = 4;
          }
          switch(v22)
          {
            case 1:
              int v23 = *a2;
              if (v14 < 4) {
                goto LABEL_48;
              }
              goto LABEL_52;
            case 2:
              int v23 = *(unsigned __int16 *)a2;
              if (v14 < 4) {
                goto LABEL_48;
              }
              goto LABEL_52;
            case 3:
              int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              if (v14 < 4) {
                goto LABEL_48;
              }
              goto LABEL_52;
            case 4:
              int v23 = *(_DWORD *)a2;
              if (v14 < 4) {
LABEL_48:
              }
                unsigned int v20 = (v23 | (v21 << (8 * v14))) + 8;
              else {
LABEL_52:
              }
                unsigned int v20 = v23 + 8;
              break;
            default:
              break;
          }
        }
        switch(v20)
        {
          case 1u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v31 + 32))(a1, a2, v6);
            char v24 = 1;
            break;
          case 2u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v30 + 32))(a1, a2, v8);
            char v24 = 2;
            break;
          case 3u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 32))(a1, a2, v9);
            char v24 = 3;
            break;
          case 4u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 32))(a1, a2, v10);
            char v24 = 4;
            break;
          case 5u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 32))(a1, a2, v11);
            char v24 = 5;
            break;
          case 6u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 32))(a1, a2, v12);
            char v24 = 6;
            break;
          case 7u:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            char v24 = 7;
            break;
          default:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v32 + 32))(a1, a2, v5);
            char v24 = 0;
            break;
        }
        a1[v14] = v24;
        break;
    }
  }
  return a1;
}

uint64_t sub_1C41E0E68(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  unint64_t v3 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v4 = *(void *)(a3[4] - 8);
  if (*(void *)(*(void *)(a3[3] - 8) + 64) > v3) {
    unint64_t v3 = *(void *)(*(void *)(a3[3] - 8) + 64);
  }
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  uint64_t v5 = *(void *)(a3[5] - 8);
  if (*(void *)(v5 + 64) > v3) {
    unint64_t v3 = *(void *)(v5 + 64);
  }
  uint64_t v6 = *(void *)(a3[6] - 8);
  if (*(void *)(v6 + 64) > v3) {
    unint64_t v3 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a3[7] - 8);
  if (*(void *)(v7 + 64) > v3) {
    unint64_t v3 = *(void *)(v7 + 64);
  }
  uint64_t v8 = *(void *)(a3[8] - 8);
  if (*(void *)(v8 + 64) > v3) {
    unint64_t v3 = *(void *)(v8 + 64);
  }
  uint64_t v9 = 16;
  if (v3 > 0x10) {
    uint64_t v9 = v3;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_34;
  }
  uint64_t v10 = v9 + 1;
  char v11 = 8 * (v9 + 1);
  if ((v9 + 1) <= 3)
  {
    unsigned int v14 = ((a2 + ~(-1 << v11) - 248) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_34;
      }
      goto LABEL_26;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_34;
      }
      goto LABEL_26;
    }
    if (v14 < 2)
    {
LABEL_34:
      unsigned int v16 = *((unsigned __int8 *)a1 + v9);
      if (v16 >= 8) {
        return (v16 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_34;
  }
LABEL_26:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v10 | v15) + 249;
}

void sub_1C41E1058(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  unint64_t v5 = *(void *)(*(void *)(a4[2] - 8) + 64);
  if (*(void *)(*(void *)(a4[3] - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(a4[3] - 8) + 64);
  }
  uint64_t v6 = *(void *)(a4[4] - 8);
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a4[6] - 8);
  if (*(void *)(*(void *)(a4[5] - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(a4[5] - 8) + 64);
  }
  if (*(void *)(v7 + 64) > v5) {
    unint64_t v5 = *(void *)(v7 + 64);
  }
  uint64_t v8 = *(void *)(a4[7] - 8);
  if (*(void *)(v8 + 64) > v5) {
    unint64_t v5 = *(void *)(v8 + 64);
  }
  uint64_t v9 = *(void *)(a4[8] - 8);
  if (*(void *)(v9 + 64) > v5) {
    unint64_t v5 = *(void *)(v9 + 64);
  }
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v10 = v5 + 1;
  if (a3 < 0xF9)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 + ~(-1 << (8 * v10)) - 248) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (a2 > 0xF8)
  {
    unsigned int v12 = a2 - 249;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v5 != -1)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v10] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v13;
        break;
      case 3:
LABEL_46:
        __break(1u);
        JUMPOUT(0x1C41E12D8);
      case 4:
        *(_DWORD *)&a1[v10] = v13;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v11)
    {
      case 1:
        a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_35;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        goto LABEL_34;
      case 3:
        goto LABEL_46;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_35;
      default:
LABEL_34:
        if (a2) {
LABEL_35:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t type metadata accessor for TaggedValue_7()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C41E1318()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          uint64_t result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            uint64_t result = swift_checkMetadataState();
            if (v6 <= 0x3F)
            {
              uint64_t result = swift_checkMetadataState();
              if (v7 <= 0x3F)
              {
                swift_initEnumMetadataMultiPayload();
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void *sub_1C41E152C(void *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  uint64_t v5 = *(void *)(a3[3] - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    unint64_t v6 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = *(void *)(a3[4] - 8);
  if (*(void *)(v7 + 64) <= v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = *(void *)(v7 + 64);
  }
  uint64_t v9 = *(void *)(a3[5] - 8);
  if (*(void *)(v9 + 64) <= v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = *(void *)(v9 + 64);
  }
  uint64_t v11 = *(void *)(a3[6] - 8);
  if (*(void *)(v11 + 64) <= v10) {
    unint64_t v12 = v10;
  }
  else {
    unint64_t v12 = *(void *)(v11 + 64);
  }
  uint64_t v13 = a3[7];
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(void *)(v14 + 64) > v12) {
    unint64_t v12 = *(void *)(*(void *)(v13 - 8) + 64);
  }
  uint64_t v15 = *(void *)(a3[8] - 8);
  unint64_t v16 = *(void *)(v15 + 64);
  if (v16 <= v12) {
    unint64_t v16 = v12;
  }
  if (v16 <= 0x10) {
    uint64_t v17 = 16;
  }
  else {
    uint64_t v17 = v16;
  }
  int v18 = *(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80) | *(_DWORD *)(v11 + 80) | *(_DWORD *)(v14 + 80) | *(_DWORD *)(v15 + 80);
  if ((unint64_t)(v17 + 1) <= 0x18 && (v18 & 0x1000F8) == 0)
  {
    unsigned int v22 = a2[v17];
    if (v22 >= 8)
    {
      if (v17 <= 3) {
        uint64_t v23 = v17;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *a2;
          if (v17 < 4) {
            goto LABEL_37;
          }
          goto LABEL_39;
        case 2:
          int v24 = *(unsigned __int16 *)a2;
          if (v17 >= 4) {
            goto LABEL_39;
          }
          goto LABEL_37;
        case 3:
          int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v17 < 4) {
            goto LABEL_37;
          }
          goto LABEL_39;
        case 4:
          int v24 = *(_DWORD *)a2;
          if (v17 < 4) {
LABEL_37:
          }
            unsigned int v22 = (v24 | ((v22 - 8) << (8 * v17))) + 8;
          else {
LABEL_39:
          }
            unsigned int v22 = v24 + 8;
          break;
        default:
          break;
      }
    }
    switch(v22)
    {
      case 1u:
        (*(void (**)(void *))(v5 + 16))(a1);
        *((unsigned char *)a1 + v17) = 1;
        break;
      case 2u:
        (*(void (**)(void *))(v7 + 16))(a1);
        *((unsigned char *)a1 + v17) = 2;
        break;
      case 3u:
        (*(void (**)(void *))(v9 + 16))(a1);
        *((unsigned char *)a1 + v17) = 3;
        break;
      case 4u:
        (*(void (**)(void *))(v11 + 16))(a1);
        *((unsigned char *)a1 + v17) = 4;
        break;
      case 5u:
        (*(void (**)(void *))(v14 + 16))(a1);
        *((unsigned char *)a1 + v17) = 5;
        break;
      case 6u:
        (*(void (**)(void *))(v15 + 16))(a1);
        *((unsigned char *)a1 + v17) = 6;
        break;
      case 7u:
        uint64_t v25 = *((void *)a2 + 1);
        *a1 = *(void *)a2;
        a1[1] = v25;
        *((unsigned char *)a1 + v17) = 7;
        goto LABEL_25;
      default:
        (*(void (**)(void *))(v4 + 16))(a1);
        *((unsigned char *)a1 + v17) = 0;
        break;
    }
  }
  else
  {
    uint64_t v20 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v20 + (((v18 & 0xF8 | 7u) + 16) & ~(unint64_t)(v18 & 0xF8 | 7u)));
LABEL_25:
    swift_retain();
  }
  return a1;
}

uint64_t sub_1C41E19E8(unsigned __int8 *a1, void *a2)
{
  uint64_t v3 = *(void *)(a2[3] - 8);
  if (*(void *)(v3 + 64) <= *(void *)(*(void *)(a2[2] - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(a2[2] - 8) + 64);
  }
  else {
    unint64_t v4 = *(void *)(v3 + 64);
  }
  uint64_t v5 = *(void *)(a2[4] - 8);
  if (*(void *)(v5 + 64) <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = *(void *)(a2[5] - 8);
  if (*(void *)(v7 + 64) > v6) {
    unint64_t v6 = *(void *)(v7 + 64);
  }
  if (*(void *)(*(void *)(a2[6] - 8) + 64) <= v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = *(void *)(*(void *)(a2[6] - 8) + 64);
  }
  uint64_t v9 = a2[7];
  uint64_t v10 = a2[8];
  if (*(void *)(*(void *)(v9 - 8) + 64) <= v8) {
    unint64_t v11 = v8;
  }
  else {
    unint64_t v11 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  unint64_t v12 = *(void *)(*(void *)(v10 - 8) + 64);
  if (v12 <= v11) {
    unint64_t v12 = v11;
  }
  if (v12 <= 0x10) {
    unint64_t v12 = 16;
  }
  unsigned int v13 = a1[v12];
  if (v13 >= 8)
  {
    if (v12 <= 3) {
      uint64_t v14 = v12;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a1;
        goto LABEL_28;
      case 2:
        int v15 = *(unsigned __int16 *)a1;
        goto LABEL_28;
      case 3:
        int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_28;
      case 4:
        int v15 = *(_DWORD *)a1;
LABEL_28:
        int v16 = (v15 | ((v13 - 8) << (8 * v12))) + 8;
        unsigned int v17 = v15 + 8;
        if (v12 >= 4) {
          unsigned int v13 = v17;
        }
        else {
          unsigned int v13 = v16;
        }
        break;
      default:
        break;
    }
  }
  switch(v13)
  {
    case 1u:
      uint64_t v20 = *(uint64_t (**)(void))(v3 + 8);
      goto LABEL_55;
    case 2u:
      uint64_t v20 = *(uint64_t (**)(void))(v5 + 8);
      goto LABEL_55;
    case 3u:
      uint64_t v20 = *(uint64_t (**)(void))(v7 + 8);
      goto LABEL_55;
    case 4u:
      uint64_t v20 = *(uint64_t (**)(void))(*(void *)(a2[6] - 8) + 8);
      goto LABEL_55;
    case 5u:
      uint64_t v20 = *(uint64_t (**)(void))(*(void *)(v9 - 8) + 8);
      goto LABEL_55;
    case 6u:
      uint64_t v20 = *(uint64_t (**)(void))(*(void *)(v10 - 8) + 8);
LABEL_55:
      uint64_t result = v20();
      break;
    case 7u:
      uint64_t result = swift_release();
      break;
    default:
      int v18 = *(uint64_t (**)(void))(*(void *)(a2[2] - 8) + 8);
      uint64_t result = v18();
      break;
  }
  return result;
}

void *sub_1C41E1E00(void *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = *(void *)(a3[4] - 8);
  if (*(void *)(v6 + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(v6 + 64);
  }
  uint64_t v8 = *(void *)(a3[5] - 8);
  if (*(void *)(v8 + 64) > v7) {
    unint64_t v7 = *(void *)(v8 + 64);
  }
  if (*(void *)(*(void *)(a3[6] - 8) + 64) <= v7) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(a3[6] - 8) + 64);
  }
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  if (*(void *)(*(void *)(v10 - 8) + 64) > v9) {
    unint64_t v9 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  unint64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
  if (v12 <= v9) {
    unint64_t v12 = v9;
  }
  if (v12 <= 0x10) {
    uint64_t v13 = 16;
  }
  else {
    uint64_t v13 = v12;
  }
  unsigned int v14 = a2[v13];
  if (v14 >= 8)
  {
    if (v13 <= 3) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        goto LABEL_28;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        goto LABEL_28;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_28;
      case 4:
        int v16 = *(_DWORD *)a2;
LABEL_28:
        int v17 = (v16 | ((v14 - 8) << (8 * v13))) + 8;
        unsigned int v18 = v16 + 8;
        if (v13 >= 4) {
          unsigned int v14 = v18;
        }
        else {
          unsigned int v14 = v17;
        }
        break;
      default:
        break;
    }
  }
  switch(v14)
  {
    case 1u:
      (*(void (**)(void *))(v4 + 16))(a1);
      char v19 = 1;
      goto LABEL_40;
    case 2u:
      (*(void (**)(void *))(v6 + 16))(a1);
      char v19 = 2;
      goto LABEL_40;
    case 3u:
      (*(void (**)(void *))(v8 + 16))(a1);
      char v19 = 3;
      goto LABEL_40;
    case 4u:
      (*(void (**)(void *))(*(void *)(a3[6] - 8) + 16))(a1);
      char v19 = 4;
      goto LABEL_40;
    case 5u:
      (*(void (**)(void *))(*(void *)(v10 - 8) + 16))(a1);
      char v19 = 5;
      goto LABEL_40;
    case 6u:
      (*(void (**)(void *))(*(void *)(v11 - 8) + 16))(a1);
      char v19 = 6;
LABEL_40:
      *((unsigned char *)a1 + v13) = v19;
      break;
    case 7u:
      uint64_t v20 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v20;
      *((unsigned char *)a1 + v13) = 7;
      swift_retain();
      break;
    default:
      (*(void (**)(void *))(*(void *)(a3[2] - 8) + 16))(a1);
      *((unsigned char *)a1 + v13) = 0;
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41E2224(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v32 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v32 + 64);
    uint64_t v31 = *(void *)(v6 - 8);
    if (*(void *)(v31 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v8 = a3[4];
    uint64_t v9 = a3[5];
    uint64_t v30 = *(void *)(v8 - 8);
    if (*(void *)(v30 + 64) > v7) {
      unint64_t v7 = *(void *)(v30 + 64);
    }
    uint64_t v29 = *(void *)(v9 - 8);
    uint64_t v10 = a3[6];
    uint64_t v11 = a3[7];
    if (*(void *)(v29 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v9 - 8) + 64);
    }
    uint64_t v28 = *(void *)(a3[6] - 8);
    if (*(void *)(v28 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(a3[6] - 8) + 64);
    }
    uint64_t v27 = *(void *)(v11 - 8);
    if (*(void *)(v27 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v11 - 8) + 64);
    }
    uint64_t v12 = a3[8];
    uint64_t v26 = *(void *)(v12 - 8);
    unint64_t v13 = *(void *)(v26 + 64);
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 8;
    if (v15 >= 8)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_29;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_29;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_29;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_25:
          }
            unsigned int v15 = (v18 | (v16 << (8 * v14))) + 8;
          else {
LABEL_29:
          }
            unsigned int v15 = v18 + 8;
          break;
        default:
          break;
      }
    }
    switch(v15)
    {
      case 1u:
        char v19 = *(void (**)(void))(v31 + 8);
        goto LABEL_39;
      case 2u:
        char v19 = *(void (**)(void))(v30 + 8);
        goto LABEL_39;
      case 3u:
        char v19 = *(void (**)(void))(v29 + 8);
        goto LABEL_39;
      case 4u:
        char v19 = *(void (**)(void))(v28 + 8);
        goto LABEL_39;
      case 5u:
        char v19 = *(void (**)(void))(v27 + 8);
        goto LABEL_39;
      case 6u:
        char v19 = *(void (**)(void))(v26 + 8);
        goto LABEL_39;
      case 7u:
        swift_release();
        goto LABEL_40;
      default:
        char v19 = *(void (**)(void))(v32 + 8);
LABEL_39:
        v19();
LABEL_40:
        unsigned int v20 = a2[v14];
        unsigned int v21 = v20 - 8;
        if (v20 >= 8)
        {
          if (v14 <= 3) {
            uint64_t v22 = v14;
          }
          else {
            uint64_t v22 = 4;
          }
          switch(v22)
          {
            case 1:
              int v23 = *a2;
              if (v14 < 4) {
                goto LABEL_48;
              }
              goto LABEL_52;
            case 2:
              int v23 = *(unsigned __int16 *)a2;
              if (v14 < 4) {
                goto LABEL_48;
              }
              goto LABEL_52;
            case 3:
              int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              if (v14 < 4) {
                goto LABEL_48;
              }
              goto LABEL_52;
            case 4:
              int v23 = *(_DWORD *)a2;
              if (v14 < 4) {
LABEL_48:
              }
                unsigned int v20 = (v23 | (v21 << (8 * v14))) + 8;
              else {
LABEL_52:
              }
                unsigned int v20 = v23 + 8;
              break;
            default:
              break;
          }
        }
        switch(v20)
        {
          case 1u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v31 + 16))(a1, a2, v6);
            char v24 = 1;
            goto LABEL_62;
          case 2u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v30 + 16))(a1, a2, v8);
            char v24 = 2;
            goto LABEL_62;
          case 3u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 16))(a1, a2, v9);
            char v24 = 3;
            goto LABEL_62;
          case 4u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 16))(a1, a2, v10);
            char v24 = 4;
            goto LABEL_62;
          case 5u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 16))(a1, a2, v11);
            char v24 = 5;
            goto LABEL_62;
          case 6u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 16))(a1, a2, v12);
            char v24 = 6;
LABEL_62:
            a1[v14] = v24;
            break;
          case 7u:
            *(void *)a1 = *(void *)a2;
            *((void *)a1 + 1) = *((void *)a2 + 1);
            a1[v14] = 7;
            swift_retain();
            break;
          default:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v32 + 16))(a1, a2, v5);
            a1[v14] = 0;
            break;
        }
        break;
    }
  }
  return a1;
}

_OWORD *sub_1C41E284C(_OWORD *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = *(void *)(a3[4] - 8);
  if (*(void *)(v6 + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(v6 + 64);
  }
  uint64_t v8 = *(void *)(a3[5] - 8);
  if (*(void *)(v8 + 64) > v7) {
    unint64_t v7 = *(void *)(v8 + 64);
  }
  if (*(void *)(*(void *)(a3[6] - 8) + 64) <= v7) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(a3[6] - 8) + 64);
  }
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  if (*(void *)(*(void *)(v10 - 8) + 64) > v9) {
    unint64_t v9 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  unint64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
  if (v12 <= v9) {
    unint64_t v12 = v9;
  }
  if (v12 <= 0x10) {
    uint64_t v13 = 16;
  }
  else {
    uint64_t v13 = v12;
  }
  unsigned int v14 = a2[v13];
  if (v14 >= 8)
  {
    if (v13 <= 3) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        goto LABEL_28;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        goto LABEL_28;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_28;
      case 4:
        int v16 = *(_DWORD *)a2;
LABEL_28:
        int v17 = (v16 | ((v14 - 8) << (8 * v13))) + 8;
        unsigned int v18 = v16 + 8;
        if (v13 >= 4) {
          unsigned int v14 = v18;
        }
        else {
          unsigned int v14 = v17;
        }
        break;
      default:
        break;
    }
  }
  switch(v14)
  {
    case 1u:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      char v19 = 1;
      break;
    case 2u:
      (*(void (**)(_OWORD *))(v6 + 32))(a1);
      char v19 = 2;
      break;
    case 3u:
      (*(void (**)(_OWORD *))(v8 + 32))(a1);
      char v19 = 3;
      break;
    case 4u:
      (*(void (**)(_OWORD *))(*(void *)(a3[6] - 8) + 32))(a1);
      char v19 = 4;
      break;
    case 5u:
      (*(void (**)(_OWORD *))(*(void *)(v10 - 8) + 32))(a1);
      char v19 = 5;
      break;
    case 6u:
      (*(void (**)(_OWORD *))(*(void *)(v11 - 8) + 32))(a1);
      char v19 = 6;
      break;
    case 7u:
      *a1 = *(_OWORD *)a2;
      char v19 = 7;
      break;
    default:
      (*(void (**)(_OWORD *))(*(void *)(a3[2] - 8) + 32))(a1);
      char v19 = 0;
      break;
  }
  *((unsigned char *)a1 + v13) = v19;
  return a1;
}

unsigned __int8 *sub_1C41E2C68(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[2];
    uint64_t v6 = a3[3];
    uint64_t v32 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v32 + 64);
    uint64_t v31 = *(void *)(v6 - 8);
    if (*(void *)(v31 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v8 = a3[4];
    uint64_t v9 = a3[5];
    uint64_t v30 = *(void *)(v8 - 8);
    if (*(void *)(v30 + 64) > v7) {
      unint64_t v7 = *(void *)(v30 + 64);
    }
    uint64_t v29 = *(void *)(v9 - 8);
    uint64_t v10 = a3[6];
    uint64_t v11 = a3[7];
    if (*(void *)(v29 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v9 - 8) + 64);
    }
    uint64_t v28 = *(void *)(a3[6] - 8);
    if (*(void *)(v28 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(a3[6] - 8) + 64);
    }
    uint64_t v27 = *(void *)(v11 - 8);
    if (*(void *)(v27 + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v11 - 8) + 64);
    }
    uint64_t v12 = a3[8];
    uint64_t v26 = *(void *)(v12 - 8);
    unint64_t v13 = *(void *)(v26 + 64);
    if (v13 <= v7) {
      unint64_t v13 = v7;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 8;
    if (v15 >= 8)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_29;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_29;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 < 4) {
            goto LABEL_25;
          }
          goto LABEL_29;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_25:
          }
            unsigned int v15 = (v18 | (v16 << (8 * v14))) + 8;
          else {
LABEL_29:
          }
            unsigned int v15 = v18 + 8;
          break;
        default:
          break;
      }
    }
    switch(v15)
    {
      case 1u:
        char v19 = *(void (**)(void))(v31 + 8);
        goto LABEL_39;
      case 2u:
        char v19 = *(void (**)(void))(v30 + 8);
        goto LABEL_39;
      case 3u:
        char v19 = *(void (**)(void))(v29 + 8);
        goto LABEL_39;
      case 4u:
        char v19 = *(void (**)(void))(v28 + 8);
        goto LABEL_39;
      case 5u:
        char v19 = *(void (**)(void))(v27 + 8);
        goto LABEL_39;
      case 6u:
        char v19 = *(void (**)(void))(v26 + 8);
        goto LABEL_39;
      case 7u:
        swift_release();
        goto LABEL_40;
      default:
        char v19 = *(void (**)(void))(v32 + 8);
LABEL_39:
        v19();
LABEL_40:
        unsigned int v20 = a2[v14];
        unsigned int v21 = v20 - 8;
        if (v20 >= 8)
        {
          if (v14 <= 3) {
            uint64_t v22 = v14;
          }
          else {
            uint64_t v22 = 4;
          }
          switch(v22)
          {
            case 1:
              int v23 = *a2;
              if (v14 < 4) {
                goto LABEL_48;
              }
              goto LABEL_52;
            case 2:
              int v23 = *(unsigned __int16 *)a2;
              if (v14 < 4) {
                goto LABEL_48;
              }
              goto LABEL_52;
            case 3:
              int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              if (v14 < 4) {
                goto LABEL_48;
              }
              goto LABEL_52;
            case 4:
              int v23 = *(_DWORD *)a2;
              if (v14 < 4) {
LABEL_48:
              }
                unsigned int v20 = (v23 | (v21 << (8 * v14))) + 8;
              else {
LABEL_52:
              }
                unsigned int v20 = v23 + 8;
              break;
            default:
              break;
          }
        }
        switch(v20)
        {
          case 1u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v31 + 32))(a1, a2, v6);
            char v24 = 1;
            break;
          case 2u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v30 + 32))(a1, a2, v8);
            char v24 = 2;
            break;
          case 3u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 32))(a1, a2, v9);
            char v24 = 3;
            break;
          case 4u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 32))(a1, a2, v10);
            char v24 = 4;
            break;
          case 5u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 32))(a1, a2, v11);
            char v24 = 5;
            break;
          case 6u:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 32))(a1, a2, v12);
            char v24 = 6;
            break;
          case 7u:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            char v24 = 7;
            break;
          default:
            (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v32 + 32))(a1, a2, v5);
            char v24 = 0;
            break;
        }
        a1[v14] = v24;
        break;
    }
  }
  return a1;
}

uint64_t sub_1C41E3280(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  unint64_t v3 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v4 = *(void *)(a3[4] - 8);
  if (*(void *)(*(void *)(a3[3] - 8) + 64) > v3) {
    unint64_t v3 = *(void *)(*(void *)(a3[3] - 8) + 64);
  }
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  uint64_t v5 = *(void *)(a3[5] - 8);
  if (*(void *)(v5 + 64) > v3) {
    unint64_t v3 = *(void *)(v5 + 64);
  }
  uint64_t v6 = *(void *)(a3[6] - 8);
  if (*(void *)(v6 + 64) > v3) {
    unint64_t v3 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a3[7] - 8);
  if (*(void *)(v7 + 64) > v3) {
    unint64_t v3 = *(void *)(v7 + 64);
  }
  uint64_t v8 = *(void *)(a3[8] - 8);
  if (*(void *)(v8 + 64) > v3) {
    unint64_t v3 = *(void *)(v8 + 64);
  }
  uint64_t v9 = 16;
  if (v3 > 0x10) {
    uint64_t v9 = v3;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_34;
  }
  uint64_t v10 = v9 + 1;
  char v11 = 8 * (v9 + 1);
  if ((v9 + 1) <= 3)
  {
    unsigned int v14 = ((a2 + ~(-1 << v11) - 248) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_34;
      }
      goto LABEL_26;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_34;
      }
      goto LABEL_26;
    }
    if (v14 < 2)
    {
LABEL_34:
      unsigned int v16 = *((unsigned __int8 *)a1 + v9);
      if (v16 >= 8) {
        return (v16 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_34;
  }
LABEL_26:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v10 | v15) + 249;
}

void sub_1C41E3470(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  unint64_t v5 = *(void *)(*(void *)(a4[2] - 8) + 64);
  if (*(void *)(*(void *)(a4[3] - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(a4[3] - 8) + 64);
  }
  uint64_t v6 = *(void *)(a4[4] - 8);
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a4[6] - 8);
  if (*(void *)(*(void *)(a4[5] - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(a4[5] - 8) + 64);
  }
  if (*(void *)(v7 + 64) > v5) {
    unint64_t v5 = *(void *)(v7 + 64);
  }
  uint64_t v8 = *(void *)(a4[7] - 8);
  if (*(void *)(v8 + 64) > v5) {
    unint64_t v5 = *(void *)(v8 + 64);
  }
  uint64_t v9 = *(void *)(a4[8] - 8);
  if (*(void *)(v9 + 64) > v5) {
    unint64_t v5 = *(void *)(v9 + 64);
  }
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v10 = v5 + 1;
  if (a3 < 0xF9)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 + ~(-1 << (8 * v10)) - 248) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (a2 > 0xF8)
  {
    unsigned int v12 = a2 - 249;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v5 != -1)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v10] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v13;
        break;
      case 3:
LABEL_46:
        __break(1u);
        JUMPOUT(0x1C41E36F0);
      case 4:
        *(_DWORD *)&a1[v10] = v13;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v11)
    {
      case 1:
        a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_35;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        goto LABEL_34;
      case 3:
        goto LABEL_46;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_35;
      default:
LABEL_34:
        if (a2) {
LABEL_35:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1C41E3718(unsigned __int8 *a1, void *a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2[2] - 8) + 64);
  uint64_t v3 = *(void *)(a2[3] - 8);
  if (*(void *)(v3 + 64) > v2) {
    unint64_t v2 = *(void *)(v3 + 64);
  }
  uint64_t v4 = *(void *)(a2[4] - 8);
  if (*(void *)(v4 + 64) > v2) {
    unint64_t v2 = *(void *)(v4 + 64);
  }
  uint64_t v5 = *(void *)(a2[5] - 8);
  if (*(void *)(v5 + 64) > v2) {
    unint64_t v2 = *(void *)(v5 + 64);
  }
  uint64_t v6 = *(void *)(a2[7] - 8);
  if (*(void *)(*(void *)(a2[6] - 8) + 64) > v2) {
    unint64_t v2 = *(void *)(*(void *)(a2[6] - 8) + 64);
  }
  if (*(void *)(v6 + 64) > v2) {
    unint64_t v2 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a2[8] - 8);
  if (*(void *)(v7 + 64) > v2) {
    unint64_t v2 = *(void *)(v7 + 64);
  }
  uint64_t v8 = 16;
  if (v2 > 0x10) {
    uint64_t v8 = v2;
  }
  uint64_t v9 = a1[v8];
  int v10 = v9 - 8;
  if (v9 >= 8)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a1;
        goto LABEL_24;
      case 2:
        int v12 = *(unsigned __int16 *)a1;
        goto LABEL_24;
      case 3:
        int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_24;
      case 4:
        int v12 = *(_DWORD *)a1;
LABEL_24:
        unsigned int v13 = (v12 | (v10 << (8 * v8))) + 8;
        LODWORD(v9) = v12 + 8;
        if (v8 >= 4) {
          uint64_t v9 = v9;
        }
        else {
          uint64_t v9 = v13;
        }
        break;
      default:
        return v9;
    }
  }
  return v9;
}

void sub_1C41E3888(unsigned char *a1, unsigned int a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  if (a2 > 7)
  {
    unint64_t v16 = *(void *)(*(void *)(a3[2] - 8) + 64);
    uint64_t v17 = *(void *)(a3[3] - 8);
    if (*(void *)(v17 + 64) > v16) {
      unint64_t v16 = *(void *)(v17 + 64);
    }
    uint64_t v18 = *(void *)(a3[4] - 8);
    if (*(void *)(v18 + 64) > v16) {
      unint64_t v16 = *(void *)(v18 + 64);
    }
    uint64_t v19 = *(void *)(a3[6] - 8);
    if (*(void *)(*(void *)(a3[5] - 8) + 64) > v16) {
      unint64_t v16 = *(void *)(*(void *)(a3[5] - 8) + 64);
    }
    if (*(void *)(v19 + 64) > v16) {
      unint64_t v16 = *(void *)(v19 + 64);
    }
    uint64_t v20 = *(void *)(a3[7] - 8);
    if (*(void *)(v20 + 64) > v16) {
      unint64_t v16 = *(void *)(v20 + 64);
    }
    uint64_t v21 = *(void *)(a3[8] - 8);
    if (*(void *)(v21 + 64) > v16) {
      unint64_t v16 = *(void *)(v21 + 64);
    }
    if (v16 <= 0x10) {
      size_t v22 = 16;
    }
    else {
      size_t v22 = v16;
    }
    unsigned int v23 = a2 - 8;
    if (v22 < 4)
    {
      unsigned int v24 = v23 >> (8 * v22);
      int v25 = v23 & ~(-1 << (8 * v22));
      a1[v22] = v24 + 8;
      bzero(a1, v22);
      if (v22 == 3)
      {
        *(_WORD *)a1 = v25;
        a1[2] = BYTE2(v25);
      }
      else if (v22 == 2)
      {
        *(_WORD *)a1 = v25;
      }
      else
      {
        *a1 = v25;
      }
    }
    else
    {
      a1[v22] = 8;
      bzero(a1, v22);
      *(_DWORD *)a1 = v23;
    }
  }
  else
  {
    uint64_t v5 = a3[3];
    uint64_t v6 = *(void *)(a3[4] - 8);
    uint64_t v7 = *(void *)(a3[5] - 8);
    uint64_t v8 = *(void *)(a3[6] - 8);
    uint64_t v9 = *(void *)(a3[7] - 8);
    unint64_t v10 = *(void *)(*(void *)(a3[8] - 8) + 64);
    unint64_t v11 = *(void *)(v9 + 64);
    unint64_t v12 = *(void *)(v8 + 64);
    unint64_t v13 = *(void *)(v7 + 64);
    unint64_t v14 = *(void *)(v6 + 64);
    unint64_t v15 = *(void *)(v4 + 64);
    if (*(void *)(*(void *)(v5 - 8) + 64) > v15) {
      unint64_t v15 = *(void *)(*(void *)(v5 - 8) + 64);
    }
    if (v14 > v15) {
      unint64_t v15 = v14;
    }
    if (v13 > v15) {
      unint64_t v15 = v13;
    }
    if (v12 > v15) {
      unint64_t v15 = v12;
    }
    if (v11 > v15) {
      unint64_t v15 = v11;
    }
    if (v10 > v15) {
      unint64_t v15 = v10;
    }
    if (v15 <= 0x10) {
      unint64_t v15 = 16;
    }
    a1[v15] = a2;
  }
}

uint64_t sub_1C41E3B0C()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_getAssociatedTypeWitness();
        if (v4 <= 0x3F)
        {
          uint64_t result = swift_getAssociatedTypeWitness();
          if (v5 <= 0x3F)
          {
            uint64_t result = swift_getAssociatedTypeWitness();
            if (v6 <= 0x3F)
            {
              uint64_t result = swift_getAssociatedTypeWitness();
              if (v7 <= 0x3F)
              {
                swift_initEnumMetadataMultiPayload();
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void *sub_1C41E3DCC(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(void *)(v5 + 64) > v3) {
    unint64_t v3 = *(void *)(v5 + 64);
  }
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(void *)(v6 + 64) > v3) {
    unint64_t v3 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(void *)(v7 + 64) <= v3) {
    unint64_t v8 = v3;
  }
  else {
    unint64_t v8 = *(void *)(v7 + 64);
  }
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(void *)(v9 + 64) > v8) {
    unint64_t v8 = *(void *)(v9 + 64);
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  if (*(void *)(v11 + 64) <= v8) {
    unint64_t v12 = v8;
  }
  else {
    unint64_t v12 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  size_t v13 = v12 + 1;
  int v14 = *(_DWORD *)(v11 + 80);
  uint64_t v15 = (*(unsigned char *)(v4 + 80) | *(unsigned char *)(v2 + 80) | *(unsigned char *)(v5 + 80) | *(unsigned char *)(v6 + 80) | *(unsigned char *)(v7 + 80) | *(unsigned char *)(v9 + 80) | v14);
  if (v15 <= 7
    && v13 <= 0x18
    && ((*(_DWORD *)(v4 + 80) | *(_DWORD *)(v2 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80) | v14) & 0x100000) == 0)
  {
    unsigned int v21 = a2[v12];
    unsigned int v22 = v21 - 8;
    if (v21 >= 8)
    {
      if (v12 <= 3) {
        uint64_t v23 = v12;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *a2;
          if (v12 < 4) {
            goto LABEL_34;
          }
          goto LABEL_36;
        case 2:
          int v24 = *(unsigned __int16 *)a2;
          if (v12 >= 4) {
            goto LABEL_36;
          }
          goto LABEL_34;
        case 3:
          int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v12 < 4) {
            goto LABEL_34;
          }
          goto LABEL_36;
        case 4:
          int v24 = *(_DWORD *)a2;
          if (v12 < 4) {
LABEL_34:
          }
            unsigned int v21 = (v24 | (v22 << (8 * v12))) + 8;
          else {
LABEL_36:
          }
            unsigned int v21 = v24 + 8;
          break;
        default:
          break;
      }
    }
    switch(v21)
    {
      case 0u:
        uint64_t v19 = a1;
        (*(void (**)(void *))(v2 + 16))(a1);
        *((unsigned char *)a1 + v12) = 0;
        break;
      case 1u:
        uint64_t v19 = a1;
        (*(void (**)(void *))(v4 + 16))(a1);
        *((unsigned char *)a1 + v12) = 1;
        break;
      case 2u:
        uint64_t v19 = a1;
        (*(void (**)(void *))(v5 + 16))(a1);
        *((unsigned char *)a1 + v12) = 2;
        break;
      case 3u:
        uint64_t v19 = a1;
        (*(void (**)(void *))(v6 + 16))(a1);
        *((unsigned char *)a1 + v12) = 3;
        break;
      case 4u:
        uint64_t v19 = a1;
        (*(void (**)(void *))(v7 + 16))(a1);
        *((unsigned char *)a1 + v12) = 4;
        break;
      case 5u:
        (*(void (**)(void *))(v9 + 16))(a1);
        uint64_t v19 = a1;
        *((unsigned char *)a1 + v12) = 5;
        break;
      case 6u:
        uint64_t v19 = a1;
        (*(void (**)(void *))(v11 + 16))(a1);
        *((unsigned char *)a1 + v12) = 6;
        break;
      case 7u:
        uint64_t v19 = a1;
        *((unsigned char *)a1 + v12) = 7;
        break;
      default:
        uint64_t v19 = a1;
        memcpy(a1, a2, v13);
        break;
    }
  }
  else
  {
    uint64_t v18 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v19 = (void *)(v18 + ((v15 + 16) & ~v15));
    swift_retain();
  }
  return v19;
}

uint64_t sub_1C41E43B4(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = *(void *)(v24 + 64);
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v23 = v4;
  if (*(void *)(v22 + 64) > v3) {
    unint64_t v3 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(v5 - 8);
  if (*(void *)(v21 + 64) > v3) {
    unint64_t v3 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v6 - 8);
  if (*(void *)(v20 + 64) > v3) {
    unint64_t v3 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(v7 - 8);
  if (*(void *)(v19 + 64) <= v3) {
    unint64_t v8 = v3;
  }
  else {
    unint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v9 - 8);
  if (*(void *)(v18 + 64) > v8) {
    unint64_t v8 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  uint64_t result = swift_getAssociatedTypeWitness();
  unint64_t v11 = *(void *)(*(void *)(result - 8) + 64);
  if (v11 <= v8) {
    unint64_t v11 = v8;
  }
  unsigned int v12 = a1[v11];
  unsigned int v13 = v12 - 8;
  if (v12 >= 8)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a1;
        if (v11 >= 4) {
          goto LABEL_36;
        }
        goto LABEL_24;
      case 2:
        int v15 = *(unsigned __int16 *)a1;
        if (v11 >= 4) {
          goto LABEL_36;
        }
        goto LABEL_24;
      case 3:
        int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v11 < 4) {
          goto LABEL_24;
        }
        goto LABEL_36;
      case 4:
        int v15 = *(_DWORD *)a1;
        if (v11 < 4)
        {
LABEL_24:
          unsigned int v12 = (v15 | (v13 << (8 * v11))) + 8;
          break;
        }
LABEL_36:
        unsigned int v12 = v15 + 8;
        if (v12 > 6) {
          return result;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v16 = v24;
  switch(v12)
  {
    case 0u:
      goto LABEL_32;
    case 1u:
      uint64_t v16 = v22;
      uint64_t AssociatedTypeWitness = v23;
      goto LABEL_32;
    case 2u:
      uint64_t v16 = v21;
      uint64_t AssociatedTypeWitness = v5;
      goto LABEL_32;
    case 3u:
      uint64_t v16 = v20;
      uint64_t AssociatedTypeWitness = v6;
      goto LABEL_32;
    case 4u:
      uint64_t v16 = v19;
      uint64_t AssociatedTypeWitness = v7;
      goto LABEL_32;
    case 5u:
      uint64_t v16 = v18;
      uint64_t AssociatedTypeWitness = v9;
      goto LABEL_32;
    case 6u:
      uint64_t v16 = *(void *)(result - 8);
      uint64_t AssociatedTypeWitness = result;
LABEL_32:
      uint64_t v17 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v16 + 8);
      uint64_t result = v17(a1, AssociatedTypeWitness);
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *sub_1C41E486C(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v27 = AssociatedTypeWitness;
  unint64_t v5 = *(void *)(v26 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  if (*(void *)(v24 + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v7 - 8);
  if (*(void *)(v23 + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(v8 - 8);
  if (*(void *)(v22 + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(v9 - 8);
  if (*(void *)(v21 + 64) <= v5) {
    unint64_t v10 = v5;
  }
  else {
    unint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v11 - 8);
  if (*(void *)(v20 + 64) > v10) {
    unint64_t v10 = *(void *)(*(void *)(v11 - 8) + 64);
  }
  uint64_t v12 = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(v12 - 8) + 64) <= v10) {
    unint64_t v13 = v10;
  }
  else {
    unint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  }
  unsigned int v14 = a2[v13];
  unsigned int v15 = v14 - 8;
  if (v14 < 8)
  {
LABEL_24:
    switch(v14)
    {
      case 0u:
        (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v26 + 16))(a1, a2, v27);
        a1[v13] = 0;
        return a1;
      case 1u:
        (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v24 + 16))(a1, a2, v25);
        char v18 = 1;
        goto LABEL_38;
      case 2u:
        (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v7);
        char v18 = 2;
        goto LABEL_38;
      case 3u:
        (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v22 + 16))(a1, a2, v8);
        char v18 = 3;
        goto LABEL_38;
      case 4u:
        (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v21 + 16))(a1, a2, v9);
        char v18 = 4;
        goto LABEL_38;
      case 5u:
        (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v20 + 16))(a1, a2, v11);
        char v18 = 5;
        goto LABEL_38;
      case 6u:
        (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        char v18 = 6;
        goto LABEL_38;
      case 7u:
        char v18 = 7;
LABEL_38:
        a1[v13] = v18;
        break;
      default:
        goto LABEL_30;
    }
  }
  else
  {
    if (v13 <= 3) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        if (v13 >= 4) {
          goto LABEL_29;
        }
        goto LABEL_23;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        if (v13 < 4) {
          goto LABEL_23;
        }
        goto LABEL_29;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v13 < 4) {
          goto LABEL_23;
        }
        goto LABEL_29;
      case 4:
        int v17 = *(_DWORD *)a2;
        if (v13 < 4)
        {
LABEL_23:
          unsigned int v14 = (v17 | (v15 << (8 * v13))) + 8;
          goto LABEL_24;
        }
LABEL_29:
        unsigned int v14 = v17 + 8;
        if (v14 <= 7) {
          goto LABEL_24;
        }
LABEL_30:
        memcpy(a1, a2, v13 + 1);
        break;
      default:
        goto LABEL_24;
    }
  }
  return a1;
}

unsigned __int8 *sub_1C41E4DCC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v34 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v5 = *(void *)(v34 + 64);
    uint64_t v6 = swift_getAssociatedTypeWitness();
    uint64_t v32 = *(void *)(v6 - 8);
    uint64_t v33 = v6;
    if (*(void *)(v32 + 64) <= v5) {
      unint64_t v7 = v5;
    }
    else {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v8 = swift_getAssociatedTypeWitness();
    uint64_t v30 = *(void *)(v8 - 8);
    uint64_t v31 = v8;
    if (*(void *)(v30 + 64) <= v7) {
      unint64_t v9 = v7;
    }
    else {
      unint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
    }
    uint64_t v10 = swift_getAssociatedTypeWitness();
    uint64_t v29 = *(void *)(v10 - 8);
    if (*(void *)(v29 + 64) <= v9) {
      unint64_t v11 = v9;
    }
    else {
      unint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
    }
    uint64_t v12 = swift_getAssociatedTypeWitness();
    uint64_t v28 = *(void *)(v12 - 8);
    if (*(void *)(v28 + 64) <= v11) {
      unint64_t v13 = v11;
    }
    else {
      unint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
    }
    uint64_t v14 = swift_getAssociatedTypeWitness();
    uint64_t v27 = *(void *)(v14 - 8);
    if (*(void *)(v27 + 64) > v13) {
      unint64_t v13 = *(void *)(*(void *)(v14 - 8) + 64);
    }
    uint64_t v15 = swift_getAssociatedTypeWitness();
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)(v15 - 8);
    if (*(void *)(v17 + 64) <= v13) {
      unint64_t v18 = v13;
    }
    else {
      unint64_t v18 = *(void *)(*(void *)(v15 - 8) + 64);
    }
    uint64_t v19 = v34;
    uint64_t v20 = AssociatedTypeWitness;
    switch((int)v34)
    {
      case 0:
        goto LABEL_26;
      case 1:
        uint64_t v19 = v32;
        uint64_t v20 = v33;
        goto LABEL_26;
      case 2:
        uint64_t v19 = v30;
        uint64_t v20 = v31;
        goto LABEL_26;
      case 3:
        uint64_t v19 = v29;
        uint64_t v20 = v10;
        goto LABEL_26;
      case 4:
        uint64_t v19 = v28;
        uint64_t v20 = v12;
        goto LABEL_26;
      case 5:
        uint64_t v19 = v27;
        uint64_t v20 = v14;
        goto LABEL_26;
      case 6:
        uint64_t v19 = *(void *)(v15 - 8);
        uint64_t v20 = v15;
LABEL_26:
        (*(void (**)(unsigned __int8 *, uint64_t))(v19 + 8))(a1, v20);
        break;
      default:
        break;
    }
    unsigned int v21 = a2[v18];
    unsigned int v22 = v21 - 8;
    if (v21 < 8)
    {
LABEL_36:
      switch(v21)
      {
        case 0u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v34 + 16))(a1, a2, AssociatedTypeWitness);
          a1[v18] = 0;
          return a1;
        case 1u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v32 + 16))(a1, a2, v33);
          char v25 = 1;
          goto LABEL_50;
        case 2u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v30 + 16))(a1, a2, v31);
          char v25 = 2;
          goto LABEL_50;
        case 3u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 16))(a1, a2, v10);
          char v25 = 3;
          goto LABEL_50;
        case 4u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 16))(a1, a2, v12);
          char v25 = 4;
          goto LABEL_50;
        case 5u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 16))(a1, a2, v14);
          char v25 = 5;
          goto LABEL_50;
        case 6u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v17 + 16))(a1, a2, v16);
          char v25 = 6;
          goto LABEL_50;
        case 7u:
          char v25 = 7;
LABEL_50:
          a1[v18] = v25;
          break;
        default:
          goto LABEL_42;
      }
    }
    else
    {
      if (v18 <= 3) {
        uint64_t v23 = v18;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *a2;
          if (v18 >= 4) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 2:
          int v24 = *(unsigned __int16 *)a2;
          if (v18 < 4) {
            goto LABEL_35;
          }
          goto LABEL_41;
        case 3:
          int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v18 < 4) {
            goto LABEL_35;
          }
          goto LABEL_41;
        case 4:
          int v24 = *(_DWORD *)a2;
          if (v18 < 4)
          {
LABEL_35:
            unsigned int v21 = (v24 | (v22 << (8 * v18))) + 8;
            goto LABEL_36;
          }
LABEL_41:
          unsigned int v21 = v24 + 8;
          if (v21 <= 7) {
            goto LABEL_36;
          }
LABEL_42:
          memcpy(a1, a2, v18 + 1);
          break;
        default:
          goto LABEL_36;
      }
    }
  }
  return a1;
}

unsigned char *sub_1C41E5478(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v27 = AssociatedTypeWitness;
  unint64_t v5 = *(void *)(v26 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  if (*(void *)(v24 + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(v7 - 8);
  if (*(void *)(v23 + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(v8 - 8);
  if (*(void *)(v22 + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(v8 - 8) + 64);
  }
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(v9 - 8);
  if (*(void *)(v21 + 64) <= v5) {
    unint64_t v10 = v5;
  }
  else {
    unint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v11 - 8);
  if (*(void *)(v20 + 64) > v10) {
    unint64_t v10 = *(void *)(*(void *)(v11 - 8) + 64);
  }
  uint64_t v12 = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(v12 - 8) + 64) <= v10) {
    unint64_t v13 = v10;
  }
  else {
    unint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  }
  unsigned int v14 = a2[v13];
  unsigned int v15 = v14 - 8;
  if (v14 < 8)
  {
LABEL_24:
    switch(v14)
    {
      case 0u:
        (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v26 + 32))(a1, a2, v27);
        a1[v13] = 0;
        return a1;
      case 1u:
        (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v24 + 32))(a1, a2, v25);
        char v18 = 1;
        goto LABEL_38;
      case 2u:
        (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v7);
        char v18 = 2;
        goto LABEL_38;
      case 3u:
        (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v22 + 32))(a1, a2, v8);
        char v18 = 3;
        goto LABEL_38;
      case 4u:
        (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v21 + 32))(a1, a2, v9);
        char v18 = 4;
        goto LABEL_38;
      case 5u:
        (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v20 + 32))(a1, a2, v11);
        char v18 = 5;
        goto LABEL_38;
      case 6u:
        (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
        char v18 = 6;
        goto LABEL_38;
      case 7u:
        char v18 = 7;
LABEL_38:
        a1[v13] = v18;
        break;
      default:
        goto LABEL_30;
    }
  }
  else
  {
    if (v13 <= 3) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        if (v13 >= 4) {
          goto LABEL_29;
        }
        goto LABEL_23;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        if (v13 < 4) {
          goto LABEL_23;
        }
        goto LABEL_29;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v13 < 4) {
          goto LABEL_23;
        }
        goto LABEL_29;
      case 4:
        int v17 = *(_DWORD *)a2;
        if (v13 < 4)
        {
LABEL_23:
          unsigned int v14 = (v17 | (v15 << (8 * v13))) + 8;
          goto LABEL_24;
        }
LABEL_29:
        unsigned int v14 = v17 + 8;
        if (v14 <= 7) {
          goto LABEL_24;
        }
LABEL_30:
        memcpy(a1, a2, v13 + 1);
        break;
      default:
        goto LABEL_24;
    }
  }
  return a1;
}

unsigned __int8 *sub_1C41E59D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v34 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v5 = *(void *)(v34 + 64);
    uint64_t v6 = swift_getAssociatedTypeWitness();
    uint64_t v32 = *(void *)(v6 - 8);
    uint64_t v33 = v6;
    if (*(void *)(v32 + 64) <= v5) {
      unint64_t v7 = v5;
    }
    else {
      unint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    uint64_t v8 = swift_getAssociatedTypeWitness();
    uint64_t v30 = *(void *)(v8 - 8);
    uint64_t v31 = v8;
    if (*(void *)(v30 + 64) <= v7) {
      unint64_t v9 = v7;
    }
    else {
      unint64_t v9 = *(void *)(*(void *)(v8 - 8) + 64);
    }
    uint64_t v10 = swift_getAssociatedTypeWitness();
    uint64_t v29 = *(void *)(v10 - 8);
    if (*(void *)(v29 + 64) <= v9) {
      unint64_t v11 = v9;
    }
    else {
      unint64_t v11 = *(void *)(*(void *)(v10 - 8) + 64);
    }
    uint64_t v12 = swift_getAssociatedTypeWitness();
    uint64_t v28 = *(void *)(v12 - 8);
    if (*(void *)(v28 + 64) <= v11) {
      unint64_t v13 = v11;
    }
    else {
      unint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
    }
    uint64_t v14 = swift_getAssociatedTypeWitness();
    uint64_t v27 = *(void *)(v14 - 8);
    if (*(void *)(v27 + 64) > v13) {
      unint64_t v13 = *(void *)(*(void *)(v14 - 8) + 64);
    }
    uint64_t v15 = swift_getAssociatedTypeWitness();
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)(v15 - 8);
    if (*(void *)(v17 + 64) <= v13) {
      unint64_t v18 = v13;
    }
    else {
      unint64_t v18 = *(void *)(*(void *)(v15 - 8) + 64);
    }
    uint64_t v19 = v34;
    uint64_t v20 = AssociatedTypeWitness;
    switch((int)v34)
    {
      case 0:
        goto LABEL_26;
      case 1:
        uint64_t v19 = v32;
        uint64_t v20 = v33;
        goto LABEL_26;
      case 2:
        uint64_t v19 = v30;
        uint64_t v20 = v31;
        goto LABEL_26;
      case 3:
        uint64_t v19 = v29;
        uint64_t v20 = v10;
        goto LABEL_26;
      case 4:
        uint64_t v19 = v28;
        uint64_t v20 = v12;
        goto LABEL_26;
      case 5:
        uint64_t v19 = v27;
        uint64_t v20 = v14;
        goto LABEL_26;
      case 6:
        uint64_t v19 = *(void *)(v15 - 8);
        uint64_t v20 = v15;
LABEL_26:
        (*(void (**)(unsigned __int8 *, uint64_t))(v19 + 8))(a1, v20);
        break;
      default:
        break;
    }
    unsigned int v21 = a2[v18];
    unsigned int v22 = v21 - 8;
    if (v21 < 8)
    {
LABEL_36:
      switch(v21)
      {
        case 0u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v34 + 32))(a1, a2, AssociatedTypeWitness);
          a1[v18] = 0;
          return a1;
        case 1u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v32 + 32))(a1, a2, v33);
          char v25 = 1;
          goto LABEL_50;
        case 2u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v30 + 32))(a1, a2, v31);
          char v25 = 2;
          goto LABEL_50;
        case 3u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 32))(a1, a2, v10);
          char v25 = 3;
          goto LABEL_50;
        case 4u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 32))(a1, a2, v12);
          char v25 = 4;
          goto LABEL_50;
        case 5u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 32))(a1, a2, v14);
          char v25 = 5;
          goto LABEL_50;
        case 6u:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v17 + 32))(a1, a2, v16);
          char v25 = 6;
          goto LABEL_50;
        case 7u:
          char v25 = 7;
LABEL_50:
          a1[v18] = v25;
          break;
        default:
          goto LABEL_42;
      }
    }
    else
    {
      if (v18 <= 3) {
        uint64_t v23 = v18;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *a2;
          if (v18 >= 4) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 2:
          int v24 = *(unsigned __int16 *)a2;
          if (v18 < 4) {
            goto LABEL_35;
          }
          goto LABEL_41;
        case 3:
          int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v18 < 4) {
            goto LABEL_35;
          }
          goto LABEL_41;
        case 4:
          int v24 = *(_DWORD *)a2;
          if (v18 < 4)
          {
LABEL_35:
            unsigned int v21 = (v24 | (v22 << (8 * v18))) + 8;
            goto LABEL_36;
          }
LABEL_41:
          unsigned int v21 = v24 + 8;
          if (v21 <= 7) {
            goto LABEL_36;
          }
LABEL_42:
          memcpy(a1, a2, v18 + 1);
          break;
        default:
          goto LABEL_36;
      }
    }
  }
  return a1;
}

uint64_t sub_1C41E6084(unsigned __int16 *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 > v4) {
    unint64_t v4 = v5;
  }
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 > v4) {
    unint64_t v4 = v6;
  }
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 > v4) {
    unint64_t v4 = v7;
  }
  unint64_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 > v4) {
    unint64_t v4 = v8;
  }
  unint64_t v9 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v9 > v4) {
    unint64_t v4 = v9;
  }
  unint64_t v10 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v10 <= v4) {
    unint64_t v11 = v4;
  }
  else {
    unint64_t v11 = v10;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_33;
  }
  unint64_t v12 = v11 + 1;
  char v13 = 8 * (v11 + 1);
  if ((v11 + 1) <= 3)
  {
    unsigned int v16 = ((a2 + ~(-1 << v13) - 247) >> v13) + 1;
    if (HIWORD(v16))
    {
      int v14 = *(_DWORD *)((char *)a1 + v12);
      if (!v14) {
        goto LABEL_33;
      }
      goto LABEL_25;
    }
    if (v16 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v12);
      if (!*(unsigned __int16 *)((char *)a1 + v12)) {
        goto LABEL_33;
      }
      goto LABEL_25;
    }
    if (v16 < 2)
    {
LABEL_33:
      unsigned int v18 = *((unsigned __int8 *)a1 + v11);
      if (v18 >= 9) {
        return (v18 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v12);
  if (!*((unsigned char *)a1 + v12)) {
    goto LABEL_33;
  }
LABEL_25:
  int v17 = (v14 - 1) << v13;
  if (v12 > 3) {
    int v17 = 0;
  }
  if (v12)
  {
    if (v12 > 3) {
      LODWORD(v12) = 4;
    }
    switch((int)v12)
    {
      case 2:
        LODWORD(v12) = *a1;
        break;
      case 3:
        LODWORD(v12) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v12) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v12) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v12 | v17) + 248;
}

void sub_1C41E6358(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 > v6) {
    unint64_t v6 = v7;
  }
  unint64_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 > v6) {
    unint64_t v6 = v8;
  }
  unint64_t v9 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v9 > v6) {
    unint64_t v6 = v9;
  }
  unint64_t v10 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v10 > v6) {
    unint64_t v6 = v10;
  }
  unint64_t v11 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v11 > v6) {
    unint64_t v6 = v11;
  }
  unint64_t v12 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v12 <= v6) {
    unint64_t v12 = v6;
  }
  size_t v13 = v12 + 1;
  if (a3 < 0xF8)
  {
    int v14 = 0;
  }
  else if (v13 <= 3)
  {
    unsigned int v17 = ((a3 + ~(-1 << (8 * v13)) - 247) >> (8 * v13)) + 1;
    if (HIWORD(v17))
    {
      int v14 = 4;
    }
    else if (v17 >= 0x100)
    {
      int v14 = 2;
    }
    else
    {
      int v14 = v17 > 1;
    }
  }
  else
  {
    int v14 = 1;
  }
  if (a2 > 0xF7)
  {
    unsigned int v15 = a2 - 248;
    if (v13 < 4)
    {
      int v16 = (v15 >> (8 * v13)) + 1;
      if (v12 != -1)
      {
        int v18 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v12 + 1);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v13] = v16;
        break;
      case 2:
        *(_WORD *)&a1[v13] = v16;
        break;
      case 3:
LABEL_44:
        __break(1u);
        JUMPOUT(0x1C41E66A0);
      case 4:
        *(_DWORD *)&a1[v13] = v16;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v14)
    {
      case 1:
        a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_33;
      case 2:
        *(_WORD *)&a1[v13] = 0;
        goto LABEL_32;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_33;
      default:
LABEL_32:
        if (a2) {
LABEL_33:
        }
          a1[v12] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_1C41E66C8(unsigned __int8 *a1)
{
  unint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v3 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 > v2) {
    unint64_t v2 = v3;
  }
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v4 > v2) {
    unint64_t v2 = v4;
  }
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 > v2) {
    unint64_t v2 = v5;
  }
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 > v2) {
    unint64_t v2 = v6;
  }
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 > v2) {
    unint64_t v2 = v7;
  }
  unint64_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 <= v2) {
    unint64_t v8 = v2;
  }
  uint64_t result = a1[v8];
  if (result >= 8)
  {
    if (v8 <= 3) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a1;
        if (v8 < 4) {
          goto LABEL_23;
        }
        goto LABEL_25;
      case 2:
        int v11 = *(unsigned __int16 *)a1;
        if (v8 >= 4) {
          goto LABEL_25;
        }
        goto LABEL_23;
      case 3:
        int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v8 < 4) {
          goto LABEL_23;
        }
        goto LABEL_25;
      case 4:
        int v11 = *(_DWORD *)a1;
        if (v8 < 4) {
LABEL_23:
        }
          uint64_t result = (v11 | ((result - 8) << (8 * v8))) + 8;
        else {
LABEL_25:
        }
          uint64_t result = (v11 + 8);
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_1C41E6930(unsigned char *a1, unsigned int a2)
{
  size_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  size_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 > v4) {
    size_t v4 = v5;
  }
  size_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v6 > v4) {
    size_t v4 = v6;
  }
  size_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 > v4) {
    size_t v4 = v7;
  }
  size_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v8 > v4) {
    size_t v4 = v8;
  }
  size_t v9 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v9 > v4) {
    size_t v4 = v9;
  }
  size_t v10 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v10 <= v4) {
    size_t v11 = v4;
  }
  else {
    size_t v11 = v10;
  }
  if (a2 > 7)
  {
    unsigned int v12 = a2 - 8;
    if (v11 < 4)
    {
      unsigned int v13 = v12 >> (8 * v11);
      int v14 = v12 & ~(-1 << (8 * v11));
      a1[v11] = v13 + 8;
      bzero(a1, v11);
      if (v11 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if (v11 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
    else
    {
      a1[v11] = 8;
      bzero(a1, v11);
      *(_DWORD *)a1 = v12;
    }
  }
  else
  {
    a1[v11] = a2;
  }
}

uint64_t sub_1C41E6B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 136);
}

uint64_t sub_1C41E6B8C()
{
  uint64_t result = type metadata accessor for TaggedValue_8.TaggedEnum();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C41E6C40(unsigned __int8 *a1, void *a2)
{
  uint64_t v22 = *(void *)(a2[3] - 8);
  if (*(void *)(v22 + 64) <= *(void *)(*(void *)(a2[2] - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(a2[2] - 8) + 64);
  }
  else {
    unint64_t v3 = *(void *)(v22 + 64);
  }
  uint64_t v4 = *(void *)(a2[4] - 8);
  if (*(void *)(v4 + 64) <= v3) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = *(void *)(a2[5] - 8);
  if (*(void *)(v6 + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(v6 + 64);
  }
  uint64_t v8 = *(void *)(a2[6] - 8);
  if (*(void *)(v8 + 64) > v7) {
    unint64_t v7 = *(void *)(v8 + 64);
  }
  if (*(void *)(*(void *)(a2[7] - 8) + 64) <= v7) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(a2[7] - 8) + 64);
  }
  uint64_t v10 = a2[8];
  uint64_t v11 = a2[9];
  if (*(void *)(*(void *)(v10 - 8) + 64) <= v9) {
    unint64_t v12 = v9;
  }
  else {
    unint64_t v12 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  unint64_t v13 = *(void *)(*(void *)(v11 - 8) + 64);
  if (v13 <= v12) {
    unint64_t v13 = v12;
  }
  if (v13 <= 0x10) {
    unint64_t v13 = 16;
  }
  unsigned int v14 = a1[v13];
  if (v14 >= 9)
  {
    if (v13 <= 3) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a1;
        goto LABEL_31;
      case 2:
        int v16 = *(unsigned __int16 *)a1;
        goto LABEL_31;
      case 3:
        int v16 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_31;
      case 4:
        int v16 = *(_DWORD *)a1;
LABEL_31:
        int v17 = (v16 | ((v14 - 9) << (8 * v13))) + 9;
        unsigned int v18 = v16 + 9;
        if (v13 >= 4) {
          unsigned int v14 = v18;
        }
        else {
          unsigned int v14 = v17;
        }
        break;
      default:
        break;
    }
  }
  switch(v14)
  {
    case 1u:
      uint64_t v19 = *(uint64_t (**)(void))(v22 + 8);
      goto LABEL_53;
    case 2u:
      uint64_t v19 = *(uint64_t (**)(void))(v4 + 8);
      return v19();
    case 3u:
      uint64_t v19 = *(uint64_t (**)(void))(v6 + 8);
      return v19();
    case 4u:
      uint64_t v19 = *(uint64_t (**)(void))(v8 + 8);
      return v19();
    case 5u:
      uint64_t v19 = *(uint64_t (**)(void))(*(void *)(a2[7] - 8) + 8);
      return v19();
    case 6u:
      uint64_t v20 = *(uint64_t (**)(void))(*(void *)(v10 - 8) + 8);
      return v20();
    case 7u:
      uint64_t v19 = *(uint64_t (**)(void))(*(void *)(v11 - 8) + 8);
      goto LABEL_53;
    case 8u:
      return swift_release();
    default:
      uint64_t v19 = *(uint64_t (**)(void))(*(void *)(a2[2] - 8) + 8);
LABEL_53:
      return v19();
  }
}

void *sub_1C41E70C8(void *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = *(void *)(a3[4] - 8);
  if (*(void *)(v6 + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(v6 + 64);
  }
  uint64_t v8 = *(void *)(a3[5] - 8);
  if (*(void *)(v8 + 64) <= v7) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = *(void *)(v8 + 64);
  }
  uint64_t v10 = *(void *)(a3[6] - 8);
  if (*(void *)(v10 + 64) > v9) {
    unint64_t v9 = *(void *)(v10 + 64);
  }
  if (*(void *)(*(void *)(a3[7] - 8) + 64) <= v9) {
    unint64_t v11 = v9;
  }
  else {
    unint64_t v11 = *(void *)(*(void *)(a3[7] - 8) + 64);
  }
  uint64_t v12 = a3[8];
  uint64_t v13 = a3[9];
  if (*(void *)(*(void *)(v12 - 8) + 64) > v11) {
    unint64_t v11 = *(void *)(*(void *)(v12 - 8) + 64);
  }
  unint64_t v14 = *(void *)(*(void *)(v13 - 8) + 64);
  if (v14 <= v11) {
    unint64_t v14 = v11;
  }
  if (v14 <= 0x10) {
    uint64_t v15 = 16;
  }
  else {
    uint64_t v15 = v14;
  }
  unsigned int v16 = a2[v15];
  unsigned int v17 = v16 - 9;
  if (v16 >= 9)
  {
    if (v15 <= 3) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *a2;
        goto LABEL_31;
      case 2:
        int v19 = *(unsigned __int16 *)a2;
        goto LABEL_31;
      case 3:
        int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_31;
      case 4:
        int v19 = *(_DWORD *)a2;
LABEL_31:
        int v20 = (v19 | (v17 << (8 * v15))) + 9;
        unsigned int v16 = v19 + 9;
        if (v15 < 4) {
          unsigned int v16 = v20;
        }
        break;
      default:
        break;
    }
  }
  switch(v16)
  {
    case 1u:
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)a1 + v15) = 1;
      break;
    case 2u:
      (*(void (**)(void *))(v6 + 16))(a1);
      *((unsigned char *)a1 + v15) = 2;
      break;
    case 3u:
      (*(void (**)(void *))(v8 + 16))(a1);
      *((unsigned char *)a1 + v15) = 3;
      break;
    case 4u:
      (*(void (**)(void *))(v10 + 16))(a1);
      *((unsigned char *)a1 + v15) = 4;
      break;
    case 5u:
      (*(void (**)(void *))(*(void *)(a3[7] - 8) + 16))(a1);
      *((unsigned char *)a1 + v15) = 5;
      break;
    case 6u:
      (*(void (**)(void *))(*(void *)(v12 - 8) + 16))(a1);
      *((unsigned char *)a1 + v15) = 6;
      break;
    case 7u:
      (*(void (**)(void *))(*(void *)(v13 - 8) + 16))(a1);
      *((unsigned char *)a1 + v15) = 7;
      break;
    case 8u:
      uint64_t v21 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v21;
      *((unsigned char *)a1 + v15) = 8;
      swift_retain();
      break;
    default:
      (*(void (**)(void *))(*(void *)(a3[2] - 8) + 16))(a1);
      *((unsigned char *)a1 + v15) = 0;
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41E7580(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[3];
    uint64_t v32 = *(void *)(a3[2] - 8);
    unint64_t v6 = *(void *)(v32 + 64);
    uint64_t v31 = *(void *)(v5 - 8);
    if (*(void *)(v31 + 64) > v6) {
      unint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
    }
    uint64_t v7 = a3[4];
    uint64_t v8 = a3[5];
    uint64_t v30 = *(void *)(v7 - 8);
    if (*(void *)(v30 + 64) > v6) {
      unint64_t v6 = *(void *)(v30 + 64);
    }
    uint64_t v29 = *(void *)(v8 - 8);
    if (*(void *)(v29 + 64) > v6) {
      unint64_t v6 = *(void *)(*(void *)(v8 - 8) + 64);
    }
    uint64_t v9 = a3[6];
    uint64_t v10 = a3[7];
    uint64_t v28 = *(void *)(v9 - 8);
    if (*(void *)(v28 + 64) > v6) {
      unint64_t v6 = *(void *)(v28 + 64);
    }
    uint64_t v27 = *(void *)(v10 - 8);
    if (*(void *)(v27 + 64) > v6) {
      unint64_t v6 = *(void *)(*(void *)(v10 - 8) + 64);
    }
    uint64_t v11 = a3[8];
    uint64_t v12 = a3[9];
    uint64_t v26 = *(void *)(v11 - 8);
    if (*(void *)(v26 + 64) > v6) {
      unint64_t v6 = *(void *)(v26 + 64);
    }
    uint64_t v25 = *(void *)(v12 - 8);
    unint64_t v13 = *(void *)(v25 + 64);
    if (v13 <= v6) {
      unint64_t v13 = v6;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 9;
    if (v15 >= 9)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 < 4) {
            goto LABEL_31;
          }
          goto LABEL_32;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 >= 4) {
            goto LABEL_32;
          }
          goto LABEL_31;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 >= 4) {
            goto LABEL_32;
          }
          goto LABEL_31;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_31:
          }
            v18 |= v16 << (8 * v14);
LABEL_32:
          unsigned int v15 = v18 + 9;
          break;
        default:
          break;
      }
    }
    uint64_t v24 = a3[2];
    switch(v15)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v31 + 8))(a1, v5);
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v30 + 8))(a1, v7);
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v29 + 8))(a1, v8);
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v28 + 8))(a1, v9);
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v27 + 8))(a1, v10);
        break;
      case 6u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v26 + 8))(a1, v11);
        break;
      case 7u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v25 + 8))(a1, v12);
        break;
      case 8u:
        swift_release();
        break;
      default:
        (*(void (**)(unsigned __int8 *, void))(v32 + 8))(a1, a3[2]);
        break;
    }
    unsigned int v19 = a2[v14];
    unsigned int v20 = v19 - 9;
    if (v19 >= 9)
    {
      if (v14 <= 3) {
        uint64_t v21 = v14;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v14 < 4) {
            goto LABEL_53;
          }
          goto LABEL_55;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v14 >= 4) {
            goto LABEL_55;
          }
          goto LABEL_53;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v14 < 4) {
            goto LABEL_53;
          }
          goto LABEL_55;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v14 < 4) {
LABEL_53:
          }
            unsigned int v19 = (v22 | (v20 << (8 * v14))) + 9;
          else {
LABEL_55:
          }
            unsigned int v19 = v22 + 9;
          break;
        default:
          break;
      }
    }
    switch(v19)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v31 + 16))(a1, a2, v5);
        a1[v14] = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v30 + 16))(a1, a2, v7);
        a1[v14] = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 16))(a1, a2, v8);
        a1[v14] = 3;
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 16))(a1, a2, v9);
        a1[v14] = 4;
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 16))(a1, a2, v10);
        a1[v14] = 5;
        break;
      case 6u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 16))(a1, a2, v11);
        a1[v14] = 6;
        break;
      case 7u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 16))(a1, a2, v12);
        a1[v14] = 7;
        break;
      case 8u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        a1[v14] = 8;
        swift_retain();
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v32 + 16))(a1, a2, v24);
        a1[v14] = 0;
        break;
    }
  }
  return a1;
}

_OWORD *sub_1C41E7CA4(_OWORD *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = *(void *)(a3[4] - 8);
  if (*(void *)(v6 + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(v6 + 64);
  }
  uint64_t v8 = *(void *)(a3[5] - 8);
  if (*(void *)(v8 + 64) <= v7) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = *(void *)(v8 + 64);
  }
  uint64_t v10 = *(void *)(a3[6] - 8);
  if (*(void *)(v10 + 64) > v9) {
    unint64_t v9 = *(void *)(v10 + 64);
  }
  if (*(void *)(*(void *)(a3[7] - 8) + 64) <= v9) {
    unint64_t v11 = v9;
  }
  else {
    unint64_t v11 = *(void *)(*(void *)(a3[7] - 8) + 64);
  }
  uint64_t v12 = a3[8];
  uint64_t v13 = a3[9];
  if (*(void *)(*(void *)(v12 - 8) + 64) > v11) {
    unint64_t v11 = *(void *)(*(void *)(v12 - 8) + 64);
  }
  unint64_t v14 = *(void *)(*(void *)(v13 - 8) + 64);
  if (v14 <= v11) {
    unint64_t v14 = v11;
  }
  if (v14 <= 0x10) {
    uint64_t v15 = 16;
  }
  else {
    uint64_t v15 = v14;
  }
  unsigned int v16 = a2[v15];
  unsigned int v17 = v16 - 9;
  if (v16 >= 9)
  {
    if (v15 <= 3) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *a2;
        goto LABEL_31;
      case 2:
        int v19 = *(unsigned __int16 *)a2;
        goto LABEL_31;
      case 3:
        int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_31;
      case 4:
        int v19 = *(_DWORD *)a2;
LABEL_31:
        int v20 = (v19 | (v17 << (8 * v15))) + 9;
        unsigned int v16 = v19 + 9;
        if (v15 < 4) {
          unsigned int v16 = v20;
        }
        break;
      default:
        break;
    }
  }
  switch(v16)
  {
    case 1u:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      char v21 = 1;
      break;
    case 2u:
      (*(void (**)(_OWORD *))(v6 + 32))(a1);
      char v21 = 2;
      break;
    case 3u:
      (*(void (**)(_OWORD *))(v8 + 32))(a1);
      char v21 = 3;
      break;
    case 4u:
      (*(void (**)(_OWORD *))(v10 + 32))(a1);
      char v21 = 4;
      break;
    case 5u:
      (*(void (**)(_OWORD *))(*(void *)(a3[7] - 8) + 32))(a1);
      char v21 = 5;
      break;
    case 6u:
      (*(void (**)(_OWORD *))(*(void *)(v12 - 8) + 32))(a1);
      char v21 = 6;
      break;
    case 7u:
      (*(void (**)(_OWORD *))(*(void *)(v13 - 8) + 32))(a1);
      char v21 = 7;
      break;
    case 8u:
      *a1 = *(_OWORD *)a2;
      char v21 = 8;
      break;
    default:
      (*(void (**)(_OWORD *))(*(void *)(a3[2] - 8) + 32))(a1);
      char v21 = 0;
      break;
  }
  *((unsigned char *)a1 + v15) = v21;
  return a1;
}

unsigned __int8 *sub_1C41E813C(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[3];
    uint64_t v33 = *(void *)(a3[2] - 8);
    unint64_t v6 = *(void *)(v33 + 64);
    uint64_t v32 = *(void *)(v5 - 8);
    if (*(void *)(v32 + 64) > v6) {
      unint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
    }
    uint64_t v7 = a3[4];
    uint64_t v8 = a3[5];
    uint64_t v31 = *(void *)(v7 - 8);
    if (*(void *)(v31 + 64) > v6) {
      unint64_t v6 = *(void *)(v31 + 64);
    }
    uint64_t v30 = *(void *)(v8 - 8);
    if (*(void *)(v30 + 64) > v6) {
      unint64_t v6 = *(void *)(*(void *)(v8 - 8) + 64);
    }
    uint64_t v9 = a3[6];
    uint64_t v10 = a3[7];
    uint64_t v29 = *(void *)(v9 - 8);
    if (*(void *)(v29 + 64) > v6) {
      unint64_t v6 = *(void *)(v29 + 64);
    }
    uint64_t v28 = *(void *)(v10 - 8);
    if (*(void *)(v28 + 64) > v6) {
      unint64_t v6 = *(void *)(*(void *)(v10 - 8) + 64);
    }
    uint64_t v11 = a3[8];
    uint64_t v12 = a3[9];
    uint64_t v27 = *(void *)(v11 - 8);
    if (*(void *)(v27 + 64) > v6) {
      unint64_t v6 = *(void *)(v27 + 64);
    }
    uint64_t v26 = *(void *)(v12 - 8);
    unint64_t v13 = *(void *)(v26 + 64);
    if (v13 <= v6) {
      unint64_t v13 = v6;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 9;
    if (v15 >= 9)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 < 4) {
            goto LABEL_31;
          }
          goto LABEL_32;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 >= 4) {
            goto LABEL_32;
          }
          goto LABEL_31;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 >= 4) {
            goto LABEL_32;
          }
          goto LABEL_31;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_31:
          }
            v18 |= v16 << (8 * v14);
LABEL_32:
          unsigned int v15 = v18 + 9;
          break;
        default:
          break;
      }
    }
    uint64_t v25 = a3[2];
    switch(v15)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v32 + 8))(a1, v5);
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v31 + 8))(a1, v7);
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v30 + 8))(a1, v8);
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v29 + 8))(a1, v9);
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v28 + 8))(a1, v10);
        break;
      case 6u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v27 + 8))(a1, v11);
        break;
      case 7u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v26 + 8))(a1, v12);
        break;
      case 8u:
        swift_release();
        break;
      default:
        (*(void (**)(unsigned __int8 *, void))(v33 + 8))(a1, a3[2]);
        break;
    }
    unsigned int v19 = a2[v14];
    unsigned int v20 = v19 - 9;
    if (v19 >= 9)
    {
      if (v14 <= 3) {
        uint64_t v21 = v14;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v14 < 4) {
            goto LABEL_53;
          }
          goto LABEL_55;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v14 >= 4) {
            goto LABEL_55;
          }
          goto LABEL_53;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v14 < 4) {
            goto LABEL_53;
          }
          goto LABEL_55;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v14 < 4) {
LABEL_53:
          }
            unsigned int v19 = (v22 | (v20 << (8 * v14))) + 9;
          else {
LABEL_55:
          }
            unsigned int v19 = v22 + 9;
          break;
        default:
          break;
      }
    }
    switch(v19)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v32 + 32))(a1, a2, v5);
        char v23 = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v31 + 32))(a1, a2, v7);
        char v23 = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v30 + 32))(a1, a2, v8);
        char v23 = 3;
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 32))(a1, a2, v9);
        char v23 = 4;
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 32))(a1, a2, v10);
        char v23 = 5;
        break;
      case 6u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 32))(a1, a2, v11);
        char v23 = 6;
        break;
      case 7u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 32))(a1, a2, v12);
        char v23 = 7;
        break;
      case 8u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v23 = 8;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v33 + 32))(a1, a2, v25);
        char v23 = 0;
        break;
    }
    a1[v14] = v23;
  }
  return a1;
}

uint64_t sub_1C41E8838(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  unint64_t v3 = *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  uint64_t v5 = *(void *)(a3[5] - 8);
  if (*(void *)(*(void *)(a3[4] - 8) + 64) > v3) {
    unint64_t v3 = *(void *)(*(void *)(a3[4] - 8) + 64);
  }
  if (*(void *)(v5 + 64) > v3) {
    unint64_t v3 = *(void *)(v5 + 64);
  }
  uint64_t v6 = *(void *)(a3[6] - 8);
  if (*(void *)(v6 + 64) > v3) {
    unint64_t v3 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a3[7] - 8);
  if (*(void *)(v7 + 64) > v3) {
    unint64_t v3 = *(void *)(v7 + 64);
  }
  uint64_t v8 = *(void *)(a3[8] - 8);
  if (*(void *)(v8 + 64) > v3) {
    unint64_t v3 = *(void *)(v8 + 64);
  }
  uint64_t v9 = *(void *)(a3[9] - 8);
  if (*(void *)(v9 + 64) > v3) {
    unint64_t v3 = *(void *)(v9 + 64);
  }
  uint64_t v10 = 16;
  if (v3 > 0x10) {
    uint64_t v10 = v3;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_36;
  }
  uint64_t v11 = v10 + 1;
  char v12 = 8 * (v10 + 1);
  if ((v10 + 1) <= 3)
  {
    unsigned int v15 = ((a2 + ~(-1 << v12) - 247) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_36;
      }
      goto LABEL_28;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_36;
      }
      goto LABEL_28;
    }
    if (v15 < 2)
    {
LABEL_36:
      unsigned int v17 = *((unsigned __int8 *)a1 + v10);
      if (v17 >= 9) {
        return (v17 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_36;
  }
LABEL_28:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v11 | v16) + 248;
}

void sub_1C41E8A44(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  unint64_t v5 = *(void *)(*(void *)(a4[2] - 8) + 64);
  if (*(void *)(*(void *)(a4[3] - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(a4[3] - 8) + 64);
  }
  uint64_t v6 = *(void *)(a4[4] - 8);
  if (*(void *)(v6 + 64) > v5) {
    unint64_t v5 = *(void *)(v6 + 64);
  }
  uint64_t v7 = *(void *)(a4[5] - 8);
  if (*(void *)(v7 + 64) > v5) {
    unint64_t v5 = *(void *)(v7 + 64);
  }
  uint64_t v8 = *(void *)(a4[7] - 8);
  if (*(void *)(*(void *)(a4[6] - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(a4[6] - 8) + 64);
  }
  if (*(void *)(v8 + 64) > v5) {
    unint64_t v5 = *(void *)(v8 + 64);
  }
  uint64_t v9 = *(void *)(a4[8] - 8);
  if (*(void *)(v9 + 64) > v5) {
    unint64_t v5 = *(void *)(v9 + 64);
  }
  uint64_t v10 = *(void *)(a4[9] - 8);
  if (*(void *)(v10 + 64) > v5) {
    unint64_t v5 = *(void *)(v10 + 64);
  }
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v11 = v5 + 1;
  if (a3 < 0xF8)
  {
    int v12 = 0;
  }
  else if (v11 <= 3)
  {
    unsigned int v15 = ((a3 + ~(-1 << (8 * v11)) - 247) >> (8 * v11)) + 1;
    if (HIWORD(v15))
    {
      int v12 = 4;
    }
    else if (v15 >= 0x100)
    {
      int v12 = 2;
    }
    else
    {
      int v12 = v15 > 1;
    }
  }
  else
  {
    int v12 = 1;
  }
  if (a2 > 0xF7)
  {
    unsigned int v13 = a2 - 248;
    if (v11 < 4)
    {
      int v14 = (v13 >> (8 * v11)) + 1;
      if (v5 != -1)
      {
        int v16 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v11] = v14;
        break;
      case 2:
        *(_WORD *)&a1[v11] = v14;
        break;
      case 3:
LABEL_48:
        __break(1u);
        JUMPOUT(0x1C41E8CE4);
      case 4:
        *(_DWORD *)&a1[v11] = v14;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v12)
    {
      case 1:
        a1[v11] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_37;
      case 2:
        *(_WORD *)&a1[v11] = 0;
        goto LABEL_36;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v11] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_37;
      default:
LABEL_36:
        if (a2) {
LABEL_37:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t type metadata accessor for TaggedValue_8()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C41E8D24()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        uint64_t result = swift_checkMetadataState();
        if (v4 <= 0x3F)
        {
          uint64_t result = swift_checkMetadataState();
          if (v5 <= 0x3F)
          {
            uint64_t result = swift_checkMetadataState();
            if (v6 <= 0x3F)
            {
              uint64_t result = swift_checkMetadataState();
              if (v7 <= 0x3F)
              {
                uint64_t result = swift_checkMetadataState();
                if (v8 <= 0x3F)
                {
                  swift_initEnumMetadataMultiPayload();
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void *sub_1C41E8F78(void *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  uint64_t v5 = *(void *)(a3[3] - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    unint64_t v6 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = *(void *)(a3[4] - 8);
  if (*(void *)(v7 + 64) <= v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = *(void *)(v7 + 64);
  }
  uint64_t v9 = *(void *)(a3[5] - 8);
  if (*(void *)(v9 + 64) <= v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = *(void *)(v9 + 64);
  }
  uint64_t v11 = *(void *)(a3[6] - 8);
  if (*(void *)(v11 + 64) <= v10) {
    unint64_t v12 = v10;
  }
  else {
    unint64_t v12 = *(void *)(v11 + 64);
  }
  uint64_t v13 = *(void *)(a3[7] - 8);
  uint64_t v14 = a3[8];
  if (*(void *)(v13 + 64) > v12) {
    unint64_t v12 = *(void *)(v13 + 64);
  }
  uint64_t v15 = *(void *)(v14 - 8);
  if (*(void *)(v15 + 64) > v12) {
    unint64_t v12 = *(void *)(*(void *)(v14 - 8) + 64);
  }
  uint64_t v16 = *(void *)(a3[9] - 8);
  unint64_t v17 = *(void *)(v16 + 64);
  if (v17 <= v12) {
    unint64_t v17 = v12;
  }
  if (v17 <= 0x10) {
    uint64_t v18 = 16;
  }
  else {
    uint64_t v18 = v17;
  }
  int v19 = *(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80) | *(_DWORD *)(v11 + 80) | *(_DWORD *)(v13 + 80) | *(_DWORD *)(v15 + 80) | *(_DWORD *)(v16 + 80);
  if ((unint64_t)(v18 + 1) <= 0x18 && (v19 & 0x1000F8) == 0)
  {
    unsigned int v23 = a2[v18];
    unsigned int v24 = v23 - 9;
    if (v23 >= 9)
    {
      if (v18 <= 3) {
        uint64_t v25 = v18;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *a2;
          if (v18 < 4) {
            goto LABEL_41;
          }
          goto LABEL_42;
        case 2:
          int v26 = *(unsigned __int16 *)a2;
          if (v18 >= 4) {
            goto LABEL_42;
          }
          goto LABEL_41;
        case 3:
          int v26 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v18 >= 4) {
            goto LABEL_42;
          }
          goto LABEL_41;
        case 4:
          int v26 = *(_DWORD *)a2;
          if (v18 < 4) {
LABEL_41:
          }
            v26 |= v24 << (8 * v18);
LABEL_42:
          unsigned int v23 = v26 + 9;
          break;
        default:
          break;
      }
    }
    switch(v23)
    {
      case 1u:
        (*(void (**)(void *))(v5 + 16))(a1);
        *((unsigned char *)a1 + v18) = 1;
        break;
      case 2u:
        (*(void (**)(void *))(v7 + 16))(a1);
        *((unsigned char *)a1 + v18) = 2;
        break;
      case 3u:
        (*(void (**)(void *))(v9 + 16))(a1);
        *((unsigned char *)a1 + v18) = 3;
        break;
      case 4u:
        (*(void (**)(void *))(v11 + 16))(a1);
        *((unsigned char *)a1 + v18) = 4;
        break;
      case 5u:
        (*(void (**)(void *))(v13 + 16))(a1);
        *((unsigned char *)a1 + v18) = 5;
        break;
      case 6u:
        (*(void (**)(void *))(v15 + 16))(a1);
        *((unsigned char *)a1 + v18) = 6;
        break;
      case 7u:
        (*(void (**)(void *))(v16 + 16))(a1);
        *((unsigned char *)a1 + v18) = 7;
        break;
      case 8u:
        uint64_t v27 = *((void *)a2 + 1);
        *a1 = *(void *)a2;
        a1[1] = v27;
        *((unsigned char *)a1 + v18) = 8;
        goto LABEL_27;
      default:
        (*(void (**)(void *))(v4 + 16))(a1);
        *((unsigned char *)a1 + v18) = 0;
        break;
    }
  }
  else
  {
    uint64_t v21 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v21 + (((v19 & 0xF8 | 7u) + 16) & ~(unint64_t)(v19 & 0xF8 | 7u)));
LABEL_27:
    swift_retain();
  }
  return a1;
}

uint64_t sub_1C41E94B8(unsigned __int8 *a1, void *a2)
{
  uint64_t v22 = *(void *)(a2[3] - 8);
  if (*(void *)(v22 + 64) <= *(void *)(*(void *)(a2[2] - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(a2[2] - 8) + 64);
  }
  else {
    unint64_t v3 = *(void *)(v22 + 64);
  }
  uint64_t v4 = *(void *)(a2[4] - 8);
  if (*(void *)(v4 + 64) <= v3) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = *(void *)(a2[5] - 8);
  if (*(void *)(v6 + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(v6 + 64);
  }
  uint64_t v8 = *(void *)(a2[6] - 8);
  if (*(void *)(v8 + 64) > v7) {
    unint64_t v7 = *(void *)(v8 + 64);
  }
  if (*(void *)(*(void *)(a2[7] - 8) + 64) <= v7) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(a2[7] - 8) + 64);
  }
  uint64_t v10 = a2[8];
  uint64_t v11 = a2[9];
  if (*(void *)(*(void *)(v10 - 8) + 64) <= v9) {
    unint64_t v12 = v9;
  }
  else {
    unint64_t v12 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  unint64_t v13 = *(void *)(*(void *)(v11 - 8) + 64);
  if (v13 <= v12) {
    unint64_t v13 = v12;
  }
  if (v13 <= 0x10) {
    unint64_t v13 = 16;
  }
  unsigned int v14 = a1[v13];
  if (v14 >= 9)
  {
    if (v13 <= 3) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a1;
        goto LABEL_31;
      case 2:
        int v16 = *(unsigned __int16 *)a1;
        goto LABEL_31;
      case 3:
        int v16 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_31;
      case 4:
        int v16 = *(_DWORD *)a1;
LABEL_31:
        int v17 = (v16 | ((v14 - 9) << (8 * v13))) + 9;
        unsigned int v18 = v16 + 9;
        if (v13 >= 4) {
          unsigned int v14 = v18;
        }
        else {
          unsigned int v14 = v17;
        }
        break;
      default:
        break;
    }
  }
  switch(v14)
  {
    case 1u:
      int v19 = *(uint64_t (**)(void))(v22 + 8);
      goto LABEL_53;
    case 2u:
      int v19 = *(uint64_t (**)(void))(v4 + 8);
      return v19();
    case 3u:
      int v19 = *(uint64_t (**)(void))(v6 + 8);
      return v19();
    case 4u:
      int v19 = *(uint64_t (**)(void))(v8 + 8);
      return v19();
    case 5u:
      int v19 = *(uint64_t (**)(void))(*(void *)(a2[7] - 8) + 8);
      return v19();
    case 6u:
      unsigned int v20 = *(uint64_t (**)(void))(*(void *)(v10 - 8) + 8);
      return v20();
    case 7u:
      int v19 = *(uint64_t (**)(void))(*(void *)(v11 - 8) + 8);
      goto LABEL_53;
    case 8u:
      return swift_release();
    default:
      int v19 = *(uint64_t (**)(void))(*(void *)(a2[2] - 8) + 8);
LABEL_53:
      return v19();
  }
}

void *sub_1C41E9940(void *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = *(void *)(a3[4] - 8);
  if (*(void *)(v6 + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(v6 + 64);
  }
  uint64_t v8 = *(void *)(a3[5] - 8);
  if (*(void *)(v8 + 64) <= v7) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = *(void *)(v8 + 64);
  }
  uint64_t v10 = *(void *)(a3[6] - 8);
  if (*(void *)(v10 + 64) > v9) {
    unint64_t v9 = *(void *)(v10 + 64);
  }
  if (*(void *)(*(void *)(a3[7] - 8) + 64) <= v9) {
    unint64_t v11 = v9;
  }
  else {
    unint64_t v11 = *(void *)(*(void *)(a3[7] - 8) + 64);
  }
  uint64_t v12 = a3[8];
  uint64_t v13 = a3[9];
  if (*(void *)(*(void *)(v12 - 8) + 64) > v11) {
    unint64_t v11 = *(void *)(*(void *)(v12 - 8) + 64);
  }
  unint64_t v14 = *(void *)(*(void *)(v13 - 8) + 64);
  if (v14 <= v11) {
    unint64_t v14 = v11;
  }
  if (v14 <= 0x10) {
    uint64_t v15 = 16;
  }
  else {
    uint64_t v15 = v14;
  }
  unsigned int v16 = a2[v15];
  unsigned int v17 = v16 - 9;
  if (v16 >= 9)
  {
    if (v15 <= 3) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *a2;
        goto LABEL_31;
      case 2:
        int v19 = *(unsigned __int16 *)a2;
        goto LABEL_31;
      case 3:
        int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_31;
      case 4:
        int v19 = *(_DWORD *)a2;
LABEL_31:
        int v20 = (v19 | (v17 << (8 * v15))) + 9;
        unsigned int v16 = v19 + 9;
        if (v15 < 4) {
          unsigned int v16 = v20;
        }
        break;
      default:
        break;
    }
  }
  switch(v16)
  {
    case 1u:
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)a1 + v15) = 1;
      break;
    case 2u:
      (*(void (**)(void *))(v6 + 16))(a1);
      *((unsigned char *)a1 + v15) = 2;
      break;
    case 3u:
      (*(void (**)(void *))(v8 + 16))(a1);
      *((unsigned char *)a1 + v15) = 3;
      break;
    case 4u:
      (*(void (**)(void *))(v10 + 16))(a1);
      *((unsigned char *)a1 + v15) = 4;
      break;
    case 5u:
      (*(void (**)(void *))(*(void *)(a3[7] - 8) + 16))(a1);
      *((unsigned char *)a1 + v15) = 5;
      break;
    case 6u:
      (*(void (**)(void *))(*(void *)(v12 - 8) + 16))(a1);
      *((unsigned char *)a1 + v15) = 6;
      break;
    case 7u:
      (*(void (**)(void *))(*(void *)(v13 - 8) + 16))(a1);
      *((unsigned char *)a1 + v15) = 7;
      break;
    case 8u:
      uint64_t v21 = *((void *)a2 + 1);
      *a1 = *(void *)a2;
      a1[1] = v21;
      *((unsigned char *)a1 + v15) = 8;
      swift_retain();
      break;
    default:
      (*(void (**)(void *))(*(void *)(a3[2] - 8) + 16))(a1);
      *((unsigned char *)a1 + v15) = 0;
      break;
  }
  return a1;
}

unsigned __int8 *sub_1C41E9DF8(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[3];
    uint64_t v32 = *(void *)(a3[2] - 8);
    unint64_t v6 = *(void *)(v32 + 64);
    uint64_t v31 = *(void *)(v5 - 8);
    if (*(void *)(v31 + 64) > v6) {
      unint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
    }
    uint64_t v7 = a3[4];
    uint64_t v8 = a3[5];
    uint64_t v30 = *(void *)(v7 - 8);
    if (*(void *)(v30 + 64) > v6) {
      unint64_t v6 = *(void *)(v30 + 64);
    }
    uint64_t v29 = *(void *)(v8 - 8);
    if (*(void *)(v29 + 64) > v6) {
      unint64_t v6 = *(void *)(*(void *)(v8 - 8) + 64);
    }
    uint64_t v9 = a3[6];
    uint64_t v10 = a3[7];
    uint64_t v28 = *(void *)(v9 - 8);
    if (*(void *)(v28 + 64) > v6) {
      unint64_t v6 = *(void *)(v28 + 64);
    }
    uint64_t v27 = *(void *)(v10 - 8);
    if (*(void *)(v27 + 64) > v6) {
      unint64_t v6 = *(void *)(*(void *)(v10 - 8) + 64);
    }
    uint64_t v11 = a3[8];
    uint64_t v12 = a3[9];
    uint64_t v26 = *(void *)(v11 - 8);
    if (*(void *)(v26 + 64) > v6) {
      unint64_t v6 = *(void *)(v26 + 64);
    }
    uint64_t v25 = *(void *)(v12 - 8);
    unint64_t v13 = *(void *)(v25 + 64);
    if (v13 <= v6) {
      unint64_t v13 = v6;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 9;
    if (v15 >= 9)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 < 4) {
            goto LABEL_31;
          }
          goto LABEL_32;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 >= 4) {
            goto LABEL_32;
          }
          goto LABEL_31;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 >= 4) {
            goto LABEL_32;
          }
          goto LABEL_31;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_31:
          }
            v18 |= v16 << (8 * v14);
LABEL_32:
          unsigned int v15 = v18 + 9;
          break;
        default:
          break;
      }
    }
    uint64_t v24 = a3[2];
    switch(v15)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v31 + 8))(a1, v5);
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v30 + 8))(a1, v7);
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v29 + 8))(a1, v8);
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v28 + 8))(a1, v9);
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v27 + 8))(a1, v10);
        break;
      case 6u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v26 + 8))(a1, v11);
        break;
      case 7u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v25 + 8))(a1, v12);
        break;
      case 8u:
        swift_release();
        break;
      default:
        (*(void (**)(unsigned __int8 *, void))(v32 + 8))(a1, a3[2]);
        break;
    }
    unsigned int v19 = a2[v14];
    unsigned int v20 = v19 - 9;
    if (v19 >= 9)
    {
      if (v14 <= 3) {
        uint64_t v21 = v14;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v14 < 4) {
            goto LABEL_53;
          }
          goto LABEL_55;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v14 >= 4) {
            goto LABEL_55;
          }
          goto LABEL_53;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v14 < 4) {
            goto LABEL_53;
          }
          goto LABEL_55;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v14 < 4) {
LABEL_53:
          }
            unsigned int v19 = (v22 | (v20 << (8 * v14))) + 9;
          else {
LABEL_55:
          }
            unsigned int v19 = v22 + 9;
          break;
        default:
          break;
      }
    }
    switch(v19)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v31 + 16))(a1, a2, v5);
        a1[v14] = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v30 + 16))(a1, a2, v7);
        a1[v14] = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 16))(a1, a2, v8);
        a1[v14] = 3;
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 16))(a1, a2, v9);
        a1[v14] = 4;
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 16))(a1, a2, v10);
        a1[v14] = 5;
        break;
      case 6u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 16))(a1, a2, v11);
        a1[v14] = 6;
        break;
      case 7u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 16))(a1, a2, v12);
        a1[v14] = 7;
        break;
      case 8u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        a1[v14] = 8;
        swift_retain();
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v32 + 16))(a1, a2, v24);
        a1[v14] = 0;
        break;
    }
  }
  return a1;
}

_OWORD *sub_1C41EA51C(_OWORD *a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[3] - 8);
  if (*(void *)(v4 + 64) <= *(void *)(*(void *)(a3[2] - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  uint64_t v6 = *(void *)(a3[4] - 8);
  if (*(void *)(v6 + 64) <= v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = *(void *)(v6 + 64);
  }
  uint64_t v8 = *(void *)(a3[5] - 8);
  if (*(void *)(v8 + 64) <= v7) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = *(void *)(v8 + 64);
  }
  uint64_t v10 = *(void *)(a3[6] - 8);
  if (*(void *)(v10 + 64) > v9) {
    unint64_t v9 = *(void *)(v10 + 64);
  }
  if (*(void *)(*(void *)(a3[7] - 8) + 64) <= v9) {
    unint64_t v11 = v9;
  }
  else {
    unint64_t v11 = *(void *)(*(void *)(a3[7] - 8) + 64);
  }
  uint64_t v12 = a3[8];
  uint64_t v13 = a3[9];
  if (*(void *)(*(void *)(v12 - 8) + 64) > v11) {
    unint64_t v11 = *(void *)(*(void *)(v12 - 8) + 64);
  }
  unint64_t v14 = *(void *)(*(void *)(v13 - 8) + 64);
  if (v14 <= v11) {
    unint64_t v14 = v11;
  }
  if (v14 <= 0x10) {
    uint64_t v15 = 16;
  }
  else {
    uint64_t v15 = v14;
  }
  unsigned int v16 = a2[v15];
  unsigned int v17 = v16 - 9;
  if (v16 >= 9)
  {
    if (v15 <= 3) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *a2;
        goto LABEL_31;
      case 2:
        int v19 = *(unsigned __int16 *)a2;
        goto LABEL_31;
      case 3:
        int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_31;
      case 4:
        int v19 = *(_DWORD *)a2;
LABEL_31:
        int v20 = (v19 | (v17 << (8 * v15))) + 9;
        unsigned int v16 = v19 + 9;
        if (v15 < 4) {
          unsigned int v16 = v20;
        }
        break;
      default:
        break;
    }
  }
  switch(v16)
  {
    case 1u:
      (*(void (**)(_OWORD *))(v4 + 32))(a1);
      char v21 = 1;
      break;
    case 2u:
      (*(void (**)(_OWORD *))(v6 + 32))(a1);
      char v21 = 2;
      break;
    case 3u:
      (*(void (**)(_OWORD *))(v8 + 32))(a1);
      char v21 = 3;
      break;
    case 4u:
      (*(void (**)(_OWORD *))(v10 + 32))(a1);
      char v21 = 4;
      break;
    case 5u:
      (*(void (**)(_OWORD *))(*(void *)(a3[7] - 8) + 32))(a1);
      char v21 = 5;
      break;
    case 6u:
      (*(void (**)(_OWORD *))(*(void *)(v12 - 8) + 32))(a1);
      char v21 = 6;
      break;
    case 7u:
      (*(void (**)(_OWORD *))(*(void *)(v13 - 8) + 32))(a1);
      char v21 = 7;
      break;
    case 8u:
      *a1 = *(_OWORD *)a2;
      char v21 = 8;
      break;
    default:
      (*(void (**)(_OWORD *))(*(void *)(a3[2] - 8) + 32))(a1);
      char v21 = 0;
      break;
  }
  *((unsigned char *)a1 + v15) = v21;
  return a1;
}

unsigned __int8 *sub_1C41EA9B4(unsigned __int8 *a1, unsigned __int8 *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a3[3];
    uint64_t v33 = *(void *)(a3[2] - 8);
    unint64_t v6 = *(void *)(v33 + 64);
    uint64_t v32 = *(void *)(v5 - 8);
    if (*(void *)(v32 + 64) > v6) {
      unint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
    }
    uint64_t v7 = a3[4];
    uint64_t v8 = a3[5];
    uint64_t v31 = *(void *)(v7 - 8);
    if (*(void *)(v31 + 64) > v6) {
      unint64_t v6 = *(void *)(v31 + 64);
    }
    uint64_t v30 = *(void *)(v8 - 8);
    if (*(void *)(v30 + 64) > v6) {
      unint64_t v6 = *(void *)(*(void *)(v8 - 8) + 64);
    }
    uint64_t v9 = a3[6];
    uint64_t v10 = a3[7];
    uint64_t v29 = *(void *)(v9 - 8);
    if (*(void *)(v29 + 64) > v6) {
      unint64_t v6 = *(void *)(v29 + 64);
    }
    uint64_t v28 = *(void *)(v10 - 8);
    if (*(void *)(v28 + 64) > v6) {
      unint64_t v6 = *(void *)(*(void *)(v10 - 8) + 64);
    }
    uint64_t v11 = a3[8];
    uint64_t v12 = a3[9];
    uint64_t v27 = *(void *)(v11 - 8);
    if (*(void *)(v27 + 64) > v6) {
      unint64_t v6 = *(void *)(v27 + 64);
    }
    uint64_t v26 = *(void *)(v12 - 8);
    unint64_t v13 = *(void *)(v26 + 64);
    if (v13 <= v6) {
      unint64_t v13 = v6;
    }
    if (v13 <= 0x10) {
      uint64_t v14 = 16;
    }
    else {
      uint64_t v14 = v13;
    }
    unsigned int v15 = a1[v14];
    unsigned int v16 = v15 - 9;
    if (v15 >= 9)
    {
      if (v14 <= 3) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a1;
          if (v14 < 4) {
            goto LABEL_31;
          }
          goto LABEL_32;
        case 2:
          int v18 = *(unsigned __int16 *)a1;
          if (v14 >= 4) {
            goto LABEL_32;
          }
          goto LABEL_31;
        case 3:
          int v18 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v14 >= 4) {
            goto LABEL_32;
          }
          goto LABEL_31;
        case 4:
          int v18 = *(_DWORD *)a1;
          if (v14 < 4) {
LABEL_31:
          }
            v18 |= v16 << (8 * v14);
LABEL_32:
          unsigned int v15 = v18 + 9;
          break;
        default:
          break;
      }
    }
    uint64_t v25 = a3[2];
    switch(v15)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v32 + 8))(a1, v5);
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v31 + 8))(a1, v7);
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v30 + 8))(a1, v8);
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v29 + 8))(a1, v9);
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v28 + 8))(a1, v10);
        break;
      case 6u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v27 + 8))(a1, v11);
        break;
      case 7u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v26 + 8))(a1, v12);
        break;
      case 8u:
        swift_release();
        break;
      default:
        (*(void (**)(unsigned __int8 *, void))(v33 + 8))(a1, a3[2]);
        break;
    }
    unsigned int v19 = a2[v14];
    unsigned int v20 = v19 - 9;
    if (v19 >= 9)
    {
      if (v14 <= 3) {
        uint64_t v21 = v14;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v14 < 4) {
            goto LABEL_53;
          }
          goto LABEL_55;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v14 >= 4) {
            goto LABEL_55;
          }
          goto LABEL_53;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v14 < 4) {
            goto LABEL_53;
          }
          goto LABEL_55;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v14 < 4) {
LABEL_53:
          }
            unsigned int v19 = (v22 | (v20 << (8 * v14))) + 9;
          else {
LABEL_55:
          }
            unsigned int v19 = v22 + 9;
          break;
        default:
          break;
      }
    }
    switch(v19)
    {
      case 1u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v32 + 32))(a1, a2, v5);
        char v23 = 1;
        break;
      case 2u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v31 + 32))(a1, a2, v7);
        char v23 = 2;
        break;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v30 + 32))(a1, a2, v8);
        char v23 = 3;
        break;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v29 + 32))(a1, a2, v9);
        char v23 = 4;
        break;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v28 + 32))(a1, a2, v10);
        char v23 = 5;
        break;
      case 6u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v27 + 32))(a1, a2, v11);
        char v23 = 6;
        break;
      case 7u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v26 + 32))(a1, a2, v12);
        char v23 = 7;
        break;
      case 8u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v23 = 8;
        break;
      default:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v33 + 32))(a1, a2, v25);
        char v23 = 0;
        break;
    }
    a1[v14] = v23;
  }
  return a1;
}