uint64_t __swift_get_extra_inhabitant_index_233Tm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  char *v11;
  uint64_t vars8;

  if (a2 == 0x7FFFFFFF)
  {
    v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1C4496898();
    v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    v10 = v8;
    v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1C3F50CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_234Tm_5);
}

uint64_t sub_1C3F50CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_233Tm_5);
}

void *__swift_store_extra_inhabitant_index_234Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1C4496898();
    v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CRVersion(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C3F50DF8()
{
  return sub_1C3F5E2CC(&OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf, &qword_1EBBBF8A0);
}

uint64_t sub_1C3F50E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_231Tm_22);
}

uint64_t sub_1C3F50E20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C3F5F23C(a1, &qword_1EBBBF8C8, &qword_1EBBBF8B8, a2);
}

uint64_t getEnumTagSinglePayload for Renames(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t destroy for CRKeyPath(uint64_t a1)
{
  return sub_1C3F7E2CC(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t storeEnumTagSinglePayload for Renames(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CRStructCodingKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1C3F50F28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_231Tm_29);
}

uint64_t sub_1C3F50F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_230Tm_29);
}

uint64_t sub_1C3F50F50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C3F5F23C(a1, &qword_1EBBBC0C0, &qword_1EBBBC0B8, a2);
}

uint64_t sub_1C3F50F74()
{
  return sub_1C3F5E2CC(&OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf, &qword_1EBBC0648);
}

uint64_t sub_1C3F50F88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C3F5F23C(a1, &qword_1EBBBF1E0, &qword_1EBBBF1D8, a2);
}

uint64_t sub_1C3F50FB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C3F5F23C(a1, &qword_1EBBC0668, &qword_1EBBC0660, a2);
}

uint64_t CREncoder.CRValueContainer.__deallocating_deinit()
{
  return sub_1C3F5B0D8(&OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value, type metadata accessor for Proto_Value);
}

uint64_t CRDecoder.CRValueContainer.__deallocating_deinit()
{
  return sub_1C3F554DC();
}

uint64_t sub_1C3F51004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C3F5F23C(a1, &qword_1EBBC0328, &qword_1EBBC05C0, a2);
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t destroy for Renames()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C3F510C4()
{
  return sub_1C3F5C1A4((void (*)(void))sub_1C3F703F8);
}

ValueMetadata *type metadata accessor for AssetActor.Item()
{
  return &type metadata for AssetActor.Item;
}

uint64_t sub_1C3F510EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C3F5F23C(a1, &qword_1EBBC01E8, &qword_1EBBC01E0, a2);
}

uint64_t CREncoder.CRDTContainer.__deallocating_deinit()
{
  return sub_1C3F5B0D8(&OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt, type metadata accessor for Proto_CRDT);
}

uint64_t Capsule.Ref.__deallocating_deinit()
{
  return sub_1C3F5C1A4((void (*)(void))Capsule.Ref.deinit);
}

uint64_t storeEnumTagSinglePayload for CRStructCodingKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1C3F51188@<X0>(unsigned char *a1@<X8>)
{
  return sub_1C3F511A4(v1, a1);
}

uint64_t sub_1C3F511A4@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 16);
  return result;
}

uint64_t sub_1C3F511B0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C3F511D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C3F5F23C(a1, &qword_1EBBBC060, &qword_1EBBBC058, a2);
}

uint64_t sub_1C3F511F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C3F5F23C(a1, &qword_1EBBBC818, &qword_1EBBBC808, a2);
}

uint64_t sub_1C3F51238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t sub_1C3F51240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C3F5F23C(a1, &qword_1EBBBC000, &qword_1EBBBBFF0, a2);
}

ValueMetadata *type metadata accessor for AnyCRValue()
{
  return &type metadata for AnyCRValue;
}

uint64_t storeEnumTagSinglePayload for CRKeyPath(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRKeyPath()
{
  return &type metadata for CRKeyPath;
}

uint64_t sub_1C3F512E8()
{
  return 1;
}

uint64_t Capsule<>.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F6B204(a1, a2, a3, (void (*)(uint64_t))Capsule.Ref<>.root.getter);
}

{
  return sub_1C3F6B204(a1, a2, a3, (void (*)(uint64_t))Capsule.Ref<>.root.getter);
}

uint64_t sub_1C3F5130C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 48);
}

unsigned char *sub_1C3F51314(unsigned char *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CRCodableVersion()
{
  return &type metadata for CRCodableVersion;
}

uint64_t destroy for CRStructDecoder.UnkeyedContainer()
{
  return swift_release();
}

uint64_t sub_1C3F51334@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C3F5F23C(a1, &qword_1EBBBF248, &qword_1EBBBF238, a2);
}

uint64_t type metadata accessor for CRAssetManager(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0948);
}

uint64_t sub_1C3F51378()
{
  return sub_1C3F56480();
}

uint64_t CRMaxRegister.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t CROrderedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3F5C408(a1, 0, 1, a2, a3, a4);
}

uint64_t type metadata accessor for CRRegister()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C3F51400(uint64_t a1)
{
  return sub_1C3F53AE8(a1, *(void *)(v1 + 16));
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_1C3F5144C(uint64_t a1)
{
  return sub_1C3F51474(a1, *v1) & 1;
}

uint64_t sub_1C3F51474(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1C44986B8();
  if (v4)
  {
    char v5 = 1;
    return v5 & 1;
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
    char v5 = sub_1C3F5152C(v3, *(void *)(a2 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value)) ^ 1;
    return v5 & 1;
  }
  uint64_t result = sub_1C4497F48();
  __break(1u);
  return result;
}

uint64_t sub_1C3F5152C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t CRStruct_2.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1C3FBA03C(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t))CRStruct_2.decode(fields:), a4);
}

uint64_t CRStruct_1.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1C3FBA03C(a1, a2, a3, (void (*)(void *, uint64_t, uint64_t))CRStruct_1.decode(fields:), a4);
}

uint64_t CRValue.init(serializedData:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1C3FACBD8(a1, a2, a3, a4, (void (*)(uint64_t, char *, uint64_t, uint64_t))sub_1C3FB1298, a5);
}

uint64_t sub_1C3F51614()
{
  uint64_t result = sub_1C4496898();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C3F516B0(uint64_t a1, unint64_t a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = v7;
  v22[1] = *MEMORY[0x1E4F143B8];
  *(void *)(v7 + 24) = a2;
  *(void *)(v7 + 32) = 0;
  *(unsigned char *)(v7 + 40) = 0;
  *(_WORD *)(v7 + 64) = 0;
  *(unsigned char *)(v7 + 66) = 1;
  *(_WORD *)(v7 + 68) = 0;
  *(unsigned char *)(v7 + 70) = 1;
  *(void *)(v7 + 72) = 0;
  *(void *)(v7 + 80) = -1;
  *(void *)(v7 + 16) = a1;
  *(unsigned char *)(v7 + 41) = a3;
  *(unsigned char *)(v7 + 42) = a4;
  *(void *)(v7 + 48) = a7;
  *(void *)(v7 + 56) = a6;
  swift_bridgeObjectRetain();
  sub_1C3F5B2F8();
  if (v8)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  else if ((a5 & 1) != 0 {
         && (char value = -1,
  }
             uint64_t v13 = sub_1C4497238(),
             int v14 = setxattr((const char *)(v13 + 32), "com.apple.runningboard.can-suspend-locked", &value, 1uLL, 0, 0),
             swift_release(),
             v14 < 0))
  {
    if (qword_1EBBBC338 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_1C4496C58();
    __swift_project_value_buffer(v16, (uint64_t)qword_1EBBC5938);
    swift_bridgeObjectRetain();
    v17 = sub_1C4496C38();
    os_log_type_t v18 = sub_1C44979C8();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      v22[0] = v20;
      *(_DWORD *)uint64_t v19 = 67109378;
      sub_1C4497B68();
      *(_WORD *)(v19 + 8) = 2080;
      swift_bridgeObjectRetain();
      sub_1C43BE154(a1, a2, v22);
      sub_1C4497B68();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C3F4F000, v17, v18, "%d: Could not set file lock exception attribute at %s", (uint8_t *)v19, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x1C8782060](v20, -1, -1);
      MEMORY[0x1C8782060](v19, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t sub_1C3F51968(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  char v10 = *a2;
  type metadata accessor for CREncoder();
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t v13 = MEMORY[0x1E4FBC868];
  *(void *)(v11 + 32) = MEMORY[0x1E4FBC868];
  *(void *)(v11 + 40) = v12;
  *(void *)(v11 + 48) = v12;
  *(void *)(v11 + 56) = v13;
  *(void *)(v11 + 64) = v12;
  *(void *)(v11 + 80) = 0;
  *(void *)(v11 + 88) = 0;
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = v12;
  *(unsigned char *)(v11 + 72) = v10;
  id v14 = a1;
  uint64_t v15 = a5(v5, a3, a4);
  swift_release();
  return v15;
}

uint64_t sub_1C3F51A30()
{
  uint64_t result = sub_1C4496678();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C3F51ACC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1C3F70B40(0, &v7);
  uint64_t v3 = v7;
  uint64_t v4 = v8;
  if (*(void *)(v8 + 16) || *(void *)(v7 + 16))
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 288))(v2);
    uint64_t v1 = v5;
    if (qword_1EBBC10F0 != -1) {
      uint64_t v5 = swift_once();
    }
    MEMORY[0x1F4188790](v5);
    swift_retain();
    sub_1C4497A58();
    swift_release();
    sub_1C43834CC(v7, v8, v9, 1);
    swift_bridgeObjectRelease();
    uint64_t v7 = v3;
    uint64_t v8 = v4;
    swift_retain();
    sub_1C3F70918((uint64_t)&v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_1C3F51C88(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1C40185EC;
  BOOL v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EA3A14C8 + dword_1EA3A14C8);
  return v6(a1, v4);
}

uint64_t sub_1C3F51D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t, uint64_t), uint64_t (*a6)(uint64_t, uint64_t))
{
  v21 = a6;
  uint64_t v9 = v6;
  uint64_t v13 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v9 + 16);
  uint64_t v17 = a5(0, a2, a3, a4);
  uint64_t result = v21(v16, v17);
  if (!v7)
  {
    uint64_t v19 = v9 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
    swift_beginAccess();
    sub_1C3FBD334((uint64_t)v15, v19, type metadata accessor for Proto_CRDT);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1C3F51E78()
{
  uint64_t result = sub_1C4496898();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C3F51F0C()
{
  return sub_1C44983E8();
}

uint64_t sub_1C3F51F38(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = sub_1C4496498();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  char v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  int v48 = a2;
  uint64_t v12 = sub_1C4497FC8();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  uint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (uint64_t i = v13; ; v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
      swift_retain();
    }
    sub_1C3FA180C(&qword_1EBBBCA80, MEMORY[0x1E4F276F0]);
    uint64_t result = sub_1C4497078();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v5 = v14;
  return result;
}

uint64_t CROrderedSet.encode(to:)(uint64_t a1, void *a2)
{
  uint64_t result = sub_1C3F62C10();
  if (!v3)
  {
    uint64_t v6 = a2[2];
    uint64_t v7 = a2[3];
    uint64_t v8 = a2[4];
    swift_retain();
    sub_1C3FBC9A0(v2, v6, v7, v8);
    return swift_release();
  }
  return result;
}

void sub_1C3F52438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C3F5253C()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t type metadata accessor for CRAssetWatchedDirectory()
{
  return self;
}

void *sub_1C3F52604(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0818);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

void *_s9Coherence28PartiallyOrderedReferenceMapV6BeforeVwCP_0(void *a1, void *a2)
{
  if (*a2)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

const char *sub_1C3F526D0()
{
  uint64_t result = sub_1C3F5FA40();
  if (!v1)
  {
    uint64_t v3 = (sqlite3_stmt *)result;
    do
      int v4 = sqlite3_step(v3);
    while (v4 == 100);
    if (v4 != 101)
    {
      sub_1C4497D28();
      swift_bridgeObjectRelease();
      strcpy((char *)v7, "App ID setup: ");
      HIBYTE(v7[1]) = -18;
      uint64_t result = sqlite3_errmsg(*(sqlite3 **)(v0 + 32));
      if (!result)
      {
        __break(1u);
        return result;
      }
      sub_1C4497288();
      sub_1C4497268();
      swift_bridgeObjectRelease();
      sub_1C4497268();
      uint64_t v5 = v7[1];
      sub_1C3FE3570();
      swift_allocError();
      *(void *)uint64_t v6 = v7[0];
      *(void *)(v6 + 8) = v5;
      *(unsigned char *)(v6 + 16) = 0;
      swift_willThrow();
    }
    return (const char *)sqlite3_finalize(v3);
  }
  return result;
}

uint64_t sub_1C3F527F8(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  int v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *int v4 = v2;
  v4[1] = sub_1C44729F8;
  return v6(a1);
}

_OWORD *sub_1C3F528D4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_1C4496898();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

id sub_1C3F52950()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for CRSequenceEncoder(0));
  uint64_t v1 = swift_retain();
  id v2 = sub_1C3F56254(v1, (uint64_t)sub_1C3FBCEEC, 0);
  swift_release();
  return v2;
}

uint64_t sub_1C3F529B4()
{
  uint64_t result = sub_1C4496498();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C3F52AE8()
{
  uint64_t result = type metadata accessor for Proto_CRDT(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Proto_Value(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Proto_Reference(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1C3F52BE8(uint64_t a1, void (*a2)(void), void *a3, uint64_t (*a4)(void), uint64_t *a5)
{
  a2(0);
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v8 + *a3;
  uint64_t v10 = a4(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *a5 = v8;
  return result;
}

uint64_t sub_1C3F52C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F79B08(a1, a2, a3, type metadata accessor for Proto_Register, (void (*)(void))type metadata accessor for Proto_Register._StorageClass, sub_1C3FB87F8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3FB8550);
}

uint64_t sub_1C3F52CEC(void *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return sub_1C3F6D298(a1, a2, *v5, *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4);
}

uint64_t sub_1C3F52D18@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C3F66E04(v1, a1);
}

void sub_1C3F52D34()
{
  sub_1C3F52E68(319, &qword_1EBBC0500, (void (*)(uint64_t))type metadata accessor for Proto_CRDT);
  if (v0 <= 0x3F)
  {
    sub_1C3F52E68(319, &qword_1EBBC0548, (void (*)(uint64_t))type metadata accessor for Proto_Value);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1C3F52E68(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C4497B38();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C3F52EBC(uint64_t a1, char a2, void *a3, void *a4)
{
  *(unsigned char *)(a1 + 16) = a2;
  id v6 = objc_msgSend(self, sel_defaultCenter);
  id v7 = v6;
  if (*a3 != -1)
  {
    swift_once();
    id v6 = v7;
  }
  objc_msgSend(v6, sel_postNotificationName_object_, *a4, 0);
}

uint64_t destroy for PartiallyOrderedReferenceMap.Before(void *a1)
{
  if (*a1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C3F52FAC(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC09C8) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1C40182C8;
  return sub_1C3F5351C(a1, v5, v6, v7);
}

uint64_t sub_1C3F5309C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v8[9] = *a2;
  v8[2] = a4;
  v8[3] = a5;
  v8[4] = a6;
  v8[5] = a1;
  v8[6] = a3;
  type metadata accessor for CROrderedSetElement();
  type metadata accessor for CRSequence();
  type metadata accessor for Proto_Set.Element(0);
  swift_retain();
  uint64_t v6 = sub_1C3F65E34((void (*)(char *))sub_1C3F661B8, (uint64_t)v8);
  swift_release();
  return v6;
}

uint64_t sub_1C3F53160()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 280);
  uint64_t v2 = sub_1C4497B38();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F53224()
{
  sub_1C3F5332C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C3F962E0(v0 + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replica, &qword_1EBBC0778);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRContext()
{
  return self;
}

void sub_1C3F5332C()
{
  sub_1C3F5F394();
  if ((*(unsigned char *)(v0 + 40) & 1) == 0)
  {
    *(unsigned char *)(v0 + 40) = 1;
    sqlite3_finalize(*(sqlite3_stmt **)(v0 + 88));
    sqlite3_finalize(*(sqlite3_stmt **)(v0 + 96));
    sqlite3_finalize(*(sqlite3_stmt **)(v0 + 104));
    sqlite3_finalize(*(sqlite3_stmt **)(v0 + 112));
    if (sqlite3_close(*(sqlite3 **)(v0 + 32)))
    {
      sub_1C4497D28();
      swift_bridgeObjectRelease();
      sub_1C4498088();
      sub_1C4497268();
      swift_bridgeObjectRelease();
      sub_1C4497268();
      sub_1C4497F58();
      __break(1u);
    }
  }
}

uint64_t sub_1C3F53448@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  CROrderedSet.makeIterator()(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);
  return v4(v2, a1);
}

uint64_t CROrderedSet.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1C3F87134(a1);
  uint64_t v5 = *(void *)(v2 + 8);
  *a2 = v4;
  a2[1] = 0;
  a2[2] = v5;
  return swift_retain();
}

uint64_t sub_1C3F534EC@<X0>(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *a1 = MEMORY[0x1E4FBC860];
  a1[1] = v1;
  a1[2] = v1;
  return sub_1C4496888();
}

uint64_t sub_1C3F5351C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0808);
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1C3F54274, 0, 0);
}

uint64_t sub_1C3F535E0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = sub_1C4496498();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v14 = sub_1C3F54E50(a2), (v15 & 1) != 0))
  {
    uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
    uint64_t result = swift_retain();
  }
  else
  {
    v21 = a4;
    uint64_t v24 = v4;
    unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v18(v12, a3, v9);
    type metadata accessor for CRAssetManager(0);
    memset(v22, 0, sizeof(v22));
    uint64_t v23 = 0;
    uint64_t v16 = swift_allocObject();
    sub_1C3F60340((uint64_t)v12, (uint64_t)v22);
    v18(v12, a2, v9);
    a4 = v21;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v22[0] = *a1;
    *a1 = 0x8000000000000000;
    sub_1C3FBC68C(v16, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
    *a1 = *(void *)&v22[0];
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  *a4 = v16;
  return result;
}

void *sub_1C3F53864(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

char *sub_1C3F53894()
{
  uint64_t result = (char *)sqlite3_db_readonly(*(sqlite3 **)(v0 + 32), "main");
  if (!result)
  {
    uint64_t result = (char *)sub_1C3F5FA40();
    if (!v1)
    {
      unint64_t v3 = (sqlite3_stmt *)result;
      sqlite3_step((sqlite3_stmt *)result);
      if (sqlite3_column_int(v3, 0) != 2)
      {
        uint64_t v4 = (sqlite3_stmt *)sub_1C3F5FA40();
        do
          int v5 = sqlite3_step(v4);
        while (v5 == 100);
        if (v5 != 101)
        {
          sub_1C4497D28();
          swift_bridgeObjectRelease();
          uint64_t result = (char *)sqlite3_errmsg(*(sqlite3 **)(v0 + 32));
          if (!result)
          {
            __break(1u);
            return result;
          }
          sub_1C4497288();
          sub_1C4497268();
          swift_bridgeObjectRelease();
          sub_1C4497268();
          sub_1C3FE3570();
          swift_allocError();
          *(void *)uint64_t v6 = 0xD000000000000013;
          *(void *)(v6 + 8) = 0x80000001C44B0E30;
          *(unsigned char *)(v6 + 16) = 0;
          swift_willThrow();
        }
        sqlite3_finalize(v4);
      }
      return (char *)sqlite3_finalize(v3);
    }
  }
  return result;
}

uint64_t sub_1C3F53A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F97804(a1, a2, a3, (void (*)(void))type metadata accessor for Proto_Sequence, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3FAAD24);
}

uint64_t sub_1C3F53A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F97804(a1, a2, a3, (void (*)(void))type metadata accessor for Proto_Set, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3FA713C);
}

uint64_t sub_1C3F53AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F97804(a1, a2, a3, (void (*)(void))type metadata accessor for Proto_OrderedSet, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3FA8AB0);
}

uint64_t sub_1C3F53AE8(uint64_t a1, uint64_t a2)
{
  sub_1C3F962E0(a2, &qword_1EBBC09C0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09A8);
  uint64_t v7 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, a1, v4);
  int v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
  return v5(a2, 0, 1, v4);
}

uint64_t sub_1C3F53BB8()
{
  sub_1C3F7E2CC(*(void *)(v0 + 16), *(void *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F53BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F79B08(a1, a2, a3, type metadata accessor for Proto_OrderedSet, (void (*)(void))type metadata accessor for Proto_OrderedSet._StorageClass, sub_1C3F7BD98, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3F7BB58);
}

uint64_t sub_1C3F53C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F79B08(a1, a2, a3, type metadata accessor for Proto_Sequence, (void (*)(void))type metadata accessor for Proto_Sequence._StorageClass, (uint64_t (*)(uint64_t))sub_1C3F7C6CC, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3F7C2EC);
}

uint64_t sub_1C3F53CC0()
{
  swift_release();
  sub_1C3F6E720(v0 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value, type metadata accessor for Proto_CustomCRValue);
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F53D40@<X0>(void *a1@<X8>)
{
  return sub_1C3F53D5C(v1, a1);
}

uint64_t sub_1C3F53D5C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(a1 + 16);
  return result;
}

uint64_t sub_1C3F53DB4@<X0>(uint64_t a1@<X8>)
{
  v41[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1C4496498();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v9 = (char *)&v36 - v8;
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v36 - v11;
  MEMORY[0x1F4188790](v10);
  unint64_t v14 = (char *)&v36 - v13;
  if (qword_1EBBC00D8 != -1) {
    swift_once();
  }
  if (byte_1EBBBF000 == 1)
  {
    BOOL v38 = v9;
    uint64_t v39 = v6;
    uint64_t v40 = a1;
    sub_1C4496458();
    char v15 = self;
    uint64_t v16 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v37 = v3;
    for (uint64_t i = (void (**)(char *, char *, uint64_t))(v3 + 32); ; (*i)(v14, v12, v2))
    {
      id v18 = objc_msgSend(v15, sel_defaultManager);
      sub_1C4496488();
      uint64_t v19 = (void *)sub_1C4497188();
      swift_bridgeObjectRelease();
      unsigned int v20 = objc_msgSend(v18, sel_isWritableFileAtPath_, v19);

      if (!v20) {
        break;
      }
      sub_1C4496458();
      (*v16)(v14, v2);
    }
    uint64_t v23 = v38;
    sub_1C4496438();
    id v24 = objc_msgSend(v15, sel_defaultManager);
    sub_1C4496488();
    unint64_t v25 = (void *)sub_1C4497188();
    swift_bridgeObjectRelease();
    unsigned int v26 = objc_msgSend(v24, sel_isWritableFileAtPath_, v25);

    if (v26)
    {
      uint64_t v27 = v37;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v2);
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v14, v23, v2);
    }
    unint64_t v28 = v39;
    sub_1C4496428();
    id v29 = objc_msgSend(v15, sel_defaultManager);
    uint64_t v30 = (void *)sub_1C4496418();
    v41[0] = 0;
    unsigned int v31 = objc_msgSend(v29, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v30, 1, 0, v41);

    if (v31)
    {
      id v32 = v41[0];
    }
    else
    {
      id v33 = v41[0];
      unint64_t v34 = (void *)sub_1C44963A8();

      swift_willThrow();
    }
    unint64_t v35 = *v16;
    (*v16)(v23, v2);
    v35(v14, v2);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))*i)(v40, v28, v2);
  }
  else
  {
    v21 = NSTemporaryDirectory();
    sub_1C44971B8();

    sub_1C44963D8();
    return swift_bridgeObjectRelease();
  }
}

uint64_t _s9Coherence7RenamesVwCP_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1C3F54274()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC09C8);
  sub_1C4497618();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1C43CA020;
  uint64_t v2 = *(void *)(v0 + 72);
  return MEMORY[0x1F4187D58](v0 + 16, 0, 0, v2);
}

uint64_t sub_1C3F54344()
{
  uint64_t v2 = v0;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v34 = sub_1C4496678();
  uint64_t v3 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (void *)(v2 + 120);
  if (sqlite3_step(*(sqlite3_stmt **)(v2 + 88)) == 100)
  {
    uint64_t v31 = v3 + 16;
    uint64_t v32 = v3;
    id v33 = (void (**)(char *, uint64_t))(v3 + 8);
    long long v30 = xmmword_1C449B0C0;
    do
    {
      uint64_t v7 = sqlite3_column_bytes(*(sqlite3_stmt **)(v2 + 88), 0);
      uint64_t v8 = sqlite3_column_blob(*(sqlite3_stmt **)(v2 + 88), 0);
      sqlite3_int64 v9 = sqlite3_column_int64(*(sqlite3_stmt **)(v2 + 88), 1);
      if (!v8) {
        goto LABEL_29;
      }
      sqlite3_int64 v10 = v9;
      if (v7)
      {
        if ((int)v7 <= 14)
        {
          memset(__dst, 0, sizeof(__dst));
          unsigned __int8 v37 = v7;
          memcpy(__dst, v8, (int)v7);
          uint64_t v12 = *(void *)__dst;
          unint64_t v13 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v37 << 48);
        }
        else
        {
          sub_1C44962E8();
          swift_allocObject();
          if (v7 == 0x7FFFFFFF)
          {
            uint64_t v11 = sub_1C4496288();
            sub_1C44964E8();
            uint64_t v12 = swift_allocObject();
            *(_OWORD *)(v12 + 16) = v30;
            unint64_t v13 = v11 | 0x8000000000000000;
          }
          else
          {
            uint64_t v14 = sub_1C4496288();
            uint64_t v12 = v7 << 32;
            unint64_t v13 = v14 | 0x4000000000000000;
          }
        }
      }
      else
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0xC000000000000000;
      }
      uint64_t result = sub_1C3FA2BEC(v12, v13);
      if (v1) {
        return result;
      }
      swift_beginAccess();
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v35 = (void *)*v6;
      uint64_t v17 = v35;
      *uint64_t v6 = 0x8000000000000000;
      unint64_t v19 = sub_1C3FA1598((uint64_t)v5);
      uint64_t v20 = v17[2];
      BOOL v21 = (v18 & 1) == 0;
      uint64_t v22 = v20 + v21;
      if (__OFADD__(v20, v21))
      {
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
      }
      char v23 = v18;
      if (v17[3] >= v22)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          unsigned int v26 = v35;
          if (v18) {
            goto LABEL_3;
          }
        }
        else
        {
          sub_1C4067E90();
          unsigned int v26 = v35;
          if (v23) {
            goto LABEL_3;
          }
        }
      }
      else
      {
        sub_1C4062AE8(v22, isUniquelyReferenced_nonNull_native);
        unint64_t v24 = sub_1C3FA1598((uint64_t)v5);
        if ((v23 & 1) != (v25 & 1))
        {
          uint64_t result = sub_1C4498558();
          __break(1u);
          return result;
        }
        unint64_t v19 = v24;
        unsigned int v26 = v35;
        if (v23)
        {
LABEL_3:
          *(void *)(v26[7] + 8 * v19) = v10;
          goto LABEL_4;
        }
      }
      v26[(v19 >> 6) + 8] |= 1 << v19;
      (*(void (**)(unint64_t, char *, uint64_t))(v32 + 16))(v26[6] + *(void *)(v32 + 72) * v19, v5, v34);
      *(void *)(v26[7] + 8 * v19) = v10;
      uint64_t v27 = v26[2];
      BOOL v28 = __OFADD__(v27, 1);
      uint64_t v29 = v27 + 1;
      if (v28) {
        goto LABEL_28;
      }
      v26[2] = v29;
LABEL_4:
      *(void *)(v2 + 120) = v26;
      swift_bridgeObjectRelease();
      (*v33)(v5, v34);
      swift_endAccess();
    }
    while (sqlite3_step(*(sqlite3_stmt **)(v2 + 88)) == 100);
  }
  sqlite3_reset(*(sqlite3_stmt **)(v2 + 88));
  swift_beginAccess();
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(qword_1EBBC0258);
  sub_1C4496F18();
  return swift_endAccess();
}

uint64_t sub_1C3F54758(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + OBJC_IVAR____TtC9Coherence17CRSequenceEncoder_getElements);
  swift_retain();
  uint64_t v4 = v3(a1);
  swift_release();
  uint64_t v5 = v1 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence;
  swift_beginAccess();
  uint64_t v6 = *(int *)(type metadata accessor for Proto_Sequence(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Sequence._StorageClass(0);
    swift_allocObject();
    uint64_t v7 = (void *)swift_retain();
    *(void *)(v5 + v6) = sub_1C3F7C6CC(v7);
    swift_release();
  }
  uint64_t v8 = *(void *)(v5 + v6);
  swift_beginAccess();
  *(void *)(v8 + 32) = v4;
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

sqlite3_int64 sub_1C3F54870@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = sub_1C4496678();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sqlite3_step(*(sqlite3_stmt **)(v1 + 104)) != 100)
  {
    sub_1C4496668();
    uint64_t v15 = type metadata accessor for CRReplicaDatabase.Replica(0);
    *(void *)(a1 + *(int *)(v15 + 20)) = 0;
    *(void *)(a1 + *(int *)(v15 + 24)) = 0;
    *(unsigned char *)(v1 + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replicaUpdated) = 1;
    return sqlite3_reset(*(sqlite3_stmt **)(v1 + 104));
  }
  int v8 = sqlite3_column_bytes(*(sqlite3_stmt **)(v1 + 104), 0);
  sqlite3_int64 v9 = sqlite3_column_blob(*(sqlite3_stmt **)(v1 + 104), 0);
  sqlite3_int64 v17 = sqlite3_column_int64(*(sqlite3_stmt **)(v1 + 104), 1);
  sqlite3_int64 result = sqlite3_column_int64(*(sqlite3_stmt **)(v1 + 104), 2);
  if (!v9)
  {
    __break(1u);
    return result;
  }
  sqlite3_int64 v11 = result;
  uint64_t v12 = sub_1C3F5E01C(v9, v8);
  sqlite3_int64 result = sub_1C3FA2BEC(v12, v13);
  if (!v2)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, v4);
    uint64_t v14 = type metadata accessor for CRReplicaDatabase.Replica(0);
    *(void *)(a1 + *(int *)(v14 + 20)) = v17;
    *(void *)(a1 + *(int *)(v14 + 24)) = v11;
    return sqlite3_reset(*(sqlite3_stmt **)(v1 + 104));
  }
  return result;
}

uint64_t CRMaxRegister.description.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  sub_1C4497D28();
  swift_bridgeObjectRelease();
  strcpy((char *)v7, "CRMaxRegister[");
  HIBYTE(v7[1]) = -18;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  sub_1C4497218();
  sub_1C4497268();
  swift_bridgeObjectRelease();
  sub_1C4497268();
  return v7[0];
}

uint64_t sub_1C3F54B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F97804(a1, a2, a3, (void (*)(void))type metadata accessor for Proto_Document, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3FA6470);
}

uint64_t sub_1C3F54B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F54BB4(a1, a2, a3, MEMORY[0x1E4FBB550]);
}

uint64_t sub_1C3F54BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1C3F8977C(a4, *v4, *(void *)(a2 + 16), a4, (uint64_t)&v7);
  if (!v5) {
    return v7;
  }
  return result;
}

uint64_t sub_1C3F54C00(uint64_t a1)
{
  swift_getWitnessTable();
  uint64_t v3 = sub_1C3F54C8C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

uint64_t sub_1C3F54C90(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void))
{
  uint64_t v27 = a5;
  uint64_t v28 = a1;
  uint64_t v7 = (void **)v5;
  uint64_t v10 = sub_1C4496498();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)*v5;
  unint64_t v16 = sub_1C3F54E50(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_release();
      *(void *)(v23 + 8 * v16) = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_7;
  }
  v27();
  unint64_t v25 = sub_1C3F54E50(a2);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = sub_1C4498558();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  uint64_t v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return sub_1C3FBC6B8(v16, (uint64_t)v13, v28, v22);
}

unint64_t sub_1C3F54E50(uint64_t a1)
{
  sub_1C4496498();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
  sub_1C3FA180C(&qword_1EBBBCA80, MEMORY[0x1E4F276F0]);
  uint64_t v3 = sub_1C4497078();
  return sub_1C3FA166C(a1, v3, MEMORY[0x1E4F276F0], &qword_1EBBBC328, v2, MEMORY[0x1E4F27708]);
}

void sub_1C3F54F24()
{
  sub_1C3F550A4(319, &qword_1EBBC05A0, (void (*)(uint64_t))type metadata accessor for Proto_Document.OneOf_Root);
  if (v0 <= 0x3F)
  {
    sub_1C3F550A4(319, &qword_1EBBC0580, (void (*)(uint64_t))type metadata accessor for Proto_Version);
    if (v1 <= 0x3F)
    {
      sub_1C3F550A4(319, &qword_1EBBC0618, (void (*)(uint64_t))type metadata accessor for Proto_Constants);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_1C3F550A4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C4497B38();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1C3F550F8@<X0>(uint64_t a1@<X8>)
{
  return sub_1C3F55114(v1, a1);
}

uint64_t sub_1C3F55114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_beginAccess();
  char v4 = *(unsigned char *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)a2 = *(void *)(a1 + 16);
  *(unsigned char *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C3F55180()
{
  uint64_t v0 = sub_1C4496498();
  MEMORY[0x1F4188790](v0 - 8);
  unint64_t v2 = (char *)v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  uint64_t v3 = NSTemporaryDirectory();
  sub_1C44971B8();

  sub_1C44963D8();
  swift_bridgeObjectRelease();
  type metadata accessor for CRAssetManager(0);
  uint64_t v4 = swift_allocObject();
  uint64_t result = sub_1C3F60340((uint64_t)v2, (uint64_t)v6);
  qword_1EBBC5A30 = v4;
  return result;
}

uint64_t sub_1C3F55264(uint64_t a1, void (*a2)(void *))
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for Proto_Version(0);
  MEMORY[0x1F4188790](v6 - 8);
  int v8 = (void *)((char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sqlite3_int64 v9 = (void *)(a1 + OBJC_IVAR___ObjCVersion_version);
  swift_beginAccess();
  uint64_t v10 = v9[1];
  v13[0] = *v9;
  v13[1] = v10;
  uint64_t v11 = *(void *)(v4 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_encoder);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1C3F9FF10(v11, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  a2(v8);
  return swift_endAccess();
}

void sub_1C3F5539C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v12[3] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v5 = *v2;
  id v6 = sub_1C3F52950();
  if (v5)
  {
    id v7 = objc_msgSend(*(id *)(v5 + qword_1EBBC59D0), sel_fullyRenamed_, *(void *)(a1 + 16));
    v12[0] = 0;
    unsigned int v8 = objc_msgSend(v7, sel_saveToEncoder_error_, v6, v12);

    if (!v8)
    {
      id v11 = v12[0];
      sub_1C44963A8();

      swift_willThrow();
      goto LABEL_6;
    }
    id v9 = v12[0];
  }
  uint64_t v10 = (uint64_t)v6 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence;
  swift_beginAccess();
  sub_1C3F9647C(v10, a2, type metadata accessor for Proto_Sequence);
LABEL_6:
}

uint64_t sub_1C3F554DC()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F55520@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1C44986B8();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1C3F555DC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1C4496D68();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unsigned int v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1C4496DA8();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(void *)(v2 + 24);
  aBlock[4] = a1;
  uint64_t v17 = v2;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1C3F61AC0;
  aBlock[3] = a2;
  unint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  sub_1C4496D88();
  v15[1] = MEMORY[0x1E4FBC860];
  sub_1C3F5D254((unint64_t *)&qword_1EBBC07F0, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0960);
  sub_1C3F70AF0((unint64_t *)&qword_1EBBC0968, &qword_1EBBC0960);
  sub_1C4497BF8();
  MEMORY[0x1C87806C0](0, v12, v8, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_1C3F5585C@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v8 = *(void *)(v2 + 80);
  uint64_t v7 = *(void *)(v2 + 88);
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0;
  swift_retain();
  uint64_t v9 = swift_release();
  a1(v9);
  if (v3)
  {
LABEL_8:
    swift_release();
    return swift_release();
  }
  if (!*(void *)(v2 + 80) && !*(void *)(v2 + 88))
  {
    sub_1C4496888();
    uint64_t v12 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
    if (qword_1EBBC0668 != -1) {
      swift_once();
    }
    *(void *)(a2 + v12) = qword_1EBBC0660;
    swift_retain();
    goto LABEL_8;
  }
  uint64_t v10 = sub_1C3F62C10();
  *(void *)(v4 + 80) = v8;
  swift_retain();
  swift_retain();
  swift_release();
  *(void *)(v4 + 88) = v7;
  swift_release();
  swift_release();
  uint64_t v11 = v10 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
  swift_beginAccess();
  sub_1C3FA1CCC(v11, a2, type metadata accessor for Proto_CRDT);
  return swift_release();
}

uint64_t sub_1C3F559E4@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x1E4FBC860];
  a1[1] = sub_1C4496868();
  a1[2] = v2;
  return sub_1C4496888();
}

uint64_t sub_1C3F55A28(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for Proto_Sequence(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Sequence._StorageClass(0);
    swift_allocObject();
    uint64_t v10 = (void *)swift_retain();
    *(void *)(v1 + v9) = sub_1C3F7C6CC(v10);
    swift_release();
  }
  uint64_t v11 = *(void *)(v1 + v9);
  sub_1C3F92E00(a1, (uint64_t)v8, type metadata accessor for Proto_Version);
  uint64_t v12 = type metadata accessor for Proto_Version(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 0, 1, v12);
  sub_1C3F961BC((uint64_t)v8, (uint64_t)v6, &qword_1EBBC0578);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedByVersion;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338((uint64_t)v6, v13, &qword_1EBBC0578);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1C3F55BEC()
{
  uint64_t result = type metadata accessor for Proto_Version(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Proto_Reference(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Proto_Optional(319);
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for Proto_Timestamp(319);
        if (v4 <= 0x3F)
        {
          uint64_t result = type metadata accessor for Proto_RepeatedValue(319);
          if (v5 <= 0x3F)
          {
            uint64_t result = type metadata accessor for Proto_TaggedValue(319);
            if (v6 <= 0x3F)
            {
              uint64_t result = type metadata accessor for Proto_Asset(319);
              if (v7 <= 0x3F)
              {
                uint64_t result = type metadata accessor for Proto_CustomCRValue(319);
                if (v8 <= 0x3F)
                {
                  swift_initEnumMetadataMultiPayload();
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C3F55E44(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  unint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for Proto_Sequence(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Sequence._StorageClass(0);
    swift_allocObject();
    uint64_t v10 = (void *)swift_retain();
    *(void *)(v1 + v9) = sub_1C3F7C6CC(v10);
    swift_release();
  }
  uint64_t v11 = *(void *)(v1 + v9);
  sub_1C3F92E00(a1, (uint64_t)v8, type metadata accessor for Proto_Version);
  uint64_t v12 = type metadata accessor for Proto_Version(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 0, 1, v12);
  sub_1C3F961BC((uint64_t)v8, (uint64_t)v6, &qword_1EBBC0578);
  uint64_t v13 = v11 + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338((uint64_t)v6, v13, &qword_1EBBC0578);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1C3F56008()
{
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp, &qword_1EBBC0620);
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value, &qword_1EBBC0540);
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt, &qword_1EBBC04F8);
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__partialCrdt, &qword_1EBBC04F8);
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F560C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F722CC(a1, a2, a3, (void (*)(void))type metadata accessor for Proto_Value, &qword_1EBBBF8E0, (void (*)(uint64_t))type metadata accessor for Proto_Value);
}

void (*Capsule.Ref<>.subscript.modify(void *a1))(uint64_t a1)
{
  unint64_t v2 = malloc(0x50uLL);
  *a1 = v2;
  v2[8] = Capsule.Ref<>.root.modify(v2);
  v2[9] = swift_modifyAtWritableKeyPath();
  return sub_1C3F5E3C8;
}

uint64_t sub_1C3F56198()
{
  return sub_1C3F561BC();
}

uint64_t sub_1C3F561BC()
{
  return sub_1C4498058();
}

uint64_t type metadata accessor for CRStructEncoder.KeyedContainer()
{
  return __swift_instantiateGenericMetadata();
}

id sub_1C3F56254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = &v3[OBJC_IVAR____TtC9Coherence17CRSequenceEncoder_getElements];
  *(void *)uint64_t v5 = a2;
  *((void *)v5 + 1) = a3;
  unint64_t v6 = &v3[OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence];
  swift_retain();
  uint64_t v7 = v3;
  sub_1C4496888();
  uint64_t v8 = *(int *)(type metadata accessor for Proto_Sequence(0) + 20);
  if (qword_1EBBBC000 != -1) {
    swift_once();
  }
  *(void *)&v6[v8] = qword_1EBBBBFF0;
  uint64_t v9 = &v7[OBJC_IVAR____TtC9Coherence15CRStringEncoder_subsequence];
  swift_retain();
  sub_1C4496888();
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  if (qword_1EBBBC0C0 != -1) {
    swift_once();
  }
  *(void *)&v9[v10] = qword_1EBBBC0B8;
  *(void *)&v7[OBJC_IVAR____TtC9Coherence15CRStringEncoder_encoder] = a1;
  swift_retain();
  swift_retain();

  v12.receiver = v7;
  v12.super_class = (Class)type metadata accessor for CRStringEncoder(0);
  return objc_msgSendSuper2(&v12, sel_init);
}

uint64_t sub_1C3F56398()
{
  uint64_t v0 = (NSString *)sub_1C4497188();
  Class v1 = NSClassFromString(v0);

  if (!v1) {
    return sub_1C3F555DC((uint64_t)sub_1C3FBCB44, (uint64_t)&block_descriptor_4);
  }
  swift_getObjCClassMetadata();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t result = (uint64_t)objc_msgSend(ObjCClassFromMetadata, sel_respondsToSelector_, sel_sharedApplication);
  if ((result & 1) == 0)
  {
    __break(1u);
    return result;
  }
  id v4 = objc_msgSend(ObjCClassFromMetadata, sel_sharedApplication);
  if (!v4) {
    return sub_1C3F555DC((uint64_t)sub_1C3FBCB44, (uint64_t)&block_descriptor_4);
  }
  id v5 = objc_msgSend(v4, sel_applicationState);
  uint64_t result = swift_unknownObjectRelease();
  if (v5 != (id)2) {
    return sub_1C3F555DC((uint64_t)sub_1C3FBCB44, (uint64_t)&block_descriptor_4);
  }
  return result;
}

uint64_t sub_1C3F56480()
{
  uint64_t result = sub_1C4496898();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C3F56510()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Proto_Version(0);
  MEMORY[0x1F4188790](v2 - 8);
  id v4 = (void *)((char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ObjCVersion();
  id v5 = (void *)(swift_dynamicCastClassUnconditional() + OBJC_IVAR___ObjCVersion_version);
  swift_beginAccess();
  uint64_t v6 = v5[1];
  v9[0] = *v5;
  v9[1] = v6;
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_encoder);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1C3F9FF10(v7, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  sub_1C3F55A28((uint64_t)v4);
  return swift_endAccess();
}

uint64_t sub_1C3F56658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F9CB28(a1, a2, a3);
}

uint64_t sub_1C3F56670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F97804(a1, a2, a3, (void (*)(void))type metadata accessor for Proto_CRDT, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3F98D18);
}

uint64_t sub_1C3F566B0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  sub_1C3F9633C(a1 + *a3, type metadata accessor for Proto_Sequence);
  sub_1C3F9633C(a1 + *a4, type metadata accessor for Proto_Subsequence);
  return swift_release();
}

uint64_t sub_1C3F56738()
{
  return sub_1C3F56750();
}

uint64_t sub_1C3F56750()
{
  uint64_t result = sub_1C4496908();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_1C4496988();
      }
      else if (result == 1)
      {
        type metadata accessor for Proto_Value(0);
        sub_1C3F7251C(&qword_1EBBBF8E0, (void (*)(uint64_t))type metadata accessor for Proto_Value);
        sub_1C4496A68();
      }
      uint64_t result = sub_1C4496908();
    }
  }
  return result;
}

uint64_t sub_1C3F5686C()
{
  sub_1C3F568C4();
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F568C4()
{
  uint64_t v1 = v0 + qword_1EBBC59C8;
  uint64_t v2 = sub_1C4496678();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t sub_1C3F56938()
{
  uint64_t v1 = sub_1C4496D68();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  id v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1C4496DA8();
  uint64_t v5 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[1] = *(void *)(v0 + 32);
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_1C3FBD008;
  void aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1C3F61AC0;
  aBlock[3] = &block_descriptor_12;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  sub_1C4496D88();
  uint64_t v13 = MEMORY[0x1E4FBC860];
  sub_1C3F70A18((unint64_t *)&qword_1EBBC07F0, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0960);
  sub_1C3F70AF0((unint64_t *)&qword_1EBBC0968, &qword_1EBBC0960);
  sub_1C4497BF8();
  MEMORY[0x1C87806C0](0, v7, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v12);
  swift_release();
  return swift_release();
}

uint64_t sub_1C3F56BF4()
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC0990);
  uint64_t v0 = *(void *)(v140 - 8);
  MEMORY[0x1F4188790](v140);
  v139 = (char *)&v114 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_1C4496498();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = MEMORY[0x1F4188790](v2);
  v138 = (char *)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v114 - v7;
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  v124 = (char *)&v114 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  v126 = (char *)&v114 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v114 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0318);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  v129 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v114 - v18;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v21 = result;
    *(unsigned char *)(result + 96) = 0;
    swift_beginAccess();
    uint64_t v22 = *(void *)(v21 + 16);
    uint64_t v23 = *(void *)(v22 + 64);
    uint64_t v116 = v22 + 64;
    uint64_t v24 = 1 << *(unsigned char *)(v22 + 32);
    if (v24 < 64) {
      uint64_t v25 = ~(-1 << v24);
    }
    else {
      uint64_t v25 = -1;
    }
    unint64_t v26 = v25 & v23;
    v144 = (void *)v21;
    v125 = (uint64_t *)(v21 + 48);
    v147 = (void (**)(char *, char *, uint64_t))(v3 + 16);
    v143 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    uint64_t v141 = v3;
    v149 = (void (**)(char *, uint64_t))(v3 + 8);
    v121 = &v151;
    uint64_t v137 = v4 + 7;
    v136 = &v154;
    v135 = (void (**)(char *, uint64_t))(v0 + 8);
    int64_t v118 = (unint64_t)(v24 + 63) >> 6;
    int64_t v115 = v118 - 1;
    uint64_t v122 = v22;
    swift_bridgeObjectRetain();
    int64_t v27 = 0;
    uint64_t v117 = 0;
    *(void *)&long long v28 = 136315394;
    long long v120 = v28;
    uint64_t v119 = MEMORY[0x1E4FBC840] + 8;
    uint64_t v29 = v126;
    v146 = v14;
    v123 = v19;
    while (1)
    {
      uint64_t v30 = (uint64_t)v129;
      if (!v26) {
        break;
      }
      uint64_t v130 = (v26 - 1) & v26;
      int64_t v131 = v27;
      unint64_t v31 = __clz(__rbit64(v26)) | (v27 << 6);
      uint64_t v32 = v144;
LABEL_9:
      uint64_t v33 = v122;
      (*(void (**)(char *, unint64_t, uint64_t))(v141 + 16))(v129, *(void *)(v122 + 48) + *(void *)(v141 + 72) * v31, v2);
      uint64_t v34 = *(void *)(v33 + 56);
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04E0);
      *(void *)(v30 + *(int *)(v35 + 48)) = *(void *)(v34 + 8 * v31);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v30, 0, 1, v35);
      swift_retain();
LABEL_16:
      sub_1C3F961BC(v30, (uint64_t)v19, &qword_1EBBC0318);
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04E0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v19, 1, v39) == 1)
      {
        swift_release();
        unint64_t v113 = sub_1C3F60AE0(MEMORY[0x1E4FBC860]);
        swift_beginAccess();
        v32[6] = v113;
        swift_bridgeObjectRelease();
        return swift_release();
      }
      uint64_t v134 = *(void *)&v19[*(int *)(v39 + 48)];
      v142 = *v143;
      v142(v14, v19, v2);
      if (qword_1EBBBB068 != -1) {
        swift_once();
      }
      uint64_t v40 = sub_1C4496C58();
      __swift_project_value_buffer(v40, (uint64_t)qword_1EBBC58C0);
      v145 = *v147;
      v145(v29, v14, v2);
      swift_retain();
      uint64_t v41 = sub_1C4496C38();
      os_log_type_t v42 = sub_1C44979B8();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = swift_slowAlloc();
        v133 = (void *)swift_slowAlloc();
        id v152 = v133;
        *(_DWORD *)uint64_t v43 = v120;
        v148 = (void (*)(char *, uint64_t))(v43 + 4);
        v44 = v29;
        uint64_t v46 = v32[13];
        unint64_t v45 = v32[14];
        swift_bridgeObjectRetain();
        uint64_t v150 = sub_1C43BE154(v46, v45, (uint64_t *)&v152);
        sub_1C4497B68();
        swift_bridgeObjectRelease();
        swift_release();
        *(_WORD *)(v43 + 12) = 2080;
        sub_1C3F70A18(&qword_1EA39ED28, MEMORY[0x1E4F276F0]);
        uint64_t v47 = sub_1C4498088();
        uint64_t v150 = sub_1C43BE154(v47, v48, (uint64_t *)&v152);
        sub_1C4497B68();
        swift_bridgeObjectRelease();
        v148 = *v149;
        v148(v44, v2);
        _os_log_impl(&dword_1C3F4F000, v41, v42, "%s watchDirectory(enterForeground) %s", (uint8_t *)v43, 0x16u);
        v49 = v133;
        swift_arrayDestroy();
        MEMORY[0x1C8782060](v49, -1, -1);
        MEMORY[0x1C8782060](v43, -1, -1);
      }
      else
      {
        swift_release();
        v148 = *v149;
        v148(v29, v2);
      }

      objc_msgSend(self, sel_addFilePresenter_, *(void *)(v134 + 16));
      id v50 = objc_msgSend(self, sel_defaultManager);
      v51 = v146;
      sub_1C4496488();
      v52 = (void *)sub_1C4497188();
      swift_bridgeObjectRelease();
      id v152 = 0;
      id v53 = objc_msgSend(v50, sel_contentsOfDirectoryAtPath_error_, v52, &v152);

      id v54 = v152;
      if (v53)
      {
        uint64_t v55 = sub_1C44973F8();
        id v56 = v54;

        v57 = (void *)sub_1C411F6B0(v55);
        swift_bridgeObjectRelease();
      }
      else
      {
        id v58 = v152;
        v59 = (void *)sub_1C44963A8();

        swift_willThrow();
        v57 = 0;
        uint64_t v117 = 0;
      }
      uint64_t v60 = (uint64_t)v124;
      v145(v124, v51, v2);
      v61 = v125;
      swift_beginAccess();
      uint64_t v62 = *v61;
      if (*(void *)(v62 + 16))
      {
        unint64_t v63 = sub_1C3F54E50(v60);
        uint64_t v64 = MEMORY[0x1E4FBC860];
        if (v65)
        {
          uint64_t v64 = *(void *)(*(void *)(v62 + 56) + 8 * v63);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        uint64_t v64 = MEMORY[0x1E4FBC860];
      }
      swift_endAccess();
      v148((char *)v60, v2);
      uint64_t v66 = sub_1C411F6B0(v64);
      swift_bridgeObjectRelease();
      if (v57)
      {
        unint64_t v67 = *(void *)(v66 + 16);
        unint64_t v68 = v57[2];
        v128 = (void *)v66;
        v127 = v57;
        if (v67 > v68 >> 3)
        {
          swift_bridgeObjectRetain();
          v83 = (void *)sub_1C43D3068(v66, (uint64_t)v57);
        }
        else
        {
          id v152 = v57;
          swift_bridgeObjectRetain();
          sub_1C43D2EC0(v66);
          v83 = v152;
        }
        uint64_t v84 = 0;
        uint64_t v85 = v83[7];
        v132 = (char *)(v83 + 7);
        uint64_t v86 = 1 << *((unsigned char *)v83 + 32);
        if (v86 < 64) {
          uint64_t v87 = ~(-1 << v86);
        }
        else {
          uint64_t v87 = -1;
        }
        uint64_t v88 = v87 & v85;
        v133 = (void *)((unint64_t)(v86 + 63) >> 6);
        while (1)
        {
          if (v88)
          {
            v88 &= v88 - 1;
          }
          else
          {
            BOOL v80 = __OFADD__(v84++, 1);
            if (v80)
            {
              __break(1u);
LABEL_121:
              __break(1u);
              goto LABEL_122;
            }
            if (v84 >= (uint64_t)v133) {
              goto LABEL_77;
            }
            uint64_t v94 = *(void *)&v132[8 * v84];
            if (!v94)
            {
              uint64_t v95 = v84 + 1;
              if (v84 + 1 >= (uint64_t)v133) {
                goto LABEL_77;
              }
              uint64_t v94 = *(void *)&v132[8 * v95];
              if (!v94)
              {
                uint64_t v95 = v84 + 2;
                if (v84 + 2 >= (uint64_t)v133) {
                  goto LABEL_77;
                }
                uint64_t v94 = *(void *)&v132[8 * v95];
                if (!v94)
                {
                  uint64_t v95 = v84 + 3;
                  if (v84 + 3 >= (uint64_t)v133)
                  {
LABEL_77:
                    v96 = v128;
                    uint64_t v97 = (uint64_t)v127;
                    swift_release();
                    if (*(void *)(v97 + 16) <= v96[2] >> 3)
                    {
                      id v152 = v96;
                      sub_1C43D2EC0(v97);
                      swift_bridgeObjectRelease();
                      v98 = v152;
                    }
                    else
                    {
                      v98 = (void *)sub_1C43D3068(v97, (uint64_t)v96);
                      swift_bridgeObjectRelease();
                    }
                    uint64_t v99 = 0;
                    uint64_t v100 = v98[7];
                    v132 = (char *)(v98 + 7);
                    uint64_t v101 = 1 << *((unsigned char *)v98 + 32);
                    if (v101 < 64) {
                      uint64_t v102 = ~(-1 << v101);
                    }
                    else {
                      uint64_t v102 = -1;
                    }
                    uint64_t v103 = v102 & v100;
                    v133 = (void *)((unint64_t)(v101 + 63) >> 6);
                    while (1)
                    {
                      if (v103)
                      {
                        v103 &= v103 - 1;
                      }
                      else
                      {
                        BOOL v80 = __OFADD__(v99++, 1);
                        if (v80) {
                          goto LABEL_121;
                        }
                        if (v99 >= (uint64_t)v133) {
                          goto LABEL_6;
                        }
                        uint64_t v110 = *(void *)&v132[8 * v99];
                        if (!v110)
                        {
                          uint64_t v111 = v99 + 1;
                          if (v99 + 1 >= (uint64_t)v133) {
                            goto LABEL_6;
                          }
                          uint64_t v110 = *(void *)&v132[8 * v111];
                          if (!v110)
                          {
                            uint64_t v111 = v99 + 2;
                            if (v99 + 2 >= (uint64_t)v133) {
                              goto LABEL_6;
                            }
                            uint64_t v110 = *(void *)&v132[8 * v111];
                            if (!v110)
                            {
                              uint64_t v111 = v99 + 3;
                              if (v99 + 3 >= (uint64_t)v133) {
                                goto LABEL_6;
                              }
                              uint64_t v110 = *(void *)&v132[8 * v111];
                              if (!v110)
                              {
                                while (1)
                                {
                                  uint64_t v99 = v111 + 1;
                                  if (__OFADD__(v111, 1)) {
                                    break;
                                  }
                                  if (v99 >= (uint64_t)v133) {
                                    goto LABEL_6;
                                  }
                                  uint64_t v110 = *(void *)&v132[8 * v99];
                                  ++v111;
                                  if (v110) {
                                    goto LABEL_97;
                                  }
                                }
LABEL_124:
                                __break(1u);
LABEL_125:
                                __break(1u);
LABEL_126:
                                __break(1u);
LABEL_127:
                                __break(1u);
                              }
                            }
                          }
                          uint64_t v99 = v111;
                        }
LABEL_97:
                        uint64_t v103 = (v110 - 1) & v110;
                      }
                      swift_bridgeObjectRetain();
                      sub_1C4496438();
                      swift_bridgeObjectRelease();
                      v104 = v138;
                      v145(v138, v8, v2);
                      unint64_t v105 = (*(unsigned __int8 *)(v141 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80);
                      unint64_t v106 = (v105 + v137) & 0xFFFFFFFFFFFFFFF8;
                      uint64_t v107 = swift_allocObject();
                      v142((char *)(v107 + v105), v104, v2);
                      v108 = (void *)(v107 + v106);
                      void *v108 = 0;
                      v108[1] = 0;
                      id v152 = &unk_1EA39FE90;
                      uint64_t v153 = v107;
                      swift_weakInit();
                      swift_retain();
                      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09A8);
                      v109 = v139;
                      sub_1C44975E8();
                      (*v135)(v109, v140);
                      swift_release();
                      v148(v8, v2);
                    }
                  }
                  uint64_t v94 = *(void *)&v132[8 * v95];
                  if (!v94)
                  {
                    while (1)
                    {
                      uint64_t v84 = v95 + 1;
                      if (__OFADD__(v95, 1)) {
                        break;
                      }
                      if (v84 >= (uint64_t)v133) {
                        goto LABEL_77;
                      }
                      uint64_t v94 = *(void *)&v132[8 * v84];
                      ++v95;
                      if (v94) {
                        goto LABEL_72;
                      }
                    }
LABEL_123:
                    __break(1u);
                    goto LABEL_124;
                  }
                }
              }
              uint64_t v84 = v95;
            }
LABEL_72:
            uint64_t v88 = (v94 - 1) & v94;
          }
          swift_bridgeObjectRetain();
          sub_1C4496438();
          swift_bridgeObjectRelease();
          v89 = v138;
          v145(v138, v8, v2);
          unint64_t v90 = (*(unsigned __int8 *)(v141 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80);
          unint64_t v91 = (v90 + v137) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v92 = swift_allocObject();
          v142((char *)(v92 + v90), v89, v2);
          *(void *)(v92 + v91) = v134;
          id v152 = &unk_1EA39FE88;
          uint64_t v153 = v92;
          swift_weakInit();
          swift_retain_n();
          swift_retain();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09A8);
          v93 = v139;
          sub_1C44975E8();
          (*v135)(v93, v140);
          swift_release();
          swift_release();
          v148(v8, v2);
        }
      }
      uint64_t v69 = 0;
      uint64_t v70 = *(void *)(v66 + 56);
      v132 = (char *)(v66 + 56);
      uint64_t v71 = 1 << *(unsigned char *)(v66 + 32);
      if (v71 < 64) {
        uint64_t v72 = ~(-1 << v71);
      }
      else {
        uint64_t v72 = -1;
      }
      uint64_t v73 = v72 & v70;
      v133 = (void *)((unint64_t)(v71 + 63) >> 6);
      while (1)
      {
        if (v73)
        {
          v73 &= v73 - 1;
          goto LABEL_38;
        }
        BOOL v80 = __OFADD__(v69++, 1);
        if (v80)
        {
LABEL_122:
          __break(1u);
          goto LABEL_123;
        }
        if (v69 >= (uint64_t)v133) {
          goto LABEL_6;
        }
        uint64_t v81 = *(void *)&v132[8 * v69];
        if (!v81) {
          break;
        }
LABEL_50:
        uint64_t v73 = (v81 - 1) & v81;
LABEL_38:
        swift_bridgeObjectRetain();
        sub_1C4496438();
        swift_bridgeObjectRelease();
        v74 = v138;
        v145(v138, v8, v2);
        unint64_t v75 = (*(unsigned __int8 *)(v141 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v141 + 80);
        unint64_t v76 = (v75 + v137) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v77 = swift_allocObject();
        v142((char *)(v77 + v75), v74, v2);
        v78 = (void *)(v77 + v76);
        void *v78 = 0;
        v78[1] = 0;
        id v152 = &unk_1EA39FE70;
        uint64_t v153 = v77;
        swift_weakInit();
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09A8);
        v79 = v139;
        sub_1C44975E8();
        (*v135)(v79, v140);
        swift_release();
        v148(v8, v2);
      }
      uint64_t v82 = v69 + 1;
      if (v69 + 1 >= (uint64_t)v133) {
        goto LABEL_6;
      }
      uint64_t v81 = *(void *)&v132[8 * v82];
      if (v81) {
        goto LABEL_49;
      }
      uint64_t v82 = v69 + 2;
      if (v69 + 2 >= (uint64_t)v133) {
        goto LABEL_6;
      }
      uint64_t v81 = *(void *)&v132[8 * v82];
      if (v81) {
        goto LABEL_49;
      }
      uint64_t v82 = v69 + 3;
      if (v69 + 3 >= (uint64_t)v133) {
        goto LABEL_6;
      }
      uint64_t v81 = *(void *)&v132[8 * v82];
      if (v81)
      {
LABEL_49:
        uint64_t v69 = v82;
        goto LABEL_50;
      }
      while (1)
      {
        uint64_t v69 = v82 + 1;
        if (__OFADD__(v82, 1)) {
          goto LABEL_125;
        }
        if (v69 >= (uint64_t)v133) {
          break;
        }
        uint64_t v81 = *(void *)&v132[8 * v69];
        ++v82;
        if (v81) {
          goto LABEL_50;
        }
      }
LABEL_6:
      uint64_t v14 = v146;
      uint64_t v19 = v123;
      int64_t v27 = v131;
      unint64_t v26 = v130;
      swift_release();
      swift_release();
      v148(v14, v2);
      uint64_t v29 = v126;
    }
    int64_t v36 = v27 + 1;
    uint64_t v32 = v144;
    if (__OFADD__(v27, 1)) {
      goto LABEL_126;
    }
    if (v36 >= v118)
    {
      int64_t v131 = v27;
      goto LABEL_15;
    }
    unint64_t v37 = *(void *)(v116 + 8 * v36);
    if (!v37)
    {
      int64_t v112 = v27 + 2;
      if (v27 + 2 >= v118) {
        goto LABEL_117;
      }
      unint64_t v37 = *(void *)(v116 + 8 * v112);
      if (!v37)
      {
        if (v27 + 3 >= v118)
        {
          int64_t v131 = v27 + 2;
          goto LABEL_15;
        }
        unint64_t v37 = *(void *)(v116 + 8 * (v27 + 3));
        if (v37)
        {
          int64_t v36 = v27 + 3;
          goto LABEL_13;
        }
        int64_t v112 = v27 + 4;
        if (v27 + 4 >= v118)
        {
          int64_t v131 = v27 + 3;
          goto LABEL_15;
        }
        unint64_t v37 = *(void *)(v116 + 8 * v112);
        if (!v37)
        {
          while (1)
          {
            int64_t v36 = v112 + 1;
            if (__OFADD__(v112, 1)) {
              goto LABEL_127;
            }
            if (v36 >= v118) {
              break;
            }
            unint64_t v37 = *(void *)(v116 + 8 * v36);
            ++v112;
            if (v37) {
              goto LABEL_13;
            }
          }
          int64_t v36 = v115;
LABEL_117:
          int64_t v131 = v36;
LABEL_15:
          uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04E0);
          uint64_t v30 = (uint64_t)v129;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v129, 1, 1, v38);
          uint64_t v130 = 0;
          goto LABEL_16;
        }
      }
      int64_t v36 = v112;
    }
LABEL_13:
    uint64_t v130 = (v37 - 1) & v37;
    unint64_t v31 = __clz(__rbit64(v37)) + (v36 << 6);
    int64_t v131 = v36;
    goto LABEL_9;
  }
  return result;
}

void sub_1C3F58170(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1C3F581C4()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  id v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    sub_1C44971B8();

    sub_1C4497228();
    swift_bridgeObjectRelease();
  }
  if (sub_1C44972A8()) {
    char v2 = 1;
  }
  else {
    char v2 = sub_1C44972A8();
  }
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1C3F582D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F97804(a1, a2, a3, (void (*)(void))type metadata accessor for Proto_Reference, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3F9839C);
}

uint64_t sub_1C3F58314(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0778);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0760);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C3F970C4(a1, (uint64_t)v8, &qword_1EBBC0760);
  uint64_t v9 = sub_1C4496498();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1C3F962E0((uint64_t)v8, &qword_1EBBC0760);
    unint64_t v11 = 0xED00003A79726F6DLL;
    uint64_t v12 = 0x656D3A3A656C6966;
  }
  else
  {
    uint64_t v12 = sub_1C4496488();
    unint64_t v11 = v13;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  type metadata accessor for CRReplicaDatabase(0);
  swift_allocObject();
  uint64_t v14 = sub_1C3F5970C(v12, v11, 0, 0, 0, 0, 0);
  if (v1)
  {
    sub_1C3F962E0(a1, &qword_1EBBC0760);
  }
  else
  {
    swift_retain();
    sub_1C3F54344();
    sub_1C3F54870((uint64_t)v5);
    sub_1C3F962E0(a1, &qword_1EBBC0760);
    swift_release();
    uint64_t v15 = type metadata accessor for CRReplicaDatabase.Replica(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v5, 0, 1, v15);
    uint64_t v16 = v14 + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replica;
    swift_beginAccess();
    sub_1C3FBCD2C((uint64_t)v5, v16);
    swift_endAccess();
  }
  return v14;
}

uint64_t Capsule.mutate<A>(_:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_1C3F6B448(a1, a2, a3, a4, a5);
  return sub_1C3F5865C(v5);
}

{
  uint64_t v5;
  uint64_t result;

  uint64_t result = sub_1C3F6B448(a1, a2, a3, a4, a5);
  if (*(void *)(v5 + *(int *)(a3 + 40))) {
    return sub_1C3F7D128(1, 1);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C3F5865C(uint64_t a1)
{
  uint64_t result = type metadata accessor for Capsule();
  if (*(void *)(a1 + *(int *)(result + 40)))
  {
    swift_retain();
    sub_1C3F7D128(1, 1);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C3F586C0(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (uint64_t *)((char *)&v26 - v13);
  sub_1C4496888();
  swift_retain();
  uint64_t v15 = sub_1C3FA10C4(a1);
  swift_release();
  *uint64_t v14 = v15;
  v14[1] = a2;
  sub_1C3F96414((uint64_t)v14, (uint64_t)v12, type metadata accessor for Proto_Timestamp);
  uint64_t v16 = v5 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_subsequence;
  swift_beginAccess();
  uint64_t v17 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  uint64_t v18 = (unint64_t *)(*(void *)(v16 + v17) + *a3);
  swift_beginAccess();
  unint64_t v19 = *v18;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v19 = sub_1C3FBC77C(0, *(void *)(v19 + 16) + 1, 1, v19);
  }
  unint64_t v21 = *(void *)(v19 + 16);
  unint64_t v20 = *(void *)(v19 + 24);
  if (v21 >= v20 >> 1) {
    unint64_t v19 = sub_1C3FBC77C(v20 > 1, v21 + 1, 1, v19);
  }
  *(void *)(v19 + 16) = v21 + 1;
  sub_1C3F9E890((uint64_t)v12, v19+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v21, type metadata accessor for Proto_Timestamp);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Subsequence._StorageClass(0);
    swift_allocObject();
    uint64_t v22 = swift_retain();
    uint64_t v23 = sub_1C3F7273C(v22);
    swift_release();
    *(void *)(v16 + v17) = v23;
    swift_release();
  }
  uint64_t v24 = (unint64_t *)(*(void *)(v16 + v17) + *a3);
  swift_beginAccess();
  *uint64_t v24 = v19;
  swift_endAccess();
  swift_bridgeObjectRelease();
  return sub_1C3F9633C((uint64_t)v14, type metadata accessor for Proto_Timestamp);
}

uint64_t CROrderedSet.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v30 = a1;
  uint64_t v26 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1C4497B38();
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t v15 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v20 = (char *)&v26 - v19;
  unint64_t v31 = a6;
  CROrderedSet.init()(a6);
  uint64_t v28 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v30, a3);
  sub_1C44972B8();
  uint64_t v29 = a3;
  swift_getAssociatedConformanceWitness();
  uint64_t v32 = v20;
  uint64_t v33 = AssociatedTypeWitness;
  sub_1C4497B58();
  uint64_t v21 = v26;
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  if (v22(v14, 1, a2) != 1)
  {
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    do
    {
      v23(v10, v14, a2);
      uint64_t v24 = type metadata accessor for CROrderedSet();
      CROrderedSet.append(_:)((uint64_t)v10, v24);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v10, a2);
      sub_1C4497B58();
    }
    while (v22(v14, 1, a2) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v32, v33);
}

void sub_1C3F58CFC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0760);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  v52 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v50 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v50 - v11;
  uint64_t v13 = sub_1C4496498();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  id v50 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  v51 = (char *)&v50 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v50 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v50 - v22;
  uint64_t v54 = a3;
  sub_1C3F970C4(a3, (uint64_t)v12, &qword_1EBBC0760);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  id v56 = a1;
  v24(v21, (uint64_t)a1, v13);
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v57 = v23;
  if (v25 == 1)
  {
    sub_1C3F53DB4((uint64_t)v23);
    id v53 = *(void (**)(char *, uint64_t))(v14 + 8);
    v53(v21, v13);
    sub_1C3F962E0((uint64_t)v12, &qword_1EBBC0760);
  }
  else
  {
    id v53 = *(void (**)(char *, uint64_t))(v14 + 8);
    v53(v21, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v23, v12, v13);
  }
  uint64_t v26 = v62;
  uint64_t v27 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56);
  uint64_t v28 = v56;
  if (!*(void *)(v62 + 24))
  {
    uint64_t v38 = (uint64_t)v52;
    v24(v52, (uint64_t)v56, v13);
    (*v27)(v38, 0, 1, v13);
    uint64_t v39 = v55;
    uint64_t v40 = sub_1C3F58314(v38);
    if (!v39)
    {
      uint64_t v55 = v40;
      os_log_type_t v42 = v50;
      uint64_t v43 = v57;
      uint64_t v44 = ((uint64_t (*)(char *, char *, uint64_t))v24)(v50, v57, v13);
      if (qword_1EBBBCA88 != -1) {
        uint64_t v44 = swift_once();
      }
      uint64_t v45 = qword_1EBBBEF50;
      MEMORY[0x1F4188790](v44);
      *(&v50 - 2) = v42;
      *(&v50 - 1) = v43;
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v45 + 24));
      sub_1C3FBCFEC((uint64_t *)(v45 + 16), (uint64_t *)v60);
      os_unfair_lock_unlock((os_unfair_lock_t)(v45 + 24));
      uint64_t v46 = *(void *)&v60[0];
      swift_release();
      uint64_t v47 = (void (*)(uint64_t, uint64_t))v53;
      v53(v42, v13);
      unint64_t v48 = (objc_class *)type metadata accessor for CRContext();
      memset(v60, 0, sizeof(v60));
      uint64_t v61 = 0;
      v49 = (char *)objc_allocWithZone(v48);
      *(void *)&v49[OBJC_IVAR___CRContext_assetManager] = v46;
      sub_1C3F970C4((uint64_t)v60, (uint64_t)&v49[OBJC_IVAR___CRContext_encryptionDelegate], qword_1EBBC0C90);
      *(void *)&v49[OBJC_IVAR___CRContext_crdtDatabase] = v55;
      v59.receiver = v49;
      v59.super_class = v48;
      objc_msgSendSuper2(&v59, sel_init);
      sub_1C3F962E0((uint64_t)v60, qword_1EBBC0C90);
      sub_1C3F962E0(v54, &qword_1EBBC0760);
      v47((uint64_t)v56, v13);
      v47((uint64_t)v57, v13);
      uint64_t v37 = v62;
      goto LABEL_12;
    }
LABEL_8:
    sub_1C3F962E0(v54, &qword_1EBBC0760);
    uint64_t v41 = v53;
    v53(v28, v13);
    v41(v57, v13);
    sub_1C3F962E0(v26, qword_1EBBC0C90);
    return;
  }
  v24(v10, (uint64_t)v56, v13);
  (*v27)((uint64_t)v10, 0, 1, v13);
  uint64_t v29 = v55;
  uint64_t v30 = sub_1C3F58314((uint64_t)v10);
  if (v29) {
    goto LABEL_8;
  }
  uint64_t v31 = v30;
  uint64_t v32 = (uint64_t)v51;
  v24(v51, (uint64_t)v57, v13);
  sub_1C3F970C4(v26, (uint64_t)v60, qword_1EBBC0C90);
  type metadata accessor for CRAssetManager(0);
  swift_allocObject();
  uint64_t v33 = sub_1C3F60340(v32, (uint64_t)v60);
  sub_1C3F970C4(v26, (uint64_t)v60, qword_1EBBC0C90);
  uint64_t v34 = (objc_class *)type metadata accessor for CRContext();
  uint64_t v35 = (char *)objc_allocWithZone(v34);
  *(void *)&v35[OBJC_IVAR___CRContext_assetManager] = v33;
  sub_1C3F970C4((uint64_t)v60, (uint64_t)&v35[OBJC_IVAR___CRContext_encryptionDelegate], qword_1EBBC0C90);
  *(void *)&v35[OBJC_IVAR___CRContext_crdtDatabase] = v31;
  v58.receiver = v35;
  v58.super_class = v34;
  objc_msgSendSuper2(&v58, sel_init);
  sub_1C3F962E0((uint64_t)v60, qword_1EBBC0C90);
  sub_1C3F962E0(v54, &qword_1EBBC0760);
  int64_t v36 = v53;
  v53(v28, v13);
  v36(v57, v13);
  uint64_t v37 = v62;
LABEL_12:
  sub_1C3F962E0(v37, qword_1EBBC0C90);
}

uint64_t sub_1C3F59384()
{
  type metadata accessor for Proto_Document._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  uint64_t v2 = type metadata accessor for Proto_Document.OneOf_Root(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references) = MEMORY[0x1E4FBC860];
  uint64_t v4 = v0 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  uint64_t v5 = type metadata accessor for Proto_Version(0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  uint64_t v7 = v0 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  uint64_t v8 = type metadata accessor for Proto_Constants(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(void *)(v0 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assets) = v3;
  uint64_t v9 = (uint64_t *)(v0
                 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid);
  *uint64_t v9 = sub_1C4496868();
  v9[1] = v10;
  *(void *)(v0
            + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__deltaReferences) = v3;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(v0+ OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion, 1, 1, v5);
  qword_1EBBC05C0 = v0;
  return result;
}

uint64_t sub_1C3F5951C()
{
  uint64_t result = sub_1C4496898();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C3F595B4()
{
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set, (uint64_t *)&unk_1EBBC0748);
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence, &qword_1EBBC06E8);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F59648@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_1C4496868();
  a1[1] = v2;
  a1[2] = MEMORY[0x1E4FBC860];
  return sub_1C4496888();
}

uint64_t objectdestroyTm()
{
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t objectdestroyTm_0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1C3F5970C(uint64_t a1, unint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v40 = a7;
  uint64_t v39 = a6;
  int v37 = a4;
  int v38 = a5;
  int v36 = a3;
  uint64_t v33 = sub_1C4496D68();
  uint64_t v35 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1C4496DA8();
  uint64_t v34 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1C4496D78();
  uint64_t v32 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v7 + 104) = 0u;
  uint64_t v18 = MEMORY[0x1E4FBC868];
  uint64_t v19 = MEMORY[0x1E4FBC870];
  *(_OWORD *)(v7 + 88) = 0u;
  *(void *)(v7 + 120) = v18;
  *(void *)(v7 + 128) = v19;
  uint64_t v20 = v7 + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replica;
  uint64_t v21 = type metadata accessor for CRReplicaDatabase.Replica(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(unsigned char *)(v7 + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replicaUpdated) = 0;
  swift_bridgeObjectRetain();
  uint64_t v22 = v41;
  uint64_t v23 = sub_1C3F516B0(a1, a2, v36, v37, v38, v39, v40);
  if (v22 || (uint64_t v41 = v12, a1 == 0x656D3A3A656C6966) && a2 == 0xED00003A79726F6DLL || (sub_1C44982E8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1C3F60AA0();
    uint64_t v39 = 0;
    uint64_t v40 = v23;
    uint64_t v25 = v32;
    (*(void (**)(char *, void, uint64_t))(v32 + 104))(v17, *MEMORY[0x1E4FBCB48], v15);
    swift_retain();
    uint64_t v26 = sub_1C4497A88();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v15);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = a1;
    *(void *)(v27 + 24) = a2;
    aBlock[4] = sub_1C43BE714;
    void aBlock[5] = v27;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1C3F61AC0;
    aBlock[3] = &block_descriptor_11;
    uint64_t v28 = _Block_copy(aBlock);
    sub_1C4496D88();
    aBlock[7] = MEMORY[0x1E4FBC860];
    sub_1C3FBD45C();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0960);
    sub_1C3FBC8D4();
    uint64_t v29 = v33;
    sub_1C4497BF8();
    uint64_t v30 = (void *)v26;
    MEMORY[0x1C87806C0](0, v14, v11, v28);
    uint64_t v23 = v40;
    swift_release();
    _Block_release(v28);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v29);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v41);
    swift_release();
  }
  return v23;
}

uint64_t sub_1C3F59BBC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F59C04()
{
  return sub_1C3F97DE4();
}

uint64_t Capsule<>.init(serializedData:allowedAppFormats:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v34 = a6;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBFC98);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v31 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v20 = (char *)&v31 + *(int *)(v17 + 64) - v18;
  sub_1C3FACEA0((unsigned char *)&v31 - v18, (uint64_t)v20, a1, a2);
  if (v6)
  {
    sub_1C3F7E2CC(a1, a2);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v32 = a1;
    unint64_t v33 = a2;
    *((_WORD *)v19 + 1) = v21;
    if (a3 && (__int16 v23 = v21, v24 = sub_1C443ECE4(v21, a3), swift_bridgeObjectRelease(), LOWORD(v21) = v23, !v24))
    {
      uint64_t v29 = (uint64_t)&v16[*(int *)(v10 + 64)];
      *uint64_t v16 = *v19;
      *((_WORD *)v16 + 1) = v23;
      sub_1C3F8F520((uint64_t)v20, v29, type metadata accessor for Proto_Document);
      sub_1C3F8F634(v29, type metadata accessor for Proto_Document);
      sub_1C3FE3FF0();
      swift_allocError();
      *(void *)uint64_t v30 = v23;
      *(void *)(v30 + 8) = 0;
      *(unsigned char *)(v30 + 16) = 1;
      swift_willThrow();
    }
    else
    {
      uint64_t v25 = (uint64_t)&v13[*(int *)(v10 + 64)];
      char v26 = *v19;
      *uint64_t v13 = *v19;
      *((_WORD *)v13 + 1) = v21;
      __int16 v27 = v21;
      sub_1C3F8F520((uint64_t)v20, v25, type metadata accessor for Proto_Document);
      char v37 = v26;
      if (qword_1EBBC09E0 != -1) {
        swift_once();
      }
      uint64_t v28 = qword_1EBBC5A30;
      swift_retain();
      sub_1C3F74E7C(&v37, v27, v25, 0, v28, v35, v36, v34);
    }
    sub_1C3F7E2CC(v32, v33);
    return sub_1C3F962E0((uint64_t)v19, &qword_1EBBBFC98);
  }
}

uint64_t sub_1C3F59EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F97804(a1, a2, a3, (void (*)(void))type metadata accessor for Proto_Set.Element, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3F92640);
}

uint64_t sub_1C3F59EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F97804(a1, a2, a3, (void (*)(void))type metadata accessor for Proto_Subsequence, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3F97978);
}

uint64_t sub_1C3F59F38(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = &v19[-v7];
  uint64_t v9 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v10 = *(void *)(v1 + v9);
    type metadata accessor for Proto_CRDT._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = v11 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    uint64_t v13 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = v10 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1C3F970C4(v14, (uint64_t)v8, &qword_1EBBC0648);
    swift_beginAccess();
    sub_1C3F98338((uint64_t)v8, v12, &qword_1EBBC0648);
    swift_endAccess();
    *(void *)(v1 + v9) = v11;
    swift_release();
  }
  uint64_t v15 = *(void *)(v1 + v9);
  sub_1C3F92E00(a1, (uint64_t)v8, type metadata accessor for Proto_OrderedSet);
  uint64_t v16 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1C3F961BC((uint64_t)v8, (uint64_t)v6, &qword_1EBBC0648);
  uint64_t v17 = v15 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338((uint64_t)v6, v17, &qword_1EBBC0648);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1C3F5A1A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0598);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C4496888();
  uint64_t v16 = *(int *)(type metadata accessor for Proto_Document(0) + 20);
  if (qword_1EBBC0328 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_1EBBC05C0;
  *(void *)(a5 + v16) = qword_1EBBC05C0;
  MEMORY[0x1F4188790](v17);
  *(&v27 - 4) = a2;
  *(&v27 - 3) = a3;
  *(&v27 - 2) = a1;
  *(&v27 - 1) = v5;
  swift_retain();
  uint64_t v18 = v29;
  sub_1C3F5585C(v28, (uint64_t)v15);
  if (v18) {
    return sub_1C3F9229C(a5, type metadata accessor for Proto_Document);
  }
  uint64_t v20 = v5;
  sub_1C3FA1CCC((uint64_t)v15, (uint64_t)v12, type metadata accessor for Proto_CRDT);
  uint64_t v21 = type metadata accessor for Proto_Document.OneOf_Root(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v12, 0, 1, v21);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    uint64_t v22 = swift_retain();
    *(void *)(a5 + v16) = sub_1C3F7CB4C(v22);
    swift_release();
  }
  uint64_t v23 = *(void *)(a5 + v16)
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338((uint64_t)v12, v23, &qword_1EBBC0598);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  uint64_t v24 = *(void *)(v20 + 64);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    uint64_t v25 = swift_retain();
    *(void *)(a5 + v16) = sub_1C3F7CB4C(v25);
    swift_release();
  }
  char v26 = (void *)(*(void *)(a5 + v16)
                 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references);
  swift_beginAccess();
  *char v26 = v24;
  swift_bridgeObjectRelease();
  sub_1C3FB065C(a5);
  return sub_1C3F9229C((uint64_t)v15, type metadata accessor for Proto_CRDT);
}

uint64_t sub_1C3F5A528@<X0>(uint64_t a1@<X8>)
{
  return sub_1C3F5A544(*(void *)(v1 + 16), a1);
}

uint64_t sub_1C3F5A544@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = qword_1EBBC5A08 + 1;
  if (__OFADD__(qword_1EBBC5A08, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = result;
    ++qword_1EBBC5A08;
    uint64_t v5 = sub_1C4496678();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
    uint64_t result = type metadata accessor for Replica();
    *(void *)(a2 + *(int *)(result + 20)) = v3;
  }
  return result;
}

uint64_t CRSet.description.getter()
{
  uint64_t v1 = sub_1C4496678();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  uint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  sub_1C4497D28();
  uint64_t v16 = v14;
  unint64_t v17 = v15;
  sub_1C4497268();
  uint64_t v6 = *(void *)(v5 + 16) + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07E0);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C449B4A0;
  char v8 = sub_1C4496658();
  uint64_t v9 = MEMORY[0x1E4FBC358];
  uint64_t v10 = MEMORY[0x1E4FBC3B0];
  *(void *)(v7 + 56) = MEMORY[0x1E4FBC358];
  *(void *)(v7 + 64) = v10;
  *(unsigned char *)(v7 + 32) = v8;
  uint64_t v11 = sub_1C4496658();
  *(void *)(v7 + 96) = v9;
  *(void *)(v7 + 104) = v10;
  *(unsigned char *)(v7 + 72) = BYTE1(v11);
  sub_1C44971E8();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_1C4497268();
  swift_bridgeObjectRelease();
  sub_1C4497268();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1C3F67294();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C4497268();
  swift_beginAccess();
  uint64_t v13 = *(void *)(v5 + 40);
  sub_1C4497008();
  swift_getWitnessTable();
  sub_1C44982B8();
  sub_1C4497268();
  return v16;
}

uint64_t sub_1C3F5A8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = type metadata accessor for Proto4_Root(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  *(void *)(v3 + 24) = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v3 + 32) = MEMORY[0x1E4FBC868];
  swift_bridgeObjectRelease();
  uint64_t v14 = (uint64_t)v52;
  sub_1C3FBC974(a1, a2, a3, (uint64_t)v13);
  if (v14) {
    return v3;
  }
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v51 = 0;
  v46[1] = v8;
  uint64_t v48 = a3;
  uint64_t v49 = a1;
  uint64_t v50 = a2;
  uint64_t v47 = v10;
  v52 = v13;
  int v16 = *(unsigned __int8 *)(v4 + 72);
  if (*(unsigned char *)(v4 + 72))
  {
    unint64_t v17 = *(void **)(v4 + 16);
    if (qword_1EBBC10F0 != -1) {
      swift_once();
    }
    uint64_t v18 = *(void **)(qword_1EBBC5A60 + 40);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v17;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = sub_1C3F5F33C;
    *(void *)(v20 + 24) = v19;
    v57 = sub_1C3F5F2E0;
    uint64_t v58 = v20;
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v55 = sub_1C3F5F2B8;
    id v56 = &block_descriptor_318;
    uint64_t v21 = _Block_copy(&aBlock);
    uint64_t v22 = v18;
    id v23 = v17;
    swift_retain();
    swift_release();
    dispatch_sync(v22, v21);

    _Block_release(v21);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      __int16 v25 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v48 + 16) + 8) + 40))(v50);
      *(void *)((char *)&v53 + 6) = 0;
      *(void *)&long long v53 = 0;
      BYTE14(v53) = 8;
      uint64_t v26 = v51;
      sub_1C3F73B18((uint64_t)&v53, (uint64_t)&v53 + 8, (v16 + 4), v25);
      *(void *)&long long aBlock = v53;
      *((void *)&aBlock + 1) = DWORD2(v53) | ((unint64_t)BYTE12(v53) << 32) | ((unint64_t)BYTE13(v53) << 40) | ((unint64_t)BYTE14(v53) << 48);
      sub_1C3FAD5C8((unint64_t *)&qword_1EBBC05F0, (void (*)(uint64_t))type metadata accessor for Proto_Document);
      uint64_t v27 = (uint64_t)v52;
      uint64_t v3 = (uint64_t)v52;
      uint64_t v28 = sub_1C4496AA8();
      if (!v26)
      {
        uint64_t v35 = v28;
        unint64_t v36 = v29;
        sub_1C4496588();
        sub_1C3F7E2CC(v35, v36);
        uint64_t v3 = aBlock;
      }
      sub_1C3F9229C(v27, type metadata accessor for Proto_Document);
      return v3;
    }
    __break(1u);
  }
  else
  {
    type metadata accessor for Upgrade4to5();
    uint64_t v30 = (void *)swift_allocObject();
    v30[2] = v15;
    uint64_t v31 = MEMORY[0x1E4FBC868];
    v30[3] = MEMORY[0x1E4FBC868];
    v30[4] = v15;
    v30[5] = v31;
    v30[6] = 0;
    v30[7] = 0;
    uint64_t v33 = v51;
    uint64_t v32 = (uint64_t)v52;
    uint64_t v3 = (uint64_t)v30;
    sub_1C43A7A18((uint64_t)v52, (uint64_t)v47);
    if (v33)
    {
      sub_1C3F9229C(v32, type metadata accessor for Proto_Document);
      swift_release();
      return v3;
    }
    *(void *)((char *)&aBlock + 6) = 0;
    *(void *)&long long aBlock = 0;
    BYTE14(aBlock) = 8;
    sub_1C3F73B18((uint64_t)&aBlock, (uint64_t)&aBlock + 8, 4, 0);
    *(void *)&long long v53 = aBlock;
    *((void *)&v53 + 1) = DWORD2(aBlock) | ((unint64_t)BYTE12(aBlock) << 32) | ((unint64_t)BYTE13(aBlock) << 40) | ((unint64_t)BYTE14(aBlock) << 48);
    sub_1C3FAD5C8(&qword_1EA39C098, (void (*)(uint64_t))type metadata accessor for Proto4_Root);
    uint64_t v37 = sub_1C4496AA8();
    unint64_t v39 = v38;
    sub_1C4496588();
    sub_1C3F7E2CC(v37, v39);
    uint64_t isEscapingClosureAtFileLocation = *(void *)(v4 + 16);
    if (qword_1EBBC10F0 == -1) {
      goto LABEL_13;
    }
  }
  swift_once();
LABEL_13:
  uint64_t v40 = *(void **)(qword_1EBBC5A60 + 40);
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = isEscapingClosureAtFileLocation;
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = sub_1C3F5F33C;
  *(void *)(v42 + 24) = v41;
  v57 = sub_1C3F5F2E0;
  uint64_t v58 = v42;
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v55 = sub_1C3F5F2B8;
  id v56 = &block_descriptor_329;
  uint64_t v43 = _Block_copy(&aBlock);
  uint64_t v44 = v40;
  id v45 = (id)isEscapingClosureAtFileLocation;
  swift_retain();
  swift_release();
  dispatch_sync(v44, v43);

  _Block_release(v43);
  LOBYTE(v43) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_release();
  if (v43) {
    __break(1u);
  }
  sub_1C3F9229C((uint64_t)v47, type metadata accessor for Proto4_Root);
  sub_1C3F9229C((uint64_t)v52, type metadata accessor for Proto_Document);
  return v53;
}

uint64_t sub_1C3F5B03C()
{
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version, &qword_1EBBC0578);
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt, &qword_1EBBC04F8);
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath, &qword_1EBBC0560);
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F5B0D8(void *a1, uint64_t (*a2)(void))
{
  swift_release();
  sub_1C3F9229C(v2 + *a1, a2);
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F5B15C()
{
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version, &qword_1EBBC0578);
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp, &qword_1EBBC0620);
  swift_bridgeObjectRelease();
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion, &qword_1EBBC0578);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t CREncoder.__deallocating_deinit()
{
  CREncoder.deinit();
  return swift_deallocClassInstance();
}

uint64_t CREncoder.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

sqlite3 *sub_1C3F5B2F8()
{
  ppDb[1] = *(sqlite3 **)MEMORY[0x1E4F143B8];
  uint64_t v1 = sub_1C4496498();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v38 - v6;
  uint64_t v40 = v0;
  uint64_t v9 = *(void *)(v0 + 16);
  unint64_t v8 = *(void *)(v0 + 24);
  uint64_t v43 = v9;
  unint64_t v44 = v8;
  ppDb[0] = 0;
  BOOL v10 = v9 == 0x656D3A3A656C6966 && v8 == 0xED00003A79726F6DLL;
  if (v10 || (sub_1C44982E8() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    unsigned int v11 = 0;
  }
  else
  {
    uint64_t v12 = self;
    swift_bridgeObjectRetain();
    id v13 = objc_msgSend(v12, sel_defaultManager);
    uint64_t v14 = (void *)sub_1C4497188();
    unsigned int v11 = objc_msgSend(v13, sel_fileExistsAtPath_, v14);
  }
  if (sub_1C44972A8())
  {
    id v15 = objc_msgSend(self, sel_defaultManager);
    sub_1C44963E8();
    sub_1C4496458();
    int v16 = *(void (**)(char *, uint64_t))(v2 + 8);
    v16(v5, v1);
    unint64_t v17 = (void *)sub_1C4496418();
    v16(v7, v1);
    uint64_t v41 = 0;
    unsigned int v18 = objc_msgSend(v15, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v17, 1, 0, &v41);

    id v19 = (id)v41;
    if (!v18)
    {
      uint64_t v32 = v19;
      swift_bridgeObjectRelease();
      sub_1C44963A8();

      return (sqlite3 *)swift_willThrow();
    }
    uint64_t v41 = 0x3A656C6966;
    unint64_t v42 = 0xE500000000000000;
    sub_1C4497268();
    swift_bridgeObjectRelease();
    uint64_t v43 = v41;
    unint64_t v44 = v42;
  }
  uint64_t v20 = v40;
  int v21 = *(unsigned __int8 *)(v40 + 42);
  if (v21 == 1)
  {
    sub_1C4497268();
    int v22 = 32833;
  }
  else
  {
    int v22 = 32838;
  }
  uint64_t v23 = sub_1C4497238();
  swift_bridgeObjectRelease();
  int v24 = sqlite3_open_v2((const char *)(v23 + 32), ppDb, v22, 0);
  uint64_t result = (sqlite3 *)swift_release();
  if (v24)
  {
    *(unsigned char *)(v20 + 40) = 1;
    if (sqlite3_errmsg(ppDb[0]))
    {
      uint64_t v26 = sub_1C4497288();
      uint64_t v28 = v27;
      sub_1C3FE3570();
      swift_allocError();
      *(void *)uint64_t v29 = v26;
      *(void *)(v29 + 8) = v28;
    }
    else
    {
      sub_1C3FE3570();
      swift_allocError();
      *(void *)uint64_t v29 = 0xD000000000000026;
      *(void *)(v29 + 8) = 0x80000001C44B0E50;
    }
    *(unsigned char *)(v29 + 16) = 0;
    swift_willThrow();
    uint64_t result = ppDb[0];
    if (ppDb[0]) {
      return (sqlite3 *)sqlite3_close(ppDb[0]);
    }
    return result;
  }
  *(sqlite3 **)(v20 + 32) = ppDb[0];
  *(unsigned char *)(v20 + 40) = 0;
  if (*(unsigned char *)(v20 + 41) == 1)
  {
    uint64_t v30 = v39;
    uint64_t result = (sqlite3 *)sub_1C3FDABD8();
    if (v30) {
      return result;
    }
    uint64_t result = (sqlite3 *)sub_1C3FDACF4();
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v31 = v39;
  }
  if ((v21 & 1) == 0)
  {
    uint64_t result = (sqlite3 *)sub_1C3F53894();
    if (v31) {
      return result;
    }
    uint64_t result = (sqlite3 *)sub_1C3F526D0();
    uint64_t v31 = 0;
  }
  uint64_t v33 = *(void *)(v20 + 48);
  if (v33 || *(void *)(v20 + 56))
  {
    if (v11)
    {
      uint64_t result = (sqlite3 *)sub_1C3FDA7AC(*(void *)(v20 + 56), v33);
      if (v31) {
        return result;
      }
      goto LABEL_46;
    }
    if ((v21 & 1) == 0)
    {
      uint64_t v34 = *(void *)(v20 + 56);
      if (v34)
      {
        if (*(void *)(v34 + 16))
        {
          int v35 = 0;
          LODWORD(v34) = *(unsigned __int16 *)(v34 + 32);
          goto LABEL_40;
        }
        LODWORD(v34) = 0;
      }
      int v35 = 1;
LABEL_40:
      if (v33)
      {
        uint64_t v36 = *(void *)(v33 + 16);
        if (v36)
        {
          int v37 = 0;
          LODWORD(v36) = *(unsigned __int16 *)(v33 + 32);
          goto LABEL_45;
        }
      }
      else
      {
        LODWORD(v36) = 0;
      }
      int v37 = 1;
LABEL_45:
      uint64_t result = (sqlite3 *)sub_1C3FDA9F0(v34 | (v35 << 16), v36 | (v37 << 16));
      if (v31) {
        return result;
      }
    }
  }
LABEL_46:
  uint64_t result = (sqlite3 *)(*(uint64_t (**)(sqlite3 *))(*(void *)v20 + 368))(result);
  if (!v31) {
    return (sqlite3 *)(*(uint64_t (**)(sqlite3 *))(*(void *)v20 + 376))(result);
  }
  return result;
}

uint64_t sub_1C3F5B8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F722CC(a1, a2, a3, (void (*)(void))type metadata accessor for Proto_RLE, &qword_1EBBC01A8, (void (*)(uint64_t))type metadata accessor for Proto_RLE);
}

uint64_t sub_1C3F5B928()
{
  return sub_1C3F5B940();
}

uint64_t sub_1C3F5B940()
{
  uint64_t result = sub_1C4496908();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for Proto_CRDT(0);
        sub_1C3F7251C(&qword_1EBBC0680, (void (*)(uint64_t))type metadata accessor for Proto_CRDT);
        sub_1C4496A68();
      }
      else if (result == 1)
      {
        break;
      }
LABEL_11:
      uint64_t result = sub_1C4496908();
    }
    sub_1C44969E8();
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1C3F5BA78@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v43 = a4;
  unint64_t v44 = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v37 = (uint64_t)&v37 - v11;
  uint64_t v12 = type metadata accessor for Proto_Version(0);
  uint64_t v40 = *(void *)(v12 - 8);
  uint64_t v41 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v39 = (uint64_t *)((char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_1C4496678();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C4496888();
  uint64_t v18 = *(int *)(type metadata accessor for Proto_Set(0) + 20);
  if (qword_1EBBC01E8 != -1) {
    swift_once();
  }
  *(void *)(a5 + v18) = qword_1EBBC01E0;
  uint64_t v19 = a1[2] + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v19, v14);
  swift_retain();
  uint64_t v38 = a2;
  uint64_t v20 = sub_1C3FA10C4((uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set._StorageClass(0);
    swift_allocObject();
    uint64_t v21 = swift_retain();
    *(void *)(a5 + v18) = sub_1C3F7B768(v21);
    swift_release();
  }
  uint64_t v22 = *(void *)(a5 + v18);
  swift_beginAccess();
  *(void *)(v22 + 16) = v20;
  swift_beginAccess();
  uint64_t v23 = a1[4];
  uint64_t v45 = a1[3];
  uint64_t v46 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v24 = v39;
  sub_1C3F9FF10(v38, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set._StorageClass(0);
    swift_allocObject();
    uint64_t v25 = swift_retain();
    *(void *)(a5 + v18) = sub_1C3F7B768(v25);
    swift_release();
  }
  uint64_t v26 = *(void *)(a5 + v18);
  uint64_t v27 = v37;
  sub_1C3F720D8((uint64_t)v24, v37, type metadata accessor for Proto_Version);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v27, 0, 1, v41);
  uint64_t v28 = v42;
  sub_1C3F961BC(v27, v42, &qword_1EBBC0578);
  uint64_t v29 = v26 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v28, v29, &qword_1EBBC0578);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  uint64_t v30 = swift_bridgeObjectRetain();
  uint64_t v31 = v47;
  uint64_t v32 = v44(v30);
  if (v31)
  {
    sub_1C3F9247C(a5, type metadata accessor for Proto_Set);
  }
  else
  {
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Set._StorageClass(0);
      swift_allocObject();
      uint64_t v34 = swift_retain();
      *(void *)(a5 + v18) = sub_1C3F7B768(v34);
      swift_release();
    }
    int v35 = (uint64_t *)(*(void *)(a5 + v18)
                    + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
    swift_beginAccess();
    *int v35 = v33;
  }
  return swift_bridgeObjectRelease();
}

void *sub_1C3F5BF98(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for CROrderedSet.DeduplicatedInfo();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      *uint64_t v7 = *v8;
      swift_bridgeObjectRelease();
      uint64_t v20 = *(int *)(v9 + 44);
      uint64_t v21 = (char *)v7 + v20;
      uint64_t v22 = (char *)v8 + v20;
      uint64_t v23 = sub_1C44967E8();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 40))(v21, v22, v23);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v18 = sub_1C4497B38();
    memcpy(v7, v8, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  *uint64_t v7 = *v8;
  uint64_t v14 = *(int *)(v9 + 44);
  uint64_t v15 = (char *)v7 + v14;
  uint64_t v16 = (char *)v8 + v14;
  uint64_t v17 = sub_1C44967E8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_1C3F5C1A4(void (*a1)(void))
{
  a1();
  return swift_deallocClassInstance();
}

uint64_t Capsule.Ref.deinit()
{
  sub_1C3F6C6F0(*(void *)(v0 + 16), *(void *)(v0 + 24));
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104);
  uint64_t v2 = sub_1C4497B38();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t sub_1C3F5C2AC()
{
  return sub_1C3F5C2C4();
}

uint64_t sub_1C3F5C2C4()
{
  if (!*(void *)(*v0 + 16) || (uint64_t result = sub_1C4496AF8(), !v1))
  {
    if (!*(void *)(v0[1] + 16)
      || (type metadata accessor for Proto_CRDT(0),
          sub_1C3F7251C(&qword_1EBBC0680, (void (*)(uint64_t))type metadata accessor for Proto_CRDT),
          uint64_t result = sub_1C4496BC8(),
          !v1))
    {
      if (!*(void *)(v0[2] + 16) || (uint64_t result = sub_1C4496AF8(), !v1))
      {
        type metadata accessor for Proto_Struct(0);
        return sub_1C4496878();
      }
    }
  }
  return result;
}

uint64_t sub_1C3F5C408(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v55 = a6;
  int v52 = a3;
  uint64_t v50 = a2;
  uint64_t v60 = a4;
  uint64_t v8 = *(void *)(a4 + 16);
  id v56 = *(void **)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  int v13 = (char *)&v50 - v12;
  uint64_t v14 = sub_1C4497B38();
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v50 - v16;
  uint64_t v18 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v53 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v23 = (char *)&v50 - v22;
  uint64_t v64 = sub_1C4496EB8();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a1, a5);
  sub_1C44972B8();
  uint64_t v51 = a5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v61 = v23;
  uint64_t v62 = AssociatedTypeWitness;
  uint64_t v59 = AssociatedConformanceWitness;
  sub_1C4497B58();
  uint64_t v25 = v56;
  v57 = (unsigned int (*)(char *, uint64_t, uint64_t))v56[6];
  uint64_t v58 = (char *)(v56 + 6);
  if (v57(v17, 1, v8) != 1)
  {
    uint64_t v30 = (void *)v25[4];
    uint64_t v29 = v25 + 4;
    id v56 = v30;
    uint64_t v31 = (void (**)(char *, uint64_t))(v29 - 3);
    uint64_t v32 = (void (**)(char *, char *, uint64_t))(v29 - 2);
    ((void (*)(char *, char *, uint64_t))v30)(v13, v17, v8);
    while (1)
    {
      uint64_t v33 = type metadata accessor for CRSet();
      char v34 = CRSet.insert(_:)(v11, (uint64_t)v13, v33);
      int v35 = *v31;
      (*v31)(v11, v8);
      if (v34)
      {
        (*v32)(v11, v13, v8);
        sub_1C4497528();
        sub_1C44974D8();
      }
      v35(v13, v8);
      sub_1C4497B58();
      if (v57(v17, 1, v8) == 1) {
        break;
      }
      ((void (*)(char *, char *, uint64_t))v56)(v13, v17, v8);
    }
  }
  (*(void (**)(char *, uint64_t))(v53 + 8))(v61, v62);
  uint64_t v26 = v64;
  uint64_t v63 = v64;
  uint64_t v27 = sub_1C4497528();
  uint64_t WitnessTable = swift_getWitnessTable();
  if ((sub_1C4497878() & 1) == 0)
  {
    uint64_t v36 = v60;
    uint64_t v37 = v54;
    sub_1C443280C(v60);
    uint64_t v38 = *(void *)(v36 + 32);
    uint64_t v39 = type metadata accessor for CROrderedSetElement();
    uint64_t v62 = type metadata accessor for CRSequence();
    uint64_t v40 = sub_1C43734D8();
    uint64_t v63 = v26;
    MEMORY[0x1F4188790](v40);
    *(&v50 - 6) = v8;
    uint64_t v41 = *(void *)(v36 + 24);
    *(&v50 - 5) = v51;
    *(&v50 - 4) = v41;
    uint64_t v42 = v55;
    *(&v50 - 3) = v38;
    *(&v50 - 2) = v42;
    *(&v50 - 1) = v37;
    swift_bridgeObjectRetain();
    uint64_t v44 = sub_1C41275E0((void (*)(char *, char *))sub_1C443EC6C, (uint64_t)(&v50 - 8), v27, v39, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v63 = v44;
    if (v52)
    {
      uint64_t v47 = sub_1C4497528();
      uint64_t v48 = swift_getWitnessTable();
      CRSequence.append<A>(contentsOf:)((uint64_t)&v63, v62, v47, v48);
    }
    else
    {
      uint64_t v45 = sub_1C4497528();
      uint64_t v46 = swift_getWitnessTable();
      CRSequence.insert<A>(contentsOf:at:)((uint64_t)&v63, v50, v62, v45, v46);
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t getEnumTagSinglePayload for CRKeyPath(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t sub_1C3F5CA40@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x1E4FBC860];
  return sub_1C4496888();
}

uint64_t sub_1C3F5CA6C@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  return sub_1C4496888();
}

uint64_t sub_1C3F5CA90()
{
  return sub_1C3F5CAB4();
}

uint64_t sub_1C3F5CAB4()
{
  return sub_1C4498038();
}

uint64_t type metadata accessor for CRStructDecoder.KeyedContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C3F5CB54()
{
  return sub_1C3F5CB6C();
}

uint64_t sub_1C3F5CB6C()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_1C4496B38();
      if (!v1)
      {
LABEL_8:
        if (!*(void *)(v0[2] + 16) || (uint64_t result = sub_1C4496B68(), !v1))
        {
          type metadata accessor for Proto_Constants(0);
          return sub_1C4496878();
        }
      }
      return result;
  }
}

uint64_t sub_1C3F5CC78()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F5CCC8@<X0>(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *a1 = MEMORY[0x1E4FBC860];
  a1[1] = v1;
  return sub_1C4496888();
}

uint64_t sub_1C3F5CCF4()
{
  uint64_t v1 = sub_1C4496D68();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v25 = v1;
  uint64_t v26 = v2;
  MEMORY[0x1F4188790](v1);
  int v24 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1C4497A38();
  uint64_t v4 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1C4497A08();
  MEMORY[0x1F4188790](v7);
  uint64_t v8 = sub_1C4496DA8();
  uint64_t v22 = *(void *)(v8 - 8);
  uint64_t v23 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v0 + 16) = 1;
  sub_1C3F60AA0();
  sub_1C4496D88();
  aBlock[0] = MEMORY[0x1E4FBC860];
  sub_1C3F5D254(qword_1EBBC1060, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC1040);
  sub_1C3F70AF0((unint64_t *)&qword_1EBBC1050, (uint64_t *)&unk_1EBBC1040);
  sub_1C4497BF8();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCC58], v21);
  *(void *)(v0 + 24) = sub_1C4497A78();
  uint64_t v11 = self;
  id v12 = objc_msgSend(v11, sel_defaultCenter);
  swift_retain();
  int v13 = (void *)sub_1C4497188();
  objc_msgSend(v12, sel_addObserver_selector_name_object_, v0, sel_didEnterBackground, v13, 0);

  swift_release();
  id v14 = objc_msgSend(v11, sel_defaultCenter);
  swift_retain();
  uint64_t v15 = (void *)sub_1C4497188();
  objc_msgSend(v14, sel_addObserver_selector_name_object_, v0, sel_willEnterForeground, v15, 0);

  swift_release();
  uint64_t v16 = (void *)sub_1C4497A48();
  aBlock[4] = sub_1C3FBCB00;
  uint64_t v28 = v0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1C3F61AC0;
  aBlock[3] = &block_descriptor_8;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  sub_1C4496D88();
  aBlock[0] = MEMORY[0x1E4FBC860];
  sub_1C3F5D254((unint64_t *)&qword_1EBBC07F0, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0960);
  sub_1C3F70AF0((unint64_t *)&qword_1EBBC0968, &qword_1EBBC0960);
  uint64_t v18 = v24;
  uint64_t v19 = v25;
  sub_1C4497BF8();
  MEMORY[0x1C87806C0](0, v10, v18, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v19);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v23);
  return v0;
}

uint64_t sub_1C3F5D254(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for CRVersion()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t destroy for CapsuleReference()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C3F5D32C()
{
  return sub_1C3F5D344();
}

uint64_t sub_1C3F5D344()
{
  uint64_t result = sub_1C4496908();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_1C44969C8();
      }
      else if (result == 1)
      {
        sub_1C4496988();
      }
      uint64_t result = sub_1C4496908();
    }
  }
  return result;
}

uint64_t sub_1C3F5D3E8()
{
  swift_release();
  sub_1C3F5D454(v0 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value);
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F5D454(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Proto_CustomCRValue(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C3F5D4B0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version, &qword_1EBBC0578);
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedByVersion, &qword_1EBBC0578);
  swift_bridgeObjectRelease();
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__fromVersion, &qword_1EBBC0578);
  sub_1C3F962E0(v0+ OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__fromAddedByVersion, &qword_1EBBC0578);
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F5D58C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v69 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC0748);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v59 = (uint64_t)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v58 = (uint64_t)&v52 - v8;
  uint64_t v9 = type metadata accessor for Proto_Set(0);
  uint64_t v56 = *(void *)(v9 - 8);
  uint64_t v57 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v65 = (uint64_t)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC06E8);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v64 = (uint64_t)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v63 = (uint64_t)&v52 - v14;
  uint64_t v15 = type metadata accessor for Proto_Sequence(0);
  uint64_t v61 = *(void *)(v15 - 8);
  uint64_t v62 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Proto_OrderedSet(0);
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v60 = (uint64_t)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v52 - v21;
  sub_1C4496888();
  uint64_t v23 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  if (qword_1EBBC0668 != -1) {
    swift_once();
  }
  uint64_t v66 = a3;
  *(void *)(a3 + v23) = qword_1EBBC0660;
  swift_retain();
  sub_1C4496888();
  uint64_t v24 = *(int *)(v18 + 20);
  if (qword_1EBBBC060 != -1) {
    swift_once();
  }
  *(void *)&v22[v24] = qword_1EBBBC058;
  uint64_t v70 = *v68;
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v26 = *(void *)(a2 + 32);
  type metadata accessor for CROrderedSetElement();
  uint64_t v27 = type metadata accessor for CRSequence();
  swift_retain();
  swift_retain();
  uint64_t v28 = v67;
  sub_1C3F5539C(v69, (uint64_t)v17);
  swift_release();
  if (v28) {
    goto LABEL_10;
  }
  uint64_t v54 = v25;
  uint64_t v55 = v26;
  uint64_t v52 = v27;
  uint64_t v53 = a2;
  uint64_t v67 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_OrderedSet._StorageClass(0);
    swift_allocObject();
    uint64_t v29 = swift_retain();
    *(void *)&v22[v24] = sub_1C3F7BD98(v29);
    swift_release();
  }
  uint64_t v30 = *(void *)&v22[v24];
  uint64_t v31 = v63;
  sub_1C3F896D0((uint64_t)v17, v63, type metadata accessor for Proto_Sequence);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v31, 0, 1, v62);
  uint64_t v32 = v64;
  sub_1C3F961BC(v31, v64, &qword_1EBBC06E8);
  uint64_t v33 = v30 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v32, v33, &qword_1EBBC06E8);
  swift_endAccess();
  uint64_t v34 = swift_release();
  int v35 = v68;
  uint64_t v71 = v68[1];
  MEMORY[0x1F4188790](v34);
  uint64_t v36 = *(void *)(v53 + 24);
  *(&v52 - 6) = v54;
  *(&v52 - 5) = v36;
  *(&v52 - 4) = v55;
  *(&v52 - 3) = (uint64_t)v35;
  uint64_t v37 = v69;
  *(&v52 - 2) = v69;
  type metadata accessor for CRSet();
  swift_retain();
  uint64_t v38 = v65;
  uint64_t v39 = v67;
  sub_1C3FBCA24(v37, sub_1C3FBD134, (uint64_t)(&v52 - 8), v65);
  if (v39)
  {
    swift_release();
LABEL_10:
    sub_1C3F86DB8((uint64_t)v22, type metadata accessor for Proto_OrderedSet);
    return sub_1C3F86DB8(v66, type metadata accessor for Proto_CRDT);
  }
  uint64_t v67 = 0;
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_OrderedSet._StorageClass(0);
    swift_allocObject();
    uint64_t v41 = swift_retain();
    *(void *)&v22[v24] = sub_1C3F7BD98(v41);
    swift_release();
  }
  uint64_t v42 = *(void *)&v22[v24];
  uint64_t v43 = v38;
  uint64_t v44 = v58;
  sub_1C3F896D0(v43, v58, type metadata accessor for Proto_Set);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v44, 0, 1, v57);
  uint64_t v45 = v59;
  sub_1C3F961BC(v44, v59, (uint64_t *)&unk_1EBBC0748);
  uint64_t v46 = v42 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v45, v46, (uint64_t *)&unk_1EBBC0748);
  swift_endAccess();
  uint64_t v47 = swift_release();
  uint64_t v70 = *v35;
  MEMORY[0x1F4188790](v47);
  *(&v52 - 4) = v54;
  *(&v52 - 3) = v36;
  *(&v52 - 2) = v55;
  *(&v52 - 1) = v37;
  type metadata accessor for Proto_Timestamp(0);
  swift_retain();
  uint64_t v48 = sub_1C3F65E34((void (*)(char *))sub_1C3F6680C, (uint64_t)(&v52 - 6));
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_OrderedSet._StorageClass(0);
    swift_allocObject();
    uint64_t v49 = swift_retain();
    *(void *)&v22[v24] = sub_1C3F7BD98(v49);
    swift_release();
  }
  uint64_t v50 = (uint64_t *)(*(void *)&v22[v24]
                  + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamps);
  swift_beginAccess();
  *uint64_t v50 = v48;
  swift_bridgeObjectRelease();
  uint64_t v51 = v60;
  sub_1C3F86C30((uint64_t)v22, v60, type metadata accessor for Proto_OrderedSet);
  sub_1C3F59F38(v51);
  return sub_1C3F86DB8((uint64_t)v22, type metadata accessor for Proto_OrderedSet);
}

uint64_t sub_1C3F5DD78()
{
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key, &qword_1EBBC0540);
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value, &qword_1EBBC04F8);
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy, &qword_1EBBC0578);
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__partialValue, &qword_1EBBC04F8);
  return swift_deallocClassInstance();
}

double static CRKeyPath.unique.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = sub_1C4496678();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C4496668();
  *(void *)&long long v11 = sub_1C3F5E0D0((uint64_t)&unk_1F1F9D920);
  *((void *)&v11 + 1) = v6;
  uint64_t v7 = sub_1C3F5DF48();
  unint64_t v9 = v8;
  sub_1C4496588();
  sub_1C3F7E2CC(v7, v9);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  double result = *(double *)&v11;
  *a1 = v11;
  return result;
}

uint64_t sub_1C3F5DF48()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t __src = sub_1C4496658();
  char v10 = v0;
  char v11 = v1;
  char v12 = v2;
  char v13 = v3;
  char v14 = v4;
  char v15 = v5;
  char v16 = v6;
  char v17 = v7;
  sub_1C4496658();
  return sub_1C3F5E01C(&__src, 16);
}

uint64_t sub_1C3F5E01C(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return sub_1C3F5E208(__src, &__src[a2]);
  }
  sub_1C44962E8();
  swift_allocObject();
  sub_1C4496288();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  sub_1C44964E8();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_1C3F5E0D0(uint64_t a1)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0970);
  uint64_t v10 = sub_1C3F815A4(&qword_1EBBC0978, &qword_1EBBC0970);
  v8[0] = a1;
  char v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  char v3 = (unsigned char *)(*v2 + 32);
  char v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_1C3F5E190(v3, v4, &v7);
  uint64_t v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

unsigned char *sub_1C3F5E190@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)sub_1C3F5E208(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)sub_1C40F4B48((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)sub_1C40F4BC4((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1C3F5E208(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1C3F5E2CC(void *a1, uint64_t *a2)
{
  sub_1C3F962E0(v2 + *a1, a2);
  return swift_deallocClassInstance();
}

void sub_1C3F5E3C8(uint64_t a1)
{
  char v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 72))();
  v2(v1, 0);
  free(v1);
}

void sub_1C3F5E428(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v4 = v2[21];
    char v3 = (void *)v2[22];
    uint64_t v5 = v2[20];
    sub_1C3F6C6F0(v2[23], v2[24]);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  }
  else
  {
    uint64_t v7 = v2[23];
    unint64_t v6 = v2[24];
    uint64_t v8 = v2[21];
    char v3 = (void *)v2[22];
    uint64_t v9 = v2[20];
    __swift_project_boxed_opaque_existential_1(v2, v2[26]);
    v2[12] = v9;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v2 + 9);
    (*(void (**)(uint64_t *, void *, uint64_t))(v8 + 16))(boxed_opaque_existential_1, v3, v9);
    off_1F1F9CE78();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v2 + 9));
    swift_beginAccess();
    sub_1C3F6C704(v7, v6);
    swift_retain();
    sub_1C3F81BF8(v11, v7, v6);
    swift_endAccess();
    swift_release();
    sub_1C3F6C6F0(v7, v6);
    sub_1C3F7E2CC(v11[0], v11[1]);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v3, v9);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  free(v3);
  free(v2);
}

uint64_t sub_1C3F5E5D4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248))();
}

uint64_t sub_1C3F5E618(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 264);
  uint64_t v4 = sub_1C4497B38();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = v11 - v6 + 16;
  sub_1C3F5E790(a1, (uint64_t)v11);
  swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v7, 0, 1, v3);
  uint64_t v8 = v1 + *(void *)(*(void *)v1 + 280);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v8, v7, v4);
  return swift_endAccess();
}

uint64_t sub_1C3F5E790(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *sub_1C3F5E7EC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  unint64_t v7 = a2[2];
  swift_bridgeObjectRetain();
  sub_1C3F7E324(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_1C4496898();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t CROrderedSet.map<A>(_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = sub_1C4497B38();
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v49 = (uint64_t)&v36 - v9;
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  char v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  char v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a3 + 32);
  uint64_t v52 = v6;
  uint64_t v48 = v15;
  uint64_t v16 = type metadata accessor for CROrderedSetElement();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v37 = *(void *)(v17 + 64);
  MEMORY[0x1F4188790](v16);
  uint64_t v54 = (char *)&v36 - v18;
  uint64_t v57 = sub_1C4496EB8();
  CROrderedSet.count.getter(a3);
  uint64_t v45 = sub_1C4497528();
  sub_1C4497458();
  uint64_t v50 = a3;
  uint64_t v51 = v4;
  uint64_t v19 = sub_1C3F87134(a3);
  if (MEMORY[0x1C8780160](v19, v16))
  {
    uint64_t v20 = 0;
    uint64_t v43 = (void (**)(char *, char *, uint64_t))(v53 + 16);
    uint64_t v44 = (void (**)(char *, uint64_t *, uint64_t))(v17 + 16);
    uint64_t v42 = (void (**)(char *, uint64_t))(v17 + 8);
    uint64_t v40 = v14;
    uint64_t v41 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
    uint64_t v21 = (void (**)(char *, uint64_t))(v53 + 8);
    uint64_t v38 = v17;
    uint64_t v39 = v19;
    while (1)
    {
      char v22 = sub_1C44974A8();
      sub_1C4497438();
      if (v22)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v54, v19+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(void *)(v17 + 72) * v20, v16);
        uint64_t v23 = v52;
        uint64_t v24 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t result = sub_1C4497DA8();
        uint64_t v23 = v52;
        if (v37 != 8) {
          goto LABEL_17;
        }
        uint64_t v56 = result;
        (*v44)(v54, &v56, v16);
        swift_unknownObjectRelease();
        uint64_t v24 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_12:
          __break(1u);
          goto LABEL_13;
        }
      }
      uint64_t v53 = v24;
      uint64_t v25 = v21;
      uint64_t v26 = *(void *)(v51 + 8);
      uint64_t v27 = v54;
      (*v43)(v12, v54, v23);
      uint64_t v28 = *v42;
      swift_retain();
      v28(v27, v16);
      uint64_t v56 = v26;
      uint64_t v29 = type metadata accessor for CRSet();
      uint64_t v30 = v49;
      CRSet.subscript.getter((uint64_t)v12, v29, v49);
      uint64_t v31 = v30;
      swift_release();
      uint64_t result = (*v41)(v30, 1, v23);
      if (result == 1) {
        break;
      }
      uint64_t v21 = v25;
      uint64_t v33 = *v25;
      (*v25)(v12, v23);
      uint64_t v34 = v55;
      v46(v31);
      if (v34)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return ((uint64_t (*)(uint64_t, uint64_t))v33)(v31, v23);
      }
      uint64_t v55 = 0;
      v33((char *)v31, v23);
      sub_1C44974D8();
      uint64_t v19 = v39;
      uint64_t v35 = MEMORY[0x1C8780160](v39, v16);
      ++v20;
      uint64_t v17 = v38;
      if (v53 == v35) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return v57;
  }
  return result;
}

uint64_t sub_1C3F5ED60(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = sub_1C3F87134(a1);
  uint64_t v4 = type metadata accessor for CROrderedSetElement();
  uint64_t v5 = a2(v3, v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t CROrderedSet.count.getter(uint64_t a1)
{
  return sub_1C3F5ED60(a1, MEMORY[0x1E4FBB310]);
}

uint64_t sub_1C3F5EDDC()
{
  sub_1C3F962E0(v0+ OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequenceStartID, &qword_1EBBC0620);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F5EE78(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v7 = sub_1C4496898();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v6 = type metadata accessor for Proto_Reference(0);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = sub_1C4496898();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    uint64_t v6 = type metadata accessor for Proto_Value(0);
  }
  else
  {
    uint64_t v8 = sub_1C4496898();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    uint64_t v6 = type metadata accessor for Proto_CRDT(0);
  }
  *(void *)(a1 + *(int *)(v6 + 20)) = *(void *)(a2 + *(int *)(v6 + 20));
  swift_retain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1C3F5EFC0()
{
  return sub_1C3F5EFD8();
}

uint64_t sub_1C3F5EFD8()
{
  uint64_t result = sub_1C4496908();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_1C44969B8();
      }
      else if (result == 1)
      {
        sub_1C4496A58();
      }
      uint64_t result = sub_1C4496908();
    }
  }
  return result;
}

uint64_t sub_1C3F5F07C()
{
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root, &qword_1EBBC0598);
  swift_bridgeObjectRelease();
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version, &qword_1EBBC0578);
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants, &qword_1EBBC0350);
  swift_bridgeObjectRelease();
  sub_1C3F7E2CC(*(void *)(v0+ OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid), *(void *)(v0+ OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid+ 8));
  swift_bridgeObjectRelease();
  sub_1C3F962E0(v0 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion, &qword_1EBBC0578);
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F5F17C()
{
  return sub_1C3F5F194();
}

uint64_t sub_1C3F5F194()
{
  while (1)
  {
    uint64_t result = sub_1C4496908();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2) {
      sub_1C4496968();
    }
  }
  return result;
}

void *_s9Coherence9CRVersionVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1C3F5F23C@<X0>(uint64_t a1@<X0>, void *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  sub_1C4496888();
  uint64_t v8 = *(int *)(a1 + 20);
  if (*a2 != -1) {
    swift_once();
  }
  *(void *)(a4 + v8) = *a3;
  return swift_retain();
}

uint64_t sub_1C3F5F2B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1C3F5F2E4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1C3F5F30C()
{
  return sub_1C3F5F314(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1C3F5F314(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1C3F5F340()
{
  return sub_1C3F5F348();
}

uint64_t sub_1C3F5F348()
{
  swift_retain();
  sub_1C3F5F394();
  return swift_release();
}

void sub_1C3F5F394()
{
  if ((*(unsigned char *)(v0 + 40) & 1) == 0)
  {
    swift_beginAccess();
    if (*(void *)(*(void *)(v0 + 128) + 16)
      || *(unsigned char *)(v0 + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replicaUpdated) == 1)
    {
      swift_retain();
      sub_1C3F5F750(0, v0, v0);
    }
  }
}

sqlite3_stmt *sub_1C3F5F5A0()
{
  uint64_t result = (sqlite3_stmt *)sub_1C3F5FA40();
  if (!v1)
  {
    uint64_t v3 = result;
    if (sqlite3_step(result) == 101)
    {
      sqlite3_finalize(v3);
      uint64_t v3 = (sqlite3_stmt *)sub_1C3F5FA40();
      if (sqlite3_step(v3) == 101) {
        return (sqlite3_stmt *)sqlite3_finalize(v3);
      }
      if (sqlite3_errmsg(*(sqlite3 **)(v0 + 32)))
      {
LABEL_7:
        uint64_t v4 = sub_1C4497288();
        uint64_t v6 = v5;
        sub_1C3FE3570();
        swift_allocError();
        *(void *)uint64_t v7 = v4;
        *(void *)(v7 + 8) = v6;
        *(unsigned char *)(v7 + 16) = 2;
        swift_willThrow();
        return (sqlite3_stmt *)sqlite3_finalize(v3);
      }
      __break(1u);
    }
    uint64_t result = (sqlite3_stmt *)sqlite3_errmsg(*(sqlite3 **)(v0 + 32));
    if (!result)
    {
      __break(1u);
      return result;
    }
    goto LABEL_7;
  }
  return result;
}

const char *sub_1C3F5F6A8()
{
  uint64_t result = sub_1C3F5FA40();
  if (!v1)
  {
    v0[11] = result;
    v0[12] = sub_1C3F5FA40();
    v0[13] = sub_1C3F5FA40();
    uint64_t result = sub_1C3F5FA40();
    v0[14] = result;
  }
  return result;
}

const char *sub_1C3F5F750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (sqlite3_stmt *)sub_1C3F5FA40();
  if (v3) {
    return (const char *)swift_release();
  }
  uint64_t v8 = v7;
  if (sqlite3_step(v7) != 101)
  {
    uint64_t result = sqlite3_errmsg(*(sqlite3 **)(a2 + 32));
    if (!result)
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    uint64_t v16 = sub_1C4497288();
    uint64_t v18 = v17;
    sub_1C3FE3570();
    swift_allocError();
    *(void *)uint64_t v19 = v16;
    *(void *)(v19 + 8) = v18;
    *(unsigned char *)(v19 + 16) = 2;
    swift_willThrow();
    uint64_t v20 = v8;
LABEL_9:
    sqlite3_finalize(v20);
    return (const char *)swift_release();
  }
  sqlite3_finalize(v8);
  if (a1)
  {
    uint64_t v9 = *(sqlite3 **)(a2 + 32);
    uint64_t v10 = *(sqlite3_snapshot **)(a1 + 16);
    swift_retain();
    if (sqlite3_snapshot_open(v9, "main", v10))
    {
      uint64_t result = sqlite3_errmsg(*(sqlite3 **)(a2 + 32));
      if (result)
      {
        uint64_t v12 = sub_1C4497288();
        uint64_t v14 = v13;
        sub_1C3FE3570();
        swift_allocError();
        *(void *)uint64_t v15 = v12;
        *(void *)(v15 + 8) = v14;
        *(unsigned char *)(v15 + 16) = 4;
        swift_willThrow();
        swift_release();
        return (const char *)swift_release();
      }
      goto LABEL_20;
    }
    swift_release();
  }
  sub_1C3F5FB30(a3);
  uint64_t v21 = (sqlite3_stmt *)sub_1C3F5FA40();
  if (sqlite3_step(v21) == 101)
  {
    uint64_t v20 = v21;
    goto LABEL_9;
  }
  uint64_t result = sqlite3_errmsg(*(sqlite3 **)(a2 + 32));
  if (result)
  {
    uint64_t v22 = sub_1C4497288();
    uint64_t v24 = v23;
    sub_1C3FE3570();
    uint64_t v25 = (void *)swift_allocError();
    *(void *)uint64_t v26 = v22;
    *(void *)(v26 + 8) = v24;
    *(unsigned char *)(v26 + 16) = 2;
    swift_willThrow();
    sqlite3_finalize(v21);
    uint64_t v27 = (sqlite3_stmt *)sub_1C3F5FA40();
    if (sqlite3_step(v27) == 101)
    {
      sqlite3_finalize(v27);
      swift_willThrow();
      return (const char *)swift_release();
    }
    uint64_t result = sqlite3_errmsg(*(sqlite3 **)(a2 + 32));
    if (result)
    {
      uint64_t v28 = sub_1C4497288();
      uint64_t v30 = v29;
      sub_1C3FE3570();
      swift_allocError();
      *(void *)uint64_t v31 = v28;
      *(void *)(v31 + 8) = v30;
      *(unsigned char *)(v31 + 16) = 2;
      swift_willThrow();
      sqlite3_finalize(v27);

      return (const char *)swift_release();
    }
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

const char *sub_1C3F5FA40()
{
  v8[1] = *(sqlite3_stmt **)MEMORY[0x1E4F143B8];
  v8[0] = 0;
  uint64_t v1 = *(sqlite3 **)(v0 + 32);
  uint64_t v2 = sub_1C4497238();
  LODWORD(v1) = sqlite3_prepare_v2(v1, (const char *)(v2 + 32), -1, v8, 0);
  swift_release();
  if (!v1) {
    return (const char *)v8[0];
  }
  uint64_t result = sqlite3_errmsg(*(sqlite3 **)(v0 + 32));
  if (result)
  {
    uint64_t v4 = sub_1C4497288();
    uint64_t v6 = v5;
    sub_1C3FE3570();
    swift_allocError();
    *(void *)uint64_t v7 = v4;
    *(void *)(v7 + 8) = v6;
    *(unsigned char *)(v7 + 16) = 1;
    return (const char *)swift_willThrow();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C3F5FB30(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1C4496678();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07E8);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v11 = *(void *)(a1 + 128);
  uint64_t v12 = *(void *)(v11 + 56);
  uint64_t v58 = v11 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v59 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v66 = v5;
  uint64_t v67 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v64 = v5 + 48;
  uint64_t v65 = v5 + 16;
  uint64_t v62 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v63 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v68 = v11;
  swift_bridgeObjectRetain();
  int64_t v16 = 0;
  uint64_t v56 = v4;
  uint64_t v57 = a1;
  uint64_t v61 = v10;
  while (2)
  {
    if (v15)
    {
      unint64_t v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v23 = v22 | (v16 << 6);
    }
    else
    {
      BOOL v24 = __OFADD__(v16++, 1);
      if (v24)
      {
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      if (v16 >= v59) {
        goto LABEL_52;
      }
      unint64_t v25 = *(void *)(v58 + 8 * v16);
      if (!v25)
      {
        int64_t v26 = v16 + 1;
        if (v16 + 1 >= v59) {
          goto LABEL_52;
        }
        unint64_t v25 = *(void *)(v58 + 8 * v26);
        if (!v25)
        {
          int64_t v26 = v16 + 2;
          if (v16 + 2 >= v59) {
            goto LABEL_52;
          }
          unint64_t v25 = *(void *)(v58 + 8 * v26);
          if (!v25)
          {
            int64_t v26 = v16 + 3;
            if (v16 + 3 >= v59)
            {
LABEL_52:
              (*v67)(v10, 1, 1, v4);
LABEL_53:
              swift_release();
              *(void *)(a1 + 128) = MEMORY[0x1E4FBC870];
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v54 = OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replicaUpdated;
              if (*(unsigned char *)(a1 + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replicaUpdated))
              {
                uint64_t result = sub_1C43BD768();
                if (!v2) {
                  *(unsigned char *)(a1 + v54) = 0;
                }
              }
              return result;
            }
            unint64_t v25 = *(void *)(v58 + 8 * v26);
            if (!v25)
            {
              while (1)
              {
                int64_t v16 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  break;
                }
                if (v16 >= v59) {
                  goto LABEL_52;
                }
                unint64_t v25 = *(void *)(v58 + 8 * v16);
                ++v26;
                if (v25) {
                  goto LABEL_25;
                }
              }
LABEL_66:
              __break(1u);
            }
          }
        }
        int64_t v16 = v26;
      }
LABEL_25:
      unint64_t v15 = (v25 - 1) & v25;
      unint64_t v23 = __clz(__rbit64(v25)) + (v16 << 6);
    }
    uint64_t v27 = v66;
    (*(void (**)(char *, unint64_t, uint64_t))(v66 + 16))(v10, *(void *)(v68 + 48) + *(void *)(v66 + 72) * v23, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v10, 1, v4) == 1) {
      goto LABEL_53;
    }
    (*v63)(v7, v10, v4);
    *(void *)uint64_t __src = sub_1C4496658();
    *(_WORD *)&__src[8] = v28;
    __src[10] = v29;
    __src[11] = v30;
    __src[12] = v31;
    __src[13] = v32;
    char v70 = v33;
    char v71 = v34;
    sub_1C4496658();
    uint64_t v35 = sub_1C3F5E01C(__src, 16);
    uint64_t v37 = v35;
    unint64_t v38 = v36;
    switch(v36 >> 62)
    {
      case 1uLL:
        uint64_t v40 = (v35 >> 32) - (int)v35;
        if (v35 >> 32 < (int)v35) {
          goto LABEL_62;
        }
        uint64_t v60 = v2;
        uint64_t v41 = (char *)sub_1C4496298();
        if (!v41) {
          goto LABEL_4;
        }
        uint64_t v42 = sub_1C44962C8();
        if (__OFSUB__((int)v37, v42)) {
          goto LABEL_65;
        }
        v41 += (int)v37 - v42;
LABEL_4:
        uint64_t v17 = sub_1C44962B8();
        if (v17 >= v40) {
          uint64_t v18 = (v37 >> 32) - (int)v37;
        }
        else {
          uint64_t v18 = v17;
        }
        uint64_t v19 = &v41[v18];
        if (v41) {
          uint64_t v20 = (uint64_t)v19;
        }
        else {
          uint64_t v20 = 0;
        }
        a1 = v57;
        uint64_t v21 = v60;
        sub_1C3F601D0(v41, v20, v57, (uint64_t)v7);
        uint64_t v2 = v21;
        if (!v21) {
          goto LABEL_11;
        }
        goto LABEL_58;
      case 2uLL:
        uint64_t v60 = v2;
        uint64_t v44 = *(void *)(v35 + 16);
        uint64_t v43 = *(void *)(v35 + 24);
        swift_retain();
        swift_retain();
        uint64_t v45 = (char *)sub_1C4496298();
        if (!v45) {
          goto LABEL_36;
        }
        uint64_t v46 = sub_1C44962C8();
        if (__OFSUB__(v44, v46)) {
          goto LABEL_64;
        }
        v45 += v44 - v46;
LABEL_36:
        BOOL v24 = __OFSUB__(v43, v44);
        uint64_t v47 = v43 - v44;
        if (v24) {
          goto LABEL_63;
        }
        uint64_t v48 = sub_1C44962B8();
        if (v48 >= v47) {
          uint64_t v49 = v47;
        }
        else {
          uint64_t v49 = v48;
        }
        uint64_t v50 = &v45[v49];
        if (v45) {
          uint64_t v51 = (uint64_t)v50;
        }
        else {
          uint64_t v51 = 0;
        }
        a1 = v57;
        uint64_t v52 = v60;
        sub_1C3F601D0(v45, v51, v57, (uint64_t)v7);
        uint64_t v2 = v52;
        if (!v52)
        {
          swift_release();
          swift_release();
LABEL_11:
          sub_1C3F7E2CC(v37, v38);
          uint64_t v4 = v56;
LABEL_12:
          sqlite3_reset(*(sqlite3_stmt **)(a1 + 96));
          (*v62)(v7, v4);
          uint64_t v10 = v61;
          continue;
        }
        swift_release();
        swift_release();
LABEL_58:
        sub_1C3F7E2CC(v37, v38);
        uint64_t v4 = v56;
LABEL_59:
        (*v62)(v7, v4);
        return swift_release();
      case 3uLL:
        memset(__src, 0, sizeof(__src));
        uint64_t v39 = __src;
        goto LABEL_46;
      default:
        *(void *)uint64_t __src = v35;
        *(_WORD *)&__src[8] = v36;
        __src[10] = BYTE2(v36);
        __src[11] = BYTE3(v36);
        __src[12] = BYTE4(v36);
        __src[13] = BYTE5(v36);
        uint64_t v39 = &__src[BYTE6(v36)];
LABEL_46:
        sub_1C3F601D0(__src, (uint64_t)v39, a1, (uint64_t)v7);
        if (v2)
        {
          sub_1C3F7E2CC(v37, v38);
          goto LABEL_59;
        }
        sub_1C3F7E2CC(v37, v38);
        goto LABEL_12;
    }
  }
}

uint64_t sub_1C3F601D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 96), 1, a1, 16, *(void (__cdecl **)(void *))(a3 + 72));
  uint64_t v6 = *(sqlite3_stmt **)(a3 + 96);
  swift_beginAccess();
  uint64_t v7 = *(void *)(a3 + 120);
  if (!*(void *)(v7 + 16) || (unint64_t v8 = sub_1C3FA1598(a4), (v9 & 1) == 0))
  {
    uint64_t result = swift_endAccess();
    __break(1u);
    goto LABEL_8;
  }
  sqlite3_int64 v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
  swift_endAccess();
  sqlite3_bind_int64(v6, 2, v10);
  uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a3 + 96));
  if (result == 101) {
    return result;
  }
  sub_1C4497D28();
  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(a3 + 32));
  if (!result)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  sub_1C4497288();
  sub_1C4497268();
  swift_bridgeObjectRelease();
  sub_1C4497268();
  sub_1C3FE3570();
  swift_allocError();
  *(void *)uint64_t v12 = 0xD000000000000010;
  *(void *)(v12 + 8) = 0x80000001C44B3F00;
  *(unsigned char *)(v12 + 16) = 2;
  return swift_willThrow();
}

uint64_t sub_1C3F60340(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v49 = a2;
  uint64_t v54 = a1;
  uint64_t v53 = sub_1C4496498();
  uint64_t v47 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v55 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1C4497A38();
  uint64_t v51 = *(void *)(v5 - 8);
  uint64_t v52 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v50 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_1C4497A08();
  MEMORY[0x1F4188790](v48);
  uint64_t v46 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1C4496DA8();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v45 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1C4496678();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1E4FBC860];
  *(void *)(v2 + 40) = MEMORY[0x1E4FBC860];
  *(void *)(v2 + 48) = sub_1C3F60AE0(v14);
  *(unsigned char *)(v2 + 96) = 0;
  sub_1C4496668();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07E0);
  uint64_t v15 = swift_allocObject();
  long long v43 = xmmword_1C449B4A0;
  *(_OWORD *)(v15 + 16) = xmmword_1C449B4A0;
  char v16 = sub_1C4496658();
  uint64_t v17 = MEMORY[0x1E4FBC358];
  uint64_t v18 = MEMORY[0x1E4FBC3B0];
  *(void *)(v15 + 56) = MEMORY[0x1E4FBC358];
  *(void *)(v15 + 64) = v18;
  uint64_t v19 = v17;
  *(unsigned char *)(v15 + 32) = v16;
  uint64_t v20 = sub_1C4496658();
  *(void *)(v15 + 96) = v19;
  *(void *)(v15 + 104) = v18;
  *(unsigned char *)(v15 + 72) = BYTE1(v20);
  uint64_t v21 = sub_1C44971E8();
  uint64_t v23 = v22;
  BOOL v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v13, v10);
  *(void *)(v2 + 104) = v21;
  *(void *)(v2 + 112) = v23;
  *(void *)(v2 + 16) = sub_1C3F60CD4(MEMORY[0x1E4FBC860]);
  type metadata accessor for AssetActor(0);
  uint64_t v25 = swift_allocObject();
  swift_bridgeObjectRetain();
  sub_1C3F60EE8(v21, v23);
  *(void *)(v3 + 24) = v25;
  unint64_t v44 = sub_1C3F60AA0();
  unint64_t v56 = 0;
  unint64_t v57 = 0xE000000000000000;
  sub_1C4497D28();
  swift_bridgeObjectRelease();
  unint64_t v56 = 0xD00000000000001ELL;
  unint64_t v57 = 0x80000001C44B4660;
  sub_1C4496668();
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = v43;
  char v27 = sub_1C4496658();
  uint64_t v28 = MEMORY[0x1E4FBC358];
  *(void *)(v26 + 56) = MEMORY[0x1E4FBC358];
  *(void *)(v26 + 64) = v18;
  *(unsigned char *)(v26 + 32) = v27;
  uint64_t v29 = sub_1C4496658();
  *(void *)(v26 + 96) = v28;
  *(void *)(v26 + 104) = v18;
  *(unsigned char *)(v26 + 72) = BYTE1(v29);
  sub_1C44971E8();
  v24(v13, v10);
  uint64_t v30 = v47;
  uint64_t v31 = v49;
  sub_1C4497268();
  swift_bridgeObjectRelease();
  sub_1C4496D88();
  unint64_t v56 = MEMORY[0x1E4FBC860];
  sub_1C3F70A18(qword_1EBBC1060, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC1040);
  sub_1C3F70AF0((unint64_t *)&qword_1EBBC1050, (uint64_t *)&unk_1EBBC1040);
  uint64_t v33 = v53;
  uint64_t v32 = v54;
  sub_1C4497BF8();
  (*(void (**)(char *, void, uint64_t))(v51 + 104))(v50, *MEMORY[0x1E4FBCC58], v52);
  *(void *)(v3 + 32) = sub_1C4497A78();
  uint64_t v34 = v31;
  sub_1C3F970C4(v31, v3 + 56, qword_1EBBC0C90);
  uint64_t v35 = v55;
  sub_1C4496438();
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v3 + OBJC_IVAR____TtC9Coherence14CRAssetManager_temporaryDirectory, v35, v33);
  unint64_t v36 = self;
  id v37 = objc_msgSend(v36, sel_defaultCenter);
  uint64_t v38 = qword_1EBBC07C8;
  swift_retain();
  if (v38 != -1) {
    swift_once();
  }
  objc_msgSend(v37, sel_addObserver_selector_name_object_, v3, sel_didEnterBackground, qword_1EBBC5A20, 0);

  swift_release();
  id v39 = objc_msgSend(v36, sel_defaultCenter);
  uint64_t v40 = qword_1EBBC0810;
  swift_retain();
  if (v40 != -1) {
    swift_once();
  }
  objc_msgSend(v39, sel_addObserver_selector_name_object_, v3, sel_willEnterForeground, qword_1EBBC5A28, 0);

  swift_release();
  if (qword_1EBBC07F8 != -1) {
    swift_once();
  }
  swift_retain();
  sub_1C4497A58();
  swift_release();
  char v41 = v56;
  sub_1C3F962E0(v34, qword_1EBBC0C90);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v33);
  *(unsigned char *)(v3 + 96) = v41;
  return v3;
}

unint64_t sub_1C3F60AA0()
{
  unint64_t result = qword_1EBBC1290;
  if (!qword_1EBBC1290)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBBC1290);
  }
  return result;
}

unint64_t sub_1C3F60AE0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07B0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39B400);
  uint64_t v6 = sub_1C4497FD8();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1C3F970C4(v12, (uint64_t)v5, &qword_1EBBC07B0);
    unint64_t result = sub_1C3F54E50((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = sub_1C4496498();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    void v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C3F60CD4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC07D0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39B080);
  uint64_t v6 = sub_1C4497FD8();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1C3F970C4(v12, (uint64_t)v5, (uint64_t *)&unk_1EBBC07D0);
    unint64_t result = sub_1C3F54E50((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = sub_1C4496498();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    void v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AssetActor(uint64_t a1)
{
  return sub_1C3F9708C(a1, qword_1EBBC0930);
}

uint64_t sub_1C3F60EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC0980);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v33 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC09A0);
  uint64_t v7 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC09C8);
  uint64_t v10 = *(void *)(v32 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = MEMORY[0x1F4188790](v32);
  uint64_t v31 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v31 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC09C0);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  BOOL v20 = (char *)&v31 - v19;
  swift_defaultActor_initialize();
  v2[15] = a1;
  v2[16] = a2;
  v2[14] = sub_1C3F614F4(MEMORY[0x1E4FBC860]);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09A8);
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, 1, 1, v21);
  uint64_t v35 = v20;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBD028], v34);
  sub_1C4497638();
  sub_1C3F970C4((uint64_t)v20, (uint64_t)v18, &qword_1EBBC09C0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v18, 1, v21);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))((uint64_t)v2 + OBJC_IVAR____TtC9Coherence10AssetActor__streamContinuation, v18, v21);
    uint64_t v24 = sub_1C44975A8();
    uint64_t v25 = (uint64_t)v33;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v33, 1, 1, v24);
    char v27 = v31;
    uint64_t v26 = v32;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v31, v14, v32);
    unint64_t v28 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = 0;
    *(void *)(v29 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v29 + v28, v27, v26);
    uint64_t v30 = sub_1C3F61348(v25, (uint64_t)&unk_1EA39FFD0, v29);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v26);
    *(void *)((char *)v2 + OBJC_IVAR____TtC9Coherence10AssetActor__task) = v30;
    sub_1C3F962E0((uint64_t)v20, &qword_1EBBC09C0);
    return (uint64_t)v2;
  }
  return result;
}

uint64_t sub_1C3F61348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C44975A8();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1C4497598();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1C3F962E0(a1, (uint64_t *)&unk_1EBBC0980);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1C4497578();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

unint64_t sub_1C3F614F4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBBB8E0);
  uint64_t v2 = (void *)sub_1C4497FD8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    unint64_t v6 = *((void *)v4 - 1);
    long long v13 = *v4;
    sub_1C3F7E324(v5, v6);
    swift_unknownObjectRetain();
    unint64_t result = sub_1C4061A50(v5, v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_1C3F61624(void *a1, void *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      uint64_t v6 = sub_1C4496898();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = type metadata accessor for Proto_Set(0);
      *(void *)((char *)a1 + *(int *)(v7 + 20)) = *(void *)((char *)a2 + *(int *)(v7 + 20));
      swift_retain();
      break;
    case 3u:
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      a1[2] = a2[2];
      uint64_t v9 = *(int *)(type metadata accessor for Proto_Struct(0) + 28);
      uint64_t v10 = (char *)a1 + v9;
      BOOL v11 = (char *)a2 + v9;
      uint64_t v12 = sub_1C4496898();
      long long v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
      break;
    case 4u:
    case 5u:
      uint64_t v14 = sub_1C4496898();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
      uint64_t v15 = type metadata accessor for Proto_Sequence(0);
      *(void *)((char *)a1 + *(int *)(v15 + 20)) = *(void *)((char *)a2 + *(int *)(v15 + 20));
      swift_retain();
      break;
    case 6u:
    case 8u:
      uint64_t v16 = sub_1C4496898();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
      uint64_t v17 = type metadata accessor for Proto_OrderedSet(0);
      *(void *)((char *)a1 + *(int *)(v17 + 20)) = *(void *)((char *)a2 + *(int *)(v17 + 20));
      swift_retain();
      break;
    case 7u:
      uint64_t v18 = sub_1C4496898();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
      uint64_t v19 = type metadata accessor for Proto_Counter(0);
      *(void *)((char *)a1 + *(int *)(v19 + 20)) = *(void *)((char *)a2 + *(int *)(v19 + 20));
      swift_retain();
      break;
    case 9u:
      *a1 = *a2;
      uint64_t v20 = *(int *)(type metadata accessor for Proto_CustomCRDT(0) + 20);
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = sub_1C4496898();
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
      swift_bridgeObjectRetain();
      v24(v21, v22, v23);
      break;
    default:
      uint64_t v4 = sub_1C4496898();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      uint64_t v5 = type metadata accessor for Proto_Register(0);
      *(void *)((char *)a1 + *(int *)(v5 + 20)) = *(void *)((char *)a2 + *(int *)(v5 + 20));
      swift_retain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1C3F61AC0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_1C3F61B04()
{
  return sub_1C3FA9554(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C3F61B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v126 = type metadata accessor for RetainedMapRun(0);
  uint64_t v4 = *(void *)(v126 - 8);
  MEMORY[0x1F4188790](v126);
  uint64_t v123 = (uint64_t)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBF0A0);
  uint64_t v128 = *(void *)(v131 - 8);
  MEMORY[0x1F4188790](v131);
  uint64_t v7 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBEF70);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v125 = (uint64_t)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v94 - v11;
  uint64_t v13 = sub_1C44967A8();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  v121 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78);
  MEMORY[0x1F4188790](v105);
  uint64_t v17 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for Replica();
  uint64_t v103 = *(void *)(v94 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v94);
  uint64_t v99 = (uint64_t)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v111 = (uint64_t)&v94 - v20;
  uint64_t v114 = sub_1C44967E8();
  uint64_t v21 = *(void *)(v114 - 8);
  MEMORY[0x1F4188790](v114);
  int64_t v115 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v109 = (uint64_t)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v108 = (uint64_t)&v94 - v26;
  uint64_t v27 = *(void *)(a1 + 64);
  uint64_t v96 = a1 + 64;
  uint64_t v28 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v113 = v29 & v27;
  uint64_t v112 = a2;
  uint64_t v107 = a2 + 16;
  uint64_t v101 = v21 + 16;
  unint64_t v106 = (void (**)(char *, uint64_t, uint64_t))(v21 + 32);
  v98 = &v134;
  long long v120 = (void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v116 = (void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v127 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  v124 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56);
  uint64_t v102 = v21;
  uint64_t v100 = (void (**)(char *, uint64_t))(v21 + 8);
  int64_t v97 = (unint64_t)(v28 + 63) >> 6;
  int64_t v95 = v97 - 1;
  uint64_t v104 = a1;
  swift_bridgeObjectRetain();
  int64_t v110 = 0;
  uint64_t v119 = v13;
  int64_t v118 = v17;
  while (1)
  {
    if (v113)
    {
      unint64_t v30 = __clz(__rbit64(v113));
      v113 &= v113 - 1;
      unint64_t v31 = v30 | (v110 << 6);
LABEL_7:
      uint64_t v32 = v104;
      uint64_t v33 = v109;
      sub_1C3F86B60(*(void *)(v104 + 48) + *(void *)(v103 + 72) * v31, v109, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v34 = v102;
      unint64_t v35 = *(void *)(v32 + 56) + *(void *)(v102 + 72) * v31;
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 16))(v33 + *(int *)(v36 + 48), v35, v114);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v33, 0, 1, v36);
      goto LABEL_29;
    }
    int64_t v37 = v110 + 1;
    if (__OFADD__(v110, 1)) {
      goto LABEL_63;
    }
    uint64_t v33 = v109;
    if (v37 < v97)
    {
      unint64_t v38 = *(void *)(v96 + 8 * v37);
      if (v38) {
        goto LABEL_11;
      }
      int64_t v39 = v110 + 2;
      ++v110;
      if (v37 + 1 < v97)
      {
        unint64_t v38 = *(void *)(v96 + 8 * v39);
        if (v38) {
          goto LABEL_14;
        }
        int64_t v110 = v37 + 1;
        if (v37 + 2 < v97)
        {
          unint64_t v38 = *(void *)(v96 + 8 * (v37 + 2));
          if (v38)
          {
            v37 += 2;
LABEL_11:
            unint64_t v113 = (v38 - 1) & v38;
            unint64_t v31 = __clz(__rbit64(v38)) + (v37 << 6);
            int64_t v110 = v37;
            goto LABEL_7;
          }
          int64_t v110 = v37 + 2;
          if (v37 + 3 < v97)
          {
            unint64_t v38 = *(void *)(v96 + 8 * (v37 + 3));
            if (v38)
            {
              v37 += 3;
              goto LABEL_11;
            }
            int64_t v39 = v37 + 4;
            int64_t v110 = v37 + 3;
            if (v37 + 4 < v97)
            {
              unint64_t v38 = *(void *)(v96 + 8 * v39);
              if (!v38)
              {
                while (1)
                {
                  int64_t v37 = v39 + 1;
                  if (__OFADD__(v39, 1)) {
                    goto LABEL_64;
                  }
                  if (v37 >= v97)
                  {
                    int64_t v110 = v95;
                    goto LABEL_28;
                  }
                  unint64_t v38 = *(void *)(v96 + 8 * v37);
                  ++v39;
                  if (v38) {
                    goto LABEL_11;
                  }
                }
              }
LABEL_14:
              int64_t v37 = v39;
              goto LABEL_11;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v33, 1, 1, v40);
    unint64_t v113 = 0;
LABEL_29:
    uint64_t v41 = v33;
    uint64_t v42 = v108;
    sub_1C3F961BC(v41, v108, &qword_1EBBC07A0);
    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 48))(v42, 1, v43) == 1) {
      return swift_release();
    }
    (*v106)(v115, v42 + *(int *)(v43 + 48), v114);
    uint64_t v44 = v111;
    sub_1C3F8F818(v42, v111, (uint64_t (*)(void))type metadata accessor for Replica);
    swift_beginAccess();
    uint64_t v45 = v112;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v132 = *(void *)(v45 + 32);
    uint64_t v47 = v132;
    *(void *)(v45 + 32) = 0x8000000000000000;
    unint64_t v49 = sub_1C3F8F160(v44);
    uint64_t v50 = *(void *)(v47 + 16);
    BOOL v51 = (v48 & 1) == 0;
    uint64_t v52 = v50 + v51;
    if (__OFADD__(v50, v51)) {
      goto LABEL_62;
    }
    char v53 = v48;
    if (*(void *)(v47 + 24) >= v52)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1C4067C04();
        uint64_t v47 = v132;
      }
    }
    else
    {
      sub_1C3FB7274(v52, isUniquelyReferenced_nonNull_native);
      uint64_t v47 = v132;
      unint64_t v54 = sub_1C3F8F160(v44);
      if ((v53 & 1) != (v55 & 1)) {
        goto LABEL_65;
      }
      unint64_t v49 = v54;
    }
    uint64_t v56 = v112;
    *(void *)(v112 + 32) = v47;
    swift_bridgeObjectRelease();
    unint64_t v57 = *(void **)(v56 + 32);
    if ((v53 & 1) == 0)
    {
      uint64_t v133 = MEMORY[0x1E4FBC860];
      swift_weakInit();
      swift_weakAssign();
      sub_1C3FAAC94((uint64_t)&v133, (uint64_t)&v132);
      uint64_t v58 = v99;
      sub_1C3F86B60(v44, v99, (uint64_t (*)(void))type metadata accessor for Replica);
      sub_1C3FB71B8(v49, v58, (uint64_t)&v132, v57);
    }
    unint64_t v59 = v49;
    uint64_t v60 = v57[7];
    uint64_t v61 = v121;
    sub_1C44967C8();
    uint64_t v62 = (uint64_t)v118;
    sub_1C4496798();
    uint64_t v63 = v119;
    uint64_t v117 = *v120;
    v117(v61, v119);
    uint64_t v64 = (uint64_t *)(v62 + *(int *)(v105 + 36));
    uint64_t v65 = sub_1C3F709D0((unint64_t *)&qword_1EBBBEE28, MEMORY[0x1E4F27CE0]);
    uint64_t v66 = *v64;
    sub_1C4497818();
    if (v66 != v132) {
      break;
    }
LABEL_4:
    sub_1C3F962E0(v62, &qword_1EBBBCA78);
    swift_endAccess();
    sub_1C3F86C98(v111, (uint64_t (*)(void))type metadata accessor for Replica);
    (*v100)(v115, v114);
  }
  uint64_t v67 = (unint64_t *)(v60 + 16 * v59);
  uint64_t v130 = v64;
  while (1)
  {
    uint64_t v69 = (void (*)(uint64_t *, void))sub_1C44978C8();
    uint64_t v70 = v62;
    uint64_t v73 = *v71;
    uint64_t v72 = v71[1];
    v69(&v132, 0);
    v74 = v121;
    unint64_t v75 = v130;
    (*v116)(v121, v70, v63);
    sub_1C4497828();
    v117(v74, v63);
    uint64_t v122 = sub_1C3FB3D7C(v73, v72);
    if (v122 != v76) {
      break;
    }
LABEL_40:
    sub_1C3F9043C(v122, v76);
    uint64_t v68 = *v75;
    uint64_t v62 = (uint64_t)v118;
    uint64_t v63 = v119;
    sub_1C4497818();
    if (v68 == v132) {
      goto LABEL_4;
    }
  }
  if (v76 < v122)
  {
    __break(1u);
  }
  else
  {
    unint64_t v77 = v122;
    int64_t v129 = v76;
    if (v122 < v76)
    {
      while ((v77 & 0x8000000000000000) == 0)
      {
        if (v77 >= *(void *)(*v67 + 16)) {
          goto LABEL_56;
        }
        uint64_t v78 = v65;
        uint64_t v79 = (uint64_t)v12;
        unint64_t v80 = (*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80);
        unint64_t v81 = *(void *)(v128 + 72) * v77;
        sub_1C3F970C4(*v67 + v80 + v81, (uint64_t)v7, qword_1EBBBF0A0);
        uint64_t v82 = (uint64_t)v7;
        uint64_t v83 = v125;
        sub_1C3F970C4((uint64_t)&v7[*(int *)(v131 + 36)], v125, qword_1EBBBEF70);
        uint64_t v84 = v126;
        if ((*v127)(v83, 1, v126) == 1)
        {
          sub_1C3F962E0(v83, qword_1EBBBEF70);
          uint64_t v85 = type metadata accessor for FinalizedTimestamp(0);
          uint64_t v12 = (char *)v79;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v79, 1, 1, v85);
          *(void *)(v79 + *(int *)(v84 + 20)) = 2;
          (*v124)(v79, 0, 1, v84);
        }
        else
        {
          uint64_t v86 = v123;
          sub_1C3F8F818(v83, v123, type metadata accessor for RetainedMapRun);
          uint64_t v12 = (char *)v79;
          sub_1C3F970C4(v86, v79, &qword_1EBBBF870);
          uint64_t v87 = *(int *)(v84 + 20);
          uint64_t v88 = *(void *)(v86 + v87);
          BOOL v89 = __OFADD__(v88, 1);
          uint64_t v90 = v88 + 1;
          if (v89) {
            goto LABEL_58;
          }
          *(void *)(v79 + v87) = v90;
          sub_1C3F86C98(v86, type metadata accessor for RetainedMapRun);
          (*v124)(v79, 0, 1, v84);
        }
        uint64_t v7 = (char *)v82;
        sub_1C3F962E0(v82, qword_1EBBBF0A0);
        unint64_t v91 = *v67;
        char v92 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v67 = v91;
        uint64_t v65 = v78;
        if ((v92 & 1) == 0)
        {
          unint64_t v91 = sub_1C4232804(v91);
          *uint64_t v67 = v91;
        }
        if (v77 >= *(void *)(v91 + 16)) {
          goto LABEL_57;
        }
        ++v77;
        sub_1C3F98338((uint64_t)v12, v91 + v80 + *(int *)(v131 + 36) + v81, qword_1EBBBEF70);
        int64_t v76 = v129;
        unint64_t v75 = v130;
        if (v129 == v77) {
          goto LABEL_40;
        }
      }
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      return swift_release();
    }
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  uint64_t result = sub_1C4498558();
  __break(1u);
  return result;
}

uint64_t sub_1C3F62984()
{
  return sub_1C3F62998((uint64_t *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C3F62990()
{
  return sub_1C3F61B0C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C3F62998(uint64_t *a1, uint64_t a2)
{
  return sub_1C3F61B0C(*a1, a2);
}

uint64_t sub_1C3F629A0()
{
  return sub_1C3F629B8();
}

uint64_t sub_1C3F629B8()
{
  if (!*v0 || (uint64_t result = sub_1C4496BB8(), !v1))
  {
    if (!v0[1] || (uint64_t result = sub_1C4496B58(), !v1))
    {
      type metadata accessor for Proto_Timestamp(0);
      return sub_1C4496878();
    }
  }
  return result;
}

uint64_t CRStruct_1.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F62AA0(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))CRStruct_1.encode(to:));
}

{
  return sub_1C3F63020(a1, a2, a3, CRStruct_1.encodeFields(to:));
}

uint64_t sub_1C3F62AA0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (void (**)(uint64_t, uint64_t, uint64_t))((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = sub_1C3F62C10();
  if (!v4)
  {
    uint64_t v13 = result;
    type metadata accessor for CREncoder.CRDTKeyedContainer();
    uint64_t inited = swift_initStackObject();
    uint64_t v17 = a4;
    uint64_t v15 = inited;
    uint64_t v16 = MEMORY[0x1E4FBC860];
    *(void *)(inited + 16) = v13;
    *(void *)(inited + 24) = a1;
    *uint64_t v11 = v16;
    v11[1] = v16;
    uint64_t v11[2] = v16;
    swift_retain();
    swift_retain();
    sub_1C4496888();
    swift_beginAccess();
    sub_1C3F62D84((uint64_t)v11);
    v17(v15, a2, a3);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1C3F62C10()
{
  if (*(void *)(v0 + 80))
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v1 = 0xD00000000000003DLL;
    *(void *)(v1 + 8) = 0x80000001C44B17C0;
    *(unsigned char *)(v1 + 16) = 3;
    return swift_willThrow();
  }
  else
  {
    uint64_t result = *(void *)(v0 + 88);
    if (!result)
    {
      type metadata accessor for CREncoder.CRDTContainer(0);
      uint64_t v3 = swift_allocObject();
      uint64_t v4 = v3 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
      swift_retain();
      sub_1C4496888();
      uint64_t v5 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
      if (qword_1EBBC0668 != -1)
      {
        uint64_t v6 = v5;
        swift_once();
        uint64_t v5 = v6;
      }
      *(void *)(v4 + v5) = qword_1EBBC0660;
      *(void *)(v3 + 16) = v0;
      *(void *)(v0 + 88) = v3;
      swift_retain();
      swift_release();
      uint64_t result = *(void *)(v0 + 88);
      if (!result) {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for CREncoder.CRDTContainer(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBF280);
}

uint64_t type metadata accessor for CREncoder.CRDTKeyedContainer()
{
  return self;
}

uint64_t sub_1C3F62D84(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = &v19[-v7];
  uint64_t v9 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v10 = *(void *)(v1 + v9);
    type metadata accessor for Proto_CRDT._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = v11 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    uint64_t v13 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = v10 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1C3F970C4(v14, (uint64_t)v8, &qword_1EBBC0648);
    swift_beginAccess();
    sub_1C3F98338((uint64_t)v8, v12, &qword_1EBBC0648);
    swift_endAccess();
    *(void *)(v1 + v9) = v11;
    swift_release();
  }
  uint64_t v15 = *(void *)(v1 + v9);
  sub_1C3F92E00(a1, (uint64_t)v8, type metadata accessor for Proto_Struct);
  uint64_t v16 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1C3F961BC((uint64_t)v8, (uint64_t)v6, &qword_1EBBC0648);
  uint64_t v17 = v15 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338((uint64_t)v6, v17, &qword_1EBBC0648);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1C3F63020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(*(void *)(a3 + 8) + 8);
  (*(void (**)(uint64_t, uint64_t))(v9 + 56))(a2, v9);
  uint64_t result = a4(a1, a2, a3);
  if (v4) {
    return result;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(a2, v9);
  uint64_t v11 = result;
  int64_t v12 = 0;
  uint64_t v13 = result + 64;
  uint64_t v14 = 1 << *(unsigned char *)(result + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(result + 64);
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  if (!v16) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v17 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v12 << 6))
  {
    uint64_t v22 = (uint64_t *)(*(void *)(v11 + 48) + 16 * i);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    swift_bridgeObjectRetain();
    uint64_t v25 = swift_retain();
    sub_1C4245F38(v25, v23, v24);
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_5;
    }
LABEL_6:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v26) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v13 + 8 * v12);
    if (!v20) {
      break;
    }
LABEL_16:
    unint64_t v16 = (v20 - 1) & v20;
  }
  int64_t v21 = v12 + 1;
  if (v12 + 1 >= v26) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v13 + 8 * v21);
  if (v20) {
    goto LABEL_15;
  }
  int64_t v21 = v12 + 2;
  if (v12 + 2 >= v26) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v13 + 8 * v21);
  if (v20) {
    goto LABEL_15;
  }
  int64_t v21 = v12 + 3;
  if (v12 + 3 >= v26) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v13 + 8 * v21);
  if (v20)
  {
LABEL_15:
    int64_t v12 = v21;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v26) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v13 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_16;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t CRStruct_1.encodeFields(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v14[1] = a1;
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)v14 - v7;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(a2, v4);
  uint64_t v11 = v10;
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1C3F633DC((uint64_t)v8, v9, v11, AssociatedTypeWitness, *(void *)(*(void *)(AssociatedConformanceWitness + 16) + 8));
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
}

uint64_t sub_1C3F633DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1F4188790](v39);
  uint64_t v43 = (uint64_t *)((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for Proto_CRDT(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v42 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  unint64_t v20 = (char *)&v37 - v19;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  if ((result & 1) == 0) {
    return result;
  }
  uint64_t v38 = v16;
  MEMORY[0x1F4188790](result);
  *(&v37 - 4) = a4;
  *(&v37 - 3) = a5;
  *(&v37 - 2) = a1;
  *(&v37 - 1) = v7;
  uint64_t result = sub_1C3F5585C((void (*)(uint64_t))sub_1C4016644, (uint64_t)v20);
  if (v6) {
    return result;
  }
  uint64_t v22 = *(void *)(v7 + 16);
  uint64_t v23 = sub_1C4004870(v40, v41);
  uint64_t v24 = v22 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
  swift_beginAccess();
  uint64_t v25 = *(void *)(v24 + *(int *)(v15 + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v25, (uint64_t)v13, &qword_1EBBC0648);
  uint64_t v26 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v13, 1, v26) == 1)
  {
    sub_1C3F962E0((uint64_t)v13, &qword_1EBBC0648);
    uint64_t v27 = v43;
LABEL_8:
    uint64_t v29 = MEMORY[0x1E4FBC860];
    void *v27 = MEMORY[0x1E4FBC860];
    v27[1] = v29;
    v27[2] = v29;
    sub_1C4496888();
    goto LABEL_9;
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v27 = v43;
  if (EnumCaseMultiPayload != 3)
  {
    sub_1C3F9229C((uint64_t)v13, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_8;
  }
  sub_1C3F9775C((uint64_t)v13, (uint64_t)v43, type metadata accessor for Proto_Struct);
LABEL_9:
  uint64_t v30 = (uint64_t)v42;
  unint64_t v31 = (void *)*v27;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v31 = sub_1C3FA1854(0, v31[2] + 1, 1, v31);
  }
  unint64_t v33 = v31[2];
  unint64_t v32 = v31[3];
  if (v33 >= v32 >> 1) {
    unint64_t v31 = sub_1C3FA1854((void *)(v32 > 1), v33 + 1, 1, v31);
  }
  v31[2] = v33 + 1;
  v31[v33 + 4] = v23;
  void *v27 = v31;
  sub_1C3FA1CCC((uint64_t)v20, v30, type metadata accessor for Proto_CRDT);
  unint64_t v34 = v27[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v34 = sub_1C3FF1600(0, *(void *)(v34 + 16) + 1, 1, v34);
  }
  unint64_t v36 = *(void *)(v34 + 16);
  unint64_t v35 = *(void *)(v34 + 24);
  if (v36 >= v35 >> 1) {
    unint64_t v34 = sub_1C3FF1600(v35 > 1, v36 + 1, 1, v34);
  }
  *(void *)(v34 + 16) = v36 + 1;
  sub_1C3F9775C(v30, v34+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(void *)(v38 + 72) * v36, type metadata accessor for Proto_CRDT);
  v27[1] = v34;
  sub_1C3F62D84((uint64_t)v27);
  swift_endAccess();
  return sub_1C3F9229C((uint64_t)v20, type metadata accessor for Proto_CRDT);
}

BOOL CROrderedSet.hasEncodedData.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_beginAccess();
  return *(void *)(*(void *)(v1 + 32) + 16) || *(void *)(*(void *)(v1 + 24) + 16) != 0;
}

uint64_t sub_1C3F63904@<X0>(uint64_t a1@<X8>)
{
  return sub_1C3F63924(*(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_1C3F63924@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1C3F639A8(a1, 0, 1, a2);
  char v8 = v7;
  uint64_t v10 = v9;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 8) = v8 & 1;
  *(void *)(a3 + 16) = v10;
  return result;
}

uint64_t sub_1C3F639A8(uint64_t a1, uint64_t (**a2)(), int a3, uint64_t a4)
{
  uint64_t v212 = a4;
  v235 = a2;
  v254[2] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0778);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v227 = (uint64_t)&v184 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v208 = (uint64_t)&v184 - v10;
  uint64_t v236 = sub_1C4496678();
  uint64_t v11 = *(void *)(v236 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v236);
  v226 = (char *)&v184 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v225 = (char *)&v184 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  v207 = (char *)&v184 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  v206 = (char *)&v184 - v19;
  MEMORY[0x1F4188790](v18);
  v194 = (char *)&v184 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBEF70);
  MEMORY[0x1F4188790](v21 - 8);
  v203 = (char *)&v184 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v202 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBF0A0);
  uint64_t v198 = *(void *)(v202 - 8);
  MEMORY[0x1F4188790](v202);
  v201 = (uint64_t *)((char *)&v184 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC6B0);
  uint64_t v25 = MEMORY[0x1F4188790](v24 - 8);
  v233 = (void (**)(char *, uint64_t, uint64_t))((char *)&v184 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v25);
  uint64_t v209 = (uint64_t)&v184 - v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF870);
  uint64_t v29 = MEMORY[0x1F4188790](v28 - 8);
  v197 = (char *)&v184 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  v217 = (char *)&v184 - v31;
  int64_t v221 = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v234 = *(void *)(v221 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v221);
  uint64_t v192 = (uint64_t)&v184 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v191 = (uint64_t)&v184 - v34;
  v228 = (void (**)(void, void))sub_1C4496688();
  uint64_t v35 = (uint64_t)*(v228 - 1);
  uint64_t v36 = MEMORY[0x1F4188790](v228);
  v230 = (void (**)(char *, uint64_t))((char *)&v184 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v36);
  v229 = (void (**)(char *, char *, uint64_t))((char *)&v184 - v38);
  uint64_t v193 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF188);
  MEMORY[0x1F4188790](v193);
  v231 = (void (**)(char *, uint64_t, uint64_t))((char *)&v184 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = sub_1C44967E8();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  uint64_t v44 = (char *)&v184 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x1F4188790](v42);
  v218 = (char *)&v184 - v46;
  MEMORY[0x1F4188790](v45);
  char v48 = (char *)&v184 - v47;
  uint64_t v243 = type metadata accessor for Replica();
  uint64_t v240 = *(void *)(v243 - 8);
  uint64_t v49 = MEMORY[0x1F4188790](v243);
  uint64_t v245 = (uint64_t)&v184 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  v244 = (char *)&v184 - v52;
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  v210 = (char *)&v184 - v54;
  uint64_t v55 = MEMORY[0x1F4188790](v53);
  unint64_t v57 = (char *)&v184 - v56;
  MEMORY[0x1F4188790](v55);
  uint64_t v232 = (uint64_t)&v184 - v58;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v60 = MEMORY[0x1F4188790](v59 - 8);
  v238 = (char *)&v184 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = MEMORY[0x1F4188790](v60);
  uint64_t v237 = (uint64_t)&v184 - v63;
  uint64_t v64 = MEMORY[0x1F4188790](v62);
  v195 = (char *)&v184 - v65;
  MEMORY[0x1F4188790](v64);
  v213 = (char *)&v184 - v66;
  char v250 = 0;
  char v249 = 0;
  uint64_t v248 = MEMORY[0x1E4FBC868];
  v242 = v4;
  uint64_t v239 = a1;
  uint64_t v222 = v41;
  v223 = v44;
  v196 = (char *)v11;
  if (a3)
  {
    uint64_t v70 = a1;
    goto LABEL_65;
  }
  int v190 = a3;
  uint64_t v67 = *(void *)(a1 + 64);
  uint64_t v205 = a1 + 64;
  uint64_t v68 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v69 = -1;
  if (v68 < 64) {
    uint64_t v69 = ~(-1 << v68);
  }
  unint64_t v247 = v69 & v67;
  v214 = v4 + 2;
  int64_t v241 = v41 + 16;
  v219 = (void (**)(char *, uint64_t, uint64_t))(v41 + 32);
  v246 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 8);
  v224 = (void (**)(void, char *, void (**)(void, void)))(v35 + 16);
  v216 = (void (**)(char *, void))(v35 + 8);
  v200 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v198 + 56);
  v199 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v198 + 48);
  v204 = (uint64_t (**)(uint64_t, uint64_t, int64_t))(v234 + 48);
  v187 = (void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v186 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  v220 = (void (**)(char *, uint64_t, uint64_t, int64_t))(v234 + 56);
  int64_t v211 = (unint64_t)(v68 + 63) >> 6;
  uint64_t v185 = v211 - 1;
  swift_bridgeObjectRetain();
  uint64_t v234 = 0;
  uint64_t v70 = a1;
  uint64_t v71 = v232;
LABEL_5:
  uint64_t v72 = (uint64_t)v195;
  uint64_t v73 = (uint64_t)v213;
  while (1)
  {
    if (v247)
    {
      unint64_t v74 = __clz(__rbit64(v247));
      v247 &= v247 - 1;
      unint64_t v75 = v74 | (v234 << 6);
LABEL_8:
      sub_1C3F8EF24(*(void *)(v70 + 48) + *(void *)(v240 + 72) * v75, v72, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v76 = v222;
      unint64_t v77 = *(void *)(v70 + 56) + *(void *)(v222 + 72) * v75;
      uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v76 + 16))(v72 + *(int *)(v78 + 48), v77, v40);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v72, 0, 1, v78);
      uint64_t v44 = v223;
      uint64_t v73 = (uint64_t)v213;
      goto LABEL_30;
    }
    int64_t v79 = v234 + 1;
    if (__OFADD__(v234, 1)) {
      goto LABEL_118;
    }
    if (v79 < v211)
    {
      unint64_t v80 = *(void *)(v205 + 8 * v79);
      if (v80) {
        goto LABEL_12;
      }
      uint64_t v81 = v234 + 2;
      ++v234;
      if (v79 + 1 < v211)
      {
        unint64_t v80 = *(void *)(v205 + 8 * v81);
        if (v80) {
          goto LABEL_15;
        }
        uint64_t v234 = v79 + 1;
        if (v79 + 2 < v211)
        {
          unint64_t v80 = *(void *)(v205 + 8 * (v79 + 2));
          if (v80)
          {
            v79 += 2;
            goto LABEL_12;
          }
          uint64_t v234 = v79 + 2;
          if (v79 + 3 < v211)
          {
            unint64_t v80 = *(void *)(v205 + 8 * (v79 + 3));
            if (v80)
            {
              v79 += 3;
              goto LABEL_12;
            }
            uint64_t v81 = v79 + 4;
            uint64_t v234 = v79 + 3;
            if (v79 + 4 < v211)
            {
              unint64_t v80 = *(void *)(v205 + 8 * v81);
              if (v80)
              {
LABEL_15:
                int64_t v79 = v81;
LABEL_12:
                unint64_t v247 = (v80 - 1) & v80;
                unint64_t v75 = __clz(__rbit64(v80)) + (v79 << 6);
                uint64_t v234 = v79;
                goto LABEL_8;
              }
              while (1)
              {
                int64_t v79 = v81 + 1;
                if (__OFADD__(v81, 1)) {
                  goto LABEL_125;
                }
                if (v79 >= v211) {
                  break;
                }
                unint64_t v80 = *(void *)(v205 + 8 * v79);
                ++v81;
                if (v80) {
                  goto LABEL_12;
                }
              }
              uint64_t v234 = v185;
            }
          }
        }
      }
    }
    uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v72, 1, 1, v82);
    unint64_t v247 = 0;
LABEL_30:
    sub_1C3F961BC(v72, v73, &qword_1EBBC07A0);
    uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 48))(v73, 1, v83) == 1) {
      break;
    }
    uint64_t v84 = v73 + *(int *)(v83 + 48);
    sub_1C3F8F6E0(v73, v71, (uint64_t (*)(void))type metadata accessor for Replica);
    (*v219)(v48, v84, v40);
    if (*(void *)(v71 + *(int *)(v243 + 20)))
    {
      v188 = v57;
      uint64_t v85 = v231;
      v189 = v48;
      sub_1C44966C8();
      uint64_t v86 = (char *)v85 + *(int *)(v193 + 36);
      v215 = *v224;
      while (1)
      {
        uint64_t v88 = v229;
        BOOL v89 = v228;
        v215(v229, v86, v228);
        sub_1C3F70940(qword_1EBBBBCE8, MEMORY[0x1E4F27D00]);
        uint64_t v90 = (char *)v230;
        uint64_t v91 = (uint64_t)v231;
        sub_1C4497818();
        sub_1C3F70940(&qword_1EBBBBCD0, MEMORY[0x1E4F27CC8]);
        char v92 = sub_1C4497178();
        v93 = (void (*)(void (**)(char *, char *, uint64_t), void))*v216;
        (*v216)(v90, v89);
        v93(v88, v89);
        if (v92)
        {
          sub_1C3F962E0(v91, &qword_1EBBBF188);
          char v48 = v189;
          ((void (*)(char *, uint64_t))*v246)(v189, v40);
          uint64_t v71 = v232;
          sub_1C3F9024C(v232, (uint64_t (*)(void))type metadata accessor for Replica);
          uint64_t v70 = v239;
          uint64_t v44 = v223;
          unint64_t v57 = v188;
          goto LABEL_5;
        }
        uint64_t v94 = (void (*)(uint64_t *, void))sub_1C44978C8();
        uint64_t v96 = *v95;
        v94(&v251, 0);
        int64_t v97 = v218;
        (*(void (**)(char *, uint64_t, uint64_t))v241)(v218, v91, v40);
        sub_1C4497828();
        ((void (*)(char *, uint64_t))*v246)(v97, v40);
        swift_beginAccess();
        v98 = v242[4];
        uint64_t v99 = (uint64_t)v233;
        if (!*((void *)v98 + 2) || (unint64_t v100 = sub_1C3F8F160(v232), (v101 & 1) == 0))
        {
          uint64_t v253 = 0;
          v254[0] = 0;
LABEL_35:
          sub_1C3F962E0((uint64_t)&v253, qword_1EBBBEE40);
          swift_endAccess();
          uint64_t v87 = (uint64_t)v217;
          (*v220)(v217, 1, 1, v221);
          goto LABEL_36;
        }
        sub_1C3FAA63C(*((void *)v98 + 7) + 16 * v100, (uint64_t)&v253);
        if (!v253) {
          goto LABEL_35;
        }
        sub_1C3FAA63C((uint64_t)&v253, (uint64_t)&v252);
        sub_1C3F962E0((uint64_t)&v253, qword_1EBBBEE40);
        swift_endAccess();
        unint64_t v102 = *(void *)(v252 + 16);
        if (v102)
        {
          uint64_t v103 = v252 + ((*(unsigned __int8 *)(v198 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v198 + 80));
          uint64_t v104 = *(void *)(v198 + 72);
          if (v96 >= *(void *)(v103 + v104 * (v102 - 1) + 8))
          {
            uint64_t v106 = 1;
          }
          else
          {
            unint64_t v105 = sub_1C3FB42D8(v96, 0, v252);
            if (v105 >= v102) {
              goto LABEL_119;
            }
            sub_1C3F970C4(v103 + v105 * v104, v209, qword_1EBBBF0A0);
            uint64_t v106 = 0;
          }
          uint64_t v99 = (uint64_t)v233;
        }
        else
        {
          uint64_t v106 = 1;
        }
        uint64_t v107 = v209;
        uint64_t v108 = v202;
        (*v200)(v209, v106, 1, v202);
        sub_1C3F970C4(v107, v99, &qword_1EBBBC6B0);
        int v109 = (*v199)(v99, 1, v108);
        uint64_t v110 = (uint64_t)v203;
        if (v109 == 1)
        {
          sub_1C3F962E0(v107, &qword_1EBBBC6B0);
          sub_1C3F962E0(v99, &qword_1EBBBC6B0);
          uint64_t v87 = (uint64_t)v217;
          int64_t v111 = v221;
        }
        else
        {
          uint64_t v112 = v99;
          unint64_t v113 = v201;
          sub_1C3F961BC(v112, (uint64_t)v201, qword_1EBBBF0A0);
          sub_1C3F970C4((uint64_t)v113 + *(int *)(v108 + 36), v110, qword_1EBBBEF70);
          uint64_t v114 = type metadata accessor for RetainedMapRun(0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v114 - 8) + 48))(v110, 1, v114) == 1)
          {
            sub_1C3F962E0(v110, qword_1EBBBEF70);
            uint64_t v115 = (uint64_t)v197;
            int64_t v111 = v221;
            (*v220)(v197, 1, 1, v221);
            uint64_t v116 = v209;
            uint64_t v117 = v217;
          }
          else
          {
            uint64_t v115 = (uint64_t)v197;
            sub_1C3F970C4(v110, (uint64_t)v197, &qword_1EBBBF870);
            sub_1C3F9024C(v110, type metadata accessor for RetainedMapRun);
            int64_t v111 = v221;
            int v118 = (*v204)(v115, 1, v221);
            uint64_t v116 = v209;
            uint64_t v117 = v217;
            if (v118 != 1)
            {
              uint64_t v121 = v192;
              sub_1C3F8F6E0(v115, v192, type metadata accessor for FinalizedTimestamp);
              (*v187)(v194, v121, v236);
              uint64_t v122 = v121;
              uint64_t v123 = *(void *)(v121 + *(int *)(v111 + 20));
              uint64_t v124 = v123 + v96;
              if (__OFADD__(v123, v96)) {
                goto LABEL_121;
              }
              uint64_t v125 = v201;
              uint64_t v126 = *v201;
              sub_1C3F9024C(v122, type metadata accessor for FinalizedTimestamp);
              sub_1C3F962E0((uint64_t)v125, qword_1EBBBF0A0);
              sub_1C3F962E0(v209, &qword_1EBBBC6B0);
              BOOL v127 = __OFSUB__(v124, v126);
              uint64_t v128 = v124 - v126;
              if (v127) {
                goto LABEL_122;
              }
              uint64_t v87 = (uint64_t)v117;
              (*v186)(v117, v194, v236);
              int64_t v111 = v221;
              *(void *)&v117[*(int *)(v221 + 20)] = v128;
              (*v220)(v117, 0, 1, v111);
              goto LABEL_55;
            }
          }
          sub_1C3F962E0((uint64_t)v201, qword_1EBBBF0A0);
          sub_1C3F962E0(v116, &qword_1EBBBC6B0);
          sub_1C3F962E0(v115, &qword_1EBBBF870);
          uint64_t v87 = (uint64_t)v117;
        }
        (*v220)((char *)v87, 1, 1, v111);
LABEL_55:
        sub_1C3F903E8((uint64_t)&v252);
        if ((*v204)(v87, 1, v111) == 1)
        {
LABEL_36:
          sub_1C3F962E0(v87, &qword_1EBBBF870);
        }
        else
        {
          uint64_t v119 = v191;
          sub_1C3F8F6E0(v87, v191, type metadata accessor for FinalizedTimestamp);
          long long v120 = v235;
          if (*(void *)(v119 + *(int *)(v111 + 20)) > (uint64_t)v235) {
            long long v120 = *(uint64_t (***)())(v119 + *(int *)(v111 + 20));
          }
          v235 = v120;
          sub_1C3F9024C(v119, type metadata accessor for FinalizedTimestamp);
        }
      }
    }
    ((void (*)(char *, uint64_t))*v246)(v48, v40);
    sub_1C3F9024C(v71, (uint64_t (*)(void))type metadata accessor for Replica);
  }
  swift_release();
  uint64_t v4 = v242;
  LOBYTE(a3) = v190;
LABEL_65:
  LODWORD(v232) = a3 & 1;
  uint64_t v129 = *(void *)(v70 + 64);
  v220 = (void (**)(char *, uint64_t, uint64_t, int64_t))(v70 + 64);
  uint64_t v130 = 1 << *(unsigned char *)(v70 + 32);
  uint64_t v131 = -1;
  if (v130 < 64) {
    uint64_t v131 = ~(-1 << v130);
  }
  unint64_t v132 = v131 & v129;
  unint64_t v247 = (unint64_t)(v4 + 2);
  uint64_t v234 = OBJC_IVAR___CRContext_crdtDatabase;
  uint64_t v133 = v222;
  v224 = (void (**)(void, char *, void (**)(void, void)))(v222 + 16);
  v233 = (void (**)(char *, uint64_t, uint64_t))(v222 + 32);
  v246 = v4 + 4;
  v219 = (void (**)(char *, uint64_t, uint64_t))v254;
  v231 = (void (**)(char *, uint64_t, uint64_t))(v196 + 16);
  v230 = (void (**)(char *, uint64_t))(v196 + 8);
  v229 = (void (**)(char *, char *, uint64_t))(v196 + 32);
  v228 = (void (**)(void, void))(v222 + 8);
  int64_t v221 = (unint64_t)(v130 + 63) >> 6;
  v218 = (char *)(v221 - 1);
  swift_bridgeObjectRetain();
  int64_t v241 = 0;
  uint64_t v134 = v212;
  uint64_t v135 = (uint64_t)v238;
  while (2)
  {
    if (v132)
    {
      unint64_t v137 = __clz(__rbit64(v132));
      v132 &= v132 - 1;
      unint64_t v138 = v137 | (v241 << 6);
      goto LABEL_72;
    }
    int64_t v141 = v241 + 1;
    if (__OFADD__(v241, 1))
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    if (v141 >= v221) {
      goto LABEL_93;
    }
    unint64_t v142 = (unint64_t)v220[v141];
    if (!v142)
    {
      int64_t v143 = v241 + 2;
      ++v241;
      if (v141 + 1 < v221)
      {
        unint64_t v142 = (unint64_t)v220[v143];
        if (v142)
        {
LABEL_79:
          int64_t v141 = v143;
          goto LABEL_76;
        }
        int64_t v241 = v141 + 1;
        if (v141 + 2 < v221)
        {
          unint64_t v142 = (unint64_t)v220[v141 + 2];
          if (v142)
          {
            v141 += 2;
            goto LABEL_76;
          }
          int64_t v241 = v141 + 2;
          if (v141 + 3 < v221)
          {
            unint64_t v142 = (unint64_t)v220[v141 + 3];
            if (v142)
            {
              v141 += 3;
              goto LABEL_76;
            }
            int64_t v143 = v141 + 4;
            int64_t v241 = v141 + 3;
            if (v141 + 4 < v221)
            {
              unint64_t v142 = (unint64_t)v220[v143];
              if (v142) {
                goto LABEL_79;
              }
              while (1)
              {
                int64_t v141 = v143 + 1;
                if (__OFADD__(v143, 1)) {
                  goto LABEL_124;
                }
                if (v141 >= v221) {
                  break;
                }
                unint64_t v142 = (unint64_t)v220[v141];
                ++v143;
                if (v142) {
                  goto LABEL_76;
                }
              }
              int64_t v241 = (int64_t)v218;
            }
          }
        }
      }
LABEL_93:
      uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v144 - 8) + 56))(v135, 1, 1, v144);
      unint64_t v132 = 0;
      goto LABEL_94;
    }
LABEL_76:
    unint64_t v132 = (v142 - 1) & v142;
    unint64_t v138 = __clz(__rbit64(v142)) + (v141 << 6);
    int64_t v241 = v141;
LABEL_72:
    sub_1C3F8EF24(*(void *)(v70 + 48) + *(void *)(v240 + 72) * v138, v135, (uint64_t (*)(void))type metadata accessor for Replica);
    unint64_t v139 = *(void *)(v70 + 56) + *(void *)(v133 + 72) * v138;
    uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v133 + 16))(v135 + *(int *)(v140 + 48), v139, v40);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v140 - 8) + 56))(v135, 0, 1, v140);
LABEL_94:
    uint64_t v145 = v135;
    uint64_t v146 = v237;
    sub_1C3F961BC(v145, v237, &qword_1EBBC07A0);
    uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v147 - 8) + 48))(v146, 1, v147) != 1)
    {
      uint64_t v148 = v146 + *(int *)(v147 + 48);
      sub_1C3F8F6E0(v146, (uint64_t)v57, (uint64_t (*)(void))type metadata accessor for Replica);
      (*v233)(v44, v148, v40);
      swift_beginAccess();
      v149 = *v246;
      if (*((void *)*v246 + 2) && (unint64_t v150 = sub_1C3F8F160((uint64_t)v57), (v151 & 1) != 0))
      {
        sub_1C3FAA63C(*((void *)v149 + 7) + 16 * v150, (uint64_t)&v253);
        uint64_t v152 = v234;
        if (v253)
        {
          uint64_t Strong = swift_weakLoadStrong();
          sub_1C3F962E0((uint64_t)&v253, qword_1EBBBEE40);
          swift_endAccess();
          if (Strong)
          {
            uint64_t v154 = Strong + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replica;
            swift_beginAccess();
            uint64_t v155 = v154;
            uint64_t v156 = v208;
            sub_1C3F970C4(v155, v208, &qword_1EBBC0778);
            uint64_t v157 = type metadata accessor for CRReplicaDatabase.Replica(0);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v157 - 8) + 48))(v156, 1, v157) == 1)goto LABEL_126; {
            v158 = v207;
            }
            uint64_t v159 = v236;
            (*v231)(v207, v156, v236);
            sub_1C3F9024C(v156, type metadata accessor for CRReplicaDatabase.Replica);
            sub_1C4496658();
            sub_1C4496658();
            v160 = v206;
            sub_1C4496648();
            (*v230)(v158, v159);
            uint64_t v161 = (uint64_t)v210;
            (*v229)(v210, v160, v159);
            *(void *)(v161 + *(int *)(v243 + 20)) = 0;
            uint64_t v44 = v223;
            sub_1C3FB1680((uint64_t)v57, (uint64_t)v223, v161, Strong, &v248, v235, v232, v242, &v249, &v250);
            uint64_t v134 = v212;
            if (Strong != *(void *)(v212 + v152))
            {
              sub_1C3F5F394();
              uint64_t v135 = (uint64_t)v238;
              if (qword_1EA39B8A8 != -1) {
                swift_once();
              }
              uint64_t v162 = sub_1C4496C58();
              __swift_project_value_buffer(v162, (uint64_t)qword_1EA39C1F0);
              v163 = sub_1C4496C38();
              os_log_type_t v164 = sub_1C44979E8();
              BOOL v165 = os_log_type_enabled(v163, v164);
              uint64_t v133 = v222;
              if (v165)
              {
                v166 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v166 = 0;
                _os_log_impl(&dword_1C3F4F000, v163, v164, "Using multiple contexts with the same CRDT. This will be inefficient.", v166, 2u);
                v167 = v166;
                uint64_t v44 = v223;
                MEMORY[0x1C8782060](v167, -1, -1);
              }
              swift_release();

              uint64_t v136 = (uint64_t)v210;
              uint64_t v134 = v212;
              uint64_t v70 = v239;
              goto LABEL_69;
            }
            swift_release();
            uint64_t v136 = v161;
            uint64_t v70 = v239;
            uint64_t v133 = v222;
LABEL_111:
            uint64_t v135 = (uint64_t)v238;
LABEL_69:
            sub_1C3F9024C(v136, (uint64_t (*)(void))type metadata accessor for Replica);
            (*v228)(v44, v40);
            sub_1C3F9024C((uint64_t)v57, (uint64_t (*)(void))type metadata accessor for Replica);
            continue;
          }
LABEL_107:
          uint64_t v168 = *(void *)(v134 + v152) + OBJC_IVAR____TtC9Coherence17CRReplicaDatabase_replica;
          swift_beginAccess();
          uint64_t v169 = v168;
          uint64_t v170 = v227;
          sub_1C3F970C4(v169, v227, &qword_1EBBC0778);
          uint64_t v171 = type metadata accessor for CRReplicaDatabase.Replica(0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v171 - 8) + 48))(v170, 1, v171) == 1)goto LABEL_123; {
          v172 = v226;
          }
          uint64_t v173 = v236;
          (*v231)(v226, v170, v236);
          sub_1C3F9024C(v170, type metadata accessor for CRReplicaDatabase.Replica);
          v174 = v225;
          sub_1C3F65AE4();
          (*v230)(v172, v173);
          uint64_t v175 = (uint64_t)v244;
          (*v229)(v244, v174, v173);
          *(void *)(v175 + *(int *)(v243 + 20)) = 0;
          uint64_t v176 = v245;
          sub_1C3F8EF24((uint64_t)v57, v245, (uint64_t (*)(void))type metadata accessor for Replica);
          swift_beginAccess();
          v177 = sub_1C3FAA6E8(&v251, v176);
          uint64_t v70 = v239;
          if (*v178) {
            swift_weakAssign();
          }
          ((void (*)(uint64_t *, void))v177)(&v251, 0);
          swift_endAccess();
          sub_1C3F9024C(v245, (uint64_t (*)(void))type metadata accessor for Replica);
          uint64_t v179 = *(void *)(v134 + v152);
          swift_retain();
          uint64_t v180 = (uint64_t)v244;
          sub_1C3FB1680((uint64_t)v57, (uint64_t)v44, (uint64_t)v244, v179, &v248, v235, v232, v242, &v249, &v250);
          swift_release();
          uint64_t v136 = v180;
          goto LABEL_111;
        }
      }
      else
      {
        uint64_t v253 = 0;
        v254[0] = 0;
        uint64_t v152 = v234;
      }
      sub_1C3F962E0((uint64_t)&v253, qword_1EBBBEE40);
      swift_endAccess();
      goto LABEL_107;
    }
    break;
  }
  swift_release();
  swift_beginAccess();
  v181 = (void *)v247;
  if (v249)
  {
    swift_beginAccess();
    if (!__OFADD__(*v181, 1))
    {
      ++*v181;
      goto LABEL_116;
    }
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
  }
LABEL_116:
  swift_beginAccess();
  uint64_t v182 = *v181;
  swift_beginAccess();
  swift_beginAccess();
  return v182;
}

uint64_t sub_1C3F65AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C43BE078);
}

uint64_t sub_1C3F65AE4()
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = sub_1C4496658();
  char v27 = v0;
  char v28 = v1;
  char v29 = v2;
  char v30 = v3;
  char v31 = v4;
  char v32 = v5;
  char v33 = v6;
  char v34 = v7;
  uint64_t v17 = sub_1C4496658();
  char v18 = v8;
  char v19 = v9;
  char v20 = v10;
  char v21 = v11;
  char v22 = v12;
  char v23 = v13;
  char v24 = v14;
  char v25 = v15;
  return sub_1C3F65C58(&v17, &v26);
}

uint64_t sub_1C3F65C58(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  *a1 ^= *a2;
  a1[1] = a2[1] ^ v2;
  return sub_1C4496648();
}

uint64_t sub_1C3F65D04()
{
  return sub_1C3F65D1C();
}

uint64_t sub_1C3F65D1C()
{
  if (!*(void *)(*v0 + 16) || (uint64_t result = sub_1C4496AF8(), !v1))
  {
    if (!*(void *)(v0[1] + 16)
      || (type metadata accessor for Proto_Value(0),
          sub_1C3F7251C(&qword_1EBBBF8E0, (void (*)(uint64_t))type metadata accessor for Proto_Value),
          uint64_t result = sub_1C4496BC8(),
          !v1))
    {
      type metadata accessor for Proto_CustomCRValue(0);
      return sub_1C4496878();
    }
  }
  return result;
}

uint64_t sub_1C3F65E34(void (*a1)(char *), uint64_t a2)
{
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  char v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v28 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v28 + 64);
  uint64_t v10 = MEMORY[0x1F4188790](v4);
  char v11 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  char v29 = (char *)v22 - v12;
  uint64_t v13 = *v2;
  if (!*v2) {
    return sub_1C4497478();
  }
  swift_retain();
  uint64_t v31 = sub_1C4496EB8();
  sub_1C3FAC974();
  uint64_t v25 = sub_1C4497528();
  sub_1C4497458();
  v22[1] = v13;
  char v14 = (char *)sub_1C3F876BC();
  char v15 = &v14[qword_1EA39F538];
  swift_beginAccess();
  uint64_t v16 = *(void *)v15;
  swift_bridgeObjectRetain();

  if (!MEMORY[0x1C8780160](v16, v8))
  {
LABEL_13:
    swift_release();
    swift_bridgeObjectRelease();
    return v31;
  }
  v22[0] = v9;
  uint64_t v17 = 0;
  char v24 = (void (**)(char *, uint64_t *, uint64_t))(v28 + 16);
  char v18 = (void (**)(char *, char *, uint64_t))(v28 + 32);
  void v22[2] = v6;
  char v23 = (void (**)(char *, uint64_t))(v28 + 8);
  while (1)
  {
    char v19 = sub_1C44974A8();
    sub_1C4497438();
    if (v19)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v28 + 16))(v29, v16+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v17, v8);
      uint64_t v20 = v17 + 1;
      if (__OFADD__(v17, 1)) {
        goto LABEL_12;
      }
      goto LABEL_6;
    }
    uint64_t result = sub_1C4497DA8();
    if (v22[0] != 8) {
      break;
    }
    uint64_t v30 = result;
    (*v24)(v29, &v30, v8);
    swift_unknownObjectRelease();
    uint64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
LABEL_6:
    (*v18)(v11, v29, v8);
    v26(v11);
    if (v3)
    {
      swift_release();
      (*v23)(v11, v8);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    sub_1C44974D8();
    (*v23)(v11, v8);
    ++v17;
    if (v20 == MEMORY[0x1C8780160](v16, v8)) {
      goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1C3F661B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C3F661DC(a1, v2[5], v2[6], v2[2], v2[3], v2[4], a2);
}

uint64_t sub_1C3F661DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v67 = a5;
  uint64_t v74 = a3;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (uint64_t)v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  char v18 = (char *)v55 - v17;
  uint64_t v63 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v62 = (char *)v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Proto_Version(0);
  uint64_t v65 = *(void *)(v20 - 8);
  uint64_t v66 = v20;
  MEMORY[0x1F4188790](v20);
  uint64_t v64 = (void *)((char *)v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v61 = (uint64_t)v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (uint64_t)v55 - v25;
  uint64_t v27 = type metadata accessor for Proto_Value(0);
  uint64_t v28 = MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)v55 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16))
  {
    uint64_t v59 = v29;
    uint64_t v60 = v28;
    uint64_t v69 = a6;
    unint64_t v32 = sub_1C3F88430(a1, a4, a6);
    if (v33)
    {
      a6 = v32;
      uint64_t v56 = v26;
      unint64_t v57 = v18;
      uint64_t v58 = v15;
      uint64_t v26 = *(unsigned int *)(a2 + 36);
      sub_1C4496888();
      uint64_t v15 = *(int *)(type metadata accessor for Proto_Set.Element(0) + 20);
      if (qword_1EBBBF1E0 == -1) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_13:
  swift_once();
LABEL_4:
  uint64_t v34 = qword_1EBBBF1D8;
  *(void *)(a7 + v15) = qword_1EBBBF1D8;
  MEMORY[0x1F4188790](v34);
  uint64_t v35 = v67;
  v55[-8] = a4;
  v55[-7] = v35;
  v55[-6] = v69;
  v55[-5] = a2;
  v55[-4] = a6;
  v55[-3] = v26;
  LOBYTE(v53) = 0;
  uint64_t v54 = v74;
  swift_retain();
  uint64_t v36 = v68;
  sub_1C3F6DC00((void (*)(uint64_t))sub_1C3F6FCE0, (uint64_t)v31);
  if (v36) {
    return sub_1C3F86DB8(a7, type metadata accessor for Proto_Set.Element);
  }
  v55[0] = a4;
  v55[1] = v26;
  uint64_t v67 = a6;
  uint64_t v68 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    uint64_t v38 = swift_retain();
    *(void *)(a7 + v15) = sub_1C3F97F64(v38);
    swift_release();
  }
  uint64_t v39 = *(void *)(a7 + v15);
  uint64_t v40 = v56;
  sub_1C3F896D0((uint64_t)v31, v56, type metadata accessor for Proto_Value);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v59 + 56))(v40, 0, 1, v60);
  uint64_t v41 = v61;
  sub_1C3F961BC(v40, v61, &qword_1EBBC0540);
  uint64_t v42 = v39 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v41, v42, &qword_1EBBC0540);
  swift_endAccess();
  swift_release();
  uint64_t v53 = v69;
  uint64_t v43 = v62;
  uint64_t v44 = v55[0];
  sub_1C4497058();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v43, v44);
  uint64_t v70 = v72;
  uint64_t v71 = v73;
  uint64_t v45 = v64;
  sub_1C3F9FF10(v74, v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v47 = (uint64_t)v57;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for Proto_Set.Element._StorageClass(0);
    swift_allocObject();
    uint64_t v48 = swift_retain();
    *(void *)(a7 + v15) = sub_1C3F97F64(v48);
    swift_release();
  }
  uint64_t v49 = *(void *)(a7 + v15);
  sub_1C3F896D0((uint64_t)v45, v47, type metadata accessor for Proto_Version);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v47, 0, 1, v66);
  uint64_t v50 = v47;
  uint64_t v51 = v58;
  sub_1C3F961BC(v50, v58, &qword_1EBBC0578);
  uint64_t v52 = v49 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v51, v52, &qword_1EBBC0578);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1C3F6680C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1C3F6682C(a1, a2);
}

uint64_t sub_1C3F6682C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Replica();
  MEMORY[0x1F4188790](v4 - 8);
  char v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1 + *(int *)(type metadata accessor for CROrderedSetElement() + 36);
  type metadata accessor for Proto_Timestamp(0);
  *a2 = 0;
  a2[1] = 0;
  sub_1C4496888();
  sub_1C3F86C30(v7, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Replica);
  uint64_t v8 = sub_1C3FA10C4((uint64_t)v6);
  uint64_t v9 = sub_1C4496678();
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v6, v9);
  *a2 = v8;
  uint64_t result = type metadata accessor for Timestamp(0);
  a2[1] = *(void *)(v7 + *(int *)(result + 20));
  return result;
}

uint64_t sub_1C3F66974@<X0>(uint64_t a1@<X8>)
{
  return sub_1C3F66990(v1, a1);
}

uint64_t sub_1C3F66990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v4 = sub_1C4496678();
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  MEMORY[0x1F4188790](v4);
  char v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0FA0);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)v24 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v24 - v14;
  uint64_t v29 = a1;
  uint64_t v16 = a1 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  swift_beginAccess();
  sub_1C3F66D38(v16, (uint64_t)v15);
  uint64_t v17 = type metadata accessor for Replica();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v25(v15, 1, v17) != 1)
  {
    uint64_t v10 = v15;
    return sub_1C3F66DA0((uint64_t)v10, v26);
  }
  v24[2] = v2;
  sub_1C3F671CC((uint64_t)v15);
  uint64_t v19 = v29 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
  swift_beginAccess();
  uint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 16))(v6, v19, v28);
  if (qword_1EBBC0C80 != -1) {
    uint64_t v20 = swift_once();
  }
  v24[1] = v24;
  MEMORY[0x1F4188790](v20);
  v24[-2] = v6;
  id v22 = v21;
  sub_1C4497A58();

  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v28);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v13, 0, 1, v17);
  swift_beginAccess();
  sub_1C3F6722C((uint64_t)v13, v16);
  swift_endAccess();
  *(void *)(v29 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  sub_1C3F66D38(v16, (uint64_t)v10);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v25)(v10, 1, v17);
  if (result != 1) {
    return sub_1C3F66DA0((uint64_t)v10, v26);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C3F66D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C43EE950);
}

uint64_t sub_1C3F66D38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0FA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3F66DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Replica();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3F66E04@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v24 = sub_1C4496678();
  uint64_t v20 = *(void *)(v24 - 8);
  uint64_t v3 = v20;
  MEMORY[0x1F4188790](v24);
  id v22 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0FA0);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = a1 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  swift_beginAccess();
  sub_1C3F66D38(v11, (uint64_t)v10);
  uint64_t v12 = type metadata accessor for Replica();
  id v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v21(v8, 1, 1, v12);
  swift_beginAccess();
  sub_1C3F6722C((uint64_t)v8, v11);
  swift_endAccess();
  uint64_t v13 = a1 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
  swift_beginAccess();
  uint64_t v14 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v22, v13, v24);
  uint64_t v15 = *(void *)(a1 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter);
  uint64_t v16 = *(void *)(a1 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter);
  sub_1C3F66D38((uint64_t)v10, (uint64_t)v8);
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v17 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  v21((char *)(v17 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica), 1, 1, v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v17 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v14, v24);
  *(void *)(v17 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = v15;
  *(void *)(v17 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = v16;
  swift_beginAccess();
  sub_1C3F6722C((uint64_t)v8, v18);
  swift_endAccess();
  uint64_t result = sub_1C3F671CC((uint64_t)v10);
  *uint64_t v23 = v17;
  return result;
}

uint64_t sub_1C3F6711C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity;
  uint64_t v2 = sub_1C4496678();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_1C3F671CC(v0 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica);
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F671CC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0FA0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C3F6722C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0FA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3F67294()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39AD68);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C449B4A0;
  *(void *)(v0 + 32) = sub_1C3F674E0();
  *(void *)(v0 + 40) = sub_1C3F674E0();
  __swift_instantiateConcreteTypeFromMangledName(qword_1EA39AD98);
  sub_1C3F69264();
  sub_1C44970B8();
  swift_bridgeObjectRelease();
  sub_1C4497268();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1C4497268();
  swift_bridgeObjectRelease();
  sub_1C4497268();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C3F673B8()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39AD68);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C449B4A0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v0 + 32) = sub_1C3F674E0();
  *(void *)(v0 + 40) = sub_1C3F674E0();
  __swift_instantiateConcreteTypeFromMangledName(qword_1EA39AD98);
  sub_1C3F69264();
  sub_1C44970B8();
  swift_bridgeObjectRelease();
  sub_1C4497268();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1C4497268();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 91;
}

uint64_t sub_1C3F674E0()
{
  uint64_t v0 = sub_1C44967A8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_1C44967E8();
  uint64_t v4 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for Replica();
  MEMORY[0x1F4188790](v67);
  uint64_t v70 = (uint64_t)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
  uint64_t v8 = *(void *)(v66 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v66);
  uint64_t v65 = (uint64_t)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v69 = (uint64_t)&v54 - v11;
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v72 = (void *)sub_1C3F67D0C(v12);
  sub_1C3F6802C(&v72);
  swift_bridgeObjectRelease();
  uint64_t v13 = v72;
  int64_t v14 = v72[2];
  if (v14)
  {
    uint64_t v77 = MEMORY[0x1E4FBC860];
    sub_1C3F67EA0(0, v14, 0);
    uint64_t v15 = 0;
    unint64_t v16 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v54 = v13;
    uint64_t v64 = (char *)v13 + v16;
    uint64_t v17 = *(void *)(v8 + 72);
    uint64_t v62 = (void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    uint64_t v63 = v17;
    uint64_t v61 = (void (**)(char *, uint64_t, uint64_t))(v4 + 32);
    unint64_t v57 = (void (**)(char *, uint64_t))(v1 + 8);
    uint64_t v56 = (void (**)(char *, uint64_t))(v4 + 8);
    long long v60 = xmmword_1C449B4A0;
    uint64_t v18 = v55;
    uint64_t v59 = v6;
    int64_t v58 = v14;
    while (1)
    {
      uint64_t v68 = v15;
      uint64_t v19 = v69;
      sub_1C3F970C4((uint64_t)&v64[v63 * v15], v69, &qword_1EBBC0798);
      uint64_t v20 = v65;
      uint64_t v21 = *(int *)(v66 + 48);
      uint64_t v22 = v65 + v21;
      uint64_t v23 = v19 + v21;
      sub_1C3F8EF8C(v19, v65, (uint64_t (*)(void))type metadata accessor for Replica);
      (*v62)(v22, v23, v18);
      uint64_t v24 = v20;
      uint64_t v25 = v70;
      sub_1C3F8F7B0(v24, v70, (uint64_t (*)(void))type metadata accessor for Replica);
      (*v61)(v6, v22, v18);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07E0);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = v60;
      char v27 = sub_1C4496658();
      uint64_t v28 = MEMORY[0x1E4FBC358];
      *(void *)(v26 + 56) = MEMORY[0x1E4FBC358];
      uint64_t v29 = MEMORY[0x1E4FBC3B0];
      *(void *)(v26 + 64) = MEMORY[0x1E4FBC3B0];
      *(unsigned char *)(v26 + 32) = v27;
      uint64_t v30 = sub_1C4496658();
      *(void *)(v26 + 96) = v28;
      *(void *)(v26 + 104) = v29;
      *(unsigned char *)(v26 + 72) = BYTE1(v30);
      uint64_t v72 = (void *)sub_1C44971E8();
      uint64_t v73 = v31;
      sub_1C4497268();
      unint64_t v75 = *(void **)(v25 + *(int *)(v67 + 20));
      sub_1C4498088();
      sub_1C4497268();
      swift_bridgeObjectRelease();
      unint64_t v75 = v72;
      uint64_t v76 = v73;
      sub_1C4497268();
      sub_1C44967C8();
      sub_1C3FA0E84((unint64_t *)&qword_1EBBBEE28, MEMORY[0x1E4F27CE0]);
      uint64_t v32 = sub_1C44977F8();
      if (v32) {
        break;
      }
      uint64_t v34 = (void *)MEMORY[0x1E4FBC860];
LABEL_14:
      (*v57)(v3, v0);
      uint64_t v72 = v34;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39AD70);
      sub_1C3F815A4((unint64_t *)&qword_1EA39AD78, &qword_1EA39AD70);
      sub_1C44970B8();
      swift_bridgeObjectRelease();
      sub_1C4497268();
      swift_bridgeObjectRelease();
      sub_1C4497268();
      uint64_t v46 = v75;
      uint64_t v47 = v76;
      uint64_t v6 = v59;
      (*v56)(v59, v18);
      sub_1C3F902AC(v70, (uint64_t (*)(void))type metadata accessor for Replica);
      sub_1C3F962E0(v69, &qword_1EBBC0798);
      uint64_t v48 = v77;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1C3F67EA0(0, *(void *)(v48 + 16) + 1, 1);
        uint64_t v48 = v77;
      }
      uint64_t v49 = v68;
      unint64_t v51 = *(void *)(v48 + 16);
      unint64_t v50 = *(void *)(v48 + 24);
      if (v51 >= v50 >> 1)
      {
        sub_1C3F67EA0(v50 > 1, v51 + 1, 1);
        uint64_t v49 = v68;
        uint64_t v48 = v77;
      }
      uint64_t v15 = v49 + 1;
      *(void *)(v48 + 16) = v51 + 1;
      uint64_t v52 = v48 + 16 * v51;
      *(void *)(v52 + 32) = v46;
      *(void *)(v52 + 40) = v47;
      if (v15 == v58)
      {
        swift_release();
        return v48;
      }
    }
    uint64_t v33 = v32;
    uint64_t v74 = (void *)MEMORY[0x1E4FBC860];
    sub_1C3F67EA0(0, v32 & ~(v32 >> 63), 0);
    uint64_t v34 = v74;
    sub_1C44977D8();
    if ((v33 & 0x8000000000000000) == 0)
    {
      while (1)
      {
        uint64_t v35 = (void (*)(void **, void))sub_1C44978C8();
        uint64_t v37 = *(void **)v36;
        uint64_t v38 = *(void *)(v36 + 8);
        v35(&v72, 0);
        if (__OFSUB__(v38, 1)) {
          break;
        }
        if (v37 == (void *)(v38 - 1))
        {
          uint64_t v72 = v37;
          uint64_t v39 = (void *)sub_1C4498088();
          uint64_t v41 = v40;
        }
        else
        {
          uint64_t v71 = v37;
          uint64_t v72 = (void *)sub_1C4498088();
          uint64_t v73 = v42;
          sub_1C4497268();
          uint64_t v71 = (void *)(v38 - 1);
          sub_1C4498088();
          sub_1C4497268();
          swift_bridgeObjectRelease();
          uint64_t v39 = v72;
          uint64_t v41 = v73;
        }
        uint64_t v74 = v34;
        unint64_t v44 = v34[2];
        unint64_t v43 = v34[3];
        if (v44 >= v43 >> 1)
        {
          sub_1C3F67EA0(v43 > 1, v44 + 1, 1);
          uint64_t v34 = v74;
        }
        v34[2] = v44 + 1;
        uint64_t v45 = &v34[2 * v44];
        v45[4] = v39;
        v45[5] = v41;
        sub_1C4497828();
        if (!--v33)
        {
          uint64_t v18 = v55;
          goto LABEL_14;
        }
      }
      __break(1u);
    }
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    swift_release();
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

size_t sub_1C3F67D0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBB2C8);
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      _OWORD v6[2] = v1;
      v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798) - 8);
      uint64_t v10 = sub_1C3F69324(&v11, (uint64_t)v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v1, a1);
      swift_bridgeObjectRetain();
      sub_1C3F7FCE8();
      if (v10 == v1) {
        return (size_t)v6;
      }
      __break(1u);
      return MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C3F67EA0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C3F67EC0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1C3F67EC0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0250);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3F6802C(void **a1)
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_1C3F68FFC(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  uint64_t result = sub_1C3F680D8(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1C3F680D8(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v217 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
  uint64_t v204 = *(void *)(v4 - 8);
  uint64_t v205 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v200 = (uint64_t)&v189 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v209 = (uint64_t)&v189 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  int64_t v11 = (char *)&v189 - v10;
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  int64_t v14 = (char *)&v189 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v189 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  v197 = (char *)&v189 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v189 - v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v189 - v23;
  uint64_t v212 = a1;
  uint64_t v25 = a1[1];
  uint64_t result = sub_1C4498068();
  if (result >= v25)
  {
    if (v25 < 0) {
      goto LABEL_167;
    }
    if (v25) {
      return sub_1C3F696AC(0, v25, 1, v212);
    }
  }
  else
  {
    if (v25 >= 0) {
      uint64_t v27 = v25;
    }
    else {
      uint64_t v27 = v25 + 1;
    }
    if (v25 < -1)
    {
      uint64_t result = sub_1C4497F48();
      __break(1u);
    }
    else
    {
      v210 = v14;
      uint64_t v202 = v17;
      uint64_t v28 = (uint64_t)v197;
      v194 = v22;
      uint64_t v193 = v24;
      uint64_t v192 = result;
      if (v25 >= 2)
      {
        uint64_t v29 = v25;
        uint64_t v30 = v27 >> 1;
        uint64_t v31 = sub_1C4497488();
        *(void *)(v31 + 16) = v30;
        uint64_t v32 = *(unsigned __int8 *)(v204 + 80);
        uint64_t v191 = v31;
        unint64_t v203 = v31 + ((v32 + 32) & ~v32);
LABEL_13:
        uint64_t v33 = 0;
        uint64_t v34 = (char *)MEMORY[0x1E4FBC860];
        uint64_t v208 = v11;
        uint64_t v35 = v29;
        while (1)
        {
          uint64_t v37 = v33;
          uint64_t v38 = v33 + 1;
          uint64_t v195 = v35;
          uint64_t v201 = v33;
          if (v33 + 1 >= v35)
          {
            uint64_t v66 = v33 + 1;
            goto LABEL_59;
          }
          uint64_t v198 = v2;
          uint64_t v39 = *v212;
          uint64_t v40 = v33;
          uint64_t v41 = *(void *)(v204 + 72);
          uint64_t v42 = (uint64_t)v193;
          sub_1C3F970C4(*v212 + v41 * v38, (uint64_t)v193, &qword_1EBBC0798);
          uint64_t v196 = v39;
          uint64_t v211 = v41;
          uint64_t v43 = v39 + v41 * v40;
          uint64_t v44 = (uint64_t)v194;
          sub_1C3F970C4(v43, (uint64_t)v194, &qword_1EBBC0798);
          uint64_t v206 = type metadata accessor for Replica();
          uint64_t v45 = *(int *)(v206 + 20);
          uint64_t v46 = *(void *)(v42 + v45);
          uint64_t v47 = *(void *)(v44 + v45);
          if (v46 == v47) {
            break;
          }
          LODWORD(v207) = v46 < v47;
          uint64_t v37 = v201;
          uint64_t v64 = v195;
          uint64_t v2 = v198;
LABEL_28:
          sub_1C3F962E0((uint64_t)v194, &qword_1EBBC0798);
          sub_1C3F962E0((uint64_t)v193, &qword_1EBBC0798);
          uint64_t v66 = v37 + 2;
          if (v37 + 2 < v64)
          {
            uint64_t v199 = v211 * v38;
            uint64_t v67 = v196;
            uint64_t v198 = v211 * v66;
            while (1)
            {
              uint64_t v68 = v66;
              sub_1C3F970C4(v67 + v198, v28, &qword_1EBBC0798);
              uint64_t v69 = v28;
              uint64_t v70 = (uint64_t)v202;
              sub_1C3F970C4(v67 + v199, (uint64_t)v202, &qword_1EBBC0798);
              uint64_t v71 = *(int *)(v206 + 20);
              uint64_t v72 = *(void *)(v69 + v71);
              uint64_t v73 = *(void *)(v70 + v71);
              if (v72 == v73)
              {
                unint64_t v215 = sub_1C4496658();
                LOWORD(v216) = v74;
                BYTE2(v216) = v75;
                BYTE3(v216) = v76;
                BYTE4(v216) = v77;
                BYTE5(v216) = v78;
                BYTE6(v216) = v79;
                HIBYTE(v216) = v80;
                unint64_t v213 = sub_1C4496658();
                LOWORD(v214) = v81;
                BYTE2(v214) = v82;
                BYTE3(v214) = v83;
                BYTE4(v214) = v84;
                BYTE5(v214) = v85;
                BYTE6(v214) = v86;
                HIBYTE(v214) = v87;
                unint64_t v88 = bswap64(v215);
                unint64_t v89 = bswap64(v213);
                if (v88 != v89) {
                  goto LABEL_35;
                }
                unint64_t v88 = bswap64(v216);
                unint64_t v89 = bswap64(v214);
                if (v88 == v89)
                {
                  uint64_t v28 = (uint64_t)v197;
                  unsigned int v90 = 0;
                }
                else
                {
LABEL_35:
                  uint64_t v28 = (uint64_t)v197;
                  unsigned int v91 = v88 < v89 ? -1 : 1;
                  unsigned int v90 = v91 >> 31;
                }
              }
              else
              {
                unsigned int v90 = v72 < v73;
                uint64_t v28 = v69;
              }
              sub_1C3F962E0((uint64_t)v202, &qword_1EBBC0798);
              sub_1C3F962E0(v28, &qword_1EBBC0798);
              if (v207 != v90) {
                break;
              }
              uint64_t v66 = v68 + 1;
              v67 += v211;
              if (v64 == v68 + 1)
              {
                uint64_t v66 = v64;
                goto LABEL_43;
              }
            }
            uint64_t v66 = v68;
LABEL_43:
            uint64_t v37 = v201;
          }
          uint64_t v92 = v196;
          if (v207)
          {
            if (v66 < v37) {
              goto LABEL_168;
            }
            if (v37 < v66)
            {
              int v190 = v34;
              uint64_t v93 = 0;
              uint64_t v94 = v211 * (v66 - 1);
              uint64_t v95 = v66 * v211;
              uint64_t v96 = v37 * v211;
              do
              {
                if (v37 != v66 + v93 - 1)
                {
                  if (!v92) {
                    goto LABEL_173;
                  }
                  uint64_t v207 = v92 + v94;
                  sub_1C3F961BC(v92 + v96, v200, &qword_1EBBC0798);
                  if (v96 < v94 || v92 + v96 >= (unint64_t)(v92 + v95))
                  {
                    uint64_t v97 = v207;
                    swift_arrayInitWithTakeFrontToBack();
                  }
                  else
                  {
                    uint64_t v97 = v207;
                    if (v96 != v94) {
                      swift_arrayInitWithTakeBackToFront();
                    }
                  }
                  sub_1C3F961BC(v200, v97, &qword_1EBBC0798);
                  int64_t v11 = v208;
                  uint64_t v92 = v196;
                }
                ++v37;
                --v93;
                v94 -= v211;
                v95 -= v211;
                v96 += v211;
              }
              while (v37 < v66 + v93);
              uint64_t v34 = v190;
              uint64_t v37 = v201;
            }
          }
LABEL_59:
          if (v66 < v195)
          {
            if (__OFSUB__(v66, v37)) {
              goto LABEL_166;
            }
            if (v66 - v37 < v192)
            {
              if (__OFADD__(v37, v192)) {
                goto LABEL_169;
              }
              uint64_t v98 = v195;
              if (v37 + v192 < v195) {
                uint64_t v98 = v37 + v192;
              }
              if (v98 < v37)
              {
LABEL_170:
                __break(1u);
LABEL_171:
                __break(1u);
LABEL_172:
                __break(1u);
LABEL_173:
                __break(1u);
LABEL_174:
                __break(1u);
              }
              if (v66 != v98)
              {
                int v190 = v34;
                uint64_t v198 = v2;
                uint64_t v199 = v98;
                uint64_t v99 = *(void *)(v204 + 72);
                uint64_t v211 = v99 * (v66 - 1);
                uint64_t v206 = v99;
                uint64_t v100 = v66 * v99;
                do
                {
                  uint64_t v102 = 0;
                  uint64_t v103 = v37;
                  uint64_t v207 = v66;
                  while (1)
                  {
                    uint64_t v104 = *v212;
                    uint64_t v105 = (uint64_t)v210;
                    sub_1C3F970C4(v100 + v102 + *v212, (uint64_t)v210, &qword_1EBBC0798);
                    sub_1C3F970C4(v211 + v102 + v104, (uint64_t)v11, &qword_1EBBC0798);
                    uint64_t v106 = *(int *)(type metadata accessor for Replica() + 20);
                    uint64_t v107 = *(void *)(v105 + v106);
                    uint64_t v108 = *(void *)&v11[v106];
                    if (v107 == v108)
                    {
                      unint64_t v215 = sub_1C4496658();
                      LOWORD(v216) = v109;
                      BYTE2(v216) = v110;
                      BYTE3(v216) = v111;
                      BYTE4(v216) = v112;
                      BYTE5(v216) = v113;
                      BYTE6(v216) = v114;
                      HIBYTE(v216) = v115;
                      unint64_t v213 = sub_1C4496658();
                      LOWORD(v214) = v116;
                      BYTE2(v214) = v117;
                      BYTE3(v214) = v118;
                      BYTE4(v214) = v119;
                      BYTE5(v214) = v120;
                      BYTE6(v214) = v121;
                      HIBYTE(v214) = v122;
                      unint64_t v123 = bswap64(v215);
                      unint64_t v124 = bswap64(v213);
                      if (v123 != v124) {
                        goto LABEL_77;
                      }
                      unint64_t v123 = bswap64(v216);
                      unint64_t v124 = bswap64(v214);
                      if (v123 == v124)
                      {
                        BOOL v125 = 0;
                      }
                      else
                      {
LABEL_77:
                        unsigned int v126 = v123 < v124 ? -1 : 1;
                        BOOL v125 = v126 >> 31;
                      }
                    }
                    else
                    {
                      BOOL v125 = v107 < v108;
                    }
                    sub_1C3F962E0((uint64_t)v11, &qword_1EBBC0798);
                    sub_1C3F962E0((uint64_t)v210, &qword_1EBBC0798);
                    if (!v125) {
                      break;
                    }
                    uint64_t v127 = *v212;
                    if (!*v212) {
                      goto LABEL_171;
                    }
                    uint64_t v128 = v127 + v211 + v102;
                    sub_1C3F961BC(v127 + v100 + v102, v209, &qword_1EBBC0798);
                    swift_arrayInitWithTakeFrontToBack();
                    sub_1C3F961BC(v209, v128, &qword_1EBBC0798);
                    uint64_t v101 = v207;
                    v102 -= v206;
                    ++v103;
                    int64_t v11 = v208;
                    if (v207 == v103) {
                      goto LABEL_69;
                    }
                  }
                  uint64_t v101 = v207;
LABEL_69:
                  uint64_t v66 = v101 + 1;
                  v211 += v206;
                  v100 += v206;
                  uint64_t v37 = v201;
                }
                while (v66 != v199);
                uint64_t v66 = v199;
                uint64_t v2 = v198;
                uint64_t v34 = v190;
              }
            }
          }
          if (v66 < v37) {
            goto LABEL_161;
          }
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v207 = v66;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            uint64_t v34 = sub_1C411E2A8(0, *((void *)v34 + 2) + 1, 1, v34);
          }
          unint64_t v131 = *((void *)v34 + 2);
          unint64_t v130 = *((void *)v34 + 3);
          unint64_t v36 = v131 + 1;
          if (v131 >= v130 >> 1) {
            uint64_t v34 = sub_1C411E2A8((char *)(v130 > 1), v131 + 1, 1, v34);
          }
          *((void *)v34 + 2) = v36;
          unint64_t v132 = v34 + 32;
          uint64_t v133 = &v34[16 * v131 + 32];
          uint64_t v134 = v207;
          *(void *)uint64_t v133 = v37;
          *((void *)v133 + 1) = v134;
          if (v131)
          {
            while (1)
            {
              unint64_t v135 = v36 - 1;
              if (v36 >= 4)
              {
                uint64_t v140 = &v132[16 * v36];
                uint64_t v141 = *((void *)v140 - 8);
                uint64_t v142 = *((void *)v140 - 7);
                BOOL v146 = __OFSUB__(v142, v141);
                uint64_t v143 = v142 - v141;
                if (v146) {
                  goto LABEL_150;
                }
                uint64_t v145 = *((void *)v140 - 6);
                uint64_t v144 = *((void *)v140 - 5);
                BOOL v146 = __OFSUB__(v144, v145);
                uint64_t v138 = v144 - v145;
                char v139 = v146;
                if (v146) {
                  goto LABEL_151;
                }
                unint64_t v147 = v36 - 2;
                uint64_t v148 = &v132[16 * v36 - 32];
                uint64_t v150 = *(void *)v148;
                uint64_t v149 = *((void *)v148 + 1);
                BOOL v146 = __OFSUB__(v149, v150);
                uint64_t v151 = v149 - v150;
                if (v146) {
                  goto LABEL_153;
                }
                BOOL v146 = __OFADD__(v138, v151);
                uint64_t v152 = v138 + v151;
                if (v146) {
                  goto LABEL_156;
                }
                if (v152 >= v143)
                {
                  uint64_t v170 = &v132[16 * v135];
                  uint64_t v172 = *(void *)v170;
                  uint64_t v171 = *((void *)v170 + 1);
                  BOOL v146 = __OFSUB__(v171, v172);
                  uint64_t v173 = v171 - v172;
                  if (v146) {
                    goto LABEL_160;
                  }
                  BOOL v163 = v138 < v173;
                  goto LABEL_122;
                }
              }
              else
              {
                if (v36 != 3)
                {
                  uint64_t v164 = *((void *)v34 + 4);
                  uint64_t v165 = *((void *)v34 + 5);
                  BOOL v146 = __OFSUB__(v165, v164);
                  uint64_t v157 = v165 - v164;
                  char v158 = v146;
                  goto LABEL_116;
                }
                uint64_t v137 = *((void *)v34 + 4);
                uint64_t v136 = *((void *)v34 + 5);
                BOOL v146 = __OFSUB__(v136, v137);
                uint64_t v138 = v136 - v137;
                char v139 = v146;
              }
              if (v139) {
                goto LABEL_152;
              }
              unint64_t v147 = v36 - 2;
              uint64_t v153 = &v132[16 * v36 - 32];
              uint64_t v155 = *(void *)v153;
              uint64_t v154 = *((void *)v153 + 1);
              BOOL v156 = __OFSUB__(v154, v155);
              uint64_t v157 = v154 - v155;
              char v158 = v156;
              if (v156) {
                goto LABEL_155;
              }
              uint64_t v159 = &v132[16 * v135];
              uint64_t v161 = *(void *)v159;
              uint64_t v160 = *((void *)v159 + 1);
              BOOL v146 = __OFSUB__(v160, v161);
              uint64_t v162 = v160 - v161;
              if (v146) {
                goto LABEL_158;
              }
              if (__OFADD__(v157, v162)) {
                goto LABEL_159;
              }
              if (v157 + v162 >= v138)
              {
                BOOL v163 = v138 < v162;
LABEL_122:
                if (v163) {
                  unint64_t v135 = v147;
                }
                goto LABEL_124;
              }
LABEL_116:
              if (v158) {
                goto LABEL_154;
              }
              v166 = &v132[16 * v135];
              uint64_t v168 = *(void *)v166;
              uint64_t v167 = *((void *)v166 + 1);
              BOOL v146 = __OFSUB__(v167, v168);
              uint64_t v169 = v167 - v168;
              if (v146) {
                goto LABEL_157;
              }
              if (v169 < v157) {
                goto LABEL_15;
              }
LABEL_124:
              unint64_t v174 = v135 - 1;
              if (v135 - 1 >= v36)
              {
                __break(1u);
LABEL_147:
                __break(1u);
LABEL_148:
                __break(1u);
LABEL_149:
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
                goto LABEL_170;
              }
              if (!*v212) {
                goto LABEL_172;
              }
              uint64_t v175 = v34;
              uint64_t v176 = &v132[16 * v174];
              uint64_t v177 = *(void *)v176;
              v178 = &v132[16 * v135];
              uint64_t v179 = *((void *)v178 + 1);
              sub_1C4119B58(*v212 + *(void *)(v204 + 72) * *(void *)v176, *v212 + *(void *)(v204 + 72) * *(void *)v178, *v212 + *(void *)(v204 + 72) * v179, v203);
              if (v2) {
                goto LABEL_144;
              }
              if (v179 < v177) {
                goto LABEL_147;
              }
              if (v135 > *((void *)v175 + 2)) {
                goto LABEL_148;
              }
              *(void *)uint64_t v176 = v177;
              *(void *)&v132[16 * v174 + 8] = v179;
              unint64_t v180 = *((void *)v175 + 2);
              if (v135 >= v180) {
                goto LABEL_149;
              }
              uint64_t v34 = v175;
              unint64_t v36 = v180 - 1;
              memmove(&v132[16 * v135], v178 + 16, 16 * (v180 - 1 - v135));
              *((void *)v175 + 2) = v180 - 1;
              int64_t v11 = v208;
              if (v180 <= 2) {
                goto LABEL_15;
              }
            }
          }
          unint64_t v36 = 1;
LABEL_15:
          uint64_t v35 = v212[1];
          uint64_t v33 = v207;
          uint64_t v28 = (uint64_t)v197;
          if (v207 >= v35) {
            goto LABEL_133;
          }
        }
        unint64_t v215 = sub_1C4496658();
        LOWORD(v216) = v48;
        BYTE2(v216) = v49;
        BYTE3(v216) = v50;
        BYTE4(v216) = v51;
        BYTE5(v216) = v52;
        BYTE6(v216) = v53;
        HIBYTE(v216) = v54;
        unint64_t v213 = sub_1C4496658();
        LOWORD(v214) = v55;
        BYTE2(v214) = v56;
        BYTE3(v214) = v57;
        BYTE4(v214) = v58;
        BYTE5(v214) = v59;
        BYTE6(v214) = v60;
        HIBYTE(v214) = v61;
        unint64_t v62 = bswap64(v215);
        unint64_t v63 = bswap64(v213);
        uint64_t v64 = v195;
        if (v62 == v63)
        {
          unint64_t v62 = bswap64(v216);
          unint64_t v63 = bswap64(v214);
          uint64_t v37 = v201;
          uint64_t v2 = v198;
          if (v62 == v63)
          {
            unsigned int v65 = 0;
LABEL_27:
            LODWORD(v207) = v65 >> 31;
            goto LABEL_28;
          }
        }
        else
        {
          uint64_t v37 = v201;
          uint64_t v2 = v198;
        }
        if (v62 < v63) {
          unsigned int v65 = -1;
        }
        else {
          unsigned int v65 = 1;
        }
        goto LABEL_27;
      }
      unint64_t v203 = MEMORY[0x1E4FBC860]
           + ((*(unsigned __int8 *)(v204 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v204 + 80));
      uint64_t v191 = MEMORY[0x1E4FBC860];
      if (v25 == 1)
      {
        uint64_t v29 = 1;
        goto LABEL_13;
      }
      uint64_t v34 = (char *)MEMORY[0x1E4FBC860];
      unint64_t v36 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_133:
      if (v36 >= 2)
      {
        uint64_t v181 = *v212;
        do
        {
          unint64_t v182 = v36 - 2;
          if (v36 < 2) {
            goto LABEL_162;
          }
          if (!v181) {
            goto LABEL_174;
          }
          v183 = v34;
          uint64_t v184 = v34 + 32;
          uint64_t v185 = *(void *)&v34[16 * v182 + 32];
          uint64_t v186 = *(void *)&v34[16 * v36 + 24];
          sub_1C4119B58(v181 + *(void *)(v204 + 72) * v185, v181 + *(void *)(v204 + 72) * *(void *)&v184[16 * v36 - 16], v181 + *(void *)(v204 + 72) * v186, v203);
          if (v2) {
            break;
          }
          if (v186 < v185) {
            goto LABEL_163;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v183 = sub_1C411E87C((uint64_t)v183);
          }
          if (v182 >= *((void *)v183 + 2)) {
            goto LABEL_164;
          }
          v187 = &v183[16 * v182 + 32];
          *(void *)v187 = v185;
          *((void *)v187 + 1) = v186;
          unint64_t v188 = *((void *)v183 + 2);
          if (v36 > v188) {
            goto LABEL_165;
          }
          uint64_t v34 = v183;
          memmove(&v183[16 * v36 + 16], &v183[16 * v36 + 32], 16 * (v188 - v36));
          *((void *)v183 + 2) = v188 - 1;
          unint64_t v36 = v188 - 1;
        }
        while (v188 > 2);
      }
LABEL_144:
      swift_bridgeObjectRelease();
      *(void *)(v191 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1C3F68FFC(void *a1)
{
  return sub_1C3F69250(0, a1[2], 0, a1);
}

uint64_t sub_1C3F69010(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3F69250(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1C3F69010(a1, a2, a3, a4, &qword_1EBBBB2C8, &qword_1EBBC0798);
}

unint64_t sub_1C3F69264()
{
  unint64_t result = qword_1EA39AD90;
  if (!qword_1EA39AD90)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_1EA39AD98);
    sub_1C3F815A4(&qword_1EA39AD88, &qword_1EA39AD80);
    sub_1C3F815A4((unint64_t *)&qword_1EA39AD78, &qword_1EA39AD70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39AD90);
  }
  return result;
}

uint64_t sub_1C3F69324(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v32 - v13;
  uint64_t v15 = *(void *)(a4 + 64);
  uint64_t v37 = a4 + 64;
  uint64_t v16 = -1 << *(unsigned char *)(a4 + 32);
  if (-v16 < 64) {
    uint64_t v17 = ~(-1 << -(char)v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  if (!a2)
  {
    int64_t v19 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v31 = v37;
    *a1 = a4;
    a1[1] = v31;
    a1[2] = ~v16;
    a1[3] = v19;
    a1[4] = v18;
    return a3;
  }
  if (!a3)
  {
    int64_t v19 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v34 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v35 = a1;
  int64_t v19 = 0;
  uint64_t v20 = 0;
  int64_t v36 = (unint64_t)(63 - v16) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v21 = a3;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  unint64_t v23 = v22 | (v19 << 6);
  while (1)
  {
    ++v20;
    uint64_t v27 = *(void *)(a4 + 48);
    uint64_t v28 = type metadata accessor for Replica();
    sub_1C3F8F4B8(v27 + *(void *)(*(void *)(v28 - 8) + 72) * v23, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v29 = *(void *)(a4 + 56);
    uint64_t v30 = sub_1C44967E8();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(&v11[*(int *)(v39 + 48)], v29 + *(void *)(*(void *)(v30 - 8) + 72) * v23, v30);
    sub_1C3F961BC((uint64_t)v11, (uint64_t)v14, &qword_1EBBC0798);
    uint64_t result = sub_1C3F961BC((uint64_t)v14, a2, &qword_1EBBC0798);
    if (v20 == v21)
    {
      a3 = v21;
      goto LABEL_38;
    }
    a2 += *(void *)(v38 + 72);
    if (v18) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v24 >= v36) {
      goto LABEL_33;
    }
    unint64_t v25 = *(void *)(v37 + 8 * v24);
    if (!v25)
    {
      v19 += 2;
      if (v24 + 1 >= v36)
      {
        unint64_t v18 = 0;
        int64_t v19 = v24;
      }
      else
      {
        unint64_t v25 = *(void *)(v37 + 8 * v19);
        if (v25) {
          goto LABEL_14;
        }
        int64_t v26 = v24 + 2;
        if (v24 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (v25)
        {
LABEL_17:
          int64_t v24 = v26;
          goto LABEL_18;
        }
        int64_t v19 = v24 + 3;
        if (v24 + 3 < v36)
        {
          unint64_t v25 = *(void *)(v37 + 8 * v19);
          if (v25)
          {
LABEL_14:
            int64_t v24 = v19;
            goto LABEL_18;
          }
          int64_t v26 = v24 + 4;
          if (v24 + 4 >= v36)
          {
LABEL_33:
            unint64_t v18 = 0;
            goto LABEL_37;
          }
          unint64_t v25 = *(void *)(v37 + 8 * v26);
          if (!v25)
          {
            while (1)
            {
              int64_t v24 = v26 + 1;
              if (__OFADD__(v26, 1)) {
                goto LABEL_42;
              }
              if (v24 >= v36)
              {
                unint64_t v18 = 0;
                int64_t v19 = v33;
                goto LABEL_37;
              }
              unint64_t v25 = *(void *)(v37 + 8 * v24);
              ++v26;
              if (v25) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v18 = 0;
        int64_t v19 = v24 + 2;
      }
LABEL_37:
      a3 = v20;
LABEL_38:
      uint64_t v16 = v34;
      a1 = v35;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v18 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v24 << 6);
    int64_t v19 = v24;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1C3F696AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v43 = a1;
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
  uint64_t v7 = MEMORY[0x1F4188790](v44);
  uint64_t v47 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v41 - v10;
  uint64_t result = MEMORY[0x1F4188790](v9);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v46 = a3;
  uint64_t v42 = a2;
  if (a3 != a2)
  {
    uint64_t v45 = *(void *)(v13 + 72);
    uint64_t v49 = v45 * v46;
    uint64_t v50 = v45 * (v46 - 1);
    do
    {
      uint64_t v16 = 0;
      uint64_t v48 = v43;
      do
      {
        uint64_t v17 = *a4;
        sub_1C3F970C4(v49 + v16 + *a4, (uint64_t)v15, &qword_1EBBC0798);
        sub_1C3F970C4(v50 + v16 + v17, (uint64_t)v11, &qword_1EBBC0798);
        uint64_t v18 = *(int *)(type metadata accessor for Replica() + 20);
        uint64_t v19 = *(void *)&v15[v18];
        uint64_t v20 = *(void *)&v11[v18];
        if (v19 == v20)
        {
          unint64_t v53 = sub_1C4496658();
          LOWORD(v54) = v21;
          BYTE2(v54) = v22;
          BYTE3(v54) = v23;
          BYTE4(v54) = v24;
          BYTE5(v54) = v25;
          BYTE6(v54) = v26;
          HIBYTE(v54) = v27;
          unint64_t v51 = sub_1C4496658();
          LOWORD(v52) = v28;
          BYTE2(v52) = v29;
          BYTE3(v52) = v30;
          BYTE4(v52) = v31;
          BYTE5(v52) = v32;
          BYTE6(v52) = v33;
          HIBYTE(v52) = v34;
          unint64_t v35 = bswap64(v53);
          unint64_t v36 = bswap64(v51);
          if (v35 == v36 && (unint64_t v35 = bswap64(v54), v36 = bswap64(v52), v35 == v36))
          {
            BOOL v37 = 0;
          }
          else
          {
            if (v35 < v36) {
              unsigned int v38 = -1;
            }
            else {
              unsigned int v38 = 1;
            }
            BOOL v37 = v38 >> 31;
          }
        }
        else
        {
          BOOL v37 = v19 < v20;
        }
        sub_1C3F962E0((uint64_t)v11, &qword_1EBBC0798);
        uint64_t result = sub_1C3F962E0((uint64_t)v15, &qword_1EBBC0798);
        if (!v37) {
          break;
        }
        uint64_t v39 = *a4;
        if (!*a4) {
          __break(1u);
        }
        uint64_t v40 = v39 + v50 + v16;
        sub_1C3F961BC(v39 + v49 + v16, v47, &qword_1EBBC0798);
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = sub_1C3F961BC(v47, v40, &qword_1EBBC0798);
        v16 -= v45;
        ++v48;
      }
      while (v46 != v48);
      v50 += v45;
      v49 += v45;
      ++v46;
    }
    while (v46 != v42);
  }
  return result;
}

void sub_1C3F69CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__emplace_unique_key_args<TopoSubstring const*,std::piecewise_construct_t const&,std::tuple<TopoSubstring const* const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = operator new(0x20uLL);
  *uint64_t v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  char v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t v13 = *v22;
LABEL_38:
    *char v22 = v13;
    goto LABEL_39;
  }
  *uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    unint64_t v23 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    char v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1C3F69F78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1C3F69F8C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, uint64_t))
{
  uint64_t v8 = sub_1C4496678();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint8x8_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C4496628();
  id v12 = a1;
  a5(v11, a4);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1C3F6A0E4(int a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_subsequence;
  swift_beginAccess();
  uint64_t v4 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  uint64_t v5 = (char **)(*(void *)(v3 + v4)
               + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__child);
  swift_beginAccess();
  uint64_t v6 = *v5;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = sub_1C3F6A268(0, *((void *)v6 + 2) + 1, 1, v6);
  }
  unint64_t v8 = *((void *)v6 + 2);
  unint64_t v7 = *((void *)v6 + 3);
  if (v8 >= v7 >> 1) {
    uint64_t v6 = sub_1C3F6A268((char *)(v7 > 1), v8 + 1, 1, v6);
  }
  *((void *)v6 + 2) = v8 + 1;
  *(_DWORD *)&v6[4 * v8 + 32] = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Subsequence._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    uint64_t v10 = sub_1C3F7273C(v9);
    swift_release();
    *(void *)(v3 + v4) = v10;
    swift_release();
  }
  uint8x8_t v11 = (char **)(*(void *)(v3 + v4)
                + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__child);
  swift_beginAccess();
  *uint8x8_t v11 = v6;
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

char *sub_1C3F6A268(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBB2D0);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32]) {
          memmove(v13, a4 + 32, 4 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1C3F6A378(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1C3F6A378(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    char v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3F6A47C(uint64_t a1, unsigned int a2)
{
  unsigned int v25 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (uint64_t *)((char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v12);
  float v16 = (uint64_t *)((char *)&v23 - v15);
  swift_retain();
  uint64_t v24 = sub_1C3FA10C4(a1);
  swift_release();
  uint64_t v17 = v2 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_subsequence;
  swift_beginAccess();
  uint64_t v18 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  uint64_t v19 = *(void *)(v17 + v18)
      + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequenceStartID;
  swift_beginAccess();
  sub_1C3F970C4(v19, (uint64_t)v9, &qword_1EBBC0620);
  size_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v20(v9, 1, v10) == 1)
  {
    *float v16 = 0;
    v16[1] = 0;
    sub_1C4496888();
    sub_1C3F962E0((uint64_t)v9, &qword_1EBBC0620);
  }
  else
  {
    sub_1C3F9E890((uint64_t)v9, (uint64_t)v16, type metadata accessor for Proto_Timestamp);
  }
  *float v16 = v24;
  sub_1C3F6A788((uint64_t)v16);
  uint64_t v21 = *(void *)(v17 + v18)
      + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequenceStartID;
  swift_beginAccess();
  sub_1C3F970C4(v21, (uint64_t)v7, &qword_1EBBC0620);
  if (v20(v7, 1, v10) == 1)
  {
    *uint64_t v14 = 0;
    v14[1] = 0;
    sub_1C4496888();
    sub_1C3F962E0((uint64_t)v7, &qword_1EBBC0620);
  }
  else
  {
    sub_1C3F9E890((uint64_t)v7, (uint64_t)v14, type metadata accessor for Proto_Timestamp);
  }
  v14[1] = v25;
  sub_1C3F6A788((uint64_t)v14);
  return swift_endAccess();
}

uint64_t sub_1C3F6A788(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Subsequence._StorageClass(0);
    swift_allocObject();
    uint64_t v11 = swift_retain();
    uint64_t v12 = sub_1C3F7273C(v11);
    swift_release();
    *(void *)(v2 + v10) = v12;
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v10);
  sub_1C3F92E00(a1, (uint64_t)v9, type metadata accessor for Proto_Timestamp);
  uint64_t v14 = type metadata accessor for Proto_Timestamp(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 0, 1, v14);
  sub_1C3F961BC((uint64_t)v9, (uint64_t)v7, &qword_1EBBC0620);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequenceStartID;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338((uint64_t)v7, v15, &qword_1EBBC0620);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1C3F6AA88()
{
  uint64_t v1 = type metadata accessor for Proto_Subsequence(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = &v19[-v6];
  uint64_t v8 = v0 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_subsequence;
  swift_beginAccess();
  sub_1C3F96414(v8, (uint64_t)v7, type metadata accessor for Proto_Subsequence);
  uint64_t v9 = v0 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence;
  swift_beginAccess();
  uint64_t v10 = *(int *)(type metadata accessor for Proto_Sequence(0) + 20);
  uint64_t v11 = *(void *)(v9 + v10);
  swift_beginAccess();
  unint64_t v12 = *(void *)(v11 + 40);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v12 = sub_1C3F6AD74(0, *(void *)(v12 + 16) + 1, 1, v12);
  }
  unint64_t v14 = *(void *)(v12 + 16);
  unint64_t v13 = *(void *)(v12 + 24);
  if (v14 >= v13 >> 1) {
    unint64_t v12 = sub_1C3F6AD74(v13 > 1, v14 + 1, 1, v12);
  }
  *(void *)(v12 + 16) = v14 + 1;
  sub_1C3F9E890((uint64_t)v7, v12+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v14, type metadata accessor for Proto_Subsequence);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Sequence._StorageClass(0);
    swift_allocObject();
    uint64_t v15 = (void *)swift_retain();
    *(void *)(v9 + v10) = sub_1C3F7C6CC(v15);
    swift_release();
  }
  uint64_t v16 = *(void *)(v9 + v10);
  swift_beginAccess();
  *(void *)(v16 + 40) = v12;
  swift_endAccess();
  swift_bridgeObjectRelease();
  sub_1C4496888();
  uint64_t v17 = *(int *)(v1 + 20);
  if (qword_1EBBBC0C0 != -1) {
    swift_once();
  }
  *(void *)&v5[v17] = qword_1EBBBC0B8;
  swift_beginAccess();
  swift_retain();
  sub_1C3F9EC34((uint64_t)v5, v8);
  return swift_endAccess();
}

uint64_t sub_1C3F6AD74(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C3FA0A88(a1, a2, a3, a4, &qword_1EBBBB2C0, type metadata accessor for Proto_Subsequence, type metadata accessor for Proto_Subsequence);
}

uint64_t *sub_1C3F6ADA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
      uint64_t v7 = *a2;
      unint64_t v6 = a2[1];
      sub_1C3F7E324(v7, v6);
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_12;
    case 6u:
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = *(int *)(type metadata accessor for Proto_Version(0) + 24);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = sub_1C4496898();
      unint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13(v10, v11, v12);
      goto LABEL_12;
    case 7u:
      uint64_t v14 = sub_1C4496898();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
      uint64_t v15 = type metadata accessor for Proto_Reference(0);
      *(uint64_t *)((char *)a1 + *(int *)(v15 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v15 + 20));
      swift_retain();
      goto LABEL_12;
    case 8u:
      uint64_t v16 = sub_1C4496898();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
      uint64_t v17 = type metadata accessor for Proto_Optional(0);
      *(uint64_t *)((char *)a1 + *(int *)(v17 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v17 + 20));
      swift_retain();
      goto LABEL_12;
    case 9u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v18 = *(int *)(type metadata accessor for Proto_Timestamp(0) + 24);
      uint64_t v19 = (char *)a1 + v18;
      size_t v20 = (char *)a2 + v18;
      uint64_t v21 = sub_1C4496898();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
      goto LABEL_12;
    case 0xAu:
      *a1 = *a2;
      uint64_t v22 = *(int *)(type metadata accessor for Proto_RepeatedValue(0) + 20);
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = sub_1C4496898();
      char v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
      swift_bridgeObjectRetain();
      v26(v23, v24, v25);
      goto LABEL_12;
    case 0xBu:
      uint64_t v27 = sub_1C4496898();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v27 - 8) + 16))(a1, a2, v27);
      uint64_t v28 = type metadata accessor for Proto_TaggedValue(0);
      *(uint64_t *)((char *)a1 + *(int *)(v28 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v28 + 20));
      swift_retain();
      goto LABEL_12;
    case 0xCu:
      uint64_t v29 = a2[1];
      *a1 = *a2;
      unint64_t v30 = a2[2];
      sub_1C3F7E324(v29, v30);
      a1[1] = v29;
      a1[2] = v30;
      uint64_t v31 = a2[3];
      unint64_t v32 = a2[4];
      sub_1C3F7E324(v31, v32);
      a1[3] = v31;
      a1[4] = v32;
      uint64_t v33 = *(int *)(type metadata accessor for Proto_Asset(0) + 28);
      char v34 = (char *)a1 + v33;
      unint64_t v35 = (char *)a2 + v33;
      uint64_t v36 = sub_1C4496898();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v34, v35, v36);
      goto LABEL_12;
    case 0xDu:
      uint64_t v37 = a2[1];
      *a1 = *a2;
      a1[1] = v37;
      uint64_t v38 = *(int *)(type metadata accessor for Proto_CustomCRValue(0) + 24);
      uint64_t v39 = (char *)a1 + v38;
      uint64_t v40 = (char *)a2 + v38;
      uint64_t v41 = sub_1C4496898();
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v42(v39, v40, v41);
LABEL_12:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t sub_1C3F6B204(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C3F6B308(v10);
  a4(a3);
  swift_release();
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1C3F6B308(uint64_t a1)
{
  uint64_t v3 = sub_1C4497B38();
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)v12 - v4;
  uint64_t v6 = *v1;
  unint64_t v7 = v1[1];
  v12[0] = *v1;
  v12[1] = v7;
  uint64_t result = (*(uint64_t (**)(char *, char *))(v8 + 16))((char *)v12 - v4, (char *)v1 + *(int *)(a1 + 36));
  uint64_t v10 = *(uint64_t *)((char *)v1 + *(int *)(a1 + 40));
  if (v10)
  {
    type metadata accessor for Capsule.Ref();
    sub_1C3F6C704(v6, v7);
    uint64_t v11 = swift_allocObject();
    swift_retain();
    sub_1C3F6B5F8(v12, (uint64_t)v5, v10);
    return v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C3F6B448@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = (uint64_t)v5;
  v18[0] = a4;
  v18[1] = a5;
  v18[2] = a2;
  uint64_t v19 = a1;
  uint64_t v8 = sub_1C4497B38();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v18 - v10;
  sub_1C3F6C718(a3);
  uint64_t v12 = *v5;
  unint64_t v13 = v5[1];
  v20[0] = *v5;
  v20[1] = v13;
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 16))(v11, (char *)v5 + *(int *)(a3 + 36), v8);
  uint64_t v15 = *(int *)(a3 + 40);
  uint64_t v16 = *(uint64_t *)((char *)v5 + v15);
  if (v16)
  {
    type metadata accessor for Capsule.Ref();
    sub_1C3F6C704(v12, v13);
    uint64_t v17 = swift_allocObject();
    sub_1C3F6B5F8(v20, (uint64_t)v11, v16);
    *(void *)(v6 + v15) = 0;
    v19(v17);
    sub_1C3F6BF88(v6, v17);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for Capsule.Ref()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *sub_1C3F6B5F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  *((_OWORD *)v3 + 1) = xmmword_1C449BDD0;
  uint64_t v9 = (uint64_t)v3 + *(void *)(v6 + 104);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(*(void *)(v6 + 80) - 8) + 56))(v9, 1, 1, *(void *)(v6 + 80));
  uint64_t v10 = v3[2];
  unint64_t v11 = v3[3];
  v3[2] = v7;
  v3[3] = v8;
  sub_1C3F6C6F0(v10, v11);
  swift_beginAccess();
  uint64_t v12 = sub_1C4497B38();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v9, a2, v12);
  swift_endAccess();
  *(uint64_t *)((char *)v3 + *(void *)(*v3 + 112)) = a3;
  return v3;
}

uint64_t Capsule<>.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v43 = a4;
  uint64_t v44 = a1;
  uint64_t v46 = *(void *)(a3 - 8);
  uint64_t v8 = v46;
  MEMORY[0x1F4188790](a1);
  uint64_t v45 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0FA0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v40 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_1C4496678();
  uint64_t v12 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a2;
  uint64_t v41 = a2[1];
  uint64_t v42 = v15;
  *(_OWORD *)a5 = xmmword_1C449BDD0;
  uint64_t v16 = type metadata accessor for Capsule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a5 + *(int *)(v16 + 36), 1, 1, a3);
  uint64_t v17 = *(int *)(v16 + 40);
  *(void *)(a5 + v17) = 0;
  sub_1C3F75BA4((uint64_t)v14);
  type metadata accessor for ReplicaState();
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v18 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  uint64_t v20 = type metadata accessor for Replica();
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  v21(v19, 1, 1, v20);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v14, v39);
  uint64_t v22 = a3;
  *(void *)(v18 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  *(void *)(v18 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
  uint64_t v23 = (uint64_t)v40;
  v21((uint64_t)v40, 1, 1, v20);
  swift_beginAccess();
  uint64_t v24 = v19;
  uint64_t v25 = v44;
  sub_1C3F6722C(v23, v24);
  swift_endAccess();
  uint64_t v26 = sub_1C3F74BE8(v18);
  swift_release();
  *(void *)(a5 + v17) = v26;
  sub_1C3F6C6F0(*(void *)a5, *(void *)(a5 + 8));
  uint64_t v27 = v41;
  *(void *)a5 = v42;
  *(void *)(a5 + 8) = v27;
  uint64_t v28 = (uint64_t)v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v25, v22);
  swift_retain();
  sub_1C3F6BC4C(v28, v22, (uint64_t **)&v49);
  uint64_t v29 = v49;
  uint64_t v30 = MEMORY[0x1E4FBC860];
  unint64_t v31 = sub_1C3F7E4A4(MEMORY[0x1E4FBC860]);
  unint64_t v32 = sub_1C3F7E37C(v30);
  sub_1C3F7E4A4(v30);
  sub_1C3F7E37C(v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = MEMORY[0x1E4FBC868];
  uint64_t result = swift_bridgeObjectRelease_n();
  *(void *)&long long v49 = v29;
  *((void *)&v49 + 1) = 1;
  uint64_t v50 = v33;
  uint64_t v51 = v33;
  unint64_t v52 = v31;
  unint64_t v53 = v32;
  unint64_t v35 = *(void *)(a5 + 8);
  if (v35 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    uint64_t v36 = *(void *)a5;
    sub_1C3F7E324(*(void *)a5, *(void *)(a5 + 8));
    v48[0] = v36;
    v48[1] = v35;
    swift_beginAccess();
    sub_1C3F6C8F4(&v49, v48);
    swift_endAccess();
    swift_release();
    sub_1C3F7E2CC(v36, v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_release();
    unint64_t v37 = *(void *)(a5 + 8);
    if (v37 >> 60 != 15)
    {
      uint64_t v38 = *(void *)a5;
      sub_1C3F7E324(*(void *)a5, *(void *)(a5 + 8));
      swift_beginAccess();
      swift_retain();
      sub_1C3F81BF8(v47, v38, v37);
      swift_endAccess();
      swift_release();
      sub_1C3F7E2CC(v47[0], v47[1]);
      swift_retain();
      sub_1C3F7D128(1, 1);
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v25, v22);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1C3F6BC4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CRDTBoxHelper();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  uint64_t v9 = sub_1C3F6BD4C((uint64_t)v8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v9;
  return result;
}

uint64_t *sub_1C3F6BD4C(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)swift_allocObject();
  uint64_t v3 = sub_1C3F6BD9C(a1, v2);
  swift_release();
  return v3;
}

uint64_t *sub_1C3F6BD9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 264);
  uint64_t v6 = sub_1C4497B38();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t v10 = (uint64_t)a2 + *(void *)(v4 + 280);
  uint64_t v11 = *(void *)(v5 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v10, 1, 1, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v9, a1, v5);
  v12((uint64_t)v9, 0, 1, v5);
  swift_beginAccess();
  uint64_t v13 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 40);
  swift_retain();
  v13(v10, v9, v6);
  swift_endAccess();
  return a2;
}

uint64_t sub_1C3F6BF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C443DB38);
}

uint64_t type metadata accessor for CRDTBoxHelper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C3F6BF88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + *(void *)(*(void *)a2 + 112));
  *(void *)(a1 + *(int *)(type metadata accessor for Capsule() + 40)) = v2;
  swift_retain();
  return swift_release();
}

uint64_t Capsule.Ref<>.root.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  unint64_t v5 = v0[3];
  if (v5 >> 60 == 15) {
    goto LABEL_9;
  }
  uint64_t v6 = v0[2];
  uint64_t v7 = *(uint64_t *)((char *)v0 + *(void *)(v1 + 112)) + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1C3F8F450(v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
  uint64_t v8 = *(void *)&v4[*(int *)(v2 + 20)];
  uint64_t v9 = *(void *)(v8 + 16);
  sub_1C3F7E324(v6, v5);
  if (v9)
  {
    sub_1C3F7E324(v6, v5);
    uint64_t v10 = sub_1C3F850CC(v6, v5);
    if (v11)
    {
      uint64_t v12 = *(void *)(*(void *)(v8 + 56) + 48 * v10);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1C3F6C6F0(v6, v5);
      sub_1C3F8F5D4((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = swift_bridgeObjectRelease();
      if (v12)
      {
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v12 + 88))(v16, v13);
        sub_1C3F6C6F0(v6, v5);
        swift_release();
        return swift_dynamicCast();
      }
      goto LABEL_8;
    }
    sub_1C3F6C6F0(v6, v5);
  }
  sub_1C3F8F5D4((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
  __break(1u);
LABEL_8:
  __break(1u);
LABEL_9:
  uint64_t result = sub_1C4497F58();
  __break(1u);
  return result;
}

void (*Capsule.Ref<>.root.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v4 = malloc(0xD8uLL);
  *a1 = v4;
  v4[19] = v1;
  uint64_t v5 = *v1;
  uint64_t v6 = *(void *)(*v1 + 80);
  v4[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[21] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  uint64_t v9 = v1[2];
  unint64_t v10 = v1[3];
  v4[22] = v8;
  v4[23] = v9;
  v4[24] = v10;
  if (v10 >> 60 == 15) {
    goto LABEL_17;
  }
  uint64_t v11 = *(void *)(v5 + 112);
  v4[25] = v11;
  uint64_t v12 = *(void *)((char *)v1 + v11) + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  uint64_t v13 = *(int *)(type metadata accessor for PartiallyOrderedReferenceMap() + 20);
  sub_1C3F6C704(v9, v10);
  sub_1C3F6C704(v9, v10);
  sub_1C3F6C704(v9, v10);
  sub_1C3F6C704(v9, v10);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v32 = *(void *)(v12 + v13);
  uint64_t v15 = v32;
  *(void *)(v12 + v13) = 0x8000000000000000;
  sub_1C3F7E324(v9, v10);
  unint64_t v17 = sub_1C3F850CC(v9, v10);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v2 = v16;
  if (*(void *)(v15 + 24) >= v20)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v16) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
LABEL_14:
    sub_1C3F85144();
    if (v2) {
      goto LABEL_9;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  sub_1C3F77ABC(v20, isUniquelyReferenced_nonNull_native);
  uint64_t v21 = sub_1C3F850CC(v9, v10);
  if ((v2 & 1) != (v22 & 1))
  {
LABEL_18:
    uint64_t result = (void (*)(uint64_t **, char))sub_1C4498558();
    __break(1u);
    return result;
  }
  unint64_t v17 = v21;
  if ((v2 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_9:
  uint64_t v23 = (long long *)(*(void *)(v32 + 56) + 48 * v17);
  long long v24 = v23[1];
  long long v29 = *v23;
  long long v30 = v24;
  long long v31 = v23[2];
  uint64_t v25 = v29;
  if (!(void)v29)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    sub_1C4497F58();
    __break(1u);
    goto LABEL_18;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    *(void *)&long long v29 = (*(uint64_t (**)(void))(*(void *)v29 + 160))();
    swift_release();
    uint64_t v25 = v29;
  }
  uint64_t v26 = type metadata accessor for CRDTBox();
  v4[26] = v26;
  v4[3] = v26;
  v4[4] = &off_1F1F9CE68;
  *uint64_t v4 = v25;
  swift_retain();
  sub_1C3F84C64((uint64_t *)&v29, 1, &v32, v17, v9, v10);
  sub_1C3F84B88(v29, *((uint64_t *)&v29 + 1), v30);
  sub_1C3F6C6F0(v9, v10);
  *(void *)(v12 + v13) = v32;
  sub_1C3F6C6F0(v9, v10);
  swift_endAccess();
  sub_1C3F6C6F0(v9, v10);
  swift_release();
  uint64_t v27 = sub_1C3F6C6F0(v9, v10);
  (*(void (**)(uint64_t))(*(void *)v25 + 240))(v27);
  swift_dynamicCast();
  return sub_1C3F5E428;
}

uint64_t sub_1C3F6C6F0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1C3F7E2CC(a1, a2);
  }
  return a1;
}

uint64_t sub_1C3F6C704(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1C3F7E324(a1, a2);
  }
  return a1;
}

uint64_t sub_1C3F6C718(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(a1 + 40);
  uint64_t result = swift_isUniquelyReferenced_native();
  if ((result & 1) == 0)
  {
    uint64_t v5 = *(void *)(v1 + v3);
    if (v5)
    {
      if (qword_1EBBC10F0 != -1) {
        swift_once();
      }
      uint64_t v6 = v5 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
      swift_beginAccess();
      uint64_t v7 = *(void *)(v6 + 8);
      v12[0] = MEMORY[0x1E4FBC868];
      v12[1] = v7;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1C3F73AF0((uint64_t)v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v8 = qword_1EBBC00D0;
      swift_retain();
      if (v8 != -1) {
        swift_once();
      }
      type metadata accessor for ReplicaState();
      sub_1C4497A58();
      swift_release();
      uint64_t v9 = v12[0];
      type metadata accessor for CapsuleRef();
      swift_allocObject();
      uint64_t v10 = swift_retain();
      uint64_t v11 = sub_1C3F73C60(v10, v9);
      swift_release();
      *(void *)(v2 + v3) = v11;
      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t type metadata accessor for CRDTBox()
{
  return self;
}

void sub_1C3F6C8F4(long long *a1, uint64_t *a2)
{
  long long v3 = a1[1];
  long long v12 = *a1;
  long long v13 = v3;
  long long v14 = a1[2];
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v6 = *(int *)(type metadata accessor for PartiallyOrderedReferenceMap() + 20);
  sub_1C3F7E324(v4, v5);
  sub_1C3F6CB9C((uint64_t)&v12);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *(void *)(v2 + v6);
  *(void *)(v2 + v6) = 0x8000000000000000;
  sub_1C3F6CA08(&v12, v4, v5, isUniquelyReferenced_nonNull_native);
  *(void *)(v2 + v6) = v10;
  swift_bridgeObjectRelease();
  sub_1C3F7E2CC(v4, v5);
  long long v8 = v13;
  if (*(void *)(*((void *)&v13 + 1) + 16))
  {
    sub_1C3F7E324(v4, v5);
    sub_1C3F81BF8(&v10, v4, v5);
    sub_1C3F7E2CC(v10, v11);
  }
  uint64_t v10 = v4;
  unint64_t v11 = v5;
  long long v9 = v8;
  sub_1C3F817F8(&v10, (uint64_t *)&v9);
}

uint64_t sub_1C3F6CA08(long long *a1, uint64_t a2, unint64_t a3, char a4)
{
  unint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1C3F850CC(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_18;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1C3F85144();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 48 * v12;
      return sub_1C4423324((uint64_t)a1, v19);
    }
    goto LABEL_13;
  }
  sub_1C3F77ABC(v15, a4 & 1);
  uint64_t v21 = sub_1C3F850CC(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_19:
    uint64_t result = sub_1C4498558();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_13:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  long long v24 = (_OWORD *)(v18[7] + 48 * v12);
  long long v25 = *a1;
  long long v26 = a1[2];
  v24[1] = a1[1];
  v24[2] = v26;
  *long long v24 = v25;
  uint64_t v27 = v18[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v18[2] = v29;
  return sub_1C3F7E324(a2, a3);
}

uint64_t sub_1C3F6CB9C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1C3F6CC00@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 264);
  uint64_t v5 = sub_1C4497B38();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  long long v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  char v11 = &v16[-v10];
  uint64_t v12 = (uint64_t)v1 + *(void *)(v3 + 280);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v11, v12, v5);
  uint64_t v13 = *(void *)(v4 - 8);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v4);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    a1[3] = v4;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
    (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v13 + 32))(boxed_opaque_existential_1, v11, v4);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v4);
    swift_beginAccess();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v6 + 40))(v12, v9, v5);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1C3F6CE18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 264);
  uint64_t v5 = sub_1C4497B38();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v13 - v7;
  uint64_t v9 = (uint64_t)v1 + *(void *)(v3 + 280);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  uint64_t v10 = *(void *)(v4 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v4);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    a1[3] = v4;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v10 + 32))(boxed_opaque_existential_1, v8, v4);
  }
  return result;
}

uint64_t sub_1C3F6CFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F6CFC4(a1, a2, a3);
}

uint64_t sub_1C3F6CFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(type metadata accessor for Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v12 = *(void *)(v3 + v11);
    type metadata accessor for Proto_Value._StorageClass(0);
    uint64_t v13 = swift_allocObject();
    uint64_t v25 = v4;
    uint64_t v14 = v13;
    uint64_t v24 = a1;
    uint64_t v15 = a2;
    uint64_t v16 = a3;
    uint64_t v17 = v13 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    uint64_t v18 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
    uint64_t v19 = v12 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1C3F970C4(v19, (uint64_t)v10, &qword_1EBBBF8A0);
    swift_beginAccess();
    uint64_t v20 = v17;
    a3 = v16;
    a2 = v15;
    a1 = v24;
    sub_1C3F98338((uint64_t)v10, v20, &qword_1EBBBF8A0);
    swift_endAccess();
    *(void *)(v3 + v11) = v14;
    swift_release();
  }
  uint64_t v21 = swift_retain();
  sub_1C3F92EA8(v21, a1, a2, a3);
  return swift_release();
}

uint64_t type metadata accessor for Proto_Value._StorageClass(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBF8D0);
}

uint64_t sub_1C3F6D1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3F6D260(a1, a2, a3, a4, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB558]);
}

uint64_t CRValueStruct.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1C3F6DD10();
  if (!v4)
  {
    uint64_t v8 = *(void *)(a3 + 16);
    uint64_t v9 = *(void *)(a3 + 24);
    swift_retain();
    sub_1C3F6DFF8(v3, a2, v8, v9);
    return swift_release();
  }
  return result;
}

uint64_t sub_1C3F6D260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v8 = a1;
  return sub_1C3F6D298(&v8, a2, *v6, *(void *)(a3 + 16), a5, *(void *)(a3 + 24), a6);
}

uint64_t sub_1C3F6D298(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v75 = a7;
  uint64_t v80 = a3;
  uint64_t v72 = type metadata accessor for Proto_Value(0);
  uint64_t v74 = *(void *)(v72 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v72);
  uint64_t v76 = (uint64_t)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (uint64_t)&v69 - v14;
  uint64_t v16 = *(void *)(a5 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v13);
  uint64_t v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v69 - v20;
  uint64_t v22 = sub_1C44986B8();
  if (v23) {
    goto LABEL_47;
  }
  uint64_t v24 = (void *)v22;
  if (v22 < 0)
  {
    (*(void (**)(char *, void *, unint64_t))(v16 + 16))(v19, a1, a5);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBBBCB8);
    if (swift_dynamicCast())
    {
      uint64_t v15 = 0;
      uint64_t v25 = v79[0];
      uint64_t v33 = *(void *)(v79[0] + 64);
      uint64_t v69 = v79[0] + 64;
      uint64_t v34 = 1 << *(unsigned char *)(v79[0] + 32);
      uint64_t v35 = -1;
      if (v34 < 64) {
        uint64_t v35 = ~(-1 << v34);
      }
      a5 = v35 & v33;
      int64_t v70 = (unint64_t)(v34 + 63) >> 6;
      uint64_t v71 = v79[0];
      uint64_t v36 = v73;
      if ((v35 & v33) == 0) {
        goto LABEL_14;
      }
LABEL_13:
      unint64_t v37 = __clz(__rbit64(a5));
      uint64_t v38 = (a5 - 1) & a5;
      for (unint64_t i = v37 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v41)) + (v15 << 6))
      {
        uint64_t v43 = 8 * i;
        uint64_t v44 = *(void *)(*(void *)(v25 + 48) + v43);
        if (v44 < 0) {
          goto LABEL_60;
        }
        uint64_t v24 = *(void **)(*(void *)(v25 + 56) + v43);
        a1 = (void *)(v80 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value);
        swift_beginAccess();
        uint64_t v45 = (void *)*a1;
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a1 = v45;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v45 = sub_1C3FA1854(0, v45[2] + 1, 1, v45);
          *a1 = v45;
        }
        unint64_t v48 = v45[2];
        unint64_t v47 = v45[3];
        unint64_t v75 = v38;
        if (v48 >= v47 >> 1)
        {
          uint64_t v45 = sub_1C3FA1854((void *)(v47 > 1), v48 + 1, 1, v45);
          *a1 = v45;
        }
        v45[2] = v48 + 1;
        v45[v48 + 4] = v44;
        swift_endAccess();
        uint64_t v49 = v80;
        uint64_t v50 = *(void *)(v80 + 16);
        uint64_t v52 = *(void *)(v50 + 80);
        uint64_t v51 = *(void *)(v50 + 88);
        *(void *)(v50 + 80) = 0;
        *(void *)(v50 + 88) = 0;
        swift_retain();
        swift_release();
        (*(void (**)(void))(*v24 + 152))(*(void *)(v49 + 16));
        if (v36) {
          goto LABEL_53;
        }
        if (*(void *)(v50 + 88))
        {
          sub_1C3FE3FF0();
          swift_allocError();
          *(void *)uint64_t v64 = 0xD00000000000003DLL;
          *(void *)(v64 + 8) = 0x80000001C44B1780;
          *(unsigned char *)(v64 + 16) = 3;
          swift_willThrow();
LABEL_53:
          swift_release();
          swift_release();
          swift_release();
          return swift_release();
        }
        uint64_t v53 = *(void *)(v50 + 80);
        if (!v53)
        {
          uint64_t v73 = 0;
          type metadata accessor for CREncoder.CRValueContainer(0);
          uint64_t v54 = swift_allocObject();
          uint64_t v55 = v54 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
          swift_retain();
          sub_1C4496888();
          uint64_t v56 = *(int *)(v72 + 20);
          if (qword_1EBBBF8C8 != -1) {
            swift_once();
          }
          *(void *)(v55 + v56) = qword_1EBBBF8B8;
          *(void *)(v54 + 16) = v50;
          *(void *)(v50 + 80) = v54;
          swift_retain();
          swift_release();
          uint64_t v53 = *(void *)(v50 + 80);
          uint64_t v36 = v73;
          if (!v53)
          {
            __break(1u);
LABEL_60:
            uint64_t result = sub_1C4497F48();
            __break(1u);
            return result;
          }
        }
        uint64_t v57 = v53 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
        swift_beginAccess();
        sub_1C3F8B348(v57, v76, type metadata accessor for Proto_Value);
        *(void *)(v50 + 80) = v52;
        swift_retain();
        swift_release();
        *(void *)(v50 + 88) = v51;
        swift_release();
        swift_release();
        swift_beginAccess();
        a6 = a1[1];
        char v58 = swift_isUniquelyReferenced_nonNull_native();
        a1[1] = a6;
        if ((v58 & 1) == 0)
        {
          a6 = sub_1C3F6DE60(0, *(void *)(a6 + 16) + 1, 1, a6);
          a1[1] = a6;
        }
        uint64_t v25 = v71;
        a5 = v75;
        a4 = *(void *)(a6 + 16);
        unint64_t v59 = *(void *)(a6 + 24);
        if (a4 >= v59 >> 1)
        {
          a6 = sub_1C3F6DE60(v59 > 1, a4 + 1, 1, a6);
          a1[1] = a6;
        }
        *(void *)(a6 + 16) = a4 + 1;
        sub_1C3F6E654(v76, a6+ ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(void *)(v74 + 72) * a4);
        swift_endAccess();
        swift_release();
        if (a5) {
          goto LABEL_13;
        }
LABEL_14:
        if (__OFADD__(v15++, 1))
        {
          __break(1u);
          goto LABEL_56;
        }
        if (v15 >= v70) {
          return swift_release();
        }
        unint64_t v41 = *(void *)(v69 + 8 * v15);
        if (!v41)
        {
          uint64_t v42 = v15 + 1;
          if (v15 + 1 >= v70) {
            return swift_release();
          }
          unint64_t v41 = *(void *)(v69 + 8 * v42);
          if (!v41)
          {
            uint64_t v42 = v15 + 2;
            if (v15 + 2 >= v70) {
              return swift_release();
            }
            unint64_t v41 = *(void *)(v69 + 8 * v42);
            if (!v41)
            {
              uint64_t v42 = v15 + 3;
              if (v15 + 3 >= v70) {
                return swift_release();
              }
              unint64_t v41 = *(void *)(v69 + 8 * v42);
              if (!v41)
              {
                while (1)
                {
                  uint64_t v15 = v42 + 1;
                  if (__OFADD__(v42, 1)) {
                    break;
                  }
                  if (v15 >= v70) {
                    return swift_release();
                  }
                  unint64_t v41 = *(void *)(v69 + 8 * v15);
                  ++v42;
                  if (v41) {
                    goto LABEL_24;
                  }
                }
                __break(1u);
LABEL_58:
                uint64_t v24 = (void *)sub_1C3F6DE60(0, v24[2] + 1, 1, (unint64_t)v24);
                *(void *)(v25 + 8) = v24;
LABEL_49:
                unint64_t v63 = v24[2];
                unint64_t v62 = v24[3];
                if (v63 >= v62 >> 1)
                {
                  uint64_t v24 = (void *)sub_1C3F6DE60(v62 > 1, v63 + 1, 1, (unint64_t)v24);
                  *(void *)(v25 + 8) = v24;
                }
                v24[2] = v63 + 1;
                sub_1C3F6E654(v15, (uint64_t)v24+ ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(void *)(v74 + 72) * v63);
                swift_endAccess();
                return __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
              }
            }
          }
          uint64_t v15 = v42;
        }
LABEL_24:
        uint64_t v38 = (v41 - 1) & v41;
      }
    }
LABEL_47:
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v60 = xmmword_1C44A18C0;
    *(unsigned char *)(v60 + 16) = 4;
    return swift_willThrow();
  }
  (*(void (**)(char *, void *, unint64_t))(v16 + 16))(v21, a1, a5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
  if (!swift_dynamicCast())
  {
    uint64_t v78 = 0;
    memset(v77, 0, sizeof(v77));
    sub_1C3F962E0((uint64_t)v77, qword_1EA39DBE0);
    goto LABEL_47;
  }
  sub_1C3F6DE94(v77, (uint64_t)v79);
  uint64_t v25 = v80 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value;
  swift_beginAccess();
  a1 = *(void **)v25;
  char v26 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v25 = a1;
  if ((v26 & 1) == 0)
  {
LABEL_56:
    a1 = sub_1C3FA1854(0, a1[2] + 1, 1, a1);
    *(void *)uint64_t v25 = a1;
  }
  unint64_t v28 = a1[2];
  unint64_t v27 = a1[3];
  if (v28 >= v27 >> 1)
  {
    a1 = sub_1C3FA1854((void *)(v27 > 1), v28 + 1, 1, a1);
    *(void *)uint64_t v25 = a1;
  }
  a1[2] = v28 + 1;
  a1[v28 + 4] = v24;
  uint64_t v29 = swift_endAccess();
  MEMORY[0x1F4188790](v29);
  *(&v69 - 6) = a4;
  *(&v69 - 5) = a5;
  unint64_t v65 = a6;
  unint64_t v66 = v75;
  uint64_t v67 = v79;
  uint64_t v68 = v30;
  uint64_t v31 = v73;
  sub_1C3F6DC00((void (*)(uint64_t))sub_1C3F6DEAC, v15);
  if (!v31)
  {
    swift_beginAccess();
    uint64_t v24 = *(void **)(v25 + 8);
    char v61 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v25 + 8) = v24;
    if ((v61 & 1) == 0) {
      goto LABEL_58;
    }
    goto LABEL_49;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
}

uint64_t sub_1C3F6DC00@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v8 = *(void *)(v2 + 80);
  uint64_t v7 = *(void *)(v2 + 88);
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0;
  swift_retain();
  uint64_t v9 = swift_release();
  a1(v9);
  if (!v3)
  {
    uint64_t v11 = sub_1C3F6DD10() + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
    swift_beginAccess();
    sub_1C3FA1CCC(v11, a2, type metadata accessor for Proto_Value);
    *(void *)(v4 + 80) = v8;
    swift_retain();
    swift_release();
    *(void *)(v4 + 88) = v7;
  }
  swift_release();
  return swift_release();
}

uint64_t sub_1C3F6DD10()
{
  if (*(void *)(v0 + 88))
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v1 = 0xD00000000000003DLL;
    *(void *)(v1 + 8) = 0x80000001C44B1780;
    *(unsigned char *)(v1 + 16) = 3;
    return swift_willThrow();
  }
  else
  {
    uint64_t result = *(void *)(v0 + 80);
    if (!result)
    {
      type metadata accessor for CREncoder.CRValueContainer(0);
      uint64_t v3 = swift_allocObject();
      uint64_t v4 = v3 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
      swift_retain();
      sub_1C4496888();
      uint64_t v5 = *(int *)(type metadata accessor for Proto_Value(0) + 20);
      if (qword_1EBBBF8C8 != -1)
      {
        uint64_t v6 = v5;
        swift_once();
        uint64_t v5 = v6;
      }
      *(void *)(v4 + v5) = qword_1EBBBF8B8;
      *(void *)(v3 + 16) = v0;
      *(void *)(v0 + 80) = v3;
      swift_retain();
      swift_release();
      uint64_t result = *(void *)(v0 + 80);
      if (!result) {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for CREncoder.CRValueContainer(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBC670);
}

uint64_t sub_1C3F6DE60(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C3FA0A88(a1, a2, a3, a4, &qword_1EBBBC680, type metadata accessor for Proto_Value, type metadata accessor for Proto_Value);
}

uint64_t sub_1C3F6DE94(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1C3F6DEAC()
{
  uint64_t v1 = *(void **)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(v4 + 16))(*(void *)(v2 + 16), v3, v4);
}

uint64_t sub_1C3F6DF14(uint64_t a1)
{
  return Int.encode(to:)(a1, *v1);
}

uint64_t Int.encode(to:)(uint64_t a1, uint64_t a2)
{
  return sub_1C3F6DF48(a1, a2);
}

uint64_t sub_1C3F6DF48(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1C3F6DD10();
  if (!v2)
  {
    if (*(unsigned char *)(*(void *)(result + 16) + 72) == 1)
    {
      swift_beginAccess();
      swift_retain();
      sub_1C43EEEE0(a2);
    }
    else
    {
      swift_beginAccess();
      swift_retain();
      sub_1C3F700C4(a2);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1C3F6DFF8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v60 = a2;
  uint64_t v64 = a4;
  unint64_t v59 = a1;
  uint64_t v5 = type metadata accessor for Proto_CustomCRValue(0);
  MEMORY[0x1F4188790](v5);
  char v58 = (char *)v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Proto_Value(0);
  uint64_t v55 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC690);
  uint64_t v56 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (void *)((char *)v53 - v14);
  uint64_t v57 = v4;
  uint64_t v16 = *(void *)(v4 + 16);
  uint64_t v17 = type metadata accessor for CRStructEncoder();
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = (void *)(v18 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value);
  uint64_t v20 = MEMORY[0x1E4FBC860];
  *uint64_t v19 = MEMORY[0x1E4FBC860];
  v19[1] = v20;
  swift_retain();
  sub_1C4496888();
  *(void *)(v18 + 16) = v16;
  v63[3] = v17;
  v63[4] = sub_1C3F6FC88();
  v63[0] = v18;
  swift_retain();
  uint64_t v21 = v61;
  sub_1C4497068();
  if (v21)
  {
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
  }
  else
  {
    uint64_t v23 = (uint64_t)v58;
    char v61 = (uint64_t *)v13;
    uint64_t v64 = v10;
    unint64_t v59 = v9;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    uint64_t v24 = (void *)(v18 + OBJC_IVAR____TtC9Coherence15CRStructEncoder_value);
    swift_beginAccess();
    uint64_t v25 = (void *)*v24;
    if (*(void *)(*v24 + 16))
    {
      uint64_t v26 = v24[1];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v27 = (void *)sub_1C3F6E780((uint64_t)v25, v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v62 = v27;
      sub_1C3F6EEDC(&v62);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v28 = v62;
      int64_t v29 = v62[2];
      uint64_t v30 = v56;
      if (v29)
      {
        v53[3] = v18;
        uint64_t v54 = v24;
        v53[2] = 0;
        unint64_t v62 = (void *)MEMORY[0x1E4FBC860];
        sub_1C3F6ECAC(0, v29, 0);
        uint64_t v31 = *(unsigned __int8 *)(v30 + 80);
        v53[1] = v28;
        uint64_t v32 = (uint64_t)v28 + ((v31 + 32) & ~v31);
        uint64_t v60 = *(void *)(v30 + 72);
        uint64_t v33 = v62;
        uint64_t v34 = v32;
        int64_t v35 = v29;
        do
        {
          sub_1C3F6E6B8(v34, (uint64_t)v15);
          uint64_t v36 = *(int *)(v64 + 48);
          unint64_t v37 = v61;
          uint64_t v38 = (uint64_t)v61 + v36;
          uint64_t v39 = *v15;
          uint64_t *v61 = *v15;
          sub_1C3F8B348((uint64_t)v15 + v36, (uint64_t)v37 + v36, type metadata accessor for Proto_Value);
          sub_1C3F6E720(v38, type metadata accessor for Proto_Value);
          sub_1C3F962E0((uint64_t)v15, &qword_1EBBBC690);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1C3F6ECAC(0, v33[2] + 1, 1);
            uint64_t v33 = v62;
          }
          unint64_t v41 = v33[2];
          unint64_t v40 = v33[3];
          if (v41 >= v40 >> 1)
          {
            sub_1C3F6ECAC(v40 > 1, v41 + 1, 1);
            uint64_t v33 = v62;
          }
          v33[2] = v41 + 1;
          v33[v41 + 4] = v39;
          v34 += v60;
          --v35;
        }
        while (v35);
        *uint64_t v54 = v33;
        swift_bridgeObjectRelease();
        unint64_t v62 = (void *)MEMORY[0x1E4FBC860];
        sub_1C3F6EE30(0, v29, 0);
        uint64_t v42 = v62;
        uint64_t v43 = v55;
        uint64_t v44 = (uint64_t)v59;
        do
        {
          sub_1C3F6E6B8(v32, (uint64_t)v15);
          uint64_t v45 = *(int *)(v64 + 48);
          uint64_t v46 = (uint64_t)v61 + v45;
          sub_1C3F8B348((uint64_t)v15 + v45, (uint64_t)v61 + v45, type metadata accessor for Proto_Value);
          sub_1C3F6E654(v46, v44);
          sub_1C3F962E0((uint64_t)v15, &qword_1EBBBC690);
          uint64_t v47 = v44;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1C3F6EE30(0, v42[2] + 1, 1);
            uint64_t v42 = v62;
          }
          unint64_t v49 = v42[2];
          unint64_t v48 = v42[3];
          if (v49 >= v48 >> 1)
          {
            sub_1C3F6EE30(v48 > 1, v49 + 1, 1);
            uint64_t v42 = v62;
          }
          v42[2] = v49 + 1;
          sub_1C3F6E654(v47, (uint64_t)v42+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(void *)(v43 + 72) * v49);
          v32 += v60;
          --v29;
          uint64_t v44 = v47;
        }
        while (v29);
        swift_release();
        uint64_t v24 = v54;
      }
      else
      {
        uint64_t v42 = (void *)MEMORY[0x1E4FBC860];
        *uint64_t v24 = MEMORY[0x1E4FBC860];
        swift_release();
        swift_bridgeObjectRelease();
      }
      v24[1] = v42;
      swift_bridgeObjectRelease();
      uint64_t v25 = (void *)*v24;
      unint64_t v50 = *(void *)(*v24 + 16);
      uint64_t v23 = (uint64_t)v58;
    }
    else
    {
      unint64_t v50 = 0;
    }
    uint64_t v51 = sub_1C3F8B454(0, v50);
    BOOL v52 = sub_1C3F6EED8(v25, v51);
    swift_release();
    if (v52)
    {
      *uint64_t v24 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRelease();
    }
    sub_1C3F8B348((uint64_t)v24, v23, type metadata accessor for Proto_CustomCRValue);
    swift_beginAccess();
    sub_1C3F6FE54(v23);
    return swift_release();
  }
}

uint64_t sub_1C3F6E654(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3F6E6B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3F6E720(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

size_t sub_1C3F6E780(uint64_t a1, uint64_t a2)
{
  uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC690);
  uint64_t v4 = *(void *)(v69 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v69);
  uint64_t v7 = (uint64_t *)((char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  unint64_t v65 = (uint64_t *)((char *)&v58 - v9);
  MEMORY[0x1F4188790](v8);
  uint64_t v66 = (uint64_t)&v58 - v10;
  unint64_t v12 = *(void *)(a2 + 16);
  unint64_t v67 = *(void *)(a1 + 16);
  unint64_t v11 = v67;
  unint64_t v68 = v12;
  if (v12 >= v67) {
    uint64_t v13 = v67;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v61 = v4;
  uint64_t v62 = a2;
  if (v13)
  {
    uint64_t v64 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC688);
    uint64_t v14 = *(void *)(v4 + 72);
    uint64_t v15 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v16 = (v15 + 32) & ~v15;
    uint64_t v17 = (void *)swift_allocObject();
    size_t result = _swift_stdlib_malloc_size(v17);
    if (!v14)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    if (result - v16 == 0x8000000000000000 && v14 == -1) {
      goto LABEL_59;
    }
    uint64_t v20 = (uint64_t)(result - v16) / v14;
    v17[2] = v13;
    v17[3] = 2 * v20;
    uint64_t v63 = (v15 + 32) & ~v15;
    uint64_t v21 = (uint64_t)v17 + v16;
    uint64_t v59 = v20 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v60 = v15;
    uint64_t v22 = v64 + 32;
    uint64_t v23 = type metadata accessor for Proto_Value(0);
    uint64_t v24 = 0;
    uint64_t v25 = *(void *)(v23 - 8);
    size_t result = v23 - 8;
    uint64_t v26 = v25;
    uint64_t v27 = a2 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
    while (v67 != v24)
    {
      if (v68 == v24) {
        goto LABEL_51;
      }
      uint64_t v28 = v24 + 1;
      uint64_t v29 = v27 + *(void *)(v26 + 72) * v24;
      uint64_t v30 = (uint64_t)v7 + *(int *)(v69 + 48);
      *uint64_t v7 = *(void *)(v22 + 8 * v24);
      sub_1C3F8F4B8(v29, v30, type metadata accessor for Proto_Value);
      size_t result = sub_1C3F961BC((uint64_t)v7, v21, &qword_1EBBBC690);
      v21 += v14;
      uint64_t v24 = v28;
      if (v13 == v28)
      {
        a1 = v64;
        swift_bridgeObjectRetain();
        a2 = v62;
        size_t result = swift_bridgeObjectRetain();
        uint64_t v31 = v60;
        unint64_t v32 = v59 - v28;
        uint64_t v4 = v61;
        unint64_t v11 = v67;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v17 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v31 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v33 = *(void *)(MEMORY[0x1E4FBC860] + 24);
  uint64_t v63 = (v31 + 32) & ~v31;
  uint64_t v21 = MEMORY[0x1E4FBC860] + v63;
  unint64_t v32 = v33 >> 1;
  swift_bridgeObjectRetain();
  size_t result = swift_bridgeObjectRetain();
LABEL_16:
  unint64_t v34 = v68;
  if (v11 > v68)
  {
    uint64_t v64 = a1 + 32;
    uint64_t v60 = v31 | 7;
    if (v13 <= (uint64_t)v68) {
      unint64_t v35 = v68;
    }
    else {
      unint64_t v35 = v13;
    }
    while (v11 != v13)
    {
      if (v34 == v13) {
        goto LABEL_45;
      }
      if (v35 == v13) {
        goto LABEL_53;
      }
      uint64_t v38 = *(void *)(v64 + 8 * v13);
      uint64_t v39 = *(void *)(type metadata accessor for Proto_Value(0) - 8);
      uint64_t v40 = a2
          + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))
          + *(void *)(v39 + 72) * v13;
      uint64_t v41 = (uint64_t)v65;
      uint64_t v42 = (uint64_t)v65 + *(int *)(v69 + 48);
      *unint64_t v65 = v38;
      sub_1C3F8F4B8(v40, v42, type metadata accessor for Proto_Value);
      size_t result = sub_1C3F961BC(v41, v66, &qword_1EBBBC690);
      if (v32)
      {
        uint64_t v36 = v17;
        unint64_t v11 = v67;
        BOOL v37 = __OFSUB__(v32--, 1);
        if (v37) {
          goto LABEL_44;
        }
      }
      else
      {
        unint64_t v43 = v17[3];
        if ((uint64_t)((v43 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_54;
        }
        int64_t v44 = v43 & 0xFFFFFFFFFFFFFFFELL;
        if (v44 <= 1) {
          uint64_t v45 = 1;
        }
        else {
          uint64_t v45 = v44;
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC688);
        uint64_t v46 = *(void *)(v4 + 72);
        uint64_t v47 = v63;
        uint64_t v36 = (void *)swift_allocObject();
        size_t result = _swift_stdlib_malloc_size(v36);
        if (!v46) {
          goto LABEL_55;
        }
        int64_t v48 = result - v47;
        if (result - v47 == 0x8000000000000000 && v46 == -1) {
          goto LABEL_56;
        }
        uint64_t v50 = v48 / v46;
        v36[2] = v45;
        v36[3] = 2 * (v48 / v46);
        uint64_t v51 = (char *)v36 + v47;
        uint64_t v52 = v17[3] >> 1;
        uint64_t v53 = v52 * v46;
        unint64_t v11 = v67;
        if (v17[2])
        {
          if (v36 < v17 || v51 >= (char *)v17 + v63 + v53)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v36 != v17)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v17[2] = 0;
        }
        uint64_t v21 = (uint64_t)&v51[v53];
        uint64_t v54 = (v50 & 0x7FFFFFFFFFFFFFFFLL) - v52;
        swift_release();
        uint64_t v4 = v61;
        a2 = v62;
        BOOL v37 = __OFSUB__(v54, 1);
        unint64_t v32 = v54 - 1;
        if (v37)
        {
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
      }
      ++v13;
      size_t result = sub_1C3F961BC(v66, v21, &qword_1EBBBC690);
      v21 += *(void *)(v4 + 72);
      uint64_t v17 = v36;
      unint64_t v34 = v68;
      if (v11 == v13) {
        goto LABEL_46;
      }
    }
    goto LABEL_52;
  }
LABEL_45:
  uint64_t v36 = v17;
LABEL_46:
  swift_bridgeObjectRelease();
  size_t result = swift_bridgeObjectRelease();
  unint64_t v55 = v36[3];
  if (v55 < 2) {
    return (size_t)v36;
  }
  unint64_t v56 = v55 >> 1;
  BOOL v37 = __OFSUB__(v56, v32);
  unint64_t v57 = v56 - v32;
  if (!v37)
  {
    v36[2] = v57;
    return (size_t)v36;
  }
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_1C3F6ECAC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C3F6ECD4(a1, a2, a3, *v3, &qword_1EBBC00F8);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1C3F6ECD4(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    unint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3F6EE30(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C3FB5970(a1, a2, a3, (void *)*v3, &qword_1EBBBC680, type metadata accessor for Proto_Value);
  *uint64_t v3 = result;
  return result;
}

BOOL sub_1C3F6EE6C(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  uint64_t v3 = a1 + 5;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_1C3F6EEDC(void **a1)
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC690) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_1C411E8F8(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  uint64_t result = sub_1C3F6EF88(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1C3F6EF88(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC690);
  uint64_t v4 = *(void *)(v132 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v132);
  uint64_t v128 = (uint64_t)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v138 = (uint64_t)&v122 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unint64_t v135 = (unint64_t *)((char *)&v122 - v10);
  MEMORY[0x1F4188790](v9);
  uint64_t v134 = (unint64_t *)((char *)&v122 - v11);
  uint64_t v12 = a1[1];
  uint64_t result = sub_1C4498068();
  if (result >= v12)
  {
    if (v12 < 0) {
      goto LABEL_141;
    }
    if (v12) {
      return sub_1C3F6F9AC(0, v12, 1, a1);
    }
    return result;
  }
  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_149;
  }
  uint64_t v131 = v4;
  uint64_t v124 = result;
  if (v12 < 2)
  {
    uint64_t v18 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v130 = MEMORY[0x1E4FBC860]
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v123 = MEMORY[0x1E4FBC860];
    if (v12 != 1)
    {
      unint64_t v20 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_107:
      if (v20 >= 2)
      {
        uint64_t v116 = *a1;
        do
        {
          unint64_t v117 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_136;
          }
          if (!v116) {
            goto LABEL_148;
          }
          uint64_t v118 = *(void *)&v18[16 * v117 + 32];
          uint64_t v119 = *(void *)&v18[16 * v20 + 24];
          sub_1C411DDE0(v116 + *(void *)(v131 + 72) * v118, v116 + *(void *)(v131 + 72) * *(void *)&v18[16 * v20 + 16], v116 + *(void *)(v131 + 72) * v119, v130);
          if (v2) {
            break;
          }
          if (v119 < v118) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v18 = sub_1C411E87C((uint64_t)v18);
          }
          if (v117 >= *((void *)v18 + 2)) {
            goto LABEL_138;
          }
          char v120 = &v18[16 * v117 + 32];
          *(void *)char v120 = v118;
          *((void *)v120 + 1) = v119;
          unint64_t v121 = *((void *)v18 + 2);
          if (v20 > v121) {
            goto LABEL_139;
          }
          memmove(&v18[16 * v20 + 16], &v18[16 * v20 + 32], 16 * (v121 - v20));
          *((void *)v18 + 2) = v121 - 1;
          unint64_t v20 = v121 - 1;
        }
        while (v121 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      *(void *)(v123 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v15 = v14 >> 1;
    uint64_t v16 = sub_1C4497488();
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v123 = v16;
    unint64_t v130 = v16 + ((v17 + 32) & ~v17);
  }
  unint64_t v19 = 0;
  uint64_t v18 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v137 = a1;
  while (1)
  {
    unsigned int v126 = v18;
    uint64_t v21 = v19;
    int64_t v22 = v19 + 1;
    unint64_t v129 = v19;
    if ((uint64_t)(v19 + 1) >= v12)
    {
      uint64_t v18 = v126;
      goto LABEL_58;
    }
    uint64_t v23 = *a1;
    unint64_t v24 = *(void *)(v131 + 72);
    uint64_t v25 = *a1 + v24 * v22;
    uint64_t v139 = v12;
    uint64_t v26 = v134;
    sub_1C3F970C4(v25, (uint64_t)v134, &qword_1EBBBC690);
    uint64_t v27 = v135;
    sub_1C3F970C4(v23 + v24 * v21, (uint64_t)v135, &qword_1EBBBC690);
    unint64_t v136 = *v26;
    unint64_t v133 = *v27;
    sub_1C3F962E0((uint64_t)v27, &qword_1EBBBC690);
    uint64_t v28 = (uint64_t)v26;
    uint64_t v29 = v139;
    sub_1C3F962E0(v28, &qword_1EBBBC690);
    int64_t v127 = v23;
    unint64_t v140 = v24;
    if (v21 + 2 >= v29)
    {
      uint64_t v32 = v21 + 2;
    }
    else
    {
      uint64_t v125 = v2;
      uint64_t v30 = v24 * v22;
      uint64_t v31 = v23;
      uint64_t v32 = v21 + 2;
      uint64_t v33 = v24 * (v21 + 2);
      while (1)
      {
        unint64_t v34 = v134;
        int v35 = v136 < v133;
        sub_1C3F970C4(v31 + v33, (uint64_t)v134, &qword_1EBBBC690);
        uint64_t v36 = v135;
        sub_1C3F970C4(v31 + v30, (uint64_t)v135, &qword_1EBBBC690);
        int v37 = *v34 >= *v36;
        sub_1C3F962E0((uint64_t)v36, &qword_1EBBBC690);
        sub_1C3F962E0((uint64_t)v34, &qword_1EBBBC690);
        if (v35 == v37) {
          break;
        }
        v31 += v140;
        if (v139 == ++v32)
        {
          uint64_t v29 = v139;
          uint64_t v32 = v139;
          a1 = v137;
          uint64_t v2 = v125;
          uint64_t v21 = v129;
          goto LABEL_24;
        }
      }
      a1 = v137;
      uint64_t v2 = v125;
      uint64_t v21 = v129;
      uint64_t v29 = v139;
    }
LABEL_24:
    uint64_t v18 = v126;
    if (v136 >= v133) {
      break;
    }
    unint64_t v38 = v140;
    if (v32 < v21) {
      goto LABEL_142;
    }
    int64_t v22 = v32;
    if (v21 >= v32) {
      goto LABEL_38;
    }
    uint64_t v125 = v2;
    uint64_t v39 = 0;
    uint64_t v40 = v140 * (v32 - 1);
    uint64_t v41 = v32 * v140;
    uint64_t v42 = v21 * v140;
    do
    {
      if (v21 != v22 + v39 - 1)
      {
        uint64_t v44 = v127;
        if (!v127) {
          goto LABEL_147;
        }
        unint64_t v45 = v127 + v42;
        unint64_t v136 = v127 + v40;
        sub_1C411F8F4(v127 + v42, v128);
        if (v42 < v40 || v45 >= v44 + v41)
        {
          uint64_t v43 = v136;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v43 = v136;
          if (v42 != v40) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        sub_1C411F8F4(v128, v43);
        int64_t v22 = v32;
        unint64_t v38 = v140;
      }
      ++v21;
      --v39;
      v40 -= v38;
      v41 -= v38;
      v42 += v38;
    }
    while (v21 < v22 + v39);
    a1 = v137;
    uint64_t v2 = v125;
    uint64_t v21 = v129;
    uint64_t v29 = v139;
    if (v22 < v139) {
      goto LABEL_39;
    }
LABEL_58:
    if (v22 < v21) {
      goto LABEL_135;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v136 = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v18 = sub_1C411E2A8(0, *((void *)v18 + 2) + 1, 1, v18);
    }
    unint64_t v65 = *((void *)v18 + 2);
    unint64_t v64 = *((void *)v18 + 3);
    unint64_t v20 = v65 + 1;
    if (v65 >= v64 >> 1) {
      uint64_t v18 = sub_1C411E2A8((char *)(v64 > 1), v65 + 1, 1, v18);
    }
    uint64_t v66 = v2;
    *((void *)v18 + 2) = v20;
    unint64_t v67 = v18 + 32;
    unint64_t v68 = &v18[16 * v65 + 32];
    unint64_t v69 = v136;
    *(void *)unint64_t v68 = v129;
    *((void *)v68 + 1) = v69;
    if (v65)
    {
      while (1)
      {
        unint64_t v70 = v20 - 1;
        if (v20 >= 4)
        {
          unint64_t v75 = &v67[16 * v20];
          uint64_t v76 = *((void *)v75 - 8);
          uint64_t v77 = *((void *)v75 - 7);
          BOOL v81 = __OFSUB__(v77, v76);
          uint64_t v78 = v77 - v76;
          if (v81) {
            goto LABEL_124;
          }
          uint64_t v80 = *((void *)v75 - 6);
          uint64_t v79 = *((void *)v75 - 5);
          BOOL v81 = __OFSUB__(v79, v80);
          uint64_t v73 = v79 - v80;
          char v74 = v81;
          if (v81) {
            goto LABEL_125;
          }
          unint64_t v82 = v20 - 2;
          char v83 = &v67[16 * v20 - 32];
          uint64_t v85 = *(void *)v83;
          uint64_t v84 = *((void *)v83 + 1);
          BOOL v81 = __OFSUB__(v84, v85);
          uint64_t v86 = v84 - v85;
          if (v81) {
            goto LABEL_127;
          }
          BOOL v81 = __OFADD__(v73, v86);
          uint64_t v87 = v73 + v86;
          if (v81) {
            goto LABEL_130;
          }
          if (v87 >= v78)
          {
            uint64_t v105 = &v67[16 * v70];
            uint64_t v107 = *(void *)v105;
            uint64_t v106 = *((void *)v105 + 1);
            BOOL v81 = __OFSUB__(v106, v107);
            uint64_t v108 = v106 - v107;
            if (v81) {
              goto LABEL_134;
            }
            BOOL v98 = v73 < v108;
            goto LABEL_95;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v99 = *((void *)v18 + 4);
            uint64_t v100 = *((void *)v18 + 5);
            BOOL v81 = __OFSUB__(v100, v99);
            uint64_t v92 = v100 - v99;
            char v93 = v81;
            goto LABEL_89;
          }
          uint64_t v72 = *((void *)v18 + 4);
          uint64_t v71 = *((void *)v18 + 5);
          BOOL v81 = __OFSUB__(v71, v72);
          uint64_t v73 = v71 - v72;
          char v74 = v81;
        }
        if (v74) {
          goto LABEL_126;
        }
        unint64_t v82 = v20 - 2;
        unint64_t v88 = &v67[16 * v20 - 32];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v91 = __OFSUB__(v89, v90);
        uint64_t v92 = v89 - v90;
        char v93 = v91;
        if (v91) {
          goto LABEL_129;
        }
        uint64_t v94 = &v67[16 * v70];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v81 = __OFSUB__(v95, v96);
        uint64_t v97 = v95 - v96;
        if (v81) {
          goto LABEL_132;
        }
        if (__OFADD__(v92, v97)) {
          goto LABEL_133;
        }
        if (v92 + v97 >= v73)
        {
          BOOL v98 = v73 < v97;
LABEL_95:
          if (v98) {
            unint64_t v70 = v82;
          }
          goto LABEL_97;
        }
LABEL_89:
        if (v93) {
          goto LABEL_128;
        }
        uint64_t v101 = &v67[16 * v70];
        uint64_t v103 = *(void *)v101;
        uint64_t v102 = *((void *)v101 + 1);
        BOOL v81 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v81) {
          goto LABEL_131;
        }
        if (v104 < v92) {
          goto LABEL_14;
        }
LABEL_97:
        unint64_t v109 = v70 - 1;
        if (v70 - 1 >= v20)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        uint64_t v110 = *a1;
        if (!*a1) {
          goto LABEL_146;
        }
        char v111 = &v67[16 * v109];
        uint64_t v112 = *(void *)v111;
        char v113 = &v67[16 * v70];
        uint64_t v114 = *((void *)v113 + 1);
        sub_1C411DDE0(v110 + *(void *)(v131 + 72) * *(void *)v111, v110 + *(void *)(v131 + 72) * *(void *)v113, v110 + *(void *)(v131 + 72) * v114, v130);
        if (v66) {
          goto LABEL_118;
        }
        if (v114 < v112) {
          goto LABEL_121;
        }
        if (v70 > *((void *)v18 + 2)) {
          goto LABEL_122;
        }
        *(void *)char v111 = v112;
        *(void *)&v67[16 * v109 + 8] = v114;
        unint64_t v115 = *((void *)v18 + 2);
        if (v70 >= v115) {
          goto LABEL_123;
        }
        unint64_t v20 = v115 - 1;
        memmove(&v67[16 * v70], v113 + 16, 16 * (v115 - 1 - v70));
        *((void *)v18 + 2) = v115 - 1;
        a1 = v137;
        if (v115 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_14:
    uint64_t v12 = a1[1];
    unint64_t v19 = v136;
    uint64_t v2 = v66;
    if ((uint64_t)v136 >= v12) {
      goto LABEL_107;
    }
  }
  int64_t v22 = v32;
LABEL_38:
  if (v22 >= v29) {
    goto LABEL_58;
  }
LABEL_39:
  if (__OFSUB__(v22, v21)) {
    goto LABEL_140;
  }
  if (v22 - v21 >= v124) {
    goto LABEL_58;
  }
  if (__OFADD__(v21, v124)) {
    goto LABEL_143;
  }
  if (v21 + v124 >= v29) {
    uint64_t v46 = v29;
  }
  else {
    uint64_t v46 = v21 + v124;
  }
  if (v46 >= v21)
  {
    if (v22 != v46)
    {
      uint64_t v125 = v2;
      unint64_t v47 = *(void *)(v131 + 72);
      uint64_t v48 = v47 * (v22 - 1);
      unint64_t v133 = v47;
      int64_t v49 = v22 * v47;
      int64_t v127 = v46;
      do
      {
        uint64_t v51 = 0;
        unint64_t v136 = v22;
        while (1)
        {
          uint64_t v139 = v21;
          uint64_t v52 = v137;
          uint64_t v53 = *v137;
          uint64_t v54 = v49;
          uint64_t v55 = v49 + v51 + *v137;
          unint64_t v56 = v134;
          sub_1C3F970C4(v55, (uint64_t)v134, &qword_1EBBBC690);
          uint64_t v57 = v48;
          uint64_t v58 = v48 + v51 + v53;
          uint64_t v59 = v135;
          sub_1C3F970C4(v58, (uint64_t)v135, &qword_1EBBBC690);
          unint64_t v140 = *v56;
          unint64_t v60 = *v59;
          sub_1C3F962E0((uint64_t)v59, &qword_1EBBBC690);
          sub_1C3F962E0((uint64_t)v56, &qword_1EBBBC690);
          if (v140 >= v60) {
            break;
          }
          uint64_t v61 = *v52;
          if (!*v52) {
            goto LABEL_145;
          }
          int64_t v49 = v54;
          uint64_t v48 = v57;
          uint64_t v62 = v61 + v57 + v51;
          sub_1C411F8F4(v61 + v54 + v51, v138);
          swift_arrayInitWithTakeFrontToBack();
          sub_1C411F8F4(v138, v62);
          v51 -= v133;
          uint64_t v21 = v139 + 1;
          unint64_t v50 = v136;
          if (v136 == v139 + 1) {
            goto LABEL_49;
          }
        }
        unint64_t v50 = v136;
        uint64_t v48 = v57;
        int64_t v49 = v54;
LABEL_49:
        int64_t v22 = v50 + 1;
        v48 += v133;
        v49 += v133;
        uint64_t v21 = v129;
      }
      while (v22 != v127);
      int64_t v22 = v127;
      uint64_t v2 = v125;
      uint64_t v18 = v126;
      a1 = v137;
    }
    goto LABEL_58;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  uint64_t result = sub_1C4497F48();
  __break(1u);
  return result;
}

uint64_t sub_1C3F6F9AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v27 = a1;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC690);
  uint64_t v7 = MEMORY[0x1F4188790](v28);
  uint64_t v33 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v30 = (char *)&v25 - v10;
  uint64_t result = MEMORY[0x1F4188790](v9);
  uint64_t v29 = (unint64_t *)((char *)&v25 - v13);
  uint64_t v32 = a3;
  uint64_t v26 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = *(void *)(v12 + 72);
    uint64_t v36 = v14 * (v32 - 1);
    uint64_t v31 = v14;
    uint64_t v35 = v14 * v32;
    uint64_t v15 = (unint64_t *)v30;
LABEL_5:
    uint64_t v16 = 0;
    uint64_t v17 = v27;
    while (1)
    {
      uint64_t v18 = a4;
      uint64_t v19 = *a4;
      unint64_t v20 = v29;
      sub_1C3F970C4(v35 + v16 + v19, (uint64_t)v29, &qword_1EBBBC690);
      sub_1C3F970C4(v36 + v16 + v19, (uint64_t)v15, &qword_1EBBBC690);
      unint64_t v34 = *v20;
      unint64_t v21 = *v15;
      sub_1C3F962E0((uint64_t)v15, &qword_1EBBBC690);
      uint64_t result = sub_1C3F962E0((uint64_t)v20, &qword_1EBBBC690);
      BOOL v22 = v34 >= v21;
      a4 = v18;
      if (v22)
      {
LABEL_4:
        v36 += v31;
        v35 += v31;
        if (++v32 == v26) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v23 = *v18;
      if (!*v18) {
        break;
      }
      uint64_t v24 = v23 + v36 + v16;
      sub_1C411F8F4(v23 + v35 + v16, v33);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1C411F8F4(v33, v24);
      v16 -= v31;
      ++v17;
      a4 = v18;
      if (v32 == v17) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for CRStructEncoder()
{
  uint64_t result = qword_1EBBBC660;
  if (!qword_1EBBBC660) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1C3F6FC88()
{
  unint64_t result = qword_1EBBBC658;
  if (!qword_1EBBBC658)
  {
    type metadata accessor for CRStructEncoder();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBBC658);
  }
  return result;
}

uint64_t sub_1C3F6FCE0()
{
  return sub_1C3F6FD0C(*(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned __int8 *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C3F6FD0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C4497058();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a7 + 8) + 8) + 16))(a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a6);
}

uint64_t sub_1C3F6FE54(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = &v19[-v7];
  uint64_t v9 = *(int *)(type metadata accessor for Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v10 = *(void *)(v1 + v9);
    type metadata accessor for Proto_Value._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = v11 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    uint64_t v13 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = v10 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1C3F970C4(v14, (uint64_t)v8, &qword_1EBBBF8A0);
    swift_beginAccess();
    sub_1C3F98338((uint64_t)v8, v12, &qword_1EBBBF8A0);
    swift_endAccess();
    *(void *)(v1 + v9) = v11;
    swift_release();
  }
  uint64_t v15 = *(void *)(v1 + v9);
  sub_1C3F92E00(a1, (uint64_t)v8, type metadata accessor for Proto_CustomCRValue);
  uint64_t v16 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1C3F961BC((uint64_t)v8, (uint64_t)v6, &qword_1EBBBF8A0);
  uint64_t v17 = v15 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338((uint64_t)v6, v17, &qword_1EBBBF8A0);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1C3F700C4(uint64_t a1)
{
  return sub_1C3F70160(a1);
}

uint64_t sub_1C3F700CC()
{
  uint64_t result = sub_1C3F6DD10();
  if (!v1)
  {
    swift_retain();
    uint64_t v3 = sub_1C3FA10C4(v0);
    swift_beginAccess();
    sub_1C3F703BC(v3);
    return swift_release();
  }
  return result;
}

uint64_t sub_1C3F70160(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = &v19[-v7];
  uint64_t v9 = *(int *)(type metadata accessor for Proto_Value(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v10 = *(void *)(v1 + v9);
    type metadata accessor for Proto_Value._StorageClass(0);
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = v11 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    uint64_t v13 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
    uint64_t v14 = v10 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1C3F970C4(v14, (uint64_t)v8, &qword_1EBBBF8A0);
    swift_beginAccess();
    sub_1C3F98338((uint64_t)v8, v12, &qword_1EBBBF8A0);
    swift_endAccess();
    *(void *)(v1 + v9) = v11;
    swift_release();
  }
  uint64_t v15 = *(void *)(v1 + v9);
  *uint64_t v8 = a1;
  uint64_t v16 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 0, 1, v16);
  sub_1C3F961BC((uint64_t)v8, (uint64_t)v6, &qword_1EBBBF8A0);
  uint64_t v17 = v15 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338((uint64_t)v6, v17, &qword_1EBBBF8A0);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1C3F703BC(uint64_t a1)
{
  return sub_1C3F70160(a1);
}

uint64_t sub_1C3F703C4()
{
  sub_1C3F70584();
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F703F8()
{
  uint64_t v1 = v0;
  if (qword_1EBBC10F0 != -1) {
    swift_once();
  }
  uint64_t v2 = v0 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 8);
  v7[0] = MEMORY[0x1E4FBC868];
  v7[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1C3F70918((uint64_t)v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1C3F8F634(v0 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = v0 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID;
  uint64_t v5 = sub_1C4496678();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1C3F70584()
{
  if (qword_1EBBC10F0 != -1) {
    swift_once();
  }
  swift_retain();
  sub_1C3F70B40(0, v3);
  v2[0] = v3[0];
  v2[1] = v3[1];
  sub_1C3F70918((uint64_t)v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1C3F7065C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1C4496D68();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1C4496DA8();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a1 + 8);
  if (*(void *)(v17 + 16))
  {
    v20[1] = *(void *)(v4 + 40);
    uint64_t v21 = result;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 24) = v4;
    aBlock[4] = a3;
    void aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1C3F61AC0;
    aBlock[3] = a4;
    uint64_t v19 = _Block_copy(aBlock);
    swift_bridgeObjectRetain_n();
    swift_retain();
    sub_1C4496D88();
    uint64_t v22 = MEMORY[0x1E4FBC860];
    sub_1C3F70940((unint64_t *)&qword_1EBBC07F0, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0960);
    sub_1C3F70AF0((unint64_t *)&qword_1EBBC0968, &qword_1EBBC0960);
    sub_1C4497BF8();
    MEMORY[0x1C87806C0](0, v16, v11, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v21);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1C3F70918(uint64_t a1)
{
  return sub_1C3F7065C(a1, (uint64_t)&unk_1F1FA1240, (uint64_t)sub_1C3F61B04, (uint64_t)&block_descriptor_2);
}

uint64_t sub_1C3F70940(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C3F70988(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C3F709D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C3F70A18(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C3F70A60(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C3F70AA8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C3F70AF0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C3F70B40@<X0>(char a1@<W0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0FA0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v9 = qword_1EBBC00D0;
    swift_retain();
    if (v9 != -1) {
      swift_once();
    }
    sub_1C4497A58();
    swift_release();
  }
  else
  {
    uint64_t v10 = type metadata accessor for Replica();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
  }
  swift_beginAccess();
  uint64_t v11 = *(void *)(v3 + 32);
  swift_bridgeObjectRetain();
  uint64_t result = sub_1C3F962E0((uint64_t)v8, &qword_1EBBC0FA0);
  *a2 = MEMORY[0x1E4FBC868];
  a2[1] = v11;
  return result;
}

uint64_t sub_1C3F70CD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v72 = a5;
  uint64_t v73 = a6;
  uint64_t v74 = a7;
  uint64_t v65 = a2;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v70 = (uint64_t)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for Proto_Version(0);
  uint64_t v67 = *(void *)(v68 - 8);
  MEMORY[0x1F4188790](v68);
  unint64_t v69 = (uint64_t *)((char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0FA0);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1C4496678();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = *(int *)(type metadata accessor for Proto_Set(0) + 20);
  uint64_t v22 = *(void *)(a1 + v66);
  swift_beginAccess();
  uint64_t v23 = *(void *)(a4 + 24);
  unint64_t v24 = *(void *)(v23 + 16);
  if (!v24 || (unint64_t v25 = *(void *)(v22 + 16), v25 >= v24))
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v38 = xmmword_1C44A0890;
    *(unsigned char *)(v38 + 16) = 0;
    swift_willThrow();
    swift_release();
    uint64_t v39 = a1;
    return sub_1C3F9247C(v39, type metadata accessor for Proto_Set);
  }
  uint64_t v62 = a3;
  uint64_t v61 = a8;
  uint64_t v64 = a4;
  (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v21, v23+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(void *)(v19 + 72) * v25, v18);
  type metadata accessor for ReplicaState();
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v26 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  uint64_t v28 = type metadata accessor for Replica();
  uint64_t v63 = a1;
  uint64_t v29 = v28;
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56);
  v30(v27, 1, 1, v28);
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v26 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v21, v18);
  *(void *)(v26 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  *(void *)(v26 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
  uint64_t v31 = v63;
  v30((uint64_t)v17, 1, 1, v29);
  swift_beginAccess();
  sub_1C3F98338((uint64_t)v17, v27, &qword_1EBBC0FA0);
  swift_endAccess();
  uint64_t v32 = v66;
  uint64_t v33 = *(void *)(v31 + v66)
      + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  uint64_t v34 = v33;
  uint64_t v35 = v70;
  sub_1C3F970C4(v34, v70, &qword_1EBBC0578);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v35, 1, v68) == 1)
  {
    uint64_t v36 = MEMORY[0x1E4FBC860];
    int v37 = v69;
    *unint64_t v69 = MEMORY[0x1E4FBC860];
    v37[1] = v36;
    sub_1C4496888();
    sub_1C3F962E0(v35, &qword_1EBBC0578);
  }
  else
  {
    int v37 = v69;
    sub_1C3F720D8(v35, (uint64_t)v69, type metadata accessor for Proto_Version);
  }
  uint64_t v40 = v64;
  uint64_t v41 = v73;
  uint64_t v42 = v74;
  uint64_t v43 = v72;
  swift_retain();
  uint64_t v44 = v71;
  sub_1C3F8F9D0(v37, v40, &v75);
  if (v44)
  {
    swift_release();
    swift_release();
    uint64_t v39 = v31;
    return sub_1C3F9247C(v39, type metadata accessor for Proto_Set);
  }
  uint64_t v71 = v75;
  uint64_t v72 = v26;
  uint64_t v70 = *((void *)&v75 + 1);
  uint64_t v46 = (void *)(*(void *)(v31 + v32)
                 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
  swift_beginAccess();
  unint64_t v69 = &v60;
  *(void *)&long long v75 = *v46;
  uint64_t v47 = MEMORY[0x1F4188790](v75);
  *(&v60 - 6) = v43;
  *(&v60 - 5) = v41;
  uint64_t v48 = v65;
  *(&v60 - 4) = v42;
  *(&v60 - 3) = v48;
  *(&v60 - 2) = v62;
  MEMORY[0x1F4188790](v47);
  *(&v60 - 6) = v43;
  *(&v60 - 5) = v41;
  *(&v60 - 4) = v42;
  *(&v60 - 3) = (uint64_t)sub_1C3F72018;
  *(&v60 - 2) = v49;
  swift_bridgeObjectRetain();
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC140);
  TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
  uint64_t v52 = v43;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC00F0);
  uint64_t v54 = sub_1C3F815A4(&qword_1EBBBC138, &qword_1EBBBC140);
  uint64_t v55 = sub_1C3F7182C((void (*)(char *, char *))sub_1C3F71F3C, (uint64_t)(&v60 - 8), v50, TupleTypeMetadata2, v53, v54, MEMORY[0x1E4FBC0F0], (uint64_t)&v79);
  swift_bridgeObjectRelease();
  *(void *)&long long v75 = v55;
  sub_1C4497528();
  swift_getWitnessTable();
  uint64_t v56 = v74;
  uint64_t v57 = sub_1C4497018();
  *(void *)&long long v75 = v52;
  *((void *)&v75 + 1) = &type metadata for CRSetElement;
  uint64_t v76 = v73;
  uint64_t v77 = v56;
  uint64_t v78 = &off_1EC686308;
  type metadata accessor for CRSetRef();
  *(void *)&long long v75 = v71;
  *((void *)&v75 + 1) = v70;
  if (qword_1EBBC10F0 != -1) {
    swift_once();
  }
  swift_retain();
  sub_1C4497A58();
  swift_release();
  uint64_t v58 = v79;
  uint64_t v59 = swift_allocObject();
  sub_1C3F721A8(v72, &v75, v57, v58);
  swift_release();
  uint64_t result = sub_1C3F9247C(v63, type metadata accessor for Proto_Set);
  uint64_t *v61 = v59;
  return result;
}

void *sub_1C3F71564()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0FA0);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1C4496678();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1E4FBC868];
  v0[3] = MEMORY[0x1E4FBC868];
  v0[4] = v8;
  v0[5] = sub_1C4496EA8();
  v0[6] = 0;
  sub_1C4496668();
  type metadata accessor for ReplicaState();
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = v9 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
  uint64_t v11 = type metadata accessor for Replica();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v7, v4);
  *(void *)(v9 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
  *(void *)(v9 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
  v12((uint64_t)v3, 1, 1, v11);
  swift_beginAccess();
  sub_1C3F98338((uint64_t)v3, v10, &qword_1EBBC0FA0);
  swift_endAccess();
  v0[2] = v9;
  return v0;
}

uint64_t sub_1C3F717CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C43EE9BC);
}

uint64_t type metadata accessor for ReplicaState()
{
  uint64_t result = qword_1EBBC0F88;
  if (!qword_1EBBC0F88) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C3F7182C(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  uint64_t v59 = a4;
  uint64_t v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  uint64_t v55 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v53 = (char *)&v40 - v13;
  uint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v41 = (char *)&v40 - v17;
  uint64_t v18 = sub_1C4497B38();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v51 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v40 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v50 = *((void *)v15 - 1);
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  uint64_t v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  uint64_t v30 = (char *)&v40 - v29;
  uint64_t v31 = sub_1C44972C8();
  uint64_t v61 = sub_1C4496EB8();
  uint64_t v56 = sub_1C4497E58();
  sub_1C4497DF8();
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  uint64_t v59 = v30;
  uint64_t result = sub_1C44972B8();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    uint64_t v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    uint64_t v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_1C4497B58();
      uint64_t result = (*v33)(v23, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v23, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v23, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v23, AssociatedTypeWitness);
      sub_1C4497E38();
      if (!--v31)
      {
        uint64_t v35 = v54;
        uint64_t v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  uint64_t v36 = v51;
LABEL_9:
  sub_1C4497B58();
  uint64_t v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    int v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    uint64_t v38 = (void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v39 = v41;
    int v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      sub_1C4497E38();
      sub_1C4497B58();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

uint64_t sub_1C3F71F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_230Tm_22);
}

uint64_t sub_1C3F71F3C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C3F71F64(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(v3 + 40), a2, a3);
}

uint64_t sub_1C3F71F64@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, char *)@<X1>, void *a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v9 = (char *)a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC130) + 48);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t result = a2(a4, a4 + *(int *)(TupleTypeMetadata2 + 48), v8, v9);
  if (v4) {
    *a3 = v4;
  }
  return result;
}

uint64_t sub_1C3F72018()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t sub_1C3F72040(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  return sub_1C3F88E64(a1, a2, a3, a4, v4[5], v4[6], v4[7], v4[2], v4[3], v4[4]);
}

uint64_t sub_1C3F72070(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F720D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F72140(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *sub_1C3F721A8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = MEMORY[0x1E4FBC868];
  v4[3] = MEMORY[0x1E4FBC868];
  v4[4] = v9;
  v4[5] = sub_1C4496EA8();
  v4[6] = 0;
  v4[2] = a1;
  swift_beginAccess();
  *(_OWORD *)(v4 + 3) = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v4[5] = a3;
  swift_bridgeObjectRelease();
  v4[6] = a4;
  return v4;
}

uint64_t sub_1C3F722B4()
{
  return sub_1C3F72404();
}

uint64_t sub_1C3F722CC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t result = sub_1C4496908();
  if (!v6)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        a4(0);
        sub_1C3F7251C(a5, a6);
        sub_1C4496A68();
      }
      else if (result == 1)
      {
        sub_1C44969E8();
      }
      uint64_t result = sub_1C4496908();
    }
  }
  return result;
}

uint64_t sub_1C3F72404()
{
  if (!*(void *)(*v0 + 16) || (uint64_t result = sub_1C4496AF8(), !v1))
  {
    if (!*(void *)(v0[1] + 16)
      || (type metadata accessor for Proto_RLE(0),
          sub_1C3F7251C(&qword_1EBBC01A8, (void (*)(uint64_t))type metadata accessor for Proto_RLE),
          uint64_t result = sub_1C4496BC8(),
          !v1))
    {
      type metadata accessor for Proto_Version(0);
      return sub_1C4496878();
    }
  }
  return result;
}

uint64_t sub_1C3F7251C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C3F72564()
{
  return sub_1C3F7257C();
}

uint64_t sub_1C3F7257C()
{
  if (!*(void *)(*(void *)v0 + 16) || (uint64_t result = sub_1C4496AD8(), !v1))
  {
    type metadata accessor for Proto_RLE(0);
    return sub_1C4496878();
  }
  return result;
}

uint64_t type metadata accessor for Proto_RLE(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC01B8);
}

uint64_t sub_1C3F72634()
{
  return sub_1C3F7264C();
}

uint64_t sub_1C3F7264C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Subsequence._StorageClass(0);
    swift_allocObject();
    uint64_t v3 = swift_retain();
    uint64_t v4 = sub_1C3F7273C(v3);
    swift_release();
    *(void *)(v1 + v2) = v4;
    swift_release();
  }
  swift_retain();
  sub_1C3F72A70();
  return swift_release();
}

uint64_t type metadata accessor for Proto_Subsequence._StorageClass(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBC0E8);
}

uint64_t sub_1C3F7273C(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequenceStartID;
  uint64_t v7 = type metadata accessor for Proto_Timestamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = (_DWORD *)(v1
                + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__length);
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__length) = 0;
  uint64_t v9 = (void *)(v1
                + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  *(void *)(v1
            + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy) = MEMORY[0x1E4FBC860];
  uint64_t v11 = (void *)(v1
                 + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__child);
  *(void *)(v1
            + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__child) = v10;
  uint64_t v27 = (void *)(v1
                 + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removedAddedBy);
  *(void *)(v1
            + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removedAddedBy) = v10;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__contentOptions;
  *(void *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  uint64_t v13 = a1;
  uint64_t v14 = a1
      + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequenceStartID;
  swift_beginAccess();
  sub_1C3F970C4(v14, (uint64_t)v5, &qword_1EBBC0620);
  swift_beginAccess();
  sub_1C3F98338((uint64_t)v5, v6, &qword_1EBBC0620);
  swift_endAccess();
  uint64_t v15 = (_DWORD *)(v13
                 + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__length);
  swift_beginAccess();
  LODWORD(v15) = *v15;
  swift_beginAccess();
  *uint64_t v8 = v15;
  uint64_t v16 = (uint64_t *)(v13
                  + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy);
  swift_beginAccess();
  uint64_t v17 = *v16;
  swift_beginAccess();
  *uint64_t v9 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = (uint64_t *)(v13
                  + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__child);
  swift_beginAccess();
  uint64_t v19 = *v18;
  swift_beginAccess();
  *uint64_t v11 = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = (uint64_t *)(v13
                  + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removedAddedBy);
  swift_beginAccess();
  uint64_t v21 = *v20;
  uint64_t v22 = v27;
  swift_beginAccess();
  *uint64_t v22 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = (uint64_t *)(v13
                  + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__contentOptions);
  swift_beginAccess();
  uint64_t v24 = *v23;
  LOBYTE(v23) = *((unsigned char *)v23 + 8);
  swift_beginAccess();
  *(void *)uint64_t v12 = v24;
  *(unsigned char *)(v12 + 8) = (_BYTE)v23;
  return v1;
}

uint64_t sub_1C3F72A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C440D6D0);
}

uint64_t sub_1C3F72A70()
{
  uint64_t result = sub_1C4496908();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for Proto_Timestamp(0);
          sub_1C3F7251C(&qword_1EBBC06F0, (void (*)(uint64_t))type metadata accessor for Proto_Timestamp);
          uint64_t v4 = v3;
          sub_1C4496A78();
          goto LABEL_5;
        case 2:
          swift_beginAccess();
          uint64_t v4 = v3;
          sub_1C4496A38();
          goto LABEL_5;
        case 3:
        case 5:
          swift_beginAccess();
          type metadata accessor for Proto_Timestamp(0);
          sub_1C3F7251C(&qword_1EBBC06F0, (void (*)(uint64_t))type metadata accessor for Proto_Timestamp);
          uint64_t v4 = v3;
          sub_1C4496A68();
          goto LABEL_5;
        case 4:
          swift_beginAccess();
          uint64_t v4 = v3;
          sub_1C44969D8();
LABEL_5:
          uint64_t v3 = v4;
          swift_endAccess();
          break;
        case 6:
          swift_beginAccess();
          sub_1C4414210();
          sub_1C4496948();
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t result = sub_1C4496908();
    }
  }
  return result;
}

uint64_t Capsule<>.serializedData(_:version:allowedAppFormats:)(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v44 = a5;
  uint64_t v47 = a4;
  uint64_t v42 = (void *)a1;
  uint64_t v45 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v43 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*a2)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v30 = 0xD00000000000002ALL;
    *(void *)(v30 + 8) = 0x80000001C44B18A0;
    *(unsigned char *)(v30 + 16) = 0;
    goto LABEL_30;
  }
  int v41 = *a2;
  if (!a3)
  {
    LOWORD(v12) = 0;
LABEL_32:
    uint64_t v31 = v45;
    uint64_t v32 = (uint64_t)v43;
    uint64_t v33 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v43, v46, v47);
    uint64_t v34 = v42;
    Capsule.finalizeTimestamps(_:)((uint64_t)v42, v33);
    type metadata accessor for CREncoder();
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = MEMORY[0x1E4FBC860];
    uint64_t v37 = MEMORY[0x1E4FBC868];
    *(void *)(v35 + 32) = MEMORY[0x1E4FBC868];
    *(void *)(v35 + 40) = v36;
    *(void *)(v35 + 48) = v36;
    *(void *)(v35 + 56) = v37;
    *(void *)(v35 + 64) = v36;
    *(void *)(v35 + 80) = 0;
    *(void *)(v35 + 88) = 0;
    *(void *)(v35 + 16) = v34;
    *(void *)(v35 + 24) = v36;
    *(unsigned char *)(v35 + 72) = v41;
    uint64_t v38 = *(void *)(v33 + 16);
    id v39 = v34;
    uint64_t v8 = sub_1C3F732B8(v32, v12, 0, v38, v44);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
    swift_release();
    return v8;
  }
  uint64_t v40 = a3;
  sub_1C3FB05E4(v47, (uint64_t)v10);
  uint64_t v11 = *(void *)&v10[*(int *)(v8 + 20)];
  swift_bridgeObjectRetain();
  sub_1C3F8F634((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
  uint64_t v12 = 0;
  int64_t v13 = 0;
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  uint64_t v16 = *(void *)(v11 + 64);
  uint64_t v48 = v11 + 64;
  unint64_t v17 = v15 & v16;
  int64_t v49 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v50 = v11;
  if ((v15 & v16) == 0) {
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v52 = (v17 - 1) & v17;
  int64_t v53 = v13;
  unint64_t v18 = __clz(__rbit64(v17)) | (v13 << 6);
  uint64_t result = v50;
  while (1)
  {
    uint64_t v24 = *(void *)(*(void *)(result + 56) + 48 * v18);
    if (!v24) {
      goto LABEL_36;
    }
    uint64_t v25 = (uint64_t *)(*(void *)(result + 48) + 16 * v18);
    uint64_t v26 = *v25;
    unint64_t v27 = v25[1];
    uint64_t v51 = *(__int16 (**)(uint64_t))(*(void *)v24 + 200);
    sub_1C3F7E324(v26, v27);
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v28 = swift_bridgeObjectRetain();
    uint64_t v8 = v51(v28);
    sub_1C3F7E2CC(v26, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    if ((int)v8 <= (__int16)v12) {
      uint64_t v12 = (__int16)v12;
    }
    else {
      uint64_t v12 = v8;
    }
    int64_t v13 = v53;
    unint64_t v17 = v52;
    if (v52) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v20 = v13 + 1;
    uint64_t result = v50;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
      return result;
    }
    if (v20 >= v49) {
      goto LABEL_27;
    }
    unint64_t v21 = *(void *)(v48 + 8 * v20);
    int64_t v22 = v13 + 1;
    if (!v21)
    {
      int64_t v22 = v20 + 1;
      if (v20 + 1 >= v49) {
        goto LABEL_27;
      }
      unint64_t v21 = *(void *)(v48 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = v20 + 2;
        if (v20 + 2 >= v49) {
          goto LABEL_27;
        }
        unint64_t v21 = *(void *)(v48 + 8 * v22);
        if (!v21) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v52 = (v21 - 1) & v21;
    int64_t v53 = v22;
    unint64_t v18 = __clz(__rbit64(v21)) + (v22 << 6);
  }
  int64_t v23 = v20 + 3;
  if (v23 < v49)
  {
    unint64_t v21 = *(void *)(v48 + 8 * v23);
    if (!v21)
    {
      while (1)
      {
        int64_t v22 = v23 + 1;
        if (__OFADD__(v23, 1)) {
          goto LABEL_35;
        }
        if (v22 >= v49) {
          goto LABEL_27;
        }
        unint64_t v21 = *(void *)(v48 + 8 * v22);
        ++v23;
        if (v21) {
          goto LABEL_20;
        }
      }
    }
    int64_t v22 = v23;
    goto LABEL_20;
  }
LABEL_27:
  swift_release();
  if (sub_1C443ECE4(v12, v40)) {
    goto LABEL_32;
  }
  sub_1C3FE3FF0();
  swift_allocError();
  *(void *)uint64_t v29 = (unsigned __int16)v12;
  *(void *)(v29 + 8) = 0;
  *(unsigned char *)(v29 + 16) = 1;
LABEL_30:
  swift_willThrow();
  return v8;
}

uint64_t type metadata accessor for CREncoder()
{
  return self;
}

uint64_t sub_1C3F732B8(uint64_t a1, __int16 a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = type metadata accessor for Proto_Document(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = &v31[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v16 = a5;
  uint64_t v17 = v7;
  sub_1C3F73630(a1, a3, 0, 0, a4, v16, (uint64_t)v15);
  if (!v6)
  {
    uint64_t v18 = *(unsigned __int8 *)(v7 + 72) + 4;
    memset(v31, 0, sizeof(v31));
    unsigned __int8 v32 = 8;
    sub_1C3F73B18((uint64_t)v31, (uint64_t)&v31[8], v18, a2);
    uint64_t aBlock = *(void *)v31;
    unint64_t v34 = *(unsigned int *)&v31[8] | ((unint64_t)v31[12] << 32) | ((unint64_t)v31[13] << 40) | ((unint64_t)v32 << 48);
    sub_1C3FAD5C8((unint64_t *)&qword_1EBBC05F0, (void (*)(uint64_t))type metadata accessor for Proto_Document);
    uint64_t v20 = sub_1C4496AA8();
    unint64_t v22 = v21;
    sub_1C4496588();
    sub_1C3F7E2CC(v20, v22);
    uint64_t v17 = aBlock;
    sub_1C3F9229C((uint64_t)v15, type metadata accessor for Proto_Document);
    int64_t v23 = *(void **)(v7 + 16);
    if (qword_1EBBC10F0 != -1) {
      goto LABEL_7;
    }
    while (1)
    {
      uint64_t v24 = *(void **)(qword_1EBBC5A60 + 40);
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = v23;
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = sub_1C3F5F33C;
      *(void *)(v26 + 24) = v25;
      uint64_t v37 = sub_1C3F5F2E0;
      uint64_t v38 = v26;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      unint64_t v34 = 1107296256;
      uint64_t v35 = sub_1C3F5F2B8;
      uint64_t v36 = &block_descriptor_281;
      unint64_t v27 = _Block_copy(&aBlock);
      uint64_t v28 = v24;
      id v29 = v23;
      swift_retain();
      swift_release();
      dispatch_sync(v28, v27);

      _Block_release(v27);
      LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((v27 & 1) == 0) {
        break;
      }
      __break(1u);
LABEL_7:
      swift_once();
    }
  }
  return v17;
}

uint64_t sub_1C3F73630@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  swift_beginAccess();
  v7[3] = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v7[4] = MEMORY[0x1E4FBC868];
  swift_bridgeObjectRelease();
  uint64_t result = sub_1C3FAEC54(a1, a2, a3, a4, a5, a6, a7);
  if (!v8)
  {
    uint64_t v17 = (void *)v7[2];
    if (qword_1EBBC10F0 != -1) {
      swift_once();
    }
    uint64_t v18 = *(void **)(qword_1EBBC5A60 + 40);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v17;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = sub_1C3F5F33C;
    *(void *)(v20 + 24) = v19;
    v24[4] = sub_1C3F5F2E0;
    v24[5] = v20;
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 1107296256;
    v24[2] = sub_1C3F5F2B8;
    void v24[3] = &block_descriptor_189;
    unint64_t v21 = _Block_copy(v24);
    unint64_t v22 = v18;
    id v23 = v17;
    swift_retain();
    swift_release();
    dispatch_sync(v22, v21);

    _Block_release(v21);
    LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v21) {
      __break(1u);
    }
  }
  return result;
}

uint64_t Capsule.finalizeTimestamps(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(int *)(a2 + 40);
  uint64_t v4 = *(void *)(v2 + v3);
  if (!v4)
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v5 = v2;
  uint64_t v6 = result;
  uint64_t v7 = v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_native();
  if (result)
  {
    if (*(void *)(v5 + v3))
    {
      v19[0] = MEMORY[0x1E4FBC868];
      v19[1] = v8;
      sub_1C3F73F0C(v19, v6);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  if (!*(void *)(v8 + 16))
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v9 = *(void *)(v5 + v3);
  if (!v9) {
    goto LABEL_17;
  }
  if (qword_1EBBC10F0 != -1) {
    swift_once();
  }
  uint64_t v10 = v9 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version;
  swift_beginAccess();
  uint64_t v11 = *(void *)(v10 + 8);
  uint64_t v12 = MEMORY[0x1E4FBC868];
  uint64_t v17 = MEMORY[0x1E4FBC868];
  uint64_t v18 = v11;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1C3F73AF0((uint64_t)&v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v13 = qword_1EBBC00D0;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  type metadata accessor for ReplicaState();
  sub_1C4497A58();
  swift_release();
  uint64_t v14 = v17;
  type metadata accessor for CapsuleRef();
  swift_allocObject();
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_1C3F73C60(v15, v14);
  swift_release();
  *(void *)(v5 + v3) = v16;
  uint64_t result = swift_release();
  if (*(void *)(v5 + v3))
  {
    uint64_t v17 = v12;
    uint64_t v18 = v8;
    sub_1C3F73F0C(&v17, v6);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1C3F73AF0(uint64_t a1)
{
  return sub_1C3F7065C(a1, (uint64_t)&unk_1F1FA1290, (uint64_t)sub_1C3F62984, (uint64_t)&block_descriptor_13_0);
}

uint64_t sub_1C3F73B18(uint64_t result, uint64_t a2, uint64_t a3, __int16 a4)
{
  uint64_t v5 = result;
  if (qword_1EBBC0320 != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v6 = qword_1EBBC59D8;
  unint64_t v7 = qword_1EBBC59E0;
  switch(qword_1EBBC59E0 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(qword_1EBBC59D8), qword_1EBBC59D8)) {
        goto LABEL_7;
      }
      __break(1u);
      goto LABEL_10;
    case 2uLL:
      if (__OFSUB__(*(void *)(qword_1EBBC59D8 + 24), *(void *)(qword_1EBBC59D8 + 16)))
      {
LABEL_10:
        __break(1u);
      }
      else
      {
LABEL_7:
        sub_1C3F7E324(qword_1EBBC59D8, qword_1EBBC59E0);
LABEL_8:
        sub_1C3F79914();
        sub_1C4496278();
        sub_1C3F7E2CC(v6, v7);
        uint64_t result = sub_1C4497B78();
        *(_WORD *)(v5 + 6) = a4;
      }
      return result;
    default:
      goto LABEL_8;
  }
}

uint64_t sub_1C3F73C60(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1C4496678();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PartiallyOrderedReferenceMap();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = OBJC_IVAR____TtC9Coherence10CapsuleRef_caches;
  *(void *)(v2 + v12) = sub_1C3F758A0(MEMORY[0x1E4FBC860]);
  uint64_t v13 = a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  sub_1C3F8F520(v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
  sub_1C3F75CB8((uint64_t)v11, v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
  uint64_t v14 = (void *)(a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_isUpdated);
  swift_beginAccess();
  *(void *)(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_isUpdated) = *v14;
  uint64_t v15 = (uint64_t *)(a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  swift_beginAccess();
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = (void *)(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  *uint64_t v18 = v17;
  v18[1] = v16;
  *(void *)(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_replicaState) = a2;
  *(void *)(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration) = *(void *)(a1
                                                                                        + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration);
  uint64_t v19 = (void *)(a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets);
  swift_beginAccess();
  *(void *)(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets) = *v19;
  uint64_t v20 = a1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v20, v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID, v8, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t *sub_1C3F73F0C(uint64_t *result, uint64_t a2)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  if (*(void *)(v5 + 16) || *(void *)(v4 + 16))
  {
    if (qword_1EBBC10F0 != -1) {
      uint64_t result = (uint64_t *)swift_once();
    }
    MEMORY[0x1F4188790](result);
    swift_retain();
    sub_1C4497A58();
    swift_release();
    swift_beginAccess();
    sub_1C3F7474C(a2);
    swift_endAccess();
    if (*(void *)(v8 + 16))
    {
      swift_beginAccess();
      sub_1C3F8D910(v6, v7, v8);
      swift_endAccess();
      swift_beginAccess();
      sub_1C3F74104(v6, v7, v8);
      swift_endAccess();
      *(void *)(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration) = v6;
    }
    swift_bridgeObjectRelease();
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    swift_retain();
    sub_1C3F70918((uint64_t)&v6);
    return (uint64_t *)swift_release();
  }
  return result;
}

uint64_t sub_1C3F74104(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v40 = (int *)type metadata accessor for PartiallyOrderedReferenceMap();
  uint64_t v41 = v3;
  uint64_t v35 = (uint64_t *)(v3 + v40[7]);
  uint64_t v33 = *v35 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(*v35 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(*v35 + 56);
  int64_t v34 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v39 = *v35;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_23;
    }
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_37:
      __break(1u);
      return result;
    }
    if (v11 >= v34) {
      goto LABEL_30;
    }
    unint64_t v12 = *(void *)(v33 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v34) {
        goto LABEL_30;
      }
      unint64_t v12 = *(void *)(v33 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v34) {
          goto LABEL_30;
        }
        unint64_t v12 = *(void *)(v33 + 8 * v8);
        if (!v12) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_23:
    uint64_t v14 = (uint64_t *)(*(void *)(v39 + 48) + 16 * v10);
    uint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    uint64_t v17 = (uint64_t *)(v41 + v40[5]);
    sub_1C3F7E324(*v14, v15);
    uint64_t v18 = sub_1C3F84E10(v42, v16, v15);
    if (*(void *)(v19 + 16)) {
      sub_1C3F8D910(a1, a2 & 1, a3);
    }
    ((void (*)(_OWORD *, void))v18)(v42, 0);
    uint64_t v20 = *v17;
    if (!*(void *)(*v17 + 16)) {
      goto LABEL_5;
    }
    sub_1C3F7E324(v16, v15);
    uint64_t v21 = sub_1C3F850CC(v16, v15);
    if ((v22 & 1) == 0)
    {
      sub_1C3F7E2CC(v16, v15);
LABEL_5:
      sub_1C3F833F4(v16, v15, v42);
      sub_1C3F6C6F0(*(uint64_t *)&v42[0], *((unint64_t *)&v42[0] + 1));
      goto LABEL_6;
    }
    id v23 = (uint64_t *)(*(void *)(v20 + 56) + 48 * v21);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    uint64_t v27 = v23[2];
    uint64_t v26 = v23[3];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1C3F7E2CC(v16, v15);
    if (!v27) {
      goto LABEL_5;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1C3F84B88(v24, v25, v27);
    uint64_t v28 = *(void *)(v26 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v28) {
      goto LABEL_5;
    }
LABEL_6:
    uint64_t result = sub_1C3F7E2CC(v16, v15);
  }
  int64_t v13 = v11 + 3;
  if (v13 < v34)
  {
    unint64_t v12 = *(void *)(v33 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_37;
        }
        if (v8 >= v34) {
          goto LABEL_30;
        }
        unint64_t v12 = *(void *)(v33 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_22;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_22;
  }
LABEL_30:
  uint64_t result = swift_release();
  uint64_t v29 = *(void *)(*(void *)(v41 + v40[6]) + 16);
  if (v29)
  {
    for (unint64_t i = 0; i != v29; ++i)
    {
      uint64_t v31 = (uint64_t (*)(_OWORD *, void))sub_1C3F74484((uint64_t)v42, i);
      if (*v32) {
        sub_1C3F8D910(a1, a2 & 1, a3);
      }
      uint64_t result = v31(v42, 0);
    }
  }
  return result;
}

uint64_t sub_1C3F74484(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (void *)*v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = (uint64_t)v4;
  if (result)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)sub_1C3F74514(v4);
  uint64_t v4 = (void *)result;
  *uint64_t v2 = result;
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v4[2] > a2) {
    return (uint64_t)nullsub_1;
  }
LABEL_7:
  __break(1u);
  return result;
}

void *sub_1C3F74514(void *a1)
{
  return sub_1C3F74528(0, a1[2], 0, a1);
}

void *sub_1C3F74528(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF1A0);
      unint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      unint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1C3F74650(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C3F74650(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3F7474C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(type metadata accessor for PartiallyOrderedReferenceMap() + 28));
  uint64_t v22 = v2 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v2 + 56);
  int64_t v23 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_22;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v23) {
      return swift_release();
    }
    unint64_t v11 = *(void *)(v22 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v23) {
        return swift_release();
      }
      unint64_t v11 = *(void *)(v22 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v23) {
          return swift_release();
        }
        unint64_t v11 = *(void *)(v22 + 8 * v7);
        if (!v11) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_22:
    int64_t v13 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    sub_1C3F7E324(*v13, v15);
    sub_1C3F7E324(v14, v15);
    uint64_t result = (uint64_t)sub_1C3F84E10(v24, v14, v15);
    uint64_t v17 = (void (*)(void *, void))result;
    if (v16[2])
    {
      uint64_t v18 = v16;
      if (!*v16) {
        goto LABEL_30;
      }
      uint64_t v19 = *(uint64_t (**)(uint64_t))(*(void *)*v16 + 144);
      uint64_t v20 = swift_retain();
      LOBYTE(v19) = v19(v20);
      swift_release();
      if (v19)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          *uint64_t v18 = (*(uint64_t (**)(void))(*(void *)*v18 + 160))();
          swift_release();
        }
        (*(void (**)(uint64_t))(*(void *)*v18 + 152))(a1);
      }
    }
    v17(v24, 0);
    sub_1C3F7E2CC(v14, v15);
    uint64_t result = sub_1C3F7E2CC(v14, v15);
  }
  int64_t v12 = v10 + 3;
  if (v12 >= v23) {
    return swift_release();
  }
  unint64_t v11 = *(void *)(v22 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v23) {
      return swift_release();
    }
    unint64_t v11 = *(void *)(v22 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1C3F74A10()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 264);
  uint64_t v4 = sub_1C4497B38();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int64_t v7 = (char *)&v12 - v6;
  uint64_t v8 = (uint64_t)v0 + *(void *)(v1 + 280);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  uint64_t v9 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v3);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    char v11 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v2 + 272) + 16) + 56))(v3);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v3);
    return v11 & 1;
  }
  return result;
}

uint64_t sub_1C3F74BE8(uint64_t a1)
{
  uint64_t v2 = sub_1C4496678();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PartiallyOrderedReferenceMap();
  int64_t v7 = (int *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C4496668();
  uint64_t v10 = MEMORY[0x1E4FBC860];
  *(void *)&v9[v7[7]] = sub_1C3F75A24(MEMORY[0x1E4FBC860]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF1A0);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1C449B490;
  *(void *)(v11 + 32) = 0;
  *(void *)(v11 + 40) = 0;
  uint64_t v12 = MEMORY[0x1E4FBC870];
  *(void *)(v11 + 48) = MEMORY[0x1E4FBC870];
  *(void *)&v9[v7[8]] = v11;
  *(void *)&v9[v7[9]] = v12;
  sub_1C4496668();
  type metadata accessor for CapsuleRef();
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = OBJC_IVAR____TtC9Coherence10CapsuleRef_caches;
  *(void *)(v13 + v14) = sub_1C3F758A0(v10);
  unint64_t v15 = (void *)(v13 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
  uint64_t v16 = MEMORY[0x1E4FBC868];
  *unint64_t v15 = MEMORY[0x1E4FBC868];
  v15[1] = v16;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(v13 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID, v5, v2);
  *(void *)(v13 + OBJC_IVAR____TtC9Coherence10CapsuleRef_replicaState) = a1;
  sub_1C3F8F450((uint64_t)v9, v13 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
  *(void *)(v13 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets) = sub_1C3F7E37C(v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1C3F8F5D4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
  *(void *)(v13 + OBJC_IVAR____TtC9Coherence10CapsuleRef_isUpdated) = v12;
  *(void *)(v13 + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration) = 0;
  return v13;
}

uint64_t sub_1C3F74E7C@<X0>(char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v105 = a3;
  uint64_t v106 = a5;
  uint64_t v107 = a4;
  uint64_t v90 = a8;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0FA0);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v92 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = (int *)type metadata accessor for PartiallyOrderedReferenceMap();
  uint64_t v14 = MEMORY[0x1F4188790](v97);
  uint64_t v93 = (uint64_t)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v96 = (uint64_t)&v84 - v16;
  uint64_t v95 = sub_1C4496678();
  uint64_t v101 = *(void *)(v95 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v95);
  uint64_t v91 = (uint64_t)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v94 = (char *)&v84 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v100 = (uint64_t)&v84 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBFC98);
  uint64_t v23 = v22 - 8;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v84 - v27;
  uint64_t v99 = a7;
  uint64_t v29 = type metadata accessor for Capsule();
  uint64_t v103 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (uint64_t *)((char *)&v84 - v30);
  char v32 = *a1;
  uint64_t v33 = (uint64_t)&v28[*(int *)(v23 + 72)];
  *uint64_t v28 = v32;
  *((_WORD *)v28 + 1) = a2;
  sub_1C3F75CB8(v105, v33, type metadata accessor for Proto_Document);
  *(_OWORD *)uint64_t v31 = xmmword_1C449BDD0;
  int64_t v34 = (char *)v31 + *(int *)(v29 + 36);
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 56);
  uint64_t v98 = a6;
  v35(v34, 1, 1, a6);
  uint64_t v105 = v29;
  uint64_t v36 = *(int *)(v29 + 40);
  uint64_t v102 = v31;
  *(uint64_t *)((char *)v31 + v36) = 0;
  uint64_t v37 = (uint64_t)&v26[*(int *)(v23 + 72)];
  *uint64_t v26 = v32;
  *((_WORD *)v26 + 1) = a2;
  sub_1C3F8F520(v33, v37, type metadata accessor for Proto_Document);
  char v112 = v32;
  uint64_t v38 = v106;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  uint64_t v39 = v107;
  swift_retain();
  swift_retain();
  uint64_t v40 = (uint64_t)v104;
  uint64_t v41 = sub_1C3FA1984(&v112, a2, v37, v39, v38);
  if (v40)
  {
    swift_release();
    swift_release();
    sub_1C3F962E0((uint64_t)v28, &qword_1EBBBFC98);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v103 + 8))(v102, v105);
  }
  else
  {
    uint64_t v42 = v97;
    uint64_t v89 = v36;
    uint64_t v104 = v28;
    uint64_t v44 = v100;
    uint64_t v43 = v101;
    uint64_t v45 = v41;
    uint64_t v46 = sub_1C3F75D20(&v108, &v110, v100, v98, v33, 0, v98, v99);
    uint64_t v47 = v103;
    uint64_t v48 = v46;
    uint64_t v98 = v108;
    uint64_t v99 = v45;
    unint64_t v88 = v109;
    uint64_t v49 = v110;
    unint64_t v50 = v111;
    uint64_t v87 = v110;
    unint64_t v86 = v111;
    uint64_t v51 = v96;
    sub_1C4496668();
    *(void *)(v51 + v42[5]) = sub_1C3F75A24(MEMORY[0x1E4FBC860]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF1A0);
    uint64_t v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_1C449B490;
    *(void *)(v52 + 32) = 0;
    *(void *)(v52 + 40) = 0;
    uint64_t v53 = MEMORY[0x1E4FBC870];
    *(void *)(v52 + 48) = MEMORY[0x1E4FBC870];
    *(void *)(v51 + v42[6]) = v52;
    *(void *)(v51 + v42[7]) = v53;
    uint64_t v108 = v49;
    unint64_t v109 = v50;
    sub_1C3F775BC(v48, &v108);
    swift_bridgeObjectRelease();
    uint64_t v97 = (int *)type metadata accessor for PartiallyOrderedReferenceMap;
    sub_1C3F8F520(v51, v93, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
    uint64_t v54 = *(void (**)(uint64_t, char *, uint64_t))(v43 + 16);
    uint64_t v84 = v43 + 16;
    uint64_t v85 = v54;
    uint64_t v55 = v95;
    v54((uint64_t)v94, (char *)v44, v95);
    uint64_t v56 = v91;
    sub_1C3F75BA4(v91);
    type metadata accessor for ReplicaState();
    uint64_t v57 = swift_allocObject();
    uint64_t v58 = v57 + OBJC_IVAR____TtC9Coherence12ReplicaState__replica;
    uint64_t v59 = type metadata accessor for Replica();
    uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56);
    v60(v58, 1, 1, v59);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v101 + 32))(v57 + OBJC_IVAR____TtC9Coherence12ReplicaState_identity, v56, v55);
    *(void *)(v57 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = 0;
    *(void *)(v57 + OBJC_IVAR____TtC9Coherence12ReplicaState_localAlternateCounter) = 0;
    uint64_t v61 = (uint64_t)v92;
    v60((uint64_t)v92, 1, 1, v59);
    swift_beginAccess();
    sub_1C3F6722C(v61, v58);
    swift_endAccess();
    type metadata accessor for CapsuleRef();
    uint64_t v62 = swift_allocObject();
    uint64_t v63 = OBJC_IVAR____TtC9Coherence10CapsuleRef_caches;
    uint64_t v64 = MEMORY[0x1E4FBC860];
    *(void *)(v62 + v63) = sub_1C3F758A0(MEMORY[0x1E4FBC860]);
    uint64_t v65 = (uint64_t *)(v62 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
    unint64_t v66 = v86;
    *uint64_t v65 = v87;
    v65[1] = v66;
    uint64_t v67 = v94;
    v85(v62 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID, v94, v55);
    *(void *)(v62 + OBJC_IVAR____TtC9Coherence10CapsuleRef_replicaState) = v57;
    uint64_t v68 = v93;
    unint64_t v69 = v97;
    sub_1C3F8F520(v93, v62 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references, (uint64_t (*)(void))v97);
    *(void *)(v62 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets) = sub_1C3F7E37C(v64);
    uint64_t v70 = *(char **)(v101 + 8);
    v101 += 8;
    uint64_t v94 = v70;
    ((void (*)(char *, uint64_t))v70)(v67, v55);
    sub_1C3F8F634(v68, (uint64_t (*)(void))v69);
    *(void *)(v62 + OBJC_IVAR____TtC9Coherence10CapsuleRef_isUpdated) = MEMORY[0x1E4FBC870];
    uint64_t v71 = (int *)OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration;
    *(void *)(v62 + OBJC_IVAR____TtC9Coherence10CapsuleRef_renameGeneration) = 0;
    uint64_t v72 = v102;
    uint64_t v73 = v89;
    swift_release();
    *(uint64_t *)((char *)v72 + v73) = v62;
    uint64_t v74 = *v72;
    unint64_t v75 = v72[1];
    uint64_t v76 = v98;
    unint64_t v77 = v88;
    *uint64_t v72 = v98;
    v72[1] = v77;
    unint64_t v78 = v77;
    sub_1C3F7E324(v76, v77);
    sub_1C3F6C6F0(v74, v75);
    uint64_t v108 = v76;
    unint64_t v109 = v78;
    sub_1C3F7E324(v76, v78);
    swift_retain();
    sub_1C3F78A70(&v108);
    uint64_t v97 = v71;
    uint64_t v80 = v95;
    sub_1C3F7E2CC(v76, v78);
    swift_release();
    uint64_t v81 = qword_1EBBC10F0;
    swift_retain();
    if (v81 != -1) {
      swift_once();
    }
    swift_retain();
    sub_1C4497A58();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_1C3F7E2CC(v76, v78);
    uint64_t v82 = v108;
    sub_1C3F8F634(v96, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
    ((void (*)(uint64_t, uint64_t))v94)(v100, v80);
    sub_1C3F962E0((uint64_t)v104, &qword_1EBBBFC98);
    *(void *)((char *)v97 + v62) = v82;
    swift_release();
    uint64_t v83 = v105;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v47 + 16))(v90, v72, v105);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v47 + 8))(v72, v83);
  }
}

unint64_t sub_1C3F758A0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39B090);
  uint64_t v2 = sub_1C4497FD8();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1C3F970C4(v6, (uint64_t)&v15, &qword_1EA39BF48);
    uint64_t v7 = v15;
    unint64_t v8 = v16;
    unint64_t result = sub_1C3F850CC(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1C3FF2864(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    void v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CapsuleRef()
{
  uint64_t result = qword_1EBBBEE30;
  if (!qword_1EBBBEE30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1C3F75A24(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF198);
  uint64_t v2 = (void *)sub_1C4497FD8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = a1 + 40;
  while (1)
  {
    uint64_t v5 = *(void *)(v4 - 8);
    unint64_t v6 = *(void *)v4;
    uint64_t v8 = *(void *)(v4 + 8);
    uint64_t v7 = *(void *)(v4 + 16);
    long long v16 = *(_OWORD *)(v4 + 40);
    long long v17 = *(_OWORD *)(v4 + 24);
    sub_1C3F7E324(v5, *(void *)v4);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1C3F850CC(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = v2[7] + 48 * result;
    *(void *)uint64_t v12 = v8;
    *(void *)(v12 + 8) = v7;
    *(_OWORD *)(v12 + 16) = v17;
    *(_OWORD *)(v12 + 32) = v16;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v2[2] = v15;
    v4 += 64;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1C3F75BA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07E8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C44965E8();
  uint64_t v5 = sub_1C4496678();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1, v4, v5);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C3F75CB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F75D20(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v64 = a8;
  uint64_t v63 = a7;
  uint64_t v62 = a3;
  uint64_t v61 = a2;
  uint64_t v60 = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0560);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v70 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v67 = *(void *)(v68 - 8);
  MEMORY[0x1F4188790](v68);
  unint64_t v69 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07E8);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v71 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_1C4496678();
  uint64_t v65 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  uint64_t v72 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  MEMORY[0x1F4188790](v15 - 8);
  long long v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Proto_Version(0);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (uint64_t *)((char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0598);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1F4188790](v25);
  uint64_t v77 = (uint64_t)&v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(a5 + *(int *)(type metadata accessor for Proto_Document(0) + 20));
  uint64_t v28 = v27 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  sub_1C3F970C4(v28, (uint64_t)v24, &qword_1EBBC0598);
  uint64_t v29 = type metadata accessor for Proto_Document.OneOf_Root(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v24, 1, v29) == 1)
  {
    sub_1C3F962E0((uint64_t)v24, &qword_1EBBC0598);
LABEL_7:
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v33 = 0xD000000000000019;
    *(void *)(v33 + 8) = 0x80000001C44B1620;
    *(unsigned char *)(v33 + 16) = 0;
    swift_willThrow();
    return v19;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    sub_1C3F9229C((uint64_t)v24, type metadata accessor for Proto_Document.OneOf_Root);
    goto LABEL_7;
  }
  sub_1C3F9775C((uint64_t)v24, v77, type metadata accessor for Proto_Reference);
  uint64_t v30 = v27 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  sub_1C3F970C4(v30, (uint64_t)v17, &qword_1EBBC0578);
  uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v19 += 48;
  if (v31(v17, 1, v18) == 1)
  {
    uint64_t v32 = MEMORY[0x1E4FBC860];
    void *v21 = MEMORY[0x1E4FBC860];
    v21[1] = v32;
    sub_1C4496888();
    sub_1C3F962E0((uint64_t)v17, &qword_1EBBC0578);
  }
  else
  {
    sub_1C3F9775C((uint64_t)v17, (uint64_t)v21, type metadata accessor for Proto_Version);
  }
  uint64_t v34 = v74;
  swift_retain();
  uint64_t v35 = v73;
  sub_1C3F8F9D0(v21, v34, &v76);
  if (v35)
  {
    sub_1C3F9229C(v77, type metadata accessor for Proto_Reference);
    return v19;
  }
  uint64_t v59 = *((void *)&v76 + 1);
  uint64_t v73 = v76;
  uint64_t v36 = v27
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid;
  uint64_t result = swift_beginAccess();
  uint64_t v38 = *(void *)v36;
  unint64_t v39 = *(void *)(v36 + 8);
  uint64_t v41 = (uint64_t)v71;
  uint64_t v40 = v72;
  switch(v39 >> 62)
  {
    case 1uLL:
      LODWORD(v42) = HIDWORD(v38) - v38;
      if (!__OFSUB__(HIDWORD(v38), v38))
      {
        uint64_t v42 = (int)v42;
        goto LABEL_15;
      }
      __break(1u);
      goto LABEL_31;
    case 2uLL:
      uint64_t v44 = *(void *)(v38 + 16);
      uint64_t v43 = *(void *)(v38 + 24);
      BOOL v45 = __OFSUB__(v43, v44);
      uint64_t v42 = v43 - v44;
      if (!v45) {
        goto LABEL_15;
      }
LABEL_31:
      __break(1u);
      goto LABEL_32;
    case 3uLL:
      goto LABEL_17;
    default:
      uint64_t v42 = BYTE6(v39);
LABEL_15:
      if (v42 != 16)
      {
LABEL_17:
        uint64_t v46 = v65;
        uint64_t v47 = v66;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v71, 1, 1, v66);
LABEL_18:
        uint64_t v49 = v69;
        uint64_t v48 = (uint64_t)v70;
        sub_1C4496668();
        sub_1C3F962E0(v41, &qword_1EBBC07E8);
        goto LABEL_19;
      }
      sub_1C3F7E324(*(void *)v36, *(void *)(v36 + 8));
      sub_1C3FA2BEC(v38, v39);
      uint64_t v46 = v65;
      uint64_t v47 = v66;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v41, 0, 1, v66);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v41, 1, v47) == 1) {
        goto LABEL_18;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v40, v41, v47);
      uint64_t v49 = v69;
      uint64_t v48 = (uint64_t)v70;
LABEL_19:
      uint64_t v50 = *(void *)(v77 + *(int *)(v25 + 20))
          + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
      swift_beginAccess();
      sub_1C3F970C4(v50, v48, &qword_1EBBC0560);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v48, 1, v68) == 1)
      {
        void *v49 = MEMORY[0x1E4FBC860];
        v49[1] = sub_1C4496868();
        v49[2] = v51;
        sub_1C4496888();
        sub_1C3F962E0(v48, &qword_1EBBC0560);
      }
      else
      {
        sub_1C3F9775C(v48, (uint64_t)v49, type metadata accessor for Proto_KeyPath);
      }
      swift_retain();
      uint64_t result = sub_1C3F766DC((uint64_t)v49, v75);
      if (*(void *)(v34 + 16))
      {
        uint64_t v53 = v75[0];
        uint64_t v52 = v75[1];
        swift_retain();
        sub_1C3F76810(v63, v75, v34);
        swift_release();
        uint64_t v54 = v60;
        *uint64_t v60 = v53;
        v54[1] = v52;
        uint64_t v55 = v61;
        uint64_t v56 = v59;
        void *v61 = v73;
        v55[1] = v56;
        uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v46 + 16))(v62, v40, v47);
        uint64_t v57 = *(void *)(v34 + 16);
        if (v57)
        {
          uint64_t v58 = *(void (**)(char *, uint64_t))(v46 + 8);
          swift_retain();
          v58(v40, v47);
          sub_1C3F9229C(v77, type metadata accessor for Proto_Reference);
          swift_beginAccess();
          uint64_t v19 = *(void *)(v57 + 24);
          swift_bridgeObjectRetain();
          swift_release();
          return v19;
        }
      }
      else
      {
LABEL_32:
        __break(1u);
      }
      __break(1u);
      return result;
  }
}

uint64_t sub_1C3F766DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_3;
      }
      goto LABEL_7;
    case 2uLL:
      if (*(void *)(v2 + 16) == *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_7;
    default:
      if ((v3 & 0xFF000000000000) != 0)
      {
LABEL_3:
        swift_release();
        sub_1C3F7E324(v2, v3);
        uint64_t result = sub_1C3F8B048(a1, type metadata accessor for Proto_KeyPath);
        *a2 = v2;
        a2[1] = v3;
      }
      else
      {
LABEL_7:
        sub_1C3FE3FF0();
        swift_allocError();
        *(void *)uint64_t v7 = 0xD000000000000016;
        *(void *)(v7 + 8) = 0x80000001C44B1170;
        *(unsigned char *)(v7 + 16) = 0;
        swift_willThrow();
        swift_release();
        return sub_1C3F8B048(a1, type metadata accessor for Proto_KeyPath);
      }
      return result;
  }
}

uint64_t sub_1C3F76810(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  type metadata accessor for CRDecodeContext.DecodingReference();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v5;
  *(void *)(v7 + 24) = v6;
  swift_beginAccess();
  sub_1C3F7E324(v5, v6);
  sub_1C3F7E324(v5, v6);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = v3[2];
  void v3[2] = 0x8000000000000000;
  sub_1C3F76930(v7, v5, v6, isUniquelyReferenced_nonNull_native);
  void v3[2] = v10;
  swift_bridgeObjectRelease();
  sub_1C3F7E2CC(v5, v6);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t))(*v3 + 168))(a3);
}

uint64_t sub_1C3F76930(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1C3F850CC(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1C40684B8();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1C3F76AA4(v15, a4 & 1);
  uint64_t v21 = sub_1C3F850CC(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = sub_1C4498558();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;
  return sub_1C3F7E324(a2, a3);
}

uint64_t sub_1C3F76AA4(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC858);
  uint64_t v6 = sub_1C4497FC8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v32 = v2;
  uint64_t v33 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v33 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v33 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v32;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v33 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v33 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    long long v34 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
    {
      sub_1C3F7E324(v34, *(void *)(*(void *)(v5 + 48) + 16 * v21 + 8));
      swift_retain();
    }
    sub_1C44985F8();
    sub_1C4496568();
    uint64_t result = sub_1C4498628();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      long long v19 = v34;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      long long v19 = v34;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v18) = v19;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v30;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v32;
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
  if (v31 >= 64) {
    bzero(v23, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v31;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

uint64_t sub_1C3F76DB0(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t *)(v1 + 16);
  uint64_t v64 = (uint64_t *)(v1 + 24);
  uint64_t result = swift_beginAccess();
  uint64_t v60 = (uint64_t *)(v1 + 16);
  while (1)
  {
    unint64_t v10 = (void *)*v4;
    unint64_t v11 = *(void *)(*v4 + 64);
    char v12 = *(unsigned char *)(*v4 + 32);
    uint64_t v13 = 1 << v12;
    if (v11)
    {
      uint64_t v14 = 0;
      goto LABEL_21;
    }
    unsigned int v15 = v12 & 0x3F;
    if (v15 < 7) {
      return result;
    }
    unint64_t v11 = v10[9];
    if (v11)
    {
      uint64_t v14 = 1;
      goto LABEL_21;
    }
    if (v15 < 8) {
      return result;
    }
    unint64_t v11 = v10[10];
    if (v11)
    {
      uint64_t v14 = 2;
      goto LABEL_21;
    }
    unint64_t v11 = v10[11];
    if (!v11) {
      break;
    }
    uint64_t v14 = 3;
LABEL_21:
    unint64_t v19 = __clz(__rbit64(v11));
    uint64_t v20 = v19 + (v14 << 6);
    if (v20 == v13) {
      return result;
    }
    if (v20 < 0 || v20 >= v13)
    {
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      uint64_t result = sub_1C4498558();
      __break(1u);
      return result;
    }
    if (((*(void *)(*v4 + 64 + (((unint64_t)v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
      goto LABEL_49;
    }
    unint64_t v21 = (uint64_t *)(v10[6] + 16 * v20);
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    unint64_t v24 = *(void **)(v10[7] + 8 * v20);
    swift_retain_n();
    sub_1C3F7E324(v22, v23);
    sub_1C3F7E2CC(v22, v23);
    swift_release();
    uint64_t v25 = v24[2];
    unint64_t v26 = v24[3];
    swift_beginAccess();
    sub_1C3F7E324(v25, v26);
    swift_bridgeObjectRetain();
    unint64_t v27 = sub_1C3F850CC(v25, v26);
    char v29 = v28;
    swift_bridgeObjectRelease();
    if (v29)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v31 = *v4;
      uint64_t v71 = (void *)*v4;
      *uint64_t v4 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1C40684B8();
        uint64_t v31 = (uint64_t)v71;
      }
      sub_1C3F7E2CC(*(void *)(*(void *)(v31 + 48) + 16 * v27), *(void *)(*(void *)(v31 + 48) + 16 * v27 + 8));
      sub_1C3F773D4(v27, v31);
      *uint64_t v4 = v31;
      swift_bridgeObjectRelease();
      sub_1C3F7E2CC(v25, v26);
    }
    else
    {
      sub_1C3F7E2CC(v25, v26);
    }
    swift_endAccess();
    swift_release();
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*v24 + 96))(v70, v62, a1);
    if (v3) {
      return swift_release();
    }
    uint64_t v7 = v70[0];
    uint64_t v32 = v70[1];
    uint64_t v33 = v70[2];
    uint64_t v34 = v70[3];
    uint64_t v35 = v70[4];
    uint64_t v69 = v70[5];
    uint64_t v37 = v24[2];
    unint64_t v36 = v24[3];
    swift_beginAccess();
    uint64_t v66 = v7;
    uint64_t v67 = v33;
    uint64_t v65 = v32;
    uint64_t v68 = v34;
    if (v33)
    {
      sub_1C3F7E324(v37, v36);
      sub_1C3F84BF8(v7, v32, v33);
      char v38 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v71 = (void *)*v64;
      unint64_t v39 = v71;
      *uint64_t v64 = 0x8000000000000000;
      unint64_t v63 = v36;
      unint64_t v41 = sub_1C3F850CC(v37, v36);
      uint64_t v42 = v39[2];
      BOOL v43 = (v40 & 1) == 0;
      uint64_t v44 = v42 + v43;
      if (__OFADD__(v42, v43)) {
        goto LABEL_50;
      }
      char v45 = v40;
      if (v39[3] >= v44)
      {
        uint64_t v46 = v37;
        if ((v38 & 1) == 0) {
          sub_1C3F85144();
        }
      }
      else
      {
        sub_1C3F77ABC(v44, v38);
        uint64_t v46 = v37;
        uint64_t v47 = sub_1C3F850CC(v37, v63);
        if ((v45 & 1) != (v48 & 1)) {
          goto LABEL_52;
        }
        unint64_t v41 = v47;
      }
      uint64_t v54 = v71;
      if (v45)
      {
        uint64_t v6 = (uint64_t *)(v71[7] + 48 * v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v8 = v65;
        uint64_t v7 = v66;
        *uint64_t v6 = v66;
        v6[1] = v65;
        uint64_t v9 = v67;
        void v6[2] = v67;
        v6[3] = v68;
        v6[4] = v35;
        v6[5] = v69;
      }
      else
      {
        v71[(v41 >> 6) + 8] |= 1 << v41;
        uint64_t v55 = (uint64_t *)(v54[6] + 16 * v41);
        *uint64_t v55 = v46;
        v55[1] = v63;
        uint64_t v56 = (uint64_t *)(v54[7] + 48 * v41);
        uint64_t v8 = v65;
        uint64_t v7 = v66;
        *uint64_t v56 = v66;
        v56[1] = v65;
        uint64_t v9 = v67;
        v56[2] = v67;
        v56[3] = v68;
        v56[4] = v35;
        v56[5] = v69;
        uint64_t v57 = v54[2];
        BOOL v58 = __OFADD__(v57, 1);
        uint64_t v59 = v57 + 1;
        if (v58) {
          goto LABEL_51;
        }
        v54[2] = v59;
        sub_1C3F7E324(v46, v63);
      }
      *uint64_t v64 = (uint64_t)v54;
      swift_bridgeObjectRelease();
      sub_1C3F7E2CC(v46, v63);
      uint64_t v3 = 0;
      uint64_t v4 = v60;
    }
    else
    {
      sub_1C3F7E324(v37, v36);
      swift_bridgeObjectRetain();
      unint64_t v49 = sub_1C3F850CC(v37, v36);
      char v51 = v50;
      swift_bridgeObjectRelease();
      if (v51)
      {
        char v52 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v53 = *v64;
        uint64_t v71 = (void *)*v64;
        *uint64_t v64 = 0x8000000000000000;
        uint64_t v3 = 0;
        uint64_t v4 = v60;
        if ((v52 & 1) == 0)
        {
          sub_1C3F85144();
          uint64_t v53 = (uint64_t)v71;
        }
        sub_1C3F7E2CC(*(void *)(*(void *)(v53 + 48) + 16 * v49), *(void *)(*(void *)(v53 + 48) + 16 * v49 + 8));
        sub_1C4117B9C(v49, v53);
        *uint64_t v64 = v53;
        swift_bridgeObjectRelease();
        sub_1C3F7E2CC(v37, v36);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v7 = v66;
        uint64_t v9 = 0;
        uint64_t v8 = v65;
      }
      else
      {
        sub_1C3F7E2CC(v37, v36);
        uint64_t v9 = 0;
        uint64_t v8 = v65;
        uint64_t v3 = 0;
        uint64_t v4 = v60;
      }
    }
    swift_endAccess();
    sub_1C3F84B88(v7, v8, v9);
    uint64_t result = swift_release();
  }
  uint64_t v16 = 0;
  unint64_t v17 = (unint64_t)(v13 + 63) >> 6;
  if (v17 <= 4) {
    unint64_t v17 = 4;
  }
  unint64_t v18 = v17 - 4;
  while (v18 != v16)
  {
    unint64_t v11 = v10[v16++ + 12];
    if (v11)
    {
      uint64_t v14 = v16 + 3;
      goto LABEL_21;
    }
  }
  return result;
}

unint64_t sub_1C3F773D4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_1C4497C08();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        unint64_t v11 = v9[1];
        sub_1C44985F8();
        sub_1C3F7E324(v10, v11);
        sub_1C4496568();
        uint64_t v12 = sub_1C4498628();
        uint64_t result = sub_1C3F7E2CC(v10, v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          unsigned int v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *unsigned int v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = (void *)(v17 + 8 * v3);
          unint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *unint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1C3F775BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v25 = a2[1];
  uint64_t v26 = *a2;
  uint64_t v27 = type metadata accessor for PartiallyOrderedReferenceMap();
  uint64_t v5 = *(int *)(v27 + 20);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v28[0] = *(void *)(v3 + v5);
  *(void *)(v3 + v5) = 0x8000000000000000;
  sub_1C3F7783C(a1, (uint64_t)sub_1C3F7806C, 0, isUniquelyReferenced_nonNull_native, v28);
  *(void *)(v3 + v5) = v28[0];
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  while (v10)
  {
    unint64_t v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v15 = v14 | (v13 << 6);
LABEL_20:
    if (*(void *)(*(void *)(*(void *)(a1 + 56) + 48 * v15 + 24) + 16))
    {
      unint64_t v19 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      sub_1C3F7E324(*v19, v21);
      sub_1C3F81BF8(v28, v20, v21);
      uint64_t result = sub_1C3F7E2CC(v28[0], v28[1]);
    }
  }
  int64_t v16 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v16 >= v11) {
    goto LABEL_22;
  }
  unint64_t v17 = *(void *)(v7 + 8 * v16);
  ++v13;
  if (v17) {
    goto LABEL_19;
  }
  int64_t v13 = v16 + 1;
  if (v16 + 1 >= v11) {
    goto LABEL_22;
  }
  unint64_t v17 = *(void *)(v7 + 8 * v13);
  if (v17) {
    goto LABEL_19;
  }
  int64_t v13 = v16 + 2;
  if (v16 + 2 >= v11) {
    goto LABEL_22;
  }
  unint64_t v17 = *(void *)(v7 + 8 * v13);
  if (v17)
  {
LABEL_19:
    unint64_t v10 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
    goto LABEL_20;
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v11)
  {
LABEL_22:
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF1A0);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1C449B490;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_1C3F7829C(a1);
    *(void *)(v22 + 32) = v26;
    *(void *)(v22 + 40) = v25;
    *(void *)(v22 + 48) = v23;
    uint64_t v24 = *(int *)(v27 + 24);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + v24) = v22;
    return result;
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17)
  {
    int64_t v13 = v18;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v13 >= v11) {
      goto LABEL_22;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_19;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1C3F7783C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  char v48 = a5;
  uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = ~v6;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = -v6;
  uint64_t v41 = a1;
  uint64_t v42 = a1 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  uint64_t v43 = v7;
  uint64_t v44 = 0;
  uint64_t v45 = v10 & v8;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1C3F77E24(&v34);
  uint64_t v11 = v37;
  if (v37)
  {
    while (1)
    {
      long long v14 = v34;
      uint64_t v15 = v35;
      uint64_t v16 = v36;
      uint64_t v31 = v38;
      uint64_t v32 = v39;
      uint64_t v33 = v40;
      unint64_t v17 = (void *)*v48;
      unint64_t v19 = sub_1C3F850CC(v34, *((unint64_t *)&v34 + 1));
      uint64_t v20 = v17[2];
      BOOL v21 = (v18 & 1) == 0;
      uint64_t v22 = v20 + v21;
      if (__OFADD__(v20, v21)) {
        break;
      }
      char v23 = v18;
      if (v17[3] >= v22)
      {
        if ((a4 & 1) == 0) {
          sub_1C3F85144();
        }
      }
      else
      {
        sub_1C3F77ABC(v22, a4 & 1);
        uint64_t v24 = sub_1C3F850CC(v14, *((unint64_t *)&v14 + 1));
        if ((v23 & 1) != (v25 & 1)) {
          goto LABEL_19;
        }
        unint64_t v19 = v24;
      }
      uint64_t v26 = (void *)*v48;
      if (v23)
      {
        sub_1C3F7E2CC(v14, *((unint64_t *)&v14 + 1));
        int64_t v13 = (void *)(v26[7] + 48 * v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        *int64_t v13 = v15;
        v13[1] = v16;
        v13[2] = v11;
        void v13[3] = v31;
        v13[4] = v32;
        v13[5] = v33;
      }
      else
      {
        v26[(v19 >> 6) + 8] |= 1 << v19;
        *(_OWORD *)(v26[6] + 16 * v19) = v14;
        uint64_t v27 = (void *)(v26[7] + 48 * v19);
        void *v27 = v15;
        v27[1] = v16;
        v27[2] = v11;
        v27[3] = v31;
        v27[4] = v32;
        v27[5] = v33;
        uint64_t v28 = v26[2];
        BOOL v29 = __OFADD__(v28, 1);
        uint64_t v30 = v28 + 1;
        if (v29) {
          goto LABEL_18;
        }
        v26[2] = v30;
      }
      sub_1C3F77E24(&v34);
      uint64_t v11 = v37;
      a4 = 1;
      if (!v37) {
        goto LABEL_5;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    uint64_t result = sub_1C4498558();
    __break(1u);
  }
  else
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1C3F7FCE8();
    return swift_release();
  }
  return result;
}

uint64_t sub_1C3F77ABC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF198);
  uint64_t v6 = sub_1C4497FC8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v11) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v34 + 8 * v23);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v34 + 8 * v14);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v11)
        {
LABEL_33:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v34 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v34 + 8 * v14);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    long long v31 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v22);
    uint64_t v32 = (long long *)(*(void *)(v5 + 56) + 48 * v22);
    long long v37 = v32[1];
    long long v38 = v31;
    long long v35 = *v32;
    long long v36 = v32[2];
    if ((a2 & 1) == 0)
    {
      sub_1C3F7E324(v31, *((unint64_t *)&v31 + 1));
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1C44985F8();
    sub_1C4496568();
    uint64_t result = sub_1C4498628();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      long long v19 = v38;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v15) >> 6;
      long long v19 = v38;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v17 == v28;
        if (v17 == v28) {
          unint64_t v17 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      unint64_t v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v18) = v19;
    uint64_t v20 = (_OWORD *)(*(void *)(v7 + 56) + 48 * v18);
    *uint64_t v20 = v35;
    v20[1] = v37;
    void v20[2] = v36;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v24, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1C3F77E24@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = *v1;
  int64_t v4 = v1[3];
  unint64_t v3 = v1[4];
  int64_t v5 = v4;
  if (!v3)
  {
    int64_t v19 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v20 = (unint64_t)(v1[2] + 64) >> 6;
    if (v19 < v20)
    {
      uint64_t v21 = v1[1];
      unint64_t v22 = *(void *)(v21 + 8 * v19);
      if (v22)
      {
LABEL_9:
        uint64_t v6 = (v22 - 1) & v22;
        unint64_t v7 = __clz(__rbit64(v22)) + (v19 << 6);
        int64_t v5 = v19;
        goto LABEL_3;
      }
      int64_t v23 = v4 + 2;
      int64_t v5 = v4 + 1;
      if (v4 + 2 < v20)
      {
        unint64_t v22 = *(void *)(v21 + 8 * v23);
        if (v22)
        {
LABEL_12:
          int64_t v19 = v23;
          goto LABEL_9;
        }
        int64_t v5 = v4 + 2;
        if (v4 + 3 < v20)
        {
          unint64_t v22 = *(void *)(v21 + 8 * (v4 + 3));
          if (v22)
          {
            int64_t v19 = v4 + 3;
            goto LABEL_9;
          }
          int64_t v23 = v4 + 4;
          int64_t v5 = v4 + 3;
          if (v4 + 4 < v20)
          {
            unint64_t v22 = *(void *)(v21 + 8 * v23);
            if (v22) {
              goto LABEL_12;
            }
            int64_t v19 = v4 + 5;
            int64_t v5 = v4 + 4;
            if (v4 + 5 < v20)
            {
              unint64_t v22 = *(void *)(v21 + 8 * v19);
              if (v22) {
                goto LABEL_9;
              }
              int64_t v5 = v20 - 1;
              int64_t v24 = v4 + 6;
              while (v20 != v24)
              {
                unint64_t v22 = *(void *)(v21 + 8 * v24++);
                if (v22)
                {
                  int64_t v19 = v24 - 1;
                  goto LABEL_9;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v5;
    v1[4] = 0;
    *a1 = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    return result;
  }
  uint64_t v6 = (v3 - 1) & v3;
  unint64_t v7 = __clz(__rbit64(v3)) | (v4 << 6);
LABEL_3:
  uint64_t v8 = (void *)(*(void *)(v2 + 48) + 16 * v7);
  unint64_t v10 = v8[1];
  uint64_t v11 = *(void *)(v2 + 56) + 48 * v7;
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = *(void *)(v11 + 24);
  uint64_t v14 = *(void *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 40);
  unint64_t v16 = (void (*)(void *))v1[5];
  v25[0] = *v8;
  uint64_t v9 = v25[0];
  v25[1] = v10;
  long long v17 = *(_OWORD *)v11;
  v1[3] = v5;
  v1[4] = v6;
  long long v26 = v17;
  uint64_t v27 = v12;
  uint64_t v28 = v13;
  uint64_t v29 = v14;
  uint64_t v30 = v15;
  sub_1C3F7E324(v9, v10);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(v25);
  sub_1C3F7E2CC(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1C3F7806C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v5;
  *(void *)(a2 + 48) = v6;
  *(void *)(a2 + 56) = v7;
  sub_1C3F7E324(v3, v2);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C3F780FC(uint64_t a1)
{
  sub_1C3F782A0();
  uint64_t result = sub_1C44976A8();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    sub_1C3F7E324(*v11, v13);
    sub_1C3F81BF8(v17, v12, v13);
    uint64_t result = sub_1C3F7E2CC(v17[0], v17[1]);
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_1C3F782A0()
{
  unint64_t result = qword_1EBBBC5C0;
  if (!qword_1EBBBC5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBBC5C0);
  }
  return result;
}

uint64_t type metadata accessor for CRDecodeContext.DecodingReference()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C3F7830C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 112);
  uint64_t v5 = v2[2];
  unint64_t v6 = v2[3];
  v10[0] = v5;
  v10[1] = v6;
  unint64_t v7 = *(void (**)(uint64_t, void *, uint64_t, uint64_t, void))(*(void *)a1 + 192);
  sub_1C3F7E324(v5, v6);
  v7(v4, v10, a2, v4, *(void *)(v3 + 120));
  return sub_1C3F7E2CC(v5, v6);
}

double sub_1C3F783F0@<D0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v57 = a4;
  unint64_t v54 = a1;
  uint64_t v55 = a5;
  uint64_t v60 = a6;
  uint64_t v52 = *(void *)(a4 - 8);
  uint64_t v53 = a3;
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  char v51 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v56 = (char *)&v50 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC158);
  MEMORY[0x1F4188790](v11 - 8);
  unint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBFBD0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (uint64_t *)((char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v50 - v20;
  MEMORY[0x1F4188790](v19);
  int64_t v23 = (char *)&v50 - v22;
  uint64_t v25 = *a2;
  unint64_t v24 = a2[1];
  swift_beginAccess();
  uint64_t v26 = *(void *)(v6 + 40);
  if (!*(void *)(v26 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
LABEL_7:
    sub_1C3F962E0((uint64_t)v13, &qword_1EBBBC158);
    double result = 0.0;
    long long v31 = v60;
    *uint64_t v60 = 0u;
    v31[1] = 0u;
    v31[2] = 0u;
    return result;
  }
  sub_1C3F7E324(v25, v24);
  swift_bridgeObjectRetain();
  uint64_t v27 = sub_1C3F850CC(v25, v24);
  if (v28)
  {
    sub_1C3F970C4(*(void *)(v26 + 56) + *(void *)(v15 + 72) * v27, (uint64_t)v13, qword_1EBBBFBD0);
    uint64_t v29 = 0;
  }
  else
  {
    uint64_t v29 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, v29, 1, v14);
  swift_bridgeObjectRelease();
  sub_1C3F7E2CC(v25, v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1) {
    goto LABEL_7;
  }
  uint64_t v32 = *(int *)(v14 + 48);
  uint64_t v33 = (uint64_t)&v23[v32];
  uint64_t v34 = (uint64_t)&v13[v32];
  sub_1C3F92D98((uint64_t)v13, (uint64_t)v23, type metadata accessor for Proto_Version);
  sub_1C3F92D98(v34, v33, type metadata accessor for Proto_CRDT);
  uint64_t v35 = (uint64_t)&v21[*(int *)(v14 + 48)];
  sub_1C3F78A08((uint64_t)v23, (uint64_t)v21, type metadata accessor for Proto_Version);
  sub_1C3F78A08(v33, v35, type metadata accessor for Proto_CRDT);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  uint64_t v36 = v53;
  swift_retain();
  uint64_t v37 = sub_1C3FB9A38(v35, v36);
  swift_release();
  sub_1C3FA3A5C((uint64_t)v21, type metadata accessor for Proto_Version);
  uint64_t v38 = *(void *)(*(void *)(v55 + 16) + 8);
  uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 8);
  uint64_t v40 = swift_retain();
  uint64_t v41 = v58;
  v39(v40, v57, v38);
  if (v41)
  {
    sub_1C3F962E0((uint64_t)v23, qword_1EBBBFBD0);
    swift_release();
  }
  else
  {
    uint64_t v42 = (uint64_t)v18 + *(int *)(v14 + 48);
    sub_1C3F78A08((uint64_t)v23, (uint64_t)v18, type metadata accessor for Proto_Version);
    sub_1C3F78A08(v33, v42, type metadata accessor for Proto_CRDT);
    swift_retain();
    sub_1C3F8F9D0(v18, v37, &v59);
    sub_1C3FA3A5C(v42, type metadata accessor for Proto_CRDT);
    long long v58 = v59;
    uint64_t v43 = (uint64_t)v51;
    uint64_t v44 = v52;
    uint64_t v45 = v56;
    uint64_t v46 = v57;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v51, v56, v57);
    sub_1C3F6BC4C(v43, v46, (uint64_t **)&v59);
    uint64_t v55 = v59;
    uint64_t v47 = MEMORY[0x1E4FBC860];
    unint64_t v54 = sub_1C3F7E4A4(MEMORY[0x1E4FBC860]);
    unint64_t v48 = sub_1C3F7E37C(v47);
    sub_1C3F7E4A4(v47);
    sub_1C3F7E37C(v47);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
    sub_1C3F962E0((uint64_t)v23, qword_1EBBBFBD0);
    unint64_t v49 = v60;
    *(void *)uint64_t v60 = v55;
    *((void *)v49 + 1) = 0;
    double result = *(double *)&v58;
    v49[1] = v58;
    *((void *)v49 + 4) = v54;
    *((void *)v49 + 5) = v48;
  }
  return result;
}

uint64_t sub_1C3F78A08(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void (*sub_1C3F78A70(uint64_t *a1))(uint64_t *, void)
{
  uint64_t v3 = type metadata accessor for PartiallyOrderedReferenceMap();
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v77 = &v72[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = &v72[-v6];
  uint64_t v75 = *a1;
  unint64_t v74 = a1[1];
  uint64_t v8 = MEMORY[0x1E4FBC860];
  unint64_t v9 = sub_1C3F7E4A4(MEMORY[0x1E4FBC860]);
  unint64_t v10 = sub_1C3F7E37C(v8);
  unint64_t v100 = v9;
  unint64_t v101 = v10;
  uint64_t v73 = v1;
  uint64_t v11 = v1 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  uint64_t v79 = v11;
  sub_1C3F8F450(v11, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
  uint64_t v76 = v3;
  uint64_t v12 = *(void *)&v7[*(int *)(v3 + 20)];
  uint64_t v13 = -1 << *(unsigned char *)(v12 + 32);
  uint64_t v14 = ~v13;
  uint64_t v15 = -v13;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  else {
    uint64_t v16 = -1;
  }
  uint64_t v17 = v16 & *(void *)(v12 + 64);
  swift_bridgeObjectRetain();
  sub_1C3F8F5D4((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
  uint64_t v95 = v12;
  uint64_t v96 = v12 + 64;
  uint64_t v97 = v14;
  uint64_t v98 = 0;
  uint64_t v99 = v17;
  sub_1C3FB0038((uint64_t)&v87);
  uint64_t v18 = v91;
  if (v91)
  {
    uint64_t v20 = v87;
    unint64_t v19 = v88;
    uint64_t v21 = v89;
    int64_t v22 = v92;
    int64_t v23 = v93;
    unint64_t v24 = v94;
    uint64_t v25 = type metadata accessor for RetainVisitor();
    do
    {
      unint64_t v80 = v24;
      int64_t v81 = v23;
      int64_t v82 = v22;
      unint64_t v102 = (unint64_t)v18;
      uint64_t v31 = swift_allocObject();
      uint64_t v32 = MEMORY[0x1E4FBC860];
      unint64_t v33 = sub_1C3F7E4A4(MEMORY[0x1E4FBC860]);
      double result = (void (*)(uint64_t *, void))sub_1C3F7E37C(v32);
      *(void *)(v31 + 16) = v33;
      *(void *)(v31 + 24) = result;
      if (!v21) {
        goto LABEL_53;
      }
      uint64_t v90 = v25;
      uint64_t v91 = &off_1F1F982A0;
      uint64_t v87 = v31;
      uint64_t v35 = *(void (**)(uint64_t *))(*(void *)v21 + 120);
      swift_retain();
      swift_retain();
      v35(&v87);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
      swift_release();
      swift_beginAccess();
      uint64_t v83 = v20;
      unint64_t v84 = v19;
      sub_1C3F7E324(v20, v19);
      uint64_t v37 = sub_1C3F84D7C(&v87, &v83);
      if (*(void *)(v36 + 16))
      {
        uint64_t v26 = v36;
        swift_beginAccess();
        uint64_t v27 = *(void *)(v31 + 16);
        uint64_t v28 = *(void *)(v31 + 24);
        unint64_t v78 = v19;
        *(void *)(v26 + 32) = v27;
        *(void *)(v26 + 40) = v28;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        ((void (*)(uint64_t *, void))v37)(&v87, 0);
        swift_endAccess();
        swift_bridgeObjectRelease();
        unint64_t v19 = v78;
        swift_bridgeObjectRelease();
        sub_1C3F7E2CC(v83, v84);
      }
      else
      {
        ((void (*)(uint64_t *, void))v37)(&v87, 0);
        sub_1C3F7E2CC(v83, v84);
        swift_endAccess();
      }
      swift_beginAccess();
      uint64_t v29 = *(void *)(v31 + 16);
      uint64_t v30 = *(void *)(v31 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1C3F7EDE8(v29, v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1C3F7E2CC(v20, v19);
      sub_1C3FB0038((uint64_t)&v87);
      uint64_t v20 = v87;
      unint64_t v19 = v88;
      uint64_t v21 = v89;
      uint64_t v18 = v91;
      int64_t v22 = v92;
      int64_t v23 = v93;
      unint64_t v24 = v94;
    }
    while (v91);
    unint64_t v9 = v100;
  }
  sub_1C3F7FCE8();
  uint64_t v38 = *(void *)(v9 + 64);
  unint64_t v80 = v9 + 64;
  uint64_t v39 = 1 << *(unsigned char *)(v9 + 32);
  if (v39 < 64) {
    uint64_t v40 = ~(-1 << v39);
  }
  else {
    uint64_t v40 = -1;
  }
  unint64_t v41 = v40 & v38;
  int64_t v81 = (unint64_t)(v39 + 63) >> 6;
  double result = (void (*)(uint64_t *, void))swift_bridgeObjectRetain();
  int64_t v42 = 0;
  while (1)
  {
    if (v41)
    {
      unint64_t v45 = __clz(__rbit64(v41));
      uint64_t v46 = (v41 - 1) & v41;
      unint64_t v47 = v45 | (v42 << 6);
      goto LABEL_34;
    }
    int64_t v48 = v42 + 1;
    if (__OFADD__(v42, 1))
    {
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if (v48 >= v81)
    {
      swift_release();
      uint64_t v50 = v75;
      goto LABEL_44;
    }
    unint64_t v49 = *(void *)(v80 + 8 * v48);
    ++v42;
    uint64_t v50 = v75;
    if (!v49)
    {
      int64_t v42 = v48 + 1;
      if (v48 + 1 >= v81) {
        goto LABEL_43;
      }
      unint64_t v49 = *(void *)(v80 + 8 * v42);
      if (!v49)
      {
        int64_t v42 = v48 + 2;
        if (v48 + 2 >= v81) {
          goto LABEL_43;
        }
        unint64_t v49 = *(void *)(v80 + 8 * v42);
        if (!v49) {
          break;
        }
      }
    }
LABEL_33:
    uint64_t v46 = (v49 - 1) & v49;
    unint64_t v47 = __clz(__rbit64(v49)) + (v42 << 6);
LABEL_34:
    uint64_t v52 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v47);
    uint64_t v54 = *v52;
    unint64_t v53 = v52[1];
    uint64_t v55 = *(void *)(*(void *)(v9 + 56) + 8 * v47);
    uint64_t v56 = v77;
    sub_1C3F8F450(v79, (uint64_t)v77, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
    uint64_t v57 = *(void *)&v56[*(int *)(v76 + 20)];
    uint64_t v58 = *(void *)(v57 + 16);
    sub_1C3F7E324(v54, v53);
    if (!v58) {
      goto LABEL_40;
    }
    sub_1C3F7E324(v54, v53);
    sub_1C3F7E324(v54, v53);
    uint64_t v59 = sub_1C3F850CC(v54, v53);
    if ((v60 & 1) == 0)
    {
      sub_1C3F7E2CC(v54, v53);
      sub_1C3F7E2CC(v54, v53);
LABEL_40:
      sub_1C3F8F5D4((uint64_t)v77, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
LABEL_41:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1C3FE3FF0();
      swift_allocError();
      *(void *)uint64_t v64 = 0xD000000000000013;
      *(void *)(v64 + 8) = 0x80000001C44B23F0;
      *(unsigned char *)(v64 + 16) = 0;
      swift_willThrow();
      sub_1C3F7E2CC(v54, v53);
      return (void (*)(uint64_t *, void))swift_release();
    }
    unint64_t v102 = v46;
    int64_t v82 = v42;
    uint64_t v61 = *(void *)(*(void *)(v57 + 56) + 48 * v59);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1C3F7E2CC(v54, v53);
    sub_1C3F7E2CC(v54, v53);
    sub_1C3F8F5D4((uint64_t)v77, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v61) {
      goto LABEL_41;
    }
    swift_release();
    swift_beginAccess();
    uint64_t v85 = v54;
    unint64_t v86 = v53;
    sub_1C3F7E324(v54, v53);
    unint64_t v63 = sub_1C3F84D7C(&v87, &v85);
    if (*(void *)(v62 + 16))
    {
      *(void *)(v62 + 8) = v55;
      ((void (*)(uint64_t *, void))v63)(&v87, 0);
      swift_endAccess();
      sub_1C3F7E2CC(v54, v53);
      uint64_t v43 = v85;
      unint64_t v44 = v86;
    }
    else
    {
      ((void (*)(uint64_t *, void))v63)(&v87, 0);
      sub_1C3F7E2CC(v85, v86);
      swift_endAccess();
      uint64_t v43 = v54;
      unint64_t v44 = v53;
    }
    double result = (void (*)(uint64_t *, void))sub_1C3F7E2CC(v43, v44);
    int64_t v42 = v82;
    unint64_t v41 = v102;
  }
  int64_t v51 = v48 + 3;
  if (v51 < v81)
  {
    unint64_t v49 = *(void *)(v80 + 8 * v51);
    if (!v49)
    {
      while (1)
      {
        int64_t v42 = v51 + 1;
        if (__OFADD__(v51, 1)) {
          goto LABEL_51;
        }
        if (v42 >= v81) {
          goto LABEL_43;
        }
        unint64_t v49 = *(void *)(v80 + 8 * v42);
        ++v51;
        if (v49) {
          goto LABEL_33;
        }
      }
    }
    int64_t v42 = v51;
    goto LABEL_33;
  }
LABEL_43:
  swift_release();
LABEL_44:
  unint64_t v65 = v101;
  swift_bridgeObjectRelease();
  uint64_t v66 = (unint64_t *)(v73 + OBJC_IVAR____TtC9Coherence10CapsuleRef_assets);
  swift_beginAccess();
  *uint64_t v66 = v65;
  double result = (void (*)(uint64_t *, void))swift_bridgeObjectRelease();
  unint64_t v67 = v74;
  if (v74 >> 60 == 15) {
    return result;
  }
  swift_beginAccess();
  uint64_t v83 = v50;
  unint64_t v84 = v67;
  sub_1C3F7E324(v50, v67);
  sub_1C3F7E324(v50, v67);
  double result = (void (*)(uint64_t *, void))sub_1C3F84D7C(&v87, &v83);
  if (!*(void *)(v68 + 16))
  {
    result(&v87, 0);
    sub_1C3F7E2CC(v83, v84);
    swift_endAccess();
    return (void (*)(uint64_t *, void))sub_1C3F6C6F0(v50, v67);
  }
  uint64_t v69 = *(void *)(v68 + 8);
  BOOL v70 = __OFADD__(v69, 1);
  uint64_t v71 = v69 + 1;
  if (!v70)
  {
    *(void *)(v68 + 8) = v71;
    result(&v87, 0);
    swift_endAccess();
    sub_1C3F6C6F0(v50, v74);
    return (void (*)(uint64_t *, void))sub_1C3F7E2CC(v83, v84);
  }
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall CRStruct_1.needToFinalizeTimestamps()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LOBYTE(v2) = (*(uint64_t (**)(uint64_t))(*(void *)(AssociatedConformanceWitness + 16) + 56))(AssociatedTypeWitness);
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  return v2 & 1;
}

Swift::Bool __swiftcall CROrderedSet.needToFinalizeTimestamps()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)(v0 - 8);
  ((void (*)())MEMORY[0x1F4188790])();
  uint64_t v6 = (uint64_t *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *(void *)(v1 + 8);
  type metadata accessor for CRSet();
  Swift::Bool v7 = CRSet.needToFinalizeTimestamps()();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(v6, v2, v3);
  if (v7)
  {
    (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
    return 1;
  }
  else
  {
    uint64_t v11 = *v6;
    type metadata accessor for CROrderedSetElement();
    type metadata accessor for CRSequence();
    Swift::Bool v8 = CRSequence.needToFinalizeTimestamps()();
    (*(void (**)(uint64_t *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v8;
}

Swift::Bool __swiftcall CRSet.needToFinalizeTimestamps()()
{
  return sub_1C3F79798() & 1;
}

uint64_t sub_1C3F79798()
{
  swift_beginAccess();
  if (*(void *)(*(void *)(v0 + 32) + 16))
  {
    char v1 = 1;
  }
  else
  {
    uint64_t v2 = swift_beginAccess();
    MEMORY[0x1F4188790](v2);
    sub_1C4496F88();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    char v1 = sub_1C4497368();
    swift_bridgeObjectRelease();
  }
  return v1 & 1;
}

Swift::Bool __swiftcall CRSequence.needToFinalizeTimestamps()()
{
  if (*v0) {
    return sub_1C43763D8() & 1;
  }
  else {
    return 0;
  }
}

unint64_t sub_1C3F79914()
{
  unint64_t result = qword_1EBBBF880;
  if (!qword_1EBBBF880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBBF880);
  }
  return result;
}

uint64_t sub_1C3F79968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F79B08(a1, a2, a3, type metadata accessor for Proto_Set, (void (*)(void))type metadata accessor for Proto_Set._StorageClass, sub_1C3F7B768, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3F7B3C4);
}

uint64_t sub_1C3F799D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F79B08(a1, a2, a3, type metadata accessor for Proto_Reference, (void (*)(void))type metadata accessor for Proto_Reference._StorageClass, sub_1C3FB0204, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3F7C05C);
}

uint64_t sub_1C3F79A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F79B08(a1, a2, a3, type metadata accessor for Proto_Document, (void (*)(void))type metadata accessor for Proto_Document._StorageClass, sub_1C3F7CB4C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3F79EC4);
}

uint64_t sub_1C3F79AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F79B08(a1, a2, a3, type metadata accessor for Proto_Set.Element, (void (*)(void))type metadata accessor for Proto_Set.Element._StorageClass, sub_1C3F97F64, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3F79C1C);
}

uint64_t sub_1C3F79B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(void), uint64_t (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = *(int *)(a4(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a5(0);
    swift_allocObject();
    uint64_t v14 = swift_retain();
    *(void *)(v7 + v13) = a6(v14);
    swift_release();
  }
  uint64_t v15 = swift_retain();
  a7(v15, a1, a2, a3);
  return swift_release();
}

uint64_t type metadata accessor for Proto_Set.Element._StorageClass(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBF200);
}

uint64_t sub_1C3F79C1C()
{
  uint64_t result = sub_1C4496908();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for Proto_Value(0);
          sub_1C3F7251C(&qword_1EBBBF8E0, (void (*)(uint64_t))type metadata accessor for Proto_Value);
          goto LABEL_5;
        case 2:
        case 4:
          swift_beginAccess();
          type metadata accessor for Proto_CRDT(0);
          sub_1C3F7251C(&qword_1EBBC0680, (void (*)(uint64_t))type metadata accessor for Proto_CRDT);
          goto LABEL_5;
        case 3:
          swift_beginAccess();
          type metadata accessor for Proto_Version(0);
          sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
LABEL_5:
          sub_1C4496A78();
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t result = sub_1C4496908();
    }
  }
  return result;
}

uint64_t type metadata accessor for Proto_Document._StorageClass(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC05E0);
}

uint64_t sub_1C3F79EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v162 = a4;
  uint64_t v163 = a3;
  uint64_t v158 = type metadata accessor for Proto_Reference(0);
  uint64_t v149 = *(void (***)(uint64_t, void, uint64_t, uint64_t))(v158 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v158);
  uint64_t v131 = (uint64_t)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v128 = (uint64_t)&v118 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0368);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v135 = (uint64_t)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unint64_t v136 = (char *)&v118 - v12;
  uint64_t v153 = type metadata accessor for Proto_Value(0);
  uint64_t v148 = *(void **)(v153 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v153);
  uint64_t v130 = (uint64_t)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v127 = (uint64_t)&v118 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v134 = (uint64_t)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v154 = (uint64_t)&v118 - v19;
  uint64_t v151 = type metadata accessor for Proto_CRDT(0);
  unint64_t v147 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v151 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v151);
  uint64_t v129 = (uint64_t)&v118 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v126 = (uint64_t)&v118 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0598);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v138 = (uint64_t)&v118 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v137 = (uint64_t)&v118 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v150 = (uint64_t)&v118 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v156 = (uint64_t)&v118 - v31;
  MEMORY[0x1F4188790](v30);
  uint64_t v160 = (char *)&v118 - v32;
  uint64_t v159 = type metadata accessor for Proto_Document.OneOf_Root(0);
  BOOL v146 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v159 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v159);
  uint64_t v35 = (char *)&v118 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x1F4188790](v33);
  uint64_t v132 = (uint64_t)&v118 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v40 = (char *)&v118 - v39;
  uint64_t v41 = MEMORY[0x1F4188790](v38);
  uint64_t v133 = (uint64_t)&v118 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  unint64_t v45 = (char *)&v118 - v44;
  MEMORY[0x1F4188790](v43);
  unint64_t v47 = (char *)&v118 - v46;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  uint64_t v49 = MEMORY[0x1F4188790](v48 - 8);
  int64_t v51 = (char *)&v118 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v49);
  uint64_t v155 = (char *)&v118 - v52;
  uint64_t v145 = (void (**)(char *, uint64_t, uint64_t, uint64_t))OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion;
  uint64_t v144 = OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__deltaReferences;
  uint64_t v143 = OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid;
  uint64_t v142 = OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assets;
  uint64_t v141 = OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  uint64_t v140 = OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  uint64_t v139 = OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references;
  uint64_t v53 = a1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  uint64_t v152 = a2;
  uint64_t v54 = v161;
  uint64_t result = sub_1C4496908();
  if (!v54)
  {
    uint64_t v124 = v51;
    unint64_t v121 = v47;
    uint64_t v118 = v45;
    uint64_t v119 = v40;
    char v120 = v35;
    uint64_t v125 = (char *)v145 + a1;
    v144 += a1;
    v143 += a1;
    v142 += a1;
    v141 += a1;
    v140 += a1;
    v139 += a1;
    uint64_t v145 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v149 + 7);
    uint64_t v57 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 6);
    uint64_t v123 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 6);
    uint64_t v149 = v146 + 7;
    BOOL v146 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v148 + 7);
    uint64_t v122 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 6);
    uint64_t v148 = v147 + 7;
    v147 += 6;
    uint64_t v58 = v152;
    uint64_t v59 = v160;
    uint64_t v157 = v53;
    uint64_t v161 = v57;
    while ((v56 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v61 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*v148;
          uint64_t v62 = v151;
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v148)(v155, 1, 1, v151);
          uint64_t v63 = (uint64_t)v59;
          uint64_t v64 = v157;
          sub_1C3F970C4(v157, v63, &qword_1EBBC0598);
          if ((*v57)(v63, 1, v159) == 1)
          {
            sub_1C3F962E0(v63, &qword_1EBBC0598);
            uint64_t v60 = v58;
            uint64_t v65 = (uint64_t)v155;
            uint64_t v66 = v64;
          }
          else
          {
            uint64_t v79 = v61;
            uint64_t v65 = (uint64_t)v155;
            uint64_t v80 = (uint64_t)v121;
            sub_1C3F92E00(v63, (uint64_t)v121, type metadata accessor for Proto_Document.OneOf_Root);
            uint64_t v60 = v58;
            sub_1C4496918();
            uint64_t v81 = v80;
            uint64_t v82 = (uint64_t)v118;
            sub_1C3F92E00(v81, (uint64_t)v118, type metadata accessor for Proto_Document.OneOf_Root);
            if (swift_getEnumCaseMultiPayload())
            {
              sub_1C3F96610(v82, type metadata accessor for Proto_Document.OneOf_Root);
              uint64_t v62 = v151;
            }
            else
            {
              sub_1C3F962E0(v65, &qword_1EBBC04F8);
              uint64_t v108 = v126;
              sub_1C3F92E00(v82, v126, type metadata accessor for Proto_CRDT);
              sub_1C3F92E00(v108, v65, type metadata accessor for Proto_CRDT);
              uint64_t v62 = v151;
              v79((char *)v65, 0, 1, v151);
            }
            uint64_t v66 = v157;
          }
          sub_1C3F7251C(&qword_1EBBC0680, (void (*)(uint64_t))type metadata accessor for Proto_CRDT);
          uint64_t v109 = v62;
          sub_1C4496A78();
          uint64_t v110 = (uint64_t)v124;
          sub_1C3F961BC(v65, (uint64_t)v124, &qword_1EBBC04F8);
          if ((*v147)(v110, 1, v109) == 1)
          {
            sub_1C3F962E0(v110, &qword_1EBBC04F8);
          }
          else
          {
            uint64_t v111 = v110;
            uint64_t v112 = v129;
            sub_1C3F92E00(v111, v129, type metadata accessor for Proto_CRDT);
            uint64_t v113 = v112;
            uint64_t v114 = v156;
            sub_1C3F92E00(v113, v156, type metadata accessor for Proto_CRDT);
            uint64_t v115 = v159;
            swift_storeEnumTagMultiPayload();
            (*v149)(v114, 0, 1, v115);
            uint64_t v116 = v114;
            uint64_t v117 = v150;
            sub_1C3F961BC(v116, v150, &qword_1EBBC0598);
            swift_beginAccess();
            sub_1C3F98338(v117, v66, &qword_1EBBC0598);
            swift_endAccess();
          }
          uint64_t v59 = v160;
          break;
        case 2:
          unint64_t v67 = *v146;
          (*v146)(v154, 1, 1, v153);
          uint64_t v68 = v137;
          sub_1C3F970C4(v157, v137, &qword_1EBBC0598);
          if ((*v57)(v68, 1, v159) == 1)
          {
            uint64_t v69 = v59;
            sub_1C3F962E0(v68, &qword_1EBBC0598);
            uint64_t v71 = v153;
            uint64_t v70 = v154;
            uint64_t v60 = v58;
          }
          else
          {
            uint64_t v69 = v59;
            uint64_t v83 = v133;
            sub_1C3F92E00(v68, v133, type metadata accessor for Proto_Document.OneOf_Root);
            uint64_t v60 = v58;
            sub_1C4496918();
            uint64_t v84 = (uint64_t)v119;
            sub_1C3F92E00(v83, (uint64_t)v119, type metadata accessor for Proto_Document.OneOf_Root);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              uint64_t v85 = v154;
              sub_1C3F962E0(v154, &qword_1EBBC0540);
              uint64_t v86 = v84;
              uint64_t v70 = v85;
              uint64_t v87 = v127;
              sub_1C3F92E00(v86, v127, type metadata accessor for Proto_Value);
              uint64_t v60 = v58;
              sub_1C3F92E00(v87, v70, type metadata accessor for Proto_Value);
              uint64_t v71 = v153;
              v67(v70, 0, 1, v153);
              uint64_t v69 = v160;
            }
            else
            {
              sub_1C3F96610(v84, type metadata accessor for Proto_Document.OneOf_Root);
              uint64_t v71 = v153;
              uint64_t v70 = v154;
            }
          }
          sub_1C3F7251C(&qword_1EBBBF8E0, (void (*)(uint64_t))type metadata accessor for Proto_Value);
          uint64_t v92 = v70;
          sub_1C4496A78();
          uint64_t v93 = v134;
          sub_1C3F961BC(v92, v134, &qword_1EBBC0540);
          if ((*v122)(v93, 1, v71) == 1)
          {
            sub_1C3F962E0(v93, &qword_1EBBC0540);
            uint64_t v59 = v69;
          }
          else
          {
            uint64_t v94 = v130;
            sub_1C3F92E00(v93, v130, type metadata accessor for Proto_Value);
            uint64_t v95 = v157;
            uint64_t v96 = v156;
            uint64_t v97 = v150;
            sub_1C3F92E00(v94, v156, type metadata accessor for Proto_Value);
            uint64_t v98 = v159;
            swift_storeEnumTagMultiPayload();
            (*v149)(v96, 0, 1, v98);
            uint64_t v99 = v96;
            uint64_t v59 = v160;
            sub_1C3F961BC(v99, v97, &qword_1EBBC0598);
            swift_beginAccess();
            sub_1C3F98338(v97, v95, &qword_1EBBC0598);
            swift_endAccess();
          }
          break;
        case 3:
          uint64_t v72 = *v145;
          uint64_t v73 = (uint64_t)v136;
          (*v145)(v136, 1, 1, v158);
          uint64_t v74 = v138;
          sub_1C3F970C4(v157, v138, &qword_1EBBC0598);
          if ((*v57)(v74, 1, v159) == 1)
          {
            uint64_t v75 = v59;
            sub_1C3F962E0(v74, &qword_1EBBC0598);
            uint64_t v76 = v158;
            uint64_t v60 = v58;
          }
          else
          {
            uint64_t v88 = v132;
            sub_1C3F92E00(v74, v132, type metadata accessor for Proto_Document.OneOf_Root);
            uint64_t v60 = v58;
            sub_1C4496918();
            uint64_t v89 = (uint64_t)v120;
            sub_1C3F92E00(v88, (uint64_t)v120, type metadata accessor for Proto_Document.OneOf_Root);
            if (swift_getEnumCaseMultiPayload() == 2)
            {
              sub_1C3F962E0(v73, &qword_1EBBC0368);
              uint64_t v90 = v89;
              uint64_t v91 = v128;
              sub_1C3F92E00(v90, v128, type metadata accessor for Proto_Reference);
              sub_1C3F92E00(v91, v73, type metadata accessor for Proto_Reference);
              uint64_t v76 = v158;
              v72((char *)v73, 0, 1, v158);
              uint64_t v75 = v160;
            }
            else
            {
              uint64_t v75 = v59;
              sub_1C3F96610(v89, type metadata accessor for Proto_Document.OneOf_Root);
              uint64_t v76 = v158;
            }
          }
          sub_1C3F7251C(&qword_1EBBBC848, (void (*)(uint64_t))type metadata accessor for Proto_Reference);
          sub_1C4496A78();
          uint64_t v100 = v73;
          uint64_t v101 = v135;
          sub_1C3F961BC(v100, v135, &qword_1EBBC0368);
          if ((*v123)(v101, 1, v76) == 1)
          {
            sub_1C3F962E0(v101, &qword_1EBBC0368);
            uint64_t v59 = v75;
          }
          else
          {
            uint64_t v102 = v131;
            sub_1C3F92E00(v101, v131, type metadata accessor for Proto_Reference);
            uint64_t v103 = v157;
            uint64_t v60 = v152;
            uint64_t v104 = v156;
            uint64_t v105 = v150;
            sub_1C3F92E00(v102, v156, type metadata accessor for Proto_Reference);
            uint64_t v106 = v159;
            swift_storeEnumTagMultiPayload();
            (*v149)(v104, 0, 1, v106);
            uint64_t v107 = v104;
            uint64_t v59 = v160;
            sub_1C3F961BC(v107, v105, &qword_1EBBC0598);
            swift_beginAccess();
            sub_1C3F98338(v105, v103, &qword_1EBBC0598);
            swift_endAccess();
          }
          break;
        case 4:
        case 9:
          swift_beginAccess();
          sub_1C3F7251C(&qword_1EBBBC848, (void (*)(uint64_t))type metadata accessor for Proto_Reference);
          uint64_t v60 = v58;
          sub_1C4496A68();
          goto LABEL_18;
        case 5:
        case 10:
          swift_beginAccess();
          type metadata accessor for Proto_Version(0);
          uint64_t v77 = (void (*)(uint64_t))type metadata accessor for Proto_Version;
          unint64_t v78 = &qword_1EBBC0198;
          goto LABEL_20;
        case 6:
          swift_beginAccess();
          type metadata accessor for Proto_Constants(0);
          uint64_t v77 = (void (*)(uint64_t))type metadata accessor for Proto_Constants;
          unint64_t v78 = &qword_1EBBC0600;
LABEL_20:
          sub_1C3F7251C(v78, v77);
          uint64_t v60 = v58;
          sub_1C4496A78();
          goto LABEL_21;
        case 7:
          swift_beginAccess();
          type metadata accessor for Proto_Asset(0);
          sub_1C3F7251C(&qword_1EA39AE50, (void (*)(uint64_t))type metadata accessor for Proto_Asset);
          uint64_t v60 = v58;
          sub_1C4496A68();
LABEL_21:
          swift_endAccess();
          uint64_t v59 = v160;
          break;
        case 8:
          swift_beginAccess();
          uint64_t v60 = v58;
          sub_1C4496988();
LABEL_18:
          swift_endAccess();
          break;
        default:
          uint64_t v60 = v58;
          break;
      }
      uint64_t v58 = v60;
      uint64_t result = sub_1C4496908();
      uint64_t v57 = v161;
    }
  }
  return result;
}

uint64_t sub_1C3F7B39C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_230Tm_28);
}

uint64_t sub_1C3F7B3B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_231Tm_28);
}

uint64_t sub_1C3F7B3C4()
{
  uint64_t result = sub_1C4496908();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          swift_beginAccess();
          uint64_t v4 = v3;
          sub_1C4496A58();
          goto LABEL_6;
        case 2:
        case 5:
          swift_beginAccess();
          type metadata accessor for Proto_Version(0);
          sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
          goto LABEL_5;
        case 3:
          swift_beginAccess();
          type metadata accessor for Proto_Timestamp(0);
          sub_1C3F7251C(&qword_1EBBC06F0, (void (*)(uint64_t))type metadata accessor for Proto_Timestamp);
LABEL_5:
          uint64_t v4 = v3;
          sub_1C4496A78();
          goto LABEL_6;
        case 4:
          swift_beginAccess();
          type metadata accessor for Proto_Set.Element(0);
          sub_1C3F7251C(&qword_1EBBBF210, (void (*)(uint64_t))type metadata accessor for Proto_Set.Element);
          uint64_t v4 = v3;
          sub_1C4496A68();
LABEL_6:
          uint64_t v3 = v4;
          swift_endAccess();
          break;
        case 6:
          swift_beginAccess();
          type metadata accessor for Proto_Set.Element(0);
          sub_1C3F7251C(&qword_1EBBBF210, (void (*)(uint64_t))type metadata accessor for Proto_Set.Element);
          sub_1C4496A68();
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t result = sub_1C4496908();
    }
  }
  return result;
}

uint64_t type metadata accessor for Proto_Set._StorageClass(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0200);
}

uint64_t sub_1C3F7B768(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v31 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v29 = (uint64_t)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  uint64_t v8 = v1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  uint64_t v9 = type metadata accessor for Proto_Version(0);
  uint64_t v10 = *(void (**)(void))(*(void *)(v9 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v10)(v8, 1, 1, v9);
  uint64_t v11 = v1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  uint64_t v12 = type metadata accessor for Proto_Timestamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = (void *)(v1
                 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
  uint64_t v14 = MEMORY[0x1E4FBC860];
  *uint64_t v13 = MEMORY[0x1E4FBC860];
  uint64_t v30 = v1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion;
  v10();
  uint64_t v15 = (void *)(v1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removed);
  *uint64_t v15 = v14;
  swift_beginAccess();
  uint64_t v16 = *(void *)(a1 + 16);
  swift_beginAccess();
  *(void *)(v1 + 16) = v16;
  uint64_t v17 = a1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  uint64_t v18 = v29;
  sub_1C3F970C4(v17, v29, &qword_1EBBC0578);
  swift_beginAccess();
  sub_1C3F98338(v18, v8, &qword_1EBBC0578);
  swift_endAccess();
  uint64_t v19 = a1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  uint64_t v20 = v31;
  sub_1C3F970C4(v19, v31, &qword_1EBBC0620);
  swift_beginAccess();
  sub_1C3F98338(v20, v11, &qword_1EBBC0620);
  swift_endAccess();
  uint64_t v21 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions);
  swift_beginAccess();
  uint64_t v22 = *v21;
  swift_beginAccess();
  *uint64_t v13 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion;
  swift_beginAccess();
  sub_1C3F970C4(v23, v18, &qword_1EBBC0578);
  uint64_t v24 = v30;
  swift_beginAccess();
  sub_1C3F98338(v18, v24, &qword_1EBBC0578);
  swift_endAccess();
  uint64_t v25 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removed);
  swift_beginAccess();
  uint64_t v26 = *v25;
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *uint64_t v15 = v26;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1C3F7BB58()
{
  uint64_t result = sub_1C4496908();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        swift_beginAccess();
        type metadata accessor for Proto_Sequence(0);
        sub_1C3F7251C(&qword_1EBBBC028, (void (*)(uint64_t))type metadata accessor for Proto_Sequence);
LABEL_13:
        uint64_t v4 = v3;
        sub_1C4496A78();
LABEL_5:
        uint64_t v3 = v4;
        swift_endAccess();
        goto LABEL_6;
      }
      if (result == 1)
      {
        swift_beginAccess();
        type metadata accessor for Proto_Set(0);
        sub_1C3F7251C(&qword_1EBBC0220, (void (*)(uint64_t))type metadata accessor for Proto_Set);
        goto LABEL_13;
      }
LABEL_6:
      uint64_t result = sub_1C4496908();
    }
    swift_beginAccess();
    type metadata accessor for Proto_Timestamp(0);
    sub_1C3F7251C(&qword_1EBBC06F0, (void (*)(uint64_t))type metadata accessor for Proto_Timestamp);
    uint64_t v4 = v3;
    sub_1C4496A68();
    goto LABEL_5;
  }
  return result;
}

uint64_t type metadata accessor for Proto_OrderedSet._StorageClass(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBC078);
}

uint64_t sub_1C3F7BD98(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC06E8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC0748);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = v1 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set;
  uint64_t v10 = type metadata accessor for Proto_Set(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = v1 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
  uint64_t v12 = type metadata accessor for Proto_Sequence(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = (void *)(v1
                 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamps);
  *(void *)(v1
            + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamps) = MEMORY[0x1E4FBC860];
  uint64_t v14 = a1 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set;
  swift_beginAccess();
  sub_1C3F970C4(v14, (uint64_t)v8, (uint64_t *)&unk_1EBBC0748);
  swift_beginAccess();
  sub_1C3F98338((uint64_t)v8, v9, (uint64_t *)&unk_1EBBC0748);
  swift_endAccess();
  uint64_t v15 = a1 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
  swift_beginAccess();
  sub_1C3F970C4(v15, (uint64_t)v5, &qword_1EBBC06E8);
  swift_beginAccess();
  sub_1C3F98338((uint64_t)v5, v11, &qword_1EBBC06E8);
  swift_endAccess();
  uint64_t v16 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamps);
  swift_beginAccess();
  uint64_t v17 = *v16;
  swift_bridgeObjectRetain();
  swift_release();
  swift_beginAccess();
  *uint64_t v13 = v17;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1C3F7C034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_231Tm_34);
}

uint64_t sub_1C3F7C048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_231Tm_35);
}

uint64_t sub_1C3F7C05C()
{
  uint64_t result = sub_1C4496908();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          swift_beginAccess();
          uint64_t v6 = v3;
          sub_1C4496A58();
          goto LABEL_7;
        case 2:
          swift_beginAccess();
          sub_1C44141BC();
          uint64_t v6 = v3;
          sub_1C4496948();
          goto LABEL_7;
        case 3:
          swift_beginAccess();
          type metadata accessor for Proto_Version(0);
          sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
          goto LABEL_6;
        case 4:
          swift_beginAccess();
          type metadata accessor for Proto_CRDT(0);
          uint64_t v4 = (void (*)(uint64_t))type metadata accessor for Proto_CRDT;
          uint64_t v5 = &qword_1EBBC0680;
          goto LABEL_5;
        case 5:
          swift_beginAccess();
          type metadata accessor for Proto_KeyPath(0);
          uint64_t v4 = (void (*)(uint64_t))type metadata accessor for Proto_KeyPath;
          uint64_t v5 = &qword_1EBBBC770;
LABEL_5:
          sub_1C3F7251C(v5, v4);
LABEL_6:
          uint64_t v6 = v3;
          sub_1C4496A78();
LABEL_7:
          uint64_t v3 = v6;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t result = sub_1C4496908();
    }
  }
  return result;
}

uint64_t sub_1C3F7C2EC()
{
  uint64_t result = sub_1C4496908();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          swift_beginAccess();
          uint64_t v4 = v3;
          sub_1C4496A28();
          goto LABEL_6;
        case 2:
          swift_beginAccess();
          type metadata accessor for Proto_Value(0);
          sub_1C3F7251C(&qword_1EBBBF8E0, (void (*)(uint64_t))type metadata accessor for Proto_Value);
          goto LABEL_5;
        case 3:
          swift_beginAccess();
          type metadata accessor for Proto_Subsequence(0);
          sub_1C3F7251C(&qword_1EBBBC0F8, (void (*)(uint64_t))type metadata accessor for Proto_Subsequence);
LABEL_5:
          uint64_t v4 = v3;
          sub_1C4496A68();
          goto LABEL_6;
        case 4:
        case 5:
          swift_beginAccess();
          type metadata accessor for Proto_Version(0);
          sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
          uint64_t v4 = v3;
          sub_1C4496A78();
          goto LABEL_6;
        case 6:
          swift_beginAccess();
          type metadata accessor for Proto_Sequence.AttributeRun(0);
          sub_1C3F7251C(&qword_1EA39B260, (void (*)(uint64_t))type metadata accessor for Proto_Sequence.AttributeRun);
          uint64_t v4 = v3;
          sub_1C4496A68();
          goto LABEL_6;
        case 7:
        case 8:
          swift_beginAccess();
          type metadata accessor for Proto_Version(0);
          sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
          uint64_t v4 = v3;
          sub_1C4496A78();
LABEL_6:
          uint64_t v3 = v4;
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t result = sub_1C4496908();
    }
  }
  return result;
}

uint64_t type metadata accessor for Proto_Sequence._StorageClass(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBC018);
}

void *sub_1C3F7C6CC(void *a1)
{
  char v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v29 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0;
  v1[3] = 0xE000000000000000;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  v1[4] = MEMORY[0x1E4FBC860];
  v1[5] = v6;
  uint64_t v7 = (char *)v1
     + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  uint64_t v28 = (char *)v1
      + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  uint64_t v8 = type metadata accessor for Proto_Version(0);
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 56);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v9)(v7, 1, 1, v8);
  uint64_t v30 = (char *)v1
      + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedByVersion;
  v9();
  uint64_t v31 = (void *)((char *)v1
                 + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__attributeRuns);
  *uint64_t v31 = MEMORY[0x1E4FBC860];
  uint64_t v32 = (char *)v1
      + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__fromVersion;
  v9();
  uint64_t v33 = (char *)v1
      + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__fromAddedByVersion;
  v9();
  swift_beginAccess();
  uint64_t v10 = a1[2];
  uint64_t v11 = a1[3];
  swift_beginAccess();
  v1[2] = v10;
  v1[3] = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v12 = a1[4];
  swift_beginAccess();
  v1[4] = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v13 = a1[5];
  swift_beginAccess();
  v1[5] = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = (uint64_t)a1
      + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  uint64_t v15 = v29;
  sub_1C3F970C4(v14, v29, &qword_1EBBC0578);
  uint64_t v16 = (uint64_t)v28;
  swift_beginAccess();
  sub_1C3F98338(v15, v16, &qword_1EBBC0578);
  swift_endAccess();
  uint64_t v17 = (uint64_t)a1
      + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedByVersion;
  swift_beginAccess();
  sub_1C3F970C4(v17, v15, &qword_1EBBC0578);
  uint64_t v18 = (uint64_t)v30;
  swift_beginAccess();
  sub_1C3F98338(v15, v18, &qword_1EBBC0578);
  swift_endAccess();
  uint64_t v19 = (void *)((char *)a1
                 + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__attributeRuns);
  swift_beginAccess();
  uint64_t v20 = *v19;
  uint64_t v21 = v31;
  swift_beginAccess();
  void *v21 = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = (uint64_t)a1
      + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__fromVersion;
  swift_beginAccess();
  uint64_t v23 = v15;
  sub_1C3F970C4(v22, v15, &qword_1EBBC0578);
  uint64_t v24 = (uint64_t)v32;
  swift_beginAccess();
  sub_1C3F98338(v23, v24, &qword_1EBBC0578);
  swift_endAccess();
  uint64_t v25 = (uint64_t)a1
      + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__fromAddedByVersion;
  swift_beginAccess();
  sub_1C3F970C4(v25, v23, &qword_1EBBC0578);
  swift_release();
  uint64_t v26 = (uint64_t)v33;
  swift_beginAccess();
  sub_1C3F98338(v23, v26, &qword_1EBBC0578);
  swift_endAccess();
  return v2;
}

uint64_t sub_1C3F7CB4C(uint64_t a1)
{
  uint64_t v49 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0350);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v52 = (uint64_t)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v50 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0598);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v46 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  uint64_t v9 = type metadata accessor for Proto_Document.OneOf_Root(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = (void *)(v1
                 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references);
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)(v1
            + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references) = MEMORY[0x1E4FBC860];
  uint64_t v12 = v1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  uint64_t v47 = v1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  uint64_t v13 = type metadata accessor for Proto_Version(0);
  uint64_t v14 = *(void (**)(void))(*(void *)(v13 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14)(v12, 1, 1, v13);
  uint64_t v15 = v1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  uint64_t v48 = v1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  uint64_t v16 = type metadata accessor for Proto_Constants(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = (void *)(v1
                 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assets);
  *(void *)(v1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assets) = v11;
  uint64_t v18 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid);
  *uint64_t v18 = sub_1C4496868();
  v18[1] = v19;
  int64_t v51 = (void *)(v1
                 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__deltaReferences);
  *(void *)(v1
            + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__deltaReferences) = v11;
  uint64_t v53 = v1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion;
  uint64_t v54 = v1;
  v14();
  uint64_t v20 = v49;
  uint64_t v21 = v49 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  uint64_t v22 = v21;
  uint64_t v23 = v46;
  sub_1C3F970C4(v22, v46, &qword_1EBBC0598);
  swift_beginAccess();
  sub_1C3F98338(v23, v8, &qword_1EBBC0598);
  swift_endAccess();
  uint64_t v24 = (uint64_t *)(v20
                  + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references);
  swift_beginAccess();
  uint64_t v25 = *v24;
  swift_beginAccess();
  void *v10 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = v20 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  uint64_t v27 = v50;
  sub_1C3F970C4(v26, v50, &qword_1EBBC0578);
  uint64_t v28 = v47;
  swift_beginAccess();
  sub_1C3F98338(v27, v28, &qword_1EBBC0578);
  swift_endAccess();
  uint64_t v29 = v20 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  swift_beginAccess();
  uint64_t v30 = v52;
  sub_1C3F970C4(v29, v52, &qword_1EBBC0350);
  uint64_t v31 = v48;
  swift_beginAccess();
  sub_1C3F98338(v30, v31, &qword_1EBBC0350);
  swift_endAccess();
  uint64_t v32 = (uint64_t *)(v20
                  + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assets);
  swift_beginAccess();
  uint64_t v33 = *v32;
  swift_beginAccess();
  void *v17 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = (uint64_t *)(v20
                  + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid);
  swift_beginAccess();
  uint64_t v36 = *v34;
  unint64_t v35 = v34[1];
  swift_beginAccess();
  uint64_t v37 = *v18;
  unint64_t v38 = v18[1];
  *uint64_t v18 = v36;
  v18[1] = v35;
  sub_1C3F7E324(v36, v35);
  sub_1C3F7E2CC(v37, v38);
  uint64_t v39 = (uint64_t *)(v20
                  + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__deltaReferences);
  swift_beginAccess();
  uint64_t v40 = *v39;
  uint64_t v41 = v51;
  swift_beginAccess();
  *uint64_t v41 = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = v20 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion;
  swift_beginAccess();
  sub_1C3F970C4(v42, v27, &qword_1EBBC0578);
  swift_release();
  uint64_t v43 = v53;
  swift_beginAccess();
  sub_1C3F98338(v27, v43, &qword_1EBBC0578);
  swift_endAccess();
  return v54;
}

uint64_t sub_1C3F7D0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_367Tm);
}

uint64_t sub_1C3F7D0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C440A1F4);
}

uint64_t type metadata accessor for Proto_Document.OneOf_Root(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0588);
}

uint64_t sub_1C3F7D128(int a1, int a2)
{
  uint64_t v3 = v2;
  int v55 = a2;
  int v57 = a1;
  uint64_t v4 = type metadata accessor for PartiallyOrderedReferenceMap();
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v65 = &v54[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v5);
  uint64_t v66 = &v54[-v7];
  uint64_t v8 = MEMORY[0x1E4FBC860];
  unint64_t v9 = sub_1C3F7E4A4(MEMORY[0x1E4FBC860]);
  unint64_t v10 = sub_1C3F7E37C(v8);
  unint64_t v71 = v9;
  unint64_t v72 = v10;
  uint64_t v11 = (uint64_t *)(v3 + OBJC_IVAR____TtC9Coherence10CapsuleRef_isUpdated);
  swift_beginAccess();
  uint64_t v12 = *v11;
  swift_bridgeObjectRetain();
  sub_1C3F807B0(v12);
  swift_bridgeObjectRelease();
  char v56 = v11;
  uint64_t v13 = *v11;
  uint64_t v14 = *(void *)(*v11 + 56);
  uint64_t v58 = *v11 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v18 = v3 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  uint64_t v62 = v13;
  swift_bridgeObjectRetain();
  uint64_t v67 = v18;
  swift_beginAccess();
  int64_t v19 = 0;
  int64_t v59 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v60 = v3;
  uint64_t v61 = v4;
  while (1)
  {
    if (v17)
    {
      uint64_t v64 = (v17 - 1) & v17;
      unint64_t v20 = __clz(__rbit64(v17)) | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      sub_1C3F7E2CC(v15, v17);
      sub_1C3F7E2CC(v15, v17);
LABEL_38:
      uint64_t result = sub_1C3F8F5D4((uint64_t)v66, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
      __break(1u);
LABEL_39:
      __break(1u);
      return result;
    }
    if (v21 >= v59) {
      goto LABEL_32;
    }
    unint64_t v22 = *(void *)(v58 + 8 * v21);
    ++v19;
    if (!v22)
    {
      int64_t v19 = v21 + 1;
      if (v21 + 1 >= v59) {
        goto LABEL_32;
      }
      unint64_t v22 = *(void *)(v58 + 8 * v19);
      if (!v22)
      {
        int64_t v19 = v21 + 2;
        if (v21 + 2 >= v59) {
          goto LABEL_32;
        }
        unint64_t v22 = *(void *)(v58 + 8 * v19);
        if (!v22) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v64 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v19 << 6);
LABEL_22:
    uint64_t v24 = (uint64_t *)(*(void *)(v62 + 48) + 16 * v20);
    uint64_t v15 = *v24;
    unint64_t v17 = v24[1];
    uint64_t v25 = type metadata accessor for RetainVisitor();
    uint64_t v26 = swift_allocObject();
    sub_1C3F7E324(v15, v17);
    uint64_t v27 = MEMORY[0x1E4FBC860];
    unint64_t v28 = sub_1C3F7E4A4(MEMORY[0x1E4FBC860]);
    unint64_t v29 = sub_1C3F7E37C(v27);
    *(void *)(v26 + 16) = v28;
    *(void *)(v26 + 24) = v29;
    uint64_t v30 = v66;
    sub_1C3F8F450(v67, (uint64_t)v66, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
    uint64_t v31 = *(void *)&v30[*(int *)(v4 + 20)];
    if (!*(void *)(v31 + 16)) {
      goto LABEL_38;
    }
    int64_t v63 = v19;
    sub_1C3F7E324(v15, v17);
    sub_1C3F7E324(v15, v17);
    uint64_t v32 = sub_1C3F850CC(v15, v17);
    if ((v33 & 1) == 0) {
      goto LABEL_37;
    }
    uint64_t v34 = *(void *)(*(void *)(v31 + 56) + 48 * v32);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1C3F7E2CC(v15, v17);
    sub_1C3F7E2CC(v15, v17);
    sub_1C3F8F5D4((uint64_t)v66, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v34) {
      goto LABEL_39;
    }
    v70[3] = v25;
    v70[4] = &off_1F1F982A0;
    v70[0] = v26;
    uint64_t v36 = *(void (**)(void *))(*(void *)v34 + 120);
    swift_retain();
    v36(v70);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
    swift_release();
    swift_beginAccess();
    uint64_t v37 = *(void *)(v26 + 16);
    uint64_t v38 = *(void *)(v26 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1C3F7EDE8(v37, v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v39 = v65;
    sub_1C3F8F450(v67, (uint64_t)v65, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
    uint64_t v4 = v61;
    uint64_t v40 = *(void *)&v39[*(int *)(v61 + 20)];
    if (*(void *)(v40 + 16))
    {
      sub_1C3F7E324(v15, v17);
      uint64_t v41 = sub_1C3F850CC(v15, v17);
      if (v42)
      {
        uint64_t v43 = *(void *)(v40 + 56) + 48 * v41;
        uint64_t v45 = *(void *)(v43 + 32);
        uint64_t v44 = *(void *)(v43 + 40);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1C3F7E2CC(v15, v17);
        sub_1C3F8F5D4((uint64_t)v65, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        sub_1C3F7FEDC(v45, v44);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      sub_1C3F7E2CC(v15, v17);
    }
    sub_1C3F8F5D4((uint64_t)v65, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
LABEL_30:
    swift_beginAccess();
    uint64_t v68 = v15;
    unint64_t v69 = v17;
    sub_1C3F7E324(v15, v17);
    uint64_t v47 = sub_1C3F84D7C(v70, &v68);
    if (*(void *)(v46 + 16))
    {
      uint64_t v48 = v46;
      swift_beginAccess();
      uint64_t v49 = *(void *)(v26 + 24);
      *(void *)(v48 + 32) = *(void *)(v26 + 16);
      *(void *)(v48 + 40) = v49;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      ((void (*)(void *, void))v47)(v70, 0);
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1C3F7E2CC(v15, v17);
      sub_1C3F7E2CC(v68, v69);
    }
    else
    {
      ((void (*)(void *, void))v47)(v70, 0);
      sub_1C3F7E2CC(v68, v69);
      swift_endAccess();
      sub_1C3F7E2CC(v15, v17);
      swift_release();
    }
    int64_t v19 = v63;
    unint64_t v17 = v64;
  }
  int64_t v23 = v21 + 3;
  if (v23 < v59)
  {
    unint64_t v22 = *(void *)(v58 + 8 * v23);
    if (!v22)
    {
      while (1)
      {
        int64_t v19 = v23 + 1;
        if (__OFADD__(v23, 1)) {
          goto LABEL_36;
        }
        if (v19 >= v59) {
          goto LABEL_32;
        }
        unint64_t v22 = *(void *)(v58 + 8 * v19);
        ++v23;
        if (v22) {
          goto LABEL_21;
        }
      }
    }
    int64_t v19 = v23;
    goto LABEL_21;
  }
LABEL_32:
  swift_release();
  unint64_t v50 = v71;
  uint64_t v51 = v72;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1C3F7F418(v50, v51, v55 & 1);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v52 = v56;
  if (v57)
  {
    uint64_t v53 = swift_bridgeObjectRetain();
    sub_1C3F80AD4(v53);
    swift_bridgeObjectRelease();
  }
  uint64_t *v52 = MEMORY[0x1E4FBC870];
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C3F7D960(uint64_t a1, unint64_t a2, uint64_t a3)
{
  __s1[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return v6;
  }
  uint64_t v7 = v3;
  unint64_t v8 = a2;
  uint64_t v10 = ~v5;
  unint64_t v75 = HIDWORD(a1);
  size_t v81 = HIDWORD(a1) - (int)a1;
  uint64_t v82 = ~v5;
  BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v80 = v11;
  unint64_t v83 = a2 >> 62;
  uint64_t v78 = v3 + 64;
  uint64_t v79 = (int)a1;
  uint64_t v76 = a1 >> 32;
  uint64_t v74 = (a1 >> 32) - (int)a1;
  unint64_t v84 = a2 >> 62;
  size_t __n = BYTE6(a2);
  while (2)
  {
    uint64_t v12 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
    uint64_t v14 = *v12;
    unint64_t v13 = v12[1];
    uint64_t v15 = 0;
    switch(v13 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v14), v14))
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
        }
        uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_14:
        sub_1C3F7E324(v14, v13);
        break;
      case 2uLL:
        uint64_t v17 = *(void *)(v14 + 16);
        uint64_t v16 = *(void *)(v14 + 24);
        uint64_t v15 = v16 - v17;
        if (!__OFSUB__(v16, v17)) {
          goto LABEL_14;
        }
        goto LABEL_122;
      case 3uLL:
        break;
      default:
        uint64_t v15 = BYTE6(v13);
        break;
    }
    size_t v18 = __n;
    switch(v84)
    {
      case 1uLL:
        size_t v18 = v81;
        if (v80) {
          goto LABEL_123;
        }
        goto LABEL_19;
      case 2uLL:
        uint64_t v20 = *(void *)(a1 + 16);
        uint64_t v19 = *(void *)(a1 + 24);
        BOOL v21 = __OFSUB__(v19, v20);
        size_t v18 = v19 - v20;
        if (!v21) {
          goto LABEL_19;
        }
        goto LABEL_124;
      case 3uLL:
        if (v15) {
          goto LABEL_7;
        }
        goto LABEL_119;
      default:
LABEL_19:
        if (v15 != v18)
        {
LABEL_7:
          sub_1C3F7E2CC(v14, v13);
          goto LABEL_8;
        }
        if (v15 < 1)
        {
LABEL_119:
          sub_1C3F7E2CC(v14, v13);
          return v6;
        }
        break;
    }
    switch(v13 >> 62)
    {
      case 1uLL:
        if ((int)v14 > v14 >> 32) {
          goto LABEL_125;
        }
        uint64_t v26 = sub_1C4496298();
        if (v26)
        {
          uint64_t v27 = v26;
          uint64_t v28 = sub_1C44962C8();
          if (__OFSUB__((int)v14, v28)) {
            goto LABEL_127;
          }
          unint64_t v29 = (const void *)(v27 + (int)v14 - v28);
        }
        else
        {
          unint64_t v29 = 0;
        }
        uint64_t result = sub_1C44962B8();
        if (!v83)
        {
          LOWORD(__s1[0]) = a1;
          BYTE2(__s1[0]) = BYTE2(a1);
          BYTE3(__s1[0]) = BYTE3(a1);
          BYTE4(__s1[0]) = v75;
          BYTE5(__s1[0]) = BYTE5(a1);
          BYTE6(__s1[0]) = BYTE6(a1);
          HIBYTE(__s1[0]) = HIBYTE(a1);
          LOWORD(__s1[1]) = v8;
          BYTE2(__s1[1]) = BYTE2(v8);
          BYTE3(__s1[1]) = BYTE3(v8);
          BYTE4(__s1[1]) = BYTE4(v8);
          BYTE5(__s1[1]) = BYTE5(v8);
          if (!v29) {
            goto LABEL_155;
          }
          int v46 = memcmp(v29, __s1, __n);
          goto LABEL_102;
        }
        if (v83 == 1)
        {
          if (v76 < v79) {
            goto LABEL_136;
          }
          swift_retain();
          uint64_t v47 = sub_1C4496298();
          if (v47)
          {
            uint64_t v48 = sub_1C44962C8();
            if (__OFSUB__(v79, v48)) {
              goto LABEL_143;
            }
            v47 += v79 - v48;
          }
          uint64_t result = sub_1C44962B8();
          size_t v49 = v74;
          if (result < v74) {
            size_t v49 = result;
          }
          if (!v29) {
            goto LABEL_148;
          }
          if (!v47) {
            goto LABEL_149;
          }
          size_t v39 = v49;
          uint64_t v40 = v29;
          uint64_t v38 = (const void *)v47;
          goto LABEL_71;
        }
        uint64_t v66 = *(void *)(a1 + 16);
        uint64_t v73 = *(void *)(a1 + 24);
        swift_retain();
        swift_retain();
        uint64_t v67 = sub_1C4496298();
        if (v67)
        {
          uint64_t v68 = v67;
          uint64_t v69 = sub_1C44962C8();
          if (__OFSUB__(v66, v69)) {
            goto LABEL_142;
          }
          uint64_t v70 = (const void *)(v68 + v66 - v69);
        }
        else
        {
          uint64_t v70 = 0;
        }
        if (__OFSUB__(v73, v66)) {
          goto LABEL_137;
        }
        uint64_t result = sub_1C44962B8();
        if (result >= v73 - v66) {
          size_t v71 = v73 - v66;
        }
        else {
          size_t v71 = result;
        }
        if (!v29) {
          goto LABEL_156;
        }
        uint64_t v4 = v78;
        if (!v70) {
          goto LABEL_157;
        }
        int v60 = memcmp(v29, v70, v71);
LABEL_115:
        swift_release();
LABEL_116:
        swift_release();
        sub_1C3F7E2CC(v14, v13);
        unint64_t v8 = a2;
        uint64_t v10 = v82;
        if (!v60) {
          return v6;
        }
        goto LABEL_8;
      case 2uLL:
        uint64_t v30 = *(void *)(v14 + 16);
        swift_retain();
        swift_retain();
        uint64_t v31 = sub_1C4496298();
        if (v31)
        {
          uint64_t v32 = v31;
          uint64_t v33 = sub_1C44962C8();
          if (__OFSUB__(v30, v33)) {
            goto LABEL_126;
          }
          uint64_t v34 = (const void *)(v32 + v30 - v33);
        }
        else
        {
          uint64_t v34 = 0;
        }
        uint64_t result = sub_1C44962B8();
        uint64_t v4 = v78;
        if (!v83)
        {
          LOWORD(__s1[0]) = a1;
          BYTE2(__s1[0]) = BYTE2(a1);
          BYTE3(__s1[0]) = BYTE3(a1);
          BYTE4(__s1[0]) = v75;
          BYTE5(__s1[0]) = BYTE5(a1);
          BYTE6(__s1[0]) = BYTE6(a1);
          HIBYTE(__s1[0]) = HIBYTE(a1);
          LODWORD(__s1[1]) = a2;
          WORD2(__s1[1]) = WORD2(a2);
          if (!v34) {
            goto LABEL_152;
          }
          int v60 = memcmp(v34, __s1, __n);
          swift_release();
          goto LABEL_116;
        }
        if (v83 == 1)
        {
          if (v76 < v79) {
            goto LABEL_130;
          }
          swift_retain();
          uint64_t v43 = (char *)sub_1C4496298();
          if (v43)
          {
            uint64_t v44 = sub_1C44962C8();
            if (__OFSUB__(v79, v44)) {
              goto LABEL_141;
            }
            v43 += v79 - v44;
          }
          uint64_t result = sub_1C44962B8();
          size_t v45 = v74;
          if (result < v74) {
            size_t v45 = result;
          }
          if (!v34) {
            goto LABEL_146;
          }
          if (!v43) {
            goto LABEL_147;
          }
          int v46 = memcmp(v34, v43, v45);
          unint64_t v8 = a2;
          sub_1C3F7E2CC(a1, a2);
          swift_release();
          swift_release();
          goto LABEL_102;
        }
        uint64_t v61 = *(void *)(a1 + 16);
        uint64_t v72 = *(void *)(a1 + 24);
        swift_retain();
        swift_retain();
        uint64_t v62 = (char *)sub_1C4496298();
        if (v62)
        {
          uint64_t v63 = sub_1C44962C8();
          if (__OFSUB__(v61, v63)) {
            goto LABEL_140;
          }
          v62 += v61 - v63;
        }
        BOOL v21 = __OFSUB__(v72, v61);
        int64_t v64 = v72 - v61;
        if (v21) {
          goto LABEL_135;
        }
        uint64_t result = sub_1C44962B8();
        if (result >= v64) {
          size_t v65 = v64;
        }
        else {
          size_t v65 = result;
        }
        if (!v34) {
          goto LABEL_153;
        }
        uint64_t v4 = v78;
        if (!v62) {
          goto LABEL_154;
        }
        int v60 = memcmp(v34, v62, v65);
        swift_release();
        swift_release();
        goto LABEL_115;
      case 3uLL:
        memset(__s1, 0, 14);
        if (!v83) {
          goto LABEL_45;
        }
        if (v83 == 1)
        {
          if (v76 < v79) {
            goto LABEL_129;
          }
          sub_1C3F7E324(a1, v8);
          uint64_t v35 = sub_1C4496298();
          if (!v35) {
            goto LABEL_145;
          }
          uint64_t v23 = v35;
          uint64_t v36 = sub_1C44962C8();
          uint64_t v25 = v79 - v36;
          if (__OFSUB__(v79, v36)) {
            goto LABEL_134;
          }
          goto LABEL_41;
        }
        uint64_t v55 = *(void *)(a1 + 16);
        uint64_t v56 = *(void *)(a1 + 24);
        swift_retain();
        swift_retain();
        uint64_t v52 = (char *)sub_1C4496298();
        if (v52)
        {
          uint64_t v57 = sub_1C44962C8();
          if (__OFSUB__(v55, v57)) {
            goto LABEL_139;
          }
          v52 += v55 - v57;
        }
        BOOL v21 = __OFSUB__(v56, v55);
        int64_t v54 = v56 - v55;
        if (v21) {
          goto LABEL_132;
        }
        uint64_t result = sub_1C44962B8();
        if (!v52) {
          goto LABEL_151;
        }
        goto LABEL_83;
      default:
        __s1[0] = v14;
        LOWORD(__s1[1]) = v13;
        BYTE2(__s1[1]) = BYTE2(v13);
        BYTE3(__s1[1]) = BYTE3(v13);
        BYTE4(__s1[1]) = BYTE4(v13);
        BYTE5(__s1[1]) = BYTE5(v13);
        if (!v83)
        {
LABEL_45:
          __int16 __s2 = a1;
          char v87 = BYTE2(a1);
          char v88 = BYTE3(a1);
          char v89 = v75;
          char v90 = BYTE5(a1);
          char v91 = BYTE6(a1);
          char v92 = HIBYTE(a1);
          __int16 v93 = v8;
          char v94 = BYTE2(v8);
          char v95 = BYTE3(v8);
          char v96 = BYTE4(v8);
          char v97 = BYTE5(v8);
          int v41 = memcmp(__s1, &__s2, __n);
          sub_1C3F7E2CC(v14, v13);
          if (!v41) {
            return v6;
          }
          goto LABEL_8;
        }
        if (v83 != 1)
        {
          uint64_t v50 = *(void *)(a1 + 16);
          uint64_t v51 = *(void *)(a1 + 24);
          swift_retain();
          swift_retain();
          uint64_t v52 = (char *)sub_1C4496298();
          if (v52)
          {
            uint64_t v53 = sub_1C44962C8();
            if (__OFSUB__(v50, v53)) {
              goto LABEL_138;
            }
            v52 += v50 - v53;
          }
          BOOL v21 = __OFSUB__(v51, v50);
          int64_t v54 = v51 - v50;
          if (v21) {
            goto LABEL_131;
          }
          uint64_t result = sub_1C44962B8();
          if (!v52) {
            goto LABEL_150;
          }
LABEL_83:
          if (result >= v54) {
            size_t v58 = v54;
          }
          else {
            size_t v58 = result;
          }
          int v59 = memcmp(__s1, v52, v58);
          swift_release();
          swift_release();
          sub_1C3F7E2CC(v14, v13);
          uint64_t v4 = v78;
          uint64_t v10 = v82;
          if (!v59) {
            return v6;
          }
          goto LABEL_8;
        }
        if (v76 < v79) {
          goto LABEL_128;
        }
        sub_1C3F7E324(a1, v8);
        uint64_t v22 = sub_1C4496298();
        if (v22)
        {
          uint64_t v23 = v22;
          uint64_t v24 = sub_1C44962C8();
          uint64_t v25 = v79 - v24;
          if (__OFSUB__(v79, v24)) {
            goto LABEL_133;
          }
LABEL_41:
          uint64_t v37 = sub_1C44962B8();
          uint64_t v38 = (const void *)(v23 + v25);
          if (v37 >= v74) {
            size_t v39 = v74;
          }
          else {
            size_t v39 = v37;
          }
          uint64_t v40 = __s1;
LABEL_71:
          int v46 = memcmp(v40, v38, v39);
          sub_1C3F7E2CC(a1, v8);
LABEL_102:
          sub_1C3F7E2CC(v14, v13);
          uint64_t v10 = v82;
          if (!v46) {
            return v6;
          }
LABEL_8:
          unint64_t v6 = (v6 + 1) & v10;
          if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return v6;
          }
          continue;
        }
        sub_1C44962B8();
        __break(1u);
LABEL_145:
        uint64_t result = sub_1C44962B8();
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
        return result;
    }
  }
}

uint64_t sub_1C3F7E2CC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1C3F7E324(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

unint64_t sub_1C3F7E37C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39B088);
  uint64_t v2 = (void *)sub_1C4497FD8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    unint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    sub_1C3F7E324(v5, v6);
    swift_retain();
    unint64_t result = sub_1C4061A50(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    void v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C3F7E4A4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBA220);
  uint64_t v2 = (void *)sub_1C4497FD8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    unint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    sub_1C3F7E324(v5, v6);
    unint64_t result = sub_1C3F850CC(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    void v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1C3F7E5BC(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for RetainVisitor()
{
  return self;
}

uint64_t sub_1C3F7E5F0(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 264);
  uint64_t v6 = sub_1C4497B38();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v9 = (char *)&v13 - v8;
  uint64_t v10 = (uint64_t)v1 + *(void *)(v3 + 280);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t v11 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v5);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v4 + 272) + 16) + 48))(a1, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v9, v5);
  }
  return result;
}

uint64_t CRStruct_1.visitReferences(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v9 = (char *)v14 - v8;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, v5);
  v14[1] = v10;
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedConformanceWitness + 16) + 48))(a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 8) + 24))(a2);
  sub_1C3F7E98C(a1, v12);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C3F7E98C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_25:
      __break(1u);
      return result;
    }
    if (v14 >= v8) {
      goto LABEL_21;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_21;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_21;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_5:
    uint64_t v13 = *(void (**)(uint64_t))(**(void **)(*(void *)(a2 + 56) + 8 * v12) + 120);
    swift_retain();
    v13(a1);
    uint64_t result = swift_release();
  }
  int64_t v16 = v14 + 3;
  if (v16 < v8)
  {
    unint64_t v15 = *(void *)(v4 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v10 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_25;
        }
        if (v10 >= v8) {
          goto LABEL_21;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v10);
        ++v16;
        if (v15) {
          goto LABEL_20;
        }
      }
    }
    int64_t v10 = v16;
    goto LABEL_20;
  }
LABEL_21:
  return swift_release();
}

uint64_t CROrderedSet.visitReferences(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CRSet();
  return CRSet.visitReferences(_:)(a1, v2);
}

uint64_t CRSet.visitReferences(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t result = sub_1C4497ED8();
  uint64_t v8 = v21;
  uint64_t v9 = v24;
  unint64_t v10 = v25;
  uint64_t v18 = v22;
  int64_t v19 = (unint64_t)(v23 + 64) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v12 = v11 | (v9 << 6);
      goto LABEL_3;
    }
    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    if (v13 >= v19) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v18 + 8 * v13);
    uint64_t v15 = v9 + 1;
    if (!v14)
    {
      uint64_t v15 = v9 + 2;
      if (v9 + 2 >= v19) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v18 + 8 * v15);
      if (!v14)
      {
        uint64_t v15 = v9 + 3;
        if (v9 + 3 >= v19) {
          return swift_release();
        }
        unint64_t v14 = *(void *)(v18 + 8 * v15);
        if (!v14)
        {
          uint64_t v15 = v9 + 4;
          if (v9 + 4 >= v19) {
            return swift_release();
          }
          unint64_t v14 = *(void *)(v18 + 8 * v15);
          if (!v14)
          {
            uint64_t v15 = v9 + 5;
            if (v9 + 5 >= v19) {
              return swift_release();
            }
            unint64_t v14 = *(void *)(v18 + 8 * v15);
            if (!v14)
            {
              uint64_t v16 = v9 + 6;
              while (v19 != v16)
              {
                unint64_t v14 = *(void *)(v18 + 8 * v16++);
                if (v14)
                {
                  uint64_t v15 = v16 - 1;
                  goto LABEL_20;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_20:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    uint64_t v9 = v15;
LABEL_3:
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v8 + 48) + *(void *)(v4 + 72) * v12, v3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) + 8) + 48))(v20, v3);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C3F7EDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v40 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v41 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  unint64_t v7 = 0;
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    unint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    sub_1C3F7E324(*v14, v15);
    sub_1C3F7E324(v16, v15);
    sub_1C3F7E5BC((uint64_t)v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v43 = (void *)*v3;
    int64_t v19 = v43;
    *uint64_t v3 = 0x8000000000000000;
    unint64_t v21 = sub_1C3F850CC(v16, v15);
    uint64_t v22 = v19[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      uint64_t result = sub_1C4498558();
      __break(1u);
      return result;
    }
    char v25 = v20;
    if (v19[3] >= v24)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1C4068670();
        int64_t v19 = v43;
      }
    }
    else
    {
      sub_1C406353C(v24, isUniquelyReferenced_nonNull_native);
      int64_t v19 = v43;
      uint64_t v26 = sub_1C3F850CC(v16, v15);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_43;
      }
      unint64_t v21 = v26;
    }
    *uint64_t v3 = v19;
    swift_bridgeObjectRelease();
    uint64_t v28 = (void *)*v3;
    if (v25)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v28[(v21 >> 6) + 8] |= 1 << v21;
      unint64_t v29 = (uint64_t *)(v28[6] + 16 * v21);
      *unint64_t v29 = v16;
      v29[1] = v15;
      *(void *)(v28[7] + 8 * v21) = 0;
      uint64_t v30 = v28[2];
      uint64_t v31 = v30 + 1;
      BOOL v32 = __OFADD__(v30, 1);
      swift_bridgeObjectRetain();
      if (v32) {
        goto LABEL_40;
      }
      v28[2] = v31;
      sub_1C3F7E324(v16, v15);
    }
    uint64_t v33 = v28[7];
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void *)(v33 + 8 * v21);
    BOOL v35 = __OFADD__(v34, v17);
    uint64_t v36 = v34 + v17;
    if (v35) {
      goto LABEL_39;
    }
    *(void *)(v33 + 8 * v21) = v36;
    sub_1C3F7E2CC(v16, v15);
    sub_1C3F7E2CC(v16, v15);
    unint64_t v7 = sub_1C4107FA8;
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_41;
    }
    if (v11 >= v41) {
      goto LABEL_35;
    }
    unint64_t v12 = *(void *)(v40 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v41) {
        goto LABEL_35;
      }
      unint64_t v12 = *(void *)(v40 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v41) {
          goto LABEL_35;
        }
        unint64_t v12 = *(void *)(v40 + 8 * v8);
        if (!v12) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 3;
  if (v13 < v41)
  {
    unint64_t v12 = *(void *)(v40 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_42;
        }
        if (v8 >= v41) {
          goto LABEL_35;
        }
        unint64_t v12 = *(void *)(v40 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_18;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_18;
  }
LABEL_35:
  swift_release();
  swift_bridgeObjectRetain();
  char v37 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v43 = (void *)v3[1];
  v3[1] = 0x8000000000000000;
  sub_1C3F7FAA0(a2, (uint64_t)sub_1C413B380, 0, v37, &v43);
  v3[1] = v43;
  swift_bridgeObjectRelease();
  return sub_1C3F7E5BC((uint64_t)v7);
}

uint64_t sub_1C3F7F184(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  if ((v6 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v7 = *a2;
    sub_1C3F7E324(*a2, a2[1]);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v6;
  }
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  int64_t v11 = (void *)((v10 + 16 + a1) & ~v10);
  unint64_t v12 = (const void *)(((unint64_t)a2 + v10 + 16) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v12, 1, v8))
  {
    int v13 = *(_DWORD *)(v9 + 84);
    size_t v14 = *(void *)(v9 + 64);
    if (v13) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = v14 + 1;
    }
    memcpy(v11, v12, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v11, v12, v8);
    uint64_t v17 = *(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56);
    uint64_t v16 = v9 + 56;
    v17(v11, 0, 1, v8);
    int v13 = *(_DWORD *)(v16 + 28);
    size_t v14 = *(void *)(v16 + 8);
  }
  if (v13) {
    size_t v18 = v14;
  }
  else {
    size_t v18 = v14 + 1;
  }
  *(void *)(((unint64_t)v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t sub_1C3F7F300(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if ((v4 & 0x3000000000000000) == 0) {
    sub_1C3F7E2CC(*a1, v4);
  }
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = ((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  }
  return swift_release();
}

uint64_t sub_1C3F7F404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C443DA74);
}

uint64_t sub_1C3F7F418(unint64_t a1, uint64_t a2, int a3)
{
  LODWORD(v69) = a3;
  unint64_t v6 = sub_1C3F7E37C(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v67 = v6;
  sub_1C3F7FAA0(a2, (uint64_t)sub_1C413B380, 0, isUniquelyReferenced_nonNull_native, &v67);
  if (v3) {
    goto LABEL_78;
  }
  uint64_t v8 = v67;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 16))
  {
LABEL_37:
    int64_t v30 = 0;
    uint64_t v31 = v8 + 64;
    uint64_t v32 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v33 = -1;
    if (v32 < 64) {
      uint64_t v33 = ~(-1 << v32);
    }
    unint64_t v34 = v33 & *(void *)(v8 + 64);
    int64_t v35 = (unint64_t)(v32 + 63) >> 6;
    uint64_t v36 = (void *)MEMORY[0x1E4FBC860];
    int v59 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v60 = v8 + 64;
    uint64_t v63 = v8;
    int64_t v61 = v35;
    if (!v34) {
      goto LABEL_43;
    }
LABEL_40:
    unint64_t v37 = __clz(__rbit64(v34));
    v34 &= v34 - 1;
    for (unint64_t i = v37 | (v30 << 6); ; unint64_t i = __clz(__rbit64(v41)) + (v30 << 6))
    {
      uint64_t v39 = *(void *)(v8 + 56);
      uint64_t v40 = *(void *)(v39 + 16 * i + 8);
      if (v40)
      {
        size_t v65 = v36;
        uint64_t v43 = 16 * i;
        uint64_t v44 = (uint64_t *)(*(void *)(v8 + 48) + v43);
        uint64_t v46 = *v44;
        unint64_t v45 = v44[1];
        uint64_t v47 = *(void *)(v39 + v43);
        uint64_t v48 = *(void *)(v47 + 16);
        unint64_t v49 = *(void *)(v47 + 24);
        swift_beginAccess();
        swift_retain_n();
        unint64_t v69 = v45;
        sub_1C3F7E324(v46, v45);
        sub_1C3F7E324(v48, v49);
        char v50 = sub_1C4059E60(v48, v49, v47, v40, 0);
        swift_endAccess();
        sub_1C3F7E2CC(v48, v49);
        swift_release();
        if (v50)
        {
          sub_1C3F7E324(v46, v69);
          uint64_t v36 = v65;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int v59 = sub_1C3FF13E0(0, v59[2] + 1, 1, v59);
          }
          uint64_t v31 = v60;
          unint64_t v56 = v59[2];
          unint64_t v55 = v59[3];
          if (v56 >= v55 >> 1) {
            int v59 = sub_1C3FF13E0((void *)(v55 > 1), v56 + 1, 1, v59);
          }
          v59[2] = v56 + 1;
          uint64_t v57 = &v59[2 * v56];
          uint64_t v53 = v46;
          unint64_t v54 = v69;
          v57[4] = v46;
          v57[5] = v54;
        }
        else
        {
          swift_retain();
          uint64_t v36 = v65;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v36 = sub_1C3FF1870(0, v65[2] + 1, 1, v65);
          }
          uint64_t v31 = v60;
          unint64_t v52 = v36[2];
          unint64_t v51 = v36[3];
          if (v52 >= v51 >> 1) {
            uint64_t v36 = sub_1C3FF1870((void *)(v51 > 1), v52 + 1, 1, v36);
          }
          v36[2] = v52 + 1;
          v36[v52 + 4] = v47;
          uint64_t v53 = v46;
          unint64_t v54 = v69;
        }
        sub_1C3F7E2CC(v53, v54);
        swift_release();
        uint64_t v8 = v63;
        int64_t v35 = v61;
        if (v34) {
          goto LABEL_40;
        }
      }
      else if (v34)
      {
        goto LABEL_40;
      }
LABEL_43:
      BOOL v19 = __OFADD__(v30++, 1);
      if (v19) {
        goto LABEL_76;
      }
      if (v30 >= v35)
      {
LABEL_73:
        swift_release();
        return (uint64_t)v36;
      }
      unint64_t v41 = *(void *)(v31 + 8 * v30);
      if (!v41)
      {
        int64_t v42 = v30 + 1;
        if (v30 + 1 >= v35) {
          goto LABEL_73;
        }
        unint64_t v41 = *(void *)(v31 + 8 * v42);
        if (!v41)
        {
          int64_t v42 = v30 + 2;
          if (v30 + 2 >= v35) {
            goto LABEL_73;
          }
          unint64_t v41 = *(void *)(v31 + 8 * v42);
          if (!v41)
          {
            int64_t v42 = v30 + 3;
            if (v30 + 3 >= v35) {
              goto LABEL_73;
            }
            unint64_t v41 = *(void *)(v31 + 8 * v42);
            if (!v41)
            {
              int64_t v42 = v30 + 4;
              if (v30 + 4 >= v35) {
                goto LABEL_73;
              }
              unint64_t v41 = *(void *)(v31 + 8 * v42);
              if (!v41)
              {
                while (1)
                {
                  int64_t v30 = v42 + 1;
                  if (__OFADD__(v42, 1)) {
                    goto LABEL_77;
                  }
                  if (v30 >= v35) {
                    goto LABEL_73;
                  }
                  unint64_t v41 = *(void *)(v31 + 8 * v30);
                  ++v42;
                  if (v41) {
                    goto LABEL_55;
                  }
                }
              }
            }
          }
        }
        int64_t v30 = v42;
      }
LABEL_55:
      unint64_t v34 = (v41 - 1) & v41;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  while (2)
  {
    uint64_t v62 = v8;
    uint64_t v9 = MEMORY[0x1E4FBC860];
    unint64_t v10 = sub_1C3F7E4A4(MEMORY[0x1E4FBC860]);
    unint64_t v11 = sub_1C3F7E37C(v9);
    swift_bridgeObjectRelease();
    int64_t v12 = 0;
    unint64_t v67 = v10;
    unint64_t v68 = v11;
    unint64_t v13 = a1 + 64;
    uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
    if (v14 < 64) {
      uint64_t v15 = ~(-1 << v14);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & *(void *)(a1 + 64);
    int64_t v64 = (unint64_t)(v14 + 63) >> 6;
    while (1)
    {
      if (v16)
      {
        unint64_t v17 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v18 = v17 | (v12 << 6);
        goto LABEL_25;
      }
      BOOL v19 = __OFADD__(v12++, 1);
      if (v19)
      {
        __break(1u);
        goto LABEL_75;
      }
      if (v12 >= v64) {
        goto LABEL_35;
      }
      unint64_t v20 = *(void *)(v13 + 8 * v12);
      if (!v20) {
        break;
      }
LABEL_24:
      unint64_t v16 = (v20 - 1) & v20;
      unint64_t v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_25:
      uint64_t v22 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v18);
      uint64_t v24 = *v22;
      unint64_t v23 = v22[1];
      uint64_t v25 = *(void *)(*(void *)(a1 + 56) + 8 * v18);
      if ((v69 & 1) != 0 || v25)
      {
        v66[0] = *v22;
        v66[1] = v23;
        sub_1C3F7E324(v24, v23);
        uint64_t v26 = sub_1C3F844E8(v66, v25);
        if ((unint64_t)(v26 - 1) < 2)
        {
          sub_1C3F7FECC(v26);
          goto LABEL_9;
        }
        if (!v26 || v26 == 3)
        {
LABEL_9:
          sub_1C3F7E2CC(v24, v23);
        }
        else
        {
          sub_1C3F7FEDC(v26, v27);
          sub_1C3F7E2CC(v24, v23);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
    }
    int64_t v21 = v12 + 1;
    if (v12 + 1 >= v64) {
      goto LABEL_35;
    }
    unint64_t v20 = *(void *)(v13 + 8 * v21);
    if (v20) {
      goto LABEL_23;
    }
    int64_t v21 = v12 + 2;
    if (v12 + 2 >= v64) {
      goto LABEL_35;
    }
    unint64_t v20 = *(void *)(v13 + 8 * v21);
    if (v20) {
      goto LABEL_23;
    }
    int64_t v21 = v12 + 3;
    if (v12 + 3 >= v64) {
      goto LABEL_35;
    }
    unint64_t v20 = *(void *)(v13 + 8 * v21);
    if (v20) {
      goto LABEL_23;
    }
    int64_t v21 = v12 + 4;
    if (v12 + 4 >= v64)
    {
LABEL_35:
      swift_release();
      uint64_t v28 = v68;
      swift_bridgeObjectRetain_n();
      char v29 = swift_isUniquelyReferenced_nonNull_native();
      v66[0] = v62;
      sub_1C3F7FAA0(v28, (uint64_t)sub_1C413B380, 0, v29, v66);
      uint64_t v8 = v66[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v67;
      if (!*(void *)(v67 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_37;
      }
      continue;
    }
    break;
  }
  unint64_t v20 = *(void *)(v13 + 8 * v21);
  if (v20)
  {
LABEL_23:
    int64_t v12 = v21;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v64) {
      goto LABEL_35;
    }
    unint64_t v20 = *(void *)(v13 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_24;
    }
  }
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1C3F7FAA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v38 = a1;
  uint64_t v39 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v40 = v8;
  uint64_t v41 = 0;
  uint64_t v42 = v11 & v9;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1C3F7FCF0(&v35);
  uint64_t v12 = v36;
  if (!v36)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1C3F7FCE8();
    return swift_release();
  }
  while (1)
  {
    long long v14 = v35;
    uint64_t v15 = v37;
    unint64_t v16 = (void *)*a5;
    unint64_t v18 = sub_1C4061A50(v35, *((uint64_t *)&v35 + 1));
    uint64_t v19 = v16[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    char v22 = v17;
    if (v16[3] >= v21)
    {
      if (a4)
      {
        uint64_t v25 = (void *)*a5;
        if ((v17 & 1) == 0) {
          goto LABEL_17;
        }
      }
      else
      {
        sub_1C4069B28();
        uint64_t v25 = (void *)*a5;
        if ((v22 & 1) == 0) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      sub_1C40654D4(v21, a4 & 1);
      uint64_t v23 = sub_1C4061A50(v14, *((uint64_t *)&v14 + 1));
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_22;
      }
      unint64_t v18 = v23;
      uint64_t v25 = (void *)*a5;
      if ((v22 & 1) == 0)
      {
LABEL_17:
        v25[(v18 >> 6) + 8] |= 1 << v18;
        *(_OWORD *)(v25[6] + 16 * v18) = v14;
        uint64_t v32 = (void *)(v25[7] + 16 * v18);
        *uint64_t v32 = v12;
        v32[1] = v15;
        uint64_t v33 = v25[2];
        BOOL v29 = __OFADD__(v33, 1);
        uint64_t v34 = v33 + 1;
        if (v29) {
          goto LABEL_21;
        }
        void v25[2] = v34;
        goto LABEL_6;
      }
    }
    uint64_t v26 = (uint64_t *)(v25[7] + 16 * v18);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    swift_retain();
    swift_release();
    sub_1C3F7E2CC(v14, *((unint64_t *)&v14 + 1));
    BOOL v29 = __OFADD__(v28, v15);
    uint64_t v30 = v28 + v15;
    if (v29) {
      goto LABEL_20;
    }
    uint64_t v31 = (void *)(v25[7] + 16 * v18);
    swift_release();
    *uint64_t v31 = v27;
    v31[1] = v30;
LABEL_6:
    sub_1C3F7FCF0(&v35);
    uint64_t v12 = v36;
    a4 = 1;
    if (!v36) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = sub_1C4498558();
  __break(1u);
  return result;
}

uint64_t sub_1C3F7FCE8()
{
  return swift_release();
}

uint64_t sub_1C3F7FCF0@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  int64_t v6 = v5;
  if (!v4)
  {
    int64_t v18 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v19 = (unint64_t)(v1[2] + 64) >> 6;
    if (v18 < v19)
    {
      uint64_t v20 = v1[1];
      unint64_t v21 = *(void *)(v20 + 8 * v18);
      if (v21)
      {
LABEL_9:
        uint64_t v7 = (v21 - 1) & v21;
        unint64_t v8 = __clz(__rbit64(v21)) + (v18 << 6);
        int64_t v6 = v18;
        goto LABEL_3;
      }
      int64_t v22 = v5 + 2;
      int64_t v6 = v5 + 1;
      if (v5 + 2 < v19)
      {
        unint64_t v21 = *(void *)(v20 + 8 * v22);
        if (v21)
        {
LABEL_12:
          int64_t v18 = v22;
          goto LABEL_9;
        }
        int64_t v6 = v5 + 2;
        if (v5 + 3 < v19)
        {
          unint64_t v21 = *(void *)(v20 + 8 * (v5 + 3));
          if (v21)
          {
            int64_t v18 = v5 + 3;
            goto LABEL_9;
          }
          int64_t v22 = v5 + 4;
          int64_t v6 = v5 + 3;
          if (v5 + 4 < v19)
          {
            unint64_t v21 = *(void *)(v20 + 8 * v22);
            if (v21) {
              goto LABEL_12;
            }
            int64_t v18 = v5 + 5;
            int64_t v6 = v5 + 4;
            if (v5 + 5 < v19)
            {
              unint64_t v21 = *(void *)(v20 + 8 * v18);
              if (v21) {
                goto LABEL_9;
              }
              int64_t v6 = v19 - 1;
              int64_t v23 = v5 + 6;
              while (v19 != v23)
              {
                unint64_t v21 = *(void *)(v20 + 8 * v23++);
                if (v21)
                {
                  int64_t v18 = v23 - 1;
                  goto LABEL_9;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *a1 = 0u;
    a1[1] = 0u;
    return result;
  }
  uint64_t v7 = (v4 - 1) & v4;
  unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
  uint64_t v9 = 16 * v8;
  uint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  unint64_t v13 = (uint64_t *)(*(void *)(v3 + 56) + v9);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  v1[3] = v6;
  v1[4] = v7;
  unint64_t v16 = (void (*)(void *))v1[5];
  v24[0] = v11;
  v24[1] = v12;
  v24[2] = v15;
  void v24[3] = v14;
  sub_1C3F7E324(v11, v12);
  swift_retain();
  v16(v24);
  sub_1C3F7E2CC(v11, v12);
  return swift_release();
}

uint64_t sub_1C3F7FEB8(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 2) {
    return sub_1C3F870F4(result);
  }
  return result;
}

uint64_t sub_1C3F7FECC(uint64_t result)
{
  if (result != 3) {
    return sub_1C3F7FEB8(result);
  }
  return result;
}

uint64_t sub_1C3F7FEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v39 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v40 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    sub_1C3F7E324(*v14, v15);
    sub_1C3F7E324(v16, v15);
    sub_1C3F7E5BC((uint64_t)v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v19 = (void *)*v3;
    uint64_t v42 = (void *)*v3;
    *uint64_t v3 = 0x8000000000000000;
    unint64_t v21 = sub_1C3F850CC(v16, v15);
    uint64_t v22 = v19[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      uint64_t result = sub_1C4498558();
      __break(1u);
      return result;
    }
    char v25 = v20;
    if (v19[3] >= v24)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1C4068670();
        int64_t v19 = v42;
      }
    }
    else
    {
      sub_1C406353C(v24, isUniquelyReferenced_nonNull_native);
      int64_t v19 = v42;
      uint64_t v26 = sub_1C3F850CC(v16, v15);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_43;
      }
      unint64_t v21 = v26;
    }
    *uint64_t v3 = v19;
    swift_bridgeObjectRelease();
    uint64_t v28 = (void *)*v3;
    if (v25)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v28[(v21 >> 6) + 8] |= 1 << v21;
      BOOL v29 = (uint64_t *)(v28[6] + 16 * v21);
      *BOOL v29 = v16;
      v29[1] = v15;
      *(void *)(v28[7] + 8 * v21) = 0;
      uint64_t v30 = v28[2];
      uint64_t v31 = v30 + 1;
      BOOL v32 = __OFADD__(v30, 1);
      swift_bridgeObjectRetain();
      if (v32) {
        goto LABEL_40;
      }
      v28[2] = v31;
      sub_1C3F7E324(v16, v15);
    }
    uint64_t v33 = v28[7];
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void *)(v33 + 8 * v21);
    BOOL v35 = __OFSUB__(v34, v17);
    uint64_t v36 = v34 - v17;
    if (v35) {
      goto LABEL_39;
    }
    *(void *)(v33 + 8 * v21) = v36;
    sub_1C3F7E2CC(v16, v15);
    sub_1C3F7E2CC(v16, v15);
    uint64_t v7 = sub_1C4107FA8;
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_41;
    }
    if (v11 >= v40) {
      goto LABEL_35;
    }
    unint64_t v12 = *(void *)(v39 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v40) {
        goto LABEL_35;
      }
      unint64_t v12 = *(void *)(v39 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v40) {
          goto LABEL_35;
        }
        unint64_t v12 = *(void *)(v39 + 8 * v8);
        if (!v12) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 3;
  if (v13 < v40)
  {
    unint64_t v12 = *(void *)(v39 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_42;
        }
        if (v8 >= v40) {
          goto LABEL_35;
        }
        unint64_t v12 = *(void *)(v39 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_18;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_18;
  }
LABEL_35:
  swift_release();
  sub_1C3F80224(a2);
  return sub_1C3F7E5BC((uint64_t)v7);
}

uint64_t sub_1C3F80224(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v65 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v66 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  unint64_t v67 = v1;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v6 << 6);
      goto LABEL_22;
    }
    int64_t v10 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_60;
    }
    if (v10 >= v66) {
      break;
    }
    unint64_t v11 = *(void *)(v65 + 8 * v10);
    ++v6;
    if (!v11)
    {
      int64_t v6 = v10 + 1;
      if (v10 + 1 >= v66) {
        break;
      }
      unint64_t v11 = *(void *)(v65 + 8 * v6);
      if (!v11)
      {
        int64_t v6 = v10 + 2;
        if (v10 + 2 >= v66) {
          break;
        }
        unint64_t v11 = *(void *)(v65 + 8 * v6);
        if (!v11)
        {
          int64_t v12 = v10 + 3;
          if (v12 >= v66) {
            break;
          }
          unint64_t v11 = *(void *)(v65 + 8 * v12);
          if (!v11)
          {
            while (1)
            {
              int64_t v6 = v12 + 1;
              if (__OFADD__(v12, 1)) {
                goto LABEL_65;
              }
              if (v6 >= v66) {
                goto LABEL_55;
              }
              unint64_t v11 = *(void *)(v65 + 8 * v6);
              ++v12;
              if (v11) {
                goto LABEL_21;
              }
            }
          }
          int64_t v6 = v12;
        }
      }
    }
LABEL_21:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v6 << 6);
LABEL_22:
    uint64_t v13 = 16 * v9;
    uint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + v13);
    uint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 56) + v13);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = *(void *)(*v2 + 16);
    sub_1C3F7E324(*v14, v15);
    swift_retain();
    if (v20 && (sub_1C4061A50(v16, v15), (v21 & 1) != 0))
    {
      int64_t v22 = v6;
      sub_1C3F7E324(v16, v15);
      sub_1C3F7E324(v16, v15);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v24 = v2;
      char v25 = isUniquelyReferenced_nonNull_native;
      uint64_t v26 = *v24;
      uint64_t v69 = *v24;
      *uint64_t v24 = 0x8000000000000000;
      sub_1C3F7E324(v16, v15);
      unint64_t v28 = sub_1C4061A50(v16, v15);
      uint64_t v29 = *(void *)(v26 + 16);
      BOOL v30 = (v27 & 1) == 0;
      uint64_t v31 = v29 + v30;
      if (__OFADD__(v29, v30)) {
        goto LABEL_61;
      }
      char v32 = v27;
      if (*(void *)(v26 + 24) >= v31)
      {
        if (v25)
        {
          uint64_t v2 = v67;
          if ((v27 & 1) == 0) {
            goto LABEL_62;
          }
        }
        else
        {
          sub_1C4069B28();
          uint64_t v2 = v67;
          if ((v32 & 1) == 0) {
            goto LABEL_62;
          }
        }
      }
      else
      {
        sub_1C40654D4(v31, v25);
        uint64_t v33 = sub_1C4061A50(v16, v15);
        if ((v32 & 1) != (v34 & 1)) {
          goto LABEL_66;
        }
        unint64_t v28 = v33;
        uint64_t v2 = v67;
        if ((v32 & 1) == 0) {
          goto LABEL_62;
        }
      }
      uint64_t v59 = *(void *)(v69 + 56);
      uint64_t v60 = v59 + 16 * v28;
      uint64_t v62 = *(void *)(v60 + 8);
      int64_t v61 = (void *)(v60 + 8);
      uint64_t v63 = v62 - v18;
      if (__OFSUB__(v62, v18)) {
        goto LABEL_63;
      }
      if (*(void *)(v59 + 16 * v28))
      {
        void *v61 = v63;
      }
      else
      {
        swift_arrayDestroy();
        sub_1C41179B4(v28, v69);
      }
      int64_t v6 = v22;
      sub_1C3F7E2CC(v16, v15);
      *uint64_t v2 = v69;
      sub_1C3F7E2CC(v16, v15);
      sub_1C3F7E2CC(v16, v15);
      swift_release();
      sub_1C3F7E2CC(v16, v15);
    }
    else
    {
      BOOL v35 = __OFSUB__(0, v18);
      uint64_t v36 = -v18;
      if (v35)
      {
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        uint64_t result = sub_1C4498558();
        __break(1u);
        return result;
      }
      if (v19)
      {
        int64_t v37 = v6;
        sub_1C3F7E324(v16, v15);
        char v38 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v39 = v2;
        char v40 = v38;
        uint64_t v41 = (void *)*v39;
        uint64_t v70 = (void *)*v39;
        *uint64_t v39 = 0x8000000000000000;
        unint64_t v43 = sub_1C4061A50(v16, v15);
        uint64_t v44 = v41[2];
        BOOL v45 = (v42 & 1) == 0;
        uint64_t v46 = v44 + v45;
        if (__OFADD__(v44, v45)) {
          goto LABEL_59;
        }
        char v47 = v42;
        if (v41[3] >= v46)
        {
          if ((v40 & 1) == 0) {
            sub_1C4069B28();
          }
        }
        else
        {
          sub_1C40654D4(v46, v40);
          uint64_t v48 = sub_1C4061A50(v16, v15);
          if ((v47 & 1) != (v49 & 1)) {
            goto LABEL_66;
          }
          unint64_t v43 = v48;
        }
        uint64_t v2 = v67;
        if (v47)
        {
          uint64_t v7 = (void *)(v70[7] + 16 * v43);
          swift_release();
          *uint64_t v7 = v19;
          v7[1] = v36;
        }
        else
        {
          v70[(v43 >> 6) + 8] |= 1 << v43;
          unint64_t v55 = (uint64_t *)(v70[6] + 16 * v43);
          *unint64_t v55 = v16;
          v55[1] = v15;
          unint64_t v56 = (void *)(v70[7] + 16 * v43);
          *unint64_t v56 = v19;
          v56[1] = v36;
          uint64_t v57 = v70[2];
          BOOL v35 = __OFADD__(v57, 1);
          uint64_t v58 = v57 + 1;
          if (v35) {
            goto LABEL_64;
          }
          v70[2] = v58;
          sub_1C3F7E324(v16, v15);
        }
        *unint64_t v67 = (uint64_t)v70;
        swift_bridgeObjectRelease();
        sub_1C3F7E2CC(v16, v15);
        sub_1C3F7E2CC(v16, v15);
        int64_t v6 = v37;
      }
      else
      {
        sub_1C3F7E324(v16, v15);
        swift_bridgeObjectRetain();
        unint64_t v50 = sub_1C4061A50(v16, v15);
        char v52 = v51;
        swift_bridgeObjectRelease();
        if (v52)
        {
          char v53 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v54 = *v2;
          uint64_t v71 = *v2;
          *uint64_t v2 = 0x8000000000000000;
          if ((v53 & 1) == 0)
          {
            sub_1C4069B28();
            uint64_t v54 = v71;
          }
          sub_1C3F7E2CC(*(void *)(*(void *)(v54 + 48) + 16 * v50), *(void *)(*(void *)(v54 + 48) + 16 * v50 + 8));
          sub_1C41179B4(v50, v54);
          *uint64_t v2 = v54;
          swift_bridgeObjectRelease();
          sub_1C3F7E2CC(v16, v15);
          swift_release();
        }
        else
        {
          sub_1C3F7E2CC(v16, v15);
        }
        sub_1C3F7E2CC(v16, v15);
      }
    }
  }
LABEL_55:
  return swift_release();
}

uint64_t sub_1C3F807B0(uint64_t a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF130);
  sub_1C4496F18();
  uint64_t v32 = a1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v33 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_24;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_40;
    }
    if (v10 >= v33) {
      break;
    }
    unint64_t v11 = *(void *)(v32 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v33) {
        break;
      }
      unint64_t v11 = *(void *)(v32 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v33) {
          break;
        }
        unint64_t v11 = *(void *)(v32 + 8 * v7);
        if (!v11)
        {
          int64_t v7 = v10 + 3;
          if (v10 + 3 >= v33) {
            break;
          }
          unint64_t v11 = *(void *)(v32 + 8 * v7);
          if (!v11)
          {
            int64_t v12 = v10 + 4;
            if (v12 >= v33) {
              break;
            }
            unint64_t v11 = *(void *)(v32 + 8 * v12);
            if (!v11)
            {
              while (1)
              {
                int64_t v7 = v12 + 1;
                if (__OFADD__(v12, 1)) {
                  goto LABEL_41;
                }
                if (v7 >= v33) {
                  goto LABEL_35;
                }
                unint64_t v11 = *(void *)(v32 + 8 * v7);
                ++v12;
                if (v11) {
                  goto LABEL_23;
                }
              }
            }
            int64_t v7 = v12;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_24:
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    sub_1C3F7E324(*v13, v15);
    sub_1C3F7E324(v14, v15);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = (void *)*v2;
    char v34 = (void *)*v2;
    *uint64_t v2 = 0x8000000000000000;
    unint64_t v19 = sub_1C3F850CC(v14, v15);
    uint64_t v20 = v17[2];
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      uint64_t result = sub_1C4498558();
      __break(1u);
      return result;
    }
    char v23 = v18;
    if (v17[3] >= v22)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v26 = v34;
        if (v18) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_1C4068670();
        uint64_t v26 = v34;
        if (v23) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_1C406353C(v22, isUniquelyReferenced_nonNull_native);
      uint64_t v24 = sub_1C3F850CC(v14, v15);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_42;
      }
      unint64_t v19 = v24;
      uint64_t v26 = v34;
      if (v23)
      {
LABEL_4:
        *(void *)(v26[7] + 8 * v19) = 0;
        goto LABEL_5;
      }
    }
    v26[(v19 >> 6) + 8] |= 1 << v19;
    char v27 = (uint64_t *)(v26[6] + 16 * v19);
    uint64_t *v27 = v14;
    v27[1] = v15;
    *(void *)(v26[7] + 8 * v19) = 0;
    uint64_t v28 = v26[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_39;
    }
    v26[2] = v30;
    sub_1C3F7E324(v14, v15);
LABEL_5:
    *uint64_t v2 = v26;
    swift_bridgeObjectRelease();
    sub_1C3F7E2CC(v14, v15);
    sub_1C3F7E2CC(v14, v15);
  }
LABEL_35:
  return swift_release();
}

uint64_t sub_1C3F80AD4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09D0);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for Replica();
  uint64_t v7 = MEMORY[0x1F4188790](v38);
  unint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v11 = (char *)&v36 - v10;
  uint64_t v12 = type metadata accessor for Timestamp(0);
  uint64_t result = MEMORY[0x1F4188790](v12 - 8);
  unint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_1C3F84090((uint64_t)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    sub_1C3F8F5D4((uint64_t)v15, type metadata accessor for Timestamp);
    uint64_t v16 = qword_1EBBC00D0;
    swift_retain();
    if (v16 != -1) {
      goto LABEL_32;
    }
    while (1)
    {
      sub_1C4497A58();
      swift_release();
      sub_1C3F8F450((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v17 = (long long *)(v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
      swift_beginAccess();
      long long v43 = *v17;
      sub_1C3F81000((uint64_t)v9, (uint64_t)v6);
      swift_endAccess();
      uint64_t v18 = sub_1C44967E8();
      uint64_t v19 = *(void *)(v18 - 8);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v6, 1, v18);
      if (result == 1) {
        break;
      }
      int64_t v37 = sub_1C44966E8();
      char v21 = v20;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v6, v18);
      if (v21) {
        goto LABEL_34;
      }
      sub_1C3F8F5D4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v22 = v39 + 56;
      uint64_t v23 = 1 << *(unsigned char *)(v39 + 32);
      uint64_t v24 = -1;
      if (v23 < 64) {
        uint64_t v24 = ~(-1 << v23);
      }
      unint64_t v25 = v24 & *(void *)(v39 + 56);
      v2 += OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
      int64_t v26 = (unint64_t)(v23 + 63) >> 6;
      swift_bridgeObjectRetain();
      int64_t v27 = 0;
      while (v25)
      {
        while (1)
        {
          unint64_t v28 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          unint64_t v29 = v28 | (v27 << 6);
LABEL_25:
          uint64_t v33 = *(void *)(v39 + 48) + 16 * v29;
          unint64_t v6 = *(char **)v33;
          unint64_t v9 = *(char **)(v33 + 8);
          swift_beginAccess();
          uint64_t v41 = v6;
          char v42 = v9;
          sub_1C3F7E324((uint64_t)v6, (unint64_t)v9);
          sub_1C3F7E324((uint64_t)v6, (unint64_t)v9);
          char v34 = sub_1C3F83FF0(v40, (uint64_t *)&v41);
          if (!*(void *)(v35 + 16)) {
            break;
          }
          sub_1C3F811CC((uint64_t)v11, v37);
          v34(v40, 0);
          swift_endAccess();
          sub_1C3F7E2CC((uint64_t)v6, (unint64_t)v9);
          sub_1C3F7E2CC((uint64_t)v41, (unint64_t)v42);
          if (!v25) {
            goto LABEL_11;
          }
        }
        v34(v40, 0);
        sub_1C3F7E2CC((uint64_t)v41, (unint64_t)v42);
        swift_endAccess();
        sub_1C3F7E2CC((uint64_t)v6, (unint64_t)v9);
      }
LABEL_11:
      int64_t v30 = v27 + 1;
      if (__OFADD__(v27, 1))
      {
        __break(1u);
      }
      else
      {
        if (v30 >= v26) {
          goto LABEL_28;
        }
        unint64_t v31 = *(void *)(v22 + 8 * v30);
        ++v27;
        if (v31) {
          goto LABEL_24;
        }
        int64_t v27 = v30 + 1;
        if (v30 + 1 >= v26) {
          goto LABEL_28;
        }
        unint64_t v31 = *(void *)(v22 + 8 * v27);
        if (v31) {
          goto LABEL_24;
        }
        int64_t v27 = v30 + 2;
        if (v30 + 2 >= v26) {
          goto LABEL_28;
        }
        unint64_t v31 = *(void *)(v22 + 8 * v27);
        if (v31) {
          goto LABEL_24;
        }
        int64_t v32 = v30 + 3;
        if (v32 >= v26)
        {
LABEL_28:
          swift_release();
          return sub_1C3F8F5D4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Replica);
        }
        unint64_t v31 = *(void *)(v22 + 8 * v32);
        if (v31)
        {
          int64_t v27 = v32;
LABEL_24:
          unint64_t v25 = (v31 - 1) & v31;
          unint64_t v29 = __clz(__rbit64(v31)) + (v27 << 6);
          goto LABEL_25;
        }
        while (1)
        {
          int64_t v27 = v32 + 1;
          if (__OFADD__(v32, 1)) {
            break;
          }
          if (v27 >= v26) {
            goto LABEL_28;
          }
          unint64_t v31 = *(void *)(v22 + 8 * v27);
          ++v32;
          if (v31) {
            goto LABEL_24;
          }
        }
      }
      __break(1u);
LABEL_32:
      swift_once();
    }
    __break(1u);
LABEL_34:
    __break(1u);
  }
  return result;
}

uint64_t sub_1C3F81000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  if (!*(void *)(a1 + *(int *)(type metadata accessor for Replica() + 20))) {
    uint64_t v5 = v6;
  }
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_1C3F8F160(a1);
    if (v8)
    {
      unint64_t v9 = v7;
      uint64_t v10 = *(void *)(v5 + 56);
      uint64_t v11 = sub_1C44967E8();
      uint64_t v12 = *(void *)(v11 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16))(a2, v10 + *(void *)(v12 + 72) * v9, v11);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
    }
    else
    {
      uint64_t v16 = sub_1C44967E8();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a2, 1, 1, v16);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = sub_1C44967E8();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    return v14(a2, 1, 1, v13);
  }
}

uint64_t sub_1C3F811CC(uint64_t a1, int64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Replica();
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1C44967E8();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09D0);
  MEMORY[0x1F4188790](v13 - 8);
  unint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v2;
  if (*(void *)(v16 + 16) && (unint64_t v17 = sub_1C3F8F160(a1), (v18 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v15, *(void *)(v16 + 56) + *(void *)(v10 + 72) * v17, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v15, 1, 1, v9);
  }
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9))
  {
    sub_1C3F962E0((uint64_t)v15, (uint64_t *)&unk_1EBBC09D0);
    int64_t v19 = a2;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v15, v9);
    sub_1C3F962E0((uint64_t)v15, (uint64_t *)&unk_1EBBC09D0);
    uint64_t v20 = sub_1C3FAE784();
    char v22 = v21;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if (v22) {
      int64_t v19 = a2;
    }
    else {
      int64_t v19 = v20;
    }
    if (v19 > a2)
    {
      __break(1u);
      goto LABEL_20;
    }
  }
  int64_t v35 = v19;
  int64_t v36 = a2;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char v34 = (void *)*v3;
  uint64_t v24 = v34;
  *uint64_t v3 = 0x8000000000000000;
  a2 = sub_1C3F8F160(a1);
  uint64_t v26 = v24[2];
  BOOL v27 = (v25 & 1) == 0;
  uint64_t v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  LOBYTE(v9) = v25;
  if (v24[3] >= v28)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_16;
    }
LABEL_21:
    sub_1C3FA50F8();
    uint64_t v24 = v34;
    goto LABEL_16;
  }
  sub_1C3F9188C(v28, isUniquelyReferenced_nonNull_native);
  uint64_t v24 = v34;
  unint64_t v29 = sub_1C3F8F160(a1);
  if ((v9 & 1) != (v30 & 1))
  {
    uint64_t result = sub_1C4498558();
    __break(1u);
    return result;
  }
  a2 = v29;
LABEL_16:
  *uint64_t v3 = v24;
  swift_bridgeObjectRelease();
  unint64_t v31 = (void *)*v3;
  swift_bridgeObjectRetain();
  if ((v9 & 1) == 0)
  {
    sub_1C44967D8();
    sub_1C3F8EF8C(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Replica);
    sub_1C3F9179C(a2, (uint64_t)v8, (uint64_t)v12, v31);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF138);
  sub_1C3F815A4((unint64_t *)&unk_1EBBBF140, &qword_1EBBBF138);
  return sub_1C4496738();
}

uint64_t sub_1C3F815A4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1C3F815E8(void *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = *(void *)(*a1 + 40);
  unint64_t v4 = *(void *)(*a1 + 48);
  (*(void (**)(void, void))(*a1 + 64))(*a1, 0);
  sub_1C3F7E2CC(v5, v4);
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = *(int *)(v3 + 72);
    uint64_t v7 = *(void *)(v3 + 32);
    long long v28 = *(_OWORD *)(v3 + 40);
    sub_1C3F832BC((uint64_t *)&v28, 0);
    uint64_t v8 = *(void *)(v7 + v6);
    if (*(void *)(v8 + 16))
    {
      uint64_t v10 = *(void *)(v3 + 40);
      unint64_t v9 = *(void *)(v3 + 48);
      sub_1C3F7E324(v10, v9);
      uint64_t v11 = sub_1C3F850CC(v10, v9);
      uint64_t v13 = *(void *)(v3 + 40);
      unint64_t v12 = *(void *)(v3 + 48);
      if (v14)
      {
        unint64_t v15 = (uint64_t *)(*(void *)(v8 + 56) + 48 * v11);
        uint64_t v17 = *v15;
        uint64_t v16 = v15[1];
        uint64_t v19 = v15[2];
        uint64_t v18 = v15[3];
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1C3F7E2CC(v13, v12);
        if (v19)
        {
          uint64_t v20 = *(void *)(v3 + 48);
          uint64_t v21 = *(void *)(v3 + 40);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1C3F84B88(v17, v16, v19);
          v27[0] = v21;
          v27[1] = v20;
          *(void *)&long long v28 = v19;
          *((void *)&v28 + 1) = v18;
          sub_1C3F817F8(v27, (uint64_t *)&v28);
          uint64_t v22 = *(void *)(v18 + 16);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v23 = *(void *)(v3 + 40);
          unint64_t v24 = *(void *)(v3 + 48);
          if (v22)
          {
            sub_1C3F7E324(*(void *)(v3 + 40), *(void *)(v3 + 48));
            sub_1C3F81BF8((uint64_t *)&v28, v23, v24);
            sub_1C3F7E2CC(v28, *((unint64_t *)&v28 + 1));
            goto LABEL_10;
          }
          uint64_t v26 = *(void *)(v3 + 40);
          unint64_t v25 = *(void *)(v3 + 48);
          goto LABEL_9;
        }
      }
      else
      {
        sub_1C3F7E2CC(*(void *)(v3 + 40), *(void *)(v3 + 48));
      }
    }
    unint64_t v25 = *(void *)(v3 + 48);
    uint64_t v26 = *(void *)(v3 + 40);
LABEL_9:
    sub_1C3F833F4(v26, v25, &v28);
    sub_1C3F6C6F0(v28, *((unint64_t *)&v28 + 1));
  }
LABEL_10:
  free((void *)v3);
}

void sub_1C3F817F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v30 = 0;
  unint64_t v8 = *(int *)(type metadata accessor for PartiallyOrderedReferenceMap() + 24);
  unint64_t v9 = *(void **)(v2 + v8);
  uint64_t v10 = v9[2];
  if (v10)
  {
    unint64_t v25 = v5;
    unint64_t v26 = v8;
    uint64_t v27 = v3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
    uint64_t v3 = 24 * v10;
    while (1)
    {
      if (v10 > v9[2])
      {
        __break(1u);
LABEL_28:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v8 = v26;
        uint64_t v3 = v27;
        unint64_t v5 = v25;
        break;
      }
      uint64_t v12 = *(void *)((char *)v9 + v3 + 8);
      if (v12)
      {
        if (__OFADD__(v11++, 1))
        {
          __break(1u);
          goto LABEL_33;
        }
        unint64_t v5 = *(void *)((char *)v9 + v3 + 16);
        uint64_t v30 = v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (sub_1C4112134(v7, v5))
        {
          sub_1C3F870F4(v12);
LABEL_11:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v9[2] == v10)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBBF48);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1C449B490;
            *(void *)(inited + 32) = v4;
            *(void *)(inited + 40) = v25;
            sub_1C3F7E324(v4, v25);
            uint64_t v16 = sub_1C411EDFC(inited);
            swift_setDeallocating();
            swift_arrayDestroy();
            uint64_t v17 = *(void **)(v27 + v26);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v17 = sub_1C3F74528(0, v17[2] + 1, 1, v17);
            }
            unint64_t v19 = v17[2];
            unint64_t v18 = v17[3];
            if (v19 >= v18 >> 1) {
              uint64_t v17 = sub_1C3F74528((void *)(v18 > 1), v19 + 1, 1, v17);
            }
            uint64_t v17[2] = v19 + 1;
            uint64_t v20 = &v17[3 * v19];
            v20[4] = 0;
            v20[5] = 0;
            v20[6] = v16;
            *(void *)(v27 + v26) = v17;
            goto LABEL_21;
          }
          unint64_t v8 = v25;
          sub_1C3F7E324(v4, v25);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v9 = sub_1C3F74514(v9);
          }
          if (v10 < v9[2])
          {
            sub_1C3F81BF8(&v28, v4, v25);
            sub_1C3F7E2CC(v28, v29);
            *(void *)(v27 + v26) = v9;
            goto LABEL_21;
          }
          __break(1u);
LABEL_35:
          unint64_t v9 = sub_1C3F74514(v9);
          if (!v9[2]) {
            goto LABEL_36;
          }
LABEL_31:
          sub_1C3F81BF8(&v28, v4, v5);
          sub_1C3F7E2CC(v28, v29);
          *(void *)(v3 + v8) = v9;
LABEL_21:
          if (v30 >= 21)
          {
            if (qword_1EA39B490 != -1) {
LABEL_33:
            }
              swift_once();
            uint64_t v21 = sub_1C4496C58();
            __swift_project_value_buffer(v21, (uint64_t)qword_1EA3B89F8);
            uint64_t v22 = sub_1C4496C38();
            os_log_type_t v23 = sub_1C44979C8();
            if (os_log_type_enabled(v22, v23))
            {
              unint64_t v24 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)unint64_t v24 = 134217984;
              swift_beginAccess();
              sub_1C4497B68();
              _os_log_impl(&dword_1C3F4F000, v22, v23, "Excessive insertion comparisons: %ld", v24, 0xCu);
              MEMORY[0x1C8782060](v24, -1, -1);
            }
          }
          return;
        }
        char v14 = sub_1C4112134(v6, v12);
        sub_1C3F870F4(v12);
        if (v14) {
          goto LABEL_11;
        }
      }
      v3 -= 24;
      if (!--v10) {
        goto LABEL_28;
      }
    }
  }
  sub_1C3F7E324(v4, v5);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_35;
  }
  if (v9[2]) {
    goto LABEL_31;
  }
LABEL_36:
  __break(1u);
}

uint64_t sub_1C3F81BF8(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *v3;
  sub_1C44985F8();
  swift_bridgeObjectRetain();
  sub_1C4496568();
  uint64_t v7 = sub_1C4498628();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_116:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)__s1 = *(void *)v78;
    *(void *)uint64_t v78 = 0x8000000000000000;
    sub_1C3F7E324(a2, a3);
    sub_1C3F82614(a2, a3, v9, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v78 = *(void *)__s1;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  uint64_t v83 = ~v8;
  unint64_t v11 = a3 >> 62;
  BOOL v12 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v81 = v12;
  uint64_t v80 = v6;
  size_t __n = BYTE6(a3);
  uint64_t v82 = v6 + 56;
  uint64_t v76 = (a2 >> 32) - (int)a2;
  uint64_t v77 = a2 >> 32;
  unint64_t v75 = a3;
  while (2)
  {
    uint64_t v13 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    uint64_t v16 = 0;
    switch(v15 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v14), v14))
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
        }
        uint64_t v16 = HIDWORD(v14) - (int)v14;
LABEL_14:
        sub_1C3F7E324(v14, v15);
        break;
      case 2uLL:
        uint64_t v18 = *(void *)(v14 + 16);
        uint64_t v17 = *(void *)(v14 + 24);
        uint64_t v16 = v17 - v18;
        if (!__OFSUB__(v17, v18)) {
          goto LABEL_14;
        }
        goto LABEL_120;
      case 3uLL:
        break;
      default:
        uint64_t v16 = BYTE6(v15);
        break;
    }
    size_t v19 = __n;
    switch((int)v11)
    {
      case 1:
        size_t v19 = HIDWORD(a2) - (int)a2;
        if (v81) {
          goto LABEL_121;
        }
        goto LABEL_19;
      case 2:
        uint64_t v21 = *(void *)(a2 + 16);
        uint64_t v20 = *(void *)(a2 + 24);
        BOOL v22 = __OFSUB__(v20, v21);
        size_t v19 = v20 - v21;
        if (!v22) {
          goto LABEL_19;
        }
        goto LABEL_122;
      case 3:
        if (v16) {
          goto LABEL_7;
        }
        goto LABEL_117;
      default:
LABEL_19:
        if (v16 != v19)
        {
LABEL_7:
          sub_1C3F7E2CC(v14, v15);
          goto LABEL_8;
        }
        if (v16 < 1)
        {
LABEL_117:
          sub_1C3F7E2CC(v14, v15);
LABEL_118:
          swift_bridgeObjectRelease();
          sub_1C3F7E2CC(a2, a3);
          uint64_t v71 = (uint64_t *)(*(void *)(*(void *)v78 + 48) + 16 * v9);
          uint64_t v72 = *v71;
          unint64_t v73 = v71[1];
          *a1 = *v71;
          a1[1] = v73;
          sub_1C3F7E324(v72, v73);
          return 0;
        }
        break;
    }
    switch(v15 >> 62)
    {
      case 1uLL:
        if ((int)v14 > v14 >> 32) {
          goto LABEL_123;
        }
        uint64_t v27 = (unsigned char *)sub_1C4496298();
        if (!v27) {
          goto LABEL_33;
        }
        uint64_t v28 = sub_1C44962C8();
        if (__OFSUB__((int)v14, v28)) {
          goto LABEL_125;
        }
        v27 += (int)v14 - v28;
LABEL_33:
        uint64_t result = sub_1C44962B8();
        uint64_t v10 = v82;
        if (!v11)
        {
          *(void *)__s1 = a2;
          *(_WORD *)&__s1[8] = a3;
          __s1[10] = BYTE2(a3);
          __s1[11] = BYTE3(a3);
          __s1[12] = BYTE4(a3);
          __s1[13] = BYTE5(a3);
          if (!v27) {
            goto LABEL_153;
          }
          uint64_t v48 = (uint64_t *)__s1;
          char v47 = v27;
          goto LABEL_99;
        }
        if (v11 == 1)
        {
          if (v77 < (int)a2) {
            goto LABEL_134;
          }
          swift_retain();
          uint64_t v30 = (char *)sub_1C4496298();
          if (v30)
          {
            uint64_t v31 = sub_1C44962C8();
            if (__OFSUB__((int)a2, v31)) {
              goto LABEL_141;
            }
            v30 += (int)a2 - v31;
          }
          uint64_t v32 = sub_1C44962B8();
          size_t v33 = (a2 >> 32) - (int)a2;
          if (v32 < v76) {
            size_t v33 = v32;
          }
          if (!v27) {
            goto LABEL_143;
          }
          if (!v30) {
            goto LABEL_144;
          }
          int v34 = memcmp(v27, v30, v33);
          sub_1C3F7E2CC(a2, a3);
        }
        else
        {
          uint64_t v65 = *(void *)(a2 + 16);
          uint64_t v64 = *(void *)(a2 + 24);
          swift_retain();
          swift_retain();
          int64_t v66 = (char *)sub_1C4496298();
          if (v66)
          {
            uint64_t v67 = sub_1C44962C8();
            if (__OFSUB__(v65, v67)) {
              goto LABEL_140;
            }
            v66 += v65 - v67;
          }
          BOOL v22 = __OFSUB__(v64, v65);
          int64_t v68 = v64 - v65;
          if (v22) {
            goto LABEL_135;
          }
          uint64_t result = sub_1C44962B8();
          if (result >= v68) {
            size_t v69 = v68;
          }
          else {
            size_t v69 = result;
          }
          if (!v27) {
            goto LABEL_154;
          }
          a3 = v75;
          uint64_t v6 = v80;
          if (!v66) {
            goto LABEL_155;
          }
          int v34 = memcmp(v27, v66, v69);
          swift_release();
LABEL_112:
          swift_release();
        }
        sub_1C3F7E2CC(v14, v15);
LABEL_114:
        uint64_t v10 = v82;
        if (!v34) {
          goto LABEL_118;
        }
        goto LABEL_8;
      case 2uLL:
        uint64_t v35 = *(void *)(v14 + 16);
        swift_retain();
        swift_retain();
        int64_t v36 = (char *)sub_1C4496298();
        if (!v36) {
          goto LABEL_47;
        }
        uint64_t v37 = sub_1C44962C8();
        if (__OFSUB__(v35, v37)) {
          goto LABEL_124;
        }
        v36 += v35 - v37;
LABEL_47:
        uint64_t result = sub_1C44962B8();
        uint64_t v6 = v80;
        if (!v11)
        {
          *(void *)__s1 = a2;
          *(_WORD *)&__s1[8] = a3;
          __s1[10] = BYTE2(a3);
          __s1[11] = BYTE3(a3);
          __s1[12] = BYTE4(a3);
          __s1[13] = BYTE5(a3);
          if (!v36) {
            goto LABEL_150;
          }
          int v34 = memcmp(v36, __s1, __n);
          swift_release();
          goto LABEL_112;
        }
        if (v11 == 1)
        {
          if (v77 < (int)a2) {
            goto LABEL_128;
          }
          swift_retain();
          uint64_t v38 = (char *)sub_1C4496298();
          if (v38)
          {
            uint64_t v39 = sub_1C44962C8();
            if (__OFSUB__((int)a2, v39)) {
              goto LABEL_139;
            }
            v38 += (int)a2 - v39;
          }
          uint64_t v40 = sub_1C44962B8();
          size_t v41 = (a2 >> 32) - (int)a2;
          if (v40 < v76) {
            size_t v41 = v40;
          }
          if (!v36) {
            goto LABEL_145;
          }
          if (!v38) {
            goto LABEL_146;
          }
          int v34 = memcmp(v36, v38, v41);
          sub_1C3F7E2CC(a2, a3);
          swift_release();
        }
        else
        {
          uint64_t v59 = *(void *)(a2 + 16);
          uint64_t v74 = *(void *)(a2 + 24);
          swift_retain();
          swift_retain();
          uint64_t v60 = (char *)sub_1C4496298();
          if (v60)
          {
            uint64_t v61 = sub_1C44962C8();
            if (__OFSUB__(v59, v61)) {
              goto LABEL_138;
            }
            v60 += v59 - v61;
          }
          BOOL v22 = __OFSUB__(v74, v59);
          int64_t v62 = v74 - v59;
          if (v22) {
            goto LABEL_133;
          }
          uint64_t result = sub_1C44962B8();
          if (result >= v62) {
            size_t v63 = v62;
          }
          else {
            size_t v63 = result;
          }
          if (!v36) {
            goto LABEL_151;
          }
          a3 = v75;
          if (!v60) {
            goto LABEL_152;
          }
          int v34 = memcmp(v36, v60, v63);
          swift_release();
          swift_release();
          swift_release();
        }
        swift_release();
        sub_1C3F7E2CC(v14, v15);
        uint64_t v6 = v80;
        goto LABEL_114;
      case 3uLL:
        *(void *)&__s1[6] = 0;
        *(void *)__s1 = 0;
        if (!v11) {
          goto LABEL_67;
        }
        if (v11 == 1)
        {
          if (v77 < (int)a2) {
            goto LABEL_127;
          }
          sub_1C3F7E324(a2, a3);
          uint64_t v42 = sub_1C4496298();
          if (!v42) {
            goto LABEL_147;
          }
          uint64_t v24 = v42;
          uint64_t v43 = sub_1C44962C8();
          uint64_t v26 = (int)a2 - v43;
          if (__OFSUB__((int)a2, v43)) {
            goto LABEL_132;
          }
          goto LABEL_63;
        }
        uint64_t v54 = *(void *)(a2 + 16);
        uint64_t v55 = *(void *)(a2 + 24);
        swift_retain();
        swift_retain();
        char v51 = (char *)sub_1C4496298();
        if (v51)
        {
          uint64_t v56 = sub_1C44962C8();
          if (__OFSUB__(v54, v56)) {
            goto LABEL_137;
          }
          v51 += v54 - v56;
        }
        BOOL v22 = __OFSUB__(v55, v54);
        int64_t v53 = v55 - v54;
        if (v22) {
          goto LABEL_130;
        }
        uint64_t result = sub_1C44962B8();
        if (!v51) {
          goto LABEL_149;
        }
        goto LABEL_79;
      default:
        *(void *)__s1 = v14;
        *(_WORD *)&__s1[8] = v15;
        __s1[10] = BYTE2(v15);
        __s1[11] = BYTE3(v15);
        __s1[12] = BYTE4(v15);
        __s1[13] = BYTE5(v15);
        if (!v11)
        {
LABEL_67:
          uint64_t v85 = a2;
          __int16 v86 = a3;
          char v87 = BYTE2(a3);
          char v88 = BYTE3(a3);
          char v89 = BYTE4(a3);
          char v90 = BYTE5(a3);
          char v47 = __s1;
          uint64_t v48 = &v85;
LABEL_99:
          int v46 = memcmp(v47, v48, __n);
          goto LABEL_100;
        }
        if (v11 != 1)
        {
          uint64_t v49 = *(void *)(a2 + 16);
          uint64_t v50 = *(void *)(a2 + 24);
          swift_retain();
          swift_retain();
          char v51 = (char *)sub_1C4496298();
          if (v51)
          {
            uint64_t v52 = sub_1C44962C8();
            if (__OFSUB__(v49, v52)) {
              goto LABEL_136;
            }
            v51 += v49 - v52;
          }
          BOOL v22 = __OFSUB__(v50, v49);
          int64_t v53 = v50 - v49;
          if (v22) {
            goto LABEL_129;
          }
          uint64_t result = sub_1C44962B8();
          if (!v51) {
            goto LABEL_148;
          }
LABEL_79:
          if (result >= v53) {
            size_t v57 = v53;
          }
          else {
            size_t v57 = result;
          }
          int v58 = memcmp(__s1, v51, v57);
          swift_release();
          swift_release();
          sub_1C3F7E2CC(v14, v15);
          uint64_t v6 = v80;
          uint64_t v10 = v82;
          if (!v58) {
            goto LABEL_118;
          }
LABEL_8:
          unint64_t v9 = (v9 + 1) & v83;
          if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
            goto LABEL_116;
          }
          continue;
        }
        if (v77 < (int)a2) {
          goto LABEL_126;
        }
        sub_1C3F7E324(a2, a3);
        uint64_t v23 = sub_1C4496298();
        if (v23)
        {
          uint64_t v24 = v23;
          uint64_t v25 = sub_1C44962C8();
          uint64_t v26 = (int)a2 - v25;
          if (__OFSUB__((int)a2, v25)) {
            goto LABEL_131;
          }
LABEL_63:
          uint64_t v44 = sub_1C44962B8();
          if (v44 >= v76) {
            size_t v45 = (a2 >> 32) - (int)a2;
          }
          else {
            size_t v45 = v44;
          }
          int v46 = memcmp(__s1, (const void *)(v24 + v26), v45);
          a3 = v75;
          sub_1C3F7E2CC(a2, v75);
LABEL_100:
          sub_1C3F7E2CC(v14, v15);
          if (!v46) {
            goto LABEL_118;
          }
          goto LABEL_8;
        }
        sub_1C44962B8();
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        uint64_t result = sub_1C44962B8();
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
        return result;
    }
  }
}

uint64_t sub_1C3F82614(uint64_t result, unint64_t a2, unint64_t a3, char a4)
{
  unint64_t v5 = v4;
  uint64_t v8 = result;
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_123;
  }
  if (a4)
  {
    sub_1C407033C();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_1C3FAE33C();
      goto LABEL_123;
    }
    sub_1C3F83008();
  }
  uint64_t v11 = *v4;
  sub_1C44985F8();
  sub_1C4496568();
  uint64_t result = sub_1C4498628();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if (((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
  {
LABEL_123:
    uint64_t v76 = *v5;
    *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
    uint64_t v77 = (uint64_t *)(*(void *)(v76 + 48) + 16 * a3);
    *uint64_t v77 = v8;
    v77[1] = a2;
    uint64_t v78 = *(void *)(v76 + 16);
    BOOL v24 = __OFADD__(v78, 1);
    uint64_t v79 = v78 + 1;
    if (!v24)
    {
      *(void *)(v76 + 16) = v79;
      return result;
    }
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
  }
  uint64_t v88 = ~v12;
  uint64_t v84 = v11;
  uint64_t v86 = v11 + 56;
  BOOL v14 = __OFSUB__(HIDWORD(v8), v8);
  BOOL v85 = v14;
  unint64_t v87 = a2 >> 62;
  uint64_t v82 = (v8 >> 32) - (int)v8;
  uint64_t v83 = v8 >> 32;
  BOOL v81 = v4;
  while (2)
  {
    unint64_t v15 = (uint64_t *)(*(void *)(v11 + 48) + 16 * a3);
    uint64_t v17 = *v15;
    unint64_t v16 = v15[1];
    uint64_t v18 = 0;
    switch(v16 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v17), v17))
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
          goto LABEL_129;
        }
        uint64_t v18 = HIDWORD(v17) - (int)v17;
LABEL_21:
        sub_1C3F7E324(v17, v16);
LABEL_22:
        uint64_t v21 = BYTE6(a2);
        switch(a2 >> 62)
        {
          case 1uLL:
            uint64_t v21 = HIDWORD(v8) - (int)v8;
            if (v85) {
              goto LABEL_127;
            }
            goto LABEL_26;
          case 2uLL:
            uint64_t v23 = *(void *)(v8 + 16);
            uint64_t v22 = *(void *)(v8 + 24);
            BOOL v24 = __OFSUB__(v22, v23);
            uint64_t v21 = v22 - v23;
            if (!v24) {
              goto LABEL_26;
            }
            goto LABEL_128;
          case 3uLL:
            if (v18) {
              goto LABEL_14;
            }
            goto LABEL_163;
          default:
LABEL_26:
            if (v18 != v21)
            {
LABEL_14:
              uint64_t result = sub_1C3F7E2CC(v17, v16);
              goto LABEL_15;
            }
            if (v18 < 1) {
              goto LABEL_163;
            }
            break;
        }
        break;
      case 2uLL:
        uint64_t v20 = *(void *)(v17 + 16);
        uint64_t v19 = *(void *)(v17 + 24);
        uint64_t v18 = v19 - v20;
        if (!__OFSUB__(v19, v20)) {
          goto LABEL_21;
        }
        goto LABEL_126;
      case 3uLL:
        goto LABEL_22;
      default:
        uint64_t v18 = BYTE6(v16);
        goto LABEL_22;
    }
    switch(v16 >> 62)
    {
      case 1uLL:
        if ((int)v17 > v17 >> 32) {
          goto LABEL_130;
        }
        uint64_t v43 = (unsigned char *)sub_1C4496298();
        if (!v43) {
          goto LABEL_63;
        }
        uint64_t v44 = sub_1C44962C8();
        if (__OFSUB__((int)v17, v44)) {
          goto LABEL_132;
        }
        v43 += (int)v17 - v44;
LABEL_63:
        sub_1C44962B8();
        uint64_t v13 = v86;
        if (!v87)
        {
          *(void *)__s1 = v8;
          *(_WORD *)&__s1[8] = a2;
          __s1[10] = BYTE2(a2);
          __s1[11] = BYTE3(a2);
          __s1[12] = BYTE4(a2);
          __s1[13] = BYTE5(a2);
          if (!v43) {
            goto LABEL_158;
          }
          uint64_t v50 = (uint64_t *)__s1;
          uint64_t v49 = v43;
          goto LABEL_107;
        }
        if (v87 == 1)
        {
          if (v83 < (int)v8) {
            goto LABEL_141;
          }
          swift_retain();
          uint64_t v45 = sub_1C4496298();
          if (v45)
          {
            uint64_t v46 = sub_1C44962C8();
            if (__OFSUB__((int)v8, v46)) {
              goto LABEL_148;
            }
            v45 += (int)v8 - v46;
          }
          uint64_t v47 = sub_1C44962B8();
          uint64_t v48 = (v8 >> 32) - (int)v8;
          if (v47 < v82) {
            uint64_t v48 = v47;
          }
          if (!v43) {
            goto LABEL_153;
          }
          if (!v45) {
            goto LABEL_154;
          }
          size_t v41 = v48;
          uint64_t v42 = v43;
          uint64_t v40 = (const void *)v45;
          goto LABEL_74;
        }
        uint64_t v69 = *(void *)(v8 + 16);
        uint64_t v70 = *(void *)(v8 + 24);
        swift_retain();
        swift_retain();
        uint64_t v71 = (char *)sub_1C4496298();
        if (v71)
        {
          uint64_t v72 = sub_1C44962C8();
          if (__OFSUB__(v69, v72)) {
            goto LABEL_147;
          }
          v71 += v69 - v72;
        }
        BOOL v24 = __OFSUB__(v70, v69);
        int64_t v73 = v70 - v69;
        if (v24) {
          goto LABEL_142;
        }
        uint64_t v74 = sub_1C44962B8();
        if (v74 >= v73) {
          size_t v75 = v73;
        }
        else {
          size_t v75 = v74;
        }
        unint64_t v5 = v81;
        if (!v43) {
          goto LABEL_161;
        }
        uint64_t v11 = v84;
        if (!v71) {
          goto LABEL_162;
        }
        int v36 = memcmp(v43, v71, v75);
        swift_release();
LABEL_119:
        swift_release();
        goto LABEL_120;
      case 2uLL:
        uint64_t v29 = *(void *)(v17 + 16);
        swift_retain();
        swift_retain();
        uint64_t v30 = (char *)sub_1C4496298();
        if (!v30) {
          goto LABEL_39;
        }
        uint64_t v31 = sub_1C44962C8();
        if (__OFSUB__(v29, v31)) {
          goto LABEL_131;
        }
        v30 += v29 - v31;
LABEL_39:
        sub_1C44962B8();
        uint64_t v11 = v84;
        if (!v87)
        {
          *(void *)__s1 = v8;
          *(_WORD *)&__s1[8] = a2;
          __s1[10] = BYTE2(a2);
          __s1[11] = BYTE3(a2);
          __s1[12] = BYTE4(a2);
          __s1[13] = BYTE5(a2);
          if (!v30) {
            goto LABEL_157;
          }
          int v36 = memcmp(v30, __s1, BYTE6(a2));
          swift_release();
          goto LABEL_119;
        }
        if (v87 == 1)
        {
          if (v83 < (int)v8) {
            goto LABEL_135;
          }
          swift_retain();
          uint64_t v32 = (char *)sub_1C4496298();
          if (v32)
          {
            uint64_t v33 = sub_1C44962C8();
            if (__OFSUB__((int)v8, v33)) {
              goto LABEL_146;
            }
            v32 += (int)v8 - v33;
          }
          uint64_t v34 = sub_1C44962B8();
          size_t v35 = (v8 >> 32) - (int)v8;
          if (v34 < v82) {
            size_t v35 = v34;
          }
          if (!v30) {
            goto LABEL_150;
          }
          if (!v32) {
            goto LABEL_151;
          }
          int v36 = memcmp(v30, v32, v35);
          sub_1C3F7E2CC(v8, a2);
          swift_release();
        }
        else
        {
          uint64_t v62 = *(void *)(v8 + 16);
          uint64_t v80 = *(void *)(v8 + 24);
          swift_retain();
          swift_retain();
          size_t v63 = (char *)sub_1C4496298();
          if (v63)
          {
            uint64_t v64 = sub_1C44962C8();
            if (__OFSUB__(v62, v64)) {
              goto LABEL_145;
            }
            v63 += v62 - v64;
          }
          BOOL v24 = __OFSUB__(v80, v62);
          int64_t v65 = v80 - v62;
          if (v24) {
            goto LABEL_140;
          }
          uint64_t v66 = sub_1C44962B8();
          if (v66 >= v65) {
            size_t v67 = v65;
          }
          else {
            size_t v67 = v66;
          }
          if (!v30) {
            goto LABEL_159;
          }
          uint64_t v11 = v84;
          if (!v63) {
            goto LABEL_160;
          }
          int v36 = memcmp(v30, v63, v67);
          swift_release();
          swift_release();
          swift_release();
        }
        swift_release();
        uint64_t result = sub_1C3F7E2CC(v17, v16);
        unint64_t v5 = v81;
        goto LABEL_121;
      case 3uLL:
        *(void *)&__s1[6] = 0;
        *(void *)__s1 = 0;
        if (!v87) {
          goto LABEL_75;
        }
        if (v87 == 1)
        {
          if (v83 < (int)v8) {
            goto LABEL_134;
          }
          sub_1C3F7E324(v8, a2);
          uint64_t v37 = sub_1C4496298();
          if (!v37) {
            goto LABEL_152;
          }
          uint64_t v26 = v37;
          uint64_t v38 = sub_1C44962C8();
          uint64_t v28 = (int)v8 - v38;
          if (__OFSUB__((int)v8, v38)) {
            goto LABEL_139;
          }
          goto LABEL_55;
        }
        uint64_t v57 = *(void *)(v8 + 16);
        uint64_t v58 = *(void *)(v8 + 24);
        swift_retain();
        swift_retain();
        int64_t v53 = (char *)sub_1C4496298();
        if (v53)
        {
          uint64_t v59 = sub_1C44962C8();
          if (__OFSUB__(v57, v59)) {
            goto LABEL_144;
          }
          v53 += v57 - v59;
        }
        BOOL v24 = __OFSUB__(v58, v57);
        int64_t v55 = v58 - v57;
        if (v24) {
          goto LABEL_137;
        }
        uint64_t v56 = sub_1C44962B8();
        uint64_t v11 = v84;
        if (!v53) {
          goto LABEL_156;
        }
        goto LABEL_87;
      default:
        *(void *)__s1 = v17;
        *(_WORD *)&__s1[8] = v16;
        __s1[10] = BYTE2(v16);
        __s1[11] = BYTE3(v16);
        __s1[12] = BYTE4(v16);
        __s1[13] = BYTE5(v16);
        if (!v87)
        {
LABEL_75:
          uint64_t v89 = v8;
          __int16 v90 = a2;
          char v91 = BYTE2(a2);
          char v92 = BYTE3(a2);
          char v93 = BYTE4(a2);
          char v94 = BYTE5(a2);
          uint64_t v49 = __s1;
          uint64_t v50 = &v89;
LABEL_107:
          int v68 = memcmp(v49, v50, BYTE6(a2));
          uint64_t result = sub_1C3F7E2CC(v17, v16);
          if (!v68) {
            goto LABEL_164;
          }
          goto LABEL_15;
        }
        if (v87 != 1)
        {
          uint64_t v51 = *(void *)(v8 + 16);
          uint64_t v52 = *(void *)(v8 + 24);
          swift_retain();
          swift_retain();
          int64_t v53 = (char *)sub_1C4496298();
          if (v53)
          {
            uint64_t v54 = sub_1C44962C8();
            if (__OFSUB__(v51, v54)) {
              goto LABEL_143;
            }
            v53 += v51 - v54;
          }
          BOOL v24 = __OFSUB__(v52, v51);
          int64_t v55 = v52 - v51;
          if (v24) {
            goto LABEL_136;
          }
          uint64_t v56 = sub_1C44962B8();
          uint64_t v11 = v84;
          if (!v53) {
            goto LABEL_155;
          }
LABEL_87:
          if (v56 >= v55) {
            size_t v60 = v55;
          }
          else {
            size_t v60 = v56;
          }
          int v61 = memcmp(__s1, v53, v60);
          swift_release();
          swift_release();
          uint64_t result = sub_1C3F7E2CC(v17, v16);
          uint64_t v13 = v86;
          if (!v61) {
            goto LABEL_164;
          }
          goto LABEL_15;
        }
        if (v83 < (int)v8) {
          goto LABEL_133;
        }
        sub_1C3F7E324(v8, a2);
        uint64_t v25 = sub_1C4496298();
        if (v25)
        {
          uint64_t v26 = v25;
          uint64_t v27 = sub_1C44962C8();
          uint64_t v28 = (int)v8 - v27;
          if (__OFSUB__((int)v8, v27)) {
            goto LABEL_138;
          }
LABEL_55:
          uint64_t v39 = sub_1C44962B8();
          uint64_t v40 = (const void *)(v26 + v28);
          if (v39 >= v82) {
            size_t v41 = (v8 >> 32) - (int)v8;
          }
          else {
            size_t v41 = v39;
          }
          uint64_t v42 = __s1;
LABEL_74:
          int v36 = memcmp(v42, v40, v41);
          sub_1C3F7E2CC(v8, a2);
LABEL_120:
          uint64_t result = sub_1C3F7E2CC(v17, v16);
LABEL_121:
          uint64_t v13 = v86;
          if (!v36) {
            goto LABEL_164;
          }
LABEL_15:
          a3 = (a3 + 1) & v88;
          if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
            goto LABEL_123;
          }
          continue;
        }
        sub_1C44962B8();
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        sub_1C44962B8();
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        sub_1C3F7E2CC(v17, v16);
LABEL_164:
        uint64_t result = sub_1C4498548();
        __break(1u);
        return result;
    }
  }
}

uint64_t sub_1C3F83008()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBBF160);
  uint64_t v3 = sub_1C4497CE8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    sub_1C44985F8();
    sub_1C3F7E324(v20, v21);
    sub_1C4496568();
    uint64_t result = sub_1C4498628();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1C3F832BC(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t result = type metadata accessor for PartiallyOrderedReferenceMap();
  uint64_t v7 = v2 + *(int *)(result + 24);
  unint64_t v8 = *(void **)v7;
  uint64_t v9 = *(void *)(*(void *)v7 + 16);
  if (v9)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_17:
    }
      unint64_t v8 = sub_1C3F74514(v8);
    unint64_t v10 = 0;
    for (unint64_t i = v8 + 6; ; i += 3)
    {
      if (v9 == v10)
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      if (v10 >= v8[2]) {
        goto LABEL_16;
      }
      sub_1C3F833F4(v4, v5, &v14);
      unint64_t v12 = *((void *)&v14 + 1);
      uint64_t result = sub_1C3F6C6F0(v14, *((unint64_t *)&v14 + 1));
      if (v12 >> 60 != 15) {
        break;
      }
      if (v9 == ++v10)
      {
        *(void *)uint64_t v7 = v8;
        return result;
      }
    }
    *(void *)uint64_t v7 = v8;
    if (a2)
    {
      unint64_t v13 = v8[2];
      if (v10 >= v13)
      {
        __break(1u);
      }
      else if (v13 >= 2 && !*(void *)(*i + 16))
      {
        sub_1C423161C(v10, (uint64_t)&v14);
        sub_1C3F870F4(v14);
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t sub_1C3F833F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *v3;
  sub_1C44985F8();
  swift_bridgeObjectRetain();
  unint64_t v83 = a2;
  sub_1C4496568();
  uint64_t v7 = sub_1C4498628();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_116:
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = xmmword_1C449BDD0;
    return result;
  }
  uint64_t v11 = ~v8;
  unint64_t v12 = a2 >> 62;
  BOOL v13 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v81 = v13;
  uint64_t v80 = v6 + 56;
  uint64_t v77 = (a1 >> 32) - (int)a1;
  uint64_t v78 = a1 >> 32;
  uint64_t v76 = v6;
  uint64_t v82 = ~v8;
  while (2)
  {
    long long v14 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v9);
    uint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    unint64_t v17 = (void *)(v16 >> 62);
    uint64_t v18 = 0;
    switch(v16 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v15), v15))
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          sub_1C3FAE33C();
          uint64_t v73 = *(void *)__s1;
LABEL_119:
          *a3 = *(_OWORD *)(*(void *)(v73 + 48) + 16 * v9);
          sub_1C3F83E18(v9);
          void *v17 = *(void *)__s1;
          return swift_bridgeObjectRelease();
        }
        uint64_t v18 = HIDWORD(v15) - (int)v15;
LABEL_14:
        sub_1C3F7E324(v15, v16);
LABEL_15:
        uint64_t v21 = BYTE6(v83);
        switch((int)v12)
        {
          case 1:
            uint64_t v21 = HIDWORD(a1) - (int)a1;
            if (v81) {
              goto LABEL_122;
            }
            goto LABEL_19;
          case 2:
            uint64_t v23 = *(void *)(a1 + 16);
            uint64_t v22 = *(void *)(a1 + 24);
            BOOL v24 = __OFSUB__(v22, v23);
            uint64_t v21 = v22 - v23;
            if (!v24) {
              goto LABEL_19;
            }
            goto LABEL_123;
          case 3:
            if (v18) {
              goto LABEL_7;
            }
            goto LABEL_117;
          default:
LABEL_19:
            if (v18 != v21)
            {
LABEL_7:
              sub_1C3F7E2CC(v15, v16);
              goto LABEL_8;
            }
            if (v18 < 1)
            {
LABEL_117:
              sub_1C3F7E2CC(v15, v16);
LABEL_118:
              swift_bridgeObjectRelease();
              unint64_t v17 = v75;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v73 = *v75;
              *(void *)__s1 = *v75;
              *size_t v75 = 0x8000000000000000;
              if (isUniquelyReferenced_nonNull_native) {
                goto LABEL_119;
              }
              goto LABEL_127;
            }
            break;
        }
        break;
      case 2uLL:
        uint64_t v20 = *(void *)(v15 + 16);
        uint64_t v19 = *(void *)(v15 + 24);
        uint64_t v18 = v19 - v20;
        if (!__OFSUB__(v19, v20)) {
          goto LABEL_14;
        }
        goto LABEL_121;
      case 3uLL:
        goto LABEL_15;
      default:
        uint64_t v18 = BYTE6(v16);
        goto LABEL_15;
    }
    switch((int)v17)
    {
      case 1:
        if ((int)v15 > v15 >> 32) {
          goto LABEL_124;
        }
        unint64_t v17 = (void *)sub_1C4496298();
        if (!v17) {
          goto LABEL_33;
        }
        uint64_t v29 = sub_1C44962C8();
        if (__OFSUB__((int)v15, v29)) {
          goto LABEL_126;
        }
        unint64_t v17 = (void *)((char *)v17 + (int)v15 - v29);
LABEL_33:
        uint64_t result = sub_1C44962B8();
        uint64_t v11 = v82;
        if (!v12)
        {
          *(void *)__s1 = a1;
          *(_DWORD *)&__s1[8] = v83;
          *(_WORD *)&__s1[12] = WORD2(v83);
          if (!v17) {
            goto LABEL_155;
          }
          uint64_t v50 = (uint64_t *)__s1;
          uint64_t v49 = v17;
          goto LABEL_101;
        }
        if (v12 == 1)
        {
          if (v78 < (int)a1) {
            goto LABEL_136;
          }
          swift_retain();
          uint64_t v31 = (char *)sub_1C4496298();
          if (v31)
          {
            uint64_t v32 = sub_1C44962C8();
            if (__OFSUB__((int)a1, v32)) {
              goto LABEL_143;
            }
            v31 += (int)a1 - v32;
          }
          uint64_t v33 = sub_1C44962B8();
          size_t v34 = (a1 >> 32) - (int)a1;
          if (v33 < v77) {
            size_t v34 = v33;
          }
          if (!v17) {
            goto LABEL_145;
          }
          if (!v31) {
            goto LABEL_146;
          }
          int v35 = memcmp(v17, v31, v34);
          sub_1C3F7E2CC(a1, v83);
        }
        else
        {
          uint64_t v67 = *(void *)(a1 + 16);
          uint64_t v66 = *(void *)(a1 + 24);
          swift_retain();
          swift_retain();
          int v68 = (char *)sub_1C4496298();
          if (v68)
          {
            uint64_t v69 = sub_1C44962C8();
            if (__OFSUB__(v67, v69)) {
              goto LABEL_142;
            }
            v68 += v67 - v69;
          }
          BOOL v24 = __OFSUB__(v66, v67);
          int64_t v70 = v66 - v67;
          if (v24) {
            goto LABEL_137;
          }
          uint64_t result = sub_1C44962B8();
          if (result >= v70) {
            size_t v71 = v70;
          }
          else {
            size_t v71 = result;
          }
          if (!v17) {
            goto LABEL_156;
          }
          uint64_t v6 = v76;
          uint64_t v10 = v80;
          if (!v68) {
            goto LABEL_157;
          }
          int v35 = memcmp(v17, v68, v71);
          swift_release();
          swift_release();
        }
        sub_1C3F7E2CC(v15, v16);
        goto LABEL_114;
      case 2:
        unint64_t v17 = (void *)(v16 & 0x3FFFFFFFFFFFFFFFLL);
        uint64_t v36 = *(void *)(v15 + 16);
        swift_retain();
        swift_retain();
        uint64_t v37 = (char *)sub_1C4496298();
        if (!v37) {
          goto LABEL_47;
        }
        uint64_t v38 = sub_1C44962C8();
        if (__OFSUB__(v36, v38)) {
          goto LABEL_125;
        }
        v37 += v36 - v38;
LABEL_47:
        uint64_t result = sub_1C44962B8();
        uint64_t v10 = v80;
        if (v12)
        {
          if (v12 == 1)
          {
            if (v78 < (int)a1) {
              goto LABEL_130;
            }
            swift_retain();
            uint64_t v39 = (char *)sub_1C4496298();
            if (v39)
            {
              uint64_t v40 = sub_1C44962C8();
              if (__OFSUB__((int)a1, v40)) {
                goto LABEL_141;
              }
              v39 += (int)a1 - v40;
            }
            uint64_t v41 = sub_1C44962B8();
            size_t v42 = (a1 >> 32) - (int)a1;
            if (v41 < v77) {
              size_t v42 = v41;
            }
            if (!v37) {
              goto LABEL_147;
            }
            if (!v39) {
              goto LABEL_148;
            }
            int v43 = memcmp(v37, v39, v42);
            sub_1C3F7E2CC(a1, v83);
            swift_release();
          }
          else
          {
            uint64_t v60 = *(void *)(a1 + 16);
            uint64_t v74 = *(void *)(a1 + 24);
            swift_retain();
            swift_retain();
            int v61 = (char *)sub_1C4496298();
            if (v61)
            {
              uint64_t v62 = sub_1C44962C8();
              if (__OFSUB__(v60, v62)) {
                goto LABEL_140;
              }
              v61 += v60 - v62;
            }
            BOOL v24 = __OFSUB__(v74, v60);
            int64_t v63 = v74 - v60;
            if (v24) {
              goto LABEL_135;
            }
            uint64_t result = sub_1C44962B8();
            if (result >= v63) {
              size_t v64 = v63;
            }
            else {
              size_t v64 = result;
            }
            if (!v37) {
              goto LABEL_153;
            }
            uint64_t v6 = v76;
            if (!v61) {
              goto LABEL_154;
            }
            int v43 = memcmp(v37, v61, v64);
            swift_release();
            swift_release();
            swift_release();
          }
          swift_release();
          sub_1C3F7E2CC(v15, v16);
          uint64_t v10 = v80;
        }
        else
        {
          *(void *)__s1 = a1;
          *(_DWORD *)&__s1[8] = v83;
          *(_WORD *)&__s1[12] = WORD2(v83);
          if (!v37) {
            goto LABEL_152;
          }
          int v43 = memcmp(v37, __s1, BYTE6(v83));
          swift_release();
          swift_release();
          sub_1C3F7E2CC(v15, v16);
        }
        uint64_t v11 = v82;
        if (!v43) {
          goto LABEL_118;
        }
        goto LABEL_8;
      case 3:
        *(void *)&__s1[6] = 0;
        *(void *)__s1 = 0;
        if (!v12) {
          goto LABEL_68;
        }
        if (v12 == 1)
        {
          if (v78 < (int)a1) {
            goto LABEL_129;
          }
          sub_1C3F7E324(a1, v83);
          uint64_t v44 = sub_1C4496298();
          if (!v44) {
            goto LABEL_149;
          }
          uint64_t v26 = v44;
          uint64_t v45 = sub_1C44962C8();
          uint64_t v28 = (int)a1 - v45;
          if (__OFSUB__((int)a1, v45)) {
            goto LABEL_134;
          }
          goto LABEL_63;
        }
        uint64_t v56 = *(void *)(a1 + 16);
        uint64_t v57 = *(void *)(a1 + 24);
        swift_retain();
        swift_retain();
        int64_t v53 = (char *)sub_1C4496298();
        if (v53)
        {
          uint64_t v58 = sub_1C44962C8();
          if (__OFSUB__(v56, v58)) {
            goto LABEL_139;
          }
          v53 += v56 - v58;
        }
        BOOL v24 = __OFSUB__(v57, v56);
        int64_t v55 = v57 - v56;
        if (v24) {
          goto LABEL_132;
        }
        uint64_t result = sub_1C44962B8();
        if (!v53) {
          goto LABEL_151;
        }
        goto LABEL_80;
      default:
        *(void *)__s1 = v15;
        *(_WORD *)&__s1[8] = v16;
        __s1[10] = BYTE2(v16);
        __s1[11] = BYTE3(v16);
        __s1[12] = BYTE4(v16);
        __s1[13] = BYTE5(v16);
        if (!v12)
        {
LABEL_68:
          uint64_t v84 = a1;
          int v85 = v83;
          __int16 v86 = WORD2(v83);
          uint64_t v49 = __s1;
          uint64_t v50 = &v84;
LABEL_101:
          int v65 = memcmp(v49, v50, BYTE6(v83));
          sub_1C3F7E2CC(v15, v16);
          if (!v65) {
            goto LABEL_118;
          }
          goto LABEL_8;
        }
        if (v12 != 1)
        {
          uint64_t v51 = *(void *)(a1 + 16);
          uint64_t v52 = *(void *)(a1 + 24);
          swift_retain();
          swift_retain();
          int64_t v53 = (char *)sub_1C4496298();
          if (v53)
          {
            uint64_t v54 = sub_1C44962C8();
            if (__OFSUB__(v51, v54)) {
              goto LABEL_138;
            }
            v53 += v51 - v54;
          }
          BOOL v24 = __OFSUB__(v52, v51);
          int64_t v55 = v52 - v51;
          if (v24) {
            goto LABEL_131;
          }
          uint64_t result = sub_1C44962B8();
          if (!v53) {
            goto LABEL_150;
          }
LABEL_80:
          if (result >= v55) {
            size_t v59 = v55;
          }
          else {
            size_t v59 = result;
          }
          int v35 = memcmp(__s1, v53, v59);
          swift_release();
          swift_release();
          sub_1C3F7E2CC(v15, v16);
          uint64_t v10 = v80;
LABEL_114:
          uint64_t v11 = v82;
          if (!v35) {
            goto LABEL_118;
          }
LABEL_8:
          unint64_t v9 = (v9 + 1) & v11;
          if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
            goto LABEL_116;
          }
          continue;
        }
        if (v78 < (int)a1)
        {
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
        }
        sub_1C3F7E324(a1, v83);
        uint64_t v25 = sub_1C4496298();
        if (v25)
        {
          uint64_t v26 = v25;
          uint64_t v27 = sub_1C44962C8();
          uint64_t v28 = (int)a1 - v27;
          if (__OFSUB__((int)a1, v27)) {
            goto LABEL_133;
          }
LABEL_63:
          uint64_t v46 = sub_1C44962B8();
          if (v46 >= v77) {
            size_t v47 = (a1 >> 32) - (int)a1;
          }
          else {
            size_t v47 = v46;
          }
          int v48 = memcmp(__s1, (const void *)(v26 + v28), v47);
          sub_1C3F7E2CC(a1, v83);
          sub_1C3F7E2CC(v15, v16);
          uint64_t v6 = v76;
          if (!v48) {
            goto LABEL_118;
          }
          goto LABEL_8;
        }
        sub_1C44962B8();
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        uint64_t result = sub_1C44962B8();
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
        return result;
    }
  }
}

unint64_t sub_1C3F83E18(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_1C4497C08();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        unint64_t v12 = v10[1];
        sub_1C44985F8();
        sub_1C3F7E324(v11, v12);
        sub_1C4496568();
        uint64_t v13 = sub_1C4498628();
        sub_1C3F7E2CC(v11, v12);
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          unint64_t v16 = (_OWORD *)(v15 + 16 * v2);
          unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            *unint64_t v16 = *v17;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void (*sub_1C3F83FF0(void *a1, uint64_t *a2))(void *a1, char a2)
{
  uint64_t v5 = malloc(0x50uLL);
  *a1 = v5;
  uint64_t v7 = *a2;
  unint64_t v6 = a2[1];
  v5[4] = v2;
  v5[5] = v7;
  v5[6] = v6;
  uint64_t v8 = type metadata accessor for PartiallyOrderedReferenceMap();
  v5[7] = v8;
  *((_DWORD *)v5 + 18) = *(_DWORD *)(v8 + 20);
  sub_1C3F7E324(v7, v6);
  v5[8] = sub_1C3F84E10(v5, v7, v6);
  return sub_1C3F815E8;
}

uint64_t sub_1C3F84090@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1C4496678();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = OBJC_IVAR____TtC9Coherence10CapsuleRef_replicaState;
  uint64_t v9 = qword_1EBBC00D0;
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  type metadata accessor for Replica();
  sub_1C4497A58();
  swift_release();
  uint64_t v10 = *(void *)(*(void *)(v2 + v8) + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter);
  *(void *)(a1 + *(int *)(type metadata accessor for Timestamp(0) + 20)) = v10;
  swift_beginAccess();
  sub_1C3F844E4(a1);
  uint64_t result = swift_endAccess();
  uint64_t v12 = *(void *)(v2 + v8);
  uint64_t v13 = *(void *)(v12 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v12 + OBJC_IVAR____TtC9Coherence12ReplicaState_localCounter) = v15;
    sub_1C4496668();
    uint64_t v16 = v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_versionUUID;
    swift_beginAccess();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 40))(v16, v7, v4);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1C3F842B8(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v21 = type metadata accessor for Replica();
  MEMORY[0x1F4188790](v21);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1C44967E8();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Timestamp(0);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v1;
  uint64_t v22 = v11;
  *uint64_t v3 = 0x8000000000000000;
  unint64_t v13 = sub_1C3F8F160(a1);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }
  char v2 = v12;
  if (*(void *)(v11 + 24) >= v16)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_6;
    }
LABEL_10:
    sub_1C3FA50F8();
    uint64_t v11 = v22;
    goto LABEL_6;
  }
  sub_1C3F9188C(v16, isUniquelyReferenced_nonNull_native);
  uint64_t v11 = v22;
  unint64_t v17 = sub_1C3F8F160(a1);
  if ((v2 & 1) != (v18 & 1))
  {
    uint64_t result = sub_1C4498558();
    __break(1u);
    return result;
  }
  unint64_t v13 = v17;
LABEL_6:
  *uint64_t v3 = v11;
  swift_bridgeObjectRelease();
  BOOL v19 = (void *)*v3;
  swift_bridgeObjectRetain();
  if ((v2 & 1) == 0)
  {
    sub_1C44967D8();
    sub_1C3F8EF8C(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Replica);
    sub_1C3F9179C(v13, (uint64_t)v6, (uint64_t)v9, v19);
  }
  swift_bridgeObjectRelease();
  return sub_1C4496748();
}

uint64_t sub_1C3F844E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for PartiallyOrderedReferenceMap();
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v35 = (uint64_t)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v33 - v9;
  MEMORY[0x1F4188790](v8);
  char v12 = (char *)&v33 - v11;
  uint64_t v14 = *a1;
  unint64_t v13 = a1[1];
  uint64_t v15 = v2 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
  swift_beginAccess();
  uint64_t v38 = v14;
  unint64_t v39 = v13;
  sub_1C3F7E324(v14, v13);
  uint64_t result = (uint64_t)sub_1C3F84D7C(&v36, &v38);
  if (!*(void *)(v17 + 16))
  {
    ((void (*)(long long *, void))result)(&v36, 0);
    sub_1C3F7E2CC(v38, v39);
    swift_endAccess();
LABEL_5:
    sub_1C3F8F450(v15, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
    uint64_t v21 = *(void *)&v10[*(int *)(v5 + 20)];
    if (*(void *)(v21 + 16))
    {
      sub_1C3F7E324(v14, v13);
      uint64_t v22 = sub_1C3F850CC(v14, v13);
      if (v23)
      {
        uint64_t v33 = *(void *)(*(void *)(v21 + 56) + 48 * v22 + 8);
        uint64_t v34 = v5;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1C3F7E2CC(v14, v13);
        sub_1C3F8F5D4((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
        swift_bridgeObjectRelease();
        uint64_t v5 = v34;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        if ((v33 & 0x8000000000000000) == 0) {
          goto LABEL_11;
        }
        __break(1u);
      }
      sub_1C3F7E2CC(v14, v13);
    }
    sub_1C3F8F5D4((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
LABEL_11:
    sub_1C3F8F450(v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
    uint64_t v24 = *(void *)&v12[*(int *)(v5 + 20)];
    if (*(void *)(v24 + 16))
    {
      sub_1C3F7E324(v14, v13);
      uint64_t v25 = sub_1C3F850CC(v14, v13);
      if (v26)
      {
        uint64_t v34 = v5;
        uint64_t v27 = *(void *)(*(void *)(v24 + 56) + 48 * v25 + 8);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1C3F7E2CC(v14, v13);
        sub_1C3F8F5D4((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        if (!v27)
        {
          uint64_t v28 = v35;
          sub_1C3F8F450(v15, v35, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
          uint64_t v29 = *(void *)(v28 + *(int *)(v34 + 20));
          if (*(void *)(v29 + 16))
          {
            sub_1C3F7E324(v14, v13);
            uint64_t v30 = sub_1C3F850CC(v14, v13);
            if (v31)
            {
              uint64_t v32 = *(void *)(*(void *)(v29 + 56) + 48 * v30 + 32);
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_1C3F7E2CC(v14, v13);
              sub_1C3F8F5D4(v28, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
LABEL_23:
              swift_beginAccess();
              sub_1C4116EC8(v14, v13, &v36);
              sub_1C3F84B88(v36, *((uint64_t *)&v36 + 1), v37);
              sub_1C3F833F4(v14, v13, &v36);
              sub_1C3F6C6F0(v36, *((unint64_t *)&v36 + 1));
              *(void *)&long long v36 = v14;
              *((void *)&v36 + 1) = v13;
              sub_1C3F832BC((uint64_t *)&v36, 1);
              swift_endAccess();
              return v32;
            }
            sub_1C3F7E2CC(v14, v13);
          }
          sub_1C3F8F5D4(v28, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
          uint64_t v32 = 0;
          goto LABEL_23;
        }
        return 2;
      }
      sub_1C3F7E2CC(v14, v13);
    }
    sub_1C3F8F5D4((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
    return 2;
  }
  uint64_t v18 = *(void *)(v17 + 8);
  BOOL v19 = __OFADD__(v18, a2);
  uint64_t v20 = v18 + a2;
  if (!v19)
  {
    *(void *)(v17 + 8) = v20;
    ((void (*)(long long *, void))result)(&v36, 0);
    swift_endAccess();
    sub_1C3F7E2CC(v38, v39);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_1C3F84A44(void *a1)
{
  uint64_t v1 = (void *)*a1;
  unint64_t v2 = *(void *)(*a1 + 40);
  uint64_t v3 = *(void *)(*a1 + 32);
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  sub_1C3F7E2CC(v3, v2);
  free(v1);
}

void sub_1C3F84AA8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  unint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 80);
  uint64_t v4 = *(void *)(*(void *)a1 + 64);
  unint64_t v3 = *(void *)(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 88))();
  sub_1C3F7E2CC(v4, v3);
  v2(v1, 0);
  free(v1);
}

uint64_t sub_1C3F84B24(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

void sub_1C3F84B30(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_1C3F84C64(*a1, *((unsigned char *)*a1 + 80), (uint64_t *)(*a1)[8], (*a1)[9], (*a1)[6], (*a1)[7]);
  sub_1C3F84B88(*v1, v1[1], v1[2]);
  free(v1);
}

uint64_t sub_1C3F84B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1C3F84BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1C3F84C64(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  uint64_t v13 = a1[5];
  if (v10)
  {
    *(void *)&long long v20 = *a1;
    *((void *)&v20 + 1) = v9;
    *(void *)&long long v21 = v10;
    *((void *)&v21 + 1) = v11;
    *(void *)&long long v22 = v12;
    *((void *)&v22 + 1) = v13;
    uint64_t v15 = (void *)*a3;
    if (a2)
    {
      uint64_t v16 = (_OWORD *)(v15[7] + 48 * a4);
      long long v17 = v21;
      *uint64_t v16 = v20;
      v16[1] = v17;
      v16[2] = v22;
    }
    else
    {
      sub_1C4421E64(a4, a5, a6, &v20, v15);
      sub_1C3F7E324(a5, a6);
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_1C4117B9C(a4, *a3);
  }
  return sub_1C3F84BF8(v8, v9, v10);
}

void (*sub_1C3F84D7C(void *a1, uint64_t *a2))(void *a1)
{
  uint64_t v4 = malloc(0x38uLL);
  *a1 = v4;
  uint64_t v6 = *a2;
  unint64_t v5 = a2[1];
  v4[4] = v6;
  v4[5] = v5;
  type metadata accessor for PartiallyOrderedReferenceMap();
  sub_1C3F7E324(v6, v5);
  v4[6] = sub_1C3F84E10(v4, v6, v5);
  return sub_1C3F84A44;
}

void (*sub_1C3F84E10(void *a1, uint64_t a2, unint64_t a3))(void *)
{
  uint64_t v6 = malloc(0x38uLL);
  *a1 = v6;
  v6[4] = a2;
  v6[5] = a3;
  sub_1C3F7E324(a2, a3);
  v6[6] = sub_1C3F84E94(v6, a2, a3);
  return sub_1C3F84D78;
}

void (*sub_1C3F84E94(void *a1, uint64_t a2, unint64_t a3))(uint64_t)
{
  uint64_t v6 = malloc(0x60uLL);
  *a1 = v6;
  v6[8] = a2;
  v6[9] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1C3F7E324(a2, a3);
  v6[10] = sub_1C3F84F44(v6);
  v6[11] = sub_1C3F84F74(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1C3F84D74;
}

uint64_t (*sub_1C3F84F44(void *a1))()
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_1C3F84B20;
}

void (*sub_1C3F84F74(void *a1, uint64_t a2, unint64_t a3, char a4))(uint64_t **a1)
{
  unint64_t v5 = v4;
  uint64_t v10 = malloc(0x58uLL);
  *a1 = v10;
  v10[7] = a3;
  v10[8] = v4;
  v10[6] = a2;
  uint64_t v11 = *v4;
  uint64_t v13 = sub_1C3F850CC(a2, a3);
  *((unsigned char *)v10 + 80) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_13;
  }
  char v17 = v12;
  uint64_t v18 = *(void *)(v11 + 24);
  if (v18 < v16 || (a4 & 1) == 0)
  {
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1C3F85144();
      goto LABEL_9;
    }
    sub_1C3F77ABC(v16, a4 & 1);
    uint64_t v19 = sub_1C3F850CC(a2, a3);
    if ((v17 & 1) == (v20 & 1))
    {
      uint64_t v13 = v19;
      goto LABEL_9;
    }
LABEL_13:
    uint64_t result = (void (*)(uint64_t **))sub_1C4498558();
    __break(1u);
    return result;
  }
LABEL_9:
  v10[9] = v13;
  long long v21 = 0uLL;
  long long v22 = 0uLL;
  long long v23 = 0uLL;
  if (v17)
  {
    uint64_t v24 = (long long *)(*(void *)(*v5 + 56) + 48 * v13);
    long long v21 = *v24;
    long long v22 = v24[1];
    long long v23 = v24[2];
  }
  *(_OWORD *)uint64_t v10 = v21;
  *((_OWORD *)v10 + 1) = v22;
  *((_OWORD *)v10 + 2) = v23;
  return sub_1C3F84B30;
}

uint64_t sub_1C3F850CC(uint64_t a1, unint64_t a2)
{
  sub_1C44985F8();
  sub_1C4496568();
  uint64_t v4 = sub_1C4498628();
  return sub_1C3F7D960(a1, a2, v4);
}

void *sub_1C3F85144()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF198);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1C4497FB8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = 48 * v15;
    uint64_t v18 = (long long *)(*(void *)(v2 + 56) + v17);
    long long v19 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    long long v20 = v18[1];
    long long v26 = v18[2];
    long long v21 = *v18;
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v19;
    long long v22 = (_OWORD *)(*(void *)(v4 + 56) + v17);
    *long long v22 = v21;
    v22[1] = v20;
    void v22[2] = v26;
    sub_1C3F7E324(v19, *((unint64_t *)&v19 + 1));
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1C3F85354(int a1, uint64_t a2)
{
  int v161 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC150);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v159 = (char *)&v149 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC148);
  uint64_t v6 = MEMORY[0x1F4188790](v160);
  uint64_t v158 = (char *)&v149 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  int64_t v9 = (char *)&v149 - v8;
  uint64_t v173 = type metadata accessor for Replica();
  uint64_t v10 = MEMORY[0x1F4188790](v173);
  uint64_t v167 = (uint64_t)&v149 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v166 = (uint64_t)&v149 - v12;
  uint64_t v190 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC128);
  MEMORY[0x1F4188790](v190);
  uint64_t v196 = (uint64_t)&v149 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = type metadata accessor for CROrderedSetElement();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v193 = sub_1C4497B38();
  uint64_t v164 = *(void *)(v193 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v193);
  uint64_t v192 = (char *)&v149 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v191 = (char **)((char *)&v149 - v19);
  uint64_t v163 = sub_1C44967E8();
  uint64_t v162 = *(void *)(v163 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v163);
  uint64_t v181 = (char *)&v149 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = *(char **)(v14 - 8);
  MEMORY[0x1F4188790](v20);
  unint64_t v182 = (char *)&v149 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC120);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  v178 = (char *)&v149 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v180 = (uint64_t)&v149 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v199 = (uint64_t)&v149 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v198 = (uint64_t)&v149 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  v183 = (void (**)(char *, char *, uint64_t))((char *)&v149 - v33);
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v172 = (uint64_t)&v149 - v35;
  MEMORY[0x1F4188790](v34);
  uint64_t v37 = (char *)&v149 - v36;
  uint64_t v38 = type metadata accessor for Timestamp(0);
  uint64_t v165 = *(void *)(v38 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v38);
  uint64_t v177 = (char *)&v149 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v174 = (uint64_t)&v149 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v176 = (uint64_t)&v149 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v170 = (uint64_t)&v149 - v46;
  v197 = *(char **)(v16 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v195 = (char *)&v149 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  unint64_t v203 = (char *)&v149 - v50;
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v200 = (char *)&v149 - v52;
  uint64_t v156 = v53;
  MEMORY[0x1F4188790](v51);
  uint64_t v202 = (char *)&v149 - v54;
  int64_t v55 = v2;
  v207[0] = *v2;
  uint64_t v56 = type metadata accessor for CRSequence();
  uint64_t result = CRSequence.isEmpty.getter();
  if (result) {
    return result;
  }
  uint64_t v58 = (char *)v2 + *(int *)(a2 + 48);
  uint64_t v175 = v55;
  uint64_t v179 = *(void *)(a2 + 24);
  uint64_t v59 = type metadata accessor for CROrderedSet.DeduplicatedInfo();
  uint64_t v60 = sub_1C4497B38();
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = *(void (**)(void))(v61 + 8);
  uint64_t v151 = v60;
  uint64_t v150 = (void (*)(void *, uint64_t))v62;
  uint64_t v149 = v61 + 8;
  v62(v58);
  uint64_t v63 = *(void *)(v59 - 8);
  size_t v64 = *(void (**)(void *, void, uint64_t, uint64_t))(v63 + 56);
  uint64_t v155 = v58;
  uint64_t v154 = v59;
  uint64_t v153 = v64;
  uint64_t v152 = v63 + 56;
  v64(v58, 1, 1, v59);
  uint64_t v209 = sub_1C4496EA8();
  v207[0] = *v55;
  uint64_t v65 = v207[0];
  CRSequence.count.getter();
  uint64_t v205 = v38;
  uint64_t v171 = sub_1C4497008();
  sub_1C4496F18();
  v207[0] = v65;
  uint64_t v66 = sub_1C3F87640();
  uint64_t v67 = MEMORY[0x1C8780160](v66, v16);
  int v68 = v175;
  uint64_t v204 = v15;
  uint64_t v201 = v14;
  uint64_t v206 = v16;
  uint64_t v157 = v56;
  if (v67)
  {
    uint64_t v69 = 0;
    uint64_t v189 = (void (**)(char *, void *, uint64_t))(v197 + 16);
    v187 = (void (**)(char *, char *, uint64_t))(v197 + 32);
    uint64_t v186 = (void (**)(char *, uint64_t))(v197 + 8);
    uint64_t v185 = (unsigned int (**)(char *, uint64_t, uint64_t))(v165 + 48);
    uint64_t v169 = (void (**)(char *, char *, uint64_t))(v184 + 16);
    uint64_t v168 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v165 + 56);
    uint64_t v184 = v37;
    unint64_t v188 = (void (**)(char **, char *, uint64_t))v66;
    do
    {
      char v70 = sub_1C44974A8();
      sub_1C4497438();
      if (v70)
      {
        (*((void (**)(char *, unint64_t, uint64_t))v197 + 2))(v202, v66+ ((v197[80] + 32) & ~(unint64_t)v197[80])+ *((void *)v197 + 9) * v69, v16);
        uint64_t v71 = v69 + 1;
        if (__OFADD__(v69, 1)) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t result = sub_1C4497DA8();
        if (v156 != 8)
        {
          __break(1u);
          return result;
        }
        v207[0] = result;
        (*v189)(v202, v207, v16);
        swift_unknownObjectRelease();
        uint64_t v71 = v69 + 1;
        if (__OFADD__(v69, 1))
        {
LABEL_25:
          __break(1u);
          break;
        }
      }
      uint64_t v72 = (uint64_t)v200;
      (*v187)(v200, v202, v16);
      v207[0] = v68[1];
      uint64_t v73 = type metadata accessor for CRSet();
      if (CRSet.contains(_:)(v72, v73))
      {
        uint64_t v74 = v14;
        uint64_t v75 = v205;
        MEMORY[0x1C877FC90](v72, v209, v74, v205, v15);
        uint64_t v76 = *v185;
        if ((*v185)(v37, 1, v75) == 1)
        {
          sub_1C3F962E0((uint64_t)v37, &qword_1EBBBC120);
          uint64_t v77 = (char *)v72;
LABEL_15:
          uint64_t v89 = (uint64_t)v183;
          uint64_t v90 = v201;
          uint64_t v91 = v205;
          MEMORY[0x1C877FC90](v77, v209, v201, v205, v204);
          unsigned int v92 = v76((char *)v89, 1, v91);
          sub_1C3F962E0(v89, &qword_1EBBBC120);
          if (v92 == 1)
          {
            (*v169)(v182, v77, v90);
            uint64_t v16 = v206;
            uint64_t v93 = v172;
            sub_1C3F86C30((uint64_t)&v77[*(int *)(v206 + 36)], v172, type metadata accessor for Timestamp);
            (*v168)(v93, 0, 1, v91);
            sub_1C4497048();
            (*v186)(v77, v16);
          }
          else
          {
            uint64_t v16 = v206;
            (*v186)(v77, v206);
          }
          uint64_t v15 = v204;
          uint64_t v14 = v90;
          int v68 = v175;
          uint64_t v37 = v184;
          goto LABEL_5;
        }
        uint64_t v78 = (uint64_t)v37;
        uint64_t v79 = v170;
        sub_1C3F896D0(v78, v170, type metadata accessor for Timestamp);
        uint64_t v80 = v72 + *(int *)(v16 + 36);
        uint64_t v81 = *(int *)(v75 + 20);
        uint64_t v82 = *(void *)(v79 + v81);
        uint64_t v83 = *(void *)(v80 + v81);
        BOOL v84 = v82 < v83;
        if (v82 == v83
          && (uint64_t v85 = *(int *)(v173 + 20),
              uint64_t v86 = *(void *)(v79 + v85),
              uint64_t v87 = *(void *)(v80 + v85),
              BOOL v84 = v86 < v87,
              v86 == v87))
        {
          char v88 = sub_1C410BE0C();
          uint64_t v77 = v200;
          if ((v88 & 1) == 0) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v77 = v200;
          if (!v84)
          {
LABEL_14:
            sub_1C3F86DB8(v79, type metadata accessor for Timestamp);
            goto LABEL_15;
          }
        }
        uint64_t v94 = v201;
        (*v169)(v182, v77, v201);
        uint64_t v95 = v79;
        uint64_t v96 = v172;
        sub_1C3F86C30(v80, v172, type metadata accessor for Timestamp);
        (*v168)(v96, 0, 1, v205);
        uint64_t v37 = v184;
        sub_1C4497048();
        sub_1C3F86DB8(v95, type metadata accessor for Timestamp);
        (*v186)(v77, v16);
        uint64_t v15 = v204;
        uint64_t v14 = v94;
        int v68 = v175;
      }
      else
      {
        (*v186)((char *)v72, v16);
      }
LABEL_5:
      uint64_t v66 = (uint64_t)v188;
      ++v69;
    }
    while (v71 != MEMORY[0x1C8780160](v188, v16));
  }
  swift_bridgeObjectRelease();
  sub_1C44967D8();
  v207[0] = *v68;
  v207[0] = sub_1C3F87640();
  uint64_t v97 = sub_1C4497528();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x1C877FF50](&v208, v97, WitnessTable);
  swift_bridgeObjectRelease();
  v207[4] = v208;
  sub_1C4497F98();
  sub_1C4497F68();
  uint64_t v189 = (void (**)(char *, void *, uint64_t))sub_1C4497F88();
  BOOL v99 = 0;
  unint64_t v188 = (void (**)(char **, char *, uint64_t))(v164 + 32);
  uint64_t v100 = TupleTypeMetadata2;
  v187 = (void (**)(char *, char *, uint64_t))(TupleTypeMetadata2 - 8);
  uint64_t v186 = (void (**)(char *, uint64_t))(v197 + 32);
  uint64_t v185 = (unsigned int (**)(char *, uint64_t, uint64_t))(v165 + 56);
  uint64_t v101 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v165 + 48);
  v183 = (void (**)(char *, char *, uint64_t))(v197 + 16);
  unint64_t v182 = v197 + 8;
  uint64_t v102 = v191;
  uint64_t v103 = v203;
  uint64_t v184 = (char *)(v165 + 48);
  while (1)
  {
    uint64_t v107 = v192;
    sub_1C4497F78();
    (*v188)(v102, v107, v193);
    if ((*(unsigned int (**)(char **, uint64_t, uint64_t))(*(void *)(v100 - 8) + 48))(v102, 1, v100) == 1) {
      break;
    }
    LODWORD(v202) = v99;
    uint64_t v200 = *v102;
    uint64_t v108 = v206;
    ((void (*)(char *, char *, uint64_t))*v186)(v103, (char *)v102 + *(int *)(v100 + 48), v206);
    uint64_t v109 = v103;
    uint64_t v110 = v198;
    uint64_t v111 = v205;
    MEMORY[0x1C877FC90](v109, v209, v201, v205, v204);
    uint64_t v112 = v199;
    sub_1C3F86C30((uint64_t)&v109[*(int *)(v108 + 36)], v199, type metadata accessor for Timestamp);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))*v185)(v112, 0, 1, v111);
    uint64_t v113 = v196;
    uint64_t v114 = v196 + *(int *)(v190 + 48);
    sub_1C3F970C4(v110, v196, &qword_1EBBBC120);
    sub_1C3F970C4(v112, v114, &qword_1EBBBC120);
    uint64_t v115 = (char *)*v101;
    int v116 = (*v101)(v113, 1, v111);
    v197 = v115;
    if (v116 != 1)
    {
      uint64_t v121 = v180;
      sub_1C3F970C4(v113, v180, &qword_1EBBBC120);
      int v122 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v115)(v114, 1, v111);
      uint64_t v118 = &qword_1EBBBC128;
      uint64_t v123 = (uint64_t)v177;
      uint64_t v119 = v206;
      char v120 = v195;
      if (v122 != 1)
      {
        uint64_t v124 = v176;
        sub_1C3F896D0(v114, v176, type metadata accessor for Timestamp);
        uint64_t v125 = *(int *)(v205 + 20);
        uint64_t v126 = *(void *)(v121 + v125);
        uint64_t v127 = *(void *)(v124 + v125);
        uint64_t v128 = v174;
        sub_1C3F86C30(v121, v174, type metadata accessor for Timestamp);
        sub_1C3F86C30(v124, v123, type metadata accessor for Timestamp);
        if (v126 == v127)
        {
          uint64_t v129 = *(int *)(v173 + 20);
          uint64_t v130 = *(void *)(v128 + v129);
          uint64_t v131 = *(void *)(v123 + v129);
          uint64_t v132 = v166;
          sub_1C3F86C30(v128, v166, (uint64_t (*)(void))type metadata accessor for Replica);
          uint64_t v133 = v167;
          sub_1C3F86C30(v123, v167, (uint64_t (*)(void))type metadata accessor for Replica);
          if (v130 == v131)
          {
            LODWORD(v172) = sub_1C4496618();
            sub_1C3F86DB8(v133, (uint64_t (*)(void))type metadata accessor for Replica);
            sub_1C3F86DB8(v132, (uint64_t (*)(void))type metadata accessor for Replica);
            sub_1C3F86DB8(v123, type metadata accessor for Timestamp);
            sub_1C3F86DB8(v128, type metadata accessor for Timestamp);
            sub_1C3F86DB8(v176, type metadata accessor for Timestamp);
            sub_1C3F962E0(v199, &qword_1EBBBC120);
            sub_1C3F962E0(v198, &qword_1EBBBC120);
            sub_1C3F86DB8(v180, type metadata accessor for Timestamp);
            sub_1C3F962E0(v196, &qword_1EBBBC120);
            uint64_t v100 = TupleTypeMetadata2;
            char v120 = v195;
            uint64_t v111 = v205;
            uint64_t v119 = v206;
            uint64_t v103 = v203;
            if (v172) {
              goto LABEL_42;
            }
            goto LABEL_41;
          }
          sub_1C3F86DB8(v133, (uint64_t (*)(void))type metadata accessor for Replica);
          sub_1C3F86DB8(v132, (uint64_t (*)(void))type metadata accessor for Replica);
          uint64_t v124 = v176;
        }
        sub_1C3F86DB8(v123, type metadata accessor for Timestamp);
        sub_1C3F86DB8(v128, type metadata accessor for Timestamp);
        sub_1C3F86DB8(v124, type metadata accessor for Timestamp);
        uint64_t v118 = &qword_1EBBBC120;
        char v120 = v195;
        uint64_t v113 = v196;
        uint64_t v119 = v206;
        uint64_t v121 = v180;
      }
      sub_1C3F962E0(v199, &qword_1EBBBC120);
      sub_1C3F962E0(v198, &qword_1EBBBC120);
      sub_1C3F86DB8(v121, type metadata accessor for Timestamp);
      uint64_t v111 = v205;
LABEL_40:
      sub_1C3F962E0(v113, v118);
      uint64_t v100 = TupleTypeMetadata2;
      uint64_t v103 = v203;
LABEL_41:
      sub_1C4496748();
      goto LABEL_42;
    }
    sub_1C3F962E0(v112, &qword_1EBBBC120);
    sub_1C3F962E0(v110, &qword_1EBBBC120);
    int v117 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v115)(v114, 1, v111);
    uint64_t v118 = &qword_1EBBBC128;
    uint64_t v119 = v206;
    char v120 = v195;
    if (v117 != 1) {
      goto LABEL_40;
    }
    sub_1C3F962E0(v113, &qword_1EBBBC120);
    uint64_t v100 = TupleTypeMetadata2;
    uint64_t v103 = v203;
LABEL_42:
    (*v183)(v120, v103, v119);
    uint64_t v102 = v191;
    if (v202)
    {
      uint64_t v134 = *(void (**)(char *, uint64_t))v182;
      (*(void (**)(char *, uint64_t))v182)(v120, v119);
      v134(v103, v119);
      BOOL v99 = 1;
      uint64_t v101 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v184;
    }
    else
    {
      uint64_t v104 = v178;
      MEMORY[0x1C877FC90](v120, v209, v201, v111, v204);
      uint64_t v105 = *(void (**)(char *, uint64_t))v182;
      (*(void (**)(char *, uint64_t))v182)(v120, v119);
      v105(v203, v119);
      uint64_t v101 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v184;
      BOOL v99 = ((uint64_t (*)(char *, uint64_t, uint64_t))v197)(v104, 1, v111) == 1;
      uint64_t v106 = (uint64_t)v104;
      uint64_t v103 = v203;
      sub_1C3F962E0(v106, &qword_1EBBBC120);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v135 = (uint64_t)v181;
  if (sub_1C4496768()) {
    goto LABEL_47;
  }
  if ((v161 | v99))
  {
    sub_1C43778A0();
LABEL_47:
    (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v135, v163);
  }
  else
  {
    v207[0] = *v175;
    uint64_t v208 = sub_1C3F87640();
    unint64_t v136 = v159;
    sub_1C44967C8();
    uint64_t v137 = sub_1C44967A8();
    uint64_t v138 = *(void *)(v137 - 8);
    uint64_t v139 = (uint64_t)v158;
    (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v158, v136, v137);
    sub_1C443CCA8((unint64_t *)&qword_1EBBBEE28, MEMORY[0x1E4F27CE0]);
    sub_1C4497818();
    (*(void (**)(char *, uint64_t))(v138 + 8))(v136, v137);
    uint64_t v140 = v160;
    *(void *)(v139 + *(int *)(v160 + 36)) = v207[0];
    sub_1C3F961BC(v139, (uint64_t)v9, &qword_1EBBBC148);
    uint64_t v141 = &v9[*(int *)(v140 + 36)];
    uint64_t v142 = *(void *)v141;
    sub_1C44977D8();
    if (v142 != v207[0])
    {
      sub_1C443CCA8(qword_1EA39D5B8, MEMORY[0x1E4F27CE0]);
      do
      {
        sub_1C4497098();
        uint64_t v143 = (void (*)(void *, void))sub_1C44978C8();
        uint64_t v145 = *v144;
        uint64_t v146 = v144[1];
        v143(v207, 0);
        v207[0] = v145;
        v207[1] = v146;
        swift_getWitnessTable();
        sub_1C44978F8();
        uint64_t v147 = *(void *)v141;
        sub_1C44977D8();
      }
      while (v147 != v207[0]);
    }
    sub_1C3F962E0((uint64_t)v9, &qword_1EBBBC148);
    uint64_t v148 = v155;
    v150(v155, v151);
    sub_1C4431EF0(v208, v135, v148);
    v153(v148, 0, 1, v154);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C3F86B60(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F86BC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F86C30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F86C98(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F86CF8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F86D58(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F86DB8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for Timestamp(uint64_t a1)
{
  return sub_1C3F9708C(a1, qword_1EBBC09E8);
}

uint64_t storeEnumTagSinglePayload for Timestamp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C4126CC8);
}

uint64_t getEnumTagSinglePayload for Timestamp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C4126C5C);
}

uint64_t sub_1C3F86E60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = sub_1C4496678();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  return v7((v4 + a1 + v8) & ~v8, v5);
}

uint64_t sub_1C3F86F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = sub_1C4496678();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v12, v13, v7);
  uint64_t v14 = *(void *)(v9 + 48) + 7;
  *(void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  *(void *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8 + v12) = *(void *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8 + v13);
  return a1;
}

uint64_t type metadata accessor for CRSet()
{
  return __swift_instantiateGenericMetadata();
}

BOOL CRSet.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  MEMORY[0x1C877FC90](&v11, a1, v6, v7, &type metadata for CRSetElement, v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = v11;
  if (v11) {
    sub_1C3F870F4(v11);
  }
  return v9 != 0;
}

uint64_t storeEnumTagSinglePayload for CRVersion(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1C3F870F4(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C3F87134(uint64_t a1)
{
  uint64_t v3 = a1 - 8;
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (void *)((char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16[0] = *(void *)(v3 + 24);
  uint64_t v7 = type metadata accessor for CROrderedSet.DeduplicatedInfo();
  uint64_t v8 = sub_1C4497B38();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (void *)((char *)v16 - v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)v16 - v10, v1 + *(int *)(v3 + 56), v8);
  uint64_t v12 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = *v11;
    uint64_t v14 = *(void (**)(uint64_t *, uint64_t))(v12 + 8);
    swift_bridgeObjectRetain();
    v14(v11, v7);
  }
  (*(void (**)(void *, uint64_t, uint64_t))(v4 + 16))(v6, v1, a1);
  if (!v13)
  {
    v16[1] = *v6;
    type metadata accessor for CROrderedSetElement();
    type metadata accessor for CRSequence();
    uint64_t v13 = sub_1C3F87640();
  }
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, a1);
  return v13;
}

void *sub_1C3F873B0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 48);
  uint64_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (void *)((char *)a2 + v5);
  uint64_t v8 = type metadata accessor for CROrderedSet.DeduplicatedInfo();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48);
  swift_retain();
  swift_retain();
  if (v10(v7, 1, v8))
  {
    uint64_t v11 = sub_1C4497B38();
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    *uint64_t v6 = *v7;
    uint64_t v12 = *(int *)(v8 + 44);
    uint64_t v13 = (char *)v6 + v12;
    uint64_t v14 = (char *)v7 + v12;
    uint64_t v15 = sub_1C44967E8();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_1C3F8752C(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for CROrderedSet.DeduplicatedInfo();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = v4 + *(int *)(v5 + 44);
    uint64_t v8 = sub_1C44967E8();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    return v9(v7, v8);
  }
  return result;
}

uint64_t sub_1C3F87614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3Tm_0);
}

uint64_t type metadata accessor for CROrderedSet.DeduplicatedInfo()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C3F87640()
{
  if (!*v0) {
    return sub_1C4497478();
  }
  uint64_t v1 = (char *)sub_1C3F876BC();
  uint64_t v2 = &v1[qword_1EA39F538];
  swift_beginAccess();
  uint64_t v3 = *(void *)v2;
  swift_bridgeObjectRetain();

  return v3;
}

uint64_t sub_1C3F876BC()
{
  id v1 = objc_msgSend(*(id *)(v0 + qword_1EBBC59D0), sel_attributedString);
  type metadata accessor for CRSequenceStorage();
  return swift_dynamicCastClassUnconditional();
}

uint64_t type metadata accessor for CRSequenceStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CRSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CROrderedSet.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  uint64_t v30 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v32 = (char *)&v28 - v8;
  uint64_t v33 = v7;
  uint64_t v31 = *(void *)(v7 + 32);
  uint64_t v9 = type metadata accessor for CROrderedSetElement();
  uint64_t v10 = sub_1C4497B38();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = *v2;
  uint64_t v18 = v2[1];
  if (v18 == MEMORY[0x1C8780160](*v2, v9))
  {
    uint64_t v19 = *(void *)(v9 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v16, 1, 1, v9);
    goto LABEL_6;
  }
  uint64_t v29 = v4;
  char v20 = sub_1C44974A8();
  sub_1C4497438();
  if ((v20 & 1) == 0)
  {
    uint64_t result = sub_1C4497DA8();
    uint64_t v21 = *(void *)(v9 - 8);
    if (*(void *)(v21 + 64) != 8)
    {
LABEL_14:
      __break(1u);
      return result;
    }
    uint64_t v35 = result;
    (*(void (**)(char *, uint64_t *, uint64_t))(v21 + 16))(v16, &v35, v9);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v23 = v18 + 1;
    if (!__OFADD__(v18, 1)) {
      goto LABEL_5;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v21 = *(void *)(v9 - 8);
  uint64_t result = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v21 + 16))(v16, v17+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v18, v9);
  uint64_t v23 = v18 + 1;
  if (__OFADD__(v18, 1)) {
    goto LABEL_13;
  }
LABEL_5:
  v2[1] = v23;
  uint64_t v19 = v21;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v16, 0, 1, v9);
  uint64_t v4 = v29;
LABEL_6:
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v14, 1, v9) == 1)
  {
    uint64_t v24 = *(void (**)(char *, uint64_t))(v11 + 8);
    v24(v14, v10);
    v24(v16, v10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v34, 1, 1, v3);
  }
  else
  {
    uint64_t v25 = v30;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v30, v14, v3);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v9);
    uint64_t v26 = (uint64_t)v32;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v32, v25, v3);
    uint64_t v35 = v2[2];
    uint64_t v27 = type metadata accessor for CRSet();
    CRSet.subscript.getter(v26, v27, v34);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v26, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
}

uint64_t sub_1C3F87C7C(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t result = sub_1C4496678();
  uint64_t v9 = *(void *)(result - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v7) {
    unsigned int v11 = v7;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  uint64_t v13 = *(void *)(v6 + 64) + v12;
  if (v11 >= a2)
  {
LABEL_24:
    if (v11)
    {
      if (v7 >= v10)
      {
        uint64_t v23 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v6 + 48);
        return v23(a1, v7, v5);
      }
      else
      {
        uint64_t v22 = *(uint64_t (**)(unint64_t))(v9 + 48);
        return v22(((unint64_t)a1 + v13) & ~v12);
      }
    }
    return 0;
  }
  unint64_t v14 = ((((*(void *)(*(void *)(result - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + (v13 & ~v12)
      + 8;
  uint64_t v15 = v14 & 0xFFFFFFF8;
  if ((v14 & 0xFFFFFFF8) != 0) {
    unsigned int v16 = 2;
  }
  else {
    unsigned int v16 = a2 - v11 + 1;
  }
  if (v16 >= 0x10000) {
    unsigned int v17 = 4;
  }
  else {
    unsigned int v17 = 2;
  }
  if (v16 < 0x100) {
    unsigned int v17 = 1;
  }
  if (v16 >= 2) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  switch(v18)
  {
    case 1:
      int v19 = *((unsigned __int8 *)a1 + v14);
      if (!v19) {
        goto LABEL_24;
      }
      goto LABEL_21;
    case 2:
      int v19 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!v19) {
        goto LABEL_24;
      }
      goto LABEL_21;
    case 3:
      __break(1u);
      return result;
    case 4:
      int v19 = *(int *)((char *)a1 + v14);
      if (!v19) {
        goto LABEL_24;
      }
LABEL_21:
      unsigned int v20 = v19 - 1;
      if (v15)
      {
        unsigned int v20 = 0;
        int v21 = *a1;
      }
      else
      {
        int v21 = 0;
      }
      uint64_t result = v11 + (v21 | v20) + 1;
      break;
    default:
      goto LABEL_24;
  }
  return result;
}

void sub_1C3F87EC0(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v29 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = sub_1C4496678();
  uint64_t v11 = *(void *)(v10 - 8);
  unsigned int v12 = *(_DWORD *)(v11 + 84);
  if (v12 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v14 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  uint64_t v15 = *(void *)(v8 + 64) + v14;
  uint64_t v16 = v15 & ~v14;
  size_t v17 = ((((*(void *)(*(void *)(v10 - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  size_t v18 = v17 + v16;
  if (v17 + v16) {
    unsigned int v19 = 2;
  }
  else {
    unsigned int v19 = a3 - v13 + 1;
  }
  if (v19 >= 0x10000) {
    int v20 = 4;
  }
  else {
    int v20 = 2;
  }
  if (v19 < 0x100) {
    int v20 = 1;
  }
  if (v19 >= 2) {
    unsigned int v21 = v20;
  }
  else {
    unsigned int v21 = 0;
  }
  if (v13 < a3) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  if (a2 <= v13)
  {
    switch(v22)
    {
      case 1:
        *((unsigned char *)a1 + v18) = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 2:
        *(_WORD *)((char *)a1 + v18) = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 3:
LABEL_45:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)((char *)a1 + v18) = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v9 >= v12)
          {
            uint64_t v27 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v29 + 56);
            v27(a1, a2, v9, v7);
          }
          else
          {
            uint64_t v25 = (_DWORD *)(((unint64_t)a1 + v15) & ~v14);
            if (v12 >= a2)
            {
              uint64_t v28 = *(void (**)(_DWORD *, uint64_t))(v11 + 56);
              v28(v25, a2);
            }
            else if (v17)
            {
              int v26 = ~v12 + a2;
              bzero(v25, v17);
              *uint64_t v25 = v26;
            }
          }
        }
        break;
    }
  }
  else
  {
    if (v18) {
      int v23 = 1;
    }
    else {
      int v23 = a2 - v13;
    }
    if (v18)
    {
      int v24 = ~v13 + a2;
      bzero(a1, v18);
      *a1 = v24;
    }
    switch(v22)
    {
      case 1:
        *((unsigned char *)a1 + v18) = v23;
        break;
      case 2:
        *(_WORD *)((char *)a1 + v18) = v23;
        break;
      case 3:
        goto LABEL_45;
      case 4:
        *(_DWORD *)((char *)a1 + v18) = v23;
        break;
      default:
        return;
    }
  }
}

uint64_t CRSet.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  CRSet.index(of:)(a1, a2, (uint64_t)v12);
  unsigned __int8 v5 = v13;
  if (v13 == 255)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 56);
    uint64_t v9 = a3;
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v7 = v12[0];
    uint64_t v6 = v12[1];
    v13 &= 1u;
    swift_retain();
    CRSet.subscript.getter();
    sub_1C3F88298(v7, v6, v5);
    swift_release();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 56);
    uint64_t v9 = a3;
    uint64_t v10 = 0;
  }
  return v8(v9, v10, 1);
}

uint64_t sub_1C3F88298(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_1C3F882B0(result, a2, a3 & 1);
  }
  return result;
}

uint64_t sub_1C3F882B0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t CRSet.subscript.getter()
{
  return swift_bridgeObjectRelease();
}

uint64_t CRSet.index(of:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *v3;
  uint64_t result = swift_beginAccess();
  uint64_t v9 = *(void *)(v7 + 40);
  if (*(void *)(v9 + 16))
  {
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v11 = *(void *)(a2 + 32);
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_1C3F88430(a1, v10, v11);
    if (v13)
    {
      unint64_t v14 = v12;
      uint64_t v15 = *(unsigned int *)(v9 + 36);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a3 = v14;
      *(void *)(a3 + 8) = v15;
      *(unsigned char *)(a3 + 16) = 0;
      return result;
    }
    uint64_t result = swift_bridgeObjectRelease();
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = -1;
  return result;
}

unint64_t sub_1C3F88430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4497078();
  return sub_1C3F8848C(a1, v6, a2, a3);
}

unint64_t sub_1C3F8848C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v21[1] = a1;
  v21[2] = a4;
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v4;
  uint64_t v9 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v10 & ~v9;
  v21[0] = v4 + 64;
  if ((*(void *)(v4 + 64 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v12 = ~v9;
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    unint64_t v14 = v15;
    uint64_t v16 = *(void *)(v13 + 56);
    size_t v17 = (void (**)(char *, uint64_t))(v13 - 8);
    do
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v22 + 48) + v16 * v11, a3);
      char v19 = sub_1C4497178();
      (*v17)(v8, a3);
      if (v19) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
      uint64_t v13 = v18;
    }
    while (((*(void *)(v21[0] + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  return v11;
}

uint64_t sub_1C3F88614@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v71 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC06E8);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v63 = (uint64_t)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for Proto_Sequence(0);
  uint64_t v59 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  uint64_t v61 = (uint64_t)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC0748);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v67 = (uint64_t)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v57 - v17;
  uint64_t v19 = type metadata accessor for Proto_Set(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v68 = (uint64_t)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  int v24 = (char *)&v57 - v23;
  uint64_t v58 = type metadata accessor for CROrderedSet();
  uint64_t v25 = *(int *)(v58 + 48);
  uint64_t v62 = a6;
  uint64_t v26 = (uint64_t)a6 + v25;
  uint64_t v69 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = type metadata accessor for CROrderedSet.DeduplicatedInfo();
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56);
  uint64_t v65 = v26;
  uint64_t v64 = v28;
  v29(v26, 1, 1);
  uint64_t v66 = a3;
  uint64_t v30 = type metadata accessor for CROrderedSetElement();
  uint64_t v76 = sub_1C4496EB8();
  uint64_t v31 = *(int *)(type metadata accessor for Proto_OrderedSet(0) + 20);
  uint64_t v72 = a1;
  uint64_t v73 = v31;
  uint64_t v32 = *(void *)(a1 + v31)
      + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set;
  swift_beginAccess();
  sub_1C3F970C4(v32, (uint64_t)v18, (uint64_t *)&unk_1EBBC0748);
  uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v33(v18, 1, v19) == 1)
  {
    sub_1C4496888();
    uint64_t v34 = *(int *)(v19 + 20);
    if (qword_1EBBC01E8 != -1) {
      swift_once();
    }
    *(void *)&v24[v34] = qword_1EBBC01E0;
    swift_retain();
    sub_1C3F962E0((uint64_t)v18, (uint64_t *)&unk_1EBBC0748);
  }
  else
  {
    sub_1C3F896D0((uint64_t)v18, (uint64_t)v24, type metadata accessor for Proto_Set);
  }
  uint64_t v35 = v30;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1C3F86DB8((uint64_t)v24, type metadata accessor for Proto_Set);
  swift_bridgeObjectRelease();
  sub_1C4497528();
  sub_1C4497458();
  uint64_t v36 = v72;
  uint64_t v37 = *(void *)(v72 + v73)
      + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set;
  swift_beginAccess();
  uint64_t v38 = v67;
  sub_1C3F970C4(v37, v67, (uint64_t *)&unk_1EBBC0748);
  if (v33((char *)v38, 1, v19) == 1)
  {
    uint64_t v39 = v68;
    sub_1C4496888();
    uint64_t v40 = *(int *)(v19 + 20);
    if (qword_1EBBC01E8 != -1) {
      swift_once();
    }
    *(void *)(v39 + v40) = qword_1EBBC01E0;
    swift_retain();
    uint64_t v41 = sub_1C3F962E0(v38, (uint64_t *)&unk_1EBBC0748);
  }
  else
  {
    uint64_t v39 = v68;
    uint64_t v41 = sub_1C3F896D0(v38, v68, type metadata accessor for Proto_Set);
  }
  uint64_t v42 = v71;
  MEMORY[0x1F4188790](v41);
  uint64_t v43 = v66;
  uint64_t v44 = v69;
  *(&v57 - 6) = v66;
  *(&v57 - 5) = v44;
  *(&v57 - 4) = v27;
  *(&v57 - 3) = v42;
  *(&v57 - 2) = v36;
  *(&v57 - 1) = (uint64_t)&v76;
  swift_retain();
  uint64_t v45 = v70;
  sub_1C3F70CD0(v39, (uint64_t)sub_1C3F72040, (uint64_t)(&v57 - 8), v42, v43, v44, v27, &v75);
  if (v45)
  {
    swift_release();
    sub_1C3F86DB8(v36, type metadata accessor for Proto_OrderedSet);
    swift_bridgeObjectRelease();
    uint64_t v55 = sub_1C4497B38();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(v65, v55);
  }
  else
  {
    uint64_t v46 = v62;
    v62[1] = v75;
    uint64_t v47 = *(void *)(v36 + v73)
        + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
    swift_beginAccess();
    uint64_t v48 = v47;
    uint64_t v49 = v63;
    sub_1C3F970C4(v48, v63, &qword_1EBBC06E8);
    uint64_t v50 = v60;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v49, 1, v60) == 1)
    {
      uint64_t v51 = v50;
      uint64_t v52 = v61;
      sub_1C4496888();
      uint64_t v53 = *(int *)(v51 + 20);
      if (qword_1EBBBC000 != -1) {
        swift_once();
      }
      *(void *)(v52 + v53) = qword_1EBBBBFF0;
      swift_retain();
      sub_1C3F962E0(v63, &qword_1EBBC06E8);
    }
    else
    {
      uint64_t v52 = v61;
      sub_1C3F896D0(v49, v61, type metadata accessor for Proto_Sequence);
    }
    uint64_t v54 = v76;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1C3F8C978(v52, v54, v42, v35, (uint64_t)&off_1F1F9B310, &v74);
    *uint64_t v46 = v74;
    sub_1C3F85354(0, v58);
    swift_release();
    sub_1C3F86DB8(v36, type metadata accessor for Proto_OrderedSet);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1C3F88E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_230Tm_34);
}

uint64_t sub_1C3F88E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_230Tm_35);
}

uint64_t sub_1C3F88E64(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v67 = a7;
  uint64_t v73 = a6;
  unint64_t v74 = a3;
  uint64_t v81 = a5;
  uint64_t v69 = a2;
  uint64_t v68 = a1;
  uint64_t v79 = a9;
  uint64_t v12 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v70 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v71 = (unint64_t *)((char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for Timestamp(0);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v72 = (uint64_t)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = a10;
  uint64_t v65 = type metadata accessor for CROrderedSetElement();
  uint64_t v64 = *(void *)(v65 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v65);
  uint64_t v62 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v63 = (uint64_t)&v61 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Proto_Version(0);
  uint64_t v77 = *(void *)(v22 - 8);
  uint64_t v78 = v22;
  uint64_t v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (uint64_t *)((char *)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v82 = a8;
  uint64_t v76 = *(void *)(a8 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  uint64_t v75 = (uint64_t)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  BOOL v84 = (char *)&v61 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v29 - 8);
  uint64_t v31 = (char *)&v61 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for Proto_Value(0);
  uint64_t v33 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v61 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = *(void *)(a4 + *(int *)(type metadata accessor for Proto_Set.Element(0) + 20));
  uint64_t v37 = v36 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1C3F970C4(v37, (uint64_t)v31, &qword_1EBBC0540);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
  {
    sub_1C4496888();
    uint64_t v38 = *(int *)(v32 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)&v35[v38] = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0((uint64_t)v31, &qword_1EBBC0540);
  }
  else
  {
    sub_1C3F896D0((uint64_t)v31, (uint64_t)v35, type metadata accessor for Proto_Value);
  }
  uint64_t v39 = v81;
  uint64_t v40 = v79;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  sub_1C3F974B0((uint64_t)v35, v39);
  swift_release();
  uint64_t v41 = *(void (**)(uint64_t))(*(void *)(*(void *)(v40 + 8) + 8) + 8);
  uint64_t v42 = swift_retain();
  uint64_t v43 = v80;
  v41(v42);
  if (v43) {
    return swift_release();
  }
  uint64_t v44 = v36 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  sub_1C3F970C4(v44, (uint64_t)v21, &qword_1EBBC0578);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v21, 1, v78) == 1)
  {
    uint64_t v45 = MEMORY[0x1E4FBC860];
    *uint64_t v25 = MEMORY[0x1E4FBC860];
    v25[1] = v45;
    sub_1C4496888();
    sub_1C3F962E0((uint64_t)v21, &qword_1EBBC0578);
  }
  else
  {
    sub_1C3F896D0((uint64_t)v21, (uint64_t)v25, type metadata accessor for Proto_Version);
  }
  uint64_t v46 = v81;
  uint64_t v47 = v82;
  uint64_t v48 = v76;
  uint64_t v49 = v84;
  swift_retain();
  sub_1C3F8F9D0(v25, v46, &v83);
  long long v51 = v83;
  (*(void (**)(uint64_t, char *, uint64_t))(v48 + 16))(v75, v49, v47);
  uint64_t v52 = *(void *)(v73 + *(int *)(type metadata accessor for Proto_OrderedSet(0) + 20))
      + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamps;
  uint64_t result = swift_beginAccess();
  if ((v74 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v82 = *((void *)&v51 + 1);
    if (*(void *)(*(void *)v52 + 16) > v74)
    {
      uint64_t v53 = v71;
      sub_1C3F86C30(*(void *)v52+ ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(void *)(v70 + 72) * v74, (uint64_t)v71, type metadata accessor for Proto_Timestamp);
      swift_retain();
      uint64_t v54 = v72;
      sub_1C3F8A234(v53, v46, v72);
      uint64_t v55 = v48;
      uint64_t v56 = v63;
      sub_1C3F8A474(v75, v54, v47, v63);
      uint64_t v57 = v64;
      uint64_t v58 = v65;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v62, v56, v65);
      sub_1C4497528();
      sub_1C44974D8();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
      uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v55 + 32))(v68, v84, v47);
      uint64_t v59 = v69;
      uint64_t v60 = v82;
      *uint64_t v69 = v51;
      v59[1] = v60;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1C3F896D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for CROrderedSetElement()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C3F89750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return sub_1C3F8977C(a1, *v4, *(void *)(a3 + 16), a2, a4);
}

uint64_t sub_1C3F8977C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v102 = a2;
  uint64_t v98 = a5;
  uint64_t v10 = sub_1C4497B38();
  uint64_t v96 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v90 - v12;
  uint64_t v99 = a4;
  uint64_t v97 = *(void **)(a4 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Proto_Value(0);
  uint64_t v100 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v101 = (uint64_t)v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1C44986B8();
  if (v19)
  {
    *(void *)&long long v103 = 0;
    *((void *)&v103 + 1) = 0xE000000000000000;
    sub_1C4497D28();
    sub_1C4497268();
    sub_1C44982B8();
LABEL_15:
    sub_1C4497268();
    long long v34 = v103;
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v35 = v34;
LABEL_16:
    *(unsigned char *)(v35 + 16) = 0;
    return swift_willThrow();
  }
  uint64_t v20 = v18;
  if ((v18 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = swift_conformsToProtocol2();
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    if (!v21) {
      a1 = 0;
    }
    if (a1)
    {
      uint64_t v94 = v22;
      uint64_t v95 = v5;
      uint64_t v23 = v102 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value;
      unint64_t v24 = sub_1C3F8A16C(v20, *(void *)(v102 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value));
      if ((v25 & 1) == 0)
      {
        if ((v24 & 0x8000000000000000) != 0) {
          goto LABEL_85;
        }
        uint64_t v26 = *(void *)(v23 + 8);
        if (v24 >= *(void *)(v26 + 16)) {
          goto LABEL_86;
        }
        uint64_t v27 = v101;
        sub_1C3F8A1D0(v26+ ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))+ *(void *)(v100 + 72) * v24, v101);
        uint64_t v28 = *(void *)(v102 + 16);
        type metadata accessor for CRDecoder(0);
        swift_allocObject();
        swift_retain();
        uint64_t v29 = sub_1C3F974B0(v27, v28);
        swift_release();
        uint64_t v30 = v94;
        uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 8);
        *((void *)&v104 + 1) = a1;
        uint64_t v105 = v94;
        __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v103);
        uint64_t v32 = v95;
        v31(v29, a1, v30);
        if (v32) {
          return __swift_deallocate_boxed_opaque_existential_0((uint64_t)&v103);
        }
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCB20);
        return swift_dynamicCast();
      }
      uint64_t v47 = v99;
      uint64_t v48 = swift_conformsToProtocol2();
      if (v48) {
        uint64_t v49 = v48;
      }
      else {
        uint64_t v49 = 0;
      }
      if (v48) {
        uint64_t v50 = v47;
      }
      else {
        uint64_t v50 = 0;
      }
      if (v50)
      {
        uint64_t v102 = *(void *)(v49 + 16);
        *((void *)&v104 + 1) = v50;
        uint64_t v105 = v49;
        __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v103);
        ((void (*)(uint64_t, uint64_t))v102)(v50, v49);
        uint64_t v47 = v99;
      }
      else
      {
        uint64_t v105 = 0;
        long long v103 = 0u;
        long long v104 = 0u;
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBBBF20);
      int v85 = swift_dynamicCast();
      uint64_t v86 = v97;
      uint64_t v87 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v97[7];
      if (v85)
      {
        v87(v13, 0, 1, v47);
        char v88 = (void (*)(char *, char *, uint64_t))v86[4];
        v88(v15, v13, v47);
        return ((uint64_t (*)(uint64_t, char *, uint64_t))v88)(v98, v15, v47);
      }
      v87(v13, 1, 1, v47);
      (*(void (**)(char *, uint64_t))(v96 + 8))(v13, v10);
      *(void *)&long long v103 = 0;
      *((void *)&v103 + 1) = 0xE000000000000000;
      sub_1C4497D28();
      sub_1C4497268();
      sub_1C44982B8();
      goto LABEL_15;
    }
LABEL_27:
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v46 = xmmword_1C44A18C0;
    *(unsigned char *)(v46 + 16) = 4;
    return swift_willThrow();
  }
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBBBCB8);
  if (!swift_dynamicCastMetatype()) {
    goto LABEL_27;
  }
  uint64_t v37 = swift_conformsToProtocol2();
  uint64_t v38 = v37 ? v37 : 0;
  if (!(v37 ? a3 : 0)) {
    goto LABEL_27;
  }
  uint64_t v40 = (*(uint64_t (**)(void))(v38 + 8))();
  uint64_t v41 = v40;
  uint64_t v42 = (void *)(v102 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value);
  uint64_t v43 = *(void *)(v102 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value);
  uint64_t v95 = *(void *)(v43 + 16);
  if (!v95)
  {
    swift_bridgeObjectRelease();
    uint64_t v89 = (void *)MEMORY[0x1E4FBC868];
LABEL_78:
    *(void *)&long long v103 = v89;
    return swift_dynamicCast();
  }
  v90[1] = v36;
  uint64_t v96 = v43 + 32;
  uint64_t v44 = v40 + 56;
  swift_bridgeObjectRetain();
  unint64_t v45 = 0;
  uint64_t v97 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v93 = v44;
  uint64_t v94 = v41;
  uint64_t v91 = v42;
  uint64_t v92 = v43;
  while (v45 < *(void *)(v43 + 16))
  {
    uint64_t v52 = *(void *)(v96 + 8 * v45);
    if (v52 < 0) {
      goto LABEL_82;
    }
    if (*(void *)(v41 + 16))
    {
      uint64_t v53 = sub_1C44985E8();
      uint64_t v54 = -1 << *(unsigned char *)(v41 + 32);
      unint64_t v55 = v53 & ~v54;
      if ((*(void *)(v44 + ((v55 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v55))
      {
        uint64_t v56 = *(void *)(v41 + 48);
        if (*(void *)(v56 + 8 * v55) == v52) {
          goto LABEL_39;
        }
        uint64_t v57 = ~v54;
        while (1)
        {
          unint64_t v55 = (v55 + 1) & v57;
          if (((*(void *)(v44 + ((v55 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v55) & 1) == 0) {
            break;
          }
          if (*(void *)(v56 + 8 * v55) == v52) {
            goto LABEL_39;
          }
        }
      }
    }
    uint64_t v58 = *v42;
    uint64_t v59 = *(void *)(*v42 + 16);
    if (!v59) {
      goto LABEL_75;
    }
    if (*(void *)(v58 + 32) == v52)
    {
      unint64_t v60 = 0;
    }
    else
    {
      if (v59 == 1) {
        goto LABEL_75;
      }
      if (*(void *)(v58 + 40) != v52)
      {
        uint64_t v61 = 0;
        uint64_t v62 = v59 - 2;
        uint64_t v63 = v58 + 48;
        while (v62 != v61)
        {
          uint64_t v64 = *(void *)(v63 + 8 * v61++);
          if (v64 == v52)
          {
            unint64_t v60 = v61 + 1;
            goto LABEL_59;
          }
        }
LABEL_75:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1C3FE3FF0();
        swift_allocError();
        *(void *)uint64_t v35 = 0xD00000000000001ELL;
        *(void *)(v35 + 8) = 0x80000001C44B2D80;
        goto LABEL_16;
      }
      unint64_t v60 = 1;
    }
LABEL_59:
    uint64_t v65 = v42[1];
    if (v60 >= *(void *)(v65 + 16)) {
      goto LABEL_83;
    }
    uint64_t v66 = v101;
    sub_1C3F8A1D0(v65+ ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))+ *(void *)(v100 + 72) * v60, v101);
    uint64_t v67 = *(void *)(v102 + 16);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    swift_retain();
    sub_1C3F974B0(v66, v67);
    swift_release();
    uint64_t v68 = swift_retain();
    AnyCRValue.init(from:)(v68, (uint64_t *)&v103);
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t v69 = v103;
    uint64_t v70 = v97;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v106 = v70;
    unint64_t v73 = sub_1C40619F4(v52);
    uint64_t v74 = v70[2];
    BOOL v75 = (v72 & 1) == 0;
    uint64_t v76 = v74 + v75;
    if (__OFADD__(v74, v75)) {
      goto LABEL_84;
    }
    char v77 = v72;
    if (v70[3] >= v76)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1C406AC74();
      }
    }
    else
    {
      sub_1C40671FC(v76, isUniquelyReferenced_nonNull_native);
      unint64_t v78 = sub_1C40619F4(v52);
      if ((v77 & 1) != (v79 & 1)) {
        goto LABEL_88;
      }
      unint64_t v73 = v78;
    }
    uint64_t v80 = v106;
    uint64_t v97 = v106;
    if (v77)
    {
      uint64_t v51 = v106[7];
      swift_release();
      *(void *)(v51 + 8 * v73) = v69;
    }
    else
    {
      v106[(v73 >> 6) + 8] |= 1 << v73;
      uint64_t v81 = 8 * v73;
      *(void *)(v80[6] + v81) = v52;
      *(void *)(v80[7] + v81) = v69;
      uint64_t v82 = v80[2];
      BOOL v83 = __OFADD__(v82, 1);
      uint64_t v84 = v82 + 1;
      if (v83) {
        goto LABEL_87;
      }
      v80[2] = v84;
    }
    uint64_t v6 = 0;
    uint64_t v44 = v93;
    uint64_t v41 = v94;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v42 = v91;
    uint64_t v43 = v92;
LABEL_39:
    if (++v45 == v95)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v89 = v97;
      goto LABEL_78;
    }
  }
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  uint64_t result = sub_1C4498558();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CRDecoder(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0628);
}

uint64_t sub_1C3F8A16C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == a1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v5 = v2 - 1;
  while (v5 != result)
  {
    uint64_t v6 = *(void *)(a2 + 40 + 8 * result++);
    if (v6 == a1) {
      return result;
    }
  }
  return 0;
}

uint64_t sub_1C3F8A1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3F8A234@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Replica();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = *a1;
  uint64_t v14 = *(void *)(a2 + 24);
  unint64_t v15 = *(void *)(v14 + 16);
  if (v15) {
    BOOL v16 = v13 >= v15;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v17 = xmmword_1C44A0890;
    *(unsigned char *)(v17 + 16) = 0;
    swift_willThrow();
    swift_release();
    return sub_1C3F8B168((uint64_t)a1, type metadata accessor for Proto_Timestamp);
  }
  else
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v13, v6);
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v9, v6);
    *(void *)&v12[*(int *)(v10 + 20)] = 0;
    sub_1C3F8AD10((uint64_t)v12, a3, (uint64_t (*)(void))type metadata accessor for Replica);
    unint64_t v18 = a1[1];
    sub_1C3F8B168((uint64_t)a1, type metadata accessor for Proto_Timestamp);
    uint64_t result = type metadata accessor for Timestamp(0);
    *(void *)(a3 + *(int *)(result + 20)) = v18;
  }
  return result;
}

uint64_t sub_1C3F8A474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v6 = type metadata accessor for CROrderedSetElement();
  return sub_1C3F896D0(a2, a4 + *(int *)(v6 + 36), type metadata accessor for Timestamp);
}

void sub_1C3F8A50C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t CRValueStruct.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v46 = (uint64_t)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Proto_Value(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v42 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  unint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v15 = (char *)&v37 - v14;
  uint64_t v16 = type metadata accessor for Proto_CustomCRValue(0);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v37 = (void **)((char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v17);
  uint64_t v38 = (uint64_t)&v37 - v19;
  uint64_t v20 = a1;
  uint64_t v21 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v21, (uint64_t)v15, &qword_1EBBC0540);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(a1) = v22(v15, 1, v7);
  sub_1C3F962E0((uint64_t)v15, &qword_1EBBC0540);
  if (a1 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v23 = 0xD000000000000017;
    unint64_t v24 = "Not decoding a CRValue.";
LABEL_11:
    *(void *)(v23 + 8) = (unint64_t)(v24 - 32) | 0x8000000000000000;
    *(unsigned char *)(v23 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  *(void *)(swift_initStackObject() + 16) = v20;
  sub_1C3F970C4(v21, (uint64_t)v13, &qword_1EBBC0540);
  uint64_t result = v22(v13, 1, v7);
  if (result == 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v26 = v42;
  sub_1C3F8AC40((uint64_t)v13, v42, type metadata accessor for Proto_Value);
  swift_retain();
  swift_release();
  uint64_t v27 = *(void *)(v26 + *(int *)(v7 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v28 = v27;
  uint64_t v29 = v46;
  sub_1C3F970C4(v28, v46, &qword_1EBBBF8A0);
  sub_1C3F8B108(v26, type metadata accessor for Proto_Value);
  uint64_t v30 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v29, 1, v30) == 1)
  {
    sub_1C3F962E0(v29, &qword_1EBBBF8A0);
LABEL_10:
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v23 = 0xD00000000000001FLL;
    unint64_t v24 = "Wrong format for Custom struct.";
    goto LABEL_11;
  }
  if (swift_getEnumCaseMultiPayload() != 13)
  {
    sub_1C3F8B108(v29, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    goto LABEL_10;
  }
  uint64_t v31 = v38;
  sub_1C3F8AC40(v29, v38, type metadata accessor for Proto_CustomCRValue);
  uint64_t v32 = v37;
  sub_1C3F8B348(v31, (uint64_t)v37, type metadata accessor for Proto_CustomCRValue);
  uint64_t v33 = type metadata accessor for CRStructDecoder();
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = v20;
  uint64_t v35 = (unint64_t **)(v34 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value);
  sub_1C3F8B348((uint64_t)v32, v34 + OBJC_IVAR____TtC9Coherence15CRStructDecoder_value, type metadata accessor for Proto_CustomCRValue);
  if (*(void *)(*v32 + 16))
  {
    swift_retain();
    sub_1C3F8B108((uint64_t)v32, type metadata accessor for Proto_CustomCRValue);
  }
  else
  {
    uint64_t v36 = sub_1C3F8B454(0, *(void *)(v32[1] + 16));
    swift_retain();
    sub_1C3F8B108((uint64_t)v32, type metadata accessor for Proto_CustomCRValue);
    *uint64_t v35 = v36;
    swift_bridgeObjectRelease();
  }
  uint64_t v44 = v33;
  uint64_t v45 = sub_1C3F8B6B0((unint64_t *)&qword_1EBBBF1B8, (void (*)(uint64_t))type metadata accessor for CRStructDecoder);
  uint64_t v43 = v34;
  sub_1C4497678();
  swift_release();
  return sub_1C3F8B108(v31, type metadata accessor for Proto_CustomCRValue);
}

uint64_t sub_1C3F8AB08(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8AB70(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8ABD8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8AC40(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8ACA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8AD10(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8AD78(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8ADE0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8AE48(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8AEB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8AF18(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8AF80(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8AFE8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F8B048(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F8B0A8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F8B108(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F8B168(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F8B1C8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F8B228(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F8B288(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F8B2E8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F8B348(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void *sub_1C3F8B3B0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_1C4496898();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

unint64_t *sub_1C3F8B454(unint64_t *result, unint64_t a2)
{
  unint64_t v3 = (unint64_t)result;
  int64_t v4 = a2 - (void)result;
  if (a2 < (unint64_t)result)
  {
    if ((uint64_t)((uint64_t)result - a2) < 0)
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    int64_t v4 = a2 - (void)result;
LABEL_5:
    if (!v4) {
      return (unint64_t *)MEMORY[0x1E4FBC860];
    }
    if (v4 <= 0)
    {
      uint64_t v5 = (unint64_t *)MEMORY[0x1E4FBC860];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC00F8);
      uint64_t v5 = (unint64_t *)swift_allocObject();
      int64_t v6 = _swift_stdlib_malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      v5[2] = v4;
      v5[3] = 2 * (v7 >> 3);
    }
    uint64_t result = sub_1C3F8B534(v8, v5 + 4, v4, v3, a2);
    if (result == (unint64_t *)v4) {
      return v5;
    }
    __break(1u);
    goto LABEL_15;
  }
  if ((uint64_t)(a2 - (void)result) >= 0) {
    goto LABEL_5;
  }
LABEL_16:
  __break(1u);
  return result;
}

unint64_t *sub_1C3F8B534(unint64_t *result, unint64_t *a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    unint64_t v5 = a4;
LABEL_7:
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = v5;
    return (unint64_t *)a3;
  }
  if ((a3 & 0x8000000000000000) != 0) {
    goto LABEL_31;
  }
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4) {
    goto LABEL_32;
  }
  if (a5 > a4)
  {
    unint64_t v5 = a4 + 1;
    *a2 = a4;
    unint64_t v6 = a3 - 1;
    if (a3 == 1) {
      goto LABEL_7;
    }
    unint64_t v7 = a3 - 2;
    if (a3 - 2 >= ~a4 + a5) {
      unint64_t v7 = ~a4 + a5;
    }
    if (v7 < v6) {
      unint64_t v6 = v7;
    }
    unint64_t v8 = v6 + 1;
    if (v8 > 4)
    {
      uint64_t v11 = v8 & 3;
      if ((v8 & 3) == 0) {
        uint64_t v11 = 4;
      }
      unint64_t v12 = v8 - v11;
      uint64_t v9 = v8 - v11 + 1;
      unint64_t v13 = v5 + v12;
      uint64_t v10 = &a2[v12];
      int64x2_t v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_1C44A4B50);
      unint64_t v15 = (int64x2_t *)(a2 + 3);
      int64x2_t v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *unint64_t v15 = vaddq_s64(v14, v16);
        int64x2_t v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      unint64_t v5 = v13;
    }
    else
    {
      uint64_t v9 = 1;
      uint64_t v10 = a2;
    }
    uint64_t v17 = v10 + 1;
    unint64_t v18 = v5;
    while (a3 != v9)
    {
      if (a5 == v18)
      {
        unint64_t v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
      if (v18 >= a5) {
        goto LABEL_30;
      }
      ++v9;
      unint64_t v5 = v18 + 1;
      *v17++ = v18++;
      if (a3 == v9) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CRStructDecoder()
{
  uint64_t result = qword_1EBBBCB10;
  if (!qword_1EBBBCB10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C3F8B6B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C3F8B6F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t (*sub_1C3F8B740(uint64_t a1, uint64_t (*a2)(void)))(void)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F8BC84(v7, (uint64_t)v6);
  uint64_t v8 = type metadata accessor for Proto_Value(0);
  LODWORD(v7) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8);
  sub_1C3F962E0((uint64_t)v6, &qword_1EBBC0540);
  if (v7 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v9 = 0xD000000000000017;
    *(void *)(v9 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v9 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(void *)(swift_initStackObject() + 16) = a1;
    a2 = (uint64_t (*)(void))a2();
  }
  swift_release();
  return a2;
}

void UUID.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  uint64_t v27 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07E8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_1C4496678();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  int64x2_t v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F8BC84(v15, (uint64_t)v10);
  uint64_t v16 = type metadata accessor for Proto_Value(0);
  LODWORD(v15) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v10, 1, v16);
  sub_1C3F962E0((uint64_t)v10, &qword_1EBBC0540);
  if (v15 == 1)
  {
    sub_1C3FE3FF0();
    unint64_t v3 = (void *)swift_allocError();
    *(void *)uint64_t v17 = 0xD000000000000017;
    *(void *)(v17 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v17 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(void *)(swift_initStackObject() + 16) = a1;
    sub_1C3F91D38((uint64_t)v14);
    if (!v2)
    {
      swift_release();
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v12 + 32))(v27, v14, v11);
      return;
    }
  }
  uint64_t v18 = swift_retain();
  CRKeyPath.init(from:)(v18, &v25);
  uint64_t v19 = v25;
  unint64_t v20 = v26;
  uint64_t v23 = v25;
  unint64_t v24 = v26;
  CRKeyPath.uuid.getter((uint64_t)v7);
  sub_1C3F7E2CC(v19, v20);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v7, 1, v11) == 1)
  {
    sub_1C3F962E0((uint64_t)v7, &qword_1EBBC07E8);
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v21 = 0xD000000000000016;
    *(void *)(v21 + 8) = 0x80000001C44B1200;
    *(unsigned char *)(v21 + 16) = 0;
    swift_willThrow();
    swift_release();
  }
  else
  {
    swift_release();

    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v12 + 32))(v27, v7, v11);
  }
}

uint64_t type metadata accessor for CRDecoder.CRValueContainer()
{
  return self;
}

uint64_t sub_1C3F8BC84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3F8BCEC()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v2 = MEMORY[0x1F4188790](v1 - 8);
  uint64_t v27 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v26 - v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v29 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = type metadata accessor for Proto_Value(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = *(void *)(v0 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v18, (uint64_t)v10, &qword_1EBBC0540);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t result = v28(v10, 1, v11);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  sub_1C3F9775C((uint64_t)v10, (uint64_t)v17, type metadata accessor for Proto_Value);
  uint64_t v20 = *(void *)&v17[*(int *)(v11 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v20, (uint64_t)v5, &qword_1EBBBF8A0);
  sub_1C3F9229C((uint64_t)v17, type metadata accessor for Proto_Value);
  uint64_t v21 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48);
  if (v22(v5, 1, v21) == 1)
  {
    sub_1C3F962E0((uint64_t)v5, &qword_1EBBBF8A0);
    goto LABEL_6;
  }
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_1C3F9229C((uint64_t)v5, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
LABEL_6:
    uint64_t v23 = v29;
    sub_1C3F970C4(v18, v29, &qword_1EBBC0540);
    uint64_t result = v28((char *)v23, 1, v11);
    if (result != 1)
    {
      sub_1C3F9775C(v23, (uint64_t)v15, type metadata accessor for Proto_Value);
      uint64_t v24 = *(void *)&v15[*(int *)(v11 + 20)]
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v5 = v27;
      sub_1C3F970C4(v24, (uint64_t)v27, &qword_1EBBBF8A0);
      sub_1C3F9229C((uint64_t)v15, type metadata accessor for Proto_Value);
      if (v22(v5, 1, v21) == 1)
      {
        sub_1C3F962E0((uint64_t)v5, &qword_1EBBBF8A0);
LABEL_11:
        sub_1C3FE3FF0();
        swift_allocError();
        *(void *)uint64_t v25 = 0xD000000000000015;
        *(void *)(v25 + 8) = 0x80000001C44B1720;
        *(unsigned char *)(v25 + 16) = 0;
        return swift_willThrow();
      }
      if (swift_getEnumCaseMultiPayload())
      {
        sub_1C3F9229C((uint64_t)v5, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
        goto LABEL_11;
      }
      return *(void *)v5;
    }
LABEL_15:
    __break(1u);
    return result;
  }
  return *(void *)v5;
}

uint64_t (*sub_1C3F8C180@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(void)@<X8>))(void)
{
  uint64_t result = sub_1C3F8B740(a1, sub_1C3F8BCEC);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void CROrderedSet.init()(void *a1@<X8>)
{
  uint64_t v2 = (char *)a1 + *(int *)(type metadata accessor for CROrderedSet() + 48);
  uint64_t v3 = type metadata accessor for CROrderedSet.DeduplicatedInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  CRSet.init()(&v4);
  a1[1] = v4;
  type metadata accessor for CROrderedSetElement();
  CRSequence.init()(&v4);
  *a1 = v4;
}

uint64_t sub_1C3F8C2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_4Tm_0);
}

uint64_t type metadata accessor for CROrderedSet()
{
  return __swift_instantiateGenericMetadata();
}

void *CRSet.init()@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CRSetRef();
  uint64_t v2 = swift_allocObject();
  uint64_t result = sub_1C3F71564();
  *a1 = v2;
  return result;
}

uint64_t type metadata accessor for CRSetRef()
{
  return swift_getGenericMetadata();
}

void CRSequence.init()(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1C3F8C364@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1C3F8C390(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1C3F8C390(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F8BC84(v7, (uint64_t)v6);
  uint64_t v8 = type metadata accessor for Proto_Value(0);
  LODWORD(v7) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8);
  sub_1C3F962E0((uint64_t)v6, &qword_1EBBC0540);
  if (v7 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v9 = 0xD000000000000017;
    *(void *)(v9 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v9 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(void *)(swift_initStackObject() + 16) = a1;
    uint64_t v10 = sub_1C3F8C540();
    if (!v1)
    {
      uint64_t v2 = v10;
      swift_bridgeObjectRetain();
      swift_release();
      return v2;
    }
  }
  swift_release();
  return v2;
}

uint64_t sub_1C3F8C540()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (unint64_t *)&v20[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Proto_Value(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = *(void *)(v0 + 16);
  uint64_t v12 = v11 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v12, (uint64_t)v6, &qword_1EBBC0540);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (result != 1)
  {
    sub_1C3F9775C((uint64_t)v6, (uint64_t)v10, type metadata accessor for Proto_Value);
    uint64_t v14 = *(void *)&v10[*(int *)(v7 + 20)]
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1C3F970C4(v14, (uint64_t)v3, &qword_1EBBBF8A0);
    sub_1C3F9229C((uint64_t)v10, type metadata accessor for Proto_Value);
    uint64_t v15 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v3, 1, v15) == 1)
    {
      sub_1C3F962E0((uint64_t)v3, &qword_1EBBBF8A0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v16 = *(void *)(v11 + 32);
        unint64_t v17 = *(void *)(v16 + 16);
        if (v17 && *v3 < v17) {
          return *(void *)(v16 + 16 * *v3 + 32);
        }
        sub_1C3FE3FF0();
        swift_allocError();
        *(void *)uint64_t v18 = 0x2064696C61766E49;
        unint64_t v19 = 0xEF2E676E69727453;
        goto LABEL_10;
      }
      sub_1C3F9229C((uint64_t)v3, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v18 = 0xD000000000000018;
    unint64_t v19 = 0x80000001C44B16E0;
LABEL_10:
    *(void *)(v18 + 8) = v19;
    *(unsigned char *)(v18 + 16) = 0;
    return swift_willThrow();
  }
  __break(1u);
  return result;
}

uint64_t CRSequence.isEmpty.getter()
{
  if (*v0)
  {
    uint64_t v1 = (void *)sub_1C3F876BC();
    swift_beginAccess();
    swift_bridgeObjectRetain();

    sub_1C4497528();
    swift_getWitnessTable();
    char v2 = sub_1C4497878();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v2 = 1;
  }
  return v2 & 1;
}

uint64_t sub_1C3F8C978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  v22[5] = a5;
  v22[0] = a4;
  uint64_t v11 = type metadata accessor for Proto_Sequence(0);
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  MEMORY[0x1F4188790](v15 - 8);
  unint64_t v17 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a1 + *(int *)(v12 + 28))
      + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  sub_1C3F970C4(v18, (uint64_t)v17, &qword_1EBBC0578);
  uint64_t v19 = type metadata accessor for Proto_Version(0);
  LODWORD(v18) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v17, 1, v19);
  sub_1C3F962E0((uint64_t)v17, &qword_1EBBC0578);
  if (v18 == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1C3F9241C(a1, type metadata accessor for Proto_Sequence);
    *a6 = 0;
  }
  else
  {
    type metadata accessor for CRSequenceRef();
    sub_1C3F9647C(a1, (uint64_t)v14, type metadata accessor for Proto_Sequence);
    uint64_t v21 = swift_allocObject();
    sub_1C3F8CBD0((uint64_t)v14, a2, a3);
    uint64_t result = sub_1C3F9241C(a1, type metadata accessor for Proto_Sequence);
    if (!v6) {
      *a6 = v21;
    }
  }
  return result;
}

uint64_t type metadata accessor for CRSequenceRef()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *sub_1C3F8CBD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *v5;
  uint64_t v10 = (char *)v5 + qword_1EBBC59C8;
  sub_1C4496668();
  id v11 = sub_1C3F8CE88(a1, a3, a2, *(void *)(v9 + 80), *(void *)(v9 + 88));
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0190);
  type metadata accessor for CRSequenceStorage();
  id v12 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v13 = sub_1C3F8CDD4((uint64_t)v11);
  if (v4)
  {
    swift_release();

    sub_1C3F9241C(a1, type metadata accessor for Proto_Sequence);
    uint64_t v14 = sub_1C4496678();
    (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v10, v14);
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v15 = (uint64_t)v13;
    swift_release();

    sub_1C3F9241C(a1, type metadata accessor for Proto_Sequence);
    *(uint64_t *)((char *)v5 + qword_1EBBC59D0) = v15;
  }
  return v5;
}

id sub_1C3F8CDD4(uint64_t a1)
{
  v6[1] = *(id *)MEMORY[0x1E4F143B8];
  v6[0] = 0;
  id v2 = objc_msgSend(v1, sel_initWithDecoder_error_, a1, v6);
  if (v2)
  {
    id v3 = v6[0];
  }
  else
  {
    id v4 = v6[0];
    sub_1C44963A8();

    swift_willThrow();
  }
  return v2;
}

id sub_1C3F8CE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1F4188790](v10 - 8);
  id v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C3F9647C(a1, (uint64_t)v12, type metadata accessor for Proto_Sequence);
  id v13 = (void *)swift_allocObject();
  v13[2] = a4;
  void v13[3] = a5;
  if (a3)
  {
    v13[4] = a3;
    objc_allocWithZone((Class)type metadata accessor for CRSequenceDecoder(0));
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v14 = sub_1C3FACA9C;
  }
  else
  {
    v13[4] = a2;
    objc_allocWithZone((Class)type metadata accessor for CRSequenceDecoder(0));
    swift_retain_n();
    uint64_t v14 = sub_1C437A1B0;
  }
  id v15 = sub_1C3F8D024((uint64_t)v12, a2, (uint64_t)v14, (uint64_t)v13);
  swift_release();
  swift_release();
  return v15;
}

id sub_1C3F8D024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = &v4[OBJC_IVAR____TtC9Coherence17CRSequenceDecoder_getStorage];
  *(void *)id v12 = a3;
  *((void *)v12 + 1) = a4;
  sub_1C3F96414(a1, (uint64_t)v11, type metadata accessor for Proto_Sequence);
  id v13 = &v4[OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence];
  swift_retain();
  uint64_t v14 = v4;
  sub_1C4496888();
  uint64_t v15 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  if (qword_1EBBBC0C0 != -1) {
    swift_once();
  }
  *(void *)&v13[v15] = qword_1EBBBC0B8;
  sub_1C3F96414((uint64_t)v11, (uint64_t)&v14[OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded], type metadata accessor for Proto_Sequence);
  *(void *)&v14[OBJC_IVAR____TtC9Coherence15CRStringDecoder_decoder] = a2;
  swift_retain();
  swift_retain();

  uint64_t v16 = (objc_class *)type metadata accessor for CRStringDecoder(0);
  v19.receiver = v14;
  v19.super_class = v16;
  id v17 = objc_msgSendSuper2(&v19, sel_init);
  sub_1C3F9633C((uint64_t)v11, type metadata accessor for Proto_Sequence);
  sub_1C3F9633C(a1, type metadata accessor for Proto_Sequence);
  return v17;
}

uint64_t type metadata accessor for CRSequenceDecoder(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBC098);
}

uint64_t type metadata accessor for CRStringDecoder(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBC040);
}

uint64_t sub_1C3F8D228(uint64_t a1)
{
  return Date.init(from:)(a1);
}

uint64_t Date.init(from:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v2 - 8);
  id v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F8BC84(v5, (uint64_t)v4);
  uint64_t v6 = type metadata accessor for Proto_Value(0);
  LODWORD(v5) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6);
  sub_1C3F962E0((uint64_t)v4, &qword_1EBBC0540);
  if (v5 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v7 = 0xD000000000000017;
    *(void *)(v7 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v7 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(void *)(swift_initStackObject() + 16) = a1;
    sub_1C3F8D3D0();
  }
  return swift_release();
}

uint64_t sub_1C3F8D3D0()
{
  uint64_t v2 = sub_1C44968B8();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v3 = sub_1C4496858();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(*(void *)(v0 + 16) + 49) == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v7 = 0xD00000000000001FLL;
    *(void *)(v7 + 8) = 0x80000001C44B11E0;
    *(unsigned char *)(v7 + 16) = 0;
    return swift_willThrow();
  }
  else
  {
    uint64_t result = sub_1C3F8D610();
    if (!v1)
    {
      uint64_t v10 = result;
      unint64_t v11 = v9;
      uint64_t v13 = 0;
      memset(v12, 0, sizeof(v12));
      sub_1C3F7E324(result, v9);
      sub_1C44968A8();
      sub_1C3FAD5C8((unint64_t *)&qword_1EA39AD60, MEMORY[0x1E4F70C60]);
      sub_1C4496A98();
      sub_1C4496808();
      sub_1C3F7E2CC(v10, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
  }
  return result;
}

uint64_t sub_1C3F8D610()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = &v16[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Proto_Value(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = *(void *)(v0 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v11, (uint64_t)v6, &qword_1EBBC0540);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_1C3F9775C((uint64_t)v6, (uint64_t)v10, type metadata accessor for Proto_Value);
    uint64_t v13 = *(void *)&v10[*(int *)(v7 + 20)]
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1C3F970C4(v13, (uint64_t)v3, &qword_1EBBBF8A0);
    sub_1C3F9229C((uint64_t)v10, type metadata accessor for Proto_Value);
    uint64_t v14 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v3, 1, v14) == 1)
    {
      sub_1C3F962E0((uint64_t)v3, &qword_1EBBBF8A0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 3) {
        return *(void *)v3;
      }
      sub_1C3F9229C((uint64_t)v3, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v15 = 0xD000000000000016;
    *(void *)(v15 + 8) = 0x80000001C44B1760;
    *(unsigned char *)(v15 + 16) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1C3F8D910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09D0);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v155 = (uint64_t)&v152 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v169 = (char *)&v152 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v173 = (uint64_t)&v152 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v185 = (uint64_t *)((char *)&v152 - v13);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v152 - v14;
  uint64_t v209 = sub_1C44967E8();
  uint64_t v16 = *(void *)(v209 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v209);
  uint64_t v163 = (char *)&v152 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v172 = (char *)&v152 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v171 = (char *)&v152 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  unint64_t v182 = (char *)&v152 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v191 = (char *)&v152 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v152 - v27;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBEF70);
  MEMORY[0x1F4188790](v29 - 8);
  uint64_t v176 = (char *)&v152 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF870);
  MEMORY[0x1F4188790](v31 - 8);
  uint64_t v206 = (uint64_t)&v152 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v208 = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v33 = *(void *)(v208 - 8);
  MEMORY[0x1F4188790](v208);
  uint64_t v198 = (char *)&v152 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v205 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBF0A0);
  uint64_t v157 = *(void *)(v205 - 8);
  MEMORY[0x1F4188790](v205);
  v210 = (char **)((char *)&v152 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v170 = type metadata accessor for Replica();
  uint64_t v178 = *(void *)(v170 - 8);
  uint64_t v36 = MEMORY[0x1F4188790](v170);
  uint64_t v162 = (uint64_t)&v152 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v190 = (uint64_t)&v152 - v39;
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  unint64_t v188 = (char *)&v152 - v41;
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  uint64_t v187 = (uint64_t)&v152 - v43;
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  uint64_t v186 = (uint64_t)&v152 - v45;
  MEMORY[0x1F4188790](v44);
  uint64_t v47 = (uint64_t *)((char *)&v152 - v46);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v49 = MEMORY[0x1F4188790](v48 - 8);
  uint64_t v175 = (uint64_t)&v152 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v49);
  uint64_t v174 = (uint64_t)&v152 - v51;
  uint64_t v184 = v3;
  uint64_t v52 = v3[1];
  uint64_t v202 = v3 + 1;
  uint64_t v53 = v52[8];
  uint64_t v158 = v52 + 8;
  uint64_t v54 = 1 << *((unsigned char *)v52 + 32);
  uint64_t v55 = -1;
  if (v54 < 64) {
    uint64_t v55 = ~(-1 << v54);
  }
  unint64_t v56 = v55 & v53;
  uint64_t v57 = (uint64_t *)((unint64_t)(v54 + 63) >> 6);
  uint64_t v204 = v16 + 16;
  uint64_t v193 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  uint64_t v196 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v201 = v16 + 48;
  unint64_t v203 = (void (**)(uint64_t, uint64_t))(v16 + 8);
  v183 = (void (**)(uint64_t *, unint64_t, uint64_t))(v16 + 32);
  uint64_t v58 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56);
  uint64_t v59 = a3;
  uint64_t v192 = v58;
  uint64_t v152 = (char *)v57 - 1;
  uint64_t v60 = swift_bridgeObjectRetain();
  uint64_t v61 = 0;
  uint64_t v164 = v57;
  uint64_t v153 = (char *)v57 - 5;
  uint64_t v166 = v60;
  uint64_t v154 = v60 + 104;
  uint64_t v156 = v59;
  uint64_t v168 = v15;
  uint64_t v167 = v16;
  uint64_t v177 = v28;
  v197 = v47;
  if (!v56) {
    goto LABEL_9;
  }
  while (2)
  {
    while (1)
    {
      uint64_t v62 = v59;
      unint64_t v63 = __clz(__rbit64(v56));
      uint64_t v64 = (v56 - 1) & v56;
      uint64_t v65 = (uint64_t)v61;
      unint64_t v66 = v63 | ((void)v61 << 6);
LABEL_8:
      uint64_t v67 = v166;
      uint64_t v68 = v175;
      sub_1C3F8EF8C(*(void *)(v166 + 48) + *(void *)(v178 + 72) * v66, v175, (uint64_t (*)(void))type metadata accessor for Replica);
      unint64_t v69 = *(void *)(v67 + 56) + *(void *)(v16 + 72) * v66;
      uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v16 + 16))(v68 + *(int *)(v70 + 48), v69, v209);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v68, 0, 1, v70);
      uint64_t v61 = (char *)v65;
      unint64_t v56 = v64;
LABEL_15:
      uint64_t v75 = v174;
      sub_1C3F961BC(v68, v174, &qword_1EBBC07A0);
      uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 48))(v75, 1, v76) == 1) {
        return swift_release();
      }
      uint64_t v77 = v75 + *(int *)(v76 + 48);
      uint64_t v57 = v47;
      sub_1C3F8F7B0(v75, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v59 = v62;
      if (*(void *)(v62 + 16))
      {
        unint64_t v78 = sub_1C3F8F160((uint64_t)v47);
        uint64_t v57 = v47;
        if (v79) {
          break;
        }
      }
      sub_1C3F902AC((uint64_t)v57, (uint64_t (*)(void))type metadata accessor for Replica);
LABEL_6:
      (*v203)(v77, v209);
      if (!v56) {
        goto LABEL_9;
      }
    }
    uint64_t v165 = v77;
    sub_1C3FAA63C(*(void *)(v62 + 56) + 16 * v78, (uint64_t)&v211);
    sub_1C3FAAC94((uint64_t)&v211, (uint64_t)&v212);
    uint64_t v80 = *(void *)(v212 + 16);
    uint64_t v57 = &qword_1EBBBF870;
    uint64_t v81 = v177;
    if (!v80)
    {
LABEL_56:
      sub_1C3F903E8((uint64_t)&v212);
      uint64_t v47 = v197;
      sub_1C3F902AC((uint64_t)v197, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v77 = v165;
      goto LABEL_6;
    }
    unint64_t v160 = v56;
    int v161 = v61;
    uint64_t v82 = v157;
    uint64_t v83 = v212 + ((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80));
    uint64_t v159 = v212;
    swift_bridgeObjectRetain();
    uint64_t v207 = *(void *)(v82 + 72);
    uint64_t v84 = (uint64_t)v176;
    while (1)
    {
      uint64_t v86 = v210;
      sub_1C3F970C4(v83, (uint64_t)v210, qword_1EBBBF0A0);
      sub_1C3F970C4((uint64_t)v86 + *(int *)(v205 + 36), v84, qword_1EBBBEF70);
      uint64_t v87 = type metadata accessor for RetainedMapRun(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 48))(v84, 1, v87) != 1) {
        break;
      }
      sub_1C3F962E0(v84, qword_1EBBBEF70);
      uint64_t v85 = v206;
      (*v192)(v206, 1, 1, v208);
LABEL_21:
      sub_1C3F962E0((uint64_t)v210, qword_1EBBBF0A0);
      sub_1C3F962E0(v85, &qword_1EBBBF870);
LABEL_22:
      v83 += v207;
      if (!--v80)
      {
        swift_bridgeObjectRelease();
        uint64_t v59 = v156;
        uint64_t v61 = v161;
        unint64_t v56 = v160;
        goto LABEL_56;
      }
    }
    uint64_t v85 = v206;
    sub_1C3F970C4(v84, v206, &qword_1EBBBF870);
    sub_1C3F902AC(v84, type metadata accessor for RetainedMapRun);
    if ((*v193)(v85, 1, v208) == 1) {
      goto LABEL_21;
    }
    sub_1C3F8F7B0(v85, (uint64_t)v198, type metadata accessor for FinalizedTimestamp);
    sub_1C4496698();
    uint64_t v57 = *v202;
    if (!(*v202)[2]) {
      goto LABEL_76;
    }
    unint64_t v88 = sub_1C3F8F160((uint64_t)v197);
    if ((v89 & 1) == 0) {
      goto LABEL_76;
    }
    uint64_t v90 = v57[7];
    uint64_t v199 = *(void *)(v16 + 72);
    uint64_t v57 = (uint64_t *)v209;
    uint64_t v200 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    v200(v15, v90 + v199 * v88, v209);
    uint64_t v195 = *(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v16 + 56);
    v195(v15, 0, 1, v57);
    v194 = *(unsigned int (**)(char *, uint64_t, uint64_t *))(v16 + 48);
    if (v194(v15, 1, v57) == 1) {
      goto LABEL_77;
    }
    sub_1C44966D8();
    uint64_t v91 = v81;
    uint64_t v92 = v15;
    uint64_t v93 = *v203;
    (*v203)((uint64_t)v92, v209);
    if (sub_1C44966F8() < 1) {
      goto LABEL_54;
    }
    uint64_t v189 = v93;
    uint64_t v94 = v186;
    sub_1C3F8EF8C((uint64_t)v197, v186, (uint64_t (*)(void))type metadata accessor for Replica);
    v200(v191, (unint64_t)v91, v209);
    uint64_t v95 = v94;
    uint64_t v96 = v187;
    sub_1C3F8EF8C(v95, v187, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v97 = v202;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v99 = v96;
    uint64_t v15 = v188;
    sub_1C3F8EF8C(v99, (uint64_t)v188, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v211 = *v97;
    uint64_t v57 = v211;
    *uint64_t v97 = (uint64_t *)0x8000000000000000;
    unint64_t v101 = sub_1C3F8F160((uint64_t)v15);
    uint64_t v102 = v57[2];
    BOOL v103 = (v100 & 1) == 0;
    uint64_t v104 = v102 + v103;
    if (__OFADD__(v102, v103))
    {
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    char v105 = v100;
    if (v57[3] >= v104)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1C3FA50F8();
      }
    }
    else
    {
      sub_1C3F9188C(v104, isUniquelyReferenced_nonNull_native);
      unint64_t v106 = sub_1C3F8F160((uint64_t)v188);
      if ((v105 & 1) != (v107 & 1)) {
        goto LABEL_82;
      }
      unint64_t v101 = v106;
    }
    uint64_t v57 = v185;
    if ((v105 & 1) == 0) {
      goto LABEL_80;
    }
    uint64_t v108 = v211[7];
    unint64_t v181 = v101;
    unint64_t v179 = v101 * v199;
    unint64_t v109 = v108 + v101 * v199;
    uint64_t v110 = v209;
    uint64_t v180 = *v183;
    v180(v185, v109, v209);
    v195((char *)v57, 0, 1, (uint64_t *)v110);
    uint64_t v111 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v194;
    if (v194((char *)v57, 1, (uint64_t *)v110) == 1) {
      goto LABEL_81;
    }
    uint64_t v112 = v209;
    uint64_t v113 = (void (*)(char *, char *, uint64_t))v200;
    v200(v171, (unint64_t)v57, v209);
    v113(v172, v191, v112);
    sub_1C3FA0E84(&qword_1EBBBC330, MEMORY[0x1E4F27D00]);
    uint64_t v114 = v182;
    sub_1C4497BE8();
    sub_1C4497BD8();
    uint64_t v115 = v114;
    int v116 = (void (*)(char *, uint64_t))v189;
    v189((uint64_t)v115, v112);
    v116(v191, v112);
    uint64_t v117 = v173;
    sub_1C3F970C4((uint64_t)v57, v173, (uint64_t *)&unk_1EBBC09D0);
    if (v111(v117, 1, v112) == 1)
    {
      sub_1C3F962E0(v117, (uint64_t *)&unk_1EBBC09D0);
      uint64_t v118 = (uint64_t)v211;
      unint64_t v119 = v181;
      uint64_t v120 = v170;
      swift_arrayDestroy();
      sub_1C3FA5A34(v119, v118);
      uint64_t v121 = v177;
    }
    else
    {
      int v122 = v163;
      uint64_t v123 = v117;
      uint64_t v124 = v209;
      uint64_t v125 = (void (*)(unint64_t, char *, uint64_t))v180;
      v180((uint64_t *)v163, v123, v209);
      v125(v211[7] + v179, v122, v124);
      uint64_t v121 = v177;
      uint64_t v120 = v170;
    }
    uint64_t v126 = v190;
    sub_1C3F962E0((uint64_t)v185, (uint64_t *)&unk_1EBBC09D0);
    uint64_t v57 = (uint64_t *)type metadata accessor for Replica;
    sub_1C3F902AC((uint64_t)v188, (uint64_t (*)(void))type metadata accessor for Replica);
    *uint64_t v202 = v211;
    sub_1C3F902AC(v187, (uint64_t (*)(void))type metadata accessor for Replica);
    sub_1C3F902AC(v186, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v127 = sub_1C4496678();
    uint64_t v15 = v198;
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v127 - 8) + 16))(v126, v198, v127);
    *(void *)(v126 + *(int *)(v120 + 20)) = 0;
    if (__OFSUB__(*(void *)&v15[*(int *)(v208 + 20)], *v210)) {
      goto LABEL_73;
    }
    sub_1C4496708();
    uint64_t v128 = v184;
    int v129 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v211 = *v128;
    uint64_t v57 = v211;
    void *v128 = (uint64_t *)0x8000000000000000;
    unint64_t v131 = sub_1C3F8F160(v126);
    uint64_t v132 = v57[2];
    BOOL v133 = (v130 & 1) == 0;
    uint64_t v134 = v132 + v133;
    if (__OFADD__(v132, v133)) {
      goto LABEL_74;
    }
    char v135 = v130;
    if (v57[3] >= v134)
    {
      if ((v129 & 1) == 0)
      {
        sub_1C3FA50F8();
        uint64_t v57 = v211;
      }
    }
    else
    {
      sub_1C3F9188C(v134, v129);
      uint64_t v57 = v211;
      unint64_t v136 = sub_1C3F8F160(v190);
      if ((v135 & 1) != (v137 & 1)) {
        goto LABEL_83;
      }
      unint64_t v131 = v136;
    }
    uint64_t v138 = v184;
    *uint64_t v184 = v57;
    swift_bridgeObjectRelease();
    uint64_t v139 = *v138;
    swift_bridgeObjectRetain();
    if ((v135 & 1) == 0)
    {
      uint64_t v140 = (uint64_t)v182;
      sub_1C44967D8();
      uint64_t v141 = v162;
      sub_1C3F8EF8C(v190, v162, (uint64_t (*)(void))type metadata accessor for Replica);
      sub_1C3F9179C(v131, v141, v140, v139);
    }
    swift_bridgeObjectRelease();
    uint64_t v91 = v121;
    sub_1C44967B8();
    uint64_t v57 = *v202;
    if (!(*v202)[2]) {
      goto LABEL_78;
    }
    unint64_t v142 = sub_1C3F8F160((uint64_t)v197);
    if ((v143 & 1) == 0) {
      goto LABEL_78;
    }
    uint64_t v144 = v169;
    uint64_t v145 = v209;
    v200(v169, v57[7] + v142 * v199, v209);
    v195(v144, 0, 1, (uint64_t *)v145);
    unsigned int v146 = v194(v144, 1, (uint64_t *)v145);
    uint64_t v92 = v168;
    uint64_t v16 = v167;
    uint64_t v84 = (uint64_t)v176;
    if (v146 == 1) {
      goto LABEL_79;
    }
    uint64_t v147 = sub_1C44966F8();
    uint64_t v93 = v189;
    v189((uint64_t)v144, v209);
    if (v147)
    {
      sub_1C3F902AC(v190, (uint64_t (*)(void))type metadata accessor for Replica);
LABEL_54:
      v93((uint64_t)v91, v209);
      sub_1C3F902AC((uint64_t)v198, type metadata accessor for FinalizedTimestamp);
      sub_1C3F962E0((uint64_t)v210, qword_1EBBBF0A0);
      uint64_t v57 = &qword_1EBBBF870;
      uint64_t v15 = v92;
      uint64_t v81 = v91;
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
    uint64_t v148 = v155;
    uint64_t v149 = (uint64_t)v197;
    sub_1C3FA5868((uint64_t)v197, v155);
    sub_1C3F962E0(v148, (uint64_t *)&unk_1EBBC09D0);
    uint64_t v57 = (uint64_t *)type metadata accessor for Replica;
    sub_1C3F902AC(v190, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v150 = v209;
    v93((uint64_t)v91, v209);
    sub_1C3F902AC((uint64_t)v198, type metadata accessor for FinalizedTimestamp);
    sub_1C3F962E0((uint64_t)v210, qword_1EBBBF0A0);
    sub_1C3F903E8((uint64_t)&v212);
    uint64_t v47 = (uint64_t *)v149;
    sub_1C3F902AC(v149, (uint64_t (*)(void))type metadata accessor for Replica);
    v93(v165, v150);
    uint64_t v59 = v156;
    uint64_t v61 = v161;
    unint64_t v56 = v160;
    uint64_t v15 = v92;
    if (v160) {
      continue;
    }
    break;
  }
LABEL_9:
  uint64_t v65 = (uint64_t)(v61 + 1);
  if (!__OFADD__(v61, 1))
  {
    if (v65 >= (uint64_t)v164)
    {
      char v72 = v61;
      goto LABEL_14;
    }
    unint64_t v71 = v158[v65];
    if (v71) {
      goto LABEL_12;
    }
    char v72 = v61 + 1;
    if ((uint64_t)(v61 + 2) >= (uint64_t)v164) {
      goto LABEL_14;
    }
    unint64_t v71 = v158[(void)(v61 + 2)];
    if (v71)
    {
      uint64_t v65 = (uint64_t)(v61 + 2);
      goto LABEL_12;
    }
    char v72 = v61 + 2;
    if ((uint64_t)(v61 + 3) >= (uint64_t)v164) {
      goto LABEL_14;
    }
    unint64_t v71 = v158[(void)(v61 + 3)];
    if (v71)
    {
      uint64_t v65 = (uint64_t)(v61 + 3);
      goto LABEL_12;
    }
    uint64_t v65 = (uint64_t)(v61 + 4);
    char v72 = v61 + 3;
    if ((uint64_t)(v61 + 4) >= (uint64_t)v164)
    {
LABEL_14:
      uint64_t v62 = v59;
      uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
      uint64_t v74 = v175;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v175, 1, 1, v73);
      unint64_t v56 = 0;
      uint64_t v61 = v72;
      uint64_t v68 = v74;
      goto LABEL_15;
    }
    unint64_t v71 = v158[v65];
    if (!v71)
    {
      while (v153 != v61)
      {
        unint64_t v71 = *(void *)(v154 + 8 * (void)v61++);
        if (v71)
        {
          uint64_t v65 = (uint64_t)(v61 + 4);
          goto LABEL_12;
        }
      }
      char v72 = v152;
      goto LABEL_14;
    }
LABEL_12:
    uint64_t v62 = v59;
    uint64_t v64 = (v71 - 1) & v71;
    unint64_t v66 = __clz(__rbit64(v71)) + (v65 << 6);
    goto LABEL_8;
  }
LABEL_75:
  __break(1u);
LABEL_76:
  (*v196)(v15, 1, 1, v209);
LABEL_77:
  __break(1u);
LABEL_78:
  v195(v169, 1, 1, (uint64_t *)v209);
LABEL_79:
  __break(1u);
LABEL_80:
  v195((char *)v57, 1, 1, (uint64_t *)v209);
LABEL_81:
  __break(1u);
LABEL_82:
  sub_1C4498558();
  __break(1u);
LABEL_83:
  uint64_t result = sub_1C4498558();
  __break(1u);
  return result;
}

uint64_t sub_1C3F8EF24(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8EF8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8EFF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8F05C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void *sub_1C3F8F0C4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_1C4496898();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

unint64_t sub_1C3F8F160(uint64_t a1)
{
  sub_1C44985F8();
  sub_1C4496638();
  type metadata accessor for Replica();
  sub_1C4498608();
  uint64_t v2 = sub_1C4498628();
  return sub_1C3F8F1E4(a1, v2);
}

unint64_t sub_1C3F8F1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Replica();
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)&v23 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v25 = v2 + 64;
  uint64_t v26 = v2;
  uint64_t v15 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v16 = a2 & ~v15;
  if ((*(void *)(v2 + 64 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16))
  {
    uint64_t v23 = ~v15;
    uint64_t v24 = *(int *)(v5 + 20);
    uint64_t v17 = *(void *)(v12 + 72);
    do
    {
      sub_1C3F8F450(*(void *)(v26 + 48) + v17 * v16, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v18 = v5;
      uint64_t v19 = *(void *)&v14[*(int *)(v5 + 20)];
      uint64_t v20 = *(void *)(a1 + v24);
      sub_1C3F8F450((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Replica);
      sub_1C3F8F450(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Replica);
      if (v19 == v20)
      {
        char v21 = sub_1C4496618();
        sub_1C3F8F5D4((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Replica);
        sub_1C3F8F5D4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Replica);
        sub_1C3F8F5D4((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Replica);
        if (v21) {
          return v16;
        }
      }
      else
      {
        sub_1C3F8F5D4((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Replica);
        sub_1C3F8F5D4((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Replica);
        sub_1C3F8F5D4((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Replica);
      }
      unint64_t v16 = (v16 + 1) & v23;
      uint64_t v5 = v18;
    }
    while (((*(void *)(v25 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) != 0);
  }
  return v16;
}

uint64_t sub_1C3F8F450(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8F4B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8F520(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for Replica()
{
  uint64_t result = qword_1EBBC1278;
  if (!qword_1EBBC1278) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C3F8F5D4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F8F634(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for PartiallyOrderedReferenceMap()
{
  uint64_t result = qword_1EBBBF010;
  if (!qword_1EBBBF010) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C3F8F6E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8F748(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8F7B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F8F818(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for FinalizedTimestamp(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC07B8);
}

uint64_t sub_1C3F8F8A0(uint64_t a1)
{
  uint64_t v2 = sub_1C4496678();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C3F8F92C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1C4496678();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1C3F8F9D0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v64 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09D0);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v67 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v77 = (char *)&v63 - v9;
  uint64_t v76 = type metadata accessor for Replica();
  uint64_t v66 = *(void *)(v76 - 8);
  MEMORY[0x1F4188790](v76);
  uint64_t v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1C44967E8();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v75 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v63 - v16;
  *(void *)&long long v83 = MEMORY[0x1E4FBC868];
  *((void *)&v83 + 1) = MEMORY[0x1E4FBC868];
  char v79 = a1;
  uint64_t v18 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0230);
  sub_1C4496F18();
  uint64_t v74 = *(void *)(v18 + 16);
  if (!v74)
  {
    swift_release();
LABEL_41:
    uint64_t result = sub_1C3F902AC((uint64_t)v79, type metadata accessor for Proto_Version);
    *uint64_t v64 = v83;
    return result;
  }
  uint64_t v63 = v3;
  uint64_t v78 = v18 + 32;
  uint64_t v80 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  uint64_t v70 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  unint64_t v71 = (void (**)(uint64_t, char *, uint64_t))(v13 + 16);
  uint64_t v68 = v13;
  unint64_t v69 = (void (**)(char *, uint64_t, uint64_t))(v13 + 32);
  uint64_t v65 = v13 + 40;
  uint64_t v73 = (void (**)(char *, uint64_t))(v13 + 8);
  swift_bridgeObjectRetain();
  unint64_t v19 = 0;
  uint64_t v81 = a2;
  uint64_t v82 = v11;
  uint64_t v72 = v18;
  while (v19 < *(void *)(v18 + 16))
  {
    unint64_t v22 = *(void *)(v78 + 8 * v19);
    sub_1C44967D8();
    uint64_t v23 = v79[1];
    if (v19 >= *(void *)(v23 + 16)) {
      goto LABEL_48;
    }
    uint64_t v24 = *(void *)(type metadata accessor for Proto_RLE(0) - 8);
    uint64_t v25 = *(void *)(v23
                    + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))
                    + *(void *)(v24 + 72) * v19);
    unint64_t v26 = *(void *)(v25 + 16);
    if (v26)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = 0;
      unint64_t v28 = 0;
      while (1)
      {
        unint64_t v29 = *(void *)(v25 + 16);
        if (v28 >= v29) {
          break;
        }
        uint64_t v30 = *(void *)(v25 + 8 * v28 + 32);
        uint64_t v31 = v27 + v30;
        if (__OFADD__(v27, v30)) {
          goto LABEL_43;
        }
        unint64_t v32 = v28 + 1;
        if (v28 + 1 >= v29) {
          goto LABEL_44;
        }
        uint64_t v33 = *(void *)(v25 + 8 * v28 + 40);
        uint64_t v27 = v31 + v33;
        if (__OFADD__(v31, v33)) {
          goto LABEL_45;
        }
        if (v27 < v31) {
          goto LABEL_46;
        }
        sub_1C4496728();
        unint64_t v28 = v32 + 1;
        if (v32 + 1 >= v26)
        {
          swift_bridgeObjectRelease();
          uint64_t v11 = v82;
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      break;
    }
LABEL_17:
    uint64_t v34 = *(void *)(v81 + 24);
    unint64_t v35 = *(void *)(v34 + 16);
    if (v35) {
      BOOL v36 = v22 >= v35;
    }
    else {
      BOOL v36 = 1;
    }
    if (v36)
    {
      sub_1C3FE3FF0();
      swift_allocError();
      *(_OWORD *)uint64_t v61 = xmmword_1C44A0890;
      *(unsigned char *)(v61 + 16) = 0;
      swift_willThrow();
      swift_release();
      (*v73)(v17, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return sub_1C3F902AC((uint64_t)v79, type metadata accessor for Proto_Version);
    }
    uint64_t v37 = sub_1C4496678();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v11, v34+ ((*(unsigned __int8 *)(*(void *)(v37 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v37 - 8) + 80))+ *(void *)(*(void *)(v37 - 8) + 72) * v22, v37);
    uint64_t v38 = (uint64_t)v77;
    *(void *)&v11[*(int *)(v76 + 20)] = 0;
    (*v71)(v38, v17, v12);
    uint64_t v39 = *v80;
    (*v80)(v38, 0, 1, v12);
    if ((*v70)(v38, 1, v12) == 1)
    {
      sub_1C3F962E0(v38, (uint64_t *)&unk_1EBBC09D0);
      uint64_t v40 = v83;
      swift_bridgeObjectRetain();
      unint64_t v41 = sub_1C3F8F160((uint64_t)v11);
      char v43 = v42;
      swift_bridgeObjectRelease();
      uint64_t v18 = v72;
      if (v43)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v84 = (void *)v40;
        *(void *)&long long v83 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_1C3FA50F8();
          uint64_t v40 = (uint64_t)v84;
        }
        sub_1C3F902AC(*(void *)(v40 + 48) + *(void *)(v66 + 72) * v41, (uint64_t (*)(void))type metadata accessor for Replica);
        uint64_t v21 = (uint64_t)v67;
        (*(void (**)(char *, unint64_t, uint64_t))(v68 + 32))(v67, *(void *)(v40 + 56) + *(void *)(v68 + 72) * v41, v12);
        sub_1C3FA5A34(v41, v40);
        *(void *)&long long v83 = v40;
        swift_bridgeObjectRelease();
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)v67;
      }
      v39(v21, v20, 1, v12);
      uint64_t v11 = v82;
      sub_1C3F902AC((uint64_t)v82, (uint64_t (*)(void))type metadata accessor for Replica);
      sub_1C3F962E0(v21, (uint64_t *)&unk_1EBBC09D0);
      goto LABEL_5;
    }
    uint64_t v45 = *v69;
    (*v69)(v75, v38, v12);
    uint64_t v46 = (void *)v83;
    int v47 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v84 = v46;
    *(void *)&long long v83 = 0x8000000000000000;
    unint64_t v49 = sub_1C3F8F160((uint64_t)v11);
    uint64_t v50 = v46[2];
    BOOL v51 = (v48 & 1) == 0;
    uint64_t v52 = v50 + v51;
    if (__OFADD__(v50, v51)) {
      goto LABEL_49;
    }
    char v53 = v48;
    if (v46[3] >= v52)
    {
      uint64_t v56 = v68;
      if (v47)
      {
        uint64_t v57 = v84;
        if ((v48 & 1) == 0) {
          goto LABEL_35;
        }
      }
      else
      {
        sub_1C3FA50F8();
        uint64_t v57 = v84;
        if ((v53 & 1) == 0) {
          goto LABEL_35;
        }
      }
    }
    else
    {
      sub_1C3F9188C(v52, v47);
      unint64_t v54 = sub_1C3F8F160((uint64_t)v82);
      uint64_t v56 = v68;
      if ((v53 & 1) != (v55 & 1)) {
        goto LABEL_51;
      }
      unint64_t v49 = v54;
      uint64_t v57 = v84;
      if ((v53 & 1) == 0)
      {
LABEL_35:
        v57[(v49 >> 6) + 8] |= 1 << v49;
        uint64_t v11 = v82;
        sub_1C3F8EF8C((uint64_t)v82, v57[6] + *(void *)(v66 + 72) * v49, (uint64_t (*)(void))type metadata accessor for Replica);
        v45((char *)(v57[7] + *(void *)(v56 + 72) * v49), (uint64_t)v75, v12);
        uint64_t v58 = v57[2];
        BOOL v59 = __OFADD__(v58, 1);
        uint64_t v60 = v58 + 1;
        if (v59) {
          goto LABEL_50;
        }
        v57[2] = v60;
        goto LABEL_37;
      }
    }
    (*(void (**)(unint64_t, char *, uint64_t))(v56 + 40))(v57[7] + *(void *)(v56 + 72) * v49, v75, v12);
    uint64_t v11 = v82;
LABEL_37:
    *(void *)&long long v83 = v84;
    swift_bridgeObjectRelease();
    sub_1C3F902AC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v18 = v72;
LABEL_5:
    ++v19;
    (*v73)(v17, v12);
    if (v19 == v74)
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = sub_1C4498558();
  __break(1u);
  return result;
}

uint64_t sub_1C3F9024C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F902AC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F9030C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F9036C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_1C4496898();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_1C3F903E8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1C3F9043C(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF870);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v107 = (uint64_t)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v113 = (uint64_t)&v104 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (uint64_t)&v104 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v117 = (uint64_t)&v104 - v14;
  uint64_t v15 = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v16 = *(uint64_t **)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  unint64_t v19 = (unint64_t)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  unint64_t v106 = (unint64_t)&v104 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v109 = (uint64_t)&v104 - v23;
  MEMORY[0x1F4188790](v22);
  unint64_t v111 = (unint64_t)&v104 - v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBEF70);
  uint64_t v26 = MEMORY[0x1F4188790](v25 - 8);
  uint64_t v28 = (uint64_t)&v104 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  unint64_t v114 = (unint64_t)&v104 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v122 = (uint64_t)&v104 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v129 = (uint64_t)&v104 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v125 = (uint64_t)&v104 - v36;
  MEMORY[0x1F4188790](v35);
  uint64_t v136 = (uint64_t)&v104 - v37;
  unint64_t v38 = type metadata accessor for RetainedMapRun(0);
  uint64_t v118 = *(void *)(v38 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v38);
  unint64_t v112 = (unint64_t)&v104 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  unint64_t v127 = (unint64_t)&v104 - v42;
  MEMORY[0x1F4188790](v41);
  uint64_t v131 = (uint64_t)&v104 - v43;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBF0A0);
  uint64_t v139 = *(void *)(v44 - 8);
  uint64_t v140 = v44;
  uint64_t v45 = MEMORY[0x1F4188790](v44);
  uint64_t v123 = (uint64_t)&v104 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v124 = (uint64_t)&v104 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v121 = (uint64_t *)((char *)&v104 - v50);
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v52 = MEMORY[0x1F4188790](v51);
  unint64_t v128 = (unint64_t)&v104 - v53;
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  char v137 = (uint64_t *)((char *)&v104 - v55);
  MEMORY[0x1F4188790](v54);
  char v143 = (uint64_t *)((char *)&v104 - v57);
  if (__OFSUB__(a1, 1)) {
    goto LABEL_98;
  }
  uint64_t v58 = a2 + 1;
  if (__OFADD__(a2, 1)) {
    goto LABEL_99;
  }
  unint64_t v105 = v19;
  uint64_t v115 = v15;
  uint64_t v108 = v13;
  unint64_t v138 = v38;
  uint64_t v116 = v28;
  unint64_t v19 = (a1 - 1) & ~((a1 - 1) >> 63);
  unint64_t v59 = v19 + 1;
  uint64_t v141 = (uint64_t *)v3;
  a2 = *v3;
  unint64_t v38 = *(void *)(*v3 + 16);
  if ((uint64_t)v38 >= v58) {
    uint64_t v2 = v58;
  }
  else {
    uint64_t v2 = *(void *)(*v3 + 16);
  }
  if ((uint64_t)v59 < v2)
  {
    char v135 = (uint64_t *)(v118 + 48);
    uint64_t v60 = v16 + 6;
    uint64_t v16 = qword_1EBBBF0A0;
    long long v120 = xmmword_1C44A17F0;
    uint64_t v61 = v137;
    uint64_t v3 = v56;
    uint64_t v126 = v56;
    uint64_t v132 = v2;
    uint64_t v110 = v60;
    while (1)
    {
      uint64_t v63 = *v141;
      unint64_t v38 = *(void *)(*v141 + 16);
      if (v19 >= v38)
      {
        __break(1u);
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      unint64_t v142 = (*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80);
      a2 = v63 + v142;
      uint64_t v13 = *(void *)(v139 + 72);
      uint64_t v28 = v13 * v19;
      sub_1C3F970C4(v63 + v142 + v13 * v19, (uint64_t)v143, qword_1EBBBF0A0);
      if (v59 >= v38) {
        goto LABEL_85;
      }
      v13 *= v59;
      sub_1C3F970C4(a2 + v13, (uint64_t)v61, qword_1EBBBF0A0);
      uint64_t v64 = v143[1];
      if (v64 != *v61)
      {
        sub_1C3F962E0((uint64_t)v61, qword_1EBBBF0A0);
        sub_1C3F962E0((uint64_t)v143, qword_1EBBBF0A0);
        unint64_t v62 = v59;
        goto LABEL_9;
      }
      uint64_t v133 = v13;
      uint64_t v134 = v28;
      uint64_t v13 = (uint64_t)v143 + *(int *)(v140 + 36);
      uint64_t v65 = v136;
      sub_1C3F970C4(v13, v136, qword_1EBBBEF70);
      uint64_t v66 = v135;
      uint64_t v28 = *v135;
      unint64_t v67 = v138;
      if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))*v135)(v65, 1, v138) == 1) {
        goto LABEL_16;
      }
      uint64_t v3 = (unint64_t *)qword_1EBBBEF70;
      uint64_t v16 = v66;
      uint64_t v2 = v131;
      sub_1C3F8F818(v136, v131, type metadata accessor for RetainedMapRun);
      uint64_t v65 = v125;
      sub_1C3F970C4((uint64_t)v137 + *(int *)(v140 + 36), v125, qword_1EBBBEF70);
      if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v28)(v65, 1, v67) == 1)
      {
        sub_1C3F86C98(v2, type metadata accessor for RetainedMapRun);
        unint64_t v67 = v138;
        uint64_t v66 = v135;
LABEL_16:
        sub_1C3F962E0(v65, qword_1EBBBEF70);
        uint64_t v68 = v13;
        uint64_t v69 = v129;
        sub_1C3F970C4(v68, v129, qword_1EBBBEF70);
        int v70 = ((uint64_t (*)(uint64_t, uint64_t, unint64_t))v28)(v69, 1, v67);
        sub_1C3F962E0(v69, qword_1EBBBEF70);
        uint64_t v13 = (uint64_t)v66;
        uint64_t v71 = (uint64_t)v137;
        a2 = v128;
        uint64_t v3 = (unint64_t *)qword_1EBBBEF70;
        uint64_t v16 = qword_1EBBBF0A0;
        sub_1C3F970C4((uint64_t)v137, v128, qword_1EBBBF0A0);
        if (v70 != 1)
        {
          sub_1C3F962E0(a2, qword_1EBBBF0A0);
          sub_1C3F962E0(v71, qword_1EBBBF0A0);
          sub_1C3F962E0((uint64_t)v143, qword_1EBBBF0A0);
          unint64_t v62 = v59;
          uint64_t v61 = (void *)v71;
LABEL_43:
          uint64_t v2 = v132;
          goto LABEL_9;
        }
        uint64_t v72 = v122;
        sub_1C3F961BC(a2 + *(int *)(v140 + 36), v122, qword_1EBBBEF70);
        char v130 = (uint64_t (*)(unint64_t, uint64_t, unint64_t))v28;
        uint64_t v13 = ((unsigned int (*)(uint64_t, uint64_t, unint64_t))v28)(v72, 1, v67) == 1;
        sub_1C3F962E0(v72, qword_1EBBBEF70);
        uint64_t v61 = (void *)v71;
        uint64_t v2 = v132;
        uint64_t v3 = v126;
        uint64_t v28 = v134;
        goto LABEL_31;
      }
      uint64_t v73 = v65;
      a2 = v127;
      sub_1C3F8F818(v73, v127, type metadata accessor for RetainedMapRun);
      BOOL v74 = __OFSUB__(v64, *v143);
      unint64_t v38 = v64 - *v143;
      if (v74) {
        goto LABEL_92;
      }
      char v130 = (uint64_t (*)(unint64_t, uint64_t, unint64_t))v28;
      if (*(void *)(v131 + *(int *)(v138 + 20)) == *(void *)(a2 + *(int *)(v138 + 20)))
      {
        uint64_t v75 = v131;
        uint64_t v76 = v117;
        uint64_t v16 = &qword_1EBBBF870;
        sub_1C3F970C4(v131, v117, &qword_1EBBBF870);
        uint64_t v13 = (uint64_t)v110;
        uint64_t v28 = v115;
        unint64_t v119 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*v110;
        int v77 = v119(v76, 1, v115);
        uint64_t v3 = v126;
        uint64_t v2 = v132;
        if (v77 != 1)
        {
          a2 = v111;
          sub_1C3F8F818(v117, v111, type metadata accessor for FinalizedTimestamp);
          uint64_t v76 = v108;
          sub_1C3F970C4(v127, v108, &qword_1EBBBF870);
          if (v119(v76, 1, v28) != 1)
          {
            uint64_t v89 = v76;
            uint64_t v90 = v109;
            sub_1C3F8F818(v89, v109, type metadata accessor for FinalizedTimestamp);
            uint64_t v91 = *(int *)(v28 + 20);
            uint64_t v92 = *(void *)(a2 + v91);
            BOOL v74 = __OFADD__(v92, v38);
            v38 += v92;
            if (v74) {
              goto LABEL_105;
            }
            uint64_t v93 = *(void *)(v90 + v91);
            uint64_t v94 = a2;
            a2 = v106;
            sub_1C3F86B60(v94, v106, type metadata accessor for FinalizedTimestamp);
            uint64_t v95 = v90;
            uint64_t v96 = v105;
            sub_1C3F86B60(v95, v105, type metadata accessor for FinalizedTimestamp);
            BOOL v97 = v38 == v93;
            uint64_t v16 = qword_1EBBBF0A0;
            uint64_t v28 = v134;
            if (v97) {
              uint64_t v13 = sub_1C4496618();
            }
            else {
              uint64_t v13 = 0;
            }
            sub_1C3F86C98(v96, type metadata accessor for FinalizedTimestamp);
            sub_1C3F86C98(a2, type metadata accessor for FinalizedTimestamp);
            sub_1C3F86C98(v109, type metadata accessor for FinalizedTimestamp);
            sub_1C3F86C98(v111, type metadata accessor for FinalizedTimestamp);
            uint64_t v61 = v137;
            goto LABEL_30;
          }
          sub_1C3F86C98(a2, type metadata accessor for FinalizedTimestamp);
          uint64_t v75 = v131;
        }
        sub_1C3F962E0(v76, &qword_1EBBBF870);
        uint64_t v78 = v113;
        sub_1C3F970C4(v75, v113, &qword_1EBBBF870);
        int v79 = v119(v78, 1, v28);
        sub_1C3F962E0(v78, &qword_1EBBBF870);
        a2 = v112;
        sub_1C3F86B60(v127, v112, type metadata accessor for RetainedMapRun);
        if (v79 == 1)
        {
          uint64_t v80 = v107;
          sub_1C3F961BC(a2, v107, &qword_1EBBBF870);
          uint64_t v13 = v119(v80, 1, v28) == 1;
          sub_1C3F962E0(v80, &qword_1EBBBF870);
        }
        else
        {
          sub_1C3F86C98(a2, type metadata accessor for RetainedMapRun);
          uint64_t v13 = 0;
        }
        uint64_t v61 = v137;
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v3 = v126;
        uint64_t v61 = v137;
        uint64_t v2 = v132;
      }
      uint64_t v16 = qword_1EBBBF0A0;
      uint64_t v28 = v134;
LABEL_30:
      sub_1C3F86C98(v127, type metadata accessor for RetainedMapRun);
      sub_1C3F86C98(v131, type metadata accessor for RetainedMapRun);
LABEL_31:
      sub_1C3F962E0((uint64_t)v61, qword_1EBBBF0A0);
      sub_1C3F962E0((uint64_t)v143, qword_1EBBBF0A0);
      unint64_t v62 = v59;
      if (v13)
      {
        unint64_t v38 = (unint64_t)v141;
        uint64_t v13 = *v141;
        if (v59 >= *(void *)(*v141 + 16)) {
          goto LABEL_88;
        }
        sub_1C3F970C4(v13 + v142 + v133, (uint64_t)v3, qword_1EBBBF0A0);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)unint64_t v38 = v13;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v13 = sub_1C4232804(v13);
          *uint64_t v141 = v13;
        }
        uint64_t v16 = qword_1EBBBEF70;
        if (v19 >= *(void *)(v13 + 16)) {
          goto LABEL_89;
        }
        uint64_t v2 = (uint64_t)v3;
        uint64_t v3 = (unint64_t *)qword_1EBBBEF70;
        v28 += v13 + v142;
        unint64_t v38 = *(int *)(v140 + 36);
        unint64_t v82 = v138;
        a2 = (unint64_t)v135;
        long long v83 = v130;
        if (v130(v28 + v38, 1, v138))
        {
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v84 = v2 + v38;
          unint64_t v38 = v114;
          sub_1C3F970C4(v84, v114, qword_1EBBBEF70);
          uint64_t result = v83(v38, 1, v82);
          if (result == 1)
          {
            __break(1u);
            return result;
          }
          swift_bridgeObjectRetain();
          sub_1C3F962E0(v38, qword_1EBBBEF70);
        }
        uint64_t v61 = v137;
        uint64_t v16 = qword_1EBBBF0A0;
        uint64_t v86 = *(void *)(v2 + 8);
        if (v86 < *(void *)v28) {
          goto LABEL_90;
        }
        uint64_t v3 = (unint64_t *)v2;
        *(void *)(v28 + 8) = v86;
        sub_1C3F962E0(v2, qword_1EBBBF0A0);
        swift_bridgeObjectRelease();
        uint64_t v87 = v141;
        uint64_t v88 = *v141;
        if (v59 >= *(void *)(*v141 + 16)) {
          goto LABEL_91;
        }
        *(_OWORD *)(v88 + v142 + v133) = v120;
        *uint64_t v87 = v88;
        unint64_t v62 = v19;
        goto LABEL_43;
      }
LABEL_9:
      ++v59;
      unint64_t v19 = v62;
      if (v2 == v59)
      {
        uint64_t v3 = (unint64_t *)v141;
        a2 = *v141;
        unint64_t v38 = *(void *)(*v141 + 16);
        goto LABEL_51;
      }
    }
  }
  uint64_t v3 = (unint64_t *)v141;
LABEL_51:
  uint64_t v16 = v121;
  if (v38)
  {
    unint64_t v19 = (*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80);
    uint64_t v28 = *(void *)(v139 + 72);
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
    unint64_t v98 = v19;
    while (1)
    {
      sub_1C3F970C4(a2 + v98, (uint64_t)v16, qword_1EBBBF0A0);
      uint64_t v13 = *v16;
      sub_1C3F962E0((uint64_t)v16, qword_1EBBBF0A0);
      if (v13 < 0) {
        break;
      }
      ++v2;
      v98 += v28;
      if (v38 == v2)
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = *(void *)(*v3 + 16);
        a2 = v2;
        goto LABEL_60;
      }
    }
    swift_bridgeObjectRelease();
    a2 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      goto LABEL_104;
    }
    uint64_t v13 = *v3;
    if (a2 != *(void *)(*v3 + 16))
    {
      unint64_t v38 = v28 + v98;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_69;
      }
      goto LABEL_106;
    }
LABEL_59:
    if ((uint64_t)a2 < v2) {
      goto LABEL_100;
    }
  }
  else
  {
    uint64_t v2 = 0;
    a2 = 0;
  }
LABEL_60:
  sub_1C3F915B0(v2, a2);
  uint64_t v99 = *(void *)(*v3 + 16);
  if (v99)
  {
    uint64_t v100 = v116;
    sub_1C3F970C4(*v3+ ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80))+ *(void *)(v139 + 72) * (v99 - 1)+ *(int *)(v140 + 36), v116, qword_1EBBBEF70);
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v118 + 48))(v100, 1, v138) != 1) {
      return sub_1C3F962E0(v100, qword_1EBBBEF70);
    }
  }
  else
  {
    uint64_t v100 = v116;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v118 + 56))(v116, 1, 1, v138);
  }
  sub_1C3F962E0(v100, qword_1EBBBEF70);
  uint64_t v2 = *v3;
  if (!*(void *)(*v3 + 16)) {
    goto LABEL_101;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_102;
  }
  for (uint64_t i = *(void *)(v2 + 16); !i; uint64_t i = *(void *)(v2 + 16))
  {
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    uint64_t v13 = sub_1C4232804(v13);
LABEL_69:
    *uint64_t v3 = v13;
    while (a2 < *(void *)(v13 + 16))
    {
      sub_1C3F970C4(v13 + v38, (uint64_t)v16, qword_1EBBBF0A0);
      uint64_t v13 = *v16;
      sub_1C3F962E0((uint64_t)v16, qword_1EBBBF0A0);
      if ((v13 & 0x8000000000000000) == 0)
      {
        if (a2 != v2)
        {
          if (v2 < 0) {
            goto LABEL_93;
          }
          uint64_t v13 = *v3;
          uint64_t v16 = *(uint64_t **)(*v3 + 16);
          if (v2 >= (unint64_t)v16) {
            goto LABEL_94;
          }
          sub_1C3F970C4(v13 + v19 + v2 * v28, v124, qword_1EBBBF0A0);
          if (a2 >= (unint64_t)v16) {
            goto LABEL_95;
          }
          sub_1C3F970C4(v13 + v38, v123, qword_1EBBBF0A0);
          char v103 = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v3 = v13;
          if ((v103 & 1) == 0)
          {
            uint64_t v13 = sub_1C4232804(v13);
            *uint64_t v3 = v13;
          }
          uint64_t v16 = v121;
          if ((unint64_t)v2 >= *(void *)(v13 + 16)) {
            goto LABEL_96;
          }
          sub_1C3F98338(v123, v13 + v19 + v2 * v28, qword_1EBBBF0A0);
          if (a2 >= *(void *)(*v3 + 16)) {
            goto LABEL_97;
          }
          sub_1C3F98338(v124, *v3 + v38, qword_1EBBBF0A0);
        }
        BOOL v74 = __OFADD__(v2++, 1);
        if (v74) {
          goto LABEL_87;
        }
      }
      ++a2;
      uint64_t v13 = *v3;
      v38 += v28;
      if (a2 == *(void *)(*v3 + 16)) {
        goto LABEL_59;
      }
    }
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    uint64_t v2 = sub_1C4232804(v2);
  }
  uint64_t v102 = i - 1;
  uint64_t result = sub_1C3F962E0(v2+ ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80))+ *(void *)(v139 + 72) * (i - 1), qword_1EBBBF0A0);
  *(void *)(v2 + 16) = v102;
  *uint64_t v3 = v2;
  return result;
}

uint64_t type metadata accessor for RetainedMapRun(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBEF60);
}

uint64_t sub_1C3F9159C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C44812FC);
}

uint64_t sub_1C3F915B0(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = sub_1C3FB46B8(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t v12 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(qword_1EBBBF0A0) - 8);
  unint64_t v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v14 = *(void *)(v12 + 72);
  uint64_t v15 = v14 * a1;
  unint64_t v16 = v13 + v14 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v4 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_31;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v21 = *(void *)(v4 + 16);
    BOOL v22 = __OFADD__(v21, v8);
    uint64_t v23 = v21 - v7;
    if (!v22)
    {
      *(void *)(v4 + 16) = v23;
LABEL_25:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3F9179C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for Replica();
  sub_1C3F8AF80(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for Replica);
  uint64_t v10 = a4[7];
  uint64_t v11 = sub_1C44967E8();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_1C3F9188C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v48 = sub_1C44967E8();
  uint64_t v5 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v47 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Replica();
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC00E0);
  int v46 = a2;
  uint64_t v11 = sub_1C4497FC8();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_39;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v41 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v42 = v5 + 16;
  uint64_t v43 = v5;
  uint64_t v17 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v18 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_20;
    }
    if (__OFADD__(v20++, 1)) {
      goto LABEL_41;
    }
    if (v20 >= v40) {
      break;
    }
    uint64_t v25 = v41;
    unint64_t v26 = v41[v20];
    if (!v26)
    {
      int64_t v27 = v20 + 1;
      if (v20 + 1 >= v40)
      {
LABEL_32:
        swift_release();
        uint64_t v3 = v39;
        if ((v46 & 1) == 0) {
          goto LABEL_39;
        }
        goto LABEL_35;
      }
      unint64_t v26 = v41[v27];
      if (!v26)
      {
        while (1)
        {
          int64_t v20 = v27 + 1;
          if (__OFADD__(v27, 1)) {
            break;
          }
          if (v20 >= v40) {
            goto LABEL_32;
          }
          unint64_t v26 = v41[v20];
          ++v27;
          if (v26) {
            goto LABEL_19;
          }
        }
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        return result;
      }
      ++v20;
    }
LABEL_19:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_20:
    uint64_t v28 = *(void *)(v44 + 72);
    uint64_t v29 = *(void *)(v10 + 48) + v28 * v23;
    if (v46)
    {
      sub_1C3F8F748(v29, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v30 = *(void *)(v43 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v43 + 32))(v47, *(void *)(v10 + 56) + v30 * v23, v48);
    }
    else
    {
      sub_1C3F8F450(v29, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v30 = *(void *)(v43 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v47, *(void *)(v10 + 56) + v30 * v23, v48);
    }
    sub_1C44985F8();
    sub_1C4496638();
    sub_1C4498608();
    uint64_t result = sub_1C4498628();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    sub_1C3F8F748((uint64_t)v9, *(void *)(v12 + 48) + v28 * v21, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t result = (*v17)(*(void *)(v12 + 56) + v30 * v21, v47, v48);
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v25 = v41;
  if ((v46 & 1) == 0) {
    goto LABEL_39;
  }
LABEL_35:
  uint64_t v38 = 1 << *(unsigned char *)(v10 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v38;
  }
  *(void *)(v10 + 16) = 0;
LABEL_39:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_1C3F91D38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  unint64_t v35 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v33 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v37 = (uint64_t)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v33 - v10;
  uint64_t v12 = type metadata accessor for Proto_Value(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  unint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v33 - v17;
  uint64_t v33 = *(void *)(v1 + 16);
  uint64_t v19 = v33 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v19, (uint64_t)v11, &qword_1EBBC0540);
  BOOL v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t result = v36(v11, 1, v12);
  if (result == 1)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  sub_1C3F9775C((uint64_t)v11, (uint64_t)v18, type metadata accessor for Proto_Value);
  uint64_t v21 = *(void *)&v18[*(int *)(v12 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v21, (uint64_t)v6, &qword_1EBBBF8A0);
  sub_1C3F9229C((uint64_t)v18, type metadata accessor for Proto_Value);
  uint64_t v22 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  unint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48);
  if (v23(v6, 1, v22) == 1)
  {
    sub_1C3F962E0((uint64_t)v6, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3) {
      return sub_1C3FA2BEC(*(void *)v6, *((void *)v6 + 1));
    }
    sub_1C3F9229C((uint64_t)v6, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  uint64_t v24 = v37;
  sub_1C3F970C4(v19, v37, &qword_1EBBC0540);
  uint64_t result = v36((char *)v24, 1, v12);
  if (result == 1) {
    goto LABEL_20;
  }
  sub_1C3F9775C(v24, (uint64_t)v16, type metadata accessor for Proto_Value);
  uint64_t v25 = *(void *)&v16[*(int *)(v12 + 20)]
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  unint64_t v26 = v35;
  sub_1C3F970C4(v25, (uint64_t)v35, &qword_1EBBBF8A0);
  sub_1C3F9229C((uint64_t)v16, type metadata accessor for Proto_Value);
  if (v23(v26, 1, v22) == 1)
  {
    sub_1C3F962E0((uint64_t)v26, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      uint64_t v27 = *(void *)(v33 + 24);
      unint64_t v28 = *(void *)(v27 + 16);
      if (v28)
      {
        uint64_t v29 = *(void *)v26;
        if (*(void *)v26 < v28)
        {
          uint64_t v30 = sub_1C4496678();
          return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v34, v27+ ((*(unsigned __int8 *)(*(void *)(v30 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v30 - 8) + 80))+ *(void *)(*(void *)(v30 - 8) + 72) * v29, v30);
        }
      }
      sub_1C3FE3FF0();
      swift_allocError();
      *(void *)uint64_t v31 = 0x2064696C61766E49;
      unint64_t v32 = 0xED00002E44495555;
      goto LABEL_16;
    }
    sub_1C3F9229C((uint64_t)v26, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  sub_1C3FE3FF0();
  swift_allocError();
  *(void *)uint64_t v31 = 0xD000000000000016;
  unint64_t v32 = 0x80000001C44B1200;
LABEL_16:
  *(void *)(v31 + 8) = v32;
  *(unsigned char *)(v31 + 16) = 0;
  return swift_willThrow();
}

uint64_t sub_1C3F9229C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F922FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F9235C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F923BC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F9241C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F9247C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F924DC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F9253C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for Proto_Constants(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0608);
}

uint64_t sub_1C3F925BC(uint64_t a1, uint64_t a2)
{
  sub_1C3F7E2CC(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_1C4496898();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_1C3F92640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = a3;
  uint64_t v57 = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v54 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Proto_Version(0);
  uint64_t v50 = *(void *)(v7 - 8);
  uint64_t v51 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v47 = (uint64_t)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v49 = (uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v46 - v12;
  uint64_t v14 = type metadata accessor for Proto_CRDT(0);
  uint64_t v55 = *(void *)(v14 - 8);
  uint64_t v56 = v14;
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v46 = (uint64_t)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v48 = (uint64_t)&v46 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v18 - 8);
  int64_t v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Proto_Value(0);
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = a1;
  uint64_t v26 = a1 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1C3F970C4(v26, (uint64_t)v20, &qword_1EBBC0540);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_1C3F962E0((uint64_t)v20, &qword_1EBBC0540);
    uint64_t v27 = v52;
    uint64_t v28 = v25;
    uint64_t v30 = v55;
    uint64_t v29 = v56;
    uint64_t v31 = (uint64_t)v54;
  }
  else
  {
    sub_1C3F92E00((uint64_t)v20, (uint64_t)v24, type metadata accessor for Proto_Value);
    sub_1C3F7251C(&qword_1EBBBF8E0, (void (*)(uint64_t))type metadata accessor for Proto_Value);
    uint64_t v32 = v52;
    sub_1C4496BD8();
    uint64_t v27 = v32;
    uint64_t result = sub_1C3F96610((uint64_t)v24, type metadata accessor for Proto_Value);
    uint64_t v28 = v25;
    uint64_t v30 = v55;
    uint64_t v29 = v56;
    uint64_t v31 = (uint64_t)v54;
    if (v32) {
      return result;
    }
  }
  uint64_t v34 = v28 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1C3F970C4(v34, (uint64_t)v13, &qword_1EBBC04F8);
  unint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  if (v35(v13, 1, v29) == 1)
  {
    sub_1C3F962E0((uint64_t)v13, &qword_1EBBC04F8);
  }
  else
  {
    uint64_t v36 = (uint64_t)v13;
    uint64_t v37 = v48;
    sub_1C3F92E00(v36, v48, type metadata accessor for Proto_CRDT);
    sub_1C3F7251C(&qword_1EBBC0680, (void (*)(uint64_t))type metadata accessor for Proto_CRDT);
    sub_1C4496BD8();
    uint64_t result = sub_1C3F96610(v37, type metadata accessor for Proto_CRDT);
    if (v27) {
      return result;
    }
  }
  uint64_t v38 = v28 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  sub_1C3F970C4(v38, v31, &qword_1EBBC0578);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v31, 1, v51) == 1)
  {
    sub_1C3F962E0(v31, &qword_1EBBC0578);
  }
  else
  {
    uint64_t v39 = v31;
    uint64_t v40 = v47;
    sub_1C3F92E00(v39, v47, type metadata accessor for Proto_Version);
    sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
    sub_1C4496BD8();
    uint64_t result = sub_1C3F96610(v40, type metadata accessor for Proto_Version);
    if (v27) {
      return result;
    }
  }
  uint64_t v41 = v28
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__partialValue;
  swift_beginAccess();
  uint64_t v42 = v41;
  uint64_t v43 = v49;
  sub_1C3F970C4(v42, v49, &qword_1EBBC04F8);
  if (v35((char *)v43, 1, v29) == 1) {
    return sub_1C3F962E0(v43, &qword_1EBBC04F8);
  }
  uint64_t v44 = v43;
  uint64_t v45 = v46;
  sub_1C3F92E00(v44, v46, type metadata accessor for Proto_CRDT);
  sub_1C3F7251C(&qword_1EBBC0680, (void (*)(uint64_t))type metadata accessor for Proto_CRDT);
  sub_1C4496BD8();
  return sub_1C3F96610(v45, type metadata accessor for Proto_CRDT);
}

uint64_t sub_1C3F92D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_230Tm_30);
}

uint64_t sub_1C3F92D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_230Tm_32);
}

uint64_t sub_1C3F92D98(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F92E00(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for Proto_Struct(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0690);
}

uint64_t type metadata accessor for Proto_OrderedSet(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0720);
}

uint64_t sub_1C3F92EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v390 = a4;
  uint64_t v392 = a3;
  uint64_t v378 = type metadata accessor for Proto_CustomCRValue(0);
  v373 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v378 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v378);
  uint64_t v327 = (uint64_t)&v298 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v320 = (uint64_t)&v298 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF928);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v350 = (uint64_t)&v298 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  v352 = (char *)&v298 - v12;
  uint64_t v391 = type metadata accessor for Proto_Asset(0);
  v372 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v391 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v391);
  uint64_t v321 = (uint64_t)&v298 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v313 = (uint64_t)&v298 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF888);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v343 = (uint64_t)&v298 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v379 = (uint64_t)&v298 - v19;
  uint64_t v377 = type metadata accessor for Proto_TaggedValue(0);
  v371 = *(void (***)(uint64_t, uint64_t, uint64_t))(v377 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v377);
  v351 = (char *)&v298 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v319 = (uint64_t)&v298 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF910);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v349 = (uint64_t)&v298 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v375 = (uint64_t)&v298 - v26;
  uint64_t v364 = type metadata accessor for Proto_RepeatedValue(0);
  v370 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v364 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v364);
  uint64_t v326 = (uint64_t)&v298 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v318 = (uint64_t)&v298 - v29;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF940);
  uint64_t v31 = MEMORY[0x1F4188790](v30 - 8);
  uint64_t v348 = (uint64_t)&v298 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  v386 = (char *)&v298 - v33;
  uint64_t v363 = type metadata accessor for Proto_Timestamp(0);
  v369 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v363 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v363);
  uint64_t v325 = (uint64_t)&v298 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v34);
  uint64_t v317 = (uint64_t)&v298 - v36;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  uint64_t v38 = MEMORY[0x1F4188790](v37 - 8);
  uint64_t v347 = (uint64_t)&v298 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v38);
  uint64_t v382 = (uint64_t)&v298 - v40;
  uint64_t v387 = type metadata accessor for Proto_Optional(0);
  v368 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v387 - 8);
  uint64_t v41 = MEMORY[0x1F4188790](v387);
  uint64_t v324 = (uint64_t)&v298 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v41);
  uint64_t v316 = (uint64_t)&v298 - v43;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8F8);
  uint64_t v45 = MEMORY[0x1F4188790](v44 - 8);
  uint64_t v346 = (uint64_t)&v298 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v45);
  uint64_t v381 = (uint64_t)&v298 - v47;
  uint64_t v376 = type metadata accessor for Proto_Reference(0);
  v367 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v376 - 8);
  uint64_t v48 = MEMORY[0x1F4188790](v376);
  uint64_t v323 = (uint64_t)&v298 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v48);
  uint64_t v315 = (uint64_t)&v298 - v50;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0368);
  uint64_t v52 = MEMORY[0x1F4188790](v51 - 8);
  uint64_t v345 = (uint64_t)&v298 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v52);
  uint64_t v380 = (uint64_t)&v298 - v54;
  uint64_t v365 = type metadata accessor for Proto_Version(0);
  *(void *)&long long v366 = *(void *)(v365 - 8);
  uint64_t v55 = MEMORY[0x1F4188790](v365);
  uint64_t v322 = (uint64_t)&v298 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v55);
  uint64_t v314 = (uint64_t)&v298 - v57;
  uint64_t v394 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  v383 = *(void (***)(void *, void, uint64_t, uint64_t))(v394 - 8);
  uint64_t v58 = MEMORY[0x1F4188790](v394);
  uint64_t v335 = (uint64_t)&v298 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = MEMORY[0x1F4188790](v58);
  uint64_t v342 = (uint64_t)&v298 - v61;
  uint64_t v62 = MEMORY[0x1F4188790](v60);
  uint64_t v334 = (uint64_t)&v298 - v63;
  uint64_t v64 = MEMORY[0x1F4188790](v62);
  uint64_t v341 = (uint64_t)&v298 - v65;
  uint64_t v66 = MEMORY[0x1F4188790](v64);
  uint64_t v333 = (uint64_t)&v298 - v67;
  uint64_t v68 = MEMORY[0x1F4188790](v66);
  uint64_t v340 = (uint64_t)&v298 - v69;
  uint64_t v70 = MEMORY[0x1F4188790](v68);
  uint64_t v332 = (uint64_t)&v298 - v71;
  uint64_t v72 = MEMORY[0x1F4188790](v70);
  uint64_t v339 = (uint64_t)&v298 - v73;
  uint64_t v74 = MEMORY[0x1F4188790](v72);
  uint64_t v331 = (uint64_t)&v298 - v75;
  uint64_t v76 = MEMORY[0x1F4188790](v74);
  uint64_t v338 = (uint64_t)&v298 - v77;
  uint64_t v78 = MEMORY[0x1F4188790](v76);
  uint64_t v330 = (uint64_t)&v298 - v79;
  uint64_t v80 = MEMORY[0x1F4188790](v78);
  v388 = (char *)&v298 - v81;
  uint64_t v82 = MEMORY[0x1F4188790](v80);
  uint64_t v329 = (uint64_t)&v298 - v83;
  uint64_t v84 = MEMORY[0x1F4188790](v82);
  uint64_t v337 = (uint64_t)&v298 - v85;
  uint64_t v86 = MEMORY[0x1F4188790](v84);
  uint64_t v328 = (uint64_t)&v298 - v87;
  MEMORY[0x1F4188790](v86);
  uint64_t v336 = (uint64_t)&v298 - v88;
  uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  uint64_t v90 = MEMORY[0x1F4188790](v89 - 8);
  uint64_t v344 = (uint64_t)&v298 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v90);
  uint64_t v374 = (uint64_t)&v298 - v92;
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v94 = MEMORY[0x1F4188790](v93 - 8);
  uint64_t v362 = (uint64_t)&v298 - ((v95 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = MEMORY[0x1F4188790](v94);
  uint64_t v361 = (uint64_t)&v298 - v97;
  uint64_t v98 = MEMORY[0x1F4188790](v96);
  uint64_t v360 = (uint64_t)&v298 - v99;
  uint64_t v100 = MEMORY[0x1F4188790](v98);
  uint64_t v359 = (uint64_t)&v298 - v101;
  uint64_t v102 = MEMORY[0x1F4188790](v100);
  uint64_t v104 = (char *)&v298 - v103;
  uint64_t v105 = MEMORY[0x1F4188790](v102);
  uint64_t v358 = (uint64_t)&v298 - v106;
  uint64_t v107 = MEMORY[0x1F4188790](v105);
  uint64_t v109 = (char *)&v298 - v108;
  uint64_t v110 = MEMORY[0x1F4188790](v107);
  uint64_t v357 = (uint64_t)&v298 - v111;
  uint64_t v112 = MEMORY[0x1F4188790](v110);
  unint64_t v114 = (char *)&v298 - v113;
  uint64_t v115 = MEMORY[0x1F4188790](v112);
  uint64_t v356 = (uint64_t)&v298 - v116;
  uint64_t v117 = MEMORY[0x1F4188790](v115);
  unint64_t v119 = (char *)&v298 - v118;
  uint64_t v120 = MEMORY[0x1F4188790](v117);
  uint64_t v355 = (uint64_t)&v298 - v121;
  uint64_t v122 = MEMORY[0x1F4188790](v120);
  uint64_t v124 = (char *)&v298 - v123;
  uint64_t v125 = MEMORY[0x1F4188790](v122);
  uint64_t v354 = (uint64_t)&v298 - v126;
  uint64_t v127 = MEMORY[0x1F4188790](v125);
  uint64_t v129 = (char *)&v298 - v128;
  uint64_t v130 = MEMORY[0x1F4188790](v127);
  uint64_t v132 = (char *)&v298 - v131;
  MEMORY[0x1F4188790](v130);
  uint64_t v353 = (uint64_t)&v298 - v133;
  uint64_t v134 = a1 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v135 = v396;
  uint64_t result = sub_1C4496908();
  if (!v135)
  {
    uint64_t v393 = v134;
    v384 = v132;
    v385 = v129;
    v307 = v124;
    v308 = v119;
    v309 = v114;
    v310 = v109;
    v311 = v104;
    uint64_t v396 = a2;
    v389 = (void (**)(uint64_t, uint64_t, uint64_t))(v383 + 6);
    v383 += 7;
    v312 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v373 + 7);
    v306 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v373 + 6);
    v373 = v372 + 7;
    v305 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v372 + 6);
    v372 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v371 + 7);
    v304 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v371 + 6);
    v371 = (void (**)(uint64_t, uint64_t, uint64_t))(v370 + 7);
    v303 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v370 + 6);
    v370 = v369 + 7;
    v302 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v369 + 6);
    v369 = v368 + 7;
    v301 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v368 + 6);
    v368 = v367 + 7;
    v300 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v367 + 6);
    v367 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v366 + 56);
    unint64_t v138 = &qword_1EBBBF8A0;
    v299 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v366 + 48);
    long long v366 = xmmword_1C449BDD0;
    uint64_t v139 = v391;
    uint64_t v141 = (uint64_t)v386;
    uint64_t v140 = v387;
    uint64_t v142 = (uint64_t)v388;
    while ((v137 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v148 = v353;
          sub_1C3F970C4(v393, v353, v138);
          (*v389)(v148, 1, v394);
          sub_1C3F962E0(v148, v138);
          *(void *)&long long v395 = 0;
          BYTE8(v395) = 1;
          sub_1C4496A48();
          if ((BYTE8(v395) & 1) == 0)
          {
            uint64_t v180 = v394;
            uint64_t v181 = v140;
            unint64_t v182 = v384;
            void *v384 = v395;
            goto LABEL_4;
          }
          goto LABEL_6;
        case 2:
          uint64_t v149 = v354;
          sub_1C3F970C4(v393, v354, v138);
          (*v389)(v149, 1, v394);
          sub_1C3F962E0(v149, v138);
          *(void *)&long long v395 = 0;
          BYTE8(v395) = 1;
          sub_1C44969F8();
          if ((BYTE8(v395) & 1) == 0)
          {
            uint64_t v181 = v140;
            unint64_t v182 = v384;
            void *v384 = v395;
            uint64_t v180 = v394;
            goto LABEL_4;
          }
          goto LABEL_6;
        case 3:
          uint64_t v150 = (uint64_t)v307;
          sub_1C3F970C4(v393, (uint64_t)v307, v138);
          (*v389)(v150, 1, v394);
          sub_1C3F962E0(v150, v138);
          *(void *)&long long v395 = 0;
          BYTE8(v395) = 1;
          sub_1C4496A48();
          uint64_t v142 = (uint64_t)v388;
          uint64_t v183 = v141;
          if ((BYTE8(v395) & 1) == 0)
          {
            uint64_t v184 = v394;
            uint64_t v185 = v140;
            uint64_t v186 = v384;
            void *v384 = v395;
            swift_storeEnumTagMultiPayload();
            (*v383)(v186, 0, 1, v184);
            uint64_t v187 = (uint64_t)v186;
            uint64_t v140 = v185;
            uint64_t v188 = (uint64_t)v385;
            sub_1C3F961BC(v187, (uint64_t)v385, v138);
            uint64_t v189 = v393;
            swift_beginAccess();
            uint64_t v190 = v189;
            unint64_t v138 = &qword_1EBBBF8A0;
            sub_1C3F98338(v188, v190, &qword_1EBBBF8A0);
            swift_endAccess();
          }
          uint64_t v141 = v183;
          goto LABEL_6;
        case 4:
          uint64_t v151 = v355;
          sub_1C3F970C4(v393, v355, v138);
          (*v389)(v151, 1, v394);
          sub_1C3F962E0(v151, v138);
          long long v395 = v366;
          sub_1C4496978();
          uint64_t v191 = *((void *)&v395 + 1);
          if (*((void *)&v395 + 1) >> 60 != 15)
          {
            uint64_t v180 = v394;
            uint64_t v181 = v140;
            unint64_t v182 = v384;
            void *v384 = v395;
            v182[1] = v191;
            goto LABEL_4;
          }
          goto LABEL_6;
        case 5:
          uint64_t v152 = (uint64_t)v308;
          sub_1C3F970C4(v393, (uint64_t)v308, v138);
          (*v389)(v152, 1, v394);
          sub_1C3F962E0(v152, v138);
          *(void *)&long long v395 = 0;
          BYTE8(v395) = 1;
          sub_1C4496A08();
          if ((BYTE8(v395) & 1) == 0)
          {
            uint64_t v192 = v394;
            uint64_t v193 = v384;
            void *v384 = v395;
            swift_storeEnumTagMultiPayload();
            (*v383)(v193, 0, 1, v192);
            uint64_t v194 = (uint64_t)v385;
            sub_1C3F961BC((uint64_t)v193, (uint64_t)v385, v138);
            uint64_t v195 = v393;
            swift_beginAccess();
            uint64_t v196 = v195;
            unint64_t v138 = &qword_1EBBBF8A0;
            sub_1C3F98338(v194, v196, &qword_1EBBBF8A0);
            swift_endAccess();
          }
          uint64_t v141 = (uint64_t)v386;
          uint64_t v140 = v387;
          goto LABEL_6;
        case 6:
          uint64_t v153 = v356;
          sub_1C3F970C4(v393, v356, v138);
          (*v389)(v153, 1, v394);
          sub_1C3F962E0(v153, v138);
          *(void *)&long long v395 = 0;
          BYTE8(v395) = 1;
          sub_1C4496A48();
          if ((BYTE8(v395) & 1) == 0)
          {
            uint64_t v180 = v394;
            uint64_t v181 = v140;
            unint64_t v182 = v384;
            void *v384 = v395;
            goto LABEL_4;
          }
          goto LABEL_6;
        case 7:
          uint64_t v154 = *v367;
          uint64_t v155 = v365;
          (*v367)(v374, 1, 1, v365);
          uint64_t v156 = v138;
          uint64_t v157 = (uint64_t)v309;
          sub_1C3F970C4(v393, (uint64_t)v309, v156);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v389)(v157, 1, v394) == 1)
          {
            sub_1C3F962E0(v157, v156);
            unint64_t v138 = v156;
            uint64_t v158 = &qword_1EBBC0578;
            uint64_t v159 = v374;
          }
          else
          {
            uint64_t v197 = v141;
            uint64_t v198 = v336;
            sub_1C3F92E00(v157, v336, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v199 = v328;
            sub_1C3F92E00(v198, v328, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 6)
            {
              uint64_t v200 = v374;
              uint64_t v158 = &qword_1EBBC0578;
              sub_1C3F962E0(v374, &qword_1EBBC0578);
              uint64_t v201 = v199;
              uint64_t v202 = v314;
              sub_1C3F92E00(v201, v314, type metadata accessor for Proto_Version);
              sub_1C3F92E00(v202, v200, type metadata accessor for Proto_Version);
              uint64_t v203 = v365;
              v154(v200, 0, 1, v365);
              uint64_t v159 = v200;
              unint64_t v138 = &qword_1EBBBF8A0;
              uint64_t v204 = v197;
              uint64_t v155 = v203;
              uint64_t v141 = v204;
            }
            else
            {
              sub_1C3F96610(v199, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
              uint64_t v159 = v374;
              unint64_t v138 = &qword_1EBBBF8A0;
              uint64_t v158 = &qword_1EBBC0578;
              uint64_t v141 = v197;
              uint64_t v155 = v365;
            }
          }
          sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
          sub_1C4496A78();
          uint64_t v237 = v344;
          sub_1C3F961BC(v159, v344, &qword_1EBBC0578);
          if ((*v299)(v237, 1, v155) == 1) {
            goto LABEL_77;
          }
          uint64_t v238 = v237;
          uint64_t v239 = v322;
          sub_1C3F92E00(v238, v322, type metadata accessor for Proto_Version);
          uint64_t v240 = v384;
          sub_1C3F92E00(v239, (uint64_t)v384, type metadata accessor for Proto_Version);
          uint64_t v241 = v394;
          goto LABEL_79;
        case 8:
          unint64_t v160 = *v368;
          (*v368)(v380, 1, 1, v376);
          uint64_t v161 = v357;
          sub_1C3F970C4(v393, v357, v138);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v389)(v161, 1, v394) == 1)
          {
            sub_1C3F962E0(v161, v138);
          }
          else
          {
            uint64_t v205 = v337;
            sub_1C3F92E00(v161, v337, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v206 = v329;
            sub_1C3F92E00(v205, v329, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 7)
            {
              uint64_t v207 = v380;
              sub_1C3F962E0(v380, &qword_1EBBC0368);
              uint64_t v208 = v206;
              uint64_t v209 = v315;
              sub_1C3F92E00(v208, v315, type metadata accessor for Proto_Reference);
              sub_1C3F92E00(v209, v207, type metadata accessor for Proto_Reference);
              v160(v207, 0, 1, v376);
            }
            else
            {
              sub_1C3F96610(v206, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
          }
          sub_1C3F7251C(&qword_1EBBBC848, (void (*)(uint64_t))type metadata accessor for Proto_Reference);
          uint64_t v242 = v380;
          uint64_t v243 = v376;
          sub_1C4496A78();
          uint64_t v237 = v345;
          uint64_t v158 = &qword_1EBBC0368;
          sub_1C3F961BC(v242, v345, &qword_1EBBC0368);
          if ((*v300)(v237, 1, v243) == 1) {
            goto LABEL_77;
          }
          uint64_t v244 = v237;
          uint64_t v245 = v323;
          sub_1C3F92E00(v244, v323, type metadata accessor for Proto_Reference);
          uint64_t v240 = v384;
          sub_1C3F92E00(v245, (uint64_t)v384, type metadata accessor for Proto_Reference);
          uint64_t v241 = v394;
          goto LABEL_79;
        case 9:
          uint64_t v162 = *v369;
          uint64_t v163 = v140;
          (*v369)(v381, 1, 1, v140);
          uint64_t v164 = (uint64_t)v310;
          sub_1C3F970C4(v393, (uint64_t)v310, v138);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v389)(v164, 1, v394) == 1)
          {
            sub_1C3F962E0(v164, v138);
          }
          else
          {
            sub_1C3F92E00(v164, v142, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v210 = v330;
            sub_1C3F92E00(v142, v330, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 8)
            {
              uint64_t v211 = v381;
              sub_1C3F962E0(v381, &qword_1EBBBF8F8);
              uint64_t v212 = v210;
              uint64_t v213 = v316;
              sub_1C3F92E00(v212, v316, type metadata accessor for Proto_Optional);
              sub_1C3F92E00(v213, v211, type metadata accessor for Proto_Optional);
              uint64_t v140 = v163;
              v162(v211, 0, 1, v163);
              goto LABEL_72;
            }
            sub_1C3F96610(v210, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          }
          uint64_t v140 = v163;
LABEL_72:
          sub_1C3F7251C(&qword_1EBBBB5A0, (void (*)(uint64_t))type metadata accessor for Proto_Optional);
          uint64_t v246 = v381;
          sub_1C4496A78();
          uint64_t v141 = (uint64_t)v386;
          uint64_t v247 = v346;
          sub_1C3F961BC(v246, v346, &qword_1EBBBF8F8);
          if ((*v301)(v247, 1, v140) == 1)
          {
            sub_1C3F962E0(v247, &qword_1EBBBF8F8);
            goto LABEL_100;
          }
          uint64_t v248 = v247;
          uint64_t v249 = v324;
          sub_1C3F92E00(v248, v324, type metadata accessor for Proto_Optional);
          char v250 = v384;
          sub_1C3F92E00(v249, (uint64_t)v384, type metadata accessor for Proto_Optional);
          uint64_t v251 = v394;
          swift_storeEnumTagMultiPayload();
          (*v383)(v250, 0, 1, v251);
          uint64_t v252 = (uint64_t)v385;
          sub_1C3F961BC((uint64_t)v250, (uint64_t)v385, &qword_1EBBBF8A0);
          uint64_t v253 = v393;
          swift_beginAccess();
          uint64_t v146 = v252;
          uint64_t v147 = v253;
          unint64_t v138 = &qword_1EBBBF8A0;
LABEL_5:
          sub_1C3F98338(v146, v147, &qword_1EBBBF8A0);
          swift_endAccess();
          goto LABEL_6;
        case 10:
          uint64_t v165 = *v370;
          uint64_t v166 = v363;
          (*v370)(v382, 1, 1, v363);
          uint64_t v167 = v358;
          sub_1C3F970C4(v393, v358, v138);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v389)(v167, 1, v394) == 1)
          {
            sub_1C3F962E0(v167, v138);
          }
          else
          {
            uint64_t v214 = v338;
            sub_1C3F92E00(v167, v338, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v215 = v331;
            sub_1C3F92E00(v214, v331, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 9)
            {
              uint64_t v216 = v382;
              sub_1C3F962E0(v382, &qword_1EBBC0620);
              uint64_t v217 = v215;
              uint64_t v218 = v317;
              sub_1C3F92E00(v217, v317, type metadata accessor for Proto_Timestamp);
              sub_1C3F92E00(v218, v216, type metadata accessor for Proto_Timestamp);
              v165(v216, 0, 1, v166);
            }
            else
            {
              sub_1C3F96610(v215, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
          }
          sub_1C3F7251C(&qword_1EBBC06F0, (void (*)(uint64_t))type metadata accessor for Proto_Timestamp);
          uint64_t v254 = v382;
          sub_1C4496A78();
          uint64_t v255 = v254;
          uint64_t v237 = v347;
          uint64_t v256 = v166;
          uint64_t v158 = &qword_1EBBC0620;
          sub_1C3F961BC(v255, v347, &qword_1EBBC0620);
          if ((*v302)(v237, 1, v256) == 1)
          {
LABEL_77:
            sub_1C3F962E0(v237, v158);
          }
          else
          {
            uint64_t v257 = v237;
            uint64_t v258 = v325;
            sub_1C3F92E00(v257, v325, type metadata accessor for Proto_Timestamp);
            uint64_t v240 = v384;
            sub_1C3F92E00(v258, (uint64_t)v384, type metadata accessor for Proto_Timestamp);
            uint64_t v241 = v394;
LABEL_79:
            swift_storeEnumTagMultiPayload();
            (*v383)(v240, 0, 1, v241);
            uint64_t v259 = (uint64_t)v385;
            sub_1C3F961BC((uint64_t)v240, (uint64_t)v385, v138);
            uint64_t v260 = v393;
            swift_beginAccess();
            uint64_t v261 = v260;
            unint64_t v138 = &qword_1EBBBF8A0;
            sub_1C3F98338(v259, v261, &qword_1EBBBF8A0);
            swift_endAccess();
          }
          goto LABEL_80;
        case 11:
          uint64_t v168 = *v371;
          uint64_t v169 = v364;
          (*v371)(v141, 1, 1);
          uint64_t v170 = (uint64_t)v311;
          sub_1C3F970C4(v393, (uint64_t)v311, v138);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v389)(v170, 1, v394) == 1)
          {
            sub_1C3F962E0(v170, v138);
          }
          else
          {
            uint64_t v219 = v339;
            sub_1C3F92E00(v170, v339, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v220 = v332;
            sub_1C3F92E00(v219, v332, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 10)
            {
              sub_1C3F962E0(v141, &qword_1EBBBF940);
              uint64_t v221 = v220;
              uint64_t v222 = v318;
              sub_1C3F92E00(v221, v318, type metadata accessor for Proto_RepeatedValue);
              sub_1C3F92E00(v222, v141, type metadata accessor for Proto_RepeatedValue);
              ((void (*)(uint64_t, void, uint64_t, uint64_t))v168)(v141, 0, 1, v169);
            }
            else
            {
              sub_1C3F96610(v220, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
          }
          uint64_t v142 = (uint64_t)v388;
          sub_1C3F7251C(&qword_1EA39B300, (void (*)(uint64_t))type metadata accessor for Proto_RepeatedValue);
          sub_1C4496A78();
          uint64_t v262 = v348;
          sub_1C3F961BC(v141, v348, &qword_1EBBBF940);
          if ((*v303)(v262, 1, v169) == 1)
          {
            sub_1C3F962E0(v262, &qword_1EBBBF940);
          }
          else
          {
            uint64_t v263 = v262;
            uint64_t v264 = v326;
            sub_1C3F92E00(v263, v326, type metadata accessor for Proto_RepeatedValue);
            v265 = v384;
            sub_1C3F92E00(v264, (uint64_t)v384, type metadata accessor for Proto_RepeatedValue);
            uint64_t v266 = v394;
            swift_storeEnumTagMultiPayload();
            (*v383)(v265, 0, 1, v266);
            uint64_t v267 = (uint64_t)v385;
            sub_1C3F961BC((uint64_t)v265, (uint64_t)v385, v138);
            uint64_t v268 = v393;
            swift_beginAccess();
            uint64_t v269 = v268;
            unint64_t v138 = &qword_1EBBBF8A0;
            sub_1C3F98338(v267, v269, &qword_1EBBBF8A0);
            swift_endAccess();
          }
          uint64_t v140 = v387;
          goto LABEL_6;
        case 12:
          uint64_t v171 = *v372;
          (*v372)(v375, 1, 1, v377);
          uint64_t v172 = v359;
          sub_1C3F970C4(v393, v359, v138);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v389)(v172, 1, v394) == 1)
          {
            uint64_t v173 = (uint64_t)v351;
            sub_1C3F962E0(v172, v138);
          }
          else
          {
            uint64_t v223 = v172;
            uint64_t v224 = v340;
            sub_1C3F92E00(v223, v340, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v173 = (uint64_t)v351;
            uint64_t v225 = v333;
            sub_1C3F92E00(v224, v333, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 11)
            {
              uint64_t v226 = v375;
              sub_1C3F962E0(v375, &qword_1EBBBF910);
              uint64_t v227 = v319;
              sub_1C3F92E00(v225, v319, type metadata accessor for Proto_TaggedValue);
              sub_1C3F92E00(v227, v226, type metadata accessor for Proto_TaggedValue);
              v171(v226, 0, 1, v377);
              goto LABEL_88;
            }
            sub_1C3F96610(v225, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          }
          uint64_t v226 = v375;
LABEL_88:
          sub_1C3F7251C(&qword_1EA39AF90, (void (*)(uint64_t))type metadata accessor for Proto_TaggedValue);
          uint64_t v270 = v226;
          uint64_t v271 = v377;
          sub_1C4496A78();
          uint64_t v272 = v349;
          sub_1C3F961BC(v270, v349, &qword_1EBBBF910);
          if ((*v304)(v272, 1, v271) == 1)
          {
            uint64_t v273 = v272;
            v274 = &qword_1EBBBF910;
            goto LABEL_99;
          }
          sub_1C3F92E00(v272, v173, type metadata accessor for Proto_TaggedValue);
          v275 = v384;
          sub_1C3F92E00(v173, (uint64_t)v384, type metadata accessor for Proto_TaggedValue);
          uint64_t v276 = v394;
          swift_storeEnumTagMultiPayload();
          (*v383)(v275, 0, 1, v276);
          uint64_t v277 = (uint64_t)v385;
          sub_1C3F961BC((uint64_t)v275, (uint64_t)v385, &qword_1EBBBF8A0);
          uint64_t v278 = v393;
          swift_beginAccess();
          sub_1C3F98338(v277, v278, &qword_1EBBBF8A0);
          swift_endAccess();
          unint64_t v138 = &qword_1EBBBF8A0;
          uint64_t v141 = (uint64_t)v386;
          goto LABEL_80;
        case 13:
          uint64_t v174 = *v373;
          (*v373)(v379, 1, 1, v139);
          uint64_t v175 = v360;
          sub_1C3F970C4(v393, v360, v138);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v389)(v175, 1, v394) == 1)
          {
            sub_1C3F962E0(v175, v138);
          }
          else
          {
            uint64_t v228 = v175;
            uint64_t v229 = v341;
            sub_1C3F92E00(v228, v341, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v230 = v334;
            sub_1C3F92E00(v229, v334, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 12)
            {
              uint64_t v231 = v379;
              sub_1C3F962E0(v379, &qword_1EBBBF888);
              uint64_t v232 = v230;
              uint64_t v233 = v313;
              sub_1C3F92E00(v232, v313, type metadata accessor for Proto_Asset);
              sub_1C3F92E00(v233, v231, type metadata accessor for Proto_Asset);
              v174(v231, 0, 1, v391);
            }
            else
            {
              sub_1C3F96610(v230, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
          }
          sub_1C3F7251C(&qword_1EA39AE50, (void (*)(uint64_t))type metadata accessor for Proto_Asset);
          uint64_t v279 = v379;
          uint64_t v280 = v391;
          sub_1C4496A78();
          uint64_t v281 = v279;
          uint64_t v282 = v343;
          sub_1C3F961BC(v281, v343, &qword_1EBBBF888);
          if ((*v305)(v282, 1, v280) == 1)
          {
            sub_1C3F962E0(v282, &qword_1EBBBF888);
          }
          else
          {
            uint64_t v283 = v321;
            sub_1C3F92E00(v282, v321, type metadata accessor for Proto_Asset);
            uint64_t v284 = v140;
            v285 = v384;
            sub_1C3F92E00(v283, (uint64_t)v384, type metadata accessor for Proto_Asset);
            uint64_t v286 = v394;
            swift_storeEnumTagMultiPayload();
            (*v383)(v285, 0, 1, v286);
            uint64_t v287 = (uint64_t)v285;
            uint64_t v140 = v284;
            uint64_t v288 = (uint64_t)v385;
            sub_1C3F961BC(v287, (uint64_t)v385, v138);
            uint64_t v289 = v393;
            swift_beginAccess();
            uint64_t v290 = v289;
            unint64_t v138 = &qword_1EBBBF8A0;
            sub_1C3F98338(v288, v290, &qword_1EBBBF8A0);
            swift_endAccess();
          }
          uint64_t v141 = (uint64_t)v386;
          uint64_t v142 = (uint64_t)v388;
          goto LABEL_6;
        case 14:
          uint64_t v176 = *v312;
          uint64_t v177 = (uint64_t)v352;
          (*v312)(v352, 1, 1, v378);
          uint64_t v178 = v361;
          sub_1C3F970C4(v393, v361, v138);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v389)(v178, 1, v394) == 1)
          {
            sub_1C3F962E0(v178, v138);
          }
          else
          {
            uint64_t v234 = v342;
            sub_1C3F92E00(v178, v342, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v235 = v335;
            sub_1C3F92E00(v234, v335, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 13)
            {
              sub_1C3F962E0(v177, &qword_1EBBBF928);
              uint64_t v236 = v320;
              sub_1C3F92E00(v235, v320, type metadata accessor for Proto_CustomCRValue);
              sub_1C3F92E00(v236, v177, type metadata accessor for Proto_CustomCRValue);
              v176((char *)v177, 0, 1, v378);
            }
            else
            {
              sub_1C3F96610(v235, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
            }
          }
          sub_1C3F7251C(&qword_1EBBBF1C0, (void (*)(uint64_t))type metadata accessor for Proto_CustomCRValue);
          uint64_t v291 = v378;
          sub_1C4496A78();
          uint64_t v292 = v350;
          sub_1C3F961BC(v177, v350, &qword_1EBBBF928);
          if ((*v306)(v292, 1, v291) == 1)
          {
            uint64_t v273 = v292;
            v274 = &qword_1EBBBF928;
LABEL_99:
            sub_1C3F962E0(v273, v274);
            uint64_t v141 = (uint64_t)v386;
            uint64_t v140 = v387;
            uint64_t v142 = (uint64_t)v388;
LABEL_100:
            unint64_t v138 = &qword_1EBBBF8A0;
          }
          else
          {
            uint64_t v293 = v327;
            sub_1C3F92E00(v292, v327, type metadata accessor for Proto_CustomCRValue);
            v294 = v384;
            sub_1C3F92E00(v293, (uint64_t)v384, type metadata accessor for Proto_CustomCRValue);
            uint64_t v295 = v394;
            swift_storeEnumTagMultiPayload();
            (*v383)(v294, 0, 1, v295);
            uint64_t v296 = (uint64_t)v385;
            unint64_t v138 = &qword_1EBBBF8A0;
            sub_1C3F961BC((uint64_t)v294, (uint64_t)v385, &qword_1EBBBF8A0);
            uint64_t v297 = v393;
            swift_beginAccess();
            sub_1C3F98338(v296, v297, &qword_1EBBBF8A0);
            swift_endAccess();
            uint64_t v141 = (uint64_t)v386;
LABEL_80:
            uint64_t v140 = v387;
            uint64_t v142 = (uint64_t)v388;
          }
LABEL_6:
          uint64_t result = sub_1C4496908();
          uint64_t v139 = v391;
          break;
        case 15:
          uint64_t v179 = v362;
          sub_1C3F970C4(v393, v362, v138);
          (*v389)(v179, 1, v394);
          sub_1C3F962E0(v179, v138);
          LODWORD(v395) = 0;
          BYTE4(v395) = 1;
          sub_1C4496998();
          if (BYTE4(v395)) {
            goto LABEL_6;
          }
          uint64_t v181 = v140;
          unint64_t v182 = v384;
          *(_DWORD *)v384 = v395;
          uint64_t v180 = v394;
LABEL_4:
          swift_storeEnumTagMultiPayload();
          (*v383)(v182, 0, 1, v180);
          uint64_t v143 = (uint64_t)v182;
          uint64_t v140 = v181;
          uint64_t v144 = (uint64_t)v385;
          sub_1C3F961BC(v143, (uint64_t)v385, v138);
          uint64_t v145 = v393;
          swift_beginAccess();
          uint64_t v146 = v144;
          uint64_t v147 = v145;
          unint64_t v138 = &qword_1EBBBF8A0;
          goto LABEL_5;
        default:
          goto LABEL_6;
      }
    }
  }
  return result;
}

uint64_t sub_1C3F961BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F96220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_366Tm_1);
}

uint64_t CRDecoder.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C3F962E0(v0 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt, &qword_1EBBC04F8);
  sub_1C3F962E0(v0 + OBJC_IVAR____TtC9Coherence9CRDecoder_value, &qword_1EBBC0540);
  return swift_deallocClassInstance();
}

uint64_t sub_1C3F962E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F9633C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F9639C(uint64_t a1)
{
  uint64_t v2 = sub_1C4496898();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t sub_1C3F96414(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F9647C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F964E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496898();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for Proto_Subsequence(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBC108);
}

uint64_t type metadata accessor for Proto_Sequence(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC06D8);
}

uint64_t sub_1C3F965A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = sub_1C4496898();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t sub_1C3F96610(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3F96670(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_1C4496898();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

_OWORD *sub_1C3F966F4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_1C4496898();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_1C3F96770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  uint64_t v41 = a2;
  uint64_t v39 = type metadata accessor for Proto_CustomCRValue(0);
  MEMORY[0x1F4188790](v39);
  uint64_t v40 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for Proto_Asset(0);
  MEMORY[0x1F4188790](v37);
  uint64_t v38 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for Proto_TaggedValue(0);
  MEMORY[0x1F4188790](v35);
  uint64_t v36 = (uint64_t)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for Proto_RepeatedValue(0);
  MEMORY[0x1F4188790](v33);
  uint64_t v34 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for Proto_Timestamp(0);
  MEMORY[0x1F4188790](v31);
  uint64_t v32 = (uint64_t)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Proto_Optional(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Proto_Version(0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (uint64_t *)((char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = a1 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v22, (uint64_t)v21, &qword_1EBBBF8A0);
  uint64_t v23 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v21, 1, v23);
  if (result != 1)
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        return sub_1C4496B78();
      case 3u:
        uint64_t v25 = *v21;
        unint64_t v26 = v21[1];
        sub_1C4496B38();
        return sub_1C3F7E2CC(v25, v26);
      case 4u:
        return sub_1C4496B88();
      case 6u:
        sub_1C3F92E00((uint64_t)v21, (uint64_t)v18, type metadata accessor for Proto_Version);
        sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
        sub_1C4496BD8();
        uint64_t v27 = type metadata accessor for Proto_Version;
        uint64_t v28 = (uint64_t)v18;
        goto LABEL_16;
      case 7u:
        sub_1C3F92E00((uint64_t)v21, (uint64_t)v15, type metadata accessor for Proto_Reference);
        sub_1C3F7251C(&qword_1EBBBC848, (void (*)(uint64_t))type metadata accessor for Proto_Reference);
        sub_1C4496BD8();
        uint64_t v27 = type metadata accessor for Proto_Reference;
        uint64_t v28 = (uint64_t)v15;
        goto LABEL_16;
      case 8u:
        sub_1C3F92E00((uint64_t)v21, (uint64_t)v12, type metadata accessor for Proto_Optional);
        sub_1C3F7251C(&qword_1EBBBB5A0, (void (*)(uint64_t))type metadata accessor for Proto_Optional);
        sub_1C4496BD8();
        uint64_t v27 = type metadata accessor for Proto_Optional;
        uint64_t v28 = (uint64_t)v12;
        goto LABEL_16;
      case 9u:
        uint64_t v29 = v32;
        sub_1C3F92E00((uint64_t)v21, v32, type metadata accessor for Proto_Timestamp);
        sub_1C3F7251C(&qword_1EBBC06F0, (void (*)(uint64_t))type metadata accessor for Proto_Timestamp);
        sub_1C4496BD8();
        uint64_t v30 = type metadata accessor for Proto_Timestamp;
        goto LABEL_15;
      case 0xAu:
        uint64_t v29 = v34;
        sub_1C3F92E00((uint64_t)v21, v34, type metadata accessor for Proto_RepeatedValue);
        sub_1C3F7251C(&qword_1EA39B300, (void (*)(uint64_t))type metadata accessor for Proto_RepeatedValue);
        sub_1C4496BD8();
        uint64_t v30 = type metadata accessor for Proto_RepeatedValue;
        goto LABEL_15;
      case 0xBu:
        uint64_t v29 = v36;
        sub_1C3F92E00((uint64_t)v21, v36, type metadata accessor for Proto_TaggedValue);
        sub_1C3F7251C(&qword_1EA39AF90, (void (*)(uint64_t))type metadata accessor for Proto_TaggedValue);
        sub_1C4496BD8();
        uint64_t v30 = type metadata accessor for Proto_TaggedValue;
        goto LABEL_15;
      case 0xCu:
        uint64_t v29 = v38;
        sub_1C3F92E00((uint64_t)v21, v38, type metadata accessor for Proto_Asset);
        sub_1C3F7251C(&qword_1EA39AE50, (void (*)(uint64_t))type metadata accessor for Proto_Asset);
        sub_1C4496BD8();
        uint64_t v30 = type metadata accessor for Proto_Asset;
        goto LABEL_15;
      case 0xDu:
        uint64_t v29 = v40;
        sub_1C3F92E00((uint64_t)v21, v40, type metadata accessor for Proto_CustomCRValue);
        sub_1C3F7251C(&qword_1EBBBF1C0, (void (*)(uint64_t))type metadata accessor for Proto_CustomCRValue);
        sub_1C4496BD8();
        uint64_t v30 = type metadata accessor for Proto_CustomCRValue;
LABEL_15:
        uint64_t v27 = v30;
        uint64_t v28 = v29;
LABEL_16:
        uint64_t result = sub_1C3F96610(v28, v27);
        break;
      case 0xEu:
        uint64_t result = sub_1C4496B48();
        break;
      default:
        uint64_t result = sub_1C4496BB8();
        break;
    }
  }
  return result;
}

uint64_t sub_1C3F9708C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C3F970C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for Proto_Version(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0568);
}

uint64_t type metadata accessor for Proto_Timestamp(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0370);
}

uint64_t type metadata accessor for Proto_CustomCRValue(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBF918);
}

uint64_t type metadata accessor for Proto_Reference(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0358);
}

uint64_t type metadata accessor for Proto_Value.OneOf_TaggedOneOf(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBF890);
}

uint64_t type metadata accessor for Proto_Asset(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0518);
}

uint64_t type metadata accessor for Proto_RepeatedValue(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBF930);
}

uint64_t type metadata accessor for Proto_TaggedValue(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBF900);
}

uint64_t type metadata accessor for Proto_Optional(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBF8E8);
}

uint64_t sub_1C3F97248(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 3:
      uint64_t v3 = *(void *)a1;
      unint64_t v4 = *(void *)(a1 + 8);
      return sub_1C3F7E2CC(v3, v4);
    case 6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v5 = type metadata accessor for Proto_Version(0);
      goto LABEL_16;
    case 7:
      uint64_t v6 = sub_1C4496898();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
      type metadata accessor for Proto_Reference(0);
      goto LABEL_11;
    case 8:
      uint64_t v7 = sub_1C4496898();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
      type metadata accessor for Proto_Optional(0);
      goto LABEL_11;
    case 9:
      uint64_t v5 = type metadata accessor for Proto_Timestamp(0);
      goto LABEL_16;
    case 10:
      swift_bridgeObjectRelease();
      uint64_t v8 = *(int *)(type metadata accessor for Proto_RepeatedValue(0) + 20);
      goto LABEL_17;
    case 11:
      uint64_t v9 = sub_1C4496898();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
      type metadata accessor for Proto_TaggedValue(0);
LABEL_11:
      return swift_release();
    case 12:
      sub_1C3F7E2CC(*(void *)(a1 + 8), *(void *)(a1 + 16));
      sub_1C3F7E2CC(*(void *)(a1 + 24), *(void *)(a1 + 32));
      uint64_t v8 = *(int *)(type metadata accessor for Proto_Asset(0) + 28);
      goto LABEL_17;
    case 13:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v5 = type metadata accessor for Proto_CustomCRValue(0);
LABEL_16:
      uint64_t v8 = *(int *)(v5 + 24);
LABEL_17:
      uint64_t v10 = a1 + v8;
      uint64_t v11 = sub_1C4496898();
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
      uint64_t result = v12(v10, v11);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for RLEMapping()
{
  swift_bridgeObjectRelease();
  return swift_weakDestroy();
}

uint64_t sub_1C3F974B0(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = v7;
  *(void *)(v2 + 40) = MEMORY[0x1E4FBC868];
  *(void *)(v2 + 32) = v7;
  *(unsigned char *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  uint64_t v8 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  uint64_t v9 = type metadata accessor for Proto_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  uint64_t v11 = type metadata accessor for Proto_Value(0);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  *(void *)(v2 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(v2 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v13 = *(void *)(a2 + 40);
  swift_beginAccess();
  *(void *)(v2 + 40) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v2 + 48) = *(unsigned char *)(a2 + 48);
  sub_1C3F9775C(v15, (uint64_t)v6, type metadata accessor for Proto_Value);
  v12((uint64_t)v6, 0, 1, v11);
  swift_beginAccess();
  sub_1C3F98338((uint64_t)v6, v10, &qword_1EBBC0540);
  swift_endAccess();
  *(unsigned char *)(v2 + 49) = *(unsigned char *)(a2 + 49);
  return v2;
}

uint64_t sub_1C3F97714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_231Tm_30);
}

uint64_t type metadata accessor for Proto_CRDT(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC04E8);
}

uint64_t sub_1C3F97748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_231Tm_32);
}

uint64_t sub_1C3F9775C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F977C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C3F97804(a1, a2, a3, (void (*)(void))type metadata accessor for Proto_Value, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3F96770);
}

uint64_t sub_1C3F97804(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  a4(0);
  uint64_t v10 = swift_retain();
  a5(v10, a1, a2, a3);
  uint64_t result = swift_release();
  if (!v5) {
    return sub_1C4496878();
  }
  return result;
}

uint64_t type metadata accessor for Proto_Value(uint64_t a1)
{
  return sub_1C3F9708C(a1, qword_1EBBC0528);
}

uint64_t type metadata accessor for Proto_Set.Element(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0210);
}

uint64_t sub_1C3F978E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_367Tm_1);
}

uint64_t sub_1C3F978F8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  sub_1C3F7E2CC(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_1C4496898();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_1C3F97978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1;
  uint64_t v13 = a1
      + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequenceStartID;
  swift_beginAccess();
  sub_1C3F970C4(v13, (uint64_t)v7, &qword_1EBBC0620);
  int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  v24[1] = v8;
  if (v14 == 1)
  {
    sub_1C3F962E0((uint64_t)v7, &qword_1EBBC0620);
    uint64_t v15 = v25;
  }
  else
  {
    sub_1C3F92E00((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_Timestamp);
    sub_1C3F7251C(&qword_1EBBC06F0, (void (*)(uint64_t))type metadata accessor for Proto_Timestamp);
    uint64_t v16 = v25;
    sub_1C4496BD8();
    uint64_t v15 = v16;
    uint64_t result = sub_1C3F96610((uint64_t)v11, type metadata accessor for Proto_Timestamp);
    if (v16) {
      return result;
    }
  }
  uint64_t v18 = (_DWORD *)(v12
                 + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__length);
  swift_beginAccess();
  if (!*v18 || (uint64_t result = sub_1C4496BA8(), !v15))
  {
    uint64_t v19 = v12
        + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
    swift_beginAccess();
    if (!*(void *)(*(void *)v19 + 16)
      || (sub_1C3F7251C(&qword_1EBBC06F0, (void (*)(uint64_t))type metadata accessor for Proto_Timestamp),
          swift_bridgeObjectRetain(),
          sub_1C4496BC8(),
          uint64_t result = swift_bridgeObjectRelease(),
          !v15))
    {
      uint64_t v20 = v12
          + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__child;
      swift_beginAccess();
      if (!*(void *)(*(void *)v20 + 16)
        || (swift_bridgeObjectRetain(), sub_1C4496AE8(), uint64_t result = swift_bridgeObjectRelease(), !v15))
      {
        uint64_t v21 = v12
            + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removedAddedBy;
        swift_beginAccess();
        if (!*(void *)(*(void *)v21 + 16)
          || (sub_1C3F7251C(&qword_1EBBC06F0, (void (*)(uint64_t))type metadata accessor for Proto_Timestamp),
              swift_bridgeObjectRetain(),
              sub_1C4496BC8(),
              uint64_t result = swift_bridgeObjectRelease(),
              !v15))
        {
          uint64_t v22 = (uint64_t *)(v12
                          + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__contentOptions);
          uint64_t result = swift_beginAccess();
          if (*v22)
          {
            char v23 = *((unsigned char *)v22 + 8);
            uint64_t v26 = *v22;
            char v27 = v23;
            sub_1C4414210();
            return sub_1C4496B18();
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C3F97DE4()
{
  if (!*(void *)(*v0 + 16)
    || (type metadata accessor for Proto_Value(0),
        sub_1C3F7251C(&qword_1EBBBF8E0, (void (*)(uint64_t))type metadata accessor for Proto_Value),
        uint64_t result = sub_1C4496BC8(),
        !v1))
  {
    uint64_t v3 = v0[1];
    unint64_t v4 = v0[2];
    switch(v4 >> 62)
    {
      case 1uLL:
        if ((int)v3 != v3 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v4 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = sub_1C4496B38();
        if (!v1)
        {
LABEL_10:
          type metadata accessor for Proto_KeyPath(0);
          uint64_t result = sub_1C4496878();
        }
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for Proto_KeyPath(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0550);
}

uint64_t sub_1C3F97F64(uint64_t a1)
{
  uint64_t v25 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v27 = (uint64_t)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v1 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  uint64_t v11 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = v1 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  uint64_t v13 = type metadata accessor for Proto_CRDT(0);
  int v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v12, 1, 1, v13);
  uint64_t v15 = v1 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  uint64_t v26 = v1;
  uint64_t v16 = type metadata accessor for Proto_Version(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = v1
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__partialValue;
  v14(v1 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__partialValue, 1, 1, v13);
  uint64_t v18 = v25;
  uint64_t v19 = v25 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__key;
  swift_beginAccess();
  sub_1C3F970C4(v19, (uint64_t)v9, &qword_1EBBC0540);
  swift_beginAccess();
  sub_1C3F98338((uint64_t)v9, v10, &qword_1EBBC0540);
  swift_endAccess();
  uint64_t v20 = v18 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1C3F970C4(v20, (uint64_t)v6, &qword_1EBBC04F8);
  swift_beginAccess();
  sub_1C3F98338((uint64_t)v6, v12, &qword_1EBBC04F8);
  swift_endAccess();
  uint64_t v21 = v18 + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy;
  swift_beginAccess();
  uint64_t v22 = v27;
  sub_1C3F970C4(v21, v27, &qword_1EBBC0578);
  swift_beginAccess();
  sub_1C3F98338(v22, v15, &qword_1EBBC0578);
  swift_endAccess();
  uint64_t v23 = v18
      + OBJC_IVAR____TtCVV9Coherence9Proto_Set7ElementP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__partialValue;
  swift_beginAccess();
  sub_1C3F970C4(v23, (uint64_t)v6, &qword_1EBBC04F8);
  swift_release();
  swift_beginAccess();
  sub_1C3F98338((uint64_t)v6, v17, &qword_1EBBC04F8);
  swift_endAccess();
  return v26;
}

uint64_t sub_1C3F98338(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F9839C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0560);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v37 = (uint64_t)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v36 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v34 = (uint64_t)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v40 = (uint64_t)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for Proto_CRDT(0);
  uint64_t v39 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  uint64_t v35 = (uint64_t)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Proto_Version(0);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v44 = a3;
  if (!v21 || (uint64_t result = sub_1C4496BB8(), !v4))
  {
    swift_beginAccess();
    if (!*(void *)(a1 + 24)
      || (char v23 = *(unsigned char *)(a1 + 32),
          uint64_t v42 = *(void *)(a1 + 24),
          char v43 = v23,
          sub_1C44141BC(),
          uint64_t result = sub_1C4496B18(),
          !v4))
    {
      v33[1] = a4;
      uint64_t v24 = a1
          + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
      swift_beginAccess();
      sub_1C3F970C4(v24, (uint64_t)v16, &qword_1EBBC0578);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
      {
        sub_1C3F962E0((uint64_t)v16, &qword_1EBBC0578);
      }
      else
      {
        sub_1C3F92E00((uint64_t)v16, (uint64_t)v20, type metadata accessor for Proto_Version);
        sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
        sub_1C4496BD8();
        uint64_t result = sub_1C3F96610((uint64_t)v20, type metadata accessor for Proto_Version);
        if (v4) {
          return result;
        }
      }
      uint64_t v25 = a1 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
      swift_beginAccess();
      uint64_t v26 = v40;
      sub_1C3F970C4(v25, v40, &qword_1EBBC04F8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v26, 1, v41) == 1)
      {
        sub_1C3F962E0(v26, &qword_1EBBC04F8);
      }
      else
      {
        uint64_t v27 = v26;
        uint64_t v28 = v35;
        sub_1C3F92E00(v27, v35, type metadata accessor for Proto_CRDT);
        sub_1C3F7251C(&qword_1EBBC0680, (void (*)(uint64_t))type metadata accessor for Proto_CRDT);
        sub_1C4496BD8();
        uint64_t result = sub_1C3F96610(v28, type metadata accessor for Proto_CRDT);
        if (v4) {
          return result;
        }
      }
      uint64_t v29 = a1
          + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
      swift_beginAccess();
      uint64_t v30 = v37;
      sub_1C3F970C4(v29, v37, &qword_1EBBC0560);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v30, 1, v38) == 1)
      {
        return sub_1C3F962E0(v30, &qword_1EBBC0560);
      }
      else
      {
        uint64_t v31 = v30;
        uint64_t v32 = v34;
        sub_1C3F92E00(v31, v34, type metadata accessor for Proto_KeyPath);
        sub_1C3F7251C(&qword_1EBBBC770, (void (*)(uint64_t))type metadata accessor for Proto_KeyPath);
        sub_1C4496BD8();
        return sub_1C3F96610(v32, type metadata accessor for Proto_KeyPath);
      }
    }
  }
  return result;
}

uint64_t sub_1C3F98A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_366Tm_0);
}

uint64_t sub_1C3F98A3C(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v6 = sub_1C4496898();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
      type metadata accessor for Proto_Register(0);
      goto LABEL_12;
    case 1:
    case 2:
      uint64_t v3 = sub_1C4496898();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      type metadata accessor for Proto_Set(0);
      goto LABEL_12;
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = *(int *)(type metadata accessor for Proto_Struct(0) + 28);
      goto LABEL_8;
    case 4:
    case 5:
      uint64_t v4 = sub_1C4496898();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      type metadata accessor for Proto_Sequence(0);
      goto LABEL_12;
    case 6:
    case 8:
      uint64_t v5 = sub_1C4496898();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      type metadata accessor for Proto_OrderedSet(0);
      goto LABEL_12;
    case 7:
      uint64_t v11 = sub_1C4496898();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
      type metadata accessor for Proto_Counter(0);
LABEL_12:
      uint64_t result = swift_release();
      break;
    case 9:
      swift_bridgeObjectRelease();
      uint64_t v7 = *(int *)(type metadata accessor for Proto_CustomCRDT(0) + 20);
LABEL_8:
      uint64_t v8 = a1 + v7;
      uint64_t v9 = sub_1C4496898();
      uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
      uint64_t result = v10(v8, v9);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C3F98C90(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_1C4496898();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_1C3F98D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = a3;
  uint64_t v47 = a4;
  uint64_t v45 = a2;
  uint64_t v40 = type metadata accessor for Proto_CustomCRDT(0);
  MEMORY[0x1F4188790](v40);
  uint64_t v41 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for Proto_Counter(0);
  MEMORY[0x1F4188790](v38);
  uint64_t v39 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for Proto_OrderedSet(0);
  uint64_t v7 = MEMORY[0x1F4188790](v44);
  uint64_t v37 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v36 = (char *)&v33 - v9;
  uint64_t v43 = type metadata accessor for Proto_Sequence(0);
  uint64_t v10 = MEMORY[0x1F4188790](v43);
  uint64_t v35 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v34 = (char *)&v33 - v12;
  uint64_t v13 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for Proto_Set(0);
  uint64_t v16 = MEMORY[0x1F4188790](v42);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v33 - v19;
  uint64_t v21 = type metadata accessor for Proto_Register(0);
  MEMORY[0x1F4188790](v21);
  char v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  MEMORY[0x1F4188790](v24 - 8);
  uint64_t v26 = (char *)&v33 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = a1 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v27, (uint64_t)v26, &qword_1EBBC0648);
  uint64_t v28 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v26, 1, v28);
  if (result != 1)
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        sub_1C3F92E00((uint64_t)v26, (uint64_t)v20, type metadata accessor for Proto_Set);
        sub_1C3F7251C(&qword_1EBBC0220, (void (*)(uint64_t))type metadata accessor for Proto_Set);
        sub_1C4496BD8();
        uint64_t v31 = type metadata accessor for Proto_Set;
        uint64_t v32 = (uint64_t)v20;
        return sub_1C3F96610(v32, v31);
      case 2u:
        sub_1C3F92E00((uint64_t)v26, (uint64_t)v18, type metadata accessor for Proto_Set);
        sub_1C3F7251C(&qword_1EBBC0220, (void (*)(uint64_t))type metadata accessor for Proto_Set);
        sub_1C4496BD8();
        uint64_t v31 = type metadata accessor for Proto_Set;
        uint64_t v32 = (uint64_t)v18;
        return sub_1C3F96610(v32, v31);
      case 3u:
        sub_1C3F92E00((uint64_t)v26, (uint64_t)v15, type metadata accessor for Proto_Struct);
        sub_1C3F7251C(&qword_1EBBC0238, (void (*)(uint64_t))type metadata accessor for Proto_Struct);
        sub_1C4496BD8();
        uint64_t v31 = type metadata accessor for Proto_Struct;
        uint64_t v32 = (uint64_t)v15;
        return sub_1C3F96610(v32, v31);
      case 4u:
        char v23 = v34;
        sub_1C3F92E00((uint64_t)v26, (uint64_t)v34, type metadata accessor for Proto_Sequence);
        sub_1C3F7251C(&qword_1EBBBC028, (void (*)(uint64_t))type metadata accessor for Proto_Sequence);
        goto LABEL_9;
      case 5u:
        char v23 = v35;
        sub_1C3F92E00((uint64_t)v26, (uint64_t)v35, type metadata accessor for Proto_Sequence);
        sub_1C3F7251C(&qword_1EBBBC028, (void (*)(uint64_t))type metadata accessor for Proto_Sequence);
LABEL_9:
        sub_1C4496BD8();
        uint64_t v30 = type metadata accessor for Proto_Sequence;
        break;
      case 6u:
        char v23 = v36;
        sub_1C3F92E00((uint64_t)v26, (uint64_t)v36, type metadata accessor for Proto_OrderedSet);
        sub_1C3F7251C(&qword_1EBBBC088, (void (*)(uint64_t))type metadata accessor for Proto_OrderedSet);
        goto LABEL_13;
      case 7u:
        char v23 = v39;
        sub_1C3F92E00((uint64_t)v26, (uint64_t)v39, type metadata accessor for Proto_Counter);
        sub_1C3F7251C(&qword_1EA3A04A0, (void (*)(uint64_t))type metadata accessor for Proto_Counter);
        sub_1C4496BD8();
        uint64_t v30 = type metadata accessor for Proto_Counter;
        break;
      case 8u:
        char v23 = v37;
        sub_1C3F92E00((uint64_t)v26, (uint64_t)v37, type metadata accessor for Proto_OrderedSet);
        sub_1C3F7251C(&qword_1EBBBC088, (void (*)(uint64_t))type metadata accessor for Proto_OrderedSet);
LABEL_13:
        sub_1C4496BD8();
        uint64_t v30 = type metadata accessor for Proto_OrderedSet;
        break;
      case 9u:
        char v23 = v41;
        sub_1C3F92E00((uint64_t)v26, (uint64_t)v41, type metadata accessor for Proto_CustomCRDT);
        sub_1C3F7251C(&qword_1EA39AED0, (void (*)(uint64_t))type metadata accessor for Proto_CustomCRDT);
        sub_1C4496BD8();
        uint64_t v30 = type metadata accessor for Proto_CustomCRDT;
        break;
      default:
        sub_1C3F92E00((uint64_t)v26, (uint64_t)v23, type metadata accessor for Proto_Register);
        sub_1C3F7251C(&qword_1EBBBF270, (void (*)(uint64_t))type metadata accessor for Proto_Register);
        sub_1C4496BD8();
        uint64_t v30 = type metadata accessor for Proto_Register;
        break;
    }
    uint64_t v31 = v30;
    uint64_t v32 = (uint64_t)v23;
    return sub_1C3F96610(v32, v31);
  }
  return result;
}

uint64_t type metadata accessor for Proto_Set(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0738);
}

uint64_t type metadata accessor for Proto_Register(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC06C0);
}

uint64_t sub_1C3F99694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v429 = a4;
  uint64_t v430 = a3;
  uint64_t v427 = a1;
  uint64_t v413 = type metadata accessor for Proto_CustomCRDT(0);
  v417 = *(void (***)(uint64_t, void, uint64_t, uint64_t))(v413 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v413);
  uint64_t v387 = (char *)&v331 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v354 = (uint64_t)&v331 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0718);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  v425 = (char *)&v331 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v409 = (uint64_t)&v331 - v11;
  uint64_t v418 = type metadata accessor for Proto_Counter(0);
  v405 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v418 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v418);
  v386 = (char *)&v331 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v353 = (uint64_t)&v331 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC06B8);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v381 = (uint64_t)&v331 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  v398 = (char *)&v331 - v18;
  uint64_t v411 = type metadata accessor for Proto_OrderedSet(0);
  v404 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v411 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v411);
  uint64_t v360 = (uint64_t)&v331 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v346 = (uint64_t)&v331 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v359 = (uint64_t)&v331 - v24;
  MEMORY[0x1F4188790](v23);
  uint64_t v352 = (uint64_t)&v331 - v25;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0730);
  uint64_t v27 = MEMORY[0x1F4188790](v26 - 8);
  v385 = (char *)&v331 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  v421 = (char *)&v331 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v380 = (uint64_t)&v331 - v32;
  MEMORY[0x1F4188790](v31);
  uint64_t v416 = (uint64_t)&v331 - v33;
  uint64_t v419 = type metadata accessor for Proto_Sequence(0);
  v403 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v419 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v419);
  uint64_t v358 = (uint64_t)&v331 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v351 = (uint64_t)&v331 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v357 = (uint64_t)&v331 - v39;
  MEMORY[0x1F4188790](v38);
  uint64_t v350 = (uint64_t)&v331 - v40;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC06E8);
  uint64_t v42 = MEMORY[0x1F4188790](v41 - 8);
  uint64_t v379 = (uint64_t)&v331 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  uint64_t v408 = (uint64_t)&v331 - v45;
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  uint64_t v378 = (uint64_t)&v331 - v47;
  MEMORY[0x1F4188790](v46);
  uint64_t v407 = (uint64_t)&v331 - v48;
  uint64_t v426 = type metadata accessor for Proto_Struct(0);
  v402 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v426 - 8);
  uint64_t v49 = MEMORY[0x1F4188790](v426);
  v384 = (char *)&v331 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v49);
  uint64_t v349 = (uint64_t)&v331 - v51;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC06A0);
  uint64_t v53 = MEMORY[0x1F4188790](v52 - 8);
  uint64_t v377 = (uint64_t)&v331 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v53);
  uint64_t v415 = (uint64_t)&v331 - v55;
  uint64_t v410 = type metadata accessor for Proto_Set(0);
  v401 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v410 - 8);
  uint64_t v56 = MEMORY[0x1F4188790](v410);
  v383 = (char *)&v331 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = MEMORY[0x1F4188790](v56);
  uint64_t v348 = (uint64_t)&v331 - v59;
  uint64_t v60 = MEMORY[0x1F4188790](v58);
  uint64_t v382 = (char *)&v331 - v61;
  MEMORY[0x1F4188790](v60);
  uint64_t v347 = (uint64_t)&v331 - v62;
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC0748);
  uint64_t v64 = MEMORY[0x1F4188790](v63 - 8);
  uint64_t v376 = (uint64_t)&v331 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = MEMORY[0x1F4188790](v64);
  uint64_t v414 = (uint64_t)&v331 - v67;
  uint64_t v68 = MEMORY[0x1F4188790](v66);
  uint64_t v375 = (uint64_t)&v331 - v69;
  MEMORY[0x1F4188790](v68);
  uint64_t v406 = (uint64_t)&v331 - v70;
  uint64_t v412 = type metadata accessor for Proto_Register(0);
  v400 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v412 - 8);
  uint64_t v71 = MEMORY[0x1F4188790](v412);
  uint64_t v356 = (uint64_t)&v331 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v71);
  uint64_t v345 = (uint64_t)&v331 - v73;
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  uint64_t v75 = MEMORY[0x1F4188790](v74 - 8);
  uint64_t v397 = (uint64_t)&v331 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = MEMORY[0x1F4188790](v75);
  uint64_t v396 = (uint64_t)&v331 - v78;
  uint64_t v79 = MEMORY[0x1F4188790](v77);
  uint64_t v395 = (uint64_t)&v331 - v80;
  uint64_t v81 = MEMORY[0x1F4188790](v79);
  uint64_t v394 = (uint64_t)&v331 - v82;
  uint64_t v83 = MEMORY[0x1F4188790](v81);
  uint64_t v393 = (uint64_t)&v331 - v84;
  uint64_t v85 = MEMORY[0x1F4188790](v83);
  uint64_t v392 = (uint64_t)&v331 - v86;
  uint64_t v87 = MEMORY[0x1F4188790](v85);
  uint64_t v391 = (uint64_t)&v331 - v88;
  uint64_t v89 = MEMORY[0x1F4188790](v87);
  uint64_t v390 = (uint64_t)&v331 - v90;
  uint64_t v91 = MEMORY[0x1F4188790](v89);
  uint64_t v389 = (uint64_t)&v331 - v92;
  uint64_t v93 = MEMORY[0x1F4188790](v91);
  uint64_t v420 = (uint64_t)&v331 - v94;
  uint64_t v95 = MEMORY[0x1F4188790](v93);
  uint64_t v423 = (uint64_t)&v331 - v96;
  MEMORY[0x1F4188790](v95);
  uint64_t v388 = (uint64_t)&v331 - v97;
  uint64_t v428 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  v399 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v428 - 8);
  uint64_t v98 = MEMORY[0x1F4188790](v428);
  uint64_t v367 = (uint64_t)&v331 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = MEMORY[0x1F4188790](v98);
  uint64_t v374 = (uint64_t)&v331 - v101;
  uint64_t v102 = MEMORY[0x1F4188790](v100);
  uint64_t v366 = (uint64_t)&v331 - v103;
  uint64_t v104 = MEMORY[0x1F4188790](v102);
  uint64_t v373 = (uint64_t)&v331 - v105;
  uint64_t v106 = MEMORY[0x1F4188790](v104);
  uint64_t v365 = (uint64_t)&v331 - v107;
  uint64_t v108 = MEMORY[0x1F4188790](v106);
  uint64_t v372 = (uint64_t)&v331 - v109;
  uint64_t v110 = MEMORY[0x1F4188790](v108);
  uint64_t v364 = (uint64_t)&v331 - v111;
  uint64_t v112 = MEMORY[0x1F4188790](v110);
  uint64_t v371 = (uint64_t)&v331 - v113;
  uint64_t v114 = MEMORY[0x1F4188790](v112);
  uint64_t v363 = (uint64_t)&v331 - v115;
  uint64_t v116 = MEMORY[0x1F4188790](v114);
  uint64_t v370 = (uint64_t)&v331 - v117;
  uint64_t v118 = MEMORY[0x1F4188790](v116);
  uint64_t v362 = (uint64_t)&v331 - v119;
  uint64_t v120 = MEMORY[0x1F4188790](v118);
  uint64_t v369 = (uint64_t)&v331 - v121;
  uint64_t v122 = MEMORY[0x1F4188790](v120);
  uint64_t v361 = (uint64_t)&v331 - v123;
  uint64_t v124 = MEMORY[0x1F4188790](v122);
  uint64_t v368 = (uint64_t)&v331 - v125;
  uint64_t v126 = MEMORY[0x1F4188790](v124);
  uint64_t v128 = (char *)&v331 - v127;
  uint64_t v129 = MEMORY[0x1F4188790](v126);
  uint64_t v131 = (char *)&v331 - v130;
  uint64_t v132 = MEMORY[0x1F4188790](v129);
  uint64_t v134 = (char *)&v331 - v133;
  uint64_t v135 = MEMORY[0x1F4188790](v132);
  char v137 = (char *)&v331 - v136;
  uint64_t v138 = MEMORY[0x1F4188790](v135);
  uint64_t v140 = (char *)&v331 - v139;
  MEMORY[0x1F4188790](v138);
  uint64_t v142 = (char *)&v331 - v141;
  uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC06D0);
  uint64_t v144 = MEMORY[0x1F4188790](v143 - 8);
  uint64_t v146 = (char *)&v331 - ((v145 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v144);
  uint64_t v148 = (char *)&v331 - v147;
  uint64_t v422 = v427 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v427 = a2;
  uint64_t v149 = v424;
  uint64_t result = sub_1C4496908();
  if (!v149)
  {
    uint64_t v340 = v146;
    uint64_t v355 = v148;
    uint64_t v334 = v142;
    uint64_t v331 = v140;
    uint64_t v335 = v137;
    uint64_t v332 = v134;
    uint64_t v336 = v131;
    uint64_t v333 = v128;
    uint64_t v343 = v417 + 7;
    v424 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v399 + 6);
    uint64_t v339 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v417 + 6);
    v417 = v399 + 7;
    v399 = v404 + 7;
    uint64_t v344 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v404 + 6);
    uint64_t v342 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v405 + 7);
    uint64_t v338 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v405 + 6);
    v405 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v403 + 7);
    v403 += 6;
    uint64_t v341 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v402 + 7);
    uint64_t v337 = v402 + 6;
    v404 = v401 + 7;
    v402 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v401 + 6);
    v401 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v400 + 7);
    v400 += 6;
    uint64_t v152 = &qword_1EBBC06E8;
    uint64_t v154 = (uint64_t)v425;
    uint64_t v153 = v426;
    uint64_t v156 = (uint64_t)v421;
    uint64_t v155 = v422;
    while ((v151 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          unint64_t v160 = *v401;
          (*v401)((uint64_t)v355, 1, 1, v412);
          uint64_t v161 = v388;
          sub_1C3F970C4(v155, v388, &qword_1EBBC0648);
          if ((*v424)(v161, 1, v428) == 1)
          {
            sub_1C3F962E0(v161, &qword_1EBBC0648);
          }
          else
          {
            uint64_t v192 = v161;
            uint64_t v193 = (uint64_t)v334;
            sub_1C3F92E00(v192, (uint64_t)v334, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v194 = v193;
            uint64_t v195 = (uint64_t)v331;
            sub_1C3F92E00(v194, (uint64_t)v331, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload())
            {
              sub_1C3F96610(v195, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            }
            else
            {
              uint64_t v319 = (uint64_t)v355;
              sub_1C3F962E0((uint64_t)v355, &qword_1EBBC06D0);
              uint64_t v320 = v195;
              uint64_t v321 = v345;
              sub_1C3F92E00(v320, v345, type metadata accessor for Proto_Register);
              sub_1C3F92E00(v321, v319, type metadata accessor for Proto_Register);
              v160(v319, 0, 1, v412);
            }
          }
          uint64_t v322 = v420;
          sub_1C3F7251C(&qword_1EBBBF270, (void (*)(uint64_t))type metadata accessor for Proto_Register);
          uint64_t v323 = (uint64_t)v355;
          uint64_t v324 = v412;
          sub_1C4496A78();
          uint64_t v325 = v323;
          uint64_t v326 = (uint64_t)v340;
          sub_1C3F961BC(v325, (uint64_t)v340, &qword_1EBBC06D0);
          if ((*v400)(v326, 1, v324) == 1)
          {
            sub_1C3F962E0(v326, &qword_1EBBC06D0);
            uint64_t v155 = v422;
          }
          else
          {
            uint64_t v327 = v356;
            sub_1C3F92E00(v326, v356, type metadata accessor for Proto_Register);
            uint64_t v328 = v327;
            uint64_t v329 = v423;
            sub_1C3F92E00(v328, v423, type metadata accessor for Proto_Register);
            uint64_t v330 = v428;
            swift_storeEnumTagMultiPayload();
            (*v417)(v329, 0, 1, v330);
            sub_1C3F961BC(v329, v322, &qword_1EBBC0648);
            uint64_t v155 = v422;
            swift_beginAccess();
            sub_1C3F98338(v322, v155, &qword_1EBBC0648);
            swift_endAccess();
          }
          uint64_t v153 = v426;
          goto LABEL_7;
        case 2:
          uint64_t v162 = *v404;
          uint64_t v163 = v406;
          uint64_t v164 = v410;
          (*v404)(v406, 1, 1, v410);
          uint64_t v165 = v389;
          sub_1C3F970C4(v155, v389, &qword_1EBBC0648);
          if ((*v424)(v165, 1, v428) == 1)
          {
            sub_1C3F962E0(v165, &qword_1EBBC0648);
          }
          else
          {
            uint64_t v196 = v165;
            uint64_t v197 = (uint64_t)v335;
            sub_1C3F92E00(v196, (uint64_t)v335, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v198 = v197;
            uint64_t v199 = (uint64_t)v332;
            sub_1C3F92E00(v198, (uint64_t)v332, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              sub_1C3F962E0(v163, (uint64_t *)&unk_1EBBC0748);
              uint64_t v200 = v347;
              sub_1C3F92E00(v199, v347, type metadata accessor for Proto_Set);
              uint64_t v163 = v406;
              sub_1C3F92E00(v200, v406, type metadata accessor for Proto_Set);
              v162(v163, 0, 1, v164);
            }
            else
            {
              sub_1C3F96610(v199, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            }
          }
          uint64_t v254 = (uint64_t)v382;
          sub_1C3F7251C(&qword_1EBBC0220, (void (*)(uint64_t))type metadata accessor for Proto_Set);
          sub_1C4496A78();
          uint64_t v255 = v375;
          sub_1C3F961BC(v163, v375, (uint64_t *)&unk_1EBBC0748);
          if ((*v402)(v255, 1, v164) == 1)
          {
            sub_1C3F962E0(v255, (uint64_t *)&unk_1EBBC0748);
          }
          else
          {
            sub_1C3F92E00(v255, v254, type metadata accessor for Proto_Set);
            uint64_t v256 = v423;
            sub_1C3F92E00(v254, v423, type metadata accessor for Proto_Set);
            uint64_t v257 = v428;
            swift_storeEnumTagMultiPayload();
            uint64_t v258 = v257;
            uint64_t v155 = v422;
            (*v417)(v256, 0, 1, v258);
            uint64_t v259 = v256;
            uint64_t v260 = v420;
            sub_1C3F961BC(v259, v420, &qword_1EBBC0648);
            swift_beginAccess();
            sub_1C3F98338(v260, v155, &qword_1EBBC0648);
            swift_endAccess();
          }
          uint64_t v152 = &qword_1EBBC06E8;
          uint64_t v154 = (uint64_t)v425;
          goto LABEL_6;
        case 3:
          uint64_t v166 = *v404;
          uint64_t v167 = v410;
          (*v404)(v414, 1, 1, v410);
          uint64_t v168 = v390;
          sub_1C3F970C4(v155, v390, &qword_1EBBC0648);
          if ((*v424)(v168, 1, v428) == 1)
          {
            sub_1C3F962E0(v168, &qword_1EBBC0648);
          }
          else
          {
            uint64_t v201 = v168;
            uint64_t v202 = (uint64_t)v336;
            sub_1C3F92E00(v201, (uint64_t)v336, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v203 = v202;
            uint64_t v204 = (uint64_t)v333;
            sub_1C3F92E00(v203, (uint64_t)v333, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 2)
            {
              uint64_t v205 = v414;
              sub_1C3F962E0(v414, (uint64_t *)&unk_1EBBC0748);
              uint64_t v206 = v348;
              sub_1C3F92E00(v204, v348, type metadata accessor for Proto_Set);
              sub_1C3F92E00(v206, v205, type metadata accessor for Proto_Set);
              v166(v205, 0, 1, v167);
            }
            else
            {
              sub_1C3F96610(v204, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            }
          }
          uint64_t v261 = (uint64_t)v383;
          uint64_t v262 = v423;
          sub_1C3F7251C(&qword_1EBBC0220, (void (*)(uint64_t))type metadata accessor for Proto_Set);
          uint64_t v263 = v414;
          sub_1C4496A78();
          uint64_t v264 = v263;
          uint64_t v265 = v376;
          sub_1C3F961BC(v264, v376, (uint64_t *)&unk_1EBBC0748);
          if ((*v402)(v265, 1, v167) == 1)
          {
            sub_1C3F962E0(v265, (uint64_t *)&unk_1EBBC0748);
          }
          else
          {
            sub_1C3F92E00(v265, v261, type metadata accessor for Proto_Set);
            sub_1C3F92E00(v261, v262, type metadata accessor for Proto_Set);
            uint64_t v266 = v428;
            swift_storeEnumTagMultiPayload();
            uint64_t v267 = v266;
            uint64_t v155 = v422;
            (*v417)(v262, 0, 1, v267);
            uint64_t v268 = v262;
            uint64_t v269 = v420;
            sub_1C3F961BC(v268, v420, &qword_1EBBC0648);
            swift_beginAccess();
            sub_1C3F98338(v269, v155, &qword_1EBBC0648);
            swift_endAccess();
          }
          uint64_t v152 = &qword_1EBBC06E8;
          uint64_t v154 = (uint64_t)v425;
          uint64_t v156 = (uint64_t)v421;
          goto LABEL_6;
        case 4:
          uint64_t v169 = *v341;
          (*v341)(v415, 1, 1, v153);
          uint64_t v170 = v391;
          sub_1C3F970C4(v155, v391, &qword_1EBBC0648);
          if ((*v424)(v170, 1, v428) == 1)
          {
            uint64_t v171 = v156;
            sub_1C3F962E0(v170, &qword_1EBBC0648);
          }
          else
          {
            uint64_t v207 = v170;
            uint64_t v208 = v368;
            sub_1C3F92E00(v207, v368, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v209 = v208;
            uint64_t v210 = v361;
            sub_1C3F92E00(v209, v361, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            uint64_t v171 = v156;
            if (swift_getEnumCaseMultiPayload() == 3)
            {
              uint64_t v211 = v415;
              sub_1C3F962E0(v415, &qword_1EBBC06A0);
              uint64_t v212 = v349;
              sub_1C3F92E00(v210, v349, type metadata accessor for Proto_Struct);
              sub_1C3F92E00(v212, v211, type metadata accessor for Proto_Struct);
              v169(v211, 0, 1, v426);
            }
            else
            {
              sub_1C3F96610(v210, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            }
          }
          uint64_t v270 = (uint64_t)v384;
          uint64_t v271 = v423;
          sub_1C3F7251C(&qword_1EBBC0238, (void (*)(uint64_t))type metadata accessor for Proto_Struct);
          uint64_t v272 = v415;
          uint64_t v273 = v426;
          sub_1C4496A78();
          uint64_t v274 = v272;
          uint64_t v275 = v377;
          sub_1C3F961BC(v274, v377, &qword_1EBBC06A0);
          if ((*v337)(v275, 1, v273) == 1)
          {
            sub_1C3F962E0(v275, &qword_1EBBC06A0);
          }
          else
          {
            sub_1C3F92E00(v275, v270, type metadata accessor for Proto_Struct);
            sub_1C3F92E00(v270, v271, type metadata accessor for Proto_Struct);
            uint64_t v276 = v428;
            swift_storeEnumTagMultiPayload();
            uint64_t v277 = v276;
            uint64_t v155 = v422;
            (*v417)(v271, 0, 1, v277);
            uint64_t v278 = v271;
            uint64_t v279 = v420;
            sub_1C3F961BC(v278, v420, &qword_1EBBC0648);
            swift_beginAccess();
            sub_1C3F98338(v279, v155, &qword_1EBBC0648);
            swift_endAccess();
          }
          uint64_t v156 = v171;
          uint64_t v154 = (uint64_t)v425;
          goto LABEL_92;
        case 5:
          uint64_t v172 = *v405;
          (*v405)(v407, 1, 1, v419);
          uint64_t v173 = v392;
          sub_1C3F970C4(v155, v392, &qword_1EBBC0648);
          if ((*v424)(v173, 1, v428) == 1)
          {
            uint64_t v174 = v152;
            sub_1C3F962E0(v173, &qword_1EBBC0648);
          }
          else
          {
            uint64_t v213 = v173;
            uint64_t v214 = v369;
            sub_1C3F92E00(v213, v369, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v215 = v214;
            uint64_t v216 = v362;
            sub_1C3F92E00(v215, v362, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 4)
            {
              uint64_t v217 = v407;
              uint64_t v174 = v152;
              sub_1C3F962E0(v407, v152);
              uint64_t v218 = v216;
              uint64_t v219 = v217;
              uint64_t v220 = v350;
              sub_1C3F92E00(v218, v350, type metadata accessor for Proto_Sequence);
              sub_1C3F92E00(v220, v219, type metadata accessor for Proto_Sequence);
              v172(v219, 0, 1, v419);
              goto LABEL_67;
            }
            uint64_t v174 = v152;
            sub_1C3F96610(v216, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
          }
          uint64_t v219 = v407;
LABEL_67:
          sub_1C3F7251C(&qword_1EBBBC028, (void (*)(uint64_t))type metadata accessor for Proto_Sequence);
          uint64_t v280 = v419;
          sub_1C4496A78();
          uint64_t v281 = v219;
          uint64_t v282 = v378;
          uint64_t v152 = v174;
          sub_1C3F961BC(v281, v378, v174);
          if ((*v403)(v282, 1, v280) == 1)
          {
            sub_1C3F962E0(v282, v174);
            goto LABEL_76;
          }
          uint64_t v283 = v357;
          sub_1C3F92E00(v282, v357, type metadata accessor for Proto_Sequence);
          uint64_t v284 = v423;
          sub_1C3F92E00(v283, v423, type metadata accessor for Proto_Sequence);
          uint64_t v285 = v428;
          swift_storeEnumTagMultiPayload();
          uint64_t v286 = v285;
          uint64_t v155 = v422;
          (*v417)(v284, 0, 1, v286);
          uint64_t v287 = v284;
          uint64_t v288 = v420;
          sub_1C3F961BC(v287, v420, &qword_1EBBC0648);
          goto LABEL_75;
        case 6:
          uint64_t v175 = *v405;
          (*v405)(v408, 1, 1, v419);
          uint64_t v176 = v393;
          sub_1C3F970C4(v155, v393, &qword_1EBBC0648);
          if ((*v424)(v176, 1, v428) == 1)
          {
            uint64_t v177 = v152;
            sub_1C3F962E0(v176, &qword_1EBBC0648);
          }
          else
          {
            uint64_t v221 = v176;
            uint64_t v222 = v370;
            sub_1C3F92E00(v221, v370, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v223 = v222;
            uint64_t v224 = v363;
            sub_1C3F92E00(v223, v363, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 5)
            {
              uint64_t v225 = v408;
              uint64_t v177 = v152;
              sub_1C3F962E0(v408, v152);
              uint64_t v226 = v351;
              sub_1C3F92E00(v224, v351, type metadata accessor for Proto_Sequence);
              sub_1C3F92E00(v226, v225, type metadata accessor for Proto_Sequence);
              v175(v225, 0, 1, v419);
              goto LABEL_72;
            }
            uint64_t v177 = v152;
            sub_1C3F96610(v224, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
          }
          uint64_t v225 = v408;
LABEL_72:
          uint64_t v289 = v423;
          sub_1C3F7251C(&qword_1EBBBC028, (void (*)(uint64_t))type metadata accessor for Proto_Sequence);
          uint64_t v290 = v419;
          sub_1C4496A78();
          uint64_t v291 = v225;
          uint64_t v292 = v379;
          uint64_t v152 = v177;
          sub_1C3F961BC(v291, v379, v177);
          if ((*v403)(v292, 1, v290) == 1)
          {
            sub_1C3F962E0(v292, v177);
            uint64_t v155 = v422;
          }
          else
          {
            uint64_t v293 = v358;
            sub_1C3F92E00(v292, v358, type metadata accessor for Proto_Sequence);
            uint64_t v152 = v177;
            sub_1C3F92E00(v293, v289, type metadata accessor for Proto_Sequence);
            uint64_t v294 = v428;
            swift_storeEnumTagMultiPayload();
            (*v417)(v289, 0, 1, v294);
            uint64_t v295 = v289;
            uint64_t v288 = v420;
            sub_1C3F961BC(v295, v420, &qword_1EBBC0648);
            uint64_t v155 = v422;
LABEL_75:
            swift_beginAccess();
            sub_1C3F98338(v288, v155, &qword_1EBBC0648);
            swift_endAccess();
          }
LABEL_76:
          uint64_t v154 = (uint64_t)v425;
          uint64_t v153 = v426;
          goto LABEL_7;
        case 7:
          uint64_t v178 = *v399;
          uint64_t v179 = v411;
          (*v399)(v416, 1, 1, v411);
          uint64_t v180 = v394;
          sub_1C3F970C4(v155, v394, &qword_1EBBC0648);
          if ((*v424)(v180, 1, v428) == 1)
          {
            sub_1C3F962E0(v180, &qword_1EBBC0648);
          }
          else
          {
            uint64_t v227 = v180;
            uint64_t v228 = v371;
            sub_1C3F92E00(v227, v371, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v229 = v228;
            uint64_t v230 = v364;
            sub_1C3F92E00(v229, v364, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 6)
            {
              uint64_t v231 = v416;
              sub_1C3F962E0(v416, &qword_1EBBC0730);
              uint64_t v232 = v230;
              uint64_t v233 = v352;
              sub_1C3F92E00(v232, v352, type metadata accessor for Proto_OrderedSet);
              sub_1C3F92E00(v233, v231, type metadata accessor for Proto_OrderedSet);
              v178(v231, 0, 1, v179);
            }
            else
            {
              sub_1C3F96610(v230, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            }
          }
          uint64_t v296 = v423;
          sub_1C3F7251C(&qword_1EBBBC088, (void (*)(uint64_t))type metadata accessor for Proto_OrderedSet);
          uint64_t v297 = v416;
          sub_1C4496A78();
          uint64_t v298 = v297;
          uint64_t v299 = v380;
          sub_1C3F961BC(v298, v380, &qword_1EBBC0730);
          if ((*v344)(v299, 1, v179) == 1) {
            goto LABEL_88;
          }
          uint64_t v300 = v359;
          sub_1C3F92E00(v299, v359, type metadata accessor for Proto_OrderedSet);
          sub_1C3F92E00(v300, v296, type metadata accessor for Proto_OrderedSet);
          uint64_t v301 = v428;
          swift_storeEnumTagMultiPayload();
          uint64_t v302 = v301;
          uint64_t v155 = v422;
          (*v417)(v296, 0, 1, v302);
          uint64_t v303 = v296;
          uint64_t v304 = v420;
          sub_1C3F961BC(v303, v420, &qword_1EBBC0648);
          swift_beginAccess();
          uint64_t v305 = v304;
          uint64_t v306 = v155;
          goto LABEL_90;
        case 8:
          uint64_t v181 = *v342;
          uint64_t v182 = (uint64_t)v398;
          (*v342)(v398, 1, 1, v418);
          uint64_t v183 = v395;
          sub_1C3F970C4(v155, v395, &qword_1EBBC0648);
          if ((*v424)(v183, 1, v428) == 1)
          {
            sub_1C3F962E0(v183, &qword_1EBBC0648);
          }
          else
          {
            uint64_t v234 = v183;
            uint64_t v235 = v372;
            sub_1C3F92E00(v234, v372, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v236 = v235;
            uint64_t v237 = v365;
            sub_1C3F92E00(v236, v365, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 7)
            {
              sub_1C3F962E0(v182, &qword_1EBBC06B8);
              uint64_t v238 = v237;
              uint64_t v239 = v353;
              sub_1C3F92E00(v238, v353, type metadata accessor for Proto_Counter);
              sub_1C3F92E00(v239, v182, type metadata accessor for Proto_Counter);
              v181((char *)v182, 0, 1, v418);
              uint64_t v240 = (uint64_t)v386;
              goto LABEL_82;
            }
            sub_1C3F96610(v237, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
          }
          uint64_t v240 = (uint64_t)v386;
LABEL_82:
          sub_1C3F7251C(&qword_1EA3A04A0, (void (*)(uint64_t))type metadata accessor for Proto_Counter);
          sub_1C4496A78();
          uint64_t v307 = v381;
          sub_1C3F961BC(v182, v381, &qword_1EBBC06B8);
          if ((*v338)(v307, 1, v418) == 1)
          {
            sub_1C3F962E0(v307, &qword_1EBBC06B8);
            uint64_t v156 = (uint64_t)v421;
            uint64_t v155 = v422;
          }
          else
          {
            sub_1C3F92E00(v307, v240, type metadata accessor for Proto_Counter);
            uint64_t v308 = v423;
            sub_1C3F92E00(v240, v423, type metadata accessor for Proto_Counter);
            uint64_t v309 = v428;
            swift_storeEnumTagMultiPayload();
            (*v417)(v308, 0, 1, v309);
            uint64_t v310 = v308;
            uint64_t v311 = v420;
            sub_1C3F961BC(v310, v420, &qword_1EBBC0648);
            uint64_t v155 = v422;
            swift_beginAccess();
            sub_1C3F98338(v311, v155, &qword_1EBBC0648);
            swift_endAccess();
            uint64_t v156 = (uint64_t)v421;
          }
          uint64_t v153 = v426;
          uint64_t v152 = &qword_1EBBC06E8;
          uint64_t v154 = (uint64_t)v425;
LABEL_7:
          uint64_t result = sub_1C4496908();
          break;
        case 9:
          uint64_t v184 = *v399;
          uint64_t v185 = v411;
          (*v399)(v156, 1, 1, v411);
          uint64_t v186 = v396;
          sub_1C3F970C4(v155, v396, &qword_1EBBC0648);
          if ((*v424)(v186, 1, v428) == 1)
          {
            sub_1C3F962E0(v186, &qword_1EBBC0648);
          }
          else
          {
            uint64_t v241 = v186;
            uint64_t v242 = v373;
            sub_1C3F92E00(v241, v373, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v243 = v242;
            uint64_t v244 = v366;
            sub_1C3F92E00(v243, v366, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            if (swift_getEnumCaseMultiPayload() == 8)
            {
              sub_1C3F962E0(v156, &qword_1EBBC0730);
              uint64_t v245 = v244;
              uint64_t v246 = v346;
              sub_1C3F92E00(v245, v346, type metadata accessor for Proto_OrderedSet);
              sub_1C3F92E00(v246, v156, type metadata accessor for Proto_OrderedSet);
              v184(v156, 0, 1, v185);
            }
            else
            {
              sub_1C3F96610(v244, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            }
          }
          uint64_t v299 = (uint64_t)v385;
          uint64_t v312 = v423;
          sub_1C3F7251C(&qword_1EBBBC088, (void (*)(uint64_t))type metadata accessor for Proto_OrderedSet);
          sub_1C4496A78();
          sub_1C3F961BC(v156, v299, &qword_1EBBC0730);
          if ((*v344)(v299, 1, v185) == 1)
          {
LABEL_88:
            sub_1C3F962E0(v299, &qword_1EBBC0730);
          }
          else
          {
            uint64_t v313 = v360;
            sub_1C3F92E00(v299, v360, type metadata accessor for Proto_OrderedSet);
            sub_1C3F92E00(v313, v312, type metadata accessor for Proto_OrderedSet);
            uint64_t v314 = v428;
            swift_storeEnumTagMultiPayload();
            uint64_t v315 = v314;
            uint64_t v155 = v422;
            (*v417)(v312, 0, 1, v315);
            uint64_t v316 = v312;
            uint64_t v317 = v420;
            sub_1C3F961BC(v316, v420, &qword_1EBBC0648);
            swift_beginAccess();
            uint64_t v305 = v317;
            uint64_t v306 = v155;
LABEL_90:
            sub_1C3F98338(v305, v306, &qword_1EBBC0648);
            swift_endAccess();
          }
          uint64_t v154 = (uint64_t)v425;
          uint64_t v156 = (uint64_t)v421;
LABEL_92:
          uint64_t v153 = v426;
          uint64_t v152 = &qword_1EBBC06E8;
          goto LABEL_7;
        case 10:
          uint64_t v187 = *v343;
          (*v343)(v409, 1, 1, v413);
          uint64_t v188 = v397;
          sub_1C3F970C4(v155, v397, &qword_1EBBC0648);
          if ((*v424)(v188, 1, v428) == 1)
          {
            sub_1C3F962E0(v188, &qword_1EBBC0648);
            uint64_t v189 = (uint64_t)v387;
            uint64_t v190 = v423;
            uint64_t v191 = v409;
          }
          else
          {
            uint64_t v247 = v188;
            uint64_t v248 = v374;
            sub_1C3F92E00(v247, v374, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            sub_1C4496918();
            uint64_t v249 = v248;
            uint64_t v250 = v367;
            sub_1C3F92E00(v249, v367, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            uint64_t v191 = v409;
            if (EnumCaseMultiPayload == 9)
            {
              sub_1C3F962E0(v409, &qword_1EBBC0718);
              uint64_t v252 = v354;
              sub_1C3F92E00(v250, v354, type metadata accessor for Proto_CustomCRDT);
              uint64_t v253 = v252;
              uint64_t v152 = &qword_1EBBC06E8;
              uint64_t v155 = v422;
              sub_1C3F92E00(v253, v191, type metadata accessor for Proto_CustomCRDT);
              v187(v191, 0, 1, v413);
            }
            else
            {
              sub_1C3F96610(v250, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
            }
            uint64_t v189 = (uint64_t)v387;
            uint64_t v190 = v423;
          }
          sub_1C3F7251C(&qword_1EA39AED0, (void (*)(uint64_t))type metadata accessor for Proto_CustomCRDT);
          uint64_t v318 = v413;
          sub_1C4496A78();
          sub_1C3F961BC(v191, v154, &qword_1EBBC0718);
          if ((*v339)(v154, 1, v318) == 1)
          {
            sub_1C3F962E0(v154, &qword_1EBBC0718);
          }
          else
          {
            sub_1C3F92E00(v154, v189, type metadata accessor for Proto_CustomCRDT);
            sub_1C3F92E00(v189, v190, type metadata accessor for Proto_CustomCRDT);
            uint64_t v157 = v428;
            swift_storeEnumTagMultiPayload();
            (*v417)(v190, 0, 1, v157);
            uint64_t v158 = v190;
            uint64_t v159 = v420;
            sub_1C3F961BC(v158, v420, &qword_1EBBC0648);
            swift_beginAccess();
            sub_1C3F98338(v159, v155, &qword_1EBBC0648);
            swift_endAccess();
          }
          uint64_t v156 = (uint64_t)v421;
LABEL_6:
          uint64_t v153 = v426;
          goto LABEL_7;
        default:
          goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t sub_1C3F9CA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_230Tm_27);
}

uint64_t sub_1C3F9CA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_407Tm);
}

uint64_t type metadata accessor for Proto_CustomCRDT(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0708);
}

uint64_t type metadata accessor for Proto_Counter(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC06A8);
}

uint64_t sub_1C3F9CAEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_230Tm_33);
}

uint64_t sub_1C3F9CB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_231Tm_27);
}

uint64_t sub_1C3F9CB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_408Tm);
}

uint64_t sub_1C3F9CB28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v12 = *(void *)(v3 + v11);
    type metadata accessor for Proto_CRDT._StorageClass(0);
    uint64_t v13 = swift_allocObject();
    uint64_t v25 = v4;
    uint64_t v14 = v13;
    uint64_t v24 = a1;
    uint64_t v15 = a2;
    uint64_t v16 = a3;
    uint64_t v17 = v13 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    uint64_t v18 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
    uint64_t v19 = v12 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    sub_1C3F970C4(v19, (uint64_t)v10, &qword_1EBBC0648);
    swift_beginAccess();
    uint64_t v20 = v17;
    a3 = v16;
    a2 = v15;
    a1 = v24;
    sub_1C3F98338((uint64_t)v10, v20, &qword_1EBBC0648);
    swift_endAccess();
    *(void *)(v3 + v11) = v14;
    swift_release();
  }
  uint64_t v21 = swift_retain();
  sub_1C3F99694(v21, a1, a2, a3);
  return swift_release();
}

uint64_t type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0638);
}

uint64_t type metadata accessor for Proto_CRDT._StorageClass(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0670);
}

uint64_t sub_1C3F9CD40(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v4 = sub_1C4496898();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
    type metadata accessor for Proto_Reference(0);
  }
  else if (result == 1)
  {
    uint64_t v5 = sub_1C4496898();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
    type metadata accessor for Proto_Value(0);
  }
  else
  {
    if (result) {
      return result;
    }
    uint64_t v3 = sub_1C4496898();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    type metadata accessor for Proto_CRDT(0);
  }
  return swift_release();
}

BOOL decodeSubstrings(unsigned int a1, unsigned int a2, void *a3, uint64_t *a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  memset(v73, 0, sizeof(v73));
  int v74 = 1065353216;
  if (a1)
  {
    uint64_t v10 = 0;
    BOOL v66 = 0;
    unsigned int v11 = a1;
    a1 = 0;
    unsigned int v70 = v11;
    unint64_t v64 = v11;
    while (1)
    {
      [v9 decodeSubstring:v10];
      *(_DWORD *)&uu[16] = 0;
      uuid_clear(uu);
      unsigned int v69 = a1;
      *(_DWORD *)&uu[20] = 0;
      uint64_t v12 = [v9 substringCharReplicaWithError:a7];
      if (!v12) {
        break;
      }
      TopoReplica::TopoReplica(&v77, v12, 0);
      *(TopoReplica *)uu = v77;
      *(_DWORD *)&uu[20] = [v9 substringCharClock];
      uint64_t v68 = v12;
      *(_DWORD *)&uu[24] = [v9 substringLength];
      uint64_t v71 = [v9 substringAddedByCount];
      if (v71 >= 1)
      {
        for (uint64_t i = 0; i != v71; ++i)
        {
          uint64_t v14 = [v9 substringAddedByReplica:i withError:a7];
          int v15 = [v9 substringAddedByCounter:i];
          uint64_t v16 = *(void **)(*a4 + 8 * v10);
          TopoReplica::TopoReplica(&v76, v14, 0);
          TopoReplica v77 = v76;
          unint64_t v17 = v16[6];
          unint64_t v18 = v16[5];
          if (v18 >= v17)
          {
            uint64_t v21 = v16[4];
            unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v21) >> 3);
            unint64_t v23 = v22 + 1;
            if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v21) >> 3);
            if (2 * v24 > v23) {
              unint64_t v23 = 2 * v24;
            }
            if (v24 >= 0x555555555555555) {
              unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v25 = v23;
            }
            if (v25) {
              uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>((uint64_t)(v16 + 6), v25);
            }
            else {
              uint64_t v26 = 0;
            }
            uint64_t v27 = &v26[24 * v22];
            *(TopoReplica *)uint64_t v27 = v77;
            *((_DWORD *)v27 + 5) = v15;
            uint64_t v29 = (char *)v16[4];
            uint64_t v28 = (char *)v16[5];
            uint64_t v30 = v27;
            if (v28 != v29)
            {
              do
              {
                long long v31 = *(_OWORD *)(v28 - 24);
                *((void *)v30 - 1) = *((void *)v28 - 1);
                *(_OWORD *)(v30 - 24) = v31;
                v30 -= 24;
                v28 -= 24;
              }
              while (v28 != v29);
              uint64_t v28 = (char *)v16[4];
            }
            uint64_t v20 = v27 + 24;
            void v16[4] = v30;
            v16[5] = v27 + 24;
            v16[6] = &v26[24 * v25];
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            unsigned int index = v76.index;
            *(_OWORD *)unint64_t v18 = *(_OWORD *)v76.uuid;
            *(_DWORD *)(v18 + 16) = index;
            *(_DWORD *)(v18 + 20) = v15;
            uint64_t v20 = (char *)(v18 + 24);
          }
          v16[5] = v20;
        }
      }
      uint64_t v32 = [v9 substringRemovedAddedByCount];
      if (v32 >= 1)
      {
        for (uint64_t j = 0; j != v32; ++j)
        {
          uint64_t v34 = [v9 substringRemovedAddedByReplica:j withError:a7];
          int v35 = [v9 substringRemovedAddedByCounter:j];
          uint64_t v36 = *(void **)(*a4 + 8 * v10);
          TopoReplica::TopoReplica(&v75, v34, 0xFFFFFFFF);
          TopoReplica v77 = v75;
          unint64_t v37 = v36[6];
          unint64_t v38 = v36[5];
          if (v38 >= v37)
          {
            uint64_t v41 = v36[4];
            unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - v41) >> 3);
            unint64_t v43 = v42 + 1;
            if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - v41) >> 3);
            if (2 * v44 > v43) {
              unint64_t v43 = 2 * v44;
            }
            if (v44 >= 0x555555555555555) {
              unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v45 = v43;
            }
            if (v45) {
              uint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>((uint64_t)(v36 + 6), v45);
            }
            else {
              uint64_t v46 = 0;
            }
            uint64_t v47 = &v46[24 * v42];
            *(TopoReplica *)uint64_t v47 = v77;
            *((_DWORD *)v47 + 5) = v35;
            uint64_t v49 = (char *)v36[4];
            uint64_t v48 = (char *)v36[5];
            uint64_t v50 = v47;
            if (v48 != v49)
            {
              do
              {
                long long v51 = *(_OWORD *)(v48 - 24);
                *((void *)v50 - 1) = *((void *)v48 - 1);
                *(_OWORD *)(v50 - 24) = v51;
                v50 -= 24;
                v48 -= 24;
              }
              while (v48 != v49);
              uint64_t v48 = (char *)v36[4];
            }
            uint64_t v40 = v47 + 24;
            v36[4] = v50;
            v36[5] = v47 + 24;
            v36[6] = &v46[24 * v45];
            if (v48) {
              operator delete(v48);
            }
          }
          else
          {
            unsigned int v39 = v75.index;
            *(_OWORD *)unint64_t v38 = *(_OWORD *)v75.uuid;
            *(_DWORD *)(v38 + 16) = v39;
            *(_DWORD *)(v38 + 20) = v35;
            uint64_t v40 = (char *)(v38 + 24);
          }
          v36[5] = v40;
        }
      }
      uint64_t v52 = [v9 substringContentOptions];
      unsigned int v53 = v69;
      uint64_t v54 = *(void *)(*a4 + 8 * v10);
      uint64_t v12 = v68;
      if (v52 == 2)
      {
        *(_DWORD *)(v54 + 84) = -1;
      }
      else
      {
        *(_DWORD *)(v54 + 84) = v69;
        if (v71 > 0 || v52 == 1)
        {
          unsigned int v53 = *(_DWORD *)&uu[24] + v69;
          if (*(_DWORD *)&uu[24] + v69 > a2)
          {
            v69 += *(_DWORD *)&uu[24];
            NSLog(&cfstr_CorruptMergeab.isa);
            break;
          }
        }
      }
      long long v55 = *(_OWORD *)uu;
      *(_OWORD *)(v54 + 12) = *(_OWORD *)&uu[12];
      *(_OWORD *)uint64_t v54 = v55;
      unint64_t v56 = [v9 substringChildCount];
      if (v56)
      {
        uint64_t v57 = 0;
        int v58 = 0;
        while (1)
        {
          unsigned int v59 = [v9 substringChild:v57];
          if (v59 >= v70) {
            break;
          }
          *(void *)v77.uuid = 0;
          uint64_t v60 = *a4;
          *(void *)v77.uuid = *(void *)(*a4 + 8 * v59);
          TopoSubstring::addChild(*(TopoSubstring **)(v60 + 8 * v10), *(TopoSubstring **)v77.uuid);
          std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__emplace_unique_key_args<TopoSubstring *,TopoSubstring * const&>((uint64_t)v73, &v77, &v77);
          int v58 = ++v57 >= v56;
          if (v56 == v57) {
            goto LABEL_51;
          }
        }
        NSLog(&cfstr_CorruptMergeab_0.isa);
      }
      else
      {
LABEL_51:
        int v58 = 1;
      }
      if (a5
        && !std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::find<TopoSubstring *>(v73, (void *)(*a4 + 8 * v10)))
      {
        int v58 = v58 & (*a5 == 0);
        *a5 = *(void *)(*a4 + 8 * v10);
      }
      unsigned int v69 = v53;
      if (!a6 || v56)
      {
        if ((v58 & 1) == 0) {
          break;
        }
      }
      else
      {
        BOOL v61 = *a6 == 0;
        *a6 = *(void *)(*a4 + 8 * v10);
        if ((v61 & v58 & 1) == 0) {
          break;
        }
      }

      BOOL v66 = ++v10 >= v64;
      a1 = v53;
      if (v10 == v64) {
        goto LABEL_62;
      }
    }

    a1 = v69;
  }
  else
  {
LABEL_62:
    BOOL v66 = 1;
  }
  if (a1 != a2)
  {
    NSLog(&cfstr_CorruptMergeab_1.isa);
    BOOL v66 = 0;
  }
  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)v73);

  return v66;
}

void sub_1C3F9D490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t __swift_get_extra_inhabitant_index_230Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496898();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t __swift_get_extra_inhabitant_index_366Tm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1C4496898();
    id v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    unsigned int v11 = (char *)a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t __swift_get_extra_inhabitant_index_3Tm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1C44967E8();
    id v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    unsigned int v11 = (char *)a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t __swift_store_extra_inhabitant_index_231Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1C4496898();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

void *__swift_store_extra_inhabitant_index_367Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1C4496898();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t __swift_get_extra_inhabitant_index_407Tm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1C4496898();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    unsigned int v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void TopoReplica::TopoReplica(TopoReplica *this, NSUUID *a2, unsigned int a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = v5;
  this->unsigned int index = a3;
  if (v5) {
    [(NSUUID *)v5 getUUIDBytes:this];
  }
  else {
    uuid_clear(this->uuid);
  }
}

void sub_1C3F9DA84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1C3F9DA98(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for Proto_Subsequence(0);
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = (uint64_t)a1 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence;
  swift_beginAccess();
  sub_1C3F96414(v9, (uint64_t)v8, type metadata accessor for Proto_Subsequence);
  uint64_t v10 = (uint64_t *)(*(void *)&v8[*(int *)(v6 + 28)] + *a3);
  swift_beginAccess();
  uint64_t v11 = *v10;
  id v12 = a1;
  swift_bridgeObjectRetain();
  sub_1C3F9633C((uint64_t)v8, type metadata accessor for Proto_Subsequence);
  uint64_t v13 = *(void *)(v11 + 16);

  swift_bridgeObjectRelease();
  return v13;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void *std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::find<TopoSubstring *>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void TopoSubstring::addChild(TopoSubstring *this, TopoSubstring *a2)
{
  unint64_t v6 = *((void *)this + 9);
  unint64_t v4 = (char *)this + 72;
  unint64_t v5 = v6;
  unint64_t v7 = (void *)*((void *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (void **)(v4 - 16);
    uint64_t v10 = *((void *)v4 - 2);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>((uint64_t)v4, v14);
    }
    else {
      int v15 = 0;
    }
    uint64_t v16 = &v15[8 * v11];
    unint64_t v17 = &v15[8 * v14];
    *(void *)uint64_t v16 = a2;
    uint64_t v8 = v16 + 8;
    uint64_t v19 = (char *)*((void *)this + 7);
    unint64_t v18 = (char *)*((void *)this + 8);
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*v9;
    }
    *((void *)this + 7) = v16;
    *((void *)this + 8) = v8;
    *((void *)this + 9) = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *unint64_t v7 = a2;
    uint64_t v8 = v7 + 1;
  }
  *((void *)this + 8) = v8;
  ++*((_DWORD *)a2 + 20);
}

uint64_t sub_1C3F9E0C4()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  MEMORY[0x1F4188790](v1 - 8);
  unint64_t v3 = &v16[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for Proto_Subsequence(0);
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = v0 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence;
  swift_beginAccess();
  sub_1C3F96414(v12, (uint64_t)v11, type metadata accessor for Proto_Subsequence);
  uint64_t v13 = *(void *)&v11[*(int *)(v9 + 28)]
      + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequenceStartID;
  swift_beginAccess();
  sub_1C3F970C4(v13, (uint64_t)v3, &qword_1EBBC0620);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    *unint64_t v7 = 0;
    v7[1] = 0;
    sub_1C4496888();
    sub_1C3F962E0((uint64_t)v3, &qword_1EBBC0620);
  }
  else
  {
    sub_1C3F9E890((uint64_t)v3, (uint64_t)v7, type metadata accessor for Proto_Timestamp);
  }
  sub_1C3F9633C((uint64_t)v11, type metadata accessor for Proto_Subsequence);
  unint64_t v14 = v7[1];
  sub_1C3F9633C((uint64_t)v7, type metadata accessor for Proto_Timestamp);
  if ((v14 & 0x8000000000000000) == 0 && !HIDWORD(v14)) {
    return v14;
  }
  uint64_t result = sub_1C4497F48();
  __break(1u);
  return result;
}

uint64_t sub_1C3F9E3C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v2 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v36 = (unint64_t *)((char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v34 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v30 - v8;
  uint64_t v10 = type metadata accessor for Proto_Subsequence(0);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v31 = (uint64_t)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)&v30 - v13;
  uint64_t v33 = v1;
  uint64_t v15 = v1 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence;
  swift_beginAccess();
  sub_1C3F96414(v15, (uint64_t)v14, type metadata accessor for Proto_Subsequence);
  uint64_t v16 = *(void *)&v14[*(int *)(v10 + 20)]
      + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequenceStartID;
  swift_beginAccess();
  sub_1C3F970C4(v16, (uint64_t)v9, &qword_1EBBC0620);
  unint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  uint64_t v35 = v2;
  uint64_t v32 = v3 + 48;
  LODWORD(v16) = v17(v9, 1, v2);
  sub_1C3F962E0((uint64_t)v9, &qword_1EBBC0620);
  sub_1C3F9633C((uint64_t)v14, type metadata accessor for Proto_Subsequence);
  if (v16 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v18 = 0xD00000000000003ALL;
    *(void *)(v18 + 8) = 0x80000001C44B2BB0;
    *(unsigned char *)(v18 + 16) = 0;
    return swift_willThrow();
  }
  else
  {
    uint64_t v20 = *(void *)(v33 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_decoder);
    uint64_t v21 = v31;
    sub_1C3F96414(v15, v31, type metadata accessor for Proto_Subsequence);
    uint64_t v22 = *(void *)(v21 + *(int *)(v10 + 20))
        + OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequenceStartID;
    swift_beginAccess();
    uint64_t v23 = v34;
    sub_1C3F970C4(v22, v34, &qword_1EBBC0620);
    if (v17((char *)v23, 1, v35) == 1)
    {
      unint64_t v24 = v36;
      *uint64_t v36 = 0;
      v24[1] = 0;
      swift_retain();
      sub_1C4496888();
      sub_1C3F962E0(v23, &qword_1EBBC0620);
    }
    else
    {
      unint64_t v24 = v36;
      sub_1C3F9E890(v23, (uint64_t)v36, type metadata accessor for Proto_Timestamp);
      swift_retain();
    }
    sub_1C3F9633C(v21, type metadata accessor for Proto_Subsequence);
    unint64_t v25 = *v24;
    sub_1C3F9633C((uint64_t)v24, type metadata accessor for Proto_Timestamp);
    uint64_t v26 = *(void *)(v20 + 24);
    unint64_t v27 = *(void *)(v26 + 16);
    if (v27 && v25 < v27)
    {
      uint64_t v28 = sub_1C4496678();
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v30, v26+ ((*(unsigned __int8 *)(*(void *)(v28 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v28 - 8) + 80))+ *(void *)(*(void *)(v28 - 8) + 72) * v25, v28);
      return swift_release();
    }
    else
    {
      sub_1C3FE3FF0();
      swift_allocError();
      *(_OWORD *)uint64_t v29 = xmmword_1C44A0890;
      *(unsigned char *)(v29 + 16) = 0;
      swift_willThrow();
      return swift_release();
    }
  }
}

uint64_t sub_1C3F9E87C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C440D660);
}

uint64_t sub_1C3F9E890(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3F9EA50(unint64_t a1)
{
  uint64_t v3 = type metadata accessor for Proto_Subsequence(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Proto_Sequence(0);
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1C3F96414(v1 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded, (uint64_t)v10, type metadata accessor for Proto_Sequence);
  uint64_t v11 = *(void *)&v10[*(int *)(v8 + 28)];
  swift_beginAccess();
  uint64_t v12 = *(void *)(v11 + 40);
  swift_bridgeObjectRetain();
  uint64_t result = sub_1C3F9633C((uint64_t)v10, type metadata accessor for Proto_Sequence);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(v12 + 16) > a1)
  {
    sub_1C3F96414(v12+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * a1, (uint64_t)v6, type metadata accessor for Proto_Subsequence);
    swift_bridgeObjectRelease();
    uint64_t v14 = v1 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence;
    swift_beginAccess();
    sub_1C3F9EC34((uint64_t)v6, v14);
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

uint64_t sub_1C3F9EC34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_Subsequence(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3F9EC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C4496898();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void traverseUnordered(uint64_t a1, void *a2)
{
  uint64_t v16 = a1;
  uint64_t v3 = a2;
  if (a1)
  {
    memset(v14, 0, sizeof(v14));
    int v15 = 1065353216;
    long long v13 = 0u;
    memset(v12, 0, sizeof(v12));
    char v11 = 0;
    std::deque<TopoSubstring *>::push_back(v12, &v16);
    std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__emplace_unique_key_args<TopoSubstring *,TopoSubstring * const&>((uint64_t)v14, &v16, &v16);
    for (uint64_t i = *((void *)&v13 + 1); *((void *)&v13 + 1); uint64_t i = *((void *)&v13 + 1))
    {
      uint64_t v5 = i - 1;
      uint64_t v6 = *(void *)(*(void *)(*((void *)&v12[0] + 1) + (((unint64_t)(v13 + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((v13 + v5) & 0x1FF));
      *((void *)&v13 + 1) = v5;
      std::deque<TopoSubstring *>::__maybe_remove_back_spare[abi:ne180100](v12, 1);
      v3[2](v3, v6, &v11);
      uint64_t v7 = v6;
      if (v11) {
        break;
      }
      while (1)
      {
        uint64_t v9 = *(char **)(v7 + 56);
        uint64_t v8 = *(char **)(v7 + 64);
        if (v8 - v9 != 8) {
          break;
        }
        uint64_t v7 = *(void *)v9;
        if (*(_DWORD *)(*(void *)v9 + 80) != 1) {
          break;
        }
        v3[2](v3, *(void *)v9, &v11);
        if (v11 || v7 == v6) {
          goto LABEL_16;
        }
      }
      while (v9 != v8)
      {
        uint64_t v10 = 0;
        uint64_t v10 = *(void *)v9;
        if (*(_DWORD *)(v10 + 80) > 1u)
        {
          if (!std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::find<TopoSubstring *>(v14, &v10))
          {
            std::deque<TopoSubstring *>::push_back(v12, &v10);
            std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__emplace_unique_key_args<TopoSubstring *,TopoSubstring * const&>((uint64_t)v14, &v10, &v10);
          }
        }
        else
        {
          std::deque<TopoSubstring *>::push_back(v12, &v10);
        }
        v9 += 8;
      }
    }
LABEL_16:
    std::deque<TopoSubstring *>::~deque[abi:ne180100](v12);
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)v14);
  }
}

void sub_1C3F9F058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::deque<TopoSubstring *>::~deque[abi:ne180100]((uint64_t *)va);
  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)va1);

  _Unwind_Resume(a1);
}

void *std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__emplace_unique_key_args<TopoSubstring *,TopoSubstring * const&>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    void *v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1C3F9F2FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *uint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            uint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          uint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void traverseIterative(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    memset(v4, 0, sizeof(v4));
    int v5 = 1065353216;
    traverseIterative(a1, v4, v3);
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)v4);
  }
}

void sub_1C3F9F5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      id v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void traverseIterative(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = a1;
  int v5 = a3;
  if (a1)
  {
    long long v18 = 0u;
    memset(v17, 0, sizeof(v17));
    std::deque<TopoSubstring *>::push_back(v17, &v19);
    uint64_t v6 = *((void *)&v18 + 1);
    if (*((void *)&v18 + 1))
    {
      while (1)
      {
        uint64_t v7 = v6 - 1;
        uint64_t v8 = *(void *)(*(void *)(*((void *)&v17[0] + 1)
                                   + (((unint64_t)(v18 + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v18 + v7) & 0x1FF));
        *((void *)&v18 + 1) = v7;
        std::deque<TopoSubstring *>::__maybe_remove_back_spare[abi:ne180100](v17, 1);
        v5[2](v5, v8);
        while (1)
        {
          uint8x8_t v10 = *(char **)(v8 + 56);
          uint8x8_t v9 = *(char **)(v8 + 64);
          if (v9 - v10 != 8) {
            break;
          }
          uint64_t v11 = *(void *)v10;
          if (*(_DWORD *)(*(void *)v10 + 80) != 1) {
            break;
          }
          v5[2](v5, *(void *)v10);
          uint64_t v8 = v11;
        }
        if (v9 != v10) {
          break;
        }
LABEL_18:
        uint64_t v6 = *((void *)&v18 + 1);
        if (!*((void *)&v18 + 1)) {
          goto LABEL_19;
        }
      }
      unint64_t v12 = v9 - 8;
      while (1)
      {
        unint64_t v13 = std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::find<TopoSubstring *>(a2, v12);
        if (v13)
        {
          int v14 = *((_DWORD *)v13 + 6) - 1;
          if (*((_DWORD *)v13 + 6) == 1) {
            goto LABEL_15;
          }
        }
        else
        {
          unsigned int v15 = *(_DWORD *)(*(void *)v12 + 80);
          if (v15 < 2)
          {
LABEL_15:
            std::deque<TopoSubstring *>::push_back(v17, v12);
            goto LABEL_16;
          }
          uint64_t v20 = v12;
          unint64_t v13 = std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned int>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned int>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned int>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned int>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>((uint64_t)a2, v12, (uint64_t)&std::piecewise_construct, (void **)&v20);
          int v14 = v15 - 1;
        }
        *((_DWORD *)v13 + 6) = v14;
LABEL_16:
        BOOL v16 = v12 == *(char **)(v8 + 56);
        v12 -= 8;
        if (v16) {
          goto LABEL_18;
        }
      }
    }
LABEL_19:
    std::deque<TopoSubstring *>::~deque[abi:ne180100](v17);
  }
}

void sub_1C3F9F7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::deque<TopoSubstring *>::~deque[abi:ne180100](&a9);

  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t std::deque<TopoSubstring *>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  id v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      id v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<TopoSubstring **>::~__split_buffer((uint64_t)a1);
}

void std::deque<TopoSubstring *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<TopoSubstring *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<TopoSubstring *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint8x8_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint8x8_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<TopoSubstring **>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<TopoSubstring **>::push_front((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint8x8_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unsigned int v53 = operator new(0x1000uLL);
  std::__split_buffer<TopoSubstring **>::push_back(&v54, &v53);
  unint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<TopoSubstring **>::push_front((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1C3F9FCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<TopoSubstring **>::push_back(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      int64_t v20 = (uint64_t *)a1[1];
      unint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        unint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        unint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        unint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      unint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  uint64_t v5 = (char *)a1[3];
  unint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    BOOL v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      uint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      unint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      uint64_t v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      int64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      unint64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

uint64_t std::deque<TopoSubstring *>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t std::__split_buffer<TopoSubstring **>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1C3F9FF10@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v88 = a1;
  uint64_t v4 = sub_1C44967A8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v98 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78);
  MEMORY[0x1F4188790](v87);
  BOOL v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for Proto_RLE(0);
  uint64_t v80 = *(void *)(v86 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v86);
  uint64_t v93 = (uint64_t)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v99 = (int64_t *)((char *)&v71 - v11);
  uint64_t v85 = sub_1C4496678();
  uint64_t v12 = *(void *)(v85 - 8);
  MEMORY[0x1F4188790](v85);
  uint64_t v84 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1C44967E8();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v91 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v90 = (uint64_t)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v18);
  uint64_t v89 = (uint64_t)&v71 - v21;
  if (*(void *)(v2[1] + 16)) {
    goto LABEL_52;
  }
  uint64_t v22 = *v2;
  uint64_t v23 = MEMORY[0x1E4FBC860];
  *a2 = MEMORY[0x1E4FBC860];
  a2[1] = v23;
  type metadata accessor for Proto_Version(0);
  sub_1C4496888();
  uint64_t v24 = *(void *)(v22 + 64);
  uint64_t v72 = v22 + 64;
  uint64_t v25 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  uint64_t v94 = v26 & v24;
  uint64_t v74 = v15 + 16;
  uint64_t v83 = (void (**)(char *, uint64_t, uint64_t))(v15 + 32);
  uint64_t v82 = (void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v81 = (void (**)(uint64_t, uint64_t))(v12 + 8);
  uint64_t v96 = (void (**)(char *, char *, uint64_t))(v5 + 16);
  uint64_t v97 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
  TopoReplica v76 = (uint64_t (**)(char *, uint64_t))(v15 + 8);
  int64_t v73 = (unint64_t)(v25 + 63) >> 6;
  int64_t v71 = v73 - 1;
  uint64_t v75 = v22;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v92 = 0;
  uint64_t v95 = v8;
  uint64_t v78 = v14;
  uint64_t v27 = v15;
  uint64_t v77 = v15;
  uint64_t v28 = v91;
  uint64_t v79 = a2;
  unint64_t v29 = v94;
  if (!v94) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v94 = (v29 - 1) & v29;
  unint64_t v30 = __clz(__rbit64(v29)) | (v92 << 6);
LABEL_6:
  uint64_t v31 = v75;
  uint64_t v32 = *(void *)(v75 + 48);
  uint64_t v33 = type metadata accessor for Replica();
  uint64_t v34 = v90;
  sub_1C3F8EF8C(v32 + *(void *)(*(void *)(v33 - 8) + 72) * v30, v90, (uint64_t (*)(void))type metadata accessor for Replica);
  unint64_t v35 = *(void *)(v31 + 56) + *(void *)(v27 + 72) * v30;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 16))(v34 + *(int *)(v36 + 48), v35, v14);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v34, 0, 1, v36);
  while (1)
  {
    uint64_t v41 = v89;
    sub_1C3F961BC(v34, v89, &qword_1EBBC07A0);
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v41, 1, v42) == 1) {
      return swift_release();
    }
    (*v83)(v28, v41 + *(int *)(v42 + 48), v14);
    uint64_t v44 = (uint64_t)v84;
    uint64_t v43 = v85;
    (*v82)(v84, v41, v85);
    sub_1C3F902AC(v41, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v45 = sub_1C3FA10C4(v44);
    (*v81)(v44, v43);
    unint64_t v46 = (void *)*a2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v46 = sub_1C3FA1854(0, v46[2] + 1, 1, v46);
    }
    unint64_t v48 = v46[2];
    unint64_t v47 = v46[3];
    if (v48 >= v47 >> 1) {
      unint64_t v46 = sub_1C3FA1854((void *)(v47 > 1), v48 + 1, 1, v46);
    }
    void v46[2] = v48 + 1;
    v46[v48 + 4] = v45;
    *a2 = v46;
    *uint64_t v99 = MEMORY[0x1E4FBC860];
    sub_1C4496888();
    uint64_t v49 = v98;
    sub_1C44967C8();
    sub_1C4496798();
    uint64_t v50 = *v97;
    (*v97)(v49, v4);
    long long v51 = &v8[*(int *)(v87 + 36)];
    sub_1C3FA0E84((unint64_t *)&qword_1EBBBEE28, MEMORY[0x1E4F27CE0]);
    uint64_t v52 = *(void *)v51;
    sub_1C4497818();
    if (v52 != v100[0]) {
      break;
    }
LABEL_31:
    sub_1C3F962E0((uint64_t)v8, &qword_1EBBBCA78);
    sub_1C3F8EF8C((uint64_t)v99, v93, type metadata accessor for Proto_RLE);
    a2 = v79;
    unint64_t v53 = v79[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v53 = sub_1C3FA1950(0, *(void *)(v53 + 16) + 1, 1, v53);
    }
    uint64_t v14 = v78;
    uint64_t v27 = v77;
    uint64_t v28 = v91;
    unint64_t v55 = *(void *)(v53 + 16);
    unint64_t v54 = *(void *)(v53 + 24);
    if (v55 >= v54 >> 1) {
      unint64_t v53 = sub_1C3FA1950(v54 > 1, v55 + 1, 1, v53);
    }
    *(void *)(v53 + 16) = v55 + 1;
    sub_1C3F8F7B0(v93, v53+ ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))+ *(void *)(v80 + 72) * v55, type metadata accessor for Proto_RLE);
    a2[1] = v53;
    sub_1C3F902AC((uint64_t)v99, type metadata accessor for Proto_RLE);
    uint64_t result = (*v76)(v28, v14);
    unint64_t v29 = v94;
    if (v94) {
      goto LABEL_5;
    }
LABEL_7:
    int64_t v37 = v92 + 1;
    if (__OFADD__(v92, 1)) {
      goto LABEL_51;
    }
    if (v37 < v73)
    {
      unint64_t v38 = *(void *)(v72 + 8 * v37);
      if (v38) {
        goto LABEL_10;
      }
      int64_t v39 = v92 + 2;
      ++v92;
      if (v37 + 1 < v73)
      {
        unint64_t v38 = *(void *)(v72 + 8 * v39);
        if (v38) {
          goto LABEL_13;
        }
        int64_t v92 = v37 + 1;
        if (v37 + 2 < v73)
        {
          unint64_t v38 = *(void *)(v72 + 8 * (v37 + 2));
          if (v38)
          {
            v37 += 2;
            goto LABEL_10;
          }
          int64_t v39 = v37 + 3;
          int64_t v92 = v37 + 2;
          if (v37 + 3 < v73)
          {
            unint64_t v38 = *(void *)(v72 + 8 * v39);
            if (!v38)
            {
              while (1)
              {
                int64_t v37 = v39 + 1;
                if (__OFADD__(v39, 1)) {
                  goto LABEL_53;
                }
                if (v37 >= v73)
                {
                  int64_t v92 = v71;
                  goto LABEL_24;
                }
                unint64_t v38 = *(void *)(v72 + 8 * v37);
                ++v39;
                if (v38) {
                  goto LABEL_10;
                }
              }
            }
LABEL_13:
            int64_t v37 = v39;
LABEL_10:
            uint64_t v94 = (v38 - 1) & v38;
            unint64_t v30 = __clz(__rbit64(v38)) + (v37 << 6);
            int64_t v92 = v37;
            goto LABEL_6;
          }
        }
      }
    }
LABEL_24:
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    uint64_t v34 = v90;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v90, 1, 1, v40);
    uint64_t v94 = 0;
  }
  uint64_t v56 = 0;
  while (1)
  {
    uint64_t v57 = (void (*)(uint64_t *, void))sub_1C44978C8();
    uint64_t v59 = *v58;
    uint64_t v60 = v58[1];
    v57(v100, 0);
    BOOL v61 = v98;
    (*v96)(v98, v8, v4);
    sub_1C4497828();
    uint64_t result = v50(v61, v4);
    uint64_t v62 = v59 - v56;
    if (__OFSUB__(v59, v56)) {
      break;
    }
    uint64_t v63 = (void *)*v99;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1C3FA1944(0, v63[2] + 1, 1, v63);
      uint64_t v63 = (void *)result;
    }
    unint64_t v65 = v63[2];
    unint64_t v64 = v63[3];
    unint64_t v66 = v65 + 1;
    if (v65 >= v64 >> 1)
    {
      uint64_t result = (uint64_t)sub_1C3FA1944((void *)(v64 > 1), v65 + 1, 1, v63);
      uint64_t v63 = (void *)result;
    }
    v63[2] = v66;
    v63[v65 + 4] = v62;
    uint64_t v67 = v60 - v59;
    if (__OFSUB__(v60, v59)) {
      goto LABEL_50;
    }
    unint64_t v68 = v63[3];
    unint64_t v69 = v65 + 2;
    if (v66 >= v68 >> 1) {
      uint64_t v63 = sub_1C3FA1944((void *)(v68 > 1), v65 + 2, 1, v63);
    }
    BOOL v8 = v95;
    v63[2] = v69;
    v63[v66 + 4] = v67;
    *uint64_t v99 = v63;
    uint64_t v70 = *(void *)v51;
    sub_1C4497818();
    uint64_t v56 = v60;
    if (v70 == v100[0]) {
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t sub_1C3FA0A88(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = sub_1C4497F48();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  void v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C3FA0D28(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t type metadata accessor for FinalizedTimestampRange(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBC6A0);
}

uint64_t sub_1C3FA0D28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3FA0E84(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1C3FA0ECC(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      uint64_t v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v14 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C3FA0FD8(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_1C3FA0FD8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3FA10C4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1C4496678();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v25 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v24 - v8;
  swift_beginAccess();
  uint64_t v10 = *(void *)(v1 + 32);
  if (*(void *)(v10 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_1C3FA1598(a1);
    if (v12)
    {
      uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v11);
      swift_bridgeObjectRelease();
      if ((v13 & 0x8000000000000000) == 0) {
        return v13;
      }
      sub_1C4497F48();
      __break(1u);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = (unint64_t *)(v2 + 24);
  swift_beginAccess();
  uint64_t v15 = *(void *)(*(void *)(v2 + 24) + 16);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v16(v9, a1, v4);
  uint64_t v13 = v15;
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v26 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = 0x8000000000000000;
  sub_1C3FA1860(v15, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(void *)(v2 + 32) = v26;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  swift_endAccess();
  uint64_t v18 = v25;
  v16(v25, a1, v4);
  swift_beginAccess();
  unint64_t v19 = *(void *)(v2 + 24);
  char v20 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 24) = v19;
  if ((v20 & 1) == 0)
  {
    unint64_t v19 = sub_1C3FA2EC0(0, *(void *)(v19 + 16) + 1, 1, v19);
    *uint64_t v14 = v19;
  }
  unint64_t v22 = *(void *)(v19 + 16);
  unint64_t v21 = *(void *)(v19 + 24);
  if (v22 >= v21 >> 1)
  {
    unint64_t v19 = sub_1C3FA2EC0(v21 > 1, v22 + 1, 1, v19);
    *uint64_t v14 = v19;
  }
  *(void *)(v19 + 16) = v22 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v19+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v22, v18, v4);
  swift_endAccess();
  return v13;
}

uint64_t sub_1C3FA13E4(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void), void (*a5)(void))
{
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v6 = (void **)v5;
  uint64_t v10 = sub_1C4496678();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)*v5;
  unint64_t v16 = sub_1C3FA1598(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t result = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v22 = *v6;
    if (v20)
    {
LABEL_8:
      *(void *)(v22[7] + 8 * v16) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= result && (a3 & 1) == 0)
  {
    uint64_t result = v24();
    goto LABEL_7;
  }
  v25();
  uint64_t result = sub_1C3FA1598(a2);
  if ((v20 & 1) != (v23 & 1))
  {
LABEL_14:
    uint64_t result = sub_1C4498558();
    __break(1u);
    return result;
  }
  unint64_t v16 = result;
  unint64_t v22 = *v6;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  return sub_1C3FA188C(v16, (uint64_t)v13, a1, v22);
}

unint64_t sub_1C3FA1598(uint64_t a1)
{
  sub_1C4496678();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x1E4F27990];
  sub_1C3FA180C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  uint64_t v3 = sub_1C4497078();
  return sub_1C3FA166C(a1, v3, MEMORY[0x1E4F27990], (unint64_t *)&qword_1EBBBF220, v2, MEMORY[0x1E4F279B0]);
}

unint64_t sub_1C3FA166C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  char v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    char v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      sub_1C3FA180C(v23, v24);
      char v19 = sub_1C4497178();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

uint64_t sub_1C3FA180C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1C3FA1854(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1C3FA0ECC(a1, a2, a3, a4, &qword_1EBBC00F8);
}

uint64_t sub_1C3FA1860(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1C3FA13E4(a1, a2, a3, (uint64_t (*)(void))sub_1C4068144, (void (*)(void))sub_1C3FA585C);
}

uint64_t sub_1C3FA188C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_1C4496678();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

void *sub_1C3FA1944(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1C3FA0ECC(a1, a2, a3, a4, qword_1EBBBC6D8);
}

uint64_t sub_1C3FA1950(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C3FA0A88(a1, a2, a3, a4, &qword_1EBBBC6D0, type metadata accessor for Proto_RLE, type metadata accessor for Proto_RLE);
}

uint64_t sub_1C3FA1984(char *a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = a4;
  uint64_t v6 = v5;
  uint64_t v38 = a5;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBFC98);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v36 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  char v19 = (char *)&v36 - v18;
  char v20 = *a1;
  uint64_t v21 = (char *)&v36 + *(int *)(v17 + 64) - v18;
  *char v19 = v20;
  *((_WORD *)v19 + 1) = a2;
  sub_1C3F9775C(a3, (uint64_t)v21, type metadata accessor for Proto_Document);
  uint64_t v22 = MEMORY[0x1E4FBC860];
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = v22;
  uint64_t v23 = MEMORY[0x1E4FBC868];
  *(void *)(v6 + 32) = v22;
  *(void *)(v6 + 40) = v23;
  *(unsigned char *)(v6 + 48) = 0;
  *(void *)(v6 + 56) = 0;
  uint64_t v24 = v6 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  uint64_t v25 = type metadata accessor for Proto_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  uint64_t v26 = v6 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  uint64_t v27 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
  uint64_t v28 = (uint64_t)&v16[*(int *)(v10 + 64)];
  *uint64_t v16 = v20;
  *((_WORD *)v16 + 1) = a2;
  uint64_t v29 = v36;
  sub_1C3FA1CCC((uint64_t)v21, v28, type metadata accessor for Proto_Document);
  *(unsigned char *)(v6 + 49) = v20;
  sub_1C3F9229C(v28, type metadata accessor for Proto_Document);
  if (v29)
  {
    *(void *)(v6 + 16) = v29;
    swift_retain();
    uint64_t v30 = v37;
  }
  else
  {
    *(void *)(v6 + 16) = 0;
    swift_release();
    uint64_t v31 = (uint64_t)&v13[*(int *)(v10 + 64)];
    *uint64_t v13 = *v19;
    *((_WORD *)v13 + 1) = *((_WORD *)v19 + 1);
    sub_1C3FA1CCC((uint64_t)v21, v31, type metadata accessor for Proto_Document);
    type metadata accessor for CRProtoDecodeContext();
    swift_allocObject();
    swift_retain();
    uint64_t v32 = v38;
    swift_retain();
    uint64_t v33 = v37;
    uint64_t v34 = sub_1C3FA2F18(v31, v6, v32);
    uint64_t v30 = v33;
    if (v33)
    {
      swift_release();
      goto LABEL_8;
    }
    *(void *)(v6 + 16) = v34;
  }
  swift_release();
  sub_1C3FA1E08((uint64_t)v21);
  swift_release();
  if (v30) {
    swift_release();
  }
LABEL_8:
  swift_release();
  sub_1C3F962E0((uint64_t)v19, &qword_1EBBBFC98);
  return v6;
}

uint64_t sub_1C3FA1CCC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for Proto_Document(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0338);
}

uint64_t *sub_1C3FA1D54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1C3F7E324(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = a2[2];
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_1C4496898();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  return a1;
}

uint64_t sub_1C3FA1E08(uint64_t a1)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC0990);
  uint64_t v86 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](v81);
  uint64_t v80 = (char *)v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_1C4496678();
  uint64_t v85 = *(void *)(v79 - 8);
  MEMORY[0x1F4188790](v79);
  uint64_t v78 = (char *)v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_1C4496498();
  uint64_t v84 = *(void **)(v77 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v77);
  TopoReplica v76 = (char *)v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v75 = (char *)v68 - v7;
  uint64_t v8 = type metadata accessor for Proto_Asset(0);
  uint64_t v69 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v82 = (void *)((char *)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0350);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v68 - v14;
  uint64_t v16 = type metadata accessor for Proto_Constants(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  char v20 = (void *)((char *)v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (void *)((char *)v68 - v21);
  uint64_t v87 = *(void *)(a1 + *(int *)(type metadata accessor for Proto_Document(0) + 20));
  uint64_t v23 = v87 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  swift_beginAccess();
  sub_1C3F970C4(v23, (uint64_t)v15, &qword_1EBBC0350);
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v24(v15, 1, v16) == 1)
  {
    *uint64_t v22 = sub_1C4496868();
    v22[1] = v25;
    void v22[2] = MEMORY[0x1E4FBC860];
    sub_1C4496888();
    sub_1C3F962E0((uint64_t)v15, &qword_1EBBC0350);
  }
  else
  {
    sub_1C3F9775C((uint64_t)v15, (uint64_t)v22, type metadata accessor for Proto_Constants);
  }
  uint64_t v26 = *v22;
  unint64_t v27 = v22[1];
  sub_1C3F7E324(*v22, v27);
  sub_1C3F9229C((uint64_t)v22, type metadata accessor for Proto_Constants);
  uint64_t v28 = sub_1C3FA29A4(v26, v27);
  uint64_t result = sub_1C3F7E2CC(v26, v27);
  if (!v1)
  {
    v83[3] = v28;
    swift_bridgeObjectRelease();
    uint64_t v30 = v87;
    uint64_t v31 = v87
        + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
    swift_beginAccess();
    sub_1C3F970C4(v31, (uint64_t)v13, &qword_1EBBC0350);
    if (v24(v13, 1, v16) == 1)
    {
      *char v20 = sub_1C4496868();
      v20[1] = v32;
      void v20[2] = MEMORY[0x1E4FBC860];
      sub_1C4496888();
      sub_1C3F962E0((uint64_t)v13, &qword_1EBBC0350);
    }
    else
    {
      sub_1C3F9775C((uint64_t)v13, (uint64_t)v20, type metadata accessor for Proto_Constants);
    }
    uint64_t v33 = v20[2];
    swift_bridgeObjectRetain();
    sub_1C3F9229C((uint64_t)v20, type metadata accessor for Proto_Constants);
    uint64_t v34 = v83;
    v83[4] = v33;
    swift_bridgeObjectRelease();
    unint64_t v35 = (uint64_t *)(v30
                    + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assets);
    swift_beginAccess();
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0380);
    uint64_t v74 = v34 + 5;
    sub_1C4496F18();
    swift_endAccess();
    uint64_t result = *v35;
    uint64_t v36 = *(void *)(*v35 + 16);
    if (v36)
    {
      uint64_t v87 = 0;
      uint64_t v37 = result + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
      int64_t v73 = (void (**)(char *, uint64_t))(v85 + 8);
      uint64_t v72 = (void (**)(char *, char *, uint64_t))(v84 + 4);
      int64_t v71 = &v91;
      uint64_t v70 = (void (**)(char *, uint64_t))(v86 + 8);
      uint64_t v69 = *(void *)(v69 + 72);
      v68[1] = result;
      swift_bridgeObjectRetain();
      uint64_t v38 = v82;
      while (1)
      {
        uint64_t v86 = v36;
        uint64_t v85 = v37;
        sub_1C3FA1CCC(v37, (uint64_t)v38, type metadata accessor for Proto_Asset);
        uint64_t v39 = v83[2];
        if (!v39) {
          __break(1u);
        }
        uint64_t v40 = v38[1];
        unint64_t v41 = v38[2];
        uint64_t v42 = *(void *)(v39 + 32);
        uint64_t v44 = v38[3];
        unint64_t v43 = v38[4];
        type metadata accessor for CRAssetRef();
        uint64_t v45 = (void *)swift_allocObject();
        v45[2] = v40;
        v45[3] = v41;
        uint64_t v84 = v45;
        v45[4] = v42;
        unint64_t v46 = self;
        sub_1C3F7E324(v40, v41);
        swift_retain();
        sub_1C3F7E324(v40, v41);
        swift_retain();
        id v47 = objc_msgSend(v46, sel_defaultManager);
        unint64_t v48 = (void *)sub_1C4496418();
        v90[0] = 0;
        unsigned __int8 v49 = objc_msgSend(v47, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v48, 1, 0, v90);

        if ((v49 & 1) == 0) {
          break;
        }
        id v50 = v90[0];
        long long v51 = v78;
        sub_1C4496668();
        sub_1C44965F8();
        (*v73)(v51, v79);
        uint64_t v52 = v75;
        sub_1C4496438();
        swift_bridgeObjectRelease();
        sub_1C3F970C4(v42 + 56, (uint64_t)&v88, qword_1EBBC0C90);
        if (v89)
        {
          sub_1C3F6DE94(&v88, (uint64_t)v90);
          uint64_t v53 = v92;
          uint64_t v54 = v93;
          __swift_project_boxed_opaque_existential_1(v90, v92);
          uint64_t v44 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v54 + 8))(v44, v43, v53, v54);
          unint64_t v43 = v55;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
        }
        else
        {
          sub_1C3F962E0((uint64_t)&v88, qword_1EBBC0C90);
          sub_1C3F7E324(v44, v43);
        }
        uint64_t v56 = v87;
        sub_1C4496578();
        uint64_t v87 = v56;
        uint64_t v57 = v44;
        unint64_t v58 = v43;
        if (v56) {
          goto LABEL_21;
        }
        sub_1C3F7E2CC(v44, v43);
        uint64_t v59 = *v72;
        uint64_t v60 = v76;
        uint64_t v61 = v77;
        (*v72)(v76, v52, v77);
        type metadata accessor for CRFileSnapshot();
        uint64_t v62 = swift_allocObject();
        v59((char *)(v62 + OBJC_IVAR____TtC9Coherence14CRFileSnapshot_url), v60, v61);
        uint64_t v63 = (void *)swift_allocObject();
        v63[2] = v40;
        v63[3] = v41;
        v63[4] = v62;
        v90[0] = &unk_1EA39FF80;
        v90[1] = v63;
        swift_weakInit();
        sub_1C3F7E324(v40, v41);
        swift_retain();
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09A8);
        unint64_t v64 = v80;
        sub_1C44975E8();
        (*v70)(v64, v81);
        swift_release();
        swift_release();
        swift_release();
        unint64_t v65 = v74;
        swift_beginAccess();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v88 = *v65;
        *unint64_t v65 = 0x8000000000000000;
        sub_1C4420958((uint64_t)v84, v40, v41, isUniquelyReferenced_nonNull_native);
        *unint64_t v65 = v88;
        swift_bridgeObjectRelease();
        sub_1C3F7E2CC(v40, v41);
        swift_endAccess();
        uint64_t v38 = v82;
        sub_1C3F9229C((uint64_t)v82, type metadata accessor for Proto_Asset);
        uint64_t v37 = v85 + v69;
        uint64_t v36 = v86 - 1;
        if (v86 == 1) {
          return swift_bridgeObjectRelease();
        }
      }
      id v67 = v90[0];
      sub_1C44963A8();

      swift_willThrow();
      uint64_t v57 = swift_unexpectedError();
      __break(1u);
LABEL_21:
      sub_1C3F7E2CC(v57, v58);
      uint64_t result = swift_unexpectedError();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1C3FA2990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C440A144);
}

uint64_t sub_1C3FA29A4(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = a1;
  uint64_t v19 = sub_1C4496678();
  uint64_t v4 = *(void *)(v19 - 8);
  uint64_t result = MEMORY[0x1F4188790](v19);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v20 = a2;
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v21), v21)) {
        goto LABEL_26;
      }
      uint64_t v8 = HIDWORD(v21) - (int)v21;
      goto LABEL_6;
    case 2uLL:
      uint64_t v10 = *(void *)(v21 + 16);
      uint64_t v9 = *(void *)(v21 + 24);
      uint64_t v8 = v9 - v10;
      if (!__OFSUB__(v9, v10)) {
        goto LABEL_6;
      }
      goto LABEL_27;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(v20);
LABEL_6:
      if (v8 >= 0) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = v8 + 15;
      }
      uint64_t v12 = v11 >> 4;
      uint64_t result = sub_1C3FA2EC0(0, (v11 >> 4) & ~(v11 >> 63), 0, MEMORY[0x1E4FBC860]);
      if (v8 < -15) {
        goto LABEL_25;
      }
      unint64_t v13 = result;
      if ((unint64_t)(v8 + 15) < 0x1F) {
        return v13;
      }
      uint64_t v14 = 0;
      break;
  }
  while (v12)
  {
    if (v14 == 0x7FFFFFFFFFFFFFF0) {
      goto LABEL_23;
    }
    if (v14 + 16 <= v14) {
      goto LABEL_24;
    }
    uint64_t v15 = sub_1C4496528();
    sub_1C3FA2BEC(v15, v16);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v13;
    }
    unint64_t v18 = *(void *)(v13 + 16);
    unint64_t v17 = *(void *)(v13 + 24);
    if (v18 >= v17 >> 1) {
      unint64_t v13 = sub_1C3FA2EC0(v17 > 1, v18 + 1, 1, v13);
    }
    *(void *)(v13 + 16) = v18 + 1;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v4 + 32))(v13+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v18, v7, v19);
    v14 += 16;
    if (!--v12) {
      return v13;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1C3FA2BEC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (!__OFSUB__(HIDWORD(a1), a1))
      {
        uint64_t v5 = (int)v5;
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_21;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
LABEL_21:
      __break(1u);
      goto LABEL_22;
    case 3uLL:
      goto LABEL_13;
    default:
      uint64_t v5 = BYTE6(a2);
LABEL_6:
      if (v5 != 16)
      {
LABEL_13:
        sub_1C3FE3FF0();
        swift_allocError();
        *(_OWORD *)uint64_t v9 = xmmword_1C44A0890;
        *(unsigned char *)(v9 + 16) = 0;
        swift_willThrow();
        return sub_1C3F7E2CC(a1, a2);
      }
      if (!v2) {
        goto LABEL_18;
      }
      if (v2 != 1)
      {
        uint64_t v10 = *(void *)(a1 + 16);
        swift_retain();
        swift_retain();
        if (!sub_1C4496298()) {
          goto LABEL_26;
        }
        if (!__OFSUB__(v10, sub_1C44962C8()))
        {
          sub_1C44962B8();
          swift_release();
          swift_release();
          goto LABEL_18;
        }
        goto LABEL_23;
      }
      if ((int)a1 > a1 >> 32)
      {
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      if (!sub_1C4496298()) {
        goto LABEL_25;
      }
      if (!__OFSUB__((int)a1, sub_1C44962C8()))
      {
        sub_1C44962B8();
LABEL_18:
        sub_1C4496648();
        return sub_1C3F7E2CC(a1, a2);
      }
LABEL_24:
      __break(1u);
LABEL_25:
      sub_1C44962B8();
      __break(1u);
LABEL_26:
      uint64_t result = sub_1C44962B8();
      __break(1u);
      return result;
  }
}

uint64_t sub_1C3FA2EC0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C3FA0A88(a1, a2, a3, a4, &qword_1EBBC0388, MEMORY[0x1E4F27990], MEMORY[0x1E4F27990]);
}

uint64_t type metadata accessor for CRProtoDecodeContext()
{
  return self;
}

uint64_t sub_1C3FA2F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v75 = (char *)v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v74 = (uint64_t)v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBFBD0);
  uint64_t v71 = *(void *)(v73 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v73);
  uint64_t v80 = (uint64_t)v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v72 = (void *)((char *)v65 - v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0560);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v78 = (uint64_t)v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v70 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v77 - 8);
  MEMORY[0x1F4188790](v77);
  uint64_t v81 = (void *)((char *)v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v76 = type metadata accessor for Proto_Reference(0);
  uint64_t v19 = *(void *)(v76 - 8);
  MEMORY[0x1F4188790](v76);
  uint64_t v82 = (uint64_t)v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1E4FBC868];
  v3[5] = MEMORY[0x1E4FBC868];
  uint64_t v22 = v3 + 5;
  void v3[2] = v21;
  v3[3] = v21;
  v3[4] = a3;
  uint64_t v23 = *(void *)(a1 + *(int *)(type metadata accessor for Proto_Document(0) + 20))
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references;
  swift_beginAccess();
  if (!*(void *)(*(void *)v23 + 16))
  {
    swift_release();
    sub_1C3FA3A5C(a1, type metadata accessor for Proto_Document);
    return (uint64_t)v5;
  }
  v65[2] = a2;
  v65[0] = v4;
  swift_beginAccess();
  uint64_t v79 = a3;
  swift_retain();
  unint64_t v66 = v3;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC160);
  sub_1C4496F18();
  swift_endAccess();
  uint64_t v24 = *(void *)v23;
  uint64_t v25 = *(void *)(*(void *)v23 + 16);
  v65[1] = *(void *)v23;
  if (!v25)
  {
    swift_bridgeObjectRetain();
LABEL_36:
    swift_release();
    uint64_t v5 = v66;
    swift_release();
    swift_release();
    sub_1C3FA3A5C(a1, type metadata accessor for Proto_Document);
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  uint64_t v26 = v24 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  v70 += 6;
  uint64_t v67 = *(void *)(v19 + 72);
  swift_bridgeObjectRetain();
  uint64_t v68 = a1;
  uint64_t v27 = v82;
  uint64_t v69 = v22;
  while (2)
  {
    sub_1C3F78A08(v26, v27, type metadata accessor for Proto_Reference);
    uint64_t v28 = *(int *)(v76 + 20);
    uint64_t v29 = *(void *)(v27 + v28)
        + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
    swift_beginAccess();
    uint64_t v30 = v78;
    sub_1C3F970C4(v29, v78, &qword_1EBBC0560);
    if ((*v70)(v30, 1, v77) == 1)
    {
      uint64_t v31 = v81;
      *uint64_t v81 = MEMORY[0x1E4FBC860];
      v31[1] = sub_1C4496868();
      v31[2] = v32;
      sub_1C4496888();
      sub_1C3F962E0(v30, &qword_1EBBC0560);
    }
    else
    {
      uint64_t v31 = v81;
      sub_1C3F92D98(v30, (uint64_t)v81, type metadata accessor for Proto_KeyPath);
    }
    uint64_t v33 = v31[1];
    unint64_t v34 = v31[2];
    switch(v34 >> 62)
    {
      case 1uLL:
        uint64_t v35 = (int)v33;
        uint64_t v36 = v33 >> 32;
        goto LABEL_14;
      case 2uLL:
        uint64_t v35 = *(void *)(v33 + 16);
        uint64_t v36 = *(void *)(v33 + 24);
LABEL_14:
        if (v35 != v36) {
          goto LABEL_15;
        }
        goto LABEL_37;
      case 3uLL:
        goto LABEL_37;
      default:
        if ((v34 & 0xFF000000000000) == 0)
        {
LABEL_37:
          sub_1C3FE3FF0();
          swift_allocError();
          *(void *)uint64_t v63 = 0xD000000000000016;
          *(void *)(v63 + 8) = 0x80000001C44B1170;
          *(unsigned char *)(v63 + 16) = 0;
          swift_willThrow();
          sub_1C3FA3A5C((uint64_t)v81, type metadata accessor for Proto_KeyPath);
          swift_release();
          swift_release();
          uint64_t v5 = v66;
          swift_release_n();
          sub_1C3FA3A5C(a1, type metadata accessor for Proto_Document);
          sub_1C3FA3A5C(v82, type metadata accessor for Proto_Reference);
          swift_bridgeObjectRelease();
          return (uint64_t)v5;
        }
LABEL_15:
        sub_1C3F7E324(v33, v34);
        sub_1C3FA3A5C((uint64_t)v81, type metadata accessor for Proto_KeyPath);
        uint64_t v37 = *(void *)(v82 + v28)
            + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
        swift_beginAccess();
        uint64_t v38 = v74;
        sub_1C3F970C4(v37, v74, &qword_1EBBC0578);
        uint64_t v39 = type metadata accessor for Proto_Version(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v38, 1, v39) == 1)
        {
          uint64_t v40 = v72;
          uint64_t v41 = MEMORY[0x1E4FBC860];
          *uint64_t v72 = MEMORY[0x1E4FBC860];
          v40[1] = v41;
          sub_1C3F7E324(v33, v34);
          sub_1C4496888();
          sub_1C3F962E0(v38, &qword_1EBBC0578);
        }
        else
        {
          uint64_t v40 = v72;
          sub_1C3F92D98(v38, (uint64_t)v72, type metadata accessor for Proto_Version);
          sub_1C3F7E324(v33, v34);
        }
        uint64_t v42 = (uint64_t)v75;
        uint64_t v43 = (uint64_t)v40 + *(int *)(v73 + 48);
        uint64_t v44 = *(void *)(v82 + v28)
            + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
        swift_beginAccess();
        sub_1C3F970C4(v44, v42, &qword_1EBBC04F8);
        uint64_t v45 = type metadata accessor for Proto_CRDT(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v42, 1, v45) == 1)
        {
          sub_1C4496888();
          uint64_t v46 = *(int *)(v45 + 20);
          id v47 = v69;
          if (qword_1EBBC0668 != -1) {
            swift_once();
          }
          *(void *)(v43 + v46) = qword_1EBBC0660;
          swift_retain();
          sub_1C3F962E0(v42, &qword_1EBBC04F8);
        }
        else
        {
          sub_1C3F92D98(v42, v43, type metadata accessor for Proto_CRDT);
          id v47 = v69;
        }
        swift_beginAccess();
        sub_1C3FAB5F4((uint64_t)v40, v80);
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v83 = (void *)*v47;
        unsigned __int8 v49 = v83;
        *id v47 = 0x8000000000000000;
        unint64_t v51 = sub_1C3F850CC(v33, v34);
        uint64_t v52 = v49[2];
        BOOL v53 = (v50 & 1) == 0;
        uint64_t v54 = v52 + v53;
        if (!__OFADD__(v52, v53))
        {
          char v55 = v50;
          if (v49[3] >= v54)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              unint64_t v58 = v83;
              if (v50) {
                goto LABEL_4;
              }
            }
            else
            {
              sub_1C406A284();
              unint64_t v58 = v83;
              if (v55) {
                goto LABEL_4;
              }
            }
          }
          else
          {
            sub_1C4066198(v54, isUniquelyReferenced_nonNull_native);
            uint64_t v56 = sub_1C3F850CC(v33, v34);
            if ((v55 & 1) != (v57 & 1)) {
              goto LABEL_41;
            }
            unint64_t v51 = v56;
            unint64_t v58 = v83;
            if (v55)
            {
LABEL_4:
              sub_1C43D8A20(v80, v58[7] + *(void *)(v71 + 72) * v51);
              goto LABEL_5;
            }
          }
          v58[(v51 >> 6) + 8] |= 1 << v51;
          uint64_t v59 = (uint64_t *)(v58[6] + 16 * v51);
          uint64_t *v59 = v33;
          v59[1] = v34;
          sub_1C3FAB5F4(v80, v58[7] + *(void *)(v71 + 72) * v51);
          uint64_t v60 = v58[2];
          BOOL v61 = __OFADD__(v60, 1);
          uint64_t v62 = v60 + 1;
          if (v61) {
            goto LABEL_40;
          }
          v58[2] = v62;
          sub_1C3F7E324(v33, v34);
LABEL_5:
          *id v47 = v58;
          swift_bridgeObjectRelease();
          sub_1C3F7E2CC(v33, v34);
          swift_endAccess();
          sub_1C3F7E2CC(v33, v34);
          uint64_t v27 = v82;
          sub_1C3FA3A5C(v82, type metadata accessor for Proto_Reference);
          v26 += v67;
          --v25;
          a1 = v68;
          if (!v25) {
            goto LABEL_36;
          }
          continue;
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        uint64_t result = sub_1C4498558();
        __break(1u);
        return result;
    }
  }
}

uint64_t sub_1C3FA39FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3FA3A5C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1C3FA3B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)CRTTMergeableString;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C3FA3DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (v13) {

  }
  _Unwind_Resume(a1);
}

void sub_1C3FA3E6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1C3FA3FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table(v6);
  _Unwind_Resume(a1);
}

void sub_1C3FA456C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::vector<TopoSubstring *>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

id sub_1C3FA4768(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5 = a1;
  uint64_t v6 = (void *)a4();

  return v6;
}

void sub_1C3FA4B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t type metadata accessor for ObjCVersion()
{
  return self;
}

id sub_1C3FA4D74(uint64_t a1)
{
  uint64_t v2 = sub_1C4496678();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Replica();
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBBC0C80 != -1) {
    uint64_t v7 = swift_once();
  }
  MEMORY[0x1F4188790](v7);
  *(&v18 - 2) = a1;
  id v11 = v10;
  sub_1C4497A58();

  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v12(v5, v9, v2);
  uint64_t v13 = *(void *)&v9[*(int *)(v6 + 20)];
  uint64_t v14 = (objc_class *)type metadata accessor for ObjCReplica(0);
  uint64_t v15 = (char *)objc_allocWithZone(v14);
  v12(&v15[OBJC_IVAR___ObjCReplica_uuid], v5, v2);
  *(void *)&v15[OBJC_IVAR___ObjCReplica_index] = v13;
  v19.receiver = v15;
  v19.super_class = v14;
  id v16 = objc_msgSendSuper2(&v19, sel_init);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1C3FA4FC4((uint64_t)v9);
  return v16;
}

uint64_t sub_1C3FA4FC4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Replica();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ObjCReplica(uint64_t a1)
{
  return sub_1C3F9708C(a1, qword_1EBBC0100);
}

void *sub_1C3FA50F8()
{
  uint64_t v1 = sub_1C44967E8();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Replica();
  uint64_t v29 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC00E0);
  uint64_t v24 = v0;
  uint64_t v8 = *v0;
  uint64_t v9 = sub_1C4497FB8();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *uint64_t v24 = v10;
    return result;
  }
  uint64_t result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    uint64_t result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v13 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v8 + 64);
  uint64_t v25 = v8 + 64;
  int64_t v26 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v27 = v2 + 32;
  uint64_t v28 = v2 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v29 + 72) * v18;
    sub_1C3F8F450(*(void *)(v8 + 48) + v19, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Replica);
    unint64_t v20 = *(void *)(v2 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v8 + 56) + v20, v1);
    sub_1C3F8F748((uint64_t)v7, *(void *)(v10 + 48) + v19, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v10 + 56) + v20, v4, v1);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v26) {
    goto LABEL_23;
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1C3FA5438(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = sub_1C4496678();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  int v44 = a2;
  uint64_t v12 = sub_1C4497FC8();
  uint64_t v13 = v12;
  if (*(void *)(v11 + 16))
  {
    uint64_t v39 = v3;
    uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
    uint64_t v15 = *(void *)(v11 + 64);
    uint64_t v41 = (void *)(v11 + 64);
    if (v14 < 64) {
      uint64_t v16 = ~(-1 << v14);
    }
    else {
      uint64_t v16 = -1;
    }
    unint64_t v17 = v16 & v15;
    int64_t v40 = (unint64_t)(v14 + 63) >> 6;
    uint64_t v42 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
    uint64_t v18 = v12 + 64;
    uint64_t result = swift_retain();
    int64_t v20 = 0;
    uint64_t v46 = v7;
    for (uint64_t i = v8; ; v8 = i)
    {
      if (v17)
      {
        unint64_t v22 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        unint64_t v23 = v22 | (v20 << 6);
      }
      else
      {
        int64_t v24 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v24 >= v40) {
          goto LABEL_34;
        }
        unint64_t v25 = v41[v24];
        ++v20;
        if (!v25)
        {
          int64_t v20 = v24 + 1;
          if (v24 + 1 >= v40) {
            goto LABEL_34;
          }
          unint64_t v25 = v41[v20];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v40)
            {
LABEL_34:
              swift_release();
              uint64_t v5 = v39;
              if (v44)
              {
                uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
                if (v38 >= 64) {
                  bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v41 = -1 << v38;
                }
                *(void *)(v11 + 16) = 0;
              }
              break;
            }
            unint64_t v25 = v41[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v20 = v26 + 1;
                if (__OFADD__(v26, 1)) {
                  goto LABEL_41;
                }
                if (v20 >= v40) {
                  goto LABEL_34;
                }
                unint64_t v25 = v41[v20];
                ++v26;
                if (v25) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v20 = v26;
          }
        }
LABEL_21:
        unint64_t v17 = (v25 - 1) & v25;
        unint64_t v23 = __clz(__rbit64(v25)) + (v20 << 6);
      }
      uint64_t v27 = *(void *)(v8 + 72);
      unint64_t v28 = *(void *)(v11 + 48) + v27 * v23;
      if (v44) {
        (*v45)(v10, v28, v46);
      }
      else {
        (*v42)(v10, v28, v46);
      }
      uint64_t v29 = v11;
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      sub_1C3FA180C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
      uint64_t result = sub_1C4497078();
      uint64_t v31 = -1 << *(unsigned char *)(v13 + 32);
      unint64_t v32 = result & ~v31;
      unint64_t v33 = v32 >> 6;
      if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
      {
        unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v34 = 0;
        unint64_t v35 = (unint64_t)(63 - v31) >> 6;
        do
        {
          if (++v33 == v35 && (v34 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v36 = v33 == v35;
          if (v33 == v35) {
            unint64_t v33 = 0;
          }
          v34 |= v36;
          uint64_t v37 = *(void *)(v18 + 8 * v33);
        }
        while (v37 == -1);
        unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
      }
      *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v45)(*(void *)(v13 + 48) + v27 * v21, v10, v46);
      *(void *)(*(void *)(v13 + 56) + 8 * v21) = v30;
      ++*(void *)(v13 + 16);
      uint64_t v11 = v29;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v5 = v13;
  return result;
}

uint64_t sub_1C3FA585C(uint64_t a1, int a2)
{
  return sub_1C3FA5438(a1, a2, qword_1EBBBF948);
}

uint64_t sub_1C3FA5868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1C3F8F160(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1C3FA50F8();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for Replica();
    sub_1C3F902AC(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = sub_1C44967E8();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_1C3FA5A34(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = sub_1C44967E8();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }
  return v14(v15, v16, 1, v17);
}

unint64_t sub_1C3FA5A34(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Replica();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v30 = a2 + 64;
    unint64_t result = sub_1C4497C08();
    uint64_t v12 = v30;
    if ((*(void *)(v30 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v13 = (result + 1) & v11;
      uint64_t v14 = *(void *)(v5 + 72);
      while (1)
      {
        int64_t v15 = v14 * v10;
        sub_1C3F8EF8C(*(void *)(a2 + 48) + v14 * v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Replica);
        sub_1C44985F8();
        sub_1C4496638();
        sub_1C4498608();
        uint64_t v16 = sub_1C4498628();
        unint64_t result = sub_1C3F902AC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Replica);
        unint64_t v17 = v16 & v11;
        if ((uint64_t)a1 >= (uint64_t)v13) {
          break;
        }
        if (v17 < v13) {
          goto LABEL_11;
        }
LABEL_12:
        if ((uint64_t)(v14 * a1) < v15 || *(void *)(a2 + 48) + v14 * a1 >= *(void *)(a2 + 48) + v15 + v14)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v14 * a1 != v15)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v18 = *(void *)(a2 + 56);
        uint64_t v19 = *(void *)(*(void *)(sub_1C44967E8() - 8) + 72);
        int64_t v20 = v19 * a1;
        unint64_t result = v18 + v19 * a1;
        int64_t v21 = v19 * v10;
        unint64_t v22 = v18 + v19 * v10 + v19;
        if (v20 < v21 || result >= v22)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v20 == v21) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v11;
        uint64_t v12 = v30;
        if (((*(void *)(v30 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          goto LABEL_23;
        }
      }
      if (v17 < v13) {
        goto LABEL_6;
      }
LABEL_11:
      if ((uint64_t)a1 < (uint64_t)v17) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_23:
    int64_t v24 = (uint64_t *)(v12 + 8 * (a1 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << a1) - 1;
  }
  else
  {
    int64_t v24 = (uint64_t *)(a2 + 64 + 8 * (a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  *int64_t v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

id sub_1C3FA5D28(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v8 = sub_1C4496678();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = a1;
  a5(a3);

  unint64_t v13 = (void *)sub_1C4496608();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v13;
}

uint64_t sub_1C3FA5EA0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C3FA5EC0(a1, &OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy, a2);
}

uint64_t sub_1C3FA5EC0@<X0>(unint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v6 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (unint64_t *)&v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for Proto_Subsequence(0);
  uint64_t v11 = v10 - 8;
  MEMORY[0x1F4188790](v10);
  unint64_t v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = *(void *)(v3 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_decoder);
  uint64_t v15 = v3 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence;
  swift_beginAccess();
  sub_1C3F96414(v15, (uint64_t)v13, type metadata accessor for Proto_Subsequence);
  uint64_t v16 = (uint64_t *)(*(void *)&v13[*(int *)(v11 + 28)] + *a2);
  swift_beginAccess();
  uint64_t v17 = *v16;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = sub_1C3F9633C((uint64_t)v13, type metadata accessor for Proto_Subsequence);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(void *)(v17 + 16) <= a1)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  sub_1C3F96414(v17+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * a1, (uint64_t)v9, type metadata accessor for Proto_Timestamp);
  swift_bridgeObjectRelease();
  unint64_t v19 = *v9;
  sub_1C3F9633C((uint64_t)v9, type metadata accessor for Proto_Timestamp);
  uint64_t v20 = *(void *)(v14 + 24);
  unint64_t v21 = *(void *)(v20 + 16);
  if (v21) {
    BOOL v22 = v19 >= v21;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(_OWORD *)uint64_t v23 = xmmword_1C44A0890;
    *(unsigned char *)(v23 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    uint64_t v24 = sub_1C4496678();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v26, v20+ ((*(unsigned __int8 *)(*(void *)(v24 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v24 - 8) + 80))+ *(void *)(*(void *)(v24 - 8) + 72) * v19, v24);
  }
  return swift_release();
}

uint64_t sub_1C3FA61C8(unint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for Proto_Subsequence(0);
  uint64_t v10 = v9 - 8;
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = v2 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence;
  swift_beginAccess();
  sub_1C3F96414(v13, (uint64_t)v12, type metadata accessor for Proto_Subsequence);
  uint64_t v14 = (uint64_t *)(*(void *)&v12[*(int *)(v10 + 28)] + *a2);
  swift_beginAccess();
  uint64_t v15 = *v14;
  swift_bridgeObjectRetain();
  sub_1C3F9633C((uint64_t)v12, type metadata accessor for Proto_Subsequence);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(v15 + 16) <= a1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  sub_1C3F96414(v15+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * a1, (uint64_t)v8, type metadata accessor for Proto_Timestamp);
  swift_bridgeObjectRelease();
  unint64_t v16 = *((void *)v8 + 1);
  sub_1C3F9633C((uint64_t)v8, type metadata accessor for Proto_Timestamp);
  if ((v16 & 0x8000000000000000) == 0 && !HIDWORD(v16)) {
    return v16;
  }
LABEL_8:
  uint64_t result = sub_1C4497F48();
  __break(1u);
  return result;
}

uint64_t sub_1C3FA6464(unint64_t a1)
{
  return sub_1C3FA61C8(a1, &OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy);
}

uint64_t sub_1C3FA6470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v72 = a4;
  uint64_t v71 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0350);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v69 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for Proto_Constants(0);
  uint64_t v63 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  uint64_t v61 = (uint64_t)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v60 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v67 = (char *)&v58 - v11;
  uint64_t v65 = type metadata accessor for Proto_Version(0);
  uint64_t v70 = *(void *)(v65 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v65);
  uint64_t v59 = (uint64_t)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v62 = (uint64_t)&v58 - v14;
  uint64_t v66 = type metadata accessor for Proto_Reference(0);
  MEMORY[0x1F4188790](v66);
  unint64_t v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Proto_Value(0);
  MEMORY[0x1F4188790](v17);
  unint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1F4188790](v20);
  BOOL v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0598);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = a1;
  uint64_t v26 = a1 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  sub_1C3F970C4(v26, (uint64_t)v25, &qword_1EBBC0598);
  uint64_t v27 = type metadata accessor for Proto_Document.OneOf_Root(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v25, 1, v27) == 1)
  {
    uint64_t v28 = v73;
    goto LABEL_3;
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_1C3F92E00((uint64_t)v25, (uint64_t)v22, type metadata accessor for Proto_CRDT);
    sub_1C3F7251C(&qword_1EBBC0680, (void (*)(uint64_t))type metadata accessor for Proto_CRDT);
    uint64_t v43 = v73;
    sub_1C4496BD8();
    uint64_t v28 = v43;
    if (v43)
    {
      BOOL v36 = type metadata accessor for Proto_CRDT;
      uint64_t v37 = (uint64_t)v22;
      return sub_1C3F96610(v37, v36);
    }
    unint64_t v51 = type metadata accessor for Proto_CRDT;
    uint64_t v52 = (uint64_t)v22;
    goto LABEL_29;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_1C3F92E00((uint64_t)v25, (uint64_t)v16, type metadata accessor for Proto_Reference);
    sub_1C3F7251C(&qword_1EBBBC848, (void (*)(uint64_t))type metadata accessor for Proto_Reference);
    uint64_t v44 = v73;
    sub_1C4496BD8();
    uint64_t v28 = v44;
    if (v44)
    {
      BOOL v36 = type metadata accessor for Proto_Reference;
      uint64_t v37 = (uint64_t)v16;
      return sub_1C3F96610(v37, v36);
    }
    unint64_t v51 = type metadata accessor for Proto_Reference;
    uint64_t v52 = (uint64_t)v16;
LABEL_29:
    sub_1C3F96610(v52, v51);
    goto LABEL_3;
  }
  sub_1C3F92E00((uint64_t)v25, (uint64_t)v19, type metadata accessor for Proto_Value);
  sub_1C3F7251C(&qword_1EBBBF8E0, (void (*)(uint64_t))type metadata accessor for Proto_Value);
  uint64_t v35 = v73;
  sub_1C4496BD8();
  uint64_t v28 = v35;
  if (v35)
  {
    BOOL v36 = type metadata accessor for Proto_Value;
    uint64_t v37 = (uint64_t)v19;
    return sub_1C3F96610(v37, v36);
  }
  sub_1C3F96610((uint64_t)v19, type metadata accessor for Proto_Value);
LABEL_3:
  uint64_t v29 = v68;
  uint64_t v30 = (uint64_t)v67;
  uint64_t v31 = v68 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references;
  swift_beginAccess();
  if (*(void *)(*(void *)v31 + 16))
  {
    sub_1C3F7251C(&qword_1EBBBC848, (void (*)(uint64_t))type metadata accessor for Proto_Reference);
    swift_bridgeObjectRetain();
    sub_1C4496BC8();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v33 = (uint64_t)v69;
    if (v28) {
      return result;
    }
  }
  else
  {
    uint64_t v33 = (uint64_t)v69;
  }
  uint64_t v38 = v29 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  sub_1C3F970C4(v38, v30, &qword_1EBBC0578);
  uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  v70 += 48;
  if (v39(v30, 1, v65) == 1)
  {
    sub_1C3F962E0(v30, &qword_1EBBC0578);
  }
  else
  {
    uint64_t v40 = v30;
    uint64_t v41 = v62;
    sub_1C3F92E00(v40, v62, type metadata accessor for Proto_Version);
    sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
    sub_1C4496BD8();
    uint64_t result = sub_1C3F96610(v41, type metadata accessor for Proto_Version);
    if (v28) {
      return result;
    }
  }
  uint64_t v42 = v29 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  swift_beginAccess();
  sub_1C3F970C4(v42, v33, &qword_1EBBC0350);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v33, 1, v64) == 1)
  {
    sub_1C3F962E0(v33, &qword_1EBBC0350);
  }
  else
  {
    uint64_t v45 = v33;
    uint64_t v46 = v61;
    sub_1C3F92E00(v45, v61, type metadata accessor for Proto_Constants);
    sub_1C3F7251C(&qword_1EBBC0600, (void (*)(uint64_t))type metadata accessor for Proto_Constants);
    sub_1C4496BD8();
    uint64_t result = sub_1C3F96610(v46, type metadata accessor for Proto_Constants);
    if (v28) {
      return result;
    }
  }
  uint64_t v47 = v29 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assets;
  swift_beginAccess();
  if (!*(void *)(*(void *)v47 + 16)
    || (type metadata accessor for Proto_Asset(0),
        sub_1C3F7251C(&qword_1EA39AE50, (void (*)(uint64_t))type metadata accessor for Proto_Asset),
        swift_bridgeObjectRetain(),
        sub_1C4496BC8(),
        uint64_t result = swift_bridgeObjectRelease(),
        !v28))
  {
    uint64_t v48 = v29
        + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__versionUuid;
    swift_beginAccess();
    uint64_t v49 = *(void *)v48;
    unint64_t v50 = *(void *)(v48 + 8);
    switch(v50 >> 62)
    {
      case 1uLL:
        if ((int)v49 != v49 >> 32) {
          goto LABEL_33;
        }
        goto LABEL_34;
      case 2uLL:
        if (*(void *)(v49 + 16) != *(void *)(v49 + 24)) {
          goto LABEL_33;
        }
        goto LABEL_34;
      case 3uLL:
        goto LABEL_34;
      default:
        if ((v50 & 0xFF000000000000) == 0) {
          goto LABEL_34;
        }
LABEL_33:
        sub_1C3F7E324(*(void *)v48, *(void *)(v48 + 8));
        sub_1C4496B38();
        uint64_t result = sub_1C3F7E2CC(v49, v50);
        if (v28) {
          return result;
        }
LABEL_34:
        uint64_t v53 = v29
            + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__deltaReferences;
        swift_beginAccess();
        if (*(void *)(*(void *)v53 + 16))
        {
          sub_1C3F7251C(&qword_1EBBBC848, (void (*)(uint64_t))type metadata accessor for Proto_Reference);
          swift_bridgeObjectRetain();
          sub_1C4496BC8();
          uint64_t result = swift_bridgeObjectRelease();
          if (v28) {
            return result;
          }
        }
        uint64_t v54 = v29
            + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion;
        swift_beginAccess();
        uint64_t v55 = v60;
        sub_1C3F970C4(v54, v60, &qword_1EBBC0578);
        if (v39(v55, 1, v65) == 1) {
          return sub_1C3F962E0(v55, &qword_1EBBC0578);
        }
        uint64_t v56 = v55;
        uint64_t v57 = v59;
        sub_1C3F92E00(v56, v59, type metadata accessor for Proto_Version);
        sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
        sub_1C4496BD8();
        BOOL v36 = type metadata accessor for Proto_Version;
        uint64_t v37 = v57;
        break;
    }
    return sub_1C3F96610(v37, v36);
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_1C3FA7128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_231Tm_33);
}

uint64_t sub_1C3FA713C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v46 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v45 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47);
  uint64_t v44 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v43 = (uint64_t)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v40 - v13;
  uint64_t v15 = type metadata accessor for Proto_Version(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v42 = (uint64_t)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v40 - v19;
  swift_beginAccess();
  uint64_t v21 = a1;
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v48 = a3;
  if (v22)
  {
    uint64_t v23 = v49;
    uint64_t result = sub_1C4496BB8();
    uint64_t v25 = v23;
    if (v23) {
      return result;
    }
  }
  else
  {
    uint64_t v25 = v49;
  }
  uint64_t v49 = a4;
  uint64_t v26 = a1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  sub_1C3F970C4(v26, (uint64_t)v14, &qword_1EBBC0578);
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  unsigned int v28 = v27(v14, 1, v15);
  uint64_t v41 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v27;
  if (v28 == 1)
  {
    sub_1C3F962E0((uint64_t)v14, &qword_1EBBC0578);
  }
  else
  {
    sub_1C3F92E00((uint64_t)v14, (uint64_t)v20, type metadata accessor for Proto_Version);
    sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
    sub_1C4496BD8();
    uint64_t result = sub_1C3F96610((uint64_t)v20, type metadata accessor for Proto_Version);
    if (v25) {
      return result;
    }
  }
  uint64_t v29 = a1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  uint64_t v30 = v29;
  uint64_t v31 = v46;
  sub_1C3F970C4(v30, v46, &qword_1EBBC0620);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v31, 1, v47) == 1)
  {
    sub_1C3F962E0(v31, &qword_1EBBC0620);
  }
  else
  {
    uint64_t v32 = v44;
    sub_1C3F92E00(v31, v44, type metadata accessor for Proto_Timestamp);
    sub_1C3F7251C(&qword_1EBBC06F0, (void (*)(uint64_t))type metadata accessor for Proto_Timestamp);
    sub_1C4496BD8();
    uint64_t result = sub_1C3F96610(v32, type metadata accessor for Proto_Timestamp);
    if (v25) {
      return result;
    }
  }
  uint64_t v33 = a1 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__insertions;
  swift_beginAccess();
  if (!*(void *)(*(void *)v33 + 16)
    || (type metadata accessor for Proto_Set.Element(0),
        sub_1C3F7251C(&qword_1EBBBF210, (void (*)(uint64_t))type metadata accessor for Proto_Set.Element),
        swift_bridgeObjectRetain(),
        sub_1C4496BC8(),
        uint64_t result = swift_bridgeObjectRelease(),
        !v25))
  {
    uint64_t v34 = v21 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__minVersion;
    swift_beginAccess();
    uint64_t v35 = v34;
    uint64_t v36 = v43;
    sub_1C3F970C4(v35, v43, &qword_1EBBC0578);
    if (v41(v36, 1, v15) == 1)
    {
      sub_1C3F962E0(v36, &qword_1EBBC0578);
    }
    else
    {
      uint64_t v37 = v36;
      uint64_t v38 = v42;
      sub_1C3F92E00(v37, v42, type metadata accessor for Proto_Version);
      sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
      sub_1C4496BD8();
      uint64_t result = sub_1C3F96610(v38, type metadata accessor for Proto_Version);
      if (v25) {
        return result;
      }
    }
    uint64_t v39 = v21 + OBJC_IVAR____TtCV9Coherence9Proto_SetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__removed;
    uint64_t result = swift_beginAccess();
    if (*(void *)(*(void *)v39 + 16))
    {
      type metadata accessor for Proto_Set.Element(0);
      sub_1C3F7251C(&qword_1EBBBF210, (void (*)(uint64_t))type metadata accessor for Proto_Set.Element);
      swift_bridgeObjectRetain();
      sub_1C4496BC8();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

id sub_1C3FA7880()
{
  if (qword_1EBBC10F0 != -1) {
    swift_once();
  }
  swift_retain();
  sub_1C4497A58();
  swift_release();
  char v0 = v8;
  uint64_t v1 = v9;
  uint64_t v2 = (objc_class *)type metadata accessor for ObjCRenames();
  uint64_t v3 = (char *)objc_allocWithZone(v2);
  uint64_t v4 = &v3[OBJC_IVAR____TtC9Coherence11ObjCRenames_renames];
  *(void *)uint64_t v4 = v7;
  v4[8] = v0;
  *((void *)v4 + 2) = v1;
  v6.receiver = v3;
  v6.super_class = v2;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t sub_1C3FA79C0(uint64_t a1, void (*a2)(uint64_t))
{
  if (qword_1EBBC10F0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  swift_retain();
  uint64_t v3 = swift_bridgeObjectRetain();
  a2(v3);
  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  swift_retain();
  uint64_t v4 = swift_bridgeObjectRetain();
  a2(v4);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1C3FA7AD8(uint64_t a1)
{
  return sub_1C3FA7B00(a1, (uint64_t)&unk_1F1FA17B8, (uint64_t)sub_1C4134F08, (uint64_t)&block_descriptor_16_0);
}

uint64_t sub_1C3FA7B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1C4496D68();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1C4496DA8();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16))
  {
    v19[1] = *(void *)(v4 + 40);
    uint64_t v20 = result;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = a1;
    *(void *)(v17 + 24) = v4;
    aBlock[4] = a3;
    void aBlock[5] = v17;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1C3F61AC0;
    aBlock[3] = a4;
    uint64_t v18 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1C4496D88();
    uint64_t v21 = MEMORY[0x1E4FBC860];
    sub_1C3F709D0((unint64_t *)&qword_1EBBC07F0, MEMORY[0x1E4FBCB00]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0960);
    sub_1C3FBC8D4();
    sub_1C4497BF8();
    MEMORY[0x1C87806C0](0, v16, v11, v18);
    _Block_release(v18);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v20);
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for ObjCRenameSequence()
{
  return self;
}

uint64_t sub_1C3FA7E84(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v82 = (uint64_t)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v87 = (uint64_t)&v71 - v7;
  uint64_t v8 = sub_1C44967E8();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v81 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v86 = (char *)&v71 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v80 = (uint64_t)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v77 = (uint64_t)&v71 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v71 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v71 - v21;
  uint64_t v23 = (char **)(a1 + OBJC_IVAR___ObjCVersion_version);
  swift_beginAccess();
  uint64_t v73 = v23;
  uint64_t v24 = (uint64_t)v23[1];
  uint64_t v25 = *(void *)(v24 + 64);
  uint64_t v74 = v24 + 64;
  uint64_t v26 = 1 << *(unsigned char *)(v24 + 32);
  uint64_t v27 = -1;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  unint64_t v28 = v27 & v25;
  uint64_t v29 = (unint64_t *)(v1 + OBJC_IVAR___ObjCRenameSequence_renameAddedBySequence);
  uint64_t v30 = (void (**)(uint64_t, char *, uint64_t))(v9 + 16);
  long long v88 = (unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  uint64_t v89 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  uint64_t v84 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  uint64_t v85 = v4;
  uint64_t v79 = v9;
  uint64_t v83 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
  int64_t v75 = (unint64_t)(v26 + 63) >> 6;
  int64_t v72 = v75 - 1;
  uint64_t v76 = v24;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v78 = 0;
  if (!v28) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v32 = __clz(__rbit64(v28));
  v28 &= v28 - 1;
  unint64_t v33 = v32 | (v78 << 6);
LABEL_5:
  uint64_t v34 = v76;
  uint64_t v35 = *(void *)(v76 + 48);
  uint64_t v36 = type metadata accessor for Replica();
  sub_1C3FB563C(v35 + *(void *)(*(void *)(v36 - 8) + 72) * v33, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for Replica);
  (*(void (**)(char *, unint64_t, uint64_t))(v79 + 16))(&v20[*(int *)(v3 + 48)], *(void *)(v34 + 56) + *(void *)(v79 + 72) * v33, v8);
  uint64_t v37 = *v89;
  (*v89)(v20, 0, 1, v3);
  while (1)
  {
    sub_1C3F961BC((uint64_t)v20, (uint64_t)v22, &qword_1EBBC07A0);
    uint64_t v41 = *v88;
    if ((*v88)(v22, 1, v3) == 1) {
      break;
    }
    uint64_t v42 = v86;
    (*v84)(v86, &v22[*(int *)(v3 + 48)], v8);
    uint64_t v43 = v87 + *(int *)(v3 + 48);
    sub_1C3FB5024((uint64_t)v22, v87, (uint64_t (*)(void))type metadata accessor for Replica);
    (*v30)(v43, v42, v8);
    swift_beginAccess();
    unint64_t v44 = *v29;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v29 = v44;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v44 = sub_1C3FF21DC(0, *(void *)(v44 + 16) + 1, 1, v44);
      *uint64_t v29 = v44;
    }
    unint64_t v47 = *(void *)(v44 + 16);
    unint64_t v46 = *(void *)(v44 + 24);
    if (v47 >= v46 >> 1)
    {
      unint64_t v44 = sub_1C3FF21DC(v46 > 1, v47 + 1, 1, v44);
      *uint64_t v29 = v44;
    }
    *(void *)(v44 + 16) = v47 + 1;
    sub_1C3F961BC(v87, v44+ ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))+ *(void *)(v85 + 72) * v47, &qword_1EBBC0798);
    swift_endAccess();
    uint64_t result = (*v83)(v86, v8);
    if (v28) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v38 = v78 + 1;
    if (__OFADD__(v78, 1))
    {
      __break(1u);
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    if (v38 < v75)
    {
      unint64_t v39 = *(void *)(v74 + 8 * v38);
      if (v39) {
        goto LABEL_9;
      }
      int64_t v40 = v78 + 2;
      ++v78;
      if (v38 + 1 < v75)
      {
        unint64_t v39 = *(void *)(v74 + 8 * v40);
        if (v39) {
          goto LABEL_12;
        }
        int64_t v78 = v38 + 1;
        if (v38 + 2 < v75)
        {
          unint64_t v39 = *(void *)(v74 + 8 * (v38 + 2));
          if (v39)
          {
            v38 += 2;
LABEL_9:
            unint64_t v28 = (v39 - 1) & v39;
            unint64_t v33 = __clz(__rbit64(v39)) + (v38 << 6);
            int64_t v78 = v38;
            goto LABEL_5;
          }
          int64_t v40 = v38 + 3;
          int64_t v78 = v38 + 2;
          if (v38 + 3 < v75)
          {
            unint64_t v39 = *(void *)(v74 + 8 * v40);
            if (!v39)
            {
              while (1)
              {
                int64_t v38 = v40 + 1;
                if (__OFADD__(v40, 1)) {
                  break;
                }
                if (v38 >= v75)
                {
                  int64_t v78 = v72;
                  goto LABEL_23;
                }
                unint64_t v39 = *(void *)(v74 + 8 * v38);
                ++v40;
                if (v39) {
                  goto LABEL_9;
                }
              }
LABEL_64:
              __break(1u);
              goto LABEL_65;
            }
LABEL_12:
            int64_t v38 = v40;
            goto LABEL_9;
          }
        }
      }
    }
LABEL_23:
    uint64_t v37 = *v89;
    (*v89)(v20, 1, 1, v3);
    unint64_t v28 = 0;
  }
  swift_release();
  uint64_t v48 = *v73;
  uint64_t v49 = *((void *)*v73 + 8);
  uint64_t v76 = (uint64_t)(*v73 + 64);
  uint64_t v50 = 1 << v48[32];
  uint64_t v51 = -1;
  if (v50 < 64) {
    uint64_t v51 = ~(-1 << v50);
  }
  unint64_t v52 = v51 & v49;
  int64_t v78 = (unint64_t)(v50 + 63) >> 6;
  int64_t v75 = v78 - 1;
  uint64_t v86 = v48;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v87 = 0;
  uint64_t v53 = v80;
  if (!v52) {
    goto LABEL_36;
  }
LABEL_34:
  unint64_t v54 = __clz(__rbit64(v52));
  v52 &= v52 - 1;
  uint64_t v55 = v54 | (v87 << 6);
  while (2)
  {
    uint64_t v56 = v86;
    uint64_t v57 = *((void *)v86 + 6);
    uint64_t v58 = v57 + *(void *)(*(void *)(type metadata accessor for Replica() - 8) + 72) * v55;
    uint64_t v53 = v80;
    sub_1C3FB563C(v58, v80, (uint64_t (*)(void))type metadata accessor for Replica);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v53 + *(int *)(v3 + 48), *((void *)v56 + 7) + *(void *)(v79 + 72) * v55, v8);
    v37((char *)v53, 0, 1, v3);
    while (1)
    {
      uint64_t v62 = v77;
      sub_1C3F961BC(v53, v77, &qword_1EBBC07A0);
      if (v41((char *)v62, 1, v3) == 1) {
        return swift_release();
      }
      uint64_t v63 = v37;
      uint64_t v64 = v62;
      uint64_t v65 = v81;
      (*v84)(v81, (char *)(v62 + *(int *)(v3 + 48)), v8);
      uint64_t v66 = v82 + *(int *)(v3 + 48);
      sub_1C3FB5024(v64, v82, (uint64_t (*)(void))type metadata accessor for Replica);
      (*v30)(v66, v65, v8);
      swift_beginAccess();
      unint64_t v67 = *v29;
      char v68 = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v29 = v67;
      if ((v68 & 1) == 0)
      {
        unint64_t v67 = sub_1C3FF21DC(0, *(void *)(v67 + 16) + 1, 1, v67);
        *uint64_t v29 = v67;
      }
      unint64_t v70 = *(void *)(v67 + 16);
      unint64_t v69 = *(void *)(v67 + 24);
      if (v70 >= v69 >> 1)
      {
        unint64_t v67 = sub_1C3FF21DC(v69 > 1, v70 + 1, 1, v67);
        *uint64_t v29 = v67;
      }
      *(void *)(v67 + 16) = v70 + 1;
      sub_1C3F961BC(v82, v67+ ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80))+ *(void *)(v85 + 72) * v70, &qword_1EBBC0798);
      swift_endAccess();
      uint64_t result = (*v83)(v81, v8);
      uint64_t v37 = v63;
      uint64_t v53 = v80;
      if (v52) {
        goto LABEL_34;
      }
LABEL_36:
      uint64_t v59 = v87 + 1;
      if (__OFADD__(v87, 1)) {
        goto LABEL_63;
      }
      if (v59 < v78)
      {
        unint64_t v60 = *(void *)(v76 + 8 * v59);
        if (v60) {
          goto LABEL_39;
        }
        uint64_t v61 = v87 + 2;
        ++v87;
        if (v59 + 1 < v78)
        {
          unint64_t v60 = *(void *)(v76 + 8 * v61);
          if (v60) {
            goto LABEL_42;
          }
          uint64_t v87 = v59 + 1;
          if (v59 + 2 < v78)
          {
            unint64_t v60 = *(void *)(v76 + 8 * (v59 + 2));
            if (v60)
            {
              v59 += 2;
              goto LABEL_39;
            }
            uint64_t v61 = v59 + 3;
            uint64_t v87 = v59 + 2;
            if (v59 + 3 < v78) {
              break;
            }
          }
        }
      }
LABEL_53:
      v37((char *)v53, 1, 1, v3);
      unint64_t v52 = 0;
    }
    unint64_t v60 = *(void *)(v76 + 8 * v61);
    if (v60)
    {
LABEL_42:
      uint64_t v59 = v61;
LABEL_39:
      unint64_t v52 = (v60 - 1) & v60;
      uint64_t v55 = __clz(__rbit64(v60)) + (v59 << 6);
      uint64_t v87 = v59;
      continue;
    }
    break;
  }
  while (1)
  {
    uint64_t v59 = v61 + 1;
    if (__OFADD__(v61, 1)) {
      break;
    }
    if (v59 >= v78)
    {
      uint64_t v87 = v75;
      goto LABEL_53;
    }
    unint64_t v60 = *(void *)(v76 + 8 * v59);
    ++v61;
    if (v60) {
      goto LABEL_39;
    }
  }
LABEL_65:
  __break(1u);
  return result;
}

id sub_1C3FA8890(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void *__return_ptr))
{
  id v5 = a1;
  a4(v8);

  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  uint64_t v6 = (void *)sub_1C44982D8();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t sub_1C3FA8970()
{
  uint64_t v1 = type metadata accessor for Proto_Sequence(0);
  uint64_t v2 = v1 - 8;
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = *(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC9Coherence17CRSequenceDecoder_getStorage);
  sub_1C3F96414(v0 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded, (uint64_t)v4, type metadata accessor for Proto_Sequence);
  uint64_t v6 = *(void *)&v4[*(int *)(v2 + 28)];
  swift_beginAccess();
  uint64_t v7 = *(void *)(v6 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1C3F9633C((uint64_t)v4, type metadata accessor for Proto_Sequence);
  v5(v7);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1C3FA8AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC06E8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_Sequence(0);
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v28 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v26 = (uint64_t)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC0748);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Proto_Set(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1;
  uint64_t v18 = a1 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__set;
  swift_beginAccess();
  sub_1C3F970C4(v18, (uint64_t)v12, (uint64_t *)&unk_1EBBC0748);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1C3F962E0((uint64_t)v12, (uint64_t *)&unk_1EBBC0748);
    uint64_t v19 = v29;
    uint64_t v20 = v17;
  }
  else
  {
    sub_1C3F92E00((uint64_t)v12, (uint64_t)v16, type metadata accessor for Proto_Set);
    sub_1C3F7251C(&qword_1EBBC0220, (void (*)(uint64_t))type metadata accessor for Proto_Set);
    uint64_t v21 = v29;
    sub_1C4496BD8();
    uint64_t v19 = v21;
    uint64_t result = sub_1C3F96610((uint64_t)v16, type metadata accessor for Proto_Set);
    uint64_t v20 = v17;
    if (v21) {
      return result;
    }
  }
  uint64_t v23 = v20 + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__sequence;
  swift_beginAccess();
  sub_1C3F970C4(v23, (uint64_t)v7, &qword_1EBBC06E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v7, 1, v28) == 1)
  {
    sub_1C3F962E0((uint64_t)v7, &qword_1EBBC06E8);
  }
  else
  {
    uint64_t v24 = v26;
    sub_1C3F92E00((uint64_t)v7, v26, type metadata accessor for Proto_Sequence);
    sub_1C3F7251C(&qword_1EBBBC028, (void (*)(uint64_t))type metadata accessor for Proto_Sequence);
    sub_1C4496BD8();
    uint64_t result = sub_1C3F96610(v24, type metadata accessor for Proto_Sequence);
    if (v19) {
      return result;
    }
  }
  uint64_t v25 = v20
      + OBJC_IVAR____TtCV9Coherence16Proto_OrderedSetP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamps;
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)v25 + 16))
  {
    type metadata accessor for Proto_Timestamp(0);
    sub_1C3F7251C(&qword_1EBBC06F0, (void (*)(uint64_t))type metadata accessor for Proto_Timestamp);
    swift_bridgeObjectRetain();
    sub_1C4496BC8();
    return swift_bridgeObjectRelease();
  }
  return result;
}

id sub_1C3FA8F68()
{
  return sub_1C3FA90F0(&OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version, 0xD000000000000018, 0x80000001C44B2C70);
}

id sub_1C3FA90B8()
{
  return sub_1C3FA90F0(&OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedByVersion, 0xD000000000000022, 0x80000001C44B2C40);
}

id sub_1C3FA90F0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = a3;
  uint64_t v43 = a2;
  uint64_t v5 = type metadata accessor for Proto_Version(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v39 = (uint64_t *)((char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v49 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = type metadata accessor for Proto_Sequence(0);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v42 = (uint64_t)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v38 - v16;
  uint64_t v40 = v3;
  uint64_t v18 = v3 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded;
  sub_1C3F96414(v3 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded, (uint64_t)&v38 - v16, type metadata accessor for Proto_Sequence);
  uint64_t v19 = *(void *)&v17[*(int *)(v13 + 20)];
  unint64_t v44 = a1;
  uint64_t v20 = v19 + *a1;
  swift_beginAccess();
  sub_1C3F970C4(v20, (uint64_t)v12, &qword_1EBBC0578);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  *(void *)&long long v46 = v5;
  LODWORD(v20) = v21(v12, 1, v5);
  sub_1C3F962E0((uint64_t)v12, &qword_1EBBC0578);
  sub_1C3F9633C((uint64_t)v17, type metadata accessor for Proto_Sequence);
  if (v20 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    uint64_t v22 = v45;
    *(void *)uint64_t v23 = v43;
    *(void *)(v23 + 8) = v22;
    *(unsigned char *)(v23 + 16) = 0;
    return (id)swift_willThrow();
  }
  else
  {
    uint64_t v25 = v42;
    sub_1C3F96414(v18, v42, type metadata accessor for Proto_Sequence);
    uint64_t v26 = *(void *)(v25 + *(int *)(v13 + 20)) + *v44;
    swift_beginAccess();
    uint64_t v27 = v49;
    sub_1C3F970C4(v26, v49, &qword_1EBBC0578);
    uint64_t v28 = v25;
    if (v21((char *)v27, 1, v46) == 1)
    {
      uint64_t v29 = MEMORY[0x1E4FBC860];
      uint64_t v30 = v39;
      *unint64_t v39 = MEMORY[0x1E4FBC860];
      v30[1] = v29;
      sub_1C4496888();
      sub_1C3F962E0(v27, &qword_1EBBC0578);
    }
    else
    {
      uint64_t v30 = v39;
      sub_1C3F9E890(v27, (uint64_t)v39, type metadata accessor for Proto_Version);
    }
    uint64_t v32 = v40;
    uint64_t v31 = v41;
    sub_1C3F9633C(v28, type metadata accessor for Proto_Sequence);
    uint64_t v33 = *(void *)(v32 + OBJC_IVAR____TtC9Coherence15CRStringDecoder_decoder);
    swift_retain();
    id result = (id)sub_1C3F8F9D0(v30, v33, &v48);
    if (!v31)
    {
      uint64_t v34 = (objc_class *)type metadata accessor for ObjCVersion();
      long long v46 = v48;
      uint64_t v35 = (char *)objc_allocWithZone(v34);
      uint64_t v36 = &v35[OBJC_IVAR___ObjCVersion_version];
      uint64_t v37 = MEMORY[0x1E4FBC868];
      *(void *)uint64_t v36 = MEMORY[0x1E4FBC868];
      *((void *)v36 + 1) = v37;
      swift_beginAccess();
      *(_OWORD *)uint64_t v36 = v46;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v47.receiver = v35;
      v47.super_class = v34;
      return objc_msgSendSuper2(&v47, sel_init);
    }
  }
  return result;
}

uint64_t sub_1C3FA9554(uint64_t a1, uint64_t a2)
{
  uint64_t v140 = a2;
  uint64_t v3 = type metadata accessor for RetainedMapRun(0);
  uint64_t v141 = *(char **)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v135 = (uint64_t)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBF0A0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v106 = (uint64_t)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v136 = (char *)&v103 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBEF70);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v105 = (uint64_t)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v103 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v142 = (uint64_t)&v103 - v16;
  uint64_t v17 = sub_1C44967A8();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v131 = (char *)&v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78);
  MEMORY[0x1F4188790](v109);
  uint64_t v21 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = sub_1C44967E8();
  uint64_t v22 = *(void *)(v126 - 8);
  MEMORY[0x1F4188790](v126 - 8);
  uint64_t v24 = (char *)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Replica();
  uint64_t v113 = *(void *)(v25 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v25 - 8);
  uint64_t v122 = (uint64_t)&v103 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v125 = (uint64_t)&v103 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v30 = MEMORY[0x1F4188790](v29 - 8);
  uint64_t v118 = (uint64_t)&v103 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v117 = (uint64_t)&v103 - v32;
  uint64_t v33 = *(void *)(a1 + 64);
  uint64_t v107 = a1 + 64;
  uint64_t v34 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v35 = -1;
  if (v34 < 64) {
    uint64_t v35 = ~(-1 << v34);
  }
  unint64_t v124 = v35 & v33;
  uint64_t v123 = v140 + 16;
  uint64_t v110 = v22 + 16;
  uint64_t v116 = (void (**)(char *, uint64_t, uint64_t))(v22 + 32);
  uint64_t v120 = (uint64_t *)(v140 + 32);
  uint64_t v130 = (void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v127 = (void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v36 = v21;
  uint64_t v138 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v141 + 56);
  uint64_t v139 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v141 + 48);
  uint64_t v111 = v22;
  uint64_t v114 = (void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v37 = v24;
  int64_t v108 = (unint64_t)(v34 + 63) >> 6;
  int64_t v104 = v108 - 1;
  uint64_t v112 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v119 = 0;
  char v137 = v15;
  uint64_t v133 = v17;
  uint64_t v121 = v24;
  uint64_t v132 = v21;
  while (1)
  {
    if (v124)
    {
      unint64_t v39 = __clz(__rbit64(v124));
      v124 &= v124 - 1;
      unint64_t v40 = v39 | (v119 << 6);
LABEL_6:
      uint64_t v41 = v112;
      uint64_t v42 = v118;
      sub_1C3F8EF24(*(void *)(v112 + 48) + *(void *)(v113 + 72) * v40, v118, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v43 = v111;
      unint64_t v44 = *(void *)(v41 + 56) + *(void *)(v111 + 72) * v40;
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v43 + 16))(v42 + *(int *)(v45 + 48), v44, v126);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v42, 0, 1, v45);
      uint64_t v17 = v133;
      uint64_t v37 = v121;
      uint64_t v36 = v132;
      goto LABEL_28;
    }
    int64_t v46 = v119 + 1;
    if (__OFADD__(v119, 1)) {
      goto LABEL_75;
    }
    uint64_t v42 = v118;
    if (v46 < v108)
    {
      unint64_t v47 = *(void *)(v107 + 8 * v46);
      if (v47) {
        goto LABEL_10;
      }
      int64_t v48 = v119 + 2;
      ++v119;
      if (v46 + 1 < v108)
      {
        unint64_t v47 = *(void *)(v107 + 8 * v48);
        if (v47) {
          goto LABEL_13;
        }
        int64_t v119 = v46 + 1;
        if (v46 + 2 < v108)
        {
          unint64_t v47 = *(void *)(v107 + 8 * (v46 + 2));
          if (v47)
          {
            v46 += 2;
            goto LABEL_10;
          }
          int64_t v119 = v46 + 2;
          if (v46 + 3 < v108)
          {
            unint64_t v47 = *(void *)(v107 + 8 * (v46 + 3));
            if (v47)
            {
              v46 += 3;
              goto LABEL_10;
            }
            int64_t v48 = v46 + 4;
            int64_t v119 = v46 + 3;
            if (v46 + 4 < v108)
            {
              unint64_t v47 = *(void *)(v107 + 8 * v48);
              if (v47)
              {
LABEL_13:
                int64_t v46 = v48;
LABEL_10:
                unint64_t v124 = (v47 - 1) & v47;
                unint64_t v40 = __clz(__rbit64(v47)) + (v46 << 6);
                int64_t v119 = v46;
                goto LABEL_6;
              }
              while (1)
              {
                int64_t v46 = v48 + 1;
                if (__OFADD__(v48, 1)) {
                  goto LABEL_76;
                }
                if (v46 >= v108) {
                  break;
                }
                unint64_t v47 = *(void *)(v107 + 8 * v46);
                ++v48;
                if (v47) {
                  goto LABEL_10;
                }
              }
              int64_t v119 = v104;
            }
          }
        }
      }
    }
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v42, 1, 1, v49);
    unint64_t v124 = 0;
LABEL_28:
    uint64_t v50 = v42;
    uint64_t v51 = v117;
    sub_1C3F961BC(v50, v117, &qword_1EBBC07A0);
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48))(v51, 1, v52) == 1) {
      return swift_release();
    }
    uint64_t v53 = v51 + *(int *)(v52 + 48);
    uint64_t v54 = v51;
    uint64_t v55 = v125;
    sub_1C3F8F6E0(v54, v125, (uint64_t (*)(void))type metadata accessor for Replica);
    (*v116)(v37, v53, v126);
    uint64_t v56 = v122;
    sub_1C3F8EF24(v55, v122, (uint64_t (*)(void))type metadata accessor for Replica);
    swift_beginAccess();
    uint64_t v57 = v120;
    uint64_t v58 = sub_1C3FAA6E8(&v145, v56);
    if (!*v59)
    {
      ((void (*)(uint64_t *, void))v58)(&v145, 0);
      goto LABEL_33;
    }
    unint64_t v60 = v59;
    uint64_t v115 = v58;
    uint64_t v61 = v131;
    sub_1C44967C8();
    sub_1C4496798();
    uint64_t v129 = *v130;
    v129(v61, v17);
    uint64_t v62 = &v36[*(int *)(v109 + 36)];
    uint64_t v63 = (uint64_t)v36;
    uint64_t v64 = sub_1C3F70940((unint64_t *)&qword_1EBBBEE28, MEMORY[0x1E4F27CE0]);
    uint64_t v65 = *(void *)v62;
    sub_1C4497818();
    if (v65 != v143) {
      break;
    }
LABEL_31:
    sub_1C3F962E0(v63, &qword_1EBBBCA78);
    ((void (*)(uint64_t *, void))v115)(&v145, 0);
    uint64_t v57 = v120;
    uint64_t v36 = (char *)v63;
LABEL_33:
    swift_endAccess();
    sub_1C3F9024C(v122, (uint64_t (*)(void))type metadata accessor for Replica);
    swift_beginAccess();
    uint64_t v66 = *v57;
    uint64_t v37 = v121;
    if (!*(void *)(*v57 + 16) || (unint64_t v67 = sub_1C3F8F160(v125), (v68 & 1) == 0))
    {
      uint64_t v143 = 0;
      uint64_t v144 = 0;
LABEL_41:
      sub_1C3F962E0((uint64_t)&v143, qword_1EBBBEE40);
      swift_endAccess();
      goto LABEL_42;
    }
    sub_1C3FAA63C(*(void *)(v66 + 56) + 16 * v67, (uint64_t)&v143);
    if (!v143) {
      goto LABEL_41;
    }
    sub_1C3FAA63C((uint64_t)&v143, (uint64_t)&v146);
    sub_1C3F962E0((uint64_t)&v143, qword_1EBBBEE40);
    swift_endAccess();
    uint64_t v69 = *(void *)(v146 + 16);
    if (!v69)
    {
      sub_1C3F903E8((uint64_t)&v146);
      goto LABEL_62;
    }
    if (v69 == 1)
    {
      uint64_t v70 = v106;
      sub_1C3F970C4(v146 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v106, qword_1EBBBF0A0);
      uint64_t v71 = v36;
      uint64_t v72 = v105;
      sub_1C3F961BC(v70 + *(int *)(v5 + 36), v105, qword_1EBBBEF70);
      LODWORD(v70) = (*v139)(v72, 1, v3);
      uint64_t v73 = v72;
      uint64_t v36 = v71;
      uint64_t v17 = v133;
      sub_1C3F962E0(v73, qword_1EBBBEF70);
      sub_1C3F903E8((uint64_t)&v146);
      if (v70 != 1) {
        goto LABEL_42;
      }
LABEL_62:
      uint64_t v96 = v36;
      swift_beginAccess();
      uint64_t v97 = v120;
      swift_bridgeObjectRetain();
      unint64_t v98 = sub_1C3F8F160(v125);
      char v100 = v99;
      swift_bridgeObjectRelease();
      if (v100)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v102 = *v97;
        uint64_t v143 = *v97;
        *uint64_t v97 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1C4067C04();
          uint64_t v102 = v143;
        }
        sub_1C3F9024C(*(void *)(v102 + 48) + *(void *)(v113 + 72) * v98, (uint64_t (*)(void))type metadata accessor for Replica);
        sub_1C3FAAC94(*(void *)(v102 + 56) + 16 * v98, (uint64_t)&v146);
        sub_1C3FAE060(v98, v102);
        *uint64_t v97 = v102;
        swift_bridgeObjectRelease();
        sub_1C3FAAC94((uint64_t)&v146, (uint64_t)&v143);
      }
      else
      {
        uint64_t v143 = 0;
        uint64_t v144 = 0;
      }
      uint64_t v36 = v96;
      swift_endAccess();
      sub_1C3F962E0((uint64_t)&v143, qword_1EBBBEE40);
      uint64_t v37 = v121;
      (*v114)(v121, v126);
      uint64_t result = sub_1C3F9024C(v125, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v17 = v133;
    }
    else
    {
      sub_1C3F903E8((uint64_t)&v146);
LABEL_42:
      (*v114)(v37, v126);
      uint64_t result = sub_1C3F9024C(v125, (uint64_t (*)(void))type metadata accessor for Replica);
    }
  }
  uint64_t v141 = v62;
  uint64_t v128 = v64;
  while (1)
  {
    int64_t v75 = (void (*)(uint64_t *, void))sub_1C44978C8();
    uint64_t v76 = v63;
    uint64_t v78 = v77[1];
    uint64_t v140 = *v77;
    v75(&v143, 0);
    uint64_t v79 = v131;
    uint64_t v80 = v76;
    uint64_t v81 = v141;
    (*v127)(v131, v80, v17);
    sub_1C4497828();
    v129(v79, v17);
    uint64_t result = sub_1C3FB3D7C(v140, v78);
    uint64_t v134 = result;
    uint64_t v83 = (uint64_t)v136;
    if (result != v82) {
      break;
    }
LABEL_44:
    sub_1C3F9043C(v134, v82);
    uint64_t v74 = *(void *)v81;
    uint64_t v63 = (uint64_t)v132;
    uint64_t v17 = v133;
    sub_1C4497818();
    if (v74 == v143) {
      goto LABEL_31;
    }
  }
  if (v82 < v134)
  {
    __break(1u);
    goto LABEL_74;
  }
  unint64_t v84 = v134;
  uint64_t v140 = v82;
  if (v134 >= v82)
  {
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    return result;
  }
  while ((v84 & 0x8000000000000000) == 0)
  {
    if (v84 >= *(void *)(*v60 + 16)) {
      goto LABEL_70;
    }
    unint64_t v85 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    unint64_t v86 = *(void *)(v6 + 72) * v84;
    sub_1C3F970C4(*v60 + v85 + v86, v83, qword_1EBBBF0A0);
    sub_1C3F970C4(v83 + *(int *)(v5 + 36), (uint64_t)v15, qword_1EBBBEF70);
    if ((*v139)((uint64_t)v15, 1, v3) == 1)
    {
      sub_1C3F962E0((uint64_t)v15, qword_1EBBBEF70);
    }
    else
    {
      uint64_t v87 = v6;
      uint64_t v88 = v5;
      uint64_t v89 = (uint64_t)v15;
      uint64_t v90 = v135;
      sub_1C3F8F6E0(v89, v135, type metadata accessor for RetainedMapRun);
      uint64_t v91 = *(void *)(v90 + *(int *)(v3 + 20));
      uint64_t v92 = v91 - 1;
      if (v91 > 1)
      {
        uint64_t v93 = v142;
        sub_1C3F970C4(v90, v142, &qword_1EBBBF870);
        *(void *)(v93 + *(int *)(v3 + 20)) = v92;
        sub_1C3F9024C(v90, type metadata accessor for RetainedMapRun);
        (*v138)(v93, 0, 1, v3);
        uint64_t v5 = v88;
        uint64_t v6 = v87;
        uint64_t v83 = (uint64_t)v136;
        goto LABEL_56;
      }
      sub_1C3F9024C(v90, type metadata accessor for RetainedMapRun);
      uint64_t v6 = v87;
      uint64_t v83 = (uint64_t)v136;
    }
    (*v138)(v142, 1, 1, v3);
LABEL_56:
    sub_1C3F962E0(v83, qword_1EBBBF0A0);
    unint64_t v94 = *v60;
    char v95 = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v60 = v94;
    if ((v95 & 1) == 0)
    {
      unint64_t v94 = sub_1C4232804(v94);
      *unint64_t v60 = v94;
    }
    if (v84 >= *(void *)(v94 + 16)) {
      goto LABEL_71;
    }
    ++v84;
    sub_1C3FB43E4(v142, v94 + v85 + *(int *)(v5 + 36) + v86);
    int64_t v82 = v140;
    uint64_t v81 = v141;
    uint64_t v15 = v137;
    if (v140 == v84) {
      goto LABEL_44;
    }
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
  return swift_release();
}

uint64_t sub_1C3FAA63C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *initializeWithCopy for RLEMapping(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  return a1;
}

uint64_t (*sub_1C3FAA6E8(void *a1, uint64_t a2))()
{
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  uint64_t v5 = type metadata accessor for Replica();
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[4] = v6;
  sub_1C3F8F450(a2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Replica);
  v4[5] = sub_1C3FAA79C(v4, (uint64_t)v6);
  return sub_1C3FAA6E4;
}

uint64_t (*sub_1C3FAA79C(void *a1, uint64_t a2))()
{
  uint64_t v4 = malloc(0x58uLL);
  *a1 = v4;
  uint64_t v5 = type metadata accessor for Replica();
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[8] = v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1C3F8F450(a2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Replica);
  v4[9] = sub_1C3F84F44(v4);
  v4[10] = sub_1C3FAA87C(v4 + 4, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
  return sub_1C3FAAD20;
}

void (*sub_1C3FAA87C(void *a1, uint64_t a2, char a3))(uint64_t *a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x30uLL);
  *a1 = v8;
  v8[2] = a2;
  unint64_t v8[3] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = sub_1C3F8F160(a2);
  *((unsigned char *)v8 + 40) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      void v8[4] = v11;
      if (v15)
      {
LABEL_8:
        sub_1C3FAAC94(*(void *)(*v4 + 56) + 16 * v11, (uint64_t)v8);
        return sub_1C3FAAAB0;
      }
LABEL_11:
      *uint64_t v8 = 0;
      v8[1] = 0;
      return sub_1C3FAAAB0;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_1C4067C04();
      goto LABEL_7;
    }
    sub_1C3FB7274(v14, a3 & 1);
    unint64_t v17 = sub_1C3F8F160(a2);
    if ((v15 & 1) == (v18 & 1))
    {
      unint64_t v11 = v17;
      void v8[4] = v17;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  type metadata accessor for Replica();
  uint64_t result = (void (*)(uint64_t *))sub_1C4498558();
  __break(1u);
  return result;
}

void sub_1C3FAA9B0(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 32);
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  sub_1C3F8F5D4((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for Replica);
  free(v2);
  free(v1);
}

void sub_1C3FAAA20(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 80))();
  sub_1C3F8F5D4((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for Replica);
  v2(v1, 0);
  free(v3);
  free(v1);
}

void sub_1C3FAAAB0(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  sub_1C3FAAB08(*a1, *(unsigned char *)(*a1 + 40), *(uint64_t **)(*a1 + 24), *(void *)(*a1 + 32), *(void *)(*a1 + 16));
  sub_1C3F962E0((uint64_t)v1, qword_1EBBBEE40);
  free(v1);
}

unint64_t sub_1C3FAAB08(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Replica();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C3F970C4(a1, (uint64_t)v15, qword_1EBBBEE40);
  if (v15[0])
  {
    sub_1C3FAAC94((uint64_t)v15, (uint64_t)v16);
    BOOL v13 = (void *)*a3;
    if (a2)
    {
      return sub_1C3FAAC94((uint64_t)v16, v13[7] + 16 * a4);
    }
    else
    {
      sub_1C3F8F450(a5, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Replica);
      sub_1C3FAAC94((uint64_t)v16, (uint64_t)v15);
      return sub_1C3FB71B8(a4, (uint64_t)v12, (uint64_t)v15, v13);
    }
  }
  else
  {
    unint64_t result = sub_1C3F962E0((uint64_t)v15, qword_1EBBBEE40);
    if (a2)
    {
      swift_arrayDestroy();
      return sub_1C3FAE060(a4, *a3);
    }
  }
  return result;
}

uint64_t sub_1C3FAAC94(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *initializeWithTake for RLEMapping(void *a1, void *a2)
{
  *a1 = *a2;
  swift_weakTakeInit();
  return a1;
}

uint64_t sub_1C3FAAD24(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v46 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v47 = (uint64_t)&v43 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  char v15 = (char *)&v43 - v14;
  MEMORY[0x1F4188790](v13);
  unint64_t v17 = (char *)&v43 - v16;
  uint64_t v50 = type metadata accessor for Proto_Version(0);
  uint64_t v49 = *(void *)(v50 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v50);
  uint64_t v44 = (uint64_t)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v45 = (uint64_t)&v43 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v48 = (uint64_t)&v43 - v23;
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v43 - v24;
  swift_beginAccess();
  unint64_t v26 = a1[3];
  uint64_t v27 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0) {
    uint64_t v27 = a1[2] & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v52 = a4;
  uint64_t v51 = a3;
  if (!v27 || (swift_bridgeObjectRetain(), sub_1C4496B98(), uint64_t result = swift_bridgeObjectRelease(), !v4))
  {
    swift_beginAccess();
    if (!*(void *)(a1[4] + 16)
      || (type metadata accessor for Proto_Value(0),
          sub_1C3F7251C(&qword_1EBBBF8E0, (void (*)(uint64_t))type metadata accessor for Proto_Value),
          swift_bridgeObjectRetain(),
          sub_1C4496BC8(),
          uint64_t result = swift_bridgeObjectRelease(),
          !v4))
    {
      swift_beginAccess();
      if (!*(void *)(a1[5] + 16)
        || (type metadata accessor for Proto_Subsequence(0),
            sub_1C3F7251C(&qword_1EBBBC0F8, (void (*)(uint64_t))type metadata accessor for Proto_Subsequence),
            swift_bridgeObjectRetain(),
            sub_1C4496BC8(),
            uint64_t result = swift_bridgeObjectRelease(),
            !v4))
      {
        uint64_t v29 = (uint64_t)a1
            + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
        swift_beginAccess();
        sub_1C3F970C4(v29, (uint64_t)v17, &qword_1EBBC0578);
        uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
        if (v30(v17, 1, v50) == 1)
        {
          sub_1C3F962E0((uint64_t)v17, &qword_1EBBC0578);
        }
        else
        {
          sub_1C3F92E00((uint64_t)v17, (uint64_t)v25, type metadata accessor for Proto_Version);
          sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
          sub_1C4496BD8();
          uint64_t result = sub_1C3F96610((uint64_t)v25, type metadata accessor for Proto_Version);
          if (v4) {
            return result;
          }
        }
        uint64_t v31 = (uint64_t)a1
            + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedByVersion;
        swift_beginAccess();
        sub_1C3F970C4(v31, (uint64_t)v15, &qword_1EBBC0578);
        if (v30(v15, 1, v50) == 1)
        {
          sub_1C3F962E0((uint64_t)v15, &qword_1EBBC0578);
        }
        else
        {
          uint64_t v32 = v48;
          sub_1C3F92E00((uint64_t)v15, v48, type metadata accessor for Proto_Version);
          sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
          sub_1C4496BD8();
          uint64_t result = sub_1C3F96610(v32, type metadata accessor for Proto_Version);
          if (v4) {
            return result;
          }
        }
        uint64_t v33 = (char *)a1
            + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__attributeRuns;
        swift_beginAccess();
        if (!*(void *)(*(void *)v33 + 16)
          || (type metadata accessor for Proto_Sequence.AttributeRun(0),
              sub_1C3F7251C(&qword_1EA39B260, (void (*)(uint64_t))type metadata accessor for Proto_Sequence.AttributeRun), swift_bridgeObjectRetain(), sub_1C4496BC8(), uint64_t result = swift_bridgeObjectRelease(), !v4))
        {
          uint64_t v34 = (uint64_t)a1
              + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__fromVersion;
          swift_beginAccess();
          uint64_t v35 = v47;
          sub_1C3F970C4(v34, v47, &qword_1EBBC0578);
          if (v30((char *)v35, 1, v50) == 1)
          {
            sub_1C3F962E0(v35, &qword_1EBBC0578);
          }
          else
          {
            uint64_t v36 = v35;
            uint64_t v37 = v45;
            sub_1C3F92E00(v36, v45, type metadata accessor for Proto_Version);
            sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
            sub_1C4496BD8();
            uint64_t result = sub_1C3F96610(v37, type metadata accessor for Proto_Version);
            if (v4) {
              return result;
            }
          }
          uint64_t v38 = (char *)a1
              + OBJC_IVAR____TtCV9Coherence14Proto_SequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__fromAddedByVersion;
          swift_beginAccess();
          uint64_t v39 = (uint64_t)v38;
          uint64_t v40 = v46;
          sub_1C3F970C4(v39, v46, &qword_1EBBC0578);
          if (v30((char *)v40, 1, v50) == 1)
          {
            return sub_1C3F962E0(v40, &qword_1EBBC0578);
          }
          else
          {
            uint64_t v41 = v40;
            uint64_t v42 = v44;
            sub_1C3F92E00(v41, v44, type metadata accessor for Proto_Version);
            sub_1C3F7251C(&qword_1EBBC0198, (void (*)(uint64_t))type metadata accessor for Proto_Version);
            sub_1C4496BD8();
            return sub_1C3F96610(v42, type metadata accessor for Proto_Version);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C3FAB5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_366Tm);
}

uint64_t sub_1C3FAB5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBFBD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3FAB65C(void *a1, uint64_t a2, char *a3, void (*a4)(uint64_t))
{
  uint64_t v7 = &a3[OBJC_IVAR___ObjCVersion_version];
  swift_beginAccess();
  uint64_t v8 = *(void *)v7;
  swift_beginAccess();
  uint64_t v9 = a3;
  id v10 = a1;
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRetain();
  a4(v11);
  a4(v8);
  swift_endAccess();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C3FAB740(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC09D0);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  id v10 = (char *)&v97 - v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  char v100 = (char *)&v97 - v12;
  MEMORY[0x1F4188790](v11);
  int64_t v119 = (char *)&v97 - v13;
  uint64_t v14 = sub_1C44967E8();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v105 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  int64_t v104 = (char *)&v97 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v103 = (char *)&v97 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v106 = (char *)&v97 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v112 = (char *)&v97 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  int64_t v108 = (char *)&v97 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v97 - v28;
  uint64_t v30 = type metadata accessor for Replica();
  uint64_t v117 = *(void *)(v30 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v30 - 8);
  uint64_t v101 = (uint64_t)&v97 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  uint64_t v126 = (uint64_t)&v97 - v33;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07A0);
  uint64_t v35 = MEMORY[0x1F4188790](v34 - 8);
  uint64_t v37 = (char *)&v97 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  uint64_t v120 = (uint64_t)&v97 - v38;
  uint64_t v39 = *v2;
  uint64_t v40 = *(void *)(*v2 + 64);
  uint64_t v107 = *v2 + 64;
  uint64_t v41 = 1 << *(unsigned char *)(v39 + 32);
  uint64_t v42 = -1;
  if (v41 < 64) {
    uint64_t v42 = ~(-1 << v41);
  }
  uint64_t v127 = v42 & v40;
  uint64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v15 + 32);
  uint64_t v123 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  uint64_t v124 = v15 + 16;
  uint64_t v113 = v15 + 48;
  uint64_t v121 = v15;
  uint64_t v122 = (void (**)(char *, uint64_t))(v15 + 8);
  int64_t v115 = (unint64_t)(v41 + 63) >> 6;
  int64_t v97 = v115 - 1;
  uint64_t v116 = v39;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v125 = 0;
  uint64_t v118 = a1;
  uint64_t v128 = v37;
  unint64_t v98 = v10;
  char v99 = v7;
  uint64_t v114 = v29;
  uint64_t v102 = (void (**)(char *, uint64_t, uint64_t))(v15 + 32);
  unint64_t v45 = v127;
  if (!v127) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v127 = (v45 - 1) & v45;
  unint64_t v46 = __clz(__rbit64(v45)) | (v125 << 6);
  while (2)
  {
    uint64_t v47 = v116;
    sub_1C3F8EF8C(*(void *)(v116 + 48) + *(void *)(v117 + 72) * v46, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v48 = v121;
    unint64_t v49 = *(void *)(v47 + 56) + *(void *)(v121 + 72) * v46;
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
    uint64_t v51 = *(void (**)(char *, unint64_t, uint64_t))(v48 + 16);
    uint64_t v37 = v128;
    v51(&v128[*(int *)(v50 + 48)], v49, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v37, 0, 1, v50);
    a1 = v118;
    while (1)
    {
      uint64_t v56 = (uint64_t)v37;
      uint64_t v57 = v120;
      sub_1C3F961BC(v56, v120, &qword_1EBBC07A0);
      uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 48))(v57, 1, v58) == 1) {
        return swift_release();
      }
      uint64_t v59 = v2;
      uint64_t v60 = v57 + *(int *)(v58 + 48);
      uint64_t v61 = v126;
      sub_1C3F8F7B0(v57, v126, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t v62 = *v43;
      (*v43)(v29, v60, v14);
      if (!*(void *)(a1 + 16) || (unint64_t v63 = sub_1C3F8F160(v61), (v64 & 1) == 0))
      {
        uint64_t v68 = (uint64_t)v119;
        (*v123)(v119, 1, 1, v14);
LABEL_35:
        (*v122)(v29, v14);
        sub_1C3F902AC(v61, (uint64_t (*)(void))type metadata accessor for Replica);
        uint64_t result = sub_1C3F962E0(v68, (uint64_t *)&unk_1EBBC09D0);
        uint64_t v2 = v59;
        goto LABEL_36;
      }
      uint64_t v65 = *(void *)(a1 + 56);
      uint64_t v66 = v121;
      uint64_t v110 = *(void *)(v121 + 72);
      unint64_t v67 = *(void (**)(char *, unint64_t, uint64_t))(v121 + 16);
      uint64_t v68 = (uint64_t)v119;
      v67(v119, v65 + v110 * v63, v14);
      uint64_t v69 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v66 + 56);
      v69(v68, 0, 1, v14);
      uint64_t v70 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
      uint64_t v29 = v114;
      uint64_t v111 = v70;
      if (v70(v68, 1, v14) == 1) {
        goto LABEL_35;
      }
      uint64_t v109 = v69;
      uint64_t v71 = v29;
      uint64_t v72 = v108;
      v62(v108, v68, v14);
      v67(v106, (unint64_t)v71, v14);
      v67(v104, (unint64_t)v71, v14);
      v67(v105, (unint64_t)v72, v14);
      sub_1C3FA0E84(&qword_1EBBBC330, MEMORY[0x1E4F27D00]);
      uint64_t v73 = v103;
      sub_1C4497BE8();
      sub_1C4497BC8();
      uint64_t v74 = *v122;
      (*v122)(v73, v14);
      if (sub_1C44966F8() >= 1)
      {
        uint64_t v75 = v101;
        sub_1C3F8EF8C(v126, v101, (uint64_t (*)(void))type metadata accessor for Replica);
        uint64_t v76 = (uint64_t)v100;
        v67(v100, (unint64_t)v112, v14);
        v109(v76, 0, 1, v14);
        if (v111(v76, 1, v14) == 1)
        {
          sub_1C3F962E0(v76, (uint64_t *)&unk_1EBBC09D0);
          uint64_t v2 = v59;
          swift_bridgeObjectRetain();
          unint64_t v77 = sub_1C3F8F160(v75);
          char v79 = v78;
          swift_bridgeObjectRelease();
          uint64_t v43 = v102;
          uint64_t v80 = v74;
          if (v79)
          {
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v82 = *v59;
            uint64_t v129 = *v59;
            uint64_t *v59 = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              sub_1C3FA50F8();
              uint64_t v82 = v129;
            }
            sub_1C3F902AC(*(void *)(v82 + 48) + *(void *)(v117 + 72) * v77, (uint64_t (*)(void))type metadata accessor for Replica);
            uint64_t v83 = (uint64_t)v98;
            v62(v98, *(void *)(v82 + 56) + v77 * v110, v14);
            sub_1C3FA5A34(v77, v82);
            uint64_t *v59 = v82;
            swift_bridgeObjectRelease();
            uint64_t v84 = 0;
            a1 = v118;
          }
          else
          {
            uint64_t v84 = 1;
            a1 = v118;
            uint64_t v83 = (uint64_t)v98;
          }
          uint64_t v29 = v114;
          uint64_t v96 = v101;
          v109(v83, v84, 1, v14);
          sub_1C3F902AC(v96, (uint64_t (*)(void))type metadata accessor for Replica);
          sub_1C3F962E0(v83, (uint64_t *)&unk_1EBBC09D0);
        }
        else
        {
          uint64_t v80 = v74;
          uint64_t v94 = (uint64_t)v106;
          uint64_t v43 = v102;
          v62(v106, v76, v14);
          uint64_t v2 = v59;
          char v95 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v129 = *v59;
          uint64_t *v59 = 0x8000000000000000;
          sub_1C4420ACC(v94, v75, v95);
          uint64_t *v59 = v129;
          swift_bridgeObjectRelease();
          sub_1C3F902AC(v75, (uint64_t (*)(void))type metadata accessor for Replica);
          a1 = v118;
          uint64_t v29 = v114;
        }
        uint64_t v37 = v128;
        v80(v112, v14);
        v80(v108, v14);
        v80(v29, v14);
        uint64_t result = sub_1C3F902AC(v126, (uint64_t (*)(void))type metadata accessor for Replica);
        goto LABEL_37;
      }
      uint64_t v2 = v59;
      swift_bridgeObjectRetain();
      unint64_t v85 = sub_1C3F8F160(v126);
      char v87 = v86;
      swift_bridgeObjectRelease();
      if (v87)
      {
        unint64_t v88 = v85;
        uint64_t v89 = v74;
        int v90 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v91 = *v2;
        uint64_t v129 = *v2;
        *uint64_t v2 = 0x8000000000000000;
        uint64_t v92 = (uint64_t)v99;
        uint64_t v29 = v114;
        uint64_t v43 = v102;
        if (!v90)
        {
          sub_1C3FA50F8();
          uint64_t v91 = v129;
        }
        sub_1C3F902AC(*(void *)(v91 + 48) + *(void *)(v117 + 72) * v88, (uint64_t (*)(void))type metadata accessor for Replica);
        v62((char *)v92, *(void *)(v91 + 56) + v88 * v110, v14);
        sub_1C3FA5A34(v88, v91);
        *uint64_t v2 = v91;
        swift_bridgeObjectRelease();
        uint64_t v93 = 0;
        a1 = v118;
      }
      else
      {
        uint64_t v89 = v74;
        uint64_t v93 = 1;
        a1 = v118;
        uint64_t v92 = (uint64_t)v99;
        uint64_t v29 = v114;
        uint64_t v43 = v102;
      }
      v109(v92, v93, 1, v14);
      sub_1C3F962E0(v92, (uint64_t *)&unk_1EBBC09D0);
      v89(v112, v14);
      v89(v108, v14);
      v89(v29, v14);
      uint64_t result = sub_1C3F902AC(v126, (uint64_t (*)(void))type metadata accessor for Replica);
LABEL_36:
      uint64_t v37 = v128;
LABEL_37:
      unint64_t v45 = v127;
      if (v127) {
        goto LABEL_4;
      }
LABEL_6:
      int64_t v52 = v125 + 1;
      if (__OFADD__(v125, 1))
      {
        __break(1u);
        goto LABEL_51;
      }
      if (v52 < v115)
      {
        unint64_t v53 = *(void *)(v107 + 8 * v52);
        if (v53) {
          goto LABEL_9;
        }
        int64_t v54 = v125 + 2;
        ++v125;
        if (v52 + 1 < v115)
        {
          unint64_t v53 = *(void *)(v107 + 8 * v54);
          if (v53) {
            goto LABEL_12;
          }
          int64_t v125 = v52 + 1;
          if (v52 + 2 < v115)
          {
            unint64_t v53 = *(void *)(v107 + 8 * (v52 + 2));
            if (v53)
            {
              v52 += 2;
              goto LABEL_9;
            }
            int64_t v54 = v52 + 3;
            int64_t v125 = v52 + 2;
            if (v52 + 3 < v115) {
              break;
            }
          }
        }
      }
LABEL_23:
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v37, 1, 1, v55);
      uint64_t v127 = 0;
    }
    unint64_t v53 = *(void *)(v107 + 8 * v54);
    if (v53)
    {
LABEL_12:
      int64_t v52 = v54;
LABEL_9:
      uint64_t v127 = (v53 - 1) & v53;
      unint64_t v46 = __clz(__rbit64(v53)) + (v52 << 6);
      int64_t v125 = v52;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v52 = v54 + 1;
    if (__OFADD__(v54, 1)) {
      break;
    }
    if (v52 >= v115)
    {
      int64_t v125 = v97;
      goto LABEL_23;
    }
    unint64_t v53 = *(void *)(v107 + 8 * v52);
    ++v54;
    if (v53) {
      goto LABEL_9;
    }
  }
LABEL_51:
  __break(1u);
  return result;
}

id sub_1C3FAC574(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0FA0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1 + OBJC_IVAR___ObjCVersion_version;
  swift_beginAccess();
  uint64_t v7 = *(void *)(v6 + 8);
  if (a1)
  {
    uint64_t v8 = a1 + OBJC_IVAR___ObjCReplica_uuid;
    swift_beginAccess();
    uint64_t v9 = sub_1C4496678();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v5, v8, v9);
    uint64_t v10 = *(void *)(a1 + OBJC_IVAR___ObjCReplica_index);
    uint64_t v11 = type metadata accessor for Replica();
    *(void *)&v5[*(int *)(v11 + 20)] = v10;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 0, 1, v11);
  }
  else
  {
    uint64_t v12 = type metadata accessor for Replica();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v5, 1, 1, v12);
  }
  swift_bridgeObjectRetain();
  sub_1C3F962E0((uint64_t)v5, &qword_1EBBC0FA0);
  uint64_t v13 = (objc_class *)type metadata accessor for ObjCVersion();
  uint64_t v14 = (char *)objc_allocWithZone(v13);
  uint64_t v15 = &v14[OBJC_IVAR___ObjCVersion_version];
  uint64_t v16 = MEMORY[0x1E4FBC868];
  *(void *)uint64_t v15 = MEMORY[0x1E4FBC868];
  *((void *)v15 + 1) = v16;
  swift_beginAccess();
  *(void *)uint64_t v15 = v16;
  *((void *)v15 + 1) = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19.receiver = v14;
  v19.super_class = v13;
  return objc_msgSendSuper2(&v19, sel_init);
}

uint64_t type metadata accessor for ObjCRenames()
{
  return self;
}

id CRSequence.count.getter()
{
  if (*v0) {
    return sub_1C3FAC974();
  }
  else {
    return 0;
  }
}

id sub_1C3FAC974()
{
  id v1 = objc_msgSend(objc_msgSend(*(id *)(v0 + qword_1EBBC59D0), sel_attributedString), sel_length);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_1C3FAC9D0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = sub_1C3FACA04();

  return v2;
}

uint64_t sub_1C3FACA04()
{
  uint64_t v1 = *MEMORY[0x1E4FBC8C8] & *v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = MEMORY[0x1C8780110](v3, v2);
  swift_bridgeObjectRelease();
  return v4;
}

id sub_1C3FACA9C@<X0>(void *a1@<X8>)
{
  return sub_1C3FACABC(*(void *)(v1 + 32), a1);
}

id sub_1C3FACABC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (objc_class *)type metadata accessor for CRSequenceStorage();
  swift_bridgeObjectRetain();
  id v5 = objc_allocWithZone(v4);
  id result = sub_1C3FACB2C(a1);
  a2[3] = v4;
  *a2 = result;
  return result;
}

id sub_1C3FACB2C(uint64_t a1)
{
  *(void *)&v1[qword_1EA39F538] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for CRSequenceStorage();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t CRDT.init(serializedData:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1C3FACBD8(a1, a2, a3, a4, (void (*)(uint64_t, char *, uint64_t, uint64_t))sub_1C3FADBD4, a5);
}

uint64_t sub_1C3FACBD8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, char *, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v32 = a6;
  uint64_t v35 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBFC98);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v28 - v17;
  objc_super v19 = (char *)&v28 + *(int *)(v16 + 64) - v17;
  sub_1C3FACEA0((unsigned char *)&v28 - v17, (uint64_t)v19, a1, a2);
  if (v6) {
    return sub_1C3F7E2CC(a1, a2);
  }
  uint64_t v29 = v11;
  uint64_t v30 = a1;
  unint64_t v31 = a2;
  *((_WORD *)v18 + 1) = v20;
  uint64_t v22 = (uint64_t)&v15[*(int *)(v12 + 64)];
  char v23 = *v18;
  *uint64_t v15 = *v18;
  *((_WORD *)v15 + 1) = v20;
  __int16 v24 = v20;
  sub_1C3FA1CCC((uint64_t)v19, v22, type metadata accessor for Proto_Document);
  char v36 = v23;
  if (qword_1EBBC09E0 != -1) {
    swift_once();
  }
  uint64_t v25 = qword_1EBBC5A30;
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  sub_1C3FA1984(&v36, v24, v22, 0, v25);
  uint64_t v26 = v35;
  uint64_t v27 = v29;
  v34(a3, v19, a3, v33);
  swift_release();
  sub_1C3F7E2CC(v30, v31);
  sub_1C3F962E0((uint64_t)v18, &qword_1EBBBFC98);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v32, v27, a3);
}

void sub_1C3FACEA0(unsigned char *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = sub_1C44968B8();
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v65 - v13;
  uint64_t v15 = type metadata accessor for Proto4_Root(0);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  MEMORY[0x1F4188790](v16);
  unint64_t v19 = a4 >> 62;
  switch(a4 >> 62)
  {
    case 1uLL:
      LODWORD(v20) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3)) {
        goto LABEL_53;
      }
      uint64_t v20 = (int)v20;
LABEL_6:
      if (v20 < 8) {
        goto LABEL_18;
      }
      uint64_t v69 = v18;
      uint64_t v70 = v14;
      unint64_t v67 = (char *)&v65 - v17;
      uint64_t v68 = v12;
      if (qword_1EBBC0320 != -1) {
        swift_once();
      }
      break;
    case 2uLL:
      uint64_t v22 = *(void *)(a3 + 16);
      uint64_t v21 = *(void *)(a3 + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_6;
      }
      goto LABEL_54;
    case 3uLL:
      goto LABEL_18;
    default:
      uint64_t v20 = BYTE6(a4);
      goto LABEL_6;
  }
  uint64_t v24 = qword_1EBBC59D8;
  unint64_t v25 = qword_1EBBC59E0;
  switch(qword_1EBBC59E0 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(qword_1EBBC59D8), qword_1EBBC59D8)) {
        goto LABEL_55;
      }
      uint64_t v26 = HIDWORD(qword_1EBBC59D8) - (int)qword_1EBBC59D8;
LABEL_13:
      if (v26 < 0)
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
LABEL_14:
      uint64_t v29 = sub_1C4496528();
      uint64_t v71 = v4;
      uint64_t v72 = a1;
      uint64_t v30 = v29;
      uint64_t v31 = a2;
      unint64_t v33 = v32;
      char v34 = sub_1C3FAD630(v29, v32, v24, v25);
      uint64_t v35 = v30;
      unint64_t v36 = v33;
      uint64_t v37 = v31;
      uint64_t v38 = v71;
      uint64_t v39 = v72;
      sub_1C3F7E2CC(v35, v36);
      if ((v34 & 1) == 0)
      {
LABEL_18:
        sub_1C3FE3FF0();
        swift_allocError();
        *(void *)uint64_t v42 = 0;
        *(void *)(v42 + 8) = 0;
        *(unsigned char *)(v42 + 16) = 4;
        goto LABEL_19;
      }
      uint64_t v40 = sub_1C44965A8();
      if (v40 > 6u || ((0x71u >> v40) & 1) == 0)
      {
        sub_1C3FE3FF0();
        swift_allocError();
        *(_OWORD *)uint64_t v41 = xmmword_1C449B0D0;
        *(unsigned char *)(v41 + 16) = 4;
LABEL_19:
        swift_willThrow();
        return;
      }
      if (!v19)
      {
        unint64_t v65 = HIWORD(a3);
        goto LABEL_31;
      }
      uint64_t v66 = v40;
      if (v19 != 1)
      {
        uint64_t v47 = *(void *)(a3 + 16);
        swift_retain();
        swift_retain();
        uint64_t v48 = sub_1C4496298();
        if (v48)
        {
          uint64_t v49 = v48;
          uint64_t v50 = sub_1C44962C8();
          BOOL v23 = __OFSUB__(v47, v50);
          uint64_t v51 = v47 - v50;
          if (v23)
          {
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
          }
          sub_1C44962B8();
          unint64_t v65 = *(unsigned __int16 *)(v49 + v51 + 6);
          swift_release();
          swift_release();
          goto LABEL_30;
        }
        sub_1C44962B8();
        __break(1u);
LABEL_62:
        sub_1C44962B8();
        __break(1u);
        goto LABEL_63;
      }
      if ((int)a3 > a3 >> 32)
      {
LABEL_58:
        __break(1u);
        goto LABEL_59;
      }
      sub_1C3F7E324(a3, a4);
      uint64_t v43 = sub_1C4496298();
      if (!v43) {
        goto LABEL_62;
      }
      uint64_t v44 = v43;
      uint64_t v45 = sub_1C44962C8();
      uint64_t v46 = (int)a3 - v45;
      if (__OFSUB__((int)a3, v45)) {
        goto LABEL_60;
      }
      sub_1C44962B8();
      unint64_t v65 = *(unsigned __int16 *)(v44 + v46 + 6);
      sub_1C3F7E2CC(a3, a4);
LABEL_30:
      uint64_t v39 = v72;
      LOBYTE(v40) = v66;
LABEL_31:
      unint64_t v52 = 0x2010000000000uLL >> (8 * v40);
      if (((0x1Fu >> v40) & 1) == 0)
      {
        *uint64_t v39 = v52;
        if (v19)
        {
          if (v19 == 1)
          {
            uint64_t v56 = (int)a3;
            uint64_t v55 = a3 >> 32;
          }
          else
          {
            uint64_t v56 = *(void *)(a3 + 16);
            uint64_t v55 = *(void *)(a3 + 24);
          }
        }
        else
        {
          uint64_t v56 = 0;
          uint64_t v55 = BYTE6(a4);
        }
        type metadata accessor for Proto_Document(0);
        if (v55 >= 8 && v55 >= v56)
        {
          sub_1C4496528();
          uint64_t v75 = 0;
          long long v73 = 0u;
          long long v74 = 0u;
          sub_1C44968A8();
          sub_1C3FAD5C8((unint64_t *)&qword_1EBBC05F0, (void (*)(uint64_t))type metadata accessor for Proto_Document);
          uint64_t v57 = v71;
          sub_1C4496A98();
          if (v57)
          {
            sub_1C3FE3FF0();
            swift_allocError();
            *(_OWORD *)uint64_t v58 = xmmword_1C449B6B0;
            *(unsigned char *)(v58 + 16) = 0;
            swift_willThrow();
          }
          return;
        }
        goto LABEL_57;
      }
      if (v19)
      {
        if (v19 == 1)
        {
          uint64_t v53 = (int)a3;
          uint64_t v54 = a3 >> 32;
        }
        else
        {
          uint64_t v53 = *(void *)(a3 + 16);
          uint64_t v54 = *(void *)(a3 + 24);
        }
      }
      else
      {
        uint64_t v53 = 0;
        uint64_t v54 = BYTE6(a4);
      }
      if (v54 < 8 || v54 < v53)
      {
LABEL_63:
        __break(1u);
        return;
      }
      sub_1C4496528();
      uint64_t v75 = 0;
      long long v73 = 0u;
      long long v74 = 0u;
      sub_1C44968A8();
      sub_1C3FAD5C8(&qword_1EA39C098, (void (*)(uint64_t))type metadata accessor for Proto4_Root);
      uint64_t v59 = v69;
      sub_1C4496A98();
      if (v38)
      {
        sub_1C3FE3FF0();
        swift_allocError();
        *(_OWORD *)uint64_t v60 = xmmword_1C449B6B0;
        *(unsigned char *)(v60 + 16) = 0;
        swift_willThrow();
      }
      else
      {
        uint64_t v61 = v67;
        sub_1C3F9775C(v59, (uint64_t)v67, type metadata accessor for Proto4_Root);
        type metadata accessor for Upgrade4to5();
        uint64_t v62 = (void *)swift_allocObject();
        uint64_t v63 = MEMORY[0x1E4FBC860];
        uint64_t v64 = MEMORY[0x1E4FBC868];
        v62[2] = MEMORY[0x1E4FBC860];
        v62[3] = v64;
        v62[4] = v63;
        v62[5] = v64;
        v62[6] = 0;
        v62[7] = 0;
        *uint64_t v39 = v52;
        sub_1C43A6ADC(v61, v37);
        sub_1C3F9229C((uint64_t)v61, type metadata accessor for Proto4_Root);
        swift_release();
      }
      return;
    case 2uLL:
      uint64_t v28 = *(void *)(qword_1EBBC59D8 + 16);
      uint64_t v27 = *(void *)(qword_1EBBC59D8 + 24);
      uint64_t v26 = v27 - v28;
      if (!__OFSUB__(v27, v28)) {
        goto LABEL_13;
      }
      goto LABEL_56;
    default:
      goto LABEL_14;
  }
}

uint64_t sub_1C3FAD5C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for Proto4_Root(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0508);
}

uint64_t sub_1C3FAD630(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(result) - result;
      if (!__OFSUB__(HIDWORD(result), result))
      {
        uint64_t v8 = (int)v8;
        goto LABEL_6;
      }
      __break(1u);
      goto LABEL_26;
    case 2uLL:
      uint64_t v10 = *(void *)(result + 16);
      uint64_t v9 = *(void *)(result + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      break;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
          goto LABEL_11;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (v11) {
            goto LABEL_28;
          }
          goto LABEL_11;
        case 3uLL:
          char v17 = v8 == 0;
          goto LABEL_24;
        default:
          uint64_t v12 = BYTE6(a4);
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (result >> 32 < (int)result) {
                    goto LABEL_29;
                  }
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(v7, a2);
                  char v17 = sub_1C3FF6408((int)v7, v7 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_1C3F7E2CC(a3, a4);
                  uint64_t v18 = v7;
                  unint64_t v19 = a2;
                  goto LABEL_23;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(result + 16);
                  uint64_t v22 = *(void *)(result + 24);
                  sub_1C3F7E324(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_1C3FF6408(v21, v22, v20, a3, a4);
                  sub_1C3F7E2CC(a3, a4);
                  swift_release();
                  swift_release();
                  break;
                case 3uLL:
                  sub_1C3F7E324(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_1C3F7E324(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = v7;
LABEL_22:
                  char v17 = sub_1C3FAD898(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
LABEL_23:
                  sub_1C3F7E2CC(v18, v19);
                  break;
              }
            }
          }
          else
          {
            char v17 = 0;
          }
LABEL_24:
          uint64_t result = v17 & 1;
          break;
      }
      break;
  }
  return result;
}

uint64_t sub_1C3FAD898(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_1C3FAD970((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_1C3FAD970@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  char v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_1C3F7E324(a2, a3);
      char v10 = (char *)sub_1C4496298();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = sub_1C44962C8();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t __s1 = sub_1C44962B8();
      if (__s1 >= v9) {
        size_t v12 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v12 = __s1;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      if (!v10)
      {
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return __s1;
      }
      int v13 = memcmp(v7, v10, v12);
      uint64_t __s1 = sub_1C3F7E2CC(a2, a3);
      BOOL v8 = v13 == 0;
LABEL_24:
      char v22 = v8;
LABEL_29:
      *a4 = v22;
      return __s1;
    case 2uLL:
      uint64_t v14 = *(void *)(a2 + 16);
      uint64_t v15 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v16 = (char *)sub_1C4496298();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = sub_1C44962C8();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_32;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_31;
      }
      uint64_t __s1 = sub_1C44962B8();
      if (__s1 >= v19) {
        size_t v20 = v19;
      }
      else {
        size_t v20 = __s1;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v16) {
        goto LABEL_38;
      }
      int v21 = memcmp(v7, v16, v20);
      swift_release();
      uint64_t __s1 = swift_release();
      BOOL v8 = v21 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v22 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v24 = a3;
      char v25 = BYTE2(a3);
      char v26 = BYTE3(a3);
      char v27 = BYTE4(a3);
      char v28 = BYTE5(a3);
      if (__s1)
      {
        uint64_t __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_1C3FADBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v22 = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0598);
  MEMORY[0x1F4188790](v8 - 8);
  char v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Proto_CRDT(0);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v17 = *(void *)(a2 + *(int *)(type metadata accessor for Proto_Document(0) + 20))
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  sub_1C3F970C4(v17, (uint64_t)v10, &qword_1EBBC0598);
  uint64_t v18 = type metadata accessor for Proto_Document.OneOf_Root(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v10, 1, v18) == 1)
  {
    sub_1C3F962E0((uint64_t)v10, &qword_1EBBC0598);
LABEL_5:
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v19 = 0xD000000000000014;
    *(void *)(v19 + 8) = 0x80000001C44B1530;
    *(unsigned char *)(v19 + 16) = 0;
    return swift_willThrow();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    sub_1C3F9229C((uint64_t)v10, type metadata accessor for Proto_Document.OneOf_Root);
    goto LABEL_5;
  }
  sub_1C3F9775C((uint64_t)v10, (uint64_t)v16, type metadata accessor for Proto_CRDT);
  sub_1C3FA1CCC((uint64_t)v16, (uint64_t)v14, type metadata accessor for Proto_CRDT);
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  swift_retain();
  uint64_t v21 = sub_1C3FB9A38((uint64_t)v14, v5);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a4 + 16) + 8) + 8))(v21, v22);
  return sub_1C3F9229C((uint64_t)v16, type metadata accessor for Proto_CRDT);
}

uint64_t type metadata accessor for CRReplicaDatabase.Replica(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0768);
}

uint64_t static CodingKey<>.intCases.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = &v15[-v10];
  sub_1C4497D48();
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = sub_1C44972E8();
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  uint64_t v13 = sub_1C3FAE4F0(v12);
  swift_bridgeObjectRelease();
  return v13;
}

unint64_t sub_1C3FAE060(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Replica();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v26 = a2 + 64;
    unint64_t result = sub_1C4497C08();
    uint64_t v12 = v26;
    if ((*(void *)(v26 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v13 = (result + 1) & v11;
      uint64_t v14 = *(void *)(v5 + 72);
      while (1)
      {
        int64_t v15 = v14 * v10;
        sub_1C3F8EF8C(*(void *)(a2 + 48) + v14 * v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Replica);
        sub_1C44985F8();
        sub_1C4496638();
        sub_1C4498608();
        uint64_t v16 = sub_1C4498628();
        unint64_t result = sub_1C3F902AC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Replica);
        unint64_t v17 = v16 & v11;
        if (a1 >= (uint64_t)v13) {
          break;
        }
        if (v17 < v13) {
          goto LABEL_11;
        }
LABEL_12:
        if (v14 * a1 < v15 || *(void *)(a2 + 48) + v14 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v15 + v14))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v14 * a1 != v15)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        uint64_t v18 = *(void *)(a2 + 56);
        unint64_t result = v18 + 16 * a1;
        if (a1 < (uint64_t)v10 || result >= v18 + 16 * v10 + 16)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          BOOL v19 = a1 == v10;
          a1 = v10;
          if (v19) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v11;
        uint64_t v12 = v26;
        if (((*(void *)(v26 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v17 < v13) {
        goto LABEL_6;
      }
LABEL_11:
      if (a1 < (uint64_t)v17) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    size_t v20 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << a1) - 1;
  }
  else
  {
    size_t v20 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << a1) - 1;
  }
  *size_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void *sub_1C3FAE33C()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBBF160);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1C4497CD8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t result = (void *)sub_1C3F7E324(v17, *((unint64_t *)&v17 + 1));
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1C3FAE4F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_1C44976A8();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      sub_1C3FAE564(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_1C3FAE564(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = sub_1C44985E8();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1C3FAE660(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1C3FAE660(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1C4071830();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1C4075EA8();
      goto LABEL_14;
    }
    sub_1C4077A00();
  }
  uint64_t v8 = *v3;
  uint64_t result = sub_1C44985E8();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = sub_1C4498548();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t sub_1C3FAE784()
{
  uint64_t v1 = sub_1C4496688();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v44 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)v33 - v5;
  uint64_t v7 = sub_1C44967E8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF188);
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  BOOL v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = v8;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v39 = v8 + 16;
  v38(v10, v0, v7);
  uint64_t v15 = (void (*)(uint64_t))MEMORY[0x1E4F27D00];
  sub_1C3FA0E84(&qword_1EBBBBCE0, MEMORY[0x1E4F27D00]);
  uint64_t v40 = v10;
  sub_1C44972B8();
  uint64_t v16 = &v14[*(int *)(v12 + 44)];
  unint64_t v36 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  uint64_t v37 = v2 + 16;
  v36(v6, v16, v1);
  sub_1C3FA0E84(qword_1EBBBBCE8, v15);
  long long v17 = v44;
  sub_1C4497818();
  uint64_t v35 = sub_1C3FA0E84(&qword_1EBBBBCD0, MEMORY[0x1E4F27CC8]);
  int v18 = sub_1C4497178();
  unint64_t v19 = *(void (**)(char *, uint64_t))(v2 + 8);
  v19(v17, v1);
  uint64_t v41 = v6;
  uint64_t v42 = v2 + 8;
  v19(v6, v1);
  uint64_t v20 = 0;
  if ((v18 & 1) == 0)
  {
    v33[1] = v18;
    uint64_t v21 = (void (*)(unsigned char *, void))sub_1C44978C8();
    uint64_t v20 = *v22;
    v21(v45, 0);
    uint64_t v23 = v40;
    v38(v40, (uint64_t)v14, v7);
    sub_1C4497828();
    BOOL v24 = *(void (**)(char *, uint64_t))(v43 + 8);
    v43 += 8;
    char v34 = v24;
    v24(v23, v7);
    uint64_t v25 = v41;
    while (1)
    {
      v36(v25, v16, v1);
      uint64_t v26 = v44;
      sub_1C4497818();
      char v27 = sub_1C4497178();
      v19(v26, v1);
      v19(v25, v1);
      if (v27) {
        break;
      }
      char v28 = (void (*)(unsigned char *, void))sub_1C44978C8();
      uint64_t v30 = *v29;
      v28(v45, 0);
      uint64_t v31 = v40;
      v38(v40, (uint64_t)v14, v7);
      sub_1C4497828();
      v34(v31, v7);
      if (v20 <= v30) {
        uint64_t v20 = v30;
      }
    }
  }
  sub_1C3F962E0((uint64_t)v14, &qword_1EBBBF188);
  return v20;
}

uint64_t sub_1C3FAEC54@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v129 = a6;
  uint64_t v128 = a5;
  uint64_t v136 = a4;
  uint64_t v141 = a3;
  uint64_t v132 = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0598);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v123 = (uint64_t)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v140 = (uint64_t)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v139 = (uint64_t)&v122 - v14;
  uint64_t v138 = type metadata accessor for Proto_CRDT(0);
  uint64_t v15 = *(void *)(v138 - 8);
  MEMORY[0x1F4188790](v138);
  uint64_t v150 = (uint64_t)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v147 = (uint64_t)&v122 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v146 = (uint64_t)&v122 - v20;
  uint64_t v145 = type metadata accessor for Proto_Version(0);
  uint64_t v126 = *(void *)(v145 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v145);
  uint64_t v122 = (void **)((char *)&v122 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v21);
  uint64_t v152 = (void **)((char *)&v122 - v23);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0560);
  uint64_t v25 = MEMORY[0x1F4188790](v24 - 8);
  uint64_t v144 = (uint64_t)&v122 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v143 = (uint64_t)&v122 - v27;
  uint64_t v154 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v125 = *(void *)(v154 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v154);
  uint64_t v131 = (void **)((char *)&v122 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v28);
  char v151 = (void **)((char *)&v122 - v30);
  uint64_t v142 = type metadata accessor for Proto_Reference(0);
  uint64_t v137 = *(void *)(v142 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v142);
  uint64_t v130 = (char *)&v122 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v149 = (uint64_t)&v122 - v34;
  MEMORY[0x1F4188790](v33);
  unint64_t v36 = (char *)&v122 - v35;
  uint64_t v37 = type metadata accessor for PartiallyOrderedReferenceMap();
  uint64_t v38 = MEMORY[0x1F4188790](v37);
  uint64_t v40 = (char *)&v122 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v38);
  uint64_t v42 = (char *)&v122 - v41;
  sub_1C4496888();
  uint64_t v43 = *(int *)(type metadata accessor for Proto_Document(0) + 20);
  if (qword_1EBBC0328 != -1) {
    swift_once();
  }
  uint64_t v124 = a7;
  uint64_t v127 = v43;
  *(void *)(a7 + v43) = qword_1EBBC05C0;
  if (a2)
  {
    swift_retain();
    uint64_t v44 = v124;
  }
  else
  {
    unint64_t v160 = MEMORY[0x1E4FBC860];
    uint64_t v45 = type metadata accessor for Capsule();
    sub_1C3FB05E4(v45, (uint64_t)v42);
    unint64_t v46 = *(void *)(*(void *)&v42[*(int *)(v37 + 20)] + 16);
    swift_retain();
    sub_1C3F9229C((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
    unint64_t v47 = v160;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v46 > *(void *)(v47 + 24) >> 1)
    {
      if (*(void *)(v47 + 16) <= v46) {
        int64_t v49 = v46;
      }
      else {
        int64_t v49 = *(void *)(v47 + 16);
      }
      unint64_t v47 = sub_1C3FB1048(isUniquelyReferenced_nonNull_native, v49, 0, v47);
    }
    unint64_t v160 = v47;
    sub_1C3FB05E4(v45, (uint64_t)v40);
    uint64_t v50 = *(void *)&v40[*(int *)(v37 + 20)];
    uint64_t v51 = -1 << *(unsigned char *)(v50 + 32);
    uint64_t v52 = ~v51;
    uint64_t v53 = -v51;
    if (v53 < 64) {
      uint64_t v54 = ~(-1 << v53);
    }
    else {
      uint64_t v54 = -1;
    }
    uint64_t v55 = v54 & *(void *)(v50 + 64);
    swift_bridgeObjectRetain();
    sub_1C3F9229C((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
    uint64_t v169 = v50;
    uint64_t v170 = v50 + 64;
    uint64_t v171 = v52;
    uint64_t v172 = 0;
    uint64_t v173 = v55;
    sub_1C3FB0038((uint64_t)&v162);
    uint64_t v56 = v165;
    if (v165)
    {
      uint64_t v58 = v162;
      unint64_t v57 = v163;
      uint64_t v135 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v125 + 56);
      uint64_t v134 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v126 + 56);
      uint64_t v133 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56);
      long long v59 = v164;
      unint64_t v60 = v166;
      uint64_t v61 = v167;
      uint64_t v62 = v168;
      uint64_t v63 = v141;
      do
      {
        long long v156 = v59;
        long long v174 = v59;
        uint64_t v175 = v56;
        unint64_t v176 = v60;
        uint64_t v177 = v61;
        uint64_t v178 = v62;
        if (v63 && (uint64_t v162 = v58, v163 = v57, (v63(&v162) & 1) == 0))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          sub_1C3F7E2CC(v58, v57);
        }
        else
        {
          uint64_t v157 = v62;
          uint64_t v179 = v61;
          sub_1C4496888();
          uint64_t v64 = *(int *)(v142 + 20);
          if (qword_1EBBBC818 != -1) {
            swift_once();
          }
          *(void *)&v36[v64] = qword_1EBBBC808;
          unint64_t v65 = v151;
          *char v151 = MEMORY[0x1E4FBC860];
          swift_retain();
          uint64_t v66 = sub_1C4496868();
          unint64_t v68 = v67;
          sub_1C4496888();
          sub_1C3F7E324(v58, v57);
          sub_1C3F7E2CC(v66, v68);
          uint64_t v148 = v58;
          v65[1] = v58;
          v65[2] = v57;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for Proto_Reference._StorageClass(0);
            swift_allocObject();
            uint64_t v69 = swift_retain();
            *(void *)&v36[v64] = sub_1C3FB0204(v69);
            swift_release();
          }
          uint64_t v70 = *(void *)&v36[v64];
          uint64_t v71 = v143;
          sub_1C3F9775C((uint64_t)v151, v143, type metadata accessor for Proto_KeyPath);
          (*v135)(v71, 0, 1, v154);
          uint64_t v72 = v144;
          sub_1C3F961BC(v71, v144, &qword_1EBBC0560);
          uint64_t v73 = v70
              + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
          swift_beginAccess();
          swift_retain();
          sub_1C3F98338(v72, v73, &qword_1EBBC0560);
          swift_endAccess();
          swift_release();
          uint64_t v162 = v56;
          unint64_t v163 = v60;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1C3F9FF10(v155, v152);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for Proto_Reference._StorageClass(0);
            swift_allocObject();
            uint64_t v74 = swift_retain();
            *(void *)&v36[v64] = sub_1C3FB0204(v74);
            swift_release();
          }
          uint64_t v75 = *(void *)&v36[v64];
          uint64_t v76 = v146;
          sub_1C3F9775C((uint64_t)v152, v146, type metadata accessor for Proto_Version);
          (*v134)(v76, 0, 1, v145);
          uint64_t v77 = v147;
          sub_1C3F961BC(v76, v147, &qword_1EBBC0578);
          uint64_t v78 = v75
              + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
          swift_beginAccess();
          swift_retain();
          sub_1C3F98338(v77, v78, &qword_1EBBC0578);
          swift_endAccess();
          swift_release();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v79 = swift_retain();
          uint64_t v80 = v153;
          sub_1C3FB10A8(v79, (uint64_t)&v174, v79, v150);
          if (v80)
          {
            sub_1C3F7E2CC(v148, v57);
            sub_1C3F9229C((uint64_t)v36, type metadata accessor for Proto_Reference);
            sub_1C3F7FCE8();
            swift_bridgeObjectRelease();
            sub_1C3F9229C(v124, type metadata accessor for Proto_Document);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return swift_release();
          }
          uint64_t v153 = 0;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for Proto_Reference._StorageClass(0);
            swift_allocObject();
            uint64_t v81 = swift_retain();
            *(void *)&v36[v64] = sub_1C3FB0204(v81);
            swift_release();
          }
          uint64_t v82 = *(void *)&v36[v64];
          uint64_t v83 = v139;
          sub_1C3F9775C(v150, v139, type metadata accessor for Proto_CRDT);
          (*v133)(v83, 0, 1, v138);
          uint64_t v84 = v140;
          sub_1C3F961BC(v83, v140, &qword_1EBBC04F8);
          uint64_t v85 = v82
              + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
          swift_beginAccess();
          swift_retain();
          sub_1C3F98338(v84, v85, &qword_1EBBC04F8);
          swift_endAccess();
          swift_release();
          sub_1C3FA1CCC((uint64_t)v36, v149, type metadata accessor for Proto_Reference);
          unint64_t v86 = v160;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v86 = sub_1C3FB1048(0, *(void *)(v86 + 16) + 1, 1, v86);
          }
          unint64_t v88 = *(void *)(v86 + 16);
          unint64_t v87 = *(void *)(v86 + 24);
          uint64_t v89 = v148;
          if (v88 >= v87 >> 1) {
            unint64_t v86 = sub_1C3FB1048(v87 > 1, v88 + 1, 1, v86);
          }
          *(void *)(v86 + 16) = v88 + 1;
          sub_1C3F9775C(v149, v86+ ((*(unsigned __int8 *)(v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80))+ *(void *)(v137 + 72) * v88, type metadata accessor for Proto_Reference);
          sub_1C3F7E2CC(v89, v57);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          unint64_t v160 = v86;
          sub_1C3F9229C((uint64_t)v36, type metadata accessor for Proto_Reference);
          uint64_t v63 = v141;
        }
        sub_1C3FB0038((uint64_t)&v162);
        uint64_t v58 = v162;
        unint64_t v57 = v163;
        long long v59 = v164;
        uint64_t v56 = v165;
        unint64_t v60 = v166;
        uint64_t v61 = v167;
        uint64_t v62 = v168;
      }
      while (v165);
    }
    sub_1C3F7FCE8();
    swift_beginAccess();
    uint64_t v90 = swift_bridgeObjectRetain();
    sub_1C3FB107C(v90);
    uint64_t v91 = v160;
    uint64_t v44 = v124;
    uint64_t v92 = v127;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Document._StorageClass(0);
      swift_allocObject();
      uint64_t v93 = swift_retain();
      *(void *)(v44 + v92) = sub_1C3F7CB4C(v93);
      swift_release();
    }
    uint64_t v94 = (uint64_t *)(*(void *)(v44 + v92)
                    + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__references);
    swift_beginAccess();
    *uint64_t v94 = v91;
    swift_bridgeObjectRelease();
  }
  char v95 = v130;
  sub_1C4496888();
  uint64_t v96 = *(int *)(v142 + 20);
  if (qword_1EBBBC818 != -1) {
    swift_once();
  }
  *(void *)&v95[v96] = qword_1EBBBC808;
  uint64_t v97 = type metadata accessor for Capsule();
  Capsule<>.rootID.getter((uint64_t *)&v160);
  uint64_t v98 = v160;
  uint64_t v99 = v161;
  char v100 = v131;
  *uint64_t v131 = MEMORY[0x1E4FBC860];
  swift_retain();
  uint64_t v101 = sub_1C4496868();
  unint64_t v103 = v102;
  sub_1C4496888();
  sub_1C3F7E2CC(v101, v103);
  v100[1] = v98;
  v100[2] = v99;
  uint64_t v104 = (uint64_t)v130;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Reference._StorageClass(0);
    swift_allocObject();
    uint64_t v105 = swift_retain();
    *(void *)(v104 + v96) = sub_1C3FB0204(v105);
    swift_release();
  }
  uint64_t v106 = *(void *)(v104 + v96);
  uint64_t v107 = v143;
  sub_1C3F9775C((uint64_t)v131, v143, type metadata accessor for Proto_KeyPath);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v125 + 56))(v107, 0, 1, v154);
  uint64_t v108 = v144;
  sub_1C3F961BC(v107, v144, &qword_1EBBC0560);
  uint64_t v109 = v106 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v108, v109, &qword_1EBBC0560);
  swift_endAccess();
  swift_release();
  uint64_t v110 = v123;
  sub_1C3FA1CCC(v104, v123, type metadata accessor for Proto_Reference);
  uint64_t v111 = type metadata accessor for Proto_Document.OneOf_Root(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v111 - 8) + 56))(v110, 0, 1, v111);
  uint64_t v112 = v127;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    uint64_t v113 = swift_retain();
    *(void *)(v44 + v112) = sub_1C3F7CB4C(v113);
    swift_release();
  }
  uint64_t v114 = *(void *)(v44 + v112)
       + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v110, v114, &qword_1EBBC0598);
  swift_endAccess();
  swift_release();
  Capsule.version.getter(v97, &v160);
  uint64_t v158 = v160;
  uint64_t v159 = v161;
  int64_t v115 = v122;
  sub_1C3F9FF10(v155, v122);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    uint64_t v116 = swift_retain();
    *(void *)(v44 + v112) = sub_1C3F7CB4C(v116);
    swift_release();
  }
  uint64_t v117 = *(void *)(v44 + v112);
  uint64_t v118 = v146;
  sub_1C3F9775C((uint64_t)v115, v146, type metadata accessor for Proto_Version);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v126 + 56))(v118, 0, 1, v145);
  uint64_t v119 = v147;
  sub_1C3F961BC(v118, v147, &qword_1EBBC0578);
  uint64_t v120 = v117 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338(v119, v120, &qword_1EBBC0578);
  swift_endAccess();
  swift_release();
  sub_1C3FB065C(v44);
  return sub_1C3F9229C(v104, type metadata accessor for Proto_Reference);
}

uint64_t type metadata accessor for Capsule()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1C3FB0038@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  int64_t v4 = v1[3];
  int64_t v6 = v4;
  unint64_t v7 = v1[4];
  if (v7)
  {
    uint64_t v8 = (v7 - 1) & v7;
    unint64_t v9 = __clz(__rbit64(v7)) | (v4 << 6);
LABEL_3:
    uint64_t v10 = *(void *)(v2 + 56);
    uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v9);
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    *(void *)a1 = *v11;
    *(void *)(a1 + 8) = v13;
    uint64_t v14 = v10 + 48 * v9;
    uint64_t v15 = *(void *)(v14 + 16);
    uint64_t v16 = *(void *)(v14 + 24);
    uint64_t v17 = *(void *)(v14 + 32);
    uint64_t v18 = *(void *)(v14 + 40);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v14;
    *(void *)(a1 + 32) = v15;
    *(void *)(a1 + 40) = v16;
    *(void *)(a1 + 48) = v17;
    *(void *)(a1 + 56) = v18;
    sub_1C3F7E324(v12, v13);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
LABEL_21:
    *uint64_t v1 = v2;
    v1[1] = v3;
    v1[2] = v5;
    v1[3] = v6;
    v1[4] = v8;
    return result;
  }
  int64_t v20 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    int64_t v21 = (unint64_t)(v5 + 64) >> 6;
    if (v20 < v21)
    {
      unint64_t v22 = *(void *)(v3 + 8 * v20);
      if (v22)
      {
LABEL_7:
        uint64_t v8 = (v22 - 1) & v22;
        unint64_t v9 = __clz(__rbit64(v22)) + (v20 << 6);
        int64_t v6 = v20;
        goto LABEL_3;
      }
      int64_t v6 = v4 + 1;
      if (v4 + 2 < v21)
      {
        unint64_t v22 = *(void *)(v3 + 8 * (v4 + 2));
        if (v22)
        {
          int64_t v20 = v4 + 2;
          goto LABEL_7;
        }
        int64_t v6 = v4 + 2;
        if (v4 + 3 < v21)
        {
          unint64_t v22 = *(void *)(v3 + 8 * (v4 + 3));
          if (v22)
          {
            int64_t v20 = v4 + 3;
            goto LABEL_7;
          }
          int64_t v20 = v4 + 4;
          int64_t v6 = v4 + 3;
          if (v4 + 4 < v21)
          {
            unint64_t v22 = *(void *)(v3 + 8 * v20);
            if (v22) {
              goto LABEL_7;
            }
            int64_t v6 = v21 - 1;
            int64_t v23 = v4 + 5;
            while (v21 != v23)
            {
              unint64_t v22 = *(void *)(v3 + 8 * v23++);
              if (v22)
              {
                int64_t v20 = v23 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
    uint64_t v8 = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Proto_Reference._StorageClass(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBC838);
}

uint64_t sub_1C3FB0204(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0560);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v26 = (uint64_t)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0578);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 32) = 1;
  uint64_t v12 = v1 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  uint64_t v13 = type metadata accessor for Proto_Version(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = v1 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
  uint64_t v15 = type metadata accessor for Proto_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = v1 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  uint64_t v17 = type metadata accessor for Proto_KeyPath(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  swift_beginAccess();
  uint64_t v18 = *(void *)(a1 + 16);
  swift_beginAccess();
  *(void *)(v1 + 16) = v18;
  swift_beginAccess();
  uint64_t v19 = *(void *)(a1 + 24);
  char v20 = *(unsigned char *)(a1 + 32);
  swift_beginAccess();
  *(void *)(v1 + 24) = v19;
  *(unsigned char *)(v1 + 32) = v20;
  uint64_t v21 = a1 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__version;
  swift_beginAccess();
  sub_1C3F970C4(v21, (uint64_t)v11, &qword_1EBBC0578);
  swift_beginAccess();
  sub_1C3F98338((uint64_t)v11, v12, &qword_1EBBC0578);
  swift_endAccess();
  uint64_t v22 = a1 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
  swift_beginAccess();
  sub_1C3F970C4(v22, (uint64_t)v8, &qword_1EBBC04F8);
  swift_beginAccess();
  sub_1C3F98338((uint64_t)v8, v14, &qword_1EBBC04F8);
  swift_endAccess();
  uint64_t v23 = a1 + OBJC_IVAR____TtCV9Coherence15Proto_ReferenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__keyPath;
  swift_beginAccess();
  uint64_t v24 = v26;
  sub_1C3F970C4(v23, v26, &qword_1EBBC0560);
  swift_release();
  swift_beginAccess();
  sub_1C3F98338(v24, v16, &qword_1EBBC0560);
  swift_endAccess();
  return v2;
}

uint64_t sub_1C3FB05D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_367Tm_0);
}

uint64_t sub_1C3FB05E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + *(int *)(result + 40));
  if (v4)
  {
    uint64_t v5 = v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_references;
    swift_beginAccess();
    return sub_1C3F8F520(v5, a2, (uint64_t (*)(void))type metadata accessor for PartiallyOrderedReferenceMap);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C3FB065C(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0350);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Proto_Constants(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = &v18[-v11];
  sub_1C3FB08D0((uint64_t)v5);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1C3F962E0((uint64_t)v5, &qword_1EBBC0350);
  }
  else
  {
    sub_1C3F9775C((uint64_t)v5, (uint64_t)v12, type metadata accessor for Proto_Constants);
    sub_1C3FA1CCC((uint64_t)v12, (uint64_t)v10, type metadata accessor for Proto_Constants);
    sub_1C3FB0DE8((uint64_t)v10);
    sub_1C3F9229C((uint64_t)v12, type metadata accessor for Proto_Constants);
  }
  uint64_t result = swift_beginAccess();
  uint64_t v14 = *(void *)(v1 + 48);
  if (v14)
  {
    uint64_t v15 = *(int *)(type metadata accessor for Proto_Document(0) + 20);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for Proto_Document._StorageClass(0);
      swift_allocObject();
      uint64_t v16 = swift_retain();
      *(void *)(a1 + v15) = sub_1C3F7CB4C(v16);
      swift_release();
    }
    uint64_t v17 = (void *)(*(void *)(a1 + v15)
                   + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__assets);
    swift_beginAccess();
    void *v17 = v14;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C3FB08D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = sub_1C4496678();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07E8);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Proto_Constants(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (void *)((char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = (uint64_t *)(v1 + 24);
  swift_beginAccess();
  if (!*(void *)(*(void *)(v1 + 24) + 16))
  {
    swift_beginAccess();
    if (!*(void *)(*(void *)(v1 + 40) + 16)) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a1, 1, 1, v10);
    }
  }
  *uint64_t v13 = sub_1C4496868();
  v13[1] = v15;
  v13[2] = MEMORY[0x1E4FBC860];
  sub_1C4496888();
  unint64_t v16 = *(void *)(*v14 + 16);
  if (v16 >> 59) {
    __break(1u);
  }
  uint64_t v42 = v13;
  uint64_t v43 = v11;
  uint64_t v44 = v10;
  uint64_t v45 = v1;
  uint64_t v46 = a1;
  uint64_t v61 = sub_1C3FB0FAC(16 * v16);
  uint64_t v62 = v17;
  uint64_t v18 = *v14;
  uint64_t v19 = *(void *)(*v14 + 16);
  id v41[2] = v18;
  if (v19)
  {
    char v20 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v21 = v4 + 16;
    uint64_t v22 = v18 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v49 = *(void *)(v21 + 56);
    uint64_t v50 = v20;
    unint64_t v23 = v21 + 40;
    uint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 32);
    uint64_t v51 = v21;
    unint64_t v47 = (void (**)(char *, uint64_t))(v21 - 8);
    uint64_t v48 = (void (**)(char *, char *, uint64_t))(v21 + 16);
    swift_bridgeObjectRetain();
    v41[1] = v23 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    while (1)
    {
      v50(v9, v22, v3);
      uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v23;
      (*(void (**)(char *, void, uint64_t, uint64_t))v23)(v9, 0, 1, v3);
      if ((*v24)(v9, 1, v3) == 1) {
        break;
      }
      (*v48)(v6, v9, v3);
      uint64_t v52 = sub_1C4496658();
      char v53 = v26;
      char v54 = v27;
      char v55 = v28;
      char v56 = v29;
      char v57 = v30;
      char v58 = v31;
      char v59 = v32;
      char v60 = v33;
      sub_1C4496658();
      sub_1C44962E8();
      swift_allocObject();
      sub_1C4496288();
      sub_1C4496588();
      swift_release();
      (*v47)(v6, v3);
      v22 += v49;
      if (!--v19) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    swift_bridgeObjectRetain();
LABEL_10:
    v25(v9, 1, 1, v3);
  }
  swift_bridgeObjectRelease();
  uint64_t v34 = v61;
  uint64_t v35 = v62;
  unint64_t v36 = v42;
  sub_1C3F7E2CC(*v42, v42[1]);
  *unint64_t v36 = v34;
  v36[1] = v35;
  uint64_t v37 = v45;
  swift_beginAccess();
  uint64_t v38 = *(void *)(v37 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36[2] = v38;
  uint64_t v39 = v46;
  sub_1C3FA1CCC((uint64_t)v36, v46, type metadata accessor for Proto_Constants);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v39, 0, 1, v44);
  return sub_1C3F9229C((uint64_t)v36, type metadata accessor for Proto_Constants);
}

uint64_t sub_1C3FB0DE8(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0350);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for Proto_Document(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for Proto_Document._StorageClass(0);
    swift_allocObject();
    uint64_t v10 = swift_retain();
    *(void *)(v1 + v9) = sub_1C3F7CB4C(v10);
    swift_release();
  }
  uint64_t v11 = *(void *)(v1 + v9);
  sub_1C3F92E00(a1, (uint64_t)v8, type metadata accessor for Proto_Constants);
  uint64_t v12 = type metadata accessor for Proto_Constants(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 0, 1, v12);
  sub_1C3F961BC((uint64_t)v8, (uint64_t)v6, &qword_1EBBC0350);
  uint64_t v13 = v11 + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__constants;
  swift_beginAccess();
  swift_retain();
  sub_1C3F98338((uint64_t)v6, v13, &qword_1EBBC0350);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1C3FB0FAC(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      sub_1C44962E8();
      swift_allocObject();
      sub_1C44962D8();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_1C44964E8();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1C3FB1048(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C3FA0A88(a1, a2, a3, a4, (uint64_t *)&unk_1EBBBC168, type metadata accessor for Proto_Reference, type metadata accessor for Proto_Reference);
}

uint64_t sub_1C3FB107C(uint64_t a1)
{
  return sub_1C3FB56A4(a1, (uint64_t (*)(void))sub_1C3FB1048, type metadata accessor for Proto_Reference);
}

uint64_t sub_1C3FB10A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  swift_retain();
  uint64_t result = swift_release();
  if (*(void *)a2)
  {
    uint64_t v11 = *(void (**)(uint64_t))(**(void **)a2 + 176);
    swift_retain();
    v11(a3);
    if (v4)
    {
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      if (*(void *)(a1 + 80) || *(void *)(a1 + 88))
      {
        uint64_t v12 = sub_1C3F62C10();
        *(void *)(a1 + 80) = v9;
        swift_retain();
        swift_retain();
        swift_release();
        *(void *)(a1 + 88) = v8;
        swift_release();
        swift_release();
        uint64_t v13 = v12 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
        swift_beginAccess();
        sub_1C3FA1CCC(v13, a4, type metadata accessor for Proto_CRDT);
      }
      else
      {
        sub_1C4496888();
        uint64_t v14 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
        if (qword_1EBBC0668 != -1) {
          swift_once();
        }
        *(void *)(a4 + v14) = qword_1EBBC0660;
        swift_retain();
        swift_release();
      }
    }
    swift_release();
    sub_1C3FB161C(a2);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C3FB1298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v22 = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0598);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Proto_Value(0);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v16 = (char *)&v22 - v15;
  uint64_t v17 = *(void *)(a2 + *(int *)(type metadata accessor for Proto_Document(0) + 20))
      + OBJC_IVAR____TtCV9Coherence14Proto_DocumentP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__root;
  swift_beginAccess();
  sub_1C3F970C4(v17, (uint64_t)v10, &qword_1EBBC0598);
  uint64_t v18 = type metadata accessor for Proto_Document.OneOf_Root(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v10, 1, v18) == 1)
  {
    sub_1C3F962E0((uint64_t)v10, &qword_1EBBC0598);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_1C3F9775C((uint64_t)v10, (uint64_t)v16, type metadata accessor for Proto_Value);
      sub_1C3FA1CCC((uint64_t)v16, (uint64_t)v14, type metadata accessor for Proto_Value);
      type metadata accessor for CRDecoder(0);
      swift_allocObject();
      swift_retain();
      uint64_t v19 = sub_1C3F974B0((uint64_t)v14, v5);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a4 + 8) + 8) + 8))(v19, v22);
      return sub_1C3F9229C((uint64_t)v16, type metadata accessor for Proto_Value);
    }
    sub_1C3F9229C((uint64_t)v10, type metadata accessor for Proto_Document.OneOf_Root);
  }
  sub_1C3FE3FF0();
  swift_allocError();
  *(void *)uint64_t v21 = 0xD000000000000017;
  *(void *)(v21 + 8) = 0x80000001C44B1740;
  *(unsigned char *)(v21 + 16) = 0;
  return swift_willThrow();
}

uint64_t Capsule<>.rootID.getter@<X0>(uint64_t *a1@<X8>)
{
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = *v1;
    *a1 = *v1;
    a1[1] = v2;
    return sub_1C3F7E324(v3, v2);
  }
  return result;
}

uint64_t Capsule.version.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + *(int *)(result + 40));
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC9Coherence10CapsuleRef_version);
    swift_beginAccess();
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    *a2 = v6;
    a2[1] = v7;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C3FB161C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1C3FB1680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (**a6)(), int a7, unsigned int (**a8)(uint64_t, uint64_t, uint64_t), unsigned char *a9, unsigned char *a10)
{
  uint64_t v286 = a8;
  LODWORD(v291) = a7;
  uint64_t v283 = a6;
  uint64_t v274 = a3;
  uint64_t v289 = type metadata accessor for FinalizedTimestampRange(0);
  uint64_t v253 = *(void *)(v289 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v289);
  uint64_t v250 = (char *)v228 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)v228 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v228 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF870);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v267 = (char *)v228 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v246 = (uint64_t)v228 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v276 = (char *)v228 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v247 = (char *)v228 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v268 = (uint64_t)v228 - v30;
  MEMORY[0x1F4188790](v29);
  uint64_t v248 = (uint64_t)v228 - v31;
  uint64_t v275 = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v32 = *(void *)(v275 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v275);
  uint64_t v273 = (char *)v228 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v270 = (uint64_t)v228 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v278 = (uint64_t)v228 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v290 = (uint64_t)v228 - v40;
  MEMORY[0x1F4188790](v39);
  uint64_t v244 = (uint64_t)v228 - v41;
  uint64_t v292 = type metadata accessor for RetainedMapRun(0);
  uint64_t v285 = *(void (***)(uint64_t, void, uint64_t))(v292 - 8);
  uint64_t v42 = MEMORY[0x1F4188790](v292);
  uint64_t v271 = (uint64_t)v228 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = MEMORY[0x1F4188790](v42);
  uint64_t v281 = (uint64_t)v228 - v45;
  MEMORY[0x1F4188790](v44);
  uint64_t v254 = (uint64_t)v228 - v46;
  uint64_t v293 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBF0A0);
  uint64_t v287 = *(void *)(v293 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v293);
  uint64_t v279 = (void *)((char *)v228 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v294 = (void *)((char *)v228 - v50);
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  uint64_t v251 = (void *)((char *)v228 - v52);
  MEMORY[0x1F4188790](v51);
  uint64_t v262 = (void *)((char *)v228 - v53);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBEF70);
  uint64_t v55 = MEMORY[0x1F4188790](v54 - 8);
  uint64_t v272 = (uint64_t)v228 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = MEMORY[0x1F4188790](v55);
  uint64_t v284 = (uint64_t)v228 - v58;
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v282 = (uint64_t)v228 - v60;
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  uint64_t v288 = (uint64_t)v228 - v62;
  uint64_t v63 = MEMORY[0x1F4188790](v61);
  uint64_t v261 = (uint64_t)v228 - v64;
  uint64_t v65 = MEMORY[0x1F4188790](v63);
  uint64_t v255 = (uint64_t)v228 - v66;
  MEMORY[0x1F4188790](v65);
  uint64_t v266 = (uint64_t)v228 - v67;
  uint64_t v68 = type metadata accessor for Replica();
  uint64_t v69 = v68 - 8;
  uint64_t v70 = MEMORY[0x1F4188790](v68);
  uint64_t v230 = (uint64_t)v228 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v70);
  uint64_t v249 = (uint64_t)v228 - v72;
  uint64_t v241 = sub_1C44967A8();
  uint64_t v73 = *(void *)(v241 - 8);
  MEMORY[0x1F4188790](v241);
  uint64_t v242 = (char *)v228 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBCA78);
  uint64_t result = MEMORY[0x1F4188790](v75);
  if (!*(void *)(a1 + *(int *)(v69 + 28))) {
    return result;
  }
  uint64_t v78 = result;
  uint64_t v240 = (char *)v228 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v79 = *a5;
  if (*(void *)(*a5 + 16) && (unint64_t v80 = sub_1C3F8F160(a1), (v81 & 1) != 0))
  {
    sub_1C3FAA63C(*(void *)(v79 + 56) + 16 * v80, (uint64_t)v299);
  }
  else
  {
    v299[0] = 0;
    v299[1] = 0;
  }
  sub_1C3F961BC((uint64_t)v299, (uint64_t)&v298, qword_1EBBBEE40);
  if (v298)
  {
    sub_1C3FAAC94((uint64_t)&v298, (uint64_t)&v300);
  }
  else
  {
    uint64_t v296 = MEMORY[0x1E4FBC860];
    swift_weakInit();
    swift_weakAssign();
    sub_1C3FAAC94((uint64_t)&v296, (uint64_t)&v300);
    sub_1C3F962E0((uint64_t)&v298, qword_1EBBBEE40);
  }
  swift_endAccess();
  uint64_t result = sub_1C3FB8420(a1);
  if ((v291 & 1) == 0 && result <= (uint64_t)v283)
  {
    uint64_t result = (uint64_t)v283 + 1;
    if (__OFADD__(v283, 1)) {
      goto LABEL_190;
    }
  }
  uint64_t v256 = result;
  uint64_t v239 = a1;
  v228[1] = a4;
  uint64_t v82 = v32;
  uint64_t v83 = v286;
  v228[2] = a5;
  uint64_t v260 = v17;
  uint64_t v84 = v242;
  sub_1C44967C8();
  uint64_t v85 = v240;
  sub_1C4496798();
  unint64_t v86 = v84;
  uint64_t v87 = v241;
  uint64_t v237 = *(void (**)(char *, uint64_t))(v73 + 8);
  v237(v86, v241);
  unint64_t v88 = &v85[*(int *)(v78 + 36)];
  uint64_t v236 = v83 + 2;
  uint64_t v231 = a9;
  swift_beginAccess();
  uint64_t v252 = a10;
  swift_beginAccess();
  uint64_t v89 = sub_1C3F70940((unint64_t *)&qword_1EBBBEE28, MEMORY[0x1E4F27CE0]);
  uint64_t v90 = v85;
  uint64_t v91 = v87;
  int v229 = 0;
  uint64_t v238 = v73 + 8;
  uint64_t v235 = (void (**)(char *, unint64_t, uint64_t))(v73 + 16);
  uint64_t v234 = v83 + 4;
  uint64_t v286 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v285 + 6);
  uint64_t v283 = (uint64_t (**)())(v82 + 48);
  uint64_t v291 = (uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56);
  v285 += 7;
  uint64_t v92 = v275;
  uint64_t v93 = v249;
  uint64_t v233 = v88;
  uint64_t v232 = v89;
  while (1)
  {
    uint64_t v94 = *(void *)v88;
    uint64_t v95 = v91;
    unint64_t v96 = (unint64_t)v90;
    sub_1C4497818();
    if (v94 == v297) {
      goto LABEL_132;
    }
    uint64_t v97 = (void (*)(uint64_t *, void))sub_1C44978C8();
    uint64_t v100 = *v98;
    uint64_t v99 = v98[1];
    v97(&v297, 0);
    uint64_t v101 = v242;
    (*v235)(v242, v96, v95);
    sub_1C4497828();
    v237(v101, v95);
    sub_1C3F8EF24(v239, v93, (uint64_t (*)(void))type metadata accessor for Replica);
    swift_beginAccess();
    unint64_t v103 = sub_1C3FAA6E8(&v297, v93);
    if (*v102)
    {
      uint64_t v104 = v102;
      uint64_t v295 = MEMORY[0x1E4FBC860];
      uint64_t v263 = v100;
      uint64_t result = sub_1C3FB3D7C(v100, v99);
      uint64_t v106 = (uint64_t)v260;
      uint64_t v280 = v103;
      uint64_t v277 = result;
      if (result == v105)
      {
        uint64_t v265 = 0;
LABEL_17:
        sub_1C3F9043C(v277, v105);
        uint64_t v107 = v295;
        ((void (*)(uint64_t *, void))v280)(&v297, 0);
        swift_endAccess();
        sub_1C3F9024C(v249, (uint64_t (*)(void))type metadata accessor for Replica);
        if (v265 > 0) {
          *uint64_t v231 = 1;
        }
        uint64_t v108 = (uint64_t)v250;
        uint64_t v109 = (uint64_t)v247;
        uint64_t v258 = *(void *)(v107 + 16);
        if (!v258)
        {
          swift_bridgeObjectRelease();
          uint64_t v93 = v249;
          goto LABEL_117;
        }
        uint64_t v259 = v107 + ((*(unsigned __int8 *)(v253 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v253 + 80));
        swift_bridgeObjectRetain();
        uint64_t result = swift_beginAccess();
        unint64_t v110 = 0;
        uint64_t v111 = v263;
        uint64_t v243 = v107;
        while (1)
        {
          if (v110 >= *(void *)(v107 + 16)) {
            goto LABEL_158;
          }
          uint64_t v269 = v111;
          uint64_t v257 = *(void *)(v253 + 72);
          unint64_t v264 = v110;
          sub_1C3F8EF24(v259 + v257 * v110, v106, type metadata accessor for FinalizedTimestampRange);
          sub_1C3F970C4(v106, v109, &qword_1EBBBF870);
          uint64_t v280 = *v283;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v280)(v109, 1, v92) == 1)
          {
            sub_1C3F962E0(v109, &qword_1EBBBF870);
            goto LABEL_52;
          }
          uint64_t v112 = v278;
          sub_1C3F8F6E0(v109, v278, type metadata accessor for FinalizedTimestamp);
          uint64_t v113 = *(void *)(v106 + *(int *)(v289 + 20));
          uint64_t result = v269;
          uint64_t v114 = v269 + v113;
          if (__OFADD__(v269, v113)) {
            goto LABEL_171;
          }
          if (v114 < v269) {
            goto LABEL_172;
          }
          uint64_t v277 = *(void *)(v112 + *(int *)(v92 + 20));
          uint64_t v297 = MEMORY[0x1E4FBC860];
          uint64_t result = sub_1C3FB3D7C(v269, v114);
          if (result == v115) {
            goto LABEL_51;
          }
          if (v115 < result) {
            goto LABEL_182;
          }
          int64_t v116 = v115;
          if (result >= v115) {
            goto LABEL_183;
          }
          uint64_t v117 = 0;
          uint64_t v245 = result;
          unint64_t v118 = result;
          uint64_t v119 = (uint64_t)v276;
          do
          {
            if ((v118 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
LABEL_171:
              __break(1u);
LABEL_172:
              __break(1u);
LABEL_173:
              __break(1u);
LABEL_174:
              __break(1u);
LABEL_175:
              __break(1u);
LABEL_176:
              __break(1u);
LABEL_177:
              __break(1u);
LABEL_178:
              __break(1u);
LABEL_179:
              __break(1u);
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
              goto LABEL_184;
            }
            if (v118 >= *(void *)(v300 + 16)) {
              goto LABEL_137;
            }
            unint64_t v120 = (*(unsigned __int8 *)(v287 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v287 + 80);
            unint64_t v121 = *(void *)(v287 + 72) * v118;
            uint64_t v122 = v294;
            sub_1C3F970C4(v300 + v120 + v121, (uint64_t)v294, qword_1EBBBF0A0);
            uint64_t v123 = (uint64_t)v122 + *(int *)(v293 + 36);
            uint64_t v124 = v282;
            sub_1C3F970C4(v123, v282, qword_1EBBBEF70);
            if ((*v286)(v124, 1, v292) == 1)
            {
              sub_1C3F962E0(v124, qword_1EBBBEF70);
              uint64_t v125 = sub_1C4496678();
              uint64_t v126 = v290;
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v125 - 8) + 16))(v290, v278, v125);
              if (__OFADD__(v277, v117)) {
                goto LABEL_142;
              }
              *(void *)(v126 + *(int *)(v92 + 20)) = v277 + v117;
              sub_1C3F8EF24(v126, (uint64_t)v19, type metadata accessor for FinalizedTimestamp);
              uint64_t v127 = *v291;
              uint64_t result = (*v291)(v19, 0, 1, v92);
              uint64_t v128 = v294[1];
              if (__OFSUB__(v128, *v294)) {
                goto LABEL_143;
              }
              *(void *)&v19[*(int *)(v289 + 20)] = v128 - *v294;
              sub_1C3FB4824((uint64_t)v19);
              uint64_t result = sub_1C3F9024C((uint64_t)v19, type metadata accessor for FinalizedTimestampRange);
              uint64_t v129 = v294[1];
              uint64_t v130 = v129 - *v294;
              if (__OFSUB__(v129, *v294)) {
                goto LABEL_144;
              }
              BOOL v131 = __OFADD__(v117, v130);
              v117 += v130;
              if (v131) {
                goto LABEL_145;
              }
              uint64_t v132 = v288;
              sub_1C3F8F6E0(v290, v288, type metadata accessor for FinalizedTimestamp);
              v127((char *)v132, 0, 1, v92);
              *(void *)(v132 + *(int *)(v292 + 20)) = 1;
              uint64_t v119 = (uint64_t)v276;
            }
            else
            {
              uint64_t v133 = v124;
              uint64_t v134 = v281;
              sub_1C3F8F6E0(v133, v281, type metadata accessor for RetainedMapRun);
              sub_1C3F970C4(v134, v119, &qword_1EBBBF870);
              int v135 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v280)(v119, 1, v92);
              uint64_t v136 = v270;
              if (v135 == 1)
              {
                sub_1C3F962E0(v119, &qword_1EBBBF870);
                uint64_t v137 = sub_1C4496678();
                uint64_t v138 = v290;
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v137 - 8) + 16))(v290, v278, v137);
                if (__OFADD__(v277, v117)) {
                  goto LABEL_150;
                }
                *(void *)(v138 + *(int *)(v92 + 20)) = v277 + v117;
                sub_1C3F8EF24(v138, (uint64_t)v19, type metadata accessor for FinalizedTimestamp);
                uint64_t v139 = *v291;
                uint64_t result = (*v291)(v19, 0, 1, v92);
                uint64_t v140 = v294[1];
                if (__OFSUB__(v140, *v294)) {
                  goto LABEL_152;
                }
                *(void *)&v19[*(int *)(v289 + 20)] = v140 - *v294;
                sub_1C3FB4824((uint64_t)v19);
                uint64_t result = sub_1C3F9024C((uint64_t)v19, type metadata accessor for FinalizedTimestampRange);
                uint64_t v141 = v294[1];
                uint64_t v142 = v141 - *v294;
                if (__OFSUB__(v141, *v294)) {
                  goto LABEL_153;
                }
                BOOL v131 = __OFADD__(v117, v142);
                v117 += v142;
                if (v131) {
                  goto LABEL_154;
                }
                uint64_t v143 = v268;
                sub_1C3F8F6E0(v290, v268, type metadata accessor for FinalizedTimestamp);
                v139((char *)v143, 0, 1, v275);
                uint64_t v144 = v292;
                int64_t v145 = v116;
                uint64_t v146 = *(void *)(v281 + *(int *)(v292 + 20));
                sub_1C3F9024C(v281, type metadata accessor for RetainedMapRun);
                uint64_t v147 = v143;
                uint64_t v92 = v275;
                uint64_t v132 = v288;
                sub_1C3F961BC(v147, v288, &qword_1EBBBF870);
                *(void *)(v132 + *(int *)(v144 + 20)) = v146;
                int64_t v116 = v145;
                uint64_t v119 = (uint64_t)v276;
              }
              else
              {
                sub_1C3F8F6E0(v119, v270, type metadata accessor for FinalizedTimestamp);
                sub_1C3F8EF24(v136, (uint64_t)v19, type metadata accessor for FinalizedTimestamp);
                uint64_t result = (*v291)(v19, 0, 1, v92);
                uint64_t v148 = v294[1];
                if (__OFSUB__(v148, *v294)) {
                  goto LABEL_151;
                }
                *(void *)&v19[*(int *)(v289 + 20)] = v148 - *v294;
                sub_1C3FB4824((uint64_t)v19);
                sub_1C3F9024C((uint64_t)v19, type metadata accessor for FinalizedTimestampRange);
                sub_1C3F9024C(v136, type metadata accessor for FinalizedTimestamp);
                uint64_t v132 = v288;
                sub_1C3F8F6E0(v281, v288, type metadata accessor for RetainedMapRun);
              }
            }
            (*v285)(v132, 0, 1);
            sub_1C3F962E0((uint64_t)v294, qword_1EBBBF0A0);
            unint64_t v149 = v300;
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v300 = v149;
            if ((result & 1) == 0)
            {
              uint64_t result = sub_1C4232804(v149);
              unint64_t v149 = result;
              unint64_t v300 = result;
            }
            if (v118 >= *(void *)(v149 + 16)) {
              goto LABEL_138;
            }
            ++v118;
            uint64_t result = sub_1C3FB43E4(v288, v149 + v120 + *(int *)(v293 + 36) + v121);
          }
          while (v116 != v118);
          int64_t v115 = v116;
          uint64_t v106 = (uint64_t)v260;
          uint64_t v107 = v243;
          uint64_t result = v245;
          uint64_t v112 = v278;
LABEL_51:
          sub_1C3F9043C(result, v115);
          swift_bridgeObjectRelease();
          sub_1C3F9024C(v112, type metadata accessor for FinalizedTimestamp);
          *uint64_t v252 = 1;
          uint64_t v108 = (uint64_t)v250;
          uint64_t v109 = (uint64_t)v247;
LABEL_52:
          uint64_t v150 = *(void *)(v106 + *(int *)(v289 + 20));
          uint64_t result = sub_1C3F9024C(v106, type metadata accessor for FinalizedTimestampRange);
          uint64_t v111 = v269 + v150;
          if (__OFADD__(v269, v150)) {
            goto LABEL_164;
          }
          unint64_t v110 = v264 + 1;
          if (v264 + 1 == v258)
          {
            swift_bridgeObjectRelease();
            uint64_t result = swift_beginAccess();
            unint64_t v151 = 0;
            uint64_t v152 = MEMORY[0x1E4FBC860];
            while (1)
            {
              if (v151 >= *(void *)(v107 + 16)) {
                goto LABEL_169;
              }
              unint64_t v264 = v151;
              sub_1C3F8EF24(v259 + v151 * v257, v108, type metadata accessor for FinalizedTimestampRange);
              uint64_t v153 = v246;
              unint64_t v96 = (unint64_t)&qword_1EBBBF870;
              sub_1C3F970C4(v108, v246, &qword_1EBBBF870);
              int v154 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v280)(v153, 1, v92);
              uint64_t result = sub_1C3F962E0(v153, &qword_1EBBBF870);
              if (v154 != 1) {
                goto LABEL_89;
              }
              uint64_t v155 = *(void *)(v108 + *(int *)(v289 + 20));
              uint64_t v156 = v263 + v155;
              uint64_t v157 = v279;
              if (__OFADD__(v263, v155)) {
                goto LABEL_178;
              }
              if (v156 < v263) {
                goto LABEL_179;
              }
              uint64_t v269 = v256 + v265;
              if (__OFADD__(v256, v265)) {
                goto LABEL_180;
              }
              uint64_t v297 = v152;
              uint64_t result = sub_1C3FB3D7C(v263, v156);
              uint64_t v245 = result;
              if (result != v158) {
                break;
              }
              uint64_t v159 = 0;
LABEL_87:
              sub_1C3F9043C(v245, v158);
              uint64_t result = swift_bridgeObjectRelease();
              if (__OFADD__(v265, v159)) {
                goto LABEL_181;
              }
              v265 += v159;
              *uint64_t v252 = 1;
              uint64_t v108 = (uint64_t)v250;
              uint64_t v152 = MEMORY[0x1E4FBC860];
LABEL_89:
              uint64_t v190 = *(void *)(v108 + *(int *)(v289 + 20));
              uint64_t result = sub_1C3F9024C(v108, type metadata accessor for FinalizedTimestampRange);
              uint64_t v93 = v249;
              if (__OFADD__(v263, v190)) {
                goto LABEL_170;
              }
              v263 += v190;
              unint64_t v151 = v264 + 1;
              if (v264 + 1 == v258)
              {
                swift_bridgeObjectRelease();
LABEL_117:
                uint64_t v194 = v265;
                goto LABEL_128;
              }
            }
            uint64_t v160 = (uint64_t)v273;
            if (v158 >= result)
            {
              if (result < v158)
              {
                uint64_t v159 = 0;
                unint64_t v161 = result;
                uint64_t v162 = (uint64_t)v267;
                uint64_t v277 = v158;
                while (1)
                {
                  if ((v161 & 0x8000000000000000) != 0) {
                    goto LABEL_139;
                  }
                  if (v161 >= *(void *)(v300 + 16)) {
                    goto LABEL_140;
                  }
                  unint64_t v96 = (*(unsigned __int8 *)(v287 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v287 + 80);
                  unint64_t v163 = *(void *)(v287 + 72) * v161;
                  sub_1C3F970C4(v300 + v96 + v163, (uint64_t)v157, qword_1EBBBF0A0);
                  uint64_t v164 = (uint64_t)v157 + *(int *)(v293 + 36);
                  uint64_t v165 = v272;
                  sub_1C3F970C4(v164, v272, qword_1EBBBEF70);
                  if ((*v286)(v165, 1, v292) == 1)
                  {
                    sub_1C3F962E0(v165, qword_1EBBBEF70);
                    uint64_t v166 = sub_1C4496678();
                    uint64_t v167 = v290;
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v166 - 8) + 16))(v290, v274, v166);
                    if (__OFADD__(v269, v159)) {
                      goto LABEL_146;
                    }
                    *(void *)(v167 + *(int *)(v92 + 20)) = v269 + v159;
                    sub_1C3F8EF24(v167, (uint64_t)v19, type metadata accessor for FinalizedTimestamp);
                    uint64_t v168 = *v291;
                    uint64_t result = (*v291)(v19, 0, 1, v92);
                    uint64_t v157 = v279;
                    uint64_t v169 = v279[1];
                    if (__OFSUB__(v169, *v279)) {
                      goto LABEL_147;
                    }
                    *(void *)&v19[*(int *)(v289 + 20)] = v169 - *v279;
                    sub_1C3FB4824((uint64_t)v19);
                    uint64_t result = sub_1C3F9024C((uint64_t)v19, type metadata accessor for FinalizedTimestampRange);
                    uint64_t v170 = v157[1];
                    uint64_t v171 = v170 - *v157;
                    if (__OFSUB__(v170, *v157)) {
                      goto LABEL_148;
                    }
                    BOOL v131 = __OFADD__(v159, v171);
                    v159 += v171;
                    if (v131) {
                      goto LABEL_149;
                    }
                    uint64_t v172 = v284;
                    sub_1C3F8F6E0(v290, v284, type metadata accessor for FinalizedTimestamp);
                    v168((char *)v172, 0, 1, v92);
                    *(void *)(v172 + *(int *)(v292 + 20)) = 1;
                  }
                  else
                  {
                    uint64_t v173 = v165;
                    uint64_t v174 = v271;
                    sub_1C3F8F6E0(v173, v271, type metadata accessor for RetainedMapRun);
                    sub_1C3F970C4(v174, v162, &qword_1EBBBF870);
                    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v280)(v162, 1, v92) != 1)
                    {
                      sub_1C3F8F6E0(v162, v160, type metadata accessor for FinalizedTimestamp);
                      sub_1C3F8EF24(v160, (uint64_t)v19, type metadata accessor for FinalizedTimestamp);
                      uint64_t result = (*v291)(v19, 0, 1, v92);
                      uint64_t v188 = v279[1];
                      if (__OFSUB__(v188, *v279)) {
                        goto LABEL_160;
                      }
                      *(void *)&v19[*(int *)(v289 + 20)] = v188 - *v279;
                      sub_1C3FB4824((uint64_t)v19);
                      sub_1C3F9024C((uint64_t)v19, type metadata accessor for FinalizedTimestampRange);
                      uint64_t v157 = v279;
                      sub_1C3F9024C(v160, type metadata accessor for FinalizedTimestamp);
                      uint64_t v172 = v284;
                      sub_1C3F8F6E0(v271, v284, type metadata accessor for RetainedMapRun);
                      goto LABEL_82;
                    }
                    sub_1C3F962E0(v162, &qword_1EBBBF870);
                    uint64_t v175 = sub_1C4496678();
                    uint64_t v176 = v290;
                    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v175 - 8) + 16))(v290, v274, v175);
                    if (__OFADD__(v269, v159)) {
                      goto LABEL_159;
                    }
                    *(void *)(v176 + *(int *)(v92 + 20)) = v269 + v159;
                    sub_1C3F8EF24(v176, (uint64_t)v19, type metadata accessor for FinalizedTimestamp);
                    uint64_t v177 = *v291;
                    uint64_t result = (*v291)(v19, 0, 1, v92);
                    uint64_t v178 = v279;
                    uint64_t v179 = v279[1];
                    if (__OFSUB__(v179, *v279)) {
                      goto LABEL_161;
                    }
                    *(void *)&v19[*(int *)(v289 + 20)] = v179 - *v279;
                    sub_1C3FB4824((uint64_t)v19);
                    uint64_t result = sub_1C3F9024C((uint64_t)v19, type metadata accessor for FinalizedTimestampRange);
                    uint64_t v180 = v178[1];
                    uint64_t v181 = v180 - *v178;
                    if (__OFSUB__(v180, *v178)) {
                      goto LABEL_162;
                    }
                    BOOL v131 = __OFADD__(v159, v181);
                    v159 += v181;
                    if (v131) {
                      goto LABEL_163;
                    }
                    uint64_t v182 = v268;
                    sub_1C3F8F6E0(v290, v268, type metadata accessor for FinalizedTimestamp);
                    v177((char *)v182, 0, 1, v275);
                    uint64_t v183 = v292;
                    uint64_t v184 = *(void *)(v271 + *(int *)(v292 + 20));
                    sub_1C3F9024C(v271, type metadata accessor for RetainedMapRun);
                    uint64_t v185 = v182;
                    uint64_t v92 = v275;
                    uint64_t v186 = v284;
                    sub_1C3F961BC(v185, v284, &qword_1EBBBF870);
                    uint64_t v187 = v183;
                    uint64_t v157 = v279;
                    *(void *)(v186 + *(int *)(v187 + 20)) = v184;
                    uint64_t v172 = v186;
                  }
                  uint64_t v162 = (uint64_t)v267;
LABEL_82:
                  (*v285)(v172, 0, 1);
                  sub_1C3F962E0((uint64_t)v157, qword_1EBBBF0A0);
                  unint64_t v189 = v300;
                  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                  unint64_t v300 = v189;
                  if ((result & 1) == 0)
                  {
                    uint64_t result = sub_1C4232804(v189);
                    unint64_t v189 = result;
                    unint64_t v300 = result;
                  }
                  if (v161 >= *(void *)(v189 + 16)) {
                    goto LABEL_141;
                  }
                  ++v161;
                  uint64_t result = sub_1C3FB43E4(v284, v189 + v96 + *(int *)(v293 + 36) + v163);
                  int64_t v158 = v277;
                  uint64_t v160 = (uint64_t)v273;
                  if (v277 == v161)
                  {
                    uint64_t v107 = v243;
                    goto LABEL_87;
                  }
                }
              }
LABEL_185:
              __break(1u);
LABEL_186:
              __break(1u);
              goto LABEL_187;
            }
LABEL_184:
            __break(1u);
            goto LABEL_185;
          }
        }
      }
      if (v105 < result) {
        goto LABEL_186;
      }
      if (result < v105)
      {
        uint64_t v265 = 0;
        unint64_t v195 = result;
        while (1)
        {
          if ((v195 & 0x8000000000000000) != 0) {
            goto LABEL_155;
          }
          if (v195 >= *(void *)(*v104 + 16)) {
            goto LABEL_156;
          }
          int64_t v196 = v105;
          unint64_t v96 = (*(unsigned __int8 *)(v287 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v287 + 80);
          unint64_t v197 = *(void *)(v287 + 72) * v195;
          uint64_t v198 = v262;
          sub_1C3F970C4(*v104 + v96 + v197, (uint64_t)v262, qword_1EBBBF0A0);
          uint64_t v199 = v255;
          sub_1C3F970C4((uint64_t)v198 + *(int *)(v293 + 36), v255, qword_1EBBBEF70);
          if ((*v286)(v199, 1, v292) == 1) {
            break;
          }
          uint64_t v203 = v199;
          uint64_t v204 = v254;
          sub_1C3F8F6E0(v203, v254, type metadata accessor for RetainedMapRun);
          uint64_t v205 = v204;
          uint64_t v206 = v248;
          sub_1C3F970C4(v205, v248, &qword_1EBBBF870);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v283)(v206, 1, v92) != 1)
          {
            uint64_t v218 = v206;
            uint64_t v219 = v244;
            sub_1C3F8F6E0(v218, v244, type metadata accessor for FinalizedTimestamp);
            sub_1C3F8EF24(v219, (uint64_t)v19, type metadata accessor for FinalizedTimestamp);
            uint64_t result = (*v291)(v19, 0, 1, v92);
            uint64_t v220 = v198[1];
            if (__OFSUB__(v220, *v198)) {
              goto LABEL_174;
            }
            *(void *)&v19[*(int *)(v289 + 20)] = v220 - *v198;
            sub_1C3FB4824((uint64_t)v19);
            uint64_t v201 = v266;
            sub_1C3F9024C((uint64_t)v19, type metadata accessor for FinalizedTimestampRange);
            sub_1C3F9024C(v219, type metadata accessor for FinalizedTimestamp);
            sub_1C3F8F6E0(v254, v201, type metadata accessor for RetainedMapRun);
            uint64_t v202 = 0;
            goto LABEL_110;
          }
          sub_1C3F962E0(v206, &qword_1EBBBF870);
          uint64_t v207 = sub_1C4496678();
          uint64_t v208 = v290;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v207 - 8) + 16))(v290, v274, v207);
          if (__OFADD__(v256, v265)) {
            goto LABEL_173;
          }
          *(void *)(v208 + *(int *)(v92 + 20)) = v256 + v265;
          sub_1C3F8EF24(v208, (uint64_t)v19, type metadata accessor for FinalizedTimestamp);
          uint64_t v209 = *v291;
          uint64_t result = (*v291)(v19, 0, 1, v92);
          uint64_t v210 = v198[1];
          if (__OFSUB__(v210, *v198)) {
            goto LABEL_175;
          }
          *(void *)&v19[*(int *)(v289 + 20)] = v210 - *v198;
          sub_1C3FB4824((uint64_t)v19);
          uint64_t result = sub_1C3F9024C((uint64_t)v19, type metadata accessor for FinalizedTimestampRange);
          uint64_t v211 = v198[1];
          uint64_t v212 = v211 - *v198;
          if (__OFSUB__(v211, *v198)) {
            goto LABEL_176;
          }
          BOOL v131 = __OFADD__(v265, v212);
          v265 += v212;
          if (v131) {
            goto LABEL_177;
          }
          uint64_t v213 = v268;
          sub_1C3F8F6E0(v290, v268, type metadata accessor for FinalizedTimestamp);
          v209((char *)v213, 0, 1, v92);
          uint64_t v214 = v292;
          uint64_t v215 = *(void *)(v254 + *(int *)(v292 + 20));
          sub_1C3F9024C(v254, type metadata accessor for RetainedMapRun);
          uint64_t v216 = v213;
          uint64_t v201 = v266;
          sub_1C3F961BC(v216, v266, &qword_1EBBBF870);
          uint64_t v217 = v214;
          uint64_t v198 = v262;
          uint64_t v202 = 0;
          *(void *)(v201 + *(int *)(v217 + 20)) = v215;
LABEL_111:
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v285)(v201, v202, 1, v217);
          sub_1C3F962E0((uint64_t)v198, qword_1EBBBF0A0);
          unint64_t v221 = *v104;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          unint64_t *v104 = v221;
          if ((result & 1) == 0)
          {
            uint64_t result = sub_1C4232804(v221);
            unint64_t v221 = result;
            unint64_t *v104 = result;
          }
          if (v195 >= *(void *)(v221 + 16)) {
            goto LABEL_157;
          }
          ++v195;
          uint64_t result = sub_1C3FB43E4(v266, v221 + v96 + *(int *)(v293 + 36) + v197);
          int64_t v105 = v196;
          uint64_t v106 = (uint64_t)v260;
          if (v196 == v195) {
            goto LABEL_17;
          }
        }
        sub_1C3F962E0(v199, qword_1EBBBEF70);
        uint64_t result = (*v291)(v19, 1, 1, v92);
        uint64_t v200 = v198[1];
        if (__OFSUB__(v200, *v198)) {
          goto LABEL_168;
        }
        *(void *)&v19[*(int *)(v289 + 20)] = v200 - *v198;
        sub_1C3FB4824((uint64_t)v19);
        uint64_t v201 = v266;
        sub_1C3F9024C((uint64_t)v19, type metadata accessor for FinalizedTimestampRange);
        uint64_t v202 = 1;
LABEL_110:
        uint64_t v217 = v292;
        goto LABEL_111;
      }
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
      return result;
    }
    ((void (*)(uint64_t *, void))v103)(&v297, 0);
    swift_endAccess();
    sub_1C3F9024C(v93, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v297 = MEMORY[0x1E4FBC860];
    uint64_t v296 = 0;
    uint64_t result = sub_1C3FB3D7C(v100, v99);
    uint64_t v192 = result;
    unint64_t v193 = v191;
    if (result == v191)
    {
      uint64_t v194 = 0;
    }
    else
    {
      if (v191 < result) {
        goto LABEL_188;
      }
      unint64_t v222 = result;
      if (result >= v191) {
        goto LABEL_189;
      }
      do
      {
        if ((v222 & 0x8000000000000000) != 0) {
          goto LABEL_165;
        }
        if (v222 >= *(void *)(v300 + 16)) {
          goto LABEL_166;
        }
        unint64_t v223 = (*(unsigned __int8 *)(v287 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v287 + 80);
        unint64_t v96 = *(void *)(v287 + 72) * v222;
        uint64_t v224 = v251;
        sub_1C3F970C4(v300 + v223 + v96, (uint64_t)v251, qword_1EBBBF0A0);
        sub_1C447AA98(v224, (uint64_t)&v297, v274, v256, &v296, 1, v261);
        sub_1C3F962E0((uint64_t)v224, qword_1EBBBF0A0);
        unint64_t v225 = v300;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v300 = v225;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1C4232804(v225);
          unint64_t v225 = result;
          unint64_t v300 = result;
        }
        if (v222 >= *(void *)(v225 + 16)) {
          goto LABEL_167;
        }
        ++v222;
        uint64_t result = sub_1C3FB43E4(v261, v225 + v223 + *(int *)(v293 + 36) + v96);
      }
      while (v193 != v222);
      uint64_t v194 = v296;
    }
    sub_1C3F9043C(v192, v193);
    swift_bridgeObjectRelease();
    *uint64_t v252 = 1;
    uint64_t v93 = v249;
LABEL_128:
    uint64_t v91 = v241;
    uint64_t v90 = v240;
    unint64_t v88 = v233;
    if (v194 >= 1)
    {
      int v229 = 1;
      BOOL v131 = __OFADD__(v256, v194);
      v256 += v194;
      if (v131) {
        break;
      }
    }
  }
  __break(1u);
LABEL_132:
  sub_1C3F962E0(v96, &qword_1EBBBCA78);
  uint64_t v226 = v239;
  uint64_t v227 = v230;
  sub_1C3F8EF24(v239, v230, (uint64_t (*)(void))type metadata accessor for Replica);
  sub_1C3FAA63C((uint64_t)&v300, (uint64_t)&v296);
  swift_beginAccess();
  sub_1C3FB6F2C(&v296, v227);
  swift_endAccess();
  if (v229) {
    sub_1C3FB7890(v226, v256);
  }
  return sub_1C3F903E8((uint64_t)&v300);
}

uint64_t storeEnumTagSinglePayload for FinalizedTimestamp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C43A5DC4);
}

uint64_t getEnumTagSinglePayload for FinalizedTimestamp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C43A5D58);
}

uint64_t sub_1C3FB3D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF180);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v51 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBF0A0);
  unint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v48 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v50 = (uint64_t)&v47 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v47 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v49 = (char *)&v47 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  unint64_t v52 = (unint64_t)&v47 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  unint64_t v23 = (unint64_t)&v47 - v22;
  uint64_t v24 = *v3;
  uint64_t v25 = *(void *)(*v3 + 16);
  if (!v25)
  {
    uint64_t v28 = 0;
LABEL_5:
    if (v28 <= a2)
    {
      unint64_t v29 = v23 + *(int *)(v21 + 36);
      uint64_t v30 = type metadata accessor for RetainedMapRun(0);
      (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
      *(void *)unint64_t v23 = v28;
      *(void *)(v23 + 8) = a2;
      uint64_t v24 = *v3;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_7;
      }
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  uint64_t v26 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v27 = *(void *)(v9 + 72);
  uint64_t v28 = *(void *)(v24 + ((v26 + 32) & ~v26) + v27 * (v25 - 1) + 8);
  if (v28 < a2) {
    goto LABEL_5;
  }
  while (1)
  {
    unint64_t v33 = sub_1C3FB42D8(a1, 0, v24);
    if ((v33 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    unint64_t v9 = v33;
    if (v33 >= *(void *)(v24 + 16)) {
      goto LABEL_30;
    }
    unint64_t v34 = (v26 + 32) & ~(unint64_t)v26;
    unint64_t v23 = v27 * v33;
    uint64_t v35 = (uint64_t *)(v24 + v34 + v27 * v33);
    if (*v35 < a1)
    {
      sub_1C3F970C4((uint64_t)v35, (uint64_t)v16, qword_1EBBBF0A0);
      uint64_t v24 = (uint64_t)v49;
      sub_1C4132AC0(v52, v49, a1);
      sub_1C3F962E0((uint64_t)v16, qword_1EBBBF0A0);
      unint64_t v36 = *v3;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v3 = v36;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v36 = sub_1C4232804(v36);
        *uint64_t v3 = v36;
      }
      if (v9 >= *(void *)(v36 + 16))
      {
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      uint64_t v38 = v36 + v34 + v23;
      unint64_t v23 = v52;
      sub_1C4134BE4(v52, v38);
      if (*(void *)(*v3 + 16) <= v9) {
        goto LABEL_38;
      }
      ++v9;
      uint64_t v39 = v51;
      sub_1C3F970C4(v24, v51, qword_1EBBBF0A0);
      uint64_t v40 = v39;
      a1 = (uint64_t)v3;
      sub_1C4133C38(v9, v9, v40);
      sub_1C3F962E0(v24, qword_1EBBBF0A0);
      sub_1C3F962E0(v23, qword_1EBBBF0A0);
    }
    if (__OFSUB__(a2, 1)) {
      goto LABEL_31;
    }
    a1 = *v3;
    unint64_t v41 = sub_1C3FB42D8(a2 - 1, v9, *v3);
    if ((v41 & 0x8000000000000000) != 0) {
      goto LABEL_32;
    }
    unint64_t v23 = v41;
    if (v41 >= *(void *)(a1 + 16)) {
      goto LABEL_33;
    }
    uint64_t v24 = v41 * v27;
    uint64_t v42 = a1 + v34 + v41 * v27;
    if (*(void *)(v42 + 8) > a2) {
      break;
    }
    ++v23;
LABEL_27:
    if (v23 >= v9) {
      return v9;
    }
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    uint64_t v24 = sub_1C3FB46B8(0, *(void *)(v24 + 16) + 1, 1, v24);
LABEL_7:
    unint64_t v32 = *(void *)(v24 + 16);
    unint64_t v31 = *(void *)(v24 + 24);
    if (v32 >= v31 >> 1) {
      uint64_t v24 = sub_1C3FB46B8(v31 > 1, v32 + 1, 1, v24);
    }
    *(void *)(v24 + 16) = v32 + 1;
    uint64_t v26 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v27 = *(void *)(v9 + 72);
    sub_1C3F961BC(v23, v24 + ((v26 + 32) & ~v26) + v27 * v32, qword_1EBBBF0A0);
    *uint64_t v3 = v24;
  }
  sub_1C3F970C4(v42, (uint64_t)v16, qword_1EBBBF0A0);
  uint64_t v27 = (uint64_t)v48;
  sub_1C4132AC0(v50, v48, a2);
  sub_1C3F962E0((uint64_t)v16, qword_1EBBBF0A0);
  unint64_t v36 = *v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v36;
  if (result) {
    goto LABEL_23;
  }
LABEL_39:
  uint64_t result = sub_1C4232804(v36);
  unint64_t v36 = result;
  *uint64_t v3 = result;
LABEL_23:
  if (v23 < *(void *)(v36 + 16))
  {
    uint64_t v44 = v36 + v34 + v24;
    uint64_t v24 = v50;
    uint64_t result = sub_1C4134BE4(v50, v44);
    if (*(void *)(*v3 + 16) <= v23) {
      goto LABEL_41;
    }
    ++v23;
    uint64_t v45 = v51;
    sub_1C3F970C4(v27, v51, qword_1EBBBF0A0);
    uint64_t v46 = v45;
    a1 = (uint64_t)v3;
    sub_1C4133C38(v23, v23, v46);
    sub_1C3F962E0(v27, qword_1EBBBF0A0);
    sub_1C3F962E0(v24, qword_1EBBBF0A0);
    goto LABEL_27;
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1C3FB42D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = v6 - 1;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBF0A0);
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t result = v8 - 8;
  uint64_t v10 = v11;
  uint64_t v12 = a2 + v6 - 1;
  if (__OFADD__(a2, v6 - 1))
  {
LABEL_19:
    __break(1u);
    return v12;
  }
  else
  {
    while (1)
    {
      uint64_t v13 = v12 >= 0 ? v12 : v12 + 1;
      if (v12 < -1) {
        break;
      }
      uint64_t v12 = v13 >> 1;
      if (v13 >> 1 >= v6) {
        break;
      }
      uint64_t v14 = (uint64_t *)(a3
                      + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
                      + *(void *)(v10 + 72) * v12);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      if (v15 <= a1 && v16 > a1) {
        return v12;
      }
      if (v7 < a2) {
        return v7;
      }
      if (v15 > a1)
      {
        uint64_t v7 = v12 - 1;
        BOOL v18 = __OFADD__(a2, v12 - 1);
        uint64_t v12 = a2 + v12 - 1;
        if (v18) {
          goto LABEL_19;
        }
      }
      else
      {
        a2 = v12 + 1;
        BOOL v18 = __OFADD__(v12 + 1, v7);
        v12 += 1 + v7;
        if (v18) {
          goto LABEL_19;
        }
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1C3FB43D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C4481370);
}

uint64_t sub_1C3FB43E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBEF70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3FB444C(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (BOOL v18 = v14 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_29:
    uint64_t result = sub_1C4497F48();
    __break(1u);
    return result;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if (a1)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(void *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C3FB46CC(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_1C3FB46B8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C3FB444C(a1, a2, a3, a4, &qword_1EBBBF1A8, qword_1EBBBF0A0);
}

uint64_t sub_1C3FB46CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3FB4824(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for FinalizedTimestamp(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v57 = (uint64_t)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v58 = (uint64_t)&v53 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v59 = (uint64_t)&v53 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC698);
  MEMORY[0x1F4188790](v10);
  unint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF870);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v63 = (uint64_t)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  BOOL v18 = (char *)&v53 - v17;
  MEMORY[0x1F4188790](v16);
  unint64_t v20 = (char *)&v53 - v19;
  uint64_t v60 = type metadata accessor for FinalizedTimestampRange(0);
  uint64_t v21 = *(void *)(v60 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v60);
  uint64_t v64 = (uint64_t)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v53 - v24;
  unint64_t v26 = *v1;
  uint64_t v27 = *(void *)(*v1 + 16);
  if (!v27) {
    goto LABEL_19;
  }
  uint64_t v62 = v1;
  unint64_t v55 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v56 = v21;
  uint64_t v54 = *(void *)(v21 + 72);
  sub_1C3FB563C(v26 + v55 + v54 * (v27 - 1), (uint64_t)&v53 - v24, type metadata accessor for FinalizedTimestampRange);
  sub_1C447A7D0((uint64_t)v20);
  uint64_t v61 = a1;
  sub_1C3F970C4(a1, (uint64_t)v18, &qword_1EBBBF870);
  uint64_t v28 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_1C3F970C4((uint64_t)v20, (uint64_t)v12, &qword_1EBBBF870);
  sub_1C3F970C4((uint64_t)v18, v28, &qword_1EBBBF870);
  unint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v29((uint64_t)v12, 1, v3) == 1)
  {
    sub_1C3F962E0((uint64_t)v18, &qword_1EBBBF870);
    sub_1C3F962E0((uint64_t)v20, &qword_1EBBBF870);
    if (v29(v28, 1, v3) == 1)
    {
      sub_1C3F962E0((uint64_t)v12, &qword_1EBBBF870);
      a1 = v61;
      unint64_t v1 = v62;
      goto LABEL_10;
    }
    unint64_t v31 = &qword_1EBBBC698;
    a1 = v61;
    unint64_t v1 = v62;
    uint64_t v21 = v56;
  }
  else
  {
    uint64_t v30 = v63;
    sub_1C3F970C4((uint64_t)v12, v63, &qword_1EBBBF870);
    if (v29(v28, 1, v3) == 1)
    {
      unint64_t v31 = &qword_1EBBBC698;
    }
    else
    {
      uint64_t v32 = v59;
      sub_1C3FB5024(v28, v59, type metadata accessor for FinalizedTimestamp);
      uint64_t v33 = *(int *)(v3 + 20);
      uint64_t v53 = *(void *)(v30 + v33);
      uint64_t v34 = *(void *)(v32 + v33);
      uint64_t v35 = v58;
      sub_1C3FB563C(v30, v58, type metadata accessor for FinalizedTimestamp);
      uint64_t v36 = v57;
      sub_1C3FB563C(v32, v57, type metadata accessor for FinalizedTimestamp);
      if (v53 == v34)
      {
        char v37 = sub_1C4496618();
        sub_1C447F5A8(v36, type metadata accessor for FinalizedTimestamp);
        sub_1C447F5A8(v35, type metadata accessor for FinalizedTimestamp);
        sub_1C447F5A8(v32, type metadata accessor for FinalizedTimestamp);
        sub_1C3F962E0((uint64_t)v18, &qword_1EBBBF870);
        sub_1C3F962E0((uint64_t)v20, &qword_1EBBBF870);
        sub_1C447F5A8(v30, type metadata accessor for FinalizedTimestamp);
        sub_1C3F962E0((uint64_t)v12, &qword_1EBBBF870);
        a1 = v61;
        unint64_t v1 = v62;
        uint64_t v21 = v56;
        if (v37)
        {
LABEL_10:
          unint64_t v38 = *v1;
          uint64_t v39 = a1;
          unint64_t v40 = *(void *)(*v1 + 16);
          uint64_t v41 = v60;
          uint64_t v42 = *(void *)(v39 + *(int *)(v60 + 20));
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if (result)
          {
            if (v40) {
              goto LABEL_12;
            }
          }
          else
          {
            uint64_t result = sub_1C4232868(v38);
            unint64_t v38 = result;
            if (v40)
            {
LABEL_12:
              if (v40 <= *(void *)(v38 + 16))
              {
                uint64_t v44 = v38 + v55 + (v40 - 1) * v54;
                uint64_t v45 = *(int *)(v41 + 20);
                uint64_t v46 = *(void *)(v44 + v45);
                BOOL v47 = __OFADD__(v46, v42);
                uint64_t v48 = v46 + v42;
                if (!v47)
                {
                  *(void *)(v44 + v45) = v48;
                  *unint64_t v1 = v38;
                  return sub_1C447F5A8((uint64_t)v25, type metadata accessor for FinalizedTimestampRange);
                }
                goto LABEL_27;
              }
LABEL_26:
              __break(1u);
LABEL_27:
              __break(1u);
              return result;
            }
          }
          __break(1u);
          goto LABEL_26;
        }
        goto LABEL_18;
      }
      sub_1C447F5A8(v36, type metadata accessor for FinalizedTimestamp);
      sub_1C447F5A8(v35, type metadata accessor for FinalizedTimestamp);
      sub_1C447F5A8(v32, type metadata accessor for FinalizedTimestamp);
      unint64_t v31 = &qword_1EBBBF870;
    }
    a1 = v61;
    unint64_t v1 = v62;
    uint64_t v21 = v56;
    sub_1C3F962E0((uint64_t)v18, &qword_1EBBBF870);
    sub_1C3F962E0((uint64_t)v20, &qword_1EBBBF870);
    sub_1C447F5A8(v63, type metadata accessor for FinalizedTimestamp);
  }
  sub_1C3F962E0((uint64_t)v12, v31);
LABEL_18:
  sub_1C447F5A8((uint64_t)v25, type metadata accessor for FinalizedTimestampRange);
LABEL_19:
  uint64_t v49 = v64;
  sub_1C3FB563C(a1, v64, type metadata accessor for FinalizedTimestampRange);
  unint64_t v50 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v50 = sub_1C3FB4F20(0, *(void *)(v50 + 16) + 1, 1, v50);
  }
  unint64_t v52 = *(void *)(v50 + 16);
  unint64_t v51 = *(void *)(v50 + 24);
  if (v52 >= v51 >> 1) {
    unint64_t v50 = sub_1C3FB4F20(v51 > 1, v52 + 1, 1, v50);
  }
  *(void *)(v50 + 16) = v52 + 1;
  uint64_t result = sub_1C3FB5024(v49, v50+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v52, type metadata accessor for FinalizedTimestampRange);
  *unint64_t v1 = v50;
  return result;
}

uint64_t sub_1C3FB4F20(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C3FA0A88(a1, a2, a3, a4, &qword_1EBBBC6C8, type metadata accessor for FinalizedTimestampRange, type metadata accessor for FinalizedTimestampRange);
}

uint64_t sub_1C3FB4F54(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3FB4FBC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3FB5024(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *sub_1C3FB508C()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  unint64_t v1 = (void *)sub_1C3FB5168(v0);
  swift_bridgeObjectRelease();
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_1C3FB5168(v2);
  swift_bridgeObjectRelease();
  uint64_t v5 = v1;
  sub_1C3FB589C(v3);
  swift_bridgeObjectRetain();
  sub_1C3FB58C8(&v5);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1C3FB5168(uint64_t a1)
{
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0798);
  uint64_t v3 = MEMORY[0x1F4188790](v60);
  uint64_t v56 = (uint64_t)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v55 = (uint64_t)&v43 - v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v54 = (char *)&v43 - v7;
  uint64_t v8 = sub_1C4496678();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = MEMORY[0x1E4FBC860];
  if (!v12) {
    return v13;
  }
  uint64_t v45 = v1;
  uint64_t v61 = MEMORY[0x1E4FBC860];
  sub_1C3FB5860(0, v12, 0);
  uint64_t result = sub_1C3FB6E8C(a1);
  uint64_t v16 = result;
  uint64_t v17 = 0;
  uint64_t v18 = a1 + 64;
  uint64_t v49 = v9 + 32;
  unint64_t v50 = (void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  char v19 = *(unsigned char *)(a1 + 32);
  uint64_t v44 = a1 + 88;
  uint64_t v52 = v9;
  uint64_t v53 = a1;
  unint64_t v51 = v11;
  int64_t v46 = v12;
  uint64_t v47 = v15;
  uint64_t v48 = a1 + 64;
  while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << v19)
  {
    if ((*(void *)(v18 + 8 * ((unint64_t)v16 >> 6)) & (1 << v16)) == 0) {
      goto LABEL_27;
    }
    if (*(_DWORD *)(a1 + 36) != v15) {
      goto LABEL_28;
    }
    uint64_t v58 = 1 << v16;
    unint64_t v59 = (unint64_t)v16 >> 6;
    uint64_t v57 = v17;
    uint64_t v22 = (uint64_t)v54;
    uint64_t v23 = &v54[*(int *)(v60 + 48)];
    uint64_t v24 = *(void *)(a1 + 48);
    uint64_t v25 = type metadata accessor for Replica();
    sub_1C3FB563C(v24 + *(void *)(*(void *)(v25 - 8) + 72) * v16, v22, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v26 = *(void *)(a1 + 56);
    uint64_t v27 = sub_1C44967E8();
    uint64_t v28 = *(void *)(v27 - 8);
    unint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
    v29(v23, v26 + *(void *)(v28 + 72) * v16, v27);
    uint64_t v30 = v55;
    sub_1C3FB563C(v22, v55, (uint64_t (*)(void))type metadata accessor for Replica);
    v29((char *)(v30 + *(int *)(v60 + 48)), (uint64_t)v23, v27);
    uint64_t v31 = v30;
    uint64_t v32 = v51;
    uint64_t v33 = v56;
    sub_1C3F961BC(v31, v56, &qword_1EBBC0798);
    sub_1C3F962E0(v22, &qword_1EBBC0798);
    (*v50)(v32, v33, v8);
    sub_1C3F962E0(v33, &qword_1EBBC0798);
    uint64_t v13 = v61;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1C3FB5860(0, *(void *)(v13 + 16) + 1, 1);
      uint64_t v13 = v61;
    }
    uint64_t v34 = v52;
    a1 = v53;
    unint64_t v36 = *(void *)(v13 + 16);
    unint64_t v35 = *(void *)(v13 + 24);
    if (v36 >= v35 >> 1)
    {
      sub_1C3FB5860(v35 > 1, v36 + 1, 1);
      uint64_t v13 = v61;
    }
    *(void *)(v13 + 16) = v36 + 1;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v34 + 32))(v13+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(void *)(v34 + 72) * v36, v32, v8);
    uint64_t v61 = v13;
    char v19 = *(unsigned char *)(a1 + 32);
    unint64_t v20 = 1 << v19;
    if (v16 >= 1 << v19) {
      goto LABEL_29;
    }
    uint64_t v18 = v48;
    unint64_t v37 = v59;
    uint64_t v38 = *(void *)(v48 + 8 * v59);
    if ((v38 & v58) == 0) {
      goto LABEL_30;
    }
    LODWORD(v15) = v47;
    if (*(_DWORD *)(a1 + 36) != v47) {
      goto LABEL_31;
    }
    unint64_t v39 = v38 & (-2 << (v16 & 0x3F));
    if (v39)
    {
      unint64_t v20 = __clz(__rbit64(v39)) | v16 & 0xFFFFFFFFFFFFFFC0;
      int64_t v21 = v46;
    }
    else
    {
      unint64_t v40 = v59 + 1;
      unint64_t v41 = (v20 + 63) >> 6;
      int64_t v21 = v46;
      if (v59 + 1 < v41)
      {
        unint64_t v42 = *(void *)(v48 + 8 * v40);
        if (!v42)
        {
          unint64_t v40 = v59 + 2;
          if (v59 + 2 >= v41) {
            goto LABEL_4;
          }
          unint64_t v42 = *(void *)(v48 + 8 * v40);
          if (!v42)
          {
            while (v41 - 3 != v37)
            {
              unint64_t v42 = *(void *)(v44 + 8 * v37++);
              if (v42)
              {
                unint64_t v40 = v37 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        unint64_t v20 = __clz(__rbit64(v42)) + (v40 << 6);
      }
    }
LABEL_4:
    uint64_t v17 = v57 + 1;
    uint64_t v16 = v20;
    if (v57 + 1 == v21) {
      return v13;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_1C3FB563C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3FB56A4(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
  uint64_t v12 = *(void *)(a3(0) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = v5 + v14 + v13 * v10;
  unint64_t v16 = a1 + v14;
  uint64_t v17 = v13 * v4;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
  uint64_t v21 = *(void *)(v5 + 16);
  BOOL v22 = __OFADD__(v21, v4);
  uint64_t v23 = v21 + v4;
  if (!v22)
  {
    *(void *)(v5 + 16) = v23;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3FB5860(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C3FB5970(a1, a2, a3, (void *)*v3, &qword_1EBBC0388, MEMORY[0x1E4F27990]);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1C3FB589C(uint64_t a1)
{
  return sub_1C3FB56A4(a1, (uint64_t (*)(void))sub_1C3FA2EC0, MEMORY[0x1E4F27990]);
}

uint64_t sub_1C3FB58C8(void **a1)
{
  uint64_t v2 = *(void *)(sub_1C4496678() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_1C3FB5BB8(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  uint64_t result = sub_1C3FB5BEC(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_1C3FB5970(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  BOOL v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3FB5BB8(void *a1)
{
  return sub_1C3FB5BCC(0, a1[2], 0, a1);
}

uint64_t sub_1C3FB5BCC(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1C3FB5970(a1, a2, a3, a4, &qword_1EBBC0388, MEMORY[0x1E4F27990]);
}

uint64_t sub_1C3FB5BEC(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v192 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1C4496678();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v169 = (char *)&v166 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v181 = (char *)&v166 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v186 = (char *)&v166 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v184 = a1;
  uint64_t v185 = (char *)&v166 - v12;
  uint64_t v13 = a1[1];
  uint64_t result = sub_1C4498068();
  if (result >= v13)
  {
    if (v13 < 0) {
      goto LABEL_157;
    }
    if (v13) {
      return sub_1C3FB6A8C(0, v13, 1, v184);
    }
  }
  else
  {
    if (v13 >= 0) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = v13 + 1;
    }
    if (v13 < -1)
    {
      uint64_t result = sub_1C4497F48();
      __break(1u);
    }
    else
    {
      uint64_t v167 = result;
      uint64_t v173 = v5;
      if (v13 >= 2)
      {
        uint64_t v16 = v15 >> 1;
        uint64_t v17 = sub_1C4497488();
        *(void *)(v17 + 16) = v16;
        unint64_t v18 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
        uint64_t v166 = v17;
        unint64_t v172 = v17 + v18;
        goto LABEL_12;
      }
      uint64_t v19 = (char *)MEMORY[0x1E4FBC860];
      unint64_t v172 = MEMORY[0x1E4FBC860]
           + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      uint64_t v166 = MEMORY[0x1E4FBC860];
      if (v13 == 1)
      {
LABEL_12:
        unint64_t v20 = 0;
        uint64_t v178 = (void (**)(char *, uint64_t))(v5 + 8);
        uint64_t v179 = v5 + 16;
        uint64_t v182 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
        uint64_t v19 = (char *)MEMORY[0x1E4FBC860];
        uint64_t v187 = v4;
        while (1)
        {
          uint64_t v22 = (uint64_t)v20;
          uint64_t v23 = v13;
          if ((uint64_t)(v20 + 1) >= v13)
          {
            uint64_t v44 = (uint64_t)(v20 + 1);
          }
          else
          {
            uint64_t v177 = v13;
            uint64_t v24 = *v184;
            uint64_t v170 = v24;
            uint64_t v25 = *(void *)(v173 + 72);
            uint64_t v175 = (uint64_t)(v20 + 1);
            uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v173 + 16);
            uint64_t v27 = v20;
            v26(v185, v24 + v25 * (void)(v20 + 1), v4);
            uint64_t v171 = v27;
            uint64_t v183 = v25;
            uint64_t v180 = v26;
            v26(v186, v24 + v25 * (void)v27, v4);
            unint64_t v190 = sub_1C4496658();
            LOWORD(v191) = v28;
            BYTE2(v191) = v29;
            BYTE3(v191) = v30;
            BYTE4(v191) = v31;
            BYTE5(v191) = v32;
            BYTE6(v191) = v33;
            HIBYTE(v191) = v34;
            unint64_t v188 = sub_1C4496658();
            LOWORD(v189) = v35;
            BYTE2(v189) = v36;
            BYTE3(v189) = v37;
            BYTE4(v189) = v38;
            BYTE5(v189) = v39;
            BYTE6(v189) = v40;
            HIBYTE(v189) = v41;
            unint64_t v42 = bswap64(v190);
            unint64_t v43 = bswap64(v188);
            if (v42 == v43 && (v42 = bswap64(v191), unint64_t v43 = bswap64(v189), v42 == v43))
            {
              LODWORD(v176) = 0;
              uint64_t v22 = (uint64_t)v171;
              uint64_t v23 = v177;
            }
            else
            {
              uint64_t v22 = (uint64_t)v171;
              uint64_t v23 = v177;
              if (v42 < v43) {
                int v45 = -1;
              }
              else {
                int v45 = 1;
              }
              LODWORD(v176) = v45;
            }
            int64_t v46 = *v178;
            (*v178)(v186, v4);
            v46(v185, v4);
            uint64_t v44 = v22 + 2;
            if (v22 + 2 < v23)
            {
              uint64_t v168 = v19;
              v175 *= v183;
              uint64_t v47 = v170;
              uint64_t v174 = v183 * v44;
              while (1)
              {
                uint64_t v48 = v44;
                uint64_t v49 = v180;
                v180(v185, v47 + v174, v4);
                v49(v186, v47 + v175, v4);
                unint64_t v190 = sub_1C4496658();
                LOWORD(v191) = v50;
                BYTE2(v191) = v51;
                BYTE3(v191) = v52;
                BYTE4(v191) = v53;
                BYTE5(v191) = v54;
                BYTE6(v191) = v55;
                HIBYTE(v191) = v56;
                unint64_t v188 = sub_1C4496658();
                LOWORD(v189) = v57;
                BYTE2(v189) = v58;
                BYTE3(v189) = v59;
                BYTE4(v189) = v60;
                BYTE5(v189) = v61;
                BYTE6(v189) = v62;
                HIBYTE(v189) = v63;
                unint64_t v64 = bswap64(v190);
                unint64_t v65 = bswap64(v188);
                if (v64 != v65) {
                  goto LABEL_29;
                }
                unint64_t v64 = bswap64(v191);
                unint64_t v65 = bswap64(v189);
                if (v64 == v65) {
                  int v66 = 0;
                }
                else {
LABEL_29:
                }
                  int v66 = v64 < v65 ? -1 : 1;
                v46(v186, v4);
                v46(v185, v4);
                if (((v66 ^ v176) & 0x80000000) != 0) {
                  break;
                }
                ++v44;
                v47 += v183;
                uint64_t v23 = v177;
                if (v177 == v48 + 1)
                {
                  uint64_t v44 = v177;
                  uint64_t v19 = v168;
                  uint64_t v22 = (uint64_t)v171;
                  goto LABEL_36;
                }
              }
              uint64_t v19 = v168;
              uint64_t v22 = (uint64_t)v171;
              uint64_t v23 = v177;
            }
LABEL_36:
            uint64_t v67 = v170;
            if ((v176 & 0x80000000) != 0)
            {
              if (v44 < v22) {
                goto LABEL_160;
              }
              if (v22 < v44)
              {
                uint64_t v168 = v19;
                uint64_t v68 = v44;
                uint64_t v69 = 0;
                uint64_t v70 = v183 * (v68 - 1);
                uint64_t v71 = v68 * v183;
                uint64_t v72 = v22 * v183;
                uint64_t v180 = (void (*)(char *, uint64_t, uint64_t))v68;
                do
                {
                  if (v22 != v68 + v69 - 1)
                  {
                    if (!v67) {
                      goto LABEL_163;
                    }
                    uint64_t v74 = v67 + v70;
                    uint64_t v176 = *v182;
                    v176(v169, v67 + v72, v187);
                    if (v72 < v70 || v67 + v72 >= (unint64_t)(v67 + v71))
                    {
                      uint64_t v73 = v187;
                      swift_arrayInitWithTakeFrontToBack();
                    }
                    else
                    {
                      uint64_t v73 = v187;
                      if (v72 != v70) {
                        swift_arrayInitWithTakeBackToFront();
                      }
                    }
                    v176((char *)v74, (uint64_t)v169, v73);
                    uint64_t v4 = v73;
                    uint64_t v67 = v170;
                  }
                  ++v22;
                  --v69;
                  uint64_t v68 = (uint64_t)v180;
                  v70 -= v183;
                  v71 -= v183;
                  v72 += v183;
                }
                while (v22 < (uint64_t)v180 + v69);
                uint64_t v19 = v168;
                uint64_t v44 = (uint64_t)v180;
                uint64_t v22 = (uint64_t)v171;
                uint64_t v23 = v177;
              }
            }
          }
          if (v44 < v23)
          {
            if (__OFSUB__(v44, v22)) {
              goto LABEL_156;
            }
            if (v44 - v22 < v167)
            {
              if (__OFADD__(v22, v167)) {
                goto LABEL_158;
              }
              if (v22 + v167 >= v23) {
                uint64_t v75 = v23;
              }
              else {
                uint64_t v75 = v22 + v167;
              }
              if (v75 < v22)
              {
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
              }
              if (v44 != v75)
              {
                uint64_t v171 = (char *)v22;
                uint64_t v168 = v19;
                uint64_t v76 = *(void (**)(char *, uint64_t, uint64_t))(v173 + 72);
                uint64_t v77 = *(char **)(v173 + 16);
                uint64_t v174 = v2;
                uint64_t v175 = (uint64_t)v77;
                uint64_t v183 = (void)v76 * (v44 - 1);
                uint64_t v176 = v76;
                uint64_t v78 = v44 * (void)v76;
                uint64_t v170 = v75;
                do
                {
                  uint64_t v80 = 0;
                  char v81 = v171;
                  uint64_t v180 = (void (*)(char *, uint64_t, uint64_t))v44;
                  uint64_t v177 = v78;
                  while (1)
                  {
                    uint64_t v82 = *v184;
                    uint64_t v83 = v78 + v80 + *v184;
                    uint64_t v84 = (void (*)(char *, uint64_t, uint64_t))v175;
                    ((void (*)(char *, uint64_t, uint64_t))v175)(v185, v83, v4);
                    v84(v186, v183 + v80 + v82, v4);
                    unint64_t v190 = sub_1C4496658();
                    LOWORD(v191) = v85;
                    BYTE2(v191) = v86;
                    BYTE3(v191) = v87;
                    BYTE4(v191) = v88;
                    BYTE5(v191) = v89;
                    BYTE6(v191) = v90;
                    HIBYTE(v191) = v91;
                    unint64_t v188 = sub_1C4496658();
                    LOWORD(v189) = v92;
                    BYTE2(v189) = v93;
                    BYTE3(v189) = v94;
                    BYTE4(v189) = v95;
                    BYTE5(v189) = v96;
                    BYTE6(v189) = v97;
                    HIBYTE(v189) = v98;
                    unint64_t v99 = bswap64(v190);
                    unint64_t v100 = bswap64(v188);
                    if (v99 != v100) {
                      goto LABEL_67;
                    }
                    unint64_t v99 = bswap64(v191);
                    unint64_t v100 = bswap64(v189);
                    if (v99 == v100)
                    {
                      int v101 = 0;
                      uint64_t v78 = v177;
                    }
                    else
                    {
LABEL_67:
                      uint64_t v78 = v177;
                      int v101 = v99 < v100 ? -1 : 1;
                    }
                    unint64_t v102 = *v178;
                    uint64_t v103 = v187;
                    (*v178)(v186, v187);
                    v102(v185, v103);
                    if ((v101 & 0x80000000) == 0) {
                      break;
                    }
                    uint64_t v104 = *v184;
                    if (!*v184) {
                      goto LABEL_161;
                    }
                    int64_t v105 = (char *)(v104 + v183 + v80);
                    uint64_t v106 = *v182;
                    uint64_t v107 = v187;
                    (*v182)(v181, v104 + v78 + v80, v187);
                    uint64_t v4 = v107;
                    swift_arrayInitWithTakeFrontToBack();
                    v106(v105, (uint64_t)v181, v107);
                    v80 -= (uint64_t)v176;
                    ++v81;
                    uint64_t v79 = v180;
                    if ((char *)v180 == v81) {
                      goto LABEL_61;
                    }
                  }
                  uint64_t v4 = v187;
                  uint64_t v79 = v180;
LABEL_61:
                  uint64_t v44 = (uint64_t)v79 + 1;
                  v183 += (uint64_t)v176;
                  v78 += (uint64_t)v176;
                }
                while (v44 != v170);
                uint64_t v44 = v170;
                uint64_t v2 = v174;
                uint64_t v19 = v168;
                uint64_t v22 = (uint64_t)v171;
              }
            }
          }
          if (v44 < v22) {
            goto LABEL_151;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v19 = sub_1C411E2A8(0, *((void *)v19 + 2) + 1, 1, v19);
          }
          unint64_t v109 = *((void *)v19 + 2);
          unint64_t v108 = *((void *)v19 + 3);
          unint64_t v21 = v109 + 1;
          uint64_t v180 = (void (*)(char *, uint64_t, uint64_t))v44;
          if (v109 >= v108 >> 1) {
            uint64_t v19 = sub_1C411E2A8((char *)(v108 > 1), v109 + 1, 1, v19);
          }
          uint64_t v174 = v2;
          *((void *)v19 + 2) = v21;
          unint64_t v110 = v19 + 32;
          uint64_t v111 = &v19[16 * v109 + 32];
          uint64_t v112 = v180;
          *(void *)uint64_t v111 = v22;
          *((void *)v111 + 1) = v112;
          if (v109) {
            break;
          }
          unint64_t v21 = 1;
LABEL_14:
          uint64_t v13 = v184[1];
          unint64_t v20 = (char *)v180;
          uint64_t v2 = v174;
          if ((uint64_t)v180 >= v13) {
            goto LABEL_123;
          }
        }
        while (1)
        {
          unint64_t v113 = v21 - 1;
          if (v21 >= 4)
          {
            unint64_t v118 = &v110[16 * v21];
            uint64_t v119 = *((void *)v118 - 8);
            uint64_t v120 = *((void *)v118 - 7);
            BOOL v124 = __OFSUB__(v120, v119);
            uint64_t v121 = v120 - v119;
            if (v124) {
              goto LABEL_140;
            }
            uint64_t v123 = *((void *)v118 - 6);
            uint64_t v122 = *((void *)v118 - 5);
            BOOL v124 = __OFSUB__(v122, v123);
            uint64_t v116 = v122 - v123;
            char v117 = v124;
            if (v124) {
              goto LABEL_141;
            }
            unint64_t v125 = v21 - 2;
            uint64_t v126 = &v110[16 * v21 - 32];
            uint64_t v128 = *(void *)v126;
            uint64_t v127 = *((void *)v126 + 1);
            BOOL v124 = __OFSUB__(v127, v128);
            uint64_t v129 = v127 - v128;
            if (v124) {
              goto LABEL_143;
            }
            BOOL v124 = __OFADD__(v116, v129);
            uint64_t v130 = v116 + v129;
            if (v124) {
              goto LABEL_146;
            }
            if (v130 >= v121)
            {
              uint64_t v148 = &v110[16 * v113];
              uint64_t v150 = *(void *)v148;
              uint64_t v149 = *((void *)v148 + 1);
              BOOL v124 = __OFSUB__(v149, v150);
              uint64_t v151 = v149 - v150;
              if (v124) {
                goto LABEL_150;
              }
              BOOL v141 = v116 < v151;
              goto LABEL_111;
            }
          }
          else
          {
            if (v21 != 3)
            {
              uint64_t v142 = *((void *)v19 + 4);
              uint64_t v143 = *((void *)v19 + 5);
              BOOL v124 = __OFSUB__(v143, v142);
              uint64_t v135 = v143 - v142;
              char v136 = v124;
              goto LABEL_105;
            }
            uint64_t v115 = *((void *)v19 + 4);
            uint64_t v114 = *((void *)v19 + 5);
            BOOL v124 = __OFSUB__(v114, v115);
            uint64_t v116 = v114 - v115;
            char v117 = v124;
          }
          if (v117) {
            goto LABEL_142;
          }
          unint64_t v125 = v21 - 2;
          BOOL v131 = &v110[16 * v21 - 32];
          uint64_t v133 = *(void *)v131;
          uint64_t v132 = *((void *)v131 + 1);
          BOOL v134 = __OFSUB__(v132, v133);
          uint64_t v135 = v132 - v133;
          char v136 = v134;
          if (v134) {
            goto LABEL_145;
          }
          uint64_t v137 = &v110[16 * v113];
          uint64_t v139 = *(void *)v137;
          uint64_t v138 = *((void *)v137 + 1);
          BOOL v124 = __OFSUB__(v138, v139);
          uint64_t v140 = v138 - v139;
          if (v124) {
            goto LABEL_148;
          }
          if (__OFADD__(v135, v140)) {
            goto LABEL_149;
          }
          if (v135 + v140 >= v116)
          {
            BOOL v141 = v116 < v140;
LABEL_111:
            if (v141) {
              unint64_t v113 = v125;
            }
            goto LABEL_113;
          }
LABEL_105:
          if (v136) {
            goto LABEL_144;
          }
          uint64_t v144 = &v110[16 * v113];
          uint64_t v146 = *(void *)v144;
          uint64_t v145 = *((void *)v144 + 1);
          BOOL v124 = __OFSUB__(v145, v146);
          uint64_t v147 = v145 - v146;
          if (v124) {
            goto LABEL_147;
          }
          if (v147 < v135) {
            goto LABEL_14;
          }
LABEL_113:
          unint64_t v152 = v113 - 1;
          if (v113 - 1 >= v21)
          {
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
            goto LABEL_159;
          }
          if (!*v184) {
            goto LABEL_162;
          }
          uint64_t v153 = v19;
          int v154 = &v110[16 * v152];
          uint64_t v155 = *(void *)v154;
          uint64_t v156 = &v110[16 * v113];
          uint64_t v157 = *((void *)v156 + 1);
          uint64_t v158 = v174;
          sub_1C447F608(*v184 + *(void *)(v173 + 72) * *(void *)v154, *v184 + *(void *)(v173 + 72) * *(void *)v156, *v184 + *(void *)(v173 + 72) * v157, v172);
          uint64_t v174 = v158;
          if (v158) {
            goto LABEL_134;
          }
          if (v157 < v155) {
            goto LABEL_137;
          }
          if (v113 > *((void *)v153 + 2)) {
            goto LABEL_138;
          }
          *(void *)int v154 = v155;
          *(void *)&v110[16 * v152 + 8] = v157;
          unint64_t v159 = *((void *)v153 + 2);
          if (v113 >= v159) {
            goto LABEL_139;
          }
          uint64_t v19 = v153;
          unint64_t v21 = v159 - 1;
          memmove(&v110[16 * v113], v156 + 16, 16 * (v159 - 1 - v113));
          *((void *)v153 + 2) = v159 - 1;
          uint64_t v4 = v187;
          if (v159 <= 2) {
            goto LABEL_14;
          }
        }
      }
      unint64_t v21 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_123:
      if (v21 >= 2)
      {
        uint64_t v160 = *v184;
        do
        {
          unint64_t v161 = v21 - 2;
          if (v21 < 2) {
            goto LABEL_152;
          }
          if (!v160) {
            goto LABEL_164;
          }
          uint64_t v162 = *(void *)&v19[16 * v161 + 32];
          uint64_t v163 = *(void *)&v19[16 * v21 + 24];
          sub_1C447F608(v160 + *(void *)(v173 + 72) * v162, v160 + *(void *)(v173 + 72) * *(void *)&v19[16 * v21 + 16], v160 + *(void *)(v173 + 72) * v163, v172);
          if (v2) {
            break;
          }
          if (v163 < v162) {
            goto LABEL_153;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v19 = sub_1C411E87C((uint64_t)v19);
          }
          if (v161 >= *((void *)v19 + 2)) {
            goto LABEL_154;
          }
          uint64_t v164 = &v19[16 * v161 + 32];
          *(void *)uint64_t v164 = v162;
          *((void *)v164 + 1) = v163;
          unint64_t v165 = *((void *)v19 + 2);
          if (v21 > v165) {
            goto LABEL_155;
          }
          memmove(&v19[16 * v21 + 16], &v19[16 * v21 + 32], 16 * (v165 - v21));
          *((void *)v19 + 2) = v165 - 1;
          unint64_t v21 = v165 - 1;
        }
        while (v165 > 2);
      }
LABEL_134:
      swift_bridgeObjectRelease();
      *(void *)(v166 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1C3FB6A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v46 = a1;
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = sub_1C4496678();
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  char v54 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  char v58 = (char *)&v44 - v11;
  uint64_t result = MEMORY[0x1F4188790](v10);
  __int16 v57 = (char *)&v44 - v14;
  uint64_t v52 = a3;
  uint64_t v45 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    uint64_t v15 = v13 + 16;
    uint64_t v17 = *(void *)(v15 + 56);
    uint64_t v47 = (void (**)(char *, uint64_t))(v15 - 8);
    uint64_t v48 = v16;
    uint64_t v49 = v15;
    uint64_t v50 = v17;
    char v53 = (void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v59 = v17 * (v52 - 1);
    uint64_t v18 = v17 * v52;
    do
    {
      uint64_t v19 = 0;
      uint64_t v20 = v46;
      uint64_t v51 = v18;
      do
      {
        uint64_t v21 = *a4;
        uint64_t v56 = v18 + v19;
        uint64_t v22 = v48;
        v48(v57, v18 + v19 + v21, v7);
        uint64_t v55 = v59 + v19;
        v22(v58, v59 + v19 + v21, v7);
        unint64_t v62 = sub_1C4496658();
        LOWORD(v63) = v23;
        BYTE2(v63) = v24;
        BYTE3(v63) = v25;
        BYTE4(v63) = v26;
        BYTE5(v63) = v27;
        BYTE6(v63) = v28;
        HIBYTE(v63) = v29;
        unint64_t v60 = sub_1C4496658();
        LOWORD(v61) = v30;
        BYTE2(v61) = v31;
        BYTE3(v61) = v32;
        BYTE4(v61) = v33;
        BYTE5(v61) = v34;
        BYTE6(v61) = v35;
        HIBYTE(v61) = v36;
        unint64_t v37 = bswap64(v62);
        unint64_t v38 = bswap64(v60);
        if (v37 == v38 && (unint64_t v37 = bswap64(v63), v38 = bswap64(v61), v37 == v38))
        {
          int v39 = 0;
          uint64_t v18 = v51;
        }
        else
        {
          uint64_t v18 = v51;
          if (v37 < v38) {
            int v39 = -1;
          }
          else {
            int v39 = 1;
          }
        }
        char v40 = *v47;
        (*v47)(v58, v7);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v40)(v57, v7);
        if ((v39 & 0x80000000) == 0) {
          break;
        }
        uint64_t v41 = *a4;
        if (!*a4) {
          __break(1u);
        }
        uint64_t v42 = v41 + v59 + v19;
        unint64_t v43 = *v53;
        (*v53)(v54, v41 + v18 + v19, v7);
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v43)(v42, v54, v7);
        v19 -= v50;
        ++v20;
      }
      while (v52 != v20);
      v59 += v50;
      v18 += v50;
      ++v52;
    }
    while (v52 != v45);
  }
  return result;
}

uint64_t sub_1C3FB6E8C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 88);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1C3FB6F2C(void *a1, uint64_t a2)
{
  if (*a1)
  {
    sub_1C3FAAC94((uint64_t)a1, (uint64_t)v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1C3FB7014((uint64_t)v7, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v6;
    swift_bridgeObjectRelease();
    return sub_1C3FB76F8(a2, (uint64_t (*)(void))type metadata accessor for Replica);
  }
  else
  {
    sub_1C3F962E0((uint64_t)a1, qword_1EBBBEE40);
    sub_1C4116AA8(a2, v7);
    sub_1C3FB76F8(a2, (uint64_t (*)(void))type metadata accessor for Replica);
    return sub_1C3F962E0((uint64_t)v7, qword_1EBBBEE40);
  }
}

uint64_t sub_1C3FB7014(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for Replica();
  MEMORY[0x1F4188790](v8);
  unint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (void *)*v3;
  unint64_t v13 = sub_1C3F8F160(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 < v16 || (a3 & 1) == 0)
  {
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_1C4067C04();
      goto LABEL_7;
    }
    sub_1C3FB7274(v16, a3 & 1);
    unint64_t v22 = sub_1C3F8F160(a2);
    if ((v17 & 1) == (v23 & 1))
    {
      unint64_t v13 = v22;
      uint64_t v19 = *v4;
      if (v17) {
        goto LABEL_8;
      }
LABEL_13:
      sub_1C3FB7828(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Replica);
      return sub_1C3FB71B8(v13, (uint64_t)v10, a1, v19);
    }
LABEL_15:
    uint64_t result = sub_1C4498558();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v19 = *v4;
  if ((v17 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v20 = v19[7] + 16 * v13;
  return sub_1C4423380(a1, v20);
}

uint64_t sub_1C3FB71B8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for Replica();
  sub_1C3F8AF80(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for Replica);
  uint64_t result = sub_1C3FAAC94(a3, a4[7] + 16 * a1);
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_1C3FB7274(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for Replica();
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  MEMORY[0x1F4188790](v5);
  unint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF190);
  int v39 = a2;
  uint64_t v9 = sub_1C4497FC8();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    char v36 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    BOOL v12 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & *(void *)(v8 + 64);
    int64_t v15 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v16 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    while (1)
    {
      if (v14)
      {
        unint64_t v20 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        if (__OFADD__(v18++, 1)) {
          goto LABEL_39;
        }
        if (v18 >= v15)
        {
LABEL_32:
          swift_release();
          uint64_t v3 = v36;
          if (v39)
          {
            uint64_t v34 = 1 << *(unsigned char *)(v8 + 32);
            if (v34 >= 64) {
              bzero((void *)(v8 + 64), ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            }
            else {
              *BOOL v12 = -1 << v34;
            }
            *(void *)(v8 + 16) = 0;
          }
          break;
        }
        unint64_t v23 = v12[v18];
        if (!v23)
        {
          int64_t v24 = v18 + 1;
          if (v18 + 1 >= v15) {
            goto LABEL_32;
          }
          unint64_t v23 = v12[v24];
          if (!v23)
          {
            while (1)
            {
              int64_t v18 = v24 + 1;
              if (__OFADD__(v24, 1)) {
                break;
              }
              if (v18 >= v15) {
                goto LABEL_32;
              }
              unint64_t v23 = v12[v18];
              ++v24;
              if (v23) {
                goto LABEL_19;
              }
            }
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
            return result;
          }
          ++v18;
        }
LABEL_19:
        unint64_t v14 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v37 + 72);
      uint64_t v26 = *(void *)(v8 + 48) + v25 * v21;
      if (v39)
      {
        sub_1C3F8F748(v26, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Replica);
        sub_1C3FAAC94(*(void *)(v8 + 56) + 16 * v21, (uint64_t)v40);
      }
      else
      {
        sub_1C3F8F450(v26, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Replica);
        sub_1C3FAA63C(*(void *)(v8 + 56) + 16 * v21, (uint64_t)v40);
      }
      sub_1C44985F8();
      sub_1C4496638();
      sub_1C4498608();
      uint64_t result = sub_1C4498628();
      uint64_t v27 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v16 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v28) & ~*(void *)(v16 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v16 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v19 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      sub_1C3F8F748((uint64_t)v7, *(void *)(v10 + 48) + v25 * v19, (uint64_t (*)(void))type metadata accessor for Replica);
      uint64_t result = sub_1C3FAAC94((uint64_t)v40, *(void *)(v10 + 56) + 16 * v19);
      ++*(void *)(v10 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_1C3FB7638(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3FB7698(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3FB76F8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C3FB7758(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3FB77C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3FB7828(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3FB7890(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  BOOL v12 = (char *)&v17 - v11;
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13(v10, a1, v6);
  swift_beginAccess();
  sub_1C3FB7A90((uint64_t)v12, v10);
  swift_endAccess();
  unint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v12, v6);
  v13(v12, a1, v6);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *(void *)(v3 + 120);
  *(void *)(v3 + 120) = 0x8000000000000000;
  sub_1C3FB7A64(a2, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 120) = v17;
  swift_bridgeObjectRelease();
  v14(v12, v6);
  return swift_endAccess();
}

uint64_t sub_1C3FB7A64(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1C3FA13E4(a1, a2, a3, (uint64_t (*)(void))sub_1C4067E90, (void (*)(void))sub_1C4062AE8);
}

uint64_t sub_1C3FB7A90(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1C3FA180C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = sub_1C4497078();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    unint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      unint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1C3FA180C((unint64_t *)&qword_1EBBBF220, MEMORY[0x1E4F27990]);
      char v21 = sub_1C4497178();
      unint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1C3FB7DB4((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_1C3FB7DB4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = sub_1C4496678();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  unint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1C4070910();
  }
  else
  {
    if (v11 > v10)
    {
      sub_1C40763BC(MEMORY[0x1E4F27990], &qword_1EBBBC6B8);
      goto LABEL_12;
    }
    sub_1C3FB8070();
  }
  uint64_t v12 = *v3;
  sub_1C3FA180C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
  uint64_t v13 = sub_1C4497078();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    unint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_1C3FA180C((unint64_t *)&qword_1EBBBF220, MEMORY[0x1E4F27990]);
      char v21 = sub_1C4497178();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = sub_1C4498548();
  __break(1u);
  return result;
}

uint64_t sub_1C3FB8070()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_1C4496678();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC6B8);
  uint64_t v7 = sub_1C4497CE8();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *unint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  uint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1C3FA180C((unint64_t *)&qword_1EBBBF868, MEMORY[0x1E4F27990]);
    uint64_t result = sub_1C4497078();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1C3FB8420(uint64_t a1)
{
  uint64_t v3 = sub_1C4496678();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  swift_beginAccess();
  uint64_t v7 = *(void *)(v1 + 120);
  if (*(void *)(v7 + 16) && (unint64_t v8 = sub_1C3FA1598((uint64_t)v6), (v9 & 1) != 0)) {
    uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
  }
  else {
    uint64_t v10 = 0;
  }
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v10;
}

uint64_t sub_1C3FB8550()
{
  uint64_t result = sub_1C4496908();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          swift_beginAccess();
          type metadata accessor for Proto_Timestamp(0);
          sub_1C3F7251C(&qword_1EBBC06F0, (void (*)(uint64_t))type metadata accessor for Proto_Timestamp);
          goto LABEL_5;
        case 2:
          swift_beginAccess();
          type metadata accessor for Proto_Value(0);
          sub_1C3F7251C(&qword_1EBBBF8E0, (void (*)(uint64_t))type metadata accessor for Proto_Value);
          goto LABEL_5;
        case 3:
        case 4:
          swift_beginAccess();
          type metadata accessor for Proto_CRDT(0);
          sub_1C3F7251C(&qword_1EBBC0680, (void (*)(uint64_t))type metadata accessor for Proto_CRDT);
LABEL_5:
          sub_1C4496A78();
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t result = sub_1C4496908();
    }
  }
  return result;
}

uint64_t type metadata accessor for Proto_Register._StorageClass(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBF260);
}

uint64_t sub_1C3FB87F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v26 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v28 = (uint64_t)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0620);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v1 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  uint64_t v12 = type metadata accessor for Proto_Timestamp(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = v1 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  uint64_t v14 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = v1 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
  uint64_t v27 = v1;
  uint64_t v16 = type metadata accessor for Proto_CRDT(0);
  unint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  v17(v15, 1, 1, v16);
  uint64_t v18 = v2 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__partialCrdt;
  v17(v2 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__partialCrdt, 1, 1, v16);
  uint64_t v19 = v26;
  uint64_t v20 = v26 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__timestamp;
  swift_beginAccess();
  sub_1C3F970C4(v20, (uint64_t)v10, &qword_1EBBC0620);
  swift_beginAccess();
  sub_1C3F98338((uint64_t)v10, v11, &qword_1EBBC0620);
  swift_endAccess();
  uint64_t v21 = v19 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1C3F970C4(v21, (uint64_t)v7, &qword_1EBBC0540);
  swift_beginAccess();
  sub_1C3F98338((uint64_t)v7, v13, &qword_1EBBC0540);
  swift_endAccess();
  uint64_t v22 = v19 + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__crdt;
  swift_beginAccess();
  uint64_t v23 = v28;
  sub_1C3F970C4(v22, v28, &qword_1EBBC04F8);
  swift_beginAccess();
  sub_1C3F98338(v23, v15, &qword_1EBBC04F8);
  swift_endAccess();
  uint64_t v24 = v19
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__partialCrdt;
  swift_beginAccess();
  sub_1C3F970C4(v24, v23, &qword_1EBBC04F8);
  swift_release();
  swift_beginAccess();
  sub_1C3F98338(v23, v18, &qword_1EBBC04F8);
  swift_endAccess();
  return v27;
}

uint64_t sub_1C3FB8BD4(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 264);
  uint64_t v6 = sub_1C4497B38();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = (uint64_t)v1 + *(void *)(v3 + 280);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t v11 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v5);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)(v4 + 272) + 16) + 8) + 16))(a1, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v9, v5);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CRStruct_2.decode(fields:)(Swift::OpaquePointer fields)
{
  uint64_t v4 = v3;
  uint64_t v5 = v1;
  uint64_t v7 = *(void *)(v2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v33 = (char *)&v26 - v8;
  uint64_t v9 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v9);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 48))(v35, v5, v7);
  uint64_t v10 = v35[1];
  uint64_t v11 = v35[4];
  if (!*((void *)fields._rawValue + 2)) {
    goto LABEL_12;
  }
  uint64_t v36 = v35[2];
  uint64_t v34 = v35[5];
  uint64_t v12 = v35[0];
  uint64_t v31 = v35[3];
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_1C3FB9894(v12, v10);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (*((void *)fields._rawValue + 2)) {
      goto LABEL_6;
    }
LABEL_12:
    swift_release();
    goto LABEL_13;
  }
  uint64_t v29 = v11;
  uint64_t v15 = *((void *)fields._rawValue + 7);
  rawValue = fields._rawValue;
  uint64_t v16 = *(void *)(v15 + 8 * v13);
  swift_retain();
  uint64_t v30 = v10;
  swift_bridgeObjectRelease();
  uint64_t v17 = v4;
  uint64_t v18 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 16) + 8);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 8);
  swift_retain();
  swift_retain();
  v28(v16, v9, v18);
  uint64_t v4 = v17;
  if (v17)
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n();
    return;
  }
  swift_setAtWritableKeyPath();
  swift_release();
  swift_release();
  uint64_t v11 = v29;
  uint64_t v10 = v30;
  fields._rawValue = rawValue;
  if (!rawValue[2]) {
    goto LABEL_12;
  }
LABEL_6:
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_1C3FB9894(v31, v11);
  if (v20)
  {
    uint64_t v30 = v10;
    uint64_t v21 = *(void *)(*((void *)fields._rawValue + 7) + 8 * v19);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v22 = AssociatedTypeWitness;
    uint64_t v23 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 16) + 8);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 8);
    swift_retain();
    uint64_t v25 = v34;
    swift_retain();
    v24(v21, v22, v23);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v36 = v25;
      goto LABEL_9;
    }
    swift_setAtWritableKeyPath();
    swift_release();
    swift_release_n();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_13:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t sub_1C3FB9190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(void *, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v67 = a5;
  uint64_t v7 = v6;
  uint64_t v80 = a2;
  uint64_t v12 = type metadata accessor for Proto_CRDT(0);
  uint64_t v78 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v77 = (uint64_t)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = a4;
  uint64_t v18 = *(void *)(*(void *)(a4 + 8) + 8);
  (*(void (**)(uint64_t, uint64_t))(v18 + 48))(a3, v18);
  uint64_t v68 = v15;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a6, v17, a3);
  uint64_t v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(a3, v18);
  uint64_t v81 = a1;
  uint64_t v20 = *(void *)a1;
  uint64_t v76 = *(void *)(*(void *)a1 + 16);
  if (!v76)
  {
    uint64_t v22 = (void *)MEMORY[0x1E4FBC868];
LABEL_49:
    swift_bridgeObjectRelease();
    v67(v22, a3, v66);
    if (v7)
    {
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(a6, a3);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
    return sub_1C3F923BC(v81, type metadata accessor for Proto_Struct);
  }
  uint64_t v70 = a6;
  uint64_t v71 = a3;
  uint64_t v72 = v6;
  uint64_t v75 = v20 + 32;
  uint64_t v69 = v18 + 40;
  swift_bridgeObjectRetain();
  unint64_t v21 = 0;
  unint64_t v65 = v19 + 9;
  uint64_t v22 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v73 = v20;
  uint64_t v74 = v19;
  uint64_t v79 = v18;
  while (1)
  {
    if (v21 >= *(void *)(v20 + 16))
    {
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    uint64_t v24 = *(void *)(v81 + 8);
    if (v21 >= *(void *)(v24 + 16)) {
      goto LABEL_55;
    }
    unint64_t v25 = *(void *)(v75 + 8 * v21);
    uint64_t v26 = v77;
    sub_1C3FB9FB4(v24+ ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))+ *(void *)(v78 + 72) * v21, v77);
    type metadata accessor for CRDecoder(0);
    swift_allocObject();
    uint64_t v27 = v80;
    swift_retain();
    uint64_t v28 = sub_1C3FB9A38(v26, v27);
    swift_release();
    uint64_t v29 = *(void *)(v28 + 32);
    unint64_t v30 = *(void *)(v29 + 16);
    if (v30) {
      BOOL v31 = v25 >= v30;
    }
    else {
      BOOL v31 = 1;
    }
    if (v31)
    {
      sub_1C3FE3FF0();
      swift_allocError();
      *(_OWORD *)uint64_t v62 = xmmword_1C449B6C0;
      *(unsigned char *)(v62 + 16) = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v70, v71);
      return sub_1C3F923BC(v81, type metadata accessor for Proto_Struct);
    }
    uint64_t v32 = v29 + 16 * v25;
    uint64_t v33 = *(void *)(v32 + 32);
    uint64_t v34 = *(void *)(v32 + 40);
    uint64_t v35 = v19[2];
    if (!v35) {
      goto LABEL_28;
    }
    BOOL v36 = v19[4] == v33 && v19[5] == v34;
    if (!v36 && (sub_1C44982E8() & 1) == 0)
    {
      if (v35 == 1) {
        goto LABEL_28;
      }
      BOOL v57 = v19[6] == v33 && v19[7] == v34;
      if (!v57 && (sub_1C44982E8() & 1) == 0) {
        break;
      }
    }
LABEL_18:
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v83[0] = v22;
    unint64_t v39 = sub_1C3FB9894(v33, v34);
    uint64_t v40 = v22[2];
    BOOL v41 = (v38 & 1) == 0;
    uint64_t v42 = v40 + v41;
    if (__OFADD__(v40, v41)) {
      goto LABEL_56;
    }
    char v43 = v38;
    if (v22[3] >= v42)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1C4068D50();
      }
    }
    else
    {
      sub_1C3FB9C9C(v42, isUniquelyReferenced_nonNull_native);
      uint64_t v44 = sub_1C3FB9894(v33, v34);
      if ((v43 & 1) != (v45 & 1)) {
        goto LABEL_59;
      }
      unint64_t v39 = v44;
    }
    uint64_t v18 = v79;
    uint64_t v22 = (void *)v83[0];
    if (v43)
    {
      uint64_t v23 = *(void *)(v83[0] + 56);
      swift_release();
      *(void *)(v23 + 8 * v39) = v28;
    }
    else
    {
      *(void *)(v83[0] + 8 * (v39 >> 6) + 64) |= 1 << v39;
      uint64_t v46 = (uint64_t *)(v22[6] + 16 * v39);
      *uint64_t v46 = v33;
      v46[1] = v34;
      *(void *)(v22[7] + 8 * v39) = v28;
      uint64_t v47 = v22[2];
      BOOL v48 = __OFADD__(v47, 1);
      uint64_t v49 = v47 + 1;
      if (v48) {
        goto LABEL_57;
      }
      void v22[2] = v49;
      swift_bridgeObjectRetain();
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v20 = v73;
    uint64_t v19 = v74;
    if (++v21 == v76)
    {
      swift_bridgeObjectRelease();
      a3 = v71;
      uint64_t v7 = v72;
      a6 = v70;
      goto LABEL_49;
    }
  }
  if (v35 == 2)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v50 = swift_retain();
    uint64_t v51 = v72;
    AnyCRDT.init(from:)(v50, &v84);
    uint64_t v72 = v51;
    if (v51)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v70, v71);
      return sub_1C3F923BC(v81, type metadata accessor for Proto_Struct);
    }
    uint64_t v52 = v84;
    char v53 = (void (*)(void *, void))(*(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 40))(v83, v71, v18);
    uint64_t v55 = v54;
    char v56 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v82 = *v55;
    *uint64_t v55 = 0x8000000000000000;
    sub_1C4420DEC(v52, v33, v34, v56);
    *uint64_t v55 = v82;
    uint64_t v18 = v79;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v53(v83, 0);
    swift_release();
    goto LABEL_5;
  }
  char v58 = v65;
  uint64_t v59 = 2;
  while (1)
  {
    uint64_t v60 = v59 + 1;
    if (__OFADD__(v59, 1)) {
      break;
    }
    BOOL v61 = *(v58 - 1) == v33 && *v58 == v34;
    if (v61 || (sub_1C44982E8() & 1) != 0) {
      goto LABEL_18;
    }
    v58 += 2;
    ++v59;
    BOOL v36 = v60 == v35;
    uint64_t v18 = v79;
    if (v36) {
      goto LABEL_28;
    }
  }
LABEL_58:
  __break(1u);
LABEL_59:
  uint64_t result = sub_1C4498558();
  __break(1u);
  return result;
}

uint64_t sub_1C3FB9894(uint64_t a1, uint64_t a2)
{
  return sub_1C3FB98C0(a1, a2, MEMORY[0x1E4FBB120], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1C3FB9954);
}

uint64_t sub_1C3FB98C0(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  sub_1C44985F8();
  a3(v10, a1, a2);
  uint64_t v7 = sub_1C4498628();
  return a4(a1, a2, v7);
}

unint64_t sub_1C3FB9954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1C44982E8() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1C44982E8() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1C3FB9A38(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = v7;
  *(void *)(v2 + 40) = MEMORY[0x1E4FBC868];
  *(void *)(v2 + 32) = v7;
  *(unsigned char *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  uint64_t v8 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  uint64_t v9 = type metadata accessor for Proto_CRDT(0);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v10(v8, 1, 1, v9);
  uint64_t v11 = v2 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  uint64_t v12 = type metadata accessor for Proto_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  *(void *)(v2 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(v2 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v13 = *(void *)(a2 + 40);
  swift_beginAccess();
  *(void *)(v2 + 40) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v2 + 48) = *(unsigned char *)(a2 + 48);
  sub_1C3F9775C(v15, (uint64_t)v6, type metadata accessor for Proto_CRDT);
  v10((uint64_t)v6, 0, 1, v9);
  swift_beginAccess();
  sub_1C3F98338((uint64_t)v6, v8, &qword_1EBBC04F8);
  swift_endAccess();
  *(unsigned char *)(v2 + 49) = *(unsigned char *)(a2 + 49);
  return v2;
}

uint64_t sub_1C3FB9C9C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0248);
  char v36 = a2;
  uint64_t v6 = sub_1C4497FC8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_1C44985F8();
    sub_1C4497248();
    uint64_t result = sub_1C4498628();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1C3FB9FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3FBA018@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return CROrderedSet.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_1C3FBA03C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void *, uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  BOOL v27 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a3;
  uint64_t v7 = type metadata accessor for Proto_CRDT(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  int64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v14 - 8);
  unint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1C3F970C4(v17, (uint64_t)v16, &qword_1EBBC04F8);
  LODWORD(v7) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1, v7);
  sub_1C3F962E0((uint64_t)v16, &qword_1EBBC04F8);
  if (v7 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v18 = 0xD000000000000014;
    *(void *)(v18 + 8) = 0x80000001C44B0EE0;
    *(unsigned char *)(v18 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = a1;
    *(void *)(inited + 24) = 0;
    *(unsigned char *)(inited + 32) = 1;
    swift_retain();
    sub_1C3FBA924((uint64_t)v11);
    uint64_t v21 = v26;
    sub_1C3FBAD34((uint64_t)v11, a1, a2, v25, v27, (uint64_t)v13);
    uint64_t result = swift_release();
    if (!v21) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(v24, v13, a2);
    }
  }
  return result;
}

uint64_t CROrderedSet.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CROrderedSet();
  uint64_t v28 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v29 = a5;
  uint64_t v30 = (uint64_t *)((char *)&v28 - v15);
  uint64_t v16 = a5 + *(int *)(v14 + 48);
  uint64_t v17 = type metadata accessor for CROrderedSet.DeduplicatedInfo();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  uint64_t v32 = v16;
  v18(v16, 1, 1, v17);
  uint64_t v19 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1C3F970C4(v19, (uint64_t)v12, &qword_1EBBC04F8);
  uint64_t v20 = type metadata accessor for Proto_CRDT(0);
  LODWORD(v19) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v12, 1, v20);
  sub_1C3F962E0((uint64_t)v12, &qword_1EBBC04F8);
  if (v19 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v21 = 0xD000000000000014;
    *(void *)(v21 + 8) = 0x80000001C44B0EE0;
    *(unsigned char *)(v21 + 16) = 0;
    swift_willThrow();
LABEL_4:
    swift_release();
    uint64_t v25 = sub_1C4497B38();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v32, v25);
  }
  type metadata accessor for CRDecoder.CRDTContainer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a1;
  *(void *)(inited + 24) = 0;
  *(unsigned char *)(inited + 32) = 1;
  uint64_t v23 = v30;
  uint64_t v24 = v31;
  sub_1C3FBA678(a2, a3, a4, v30);
  if (v24) {
    goto LABEL_4;
  }
  swift_release();
  uint64_t v27 = sub_1C4497B38();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v32, v27);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v28 + 32))(v29, v23, v13);
}

uint64_t type metadata accessor for CRDecoder.CRDTContainer()
{
  return self;
}

uint64_t sub_1C3FBA678@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v22 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Proto_OrderedSet(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Proto_CRDT(0);
  uint64_t v14 = v13 - 8;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C3FBA924((uint64_t)v16);
  uint64_t v17 = *(void *)&v16[*(int *)(v14 + 28)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v17, (uint64_t)v9, &qword_1EBBC0648);
  uint64_t v18 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v9, 1, v18) == 1)
  {
    sub_1C3F962E0((uint64_t)v9, &qword_1EBBC0648);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 8)
    {
      sub_1C3F9775C((uint64_t)v9, (uint64_t)v12, type metadata accessor for Proto_OrderedSet);
      goto LABEL_9;
    }
    sub_1C3F9229C((uint64_t)v9, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  sub_1C4496888();
  uint64_t v19 = *(int *)(v10 + 20);
  if (qword_1EBBBC060 != -1) {
    swift_once();
  }
  *(void *)&v12[v19] = qword_1EBBBC058;
  swift_retain();
LABEL_9:
  sub_1C3F9229C((uint64_t)v16, type metadata accessor for Proto_CRDT);
  uint64_t v20 = *(void *)(v4 + 16);
  swift_retain();
  return sub_1C3F88614((uint64_t)v12, v20, a1, v22, v23, a4);
}

uint64_t sub_1C3FBA924@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = &v25[-v13];
  uint64_t v15 = *(void *)(v1 + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  if (*(unsigned char *)(v1 + 32))
  {
    swift_beginAccess();
    sub_1C3F970C4(v15, (uint64_t)v12, &qword_1EBBC04F8);
    uint64_t v16 = type metadata accessor for Proto_CRDT(0);
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v12, 1, v16);
    if (result != 1) {
      return sub_1C3F9775C((uint64_t)v12, a1, type metadata accessor for Proto_CRDT);
    }
    goto LABEL_17;
  }
  unint64_t v18 = *(void *)(v1 + 24);
  swift_beginAccess();
  sub_1C3F970C4(v15, (uint64_t)v14, &qword_1EBBC04F8);
  uint64_t v19 = type metadata accessor for Proto_CRDT(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48))(v14, 1, v19);
  if (result == 1)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  uint64_t v21 = *(void *)&v14[*(int *)(v19 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v21, (uint64_t)v5, &qword_1EBBC0648);
  uint64_t v22 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v5, 1, v22) == 1)
  {
    sub_1C3F962E0((uint64_t)v5, &qword_1EBBC0648);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t result = sub_1C3F9775C((uint64_t)v5, (uint64_t)v8, type metadata accessor for Proto_Struct);
      goto LABEL_11;
    }
    sub_1C3F9229C((uint64_t)v5, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  }
  uint64_t v23 = MEMORY[0x1E4FBC860];
  *uint64_t v8 = MEMORY[0x1E4FBC860];
  v8[1] = v23;
  v8[2] = v23;
  uint64_t result = sub_1C4496888();
LABEL_11:
  if ((v18 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v24 = v8[1];
  if (v18 >= *(void *)(v24 + 16))
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_1C3FA1CCC(v24+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(void *)(v20 + 72) * v18, a1, type metadata accessor for Proto_CRDT);
  sub_1C3F9229C((uint64_t)v14, type metadata accessor for Proto_CRDT);
  return sub_1C3F9229C((uint64_t)v8, type metadata accessor for Proto_Struct);
}

uint64_t sub_1C3FBAD34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(void *, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v21 = a5;
  uint64_t v20 = a4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Proto_Struct(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (uint64_t *)((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void *)(a1 + *(int *)(type metadata accessor for Proto_CRDT(0) + 20))
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v16, (uint64_t)v12, &qword_1EBBC0648);
  uint64_t v17 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v12, 1, v17) == 1)
  {
    sub_1C3F962E0((uint64_t)v12, &qword_1EBBC0648);
LABEL_6:
    uint64_t v18 = MEMORY[0x1E4FBC860];
    *uint64_t v15 = MEMORY[0x1E4FBC860];
    v15[1] = v18;
    void v15[2] = v18;
    sub_1C4496888();
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_1C3F923BC((uint64_t)v12, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_6;
  }
  sub_1C3FBAF7C((uint64_t)v12, (uint64_t)v15, type metadata accessor for Proto_Struct);
LABEL_7:
  sub_1C3FB9190((uint64_t)v15, a2, a3, v20, v21, a6);
  return sub_1C3F923BC(a1, type metadata accessor for Proto_CRDT);
}

uint64_t sub_1C3FBAF7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C3FBAFE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return CRMaxRegister.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 32), a3);
}

uint64_t CRMaxRegister.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1C3F970C4(v11, (uint64_t)v10, &qword_1EBBC04F8);
  uint64_t v12 = type metadata accessor for Proto_CRDT(0);
  LODWORD(v11) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v10, 1, v12);
  sub_1C3F962E0((uint64_t)v10, &qword_1EBBC04F8);
  if (v11 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v13 = 0xD000000000000014;
    *(void *)(v13 + 8) = 0x80000001C44B0EE0;
    *(unsigned char *)(v13 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = a1;
    *(void *)(inited + 24) = 0;
    *(unsigned char *)(inited + 32) = 1;
    sub_1C3FBB1D0(a2, a3, a4);
  }
  return swift_release();
}

uint64_t sub_1C3FBB1D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C3FBA924((uint64_t)v9);
  uint64_t v10 = *(void *)(v3 + 16);
  swift_retain();
  return sub_1C3FBB28C((uint64_t)v9, v10, a1, a2, a3);
}

uint64_t sub_1C3FBB28C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v61 = a4;
  uint64_t v71 = a2;
  uint64_t v68 = a5;
  uint64_t v7 = sub_1C4497B38();
  uint64_t v65 = *(void *)(v7 - 8);
  uint64_t v66 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v57 - v8;
  uint64_t v63 = type metadata accessor for Proto_Value(0);
  uint64_t v62 = *(void *)(v63 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v63);
  uint64_t v59 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = *(void *)(a3 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v64 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v67 = (char *)&v57 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v60 = (char *)&v57 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v57 - v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v25 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for Proto_Register(0);
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v57 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
  uint64_t v75 = a1;
  uint64_t v30 = *(void *)(a1 + v29)
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v30, (uint64_t)v25, &qword_1EBBC0648);
  uint64_t v31 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v25, 1, v31) == 1)
  {
    sub_1C3F962E0((uint64_t)v25, &qword_1EBBC0648);
LABEL_8:
    uint64_t v36 = swift_conformsToProtocol2();
    if (v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = 0;
    }
    if (v36) {
      uint64_t v38 = a3;
    }
    else {
      uint64_t v38 = 0;
    }
    if (v38)
    {
      unint64_t v39 = *(void (**)(uint64_t, uint64_t))(v37 + 16);
      *((void *)&v73 + 1) = v38;
      uint64_t v74 = v37;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v72);
      v39(v38, v37);
    }
    else
    {
      uint64_t v74 = 0;
      long long v72 = 0u;
      long long v73 = 0u;
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBBBF20);
    char v40 = swift_dynamicCast();
    uint64_t v41 = v70;
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56);
    if (v40)
    {
      v42(v9, 0, 1, a3);
      swift_release();
      sub_1C3FBBB18(v75, type metadata accessor for Proto_CRDT);
      char v43 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
      uint64_t v44 = v64;
      v43(v64, v9, a3);
      char v45 = v67;
      v43(v67, v44, a3);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v43)(v68, v45, a3);
    }
    else
    {
      v42(v9, 1, 1, a3);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v9, v66);
      sub_1C3FE3FF0();
      swift_allocError();
      *(void *)uint64_t v47 = 0xD000000000000020;
      *(void *)(v47 + 8) = 0x80000001C44B2880;
      *(unsigned char *)(v47 + 16) = 0;
      swift_willThrow();
      swift_release();
      return sub_1C3FBBB18(v75, type metadata accessor for Proto_CRDT);
    }
  }
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v32 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf;
    uint64_t v33 = (uint64_t)v25;
LABEL_7:
    sub_1C3FBBB18(v33, v32);
    goto LABEL_8;
  }
  sub_1C3F8ACA8((uint64_t)v25, (uint64_t)v28, type metadata accessor for Proto_Register);
  uint64_t v58 = *(int *)(v26 + 20);
  uint64_t v34 = *(void *)&v28[v58]
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1C3F970C4(v34, (uint64_t)v22, &qword_1EBBC0540);
  uint64_t v35 = v63;
  uint64_t v62 = *(void *)(v62 + 48);
  LODWORD(v34) = ((uint64_t (*)(char *, uint64_t, uint64_t))v62)(v22, 1, v63);
  sub_1C3F962E0((uint64_t)v22, &qword_1EBBC0540);
  if (v34 == 1)
  {
    uint64_t v32 = type metadata accessor for Proto_Register;
    uint64_t v33 = (uint64_t)v28;
    goto LABEL_7;
  }
  uint64_t v48 = *(void *)&v28[v58]
      + OBJC_IVAR____TtCV9Coherence14Proto_RegisterP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1C3F970C4(v48, (uint64_t)v20, &qword_1EBBC0540);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(v20, 1, v35) == 1)
  {
    uint64_t v49 = v59;
    sub_1C4496888();
    uint64_t v50 = *(int *)(v35 + 20);
    uint64_t v51 = v69;
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)(v49 + v50) = qword_1EBBBF8B8;
    swift_retain();
    sub_1C3F962E0((uint64_t)v20, &qword_1EBBC0540);
  }
  else
  {
    uint64_t v49 = v59;
    sub_1C3F8ACA8((uint64_t)v20, v59, type metadata accessor for Proto_Value);
    uint64_t v51 = v69;
  }
  type metadata accessor for CRDecoder(0);
  swift_allocObject();
  uint64_t v52 = v71;
  swift_retain();
  uint64_t v53 = sub_1C3F974B0(v49, v52);
  swift_release();
  char v54 = v60;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v61 + 8) + 8) + 8))(v53, a3);
  swift_release();
  sub_1C3FBBB18(v75, type metadata accessor for Proto_CRDT);
  uint64_t result = sub_1C3FBBB18((uint64_t)v28, type metadata accessor for Proto_Register);
  if (!v51)
  {
    uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
    char v56 = v67;
    v55(v67, v54, a3);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v55)(v68, v56, a3);
  }
  return result;
}

uint64_t sub_1C3FBBB18(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL sub_1C3FBBB78@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = sub_1C3FBBBA8(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

BOOL sub_1C3FBBBA8(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F8BC84(v6, (uint64_t)v5);
  uint64_t v7 = type metadata accessor for Proto_Value(0);
  LODWORD(v6) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7);
  sub_1C3F962E0((uint64_t)v5, &qword_1EBBC0540);
  if (v6 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v8 = 0xD000000000000017;
    *(void *)(v8 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v8 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for CRDecoder.CRValueContainer();
    *(void *)(swift_initStackObject() + 16) = a1;
    uint64_t v9 = sub_1C3F8BCEC();
    if (!v1)
    {
      uint64_t v11 = v9;
      swift_release();
      return v11 != 0;
    }
  }
  swift_release();
  return v10;
}

uint64_t static CRStruct_2.fieldKeys.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(long long *__return_ptr))(*(void *)(a2 + 8) + 48))(&v7);
  long long v6 = v7;
  uint64_t v2 = v8;
  uint64_t v3 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0250);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C449B4A0;
  *(_OWORD *)(v4 + 32) = v6;
  *(void *)(v4 + 48) = v2;
  *(void *)(v4 + 56) = v3;
  swift_release();
  swift_release();
  return v4;
}

uint64_t static CRStruct_1.fieldKeys.getter(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0250);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C449B490;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 8) + 32))(a1);
  uint64_t v7 = v6;
  swift_release();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  return v4;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CRStruct_1.decode(fields:)(Swift::OpaquePointer fields)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v3, v5);
  uint64_t v9 = v8;
  if (*((void *)fields._rawValue + 2))
  {
    uint64_t v10 = v7;
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_1C3FB9894(v10, v9);
    if (v12)
    {
      uint64_t v13 = *(void *)(*((void *)fields._rawValue + 7) + 8 * v11);
      swift_retain();
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 16) + 8);
      uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 8);
      swift_retain();
      swift_retain();
      v15(v13, AssociatedTypeWitness, v14);
      if (v16)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release_n();
      }
      else
      {
        swift_setAtWritableKeyPath();
        swift_release();
        swift_release_n();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void *__swift_store_extra_inhabitant_index_4Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *BOOL result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1C44967E8();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 44);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void *__swift_store_extra_inhabitant_index_408Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *BOOL result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1C4496898();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t objectdestroy_41Tm(void (*a1)(void))
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = type metadata accessor for Capsule();
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = (v5 + 40) & ~v5;
  uint64_t v7 = *(void *)(*(void *)(v4 - 8) + 64);
  a1(*(void *)(v1 + 32));
  uint64_t v8 = (uint64_t *)(v1 + v6);
  unint64_t v9 = *(void *)(v1 + v6 + 8);
  if (v9 >> 60 != 15) {
    sub_1C3F7E2CC(*v8, v9);
  }
  uint64_t v10 = (char *)v8 + *(int *)(v4 + 36);
  uint64_t v11 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v3)) {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v10, v3);
  }
  swift_release();
  return MEMORY[0x1F4186498](v1, v6 + v7, v5 | 7);
}

uint64_t sub_1C3FBC514(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      uint64_t v3 = sub_1C3F52604(v2, 0);
      if (v2 < 0) {
        break;
      }
      uint64_t v4 = v3;
      uint64_t v5 = sub_1C4497D38();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_1C4497F48();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_1C4497298();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    sub_1C4497FE8();
    __break(1u);
LABEL_14:
    uint64_t result = sub_1C4497F48();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t sub_1C3FBC68C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1C3F54C90(a1, a2, a3, (void (*)(void))sub_1C406B278, (void (*)(void))sub_1C3FBC770);
}

uint64_t sub_1C3FBC6B8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_1C4496498();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_1C3FBC770(uint64_t a1, int a2)
{
  return sub_1C3F51F38(a1, a2, qword_1EBBBCB28);
}

uint64_t sub_1C3FBC77C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C3FA0A88(a1, a2, a3, a4, &qword_1EBBBB2B8, type metadata accessor for Proto_Timestamp, type metadata accessor for Proto_Timestamp);
}

uint64_t sub_1C3FBC7B0()
{
  uint64_t result = sub_1C4497188();
  qword_1EBBC5A28 = result;
  return result;
}

uint64_t sub_1C3FBC7E8()
{
  uint64_t result = sub_1C4497188();
  qword_1EBBC5A20 = result;
  return result;
}

void sub_1C3FBC820(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void sub_1C3FBC87C()
{
  if (!qword_1EBBC09B8)
  {
    unint64_t v0 = sub_1C4497608();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBBC09B8);
    }
  }
}

unint64_t sub_1C3FBC8D4()
{
  unint64_t result = qword_1EBBC0968;
  if (!qword_1EBBC0968)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBBC0960);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBC0968);
  }
  return result;
}

uint64_t sub_1C3FBC930()
{
  return (*(uint64_t (**)(void, void))(*(void *)(*(void *)(v0[3] + 16) + 8) + 16))(v0[5], v0[2]);
}

uint64_t sub_1C3FBC974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1C3F5A1A8(a1, a2, a3, (void (*)(uint64_t))sub_1C3FBC930, a4);
}

uint64_t sub_1C3FBC9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3F51D40(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CROrderedSet, (uint64_t (*)(uint64_t, uint64_t))sub_1C3F5D58C);
}

void CRContext.__allocating_init(for:encryptionDelegate:temporaryDirectory:)(char *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1C3FBC9F8()
{
  return 0;
}

ValueMetadata *type metadata accessor for CRAsset()
{
  return &type metadata for CRAsset;
}

ValueMetadata *type metadata accessor for AnyCRDT()
{
  return &type metadata for AnyCRDT;
}

uint64_t sub_1C3FBCA24@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (void *)sub_1C3F51ACC();
  sub_1C3F5BA78(v8, a1, a2, a3, a4);
  return swift_release();
}

uint64_t CRDT.serializedData(_:version:)(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3F51968(a1, a2, a3, a4, sub_1C3F5A8C0);
}

uint64_t sub_1C3FBCAC8()
{
  return sub_1C3F56480();
}

uint64_t type metadata accessor for ApplicationStateManager()
{
  return self;
}

uint64_t sub_1C3FBCB00()
{
  return sub_1C3F56398();
}

uint64_t sub_1C3FBCB08()
{
  type metadata accessor for ApplicationStateManager();
  swift_allocObject();
  uint64_t result = sub_1C3F5CCF4();
  qword_1EBBC5A18 = result;
  return result;
}

void sub_1C3FBCB44()
{
  sub_1C3F52EBC(v0, 0, &qword_1EBBC0810, &qword_1EBBC5A28);
}

uint64_t sub_1C3FBCB84()
{
  return sub_1C3F7251C(&qword_1EBBBF1C8, (void (*)(uint64_t))type metadata accessor for Proto_CustomCRValue);
}

uint64_t type metadata accessor for CROrderedDictionary()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C3FBCBE4()
{
  uint64_t result = sub_1C3F581C4();
  byte_1EBBBF000 = result & 1;
  return result;
}

uint64_t type metadata accessor for CRSequenceEncoder(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBB298);
}

void sub_1C3FBCC3C()
{
  sub_1C3FBCD94();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for CRReplicaDatabase(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBC0788);
}

uint64_t sub_1C3FBCD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C43BE0E4);
}

uint64_t sub_1C3FBCD2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1C3FBCD94()
{
  if (!qword_1EBBC0780)
  {
    type metadata accessor for CRReplicaDatabase.Replica(255);
    unint64_t v0 = sub_1C4497B38();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBBC0780);
    }
  }
}

uint64_t sub_1C3FBCDEC()
{
  return sub_1C3F56480();
}

uint64_t sub_1C3FBCE04()
{
  return sub_1C3F7251C(&qword_1EBBC0348, (void (*)(uint64_t))type metadata accessor for Proto_Constants);
}

uint64_t sub_1C3FBCE4C()
{
  uint64_t result = type metadata accessor for Proto_CustomCRValue(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C3FBCEEC()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t type metadata accessor for CRStringEncoder(uint64_t a1)
{
  return sub_1C3F9708C(a1, (uint64_t *)&unk_1EBBBB288);
}

uint64_t sub_1C3FBCF34(uint64_t a1)
{
  return sub_1C3F55264(a1, (void (*)(void *))sub_1C3F55E44);
}

uint64_t sub_1C3FBCF64(uint64_t a1, unsigned int a2)
{
  return sub_1C3F586C0(a1, a2, &OBJC_IVAR____TtCV9Coherence17Proto_SubsequenceP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__addedBy);
}

uint64_t sub_1C3FBCF70()
{
  return sub_1C3F7251C(&qword_1EBBC05F8, (void (*)(uint64_t))type metadata accessor for Proto_Document);
}

uint64_t type metadata accessor for CRDTDictionary()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for CRDTDictionary.Iterator()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1C3FBCFEC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1C3F535E0(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1C3FBD008()
{
  return sub_1C3F56BF4();
}

uint64_t sub_1C3FBD028(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = swift_retain();
  a3(v4);
  return swift_release();
}

uint64_t sub_1C3FBD06C()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBBF170);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  qword_1EBBBEF50 = result;
  return result;
}

uint64_t sub_1C3FBD0B0()
{
  return sub_1C3F56480();
}

uint64_t type metadata accessor for CRMaxRegister()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _s9Coherence13CRMaxRegisterV5valuexvg_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t sub_1C3FBD11C(uint64_t a1, void *a2)
{
  return CROrderedSet.encode(to:)(a1, a2);
}

uint64_t sub_1C3FBD134(uint64_t a1)
{
  return sub_1C3F5309C(a1, *(void **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1C3FBD158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 56);
}

uint64_t sub_1C3FBD160()
{
  uint64_t v0 = sub_1C3FBC514(1952739939, 0xE400000000000000);
  uint64_t v1 = sub_1C3F5E0D0(v0);
  uint64_t v3 = v2;
  uint64_t result = swift_release();
  qword_1EBBC59D8 = v1;
  unk_1EBBC59E0 = v3;
  return result;
}

uint64_t type metadata accessor for _CRSQLStore()
{
  return self;
}

uint64_t sub_1C3FBD1DC()
{
  return sub_1C3F7251C(qword_1EBBBF3B8, (void (*)(uint64_t))type metadata accessor for Proto_Value);
}

void sub_1C3FBD224(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  sub_1C3F550A4(319, a4, a5);
  if (v5 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1C3FBD2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1C3FBD2DC(uint64_t a1)
{
  return sub_1C3F52BE8(a1, (void (*)(void))type metadata accessor for Proto_Value._StorageClass, &OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf, type metadata accessor for Proto_Value.OneOf_TaggedOneOf, &qword_1EBBBF8B8);
}

uint64_t sub_1C3FBD318()
{
  return sub_1C3F51E78();
}

uint64_t sub_1C3FBD334(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

void sub_1C3FBD39C()
{
  sub_1C3FBC87C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

unint64_t sub_1C3FBD45C()
{
  unint64_t result = qword_1EBBC07F0;
  if (!qword_1EBBC07F0)
  {
    sub_1C4496D68();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBC07F0);
  }
  return result;
}

void std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E64C16C0, MEMORY[0x1E4FBA1C8]);
}

void sub_1C3FBD520(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  unint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void sub_1C3FBD650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FBD76C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FBD850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)CRTTMergeableStringIndex;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void sub_1C3FBD9C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FBDB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FBDBDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FBDE08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FBDEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id TopoID::toString(TopoID *this)
{
  uint64_t v2 = NSString;
  uint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:this];
  uint64_t v4 = [v3 CRTTShortDescription];
  uint64_t v5 = [v2 stringWithFormat:@"%@.%d,%d", v4, this->replica.index, this->clock];

  return v5;
}

void sub_1C3FBDFA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FBE260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FBE4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *removeDirectToSinkEdges(void *result)
{
  uint64_t v1 = result[8];
  uint64_t v2 = v1 - result[7];
  if ((unint64_t)v2 >= 9)
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    unint64_t v5 = v2 >> 3;
    do
    {
      uint64_t v6 = v3[7] + 8 * v4;
      unsigned int v7 = *(_DWORD *)(*(void *)v6 + 80);
      if (v7 < 2)
      {
        ++v4;
      }
      else
      {
        *(_DWORD *)(*(void *)v6 + 80) = v7 - 1;
        uint64_t v8 = v1 - (v6 + 8);
        if (v1 != v6 + 8) {
          unint64_t result = memmove((void *)v6, (const void *)(v6 + 8), v1 - (v6 + 8));
        }
        uint64_t v1 = v6 + v8;
        v3[8] = v6 + v8;
        --v5;
      }
    }
    while (v4 < v5);
  }
  return result;
}

uint64_t minimumPermenantID@<X0>(uint64_t result@<X0>, TopoID *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a2->replica.index)
  {
    *(_OWORD *)a3 = *(_OWORD *)result;
    uint64_t v4 = *(void *)(result + 16);
  }
  else if (*(_DWORD *)(result + 16))
  {
    *(_OWORD *)a3 = *(_OWORD *)a2->replica.uuid;
    uint64_t v4 = *(void *)&a2->replica.index;
  }
  else
  {
    TopoID v7 = *(TopoID *)result;
    TopoID v6 = *a2;
    unint64_t result = TopoID::operator<((uint64_t)&v7, (uint64_t)&v6);
    if (result) {
      unint64_t v5 = &v7;
    }
    else {
      unint64_t v5 = &v6;
    }
    *(_OWORD *)a3 = *(_OWORD *)v5->replica.uuid;
    uint64_t v4 = *(void *)&v5->replica.index;
  }
  *(void *)(a3 + 16) = v4;
  return result;
}

uint64_t TopoID::operator<(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 20);
  unsigned int v3 = *(_DWORD *)(a2 + 20);
  if (v2 < v3) {
    return 1;
  }
  if (v2 != v3) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  unsigned int v6 = *(_DWORD *)(a2 + 16);
  if (v5 == v6) {
    return uuid_compare((const unsigned __int8 *)a1, (const unsigned __int8 *)a2) == -1;
  }
  else {
    return v5 < v6;
  }
}

void minIdPath(long long *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2;
  long long v79 = *a1;
  unsigned int v6 = *((_DWORD *)a1 + 4);
  unsigned int v5 = *((_DWORD *)a1 + 5);
  __p = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  float v58 = 1.0;
  uint64_t v8 = (void *)a1 + 7;
  TopoID v7 = (char *)*((void *)a1 + 7);
  uint64_t v9 = (char *)*((void *)a1 + 8);
  if (v9 == v7)
  {
    unint64_t v10 = 0;
LABEL_68:
    if (v4) {
      goto LABEL_69;
    }
    goto LABEL_71;
  }
  uint64_t v53 = (char **)(a1 + 4);
  unint64_t v10 = 0;
  while (1)
  {
    if ((unint64_t)(v9 - v7) >= 9)
    {
      uint64_t v11 = a1;
      BOOL v12 = v8;
      removeDirectToSinkEdges(v11);
      uint64_t v8 = v12;
      uint64_t v9 = *v53;
      TopoID v7 = (char *)*v12;
    }
    uint64_t v13 = v9 - v7;
    if (v13 == 8) {
      break;
    }
    uint64_t v60 = (char *)__p;
    uint64_t v14 = v8;
    std::vector<std::pair<minIdPathData,TopoSubstring *>>::reserve(&__p, v13 >> 3);
    std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::clear(&v56);
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>((uint64_t)&v56, vcvtps_u32_f32((float)(unint64_t)((uint64_t)&(*v53)[-*v14] >> 3) / v58));
    char v54 = v14;
    uint64_t v15 = (char *)*v14;
    uint64_t v16 = *v53;
    while (v15 != v16)
    {
      *(void *)&long long v69 = 0;
      *(void *)&long long v69 = *(void *)v15;
      *(void *)&long long v74 = &v69;
      std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>((uint64_t)&v56, &v69, (uint64_t)&std::piecewise_construct, (void **)&v74)[3] = 1;
      TopoReplica::TopoReplica((TopoReplica *)&v71, 0, 0);
      DWORD1(v72) = 0;
      uint64_t v17 = v69;
      *((void *)&v72 + 1) = v69;
      unint64_t v73 = 0;
      uint64_t v76 = 0;
      long long v74 = v71;
      long long v75 = v72;
      uint64_t v18 = v60;
      if (v60 >= v61)
      {
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v60 - (unsigned char *)__p) >> 4);
        unint64_t v23 = v22 + 1;
        if (v22 + 1 > 0x555555555555555) {
          std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((v61 - (unsigned char *)__p) >> 4) > v23) {
          unint64_t v23 = 0x5555555555555556 * ((v61 - (unsigned char *)__p) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v61 - (unsigned char *)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v24 = 0x555555555555555;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<minIdPathData,TopoSubstring *>>>((uint64_t)&v61, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v26 = &v25[48 * v22];
        *(_OWORD *)uint64_t v26 = v74;
        *((_OWORD *)v26 + 1) = v75;
        *((void *)v26 + 4) = v76;
        *((void *)v26 + 5) = v17;
        uint64_t v28 = (char *)__p;
        uint64_t v27 = v60;
        uint64_t v29 = v26;
        if (v60 != __p)
        {
          do
          {
            long long v30 = *((_OWORD *)v27 - 3);
            long long v31 = *((_OWORD *)v27 - 1);
            *((_OWORD *)v29 - 2) = *((_OWORD *)v27 - 2);
            *((_OWORD *)v29 - 1) = v31;
            *((_OWORD *)v29 - 3) = v30;
            v29 -= 48;
            v27 -= 48;
          }
          while (v27 != v28);
          uint64_t v27 = v28;
        }
        uint64_t v21 = v26 + 48;
        __p = v29;
        uint64_t v60 = v26 + 48;
        uint64_t v61 = &v25[48 * v24];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        long long v19 = v72;
        unint64_t v20 = v73;
        *(_OWORD *)uint64_t v60 = v71;
        *((_OWORD *)v18 + 1) = v19;
        *((void *)v18 + 4) = v20;
        *((void *)v18 + 5) = v17;
        uint64_t v21 = v18 + 48;
      }
      uint64_t v60 = v21;
      v15 += 8;
    }
    do
    {
      while (1)
      {
        long long v74 = 0u;
        long long v75 = 0u;
        LODWORD(v76) = 1065353216;
        uint64_t v32 = (void *)v57;
        if ((void)v57)
        {
          do
          {
            unint64_t v33 = v32[3];
            uint64_t v55 = v32[2];
            if (v33 >= *(unsigned int *)(v55 + 80))
            {
              minIdPath(&v71);
              if (v60 != __p)
              {
                uint64_t v34 = 0;
                if ((unint64_t)((v60 - (unsigned char *)__p) / 48) <= 1) {
                  uint64_t v35 = 1;
                }
                else {
                  uint64_t v35 = (v60 - (unsigned char *)__p) / 48;
                }
                do
                {
                  if (*(void *)((char *)__p + v34 + 24) == v55 && !uuid_is_null((const unsigned __int8 *)__p + v34))
                  {
                    *(_OWORD *)v68.replica.uuid = v71;
                    *(void *)&v68.replica.unsigned int index = v72;
                    TopoID v67 = *(TopoID *)((char *)__p + v34);
                    minimumPermenantID((uint64_t)&v68, &v67, (uint64_t)&v69);
                    long long v71 = v69;
                    *(void *)&long long v72 = v70;
                  }
                  v34 += 48;
                  --v35;
                }
                while (v35);
                uint64_t v36 = __p;
                if (v60 != __p)
                {
                  unint64_t v37 = (v60 - (unsigned char *)__p) / 48;
                  uint64_t v38 = v55;
                  if (v37 <= 1) {
                    unint64_t v37 = 1;
                  }
                  do
                  {
                    if (*((void *)v36 + 3) == v38)
                    {
                      *uint64_t v36 = v71;
                      v36[1] = v72;
                      *((void *)v36 + 4) = v73;
                    }
                    v36 += 3;
                    --v37;
                  }
                  while (v37);
                }
              }
              *(_OWORD *)v66.replica.uuid = v79;
              v66.replica.unsigned int index = v6;
              v66.clock = v5;
              *(_OWORD *)v65.replica.uuid = v71;
              *(void *)&v65.replica.unsigned int index = v72;
              minimumPermenantID((uint64_t)&v66, &v65, (uint64_t)&v69);
              long long v79 = v69;
              unsigned int v6 = v70;
              unsigned int v5 = HIDWORD(v70);
              unint64_t v33 = v73;
              uint64_t v55 = *((void *)&v72 + 1);
            }
            unint64_t v39 = std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::find<TopoSubstring *>(&v74, &v55);
            if (v39)
            {
              v39[3] += v33;
            }
            else
            {
              *(void *)&long long v71 = &v55;
              std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>((uint64_t)&v74, &v55, (uint64_t)&std::piecewise_construct, (void **)&v71)[3] = v33;
            }
            uint64_t v32 = (void *)*v32;
          }
          while (v32);
          float v40 = *(float *)&v76;
          uint64_t v41 = (__n128 *)v75;
        }
        else
        {
          uint64_t v41 = 0;
          float v40 = 1.0;
        }
        float v58 = v40;
        std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<TopoSubstring *,unsigned long>,void *> *>>(&v56, v41, 0);
        if (!v4) {
          break;
        }
        std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)&v74);
        if (*((void *)&v57 + 1) <= 1uLL) {
          goto LABEL_64;
        }
      }
      char v43 = __p;
      uint64_t v44 = (long long *)v60;
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((v60 - (unsigned char *)__p) >> 4);
      if (v60 - (unsigned char *)__p < 1)
      {
        uint64_t v46 = 0;
        uint64_t v48 = 0;
      }
      else
      {
        uint64_t v46 = (__n128 *)std::get_temporary_buffer[abi:ne180100]<std::pair<minIdPathData,TopoSubstring *>>(0xAAAAAAAAAAAAAAABLL * ((v60 - (unsigned char *)__p) >> 4));
        uint64_t v48 = v47;
      }
      std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>((uint64_t)v43, v44, v45, v46, v48, v42);
      if (v46) {
        operator delete(v46);
      }
      std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)&v74);
    }
    while (*((void *)&v57 + 1) > 1uLL);
    if (*v53 != (char *)*v54)
    {
      uint64_t v49 = 0;
      unint64_t v50 = (uint64_t)&(*v53)[-*v54] >> 3;
      if (v50 <= 1) {
        unint64_t v50 = 1;
      }
      uint64_t v51 = 40;
      do
      {
        *(void *)(*v54 + 8 * v49++) = *(void *)((char *)__p + v51);
        v51 += 48;
      }
      while (v50 != v49);
    }
LABEL_64:
    a1 = *(long long **)(v57 + 16);
    unint64_t v10 = *(void *)(v57 + 24);
    if (v10 < *((unsigned int *)a1 + 20)) {
      goto LABEL_68;
    }
LABEL_65:
    uint64_t v8 = (void *)a1 + 7;
    TopoID v7 = (char *)*((void *)a1 + 7);
    uint64_t v9 = (char *)*((void *)a1 + 8);
    uint64_t v53 = (char **)(a1 + 4);
    if (v9 == v7) {
      goto LABEL_68;
    }
  }
  a1 = *(long long **)v7;
  if (*(_DWORD *)(*(void *)v7 + 80) <= 1u)
  {
    *(_OWORD *)v78.replica.uuid = v79;
    v78.replica.unsigned int index = v6;
    v78.clock = v5;
    TopoID v77 = *(TopoID *)a1;
    minimumPermenantID((uint64_t)&v78, &v77, (uint64_t)&v74);
    long long v79 = v74;
    unsigned int v6 = v75;
    unsigned int v5 = DWORD1(v75);
    goto LABEL_65;
  }
  unint64_t v10 = 1;
  if (!v4) {
    goto LABEL_71;
  }
LABEL_69:
  if (v6)
  {
    long long v62 = v79;
    unsigned int v63 = v6;
    unsigned int v64 = v5;
    v4[2](v4, &v62);
  }
LABEL_71:
  *(_OWORD *)a3 = v79;
  *(_DWORD *)(a3 + 16) = v6;
  *(_DWORD *)(a3 + 20) = v5;
  *(void *)(a3 + 24) = a1;
  *(void *)(a3 + 32) = v10;
  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)&v56);
  if (__p)
  {
    uint64_t v60 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1C3FBEDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)&a15);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::vector<std::pair<minIdPathData,TopoSubstring *>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 48;
    unsigned int v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<minIdPathData,TopoSubstring *>>>(v3, a2);
    TopoID v7 = &v6[48 * v5];
    uint64_t v9 = &v6[48 * v8];
    uint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    BOOL v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 3);
        long long v14 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v14;
        *((_OWORD *)v12 - 3) = v13;
        v12 -= 48;
        v10 -= 48;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

__n128 updateTopoID@<Q0>(const TopoID *a1@<X0>, const TopoIDRange *a2@<X1>, const TopoIDRange *a3@<X2>, TopoID *a4@<X8>)
{
  __n128 result = *(__n128 *)a1->replica.uuid;
  *a4 = *a1;
  if (a1->replica.index == a2->charID.replica.index && !uuid_compare(a1->replica.uuid, a2->charID.replica.uuid))
  {
    unsigned int clock = a1->clock;
    unsigned int v10 = a2->charID.clock;
    if (clock >= v10 && clock < a2->length + v10)
    {
      __n128 result = *(__n128 *)a3->charID.replica.uuid;
      *(_OWORD *)a4->replica.uuid = *(_OWORD *)a3->charID.replica.uuid;
      unsigned int v11 = clock - v10 + a3->charID.clock;
      a4->replica.unsigned int index = a3->charID.replica.index;
      a4->unsigned int clock = v11;
    }
  }
  return result;
}

void updateTopoIDRange(unsigned __int8 *uu1, uint64_t a2, long long *a3, void **a4)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)uu1 + 4) == *(_DWORD *)(a2 + 16) && !uuid_compare(uu1, (const unsigned __int8 *)a2))
  {
    *(_OWORD *)uu1a = *(_OWORD *)uu1;
    int v17 = *((_DWORD *)uu1 + 6) + *((_DWORD *)uu1 + 5);
    LODWORD(v133) = *((_DWORD *)uu1 + 4);
    HIDWORD(v133) = v17;
    if ((TopoID::operator<=(uu1a, (unsigned __int8 *)a2) & 1) != 0
      || (*(_OWORD *)uu2 = *(_OWORD *)a2,
          int v18 = *(_DWORD *)(a2 + 24) + *(_DWORD *)(a2 + 20),
          int v130 = *(_DWORD *)(a2 + 16),
          int v131 = v18,
          (TopoID::operator>=(uu1, uu2) & 1) != 0))
    {
      long long v19 = (char *)a4[2];
      uint64_t v9 = (char *)a4[1];
      if (v9 < v19) {
        goto LABEL_4;
      }
      uint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((v9 - (unsigned char *)*a4) >> 2);
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) > 0x924924924924924) {
        std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v22 = 0x6DB6DB6DB6DB6DB7 * ((v19 - (unsigned char *)*a4) >> 2);
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x492492492492492) {
        unint64_t v23 = 0x924924924924924;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23) {
        unint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a4 + 2), v23);
      }
      else {
        unint64_t v24 = 0;
      }
      uint64_t v25 = &v24[28 * v20];
      uint64_t v26 = &v24[28 * v23];
      long long v42 = *(_OWORD *)uu1;
      *(_OWORD *)(v25 + 12) = *(_OWORD *)(uu1 + 12);
      *(_OWORD *)uint64_t v25 = v42;
      unsigned int v11 = v25 + 28;
      char v43 = (char *)*a4;
      uint64_t v28 = (char *)a4[1];
      if (v28 != *a4)
      {
        do
        {
          long long v44 = *(_OWORD *)(v28 - 28);
          *((_OWORD *)v25 - 1) = *((_OWORD *)v28 - 1);
          *(_OWORD *)(v25 - 28) = v44;
          v25 -= 28;
          v28 -= 28;
        }
        while (v28 != v43);
        goto LABEL_28;
      }
    }
    else
    {
      unsigned int v31 = *((_DWORD *)uu1 + 5);
      unsigned int v32 = *(_DWORD *)(a2 + 20);
      unsigned int v33 = v32 - v31;
      if (v32 > v31)
      {
        unsigned int v34 = *((_DWORD *)uu1 + 6) - v33;
        *(_OWORD *)uu1a = *(_OWORD *)uu1;
        uint64_t v133 = *((void *)uu1 + 2);
        long long v127 = *(_OWORD *)uu1a;
        int v128 = *((_DWORD *)uu1 + 4);
        *(_OWORD *)uu2 = *(_OWORD *)a2;
        int v35 = *(_DWORD *)(a2 + 24) + v32;
        int v130 = *(_DWORD *)(a2 + 16);
        int v131 = v35;
        long long v124 = *(_OWORD *)uu1;
        int v125 = *((_DWORD *)uu1 + 4);
        unsigned int v126 = v34 + v32;
        if (TopoID::operator<((uint64_t)uu2, (uint64_t)&v124))
        {
          int v36 = *(_DWORD *)(a2 + 24);
          int v37 = v36 + v32;
          int v38 = v34 - v36;
          unint64_t v39 = (char *)a4[2];
          float v40 = (char *)a4[1];
          if (v40 >= v39)
          {
            uint64_t v64 = 0x6DB6DB6DB6DB6DB7 * ((v40 - (unsigned char *)*a4) >> 2);
            unint64_t v65 = v64 + 1;
            if ((unint64_t)(v64 + 1) > 0x924924924924924) {
              std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v66 = 0x6DB6DB6DB6DB6DB7 * ((v39 - (unsigned char *)*a4) >> 2);
            if (2 * v66 > v65) {
              unint64_t v65 = 2 * v66;
            }
            if (v66 >= 0x492492492492492) {
              unint64_t v67 = 0x924924924924924;
            }
            else {
              unint64_t v67 = v65;
            }
            if (v67) {
              TopoID v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a4 + 2), v67);
            }
            else {
              TopoID v68 = 0;
            }
            long long v79 = &v68[28 * v64];
            uint64_t v80 = &v68[28 * v67];
            int v81 = v128;
            *(_OWORD *)long long v79 = v127;
            *((_DWORD *)v79 + 4) = v81;
            *((_DWORD *)v79 + 5) = v37;
            *((_DWORD *)v79 + 6) = v38;
            uint64_t v41 = v79 + 28;
            uint64_t v83 = (char *)*a4;
            uint64_t v82 = (char *)a4[1];
            if (v82 != *a4)
            {
              do
              {
                long long v84 = *(_OWORD *)(v82 - 28);
                *((_OWORD *)v79 - 1) = *((_OWORD *)v82 - 1);
                *(_OWORD *)(v79 - 28) = v84;
                v79 -= 28;
                v82 -= 28;
              }
              while (v82 != v83);
              uint64_t v82 = (char *)*a4;
            }
            *a4 = v79;
            a4[1] = v41;
            a4[2] = v80;
            if (v82) {
              operator delete(v82);
            }
          }
          else
          {
            *(_OWORD *)float v40 = v127;
            *((_DWORD *)v40 + 4) = v128;
            *((_DWORD *)v40 + 5) = v37;
            *((_DWORD *)v40 + 6) = v38;
            uint64_t v41 = v40 + 28;
          }
          a4[1] = v41;
        }
        else
        {
          uint64_t v41 = (char *)a4[1];
          int v36 = v34;
        }
        long long v127 = *a3;
        int v85 = *((_DWORD *)a3 + 5);
        int v128 = *((_DWORD *)a3 + 4);
        char v86 = (char *)a4[2];
        if (v41 >= v86)
        {
          uint64_t v89 = 0x6DB6DB6DB6DB6DB7 * ((v41 - (unsigned char *)*a4) >> 2);
          if ((unint64_t)(v89 + 1) > 0x924924924924924) {
            std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v90 = 0x6DB6DB6DB6DB6DB7 * ((v86 - (unsigned char *)*a4) >> 2);
          uint64_t v91 = 2 * v90;
          if (2 * v90 <= v89 + 1) {
            uint64_t v91 = v89 + 1;
          }
          if (v90 >= 0x492492492492492) {
            unint64_t v92 = 0x924924924924924;
          }
          else {
            unint64_t v92 = v91;
          }
          if (v92) {
            char v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a4 + 2), v92);
          }
          else {
            char v93 = 0;
          }
          char v94 = &v93[28 * v89];
          char v95 = &v93[28 * v92];
          *((void *)v94 + 2) = v133;
          *(_OWORD *)char v94 = *(_OWORD *)uu1a;
          *((_DWORD *)v94 + 6) = v33;
          char v88 = v94 + 28;
          char v97 = (char *)*a4;
          char v96 = (char *)a4[1];
          if (v96 != *a4)
          {
            do
            {
              long long v98 = *(_OWORD *)(v96 - 28);
              *((_OWORD *)v94 - 1) = *((_OWORD *)v96 - 1);
              *(_OWORD *)(v94 - 28) = v98;
              v94 -= 28;
              v96 -= 28;
            }
            while (v96 != v97);
            char v96 = (char *)*a4;
          }
          *a4 = v94;
          a4[1] = v88;
          a4[2] = v95;
          if (v96) {
            operator delete(v96);
          }
        }
        else
        {
          long long v87 = *(_OWORD *)uu1a;
          *((void *)v41 + 2) = v133;
          *(_OWORD *)uint64_t v41 = v87;
          *((_DWORD *)v41 + 6) = v33;
          char v88 = v41 + 28;
        }
        a4[1] = v88;
        unint64_t v99 = (char *)a4[2];
        if (v88 < v99)
        {
          *(_OWORD *)char v88 = v127;
          *((_DWORD *)v88 + 4) = v128;
          *((_DWORD *)v88 + 5) = v85;
          *((_DWORD *)v88 + 6) = v36;
          unsigned int v11 = v88 + 28;
          goto LABEL_31;
        }
        uint64_t v100 = 0x6DB6DB6DB6DB6DB7 * ((v88 - (unsigned char *)*a4) >> 2);
        if ((unint64_t)(v100 + 1) > 0x924924924924924) {
          std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v101 = 0x6DB6DB6DB6DB6DB7 * ((v99 - (unsigned char *)*a4) >> 2);
        uint64_t v102 = 2 * v101;
        if (2 * v101 <= v100 + 1) {
          uint64_t v102 = v100 + 1;
        }
        if (v101 >= 0x492492492492492) {
          unint64_t v103 = 0x924924924924924;
        }
        else {
          unint64_t v103 = v102;
        }
        if (v103) {
          uint64_t v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a4 + 2), v103);
        }
        else {
          uint64_t v104 = 0;
        }
        uint64_t v25 = &v104[28 * v100];
        uint64_t v26 = &v104[28 * v103];
        int v105 = v128;
        *(_OWORD *)uint64_t v25 = v127;
        *((_DWORD *)v25 + 4) = v105;
        *((_DWORD *)v25 + 5) = v85;
        *((_DWORD *)v25 + 6) = v36;
        unsigned int v11 = v25 + 28;
        uint64_t v106 = (char *)*a4;
        uint64_t v28 = (char *)a4[1];
        if (v28 == *a4) {
          goto LABEL_29;
        }
        do
        {
          long long v107 = *(_OWORD *)(v28 - 28);
          *((_OWORD *)v25 - 1) = *((_OWORD *)v28 - 1);
          *(_OWORD *)(v25 - 28) = v107;
          v25 -= 28;
          v28 -= 28;
        }
        while (v28 != v106);
        goto LABEL_28;
      }
      *(_OWORD *)uu1a = *(_OWORD *)uu1;
      int v45 = *((_DWORD *)uu1 + 6);
      LODWORD(v133) = *((_DWORD *)uu1 + 4);
      HIDWORD(v133) = v45 + v31;
      *(_OWORD *)uu2 = *(_OWORD *)a2;
      int v46 = *(_DWORD *)(a2 + 24) + v32;
      int v130 = *(_DWORD *)(a2 + 16);
      int v131 = v46;
      if (TopoID::operator>((uint64_t)uu1a, (uint64_t)uu2))
      {
        int v47 = *(_DWORD *)(a2 + 20);
        int v48 = *(_DWORD *)(a2 + 24) + v47;
        int v50 = *((_DWORD *)uu1 + 4);
        int v49 = *((_DWORD *)uu1 + 5);
        int v51 = v48 - v49;
        int v52 = *((_DWORD *)uu1 + 6);
        *(_OWORD *)uu2 = *(_OWORD *)uu1;
        int v130 = v50;
        *(_OWORD *)uu1a = *a3;
        int v53 = *((_DWORD *)a3 + 5);
        LODWORD(v133) = *((_DWORD *)a3 + 4);
        int v54 = v53 + v49 - v47;
        uint64_t v55 = (char *)a4[2];
        long long v56 = (char *)a4[1];
        if (v56 >= v55)
        {
          uint64_t v69 = 0x6DB6DB6DB6DB6DB7 * ((v56 - (unsigned char *)*a4) >> 2);
          unint64_t v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) > 0x924924924924924) {
            std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v71 = 0x6DB6DB6DB6DB6DB7 * ((v55 - (unsigned char *)*a4) >> 2);
          if (2 * v71 > v70) {
            unint64_t v70 = 2 * v71;
          }
          if (v71 >= 0x492492492492492) {
            unint64_t v72 = 0x924924924924924;
          }
          else {
            unint64_t v72 = v70;
          }
          if (v72) {
            unint64_t v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a4 + 2), v72);
          }
          else {
            unint64_t v73 = 0;
          }
          unint64_t v108 = &v73[28 * v69];
          unint64_t v109 = &v73[28 * v72];
          *((_DWORD *)v108 + 4) = v133;
          *(_OWORD *)unint64_t v108 = *(_OWORD *)uu1a;
          *((_DWORD *)v108 + 5) = v54;
          *((_DWORD *)v108 + 6) = v51;
          float v58 = v108 + 28;
          uint64_t v111 = (char *)*a4;
          unint64_t v110 = (char *)a4[1];
          if (v110 != *a4)
          {
            do
            {
              long long v112 = *(_OWORD *)(v110 - 28);
              *((_OWORD *)v108 - 1) = *((_OWORD *)v110 - 1);
              *(_OWORD *)(v108 - 28) = v112;
              v108 -= 28;
              v110 -= 28;
            }
            while (v110 != v111);
            unint64_t v110 = (char *)*a4;
          }
          *a4 = v108;
          a4[1] = v58;
          a4[2] = v109;
          if (v110) {
            operator delete(v110);
          }
        }
        else
        {
          int v57 = *((_DWORD *)a3 + 4);
          *(_OWORD *)long long v56 = *a3;
          *((_DWORD *)v56 + 4) = v57;
          *((_DWORD *)v56 + 5) = v54;
          *((_DWORD *)v56 + 6) = v51;
          float v58 = v56 + 28;
        }
        int v113 = v52 - v51;
        a4[1] = v58;
        uint64_t v114 = (char *)a4[2];
        if (v58 < v114)
        {
          *(_OWORD *)float v58 = *(_OWORD *)uu2;
          *((_DWORD *)v58 + 4) = v130;
          *((_DWORD *)v58 + 5) = v48;
          *((_DWORD *)v58 + 6) = v113;
          unsigned int v11 = v58 + 28;
          goto LABEL_31;
        }
        uint64_t v115 = 0x6DB6DB6DB6DB6DB7 * ((v58 - (unsigned char *)*a4) >> 2);
        if ((unint64_t)(v115 + 1) > 0x924924924924924) {
          std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v116 = 0x6DB6DB6DB6DB6DB7 * ((v114 - (unsigned char *)*a4) >> 2);
        uint64_t v117 = 2 * v116;
        if (2 * v116 <= v115 + 1) {
          uint64_t v117 = v115 + 1;
        }
        if (v116 >= 0x492492492492492) {
          unint64_t v118 = 0x924924924924924;
        }
        else {
          unint64_t v118 = v117;
        }
        if (v118) {
          uint64_t v119 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a4 + 2), v118);
        }
        else {
          uint64_t v119 = 0;
        }
        uint64_t v25 = &v119[28 * v115];
        uint64_t v26 = &v119[28 * v118];
        *((_DWORD *)v25 + 4) = v130;
        *(_OWORD *)uint64_t v25 = *(_OWORD *)uu2;
        *((_DWORD *)v25 + 5) = v48;
        *((_DWORD *)v25 + 6) = v113;
        unsigned int v11 = v25 + 28;
        uint64_t v122 = (char *)*a4;
        uint64_t v28 = (char *)a4[1];
        if (v28 == *a4) {
          goto LABEL_29;
        }
        do
        {
          long long v123 = *(_OWORD *)(v28 - 28);
          *((_OWORD *)v25 - 1) = *((_OWORD *)v28 - 1);
          *(_OWORD *)(v25 - 28) = v123;
          v25 -= 28;
          v28 -= 28;
        }
        while (v28 != v122);
        goto LABEL_28;
      }
      *(_OWORD *)uu1a = *a3;
      int v59 = *((_DWORD *)a3 + 5);
      LODWORD(v133) = *((_DWORD *)a3 + 4);
      int v60 = *((_DWORD *)uu1 + 6);
      int v61 = *((_DWORD *)uu1 + 5) - *(_DWORD *)(a2 + 20) + v59;
      long long v62 = (char *)a4[2];
      uint64_t v9 = (char *)a4[1];
      if (v9 < v62)
      {
        int v63 = *((_DWORD *)a3 + 4);
        *(_OWORD *)uint64_t v9 = *a3;
        *((_DWORD *)v9 + 4) = v63;
        *((_DWORD *)v9 + 5) = v61;
        *((_DWORD *)v9 + 6) = v60;
        goto LABEL_5;
      }
      uint64_t v74 = 0x6DB6DB6DB6DB6DB7 * ((v9 - (unsigned char *)*a4) >> 2);
      unint64_t v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) > 0x924924924924924) {
        std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v76 = 0x6DB6DB6DB6DB6DB7 * ((v62 - (unsigned char *)*a4) >> 2);
      if (2 * v76 > v75) {
        unint64_t v75 = 2 * v76;
      }
      if (v76 >= 0x492492492492492) {
        unint64_t v77 = 0x924924924924924;
      }
      else {
        unint64_t v77 = v75;
      }
      if (v77) {
        TopoID v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a4 + 2), v77);
      }
      else {
        TopoID v78 = 0;
      }
      uint64_t v25 = &v78[28 * v74];
      uint64_t v26 = &v78[28 * v77];
      *((_DWORD *)v25 + 4) = v133;
      *(_OWORD *)uint64_t v25 = *(_OWORD *)uu1a;
      *((_DWORD *)v25 + 5) = v61;
      *((_DWORD *)v25 + 6) = v60;
      unsigned int v11 = v25 + 28;
      uint64_t v120 = (char *)*a4;
      uint64_t v28 = (char *)a4[1];
      if (v28 != *a4)
      {
        do
        {
          long long v121 = *(_OWORD *)(v28 - 28);
          *((_OWORD *)v25 - 1) = *((_OWORD *)v28 - 1);
          *(_OWORD *)(v25 - 28) = v121;
          v25 -= 28;
          v28 -= 28;
        }
        while (v28 != v120);
        goto LABEL_28;
      }
    }
  }
  else
  {
    uint64_t v8 = (char *)a4[2];
    uint64_t v9 = (char *)a4[1];
    if (v9 < v8)
    {
LABEL_4:
      long long v10 = *(_OWORD *)uu1;
      *(_OWORD *)(v9 + 12) = *(_OWORD *)(uu1 + 12);
      *(_OWORD *)uint64_t v9 = v10;
LABEL_5:
      unsigned int v11 = v9 + 28;
      goto LABEL_31;
    }
    uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((v9 - (unsigned char *)*a4) >> 2);
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) > 0x924924924924924) {
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((v8 - (unsigned char *)*a4) >> 2);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x492492492492492) {
      unint64_t v15 = 0x924924924924924;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a4 + 2), v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v25 = &v16[28 * v12];
    uint64_t v26 = &v16[28 * v15];
    long long v27 = *(_OWORD *)uu1;
    *(_OWORD *)(v25 + 12) = *(_OWORD *)(uu1 + 12);
    *(_OWORD *)uint64_t v25 = v27;
    unsigned int v11 = v25 + 28;
    uint64_t v29 = (char *)*a4;
    uint64_t v28 = (char *)a4[1];
    if (v28 != *a4)
    {
      do
      {
        long long v30 = *(_OWORD *)(v28 - 28);
        *((_OWORD *)v25 - 1) = *((_OWORD *)v28 - 1);
        *(_OWORD *)(v25 - 28) = v30;
        v25 -= 28;
        v28 -= 28;
      }
      while (v28 != v29);
LABEL_28:
      uint64_t v28 = (char *)*a4;
    }
  }
LABEL_29:
  *a4 = v25;
  a4[1] = v11;
  a4[2] = v26;
  if (v28) {
    operator delete(v28);
  }
LABEL_31:
  a4[1] = v11;
}

uint64_t TopoID::operator<=(unsigned __int8 *uu1, unsigned __int8 *uu2)
{
  if (*((_DWORD *)uu1 + 5) == *((_DWORD *)uu2 + 5)
    && *((_DWORD *)uu1 + 4) == *((_DWORD *)uu2 + 4)
    && !uuid_compare(uu1, uu2))
  {
    return 1;
  }
  return TopoID::operator<((uint64_t)uu1, (uint64_t)uu2);
}

uint64_t TopoID::operator>=(unsigned __int8 *uu1, unsigned __int8 *uu2)
{
  if (*((_DWORD *)uu1 + 5) == *((_DWORD *)uu2 + 5)
    && *((_DWORD *)uu1 + 4) == *((_DWORD *)uu2 + 4)
    && !uuid_compare(uu1, uu2))
  {
    return 1;
  }
  return TopoID::operator>((uint64_t)uu1, (uint64_t)uu2);
}

uint64_t TopoID::operator>(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 20);
  unsigned int v3 = *(_DWORD *)(a2 + 20);
  if (v2 > v3) {
    return 1;
  }
  if (v2 != v3) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  unsigned int v6 = *(_DWORD *)(a2 + 16);
  if (v5 == v6) {
    return uuid_compare((const unsigned __int8 *)a1, (const unsigned __int8 *)a2) == 1;
  }
  else {
    return v5 > v6;
  }
}

uint64_t __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose_(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table(a1 + 48);
}

void TopoSubstring::~TopoSubstring(TopoSubstring *this)
{
  unsigned int v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
}

void sub_1C3FC0238(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C3FC0368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC0464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC0534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C3FC05EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C3FC0788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC0C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

BOOL TopoSubstring::isStartNode(TopoSubstring *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v4 = 0;
  uuid_copy(dst, UUID_NULL);
  *(_OWORD *)uu2 = *(_OWORD *)dst;
  int v7 = 0;
  int v8 = 0;
  int v6 = v4;
  return TopoIDRange::operator==((unsigned __int8 *)this, uu2);
}

BOOL TopoSubstring::isEndNode(TopoSubstring *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v4 = 0;
  uuid_copy(dst, UUID_NULL);
  *(_OWORD *)uu2 = *(_OWORD *)dst;
  int v6 = v4;
  uint64_t v7 = 0xFFFFFFFFLL;
  return TopoIDRange::operator==((unsigned __int8 *)this, uu2);
}

void sub_1C3FC1224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL TopoIDRange::contains(TopoIDRange *this, const TopoID *uu1)
{
  if (uu1->replica.index == this->charID.replica.index
    && !uuid_compare(uu1->replica.uuid, this->charID.replica.uuid)
    && (clock = uu1->clock, unsigned int v5 = this->charID.clock, clock >= v5))
  {
    return clock < this->length + v5;
  }
  else
  {
    return 0;
  }
}

void sub_1C3FC160C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC1790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC1840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC1A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

TopoIDRange *TopoIDRange::intersection@<X0>(TopoIDRange *this@<X0>, const TopoIDRange *uu2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = this;
  if (this->length) {
    BOOL v5 = uu2->length == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5
    || this->charID.replica.index != uu2->charID.replica.index
    || (this = (TopoIDRange *)uuid_compare(this->charID.replica.uuid, uu2->charID.replica.uuid), this))
  {
    int length = 0;
    *(_OWORD *)a3 = *(_OWORD *)v3->charID.replica.uuid;
    *(void *)(a3 + 16) = *(void *)&v3->charID.replica.index;
  }
  else
  {
    v9.location = v3->charID.clock;
    v9.int length = v3->length;
    v10.location = uu2->charID.clock;
    v10.int length = uu2->length;
    NSRange v8 = NSIntersectionRange(v9, v10);
    int length = v8.length;
    this = (TopoIDRange *)v8.location;
    *(_OWORD *)a3 = *(_OWORD *)v3->charID.replica.uuid;
    *(_DWORD *)(a3 + 16) = v3->charID.replica.index;
    *(_DWORD *)(a3 + 20) = v8.location;
  }
  *(_DWORD *)(a3 + 24) = length;
  return this;
}

void sub_1C3FC1B38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC1C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void TopoSubstring::addAddedBy(TopoSubstring *this, const TopoID *a2)
{
  unint64_t v6 = *((void *)this + 6);
  int v4 = (char *)this + 48;
  unint64_t v5 = v6;
  unint64_t v7 = *((void *)v4 - 1);
  if (v7 >= v6)
  {
    NSRange v10 = (void **)(v4 - 16);
    uint64_t v11 = *((void *)v4 - 2);
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v11) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v11) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>((uint64_t)v4, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    int v17 = &v16[24 * v12];
    int v18 = &v16[24 * v15];
    long long v19 = *(_OWORD *)a2->replica.uuid;
    *((void *)v17 + 2) = *(void *)&a2->replica.index;
    *(_OWORD *)int v17 = v19;
    NSRange v9 = (__n128 *)(v17 + 24);
    unint64_t v21 = (char *)*((void *)this + 4);
    uint64_t v20 = (char *)*((void *)this + 5);
    if (v20 != v21)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 24);
        *((void *)v17 - 1) = *((void *)v20 - 1);
        *(_OWORD *)(v17 - 24) = v22;
        v17 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      uint64_t v20 = (char *)*v10;
    }
    *((void *)this + 4) = v17;
    *((void *)this + 5) = v9;
    *((void *)this + 6) = v18;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    long long v8 = *(_OWORD *)a2->replica.uuid;
    *(void *)(v7 + 16) = *(void *)&a2->replica.index;
    *(_OWORD *)unint64_t v7 = v8;
    NSRange v9 = (__n128 *)(v7 + 24);
  }
  unint64_t v23 = *((void *)this + 4);
  unint64_t v24 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v9 - v23) >> 3));
  *((void *)this + 5) = v9;
  if (v9 == (__n128 *)v23) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v24;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *,false>(v23, v9, (uint64_t)&v26, v25, 1);
}

void sub_1C3FC1E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC21C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::vector<TopoSubstring *>::insert(uint64_t a1, char *__src, char *a3)
{
  unsigned int v3 = a3;
  int v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      long long v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(a1 + 16, v18);
    }
    else {
      long long v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    __p = v19;
    long long v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        unint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        long long v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        long long v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    int v4 = std::vector<TopoSubstring *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)uint64_t __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    NSRange v9 = __src + 8;
    NSRange v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)int v4 = *(void *)v3;
  }
  return v4;
}

void sub_1C3FC247C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C3FC2FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<_NSRange>::reserve(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    NSRange v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    NSRange v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      NSRange v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_1C3FC31A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC33FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  TopoSubstring::~TopoSubstring((TopoSubstring *)va);
  _Unwind_Resume(a1);
}

void sub_1C3FC356C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC3658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC3758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void TopoSubstring::splitAt(TopoSubstring *this)
{
}

void sub_1C3FC37F8(_Unwind_Exception *a1)
{
  MEMORY[0x1C8781440](v1, 0x10A0C409FE6E197);
  _Unwind_Resume(a1);
}

void std::vector<TopoSubstring *>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(char **)a1;
  int64_t v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (uint64_t)v4) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    uint64_t v11 = 0;
    uint64_t v9 = 8 * v6;
    goto LABEL_8;
  }
  unint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(v2, v6);
  int v4 = *(char **)a1;
  uint64_t v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[8 * v6];
  uint64_t v11 = &v7[8 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    uint64_t v13 = *((void *)v8 - 1);
    v8 -= 8;
    *(void *)(v12 - 8) = v13;
    v12 -= 8;
  }
  while (v8 != v4);
  int v4 = *(char **)a1;
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void sub_1C3FC39BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC3B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table(v8);
  _Unwind_Resume(a1);
}

BOOL TopoSubstring::isSequentialWith(TopoSubstring *this, const TopoIDRange *a2)
{
  BOOL result = TopoIDRange::isSequentialWith((TopoIDRange *)this, a2);
  if (result)
  {
    uint64_t v5 = *((void *)this + 4);
    uint64_t v6 = *((void *)this + 5);
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3);
    uint64_t v8 = *(void *)&a2[1].charID.replica.uuid[4];
    if (v7 == 0xAAAAAAAAAAAAAAABLL * ((*(void *)&a2[1].charID.replica.uuid[12] - v8) >> 3))
    {
      if (v6 == v5) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = *((_DWORD *)this + 6);
      if (v7 <= 1) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3);
      }
      while (*(_DWORD *)(v5 + v9 + 16) == *(_DWORD *)(v8 + v9 + 16))
      {
        if (uuid_compare((const unsigned __int8 *)(v5 + v9), (const unsigned __int8 *)(v8 + v9))) {
          break;
        }
        uint64_t v5 = *((void *)this + 4);
        uint64_t v8 = *(void *)&a2[1].charID.replica.uuid[4];
        if (*(_DWORD *)(v5 + v9 + 20) + v10 != *(_DWORD *)(v8 + v9 + 20)) {
          break;
        }
        v9 += 24;
        if (!--v11) {
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

void mergeStringData(void *a1, int a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  id v18 = a1;
  id v11 = a5;
  if (*(void *)(a3 + 40) != *(void *)(a3 + 32))
  {
    if (a2)
    {
      uint64_t v12 = [v18 attributedString];
      *(_DWORD *)(a3 + 84) = CRTTBoundedCheckedCastNSUIntegerToUInt32([v12 length]);

      uint64_t v13 = [v18 attributedString];
      unint64_t v14 = v13;
      if (*(void *)(a4 + 40) == *(void *)(a4 + 32)) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = *(unsigned int *)(a4 + 24);
      }
      objc_msgSend(v13, "cr_appendStorage:fromRange:", v11, *(unsigned int *)(a4 + 84), v15);
LABEL_14:

      goto LABEL_15;
    }
    if (*(_DWORD *)(a4 + 84) != -1 && ((a6 & 1) != 0 || *(void *)(a4 + 40) != *(void *)(a4 + 32)))
    {
      uint64_t v16 = [v18 attributedString];
      unint64_t v14 = v16;
      if (*(void *)(a3 + 40) == *(void *)(a3 + 32)) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = *(unsigned int *)(a3 + 24);
      }
      objc_msgSend(v16, "cr_mergeAttributesInRange:withStorage:fromRange:", *(unsigned int *)(a3 + 84), v17, v11, *(unsigned int *)(a4 + 84), *(unsigned int *)(a4 + 24));
      goto LABEL_14;
    }
  }
LABEL_15:
}

void sub_1C3FC3E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC4108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::destroy(a15);

  _Unwind_Resume(a1);
}

char *std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::operator[](uint64_t **a1, _OWORD *a2)
{
  int v4 = std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::__find_equal<TopoIDRange>((uint64_t)a1, &v8, (uint64_t)a2);
  uint64_t v5 = (_OWORD *)*v4;
  if (!*v4)
  {
    uint64_t v6 = (uint64_t **)v4;
    uint64_t v5 = operator new(0x48uLL);
    v5[2] = *a2;
    *(_OWORD *)((char *)v5 + 44) = *(_OWORD *)((char *)a2 + 12);
    *((void *)v5 + 8) = 0;
    std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::__insert_node_at(a1, v8, v6, (uint64_t *)v5);
  }
  return (char *)(v5 + 4);
}

uint64_t compareSubstring(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  if (*(void *)(a2 + 40) == *(void *)(a2 + 32)) {
    goto LABEL_39;
  }
  *(_OWORD *)long long v27 = *(_OWORD *)a2;
  *(void *)&v27[16] = *(void *)(a2 + 16);
  *(_DWORD *)&v27[24] = 1;
  uint64_t v6 = std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::lower_bound[abi:ne180100](a3, (uint64_t)v27);
  uint64_t v7 = v6;
  if (a3 + 8 == v6) {
    goto LABEL_39;
  }
  BOOL v8 = TopoIDRange::operator==(*(unsigned __int8 **)(v6 + 64), (unsigned __int8 *)a2);
  uint64_t v9 = *(void *)(v7 + 64);
  if (v8)
  {
    if (*(void *)(v9 + 40) != *(void *)(v9 + 32))
    {
      if (*(void *)(a2 + 40) == *(void *)(a2 + 32)) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = *(unsigned int *)(a2 + 24);
      }
      char v11 = (*((uint64_t (**)(id, void, void, void, uint64_t))v5 + 2))(v5, *(unsigned int *)(v9 + 84), *(unsigned int *)(v9 + 24), *(unsigned int *)(a2 + 84), v10);
LABEL_9:
      if ((v11 & 1) == 0) {
        goto LABEL_39;
      }
      goto LABEL_23;
    }
    goto LABEL_39;
  }
  if (!TopoIDRange::intersects((TopoIDRange *)v9, (const TopoIDRange *)a2)) {
    goto LABEL_39;
  }
  uint64_t v12 = *(void *)(v7 + 64);
  if (*(_DWORD *)(v12 + 20) == *(_DWORD *)(a2 + 20))
  {
    if (*(_DWORD *)(v12 + 24) <= *(_DWORD *)(a2 + 24))
    {
      *(_OWORD *)long long v27 = *(_OWORD *)a2;
      *(_OWORD *)&v27[12] = *(_OWORD *)(a2 + 12);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v28 = 0;
      std::vector<TopoID>::__init_with_size[abi:ne180100]<TopoID*,TopoID*>(&v28, *(const void **)(a2 + 32), *(void *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
      unsigned int v31 = 0;
      unsigned int v32 = 0;
      uint64_t v33 = 0;
      std::vector<TopoSubstring *>::__init_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>(&v31, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
      uint64_t v34 = *(void *)(a2 + 80);
      int v21 = 0;
      uuid_clear(uu);
      int v22 = 0;
      int v26 = 0;
      long long v25 = 0u;
      *(_OWORD *)unint64_t v23 = 0u;
      *(_OWORD *)__p = 0u;
      TopoSubstring::splitAt((TopoSubstring *)v27, *(_DWORD *)(*(void *)(v7 + 64) + 24), (TopoSubstring *)uu);
      if (compareSubstring(v5, uu, a3) & 1) != 0 || (compareSubstring(v5, v27, a3))
      {
        TopoSubstring::~TopoSubstring((TopoSubstring *)uu);
        TopoSubstring::~TopoSubstring((TopoSubstring *)v27);
LABEL_23:
        LOBYTE(a3) = 1;
        goto LABEL_40;
      }
      TopoSubstring::~TopoSubstring((TopoSubstring *)uu);
      TopoSubstring::~TopoSubstring((TopoSubstring *)v27);
    }
    else if (*(void *)(v12 + 40) != *(void *)(v12 + 32))
    {
      char v11 = (*((uint64_t (**)(id, void))v5 + 2))(v5, *(unsigned int *)(v12 + 84));
      goto LABEL_9;
    }
LABEL_39:
    LOBYTE(a3) = 0;
    goto LABEL_40;
  }
  *(_OWORD *)long long v27 = *(_OWORD *)a2;
  *(_OWORD *)&v27[12] = *(_OWORD *)(a2 + 12);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  std::vector<TopoID>::__init_with_size[abi:ne180100]<TopoID*,TopoID*>(&v28, *(const void **)(a2 + 32), *(void *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  uint64_t v33 = 0;
  std::vector<TopoSubstring *>::__init_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>(&v31, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  uint64_t v34 = *(void *)(a2 + 80);
  int v21 = 0;
  uuid_clear(uu);
  int v22 = 0;
  int v26 = 0;
  long long v25 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)unint64_t v23 = 0u;
  uint64_t v13 = *(void *)(v7 + 64);
  unsigned int v14 = *(_DWORD *)(v13 + 20);
  unsigned int v15 = *(_DWORD *)(a2 + 20);
  if (v14 >= v15)
  {
    TopoSubstring::splitAt((TopoSubstring *)v27, v14 - v15, (TopoSubstring *)uu);
    char v17 = compareSubstring(v5, uu, a3);
  }
  else
  {
    unsigned int v16 = *(_DWORD *)(v13 + 24) + v14;
    if (v16 >= *(_DWORD *)(a2 + 24) + v15)
    {
      if (*(void *)(v13 + 40) == *(void *)(v13 + 32))
      {
        char v18 = 0;
        LOBYTE(a3) = 0;
        goto LABEL_30;
      }
      char v17 = (*((uint64_t (**)(id, void))v5 + 2))(v5, v15 - v14 + *(_DWORD *)(v13 + 84));
    }
    else
    {
      TopoSubstring::splitAt((TopoSubstring *)v27, v16 - v15, (TopoSubstring *)uu);
      if (compareSubstring(v5, uu, a3))
      {
LABEL_28:
        char v18 = 0;
        LOBYTE(a3) = 1;
        goto LABEL_30;
      }
      char v17 = compareSubstring(v5, v27, a3);
    }
  }
  if (v17) {
    goto LABEL_28;
  }
  char v18 = 1;
LABEL_30:
  if (__p[1])
  {
    *(void **)&long long v25 = __p[1];
    operator delete(__p[1]);
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  if (v31)
  {
    unsigned int v32 = v31;
    operator delete(v31);
  }
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  if (v18) {
    goto LABEL_39;
  }
LABEL_40:

  return a3 & 1;
}

void sub_1C3FC4608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  TopoSubstring::~TopoSubstring((TopoSubstring *)&a21);

  _Unwind_Resume(a1);
}

void sub_1C3FC4C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  _Block_object_dispose(&a27, 8);
  std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::destroy(a34);

  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__18(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  int v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    *uint64_t v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
}

void mergeSubstring(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v19 = a1;
  uint64_t v10 = a2;
  *(_OWORD *)long long v27 = *(_OWORD *)a3;
  *(void *)&v27[16] = *(void *)(a3 + 16);
  *(_DWORD *)&v27[24] = 1;
  uint64_t v11 = std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::lower_bound[abi:ne180100](a4, (uint64_t)v27);
  if (a4 + 8 == v11) {
    goto LABEL_13;
  }
  if (TopoIDRange::operator==(*(unsigned __int8 **)(v11 + 64), (unsigned __int8 *)a3))
  {
    unsigned int v15 = v19;
    (*((void (**)(id, void, uint64_t))v19 + 2))(v19, *(void *)(v11 + 64), a3);
    goto LABEL_14;
  }
  if (!TopoIDRange::intersects(*(TopoIDRange **)(v11 + 64), (const TopoIDRange *)a3))
  {
LABEL_13:
    unsigned int v15 = v19;
    v10[2](v10, a3);
    goto LABEL_14;
  }
  uint64_t v12 = *(void *)(v11 + 64);
  unsigned int v13 = *(_DWORD *)(v12 + 20);
  unsigned int v14 = *(_DWORD *)(a3 + 20);
  if (v13 != v14)
  {
    if (v13 < v14)
    {
      if (a5) {
        operator new();
      }
      TopoSubstring::splitAt((TopoSubstring *)v12);
    }
    *(_OWORD *)long long v27 = *(_OWORD *)a3;
    *(_OWORD *)&v27[12] = *(_OWORD *)(a3 + 12);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v28 = 0;
    std::vector<TopoID>::__init_with_size[abi:ne180100]<TopoID*,TopoID*>(&v28, *(const void **)(a3 + 32), *(void *)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
    unsigned int v31 = 0;
    unsigned int v32 = 0;
    uint64_t v33 = 0;
    std::vector<TopoSubstring *>::__init_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>(&v31, *(const void **)(a3 + 56), *(void *)(a3 + 64), (uint64_t)(*(void *)(a3 + 64) - *(void *)(a3 + 56)) >> 3);
    uint64_t v34 = *(void *)(a3 + 80);
    if (v27 != (unsigned char *)a3) {
      std::vector<TopoSubstring *>::__assign_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>((char *)&v31, *(char **)(a3 + 56), *(void *)(a3 + 64), (uint64_t)(*(void *)(a3 + 64) - *(void *)(a3 + 56)) >> 3);
    }
    int v21 = 0;
    uuid_clear(uu);
    int v22 = 0;
    int v26 = 0;
    long long v25 = 0u;
    *(_OWORD *)unint64_t v23 = 0u;
    *(_OWORD *)__p = 0u;
    unsigned int v15 = v19;
    TopoSubstring::splitAt((TopoSubstring *)v27, *(_DWORD *)(*(void *)(v11 + 64) + 20) - *(_DWORD *)(a3 + 20), (TopoSubstring *)uu);
    uint64_t v16 = a6;
    if (a6) {
      goto LABEL_23;
    }
LABEL_24:
    mergeSubstring(v19, v10, v27, a4, a5, 0);
    char v17 = uu;
    goto LABEL_25;
  }
  if (*(_DWORD *)(v12 + 24) > *(_DWORD *)(a3 + 24))
  {
    if (a5) {
      operator new();
    }
    TopoSubstring::splitAt((TopoSubstring *)v12);
  }
  *(_OWORD *)long long v27 = *(_OWORD *)a3;
  *(_OWORD *)&v27[12] = *(_OWORD *)(a3 + 12);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  std::vector<TopoID>::__init_with_size[abi:ne180100]<TopoID*,TopoID*>(&v28, *(const void **)(a3 + 32), *(void *)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
  unsigned int v31 = 0;
  unsigned int v32 = 0;
  uint64_t v33 = 0;
  std::vector<TopoSubstring *>::__init_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>(&v31, *(const void **)(a3 + 56), *(void *)(a3 + 64), (uint64_t)(*(void *)(a3 + 64) - *(void *)(a3 + 56)) >> 3);
  uint64_t v34 = *(void *)(a3 + 80);
  if (v27 != (unsigned char *)a3) {
    std::vector<TopoSubstring *>::__assign_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>((char *)&v31, *(char **)(a3 + 56), *(void *)(a3 + 64), (uint64_t)(*(void *)(a3 + 64) - *(void *)(a3 + 56)) >> 3);
  }
  int v21 = 0;
  uuid_clear(uu);
  int v22 = 0;
  int v26 = 0;
  long long v25 = 0u;
  *(_OWORD *)unint64_t v23 = 0u;
  *(_OWORD *)__p = 0u;
  unsigned int v15 = v19;
  TopoSubstring::splitAt((TopoSubstring *)v27, *(_DWORD *)(*(void *)(v11 + 64) + 24), (TopoSubstring *)uu);
  uint64_t v16 = a6;
  if (!a6) {
    goto LABEL_24;
  }
LABEL_23:
  mergeSubstring(v15, v10, uu, a4, a5, 1);
  char v17 = v27;
LABEL_25:
  mergeSubstring(v15, v10, v17, a4, a5, v16);
  if (__p[1])
  {
    *(void **)&long long v25 = __p[1];
    operator delete(__p[1]);
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  if (v31)
  {
    unsigned int v32 = v31;
    operator delete(v31);
  }
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
LABEL_14:
}

void sub_1C3FC5644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  TopoSubstring::~TopoSubstring((TopoSubstring *)&a23);

  _Unwind_Resume(a1);
}

void sub_1C3FC5818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC58BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void mergeAddNewSubstring(void *a1, void *a2)
{
  a1;
  id v3 = a2;
  operator new();
}

void sub_1C3FC5AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC5C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC604C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  _Block_object_dispose(&a25, 8);
  std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::destroy(a32);

  _Unwind_Resume(a1);
}

void sub_1C3FC61E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC628C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC64C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC66D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  id v19 = v16;

  _Unwind_Resume(a1);
}

void sub_1C3FC68EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC6D4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC7204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,id a43,char a44)
{
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose((const void *)(v48 - 232), 8);
  _Block_object_dispose((const void *)(v48 - 168), 8);
  _Block_object_dispose((const void *)(v48 - 136), 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__25(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
}

void sub_1C3FC7488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC7784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC7818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC7BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table(v13);
  _Block_object_dispose((const void *)(v16 - 128), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__35(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__36(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table(a1 + 48);
}

void sub_1C3FC818C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

id TopoReplica::toString(TopoReplica *this)
{
  uint64_t v2 = NSString;
  id v3 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:this];
  int v4 = [v3 CRTTShortDescription];
  uint64_t v5 = [v2 stringWithFormat:@"%@.%d", v4, this->index];

  return v5;
}

void sub_1C3FC8300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC83F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC8560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC8778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC88AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC8B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__82(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = *(void *)(a2 + 48);
  return result;
}

void sub_1C3FC8C6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC8D34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC8E7C(_Unwind_Exception *a1)
{
  int v4 = v3;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1C3FC8F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC9018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC9180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC9248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FC9324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::vector<TopoID>::__init_with_size[abi:ne180100]<TopoID*,TopoID*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<TopoID>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C3FC9424(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TopoID>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

BOOL TopoIDRange::operator==(unsigned __int8 *uu1, unsigned __int8 *uu2)
{
  return *((_DWORD *)uu1 + 5) == *((_DWORD *)uu2 + 5)
      && *((_DWORD *)uu1 + 4) == *((_DWORD *)uu2 + 4)
      && !uuid_compare(uu1, uu2)
      && *((_DWORD *)uu1 + 6) == *((_DWORD *)uu2 + 6);
}

char *TopoSubstring::splitAt(TopoSubstring *this, int a2, TopoSubstring *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v6 = *((_DWORD *)this + 4);
  int v7 = *((_DWORD *)this + 5) + a2;
  int v8 = *((_DWORD *)this + 6) - a2;
  *((_DWORD *)this + 6) = a2;
  *(_OWORD *)a3 = *(_OWORD *)this;
  *((_DWORD *)a3 + 4) = v6;
  *((_DWORD *)a3 + 5) = v7;
  *((_DWORD *)a3 + 6) = v8;
  uint64_t v9 = *((void *)this + 5) - *((void *)this + 4);
  if (v9) {
    int v10 = a2;
  }
  else {
    int v10 = 0;
  }
  *((_DWORD *)a3 + 21) = v10 + *((_DWORD *)this + 21);
  uint64_t v11 = (void *)((char *)a3 + 32);
  std::vector<TopoID>::reserve((void **)a3 + 4, 0xAAAAAAAAAAAAAAABLL * (v9 >> 3));
  uint64_t v12 = (long long *)*((void *)this + 4);
  uint64_t v13 = (long long *)*((void *)this + 5);
  if (v12 != v13)
  {
    unsigned int v14 = (void *)((char *)a3 + 48);
    unsigned int v15 = (char *)*((void *)a3 + 5);
    do
    {
      long long v29 = *v12;
      int v16 = *((_DWORD *)v12 + 5);
      int v30 = *((_DWORD *)v12 + 4);
      int v17 = v16 + a2;
      if ((unint64_t)v15 >= *v14)
      {
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v15[-*v11] >> 3);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(*v14 - *v11) >> 3) > v20) {
          unint64_t v20 = 0x5555555555555556 * ((uint64_t)(*v14 - *v11) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v14 - *v11) >> 3) >= 0x555555555555555) {
          unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          int v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>((uint64_t)a3 + 48, v21);
        }
        else {
          int v22 = 0;
        }
        unint64_t v23 = &v22[24 * v19];
        *((_DWORD *)v23 + 4) = v30;
        *(_OWORD *)unint64_t v23 = v29;
        *((_DWORD *)v23 + 5) = v17;
        long long v25 = (char *)*((void *)a3 + 4);
        uint64_t v24 = (char *)*((void *)a3 + 5);
        int v26 = v23;
        if (v24 != v25)
        {
          do
          {
            long long v27 = *(_OWORD *)(v24 - 24);
            *((void *)v26 - 1) = *((void *)v24 - 1);
            *(_OWORD *)(v26 - 24) = v27;
            v26 -= 24;
            v24 -= 24;
          }
          while (v24 != v25);
          uint64_t v24 = (char *)*v11;
        }
        unsigned int v15 = v23 + 24;
        *((void *)a3 + 4) = v26;
        *((void *)a3 + 5) = v23 + 24;
        *((void *)a3 + 6) = &v22[24 * v21];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        int v18 = *((_DWORD *)v12 + 4);
        *(_OWORD *)unsigned int v15 = *v12;
        *((_DWORD *)v15 + 4) = v18;
        *((_DWORD *)v15 + 5) = v17;
        v15 += 24;
      }
      *((void *)a3 + 5) = v15;
      uint64_t v12 = (long long *)((char *)v12 + 24);
    }
    while (v12 != v13);
  }
  if (a3 != this) {
    std::vector<TopoSubstring *>::__assign_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>((char *)a3 + 56, *((char **)this + 7), *((void *)this + 8), (uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3);
  }
  *(void *)&long long v29 = a3;
  __n128 result = std::vector<TopoSubstring *>::__assign_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>((char *)this + 56, (char *)&v29, (uint64_t)&v29 + 8, 1uLL);
  *((_DWORD *)a3 + 20) = 1;
  return result;
}

void std::vector<TopoID>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    int v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>(v3, a2);
    int v7 = &v6[24 * v5];
    uint64_t v9 = &v6[24 * v8];
    uint64_t v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

BOOL TopoIDRange::isSequentialWith(TopoIDRange *this, const TopoIDRange *a2)
{
  return this->charID.replica.index == a2->charID.replica.index
      && !uuid_compare(this->charID.replica.uuid, a2->charID.replica.uuid)
      && this->length + this->charID.clock == a2->charID.clock;
}

uint64_t std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::lower_bound[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    do
    {
      *(_OWORD *)v19.replica.uuid = *(_OWORD *)(v3 + 32);
      unsigned int v5 = *(_DWORD *)(v3 + 48);
      int v6 = *(_DWORD *)(v3 + 52);
      int v7 = *(_DWORD *)(v3 + 56);
      *(_OWORD *)v18.replica.uuid = *(_OWORD *)a2;
      unsigned int v8 = *(_DWORD *)(a2 + 16);
      int v9 = *(_DWORD *)(a2 + 20);
      BOOL v10 = v7 != 0;
      int v11 = v7 - 1;
      if (!v10) {
        int v11 = 0;
      }
      unsigned int v12 = v11 + v6;
      int v13 = *(_DWORD *)(a2 + 24);
      v19.replica.unsigned int index = v5;
      v19.unsigned int clock = v12;
      int v14 = v13 - 1;
      if (!v13) {
        int v14 = 0;
      }
      v18.replica.unsigned int index = v8;
      v18.unsigned int clock = v14 + v9;
      BOOL v15 = TopoID::lessThanOrderingReplicaFirst(&v19, &v18);
      int v16 = (uint64_t *)(v3 + 8);
      if (!v15)
      {
        int v16 = (uint64_t *)v3;
        uint64_t v2 = v3;
      }
      uint64_t v3 = *v16;
    }
    while (*v16);
  }
  return v2;
}

BOOL TopoIDRange::intersects(TopoIDRange *this, const TopoIDRange *uu1)
{
  if (uu1->charID.replica.index != this->charID.replica.index
    || uuid_compare(uu1->charID.replica.uuid, this->charID.replica.uuid))
  {
    return 0;
  }
  unsigned int clock = this->charID.clock;
  unsigned int v6 = uu1->charID.clock;
  return v6 < this->length + clock && uu1->length + v6 > clock;
}

BOOL TopoID::lessThanOrderingReplicaFirst(TopoID *this, const TopoID *a2)
{
  unsigned int index = this->replica.index;
  unsigned int v3 = a2->replica.index;
  BOOL v4 = index >= v3;
  if (index != v3)
  {
    uint64_t v8 = -1;
    if (v4) {
      uint64_t v8 = 1;
    }
    return v8 == -1;
  }
  int v7 = uuid_compare(this->replica.uuid, a2->replica.uuid);
  if (v7)
  {
    uint64_t v8 = v7;
    return v8 == -1;
  }
  return this->clock < a2->clock;
}

void *std::vector<TopoSubstring *>::__init_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v6 = result;
    __n128 result = std::vector<TopoSubstring *>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C3FC9AAC(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<TopoSubstring *>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::erase[abi:ne180100](uint64_t **a1, uint64_t *a2)
{
  unsigned int v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      uint64_t v4 = v3;
      unsigned int v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    unsigned int v5 = a2;
    do
    {
      uint64_t v4 = (uint64_t *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      unsigned int v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  uint64_t v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, a2);
  operator delete(a2);
}

_OWORD *std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::insert[abi:ne180100]<std::pair<TopoIDRange,TopoSubstring *>,void>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::__find_equal<TopoIDRange>((uint64_t)a1, &v8, a2);
  unsigned int v5 = (_OWORD *)*v4;
  if (!*v4)
  {
    BOOL v6 = (uint64_t **)v4;
    unsigned int v5 = operator new(0x48uLL);
    v5[2] = *(_OWORD *)a2;
    *(_OWORD *)((char *)v5 + 44) = *(_OWORD *)(a2 + 12);
    *((void *)v5 + 8) = *(void *)(a2 + 32);
    std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::__insert_node_at(a1, v8, v6, (uint64_t *)v5);
  }
  return v5;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unsigned int v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unsigned int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unsigned int v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *BOOL v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      __n128 result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    void v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unsigned int v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      __n128 result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      int v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *int v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        __n128 result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    BOOL v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      int v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        void v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        void v7[2] = (uint64_t)v15;
        int v16 = v7;
      }
      else
      {
        BOOL v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      void v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *uint64_t v24 = v23;
      goto LABEL_72;
    }
    int v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      int v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    void v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      __n128 result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  TopoID v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    void v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *uint64_t v20 = (uint64_t)v7;
    void v7[2] = (uint64_t)v20;
    TopoID v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  void v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t *std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::__find_equal<TopoIDRange>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        *(_OWORD *)v29.replica.uuid = *(_OWORD *)a3;
        unsigned int v8 = *(_DWORD *)(a3 + 16);
        int v9 = *(_DWORD *)(a3 + 20);
        int v10 = *(_DWORD *)(a3 + 24);
        *(_OWORD *)v28.replica.uuid = *((_OWORD *)v7 + 2);
        unsigned int v11 = *((_DWORD *)v7 + 12);
        int v12 = *((_DWORD *)v7 + 13);
        BOOL v13 = v10 != 0;
        int v14 = v10 - 1;
        if (!v13) {
          int v14 = 0;
        }
        unsigned int v15 = v14 + v9;
        int v16 = *((_DWORD *)v7 + 14);
        v29.replica.unsigned int index = v8;
        v29.unsigned int clock = v15;
        int v17 = v16 - 1;
        if (!v16) {
          int v17 = 0;
        }
        v28.replica.unsigned int index = v11;
        v28.unsigned int clock = v17 + v12;
        if (!TopoID::lessThanOrderingReplicaFirst(&v29, &v28)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v7;
        int v5 = v7;
        if (!*v7) {
          goto LABEL_17;
        }
      }
      *(_OWORD *)v29.replica.uuid = *((_OWORD *)v7 + 2);
      unsigned int v18 = *((_DWORD *)v7 + 12);
      int v19 = *((_DWORD *)v7 + 13);
      int v20 = *((_DWORD *)v7 + 14);
      *(_OWORD *)v28.replica.uuid = *(_OWORD *)a3;
      unsigned int v21 = *(_DWORD *)(a3 + 16);
      int v22 = *(_DWORD *)(a3 + 20);
      BOOL v13 = v20 != 0;
      int v23 = v20 - 1;
      if (!v13) {
        int v23 = 0;
      }
      unsigned int v24 = v23 + v19;
      int v25 = *(_DWORD *)(a3 + 24);
      v29.replica.unsigned int index = v18;
      v29.unsigned int clock = v24;
      int v26 = v25 - 1;
      if (!v25) {
        int v26 = 0;
      }
      v28.replica.unsigned int index = v21;
      v28.unsigned int clock = v26 + v22;
      if (!TopoID::lessThanOrderingReplicaFirst(&v29, &v28)) {
        break;
      }
      int v5 = v7 + 1;
      uint64_t v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 8);
  }
LABEL_17:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unsigned int v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), int v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            int v9 = (uint64_t **)a2[2];
          }
          else
          {
            int v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              unsigned int v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *int v9 = v2;
            void v2[2] = (uint64_t)v9;
            unsigned int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unsigned int v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          void v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), int v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unsigned int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          void v2[2] = (uint64_t)a2;
          unsigned int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        void v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        void v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void mergeAddChildren(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *(long long ***)(a2 + 56);
  uint64_t v4 = *(long long ***)(a2 + 64);
  if (v3 != v4)
  {
    uint64_t v7 = a3 + 8;
    do
    {
      int v8 = *v3;
      int v9 = *(uint64_t **)(a1 + 56);
      int v10 = *(uint64_t **)(a1 + 64);
      while (v9 != v10)
      {
        uint64_t v11 = *v9;
        if (*((_DWORD *)v8 + 5) == *(_DWORD *)(*v9 + 20)
          && *((_DWORD *)v8 + 4) == *(_DWORD *)(v11 + 16)
          && !uuid_compare((const unsigned __int8 *)v8, (const unsigned __int8 *)v11))
        {
          goto LABEL_11;
        }
        ++v9;
      }
      long long v13 = *v8;
      uint64_t v14 = *((void *)v8 + 2);
      int v15 = 1;
      uint64_t v12 = std::map<TopoIDRange,TopoSubstring *,$_2,std::allocator<std::pair<TopoIDRange const,TopoSubstring *>>>::lower_bound[abi:ne180100](a3, (uint64_t)&v13);
      if (v7 == v12) {
        mergeAddChildren();
      }
      TopoSubstring::addChild((TopoSubstring *)a1, *(TopoSubstring **)(v12 + 64));
LABEL_11:
      ++v3;
    }
    while (v3 != v4);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *,false>(unint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = (__n128 *)((char *)a2 - 24);
  uint64_t v12 = (__n128 *)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (unint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (TopoID::operator<((uint64_t)&a2[-2].n128_i64[1], (uint64_t)v12))
          {
            unint64_t v31 = v12[1].n128_u64[0];
            __n128 v29 = *v12;
            __n128 v27 = *v11;
            v12[1].n128_u64[0] = a2[-1].n128_u64[1];
            *uint64_t v12 = v27;
            *uint64_t v11 = v29;
            a2[-1].n128_u64[1] = v31;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)v12, (uint64_t)&v12[1].n128_i64[1], (uint64_t)&a2[-2].n128_i64[1]);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(v12, (uint64_t)&v12[1].n128_i64[1], (uint64_t)&v12[3], (uint64_t)&a2[-2].n128_i64[1]);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(v12, (uint64_t)&v12[1].n128_i64[1], (uint64_t)&v12[3], (uint64_t)&v12[4].n128_i64[1], (uint64_t)&a2[-2].n128_i64[1]);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *,TopoID *>((uint64_t)v12, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = (uint64_t)v12 + 24 * (v16 >> 1);
    if ((unint64_t)v15 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)v12, (uint64_t)v12 + 24 * (v16 >> 1), (uint64_t)&a2[-2].n128_i64[1]);
      uint64_t v19 = 3 * v17;
      uint64_t v20 = (uint64_t)&v12[-1] + 24 * v17 - 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)&v12[1].n128_i64[1], v20, (uint64_t)&a2[-3]);
      uint64_t v21 = (uint64_t)&v12[3];
      uint64_t v22 = (uint64_t)&v12[1].n128_i64[v19 + 1];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(v21, v22, (uint64_t)&a2[-5].n128_i64[1]);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(v20, v18, v22);
      uint64_t v30 = *(void *)(a1 + 16);
      long long v28 = *(_OWORD *)a1;
      long long v23 = *(_OWORD *)v18;
      *(void *)(a1 + 16) = *(void *)(v18 + 16);
      *(_OWORD *)a1 = v23;
      *(void *)(v18 + 16) = v30;
      *(_OWORD *)uint64_t v18 = v28;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)v12 + 24 * (v16 >> 1), (uint64_t)v12, (uint64_t)&a2[-2].n128_i64[1]);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((TopoID::operator<(a1 - 24, a1) & 1) == 0)
    {
      uint64_t v12 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TopoID *,std::__less<void,void> &>(a1, (unint64_t)a2);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TopoID *,std::__less<void,void> &>((long long *)a1, (unint64_t)a2);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((__n128 *)a1, (__n128 *)v24);
    uint64_t v12 = (__n128 *)(v24 + 24);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((__n128 *)(v24 + 24), a2))
    {
      a4 = -v14;
      a2 = (__n128 *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v26)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *,false>(a1, v24, a3, -v14, a5 & 1);
      uint64_t v12 = (__n128 *)(v24 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)v12, (uint64_t)a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)v12, (uint64_t)a2);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(uint64_t result, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = result;
      do
      {
        uint64_t v7 = v6;
        uint64_t v6 = v4;
        __n128 result = TopoID::operator<(v4, v7);
        if (result)
        {
          long long v11 = *(_OWORD *)v6;
          uint64_t v12 = *(void *)(v6 + 16);
          uint64_t v8 = v5;
          while (1)
          {
            uint64_t v9 = v3 + v8;
            *(_OWORD *)(v9 + 24) = *(_OWORD *)(v3 + v8);
            *(void *)(v9 + 40) = *(void *)(v3 + v8 + 16);
            if (!v8) {
              break;
            }
            v8 -= 24;
            __n128 result = TopoID::operator<((uint64_t)&v11, v8 + v3);
            if ((result & 1) == 0)
            {
              uint64_t v10 = v3 + v8 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v10 = v3;
LABEL_10:
          *(_OWORD *)uint64_t v10 = v11;
          *(void *)(v10 + 16) = v12;
        }
        uint64_t v4 = v6 + 24;
        v5 += 24;
      }
      while (v6 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(uint64_t result, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v5 = result - 24;
      do
      {
        uint64_t v6 = v3;
        uint64_t v3 = v4;
        __n128 result = TopoID::operator<(v4, v6);
        if (result)
        {
          long long v8 = *(_OWORD *)v3;
          uint64_t v9 = *(void *)(v3 + 16);
          uint64_t v7 = v5;
          do
          {
            *(_OWORD *)(v7 + 48) = *(_OWORD *)(v7 + 24);
            *(void *)(v7 + 64) = *(void *)(v7 + 40);
            __n128 result = TopoID::operator<((uint64_t)&v8, v7);
            v7 -= 24;
          }
          while ((result & 1) != 0);
          *(_OWORD *)(v7 + 48) = v8;
          *(void *)(v7 + 64) = v9;
        }
        uint64_t v4 = v3 + 24;
        v5 += 24;
      }
      while (v3 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = TopoID::operator<(a2, a1);
  uint64_t result = TopoID::operator<(a3, a2);
  if ((v6 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v11 = *(void *)(a2 + 16);
    long long v12 = *(_OWORD *)a2;
    uint64_t v13 = *(void *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = v13;
    *(_OWORD *)a3 = v12;
    *(void *)(a3 + 16) = v11;
    if (!TopoID::operator<(a2, a1)) {
      return 1;
    }
    uint64_t v14 = *(void *)(a1 + 16);
    long long v15 = *(_OWORD *)a1;
    uint64_t v16 = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v16;
    *(_OWORD *)a2 = v15;
    *(void *)(a2 + 16) = v14;
    return 2;
  }
  if (!result)
  {
    uint64_t v17 = *(void *)(a1 + 16);
    long long v18 = *(_OWORD *)a1;
    uint64_t v19 = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v19;
    *(_OWORD *)a2 = v18;
    *(void *)(a2 + 16) = v17;
    if (!TopoID::operator<(a3, a2)) {
      return 1;
    }
    uint64_t v20 = *(void *)(a2 + 16);
    long long v21 = *(_OWORD *)a2;
    uint64_t v22 = *(void *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = v22;
    *(_OWORD *)a3 = v21;
    *(void *)(a3 + 16) = v20;
    return 2;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  long long v9 = *(_OWORD *)a1;
  uint64_t v10 = *(void *)(a3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(void *)(a1 + 16) = v10;
  *(_OWORD *)a3 = v9;
  *(void *)(a3 + 16) = v8;
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TopoID *,std::__less<void,void> &>(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v14 = *(_OWORD *)a1;
  uint64_t v15 = *(void *)(a1 + 16);
  if (TopoID::operator<((uint64_t)&v14, a2 - 24))
  {
    unint64_t v4 = a1;
    do
      v4 += 24;
    while ((TopoID::operator<((uint64_t)&v14, v4) & 1) == 0);
  }
  else
  {
    unint64_t v5 = a1 + 24;
    do
    {
      unint64_t v4 = v5;
      if (v5 >= v2) {
        break;
      }
      int v6 = TopoID::operator<((uint64_t)&v14, v5);
      unint64_t v5 = v4 + 24;
    }
    while (!v6);
  }
  if (v4 < v2)
  {
    do
      v2 -= 24;
    while ((TopoID::operator<((uint64_t)&v14, v2) & 1) != 0);
  }
  while (v4 < v2)
  {
    long long v7 = *(_OWORD *)v4;
    uint64_t v17 = *(void *)(v4 + 16);
    long long v16 = v7;
    long long v8 = *(_OWORD *)v2;
    *(void *)(v4 + 16) = *(void *)(v2 + 16);
    *(_OWORD *)unint64_t v4 = v8;
    long long v9 = v16;
    *(void *)(v2 + 16) = v17;
    *(_OWORD *)unint64_t v2 = v9;
    do
      v4 += 24;
    while (!TopoID::operator<((uint64_t)&v14, v4));
    do
      v2 -= 24;
    while ((TopoID::operator<((uint64_t)&v14, v2) & 1) != 0);
  }
  uint64_t v10 = (long long *)(v4 - 24);
  if (v4 - 24 != a1)
  {
    long long v11 = *v10;
    *(void *)(a1 + 16) = *(void *)(v4 - 8);
    *(_OWORD *)a1 = v11;
  }
  long long v12 = v14;
  *(void *)(v4 - 8) = v15;
  long long *v10 = v12;
  return v4;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TopoID *,std::__less<void,void> &>(long long *a1, unint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v15 = *a1;
  uint64_t v16 = *((void *)a1 + 2);
  do
    v4 += 24;
  while ((TopoID::operator<((uint64_t)a1 + v4, (uint64_t)&v15) & 1) != 0);
  unint64_t v5 = (unint64_t)a1 + v4;
  uint64_t v6 = (uint64_t)a1 + v4 - 24;
  if (v4 == 24)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      a2 -= 24;
    }
    while ((TopoID::operator<(a2, (uint64_t)&v15) & 1) == 0);
  }
  else
  {
    do
      a2 -= 24;
    while (!TopoID::operator<(a2, (uint64_t)&v15));
  }
  if (v5 < a2)
  {
    unint64_t v7 = (unint64_t)a1 + v4;
    unint64_t v8 = a2;
    do
    {
      long long v17 = *(_OWORD *)v7;
      long long v9 = v17;
      uint64_t v18 = *(void *)(v7 + 16);
      uint64_t v10 = v18;
      uint64_t v11 = *(void *)(v8 + 16);
      *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
      *(void *)(v7 + 16) = v11;
      *(void *)(v8 + 16) = v10;
      *(_OWORD *)unint64_t v8 = v9;
      do
        v7 += 24;
      while ((TopoID::operator<(v7, (uint64_t)&v15) & 1) != 0);
      do
        v8 -= 24;
      while (!TopoID::operator<(v8, (uint64_t)&v15));
    }
    while (v7 < v8);
    uint64_t v6 = v7 - 24;
  }
  if ((long long *)v6 != a1)
  {
    long long v12 = *(_OWORD *)v6;
    *((void *)a1 + 2) = *(void *)(v6 + 16);
    *a1 = v12;
  }
  long long v13 = v15;
  *(void *)(v6 + 16) = v16;
  *(_OWORD *)uint64_t v6 = v13;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(__n128 *a1, __n128 *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = (__n128 *)((char *)a2 - 24);
      if (TopoID::operator<((uint64_t)&a2[-2].n128_i64[1], (uint64_t)a1))
      {
        unint64_t v7 = a1[1].n128_u64[0];
        __n128 v8 = *a1;
        unint64_t v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        *uint64_t v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a2[-2].n128_i64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a1[3], (uint64_t)&a2[-2].n128_i64[1]);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a1[3], (uint64_t)&a1[4].n128_i64[1], (uint64_t)&a2[-2].n128_i64[1]);
      return 1;
    default:
      uint64_t v10 = (uint64_t)&a1[3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)a1, (uint64_t)&a1[1].n128_i64[1], (uint64_t)&a1[3]);
      uint64_t v11 = (uint64_t)&a1[4].n128_i64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (TopoID::operator<(v11, v10))
    {
      long long v17 = *(_OWORD *)v11;
      uint64_t v18 = *(void *)(v11 + 16);
      uint64_t v14 = v12;
      while (1)
      {
        long long v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((void *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if ((TopoID::operator<((uint64_t)&v17, (uint64_t)(v15 + 24)) & 1) == 0)
        {
          uint64_t v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      uint64_t v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v17;
      *(void *)(v16 + 16) = v18;
      if (++v13 == 8) {
        return v11 + 24 == (void)a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 24;
    v11 += 24;
    if ((__n128 *)v11 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>((uint64_t)a1, a2, a3);
  if (TopoID::operator<(a4, a3))
  {
    uint64_t v9 = *(void *)(a3 + 16);
    long long v10 = *(_OWORD *)a3;
    uint64_t v11 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(void *)(a4 + 16) = v9;
    if (TopoID::operator<(a3, a2))
    {
      uint64_t v12 = *(void *)(a2 + 16);
      __n128 v13 = *(__n128 *)a2;
      uint64_t v14 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v14;
      *(__n128 *)a3 = v13;
      *(void *)(a3 + 16) = v12;
      if (TopoID::operator<(a2, (uint64_t)a1))
      {
        unint64_t v15 = a1[1].n128_u64[0];
        __n128 result = *a1;
        unint64_t v16 = *(void *)(a2 + 16);
        *a1 = *(__n128 *)a2;
        a1[1].n128_u64[0] = v16;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v15;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(a1, a2, a3, a4);
  if (TopoID::operator<(a5, a4))
  {
    uint64_t v11 = *(void *)(a4 + 16);
    long long v12 = *(_OWORD *)a4;
    uint64_t v13 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v13;
    *(_OWORD *)a5 = v12;
    *(void *)(a5 + 16) = v11;
    if (TopoID::operator<(a4, a3))
    {
      uint64_t v14 = *(void *)(a3 + 16);
      long long v15 = *(_OWORD *)a3;
      uint64_t v16 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v16;
      *(_OWORD *)a4 = v15;
      *(void *)(a4 + 16) = v14;
      if (TopoID::operator<(a3, a2))
      {
        uint64_t v17 = *(void *)(a2 + 16);
        __n128 v18 = *(__n128 *)a2;
        uint64_t v19 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v19;
        *(__n128 *)a3 = v18;
        *(void *)(a3 + 16) = v17;
        if (TopoID::operator<(a2, (uint64_t)a1))
        {
          unint64_t v20 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v21 = *(void *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v21;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v20;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *,TopoID *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 24;
    if (a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 24 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(a1, a4, v9, v12);
        v12 -= 24;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if (TopoID::operator<(v14, a1))
        {
          uint64_t v15 = *(void *)(v14 + 16);
          long long v16 = *(_OWORD *)v14;
          uint64_t v17 = *(void *)(a1 + 16);
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(void *)(v14 + 16) = v17;
          *(_OWORD *)a1 = v16;
          *(void *)(a1 + 16) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(a1, a4, v9, a1);
        }
        v14 += 24;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      uint64_t v19 = a2 - 24;
      do
      {
        long long v24 = *(_OWORD *)a1;
        uint64_t v25 = *(void *)(a1 + 16);
        uint64_t v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(a1, a4, v18);
        if (v19 == v20)
        {
          *(_OWORD *)uint64_t v20 = v24;
          *(void *)(v20 + 16) = v25;
        }
        else
        {
          long long v21 = *(_OWORD *)v19;
          *(void *)(v20 + 16) = *(void *)(v19 + 16);
          *(_OWORD *)uint64_t v20 = v21;
          *(_OWORD *)uint64_t v19 = v24;
          *(void *)(v19 + 16) = v25;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(a1, v20 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v20 + 24 - a1) >> 3));
        }
        v19 -= 24;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 3)))
    {
      uint64_t v9 = (0x5555555555555556 * ((a4 - a1) >> 3)) | 1;
      uint64_t v10 = a1 + 24 * v9;
      uint64_t v11 = 0x5555555555555556 * ((a4 - a1) >> 3) + 2;
      if (v11 < a3 && TopoID::operator<(a1 + 24 * v9, v10 + 24))
      {
        v10 += 24;
        uint64_t v9 = v11;
      }
      if ((TopoID::operator<(v10, v5) & 1) == 0)
      {
        __n128 v17 = *(__n128 *)v5;
        unint64_t v18 = *(void *)(v5 + 16);
        do
        {
          uint64_t v13 = (__n128 *)v10;
          long long v14 = *(_OWORD *)v10;
          *(void *)(v5 + 16) = *(void *)(v10 + 16);
          *(_OWORD *)uint64_t v5 = v14;
          if (v7 < v9) {
            break;
          }
          uint64_t v15 = (2 * v9) | 1;
          uint64_t v10 = a1 + 24 * v15;
          uint64_t v16 = 2 * v9 + 2;
          if (v16 < a3)
          {
            if (TopoID::operator<(a1 + 24 * v15, v10 + 24))
            {
              v10 += 24;
              uint64_t v15 = v16;
            }
          }
          uint64_t v5 = (uint64_t)v13;
          uint64_t v9 = v15;
        }
        while (!TopoID::operator<(v10, (uint64_t)&v17));
        __n128 result = v17;
        v13[1].n128_u64[0] = v18;
        *uint64_t v13 = result;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1 + 24 * v5 + 24;
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 < a3 && TopoID::operator<(a1 + 24 * v5 + 24, a1 + 24 * v5 + 48))
    {
      v8 += 24;
      uint64_t v9 = v10;
    }
    long long v11 = *(_OWORD *)v8;
    *(void *)(a1 + 16) = *(void *)(v8 + 16);
    *(_OWORD *)a1 = v11;
    a1 = v8;
    uint64_t v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,TopoID *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a4 >= 2)
  {
    unint64_t v5 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v6 = a1 + 24 * v5;
    uint64_t v7 = a2 - 24;
    if (TopoID::operator<(v6, a2 - 24))
    {
      long long v11 = *(_OWORD *)v7;
      uint64_t v12 = *(void *)(v7 + 16);
      do
      {
        uint64_t v9 = v6;
        long long v10 = *(_OWORD *)v6;
        *(void *)(v7 + 16) = *(void *)(v6 + 16);
        *(_OWORD *)uint64_t v7 = v10;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = a1 + 24 * v5;
        uint64_t v7 = v9;
      }
      while ((TopoID::operator<(v6, (uint64_t)&v11) & 1) != 0);
      double result = *(double *)&v11;
      *(_OWORD *)uint64_t v9 = v11;
      *(void *)(v9 + 16) = v12;
    }
  }
  return result;
}

char *std::vector<TopoSubstring *>::__assign_with_size[abi:ne180100]<TopoSubstring **,TopoSubstring **>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = std::vector<TopoSubstring *>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<minIdPathData,TopoSubstring *>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

void *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    double result = (void *)result[2];
    if (result)
    {
      do
      {
        unint64_t v2 = (void *)*result;
        operator delete(result);
        double result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1C3FCBC78(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<TopoSubstring *,unsigned long>,void *> *>>(void *a1, __n128 *a2, __n128 *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  unint64_t v8 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      unint64_t v9 = a2[1].n128_u64[1];
      v8[2] = a2[1].n128_u64[0];
      unint64_t v8[3] = v9;
      unint64_t v10 = (void *)*v8;
      std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi(a1, v8);
      a2 = (__n128 *)a2->n128_u64[0];
      unint64_t v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      uint8x8_t v11 = (void *)*v8;
      operator delete(v8);
      unint64_t v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__emplace_multi<std::pair<TopoSubstring * const,unsigned long> const&>(a1, a2 + 1);
      a2 = (__n128 *)a2->n128_u64[0];
    }
  }
}

void sub_1C3FCBD50(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    unint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1C3FCBD70(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi(void *a1, void *a2)
{
  unint64_t v4 = a2 + 2;
  unint64_t v5 = a2[2];
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  a2[1] = v8;
  inserted = std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v8, v4);
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

void *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  float v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    double result = v16;
    float v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && v16[2] == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *uint64_t v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__emplace_multi<std::pair<TopoSubstring * const,unsigned long> const&>(void *a1, __n128 *a2)
{
  std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__construct_node<std::pair<TopoSubstring * const,unsigned long> const&>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__node_insert_multi(a1, v4);
}

void sub_1C3FCC2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned long>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned long>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned long>>>::__construct_node<std::pair<TopoSubstring * const,unsigned long> const&>@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (__n128 *)operator new(0x20uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  __n128 result = *a2;
  v6[1] = *a2;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t v8 = v6[1].n128_u64[0];
  unint64_t v9 = HIDWORD(v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
  v6->n128_u64[0] = 0;
  v6->n128_u64[1] = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69
                                                                         * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  return result;
}

void *std::get_temporary_buffer[abi:ne180100]<std::pair<minIdPathData,TopoSubstring *>>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v1 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v1 = a1;
  }
  unint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    __n128 result = operator new(48 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

double std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(uint64_t a1, long long *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  if (a3 < 2) {
    return a6.n128_f64[0];
  }
  uint64_t v7 = a1;
  if (a3 != 2)
  {
    if ((uint64_t)a3 > 0)
    {
      size_t v13 = a4;
      unint64_t v14 = a3 >> 1;
      unint64_t v15 = (__n128 *)(a1 + 48 * (a3 >> 1));
      unint64_t v16 = a3 >> 1;
      if ((uint64_t)a3 > a5)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(a1, v15, v16, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(v7 + 48 * (a3 >> 1), a2, a3 - (a3 >> 1), v13, a5);
        a6.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>((long long *)v7, (long long *)(v7 + 48 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (long long *)v13, a5).n128_u64[0];
        return a6.n128_f64[0];
      }
      __n128 v41 = std::__stable_sort_move<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>((__n128 *)a1, v15, v16, a4, a6);
      long long v42 = &v13[3 * v14];
      a6.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>((__n128 *)(v7 + 48 * (a3 >> 1)), (__n128 *)a2, a3 - (a3 >> 1), v42, v41).n128_u64[0];
      char v43 = &v13[3 * a3];
      long long v44 = v42;
      while (1)
      {
        if (v44 == v43)
        {
          if (v13 != v42)
          {
            uint64_t v55 = 0;
            do
            {
              long long v56 = &v13[v55];
              int v57 = (__n128 *)(v7 + v55 * 16);
              a6 = v13[v55];
              __n128 v58 = v13[v55 + 1];
              v57[2].n128_u64[0] = v13[v55 + 2].n128_u64[0];
              __n128 *v57 = a6;
              v57[1] = v58;
              v57[2].n128_u64[1] = v13[v55 + 2].n128_u64[1];
              v55 += 3;
            }
            while (&v56[3] != v42);
          }
          return a6.n128_f64[0];
        }
        __n128 v45 = *v44;
        __n128 v46 = v44[2];
        __n128 v79 = v44[1];
        __n128 v80 = v46;
        __n128 v78 = v45;
        __n128 v47 = v13[2];
        long long v48 = (__int128)*v13;
        __n128 v76 = v13[1];
        __n128 v77 = v47;
        long long v75 = v48;
        if (v79.n128_u64[1] == v76.n128_u64[1])
        {
          if ((TopoID::operator<((uint64_t)&v78, (uint64_t)&v75) & 1) == 0)
          {
LABEL_39:
            a6 = *v13;
            __n128 v50 = v13[1];
            *(void *)(v7 + 32) = v13[2].n128_u64[0];
            *(__n128 *)uint64_t v7 = a6;
            *(__n128 *)(v7 + 16) = v50;
            *(void *)(v7 + 40) = v13[2].n128_u64[1];
            v13 += 3;
            goto LABEL_40;
          }
        }
        else if (v79.n128_u64[1] >= v76.n128_u64[1])
        {
          goto LABEL_39;
        }
        a6 = *v44;
        __n128 v49 = v44[1];
        *(void *)(v7 + 32) = v44[2].n128_u64[0];
        *(__n128 *)uint64_t v7 = a6;
        *(__n128 *)(v7 + 16) = v49;
        *(void *)(v7 + 40) = v44[2].n128_u64[1];
        v44 += 3;
LABEL_40:
        v7 += 48;
        if (v13 == v42)
        {
          if (v44 != v43)
          {
            uint64_t v51 = 0;
            do
            {
              int v52 = &v44[v51];
              int v53 = (__n128 *)(v7 + v51 * 16);
              a6 = v44[v51];
              __n128 v54 = v44[v51 + 1];
              v53[2].n128_u64[0] = v44[v51 + 2].n128_u64[0];
              *int v53 = a6;
              v53[1] = v54;
              v53[2].n128_u64[1] = v44[v51 + 2].n128_u64[1];
              v51 += 3;
            }
            while (&v52[3] != v43);
          }
          return a6.n128_f64[0];
        }
      }
    }
    if ((long long *)a1 == a2) {
      return a6.n128_f64[0];
    }
    unint64_t v23 = (__n128 *)(a1 + 48);
    if ((long long *)(a1 + 48) == a2) {
      return a6.n128_f64[0];
    }
    uint64_t v24 = 0;
    uint64_t v25 = (__n128 *)a1;
LABEL_17:
    BOOL v26 = v25;
    uint64_t v25 = v23;
    __n128 v27 = *v23;
    __n128 v28 = v23[2];
    __n128 v79 = v23[1];
    __n128 v80 = v28;
    __n128 v78 = v27;
    a6 = v26[2];
    long long v29 = (__int128)*v26;
    __n128 v76 = v26[1];
    __n128 v77 = a6;
    long long v75 = v29;
    if (v79.n128_u64[1] == v76.n128_u64[1])
    {
      if ((TopoID::operator<((uint64_t)&v78, (uint64_t)&v75) & 1) == 0) {
        goto LABEL_30;
      }
    }
    else if (v79.n128_u64[1] >= v76.n128_u64[1])
    {
      goto LABEL_30;
    }
    __n128 v30 = v25[1];
    __n128 v72 = *v25;
    __n128 v73 = v30;
    unint64_t v74 = v25[2].n128_u64[0];
    uint64_t v31 = v26[5].n128_i64[1];
    __n128 v32 = *v26;
    __n128 v33 = v26[1];
    v25[2].n128_u64[0] = v26[2].n128_u64[0];
    *uint64_t v25 = v32;
    v25[1] = v33;
    v25[2].n128_u64[1] = v26[2].n128_u64[1];
    if (v26 == (__n128 *)v7)
    {
LABEL_28:
      BOOL v26 = (__n128 *)v7;
      goto LABEL_29;
    }
    uint64_t v34 = v24;
    while (1)
    {
      uint64_t v35 = v7 + v34;
      v69[0] = v72;
      v69[1] = v73;
      unint64_t v70 = v74;
      uint64_t v71 = v31;
      long long v36 = *(_OWORD *)(v7 + v34 - 16);
      long long v37 = *(_OWORD *)(v7 + v34 - 48);
      long long v67 = *(_OWORD *)(v7 + v34 - 32);
      long long v68 = v36;
      long long v66 = v37;
      if (v73.n128_u64[1] == *((void *)&v67 + 1))
      {
        if ((TopoID::operator<((uint64_t)v69, (uint64_t)&v66) & 1) == 0)
        {
          BOOL v26 = (__n128 *)(v7 + v34);
LABEL_29:
          a6.n128_u64[0] = v72.n128_u64[0];
          __n128 v39 = v73;
          unint64_t v40 = v74;
          *BOOL v26 = v72;
          v26[1] = v39;
          v26[2].n128_u64[0] = v40;
          v26[2].n128_u64[1] = v31;
LABEL_30:
          unint64_t v23 = v25 + 3;
          v24 += 48;
          if (&v25[3] == (__n128 *)a2) {
            return a6.n128_f64[0];
          }
          goto LABEL_17;
        }
      }
      else if (v73.n128_u64[1] >= *((void *)&v67 + 1))
      {
        goto LABEL_29;
      }
      v26 -= 3;
      long long v38 = *(_OWORD *)(v35 - 32);
      *(_OWORD *)uint64_t v35 = *(_OWORD *)(v35 - 48);
      *(_OWORD *)(v35 + 16) = v38;
      *(void *)(v35 + 32) = *(void *)(v35 - 16);
      *(void *)(v7 + v34 + 40) = *(void *)(v7 + v34 - 8);
      v34 -= 48;
      if (!v34) {
        goto LABEL_28;
      }
    }
  }
  long long v8 = *(a2 - 3);
  long long v9 = *(a2 - 1);
  long long v64 = *(a2 - 2);
  long long v65 = v9;
  long long v63 = v8;
  a6 = *(__n128 *)(a1 + 32);
  __n128 v10 = *(__n128 *)a1;
  long long v61 = *(_OWORD *)(a1 + 16);
  __n128 v62 = a6;
  __n128 v60 = v10;
  if (*((void *)&v64 + 1) == *((void *)&v61 + 1))
  {
    if ((TopoID::operator<((uint64_t)&v63, (uint64_t)&v60) & 1) == 0) {
      return a6.n128_f64[0];
    }
  }
  else if (*((void *)&v64 + 1) >= *((void *)&v61 + 1))
  {
    return a6.n128_f64[0];
  }
  int v17 = a2 - 3;
  a6 = *(__n128 *)v7;
  long long v18 = *(_OWORD *)(v7 + 16);
  uint64_t v19 = *(void *)(v7 + 32);
  uint64_t v20 = *((void *)a2 - 2);
  long long v21 = *(a2 - 2);
  *(_OWORD *)uint64_t v7 = *(a2 - 3);
  *(_OWORD *)(v7 + 16) = v21;
  *(void *)(v7 + 32) = v20;
  *((void *)v17 + 4) = v19;
  long long *v17 = (__int128)a6;
  v17[1] = v18;
  uint64_t v22 = *(void *)(v7 + 40);
  *(void *)(v7 + 40) = *((void *)a2 - 1);
  *((void *)a2 - 1) = v22;
  return a6.n128_f64[0];
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return result;
  }
  uint64_t v5 = a4;
  long long v8 = a1;
  if (a3 == 2)
  {
    __n128 v10 = a2 - 3;
    __n128 v11 = a2[-3];
    __n128 v12 = a2[-1];
    __n128 v58 = a2[-2];
    __n128 v59 = v12;
    __n128 v57 = v11;
    __n128 v13 = a1[2];
    __n128 v14 = *a1;
    __n128 v55 = a1[1];
    __n128 v56 = v13;
    __n128 v54 = v14;
    if (v58.n128_u64[1] == v55.n128_u64[1])
    {
      if (TopoID::operator<((uint64_t)&v57, (uint64_t)&v54)) {
        goto LABEL_7;
      }
    }
    else if (v58.n128_u64[1] < v55.n128_u64[1])
    {
LABEL_7:
      __n128 v15 = *v10;
      __n128 v16 = a2[-1];
      v5[1] = a2[-2];
      v5[2] = v16;
      __n128 *v5 = v15;
      __n128 result = *v8;
      __n128 v17 = v8[1];
      __n128 v18 = v8[2];
LABEL_42:
      v5[4] = v17;
      v5[5] = v18;
      v5[3] = result;
      return result;
    }
    __n128 v49 = *v8;
    __n128 v50 = v8[2];
    v5[1] = v8[1];
    v5[2] = v50;
    __n128 *v5 = v49;
    __n128 result = *v10;
    __n128 v17 = a2[-2];
    __n128 v18 = a2[-1];
    goto LABEL_42;
  }
  if (a3 == 1)
  {
    __n128 result = *a1;
    __n128 v9 = a1[2];
    a4[1] = a1[1];
    a4[2] = v9;
    *a4 = result;
    return result;
  }
  if ((uint64_t)a3 > 8)
  {
    long long v38 = &a1[3 * (a3 >> 1)];
    std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(a1, v38, a3 >> 1, a4, a3 >> 1);
    std::__stable_sort<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(&v8[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), &v5[3 * (a3 >> 1)], a3 - (a3 >> 1));
    __n128 v39 = &v8[3 * (a3 >> 1)];
    while (1)
    {
      if (v39 == a2)
      {
        if (v8 != v38)
        {
          uint64_t v51 = 0;
          do
          {
            int v52 = &v5[v51];
            __n128 result = v8[v51];
            __n128 v53 = v8[v51 + 2];
            v52[1] = v8[v51 + 1];
            v52[2] = v53;
            __n128 *v52 = result;
            v51 += 3;
          }
          while (&v8[v51] != v38);
        }
        return result;
      }
      __n128 v40 = *v39;
      __n128 v41 = v39[2];
      __n128 v70 = v39[1];
      __n128 v71 = v41;
      __n128 v69 = v40;
      __n128 v42 = v8[2];
      __n128 v43 = *v8;
      __n128 v67 = v8[1];
      __n128 v68 = v42;
      __n128 v66 = v43;
      if (v70.n128_u64[1] == v67.n128_u64[1])
      {
        if ((TopoID::operator<((uint64_t)&v69, (uint64_t)&v66) & 1) == 0)
        {
LABEL_34:
          __n128 result = *v8;
          __n128 v45 = v8[2];
          v5[1] = v8[1];
          v5[2] = v45;
          __n128 *v5 = result;
          v8 += 3;
          goto LABEL_35;
        }
      }
      else if (v70.n128_u64[1] >= v67.n128_u64[1])
      {
        goto LABEL_34;
      }
      __n128 result = *v39;
      __n128 v44 = v39[2];
      v5[1] = v39[1];
      v5[2] = v44;
      __n128 *v5 = result;
      v39 += 3;
LABEL_35:
      v5 += 3;
      if (v8 == v38)
      {
        if (v39 != a2)
        {
          uint64_t v46 = 0;
          do
          {
            __n128 v47 = &v5[v46];
            __n128 result = v39[v46];
            __n128 v48 = v39[v46 + 2];
            v47[1] = v39[v46 + 1];
            v47[2] = v48;
            *__n128 v47 = result;
            v46 += 3;
          }
          while (&v39[v46] != a2);
        }
        return result;
      }
    }
  }
  if (a1 == a2) {
    return result;
  }
  __n128 result = *a1;
  __n128 v19 = a1[2];
  a4[1] = a1[1];
  a4[2] = v19;
  *a4 = result;
  uint64_t v20 = a1 + 3;
  if (&a1[3] == a2) {
    return result;
  }
  uint64_t v21 = 0;
  uint64_t v22 = a4;
  do
  {
    unint64_t v23 = v20;
    uint64_t v24 = v22 + 3;
    __n128 v25 = v20[2];
    __n128 v26 = *v20;
    __n128 v70 = v20[1];
    __n128 v71 = v25;
    __n128 v69 = v26;
    __n128 v27 = v22[1];
    __n128 v66 = *v22;
    __n128 v67 = v27;
    __n128 v68 = v22[2];
    if (v70.n128_u64[1] == v27.n128_u64[1])
    {
      if ((TopoID::operator<((uint64_t)&v69, (uint64_t)&v66) & 1) == 0)
      {
LABEL_23:
        __n128 result = *v23;
        __n128 v36 = v23[2];
        v22[4] = v23[1];
        v22[5] = v36;
        *uint64_t v24 = result;
        goto LABEL_26;
      }
    }
    else if (v70.n128_u64[1] >= v67.n128_u64[1])
    {
      goto LABEL_23;
    }
    __n128 v28 = v22[1];
    *uint64_t v24 = *v22;
    v22[4] = v28;
    v22[5] = v22[2];
    long long v29 = v5;
    if (v22 == v5) {
      goto LABEL_25;
    }
    uint64_t v30 = v21;
    while (1)
    {
      uint64_t v31 = (uint64_t)v5 + v30;
      __n128 v32 = v23[2];
      __n128 v33 = *v23;
      __n128 v64 = v23[1];
      __n128 v65 = v32;
      long long v34 = *(long long *)((char *)&v5[-2] + v30);
      long long v60 = *(long long *)((char *)&v5[-3] + v30);
      long long v61 = v34;
      long long v62 = *(long long *)((char *)&v5[-1] + v30);
      __n128 v63 = v33;
      if (v64.n128_u64[1] != *((void *)&v34 + 1))
      {
        if (v64.n128_u64[1] >= *((void *)&v61 + 1))
        {
          long long v29 = v22;
          goto LABEL_25;
        }
        goto LABEL_20;
      }
      if ((TopoID::operator<((uint64_t)&v63, (uint64_t)&v60) & 1) == 0) {
        break;
      }
LABEL_20:
      v22 -= 3;
      long long v35 = *(_OWORD *)(v31 - 32);
      *(_OWORD *)uint64_t v31 = *(_OWORD *)(v31 - 48);
      *(_OWORD *)(v31 + 16) = v35;
      *(void *)(v31 + 32) = *(void *)(v31 - 16);
      *(unint64_t *)((char *)&v5[2].n128_u64[1] + v30) = *(unint64_t *)((char *)&v5->n128_u64[-1] + v30);
      v30 -= 48;
      if (!v30)
      {
        long long v29 = v5;
        goto LABEL_25;
      }
    }
    long long v29 = (__n128 *)((char *)v5 + v30);
LABEL_25:
    __n128 result = *v23;
    __n128 v37 = v23[1];
    v29[2].n128_u64[0] = v23[2].n128_u64[0];
    *long long v29 = result;
    v29[1] = v37;
    v29[2].n128_u64[1] = v8[5].n128_u64[1];
LABEL_26:
    uint64_t v20 = v23 + 3;
    v21 += 48;
    uint64_t v22 = v24;
    long long v8 = v23;
  }
  while (&v23[3] != a2);
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(long long *a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t a7)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    uint64_t v7 = a5;
    while (v7 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      unint64_t v11 = 0;
      uint64_t v12 = -a4;
      while (1)
      {
        __n128 v13 = (__n128)*a2;
        long long v14 = a2[2];
        long long v88 = a2[1];
        long long v89 = v14;
        __n128 v87 = v13;
        __n128 result = (__n128)a1[v11 / 0x10 + 2];
        long long v16 = a1[v11 / 0x10];
        long long v85 = a1[v11 / 0x10 + 1];
        __n128 v86 = result;
        long long v84 = v16;
        if (*((void *)&v88 + 1) != *((void *)&v85 + 1))
        {
          if (*((void *)&v88 + 1) < *((void *)&v85 + 1)) {
            break;
          }
          goto LABEL_11;
        }
        if (TopoID::operator<((uint64_t)&v87, (uint64_t)&v84)) {
          break;
        }
LABEL_11:
        v11 += 48;
        if (__CFADD__(v12++, 1)) {
          return result;
        }
      }
      uint64_t v18 = -v12;
      __n128 v19 = &a1[v11 / 0x10];
      if (-v12 >= v7)
      {
        if (v12 == -1)
        {
          __n128 v67 = &a1[v11 / 0x10];
          long long v68 = a1[v11 / 0x10];
          long long v69 = a1[v11 / 0x10 + 1];
          *(void *)&long long v95 = *(void *)&a1[v11 / 0x10 + 2];
          long long v93 = v68;
          long long v94 = v69;
          __n128 result = (__n128)*a2;
          long long v70 = a2[1];
          *((void *)v67 + 4) = *((void *)a2 + 4);
          *__n128 v67 = (__int128)result;
          v67[1] = v70;
          *a2 = v93;
          result.n128_u64[0] = v94;
          a2[1] = v94;
          *((void *)a2 + 4) = v95;
          uint64_t v71 = *((void *)&a1[v11 / 0x10 + 2] + 1);
          *((void *)v67 + 5) = *((void *)a2 + 5);
          *((void *)a2 + 5) = v71;
          return result;
        }
        if (v12 > 0) {
          uint64_t v18 = 1 - v12;
        }
        uint64_t v80 = v18 >> 1;
        __n128 v19 = &a1[3 * (v18 >> 1) + v11 / 0x10];
        uint64_t v21 = a2;
        if (a2 == a3)
        {
LABEL_31:
          uint64_t v79 = 0xAAAAAAAAAAAAAAABLL * (v21 - a2);
          uint64_t v22 = (uint64_t)&a1[3 * v80 + v11 / 0x10];
          goto LABEL_33;
        }
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
        uint64_t v21 = a2;
        while (2)
        {
          unint64_t v33 = v32 >> 1;
          long long v34 = &v21[3 * (v32 >> 1)];
          long long v35 = *v34;
          long long v36 = v34[2];
          long long v94 = v34[1];
          long long v95 = v36;
          long long v93 = v35;
          long long v37 = v19[2];
          __n128 v38 = (__n128)*v19;
          long long v91 = v19[1];
          long long v92 = v37;
          __n128 v90 = v38;
          if (*((void *)&v94 + 1) == *((void *)&v91 + 1))
          {
            if (TopoID::operator<((uint64_t)&v93, (uint64_t)&v90))
            {
LABEL_44:
              uint64_t v21 = v34 + 3;
              unint64_t v33 = v32 + ~v33;
            }
          }
          else if (*((void *)&v94 + 1) < *((void *)&v91 + 1))
          {
            goto LABEL_44;
          }
          unint64_t v32 = v33;
          if (!v33) {
            goto LABEL_31;
          }
          continue;
        }
      }
      if (v7 >= 0) {
        uint64_t v20 = v7;
      }
      else {
        uint64_t v20 = v7 + 1;
      }
      uint64_t v79 = v20 >> 1;
      uint64_t v21 = &a2[3 * (v20 >> 1)];
      uint64_t v22 = (uint64_t)&a1[v11 / 0x10];
      if ((char *)a2 - (char *)a1 != v11)
      {
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((char *)a2 - (char *)a1 - v11) >> 4);
        __n128 v19 = &a1[v11 / 0x10];
        while (1)
        {
          unint64_t v24 = v23 >> 1;
          __n128 v25 = &v19[3 * (v23 >> 1)];
          long long v26 = *v21;
          long long v27 = v21[2];
          long long v94 = v21[1];
          long long v95 = v27;
          long long v93 = v26;
          long long v28 = v25[2];
          __n128 v29 = (__n128)*v25;
          long long v91 = v25[1];
          long long v92 = v28;
          __n128 v90 = v29;
          if (*((void *)&v94 + 1) == *((void *)&v91 + 1)) {
            break;
          }
          if (*((void *)&v94 + 1) >= *((void *)&v91 + 1)) {
            goto LABEL_22;
          }
LABEL_23:
          unint64_t v23 = v24;
          if (!v24)
          {
            uint64_t v22 = (uint64_t)v19;
            goto LABEL_32;
          }
        }
        if (TopoID::operator<((uint64_t)&v93, (uint64_t)&v90)) {
          goto LABEL_23;
        }
LABEL_22:
        __n128 v19 = v25 + 3;
        unint64_t v24 = v23 + ~v24;
        goto LABEL_23;
      }
LABEL_32:
      uint64_t v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)a1 - v11) >> 4);
LABEL_33:
      uint64_t v30 = v21;
      if (v19 != a2)
      {
        uint64_t v30 = (long long *)v22;
        if (v21 != a2) {
          uint64_t v30 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(v22, a2, v21);
        }
      }
      a4 = -(v80 + v12);
      uint64_t v31 = v7 - v79;
      if (v80 + v79 >= v7 - (v80 + v79) - v12)
      {
        std::__inplace_merge<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(v30, v21, a3, -(v80 + v12), v7 - v79, a6, a7);
        uint64_t v21 = (long long *)v22;
        uint64_t v31 = v79;
        a4 = v80;
        a3 = v30;
        a1 = (long long *)((char *)a1 + v11);
      }
      else
      {
        std::__inplace_merge<std::_ClassicAlgPolicy,minIdPath(TopoSubstring *,void({block_pointer})(TopoID))::$_0 &,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(&a1[v11 / 0x10], v22, v30, v80, v79, a6, a7);
        a1 = v30;
      }
      uint64_t v7 = v31;
      a2 = v21;
      if (!v31) {
        return result;
      }
    }
    if (a4 > v7)
    {
      if (a3 == a2) {
        return result;
      }
      uint64_t v39 = 0;
      do
      {
        __n128 v40 = &a6[v39];
        __n128 result = (__n128)a2[v39];
        long long v41 = a2[v39 + 2];
        v40[1] = a2[v39 + 1];
        v40[2] = v41;
        *__n128 v40 = (__int128)result;
        v39 += 3;
      }
      while (&a2[v39] != a3);
      if (!(v39 * 16)) {
        return result;
      }
      __n128 v42 = &a6[v39];
      while (1)
      {
        if (a2 == a1)
        {
          unint64_t v72 = 0;
          do
          {
            __n128 v73 = &a3[v72];
            __n128 result = (__n128)v42[v72 - 3];
            long long v74 = v42[v72 - 2];
            *((void *)v73 - 2) = *(void *)&v42[v72 - 1];
            *(v73 - 3) = (__int128)result;
            *(v73 - 2) = v74;
            *((void *)v73 - 1) = *((void *)&v42[v72 - 1] + 1);
            v72 -= 3;
          }
          while (&v42[v72] != a6);
          return result;
        }
        __n128 v43 = a2 - 3;
        long long v44 = *(v42 - 3);
        long long v45 = *(v42 - 1);
        long long v94 = *(v42 - 2);
        long long v95 = v45;
        long long v93 = v44;
        long long v46 = *(a2 - 1);
        __n128 v47 = (__n128)*(a2 - 3);
        long long v91 = *(a2 - 2);
        long long v92 = v46;
        __n128 v90 = v47;
        if (*((void *)&v94 + 1) == *((void *)&v91 + 1))
        {
          char v50 = TopoID::operator<((uint64_t)&v93, (uint64_t)&v90);
          __n128 v48 = a3;
          if ((v50 & 1) == 0)
          {
LABEL_60:
            __n128 v43 = v42 - 3;
            __n128 v49 = v42;
            v42 -= 3;
            goto LABEL_61;
          }
        }
        else
        {
          __n128 v48 = a3;
          if (*((void *)&v94 + 1) >= *((void *)&v91 + 1)) {
            goto LABEL_60;
          }
        }
        __n128 v49 = a2;
        a2 -= 3;
LABEL_61:
        __n128 result = (__n128)*v43;
        long long v51 = v43[1];
        *((void *)v48 - 2) = *((void *)v43 + 4);
        *(v48 - 3) = (__int128)result;
        *(v48 - 2) = v51;
        *((void *)v48 - 1) = *((void *)v49 - 1);
        a3 = v48 - 3;
        if (v42 == a6) {
          return result;
        }
      }
    }
    int v52 = a3;
    if (a1 != a2)
    {
      uint64_t v53 = 0;
      __n128 v54 = a6;
      do
      {
        __n128 v55 = &a6[v53];
        __n128 result = (__n128)a1[v53];
        long long v56 = a1[v53 + 2];
        v55[1] = a1[v53 + 1];
        void v55[2] = v56;
        *__n128 v55 = (__int128)result;
        v53 += 3;
      }
      while (&a1[v53] != a2);
      if (v53 * 16)
      {
        __n128 v57 = &a6[v53];
        uint64_t v58 = (uint64_t)&a6[v53 - 3];
        do
        {
          if (a2 == v52)
          {
            unint64_t v75 = 0;
            do
            {
              __n128 v76 = &a1[v75];
              __n128 v77 = &v54[v75];
              __n128 result = (__n128)v54[v75];
              long long v78 = v54[v75 + 1];
              *((void *)v76 + 4) = *(void *)&v54[v75 + 2];
              *__n128 v76 = (__int128)result;
              v76[1] = v78;
              *((void *)v76 + 5) = *((void *)&v54[v75 + 2] + 1);
              v75 += 3;
            }
            while ((long long *)v58 != v77);
            return result;
          }
          long long v59 = *a2;
          long long v60 = a2[2];
          long long v94 = a2[1];
          long long v95 = v60;
          long long v93 = v59;
          long long v61 = v54[2];
          __n128 v62 = (__n128)*v54;
          long long v91 = v54[1];
          long long v92 = v61;
          __n128 v90 = v62;
          if (*((void *)&v94 + 1) == *((void *)&v91 + 1))
          {
            __n128 v64 = v54;
            char v65 = TopoID::operator<((uint64_t)&v93, (uint64_t)&v90);
            __n128 v54 = v64;
            int v52 = a3;
            if ((v65 & 1) == 0)
            {
LABEL_73:
              __n128 result = (__n128)*v54;
              long long v66 = v54[1];
              *((void *)a1 + 4) = *((void *)v54 + 4);
              *a1 = (__int128)result;
              a1[1] = v66;
              *((void *)a1 + 5) = *((void *)v54 + 5);
              v54 += 3;
              goto LABEL_74;
            }
          }
          else if (*((void *)&v94 + 1) >= *((void *)&v91 + 1))
          {
            goto LABEL_73;
          }
          __n128 result = (__n128)*a2;
          long long v63 = a2[1];
          *((void *)a1 + 4) = *((void *)a2 + 4);
          *a1 = (__int128)result;
          a1[1] = v63;
          *((void *)a1 + 5) = *((void *)a2 + 5);
          a2 += 3;
LABEL_74:
          a1 += 3;
        }
        while (v57 != v54);
      }
    }
  }
  return result;
}

long long *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<minIdPathData,TopoSubstring *> *>>(uint64_t a1, long long *a2, long long *a3)
{
  __n128 result = (long long *)(a1 + 48);
  BOOL v4 = result;
  uint64_t v5 = a2;
  while (1)
  {
    long long v6 = *(v4 - 3);
    long long v7 = *(v4 - 2);
    uint64_t v8 = *((void *)v4 - 2);
    uint64_t v9 = *((void *)v5 + 4);
    long long v10 = v5[1];
    *(v4 - 3) = *v5;
    *(v4 - 2) = v10;
    *((void *)v4 - 2) = v9;
    *((void *)v5 + 4) = v8;
    long long *v5 = v6;
    v5[1] = v7;
    uint64_t v11 = *((void *)v4 - 1);
    *((void *)v4 - 1) = *((void *)v5 + 5);
    *((void *)v5 + 5) = v11;
    v5 += 3;
    if (v5 == a3) {
      break;
    }
    if (v4 == a2) {
      a2 = v5;
    }
    v4 += 3;
    result += 3;
  }
  if (v4 != a2)
  {
    uint64_t v12 = a2;
    do
    {
      while (1)
      {
        uint64_t v18 = *((void *)v4 + 4);
        long long v16 = *v4;
        long long v17 = v4[1];
        long long v13 = *v12;
        long long v14 = v12[1];
        *((void *)v4 + 4) = *((void *)v12 + 4);
        *BOOL v4 = v13;
        v4[1] = v14;
        *((void *)v12 + 4) = v18;
        *uint64_t v12 = v16;
        v12[1] = v17;
        uint64_t v15 = *((void *)v4 + 5);
        *((void *)v4 + 5) = *((void *)v12 + 5);
        *((void *)v12 + 5) = v15;
        v4 += 3;
        v12 += 3;
        if (v12 == a3) {
          break;
        }
        if (v4 == a2) {
          a2 = v12;
        }
      }
      uint64_t v12 = a2;
    }
    while (v4 != a2);
  }
  return result;
}

void std::__split_buffer<TopoSubstring **>::push_front(uint64_t a1, void *a2)
{
  BOOL v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    long long v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      long long v16 = *(uint64_t **)(a1 + 8);
      long long v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        long long v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      uint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        BOOL v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  BOOL v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    long long v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoSubstring *>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      long long v16 = v5;
      long long v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        long long v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        BOOL v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void *std::__hash_table<std::__hash_value_type<TopoSubstring *,unsigned int>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned int>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,unsigned int>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,unsigned int>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = operator new(0x20uLL);
  *uint64_t v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t v13 = *v22;
LABEL_38:
    *uint64_t v22 = v13;
    goto LABEL_39;
  }
  *uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    unint64_t v23 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1C3FCD8E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(28 * a2);
}

uint64_t std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)__n128 result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  int8x8_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    *int8x8_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<TopoSubstring *,TopoSubstring *>,std::__unordered_map_hasher<TopoSubstring *,std::__hash_value_type<TopoSubstring *,TopoSubstring *>,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,true>,std::__unordered_map_equal<TopoSubstring *,std::__hash_value_type<TopoSubstring *,TopoSubstring *>,std::equal_to<TopoSubstring *>,std::hash<TopoSubstring *>,true>,std::allocator<std::__hash_value_type<TopoSubstring *,TopoSubstring *>>>::__emplace_unique_key_args<TopoSubstring *,std::piecewise_construct_t const&,std::tuple<TopoSubstring * const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1C3FCDBFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

long long *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>(long long *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*(void *)result >= *a2)
  {
    if (v3 < v4)
    {
      long long v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*(void *)result < *a2)
      {
        long long v7 = *result;
        *__n128 result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v3 >= v4)
    {
      long long v8 = *result;
      *__n128 result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a2 >= *a3) {
        return result;
      }
      long long v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      long long v5 = *result;
      *__n128 result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = a2 - 1;
      if (*(void *)a1 < *((void *)a2 - 2))
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *long long v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,[(CRTTMergeableString *)(long long *)a1 deleteSubstrings:(unint64_t *)(a1 + 32) withCharacterRanges:a2 - 1];
      return 1;
    case 5:
      BOOL v17 = (long long *)(a1 + 16);
      unint64_t v18 = (long long *)(a1 + 32);
      unint64_t v19 = (long long *)(a1 + 48);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,[(CRTTMergeableString *)(long long *)a1 deleteSubstrings:(unint64_t *)(a1 + 32) withCharacterRanges:(_OWORD *)(a1 + 48)];
      unint64_t v21 = *((void *)a2 - 2);
      size_t v20 = a2 - 1;
      if (*(void *)(a1 + 48) < v21)
      {
        long long v22 = *v19;
        *unint64_t v19 = *v20;
        *size_t v20 = v22;
        if (*(void *)v18 < *(void *)v19)
        {
          long long v23 = *v18;
          *unint64_t v18 = *v19;
          *unint64_t v19 = v23;
          if (*(void *)v17 < *(void *)v18)
          {
            long long v24 = *v17;
            long long *v17 = *v18;
            *unint64_t v18 = v24;
            if (*(void *)a1 < *(void *)(a1 + 16))
            {
              long long v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              long long *v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      long long v8 = (void *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (_OWORD *)(a1 + 48);
      if ((_OWORD *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    long long v12 = *v9;
    unint64_t v13 = *(void *)v9;
    if (*v8 < *(void *)v9)
    {
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v15 >= v13)
        {
          float v16 = (_OWORD *)(a1 + v14 + 48);
          goto LABEL_13;
        }
      }
      float v16 = (_OWORD *)a1;
LABEL_13:
      *float v16 = v12;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    long long v8 = v9;
    v10 += 16;
    if (++v9 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>(long long *a1, unint64_t *a2, unint64_t *a3, _OWORD *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[CRTTMergeableString deleteSubstrings:withCharacterRanges:]::$_1 &,_NSRange *>(a1, a2, a3);
  if (*a3 < *(void *)a4)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a2 < *a3)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*(void *)a1 < *a2)
      {
        __n128 result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

char *std::vector<TopoSubstring *>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  long long v5 = *(char **)(a2 + 8);
  long long v6 = (char *)*a1;
  long long v7 = v5;
  if (*a1 != __src)
  {
    long long v8 = __src;
    long long v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    long long v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  uint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  unint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  long long v6 = *(void **)(*result + 8 * v4);
  do
  {
    long long v7 = v6;
    long long v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *long long v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::destroy(*a1);
    std::__tree<std::__value_type<TopoIDRange,TopoSubstring *>,std::__map_value_compare<TopoIDRange,std::__value_type<TopoIDRange,TopoSubstring *>,$_2,true>,std::allocator<std::__value_type<TopoIDRange,TopoSubstring *>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<TopoIDRange,objc_object  {objcproto26CRTTMergeableStringStorage}* {__strong}>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

uint64_t std::__split_buffer<std::pair<TopoIDRange,objc_object  {objcproto26CRTTMergeableStringStorage}* {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>,std::__unordered_map_hasher<TopoID,std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>,std::hash<TopoID>,std::equal_to<TopoID>,true>,std::__unordered_map_equal<TopoID,std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>,std::equal_to<TopoID>,std::hash<TopoID>,true>,std::allocator<std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>>>::__emplace_unique_key_args<TopoID,std::piecewise_construct_t const&,std::tuple<TopoID const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v8 = CFHashBytes();
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (*((_DWORD *)i + 9) == *(_DWORD *)(a2 + 20)
            && *((_DWORD *)i + 8) == *(_DWORD *)(a2 + 16)
            && !uuid_compare((const unsigned __int8 *)i + 16, (const unsigned __int8 *)a2))
          {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x38uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  uint64_t v16 = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = **a4;
  *((void *)i + 5) = 0;
  *((void *)i + 6) = 0;
  *((void *)i + 4) = v16;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  long long v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_40:
    *long long v24 = i;
    goto LABEL_41;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    long long v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1C3FCEC74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>,std::__unordered_map_hasher<TopoID,std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>,std::hash<TopoID>,std::equal_to<TopoID>,true>,std::__unordered_map_equal<TopoID,std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>,std::equal_to<TopoID>,std::hash<TopoID>,true>,std::allocator<std::__hash_value_type<TopoID,std::pair<TopoSubstring *,TopoSubstring *>>>>::find<TopoID>(void *a1, uint64_t a2)
{
  unint64_t v4 = CFHashBytes();
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v12 = i[1];
    if (v12 == v6)
    {
      if (*((_DWORD *)i + 9) == *(_DWORD *)(a2 + 20)
        && *((_DWORD *)i + 8) == *(_DWORD *)(a2 + 16)
        && !uuid_compare((const unsigned __int8 *)i + 16, (const unsigned __int8 *)a2))
      {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void sub_1C3FCEE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FCEEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FCEF0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FCEFF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FCF0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  uint8x8_t v11 = v10;

  a10.super_class = (Class)CRTTMergeableStringUndoEditCommand;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C3FCF224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C3FCF388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C3FCF480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FCFC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1C3FCFFEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD0340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id __copy_helper_block_ea8_48c96_ZTSNSt3__14pairI11TopoIDRangeU8__strongPU37objcproto26CRTTMergeableStringStorage11objc_objectEE(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 48) = v3;
  id result = *(id *)(a2 + 80);
  *(void *)(a1 + 80) = result;
  return result;
}

void __destroy_helper_block_ea8_48c96_ZTSNSt3__14pairI11TopoIDRangeU8__strongPU37objcproto26CRTTMergeableStringStorage11objc_objectEE(uint64_t a1)
{
}

void sub_1C3FD0470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD0638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }

  _Unwind_Resume(a1);
}

void sub_1C3FD0804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::pair<TopoIDRange,objc_object  {objcproto26CRTTMergeableStringStorage}* {__strong}>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    unint64_t v4 = (id *)v1[1];
    int8x8_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 5;

        unint64_t v4 = v6;
      }
      while (v6 != v2);
      int8x8_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<TopoIDRange>::__assign_with_size[abi:ne180100]<TopoIDRange*,TopoIDRange*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint8x8_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(void *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint8x8_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 > 0x924924924924924) {
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x492492492492492) {
      unint64_t v12 = 0x924924924924924;
    }
    else {
      unint64_t v12 = v11;
    }
    id result = std::vector<TopoIDRange>::__vallocate[abi:ne180100](v7, v12);
    uint64_t v14 = (char *)v7[1];
    unint64_t v13 = (void **)(v7 + 1);
    unint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      float v18 = v9;
      BOOL v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v13 = (void **)(result + 8);
  unint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 2) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    id result = (char *)memmove(*(void **)result, __src, v15 - v9);
    unint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    float v18 = v9;
    BOOL v19 = v16;
LABEL_18:
    id result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v13 = &v9[v17];
  return result;
}

char *std::vector<TopoIDRange>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925) {
    std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
  }
  id result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoIDRange>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[28 * v4];
  return result;
}

void sub_1C3FD0C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C3FD0E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::__unordered_map_hasher<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::hash<TopoReplica>,std::equal_to<TopoReplica>,true>,std::__unordered_map_equal<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::equal_to<TopoReplica>,std::hash<TopoReplica>,true>,std::allocator<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::__unordered_map_hasher<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::hash<TopoReplica>,std::equal_to<TopoReplica>,true>,std::__unordered_map_equal<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::equal_to<TopoReplica>,std::hash<TopoReplica>,true>,std::allocator<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::__unordered_map_hasher<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::hash<TopoReplica>,std::equal_to<TopoReplica>,true>,std::__unordered_map_equal<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::equal_to<TopoReplica>,std::hash<TopoReplica>,true>,std::allocator<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      long long v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::__unordered_map_hasher<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::hash<TopoReplica>,std::equal_to<TopoReplica>,true>,std::__unordered_map_equal<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::equal_to<TopoReplica>,std::hash<TopoReplica>,true>,std::allocator<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>>>::find<TopoReplica>(void *a1, uint64_t a2)
{
  unint64_t v4 = CFHashBytes();
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v12 = i[1];
    if (v12 == v6)
    {
      if (*((_DWORD *)i + 8) == *(_DWORD *)(a2 + 16)
        && !uuid_compare((const unsigned __int8 *)i + 16, (const unsigned __int8 *)a2))
      {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void *std::__hash_table<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::__unordered_map_hasher<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::hash<TopoReplica>,std::equal_to<TopoReplica>,true>,std::__unordered_map_equal<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::equal_to<TopoReplica>,std::hash<TopoReplica>,true>,std::allocator<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>>>::__emplace_unique_key_args<TopoReplica,std::piecewise_construct_t const&,std::tuple<TopoReplica const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = CFHashBytes();
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (*((_DWORD *)i + 8) == *(_DWORD *)(a2 + 16)
            && !uuid_compare((const unsigned __int8 *)i + 16, (const unsigned __int8 *)a2))
          {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  long long v17 = **a4;
  *((_DWORD *)i + 8) = *((_DWORD *)*a4 + 4);
  *((_OWORD *)i + 1) = v17;
  *((void *)i + 5) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)uint64_t i = *v25;
LABEL_39:
    *unint64_t v25 = i;
    goto LABEL_40;
  }
  *(void *)uint64_t i = *v16;
  *uint64_t v16 = i;
  *(void *)(v24 + 8 * v4) = v16;
  if (*(void *)i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    unint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_39;
  }
LABEL_40:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1C3FD124C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t std::__hash_table<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::__unordered_map_hasher<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::hash<TopoReplica>,std::equal_to<TopoReplica>,true>,std::__unordered_map_equal<TopoReplica,std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>,std::equal_to<TopoReplica>,std::hash<TopoReplica>,true>,std::allocator<std::__hash_value_type<TopoReplica,NSMutableIndexSet * {__strong}>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<TopoSubstring *,std::hash<TopoSubstring *>,std::equal_to<TopoSubstring *>,std::allocator<TopoSubstring *>>::remove(a1, a2, (uint64_t)&__p);
  long long v3 = (id *)__p;
  __p = 0;
  if (v3)
  {
    if (v6) {

    }
    operator delete(v3);
  }
  return v2;
}

void sub_1C3FD18CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD1C18(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1C3FD1DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD20E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD2288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD22DC()
{
}

void sub_1C3FD25C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD2910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1C3FD2A90(_Unwind_Exception *a1)
{
  MEMORY[0x1C8781440](v1, 0x10A0C409FE6E197);
  _Unwind_Resume(a1);
}

BOOL TopoIDRange::operator!=(unsigned __int8 *uu1, unsigned __int8 *uu2)
{
  return *((_DWORD *)uu1 + 5) != *((_DWORD *)uu2 + 5)
      || *((_DWORD *)uu1 + 4) != *((_DWORD *)uu2 + 4)
      || uuid_compare(uu1, uu2)
      || *((_DWORD *)uu1 + 6) != *((_DWORD *)uu2 + 6);
}

void sub_1C3FD2E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD2F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD366C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD3BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  TopoSubstring::~TopoSubstring((TopoSubstring *)&a21);

  _Unwind_Resume(a1);
}

void sub_1C3FD4050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<TopoID,TopoSubstring *>,std::__unordered_map_hasher<TopoID,std::__hash_value_type<TopoID,TopoSubstring *>,std::hash<TopoID>,std::equal_to<TopoID>,true>,std::__unordered_map_equal<TopoID,std::__hash_value_type<TopoID,TopoSubstring *>,std::equal_to<TopoID>,std::hash<TopoID>,true>,std::allocator<std::__hash_value_type<TopoID,TopoSubstring *>>>::__emplace_unique_key_args<TopoID,std::piecewise_construct_t const&,std::tuple<TopoID const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v8 = CFHashBytes();
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (*((_DWORD *)i + 9) == *(_DWORD *)(a2 + 20)
            && *((_DWORD *)i + 8) == *(_DWORD *)(a2 + 16)
            && !uuid_compare((const unsigned __int8 *)i + 16, (const unsigned __int8 *)a2))
          {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x30uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v9;
  uint64_t v16 = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = **a4;
  *((void *)i + 4) = v16;
  *((void *)i + 5) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<TopoSubstring const*,unsigned int>,std::__unordered_map_hasher<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::hash<TopoSubstring const*>,std::equal_to<TopoSubstring const*>,true>,std::__unordered_map_equal<TopoSubstring const*,std::__hash_value_type<TopoSubstring const*,unsigned int>,std::equal_to<TopoSubstring const*>,std::hash<TopoSubstring const*>,true>,std::allocator<std::__hash_value_type<TopoSubstring const*,unsigned int>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_40:
    *uint64_t v24 = i;
    goto LABEL_41;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1C3FD4484(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<TopoID>::__assign_with_size[abi:ne180100]<TopoID*,TopoID*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint8x8_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint8x8_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    id result = std::vector<TopoID>::__vallocate[abi:ne180100](v7, v12);
    uint64_t v14 = (char *)v7[1];
    unint64_t v13 = (void **)(v7 + 1);
    unint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      float v18 = v9;
      BOOL v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v13 = (void **)(result + 8);
  unint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    id result = (char *)memmove(*(void **)result, __src, v15 - v9);
    unint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    float v18 = v9;
    BOOL v19 = v16;
LABEL_18:
    id result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v13 = &v9[v17];
  return result;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<TopoID const*,TopoID const*,TopoID,std::__identity>(unsigned __int8 *uu1, unsigned __int8 *a2, unsigned __int8 *uu2)
{
  long long v3 = uu1;
  if (uu1 != a2)
  {
    while (*((_DWORD *)v3 + 5) != *((_DWORD *)uu2 + 5)
         || *((_DWORD *)v3 + 4) != *((_DWORD *)uu2 + 4)
         || uuid_compare(v3, uu2))
    {
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

void sub_1C3FD46E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD4768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  unint64_t v10 = v9;

  a9.super_class = (Class)CRTTMergeableStringRange;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C3FD4860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD4A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD4AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD4BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD4D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__0(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1C3FD4E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD4F88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD5018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD5138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD51FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD5258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD5428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1C3FD54CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void TopoReplica::TopoReplica(TopoReplica *this, ObjCReplica *a2)
{
  long long v3 = a2;
  this->unsigned int index = [(ObjCReplica *)v3 index];
  unint64_t v4 = [(ObjCReplica *)v3 uuid];
  [v4 getUUIDBytes:this];
}

void sub_1C3FD569C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

ObjCReplica *TopoReplica::objc(TopoReplica *this)
{
  uint64_t v2 = [ObjCReplica alloc];
  long long v3 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:this];
  unint64_t v4 = [(ObjCReplica *)v2 initWithUuid:v3 index:this->index];

  return v4;
}

void sub_1C3FD5738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void TopoID::TopoID(TopoID *this, ObjCTimestamp *a2)
{
  long long v3 = a2;
  unint64_t v4 = [(ObjCTimestamp *)v3 replica];
  TopoReplica::TopoReplica(&this->replica, v4);

  this->unsigned int clock = [(ObjCTimestamp *)v3 counter];
}

void sub_1C3FD57A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

ObjCTimestamp *TopoID::objc(TopoID *this)
{
  uint64_t v2 = [ObjCTimestamp alloc];
  long long v3 = TopoReplica::objc(&this->replica);
  unint64_t v4 = [(ObjCTimestamp *)v2 initWithReplica:v3 counter:this->clock];

  return v4;
}

void sub_1C3FD583C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void TopoSubstring::removeAddsNotIn(TopoSubstring *this, const TopoSubstring *a2, ObjCVersion *a3)
{
  int8x8_t v5 = a3;
  char v6 = (TopoID *)*((void *)this + 4);
  uint8x8_t v7 = (TopoID *)*((void *)this + 5);
  uint64_t v8 = v7;
  if (v6 != v7)
  {
    while (1)
    {
      if (std::__find_impl[abi:ne180100]<TopoID const*,TopoID const*,TopoID,std::__identity>(*((unsigned __int8 **)a2 + 4), *((unsigned __int8 **)a2 + 5), v6->replica.uuid) == *((unsigned __int8 **)a2 + 5))
      {
        unint64_t v9 = TopoID::objc(v6);
        BOOL v10 = [(ObjCVersion *)v5 contains:v9];

        if (v10) {
          break;
        }
      }
      if (++v6 == v7) {
        goto LABEL_13;
      }
    }
  }
  if (v6 != v7)
  {
    uint64_t v11 = v6 + 1;
    uint64_t v8 = v6;
    while (v11 != v7)
    {
      if (std::__find_impl[abi:ne180100]<TopoID const*,TopoID const*,TopoID,std::__identity>(*((unsigned __int8 **)a2 + 4), *((unsigned __int8 **)a2 + 5), v11->replica.uuid) != *((unsigned __int8 **)a2 + 5)|| (TopoID::objc(v11), v12 = objc_claimAutoreleasedReturnValue(), BOOL v13 = [(ObjCVersion *)v5 contains:v12], v12, !v13))
      {
        long long v14 = *(_OWORD *)v11->replica.uuid;
        *(void *)&v8->replica.unsigned int index = *(void *)&v11->replica.index;
        *(_OWORD *)v8->replica.uuid = v14;
        ++v8;
      }
      ++v11;
    }
  }
LABEL_13:
  if (v8 != *((TopoID **)this + 5)) {
    *((void *)this + 5) = v8;
  }
}

void sub_1C3FD59A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

TopoSubstring *TopoSubstring::removeDeltaAddsNotIn(TopoSubstring *this, const TopoSubstring *a2)
{
  uint64_t v2 = this;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v3 = (long long *)*((void *)this + 4);
  unint64_t v4 = (long long *)*((void *)this + 5);
  if (v3 == v4)
  {
    uint64_t v6 = *((void *)this + 4);
  }
  else
  {
    uint64_t v6 = *((void *)this + 5);
    uint8x8_t v7 = (long long *)((char *)v3 + 24);
    while (1)
    {
      int v13 = -1;
      uuid_copy(dst, (const unsigned __int8 *)v7 - 24);
      int v8 = *((_DWORD *)v7 - 1);
      *(_OWORD *)uu2 = *(_OWORD *)dst;
      int v15 = v13;
      int v16 = v8;
      this = (TopoSubstring *)std::__find_impl[abi:ne180100]<TopoID const*,TopoID const*,TopoID,std::__identity>(*((unsigned __int8 **)a2 + 4), *((unsigned __int8 **)a2 + 5), uu2);
      if (this != *((TopoSubstring **)a2 + 5)) {
        break;
      }
      BOOL v9 = v7 == v4;
      uint8x8_t v7 = (long long *)((char *)v7 + 24);
      if (v9) {
        goto LABEL_16;
      }
    }
    if ((long long *)((char *)v7 - 24) != v4)
    {
      if (v7 == v4)
      {
        uint64_t v6 = (uint64_t)v7 - 24;
      }
      else
      {
        uint64_t v6 = (uint64_t)v7 - 24;
        do
        {
          int v13 = -1;
          uuid_copy(dst, (const unsigned __int8 *)v7);
          int v10 = *((_DWORD *)v7 + 5);
          *(_OWORD *)uu2 = *(_OWORD *)dst;
          int v15 = v13;
          int v16 = v10;
          this = (TopoSubstring *)std::__find_impl[abi:ne180100]<TopoID const*,TopoID const*,TopoID,std::__identity>(*((unsigned __int8 **)a2 + 4), *((unsigned __int8 **)a2 + 5), uu2);
          if (this == *((TopoSubstring **)a2 + 5))
          {
            long long v11 = *v7;
            *(void *)(v6 + 16) = *((void *)v7 + 2);
            *(_OWORD *)uint64_t v6 = v11;
            v6 += 24;
          }
          uint8x8_t v7 = (long long *)((char *)v7 + 24);
        }
        while (v7 != v4);
      }
    }
  }
LABEL_16:
  if (v6 != *((void *)v2 + 5)) {
    *((void *)v2 + 5) = v6;
  }
  return this;
}

void TopoSubstring::addAddsIn(TopoSubstring *this, const TopoSubstring *a2, ObjCVersion *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int8x8_t v5 = a3;
  uint64_t v6 = (long long *)*((void *)a2 + 4);
  for (uint64_t i = (long long *)*((void *)a2 + 5); v6 != i; v6 = (long long *)((char *)v6 + 24))
  {
    long long v8 = *v6;
    *(void *)&v16.replica.unsigned int index = *((void *)v6 + 2);
    *(_OWORD *)v16.replica.uuid = v8;
    if (v16.replica.index != -1)
    {
      uint64_t v10 = *((void *)this + 4);
      uint64_t v9 = *((void *)this + 5);
      if (v9 != v10)
      {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
        do
        {
          uint64_t v12 = v10 + 24 * (v11 >> 1);
          int v13 = TopoID::operator<(v12, (uint64_t)&v16);
          if (v13) {
            v11 += ~(v11 >> 1);
          }
          else {
            v11 >>= 1;
          }
          if (v13) {
            uint64_t v10 = v12 + 24;
          }
        }
        while (v11);
        uint64_t v9 = v10;
        uint64_t v10 = *((void *)this + 5);
      }
      if (v10 == v9
        || *(void *)&v16.replica.index != *(void *)(v9 + 16)
        || uuid_compare(v16.replica.uuid, (const unsigned __int8 *)v9))
      {
        long long v14 = TopoID::objc(&v16);
        BOOL v15 = -[ObjCVersion contains:](v5, "contains:", v14, *(_OWORD *)v16.replica.uuid);

        if (!v15) {
          std::vector<TopoID>::insert((uint64_t)this + 32, (char *)v9, (unint64_t)&v16);
        }
      }
    }
  }
}

void sub_1C3FD5D10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::vector<TopoID>::insert(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3 = a3;
  unint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    int v13 = *(char **)a1;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<TopoSubstring *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    int64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((__src - v13) >> 3);
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v13) >> 3);
    if (2 * v17 > v14) {
      unint64_t v14 = 2 * v17;
    }
    if (v17 >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v33 = a1 + 16;
    if (v18) {
      BOOL v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>(a1 + 16, v18);
    }
    else {
      BOOL v19 = 0;
    }
    size_t v22 = &v19[24 * v16];
    __p = v19;
    uint64_t v30 = v22;
    uint64_t v31 = v22;
    unint64_t v32 = &v19[24 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v24 = 1;
        }
        else {
          unint64_t v24 = 2 * v16;
        }
        unint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TopoID>>(v8, v24);
        size_t v22 = &v25[24 * (v24 >> 2)];
        __p = v25;
        uint64_t v30 = v22;
        unint64_t v32 = &v25[24 * v26];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        uint64_t v23 = v16 + 2;
        if (v16 >= -1) {
          uint64_t v23 = v16 + 1;
        }
        v22 -= 24 * (v23 >> 1);
        uint64_t v30 = v22;
      }
    }
    long long v27 = *(_OWORD *)v3;
    *((void *)v22 + 2) = *(void *)(v3 + 16);
    *(_OWORD *)size_t v22 = v27;
    uint64_t v31 = v22 + 24;
    unint64_t v4 = (char *)std::vector<TopoID>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v31 != v30) {
      uint64_t v31 = &v30[(v31 - v30 - 24) % 0x18uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    long long v21 = *(_OWORD *)a3;
    *((void *)__src + 2) = *(void *)(a3 + 16);
    *(_OWORD *)uint64_t __src = v21;
    *(void *)(a1 + 8) = __src + 24;
  }
  else
  {
    uint64_t v9 = __src + 24;
    uint64_t v10 = v6 - 24;
    uint64_t v11 = *(void *)(a1 + 8);
    while (v10 < v6)
    {
      long long v12 = *(_OWORD *)v10;
      *(void *)(v11 + 16) = *((void *)v10 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      v11 += 24;
      v10 += 24;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(__src + 24, __src, v6 - v9);
    }
    if ((unint64_t)v4 <= v3) {
      v3 += 24 * (*(void *)(a1 + 8) > v3);
    }
    long long v20 = *(_OWORD *)v3;
    *((void *)v4 + 2) = *(void *)(v3 + 16);
    *(_OWORD *)unint64_t v4 = v20;
  }
  return v4;
}

void sub_1C3FD5FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<TopoID>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  int8x8_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *(_OWORD *)(v8 - 24);
      unint64_t v7 = (void *)(v9 - 24);
      *(void *)(v9 - 8) = *((void *)v8 - 1);
      *(_OWORD *)(v9 - 24) = v10;
      v8 -= 24;
      v9 -= 24;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 16);
  int64_t v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    unint64_t v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v12 + v13;
  unint64_t v14 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v14;
  uint64_t v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v15;
  int64_t v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v16;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t sub_1C3FD60E0()
{
  uint64_t v0 = sub_1C4497A38();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  unint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1C4497A08();
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = sub_1C4496DA8();
  MEMORY[0x1F4188790](v5 - 8);
  sub_1C3F60AA0();
  sub_1C4496D88();
  v7[1] = MEMORY[0x1E4FBC860];
  sub_1C3FD9708(qword_1EBBC1060, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBBC1040);
  sub_1C3FD9798();
  sub_1C4497BF8();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FBCC58], v0);
  uint64_t result = sub_1C4497A78();
  qword_1EBBC5A38 = result;
  return result;
}

uint64_t CRContext.assetManager.getter()
{
  return swift_retain();
}

uint64_t CRContext.encryptionDelegate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C3F970C4(v1 + OBJC_IVAR___CRContext_encryptionDelegate, a1, qword_1EBBC0C90);
}

id CRContext.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void CRContext.init()()
{
}

uint64_t CRContext.__allocating_init(for:encryptionDelegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0760);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v7 = sub_1C4496498();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  long long v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  sub_1C3F970C4(a2, (uint64_t)v15, qword_1EBBC0C90);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  sub_1C3F58CFC(v10, (uint64_t)v15, (uint64_t)v6);
  uint64_t v12 = v11;
  sub_1C3F962E0(a2, qword_1EBBC0C90);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v12;
}

void *sub_1C3FD65F4()
{
  uint64_t result = (void *)sub_1C3FE4534(MEMORY[0x1E4FBC860]);
  off_1EBBBB060 = result;
  return result;
}

uint64_t static CRContext.UniqueContextError.== infix(_:_:)()
{
  return 1;
}

uint64_t CRContext.UniqueContextError.hash(into:)()
{
  return sub_1C4498608();
}

uint64_t CRContext.UniqueContextError.hashValue.getter()
{
  return sub_1C4498628();
}

uint64_t sub_1C3FD6690()
{
  return sub_1C4498628();
}

uint64_t sub_1C3FD66D4()
{
  return sub_1C4498608();
}

uint64_t sub_1C3FD66FC()
{
  return sub_1C4498628();
}

void static CRContext.uniqueContext(for:)(uint64_t a1)
{
  if (qword_1EBBC10F0 != -1) {
    a1 = swift_once();
  }
  MEMORY[0x1F4188790](a1);
  id v2 = v1;
  sub_1C4497A58();
}

void sub_1C3FD6838(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0760);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBBBBCC8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = off_1EBBBB060;
  if (!*((void *)off_1EBBBB060 + 2) || (unint64_t v9 = sub_1C3F54E50(a1), (v10 & 1) == 0))
  {
    uint64_t v17 = 0;
    char v18 = 1;
    sub_1C3F962E0((uint64_t)&v17, &qword_1EBBBB058);
    swift_endAccess();
LABEL_9:
    uint64_t v13 = sub_1C4496498();
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v16 = 0;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v7, 1, 1, v13);
    uint64_t v11 = (void *)sub_1C3FD97F4(a1, (uint64_t)&v14, (uint64_t)v7);
    sub_1C3F962E0((uint64_t)v7, &qword_1EBBC0760);
    sub_1C3F962E0((uint64_t)&v14, qword_1EBBC0C90);
    if (v2) {
      return;
    }
    goto LABEL_10;
  }
  sub_1C3FDA210(v8[7] + 8 * v9, (uint64_t)&v17);
  char v18 = 0;
  uint64_t v11 = (void *)MEMORY[0x1C8782180](&v17);
  sub_1C3F962E0((uint64_t)&v17, &qword_1EBBBB058);
  swift_endAccess();
  if (!v11) {
    goto LABEL_9;
  }
  sub_1C3F970C4((uint64_t)v11 + OBJC_IVAR___CRContext_encryptionDelegate, (uint64_t)&v14, qword_1EBBC0C90);
  uint64_t v12 = *((void *)&v15 + 1);
  sub_1C3F962E0((uint64_t)&v14, qword_1EBBC0C90);
  if (v12)
  {
    sub_1C3FDA258();
    swift_allocError();
    swift_willThrow();

    return;
  }
LABEL_10:
  *a2 = v11;
}

uint64_t static CRContext.uniqueContext<A>(for:encryptionDelegate:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0760);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1C4496498();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  static CRContext.uniqueContext<A>(for:encryptionDelegate:temporaryDirectory:)(a1);
  uint64_t v7 = v6;
  sub_1C3F962E0((uint64_t)v4, &qword_1EBBC0760);
  return v7;
}

void static CRContext.uniqueContext<A>(for:encryptionDelegate:temporaryDirectory:)(uint64_t a1)
{
  if (qword_1EBBC10F0 != -1) {
    a1 = swift_once();
  }
  v3[1] = v3;
  MEMORY[0x1F4188790](a1);
  id v2 = v1;
  sub_1C4497A58();
}

void sub_1C3FD6CC4(uint64_t a1@<X1>, void (*a2)(char *, char *, uint64_t)@<X2>, void *a3@<X3>, uint64_t a4@<X4>, char *a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v62 = a6;
  long long v70 = a5;
  id v71 = a3;
  __n128 v77 = a2;
  long long v69 = a7;
  uint64_t v10 = sub_1C4497B38();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v64 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v65 = TupleTypeMetadata2;
  uint64_t v12 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  long long v68 = (char *)&v56 - v13;
  uint64_t v14 = *(void *)(a4 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  long long v61 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  __n128 v67 = (char *)&v56 - v18;
  uint64_t v19 = *(void *)(v10 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  long long v63 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  long long v66 = (char *)&v56 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v56 - v25;
  MEMORY[0x1F4188790](v24);
  long long v28 = (char *)&v56 - v27;
  if (qword_1EBBBBCC8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  __n128 v29 = off_1EBBBB060;
  if (*((void *)off_1EBBBB060 + 2) && (unint64_t v30 = sub_1C3F54E50(a1), (v31 & 1) != 0))
  {
    sub_1C3FDA210(v29[7] + 8 * v30, (uint64_t)&v75);
    char v76 = 0;
    unint64_t v32 = (void *)MEMORY[0x1C8782180](&v75);
    sub_1C3F962E0((uint64_t)&v75, &qword_1EBBBB058);
    swift_endAccess();
    if (v32)
    {
      uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
      unsigned int v34 = v33((char *)v77, 1, a4);
      id v71 = v32;
      uint64_t v35 = (uint64_t)v32 + OBJC_IVAR___CRContext_encryptionDelegate;
      if (v34 == 1)
      {
        sub_1C3F970C4(v35, (uint64_t)&v72, qword_1EBBC0C90);
        uint64_t v36 = *((void *)&v73 + 1);
        sub_1C3F962E0((uint64_t)&v72, qword_1EBBC0C90);
        if (!v36)
        {
LABEL_8:
          uint64_t v37 = (uint64_t)v71;
LABEL_14:
          *long long v69 = v37;
          return;
        }
        goto LABEL_23;
      }
      long long v60 = v33;
      sub_1C3F970C4(v35, (uint64_t)&v72, qword_1EBBC0C90);
      __swift_instantiateConcreteTypeFromMangledName(qword_1EBBC0C90);
      char v39 = swift_dynamicCast();
      __n128 v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
      if (v39)
      {
        long long v70 = *(char **)(v14 + 56);
        v40(v26, 0, 1, a4);
        long long v41 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
        __n128 v42 = v67;
        uint64_t v58 = v14 + 32;
        __n128 v57 = v41;
        v41(v67, v26, a4);
        __n128 v43 = v66;
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v66, v42, a4);
        ((void (*)(char *, void, uint64_t, uint64_t))v70)(v43, 0, 1, a4);
        long long v44 = v68;
        long long v70 = &v68[*(int *)(v65 + 48)];
        uint64_t v59 = v14 + 48;
        long long v45 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
        v45(v68, v43, v10);
        long long v46 = (char *)v77;
        __n128 v77 = v45;
        v45(v70, v46, v10);
        __n128 v47 = v60;
        if (v60(v44, 1, a4) == 1)
        {
          __n128 v48 = *(void (**)(char *, uint64_t))(v19 + 8);
          v48(v66, v10);
          (*(void (**)(char *, uint64_t))(v14 + 8))(v67, a4);
          if (v47(v70, 1, a4) == 1)
          {
            v48(v68, v10);
            uint64_t v37 = (uint64_t)v71;
            goto LABEL_14;
          }
        }
        else
        {
          __n128 v49 = v63;
          v77(v63, v68, v10);
          if (v47(v70, 1, a4) != 1)
          {
            long long v51 = v49;
            int v52 = v61;
            v57(v61, v70, a4);
            char v53 = sub_1C4497178();
            __n128 v54 = *(void (**)(char *, uint64_t))(v14 + 8);
            v54(v52, a4);
            __n128 v55 = *(void (**)(char *, uint64_t))(v19 + 8);
            v55(v66, v10);
            v54(v67, a4);
            v54(v51, a4);
            v55(v68, v10);
            if (v53) {
              goto LABEL_8;
            }
            goto LABEL_23;
          }
          (*(void (**)(char *, uint64_t))(v19 + 8))(v66, v10);
          char v50 = *(void (**)(char *, uint64_t))(v14 + 8);
          v50(v67, a4);
          v50(v49, a4);
        }
        (*(void (**)(char *, uint64_t))(v64 + 8))(v68, v65);
      }
      else
      {
        v40(v26, 1, 1, a4);
        (*(void (**)(char *, uint64_t))(v19 + 8))(v26, v10);
      }
LABEL_23:
      sub_1C3FDA258();
      swift_allocError();
      swift_willThrow();

      return;
    }
  }
  else
  {
    uint64_t v75 = 0;
    char v76 = 1;
    sub_1C3F962E0((uint64_t)&v75, &qword_1EBBBB058);
    swift_endAccess();
  }
  (*(void (**)(char *, void, uint64_t))(v19 + 16))(v28, v77, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v28, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v28, v10);
    long long v74 = 0;
    long long v72 = 0u;
    long long v73 = 0u;
  }
  else
  {
    *((void *)&v73 + 1) = a4;
    long long v74 = v70;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v72);
    (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v28, a4);
  }
  uint64_t v37 = sub_1C3FD97F4(a1, (uint64_t)&v72, (uint64_t)v71);
  sub_1C3F962E0((uint64_t)&v72, qword_1EBBC0C90);
  if (!v7) {
    goto LABEL_14;
  }
}

uint64_t static CRContext.uniqueContextUnchecked(for:encryptionDelegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0760);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1C4496498();
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  if (qword_1EBBC10F0 != -1) {
    uint64_t v11 = swift_once();
  }
  MEMORY[0x1F4188790](v11);
  v15[-4] = v2;
  v15[-3] = a1;
  v15[-2] = a2;
  v15[-1] = v9;
  id v13 = v12;
  sub_1C4497A58();

  if (!v3) {
    uint64_t v4 = v15[1];
  }
  sub_1C3F962E0((uint64_t)v9, &qword_1EBBC0760);
  return v4;
}

void static CRContext.uniqueContextUnchecked(for:encryptionDelegate:temporaryDirectory:)(uint64_t a1)
{
  if (qword_1EBBC10F0 != -1) {
    a1 = swift_once();
  }
  MEMORY[0x1F4188790](a1);
  id v2 = v1;
  sub_1C4497A58();
}

uint64_t sub_1C3FD7754@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  if (qword_1EBBBBCC8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = off_1EBBBB060;
  if (*((void *)off_1EBBBB060 + 2) && (unint64_t v10 = sub_1C3F54E50(a1), (v11 & 1) != 0))
  {
    sub_1C3FDA210(v9[7] + 8 * v10, (uint64_t)&v14);
    char v15 = 0;
    uint64_t v12 = MEMORY[0x1C8782180](&v14);
    sub_1C3F962E0((uint64_t)&v14, &qword_1EBBBB058);
    uint64_t result = swift_endAccess();
    if (v12) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v14 = 0;
    char v15 = 1;
    sub_1C3F962E0((uint64_t)&v14, &qword_1EBBBB058);
    swift_endAccess();
  }
  uint64_t result = sub_1C3FD97F4(a1, a2, a3);
  if (v4) {
    return result;
  }
  uint64_t v12 = result;
LABEL_10:
  *a4 = v12;
  return result;
}

uint64_t static CRContext.currentUniqueContextUnchecked(for:)(uint64_t a1)
{
  if (qword_1EBBC10F0 != -1) {
    a1 = swift_once();
  }
  MEMORY[0x1F4188790](a1);
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBAE48);
  sub_1C4497A58();

  return v4;
}

uint64_t sub_1C3FD7968@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  if (qword_1EBBBBCC8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = off_1EBBBB060;
  if (*((void *)off_1EBBBB060 + 2) && (unint64_t v5 = sub_1C3F54E50(a1), (v6 & 1) != 0))
  {
    sub_1C3FDA210(v4[7] + 8 * v5, (uint64_t)&v9);
    char v10 = 0;
    uint64_t v7 = MEMORY[0x1C8782180](&v9);
    sub_1C3F962E0((uint64_t)&v9, &qword_1EBBBB058);
    uint64_t result = swift_endAccess();
  }
  else
  {
    uint64_t v9 = 0;
    char v10 = 1;
    sub_1C3F962E0((uint64_t)&v9, &qword_1EBBBB058);
    uint64_t result = swift_endAccess();
    uint64_t v7 = 0;
  }
  *a2 = v7;
  return result;
}

Swift::Void __swiftcall CRContext.close()()
{
  if (qword_1EBBC10F0 != -1) {
    swift_once();
  }
  id v1 = *(void **)(qword_1EBBC5A60 + 40);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1C3FD93B4;
  *(void *)(v3 + 24) = v2;
  void v8[4] = sub_1C3F5F2E4;
  v8[5] = v3;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1107296256;
  v8[2] = sub_1C3F5F2B8;
  unint64_t v8[3] = &block_descriptor;
  uint64_t v4 = _Block_copy(v8);
  unint64_t v5 = v1;
  id v6 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v5, v4);

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
}

uint64_t sub_1C3FD7C00(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0760);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = OBJC_IVAR___CRContext_crdtDatabase;
  swift_retain();
  sub_1C3F5332C();
  swift_release();
  uint64_t v6 = sub_1C4496498();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
  *(void *)(a1 + v5) = sub_1C3F58314((uint64_t)v4);
  return swift_release();
}

id _s9Coherence9CRContextCfD_0()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C3FD7FFC(uint64_t a1, uint64_t a2)
{
  return sub_1C3FD8110(a1, a2, MEMORY[0x1E4F27EB8]);
}

uint64_t sub_1C3FD8030(uint64_t a1, uint64_t a2)
{
  return sub_1C3FD8110(a1, a2, MEMORY[0x1E4FBB198]);
}

uint64_t sub_1C3FD8048()
{
  sub_1C44971B8();
  sub_1C4497248();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C3FD809C()
{
  sub_1C44971B8();
  sub_1C44985F8();
  sub_1C4497248();
  uint64_t v0 = sub_1C4498628();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1C3FD8110(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_1C44971B8();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1C3FD8154(uint64_t a1, id *a2)
{
  uint64_t result = sub_1C4497198();
  *a2 = 0;
  return result;
}

uint64_t sub_1C3FD81CC(uint64_t a1, id *a2)
{
  char v3 = sub_1C44971A8();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1C3FD824C@<X0>(uint64_t *a1@<X8>)
{
  sub_1C44971B8();
  uint64_t v2 = sub_1C4497188();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1C3FD8290()
{
  uint64_t v0 = sub_1C44971B8();
  uint64_t v2 = v1;
  if (v0 == sub_1C44971B8() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1C44982E8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1C3FD831C(uint64_t a1)
{
  uint64_t v2 = sub_1C3FD9708((unint64_t *)&qword_1EA39B340, type metadata accessor for Key);
  uint64_t v3 = sub_1C3FD9708((unint64_t *)&unk_1EA39BD58, type metadata accessor for Key);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C3FD83D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C44971B8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1C3FD8404(uint64_t a1)
{
  uint64_t v2 = sub_1C3FD9708(&qword_1EBBBC178, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_1C3FD9708((unint64_t *)&unk_1EA39BDA0, type metadata accessor for URLResourceKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C3FD84C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1C4497188();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1C3FD8508(uint64_t a1)
{
  uint64_t v2 = sub_1C3FD9708(&qword_1EBBBB4E8, type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_1C3FD9708((unint64_t *)&unk_1EA39BDB0, type metadata accessor for FileAttributeKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];
  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1C3FD85C4(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_1C3FD871C((void *)((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v2 = sub_1C3FD871C((unint64_t *)v7, v4, v2);
    MEMORY[0x1C8782060](v7, -1, -1);
  }
  return v2;
}

uint64_t sub_1C3FD871C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a2;
  uint64_t v35 = a1;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(qword_1EA39B0C0);
  uint64_t v4 = MEMORY[0x1F4188790](v44);
  __n128 v43 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  __n128 v40 = (char *)&v33 - v6;
  uint64_t v7 = sub_1C4496498();
  uint64_t result = MEMORY[0x1F4188790](v7);
  char v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v12 = 0;
  long long v45 = (void *)a3;
  uint64_t v13 = *(void *)(a3 + 64);
  uint64_t v36 = 0;
  uint64_t v37 = a3 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  uint64_t v41 = v9 + 16;
  uint64_t v42 = v9;
  int64_t v38 = (unint64_t)(v14 + 63) >> 6;
  char v39 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v17 = (uint64_t)v40;
  uint64_t v18 = v43;
  while (v16)
  {
    uint64_t v46 = (v16 - 1) & v16;
    int64_t v47 = v12;
    unint64_t v19 = __clz(__rbit64(v16)) | (v12 << 6);
LABEL_5:
    uint64_t v20 = v45;
    uint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v42 + 16);
    v21(v11, v45[6] + *(void *)(v42 + 72) * v19, v7);
    sub_1C3FDA210(v20[7] + 8 * v19, (uint64_t)v48);
    uint64_t v22 = v44;
    uint64_t v23 = v17 + *(int *)(v44 + 48);
    v21((char *)v17, (unint64_t)v11, v7);
    sub_1C3FDA210((uint64_t)v48, v23);
    uint64_t v24 = (uint64_t)&v18[*(int *)(v22 + 48)];
    v21(v18, v17, v7);
    sub_1C3FDA210(v23, v24);
    uint64_t v25 = (void *)MEMORY[0x1C8782180](v24);
    sub_1C3F962E0(v17, qword_1EA39B0C0);
    sub_1C3FDA220(v24);
    if (v25)
    {

      char v31 = *v39;
      (*v39)(v18, v7);
      sub_1C3FDA220((uint64_t)v48);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v31)(v11, v7);
      *(unint64_t *)((char *)v35 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      BOOL v32 = __OFADD__(v36++, 1);
      unint64_t v16 = v46;
      int64_t v12 = v47;
      if (v32)
      {
        __break(1u);
        return sub_1C3FD8B18(v35, v34, v36, v45);
      }
    }
    else
    {
      uint64_t v26 = *v39;
      (*v39)(v18, v7);
      sub_1C3FDA220((uint64_t)v48);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v26)(v11, v7);
      unint64_t v16 = v46;
      int64_t v12 = v47;
    }
  }
  int64_t v27 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v27 >= v38) {
    return sub_1C3FD8B18(v35, v34, v36, v45);
  }
  unint64_t v28 = *(void *)(v37 + 8 * v27);
  int64_t v29 = v12 + 1;
  if (v28) {
    goto LABEL_21;
  }
  int64_t v29 = v12 + 2;
  if (v12 + 2 >= v38) {
    return sub_1C3FD8B18(v35, v34, v36, v45);
  }
  unint64_t v28 = *(void *)(v37 + 8 * v29);
  if (v28) {
    goto LABEL_21;
  }
  int64_t v29 = v12 + 3;
  if (v12 + 3 >= v38) {
    return sub_1C3FD8B18(v35, v34, v36, v45);
  }
  unint64_t v28 = *(void *)(v37 + 8 * v29);
  if (v28)
  {
LABEL_21:
    uint64_t v46 = (v28 - 1) & v28;
    int64_t v47 = v29;
    unint64_t v19 = __clz(__rbit64(v28)) + (v29 << 6);
    goto LABEL_5;
  }
  uint64_t v30 = v12 + 4;
  if (v12 + 4 >= v38) {
    return sub_1C3FD8B18(v35, v34, v36, v45);
  }
  unint64_t v28 = *(void *)(v37 + 8 * v30);
  if (v28)
  {
    int64_t v29 = v12 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v29 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v29 >= v38) {
      return sub_1C3FD8B18(v35, v34, v36, v45);
    }
    unint64_t v28 = *(void *)(v37 + 8 * v29);
    ++v30;
    if (v28) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1C3FD8B18(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v44 = sub_1C4496498();
  uint64_t v42 = *(void *)(v44 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v44);
  long long v45 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v41 = (char *)&v36 - v10;
  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBA218);
  uint64_t result = sub_1C4497FD8();
  uint64_t v12 = result;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0;
  uint64_t v39 = v42 + 32;
  uint64_t v40 = v42 + 16;
  uint64_t v15 = result + 64;
  int64_t v38 = a4;
  uint64_t v16 = v44;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v43 = v14;
      unint64_t v18 = v17 | (v14 << 6);
    }
    else
    {
      uint64_t v19 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v19 >= v37) {
        return v12;
      }
      unint64_t v20 = v36[v19];
      uint64_t v21 = v14 + 1;
      if (!v20)
      {
        uint64_t v21 = v14 + 2;
        if (v14 + 2 >= v37) {
          return v12;
        }
        unint64_t v20 = v36[v21];
        if (!v20)
        {
          uint64_t v21 = v14 + 3;
          if (v14 + 3 >= v37) {
            return v12;
          }
          unint64_t v20 = v36[v21];
          if (!v20)
          {
            uint64_t v22 = v14 + 4;
            if (v14 + 4 >= v37) {
              return v12;
            }
            unint64_t v20 = v36[v22];
            if (!v20)
            {
              while (1)
              {
                uint64_t v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v21 >= v37) {
                  return v12;
                }
                unint64_t v20 = v36[v21];
                ++v22;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v21 = v14 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v13 = (v20 - 1) & v20;
      uint64_t v43 = v21;
      unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
    }
    uint64_t v24 = v41;
    uint64_t v23 = v42;
    uint64_t v25 = *(void *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v41, a4[6] + v25 * v18, v16);
    sub_1C3FDA210(a4[7] + 8 * v18, (uint64_t)v47);
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v26(v45, v24, v16);
    sub_1C3FDA248((uint64_t)v47, (uint64_t)v46);
    sub_1C3FD9708(&qword_1EBBBCA80, MEMORY[0x1E4F276F0]);
    uint64_t result = sub_1C4497078();
    uint64_t v27 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v29);
      }
      while (v34 == -1);
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(void *)(v15 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    v26((char *)(*(void *)(v12 + 48) + v30 * v25), v45, v44);
    uint64_t result = sub_1C3FDA248((uint64_t)v46, *(void *)(v12 + 56) + 8 * v30);
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v38;
    uint64_t v14 = v43;
    if (!a3) {
      return v12;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

id _s9Coherence9CRContextC19newTransientContext18uniqueAssetManager18encryptionDelegateACSb_AA010EncryptionJ0_pSgtFZ_0(char a1, uint64_t a2)
{
  uint64_t v4 = sub_1C4496498();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0760);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v13 = (char *)&v26 - v12;
  if (*(void *)(a2 + 24))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))((char *)&v26 - v12, 1, 1, v4);
    uint64_t v14 = sub_1C3F58314((uint64_t)v13);
    sub_1C3F970C4(a2, (uint64_t)&v28, qword_1EBBC0C90);
    uint64_t v15 = NSTemporaryDirectory();
    sub_1C44971B8();

    sub_1C44963D8();
    swift_bridgeObjectRelease();
    type metadata accessor for CRAssetManager(0);
    swift_allocObject();
    uint64_t v16 = sub_1C3F60340((uint64_t)v7, (uint64_t)&v28);
    sub_1C3F970C4(a2, (uint64_t)&v28, qword_1EBBC0C90);
    unint64_t v17 = (objc_class *)type metadata accessor for CRContext();
    unint64_t v18 = (char *)objc_allocWithZone(v17);
    *(void *)&v18[OBJC_IVAR___CRContext_assetManager] = v16;
    sub_1C3F970C4((uint64_t)&v28, (uint64_t)&v18[OBJC_IVAR___CRContext_encryptionDelegate], qword_1EBBC0C90);
    *(void *)&v18[OBJC_IVAR___CRContext_crdtDatabase] = v14;
    v26.receiver = v18;
    v26.super_class = v17;
    id v19 = objc_msgSendSuper2(&v26, sel_init);
  }
  else
  {
    if (a1)
    {
      uint64_t v30 = 0;
      long long v28 = 0u;
      long long v29 = 0u;
      unint64_t v20 = NSTemporaryDirectory();
      sub_1C44971B8();

      sub_1C44963D8();
      swift_bridgeObjectRelease();
      type metadata accessor for CRAssetManager(0);
      swift_allocObject();
      uint64_t v21 = sub_1C3F60340((uint64_t)v7, (uint64_t)&v28);
    }
    else
    {
      if (qword_1EBBC09E0 != -1) {
        swift_once();
      }
      uint64_t v21 = qword_1EBBC5A30;
      swift_retain();
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v11, 1, 1, v4);
    uint64_t v22 = sub_1C3F58314((uint64_t)v11);
    uint64_t v23 = (objc_class *)type metadata accessor for CRContext();
    long long v28 = 0u;
    long long v29 = 0u;
    uint64_t v30 = 0;
    uint64_t v24 = (char *)objc_allocWithZone(v23);
    *(void *)&v24[OBJC_IVAR___CRContext_assetManager] = v21;
    sub_1C3F970C4((uint64_t)&v28, (uint64_t)&v24[OBJC_IVAR___CRContext_encryptionDelegate], qword_1EBBC0C90);
    *(void *)&v24[OBJC_IVAR___CRContext_crdtDatabase] = v22;
    v27.receiver = v24;
    v27.super_class = v23;
    id v19 = objc_msgSendSuper2(&v27, sel_init);
  }
  sub_1C3F962E0((uint64_t)&v28, qword_1EBBC0C90);
  return v19;
}

void sub_1C3FD92FC(void *a1@<X8>)
{
  sub_1C3FD6838(*(void *)(v1 + 24), a1);
}

void sub_1C3FD9318(uint64_t *a1@<X8>)
{
  sub_1C3FD6CC4(*(void *)(v1 + 48), *(void (**)(char *, char *, uint64_t))(v1 + 56), *(void **)(v1 + 64), *(void *)(v1 + 16), *(char **)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_1C3FD9340@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C3FD7754(v1[3], v1[4], v1[5], a1);
}

uint64_t sub_1C3FD9360@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C3FD7968(*(void *)(v1 + 24), a1);
}

uint64_t sub_1C3FD937C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C3FD93B4()
{
  return sub_1C3FD7C00(*(void *)(v0 + 16));
}

uint64_t sub_1C3FD93BC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

unint64_t sub_1C3FD93D0()
{
  unint64_t result = qword_1EA39BCD0;
  if (!qword_1EA39BCD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39BCD0);
  }
  return result;
}

uint64_t method lookup function for CRContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CRContext);
}

uint64_t getEnumTagSinglePayload for CRContext.UniqueContextError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for CRContext.UniqueContextError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C3FD952CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRContext.UniqueContextError()
{
  return &type metadata for CRContext.UniqueContextError;
}

uint64_t type metadata accessor for CRGlobalContextObjC()
{
  return self;
}

__n128 __swift_memcpy48_1(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1C3FD959C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1C3FD95BC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for sqlite3_snapshot(uint64_t a1)
{
}

void type metadata accessor for Key(uint64_t a1)
{
}

uint64_t sub_1C3FD961C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1C3FD963C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

uint64_t sub_1C3FD9678()
{
  return sub_1C3FD9708(&qword_1EA39BD48, type metadata accessor for Key);
}

uint64_t sub_1C3FD96C0()
{
  return sub_1C3FD9708(&qword_1EA39BD50, type metadata accessor for Key);
}

uint64_t sub_1C3FD9708(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C3FD9750()
{
  return sub_1C3FD9708((unint64_t *)&unk_1EA39B348, type metadata accessor for Key);
}

unint64_t sub_1C3FD9798()
{
  unint64_t result = qword_1EBBC1050;
  if (!qword_1EBBC1050)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EBBC1040);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBBC1050);
  }
  return result;
}

uint64_t sub_1C3FD97F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0760);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_1C4496498();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  unint64_t v13 = &v23[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = &v23[-v14];
  uint64_t v16 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16);
  v16(&v23[-v14], a1, v9);
  sub_1C3F970C4(a2, (uint64_t)v25, qword_1EBBC0C90);
  sub_1C3F970C4(a3, (uint64_t)v8, &qword_1EBBC0760);
  unint64_t v17 = v26;
  sub_1C3F58CFC(v15, (uint64_t)v25, (uint64_t)v8);
  uint64_t v19 = v18;
  if (!v17)
  {
    objc_super v26 = (void (*)(void, void, void))v16;
    if (qword_1EBBBBCC8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (*((void *)off_1EBBBB060 + 2) > 0xAuLL)
    {
      uint64_t v20 = swift_bridgeObjectRetain();
      uint64_t v21 = (void *)sub_1C3FD85C4(v20);
      swift_bridgeObjectRelease();
      off_1EBBBB060 = v21;
      swift_bridgeObjectRelease();
    }
    v26(v13, a1, v9);
    swift_unknownObjectWeakInit();
    v24[8] = 0;
    swift_beginAccess();
    sub_1C44144A8((uint64_t)v24, (uint64_t)v13);
    swift_endAccess();
  }
  return v19;
}

id sub_1C3FD9A88()
{
  if (qword_1EBBC10F0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = swift_beginAccess();
  MEMORY[0x1F4188790](v0);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1C4497A58();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v1 = v9;
  uint64_t v2 = v10;
  char v3 = (objc_class *)type metadata accessor for ObjCRenames();
  unsigned int v4 = (char *)objc_allocWithZone(v3);
  uint64_t v5 = &v4[OBJC_IVAR____TtC9Coherence11ObjCRenames_renames];
  *(void *)uint64_t v5 = v8;
  v5[8] = v1;
  *((void *)v5 + 2) = v2;
  v7.receiver = v4;
  v7.super_class = v3;
  return objc_msgSendSuper2(&v7, sel_init);
}

uint64_t sub_1C3FD9C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0FA0);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  char v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v25 - v10 + 16;
  if (qword_1EBBC10F0 != -1) {
    swift_once();
  }
  uint64_t v12 = (uint64_t *)(a1 + OBJC_IVAR___ObjCVersion_version);
  swift_beginAccess();
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  v26[0] = v14;
  v26[1] = v13;
  uint64_t v15 = (uint64_t *)(a2 + OBJC_IVAR___ObjCVersion_version);
  swift_beginAccess();
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  v25[0] = v17;
  v25[1] = v16;
  uint64_t v18 = a3 + OBJC_IVAR___ObjCReplica_uuid;
  swift_beginAccess();
  uint64_t v19 = sub_1C4496678();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v11, v18, v19);
  uint64_t v20 = *(void *)(a3 + OBJC_IVAR___ObjCReplica_index);
  uint64_t v21 = type metadata accessor for Replica();
  *(void *)&v11[*(int *)(v21 + 20)] = v20;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
  v22(v11, 0, 1, v21);
  v22(v9, 1, 1, v21);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1C401AC68(v26, v25, (uint64_t)v11, (uint64_t)v9);
  swift_release();
  sub_1C3F962E0((uint64_t)v9, &qword_1EBBC0FA0);
  sub_1C3F962E0((uint64_t)v11, &qword_1EBBC0FA0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C3FD9ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0FA0);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v25 - v11;
  if (qword_1EBBC10F0 != -1) {
    swift_once();
  }
  uint64_t v30 = qword_1EBBC5A60;
  uint64_t v13 = (uint64_t *)(a1 + OBJC_IVAR___ObjCVersion_version);
  swift_beginAccess();
  uint64_t v14 = v13[1];
  uint64_t v28 = *v13;
  uint64_t v29 = v14;
  v33[0] = v28;
  v33[1] = v14;
  uint64_t v15 = (uint64_t *)(a2 + OBJC_IVAR___ObjCVersion_version);
  swift_beginAccess();
  uint64_t v26 = *v15;
  uint64_t v27 = v15[1];
  v32[0] = v26;
  v32[1] = v27;
  uint64_t v16 = a3 + OBJC_IVAR___ObjCReplica_uuid;
  swift_beginAccess();
  uint64_t v17 = sub_1C4496678();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
  v18(v12, v16, v17);
  uint64_t v19 = *(void *)(a3 + OBJC_IVAR___ObjCReplica_index);
  uint64_t v20 = type metadata accessor for Replica();
  *(void *)&v12[*(int *)(v20 + 20)] = v19;
  uint64_t v21 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  v21(v12, 0, 1, v20);
  uint64_t v22 = v31;
  uint64_t v23 = v31 + OBJC_IVAR___ObjCReplica_uuid;
  swift_beginAccess();
  v18(v10, v23, v17);
  *(void *)&v10[*(int *)(v20 + 20)] = *(void *)(v22 + OBJC_IVAR___ObjCReplica_index);
  v21(v10, 0, 1, v20);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1C401AC68(v33, v32, (uint64_t)v12, (uint64_t)v10);
  swift_release();
  sub_1C3F962E0((uint64_t)v10, &qword_1EBBC0FA0);
  sub_1C3F962E0((uint64_t)v12, &qword_1EBBC0FA0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C3FDA1EC@<X0>(uint64_t a1@<X8>)
{
  return sub_1C40215D0(*(void *)(v1 + 24), *(uint64_t (***)())(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t sub_1C3FDA210(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186850](a2, a1);
}

uint64_t sub_1C3FDA220(uint64_t a1)
{
  return a1;
}

uint64_t sub_1C3FDA248(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186878](a2, a1);
}

unint64_t sub_1C3FDA258()
{
  unint64_t result = qword_1EA39BD68;
  if (!qword_1EA39BD68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39BD68);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CRContext.WeakContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t initializeWithCopy for CRContext.WeakContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186850](a1, a2);
}

uint64_t assignWithCopy for CRContext.WeakContext()
{
  return MEMORY[0x1F4186848]();
}

uint64_t initializeWithTake for CRContext.WeakContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186878](a1, a2);
}

uint64_t assignWithTake for CRContext.WeakContext()
{
  return MEMORY[0x1F4186870]();
}

uint64_t getEnumTagSinglePayload for CRContext.WeakContext(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CRContext.WeakContext(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CRContext.WeakContext()
{
  return &type metadata for CRContext.WeakContext;
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

uint64_t sub_1C3FDA374()
{
  return sub_1C3FD9708(&qword_1EA39BD78, type metadata accessor for FileAttributeKey);
}

uint64_t sub_1C3FDA3BC()
{
  return sub_1C3FD9708(&qword_1EA39BD80, type metadata accessor for FileAttributeKey);
}

uint64_t sub_1C3FDA404()
{
  return sub_1C3FD9708(&qword_1EA39BD88, type metadata accessor for URLResourceKey);
}

uint64_t sub_1C3FDA44C()
{
  return sub_1C3FD9708((unint64_t *)&unk_1EA39BD90, type metadata accessor for URLResourceKey);
}

uint64_t sub_1C3FDA494()
{
  return sub_1C3FD9708(&qword_1EBBC07A8, type metadata accessor for URLResourceKey);
}

uint64_t sub_1C3FDA4DC()
{
  return sub_1C3FD9708(qword_1EBBBC870, type metadata accessor for FileAttributeKey);
}

uint64_t sub_1C3FDA524@<X0>(uint64_t *a1@<X8>)
{
  return sub_1C3FD9340(a1);
}

uint64_t sub_1C3FDA548()
{
  sqlite3_snapshot_free(*(sqlite3_snapshot **)(v0 + 16));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRSQLStoreSnapshot()
{
  return self;
}

uint64_t sub_1C3FDA5A4()
{
  uint64_t v0 = sub_1C4496C58();
  __swift_allocate_value_buffer(v0, qword_1EBBC5938);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EBBC5938);
  return sub_1C4496C48();
}

uint64_t sub_1C3FDA618()
{
  (*(void (**)(void))(*(void *)v0 + 280))();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void sub_1C3FDA68C()
{
  if ((*(unsigned char *)(v0 + 40) & 1) == 0)
  {
    *(unsigned char *)(v0 + 40) = 1;
    (*(void (**)(void))(*(void *)v0 + 384))();
    if (sqlite3_close(*(sqlite3 **)(v0 + 32)))
    {
      sub_1C4497D28();
      swift_bridgeObjectRelease();
      sub_1C4498088();
      sub_1C4497268();
      swift_bridgeObjectRelease();
      sub_1C4497268();
      sub_1C4497F58();
      __break(1u);
    }
  }
}

char *sub_1C3FDA7AC(uint64_t a1, uint64_t a2)
{
  unint64_t result = (char *)sub_1C3F5FA40();
  if (!v3)
  {
    uint64_t v7 = (sqlite3_stmt *)result;
    if (sqlite3_step((sqlite3_stmt *)result) != 100) {
      return (char *)sqlite3_finalize(v7);
    }
    unint64_t result = (char *)sqlite3_column_int(v7, 0);
    int v8 = (int)result / 0x7FFF;
    uint64_t v9 = ((int)result % 0x7FFF);
    if (__OFSUB__(result, 0x7FFF * ((int)result / 0x7FFF)))
    {
      __break(1u);
    }
    else if ((int)result >= -1073741822)
    {
      if ((int)result <= 1073709055)
      {
        *(_WORD *)(v2 + 64) = v8;
        *(unsigned char *)(v2 + 66) = 0;
        if (a1)
        {
          unint64_t result = (char *)sub_1C443ECE4(((int)result / 0x7FFF), a1);
          if ((result & 1) == 0)
          {
            sub_1C3FE3FF0();
            swift_allocError();
            *(void *)uint64_t v10 = v8;
            char v11 = 2;
            goto LABEL_14;
          }
        }
        if (!a2) {
          return (char *)sqlite3_finalize(v7);
        }
        if ((int)v9 >= -32768)
        {
          if ((int)v9 < 0x8000)
          {
            if (!sub_1C443ECE4(v9, a2))
            {
              sub_1C3FE3FF0();
              swift_allocError();
              *(void *)uint64_t v10 = (int)v9;
              char v11 = 1;
LABEL_14:
              *(void *)(v10 + 8) = 0;
              *(unsigned char *)(v10 + 16) = v11;
              swift_willThrow();
              return (char *)sqlite3_finalize(v7);
            }
            return (char *)sqlite3_finalize(v7);
          }
LABEL_21:
          __break(1u);
          return result;
        }
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    __break(1u);
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_1C3FDA940(uint64_t result, int a2)
{
  int v3 = *(__int16 *)(v2 + 64);
  if (*(unsigned char *)(v2 + 66) == 1)
  {
    if ((__int16)result > 0) {
      goto LABEL_9;
    }
  }
  else if (v3 < (__int16)result)
  {
    goto LABEL_9;
  }
  __int16 v4 = *(_WORD *)(v2 + 68);
  if (*(unsigned char *)(v2 + 70)) {
    __int16 v4 = 0;
  }
  if ((a2 & 0x10000) != 0)
  {
    if ((v4 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v4 >= (__int16)a2)
  {
    return result;
  }
LABEL_9:
  unsigned __int16 v5 = *(_WORD *)(v2 + 68);
  if (*(unsigned char *)(v2 + 70)) {
    unsigned __int16 v5 = 0;
  }
  if ((a2 & 0x10000) != 0) {
    __int16 v6 = 0;
  }
  else {
    __int16 v6 = a2;
  }
  if (v6 > (__int16)v5) {
    unsigned __int16 v5 = v6;
  }
  if (*(unsigned char *)(v2 + 66)) {
    int v3 = 0;
  }
  if (v3 <= (__int16)result) {
    LOWORD(v3) = result;
  }
  return sub_1C3FDA9F0((unsigned __int16)v3, v5);
}

uint64_t sub_1C3FDA9F0(int a1, int a2)
{
  sub_1C4497D28();
  swift_bridgeObjectRelease();
  sub_1C4498088();
  sub_1C4497268();
  swift_bridgeObjectRelease();
  sub_1C4497268();
  __int16 v6 = (sqlite3_stmt *)sub_1C3F5FA40();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v3)
  {
    if (sqlite3_step(v6) == 101)
    {
      *(_WORD *)(v2 + 64) = a1;
      *(unsigned char *)(v2 + 66) = BYTE2(a1) & 1;
      *(_WORD *)(v2 + 68) = a2;
      *(unsigned char *)(v2 + 70) = BYTE2(a2) & 1;
    }
    else
    {
      sub_1C4497D28();
      swift_bridgeObjectRelease();
      uint64_t result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(v2 + 32));
      if (!result)
      {
        __break(1u);
        return result;
      }
      sub_1C4497288();
      sub_1C4497268();
      swift_bridgeObjectRelease();
      sub_1C4497268();
      sub_1C3FE3570();
      swift_allocError();
      *(void *)uint64_t v8 = 0xD000000000000014;
      *(void *)(v8 + 8) = 0x80000001C44B0D90;
      *(unsigned char *)(v8 + 16) = 0;
      swift_willThrow();
    }
    return sqlite3_finalize(v6);
  }
  return result;
}

const char *sub_1C3FDABD8()
{
  uint64_t result = sub_1C3F5FA40();
  if (!v1)
  {
    uint64_t v3 = (sqlite3_stmt *)result;
    do
      int v4 = sqlite3_step(v3);
    while (v4 == 100);
    if (v4 != 101)
    {
      sub_1C4497D28();
      swift_bridgeObjectRelease();
      uint64_t result = sqlite3_errmsg(*(sqlite3 **)(v0 + 32));
      if (!result)
      {
        __break(1u);
        return result;
      }
      sub_1C4497288();
      sub_1C4497268();
      swift_bridgeObjectRelease();
      sub_1C4497268();
      sub_1C3FE3570();
      swift_allocError();
      *(void *)uint64_t v5 = 0xD000000000000011;
      *(void *)(v5 + 8) = 0x80000001C44B0D50;
      *(unsigned char *)(v5 + 16) = 0;
      swift_willThrow();
    }
    return (const char *)sqlite3_finalize(v3);
  }
  return result;
}

const char *sub_1C3FDACF4()
{
  uint64_t result = sub_1C3F5FA40();
  if (!v1)
  {
    uint64_t v3 = (sqlite3_stmt *)result;
    do
      int v4 = sqlite3_step(v3);
    while (v4 == 100);
    if (v4 != 101)
    {
      uint64_t result = sqlite3_errmsg(*(sqlite3 **)(v0 + 32));
      if (!result)
      {
        __break(1u);
        return result;
      }
      sub_1C4497288();
      sub_1C4497268();
      swift_bridgeObjectRelease();
      sub_1C4497268();
      sub_1C3FE3570();
      swift_allocError();
      *(void *)uint64_t v5 = 0x75746573204C4157;
      *(void *)(v5 + 8) = 0xEB00000000203A70;
      *(unsigned char *)(v5 + 16) = 0;
      swift_willThrow();
    }
    return (const char *)sqlite3_finalize(v3);
  }
  return result;
}

void sub_1C3FDADF8()
{
}

void sub_1C3FDAE5C()
{
}

void sub_1C3FDAEC0()
{
}

uint64_t sub_1C3FDAF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C4497268();
  __int16 v6 = (sqlite3_stmt *)sub_1C3F5FA40();
  if (v4) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = v6;
  if (sqlite3_step(v6) != 101)
  {
    uint64_t result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(v3 + 32));
    if (!result)
    {
      __break(1u);
LABEL_13:
      __break(1u);
      return result;
    }
    uint64_t v15 = sub_1C4497288();
    uint64_t v17 = v16;
    sub_1C3FE3570();
    swift_allocError();
    *(void *)uint64_t v18 = v15;
    *(void *)(v18 + 8) = v17;
    *(unsigned char *)(v18 + 16) = 2;
    swift_willThrow();
    sqlite3_finalize(v7);
    return swift_bridgeObjectRelease();
  }
  sqlite3_finalize(v7);
  uint64_t result = swift_bridgeObjectRelease();
  if (a3)
  {
    uint64_t v9 = *(sqlite3 **)(v3 + 32);
    uint64_t v10 = *(sqlite3_snapshot **)(a3 + 16);
    swift_retain();
    if (!sqlite3_snapshot_open(v9, "main", v10)) {
      return swift_release();
    }
    uint64_t result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(v3 + 32));
    if (result)
    {
      uint64_t v11 = sub_1C4497288();
      uint64_t v13 = v12;
      sub_1C3FE3570();
      swift_allocError();
      *(void *)uint64_t v14 = v11;
      *(void *)(v14 + 8) = v13;
      *(unsigned char *)(v14 + 16) = 4;
      swift_willThrow();
      return swift_release();
    }
    goto LABEL_13;
  }
  return result;
}

const char *sub_1C3FDB0B0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = (sqlite3_stmt *)sub_1C3F5FA40();
  if (v4) {
    goto LABEL_10;
  }
  uint64_t v10 = v9;
  if (sqlite3_step(v9) != 101)
  {
    uint64_t result = sqlite3_errmsg(*(sqlite3 **)(a2 + 32));
    if (!result)
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    uint64_t v18 = sub_1C4497288();
    uint64_t v20 = v19;
    sub_1C3FE3570();
    swift_allocError();
    *(void *)uint64_t v21 = v18;
    *(void *)(v21 + 8) = v20;
    *(unsigned char *)(v21 + 16) = 2;
    swift_willThrow();
    uint64_t v22 = v10;
    goto LABEL_9;
  }
  sqlite3_finalize(v10);
  if (a1)
  {
    uint64_t v11 = *(sqlite3 **)(a2 + 32);
    uint64_t v12 = *(sqlite3_snapshot **)(a1 + 16);
    swift_retain();
    if (sqlite3_snapshot_open(v11, "main", v12))
    {
      uint64_t result = sqlite3_errmsg(*(sqlite3 **)(a2 + 32));
      if (result)
      {
        uint64_t v14 = sub_1C4497288();
        uint64_t v16 = v15;
        sub_1C3FE3570();
        swift_allocError();
        *(void *)uint64_t v17 = v14;
        *(void *)(v17 + 8) = v16;
        *(unsigned char *)(v17 + 16) = 4;
        swift_willThrow();

        swift_release();
        return (const char *)swift_release();
      }
      goto LABEL_21;
    }
    swift_release();
  }
  sub_1C422E024(a3, (char *)a4);
  uint64_t v23 = (sqlite3_stmt *)sub_1C3F5FA40();
  if (sqlite3_step(v23) == 101)
  {
    uint64_t v22 = v23;
LABEL_9:
    sqlite3_finalize(v22);
    goto LABEL_10;
  }
  uint64_t result = sqlite3_errmsg(*(sqlite3 **)(a2 + 32));
  if (result)
  {
    uint64_t v24 = sub_1C4497288();
    uint64_t v26 = v25;
    sub_1C3FE3570();
    uint64_t v27 = (void *)swift_allocError();
    *(void *)uint64_t v28 = v24;
    *(void *)(v28 + 8) = v26;
    *(unsigned char *)(v28 + 16) = 2;
    swift_willThrow();
    sqlite3_finalize(v23);
    uint64_t v29 = (sqlite3_stmt *)sub_1C3F5FA40();
    if (sqlite3_step(v29) != 101)
    {
      uint64_t result = sqlite3_errmsg(*(sqlite3 **)(a2 + 32));
      if (result)
      {
        uint64_t v30 = sub_1C4497288();
        uint64_t v32 = v31;
        sub_1C3FE3570();
        swift_allocError();
        *(void *)uint64_t v33 = v30;
        *(void *)(v33 + 8) = v32;
        *(unsigned char *)(v33 + 16) = 2;
        swift_willThrow();
        sqlite3_finalize(v29);

        return (const char *)swift_release();
      }
      goto LABEL_22;
    }
    sqlite3_finalize(v29);
    swift_willThrow();
LABEL_10:

    return (const char *)swift_release();
  }
LABEL_23:
  __break(1u);
  return result;
}

sqlite3_stmt *sub_1C3FDB3C0()
{
  uint64_t result = (sqlite3_stmt *)sub_1C3F5FA40();
  if (!v1)
  {
    uint64_t v3 = result;
    if (sqlite3_step(result) == 101)
    {
      sqlite3_finalize(v3);
      uint64_t v3 = (sqlite3_stmt *)sub_1C3F5FA40();
      if (sqlite3_step(v3) == 101) {
        return (sqlite3_stmt *)sqlite3_finalize(v3);
      }
      if (sqlite3_errmsg(*(sqlite3 **)(v0 + 32)))
      {
LABEL_7:
        uint64_t v4 = sub_1C4497288();
        uint64_t v6 = v5;
        sub_1C3FE3570();
        swift_allocError();
        *(void *)uint64_t v7 = v4;
        *(void *)(v7 + 8) = v6;
        *(unsigned char *)(v7 + 16) = 2;
        swift_willThrow();
        return (sqlite3_stmt *)sqlite3_finalize(v3);
      }
      __break(1u);
    }
    uint64_t result = (sqlite3_stmt *)sqlite3_errmsg(*(sqlite3 **)(v0 + 32));
    if (!result)
    {
      __break(1u);
      return result;
    }
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1C3FDB4C8(uint64_t a1, unint64_t a2, uint64_t a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  *(_OWORD *)(v8 + 248) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  swift_beginAccess();
  swift_retain();
  sub_1C3FE4044(a3, v8 + 88);
  swift_endAccess();
  swift_release();
  sub_1C3F516B0(a1, a2, a4, a5, a6, a7, a8);
  sub_1C3FE3F90(a3);
  return v8;
}

const char *sub_1C3FDB5C8()
{
  uint64_t result = sub_1C3F5FA40();
  if (!v1)
  {
    v0[16] = result;
    v0[17] = sub_1C3F5FA40();
    v0[18] = sub_1C3F5FA40();
    v0[19] = sub_1C3F5FA40();
    v0[20] = sub_1C3F5FA40();
    v0[21] = sub_1C3F5FA40();
    v0[22] = sub_1C3F5FA40();
    v0[23] = sub_1C3F5FA40();
    v0[24] = sub_1C3F5FA40();
    v0[25] = sub_1C3F5FA40();
    v0[26] = sub_1C3F5FA40();
    v0[27] = sub_1C3F5FA40();
    v0[28] = sub_1C3F5FA40();
    v0[29] = sub_1C3F5FA40();
    v0[33] = sub_1C3F5FA40();
    v0[34] = sub_1C3F5FA40();
    v0[31] = sub_1C3F5FA40();
    v0[32] = sub_1C3F5FA40();
    v0[30] = sub_1C3F5FA40();
    v0[35] = sub_1C3F5FA40();
    uint64_t result = sub_1C3F5FA40();
    v0[36] = result;
  }
  return result;
}

uint64_t sub_1C3FDB894()
{
  sqlite3_finalize(v0[16]);
  sqlite3_finalize(v0[17]);
  sqlite3_finalize(v0[18]);
  sqlite3_finalize(v0[19]);
  sqlite3_finalize(v0[21]);
  sqlite3_finalize(v0[20]);
  sqlite3_finalize(v0[22]);
  sqlite3_finalize(v0[23]);
  sqlite3_finalize(v0[24]);
  sqlite3_finalize(v0[25]);
  sqlite3_finalize(v0[26]);
  sqlite3_finalize(v0[27]);
  sqlite3_finalize(v0[28]);
  sqlite3_finalize(v0[29]);
  sqlite3_finalize(v0[30]);
  sqlite3_finalize(v0[31]);
  sqlite3_finalize(v0[32]);
  sqlite3_finalize(v0[33]);
  sqlite3_finalize(v0[34]);
  sqlite3_finalize(v0[35]);
  uint64_t v1 = v0[36];
  return sqlite3_finalize(v1);
}

const void *sub_1C3FDB95C(const void *result, uint64_t a2)
{
  if (result) {
    uint64_t v3 = a2 - (void)result;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(v2 + 240), 1, result, v3, *(void (__cdecl **)(void *))(v2 + 72));
  if (sqlite3_step(*(sqlite3_stmt **)(v2 + 240)) == 100) {
    uint64_t v4 = sqlite3_column_int(*(sqlite3_stmt **)(v2 + 240), 0);
  }
  else {
    uint64_t v4 = 0;
  }
  sqlite3_reset(*(sqlite3_stmt **)(v2 + 240));
  return (const void *)v4;
}

uint64_t sub_1C3FDBA04(uint64_t a1, void **a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  while (sqlite3_step(*(sqlite3_stmt **)(a1 + 192)) == 100)
  {
    uint64_t v7 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 192), 0);
    uint64_t v8 = sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 192), 0);
    uint64_t v9 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 192), 1);
    uint64_t v10 = sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 192), 1);
    if (!v8) {
      __break(1u);
    }
    uint64_t v11 = v10;
    if (v7)
    {
      if ((int)v7 <= 14)
      {
        memset(__dst, 0, sizeof(__dst));
        unsigned __int8 v29 = v7;
        memcpy(__dst, v8, (int)v7);
        uint64_t v13 = *(void *)__dst;
        unint64_t v14 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v29 << 48);
        if (v11) {
          goto LABEL_14;
        }
      }
      else
      {
        sub_1C44962E8();
        swift_allocObject();
        if (v7 == 0x7FFFFFFF)
        {
          uint64_t v12 = sub_1C4496288();
          sub_1C44964E8();
          uint64_t v13 = swift_allocObject();
          *(_OWORD *)(v13 + 16) = xmmword_1C449B0C0;
          unint64_t v14 = v12 | 0x8000000000000000;
          if (v11) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v13 = v7 << 32;
          unint64_t v14 = sub_1C4496288() | 0x4000000000000000;
          if (v11)
          {
LABEL_14:
            if (v9)
            {
              if ((int)v9 <= 14)
              {
                memset(__dst, 0, sizeof(__dst));
                unsigned __int8 v29 = v9;
                memcpy(__dst, v11, (int)v9);
                uint64_t v16 = *(void *)__dst;
                unint64_t v17 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v29 << 48);
              }
              else
              {
                sub_1C44962E8();
                swift_allocObject();
                if (v9 == 0x7FFFFFFF)
                {
                  uint64_t v15 = sub_1C4496288();
                  sub_1C44964E8();
                  uint64_t v16 = swift_allocObject();
                  *(_OWORD *)(v16 + 16) = xmmword_1C449B0C0;
                  unint64_t v17 = v15 | 0x8000000000000000;
                }
                else
                {
                  uint64_t v16 = v9 << 32;
                  unint64_t v17 = sub_1C4496288() | 0x4000000000000000;
                }
              }
            }
            else
            {
              uint64_t v16 = 0;
              unint64_t v17 = 0xC000000000000000;
            }
            uint64_t v23 = *a2;
            sub_1C3F7E324(v13, v14);
            sub_1C3F7E324(v16, v17);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *a2 = v23;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              uint64_t v23 = sub_1C3FF13E0(0, v23[2] + 1, 1, v23);
              *a2 = v23;
            }
            unint64_t v26 = v23[2];
            unint64_t v25 = v23[3];
            if (v26 >= v25 >> 1) {
              uint64_t v23 = sub_1C3FF13E0((void *)(v25 > 1), v26 + 1, 1, v23);
            }
            v23[2] = v26 + 1;
            uint64_t v4 = &v23[2 * v26];
            v4[4] = v13;
            v4[5] = v14;
            *a2 = v23;
            sub_1C3F7E2CC(v13, v14);
            sub_1C3F7E2CC(v16, v17);
            uint64_t v5 = v16;
            unint64_t v6 = v17;
            goto LABEL_4;
          }
        }
      }
    }
    else
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0xC000000000000000;
      if (v10) {
        goto LABEL_14;
      }
    }
    uint64_t v18 = *a2;
    sub_1C3F7E324(v13, v14);
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v18;
    if ((v19 & 1) == 0)
    {
      uint64_t v18 = sub_1C3FF13E0(0, v18[2] + 1, 1, v18);
      *a2 = v18;
    }
    unint64_t v21 = v18[2];
    unint64_t v20 = v18[3];
    if (v21 >= v20 >> 1) {
      uint64_t v18 = sub_1C3FF13E0((void *)(v20 > 1), v21 + 1, 1, v18);
    }
    v18[2] = v21 + 1;
    uint64_t v22 = &v18[2 * v21];
    v22[4] = v13;
    v22[5] = v14;
    *a2 = v18;
    uint64_t v5 = v13;
    unint64_t v6 = v14;
LABEL_4:
    sub_1C3F7E2CC(v5, v6);
  }
  return sqlite3_reset(*(sqlite3_stmt **)(a1 + 192));
}

uint64_t sub_1C3FDBDF4(void (*a1)(uint64_t, unint64_t, uint64_t, unint64_t))
{
  uint64_t v3 = v1;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  while (sqlite3_step(*(sqlite3_stmt **)(v3 + 192)) == 100)
  {
    uint64_t v6 = sqlite3_column_bytes(*(sqlite3_stmt **)(v3 + 192), 0);
    uint64_t v7 = sqlite3_column_blob(*(sqlite3_stmt **)(v3 + 192), 0);
    uint64_t v8 = sqlite3_column_bytes(*(sqlite3_stmt **)(v3 + 192), 1);
    uint64_t v9 = sqlite3_column_blob(*(sqlite3_stmt **)(v3 + 192), 1);
    if (!v7) {
      __break(1u);
    }
    uint64_t v10 = v9;
    if (v6)
    {
      if ((int)v6 <= 14)
      {
        memset(__dst, 0, sizeof(__dst));
        unsigned __int8 v18 = v6;
        memcpy(__dst, v7, (int)v6);
        uint64_t v12 = *(void *)__dst;
        unint64_t v13 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v18 << 48);
        if (!v10) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_1C44962E8();
        swift_allocObject();
        if (v6 == 0x7FFFFFFF)
        {
          uint64_t v11 = sub_1C4496288();
          sub_1C44964E8();
          uint64_t v12 = swift_allocObject();
          *(_OWORD *)(v12 + 16) = xmmword_1C449B0C0;
          unint64_t v13 = v11 | 0x8000000000000000;
          if (!v10) {
            goto LABEL_3;
          }
        }
        else
        {
          uint64_t v12 = v6 << 32;
          unint64_t v13 = sub_1C4496288() | 0x4000000000000000;
          if (!v10)
          {
LABEL_3:
            a1(v12, v13, 0, 0xF000000000000000);
            uint64_t result = sub_1C3F7E2CC(v12, v13);
            if (v2) {
              return result;
            }
            continue;
          }
        }
      }
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v13 = 0xC000000000000000;
      if (!v9) {
        goto LABEL_3;
      }
    }
    if (v8)
    {
      if ((int)v8 <= 14)
      {
        memset(__dst, 0, sizeof(__dst));
        unsigned __int8 v18 = v8;
        memcpy(__dst, v10, (int)v8);
        uint64_t v15 = *(void *)__dst;
        unint64_t v16 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v18 << 48);
      }
      else
      {
        sub_1C44962E8();
        swift_allocObject();
        if (v8 == 0x7FFFFFFF)
        {
          uint64_t v14 = sub_1C4496288();
          sub_1C44964E8();
          uint64_t v15 = swift_allocObject();
          *(_OWORD *)(v15 + 16) = xmmword_1C449B0C0;
          unint64_t v16 = v14 | 0x8000000000000000;
        }
        else
        {
          uint64_t v15 = v8 << 32;
          unint64_t v16 = sub_1C4496288() | 0x4000000000000000;
        }
      }
    }
    else
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0xC000000000000000;
    }
    sub_1C3F7E324(v15, v16);
    a1(v12, v13, v15, v16);
    if (v2)
    {
      sub_1C3F7E2CC(v15, v16);
      sub_1C3F7E2CC(v15, v16);
      return sub_1C3F7E2CC(v12, v13);
    }
    sub_1C3F7E2CC(v12, v13);
    sub_1C3F7E2CC(v15, v16);
    sub_1C3F7E2CC(v15, v16);
  }
  return sqlite3_reset(*(sqlite3_stmt **)(v3 + 192));
}

const char *sub_1C3FDC160(const char *result, uint64_t a2)
{
  if (result) {
    uint64_t v3 = a2 - (void)result;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(v2 + 288), 1, result, v3, *(void (__cdecl **)(void *))(v2 + 72));
  if (sqlite3_step(*(sqlite3_stmt **)(v2 + 288)) == 101) {
    return (const char *)sqlite3_reset(*(sqlite3_stmt **)(v2 + 288));
  }
  uint64_t result = sqlite3_errmsg(*(sqlite3 **)(v2 + 32));
  if (result)
  {
    sub_1C4497288();
    sub_1C4497268();
    swift_bridgeObjectRelease();
    sub_1C4497268();
    sub_1C3FE3570();
    swift_allocError();
    *(void *)uint64_t v4 = 0x203A65766F6D6552;
    *(void *)(v4 + 8) = 0xE800000000000000;
    *(unsigned char *)(v4 + 16) = 2;
    return (const char *)swift_willThrow();
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1C3FDC278(void *a1, uint64_t a2)
{
  if (a1) {
    uint64_t v7 = a2 - (void)a1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v7 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    swift_once();
    goto LABEL_9;
  }
  uint64_t v2 = v4;
  sqlite3_bind_blob(*(sqlite3_stmt **)(v3 + 264), 1, a1, v7, *(void (__cdecl **)(void *))(v3 + 72));
  if (sqlite3_step(*(sqlite3_stmt **)(v3 + 264)) != 100
    || (int v8 = sqlite3_column_bytes(*(sqlite3_stmt **)(v3 + 264), 0),
        (uint64_t v9 = sqlite3_column_blob(*(sqlite3_stmt **)(v3 + 264), 0)) == 0))
  {
    uint64_t v5 = 0;
    goto LABEL_12;
  }
  uint64_t v5 = sub_1C3F5E01C(v9, v8);
  unint64_t v6 = v10;
  if (qword_1EBBC09E0 != -1) {
    goto LABEL_17;
  }
LABEL_9:
  uint64_t v11 = qword_1EBBC5A30;
  swift_retain();
  uint64_t v12 = sub_1C413BA08(v5, v6, v11);
  if (v2) {
    return v5;
  }
  uint64_t v5 = v12;
LABEL_12:
  sqlite3_reset(*(sqlite3_stmt **)(v3 + 264));
  return v5;
}

uint64_t sub_1C3FDC3A8(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  v39[14] = *MEMORY[0x1E4F143B8];
  type metadata accessor for CREncoder();
  uint64_t inited = swift_initStackObject();
  uint64_t v14 = MEMORY[0x1E4FBC860];
  uint64_t v15 = MEMORY[0x1E4FBC868];
  *(void *)(inited + 32) = MEMORY[0x1E4FBC868];
  *(void *)(inited + 40) = v14;
  *(void *)(inited + 48) = v14;
  *(void *)(inited + 56) = v15;
  *(void *)(inited + 64) = v14;
  *(void *)(inited + 80) = 0;
  *(void *)(inited + 88) = 0;
  *(void *)(inited + 16) = a1;
  *(void *)(inited + 24) = v14;
  *(unsigned char *)(inited + 72) = 1;
  id v16 = a1;
  uint64_t v17 = sub_1C400ACCC(a4, a5);
  if (v6)
  {
    swift_setDeallocating();
    CREncoder.deinit();
    return swift_deallocClassInstance();
  }
  else
  {
    uint64_t v20 = v17;
    unint64_t v21 = v18;
    swift_setDeallocating();
    CREncoder.deinit();
    swift_deallocClassInstance();
    switch(a3 >> 62)
    {
      case 1uLL:
        if (a2 >> 32 < (int)a2)
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
        }
        swift_retain();
        sub_1C3F7E324(v20, v21);
        swift_retain();
        sub_1C3F7E324(a2, a3);
        sub_1C3FE3B1C((int)a2, a2 >> 32, a3 & 0x3FFFFFFFFFFFFFFFLL, v20, v21, v5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3FDCA5C);
        sub_1C3F7E2CC(a2, a3);
        goto LABEL_26;
      case 2uLL:
        uint64_t v24 = a3 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v25 = *(void *)(a2 + 16);
        uint64_t v26 = *(void *)(a2 + 24);
        swift_retain();
        sub_1C3F7E324(v20, v21);
        swift_retain();
        swift_retain();
        swift_retain();
        sub_1C3FE3B1C(v25, v26, v24, v20, v21, v7, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3FDCA5C);
        swift_release();
        goto LABEL_25;
      case 3uLL:
        memset(v39, 0, 14);
        swift_retain_n();
        switch(v21 >> 62)
        {
          case 1uLL:
            if (v20 >> 32 < (int)v20) {
              goto LABEL_29;
            }
            sub_1C3F7E324(v20, v21);
            swift_retain();
            uint64_t v32 = (char *)v39;
            uint64_t v28 = (int)v20;
            uint64_t v29 = v20 >> 32;
            uint64_t v30 = v21 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v31 = v5;
            goto LABEL_18;
          case 2uLL:
            uint64_t v36 = *(void *)(v20 + 16);
            uint64_t v37 = *(void *)(v20 + 24);
            sub_1C3F7E324(v20, v21);
            swift_retain();
            swift_retain();
            swift_retain();
            sub_1C3FE3C00(v36, v37, v21 & 0x3FFFFFFFFFFFFFFFLL, v5, (uint64_t)v39, (uint64_t)v39, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3FDCA5C);
            goto LABEL_20;
          case 3uLL:
            memset(v38, 0, 14);
            sub_1C3F7E324(v20, v21);
            uint64_t v23 = (char *)v38;
            uint64_t v27 = (char *)v39;
            goto LABEL_22;
          default:
            v38[0] = v20;
            LOWORD(v38[1]) = v21;
            BYTE2(v38[1]) = BYTE2(v21);
            BYTE3(v38[1]) = BYTE3(v21);
            BYTE4(v38[1]) = BYTE4(v21);
            BYTE5(v38[1]) = BYTE5(v21);
            sub_1C3F7E324(v20, v21);
            uint64_t v27 = (char *)v39;
            uint64_t v23 = (char *)v38 + BYTE6(v21);
LABEL_22:
            uint64_t v35 = v5;
            goto LABEL_23;
        }
      default:
        v39[0] = a2;
        LOWORD(v39[1]) = a3;
        BYTE2(v39[1]) = BYTE2(a3);
        BYTE3(v39[1]) = BYTE3(a3);
        BYTE4(v39[1]) = BYTE4(a3);
        BYTE5(v39[1]) = BYTE5(a3);
        uint64_t v22 = (char *)v39 + BYTE6(a3);
        swift_retain_n();
        switch(v21 >> 62)
        {
          case 1uLL:
            if (v20 >> 32 < (int)v20) {
              goto LABEL_28;
            }
            sub_1C3F7E324(v20, v21);
            swift_retain();
            uint64_t v28 = (int)v20;
            uint64_t v29 = v20 >> 32;
            uint64_t v30 = v21 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v31 = v7;
            uint64_t v32 = (char *)v39 + BYTE6(a3);
LABEL_18:
            sub_1C3FE3C00(v28, v29, v30, v31, (uint64_t)v39, (uint64_t)v32, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3FDCA5C);
            break;
          case 2uLL:
            uint64_t v33 = *(void *)(v20 + 16);
            uint64_t v34 = *(void *)(v20 + 24);
            sub_1C3F7E324(v20, v21);
            swift_retain();
            swift_retain();
            swift_retain();
            sub_1C3FE3C00(v33, v34, v21 & 0x3FFFFFFFFFFFFFFFLL, v7, (uint64_t)v39, (uint64_t)v22, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3FDCA5C);
LABEL_20:
            swift_release();
            swift_release();
            break;
          case 3uLL:
            memset(v38, 0, 14);
            sub_1C3F7E324(v20, v21);
            uint64_t v23 = (char *)v38;
            goto LABEL_15;
          default:
            v38[0] = v20;
            LOWORD(v38[1]) = v21;
            BYTE2(v38[1]) = BYTE2(v21);
            BYTE3(v38[1]) = BYTE3(v21);
            BYTE4(v38[1]) = BYTE4(v21);
            BYTE5(v38[1]) = BYTE5(v21);
            sub_1C3F7E324(v20, v21);
            uint64_t v23 = (char *)v38 + BYTE6(v21);
LABEL_15:
            uint64_t v35 = v7;
            uint64_t v27 = (char *)v39 + BYTE6(a3);
LABEL_23:
            sub_1C3FDCA5C((uint64_t)v38, (uint64_t)v23, v35, v39, (uint64_t)v27);
            break;
        }
        sub_1C3F7E2CC(v20, v21);
LABEL_25:
        swift_release();
LABEL_26:
        sub_1C3F7E2CC(v20, v21);
        uint64_t result = swift_release();
        break;
    }
  }
  return result;
}

uint64_t sub_1C3FDCA5C(uint64_t result, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5)
{
  if (result) {
    uint64_t v6 = a2 - result;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v6 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = *(void (__cdecl **)(void *))(a3 + 72);
  uint64_t result = sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 272), 1, (const void *)result, v6, *(void (__cdecl **)(void *))(a3 + 72));
  if (a4) {
    uint64_t v10 = a5 - (void)a4;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_18;
  }
  if (v10 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 272), 2, a4, v10, v9);
  if (sqlite3_step(*(sqlite3_stmt **)(a3 + 272)) == 101) {
    return sqlite3_reset(*(sqlite3_stmt **)(a3 + 272));
  }
  sub_1C4497D28();
  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(a3 + 32));
  if (!result) {
    goto LABEL_20;
  }
  sub_1C4497288();
  sub_1C4497268();
  swift_bridgeObjectRelease();
  sub_1C4497268();
  sub_1C3FE3570();
  swift_allocError();
  *(void *)uint64_t v11 = 0xD000000000000018;
  *(void *)(v11 + 8) = 0x80000001C44B0660;
  *(unsigned char *)(v11 + 16) = 2;
  return swift_willThrow();
}

uint64_t sub_1C3FDCBF0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v198 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  sub_1C3FE3F28(v9 + 88, (uint64_t)&v193);
  if (v194)
  {
    sub_1C3F6DE94(&v193, (uint64_t)v195);
    uint64_t v15 = v196;
    uint64_t v16 = v197;
    __swift_project_boxed_opaque_existential_1(v195, v196);
    a1 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v16 + 8))(a1, a2, v15, v16);
    unint64_t v18 = v17;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v195);
  }
  else
  {
    sub_1C3FE3F90((uint64_t)&v193);
    unint64_t v18 = a2;
    sub_1C3F7E324(a1, a2);
  }
  switch(a9 >> 62)
  {
    case 1uLL:
      if (a8 >> 32 < (int)a8)
      {
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
      }
      uint64_t v29 = a1;
      uint64_t v30 = a6;
      unint64_t v31 = a7;
      uint64_t v32 = v29;
      unint64_t v33 = v18;
      sub_1C3F7E324(v30, v31);
      swift_retain();
      unint64_t v26 = a4;
      sub_1C3F7E324(a3, a4);
      sub_1C3F7E324(v30, v31);
      sub_1C3F7E324(v32, v18);
      swift_retain();
      sub_1C3F7E324(a3, a4);
      sub_1C3F7E324(v32, v18);
      swift_retain();
      sub_1C3F7E324(a8, a9);
      uint64_t v34 = v32;
      a7 = v31;
      uint64_t v35 = v30;
      sub_1C3FE35C4((int)a8, a8 >> 32, a9 & 0x3FFFFFFFFFFFFFFFLL, a3, a4, v30, v31, v34, v33, v189, a5);
      sub_1C3F7E2CC(a8, a9);
      sub_1C3F7E2CC(v34, v33);
      unint64_t v36 = v33;
      uint64_t v37 = a3;
      break;
    case 2uLL:
      uint64_t v184 = *(void *)(a8 + 24);
      uint64_t v186 = *(void *)(a8 + 16);
      sub_1C3F7E324(a6, a7);
      swift_retain();
      unint64_t v26 = a4;
      sub_1C3F7E324(a3, a4);
      sub_1C3F7E324(a6, a7);
      sub_1C3F7E324(a1, v18);
      swift_retain();
      sub_1C3F7E324(a3, a4);
      sub_1C3F7E324(a1, v18);
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1C3FE35C4(v186, v184, a9 & 0x3FFFFFFFFFFFFFFFLL, a3, a4, a6, a7, a1, v18, v189, a5);
      swift_release();
      swift_release();
      sub_1C3F7E2CC(a1, v18);
      uint64_t v38 = a1;
      unint64_t v36 = v18;
      uint64_t v35 = a6;
      uint64_t v37 = a3;
      uint64_t v34 = v38;
      break;
    case 3uLL:
      unint64_t v39 = a7 >> 62;
      memset(v195, 0, 14);
      sub_1C3F7E324(a6, a7);
      uint64_t v40 = a1;
      unint64_t v41 = v18 >> 62;
      sub_1C3F7E324(v40, v18);
      uint64_t v22 = v189;
      swift_retain();
      uint64_t v42 = v40;
      unint64_t v43 = a7;
      sub_1C3F7E324(a6, a7);
      uint64_t v183 = v42;
      unint64_t v185 = v18;
      sub_1C3F7E324(v42, v18);
      swift_retain();
      switch(a4 >> 62)
      {
        case 1uLL:
          uint64_t v37 = a3;
          if (a3 >> 32 < (int)a3) {
            goto LABEL_114;
          }
          swift_retain();
          sub_1C3F7E324(a3, a4);
          sub_1C3F7E324(a6, a7);
          uint64_t v34 = v42;
          sub_1C3F7E324(v42, v18);
          swift_retain();
          sub_1C3F7E324(a3, a4);
          sub_1C3F7E324(a6, a7);
          swift_retain();
          uint64_t v145 = (char *)v195;
          uint64_t v149 = a5;
          uint64_t v46 = (int)a3;
          unint64_t v36 = v18;
          uint64_t v47 = a3 >> 32;
          uint64_t v48 = a4 & 0x3FFFFFFFFFFFFFFFLL;
          goto LABEL_24;
        case 2uLL:
          uint64_t v49 = a4 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v37 = a3;
          uint64_t v54 = *(void *)(a3 + 16);
          uint64_t v174 = *(void *)(a3 + 24);
          swift_retain();
          sub_1C3F7E324(a3, a4);
          uint64_t v35 = a6;
          sub_1C3F7E324(a6, a7);
          uint64_t v34 = v183;
          unint64_t v50 = v185;
          sub_1C3F7E324(v183, v185);
          swift_retain();
          sub_1C3F7E324(a3, a4);
          sub_1C3F7E324(v35, a7);
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v146 = (char *)v195;
          uint64_t v150 = a5;
          uint64_t v51 = v54;
          goto LABEL_26;
        case 3uLL:
          *(void *)((char *)&v193 + 6) = 0;
          *(void *)&long long v193 = 0;
          sub_1C3F7E324(v42, v18);
          swift_retain();
          sub_1C3F7E324(v42, v18);
          swift_retain();
          switch((int)v39)
          {
            case 1:
              uint64_t v94 = (int)a6;
              uint64_t v95 = a6 >> 32;
              if (a6 >> 32 < (int)a6) {
                goto LABEL_118;
              }
              unint64_t v96 = a7;
              uint64_t v177 = a7 & 0x3FFFFFFFFFFFFFFFLL;
              swift_retain();
              sub_1C3F7E324(a3, a4);
              sub_1C3F7E324(a6, a7);
              uint64_t v34 = v183;
              unint64_t v74 = v185;
              sub_1C3F7E324(v183, v185);
              swift_retain();
              sub_1C3F7E324(a3, a4);
              uint64_t v173 = a6;
              uint64_t v97 = a6;
              unint64_t v60 = v96;
              sub_1C3F7E324(v97, v96);
              uint64_t v147 = &v193;
              uint64_t v151 = a5;
              char v76 = v195;
              uint64_t v62 = v94;
              unint64_t v36 = v185;
              uint64_t v63 = v95;
              uint64_t v61 = v177;
              break;
            case 2:
              uint64_t v77 = a7 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v35 = a6;
              uint64_t v98 = *(void *)(a6 + 16);
              uint64_t v99 = *(void *)(a6 + 24);
              uint64_t v167 = v98;
              swift_retain();
              uint64_t v37 = a3;
              sub_1C3F7E324(a3, a4);
              sub_1C3F7E324(v35, a7);
              uint64_t v34 = v183;
              unint64_t v66 = v185;
              sub_1C3F7E324(v183, v185);
              swift_retain();
              sub_1C3F7E324(a3, a4);
              unint64_t v176 = a7;
              sub_1C3F7E324(v35, a7);
              swift_retain();
              swift_retain();
              uint64_t v148 = &v193;
              uint64_t v152 = a5;
              long long v78 = v195;
              uint64_t v67 = v167;
              uint64_t v68 = v99;
              goto LABEL_53;
            case 3:
              memset(v192, 0, 14);
              swift_retain_n();
              uint64_t v35 = a6;
              switch((int)v41)
              {
                case 1:
                  if (v42 >> 32 < (int)v42) {
                    goto LABEL_126;
                  }
                  uint64_t v119 = a6;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, v43);
                  swift_retain();
                  sub_1C3F7E324(a3, a4);
                  unint64_t v120 = v43;
                  sub_1C3F7E324(a6, v43);
                  uint64_t v142 = a5;
                  int v125 = (char *)v195;
                  unsigned int v126 = &v193;
                  uint64_t v121 = (int)v42;
                  uint64_t v122 = v42 >> 32;
                  uint64_t v123 = v185 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v124 = v189;
                  goto LABEL_102;
                case 2:
                  uint64_t v182 = *(void *)(v42 + 16);
                  uint64_t v138 = *(void *)(v42 + 24);
                  sub_1C3F7E324(a3, a4);
                  uint64_t v37 = a3;
                  sub_1C3F7E324(a6, a7);
                  swift_retain();
                  uint64_t v34 = v42;
                  sub_1C3F7E324(a3, a4);
                  uint64_t v129 = a6;
                  sub_1C3F7E324(a6, a7);
                  swift_retain();
                  swift_retain();
                  uint64_t v143 = a5;
                  uint64_t v134 = v195;
                  int v131 = &v193;
                  uint64_t v130 = v182;
                  uint64_t v135 = v138;
                  uint64_t v136 = v185 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v137 = v189;
                  goto LABEL_104;
                case 3:
                  memset(v191, 0, 14);
                  unint64_t v26 = a4;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  long long v70 = (char *)v191;
                  uint64_t v80 = v195;
                  long long v93 = &v193;
                  goto LABEL_106;
                default:
                  v191[0] = v42;
                  LODWORD(v191[1]) = v185;
                  WORD2(v191[1]) = WORD2(v185);
                  unint64_t v26 = a4;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v80 = v195;
                  long long v93 = &v193;
                  long long v70 = (char *)v191 + BYTE6(v185);
LABEL_106:
                  uint64_t v132 = v189;
                  goto LABEL_107;
              }
            default:
              v192[0] = a6;
              LOWORD(v192[1]) = a7;
              BYTE2(v192[1]) = BYTE2(a7);
              BYTE3(v192[1]) = BYTE3(a7);
              BYTE4(v192[1]) = BYTE4(a7);
              BYTE5(v192[1]) = BYTE5(a7);
              swift_retain_n();
              uint64_t v172 = a6;
              switch((int)v41)
              {
                case 1:
                  if (v42 >> 32 < (int)v42) {
                    goto LABEL_122;
                  }
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  swift_retain();
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v153 = (char *)v192 + BYTE6(a7);
                  uint64_t v140 = a5;
                  uint64_t v111 = v195;
                  uint64_t v104 = &v193;
                  uint64_t v101 = (int)v42;
                  uint64_t v102 = v42 >> 32;
                  uint64_t v103 = v18 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v112 = v189;
                  goto LABEL_76;
                case 2:
                  uint64_t v118 = *(void *)(v42 + 24);
                  uint64_t v180 = *(void *)(v183 + 16);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  swift_retain();
                  uint64_t v34 = v183;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  swift_retain();
                  swift_retain();
                  int v154 = (char *)v192 + BYTE6(a7);
                  uint64_t v141 = a5;
                  uint64_t v114 = v195;
                  unint64_t v109 = &v193;
                  uint64_t v108 = v180;
                  uint64_t v115 = v118;
                  uint64_t v116 = v18 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v117 = v189;
                  goto LABEL_78;
                case 3:
                  memset(v191, 0, 14);
                  unint64_t v26 = a4;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v144 = (char *)v192 + BYTE6(a7);
                  uint64_t v28 = (char *)v191;
                  long long v45 = v195;
                  char v53 = &v193;
                  goto LABEL_80;
                default:
                  v191[0] = v42;
                  LODWORD(v191[1]) = v18;
                  WORD2(v191[1]) = WORD2(v18);
                  unint64_t v26 = a4;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v144 = (char *)v192 + BYTE6(a7);
                  long long v45 = v195;
                  char v53 = &v193;
                  uint64_t v28 = (char *)v191 + BYTE6(v18);
LABEL_80:
                  uint64_t v110 = v189;
                  goto LABEL_81;
              }
          }
          goto LABEL_50;
        default:
          *(void *)&long long v193 = a3;
          DWORD2(v193) = a4;
          WORD6(v193) = WORD2(a4);
          sub_1C3F7E324(v42, v18);
          swift_retain();
          sub_1C3F7E324(v42, v18);
          swift_retain();
          switch((int)v39)
          {
            case 1:
              uint64_t v71 = (int)a6;
              uint64_t v72 = a6 >> 32;
              if (a6 >> 32 < (int)a6) {
                goto LABEL_116;
              }
              unint64_t v73 = a7;
              uint64_t v163 = a7 & 0x3FFFFFFFFFFFFFFFLL;
              swift_retain();
              sub_1C3F7E324(a3, a4);
              sub_1C3F7E324(a6, a7);
              uint64_t v34 = v183;
              unint64_t v74 = v185;
              sub_1C3F7E324(v183, v185);
              swift_retain();
              sub_1C3F7E324(a3, a4);
              uint64_t v173 = a6;
              uint64_t v75 = a6;
              unint64_t v60 = v73;
              sub_1C3F7E324(v75, v73);
              uint64_t v147 = (long long *)((char *)&v193 + BYTE6(a4));
              uint64_t v151 = a5;
              char v76 = v195;
              uint64_t v62 = v71;
              unint64_t v36 = v185;
              uint64_t v63 = v72;
              uint64_t v61 = v163;
              break;
            case 2:
              uint64_t v77 = a7 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v35 = a6;
              uint64_t v158 = *(void *)(a6 + 24);
              uint64_t v164 = *(void *)(a6 + 16);
              swift_retain();
              uint64_t v37 = a3;
              sub_1C3F7E324(a3, a4);
              sub_1C3F7E324(a6, a7);
              uint64_t v34 = v183;
              unint64_t v66 = v185;
              sub_1C3F7E324(v183, v185);
              swift_retain();
              sub_1C3F7E324(a3, a4);
              unint64_t v176 = a7;
              sub_1C3F7E324(a6, a7);
              swift_retain();
              swift_retain();
              uint64_t v148 = (long long *)((char *)&v193 + BYTE6(a4));
              uint64_t v152 = a5;
              long long v78 = v195;
              uint64_t v68 = v158;
              uint64_t v67 = v164;
LABEL_53:
              uint64_t v88 = v77;
              uint64_t v89 = v34;
              unint64_t v90 = v66;
              uint64_t v91 = v189;
              goto LABEL_54;
            case 3:
              memset(v192, 0, 14);
              swift_retain_n();
              uint64_t v35 = a6;
              switch((int)v41)
              {
                case 1:
                  if (v42 >> 32 < (int)v42) {
                    goto LABEL_124;
                  }
                  uint64_t v119 = a6;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, v43);
                  swift_retain();
                  sub_1C3F7E324(a3, a4);
                  unint64_t v120 = v43;
                  sub_1C3F7E324(a6, v43);
                  uint64_t v142 = a5;
                  int v125 = (char *)v195;
                  uint64_t v121 = (int)v42;
                  uint64_t v122 = v42 >> 32;
                  uint64_t v123 = v185 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v124 = v189;
                  unsigned int v126 = (long long *)((char *)&v193 + BYTE6(a4));
                  goto LABEL_102;
                case 2:
                  uint64_t v170 = *(void *)(v42 + 16);
                  uint64_t v133 = *(void *)(v42 + 24);
                  sub_1C3F7E324(a3, a4);
                  uint64_t v37 = a3;
                  sub_1C3F7E324(a6, a7);
                  swift_retain();
                  uint64_t v34 = v42;
                  sub_1C3F7E324(a3, a4);
                  uint64_t v129 = a6;
                  sub_1C3F7E324(a6, a7);
                  swift_retain();
                  swift_retain();
                  uint64_t v143 = a5;
                  uint64_t v134 = v195;
                  uint64_t v130 = v170;
                  uint64_t v135 = v133;
                  uint64_t v136 = v185 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v137 = v189;
                  int v131 = (long long *)((char *)&v193 + BYTE6(a4));
                  goto LABEL_104;
                case 3:
                  memset(v191, 0, 14);
                  uint64_t v79 = (long long *)((char *)&v193 + BYTE6(a4));
                  unint64_t v26 = a4;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(v35, a7);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(v35, a7);
                  long long v70 = (char *)v191;
                  uint64_t v80 = v195;
                  goto LABEL_93;
                default:
                  v191[0] = v42;
                  LODWORD(v191[1]) = v185;
                  WORD2(v191[1]) = WORD2(v185);
                  uint64_t v79 = (long long *)((char *)&v193 + BYTE6(a4));
                  unint64_t v26 = a4;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(v35, a7);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(v35, a7);
                  uint64_t v80 = v195;
                  long long v70 = (char *)v191 + BYTE6(v185);
LABEL_93:
                  uint64_t v132 = v189;
                  long long v93 = v79;
                  goto LABEL_107;
              }
            default:
              v192[0] = a6;
              LOWORD(v192[1]) = a7;
              BYTE2(v192[1]) = BYTE2(a7);
              BYTE3(v192[1]) = BYTE3(a7);
              BYTE4(v192[1]) = BYTE4(a7);
              BYTE5(v192[1]) = BYTE5(a7);
              swift_retain_n();
              uint64_t v172 = a6;
              switch((int)v41)
              {
                case 1:
                  if (v42 >> 32 < (int)v42) {
                    goto LABEL_120;
                  }
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  swift_retain();
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v153 = (char *)v192 + BYTE6(a7);
                  uint64_t v140 = a5;
                  uint64_t v111 = v195;
                  uint64_t v101 = (int)v42;
                  uint64_t v102 = v42 >> 32;
                  uint64_t v103 = v18 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v112 = v189;
                  uint64_t v104 = (long long *)((char *)&v193 + BYTE6(a4));
                  goto LABEL_76;
                case 2:
                  uint64_t v113 = *(void *)(v42 + 24);
                  uint64_t v168 = *(void *)(v183 + 16);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  swift_retain();
                  uint64_t v34 = v183;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  swift_retain();
                  swift_retain();
                  int v154 = (char *)v192 + BYTE6(a7);
                  uint64_t v141 = a5;
                  uint64_t v114 = v195;
                  uint64_t v108 = v168;
                  uint64_t v115 = v113;
                  uint64_t v116 = v18 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v117 = v189;
                  unint64_t v109 = (long long *)((char *)&v193 + BYTE6(a4));
                  goto LABEL_78;
                case 3:
                  memset(v191, 0, 14);
                  uint64_t v44 = (long long *)((char *)&v193 + BYTE6(a4));
                  unint64_t v26 = a4;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v144 = (char *)v192 + BYTE6(a7);
                  uint64_t v28 = (char *)v191;
                  long long v45 = v195;
                  goto LABEL_66;
                default:
                  v191[0] = v42;
                  LODWORD(v191[1]) = v18;
                  WORD2(v191[1]) = WORD2(v18);
                  uint64_t v44 = (long long *)((char *)&v193 + BYTE6(a4));
                  unint64_t v26 = a4;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v144 = (char *)v192 + BYTE6(a7);
                  long long v45 = v195;
                  uint64_t v28 = (char *)v191 + BYTE6(v18);
LABEL_66:
                  uint64_t v110 = v189;
                  char v53 = v44;
                  goto LABEL_81;
              }
          }
LABEL_50:
          uint64_t v85 = v34;
          unint64_t v86 = v74;
          uint64_t v87 = v189;
          goto LABEL_51;
      }
    default:
      v195[0] = a8;
      LODWORD(v195[1]) = a9;
      WORD2(v195[1]) = WORD2(a9);
      unint64_t v19 = a7 >> 62;
      sub_1C3F7E324(a6, a7);
      uint64_t v20 = a1;
      unint64_t v21 = v18 >> 62;
      sub_1C3F7E324(v20, v18);
      uint64_t v22 = v189;
      swift_retain();
      uint64_t v23 = v20;
      unint64_t v24 = a7;
      sub_1C3F7E324(a6, a7);
      uint64_t v183 = v23;
      unint64_t v185 = v18;
      sub_1C3F7E324(v23, v18);
      swift_retain();
      switch(a4 >> 62)
      {
        case 1uLL:
          uint64_t v37 = a3;
          if (a3 >> 32 < (int)a3) {
            goto LABEL_113;
          }
          swift_retain();
          sub_1C3F7E324(a3, a4);
          sub_1C3F7E324(a6, a7);
          uint64_t v34 = v23;
          sub_1C3F7E324(v23, v18);
          swift_retain();
          sub_1C3F7E324(a3, a4);
          sub_1C3F7E324(a6, a7);
          swift_retain();
          uint64_t v145 = (char *)v195 + BYTE6(a9);
          uint64_t v149 = a5;
          uint64_t v46 = (int)a3;
          unint64_t v36 = v18;
          uint64_t v47 = a3 >> 32;
          uint64_t v48 = a4 & 0x3FFFFFFFFFFFFFFFLL;
LABEL_24:
          uint64_t v35 = a6;
          sub_1C3FE36E4(v46, v47, v48, a6, a7, v34, v36, v22, v195, (uint64_t)v145, v149);
LABEL_27:
          swift_release();
          unint64_t v26 = a4;
          break;
        case 2uLL:
          uint64_t v49 = a4 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v37 = a3;
          uint64_t v162 = *(void *)(a3 + 16);
          uint64_t v174 = *(void *)(a3 + 24);
          swift_retain();
          sub_1C3F7E324(a3, a4);
          uint64_t v35 = a6;
          sub_1C3F7E324(a6, a7);
          uint64_t v34 = v23;
          unint64_t v50 = v185;
          sub_1C3F7E324(v23, v185);
          swift_retain();
          sub_1C3F7E324(a3, a4);
          sub_1C3F7E324(v35, a7);
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v146 = (char *)v195 + BYTE6(a9);
          uint64_t v150 = a5;
          uint64_t v51 = v162;
LABEL_26:
          unint64_t v36 = v50;
          sub_1C3FE36E4(v51, v174, v49, v35, a7, v34, v50, v22, v195, (uint64_t)v146, v150);
          swift_release();
          swift_release();
          goto LABEL_27;
        case 3uLL:
          *(void *)((char *)&v193 + 6) = 0;
          *(void *)&long long v193 = 0;
          sub_1C3F7E324(v23, v18);
          swift_retain();
          sub_1C3F7E324(v23, v18);
          swift_retain();
          switch((int)v19)
          {
            case 1:
              uint64_t v175 = (char *)v195 + BYTE6(a9);
              uint64_t v81 = (int)a6;
              uint64_t v82 = a6 >> 32;
              if (a6 >> 32 < (int)a6) {
                goto LABEL_117;
              }
              unint64_t v83 = a7;
              uint64_t v165 = a7 & 0x3FFFFFFFFFFFFFFFLL;
              swift_retain();
              sub_1C3F7E324(a3, a4);
              sub_1C3F7E324(a6, a7);
              uint64_t v34 = v183;
              unint64_t v58 = v185;
              sub_1C3F7E324(v183, v185);
              swift_retain();
              sub_1C3F7E324(a3, a4);
              uint64_t v173 = a6;
              uint64_t v84 = a6;
              unint64_t v60 = v83;
              sub_1C3F7E324(v84, v83);
              uint64_t v147 = &v193;
              uint64_t v151 = a5;
              uint64_t v62 = v81;
              unint64_t v36 = v185;
              uint64_t v63 = v82;
              uint64_t v61 = v165;
              break;
            case 2:
              uint64_t v64 = a7 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v35 = a6;
              uint64_t v159 = *(void *)(a6 + 24);
              uint64_t v166 = *(void *)(a6 + 16);
              swift_retain();
              uint64_t v65 = (char *)v195 + BYTE6(a9);
              uint64_t v37 = a3;
              sub_1C3F7E324(a3, a4);
              sub_1C3F7E324(v35, a7);
              uint64_t v34 = v183;
              unint64_t v66 = v185;
              sub_1C3F7E324(v183, v185);
              swift_retain();
              sub_1C3F7E324(a3, a4);
              unint64_t v176 = a7;
              sub_1C3F7E324(v35, a7);
              swift_retain();
              swift_retain();
              uint64_t v148 = &v193;
              uint64_t v152 = a5;
              uint64_t v68 = v159;
              uint64_t v67 = v166;
              goto LABEL_45;
            case 3:
              memset(v192, 0, 14);
              swift_retain_n();
              uint64_t v35 = a6;
              switch((int)v21)
              {
                case 1:
                  if (v23 >> 32 < (int)v23) {
                    goto LABEL_125;
                  }
                  uint64_t v119 = a6;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, v24);
                  swift_retain();
                  sub_1C3F7E324(a3, a4);
                  unint64_t v120 = v24;
                  sub_1C3F7E324(a6, v24);
                  uint64_t v142 = a5;
                  unsigned int v126 = &v193;
                  uint64_t v121 = (int)v23;
                  uint64_t v122 = v23 >> 32;
                  uint64_t v123 = v185 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v124 = v189;
                  int v125 = (char *)v195 + BYTE6(a9);
                  goto LABEL_102;
                case 2:
                  uint64_t v127 = v185 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v181 = (char *)v195 + BYTE6(a9);
                  uint64_t v171 = *(void *)(v23 + 16);
                  uint64_t v128 = *(void *)(v23 + 24);
                  sub_1C3F7E324(a3, a4);
                  uint64_t v37 = a3;
                  sub_1C3F7E324(a6, a7);
                  swift_retain();
                  uint64_t v34 = v23;
                  sub_1C3F7E324(a3, a4);
                  uint64_t v129 = a6;
                  sub_1C3F7E324(a6, a7);
                  swift_retain();
                  swift_retain();
                  uint64_t v143 = a5;
                  int v131 = &v193;
                  uint64_t v130 = v171;
                  goto LABEL_97;
                case 3:
                  memset(v191, 0, 14);
                  long long v92 = (char *)v195 + BYTE6(a9);
                  unint64_t v26 = a4;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(v35, a7);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(v35, a7);
                  long long v70 = (char *)v191;
                  long long v93 = &v193;
                  goto LABEL_99;
                default:
                  v191[0] = v23;
                  LODWORD(v191[1]) = v185;
                  WORD2(v191[1]) = WORD2(v185);
                  long long v92 = (char *)v195 + BYTE6(a9);
                  unint64_t v26 = a4;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(v35, a7);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(v35, a7);
                  long long v93 = &v193;
                  long long v70 = (char *)v191 + BYTE6(v185);
LABEL_99:
                  uint64_t v132 = v189;
                  uint64_t v80 = v92;
                  goto LABEL_107;
              }
            default:
              v192[0] = a6;
              LOWORD(v192[1]) = a7;
              BYTE2(v192[1]) = BYTE2(a7);
              BYTE3(v192[1]) = BYTE3(a7);
              BYTE4(v192[1]) = BYTE4(a7);
              BYTE5(v192[1]) = BYTE5(a7);
              swift_retain_n();
              uint64_t v172 = a6;
              switch((int)v21)
              {
                case 1:
                  uint64_t v178 = (char *)v195 + BYTE6(a9);
                  if (v23 >> 32 < (int)v23) {
                    goto LABEL_121;
                  }
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v100 = v189;
                  swift_retain();
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v153 = (char *)v192 + BYTE6(a7);
                  uint64_t v140 = a5;
                  uint64_t v104 = &v193;
                  uint64_t v101 = (int)v23;
                  uint64_t v102 = v23 >> 32;
                  uint64_t v103 = v18 & 0x3FFFFFFFFFFFFFFFLL;
                  goto LABEL_69;
                case 2:
                  uint64_t v105 = v18 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v179 = (char *)v195 + BYTE6(a9);
                  uint64_t v106 = *(void *)(v23 + 24);
                  uint64_t v169 = *(void *)(v183 + 16);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v107 = v189;
                  swift_retain();
                  uint64_t v34 = v183;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  swift_retain();
                  swift_retain();
                  int v154 = (char *)v192 + BYTE6(a7);
                  uint64_t v141 = a5;
                  unint64_t v109 = &v193;
                  uint64_t v108 = v169;
                  goto LABEL_71;
                case 3:
                  memset(v191, 0, 14);
                  int v52 = (char *)v195 + BYTE6(a9);
                  unint64_t v26 = a4;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v144 = (char *)v192 + BYTE6(a7);
                  uint64_t v28 = (char *)v191;
                  char v53 = &v193;
                  goto LABEL_73;
                default:
                  v191[0] = v23;
                  LODWORD(v191[1]) = v18;
                  WORD2(v191[1]) = WORD2(v18);
                  int v52 = (char *)v195 + BYTE6(a9);
                  unint64_t v26 = a4;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v144 = (char *)v192 + BYTE6(a7);
                  char v53 = &v193;
                  uint64_t v28 = (char *)v191 + BYTE6(v18);
LABEL_73:
                  uint64_t v110 = v189;
                  long long v45 = v52;
                  goto LABEL_81;
              }
          }
          goto LABEL_43;
        default:
          *(void *)&long long v193 = a3;
          DWORD2(v193) = a4;
          WORD6(v193) = WORD2(a4);
          sub_1C3F7E324(v23, v18);
          swift_retain();
          sub_1C3F7E324(v23, v18);
          swift_retain();
          switch((int)v19)
          {
            case 1:
              uint64_t v175 = (char *)v195 + BYTE6(a9);
              uint64_t v55 = (int)a6;
              uint64_t v56 = a6 >> 32;
              if (a6 >> 32 < (int)a6) {
                goto LABEL_115;
              }
              unint64_t v57 = a7;
              uint64_t v156 = a7 & 0x3FFFFFFFFFFFFFFFLL;
              swift_retain();
              sub_1C3F7E324(a3, a4);
              sub_1C3F7E324(a6, a7);
              uint64_t v34 = v183;
              unint64_t v58 = v185;
              sub_1C3F7E324(v183, v185);
              swift_retain();
              sub_1C3F7E324(a3, a4);
              uint64_t v173 = a6;
              uint64_t v59 = a6;
              unint64_t v60 = v57;
              sub_1C3F7E324(v59, v57);
              uint64_t v61 = v156;
              uint64_t v147 = (long long *)((char *)&v193 + BYTE6(a4));
              uint64_t v151 = a5;
              uint64_t v62 = v55;
              unint64_t v36 = v185;
              uint64_t v63 = v56;
              break;
            case 2:
              uint64_t v64 = a7 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v35 = a6;
              uint64_t v155 = *(void *)(a6 + 24);
              uint64_t v157 = *(void *)(a6 + 16);
              swift_retain();
              uint64_t v65 = (char *)v195 + BYTE6(a9);
              uint64_t v37 = a3;
              sub_1C3F7E324(a3, a4);
              sub_1C3F7E324(v35, a7);
              uint64_t v34 = v183;
              unint64_t v66 = v185;
              sub_1C3F7E324(v183, v185);
              swift_retain();
              sub_1C3F7E324(a3, a4);
              unint64_t v176 = a7;
              sub_1C3F7E324(v35, a7);
              swift_retain();
              swift_retain();
              uint64_t v67 = v157;
              uint64_t v148 = (long long *)((char *)&v193 + BYTE6(a4));
              uint64_t v152 = a5;
              uint64_t v68 = v155;
LABEL_45:
              uint64_t v88 = v64;
              uint64_t v89 = v34;
              unint64_t v90 = v66;
              uint64_t v91 = v189;
              long long v78 = v65;
LABEL_54:
              sub_1C3FE37F8(v67, v68, v88, v89, v90, v91, v195, (uint64_t)v78, &v193, (uint64_t)v148, v152);
              swift_release();
              swift_release();
              sub_1C3F7E2CC(v34, v66);
              unint64_t v26 = a4;
              unint64_t v36 = v66;
              a7 = v176;
              goto LABEL_109;
            case 3:
              memset(v192, 0, 14);
              swift_retain_n();
              uint64_t v35 = a6;
              switch((int)v21)
              {
                case 1:
                  if (v23 >> 32 < (int)v23) {
                    goto LABEL_123;
                  }
                  uint64_t v119 = a6;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, v24);
                  swift_retain();
                  sub_1C3F7E324(a3, a4);
                  unint64_t v120 = v24;
                  sub_1C3F7E324(a6, v24);
                  uint64_t v142 = a5;
                  uint64_t v121 = (int)v23;
                  uint64_t v122 = v23 >> 32;
                  uint64_t v123 = v185 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v124 = v189;
                  int v125 = (char *)v195 + BYTE6(a9);
                  unsigned int v126 = (long long *)((char *)&v193 + BYTE6(a4));
LABEL_102:
                  sub_1C3FE38FC(v121, v122, v123, v124, v195, (uint64_t)v125, &v193, (uint64_t)v126, v142, v192, (uint64_t)v192);
                  swift_release();
                  uint64_t v34 = v183;
                  unint64_t v26 = a4;
                  uint64_t v37 = a3;
                  uint64_t v35 = v119;
                  a7 = v120;
                  break;
                case 2:
                  uint64_t v127 = v185 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v181 = (char *)v195 + BYTE6(a9);
                  uint64_t v161 = *(void *)(v23 + 16);
                  uint64_t v128 = *(void *)(v23 + 24);
                  sub_1C3F7E324(a3, a4);
                  uint64_t v37 = a3;
                  sub_1C3F7E324(a6, a7);
                  swift_retain();
                  uint64_t v34 = v23;
                  sub_1C3F7E324(a3, a4);
                  uint64_t v129 = a6;
                  sub_1C3F7E324(a6, a7);
                  swift_retain();
                  swift_retain();
                  uint64_t v143 = a5;
                  uint64_t v130 = v161;
                  int v131 = (long long *)((char *)&v193 + BYTE6(a4));
LABEL_97:
                  uint64_t v135 = v128;
                  uint64_t v136 = v127;
                  uint64_t v137 = v189;
                  uint64_t v134 = v181;
LABEL_104:
                  sub_1C3FE38FC(v130, v135, v136, v137, v195, (uint64_t)v134, &v193, (uint64_t)v131, v143, v192, (uint64_t)v192);
                  swift_release();
                  swift_release();
                  swift_release();
                  unint64_t v26 = a4;
                  uint64_t v35 = v129;
                  break;
                case 3:
                  memset(v191, 0, 14);
                  long long v69 = (char *)v195 + BYTE6(a9);
                  unint64_t v26 = a4;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(v35, a7);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(v35, a7);
                  long long v70 = (char *)v191;
                  goto LABEL_88;
                default:
                  v191[0] = v23;
                  LODWORD(v191[1]) = v185;
                  WORD2(v191[1]) = WORD2(v185);
                  long long v69 = (char *)v195 + BYTE6(a9);
                  unint64_t v26 = a4;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(v35, a7);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(v35, a7);
                  long long v70 = (char *)v191 + BYTE6(v185);
LABEL_88:
                  uint64_t v132 = v189;
                  uint64_t v80 = v69;
                  long long v93 = (long long *)((char *)&v193 + BYTE6(a4));
LABEL_107:
                  sub_1C3FE11D8((uint64_t)v191, (uint64_t)v70, v132, v195, (uint64_t)v80, &v193, (uint64_t)v93, a5, v192, (uint64_t)v192);
                  swift_release();
                  uint64_t v34 = v183;
                  uint64_t v37 = a3;
                  break;
              }
              unint64_t v36 = v185;
              sub_1C3F7E2CC(v34, v185);
              goto LABEL_109;
            default:
              v192[0] = a6;
              LOWORD(v192[1]) = a7;
              BYTE2(v192[1]) = BYTE2(a7);
              BYTE3(v192[1]) = BYTE3(a7);
              BYTE4(v192[1]) = BYTE4(a7);
              BYTE5(v192[1]) = BYTE5(a7);
              swift_retain_n();
              uint64_t v172 = a6;
              switch((int)v21)
              {
                case 1:
                  uint64_t v178 = (char *)v195 + BYTE6(a9);
                  if (v23 >> 32 < (int)v23) {
                    goto LABEL_119;
                  }
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v100 = v189;
                  swift_retain();
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v153 = (char *)v192 + BYTE6(a7);
                  uint64_t v140 = a5;
                  uint64_t v101 = (int)v23;
                  uint64_t v102 = v23 >> 32;
                  uint64_t v103 = v18 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v104 = (long long *)((char *)&v193 + BYTE6(a4));
LABEL_69:
                  uint64_t v112 = v100;
                  uint64_t v111 = v178;
LABEL_76:
                  sub_1C3FE38FC(v101, v102, v103, v112, v195, (uint64_t)v111, &v193, (uint64_t)v104, v140, v192, (uint64_t)v153);
                  swift_release();
                  unint64_t v26 = a4;
                  uint64_t v37 = a3;
                  uint64_t v34 = v183;
                  break;
                case 2:
                  uint64_t v105 = v18 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v179 = (char *)v195 + BYTE6(a9);
                  uint64_t v106 = *(void *)(v23 + 24);
                  uint64_t v160 = *(void *)(v183 + 16);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v107 = v189;
                  swift_retain();
                  uint64_t v34 = v183;
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  swift_retain();
                  swift_retain();
                  int v154 = (char *)v192 + BYTE6(a7);
                  uint64_t v141 = a5;
                  uint64_t v108 = v160;
                  unint64_t v109 = (long long *)((char *)&v193 + BYTE6(a4));
LABEL_71:
                  uint64_t v115 = v106;
                  uint64_t v116 = v105;
                  uint64_t v117 = v107;
                  uint64_t v114 = v179;
LABEL_78:
                  sub_1C3FE38FC(v108, v115, v116, v117, v195, (uint64_t)v114, &v193, (uint64_t)v109, v141, v192, (uint64_t)v154);
                  swift_release();
                  swift_release();
                  swift_release();
                  unint64_t v26 = a4;
                  goto LABEL_82;
                case 3:
                  memset(v191, 0, 14);
                  uint64_t v25 = (char *)v195 + BYTE6(a9);
                  unint64_t v26 = a4;
                  sub_1C3F7E324(a3, a4);
                  uint64_t v27 = (long long *)((char *)&v193 + BYTE6(a4));
                  sub_1C3F7E324(a6, a7);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v144 = (char *)v192 + BYTE6(a7);
                  uint64_t v28 = (char *)v191;
                  goto LABEL_61;
                default:
                  v191[0] = v23;
                  LODWORD(v191[1]) = v18;
                  WORD2(v191[1]) = WORD2(v18);
                  uint64_t v25 = (char *)v195 + BYTE6(a9);
                  unint64_t v26 = a4;
                  sub_1C3F7E324(a3, a4);
                  uint64_t v27 = (long long *)((char *)&v193 + BYTE6(a4));
                  sub_1C3F7E324(a6, a7);
                  sub_1C3F7E324(a3, a4);
                  sub_1C3F7E324(a6, a7);
                  uint64_t v144 = (char *)v192 + BYTE6(a7);
                  uint64_t v28 = (char *)v191 + BYTE6(v18);
LABEL_61:
                  uint64_t v110 = v189;
                  long long v45 = v25;
                  char v53 = v27;
LABEL_81:
                  sub_1C3FE11D8((uint64_t)v191, (uint64_t)v28, v110, v195, (uint64_t)v45, &v193, (uint64_t)v53, a5, v192, (uint64_t)v144);
                  swift_release();
                  uint64_t v34 = v183;
LABEL_82:
                  uint64_t v37 = a3;
                  break;
              }
              unint64_t v36 = v185;
              sub_1C3F7E2CC(v34, v185);
              uint64_t v35 = v172;
              goto LABEL_109;
          }
LABEL_43:
          uint64_t v85 = v34;
          unint64_t v86 = v58;
          uint64_t v87 = v189;
          char v76 = v175;
LABEL_51:
          sub_1C3FE37F8(v62, v63, v61, v85, v86, v87, v195, (uint64_t)v76, &v193, (uint64_t)v147, v151);
          sub_1C3F7E2CC(v34, v36);
          unint64_t v26 = a4;
          uint64_t v35 = v173;
          a7 = v60;
          uint64_t v37 = a3;
LABEL_109:
          swift_release();
          sub_1C3F7E2CC(v35, a7);
          sub_1C3F7E2CC(v34, v36);
          swift_release();
          break;
      }
      sub_1C3F7E2CC(v35, a7);
      sub_1C3F7E2CC(v34, v36);
      swift_release();
      sub_1C3F7E2CC(v37, v26);
      sub_1C3F7E2CC(v35, a7);
      sub_1C3F7E2CC(v34, v36);
      break;
  }
  swift_release();
  sub_1C3F7E2CC(v37, v26);
  sub_1C3F7E2CC(v35, a7);
  sub_1C3F7E2CC(v34, v36);
  return swift_release();
}

uint64_t sub_1C3FDF724(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  v84[2] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a7;
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
      }
      uint64_t v62 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1C3F7E324(a7, a8);
      swift_retain();
      sub_1C3F7E324(a5, a6);
      sub_1C3F7E324(a7, a8);
      swift_retain();
      sub_1C3F7E324(a5, a6);
      swift_retain();
      sub_1C3F7E324(a3, a4);
      uint64_t v10 = a7;
      sub_1C3FE36E4((int)a3, a3 >> 32, v62, a5, a6, a7, a8, a9, a1, a2, a10);
      sub_1C3F7E2CC(a3, a4);
      break;
    case 2uLL:
      uint64_t v20 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      char v76 = *(void **)(a3 + 16);
      uint64_t v66 = *(void *)(a3 + 24);
      sub_1C3F7E324(a7, a8);
      swift_retain();
      sub_1C3F7E324(a5, a6);
      sub_1C3F7E324(v10, a8);
      swift_retain();
      sub_1C3F7E324(a5, a6);
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1C3FE36E4((uint64_t)v76, v66, v20, a5, a6, v10, a8, a9, a1, a2, a10);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      unint64_t v21 = a8 >> 62;
      memset(v84, 0, 14);
      sub_1C3F7E324(a7, a8);
      swift_retain();
      sub_1C3F7E324(v10, a8);
      swift_retain();
      switch(a6 >> 62)
      {
        case 1uLL:
          if (a5 >> 32 < (int)a5) {
            goto LABEL_54;
          }
          swift_retain();
          sub_1C3F7E324(a5, a6);
          sub_1C3F7E324(v10, a8);
          swift_retain();
          sub_1C3F7E324(a5, a6);
          sub_1C3FE37F8((int)a5, a5 >> 32, a6 & 0x3FFFFFFFFFFFFFFFLL, v10, a8, a9, a1, a2, v84, (uint64_t)v84, a10);
          break;
        case 2uLL:
          uint64_t v68 = *(void *)(a5 + 24);
          uint64_t v72 = *(void *)(a5 + 16);
          swift_retain();
          sub_1C3F7E324(a5, a6);
          sub_1C3F7E324(v10, a8);
          swift_retain();
          sub_1C3F7E324(a5, a6);
          swift_retain();
          swift_retain();
          sub_1C3FE37F8(v72, v68, a6 & 0x3FFFFFFFFFFFFFFFLL, v10, a8, a9, a1, a2, v84, (uint64_t)v84, a10);
          goto LABEL_19;
        case 3uLL:
          memset(v83, 0, 14);
          swift_retain_n();
          switch((int)v21)
          {
            case 1:
              uint64_t v44 = (int)v10;
              uint64_t v45 = v10 >> 32;
              if (v10 >> 32 < (int)v10) {
                goto LABEL_58;
              }
              uint64_t v46 = a8 & 0x3FFFFFFFFFFFFFFFLL;
              sub_1C3F7E324(a5, a6);
              uint64_t v47 = a9;
              swift_retain();
              sub_1C3F7E324(a5, a6);
              uint64_t v48 = a1;
              uint64_t v58 = a10;
              uint64_t v49 = v84;
              goto LABEL_43;
            case 2:
              uint64_t v54 = *(void *)(v10 + 24);
              uint64_t v74 = *(void *)(v10 + 16);
              sub_1C3F7E324(a5, a6);
              swift_retain();
              sub_1C3F7E324(a5, a6);
              swift_retain();
              swift_retain();
              sub_1C3FE38FC(v74, v54, a8 & 0x3FFFFFFFFFFFFFFFLL, a9, a1, a2, v84, (uint64_t)v84, a10, v83, (uint64_t)v83);
              goto LABEL_45;
            case 3:
              memset(v82, 0, 14);
              sub_1C3F7E324(a5, a6);
              sub_1C3F7E324(a5, a6);
              unint64_t v24 = (char *)v82;
              uint64_t v25 = v84;
              goto LABEL_47;
            default:
              v82[0] = v10;
              LODWORD(v82[1]) = a8;
              WORD2(v82[1]) = WORD2(a8);
              sub_1C3F7E324(a5, a6);
              sub_1C3F7E324(a5, a6);
              uint64_t v25 = v84;
              unint64_t v24 = (char *)v82 + BYTE6(a8);
LABEL_47:
              uint64_t v51 = a9;
              int v52 = a1;
              uint64_t v53 = a2;
              goto LABEL_48;
          }
        default:
          uint64_t v17 = v10;
          v83[0] = a5;
          LODWORD(v83[1]) = a6;
          WORD2(v83[1]) = WORD2(a6);
          swift_retain_n();
          switch((int)v21)
          {
            case 1:
              if (v10 >> 32 < (int)v10) {
                goto LABEL_56;
              }
              sub_1C3F7E324(a5, a6);
              swift_retain();
              sub_1C3F7E324(a5, a6);
              unint64_t v60 = (char *)v83 + BYTE6(a6);
              unint64_t v26 = a1;
              uint64_t v56 = a10;
              uint64_t v27 = v84;
              uint64_t v28 = (int)v10;
              uint64_t v29 = v10 >> 32;
              uint64_t v30 = a8 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v31 = a9;
              uint64_t v32 = a2;
              goto LABEL_29;
            case 2:
              uint64_t v33 = a8 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v35 = *(void *)(v10 + 24);
              uint64_t v73 = *(void *)(v10 + 16);
              sub_1C3F7E324(a5, a6);
              uint64_t v36 = a2;
              uint64_t v37 = a9;
              swift_retain();
              sub_1C3F7E324(a5, a6);
              swift_retain();
              swift_retain();
              uint64_t v61 = (char *)v83 + BYTE6(a6);
              uint64_t v38 = a1;
              uint64_t v57 = a10;
              unint64_t v39 = v84;
              uint64_t v40 = v73;
              goto LABEL_31;
            case 3:
              memset(v82, 0, 14);
              sub_1C3F7E324(a5, a6);
              sub_1C3F7E324(a5, a6);
              uint64_t v59 = (char *)v83 + BYTE6(a6);
              unint64_t v18 = (char *)v82;
              uint64_t v22 = v84;
              goto LABEL_33;
            default:
              v82[0] = v10;
              LODWORD(v82[1]) = a8;
              WORD2(v82[1]) = WORD2(a8);
              sub_1C3F7E324(a5, a6);
              sub_1C3F7E324(a5, a6);
              uint64_t v59 = (char *)v83 + BYTE6(a6);
              uint64_t v22 = v84;
              unint64_t v18 = (char *)v82 + BYTE6(a8);
LABEL_33:
              uint64_t v41 = a9;
              uint64_t v42 = a1;
              uint64_t v43 = a2;
              goto LABEL_34;
          }
      }
      goto LABEL_50;
    default:
      v84[0] = a3;
      LOWORD(v84[1]) = a4;
      BYTE2(v84[1]) = BYTE2(a4);
      BYTE3(v84[1]) = BYTE3(a4);
      BYTE4(v84[1]) = BYTE4(a4);
      BYTE5(v84[1]) = BYTE5(a4);
      unint64_t v15 = a8 >> 62;
      uint64_t v16 = (char *)v84 + BYTE6(a4);
      sub_1C3F7E324(a7, a8);
      swift_retain();
      sub_1C3F7E324(v10, a8);
      swift_retain();
      switch(a6 >> 62)
      {
        case 1uLL:
          if (a5 >> 32 < (int)a5) {
            goto LABEL_53;
          }
          swift_retain();
          sub_1C3F7E324(a5, a6);
          sub_1C3F7E324(v10, a8);
          swift_retain();
          sub_1C3F7E324(a5, a6);
          sub_1C3FE37F8((int)a5, a5 >> 32, a6 & 0x3FFFFFFFFFFFFFFFLL, v10, a8, a9, a1, a2, v84, (uint64_t)v16, a10);
          break;
        case 2uLL:
          uint64_t v67 = *(void *)(a5 + 24);
          uint64_t v71 = *(void *)(a5 + 16);
          swift_retain();
          sub_1C3F7E324(a5, a6);
          sub_1C3F7E324(v10, a8);
          swift_retain();
          sub_1C3F7E324(a5, a6);
          swift_retain();
          swift_retain();
          sub_1C3FE37F8(v71, v67, a6 & 0x3FFFFFFFFFFFFFFFLL, v10, a8, a9, a1, a2, v84, (uint64_t)v16, a10);
LABEL_19:
          swift_release();
          swift_release();
          break;
        case 3uLL:
          memset(v83, 0, 14);
          swift_retain_n();
          switch((int)v15)
          {
            case 1:
              uint64_t v64 = v16;
              uint64_t v44 = (int)v10;
              uint64_t v45 = v10 >> 32;
              if (v10 >> 32 < (int)v10) {
                goto LABEL_57;
              }
              uint64_t v46 = a8 & 0x3FFFFFFFFFFFFFFFLL;
              sub_1C3F7E324(a5, a6);
              uint64_t v47 = a9;
              swift_retain();
              sub_1C3F7E324(a5, a6);
              uint64_t v48 = a1;
              uint64_t v58 = a10;
              uint64_t v49 = v64;
LABEL_43:
              sub_1C3FE38FC(v44, v45, v46, v47, v48, a2, v84, (uint64_t)v49, v58, v83, (uint64_t)v83);
              break;
            case 2:
              uint64_t v65 = (uint64_t)v16;
              uint64_t v50 = *(void *)(v10 + 24);
              long long v78 = *(void **)(v10 + 16);
              sub_1C3F7E324(a5, a6);
              swift_retain();
              sub_1C3F7E324(a5, a6);
              swift_retain();
              swift_retain();
              sub_1C3FE38FC((uint64_t)v78, v50, a8 & 0x3FFFFFFFFFFFFFFFLL, a9, a1, a2, v84, v65, a10, v83, (uint64_t)v83);
LABEL_45:
              swift_release();
              swift_release();
              break;
            case 3:
              memset(v82, 0, 14);
              uint64_t v23 = a1;
              sub_1C3F7E324(a5, a6);
              sub_1C3F7E324(a5, a6);
              unint64_t v24 = (char *)v82;
              goto LABEL_40;
            default:
              v82[0] = v10;
              LODWORD(v82[1]) = a8;
              WORD2(v82[1]) = WORD2(a8);
              uint64_t v23 = a1;
              sub_1C3F7E324(a5, a6);
              sub_1C3F7E324(a5, a6);
              unint64_t v24 = (char *)v82 + BYTE6(a8);
LABEL_40:
              uint64_t v51 = a9;
              int v52 = v23;
              uint64_t v53 = a2;
              uint64_t v25 = v16;
LABEL_48:
              sub_1C3FE11D8((uint64_t)v82, (uint64_t)v24, v51, v52, v53, v84, (uint64_t)v25, a10, v83, (uint64_t)v83);
              break;
          }
          swift_release();
          break;
        default:
          uint64_t v17 = v10;
          v83[0] = a5;
          LODWORD(v83[1]) = a6;
          WORD2(v83[1]) = WORD2(a6);
          swift_retain_n();
          switch((int)v15)
          {
            case 1:
              if (v10 >> 32 < (int)v10) {
                goto LABEL_55;
              }
              sub_1C3F7E324(a5, a6);
              swift_retain();
              sub_1C3F7E324(a5, a6);
              unint64_t v60 = (char *)v83 + BYTE6(a6);
              unint64_t v26 = a1;
              uint64_t v56 = a10;
              uint64_t v27 = v16;
              uint64_t v28 = (int)v10;
              uint64_t v29 = v10 >> 32;
              uint64_t v30 = a8 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v31 = a9;
              uint64_t v32 = a2;
LABEL_29:
              sub_1C3FE38FC(v28, v29, v30, v31, v26, v32, v84, (uint64_t)v27, v56, v83, (uint64_t)v60);
              break;
            case 2:
              uint64_t v63 = v16;
              uint64_t v33 = a8 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v34 = *(void *)(v10 + 16);
              uint64_t v35 = *(void *)(v10 + 24);
              sub_1C3F7E324(a5, a6);
              uint64_t v36 = a2;
              uint64_t v37 = a9;
              swift_retain();
              sub_1C3F7E324(a5, a6);
              swift_retain();
              swift_retain();
              uint64_t v61 = (char *)v83 + BYTE6(a6);
              uint64_t v38 = a1;
              uint64_t v57 = a10;
              unint64_t v39 = v63;
              uint64_t v40 = v34;
LABEL_31:
              sub_1C3FE38FC(v40, v35, v33, v37, v38, v36, v84, (uint64_t)v39, v57, v83, (uint64_t)v61);
              swift_release();
              swift_release();
              break;
            case 3:
              memset(v82, 0, 14);
              sub_1C3F7E324(a5, a6);
              sub_1C3F7E324(a5, a6);
              uint64_t v59 = (char *)v83 + BYTE6(a6);
              unint64_t v18 = (char *)v82;
              goto LABEL_26;
            default:
              v82[0] = v10;
              LODWORD(v82[1]) = a8;
              WORD2(v82[1]) = WORD2(a8);
              sub_1C3F7E324(a5, a6);
              sub_1C3F7E324(a5, a6);
              uint64_t v59 = (char *)v83 + BYTE6(a6);
              unint64_t v18 = (char *)v82 + BYTE6(a8);
LABEL_26:
              uint64_t v41 = a9;
              uint64_t v42 = a1;
              uint64_t v43 = a2;
              uint64_t v22 = v16;
LABEL_34:
              sub_1C3FE11D8((uint64_t)v82, (uint64_t)v18, v41, v42, v43, v84, (uint64_t)v22, a10, v83, (uint64_t)v59);
              break;
          }
          swift_release();
          uint64_t v10 = v17;
          break;
      }
LABEL_50:
      swift_release();
      sub_1C3F7E2CC(a5, a6);
      sub_1C3F7E2CC(v10, a8);
      break;
  }
  swift_release();
  sub_1C3F7E2CC(a5, a6);
  sub_1C3F7E2CC(v10, a8);
  return swift_release();
}

uint64_t sub_1C3FE0858(const void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  v51[2] = *MEMORY[0x1E4F143B8];
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t v43 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      sub_1C3F7E324(a5, a6);
      swift_retain();
      sub_1C3F7E324(a5, a6);
      sub_1C3F7E324(a3, a4);
      sub_1C3FE37F8((int)a3, a3 >> 32, v43, a5, a6, a7, a8, a9, a1, a2, a10);
      sub_1C3F7E2CC(a3, a4);
      uint64_t v16 = a5;
      unint64_t v17 = a6;
      break;
    case 2uLL:
      uint64_t v18 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v19 = *(void *)(a3 + 24);
      uint64_t v44 = *(void *)(a3 + 16);
      swift_retain();
      sub_1C3F7E324(a5, a6);
      swift_retain();
      sub_1C3F7E324(a5, a6);
      swift_retain();
      swift_retain();
      sub_1C3FE37F8(v44, v19, v18, a5, a6, a7, a8, a9, a1, a2, a10);
      swift_release();
      swift_release();
      uint64_t v16 = a5;
      unint64_t v17 = a6;
      break;
    case 3uLL:
      memset(v51, 0, 14);
      swift_retain_n();
      switch(a6 >> 62)
      {
        case 1uLL:
          if (a5 >> 32 < (int)a5) {
            goto LABEL_24;
          }
          sub_1C3F7E324(a5, a6);
          swift_retain();
          uint64_t v41 = (char *)v51;
          uint64_t v39 = a10;
          uint64_t v20 = (int)a5;
          uint64_t v21 = a5 >> 32;
          uint64_t v22 = a6 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v23 = a7;
          unint64_t v24 = a8;
          break;
        case 2uLL:
          uint64_t v35 = a8;
          uint64_t v36 = *(void *)(a5 + 16);
          uint64_t v37 = *(void *)(a5 + 24);
          sub_1C3F7E324(a5, a6);
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v42 = v51;
          uint64_t v40 = a10;
          uint64_t v28 = v36;
          uint64_t v29 = v37;
          uint64_t v30 = a6 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v31 = a7;
          uint64_t v32 = v35;
          uint64_t v33 = a9;
          uint64_t v34 = a1;
          goto LABEL_17;
        case 3uLL:
          memset(v50, 0, 14);
          sub_1C3F7E324(a5, a6);
          sub_1C3FE11D8((uint64_t)v50, (uint64_t)v50, a7, a8, a9, a1, a2, a10, v51, (uint64_t)v51);
          goto LABEL_20;
        default:
          v50[0] = a5;
          LODWORD(v50[1]) = a6;
          WORD2(v50[1]) = WORD2(a6);
          sub_1C3F7E324(a5, a6);
          sub_1C3FE11D8((uint64_t)v50, (uint64_t)v50 + BYTE6(a6), a7, a8, a9, a1, a2, a10, v51, (uint64_t)v51);
          goto LABEL_20;
      }
      goto LABEL_15;
    default:
      v51[0] = a3;
      LOWORD(v51[1]) = a4;
      BYTE2(v51[1]) = BYTE2(a4);
      BYTE3(v51[1]) = BYTE3(a4);
      BYTE4(v51[1]) = BYTE4(a4);
      BYTE5(v51[1]) = BYTE5(a4);
      unint64_t v15 = (char *)v51 + BYTE6(a4);
      swift_retain_n();
      switch(a6 >> 62)
      {
        case 1uLL:
          if (a5 >> 32 < (int)a5) {
            goto LABEL_23;
          }
          sub_1C3F7E324(a5, a6);
          swift_retain();
          uint64_t v41 = (char *)v51 + BYTE6(a4);
          uint64_t v39 = a10;
          uint64_t v20 = (int)a5;
          uint64_t v21 = a5 >> 32;
          uint64_t v22 = a6 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v23 = a7;
          unint64_t v24 = a8;
          break;
        case 2uLL:
          uint64_t v25 = a8;
          uint64_t v26 = *(void *)(a5 + 16);
          uint64_t v27 = *(void *)(a5 + 24);
          sub_1C3F7E324(a5, a6);
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v42 = v15;
          uint64_t v40 = a10;
          uint64_t v28 = v26;
          uint64_t v29 = v27;
          uint64_t v30 = a6 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v31 = a7;
          uint64_t v32 = v25;
          uint64_t v34 = a1;
          uint64_t v33 = a9;
LABEL_17:
          sub_1C3FE38FC(v28, v29, v30, v31, v32, v33, v34, a2, v40, v51, (uint64_t)v42);
          swift_release();
          swift_release();
          goto LABEL_20;
        case 3uLL:
          memset(v50, 0, 14);
          sub_1C3F7E324(a5, a6);
          sub_1C3FE11D8((uint64_t)v50, (uint64_t)v50, a7, a8, a9, a1, a2, a10, v51, (uint64_t)v51 + BYTE6(a4));
          goto LABEL_20;
        default:
          v50[0] = a5;
          LODWORD(v50[1]) = a6;
          WORD2(v50[1]) = WORD2(a6);
          sub_1C3F7E324(a5, a6);
          sub_1C3FE11D8((uint64_t)v50, (uint64_t)v50 + BYTE6(a6), a7, a8, a9, a1, a2, a10, v51, (uint64_t)v51 + BYTE6(a4));
          goto LABEL_20;
      }
LABEL_15:
      sub_1C3FE38FC(v20, v21, v22, v23, v24, a9, a1, a2, v39, v51, (uint64_t)v41);
LABEL_20:
      swift_release();
      uint64_t v16 = a5;
      unint64_t v17 = a6;
      break;
  }
  sub_1C3F7E2CC(v16, v17);
  return swift_release();
}

uint64_t sub_1C3FE0F28(const void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, uint64_t a7, const void *a8, uint64_t a9, uint64_t a10)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      uint64_t v23 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      sub_1C3F7E324(a3, a4);
      sub_1C3FE38FC((int)a3, a3 >> 32, v23, a5, a6, a7, a8, a9, a10, a1, a2);
      return sub_1C3F7E2CC(a3, a4);
    case 2uLL:
      uint64_t v19 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v21 = *(void *)(a3 + 16);
      uint64_t v20 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1C3FE38FC(v21, v20, v19, a5, a6, a7, a8, a9, a10, a1, a2);
      swift_release();
      return swift_release();
    case 3uLL:
      memset(v30, 0, 14);
      swift_retain();
      sub_1C3FE11D8((uint64_t)v30, (uint64_t)v30, a5, a6, a7, a8, a9, a10, a1, a2);
      return swift_release();
    default:
      v30[0] = a3;
      LOWORD(v30[1]) = a4;
      BYTE2(v30[1]) = BYTE2(a4);
      BYTE3(v30[1]) = BYTE3(a4);
      BYTE4(v30[1]) = BYTE4(a4);
      BYTE5(v30[1]) = BYTE5(a4);
      swift_retain();
      sub_1C3FE11D8((uint64_t)v30, (uint64_t)v30 + BYTE6(a4), a5, a6, a7, a8, a9, a10, a1, a2);
      return swift_release();
  }
}

uint64_t sub_1C3FE11D8(uint64_t result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10)
{
  uint64_t v10 = a5 - (void)a4;
  if (!a4) {
    uint64_t v10 = 0;
  }
  if (v10 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v10 > 0x7FFFFFFF)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v16 = (const void *)result;
  unint64_t v17 = *(void (__cdecl **)(void *))(a3 + 72);
  uint64_t result = sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 280), 1, a4, v10, v17);
  if (a6) {
    uint64_t v18 = a7 - (void)a6;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v18 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_28;
  }
  if (v18 > 0x7FFFFFFF)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t result = sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 280), 2, a6, v18, v17);
  if (a8 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (a8 > 0x7FFFFFFF)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t result = sqlite3_bind_int(*(sqlite3_stmt **)(a3 + 280), 3, a8);
  if (a9) {
    uint64_t v19 = a10 - (void)a9;
  }
  else {
    uint64_t v19 = 0;
  }
  if (v19 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_32;
  }
  if (v19 > 0x7FFFFFFF)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t result = sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 280), 4, a9, v19, v17);
  if (v16) {
    uint64_t v20 = a2 - (void)v16;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v20 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_34;
  }
  if (v20 > 0x7FFFFFFF)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 280), 5, v16, v20, v17);
  if (sqlite3_step(*(sqlite3_stmt **)(a3 + 280)) == 101) {
    return sqlite3_reset(*(sqlite3_stmt **)(a3 + 280));
  }
  uint64_t result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(a3 + 32));
  if (result)
  {
    sub_1C4497288();
    sub_1C4497268();
    swift_bridgeObjectRelease();
    sub_1C4497268();
    sub_1C3FE3570();
    swift_allocError();
    *(void *)uint64_t v21 = 0x203A747265736E49;
    *(void *)(v21 + 8) = 0xE800000000000000;
    *(unsigned char *)(v21 + 16) = 2;
    return swift_willThrow();
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1C3FE1414(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unsigned __int16 a10, int a11)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  type metadata accessor for CREncoder();
  uint64_t inited = swift_initStackObject();
  uint64_t v20 = MEMORY[0x1E4FBC860];
  uint64_t v21 = MEMORY[0x1E4FBC868];
  *(void *)(inited + 32) = MEMORY[0x1E4FBC868];
  *(void *)(inited + 40) = v20;
  *(void *)(inited + 48) = v20;
  *(void *)(inited + 56) = v21;
  *(void *)(inited + 64) = v20;
  *(void *)(inited + 80) = 0;
  *(void *)(inited + 88) = 0;
  *(void *)(inited + 16) = a1;
  *(void *)(inited + 24) = v20;
  *(unsigned char *)(inited + 72) = 1;
  id v22 = a1;
  uint64_t v23 = sub_1C400ACCC(a6, a7);
  if (v11)
  {
    swift_setDeallocating();
    CREncoder.deinit();
    return swift_deallocClassInstance();
  }
  else
  {
    uint64_t v26 = v23;
    uint64_t v41 = a7;
    uint64_t v42 = a2;
    uint64_t v27 = a8;
    unint64_t v44 = v24;
    uint64_t v43 = a4;
    swift_setDeallocating();
    CREncoder.deinit();
    swift_deallocClassInstance();
    uint64_t v47 = 0;
    unint64_t v48 = 0;
    switch(a9 >> 62)
    {
      case 1uLL:
        if (a8 >> 32 < (int)a8) {
          __break(1u);
        }
        swift_retain_n();
        sub_1C3F7E324(a8, a9);
        sub_1C3FE39F0((int)a8, a8 >> 32, a9 & 0x3FFFFFFFFFFFFFFFLL, &v47);
        sub_1C3F7E2CC(a8, a9);
        swift_release_n();
        unint64_t v34 = v44;
        uint64_t v35 = v43;
        unint64_t v36 = a3;
        uint64_t v27 = a8;
        break;
      case 2uLL:
        uint64_t v40 = v26;
        uint64_t v29 = *(void *)(a8 + 16);
        uint64_t v30 = *(void *)(a8 + 24);
        swift_retain_n();
        swift_retain();
        swift_retain();
        sub_1C3FE39F0(v29, v30, a9 & 0x3FFFFFFFFFFFFFFFLL, &v47);
        swift_release_n();
        swift_release();
        swift_release();
        uint64_t v26 = v40;
        uint64_t v35 = a4;
        unint64_t v34 = v44;
        unint64_t v36 = a3;
        break;
      case 3uLL:
        *(void *)((char *)&v46 + 6) = 0;
        *(void *)&long long v46 = 0;
        swift_retain_n();
        uint64_t v28 = (char *)&v46;
        goto LABEL_9;
      default:
        *(void *)&long long v46 = a8;
        DWORD2(v46) = a9;
        WORD6(v46) = WORD2(a9);
        swift_retain_n();
        uint64_t v28 = (char *)&v46 + BYTE6(a9);
LABEL_9:
        uint64_t v32 = sub_1C3FDC278(&v46, (uint64_t)v28);
        if (v32)
        {
          unint64_t v33 = v31;
        }
        else
        {
          uint64_t v37 = MEMORY[0x1E4FBC860];
          uint64_t v32 = sub_1C3F7E4A4(MEMORY[0x1E4FBC860]);
          unint64_t v33 = sub_1C3F7E37C(v37);
        }
        swift_release_n();
        uint64_t v47 = v32;
        unint64_t v48 = v33;
        uint64_t v35 = a4;
        unint64_t v34 = v44;
        unint64_t v36 = a3;
        break;
    }
    sub_1C3FDCBF0(v42, v36, v35, a5, 0, v26, v34, v27, a9);
    *(void *)&long long v46 = a6;
    *((void *)&v46 + 1) = v41;
    uint64_t v38 = v47;
    if (!v47)
    {
      __break(1u);
      JUMPOUT(0x1C3FE18FCLL);
    }
    uint64_t v39 = v48;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1C3FE3ADC(v38);
    sub_1C3F7FEDC(v38, v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C3FDA940(a10, a11 & 0x1FFFF);
    sub_1C3F7E2CC(v26, v34);
    sub_1C3F870F4(v38);
    return v46;
  }
}

uint64_t sub_1C3FE190C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (result) {
    uint64_t v6 = a2 - result;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v6 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 208), 1, (const void *)result, v6, *(void (__cdecl **)(void *))(a3 + 72));
  if (sqlite3_step(*(sqlite3_stmt **)(a3 + 208)) != 100)
  {
    uint64_t v11 = 0;
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    unint64_t v13 = 0xF000000000000000;
    goto LABEL_16;
  }
  uint64_t v8 = sqlite3_column_bytes(*(sqlite3_stmt **)(a3 + 208), 0);
  uint64_t v9 = sqlite3_column_blob(*(sqlite3_stmt **)(a3 + 208), 0);
  int v10 = sqlite3_column_bytes(*(sqlite3_stmt **)(a3 + 208), 1);
  uint64_t result = (uint64_t)sqlite3_column_blob(*(sqlite3_stmt **)(a3 + 208), 1);
  if (!result)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  uint64_t v11 = sub_1C3F5E01C((unsigned char *)result, v10);
  unint64_t v13 = v12;
  swift_beginAccess();
  sub_1C3FE3F28(a3 + 88, (uint64_t)&v23);
  if (v24)
  {
    uint64_t v28 = v8;
    sub_1C3F6DE94(&v23, (uint64_t)v25);
    uint64_t v15 = v26;
    uint64_t v14 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v14 + 16))(v11, v13, v15, v14);
    if (v4)
    {
      sub_1C3F7E2CC(v11, v13);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    }
    uint64_t v21 = v16;
    unint64_t v22 = v17;
    sub_1C3F7E2CC(v11, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    uint64_t v11 = v21;
    unint64_t v13 = v22;
    LODWORD(v8) = v28;
    if (!v9) {
      goto LABEL_15;
    }
  }
  else
  {
    sub_1C3FE3F90((uint64_t)&v23);
    if (!v9)
    {
LABEL_15:
      uint64_t v18 = 0;
      unint64_t v19 = 0xC000000000000000;
      goto LABEL_16;
    }
  }
  uint64_t v18 = sub_1C3F5E01C(v9, (int)v8);
  unint64_t v19 = v20;
LABEL_16:
  uint64_t result = sqlite3_reset(*(sqlite3_stmt **)(a3 + 208));
  *a4 = v11;
  a4[1] = v13;
  a4[2] = v18;
  a4[3] = v19;
  return result;
}

uint64_t sub_1C3FE1B18()
{
  unint64_t v2 = v0;
  unint64_t v39 = sub_1C3FE4854(MEMORY[0x1E4FBC860]);
  uint64_t v3 = (sqlite3_stmt *)sub_1C3F5FA40();
  if (v1)
  {
    swift_bridgeObjectRelease();
    return v0;
  }
  uint64_t v4 = v3;
  if (sqlite3_step(v3) == 100) {
    sqlite3_column_int(v4, 0);
  }
  sqlite3_finalize(v4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39B060);
  sub_1C4496F18();
  uint64_t v29 = v0 + 88;
  swift_beginAccess();
  unint64_t v0 = v39;
  if (sqlite3_step(*(sqlite3_stmt **)(v2 + 216)) != 100)
  {
LABEL_18:
    sqlite3_reset(*(sqlite3_stmt **)(v2 + 216));
    return v0;
  }
  unint64_t v28 = v2;
  while (1)
  {
    unint64_t v33 = v0;
    int v9 = sqlite3_column_bytes(*(sqlite3_stmt **)(v2 + 216), 0);
    int v10 = sqlite3_column_blob(*(sqlite3_stmt **)(v2 + 216), 0);
    int v11 = sqlite3_column_bytes(*(sqlite3_stmt **)(v2 + 216), 1);
    unint64_t v12 = sqlite3_column_blob(*(sqlite3_stmt **)(v2 + 216), 1);
    int v13 = sqlite3_column_bytes(*(sqlite3_stmt **)(v2 + 216), 2);
    uint64_t v14 = sqlite3_column_blob(*(sqlite3_stmt **)(v2 + 216), 2);
    if (!v10) {
      break;
    }
    uint64_t result = sub_1C3F5E01C(v10, v9);
    if (!v14) {
      goto LABEL_20;
    }
LABEL_13:
    uint64_t v31 = result;
    unint64_t v32 = v16;
    uint64_t v17 = sub_1C3F5E01C(v14, v13);
    unint64_t v19 = v18;
    sub_1C3FE3F28(v29, (uint64_t)&v34);
    if (v35)
    {
      uint64_t __src = v12;
      int v20 = v11;
      sub_1C3F6DE94(&v34, (uint64_t)v36);
      uint64_t v22 = v37;
      uint64_t v21 = v38;
      __swift_project_boxed_opaque_existential_1(v36, v37);
      long long v23 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v21 + 16);
      sub_1C3F7E324(v17, v19);
      uint64_t v24 = v23(v17, v19, v22, v21);
      unint64_t v26 = v25;
      sub_1C3F7E2CC(v17, v19);
      sub_1C3F7E2CC(v17, v19);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      uint64_t v17 = v24;
      unint64_t v19 = v26;
      unint64_t v27 = v33;
      int v11 = v20;
      unint64_t v12 = __src;
      if (!__src) {
        goto LABEL_17;
      }
    }
    else
    {
      sub_1C3FE3F90((uint64_t)&v34);
      unint64_t v27 = v33;
      if (!v12)
      {
LABEL_17:
        uint64_t v5 = 0;
        unint64_t v7 = 0xC000000000000000;
        goto LABEL_8;
      }
    }
    uint64_t v5 = sub_1C3F5E01C(v12, v11);
    unint64_t v7 = v6;
LABEL_8:
    sub_1C3F7E324(v31, v32);
    sub_1C3F7E324(v17, v19);
    sub_1C3F7E324(v5, v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v36[0] = v27;
    sub_1C44210E8(v17, v19, v5, v7, v31, v32, isUniquelyReferenced_nonNull_native);
    unint64_t v0 = v36[0];
    swift_bridgeObjectRelease();
    sub_1C3F7E2CC(v31, v32);
    sub_1C3F7E2CC(v17, v19);
    sub_1C3F7E2CC(v31, v32);
    sub_1C3F7E2CC(v5, v7);
    unint64_t v2 = v28;
    if (sqlite3_step(*(sqlite3_stmt **)(v28 + 216)) != 100) {
      goto LABEL_18;
    }
  }
  uint64_t result = 0;
  unint64_t v16 = 0xC000000000000000;
  if (v14) {
    goto LABEL_13;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1C3FE1EA8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (result) {
    uint64_t v6 = a2 - result;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v6 > 0x7FFFFFFF)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 224), 1, (const void *)result, v6, *(void (__cdecl **)(void *))(a3 + 72));
  if (sqlite3_step(*(sqlite3_stmt **)(a3 + 224)) != 100)
  {
    uint64_t v38 = v4;
    uint64_t v12 = 0;
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    unint64_t v14 = 0xF000000000000000;
LABEL_19:
    uint64_t result = sqlite3_reset(*(sqlite3_stmt **)(a3 + 224));
    *a4 = v12;
    a4[1] = v14;
    a4[2] = v19;
    a4[3] = v20;
    a4[4] = v21;
    a4[5] = v22;
    a4[6] = v23;
    return result;
  }
  int v8 = sqlite3_column_bytes(*(sqlite3_stmt **)(a3 + 224), 0);
  int v9 = sqlite3_column_blob(*(sqlite3_stmt **)(a3 + 224), 0);
  int v31 = sqlite3_column_int(*(sqlite3_stmt **)(a3 + 224), 1);
  int v10 = sqlite3_column_bytes(*(sqlite3_stmt **)(a3 + 224), 2);
  uint64_t __src = sqlite3_column_blob(*(sqlite3_stmt **)(a3 + 224), 2);
  int v11 = sqlite3_column_bytes(*(sqlite3_stmt **)(a3 + 224), 3);
  uint64_t result = (uint64_t)sqlite3_column_blob(*(sqlite3_stmt **)(a3 + 224), 3);
  if (result)
  {
    uint64_t v12 = sub_1C3F5E01C((unsigned char *)result, v11);
    unint64_t v14 = v13;
    swift_beginAccess();
    sub_1C3FE3F28(a3 + 88, (uint64_t)&v33);
    if (v34)
    {
      int v29 = v8;
      int v30 = v10;
      sub_1C3F6DE94(&v33, (uint64_t)v35);
      uint64_t v15 = v36;
      uint64_t v16 = v37;
      __swift_project_boxed_opaque_existential_1(v35, v36);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v16 + 16))(v12, v14, v15, v16);
      if (v4)
      {
        sub_1C3F7E2CC(v12, v14);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      }
      uint64_t v24 = v17;
      unint64_t v25 = v18;
      uint64_t v38 = 0;
      sub_1C3F7E2CC(v12, v14);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      uint64_t v12 = v24;
      unint64_t v14 = v25;
      int v8 = v29;
      int v10 = v30;
    }
    else
    {
      uint64_t v38 = v4;
      sub_1C3FE3F90((uint64_t)&v33);
    }
    uint64_t v21 = v31;
    if (v9)
    {
      uint64_t v19 = sub_1C3F5E01C(v9, v8);
      unint64_t v20 = v26;
      unint64_t v27 = __src;
      if (__src)
      {
LABEL_16:
        uint64_t v22 = sub_1C3F5E01C(v27, v10);
        unint64_t v23 = v28;
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0xC000000000000000;
      unint64_t v27 = __src;
      if (__src) {
        goto LABEL_16;
      }
    }
    uint64_t v22 = 0;
    unint64_t v23 = 0xC000000000000000;
    goto LABEL_19;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1C3FE2138@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, BOOL *a4@<X8>)
{
  if (result) {
    uint64_t v5 = a2 - result;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v5 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 200), 1, (const void *)result, v5, *(void (__cdecl **)(void *))(a3 + 72));
  BOOL v7 = sqlite3_step(*(sqlite3_stmt **)(a3 + 200)) == 100 && sqlite3_column_int(*(sqlite3_stmt **)(a3 + 200), 0) != 0;
  uint64_t result = sqlite3_reset(*(sqlite3_stmt **)(a3 + 200));
  *a4 = v7;
  return result;
}

uint64_t sub_1C3FE21E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  if (result) {
    uint64_t v6 = a2 - result;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v6 > 0x7FFFFFFF)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int v11 = (const void *)result;
  uint64_t v12 = *(void (__cdecl **)(void *))(a3 + 72);
  sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 144), 1, (const void *)result, v6, v12);
  uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a3 + 144));
  if (result == 100)
  {
    uint64_t v13 = sqlite3_column_int(*(sqlite3_stmt **)(a3 + 144), 0);
  }
  else
  {
    if (a4 < 1)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    uint64_t v13 = 0;
    *a5 = 0;
  }
  uint64_t result = sqlite3_reset(*(sqlite3_stmt **)(a3 + 144));
  BOOL v14 = __OFADD__(v13, a4);
  uint64_t v15 = v13 + a4;
  if (v14)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v15)
  {
    if (v15 < 1)
    {
      sub_1C3FE3FF0();
      swift_allocError();
      *(void *)uint64_t v16 = 0xD000000000000014;
      *(void *)(v16 + 8) = 0x80000001C44B0570;
      *(unsigned char *)(v16 + 16) = 0;
      return swift_willThrow();
    }
    uint64_t result = sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 168), 1, v11, v6, v12);
    if (!((unint64_t)v15 >> 31))
    {
      sqlite3_bind_int(*(sqlite3_stmt **)(a3 + 168), 2, v15);
      if (sqlite3_step(*(sqlite3_stmt **)(a3 + 168)) == 101) {
        return sqlite3_reset(*(sqlite3_stmt **)(a3 + 168));
      }
      sub_1C4497D28();
      swift_bridgeObjectRelease();
      uint64_t result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(a3 + 32));
      if (result)
      {
        sub_1C4497288();
        sub_1C4497268();
        swift_bridgeObjectRelease();
        sub_1C4497268();
        sub_1C3FE3570();
        swift_allocError();
        *(void *)uint64_t v17 = 0xD000000000000018;
        *(void *)(v17 + 8) = 0x80000001C44B0590;
        *(unsigned char *)(v17 + 16) = 2;
        return swift_willThrow();
      }
LABEL_28:
      __break(1u);
      return result;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t result = (uint64_t)sub_1C3FE2450((const char *)v11, a2);
  if (!v5) {
    *a5 = 1;
  }
  return result;
}

const char *sub_1C3FE2450(const char *result, uint64_t a2)
{
  if (result) {
    uint64_t v3 = a2 - (void)result;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return result;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(v2 + 176), 1, result, v3, *(void (__cdecl **)(void *))(v2 + 72));
  if (sqlite3_step(*(sqlite3_stmt **)(v2 + 176)) == 101) {
    return (const char *)sqlite3_reset(*(sqlite3_stmt **)(v2 + 176));
  }
  sub_1C4497D28();
  swift_bridgeObjectRelease();
  strcpy((char *)v6, "Delete Asset: ");
  HIBYTE(v6[1]) = -18;
  uint64_t result = sqlite3_errmsg(*(sqlite3 **)(v2 + 32));
  if (!result) {
    goto LABEL_13;
  }
  sub_1C4497288();
  sub_1C4497268();
  swift_bridgeObjectRelease();
  sub_1C4497268();
  uint64_t v4 = v6[1];
  sub_1C3FE3570();
  swift_allocError();
  *(void *)uint64_t v5 = v6[0];
  *(void *)(v5 + 8) = v4;
  *(unsigned char *)(v5 + 16) = 2;
  return (const char *)swift_willThrow();
}

uint64_t sub_1C3FE2598(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result = (uint64_t)sub_1C3FDB95C(a1, a2);
  if (v12)
  {
    if (a4 < 1)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v13 = *a5;
    *(_OWORD *)a5 = xmmword_1C449B0D0;
    sub_1C3F7FEB8(v13);
    uint64_t result = 0;
  }
  uint64_t v14 = result + a4;
  if (__OFADD__(result, a4))
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v14)
  {
    if (v14 < 1)
    {
      sub_1C3FE3FF0();
      swift_allocError();
      *(void *)uint64_t v19 = 0xD000000000000018;
      *(void *)(v19 + 8) = 0x80000001C44B05B0;
      *(unsigned char *)(v19 + 16) = 0;
      return swift_willThrow();
    }
    if (!((unint64_t)v14 >> 31))
    {
      uint64_t result = sqlite3_bind_int(*(sqlite3_stmt **)(a3 + 248), 1, v14);
      if (a1) {
        uint64_t v15 = a2 - (void)a1;
      }
      else {
        uint64_t v15 = 0;
      }
      if (v15 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (v15 <= 0x7FFFFFFF)
        {
          sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 248), 2, a1, v15, *(void (__cdecl **)(void *))(a3 + 72));
          if (sqlite3_step(*(sqlite3_stmt **)(a3 + 248)) == 101) {
            return sqlite3_reset(*(sqlite3_stmt **)(a3 + 248));
          }
          sub_1C4497D28();
          swift_bridgeObjectRelease();
          uint64_t result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(a3 + 32));
          if (result)
          {
            sub_1C4497288();
            sub_1C4497268();
            swift_bridgeObjectRelease();
            sub_1C4497268();
            sub_1C3FE3570();
            swift_allocError();
            *(void *)uint64_t v20 = 0xD00000000000001CLL;
            *(void *)(v20 + 8) = 0x80000001C44B05D0;
            *(unsigned char *)(v20 + 16) = 2;
            return swift_willThrow();
          }
LABEL_27:
          __break(1u);
          return result;
        }
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t result = sub_1C3FDC278(a1, a2);
  if (!v5)
  {
    uint64_t v17 = result;
    uint64_t v18 = v16;
    sub_1C3FDC160((const char *)a1, a2);
    uint64_t v21 = *a5;
    *a5 = v17;
    a5[1] = v18;
    return sub_1C3F7FEB8(v21);
  }
  return result;
}

uint64_t sub_1C3FE27FC(void *a1, uint64_t a2, unint64_t a3, long long *a4)
{
  uint64_t v6 = v4;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  type metadata accessor for CREncoder();
  long long v33 = *a4;
  uint64_t inited = swift_initStackObject();
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t v13 = MEMORY[0x1E4FBC868];
  *(void *)(inited + 32) = MEMORY[0x1E4FBC868];
  *(void *)(inited + 40) = v12;
  *(void *)(inited + 48) = v12;
  *(void *)(inited + 56) = v13;
  *(void *)(inited + 64) = v12;
  *(void *)(inited + 80) = 0;
  *(void *)(inited + 88) = 0;
  *(void *)(inited + 16) = a1;
  *(void *)(inited + 24) = v12;
  *(unsigned char *)(inited + 72) = 1;
  long long v36 = v33;
  id v14 = a1;
  uint64_t v15 = sub_1C4007A4C(&v36);
  if (v5)
  {
    swift_setDeallocating();
    CREncoder.deinit();
    return swift_deallocClassInstance();
  }
  else
  {
    uint64_t v18 = v15;
    unint64_t v19 = v16;
    swift_setDeallocating();
    CREncoder.deinit();
    swift_deallocClassInstance();
    switch(v19 >> 62)
    {
      case 1uLL:
        if (v18 >> 32 < (int)v18)
        {
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          __break(1u);
        }
        sub_1C3F7E324(a2, a3);
        swift_retain();
        sub_1C3F7E324(a2, a3);
        swift_retain();
        sub_1C3F7E324(a2, a3);
        swift_retain();
        sub_1C3F7E324(v18, v19);
        sub_1C3FE3B1C((int)v18, v18 >> 32, v19 & 0x3FFFFFFFFFFFFFFFLL, a2, a3, v6, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3FE325C);
        sub_1C3F7E2CC(v18, v19);
        goto LABEL_9;
      case 2uLL:
        uint64_t v21 = *(void *)(v18 + 16);
        uint64_t v22 = *(void *)(v18 + 24);
        sub_1C3F7E324(a2, a3);
        swift_retain();
        sub_1C3F7E324(a2, a3);
        swift_retain();
        sub_1C3F7E324(a2, a3);
        swift_retain();
        swift_retain();
        swift_retain();
        sub_1C3FE3B1C(v21, v22, v19 & 0x3FFFFFFFFFFFFFFFLL, a2, a3, v6, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3FE325C);
        swift_release();
        swift_release();
LABEL_9:
        sub_1C3F7E2CC(v18, v19);
        break;
      case 3uLL:
        *(void *)((char *)&v36 + 6) = 0;
        *(void *)&long long v36 = 0;
        swift_retain_n();
        switch(a3 >> 62)
        {
          case 1uLL:
            if (a2 >> 32 < (int)a2) {
              goto LABEL_29;
            }
            swift_retain();
            sub_1C3F7E324(a2, a3);
            swift_retain();
            sub_1C3F7E324(a2, a3);
            swift_retain();
            unint64_t v28 = &v36;
            uint64_t v24 = (int)a2;
            uint64_t v25 = a2 >> 32;
            uint64_t v26 = a3 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v27 = v6;
            goto LABEL_19;
          case 2uLL:
            uint64_t v31 = *(void *)(a2 + 16);
            uint64_t v32 = *(void *)(a2 + 24);
            swift_retain();
            sub_1C3F7E324(a2, a3);
            swift_retain();
            sub_1C3F7E324(a2, a3);
            swift_retain();
            swift_retain();
            swift_retain();
            sub_1C3FE3C00(v31, v32, a3 & 0x3FFFFFFFFFFFFFFFLL, v6, (uint64_t)&v36, (uint64_t)&v36, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3FE325C);
            goto LABEL_21;
          case 3uLL:
            memset(v35, 0, 14);
            sub_1C3F7E324(a2, a3);
            swift_retain();
            sub_1C3F7E324(a2, a3);
            swift_retain();
            uint64_t v20 = (char *)v35;
            unint64_t v23 = &v36;
            goto LABEL_23;
          default:
            v35[0] = a2;
            LOWORD(v35[1]) = a3;
            BYTE2(v35[1]) = BYTE2(a3);
            BYTE3(v35[1]) = BYTE3(a3);
            BYTE4(v35[1]) = BYTE4(a3);
            BYTE5(v35[1]) = BYTE5(a3);
            sub_1C3F7E324(a2, a3);
            swift_retain();
            sub_1C3F7E324(a2, a3);
            swift_retain();
            unint64_t v23 = &v36;
            uint64_t v20 = (char *)v35 + BYTE6(a3);
LABEL_23:
            uint64_t v30 = v6;
            goto LABEL_24;
        }
      default:
        *(void *)&long long v36 = v18;
        WORD4(v36) = v19;
        BYTE10(v36) = BYTE2(v19);
        BYTE11(v36) = BYTE3(v19);
        BYTE12(v36) = BYTE4(v19);
        BYTE13(v36) = BYTE5(v19);
        swift_retain_n();
        switch(a3 >> 62)
        {
          case 1uLL:
            if (a2 >> 32 < (int)a2) {
              goto LABEL_28;
            }
            swift_retain();
            sub_1C3F7E324(a2, a3);
            swift_retain();
            sub_1C3F7E324(a2, a3);
            swift_retain();
            uint64_t v24 = (int)a2;
            uint64_t v25 = a2 >> 32;
            uint64_t v26 = a3 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v27 = v6;
            unint64_t v28 = (long long *)((char *)&v36 + BYTE6(v19));
LABEL_19:
            sub_1C3FE3C00(v24, v25, v26, v27, (uint64_t)&v36, (uint64_t)v28, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3FE325C);
            break;
          case 2uLL:
            uint64_t v29 = *(void *)(a2 + 24);
            uint64_t v34 = *(void *)(a2 + 16);
            swift_retain();
            sub_1C3F7E324(a2, a3);
            swift_retain();
            sub_1C3F7E324(a2, a3);
            swift_retain();
            swift_retain();
            swift_retain();
            sub_1C3FE3C00(v34, v29, a3 & 0x3FFFFFFFFFFFFFFFLL, v6, (uint64_t)&v36, (uint64_t)&v36 + BYTE6(v19), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1C3FE325C);
LABEL_21:
            swift_release();
            swift_release();
            break;
          case 3uLL:
            memset(v35, 0, 14);
            sub_1C3F7E324(a2, a3);
            swift_retain();
            sub_1C3F7E324(a2, a3);
            swift_retain();
            uint64_t v20 = (char *)v35;
            goto LABEL_16;
          default:
            v35[0] = a2;
            LOWORD(v35[1]) = a3;
            BYTE2(v35[1]) = BYTE2(a3);
            BYTE3(v35[1]) = BYTE3(a3);
            BYTE4(v35[1]) = BYTE4(a3);
            BYTE5(v35[1]) = BYTE5(a3);
            sub_1C3F7E324(a2, a3);
            swift_retain();
            sub_1C3F7E324(a2, a3);
            swift_retain();
            uint64_t v20 = (char *)v35 + BYTE6(a3);
LABEL_16:
            uint64_t v30 = v6;
            unint64_t v23 = (long long *)((char *)&v36 + BYTE6(v19));
LABEL_24:
            sub_1C3FE325C((uint64_t)v35, (uint64_t)v20, v30, &v36, (uint64_t)v23);
            break;
        }
        sub_1C3F7E2CC(v18, v19);
        swift_release_n();
        break;
    }
    sub_1C3F7E2CC(a2, a3);
    swift_release();
    sub_1C3F7E2CC(a2, a3);
    return swift_release();
  }
}

uint64_t sub_1C3FE3008(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void (*a6)(void *, char *, uint64_t, uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  void v21[2] = *MEMORY[0x1E4F143B8];
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      swift_retain();
      sub_1C3F7E324(a3, a4);
      sub_1C3FE3C00((int)a3, a3 >> 32, a4 & 0x3FFFFFFFFFFFFFFFLL, a5, a1, a2, a7);
      return sub_1C3F7E2CC(a3, a4);
    case 2uLL:
      uint64_t v16 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v19 = *(void *)(a3 + 16);
      uint64_t v18 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1C3FE3C00(v19, v18, v16, a5, a1, a2, a7);
      swift_release();
      return swift_release();
    case 3uLL:
      memset(v21, 0, 14);
      swift_retain();
      id v14 = (char *)v21;
      goto LABEL_7;
    default:
      v21[0] = a3;
      LOWORD(v21[1]) = a4;
      BYTE2(v21[1]) = BYTE2(a4);
      BYTE3(v21[1]) = BYTE3(a4);
      BYTE4(v21[1]) = BYTE4(a4);
      BYTE5(v21[1]) = BYTE5(a4);
      swift_retain();
      id v14 = (char *)v21 + BYTE6(a4);
LABEL_7:
      a6(v21, v14, a5, a1, a2);
      return swift_release();
  }
}

uint64_t sub_1C3FE325C(uint64_t result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a5 - (void)a4;
  if (!a4) {
    uint64_t v5 = 0;
  }
  if (v5 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v5 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  int v8 = (const void *)result;
  int v9 = *(void (__cdecl **)(void *))(a3 + 72);
  uint64_t result = sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 256), 1, a4, v5, v9);
  if (v8) {
    uint64_t v10 = a2 - (void)v8;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_17;
  }
  if (v10 > 0x7FFFFFFF)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  sqlite3_bind_blob(*(sqlite3_stmt **)(a3 + 256), 2, v8, v10, v9);
  if (sqlite3_step(*(sqlite3_stmt **)(a3 + 256)) == 101) {
    return sqlite3_reset(*(sqlite3_stmt **)(a3 + 256));
  }
  sub_1C4497D28();
  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t)sqlite3_errmsg(*(sqlite3 **)(a3 + 32));
  if (!result) {
    goto LABEL_19;
  }
  sub_1C4497288();
  sub_1C4497268();
  swift_bridgeObjectRelease();
  sub_1C4497268();
  sub_1C3FE3570();
  swift_allocError();
  *(void *)uint64_t v11 = 0xD00000000000001DLL;
  *(void *)(v11 + 8) = 0x80000001C44B0550;
  *(unsigned char *)(v11 + 16) = 2;
  return swift_willThrow();
}

uint64_t sub_1C3FE33F4()
{
  return sub_1C3FE3F90(v0 + 88);
}

uint64_t sub_1C3FE33FC()
{
  if ((*(unsigned char *)(v0 + 40) & 1) == 0
    && (*(unsigned char *)(v0 + 40) = 1, sub_1C3FDB894(), sqlite3_close(*(sqlite3 **)(v0 + 32))))
  {
    sub_1C4497D28();
    swift_bridgeObjectRelease();
    sub_1C4498088();
    sub_1C4497268();
    swift_bridgeObjectRelease();
    sub_1C4497268();
    uint64_t result = sub_1C4497F58();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C3FE3F90(v0 + 88);
    return v0;
  }
  return result;
}

uint64_t sub_1C3FE3518()
{
  sub_1C3FE33FC();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CRSQLStore()
{
  return self;
}

unint64_t sub_1C3FE3570()
{
  unint64_t result = qword_1EBBBC1A0[0];
  if (!qword_1EBBBC1A0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EBBBC1A0);
  }
  return result;
}

uint64_t sub_1C3FE35C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result = sub_1C4496298();
  uint64_t v19 = (char *)result;
  if (result)
  {
    uint64_t result = sub_1C44962C8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v19 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v20 = sub_1C44962B8();
  if (v20 >= a2 - a1) {
    uint64_t v21 = a2 - a1;
  }
  else {
    uint64_t v21 = v20;
  }
  uint64_t v22 = &v19[v21];
  if (v19) {
    uint64_t v23 = (uint64_t)v22;
  }
  else {
    uint64_t v23 = 0;
  }
  sub_1C3FDF724(v19, v23, a4, a5, a6, a7, a8, a9, a10, a11);
  sub_1C3F7E2CC(a4, a5);
  sub_1C3F7E2CC(a6, a7);
  sub_1C3F7E2CC(a8, a9);
  return swift_release();
}

uint64_t sub_1C3FE36E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11)
{
  uint64_t result = sub_1C4496298();
  uint64_t v19 = (char *)result;
  if (result)
  {
    uint64_t result = sub_1C44962C8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v19 += a1 - result;
  }
  BOOL v20 = __OFSUB__(a2, a1);
  uint64_t v21 = a2 - a1;
  if (v20)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v22 = sub_1C44962B8();
  if (v22 >= v21) {
    uint64_t v23 = v21;
  }
  else {
    uint64_t v23 = v22;
  }
  uint64_t v24 = &v19[v23];
  if (v19) {
    uint64_t v25 = (uint64_t)v24;
  }
  else {
    uint64_t v25 = 0;
  }
  sub_1C3FE0858(v19, v25, a4, a5, a6, a7, a8, a9, a10, a11);
  sub_1C3F7E2CC(a4, a5);
  sub_1C3F7E2CC(a6, a7);
  return swift_release();
}

uint64_t sub_1C3FE37F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void *a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11)
{
  uint64_t result = sub_1C4496298();
  uint64_t v18 = (char *)result;
  if (result)
  {
    uint64_t result = sub_1C44962C8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v18 += a1 - result;
  }
  BOOL v19 = __OFSUB__(a2, a1);
  uint64_t v20 = a2 - a1;
  if (v19)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v21 = sub_1C44962B8();
  if (v21 >= v20) {
    uint64_t v22 = v20;
  }
  else {
    uint64_t v22 = v21;
  }
  uint64_t v23 = &v18[v22];
  if (v18) {
    uint64_t v24 = (uint64_t)v23;
  }
  else {
    uint64_t v24 = 0;
  }
  sub_1C3FE0F28(v18, v24, a4, a5, a6, a7, a8, a9, a10, a11);
  sub_1C3F7E2CC(a4, a5);
  return swift_release();
}

uint64_t sub_1C3FE38FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, const void *a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11)
{
  uint64_t result = sub_1C4496298();
  uint64_t v18 = result;
  if (result)
  {
    uint64_t result = sub_1C44962C8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v18 += a1 - result;
  }
  BOOL v19 = __OFSUB__(a2, a1);
  uint64_t v20 = a2 - a1;
  if (v19)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v21 = sub_1C44962B8();
  if (v21 >= v20) {
    uint64_t v22 = v20;
  }
  else {
    uint64_t v22 = v21;
  }
  uint64_t v23 = v18 + v22;
  if (v18) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  sub_1C3FE11D8(v18, v24, a4, a5, a6, a7, a8, a9, a10, a11);
  return swift_release();
}

uint64_t sub_1C3FE39F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = sub_1C4496298();
  int v9 = (char *)result;
  if (result)
  {
    uint64_t result = sub_1C44962C8();
    if (__OFSUB__(a1, result))
    {
LABEL_17:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v12 = sub_1C44962B8();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  id v14 = &v9[v13];
  if (v9) {
    uint64_t v15 = (uint64_t)v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = sub_1C3FDC278(v9, v15);
  if (!v4)
  {
    unint64_t v18 = v16;
    if (!v16)
    {
      uint64_t v19 = MEMORY[0x1E4FBC860];
      unint64_t v18 = sub_1C3F7E4A4(MEMORY[0x1E4FBC860]);
      unint64_t v17 = sub_1C3F7E37C(v19);
    }
    uint64_t v20 = *a4;
    *a4 = v18;
    a4[1] = v17;
    sub_1C3F870F4(v20);
  }
  return swift_release();
}

uint64_t sub_1C3FE3ADC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1C3FE3B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = sub_1C4496298();
  uint64_t v14 = result;
  if (result)
  {
    uint64_t result = sub_1C44962C8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v14 += a1 - result;
  }
  BOOL v15 = __OFSUB__(a2, a1);
  uint64_t v16 = a2 - a1;
  if (v15)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v17 = sub_1C44962B8();
  if (v17 >= v16) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = v17;
  }
  uint64_t v19 = v14 + v18;
  if (v14) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  sub_1C3FE3008(v14, v20, a4, a5, a6, (void (*)(void *, char *, uint64_t, uint64_t, uint64_t))a7, a7);
  sub_1C3F7E2CC(a4, a5);
  return swift_release();
}

uint64_t sub_1C3FE3C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = sub_1C4496298();
  uint64_t v13 = result;
  if (result)
  {
    uint64_t result = sub_1C44962C8();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v13 += a1 - result;
  }
  BOOL v14 = __OFSUB__(a2, a1);
  uint64_t v15 = a2 - a1;
  if (v14)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v16 = sub_1C44962B8();
  if (v16 >= v15) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = v16;
  }
  uint64_t v18 = v13 + v17;
  if (v13) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  a7(v13, v19, a4, a5, a6);
  return swift_release();
}

uint64_t sub_1C3FE3CD8(uint64_t a1, void **a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  while (sqlite3_step(*(sqlite3_stmt **)(a1 + 184)) == 100)
  {
    uint64_t v4 = sqlite3_column_bytes(*(sqlite3_stmt **)(a1 + 184), 0);
    uint64_t v5 = sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 184), 0);
    if (!v5) {
      __break(1u);
    }
    if (v4)
    {
      if ((int)v4 <= 14)
      {
        memset(__dst, 0, sizeof(__dst));
        unsigned __int8 v16 = v4;
        memcpy(__dst, v5, (int)v4);
        uint64_t v7 = *(void *)__dst;
        unint64_t v8 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v16 << 48);
      }
      else
      {
        sub_1C44962E8();
        swift_allocObject();
        if (v4 == 0x7FFFFFFF)
        {
          uint64_t v6 = sub_1C4496288();
          sub_1C44964E8();
          uint64_t v7 = swift_allocObject();
          *(_OWORD *)(v7 + 16) = xmmword_1C449B0C0;
          unint64_t v8 = v6 | 0x8000000000000000;
        }
        else
        {
          uint64_t v7 = v4 << 32;
          unint64_t v8 = sub_1C4496288() | 0x4000000000000000;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0xC000000000000000;
    }
    sub_1C43C63D4(v7, v8, __dst);
    uint64_t v9 = *(void *)__dst;
    BOOL v10 = *a2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      BOOL v10 = sub_1C3FF1870(0, v10[2] + 1, 1, v10);
      *a2 = v10;
    }
    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1) {
      BOOL v10 = sub_1C3FF1870((void *)(v12 > 1), v13 + 1, 1, v10);
    }
    void v10[2] = v13 + 1;
    v10[v13 + 4] = v9;
    *a2 = v10;
    sub_1C3F7E2CC(v7, v8);
  }
  return sqlite3_reset(*(sqlite3_stmt **)(a1 + 184));
}

uint64_t sub_1C3FE3F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBC0C90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C3FE3F90(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBC0C90);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1C3FE3FF0()
{
  unint64_t result = qword_1EA39B370[0];
  if (!qword_1EA39B370[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA39B370);
  }
  return result;
}

uint64_t sub_1C3FE4044(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBC0C90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1C3FE414C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 4u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for SQLiteError(uint64_t a1)
{
  return sub_1C3FE4174(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_1C3FE4174(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 4u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s9Coherence11SQLiteErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1C3FE414C(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SQLiteError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1C3FE414C(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1C3FE4174(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SQLiteError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1C3FE4174(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLiteError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLiteError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1C3FE4318(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1C3FE4320(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SQLiteError()
{
  return &type metadata for SQLiteError;
}

unint64_t sub_1C3FE4338(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBC0FB0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF190);
  uint64_t v6 = sub_1C4497FD8();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1C3F970C4(v12, (uint64_t)v5, qword_1EBBC0FB0);
    unint64_t result = sub_1C3F8F160((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for Replica();
    sub_1C3F8AB08((uint64_t)v5, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, (uint64_t (*)(void))type metadata accessor for Replica);
    unint64_t result = sub_1C3FAAC94(v9, v7[7] + 16 * v16);
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    void v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C3FE4534(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(qword_1EBBBAF50);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBA218);
  uint64_t v6 = sub_1C4497FD8();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)&v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1C3F970C4(v12, (uint64_t)v5, qword_1EBBBAF50);
    unint64_t result = sub_1C3F54E50((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = sub_1C4496498();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = sub_1C3FDA248(v9, v7[7] + 8 * v16);
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    void v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C3FE4734(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BF08);
  uint64_t v2 = (void *)sub_1C4497FD8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    long long v13 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1C3FB9894(v5, v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    void v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C3FE4854(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BF40);
  uint64_t v2 = (void *)sub_1C4497FD8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    unint64_t v6 = *v4;
    uint64_t v7 = v4[1];
    unint64_t v8 = v4[2];
    uint64_t v9 = v4[3];
    unint64_t v10 = v4[4];
    sub_1C3F7E324(v5, *v4);
    sub_1C3F7E324(v7, v8);
    sub_1C3F7E324(v9, v10);
    unint64_t result = sub_1C3F850CC(v5, v6);
    if (v12) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v13 = (uint64_t *)(v2[6] + 16 * result);
    *long long v13 = v5;
    v13[1] = v6;
    BOOL v14 = (uint64_t *)(v2[7] + 32 * result);
    *BOOL v14 = v7;
    v14[1] = v8;
    _OWORD v14[2] = v9;
    v14[3] = v10;
    uint64_t v15 = v2[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v4 += 6;
    void v2[2] = v17;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C3FE49A0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BFD8);
  uint64_t v2 = (void *)sub_1C4497FD8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    unint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    unint64_t v8 = *v4;
    sub_1C3F7E324(v5, v6);
    sub_1C3F7E324(v7, v8);
    unint64_t result = sub_1C3F850CC(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v11 = v5;
    v11[1] = v6;
    char v12 = (uint64_t *)(v2[7] + 16 * result);
    *char v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    void v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C3FE4ACC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBC858);
  uint64_t v2 = (void *)sub_1C4497FD8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    unint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    sub_1C3F7E324(v5, v6);
    swift_retain();
    unint64_t result = sub_1C3F850CC(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    void v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C3FE4BEC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39B368);
  uint64_t v2 = sub_1C4497FD8();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1C3F970C4(v6, (uint64_t)&v13, &qword_1EA39BF98);
    uint64_t v7 = v13;
    unint64_t result = sub_1C4061A38(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_1C3FF2864(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    void v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C3FE4D1C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BE88);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BE90);
  uint64_t v6 = sub_1C4497FD8();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1C3F970C4(v12, (uint64_t)v5, &qword_1EA39BE88);
    unint64_t result = sub_1C4061BA8((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = sub_1C4497EA8();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    unint64_t result = (unint64_t)sub_1C3FF2864(v9, (_OWORD *)(v7[7] + 32 * v16));
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    void v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C3FE4F1C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BF18);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BF20);
  uint64_t v6 = sub_1C4497FD8();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1C3F970C4(v12, (uint64_t)v5, &qword_1EA39BF18);
    unint64_t result = sub_1C3FA1598((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = sub_1C4496678();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    void v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1C3FE5110(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BF60);
  uint64_t v2 = (void *)sub_1C4497FD8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_1C3FB9894(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    void v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1C3FE522C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1C4496678();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E78]), sel_init);
  uint64_t v7 = sub_1C3FF32D4(0, &qword_1EA39BFE0);
  v17[3] = v7;
  v17[0] = v6;
  sub_1C4496668();
  if (v7)
  {
    uint64_t v8 = __swift_project_boxed_opaque_existential_1(v17, v7);
    uint64_t v9 = *(void *)(v7 - 8);
    MEMORY[0x1F4188790](v8);
    uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v9 + 16))(v11);
    uint64_t v12 = sub_1C44982D8();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    uint64_t v12 = 0;
  }
  id v13 = objc_allocWithZone((Class)CRTTMergeableString);
  long long v14 = (void *)sub_1C4496608();
  id v15 = objc_msgSend(v13, sel_initWithStorage_uuid_, v12, v14);
  swift_unknownObjectRelease();

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(void *)(v1 + 16) = v15;
  return v1;
}

uint64_t *sub_1C3FE5470(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = *v2;
  uint64_t v5 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C3FF29B0(a1, (uint64_t)v7, type metadata accessor for Proto_Sequence);
  uint64_t v8 = (objc_class *)type metadata accessor for CRStringDecoder(0);
  uint64_t v9 = (char *)objc_allocWithZone(v8);
  uint64_t v10 = &v9[OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence];
  swift_retain();
  uint64_t v11 = v9;
  sub_1C4496888();
  uint64_t v12 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  if (qword_1EBBBC0C0 != -1) {
    swift_once();
  }
  *(void *)&v10[v12] = qword_1EBBBC0B8;
  sub_1C3FF29B0((uint64_t)v7, (uint64_t)&v11[OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded], type metadata accessor for Proto_Sequence);
  *(void *)&v11[OBJC_IVAR____TtC9Coherence15CRStringDecoder_decoder] = a2;
  swift_retain();
  swift_retain();

  v22.receiver = v11;
  v22.super_class = v8;
  id v13 = objc_msgSendSuper2(&v22, sel_init, v20);
  swift_release();
  sub_1C3F8AFE8((uint64_t)v7, type metadata accessor for Proto_Sequence);
  id v14 = objc_allocWithZone((Class)CRTTMergeableString);
  id v21 = 0;
  id v15 = objc_msgSend(v14, sel_initWithDecoder_error_, v13, &v21);
  if (v15)
  {
    uint64_t v16 = (uint64_t)v15;
    id v17 = v21;
    swift_release();

    sub_1C3F8AFE8(a1, type metadata accessor for Proto_Sequence);
    void v2[2] = v16;
  }
  else
  {
    id v18 = v21;
    sub_1C44963A8();

    swift_willThrow();
    swift_release();

    sub_1C3F8AFE8(a1, type metadata accessor for Proto_Sequence);
    swift_deallocPartialClassInstance();
  }
  return v2;
}

uint64_t sub_1C3FE574C()
{
  return swift_deallocClassInstance();
}

uint64_t CRString.copy(renamingReferences:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void **)(*(void *)v1 + 16);
  swift_retain();
  id v4 = objc_msgSend(v3, sel_attributedString);
  self;
  swift_dynamicCastObjCClassUnconditional();
  uint64_t v5 = sub_1C44971B8();
  uint64_t v7 = v6;
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for CRStringRef();
  uint64_t v8 = swift_allocObject();
  sub_1C3FE522C();
  *a1 = v8;
  v9._countAndFlagsBits = v5;
  v9._object = v7;
  CRString.insert(contentsOf:at:)(v9, 0);
  return swift_bridgeObjectRelease();
}

uint64_t CRString.string.getter()
{
  id v1 = objc_msgSend(*(id *)(*(void *)v0 + 16), sel_attributedString);
  self;
  swift_dynamicCastObjCClassUnconditional();
  uint64_t v2 = sub_1C44971B8();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t type metadata accessor for CRStringRef()
{
  return self;
}

uint64_t CRString.copy(renamingReferences:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  if (!a1) {
    sub_1C3FE49A0(MEMORY[0x1E4FBC860]);
  }
  uint64_t v5 = *(void **)(v4 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  id v6 = objc_msgSend(v5, sel_attributedString);
  self;
  swift_dynamicCastObjCClassUnconditional();
  uint64_t v7 = sub_1C44971B8();
  Swift::String v9 = v8;
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for CRStringRef();
  uint64_t v10 = swift_allocObject();
  sub_1C3FE522C();
  *a2 = v10;
  v11._countAndFlagsBits = v7;
  v11._object = v9;
  CRString.insert(contentsOf:at:)(v11, 0);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void CRString.init(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for CRStringRef();
  uint64_t v4 = swift_allocObject();
  sub_1C3FE522C();

  *a2 = v4;
}

uint64_t CRString.init()@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CRStringRef();
  uint64_t v2 = swift_allocObject();
  uint64_t result = sub_1C3FE522C();
  *a1 = v2;
  return result;
}

uint64_t CRString.init(_:string:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  type metadata accessor for CRStringRef();
  uint64_t v8 = swift_allocObject();
  sub_1C3FE522C();
  v9._countAndFlagsBits = a2;
  v9._object = a3;
  CRString.insert(contentsOf:at:)(v9, 0);

  uint64_t result = swift_bridgeObjectRelease();
  *a4 = v8;
  return result;
}

uint64_t _s9Coherence8CRStringVyACSScfC_0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  type metadata accessor for CRStringRef();
  uint64_t v6 = swift_allocObject();
  sub_1C3FE522C();
  *a3 = v6;
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  CRString.insert(contentsOf:at:)(v7, 0);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CRString.insert(contentsOf:at:)(Swift::String contentsOf, Swift::Int at)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = *v2;
    type metadata accessor for CRStringRef();
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = *(void **)(v4 + 16);
    swift_retain();
    objc_msgSend(v6, sel_copy);
    sub_1C4497BA8();
    swift_unknownObjectRelease();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0190);
    swift_dynamicCast();
    *(void *)(v5 + 16) = aBlock[6];
    *uint64_t v2 = v5;
    swift_release();
  }
  id v7 = objc_allocWithZone(NSString);
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)sub_1C4497188();
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v7, sel_initWithString_, v8);

  id v10 = *(id *)(*v2 + 16);
  id v11 = objc_msgSend(v9, sel_length);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v9;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_1C3FE5E64;
  *(void *)(v13 + 24) = v12;
  aBlock[4] = sub_1C3FE5EA0;
  void aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1C3FE5EC8;
  aBlock[3] = &block_descriptor_0;
  id v14 = _Block_copy(aBlock);
  id v15 = v9;
  swift_retain();
  swift_release();
  objc_msgSend(v10, sel_insertAtIndex_length_getStorage_, at, v11, v14);

  _Block_release(v14);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
}

uint64_t sub_1C3FE5E2C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C3FE5E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1C3FE5E90()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1C3FE5EA0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

id sub_1C3FE5EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v11)(void *__return_ptr, char *, uint64_t, uint64_t);
  void *v12;
  void v14[4];
  uint64_t vars8;

  uint64_t v7 = sub_1C4496678();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = *(void (**)(void *__return_ptr, char *, uint64_t, uint64_t))(a1 + 32);
  sub_1C4496628();
  v11(v14, v10, a3, a4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  __swift_project_boxed_opaque_existential_1(v14, v14[3]);
  uint64_t v12 = (void *)sub_1C44982D8();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v12;
}

Swift::Void __swiftcall CRString.append(_:)(Swift::String a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v2 = *v1;
    type metadata accessor for CRStringRef();
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = *(void **)(v2 + 16);
    swift_retain();
    objc_msgSend(v4, sel_copy);
    sub_1C4497BA8();
    swift_unknownObjectRelease();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0190);
    swift_dynamicCast();
    *(void *)(v3 + 16) = aBlock[6];
    *id v1 = v3;
    swift_release();
  }
  id v5 = objc_allocWithZone(NSString);
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)sub_1C4497188();
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v5, sel_initWithString_, v6);

  id v8 = *(id *)(*v1 + 16);
  id v9 = objc_msgSend(v8, sel_length);
  id v10 = objc_msgSend(v7, sel_length);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v7;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1C3FE5E64;
  *(void *)(v12 + 24) = v11;
  aBlock[4] = sub_1C3FF3310;
  void aBlock[5] = v12;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1C3FE5EC8;
  aBlock[3] = &block_descriptor_13;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = v7;
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_insertAtIndex_length_getStorage_, v9, v10, v13);

  _Block_release(v13);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (v8) {
    __break(1u);
  }
}

id sub_1C3FE6298@<X0>(void *a1@<X8>)
{
  id v4 = *(id *)(v1 + 16);
  a1[3] = sub_1C3FF32D4(0, &qword_1EA39BFD0);
  *a1 = v4;
  return v4;
}

uint64_t sub_1C3FE62FC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void CRString.removeSubrange(_:)(uint64_t a1, uint64_t a2)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *v2;
    type metadata accessor for CRStringRef();
    uint64_t v6 = swift_allocObject();
    id v7 = *(void **)(v5 + 16);
    swift_retain();
    objc_msgSend(v7, sel_copy);
    sub_1C4497BA8();
    swift_unknownObjectRelease();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0190);
    swift_dynamicCast();
    *(void *)(v6 + 16) = v11;
    *uint64_t v2 = v6;
    swift_release();
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = v8 + 1;
    if (!__OFADD__(v8, 1))
    {
      id v10 = *(id *)(*v2 + 16);
      objc_msgSend(v10, sel_removeObjectsInRange_, a1, v9);

      return;
    }
  }
  __break(1u);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;

  uint64_t v3 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if (v3 >= 1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *v2;
      type metadata accessor for CRStringRef();
      uint64_t v6 = swift_allocObject();
      id v7 = *(void **)(v5 + 16);
      swift_retain();
      objc_msgSend(v7, sel_copy);
      sub_1C4497BA8();
      swift_unknownObjectRelease();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0190);
      swift_dynamicCast();
      *(void *)(v6 + 16) = v9;
      *uint64_t v2 = v6;
      swift_release();
    }
    uint64_t v8 = *(id *)(*v2 + 16);
    objc_msgSend(v8, sel_removeObjectsInRange_, a1, v3);
  }
}

void CRString.replaceSubrange(_:with:)(Swift::Int at, uint64_t a2, Swift::String contentsOf)
{
  uint64_t v4 = a2 - at;
  if (__OFSUB__(a2, at))
  {
    __break(1u);
  }
  else if (v4 < 1)
  {
    if (!v4)
    {
      uint64_t countAndFlagsBits = contentsOf._countAndFlagsBits;
      object = contentsOf._object;
      CRString.insert(contentsOf:at:)(*(Swift::String *)&countAndFlagsBits, at);
    }
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v6 = *v3;
      type metadata accessor for CRStringRef();
      uint64_t v7 = swift_allocObject();
      uint64_t v8 = *(void **)(v6 + 16);
      swift_retain();
      objc_msgSend(v8, sel_copy);
      sub_1C4497BA8();
      swift_unknownObjectRelease();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0190);
      swift_dynamicCast();
      *(void *)(v7 + 16) = v17;
      *uint64_t v3 = v7;
      swift_release();
    }
    uint64_t v9 = *(void **)(*v3 + 16);
    id v10 = (objc_class *)NSString;
    id v11 = v9;
    id v12 = objc_allocWithZone(v10);
    swift_bridgeObjectRetain();
    uint64_t v13 = (void *)sub_1C4497188();
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v12, sel_initWithString_, v13);

    objc_msgSend(v11, sel_replaceStorageInRange_withStorage_, at, v4, v14);
  }
}

void *CRString.merge(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = *(void **)v1;
  if (*(void *)v1 != v2)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v4 = *(void **)v1;
      type metadata accessor for CRStringRef();
      uint64_t v5 = swift_allocObject();
      uint64_t v6 = (void *)v4[2];
      swift_retain();
      objc_msgSend(v6, sel_copy);
      sub_1C4497BA8();
      swift_unknownObjectRelease();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0190);
      swift_dynamicCast();
      *(void *)(v5 + 16) = v7;
      *(void *)uint64_t v1 = v5;
      swift_release();
    }
    uint64_t result = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_mergeWithString_optimized_, *(void *)(v2 + 16), 1);
    if (result == (void *)2)
    {
      *(void *)uint64_t v1 = v2;
      swift_retain();
      return (void *)swift_release();
    }
  }
  return result;
}

id CRString.count.getter()
{
  id v1 = objc_msgSend(objc_msgSend(*(id *)(*(void *)v0 + 16), sel_attributedString), sel_length);
  swift_unknownObjectRelease();
  return v1;
}

id sub_1C3FE6868(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(v3 + 16);
  swift_retain();
  id v5 = objc_msgSend(v4, sel_attributedString);
  self;
  swift_dynamicCastObjCClassUnconditional();
  uint64_t v6 = sub_1C44971B8();
  uint64_t v8 = v7;
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v9 = *(void **)(v2 + 16);
  swift_retain();
  id v10 = objc_msgSend(v9, sel_attributedString);
  self;
  swift_dynamicCastObjCClassUnconditional();
  uint64_t v11 = sub_1C44971B8();
  uint64_t v13 = v12;
  swift_release();
  swift_unknownObjectRelease();
  if (v6 == v11 && v8 == v13)
  {
    swift_bridgeObjectRelease_n();
    return objc_msgSend(*(id *)(v3 + 16), sel_graphIsEqual_, *(void *)(v2 + 16));
  }
  char v15 = sub_1C44982E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id result = 0;
  if (v15) {
    return objc_msgSend(*(id *)(v3 + 16), sel_graphIsEqual_, *(void *)(v2 + 16));
  }
  return result;
}

unint64_t static CRString.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  v4[0] = *a2;
  v4[1] = v2;
  return (unint64_t)sub_1C3FE6868(v4) & 1;
}

Swift::Bool __swiftcall CRString.needToFinalizeTimestamps()()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_needToFinalizeTimestamps);
}

id CRString.finalizeTimestamps(_:)(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(*v1 + 16), sel_needToFinalizeTimestamps);
  if (result)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v4 = *v1;
      type metadata accessor for CRStringRef();
      uint64_t v5 = swift_allocObject();
      uint64_t v6 = *(void **)(v4 + 16);
      swift_retain();
      objc_msgSend(v6, sel_copy);
      sub_1C4497BA8();
      swift_unknownObjectRelease();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0190);
      swift_dynamicCast();
      *(void *)(v5 + 16) = v7;
      *id v1 = v5;
      swift_release();
    }
    return objc_msgSend(*(id *)(*v1 + 16), sel_finalizeTimestamps_, a1);
  }
  return result;
}

uint64_t *CRString.actionUndoingDifference(from:)@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4 = *result;
  uint64_t v5 = *v2;
  if (v5 == *result) {
    goto LABEL_6;
  }
  if (objc_msgSend(*(id *)(v5 + 16), sel_hasDeltaTo_compareElements_, *(void *)(v4 + 16), 0))
  {
    uint64_t v7 = v4;
    uint64_t v8 = v5;
    swift_retain();
    CRString.merge(_:)(&v7);
    uint64_t v6 = v4;
    uint64_t v7 = v8;
    CRString.actionUndoingDifference(from:)(&v6);
    return (uint64_t *)swift_release();
  }
  id result = (uint64_t *)objc_msgSend(*(id *)(v5 + 16), sel_undoCommandToChangeFrom_unedited_, *(void *)(v4 + 16), 0);
  if (!result) {
LABEL_6:
  }
    *a2 = 0;
  else {
    *a2 = result;
  }
  return result;
}

void *CRString.apply(_:)(void *result)
{
  if (*result)
  {
    swift_unknownObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v2 = *v1;
      type metadata accessor for CRStringRef();
      uint64_t v3 = swift_allocObject();
      uint64_t v4 = *(void **)(v2 + 16);
      swift_retain();
      objc_msgSend(v4, sel_copy);
      sub_1C4497BA8();
      swift_unknownObjectRelease();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0190);
      swift_dynamicCast();
      *(void *)(v3 + 16) = v8;
      *id v1 = v3;
      swift_release();
    }
    swift_unknownObjectRetain();
    self;
    uint64_t v5 = swift_dynamicCastObjCClass();
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      id v7 = *(id *)(*v1 + 16);
      objc_msgSend(v6, sel_applyToString_, v7);
    }
    return (void *)swift_unknownObjectRelease_n();
  }
  return result;
}

id CRString.hasDelta(from:)(uint64_t a1)
{
  if (*(void *)v1 == *(void *)a1) {
    return 0;
  }
  else {
    return objc_msgSend(*(id *)(*(void *)a1 + 16), sel_hasDeltaTo_compareElements_, *(void *)(*(void *)v1 + 16), 0);
  }
}

uint64_t CRString.delta(_:from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = *a2;
  uint64_t v9 = *v3;
  swift_retain();
  swift_retain();
  CRString.finalizeTimestamps(_:)(a1);
  CRString.finalizeTimestamps(_:)(a1);
  id v6 = objc_msgSend(objc_allocWithZone((Class)CRTTMergeableStringDelta), sel_initWithDeltasTo_from_compareElements_, *(void *)(v9 + 16), *(void *)(v8 + 16), 0);
  swift_release();
  uint64_t result = swift_release();
  *a3 = v6;
  return result;
}

id sub_1C3FE6E50(void *a1)
{
  return objc_msgSend(*(id *)(*(void *)v1 + 16), sel_canDeltaMerge_, *a1);
}

Swift::Bool __swiftcall CRString.canMerge(delta:)(Coherence::CRString::Partial *delta)
{
  return objc_msgSend(*(id *)(*(void *)v1 + 16), sel_canDeltaMerge_, delta->delta.super.isa);
}

Swift::Bool __swiftcall CRString.merge(delta:)(Coherence::CRString::Partial *delta)
{
  Class isa = delta->delta.super.isa;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *v1;
    type metadata accessor for CRStringRef();
    uint64_t v4 = swift_allocObject();
    uint64_t v5 = *(void **)(v3 + 16);
    swift_retain();
    objc_msgSend(v5, sel_copy);
    sub_1C4497BA8();
    swift_unknownObjectRelease();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0190);
    swift_dynamicCast();
    *(void *)(v4 + 16) = v7;
    *uint64_t v1 = v4;
    swift_release();
  }
  return objc_msgSend(*(id *)(*v1 + 16), sel_deltaMerge_, isa);
}

unint64_t sub_1C3FE6F98(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  v4[0] = *a2;
  v4[1] = v2;
  return (unint64_t)sub_1C3FE6868(v4) & 1;
}

uint64_t sub_1C3FE6FD8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void **)(*(void *)v1 + 16);
  swift_retain();
  id v4 = objc_msgSend(v3, sel_attributedString);
  self;
  swift_dynamicCastObjCClassUnconditional();
  uint64_t v5 = sub_1C44971B8();
  uint64_t v7 = v6;
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for CRStringRef();
  uint64_t v8 = swift_allocObject();
  sub_1C3FE522C();
  *a1 = v8;
  v9._uint64_t countAndFlagsBits = v5;
  v9._object = v7;
  CRString.insert(contentsOf:at:)(v9, 0);
  return swift_bridgeObjectRelease();
}

uint64_t *CRString.observableDifference(from:with:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *result;
  uint64_t v6 = *v3;
  if (*v3 != *result)
  {
    if (objc_msgSend(*(id *)(v6 + 16), sel_hasDeltaTo_compareElements_, *(void *)(v5 + 16), 0))
    {
      uint64_t v17 = v5;
      aBlock[0] = v6;
      swift_retain();
      CRString.merge(_:)(&v17);
      uint64_t v16 = v5;
      uint64_t v17 = aBlock[0];
      CRString.observableDifference(from:with:)(&v16, a2);
      return (uint64_t *)swift_release();
    }
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = MEMORY[0x1E4FBC860];
    Swift::String v9 = (uint64_t *)(v8 + 16);
    id v10 = *(void **)(v5 + 16);
    uint64_t v11 = *(void **)(v6 + 16);
    aBlock[4] = sub_1C3FF1190;
    void aBlock[5] = v8;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1C3FEDCC8;
    aBlock[3] = &block_descriptor_19;
    uint64_t v12 = _Block_copy(aBlock);
    id v13 = v10;
    id v14 = v11;
    swift_retain();
    swift_release();
    objc_msgSend(v13, sel_deltaTo_edited_unedited_, v14, v12, 0);
    _Block_release(v12);

    swift_beginAccess();
    uint64_t v15 = *v9;
    if (*(void *)(v15 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t result = (uint64_t *)swift_release();
      *a3 = v15;
      return result;
    }
    uint64_t result = (uint64_t *)swift_release();
  }
  *a3 = 0;
  return result;
}

id sub_1C3FE7298()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_needToFinalizeTimestamps);
}

uint64_t sub_1C3FE72C8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return CRString.init(from:)(a1, a2);
}

uint64_t CRString.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1C3F970C4(v8, (uint64_t)v7, &qword_1EBBC04F8);
  uint64_t v9 = type metadata accessor for Proto_CRDT(0);
  LODWORD(v8) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9);
  sub_1C3F962E0((uint64_t)v7, &qword_1EBBC04F8);
  if (v8 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v10 = 0xD000000000000014;
    *(void *)(v10 + 8) = 0x80000001C44B0EE0;
    *(unsigned char *)(v10 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  else
  {
    type metadata accessor for CRDecoder.CRDTContainer();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = a1;
    *(void *)(inited + 24) = 0;
    *(unsigned char *)(inited + 32) = 1;
    sub_1C4000610(&v14);
    uint64_t result = swift_release();
    if (!v2) {
      *a2 = v14;
    }
  }
  return result;
}

uint64_t sub_1C3FE7498()
{
  return CRString.encode(to:)();
}

uint64_t CRString.encode(to:)()
{
  uint64_t v2 = type metadata accessor for Proto_CRDT(0);
  MEMORY[0x1F4188790](v2 - 8);
  id v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  uint64_t result = sub_1C3F62C10();
  if (!v1)
  {
    uint64_t v7 = result;
    v10[1] = v5;
    uint64_t v8 = *(void *)(result + 16);
    swift_retain();
    sub_1C3FF0478(v8, (uint64_t)v4);
    uint64_t v9 = v7 + OBJC_IVAR____TtCC9Coherence9CREncoder13CRDTContainer_crdt;
    swift_beginAccess();
    sub_1C3FF26BC((uint64_t)v4, v9);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

{
  uint64_t v0;
  void *v1;
  id v2;

  uint64_t v1 = *(void **)(*(void *)v0 + 16);
  swift_retain();
  uint64_t v2 = objc_msgSend(v1, sel_attributedString);
  self;
  swift_dynamicCastObjCClassUnconditional();
  sub_1C44971B8();
  swift_release();
  swift_unknownObjectRelease();
  sub_1C4497278();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C3FE75B8()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_isEmptyCRDT) ^ 1;
}

uint64_t CRString.hasEncodedData.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_isEmptyCRDT) ^ 1;
}

void sub_1C3FE7610(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void CRString.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CRString.ObservableDifference.Edit.range.getter()
{
  return *(void *)v0;
}

uint64_t CRString.ObservableDifference.Edit.changeInLength.getter()
{
  return *(void *)(v0 + 16);
}

BOOL static CRString.ObservableDifference.Edit.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

BOOL sub_1C3FE7660(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t CRString.ObservableDifference.edits.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static CRString.ObservableDifference.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_1C3FE76A4(*a1, *a2);
}

uint64_t sub_1C3FE76A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = v2 - 1;
  id v4 = (int64x2_t *)(a1 + 40);
  uint64_t v5 = (int64x2_t *)(a2 + 40);
  do
  {
    int32x2_t v6 = vmovn_s64(vceqq_s64(*v4, *v5));
    uint64_t result = ((v4[-1].i64[1] == v5[-1].i64[1]) & v6.i8[0]) & v6.i8[4];
    BOOL v9 = v3-- != 0;
    if (result != 1) {
      break;
    }
    id v4 = (int64x2_t *)((char *)v4 + 24);
    uint64_t v5 = (int64x2_t *)((char *)v5 + 24);
  }
  while (v9);
  return result;
}

uint64_t sub_1C3FE772C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BEE8);
  MEMORY[0x1F4188790](v50);
  BOOL v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  id v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v51 = (uint64_t)&v41 - v14;
  uint64_t v54 = type metadata accessor for Proto_Value(0);
  uint64_t v15 = MEMORY[0x1F4188790](v54);
  uint64_t v55 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = *(void *)(a1 + 16);
  if (v20 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v20 || a1 == a2) {
    return 1;
  }
  uint64_t v42 = v7;
  uint64_t v43 = v13;
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v22 = *(void *)(v17 + 72);
  uint64_t v48 = v4;
  uint64_t v49 = v22;
  long long v46 = (char *)&v41 - v18;
  uint64_t v47 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v53 = v9;
  uint64_t v23 = (uint64_t)v55;
  uint64_t v24 = v51;
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  while (1)
  {
    sub_1C3FF29B0(a1 + v21, (uint64_t)v19, type metadata accessor for Proto_Value);
    sub_1C3FF29B0(a2 + v21, v23, type metadata accessor for Proto_Value);
    uint64_t v25 = *(int *)(v54 + 20);
    uint64_t v26 = *(void *)&v19[v25];
    uint64_t v27 = *(void *)(v23 + v25);
    if (v26 == v27) {
      goto LABEL_12;
    }
    uint64_t v28 = v26 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    uint64_t v52 = *(void *)&v19[v25];
    swift_beginAccess();
    sub_1C3F970C4(v28, v24, &qword_1EBBBF8A0);
    uint64_t v29 = v27 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v30 = (uint64_t)v53;
    uint64_t v31 = (uint64_t)&v53[*(int *)(v50 + 48)];
    sub_1C3F970C4(v24, (uint64_t)v53, &qword_1EBBBF8A0);
    sub_1C3F970C4(v29, v31, &qword_1EBBBF8A0);
    uint64_t v32 = *v47;
    uint64_t v33 = v24;
    uint64_t v34 = v48;
    if ((*v47)(v30, 1, v48) == 1)
    {
      swift_retain();
      uint64_t v35 = (uint64_t)v53;
      swift_retain();
      sub_1C3F962E0(v33, &qword_1EBBBF8A0);
      int v36 = v32(v31, 1, v34);
      uint64_t v19 = v46;
      if (v36 != 1) {
        goto LABEL_16;
      }
      sub_1C3F962E0(v35, &qword_1EBBBF8A0);
      uint64_t v24 = v51;
      goto LABEL_11;
    }
    uint64_t v37 = (uint64_t)v43;
    sub_1C3F970C4(v30, (uint64_t)v43, &qword_1EBBBF8A0);
    if (v32(v31, 1, v34) == 1) {
      break;
    }
    uint64_t v38 = (uint64_t)v42;
    sub_1C3F8AB08(v31, (uint64_t)v42, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    swift_retain();
    swift_retain();
    char v39 = sub_1C43F23A0(v37, v38);
    sub_1C3F8AFE8(v38, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    uint64_t v24 = v51;
    sub_1C3F962E0(v51, &qword_1EBBBF8A0);
    sub_1C3F8AFE8(v37, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    sub_1C3F962E0((uint64_t)v53, &qword_1EBBBF8A0);
    uint64_t v19 = v46;
    if ((v39 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_11:
    swift_release();
    swift_release();
    a1 = v44;
    a2 = v45;
LABEL_12:
    sub_1C4496898();
    sub_1C3FF2968(&qword_1EA39BEF0, MEMORY[0x1E4F70E60]);
    uint64_t v23 = (uint64_t)v55;
    if ((sub_1C4497178() & 1) == 0) {
      goto LABEL_18;
    }
    sub_1C3F8AFE8(v23, type metadata accessor for Proto_Value);
    sub_1C3F8AFE8((uint64_t)v19, type metadata accessor for Proto_Value);
    v21 += v49;
    if (!--v20) {
      return 1;
    }
  }
  swift_retain();
  swift_retain();
  sub_1C3F962E0(v51, &qword_1EBBBF8A0);
  sub_1C3F8AFE8(v37, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  uint64_t v35 = (uint64_t)v53;
  uint64_t v19 = v46;
LABEL_16:
  sub_1C3F962E0(v35, &qword_1EA39BEE8);
LABEL_17:
  swift_release();
  swift_release();
  uint64_t v23 = (uint64_t)v55;
LABEL_18:
  sub_1C3F8AFE8(v23, type metadata accessor for Proto_Value);
  sub_1C3F8AFE8((uint64_t)v19, type metadata accessor for Proto_Value);
  return 0;
}

uint64_t sub_1C3FE7D24(uint64_t a1, uint64_t a2)
{
  return sub_1C3FE8734(a1, a2, type metadata accessor for Proto_CustomCRDT.Sibling, type metadata accessor for Proto_CustomCRDT.Sibling, sub_1C4402728, type metadata accessor for Proto_CustomCRDT.Sibling);
}

uint64_t sub_1C3FE7D78(uint64_t a1, uint64_t a2)
{
  __s1[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unint64_t *)(a1 + 40);
    uint64_t v4 = (unint64_t *)(a2 + 40);
    while (1)
    {
      uint64_t v6 = *(v3 - 1);
      unint64_t v5 = *v3;
      uint64_t v8 = *(v4 - 1);
      unint64_t v7 = *v4;
      unint64_t v9 = *v3 >> 62;
      v3 += 2;
      v4 += 2;
      uint64_t v10 = 0;
      switch(v9)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v6), v6))
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
          }
          uint64_t v10 = HIDWORD(v6) - (int)v6;
LABEL_13:
          sub_1C3F7E324(v6, v5);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v6 + 16);
          uint64_t v11 = *(void *)(v6 + 24);
          uint64_t v10 = v11 - v12;
          if (!__OFSUB__(v11, v12)) {
            goto LABEL_13;
          }
          goto LABEL_124;
        case 3uLL:
          break;
        default:
          uint64_t v10 = BYTE6(v5);
          break;
      }
      unint64_t v13 = v7 >> 62;
      switch(v7 >> 62)
      {
        case 1uLL:
          LODWORD(v14) = HIDWORD(v8) - v8;
          if (__OFSUB__(HIDWORD(v8), v8)) {
            goto LABEL_125;
          }
          uint64_t v14 = (int)v14;
LABEL_19:
          if (v10 != v14) {
            goto LABEL_121;
          }
          if (v10 < 1)
          {
LABEL_6:
            sub_1C3F7E2CC(v6, v5);
          }
          else
          {
            switch((int)v9)
            {
              case 1:
                char v76 = v3;
                if ((int)v6 > v6 >> 32) {
                  goto LABEL_127;
                }
                sub_1C3F7E324(v8, v7);
                uint64_t v23 = (char *)sub_1C4496298();
                if (!v23) {
                  goto LABEL_33;
                }
                uint64_t v24 = sub_1C44962C8();
                if (__OFSUB__((int)v6, v24)) {
                  goto LABEL_129;
                }
                v23 += (int)v6 - v24;
LABEL_33:
                sub_1C44962B8();
                if (!v13)
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v23) {
                    goto LABEL_157;
                  }
                  size_t v41 = BYTE6(v7);
                  uint64_t v40 = __s1;
                  char v39 = v23;
LABEL_103:
                  int v29 = memcmp(v39, v40, v41);
                  goto LABEL_104;
                }
                if (v13 == 1)
                {
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_138;
                  }
                  swift_retain();
                  uint64_t v25 = (char *)sub_1C4496298();
                  if (v25)
                  {
                    uint64_t v26 = sub_1C44962C8();
                    if (__OFSUB__((int)v8, v26)) {
                      goto LABEL_145;
                    }
                    v25 += (int)v8 - v26;
                  }
                  uint64_t v27 = sub_1C44962B8();
                  if (v27 >= (v8 >> 32) - (int)v8) {
                    size_t v28 = (v8 >> 32) - (int)v8;
                  }
                  else {
                    size_t v28 = v27;
                  }
                  if (!v23) {
                    goto LABEL_147;
                  }
                  if (!v25) {
                    goto LABEL_148;
                  }
                  int v29 = memcmp(v23, v25, v28);
                  sub_1C3F7E2CC(v8, v7);
                  goto LABEL_72;
                }
                uint64_t v67 = *(void *)(v8 + 16);
                uint64_t v74 = *(char **)(v8 + 24);
                swift_retain();
                swift_retain();
                uint64_t v68 = sub_1C4496298();
                if (v68)
                {
                  uint64_t v69 = sub_1C44962C8();
                  if (__OFSUB__(v67, v69)) {
                    goto LABEL_144;
                  }
                  v68 += v67 - v69;
                }
                if (__OFSUB__(v74, v67)) {
                  goto LABEL_139;
                }
                uint64_t v70 = sub_1C44962B8();
                if (v70 >= (uint64_t)&v74[-v67]) {
                  uint64_t v71 = &v74[-v67];
                }
                else {
                  uint64_t v71 = (char *)v70;
                }
                uint64_t v56 = v23;
                uint64_t v3 = v76;
                if (!v23) {
                  goto LABEL_158;
                }
                if (!v68) {
                  goto LABEL_159;
                }
                size_t v55 = (size_t)v71;
                uint64_t v57 = (const void *)v68;
LABEL_116:
                int v58 = memcmp(v56, v57, v55);
                swift_release();
                goto LABEL_117;
              case 2:
                uint64_t v77 = v3;
                uint64_t v30 = *(void *)(v6 + 16);
                sub_1C3F7E324(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v31 = sub_1C4496298();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = sub_1C44962C8();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_128;
                  }
                  uint64_t v73 = (void *)(v32 + v30 - v33);
                }
                else
                {
                  uint64_t v73 = 0;
                }
                sub_1C44962B8();
                uint64_t v3 = v77;
                if (v13)
                {
                  if (v13 == 1)
                  {
                    if (v8 >> 32 < (int)v8) {
                      goto LABEL_134;
                    }
                    swift_retain();
                    uint64_t v42 = (char *)sub_1C4496298();
                    if (v42)
                    {
                      uint64_t v43 = sub_1C44962C8();
                      if (__OFSUB__((int)v8, v43)) {
                        goto LABEL_143;
                      }
                      v42 += (int)v8 - v43;
                    }
                    uint64_t v44 = sub_1C44962B8();
                    if (v44 >= (v8 >> 32) - (int)v8) {
                      size_t v45 = (v8 >> 32) - (int)v8;
                    }
                    else {
                      size_t v45 = v44;
                    }
                    if (!v73) {
                      goto LABEL_150;
                    }
                    uint64_t v3 = v77;
                    if (!v42) {
                      goto LABEL_151;
                    }
                    int v29 = memcmp(v73, v42, v45);
                    sub_1C3F7E2CC(v8, v7);
                    swift_release();
                    swift_release();
LABEL_72:
                    sub_1C3F7E2CC(v8, v7);
LABEL_104:
                    sub_1C3F7E2CC(v6, v5);
                    if (v29) {
                      return 0;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(void *)(v8 + 16);
                    uint64_t v59 = *(void *)(v8 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v61 = (char *)sub_1C4496298();
                    if (v61)
                    {
                      uint64_t v62 = sub_1C44962C8();
                      if (__OFSUB__(v60, v62)) {
                        goto LABEL_142;
                      }
                      v61 += v60 - v62;
                    }
                    BOOL v17 = __OFSUB__(v59, v60);
                    int64_t v63 = v59 - v60;
                    if (v17) {
                      goto LABEL_137;
                    }
                    uint64_t v64 = sub_1C44962B8();
                    if (v64 >= v63) {
                      size_t v65 = v63;
                    }
                    else {
                      size_t v65 = v64;
                    }
                    uint64_t v3 = v77;
                    if (!v73) {
                      goto LABEL_155;
                    }
                    if (!v61) {
                      goto LABEL_156;
                    }
                    int v66 = memcmp(v73, v61, v65);
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    sub_1C3F7E2CC(v8, v7);
                    sub_1C3F7E2CC(v6, v5);
                    if (v66) {
                      return 0;
                    }
                  }
                }
                else
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v73) {
                    goto LABEL_154;
                  }
                  int v58 = memcmp(v73, __s1, BYTE6(v7));
                  swift_release();
LABEL_117:
                  swift_release();
                  sub_1C3F7E2CC(v8, v7);
                  sub_1C3F7E2CC(v6, v5);
                  if (v58) {
                    return 0;
                  }
                }
                break;
              case 3:
                memset(__s1, 0, 14);
                if (!v13) {
                  goto LABEL_58;
                }
                uint64_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_131;
                  }
                  sub_1C3F7E324(v8, v7);
                  uint64_t v34 = sub_1C4496298();
                  if (!v34) {
                    goto LABEL_149;
                  }
                  uint64_t v20 = v34;
                  uint64_t v35 = sub_1C44962C8();
                  uint64_t v22 = (int)v8 - v35;
                  if (__OFSUB__((int)v8, v35)) {
                    goto LABEL_133;
                  }
LABEL_53:
                  uint64_t v36 = sub_1C44962B8();
                  if (v36 >= v18) {
                    size_t v37 = v18;
                  }
                  else {
                    size_t v37 = v36;
                  }
                  int v38 = memcmp(__s1, (const void *)(v20 + v22), v37);
                  sub_1C3F7E2CC(v8, v7);
                  sub_1C3F7E2CC(v6, v5);
                  uint64_t v3 = v75;
                  if (v38) {
                    return 0;
                  }
                  break;
                }
                uint64_t v52 = *(void *)(v8 + 16);
                uint64_t v53 = *(void *)(v8 + 24);
                sub_1C3F7E324(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v48 = sub_1C4496298();
                if (v48)
                {
                  uint64_t v54 = sub_1C44962C8();
                  if (__OFSUB__(v52, v54)) {
                    goto LABEL_141;
                  }
                  v48 += v52 - v54;
                }
                BOOL v17 = __OFSUB__(v53, v52);
                int64_t v50 = v53 - v52;
                if (v17) {
                  goto LABEL_136;
                }
                uint64_t v51 = sub_1C44962B8();
                uint64_t v3 = v75;
                if (!v48) {
                  goto LABEL_153;
                }
LABEL_84:
                if (v51 >= v50) {
                  size_t v55 = v50;
                }
                else {
                  size_t v55 = v51;
                }
                uint64_t v56 = __s1;
                uint64_t v57 = (const void *)v48;
                goto LABEL_116;
              default:
                __s1[0] = v6;
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = BYTE4(v5);
                BYTE5(__s1[1]) = BYTE5(v5);
                if (!v13)
                {
LABEL_58:
                  uint64_t v78 = v8;
                  __int16 v79 = v7;
                  char v80 = BYTE2(v7);
                  char v81 = BYTE3(v7);
                  char v82 = BYTE4(v7);
                  char v83 = BYTE5(v7);
                  sub_1C3F7E324(v8, v7);
                  char v39 = __s1;
                  uint64_t v40 = &v78;
                  size_t v41 = BYTE6(v7);
                  goto LABEL_103;
                }
                uint64_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_130;
                  }
                  sub_1C3F7E324(v8, v7);
                  uint64_t v19 = sub_1C4496298();
                  if (!v19)
                  {
                    sub_1C44962B8();
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    sub_1C44962B8();
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
                    JUMPOUT(0x1C3FE86B0);
                  }
                  uint64_t v20 = v19;
                  uint64_t v21 = sub_1C44962C8();
                  uint64_t v22 = (int)v8 - v21;
                  if (__OFSUB__((int)v8, v21)) {
                    goto LABEL_132;
                  }
                  goto LABEL_53;
                }
                uint64_t v46 = *(void *)(v8 + 16);
                uint64_t v47 = *(void *)(v8 + 24);
                sub_1C3F7E324(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v48 = sub_1C4496298();
                if (v48)
                {
                  uint64_t v49 = sub_1C44962C8();
                  if (__OFSUB__(v46, v49)) {
                    goto LABEL_140;
                  }
                  v48 += v46 - v49;
                }
                BOOL v17 = __OFSUB__(v47, v46);
                int64_t v50 = v47 - v46;
                if (v17) {
                  goto LABEL_135;
                }
                uint64_t v51 = sub_1C44962B8();
                uint64_t v3 = v75;
                if (!v48) {
                  goto LABEL_152;
                }
                goto LABEL_84;
            }
          }
          if (!--v2) {
            return 1;
          }
          break;
        case 2uLL:
          uint64_t v16 = *(void *)(v8 + 16);
          uint64_t v15 = *(void *)(v8 + 24);
          BOOL v17 = __OFSUB__(v15, v16);
          uint64_t v14 = v15 - v16;
          if (!v17) {
            goto LABEL_19;
          }
          goto LABEL_126;
        case 3uLL:
          if (!v10) {
            goto LABEL_6;
          }
          sub_1C3F7E324(v8, v7);
LABEL_121:
          sub_1C3F7E2CC(v6, v5);
          return 0;
        default:
          uint64_t v14 = BYTE6(v7);
          goto LABEL_19;
      }
    }
  }
  return 1;
}

uint64_t sub_1C3FE86E0(uint64_t a1, uint64_t a2)
{
  return sub_1C3FE8734(a1, a2, type metadata accessor for Proto_Selection.Range, type metadata accessor for Proto_Selection.Range, (uint64_t (*)(uint64_t, uint64_t))sub_1C440E240, type metadata accessor for Proto_Selection.Range);
}

uint64_t sub_1C3FE8734(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t), uint64_t (*a6)(void))
{
  uint64_t v24 = a5;
  uint64_t v25 = a3(0);
  uint64_t v10 = MEMORY[0x1F4188790](v25);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v26 = a2;
  if (v16 == *(void *)(a2 + 16))
  {
    if (!v16 || a1 == v26) {
      return 1;
    }
    unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v23 = *(void *)(v13 + 72);
    while (1)
    {
      sub_1C3FF29B0(a1 + v17, (uint64_t)v15, a4);
      sub_1C3FF29B0(v26 + v17, (uint64_t)v12, a4);
      uint64_t v18 = *(int *)(v25 + 20);
      uint64_t v19 = *(void *)&v15[v18];
      uint64_t v20 = *(void *)&v12[v18];
      if (v19 != v20)
      {
        swift_retain();
        swift_retain();
        char v21 = v24(v19, v20);
        swift_release();
        swift_release();
        if ((v21 & 1) == 0) {
          break;
        }
      }
      sub_1C4496898();
      sub_1C3FF2968(&qword_1EA39BEF0, MEMORY[0x1E4F70E60]);
      if ((sub_1C4497178() & 1) == 0) {
        break;
      }
      sub_1C3F8AFE8((uint64_t)v12, a6);
      sub_1C3F8AFE8((uint64_t)v15, a6);
      v17 += v23;
      if (!--v16) {
        return 1;
      }
    }
    sub_1C3F8AFE8((uint64_t)v12, a6);
    sub_1C3F8AFE8((uint64_t)v15, a6);
  }
  return 0;
}

uint64_t sub_1C3FE897C(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_1C44982E8(), uint64_t result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    unint64_t v9 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_1C44982E8() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C3FE8A44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BEF8);
  MEMORY[0x1F4188790](v50);
  unint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v51 = (uint64_t)&v41 - v14;
  uint64_t v54 = type metadata accessor for Proto_CRDT(0);
  uint64_t v15 = MEMORY[0x1F4188790](v54);
  size_t v55 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = *(void *)(a1 + 16);
  if (v20 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v20 || a1 == a2) {
    return 1;
  }
  uint64_t v42 = v7;
  uint64_t v43 = v13;
  unint64_t v21 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v22 = *(void *)(v17 + 72);
  uint64_t v48 = v4;
  uint64_t v49 = v22;
  uint64_t v46 = (char *)&v41 - v18;
  uint64_t v47 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v53 = v9;
  uint64_t v23 = (uint64_t)v55;
  uint64_t v24 = v51;
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  while (1)
  {
    sub_1C3FF29B0(a1 + v21, (uint64_t)v19, type metadata accessor for Proto_CRDT);
    sub_1C3FF29B0(a2 + v21, v23, type metadata accessor for Proto_CRDT);
    uint64_t v25 = *(int *)(v54 + 20);
    uint64_t v26 = *(void *)&v19[v25];
    uint64_t v27 = *(void *)(v23 + v25);
    if (v26 == v27) {
      goto LABEL_12;
    }
    uint64_t v28 = v26 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    uint64_t v52 = *(void *)&v19[v25];
    swift_beginAccess();
    sub_1C3F970C4(v28, v24, &qword_1EBBC0648);
    uint64_t v29 = v27 + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v30 = (uint64_t)v53;
    uint64_t v31 = (uint64_t)&v53[*(int *)(v50 + 48)];
    sub_1C3F970C4(v24, (uint64_t)v53, &qword_1EBBC0648);
    sub_1C3F970C4(v29, v31, &qword_1EBBC0648);
    uint64_t v32 = *v47;
    uint64_t v33 = v24;
    uint64_t v34 = v48;
    if ((*v47)(v30, 1, v48) == 1)
    {
      swift_retain();
      uint64_t v35 = (uint64_t)v53;
      swift_retain();
      sub_1C3F962E0(v33, &qword_1EBBC0648);
      int v36 = v32(v31, 1, v34);
      uint64_t v19 = v46;
      if (v36 != 1) {
        goto LABEL_16;
      }
      sub_1C3F962E0(v35, &qword_1EBBC0648);
      uint64_t v24 = v51;
      goto LABEL_11;
    }
    uint64_t v37 = (uint64_t)v43;
    sub_1C3F970C4(v30, (uint64_t)v43, &qword_1EBBC0648);
    if (v32(v31, 1, v34) == 1) {
      break;
    }
    uint64_t v38 = (uint64_t)v42;
    sub_1C3F8AB08(v31, (uint64_t)v42, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    swift_retain();
    swift_retain();
    char v39 = sub_1C43F23A4(v37, v38);
    sub_1C3F8AFE8(v38, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    uint64_t v24 = v51;
    sub_1C3F962E0(v51, &qword_1EBBC0648);
    sub_1C3F8AFE8(v37, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    sub_1C3F962E0((uint64_t)v53, &qword_1EBBC0648);
    uint64_t v19 = v46;
    if ((v39 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_11:
    swift_release();
    swift_release();
    a1 = v44;
    a2 = v45;
LABEL_12:
    sub_1C4496898();
    sub_1C3FF2968(&qword_1EA39BEF0, MEMORY[0x1E4F70E60]);
    uint64_t v23 = (uint64_t)v55;
    if ((sub_1C4497178() & 1) == 0) {
      goto LABEL_18;
    }
    sub_1C3F8AFE8(v23, type metadata accessor for Proto_CRDT);
    sub_1C3F8AFE8((uint64_t)v19, type metadata accessor for Proto_CRDT);
    v21 += v49;
    if (!--v20) {
      return 1;
    }
  }
  swift_retain();
  swift_retain();
  sub_1C3F962E0(v51, &qword_1EBBC0648);
  sub_1C3F8AFE8(v37, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
  uint64_t v35 = (uint64_t)v53;
  uint64_t v19 = v46;
LABEL_16:
  sub_1C3F962E0(v35, &qword_1EA39BEF8);
LABEL_17:
  swift_release();
  swift_release();
  uint64_t v23 = (uint64_t)v55;
LABEL_18:
  sub_1C3F8AFE8(v23, type metadata accessor for Proto_CRDT);
  sub_1C3F8AFE8((uint64_t)v19, type metadata accessor for Proto_CRDT);
  return 0;
}

uint64_t sub_1C3FE903C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_RLE(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v20 = 1;
      return v20 & 1;
    }
    uint64_t v12 = 0;
    unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v29 = a1 + v13;
    uint64_t v14 = a2 + v13;
    uint64_t v15 = *(void *)(v8 + 72);
    while (1)
    {
      sub_1C3FF29B0(v29 + v15 * v12, (uint64_t)v10, type metadata accessor for Proto_RLE);
      sub_1C3FF29B0(v14 + v15 * v12, (uint64_t)v7, type metadata accessor for Proto_RLE);
      uint64_t v16 = *(void **)v10;
      uint64_t v17 = *(void **)v7;
      uint64_t v18 = *(void *)(*(void *)v10 + 16);
      if (v18 != *(void *)(*(void *)v7 + 16)) {
        break;
      }
      if (v18) {
        BOOL v19 = v16 == v17;
      }
      else {
        BOOL v19 = 1;
      }
      if (!v19)
      {
        if (v16[4] != v17[4]) {
          break;
        }
        if (v18 != 1)
        {
          if (v16[5] != v17[5]) {
            break;
          }
          unint64_t v21 = v16 + 6;
          uint64_t v22 = v17 + 6;
          uint64_t v23 = v18 - 2;
          while (v23)
          {
            uint64_t v25 = *v21++;
            uint64_t v24 = v25;
            uint64_t v26 = *v22++;
            --v23;
            if (v24 != v26) {
              goto LABEL_19;
            }
          }
        }
      }
      sub_1C4496898();
      sub_1C3FF2968(&qword_1EA39BEF0, MEMORY[0x1E4F70E60]);
      char v20 = sub_1C4497178();
      sub_1C3F8AFE8((uint64_t)v7, type metadata accessor for Proto_RLE);
      sub_1C3F8AFE8((uint64_t)v10, type metadata accessor for Proto_RLE);
      if ((v20 & 1) != 0 && ++v12 != v11) {
        continue;
      }
      return v20 & 1;
    }
LABEL_19:
    sub_1C3F8AFE8((uint64_t)v7, type metadata accessor for Proto_RLE);
    sub_1C3F8AFE8((uint64_t)v10, type metadata accessor for Proto_RLE);
  }
  char v20 = 0;
  return v20 & 1;
}

uint64_t sub_1C3FE92EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto4_Reference(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_1C3FF29B0(a1 + v12, (uint64_t)v10, type metadata accessor for Proto4_Reference);
        sub_1C3FF29B0(a2 + v12, (uint64_t)v7, type metadata accessor for Proto4_Reference);
        sub_1C3FF2968(&qword_1EA39BE98, (void (*)(uint64_t))type metadata accessor for Proto4_Reference);
        char v15 = sub_1C4497178();
        sub_1C3F8AFE8((uint64_t)v7, type metadata accessor for Proto4_Reference);
        sub_1C3F8AFE8((uint64_t)v10, type metadata accessor for Proto4_Reference);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1C3FE94D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto4_Value(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_1C3FF29B0(a1 + v12, (uint64_t)v10, type metadata accessor for Proto4_Value);
        sub_1C3FF29B0(a2 + v12, (uint64_t)v7, type metadata accessor for Proto4_Value);
        sub_1C3FF2968(&qword_1EA39BEA0, (void (*)(uint64_t))type metadata accessor for Proto4_Value);
        char v15 = sub_1C4497178();
        sub_1C3F8AFE8((uint64_t)v7, type metadata accessor for Proto4_Value);
        sub_1C3F8AFE8((uint64_t)v10, type metadata accessor for Proto4_Value);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1C3FE96B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto4_Version.Seen(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_1C3FF29B0(a1 + v12, (uint64_t)v10, type metadata accessor for Proto4_Version.Seen);
        sub_1C3FF29B0(a2 + v12, (uint64_t)v7, type metadata accessor for Proto4_Version.Seen);
        sub_1C3FF2968(&qword_1EA39BEA8, (void (*)(uint64_t))type metadata accessor for Proto4_Version.Seen);
        char v15 = sub_1C4497178();
        sub_1C3F8AFE8((uint64_t)v7, type metadata accessor for Proto4_Version.Seen);
        sub_1C3F8AFE8((uint64_t)v10, type metadata accessor for Proto4_Version.Seen);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1C3FE9898(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto4_Set.Element(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_1C3FF29B0(a1 + v12, (uint64_t)v10, type metadata accessor for Proto4_Set.Element);
        sub_1C3FF29B0(a2 + v12, (uint64_t)v7, type metadata accessor for Proto4_Set.Element);
        sub_1C3FF2968(&qword_1EA39BEB0, (void (*)(uint64_t))type metadata accessor for Proto4_Set.Element);
        char v15 = sub_1C4497178();
        sub_1C3F8AFE8((uint64_t)v7, type metadata accessor for Proto4_Set.Element);
        sub_1C3F8AFE8((uint64_t)v10, type metadata accessor for Proto4_Set.Element);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1C3FE9A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto4_Struct.Field(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_1C3FF29B0(a1 + v12, (uint64_t)v10, type metadata accessor for Proto4_Struct.Field);
        sub_1C3FF29B0(a2 + v12, (uint64_t)v7, type metadata accessor for Proto4_Struct.Field);
        sub_1C3FF2968(&qword_1EA39BEB8, (void (*)(uint64_t))type metadata accessor for Proto4_Struct.Field);
        char v15 = sub_1C4497178();
        sub_1C3F8AFE8((uint64_t)v7, type metadata accessor for Proto4_Struct.Field);
        sub_1C3F8AFE8((uint64_t)v10, type metadata accessor for Proto4_Struct.Field);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1C3FE9C60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto4_CustomCRDT.Sibling(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_1C3FF29B0(a1 + v12, (uint64_t)v10, type metadata accessor for Proto4_CustomCRDT.Sibling);
        sub_1C3FF29B0(a2 + v12, (uint64_t)v7, type metadata accessor for Proto4_CustomCRDT.Sibling);
        sub_1C3FF2968(&qword_1EA39BEC0, (void (*)(uint64_t))type metadata accessor for Proto4_CustomCRDT.Sibling);
        char v15 = sub_1C4497178();
        sub_1C3F8AFE8((uint64_t)v7, type metadata accessor for Proto4_CustomCRDT.Sibling);
        sub_1C3F8AFE8((uint64_t)v10, type metadata accessor for Proto4_CustomCRDT.Sibling);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1C3FE9E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto4_CRDT(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_1C3FF29B0(a1 + v12, (uint64_t)v10, type metadata accessor for Proto4_CRDT);
        sub_1C3FF29B0(a2 + v12, (uint64_t)v7, type metadata accessor for Proto4_CRDT);
        sub_1C3FF2968(&qword_1EA39BED0, (void (*)(uint64_t))type metadata accessor for Proto4_CRDT);
        char v15 = sub_1C4497178();
        sub_1C3F8AFE8((uint64_t)v7, type metadata accessor for Proto4_CRDT);
        sub_1C3F8AFE8((uint64_t)v10, type metadata accessor for Proto4_CRDT);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1C3FEA028(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto4_Subsequence(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_1C3FF29B0(a1 + v12, (uint64_t)v10, type metadata accessor for Proto4_Subsequence);
        sub_1C3FF29B0(a2 + v12, (uint64_t)v7, type metadata accessor for Proto4_Subsequence);
        sub_1C3FF2968(&qword_1EA39BEC8, (void (*)(uint64_t))type metadata accessor for Proto4_Subsequence);
        char v15 = sub_1C4497178();
        sub_1C3F8AFE8((uint64_t)v7, type metadata accessor for Proto4_Subsequence);
        sub_1C3F8AFE8((uint64_t)v10, type metadata accessor for Proto4_Subsequence);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1C3FEA20C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto4_IndexedTimestamp(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_1C3FF29B0(a1 + v12, (uint64_t)v10, type metadata accessor for Proto4_IndexedTimestamp);
        sub_1C3FF29B0(a2 + v12, (uint64_t)v7, type metadata accessor for Proto4_IndexedTimestamp);
        sub_1C3FF2968(&qword_1EA39BED8, (void (*)(uint64_t))type metadata accessor for Proto4_IndexedTimestamp);
        char v15 = sub_1C4497178();
        sub_1C3F8AFE8((uint64_t)v7, type metadata accessor for Proto4_IndexedTimestamp);
        sub_1C3F8AFE8((uint64_t)v10, type metadata accessor for Proto4_IndexedTimestamp);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

BOOL sub_1C3FEA3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (int *)(a1 + 36);
  uint64_t v6 = (int *)(a2 + 36);
  do
  {
    int v8 = *v5++;
    int v7 = v8;
    int v10 = *v6++;
    int v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t sub_1C3FEA464(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto4_Selection.Range(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  int v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  int v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_1C3FF29B0(a1 + v12, (uint64_t)v10, type metadata accessor for Proto4_Selection.Range);
        sub_1C3FF29B0(a2 + v12, (uint64_t)v7, type metadata accessor for Proto4_Selection.Range);
        sub_1C3FF2968(&qword_1EA39BEE0, (void (*)(uint64_t))type metadata accessor for Proto4_Selection.Range);
        char v15 = sub_1C4497178();
        sub_1C3F8AFE8((uint64_t)v7, type metadata accessor for Proto4_Selection.Range);
        sub_1C3F8AFE8((uint64_t)v10, type metadata accessor for Proto4_Selection.Range);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1C3FEA648(uint64_t a1, uint64_t a2)
{
  __s1[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int v7 = (char *)&v143 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BEE8);
  MEMORY[0x1F4188790](v159);
  uint64_t v9 = (char *)&v143 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v143 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  char v15 = (char *)&v143 - v14;
  uint64_t v16 = type metadata accessor for Proto_Value(0);
  uint64_t v151 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v164 = (uint64_t)&v143 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v166 = (uint64_t)&v143 - v19;
  uint64_t v20 = type metadata accessor for Proto_KeyPath(0);
  uint64_t v21 = MEMORY[0x1F4188790](v20);
  uint64_t v161 = (uint64_t)&v143 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v160 = (uint64_t)&v143 - v25;
  uint64_t v26 = *(void *)(a1 + 16);
  if (v26 != *(void *)(a2 + 16)) {
    goto LABEL_143;
  }
  if (!v26 || a1 == a2)
  {
    char v141 = 1;
    return v141 & 1;
  }
  uint64_t v145 = v23;
  uint64_t v157 = v15;
  uint64_t v150 = v13;
  uint64_t v149 = v7;
  uint64_t v155 = v4;
  uint64_t v27 = 0;
  unint64_t v28 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v148 = a1 + v28;
  uint64_t v147 = a2 + v28;
  uint64_t v146 = *(void *)(v24 + 72);
  int v154 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v144 = v26;
  uint64_t v152 = v16;
  while (1)
  {
    uint64_t v156 = v27;
    uint64_t v29 = v146 * v27;
    uint64_t v30 = v160;
    sub_1C3FF29B0(v148 + v146 * v27, v160, type metadata accessor for Proto_KeyPath);
    uint64_t v31 = v147 + v29;
    uint64_t v32 = (void **)v161;
    sub_1C3FF29B0(v31, v161, type metadata accessor for Proto_KeyPath);
    uint64_t v33 = *(void **)v30;
    uint64_t v34 = *v32;
    uint64_t v35 = (char *)v34[2];
    uint64_t v163 = *(char **)(*(void *)v30 + 16);
    if (v163 != v35) {
      goto LABEL_142;
    }
    if (v163 && v33 != v34) {
      break;
    }
LABEL_19:
    uint64_t v55 = *(void *)(v160 + 8);
    unint64_t v56 = *(void *)(v160 + 16);
    uint64_t v58 = *(void *)(v161 + 8);
    unint64_t v57 = *(void *)(v161 + 16);
    uint64_t v59 = 0;
    switch(v56 >> 62)
    {
      case 1uLL:
        LODWORD(v59) = HIDWORD(v55) - v55;
        if (__OFSUB__(HIDWORD(v55), v55)) {
          goto LABEL_146;
        }
        uint64_t v59 = (int)v59;
LABEL_24:
        unint64_t v63 = v57 >> 62;
        ++v156;
        switch(v57 >> 62)
        {
          case 1uLL:
            LODWORD(v64) = HIDWORD(v58) - v58;
            if (__OFSUB__(HIDWORD(v58), v58)) {
              goto LABEL_148;
            }
            uint64_t v64 = (int)v64;
LABEL_29:
            if (v59 != v64) {
              goto LABEL_142;
            }
            if (v59 < 1) {
              goto LABEL_135;
            }
            break;
          case 2uLL:
            uint64_t v66 = *(void *)(v58 + 16);
            uint64_t v65 = *(void *)(v58 + 24);
            BOOL v62 = __OFSUB__(v65, v66);
            uint64_t v64 = v65 - v66;
            if (!v62) {
              goto LABEL_29;
            }
            goto LABEL_149;
          case 3uLL:
            if (v59) {
              goto LABEL_142;
            }
            goto LABEL_135;
          default:
            uint64_t v64 = BYTE6(v57);
            goto LABEL_29;
        }
        break;
      case 2uLL:
        uint64_t v61 = *(void *)(v55 + 16);
        uint64_t v60 = *(void *)(v55 + 24);
        BOOL v62 = __OFSUB__(v60, v61);
        uint64_t v59 = v60 - v61;
        if (!v62) {
          goto LABEL_24;
        }
        goto LABEL_147;
      case 3uLL:
        goto LABEL_24;
      default:
        uint64_t v59 = BYTE6(v56);
        goto LABEL_24;
    }
    switch(v56 >> 62)
    {
      case 1uLL:
        uint64_t v73 = (int)v55;
        if ((int)v55 > v55 >> 32) {
          goto LABEL_150;
        }
        unint64_t v74 = v57;
        uint64_t v165 = v55;
        sub_1C3F7E324(v55, v56);
        uint64_t v75 = (char *)sub_1C4496298();
        if (!v75) {
          goto LABEL_45;
        }
        uint64_t v76 = sub_1C44962C8();
        if (__OFSUB__(v73, v76)) {
          goto LABEL_152;
        }
        v75 += v73 - v76;
LABEL_45:
        sub_1C44962B8();
        if (v63)
        {
          uint64_t v158 = v58;
          if (v63 == 1)
          {
            uint64_t v163 = v75;
            uint64_t v77 = (v58 >> 32) - (int)v58;
            if (v58 >> 32 < (int)v58) {
              goto LABEL_161;
            }
            swift_retain();
            uint64_t v78 = sub_1C4496298();
            if (v78)
            {
              uint64_t v79 = v78;
              uint64_t v80 = sub_1C44962C8();
              if (__OFSUB__((int)v58, v80)) {
                goto LABEL_168;
              }
              char v81 = (const void *)(v79 + (int)v58 - v80);
            }
            else
            {
              char v81 = 0;
            }
            uint64_t v136 = v158;
            uint64_t v137 = sub_1C44962B8();
            if (v137 >= v77) {
              size_t v138 = v77;
            }
            else {
              size_t v138 = v137;
            }
            if (!v163) {
              goto LABEL_180;
            }
            if (!v81) {
              goto LABEL_181;
            }
            int v97 = memcmp(v163, v81, v138);
            sub_1C3F7E2CC(v136, v74);
          }
          else
          {
            unint64_t v120 = v75;
            uint64_t v121 = *(void *)(v58 + 16);
            uint64_t v122 = *(void *)(v58 + 24);
            swift_retain();
            swift_retain();
            uint64_t v123 = sub_1C4496298();
            if (v123)
            {
              uint64_t v124 = v123;
              uint64_t v125 = sub_1C44962C8();
              if (__OFSUB__(v121, v125)) {
                goto LABEL_167;
              }
              unsigned int v126 = (const void *)(v124 + v121 - v125);
            }
            else
            {
              unsigned int v126 = 0;
            }
            if (__OFSUB__(v122, v121)) {
              goto LABEL_162;
            }
            uint64_t v134 = sub_1C44962B8();
            if (v134 >= v122 - v121) {
              size_t v135 = v122 - v121;
            }
            else {
              size_t v135 = v134;
            }
            if (!v120) {
              goto LABEL_178;
            }
            if (!v126) {
              goto LABEL_179;
            }
            int v97 = memcmp(v120, v126, v135);
            swift_release();
            swift_release();
          }
        }
        else
        {
          __s1[0] = v58;
          LOWORD(__s1[1]) = v74;
          BYTE2(__s1[1]) = BYTE2(v74);
          BYTE3(__s1[1]) = BYTE3(v74);
          BYTE4(__s1[1]) = BYTE4(v74);
          BYTE5(__s1[1]) = BYTE5(v74);
          if (!v75) {
            goto LABEL_173;
          }
          int v97 = memcmp(v75, __s1, BYTE6(v74));
        }
        uint64_t v98 = v165;
        unint64_t v99 = v56;
LABEL_134:
        sub_1C3F7E2CC(v98, v99);
        if (v97) {
          goto LABEL_142;
        }
LABEL_135:
        uint64_t v140 = v160;
        uint64_t v139 = v161;
        sub_1C4496898();
        sub_1C3FF2968(&qword_1EA39BEF0, MEMORY[0x1E4F70E60]);
        char v141 = sub_1C4497178();
        sub_1C3F8AFE8(v139, type metadata accessor for Proto_KeyPath);
        sub_1C3F8AFE8(v140, type metadata accessor for Proto_KeyPath);
        if ((v141 & 1) == 0) {
          return v141 & 1;
        }
        uint64_t v27 = v156;
        if (v156 == v144) {
          return v141 & 1;
        }
        break;
      case 2uLL:
        unint64_t v82 = v57;
        char v83 = (char *)(v56 & 0x3FFFFFFFFFFFFFFFLL);
        uint64_t v84 = *(void *)(v55 + 16);
        uint64_t v165 = v55;
        swift_retain();
        swift_retain();
        uint64_t v85 = sub_1C4496298();
        if (v85)
        {
          uint64_t v86 = v85;
          uint64_t v87 = sub_1C44962C8();
          if (__OFSUB__(v84, v87)) {
            goto LABEL_151;
          }
          uint64_t v88 = (const void *)(v86 + v84 - v87);
          sub_1C44962B8();
          if (!v63)
          {
LABEL_71:
            __s1[0] = v58;
            LOWORD(__s1[1]) = v82;
            BYTE2(__s1[1]) = BYTE2(v82);
            BYTE3(__s1[1]) = BYTE3(v82);
            BYTE4(__s1[1]) = BYTE4(v82);
            BYTE5(__s1[1]) = BYTE5(v82);
            if (!v88) {
              goto LABEL_171;
            }
            int v100 = memcmp(v88, __s1, BYTE6(v82));
            goto LABEL_115;
          }
        }
        else
        {
          uint64_t v88 = 0;
          sub_1C44962B8();
          if (!v63) {
            goto LABEL_71;
          }
        }
        uint64_t v162 = v88;
        uint64_t v163 = v83;
        if (v63 == 1)
        {
          if (v58 >> 32 < (int)v58) {
            goto LABEL_155;
          }
          swift_retain();
          uint64_t v89 = sub_1C4496298();
          if (v89)
          {
            uint64_t v90 = v89;
            uint64_t v91 = sub_1C44962C8();
            if (__OFSUB__((int)v58, v91)) {
              goto LABEL_166;
            }
            long long v92 = (const void *)(v90 + (int)v58 - v91);
          }
          else
          {
            long long v92 = 0;
          }
          uint64_t v132 = sub_1C44962B8();
          if (v132 >= (v58 >> 32) - (int)v58) {
            size_t v133 = (v58 >> 32) - (int)v58;
          }
          else {
            size_t v133 = v132;
          }
          if (!v162) {
            goto LABEL_182;
          }
          if (!v92) {
            goto LABEL_177;
          }
          int v100 = memcmp(v162, v92, v133);
          sub_1C3F7E2CC(v58, v82);
        }
        else
        {
          uint64_t v114 = *(void *)(v58 + 16);
          uint64_t v115 = *(void *)(v58 + 24);
          swift_retain();
          swift_retain();
          uint64_t v116 = sub_1C4496298();
          if (v116)
          {
            uint64_t v117 = v116;
            uint64_t v118 = sub_1C44962C8();
            if (__OFSUB__(v114, v118)) {
              goto LABEL_165;
            }
            uint64_t v119 = (const void *)(v117 + v114 - v118);
          }
          else
          {
            uint64_t v119 = 0;
          }
          BOOL v62 = __OFSUB__(v115, v114);
          int64_t v129 = v115 - v114;
          if (v62) {
            goto LABEL_160;
          }
          uint64_t v130 = sub_1C44962B8();
          if (v130 >= v129) {
            size_t v131 = v129;
          }
          else {
            size_t v131 = v130;
          }
          if (!v162) {
            goto LABEL_175;
          }
          if (!v119) {
            goto LABEL_176;
          }
          int v100 = memcmp(v162, v119, v131);
          swift_release();
          swift_release();
        }
LABEL_115:
        swift_release();
LABEL_116:
        swift_release();
        if (v100) {
          goto LABEL_142;
        }
        goto LABEL_135;
      case 3uLL:
        memset(__s1, 0, 14);
        if (!v63) {
          goto LABEL_68;
        }
        if (v63 == 1)
        {
          uint64_t v67 = (v58 >> 32) - (int)v58;
          if (v58 >> 32 < (int)v58) {
            goto LABEL_154;
          }
          unint64_t v68 = v57;
          swift_retain();
          uint64_t v93 = sub_1C4496298();
          if (!v93) {
            goto LABEL_170;
          }
          uint64_t v70 = v93;
          uint64_t v94 = sub_1C44962C8();
          uint64_t v72 = (int)v58 - v94;
          if (__OFSUB__((int)v58, v94)) {
            goto LABEL_159;
          }
LABEL_64:
          uint64_t v95 = sub_1C44962B8();
          if (v95 >= v67) {
            size_t v96 = v67;
          }
          else {
            size_t v96 = v95;
          }
          int v97 = memcmp(__s1, (const void *)(v70 + v72), v96);
          uint64_t v98 = v58;
          unint64_t v99 = v68;
          goto LABEL_134;
        }
        uint64_t v107 = *(void *)(v58 + 16);
        uint64_t v108 = *(void *)(v58 + 24);
        swift_retain();
        swift_retain();
        unint64_t v109 = (char *)sub_1C4496298();
        if (v109)
        {
          uint64_t v110 = sub_1C44962C8();
          if (__OFSUB__(v107, v110)) {
            goto LABEL_164;
          }
          v109 += v107 - v110;
        }
        BOOL v62 = __OFSUB__(v108, v107);
        int64_t v111 = v108 - v107;
        if (v62) {
          goto LABEL_156;
        }
        uint64_t v112 = sub_1C44962B8();
        if (!v109) {
          goto LABEL_172;
        }
        if (v112 >= v111) {
          size_t v113 = v111;
        }
        else {
          size_t v113 = v112;
        }
        int v100 = memcmp(__s1, v109, v113);
        goto LABEL_115;
      default:
        __s1[0] = v55;
        LOWORD(__s1[1]) = v56;
        BYTE2(__s1[1]) = BYTE2(v56);
        BYTE3(__s1[1]) = BYTE3(v56);
        BYTE4(__s1[1]) = BYTE4(v56);
        BYTE5(__s1[1]) = BYTE5(v56);
        if (!v63)
        {
LABEL_68:
          uint64_t __s2 = v58;
          __int16 v168 = v57;
          char v169 = BYTE2(v57);
          char v170 = BYTE3(v57);
          char v171 = BYTE4(v57);
          char v172 = BYTE5(v57);
          if (memcmp(__s1, &__s2, BYTE6(v57))) {
            goto LABEL_142;
          }
          goto LABEL_135;
        }
        if (v63 == 1)
        {
          uint64_t v67 = (v58 >> 32) - (int)v58;
          if (v58 >> 32 < (int)v58) {
            goto LABEL_153;
          }
          unint64_t v68 = v57;
          swift_retain();
          uint64_t v69 = sub_1C4496298();
          if (!v69)
          {
            sub_1C44962B8();
            __break(1u);
LABEL_170:
            sub_1C44962B8();
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
LABEL_176:
            __break(1u);
LABEL_177:
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
LABEL_182:
            __break(1u);
            JUMPOUT(0x1C3FEB740);
          }
          uint64_t v70 = v69;
          uint64_t v71 = sub_1C44962C8();
          uint64_t v72 = (int)v58 - v71;
          if (__OFSUB__((int)v58, v71)) {
            goto LABEL_158;
          }
          goto LABEL_64;
        }
        uint64_t v101 = *(void *)(v58 + 16);
        uint64_t v102 = *(void *)(v58 + 24);
        swift_retain();
        swift_retain();
        uint64_t v103 = sub_1C4496298();
        if (v103)
        {
          uint64_t v104 = v103;
          uint64_t v105 = sub_1C44962C8();
          if (__OFSUB__(v101, v105)) {
            goto LABEL_163;
          }
          uint64_t v106 = (const void *)(v104 + v101 - v105);
        }
        else
        {
          uint64_t v106 = 0;
        }
        if (__OFSUB__(v102, v101)) {
          goto LABEL_157;
        }
        uint64_t v127 = sub_1C44962B8();
        if (!v106) {
          goto LABEL_174;
        }
        if (v127 >= v102 - v101) {
          size_t v128 = v102 - v101;
        }
        else {
          size_t v128 = v127;
        }
        int v100 = memcmp(__s1, v106, v128);
        swift_release();
        goto LABEL_116;
    }
  }
  int v36 = 0;
  unint64_t v37 = (*(unsigned __int8 *)(v151 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80);
  uint64_t v158 = *(void *)(v151 + 72);
  uint64_t v153 = v33;
  uint64_t v162 = v34;
  while (1)
  {
    sub_1C3FF29B0((uint64_t)v33 + v37, v166, type metadata accessor for Proto_Value);
    if ((unint64_t)v36 >= v34[2])
    {
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
    }
    uint64_t v38 = v164;
    sub_1C3FF29B0((uint64_t)v34 + v37, v164, type metadata accessor for Proto_Value);
    uint64_t v39 = *(int *)(v16 + 20);
    uint64_t v40 = *(void *)(v38 + v39);
    uint64_t v165 = *(void *)(v166 + v39);
    if (v165 != v40) {
      break;
    }
LABEL_17:
    sub_1C4496898();
    sub_1C3FF2968(&qword_1EA39BEF0, MEMORY[0x1E4F70E60]);
    uint64_t v52 = v166;
    uint64_t v53 = v164;
    char v54 = sub_1C4497178();
    sub_1C3F8AFE8(v53, type metadata accessor for Proto_Value);
    sub_1C3F8AFE8(v52, type metadata accessor for Proto_Value);
    uint64_t v34 = v162;
    if ((v54 & 1) == 0) {
      goto LABEL_142;
    }
    ++v36;
    v37 += v158;
    if (v163 == v36) {
      goto LABEL_19;
    }
  }
  uint64_t v41 = v165 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v42 = (uint64_t)v157;
  sub_1C3F970C4(v41, (uint64_t)v157, &qword_1EBBBF8A0);
  uint64_t v43 = v40 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v44 = (uint64_t)&v9[*(int *)(v159 + 48)];
  sub_1C3F970C4(v42, (uint64_t)v9, &qword_1EBBBF8A0);
  sub_1C3F970C4(v43, v44, &qword_1EBBBF8A0);
  uint64_t v45 = *v154;
  uint64_t v46 = v9;
  uint64_t v47 = (uint64_t)v9;
  uint64_t v48 = v155;
  if ((*v154)(v46, 1, v155) == 1)
  {
    swift_retain();
    swift_retain();
    sub_1C3F962E0(v42, &qword_1EBBBF8A0);
    if (v45((char *)v44, 1, v48) != 1) {
      goto LABEL_140;
    }
    uint64_t v9 = (char *)v47;
    sub_1C3F962E0(v47, &qword_1EBBBF8A0);
LABEL_16:
    swift_release();
    swift_release();
    uint64_t v16 = v152;
    uint64_t v33 = v153;
    goto LABEL_17;
  }
  uint64_t v49 = (uint64_t)v150;
  sub_1C3F970C4(v47, (uint64_t)v150, &qword_1EBBBF8A0);
  if (v45((char *)v44, 1, v48) != 1)
  {
    uint64_t v50 = (uint64_t)v149;
    sub_1C3F8AB08(v44, (uint64_t)v149, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    swift_retain();
    swift_retain();
    char v51 = sub_1C43F23A0(v49, v50);
    sub_1C3F8AFE8(v50, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    sub_1C3F962E0((uint64_t)v157, &qword_1EBBBF8A0);
    sub_1C3F8AFE8(v49, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    sub_1C3F962E0(v47, &qword_1EBBBF8A0);
    uint64_t v9 = (char *)v47;
    if ((v51 & 1) == 0) {
      goto LABEL_141;
    }
    goto LABEL_16;
  }
  swift_retain();
  swift_retain();
  sub_1C3F962E0((uint64_t)v157, &qword_1EBBBF8A0);
  sub_1C3F8AFE8(v49, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
LABEL_140:
  sub_1C3F962E0(v47, &qword_1EA39BEE8);
LABEL_141:
  swift_release();
  swift_release();
  sub_1C3F8AFE8(v164, type metadata accessor for Proto_Value);
  sub_1C3F8AFE8(v166, type metadata accessor for Proto_Value);
LABEL_142:
  sub_1C3F8AFE8(v161, type metadata accessor for Proto_KeyPath);
  sub_1C3F8AFE8(v160, type metadata accessor for Proto_KeyPath);
LABEL_143:
  char v141 = 0;
  return v141 & 1;
}

uint64_t sub_1C3FEB770(uint64_t a1, uint64_t a2)
{
  return sub_1C3FECA58(a1, a2, type metadata accessor for Proto_Reference, type metadata accessor for Proto_Reference, (uint64_t (*)(uint64_t, uint64_t))sub_1C43FEB3C, type metadata accessor for Proto_Reference);
}

uint64_t sub_1C3FEB7C4(uint64_t a1, uint64_t a2)
{
  __s1[2] = *MEMORY[0x1E4F143B8];
  uint64_t v143 = type metadata accessor for Proto_Asset(0);
  uint64_t v4 = MEMORY[0x1F4188790](v143);
  uint64_t v6 = (void *)((char *)v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v4);
  uint64_t v9 = (void *)((char *)v138 - v8);
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 != *(void *)(a2 + 16))
  {
LABEL_229:
    char v136 = 0;
    return v136 & 1;
  }
  if (v10 && a1 != a2)
  {
    unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v12 = *(void *)(v7 + 72);
    uint64_t v140 = a2;
    uint64_t v141 = v12;
    uint64_t v13 = v10 - 1;
    uint64_t v142 = a1;
    while (1)
    {
      uint64_t v145 = v13;
      sub_1C3FF29B0(a1 + v11, (uint64_t)v9, type metadata accessor for Proto_Asset);
      unint64_t v144 = v11;
      sub_1C3FF29B0(a2 + v11, (uint64_t)v6, type metadata accessor for Proto_Asset);
      if (*v9 != *v6) {
        break;
      }
      uint64_t v15 = v9[1];
      unint64_t v14 = v9[2];
      uint64_t v16 = v6[1];
      unint64_t v17 = v6[2];
      uint64_t v18 = 0;
      switch(v14 >> 62)
      {
        case 1uLL:
          LODWORD(v18) = HIDWORD(v15) - v15;
          if (__OFSUB__(HIDWORD(v15), v15))
          {
            __break(1u);
LABEL_232:
            __break(1u);
LABEL_233:
            __break(1u);
LABEL_234:
            __break(1u);
LABEL_235:
            __break(1u);
LABEL_236:
            __break(1u);
LABEL_237:
            __break(1u);
LABEL_238:
            __break(1u);
LABEL_239:
            __break(1u);
LABEL_240:
            __break(1u);
LABEL_241:
            __break(1u);
LABEL_242:
            __break(1u);
LABEL_243:
            __break(1u);
LABEL_244:
            __break(1u);
LABEL_245:
            __break(1u);
LABEL_246:
            __break(1u);
LABEL_247:
            __break(1u);
LABEL_248:
            __break(1u);
LABEL_249:
            __break(1u);
LABEL_250:
            __break(1u);
LABEL_251:
            __break(1u);
LABEL_252:
            __break(1u);
LABEL_253:
            __break(1u);
LABEL_254:
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            __break(1u);
LABEL_257:
            __break(1u);
LABEL_258:
            __break(1u);
LABEL_259:
            __break(1u);
LABEL_260:
            __break(1u);
LABEL_261:
            __break(1u);
LABEL_262:
            __break(1u);
LABEL_263:
            __break(1u);
LABEL_264:
            __break(1u);
LABEL_265:
            __break(1u);
LABEL_266:
            __break(1u);
LABEL_267:
            __break(1u);
LABEL_268:
            __break(1u);
LABEL_269:
            __break(1u);
LABEL_270:
            __break(1u);
LABEL_271:
            __break(1u);
LABEL_272:
            __break(1u);
LABEL_273:
            __break(1u);
LABEL_274:
            __break(1u);
LABEL_275:
            __break(1u);
LABEL_276:
            __break(1u);
          }
          uint64_t v18 = (int)v18;
LABEL_11:
          unint64_t v22 = v17 >> 62;
          switch(v17 >> 62)
          {
            case 1uLL:
              LODWORD(v23) = HIDWORD(v16) - v16;
              if (__OFSUB__(HIDWORD(v16), v16)) {
                goto LABEL_233;
              }
              uint64_t v23 = (int)v23;
LABEL_16:
              if (v18 != v23) {
                goto LABEL_228;
              }
              if (v18 < 1) {
                goto LABEL_115;
              }
              break;
            case 2uLL:
              uint64_t v25 = *(void *)(v16 + 16);
              uint64_t v24 = *(void *)(v16 + 24);
              BOOL v21 = __OFSUB__(v24, v25);
              uint64_t v23 = v24 - v25;
              if (!v21) {
                goto LABEL_16;
              }
              goto LABEL_234;
            case 3uLL:
              if (v18) {
                goto LABEL_228;
              }
              goto LABEL_115;
            default:
              uint64_t v23 = BYTE6(v17);
              goto LABEL_16;
          }
          break;
        case 2uLL:
          uint64_t v20 = *(void *)(v15 + 16);
          uint64_t v19 = *(void *)(v15 + 24);
          BOOL v21 = __OFSUB__(v19, v20);
          uint64_t v18 = v19 - v20;
          if (!v21) {
            goto LABEL_11;
          }
          goto LABEL_232;
        case 3uLL:
          goto LABEL_11;
        default:
          uint64_t v18 = BYTE6(v14);
          goto LABEL_11;
      }
      switch(v14 >> 62)
      {
        case 1uLL:
          if ((int)v15 > v15 >> 32) {
            goto LABEL_239;
          }
          sub_1C3F7E324(v9[1], v9[2]);
          uint64_t v31 = (char *)sub_1C4496298();
          if (!v31) {
            goto LABEL_32;
          }
          uint64_t v32 = sub_1C44962C8();
          if (__OFSUB__((int)v15, v32)) {
            goto LABEL_242;
          }
          v31 += (int)v15 - v32;
LABEL_32:
          a2 = v140;
          sub_1C44962B8();
          if (v22)
          {
            uint64_t v139 = v31;
            if (v22 == 1)
            {
              if (v16 >> 32 < (int)v16) {
                goto LABEL_252;
              }
              swift_retain();
              uint64_t v33 = (char *)sub_1C4496298();
              if (v33)
              {
                uint64_t v34 = sub_1C44962C8();
                if (__OFSUB__((int)v16, v34)) {
                  goto LABEL_270;
                }
                v33 += (int)v16 - v34;
              }
              a2 = v140;
              uint64_t v35 = sub_1C44962B8();
              if (v35 >= (v16 >> 32) - (int)v16) {
                size_t v36 = (v16 >> 32) - (int)v16;
              }
              else {
                size_t v36 = v35;
              }
              if (!v139) {
                goto LABEL_278;
              }
              if (!v33) {
                goto LABEL_279;
              }
              int v37 = memcmp(v139, v33, v36);
              sub_1C3F7E2CC(v16, v17);
            }
            else
            {
              uint64_t v69 = *(void *)(v16 + 16);
              uint64_t v70 = *(void *)(v16 + 24);
              swift_retain();
              swift_retain();
              uint64_t v71 = (char *)sub_1C4496298();
              if (v71)
              {
                uint64_t v72 = sub_1C44962C8();
                if (__OFSUB__(v69, v72)) {
                  goto LABEL_269;
                }
                v71 += v69 - v72;
              }
              BOOL v21 = __OFSUB__(v70, v69);
              int64_t v73 = v70 - v69;
              if (v21) {
                goto LABEL_254;
              }
              uint64_t v74 = sub_1C44962B8();
              if (v74 >= v73) {
                size_t v75 = v73;
              }
              else {
                size_t v75 = v74;
              }
              if (!v139) {
                goto LABEL_289;
              }
              if (!v71) {
                goto LABEL_290;
              }
              int v37 = memcmp(v139, v71, v75);
              swift_release();
              swift_release();
            }
          }
          else
          {
            __s1[0] = v16;
            LOWORD(__s1[1]) = v17;
            BYTE2(__s1[1]) = BYTE2(v17);
            BYTE3(__s1[1]) = BYTE3(v17);
            BYTE4(__s1[1]) = BYTE4(v17);
            BYTE5(__s1[1]) = BYTE5(v17);
            if (!v31) {
              goto LABEL_288;
            }
            int v37 = memcmp(v31, __s1, BYTE6(v17));
          }
          sub_1C3F7E2CC(v15, v14);
          if (v37) {
            goto LABEL_228;
          }
          goto LABEL_115;
        case 2uLL:
          uint64_t v38 = v14 & 0x3FFFFFFFFFFFFFFFLL;
          uint64_t v39 = *(void *)(v15 + 16);
          swift_retain();
          swift_retain();
          uint64_t v40 = (char *)sub_1C4496298();
          if (!v40) {
            goto LABEL_47;
          }
          uint64_t v41 = sub_1C44962C8();
          if (__OFSUB__(v39, v41)) {
            goto LABEL_241;
          }
          v40 += v39 - v41;
LABEL_47:
          a2 = v140;
          sub_1C44962B8();
          if (!v22)
          {
            __s1[0] = v16;
            LOWORD(__s1[1]) = v17;
            BYTE2(__s1[1]) = BYTE2(v17);
            BYTE3(__s1[1]) = BYTE3(v17);
            BYTE4(__s1[1]) = BYTE4(v17);
            BYTE5(__s1[1]) = BYTE5(v17);
            if (!v40) {
              goto LABEL_285;
            }
            int v46 = memcmp(v40, __s1, BYTE6(v17));
LABEL_89:
            swift_release();
            goto LABEL_100;
          }
          uint64_t v139 = v40;
          if (v22 == 1)
          {
            v138[1] = v38;
            if (v16 >> 32 < (int)v16) {
              goto LABEL_247;
            }
            swift_retain();
            uint64_t v42 = (char *)sub_1C4496298();
            if (v42)
            {
              uint64_t v43 = sub_1C44962C8();
              if (__OFSUB__((int)v16, v43)) {
                goto LABEL_268;
              }
              v42 += (int)v16 - v43;
            }
            uint64_t v44 = sub_1C44962B8();
            if (v44 >= (v16 >> 32) - (int)v16) {
              size_t v45 = (v16 >> 32) - (int)v16;
            }
            else {
              size_t v45 = v44;
            }
            if (!v139) {
              goto LABEL_280;
            }
            if (!v42) {
              goto LABEL_281;
            }
            int v46 = memcmp(v139, v42, v45);
            sub_1C3F7E2CC(v16, v17);
            goto LABEL_89;
          }
          uint64_t v62 = *(void *)(v16 + 16);
          uint64_t v63 = *(void *)(v16 + 24);
          swift_retain();
          swift_retain();
          uint64_t v64 = (char *)sub_1C4496298();
          if (v64)
          {
            uint64_t v65 = sub_1C44962C8();
            if (__OFSUB__(v62, v65)) {
              goto LABEL_267;
            }
            v64 += v62 - v65;
          }
          BOOL v21 = __OFSUB__(v63, v62);
          int64_t v66 = v63 - v62;
          if (v21) {
            goto LABEL_253;
          }
          uint64_t v67 = sub_1C44962B8();
          if (v67 >= v66) {
            size_t v68 = v66;
          }
          else {
            size_t v68 = v67;
          }
          if (!v139) {
            goto LABEL_286;
          }
          if (!v64) {
            goto LABEL_287;
          }
          int v46 = memcmp(v139, v64, v68);
          swift_release();
          swift_release();
          swift_release();
LABEL_100:
          swift_release();
          if (v46) {
            goto LABEL_228;
          }
LABEL_115:
          uint64_t v77 = v9[3];
          unint64_t v76 = v9[4];
          uint64_t v78 = v6[3];
          unint64_t v79 = v6[4];
          uint64_t v80 = 0;
          switch(v76 >> 62)
          {
            case 1uLL:
              LODWORD(v80) = HIDWORD(v77) - v77;
              if (__OFSUB__(HIDWORD(v77), v77)) {
                goto LABEL_235;
              }
              uint64_t v80 = (int)v80;
LABEL_120:
              unint64_t v83 = v79 >> 62;
              switch(v79 >> 62)
              {
                case 1uLL:
                  LODWORD(v84) = HIDWORD(v78) - v78;
                  if (__OFSUB__(HIDWORD(v78), v78)) {
                    goto LABEL_237;
                  }
                  uint64_t v84 = (int)v84;
LABEL_125:
                  if (v80 != v84) {
                    goto LABEL_228;
                  }
                  if (v80 < 1) {
                    goto LABEL_224;
                  }
                  break;
                case 2uLL:
                  uint64_t v86 = *(void *)(v78 + 16);
                  uint64_t v85 = *(void *)(v78 + 24);
                  BOOL v21 = __OFSUB__(v85, v86);
                  uint64_t v84 = v85 - v86;
                  if (!v21) {
                    goto LABEL_125;
                  }
                  goto LABEL_238;
                case 3uLL:
                  if (v80) {
                    goto LABEL_228;
                  }
                  goto LABEL_224;
                default:
                  uint64_t v84 = BYTE6(v79);
                  goto LABEL_125;
              }
              break;
            case 2uLL:
              uint64_t v82 = *(void *)(v77 + 16);
              uint64_t v81 = *(void *)(v77 + 24);
              BOOL v21 = __OFSUB__(v81, v82);
              uint64_t v80 = v81 - v82;
              if (!v21) {
                goto LABEL_120;
              }
              goto LABEL_236;
            case 3uLL:
              goto LABEL_120;
            default:
              uint64_t v80 = BYTE6(v76);
              goto LABEL_120;
          }
          break;
        case 3uLL:
          memset(__s1, 0, 14);
          if (!v22) {
            goto LABEL_68;
          }
          if (v22 == 1)
          {
            uint64_t v26 = (v16 >> 32) - (int)v16;
            if (v16 >> 32 < (int)v16) {
              goto LABEL_246;
            }
            swift_retain();
            uint64_t v47 = sub_1C4496298();
            if (!v47) {
              goto LABEL_282;
            }
            uint64_t v28 = v47;
            uint64_t v48 = sub_1C44962C8();
            uint64_t v30 = (int)v16 - v48;
            if (__OFSUB__((int)v16, v48)) {
              goto LABEL_251;
            }
            goto LABEL_64;
          }
          uint64_t v58 = *(void *)(v16 + 16);
          uint64_t v59 = *(void *)(v16 + 24);
          swift_retain();
          swift_retain();
          char v54 = (char *)sub_1C4496298();
          if (v54)
          {
            uint64_t v60 = sub_1C44962C8();
            if (__OFSUB__(v58, v60)) {
              goto LABEL_266;
            }
            v54 += v58 - v60;
          }
          int64_t v56 = v59 - v58;
          if (__OFSUB__(v59, v58)) {
            goto LABEL_249;
          }
          uint64_t v57 = sub_1C44962B8();
          if (!v54) {
            goto LABEL_284;
          }
          goto LABEL_81;
        default:
          __s1[0] = v9[1];
          LOWORD(__s1[1]) = v14;
          BYTE2(__s1[1]) = BYTE2(v14);
          BYTE3(__s1[1]) = BYTE3(v14);
          BYTE4(__s1[1]) = BYTE4(v14);
          BYTE5(__s1[1]) = BYTE5(v14);
          if (v22)
          {
            if (v22 == 1)
            {
              uint64_t v26 = (v16 >> 32) - (int)v16;
              if (v16 >> 32 < (int)v16) {
                goto LABEL_245;
              }
              swift_retain();
              uint64_t v27 = sub_1C4496298();
              if (!v27)
              {
                sub_1C44962B8();
                __break(1u);
LABEL_278:
                __break(1u);
LABEL_279:
                __break(1u);
LABEL_280:
                __break(1u);
LABEL_281:
                __break(1u);
LABEL_282:
                sub_1C44962B8();
                __break(1u);
LABEL_283:
                __break(1u);
LABEL_284:
                __break(1u);
LABEL_285:
                __break(1u);
LABEL_286:
                __break(1u);
LABEL_287:
                __break(1u);
LABEL_288:
                __break(1u);
LABEL_289:
                __break(1u);
LABEL_290:
                __break(1u);
LABEL_291:
                sub_1C44962B8();
                __break(1u);
LABEL_292:
                __break(1u);
LABEL_293:
                __break(1u);
LABEL_294:
                __break(1u);
LABEL_295:
                __break(1u);
LABEL_296:
                sub_1C44962B8();
                __break(1u);
LABEL_297:
                __break(1u);
LABEL_298:
                __break(1u);
LABEL_299:
                __break(1u);
LABEL_300:
                __break(1u);
LABEL_301:
                __break(1u);
LABEL_302:
                __break(1u);
LABEL_303:
                __break(1u);
LABEL_304:
                __break(1u);
                JUMPOUT(0x1C3FEC9A4);
              }
              uint64_t v28 = v27;
              uint64_t v29 = sub_1C44962C8();
              uint64_t v30 = (int)v16 - v29;
              if (__OFSUB__((int)v16, v29)) {
                goto LABEL_250;
              }
LABEL_64:
              uint64_t v49 = sub_1C44962B8();
              if (v49 >= v26) {
                size_t v50 = v26;
              }
              else {
                size_t v50 = v49;
              }
              int v51 = memcmp(__s1, (const void *)(v28 + v30), v50);
              sub_1C3F7E2CC(v16, v17);
            }
            else
            {
              uint64_t v52 = *(void *)(v16 + 16);
              uint64_t v53 = *(void *)(v16 + 24);
              swift_retain();
              swift_retain();
              char v54 = (char *)sub_1C4496298();
              if (v54)
              {
                uint64_t v55 = sub_1C44962C8();
                if (__OFSUB__(v52, v55)) {
                  goto LABEL_265;
                }
                v54 += v52 - v55;
              }
              int64_t v56 = v53 - v52;
              if (__OFSUB__(v53, v52)) {
                goto LABEL_248;
              }
              uint64_t v57 = sub_1C44962B8();
              if (!v54) {
                goto LABEL_283;
              }
LABEL_81:
              if (v57 >= v56) {
                size_t v61 = v56;
              }
              else {
                size_t v61 = v57;
              }
              int v51 = memcmp(__s1, v54, v61);
              swift_release();
              swift_release();
            }
            a2 = v140;
            if (v51) {
              goto LABEL_228;
            }
          }
          else
          {
LABEL_68:
            uint64_t __s2 = v16;
            __int16 v147 = v17;
            char v148 = BYTE2(v17);
            char v149 = BYTE3(v17);
            char v150 = BYTE4(v17);
            char v151 = BYTE5(v17);
            if (memcmp(__s1, &__s2, BYTE6(v17))) {
              goto LABEL_228;
            }
          }
          goto LABEL_115;
      }
      switch(v76 >> 62)
      {
        case 1uLL:
          if ((int)v77 > v77 >> 32) {
            goto LABEL_240;
          }
          sub_1C3F7E324(v9[3], v9[4]);
          long long v92 = (char *)sub_1C4496298();
          if (!v92) {
            goto LABEL_141;
          }
          uint64_t v93 = sub_1C44962C8();
          if (__OFSUB__((int)v77, v93)) {
            goto LABEL_244;
          }
          v92 += (int)v77 - v93;
LABEL_141:
          a2 = v140;
          sub_1C44962B8();
          if (v83)
          {
            uint64_t v139 = v92;
            if (v83 == 1)
            {
              if (v78 >> 32 < (int)v78) {
                goto LABEL_263;
              }
              swift_retain();
              uint64_t v94 = (char *)sub_1C4496298();
              if (v94)
              {
                uint64_t v95 = sub_1C44962C8();
                if (__OFSUB__((int)v78, v95)) {
                  goto LABEL_276;
                }
                v94 += (int)v78 - v95;
              }
              a2 = v140;
              uint64_t v96 = sub_1C44962B8();
              if (v96 >= (v78 >> 32) - (int)v78) {
                size_t v97 = (v78 >> 32) - (int)v78;
              }
              else {
                size_t v97 = v96;
              }
              if (!v139) {
                goto LABEL_292;
              }
              if (!v94) {
                goto LABEL_293;
              }
              int v98 = memcmp(v139, v94, v97);
              sub_1C3F7E2CC(v78, v79);
            }
            else
            {
              uint64_t v129 = *(void *)(v78 + 16);
              uint64_t v130 = *(void *)(v78 + 24);
              swift_retain();
              swift_retain();
              size_t v131 = (char *)sub_1C4496298();
              if (v131)
              {
                uint64_t v132 = sub_1C44962C8();
                if (__OFSUB__(v129, v132)) {
                  goto LABEL_275;
                }
                v131 += v129 - v132;
              }
              BOOL v21 = __OFSUB__(v130, v129);
              int64_t v133 = v130 - v129;
              if (v21) {
                goto LABEL_264;
              }
              uint64_t v134 = sub_1C44962B8();
              if (v134 >= v133) {
                size_t v135 = v133;
              }
              else {
                size_t v135 = v134;
              }
              if (!v139) {
                goto LABEL_303;
              }
              if (!v131) {
                goto LABEL_304;
              }
              int v98 = memcmp(v139, v131, v135);
              swift_release();
              swift_release();
            }
          }
          else
          {
            __s1[0] = v78;
            LOWORD(__s1[1]) = v79;
            BYTE2(__s1[1]) = BYTE2(v79);
            BYTE3(__s1[1]) = BYTE3(v79);
            BYTE4(__s1[1]) = BYTE4(v79);
            BYTE5(__s1[1]) = BYTE5(v79);
            if (!v92) {
              goto LABEL_302;
            }
            int v98 = memcmp(v92, __s1, BYTE6(v79));
          }
          sub_1C3F7E2CC(v77, v76);
          if (v98) {
            goto LABEL_228;
          }
          goto LABEL_224;
        case 2uLL:
          uint64_t v99 = *(void *)(v77 + 16);
          swift_retain();
          swift_retain();
          int v100 = (char *)sub_1C4496298();
          if (!v100) {
            goto LABEL_156;
          }
          uint64_t v101 = sub_1C44962C8();
          if (__OFSUB__(v99, v101)) {
            goto LABEL_243;
          }
          v100 += v99 - v101;
LABEL_156:
          a2 = v140;
          sub_1C44962B8();
          if (!v83)
          {
            __s1[0] = v78;
            LOWORD(__s1[1]) = v79;
            BYTE2(__s1[1]) = BYTE2(v79);
            BYTE3(__s1[1]) = BYTE3(v79);
            BYTE4(__s1[1]) = BYTE4(v79);
            BYTE5(__s1[1]) = BYTE5(v79);
            if (!v100) {
              goto LABEL_299;
            }
            int v106 = memcmp(v100, __s1, BYTE6(v79));
LABEL_198:
            swift_release();
            goto LABEL_209;
          }
          uint64_t v139 = v100;
          if (v83 == 1)
          {
            if (v78 >> 32 < (int)v78) {
              goto LABEL_257;
            }
            swift_retain();
            uint64_t v102 = (char *)sub_1C4496298();
            if (v102)
            {
              uint64_t v103 = sub_1C44962C8();
              if (__OFSUB__((int)v78, v103)) {
                goto LABEL_274;
              }
              v102 += (int)v78 - v103;
            }
            a2 = v140;
            uint64_t v104 = sub_1C44962B8();
            if (v104 >= (v78 >> 32) - (int)v78) {
              size_t v105 = (v78 >> 32) - (int)v78;
            }
            else {
              size_t v105 = v104;
            }
            if (!v139) {
              goto LABEL_294;
            }
            if (!v102) {
              goto LABEL_295;
            }
            int v106 = memcmp(v139, v102, v105);
            sub_1C3F7E2CC(v78, v79);
            goto LABEL_198;
          }
          uint64_t v122 = *(void *)(v78 + 16);
          uint64_t v123 = *(void *)(v78 + 24);
          swift_retain();
          swift_retain();
          uint64_t v124 = (char *)sub_1C4496298();
          if (v124)
          {
            uint64_t v125 = sub_1C44962C8();
            if (__OFSUB__(v122, v125)) {
              goto LABEL_273;
            }
            v124 += v122 - v125;
          }
          BOOL v21 = __OFSUB__(v123, v122);
          int64_t v126 = v123 - v122;
          if (v21) {
            goto LABEL_262;
          }
          uint64_t v127 = sub_1C44962B8();
          if (v127 >= v126) {
            size_t v128 = v126;
          }
          else {
            size_t v128 = v127;
          }
          if (!v139) {
            goto LABEL_300;
          }
          if (!v124) {
            goto LABEL_301;
          }
          int v106 = memcmp(v139, v124, v128);
          swift_release();
          swift_release();
          swift_release();
LABEL_209:
          swift_release();
          if (v106) {
            goto LABEL_228;
          }
LABEL_224:
          sub_1C4496898();
          sub_1C3FF2968(&qword_1EA39BEF0, MEMORY[0x1E4F70E60]);
          char v136 = sub_1C4497178();
          sub_1C3F8AFE8((uint64_t)v6, type metadata accessor for Proto_Asset);
          sub_1C3F8AFE8((uint64_t)v9, type metadata accessor for Proto_Asset);
          uint64_t v13 = v145 - 1;
          if ((v136 & 1) == 0) {
            return v136 & 1;
          }
          a1 = v142;
          unint64_t v11 = v144 + v141;
          if (!v145) {
            return v136 & 1;
          }
          break;
        case 3uLL:
          memset(__s1, 0, 14);
          if (!v83) {
            goto LABEL_177;
          }
          if (v83 == 1)
          {
            uint64_t v87 = (v78 >> 32) - (int)v78;
            if (v78 >> 32 < (int)v78) {
              goto LABEL_256;
            }
            swift_retain();
            uint64_t v107 = sub_1C4496298();
            if (!v107) {
              goto LABEL_296;
            }
            uint64_t v89 = v107;
            uint64_t v108 = sub_1C44962C8();
            uint64_t v91 = (int)v78 - v108;
            if (__OFSUB__((int)v78, v108)) {
              goto LABEL_261;
            }
LABEL_173:
            uint64_t v109 = sub_1C44962B8();
            if (v109 >= v87) {
              size_t v110 = v87;
            }
            else {
              size_t v110 = v109;
            }
            int v111 = memcmp(__s1, (const void *)(v89 + v91), v110);
            sub_1C3F7E2CC(v78, v79);
          }
          else
          {
            uint64_t v118 = *(void *)(v78 + 16);
            uint64_t v119 = *(void *)(v78 + 24);
            swift_retain();
            swift_retain();
            uint64_t v114 = (char *)sub_1C4496298();
            if (v114)
            {
              uint64_t v120 = sub_1C44962C8();
              if (__OFSUB__(v118, v120)) {
                goto LABEL_272;
              }
              v114 += v118 - v120;
            }
            int64_t v116 = v119 - v118;
            if (__OFSUB__(v119, v118)) {
              goto LABEL_259;
            }
            uint64_t v117 = sub_1C44962B8();
            if (!v114) {
              goto LABEL_298;
            }
LABEL_190:
            if (v117 >= v116) {
              size_t v121 = v116;
            }
            else {
              size_t v121 = v117;
            }
            int v111 = memcmp(__s1, v114, v121);
            swift_release();
            swift_release();
          }
          a2 = v140;
          if (v111) {
            goto LABEL_228;
          }
          goto LABEL_224;
        default:
          __s1[0] = v9[3];
          LOWORD(__s1[1]) = v76;
          BYTE2(__s1[1]) = BYTE2(v76);
          BYTE3(__s1[1]) = BYTE3(v76);
          BYTE4(__s1[1]) = BYTE4(v76);
          BYTE5(__s1[1]) = BYTE5(v76);
          if (!v83)
          {
LABEL_177:
            uint64_t __s2 = v78;
            __int16 v147 = v79;
            char v148 = BYTE2(v79);
            char v149 = BYTE3(v79);
            char v150 = BYTE4(v79);
            char v151 = BYTE5(v79);
            if (memcmp(__s1, &__s2, BYTE6(v79))) {
              goto LABEL_228;
            }
            goto LABEL_224;
          }
          if (v83 == 1)
          {
            uint64_t v87 = (v78 >> 32) - (int)v78;
            if (v78 >> 32 < (int)v78) {
              goto LABEL_255;
            }
            swift_retain();
            uint64_t v88 = sub_1C4496298();
            if (!v88) {
              goto LABEL_291;
            }
            uint64_t v89 = v88;
            uint64_t v90 = sub_1C44962C8();
            uint64_t v91 = (int)v78 - v90;
            if (__OFSUB__((int)v78, v90)) {
              goto LABEL_260;
            }
            goto LABEL_173;
          }
          uint64_t v112 = *(void *)(v78 + 16);
          uint64_t v113 = *(void *)(v78 + 24);
          swift_retain();
          swift_retain();
          uint64_t v114 = (char *)sub_1C4496298();
          if (v114)
          {
            uint64_t v115 = sub_1C44962C8();
            if (__OFSUB__(v112, v115)) {
              goto LABEL_271;
            }
            v114 += v112 - v115;
          }
          int64_t v116 = v113 - v112;
          if (__OFSUB__(v113, v112)) {
            goto LABEL_258;
          }
          uint64_t v117 = sub_1C44962B8();
          if (!v114) {
            goto LABEL_297;
          }
          goto LABEL_190;
      }
    }
LABEL_228:
    sub_1C3F8AFE8((uint64_t)v6, type metadata accessor for Proto_Asset);
    sub_1C3F8AFE8((uint64_t)v9, type metadata accessor for Proto_Asset);
    goto LABEL_229;
  }
  char v136 = 1;
  return v136 & 1;
}

uint64_t sub_1C3FECA04(uint64_t a1, uint64_t a2)
{
  return sub_1C3FECA58(a1, a2, type metadata accessor for Proto_Set.Element, type metadata accessor for Proto_Set.Element, (uint64_t (*)(uint64_t, uint64_t))sub_1C43FD12C, type metadata accessor for Proto_Set.Element);
}

uint64_t sub_1C3FECA58(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t), uint64_t (*a6)(void))
{
  uint64_t v28 = a5;
  uint64_t v30 = a3(0);
  uint64_t v10 = MEMORY[0x1F4188790](v30);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v28 - v14;
  uint64_t v31 = a1;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16 != *(void *)(a2 + 16))
  {
LABEL_15:
    char v24 = 0;
    return v24 & 1;
  }
  if (v16)
  {
    uint64_t v17 = a2;
    if (v31 != a2)
    {
      unint64_t v18 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v29 = *(void *)(v13 + 72);
      uint64_t v19 = v16 - 1;
      while (1)
      {
        sub_1C3FF29B0(v31 + v18, (uint64_t)v15, a4);
        sub_1C3FF29B0(v17 + v18, (uint64_t)v12, a4);
        uint64_t v20 = *(int *)(v30 + 20);
        uint64_t v21 = *(void *)&v15[v20];
        uint64_t v22 = *(void *)&v12[v20];
        if (v21 != v22)
        {
          swift_retain();
          swift_retain();
          char v23 = v28(v21, v22);
          swift_release();
          swift_release();
          if ((v23 & 1) == 0) {
            break;
          }
        }
        sub_1C4496898();
        sub_1C3FF2968(&qword_1EA39BEF0, MEMORY[0x1E4F70E60]);
        char v24 = sub_1C4497178();
        sub_1C3F8AFE8((uint64_t)v12, a6);
        sub_1C3F8AFE8((uint64_t)v15, a6);
        BOOL v26 = v19-- != 0;
        if (v24)
        {
          v18 += v29;
          if (v26) {
            continue;
          }
        }
        return v24 & 1;
      }
      sub_1C3F8AFE8((uint64_t)v12, a6);
      sub_1C3F8AFE8((uint64_t)v15, a6);
      goto LABEL_15;
    }
  }
  char v24 = 1;
  return v24 & 1;
}

uint64_t sub_1C3FECCB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v5);
  uint64_t v10 = (uint64_t *)((char *)&v18 - v9);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 != *(void *)(a2 + 16))
  {
LABEL_15:
    char v14 = 0;
    return v14 & 1;
  }
  if (v11 && a1 != a2)
  {
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v19 = *(void *)(v8 + 72);
    uint64_t v13 = v11 - 1;
    while (1)
    {
      sub_1C3FF29B0(a1 + v12, (uint64_t)v10, type metadata accessor for Proto_Timestamp);
      sub_1C3FF29B0(a2 + v12, (uint64_t)v7, type metadata accessor for Proto_Timestamp);
      if (*v10 != *v7 || v10[1] != v7[1]) {
        break;
      }
      sub_1C4496898();
      sub_1C3FF2968(&qword_1EA39BEF0, MEMORY[0x1E4F70E60]);
      char v14 = sub_1C4497178();
      sub_1C3F8AFE8((uint64_t)v7, type metadata accessor for Proto_Timestamp);
      sub_1C3F8AFE8((uint64_t)v10, type metadata accessor for Proto_Timestamp);
      BOOL v16 = v13-- != 0;
      if (v14)
      {
        v12 += v19;
        if (v16) {
          continue;
        }
      }
      return v14 & 1;
    }
    sub_1C3F8AFE8((uint64_t)v7, type metadata accessor for Proto_Timestamp);
    sub_1C3F8AFE8((uint64_t)v10, type metadata accessor for Proto_Timestamp);
    goto LABEL_15;
  }
  char v14 = 1;
  return v14 & 1;
}

uint64_t sub_1C3FECF10(uint64_t a1, uint64_t a2)
{
  return sub_1C3FECA58(a1, a2, type metadata accessor for Proto_Subsequence, type metadata accessor for Proto_Subsequence, (uint64_t (*)(uint64_t, uint64_t))sub_1C4408140, type metadata accessor for Proto_Subsequence);
}

uint64_t sub_1C3FECF64(uint64_t a1, uint64_t a2)
{
  return sub_1C3FECA58(a1, a2, type metadata accessor for Proto_Sequence.AttributeRun, type metadata accessor for Proto_Sequence.AttributeRun, sub_1C4406558, type metadata accessor for Proto_Sequence.AttributeRun);
}

uint64_t sub_1C3FECFB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v93 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BEE8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v77 = (uint64_t)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v82 = (uint64_t)&v71 - v13;
  uint64_t v89 = type metadata accessor for Proto_Value(0);
  uint64_t v91 = *(void *)(v89 - 8);
  MEMORY[0x1F4188790](v89);
  uint64_t v86 = (uint64_t)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BF00);
  MEMORY[0x1F4188790](v88);
  BOOL v16 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v87 = (uint64_t)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v83 = (uint64_t)&v71 - v20;
  uint64_t v21 = type metadata accessor for Proto_Sequence.AttributeRun.Attribute(0);
  uint64_t v22 = MEMORY[0x1F4188790](v21);
  char v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v27 = (char *)&v71 - v26;
  uint64_t v94 = a1;
  uint64_t v95 = a2;
  uint64_t v28 = *(void *)(a1 + 16);
  if (v28 != *(void *)(a2 + 16)) {
    goto LABEL_37;
  }
  if (!v28 || v94 == v95)
  {
    char v65 = 1;
    return v65 & 1;
  }
  uint64_t v74 = v7;
  uint64_t v72 = v6;
  long long v92 = v16;
  uint64_t v75 = v4;
  unint64_t v76 = v9;
  unint64_t v29 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  uint64_t v81 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
  int64_t v73 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
  uint64_t v85 = *(void *)(v25 + 72);
  uint64_t v30 = v28 - 1;
  uint64_t v31 = v83;
  unint64_t v79 = v24;
  uint64_t v78 = v21;
  uint64_t v80 = (char *)&v71 - v26;
  while (1)
  {
    sub_1C3FF29B0(v94 + v29, (uint64_t)v27, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
    sub_1C3FF29B0(v95 + v29, (uint64_t)v24, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
    uint64_t v32 = *(int *)(v21 + 20);
    uint64_t v33 = *(void *)&v27[v32];
    uint64_t v34 = *(void *)&v24[v32];
    if (v33 != v34) {
      break;
    }
LABEL_21:
    sub_1C4496898();
    sub_1C3FF2968(&qword_1EA39BEF0, MEMORY[0x1E4F70E60]);
    char v65 = sub_1C4497178();
    sub_1C3F8AFE8((uint64_t)v24, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
    sub_1C3F8AFE8((uint64_t)v27, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
    BOOL v67 = v30-- != 0;
    if (v65)
    {
      v29 += v85;
      if (v67) {
        continue;
      }
    }
    return v65 & 1;
  }
  swift_beginAccess();
  int v35 = *(_DWORD *)(v33 + 16);
  swift_beginAccess();
  if (v35 != *(_DWORD *)(v34 + 16)) {
    goto LABEL_36;
  }
  uint64_t v91 = v30;
  unint64_t v90 = v29;
  uint64_t v36 = v33
      + OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  sub_1C3F970C4(v36, v31, &qword_1EBBC0540);
  uint64_t v37 = v34
      + OBJC_IVAR____TtCVVV9Coherence14Proto_Sequence12AttributeRun9AttributeP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__value;
  swift_beginAccess();
  uint64_t v38 = v31;
  uint64_t v39 = (uint64_t)v92;
  uint64_t v40 = (uint64_t)&v92[*(int *)(v88 + 48)];
  sub_1C3F970C4(v38, (uint64_t)v92, &qword_1EBBC0540);
  sub_1C3F970C4(v37, v40, &qword_1EBBC0540);
  uint64_t v41 = *v81;
  uint64_t v42 = v89;
  unsigned int v43 = (*v81)(v39, 1, v89);
  uint64_t v93 = v34;
  if (v43 == 1)
  {
    swift_retain();
    swift_retain();
    sub_1C3F962E0(v38, &qword_1EBBC0540);
    if (v41(v40, 1, v42) != 1)
    {
      uint64_t v68 = (uint64_t)v92;
      char v24 = v79;
      uint64_t v69 = &qword_1EA39BF00;
      uint64_t v27 = v80;
      goto LABEL_34;
    }
    uint64_t v31 = v38;
    sub_1C3F962E0((uint64_t)v92, &qword_1EBBC0540);
    char v24 = v79;
    uint64_t v27 = v80;
    uint64_t v30 = v91;
    goto LABEL_20;
  }
  uint64_t v84 = v33;
  uint64_t v44 = v39;
  uint64_t v45 = v87;
  sub_1C3F970C4(v44, v87, &qword_1EBBC0540);
  if (v41(v40, 1, v42) == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v69 = &qword_1EA39BF00;
    uint64_t v68 = (uint64_t)v92;
    char v24 = v79;
    uint64_t v27 = v80;
    goto LABEL_33;
  }
  uint64_t v46 = v40;
  uint64_t v47 = v86;
  sub_1C3F8AB08(v46, v86, type metadata accessor for Proto_Value);
  uint64_t v48 = *(int *)(v42 + 20);
  uint64_t v49 = *(void *)(v45 + v48);
  uint64_t v50 = *(void *)(v47 + v48);
  uint64_t v27 = v80;
  if (v49 == v50)
  {
    swift_retain();
    swift_retain();
    char v24 = v79;
    goto LABEL_19;
  }
  uint64_t v51 = v82;
  uint64_t v52 = v49 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v52, v51, &qword_1EBBBF8A0);
  uint64_t v53 = v50 + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v54 = (uint64_t)v76;
  uint64_t v55 = (uint64_t)&v76[*(int *)(v74 + 48)];
  sub_1C3F970C4(v51, (uint64_t)v76, &qword_1EBBBF8A0);
  sub_1C3F970C4(v53, v55, &qword_1EBBBF8A0);
  int64_t v56 = *v73;
  uint64_t v57 = v75;
  if ((*v73)(v54, 1, v75) == 1)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1C3F962E0(v82, &qword_1EBBBF8A0);
    int v58 = v56(v55, 1, v57);
    char v24 = v79;
    if (v58 != 1) {
      goto LABEL_31;
    }
    sub_1C3F962E0((uint64_t)v76, &qword_1EBBBF8A0);
    goto LABEL_18;
  }
  sub_1C3F970C4(v54, v77, &qword_1EBBBF8A0);
  if (v56(v55, 1, v57) != 1)
  {
    uint64_t v59 = (uint64_t)v72;
    sub_1C3F8AB08(v55, (uint64_t)v72, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v60 = v77;
    char v61 = sub_1C43F23A0(v77, v59);
    sub_1C3F8AFE8(v59, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    sub_1C3F962E0(v82, &qword_1EBBBF8A0);
    sub_1C3F8AFE8(v60, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    sub_1C3F962E0(v54, &qword_1EBBBF8A0);
    char v24 = v79;
    if ((v61 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_18:
    swift_release();
    swift_release();
LABEL_19:
    sub_1C4496898();
    sub_1C3FF2968(&qword_1EA39BEF0, MEMORY[0x1E4F70E60]);
    uint64_t v62 = v87;
    uint64_t v63 = v86;
    char v64 = sub_1C4497178();
    sub_1C3F8AFE8(v63, type metadata accessor for Proto_Value);
    uint64_t v31 = v83;
    sub_1C3F962E0(v83, &qword_1EBBC0540);
    sub_1C3F8AFE8(v62, type metadata accessor for Proto_Value);
    sub_1C3F962E0((uint64_t)v92, &qword_1EBBC0540);
    uint64_t v30 = v91;
    if ((v64 & 1) == 0) {
      goto LABEL_35;
    }
LABEL_20:
    swift_release();
    swift_release();
    uint64_t v21 = v78;
    unint64_t v29 = v90;
    goto LABEL_21;
  }
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1C3F962E0(v82, &qword_1EBBBF8A0);
  sub_1C3F8AFE8(v77, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  char v24 = v79;
LABEL_31:
  sub_1C3F962E0((uint64_t)v76, &qword_1EA39BEE8);
LABEL_32:
  swift_release();
  swift_release();
  sub_1C3F8AFE8(v86, type metadata accessor for Proto_Value);
  uint64_t v69 = &qword_1EBBC0540;
  uint64_t v68 = (uint64_t)v92;
  uint64_t v45 = v87;
LABEL_33:
  sub_1C3F962E0(v83, &qword_1EBBC0540);
  sub_1C3F8AFE8(v45, type metadata accessor for Proto_Value);
LABEL_34:
  sub_1C3F962E0(v68, v69);
LABEL_35:
  swift_release();
  swift_release();
LABEL_36:
  sub_1C3F8AFE8((uint64_t)v24, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
  sub_1C3F8AFE8((uint64_t)v27, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
LABEL_37:
  char v65 = 0;
  return v65 & 1;
}

uint64_t sub_1C3FEDBD0(uint64_t *a1, uint64_t *a2)
{
  return sub_1C3FE76A4(*a1, *a2);
}

uint64_t sub_1C3FEDBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)(a5 + 16);
  swift_beginAccess();
  uint64_t v10 = *(void **)(a5 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a5 + 16) = v10;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v10 = sub_1C3FF19A0(0, v10[2] + 1, 1, v10);
    *uint64_t v9 = v10;
  }
  unint64_t v13 = v10[2];
  unint64_t v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    uint64_t v10 = sub_1C3FF19A0((void *)(v12 > 1), v13 + 1, 1, v10);
    *uint64_t v9 = v10;
  }
  void v10[2] = v13 + 1;
  uint64_t v14 = &v10[3 * v13];
  v14[4] = a1;
  v14[5] = a2;
  v14[6] = a3;
  return swift_endAccess();
}

uint64_t sub_1C3FEDCC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v9(a2, a3, a4, a5);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t CRString.Cursor.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v107 = a2;
  uint64_t v114 = type metadata accessor for Proto_Timestamp(0);
  MEMORY[0x1F4188790](v114);
  uint64_t v119 = (unint64_t *)((char *)&v102 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for Timestamp(0);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v106 = (uint64_t)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v123 = (uint64_t)&v102 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  size_t v105 = (uint64_t *)((char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v110 = (uint64_t)&v102 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v118 = (char *)&v102 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  int64_t v116 = (char *)&v102 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v127 = (uint64_t)&v102 - v17;
  uint64_t v129 = type metadata accessor for Proto_CustomCRValue(0);
  uint64_t v18 = MEMORY[0x1F4188790](v129);
  uint64_t v108 = (uint64_t *)((char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v117 = (uint64_t *)((char *)&v102 - v21);
  MEMORY[0x1F4188790](v20);
  size_t v128 = (char *)&v102 - v22;
  uint64_t v23 = type metadata accessor for Proto_Value(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v104 = (uint64_t)&v102 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v113 = (uint64_t)&v102 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v124 = (uint64_t)&v102 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v125 = (uint64_t)&v102 - v32;
  MEMORY[0x1F4188790](v31);
  uint64_t v126 = (uint64_t)&v102 - v33;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0540);
  uint64_t v35 = MEMORY[0x1F4188790](v34 - 8);
  uint64_t v109 = (uint64_t)&v102 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v120 = (uint64_t)&v102 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v41 = (char *)&v102 - v40;
  MEMORY[0x1F4188790](v39);
  unsigned int v43 = (char *)&v102 - v42;
  uint64_t v44 = a1;
  uint64_t v45 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  sub_1C3F970C4(v45, (uint64_t)v43, &qword_1EBBC0540);
  uint64_t v122 = v24;
  uint64_t v46 = (char *)(v24 + 48);
  uint64_t v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v24) = v47(v43, 1, v23);
  sub_1C3F962E0((uint64_t)v43, &qword_1EBBC0540);
  if (v24 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v48 = 0xD000000000000017;
    *(void *)(v48 + 8) = 0x80000001C44B0F00;
    *(unsigned char *)(v48 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRValueContainer();
  uint64_t v49 = v44;
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v44;
  sub_1C3F970C4(v45, (uint64_t)v41, &qword_1EBBC0540);
  uint64_t v103 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v47;
  uint64_t result = v47(v41, 1, v23);
  if (result == 1)
  {
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v51 = v46;
  uint64_t v52 = v126;
  sub_1C3F8AB08((uint64_t)v41, v126, type metadata accessor for Proto_Value);
  uint64_t v112 = v23;
  uint64_t v53 = *(void *)(v52 + *(int *)(v23 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  uint64_t v54 = v127;
  sub_1C3F970C4(v53, v127, &qword_1EBBBF8A0);
  uint64_t v55 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
  uint64_t v56 = *(void *)(v55 - 8);
  uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
  uint64_t v58 = v56 + 48;
  int v59 = v57(v54, 1, v55);
  uint64_t v60 = MEMORY[0x1E4FBC860];
  uint64_t v111 = v55;
  char v61 = v128;
  if (v59 == 1)
  {
    swift_retain();
    sub_1C3F962E0(v54, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 13)
    {
      sub_1C3F8AB08(v54, (uint64_t)v61, type metadata accessor for Proto_CustomCRValue);
      swift_retain();
      goto LABEL_10;
    }
    swift_retain();
    sub_1C3F8AFE8(v54, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  void *v61 = v60;
  v61[1] = v60;
  sub_1C4496888();
LABEL_10:
  sub_1C3F8AFE8(v52, type metadata accessor for Proto_Value);
  uint64_t v62 = v61[1];
  swift_bridgeObjectRetain();
  sub_1C3F8AFE8((uint64_t)v61, type metadata accessor for Proto_CustomCRValue);
  uint64_t v63 = *(void *)(v62 + 16);
  swift_bridgeObjectRelease();
  if (v63 != 2)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v74 = 0xD00000000000001ALL;
    *(void *)(v74 + 8) = 0x80000001C44B0F20;
    *(unsigned char *)(v74 + 16) = 0;
    swift_willThrow();
LABEL_27:
    swift_release();
    swift_setDeallocating();
    return swift_release();
  }
  uint64_t v64 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  uint64_t v65 = v120;
  sub_1C3F970C4(v64, v120, &qword_1EBBC0540);
  uint64_t v66 = v112;
  uint64_t result = v103(v65, 1, v112);
  if (result == 1) {
    goto LABEL_48;
  }
  uint64_t v67 = v49;
  uint64_t v68 = v125;
  sub_1C3F8AB08(v65, v125, type metadata accessor for Proto_Value);
  uint64_t v69 = *(void *)(v68 + *(int *)(v66 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  id v70 = v116;
  sub_1C3F970C4(v69, (uint64_t)v116, &qword_1EBBBF8A0);
  int v71 = v57((uint64_t)v70, 1, v111);
  uint64_t v72 = v119;
  uint64_t v73 = (uint64_t)v118;
  if (v71 == 1)
  {
    sub_1C3F962E0((uint64_t)v70, &qword_1EBBBF8A0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 13)
    {
      uint64_t v75 = v117;
      sub_1C3F8AB08((uint64_t)v70, (uint64_t)v117, type metadata accessor for Proto_CustomCRValue);
      goto LABEL_19;
    }
    sub_1C3F8AFE8((uint64_t)v70, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  unint64_t v76 = v117;
  *uint64_t v117 = v60;
  v76[1] = v60;
  uint64_t v75 = v76;
  sub_1C4496888();
LABEL_19:
  sub_1C3F8AFE8(v125, type metadata accessor for Proto_Value);
  uint64_t v77 = v75[1];
  swift_bridgeObjectRetain();
  sub_1C3F8AFE8((uint64_t)v75, type metadata accessor for Proto_CustomCRValue);
  if (!*(void *)(v77 + 16))
  {
    __break(1u);
    goto LABEL_45;
  }
  size_t v128 = v51;
  unint64_t v78 = (*(unsigned __int8 *)(v122 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80);
  uint64_t v79 = v124;
  sub_1C3FF29B0(v77 + v78, v124, type metadata accessor for Proto_Value);
  swift_bridgeObjectRelease();
  uint64_t v80 = *(void *)(v79 + *(int *)(v112 + 20))
      + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v80, v73, &qword_1EBBBF8A0);
  if (v57(v73, 1, v111) == 1)
  {
    sub_1C3F962E0(v73, &qword_1EBBBF8A0);
    uint64_t v81 = v115;
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v81 = v115;
    if (EnumCaseMultiPayload == 9)
    {
      sub_1C3F8AB08(v73, (uint64_t)v72, type metadata accessor for Proto_Timestamp);
      goto LABEL_26;
    }
    sub_1C3F8AFE8(v73, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
  }
  *uint64_t v72 = 0;
  v72[1] = 0;
  sub_1C4496888();
LABEL_26:
  sub_1C3F8AFE8(v124, type metadata accessor for Proto_Value);
  swift_retain();
  sub_1C3F8A234(v72, v67, v123);
  if (v81) {
    goto LABEL_27;
  }
  uint64_t v83 = *(void *)(inited + 16) + OBJC_IVAR____TtC9Coherence9CRDecoder_value;
  swift_beginAccess();
  uint64_t v84 = v109;
  sub_1C3F970C4(v83, v109, &qword_1EBBC0540);
  uint64_t v85 = v112;
  uint64_t result = v103(v84, 1, v112);
  if (result != 1)
  {
    uint64_t v86 = v84;
    uint64_t v87 = v113;
    sub_1C3F8AB08(v86, v113, type metadata accessor for Proto_Value);
    uint64_t v88 = *(void *)(v87 + *(int *)(v85 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v89 = v88;
    uint64_t v90 = v110;
    sub_1C3F970C4(v89, v110, &qword_1EBBBF8A0);
    if (v57(v90, 1, v111) == 1)
    {
      sub_1C3F962E0(v90, &qword_1EBBBF8A0);
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 13)
      {
        uint64_t v91 = v108;
        sub_1C3F8AB08(v90, (uint64_t)v108, type metadata accessor for Proto_CustomCRValue);
        goto LABEL_36;
      }
      sub_1C3F8AFE8(v90, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    uint64_t v91 = v108;
    uint64_t v92 = MEMORY[0x1E4FBC860];
    void *v108 = MEMORY[0x1E4FBC860];
    v91[1] = v92;
    sub_1C4496888();
LABEL_36:
    sub_1C3F8AFE8(v113, type metadata accessor for Proto_Value);
    uint64_t v77 = v91[1];
    swift_bridgeObjectRetain();
    sub_1C3F8AFE8((uint64_t)v91, type metadata accessor for Proto_CustomCRValue);
    if (*(void *)(v77 + 16) >= 2uLL)
    {
      uint64_t v93 = v104;
      sub_1C3FF29B0(v77 + v78 + *(void *)(v122 + 72), v104, type metadata accessor for Proto_Value);
      swift_bridgeObjectRelease();
      uint64_t v94 = *(void *)(v93 + *(int *)(v112 + 20))
          + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
      swift_beginAccess();
      uint64_t v95 = v94;
      uint64_t v96 = v105;
      sub_1C3F970C4(v95, (uint64_t)v105, &qword_1EBBBF8A0);
      if (v57((uint64_t)v96, 1, v111) == 1)
      {
        sub_1C3F962E0((uint64_t)v96, &qword_1EBBBF8A0);
        uint64_t v77 = 0;
        uint64_t v57 = v107;
        uint64_t v58 = v123;
      }
      else
      {
        int v97 = swift_getEnumCaseMultiPayload();
        uint64_t v57 = v107;
        uint64_t v58 = v123;
        if (v97)
        {
          sub_1C3F8AFE8((uint64_t)v96, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
          uint64_t v77 = 0;
        }
        else
        {
          uint64_t v77 = *v96;
        }
      }
      sub_1C3F8AFE8(v93, type metadata accessor for Proto_Value);
      uint64_t v98 = v106;
      sub_1C3FF29B0(v58, v106, type metadata accessor for Timestamp);
      uint64_t v99 = (objc_class *)type metadata accessor for ObjCTimestamp(0);
      id v100 = objc_allocWithZone(v99);
      sub_1C3FF29B0(v98, (uint64_t)v100 + OBJC_IVAR___ObjCTimestamp_timestamp, type metadata accessor for Timestamp);
      v130.receiver = v100;
      v130.super_class = v99;
      id v70 = objc_msgSendSuper2(&v130, sel_init);
      sub_1C3F8AFE8(v98, type metadata accessor for Timestamp);
      if (qword_1EBBC10F0 == -1) {
        goto LABEL_43;
      }
      goto LABEL_46;
    }
LABEL_45:
    __break(1u);
LABEL_46:
    swift_once();
LABEL_43:
    swift_retain();
    sub_1C4497A58();
    swift_release();
    id v101 = objc_msgSend(objc_allocWithZone((Class)CRTTMergeableStringIndex), sel_initWithTimestamp_affinity_renameGeneration_, v70, v77, v131);
    swift_release();
    swift_release();

    uint64_t result = sub_1C3F8AFE8(v58, type metadata accessor for Timestamp);
    *(void *)uint64_t v57 = v101;
    return result;
  }
LABEL_49:
  __break(1u);
  return result;
}

void CRString.Cursor.encode(to:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBF8A0);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v77 = (uint64_t)v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v74 = (uint64_t)v72 - v6;
  uint64_t v80 = type metadata accessor for Proto_CustomCRValue(0);
  uint64_t v7 = MEMORY[0x1F4188790](v80);
  uint64_t v79 = (void *)((char *)v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v7);
  unint64_t v76 = (void *)((char *)v72 - v9);
  uint64_t v10 = type metadata accessor for Replica();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for Timestamp(0);
  MEMORY[0x1F4188790](v73);
  uint64_t v14 = (char *)v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Proto_Timestamp(0);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (void *)((char *)v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)v72 - v19;
  uint64_t v83 = type metadata accessor for Proto_Value(0);
  uint64_t v75 = *(void *)(v83 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v83);
  uint64_t v82 = (uint64_t)v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  unint64_t v78 = (char *)v72 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v81 = (uint64_t)v72 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v84 = (char *)v72 - v27;
  uint64_t v28 = *v1;
  self;
  if (objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_needToFinalizeTimestamps))
  {
    uint64_t v29 = *(void *)(a1 + 16);
    self;
    id v85 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_finalizedInContext_, v29);
    id v30 = v85;
    CRString.Cursor.encode(to:)(a1);

    return;
  }
  uint64_t v31 = v86;
  uint64_t v32 = sub_1C3F6DD10();
  if (!v31)
  {
    v72[1] = a1;
    v72[3] = 0;
    uint64_t v86 = v32;
    swift_retain();
    uint64_t v33 = v84;
    sub_1C4496888();
    uint64_t v34 = *(int *)(v83 + 20);
    if (qword_1EBBBF8C8 != -1) {
      swift_once();
    }
    *(void *)&v33[v34] = qword_1EBBBF8B8;
    self;
    uint64_t v35 = (void *)swift_dynamicCastObjCClassUnconditional();
    swift_retain();
    id v36 = v28;
    id v37 = objc_msgSend(v35, sel_timestamp);
    type metadata accessor for ObjCTimestamp(0);
    uint64_t v38 = swift_dynamicCastClassUnconditional();
    sub_1C3FF29B0(v38 + OBJC_IVAR___ObjCTimestamp_timestamp, (uint64_t)v14, type metadata accessor for Timestamp);
    v72[2] = v36;

    *uint64_t v18 = 0;
    v18[1] = 0;
    sub_1C4496888();
    sub_1C3FF29B0((uint64_t)v14, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Replica);
    uint64_t v39 = sub_1C3FA10C4((uint64_t)v12);
    uint64_t v40 = sub_1C4496678();
    (*(void (**)(char *, uint64_t))(*(void *)(v40 - 8) + 8))(v12, v40);
    uint64_t v41 = *(void *)&v14[*(int *)(v73 + 20)];
    *uint64_t v18 = v39;
    v18[1] = v41;
    sub_1C3F8AB08((uint64_t)v18, (uint64_t)v20, type metadata accessor for Proto_Timestamp);
    sub_1C3F8AFE8((uint64_t)v14, type metadata accessor for Timestamp);
    uint64_t v42 = (uint64_t)v84;
    sub_1C43EEC70((uint64_t)v20);
    sub_1C3FF29B0(v42, v81, type metadata accessor for Proto_Value);
    uint64_t v43 = v86 + OBJC_IVAR____TtCC9Coherence9CREncoder16CRValueContainer_value;
    swift_beginAccess();
    uint64_t v44 = *(int *)(v83 + 20);
    uint64_t v73 = v43;
    uint64_t v45 = *(void *)(v43 + v44)
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v46 = v74;
    sub_1C3F970C4(v45, v74, &qword_1EBBBF8A0);
    uint64_t v47 = type metadata accessor for Proto_Value.OneOf_TaggedOneOf(0);
    uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48);
    int v49 = v48(v46, 1, v47);
    uint64_t v50 = MEMORY[0x1E4FBC860];
    if (v49 == 1)
    {
      sub_1C3F962E0(v46, &qword_1EBBBF8A0);
      uint64_t v51 = v76;
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v51 = v76;
      if (EnumCaseMultiPayload == 13)
      {
        sub_1C3F8AB08(v46, (uint64_t)v76, type metadata accessor for Proto_CustomCRValue);
        goto LABEL_12;
      }
      sub_1C3F8AFE8(v46, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    void *v51 = v50;
    v51[1] = v50;
    sub_1C4496888();
LABEL_12:
    unint64_t v53 = v51[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v53 = sub_1C3FA0A88(0, *(void *)(v53 + 16) + 1, 1, v53, &qword_1EBBBC680, type metadata accessor for Proto_Value, type metadata accessor for Proto_Value);
    }
    unint64_t v55 = *(void *)(v53 + 16);
    unint64_t v54 = *(void *)(v53 + 24);
    if (v55 >= v54 >> 1) {
      unint64_t v53 = sub_1C3FA0A88(v54 > 1, v55 + 1, 1, v53, &qword_1EBBBC680, type metadata accessor for Proto_Value, type metadata accessor for Proto_Value);
    }
    *(void *)(v53 + 16) = v55 + 1;
    unint64_t v56 = (*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
    uint64_t v57 = *(void *)(v75 + 72);
    sub_1C3F8AB08(v81, v53 + v56 + v57 * v55, type metadata accessor for Proto_Value);
    v51[1] = v53;
    uint64_t v58 = v73;
    sub_1C3F6FE54((uint64_t)v51);
    swift_endAccess();
    uint64_t v59 = (uint64_t)v78;
    sub_1C4496888();
    uint64_t v60 = v83;
    *(void *)(v59 + *(int *)(v83 + 20)) = qword_1EBBBF8B8;
    self;
    char v61 = (void *)swift_dynamicCastObjCClassUnconditional();
    swift_retain();
    sub_1C43EEEE0((uint64_t)objc_msgSend(v61, sel_affinity));
    sub_1C3FF29B0(v59, v82, type metadata accessor for Proto_Value);
    swift_beginAccess();
    uint64_t v62 = *(void *)(v58 + *(int *)(v60 + 20))
        + OBJC_IVAR____TtCV9Coherence11Proto_ValueP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
    swift_beginAccess();
    uint64_t v63 = v62;
    uint64_t v64 = v77;
    sub_1C3F970C4(v63, v77, &qword_1EBBBF8A0);
    if (v48(v64, 1, v47) == 1)
    {
      sub_1C3F962E0(v64, &qword_1EBBBF8A0);
      uint64_t v65 = v79;
      uint64_t v66 = (uint64_t)v84;
    }
    else
    {
      int v67 = swift_getEnumCaseMultiPayload();
      uint64_t v65 = v79;
      uint64_t v66 = (uint64_t)v84;
      if (v67 == 13)
      {
        sub_1C3F8AB08(v64, (uint64_t)v79, type metadata accessor for Proto_CustomCRValue);
LABEL_22:
        unint64_t v69 = v65[1];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v69 = sub_1C3FA0A88(0, *(void *)(v69 + 16) + 1, 1, v69, &qword_1EBBBC680, type metadata accessor for Proto_Value, type metadata accessor for Proto_Value);
        }
        unint64_t v71 = *(void *)(v69 + 16);
        unint64_t v70 = *(void *)(v69 + 24);
        if (v71 >= v70 >> 1) {
          unint64_t v69 = sub_1C3FA0A88(v70 > 1, v71 + 1, 1, v69, &qword_1EBBBC680, type metadata accessor for Proto_Value, type metadata accessor for Proto_Value);
        }
        *(void *)(v69 + 16) = v71 + 1;
        sub_1C3F8AB08(v82, v69 + v56 + v71 * v57, type metadata accessor for Proto_Value);
        v65[1] = v69;
        sub_1C3F6FE54((uint64_t)v65);
        swift_endAccess();
        swift_release();
        sub_1C3F8AFE8(v59, type metadata accessor for Proto_Value);
        sub_1C3F8AFE8(v66, type metadata accessor for Proto_Value);
        return;
      }
      sub_1C3F8AFE8(v64, type metadata accessor for Proto_Value.OneOf_TaggedOneOf);
    }
    uint64_t v68 = MEMORY[0x1E4FBC860];
    *uint64_t v65 = MEMORY[0x1E4FBC860];
    v65[1] = v68;
    sub_1C4496888();
    goto LABEL_22;
  }
}

void CRString.Cursor.finalizeTimestamps(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  self;
  id v4 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_finalizedInContext_, a1);

  *uint64_t v1 = v4;
}

Swift::Bool __swiftcall CRString.Cursor.needToFinalizeTimestamps()()
{
  return objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_needToFinalizeTimestamps);
}

void CRString.Cursor.minEncodingVersion.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t static CRString.Cursor.== infix(_:_:)()
{
  return sub_1C4497B08() & 1;
}

uint64_t sub_1C3FEF9EC()
{
  return sub_1C4497B08() & 1;
}

id sub_1C3FEFA40()
{
  return *v0;
}

uint64_t sub_1C3FEFA48@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

id sub_1C3FEFA50()
{
  return objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_needToFinalizeTimestamps);
}

void sub_1C3FEFAA0(uint64_t a1)
{
  uint64_t v3 = *v1;
  self;
  id v4 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), sel_finalizedInContext_, a1);

  *uint64_t v1 = v4;
}

uint64_t sub_1C3FEFB14@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return CRString.Cursor.init(from:)(a1, a2);
}

void sub_1C3FEFB2C(uint64_t a1)
{
}

void sub_1C3FEFB44(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

Coherence::CRString::Cursor __swiftcall CRString.cursor(at:affinity:)(Swift::Int at, Coherence::CRAffinity affinity)
{
  uint64_t v6 = v2;
  id v8 = *(id *)(*(void *)v3 + 16);
  sub_1C3FEFBBC(v8, at, affinity, v6);

  return result;
}

id sub_1C3FEFBBC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, void *a4@<X8>)
{
  int v8 = a3;
  id v9 = objc_msgSend(a1, sel_length);
  if (v8)
  {
    if (__OFADD__(v9, 1))
    {
      __break(1u);
    }
    else if ((uint64_t)v9 + 1 > a2)
    {
      uint64_t v10 = a3 == 2;
LABEL_7:
      id result = objc_msgSend(a1, sel_mergeableIndexForCharacterIndex_affinity_, a2, v10);
      *a4 = result;
      return result;
    }
  }
  else if ((uint64_t)v9 > a2)
  {
    uint64_t v10 = 2;
    goto LABEL_7;
  }
  id result = (id)sub_1C4497F58();
  __break(1u);
  return result;
}

void CRString.cursor(range:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v7 = *(id *)(*(void *)v3 + 16);
  sub_1C3FEFD1C(v7, a1, a2, a3);
}

id sub_1C3FEFD1C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (a2 < 0) {
    goto LABEL_11;
  }
  id v8 = objc_msgSend(a1, sel_length);
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if ((uint64_t)v8 + 1 <= a3)
  {
LABEL_11:
    id result = (id)sub_1C4497F58();
    __break(1u);
    return result;
  }
  id v9 = objc_msgSend(a1, sel_mergeableIndexForCharacterIndex_affinity_, a3, 0);
  if (__OFSUB__(a3, a2))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  id v10 = v9;
  if (a3 == a2) {
    id result = v9;
  }
  else {
    id result = objc_msgSend(a1, sel_mergeableIndexForCharacterIndex_affinity_, a2, 1);
  }
  *a4 = result;
  a4[1] = v10;
  return result;
}

Swift::Int_optional __swiftcall CRString.index(of:)(Coherence::CRString::Cursor of)
{
  uint64_t v2 = *(void **)(*(void *)v1 + 16);
  self;
  uint64_t v3 = swift_dynamicCastObjCClassUnconditional();
  id v4 = v2;
  id v5 = objc_msgSend(v4, sel_characterIndexForIndex_, v3);
  uint64_t v6 = sub_1C4496268();

  Swift::Bool v7 = v5 == (id)v6;
  if (v5 == (id)v6) {
    Swift::Int v8 = 0;
  }
  else {
    Swift::Int v8 = (Swift::Int)v5;
  }
  result.char value = v8;
  result.is_nil = v7;
  return result;
}

void CRString.range(of:)()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 16);
  self;
  uint64_t v2 = swift_dynamicCastObjCClassUnconditional();
  id v3 = v1;
  id v4 = objc_msgSend(v3, sel_characterIndexForIndex_, v2);
  self;
  id v5 = objc_msgSend(v3, sel_characterIndexForIndex_, swift_dynamicCastObjCClassUnconditional());
  if (v4 == (id)sub_1C4496268())
  {
  }
  else
  {
    uint64_t v6 = sub_1C4496268();

    if (v5 != (id)v6 && (uint64_t)v5 < (uint64_t)v4) {
      __break(1u);
    }
  }
}

void CRString.cursor(range:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v9 = *(id *)(*(void *)v4 + 16);
  if (a3 < 0) {
    goto LABEL_11;
  }
  id v10 = v9;
  id v11 = objc_msgSend(v9, sel_length);
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if ((uint64_t)v11 + 1 <= a4)
  {
LABEL_11:
    sub_1C4497F58();
    __break(1u);
    return;
  }
  id v12 = objc_msgSend(v10, sel_mergeableIndexForCharacterIndex_affinity_, a4, 0);
  if (__OFSUB__(a4, a3))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  id v13 = v12;
  if (a4 == a3) {
    id v14 = v12;
  }
  else {
    id v14 = objc_msgSend(v10, sel_mergeableIndexForCharacterIndex_affinity_, a3, 1);
  }
  id v15 = v14;

  *a1 = v15;
  *a2 = v13;
}

void CRString.range(of:)(id *a1, void **a2)
{
  id v3 = *a2;
  uint64_t v4 = *v2;
  id v5 = *a1;
  uint64_t v6 = *(void **)(v4 + 16);
  id v7 = v3;
  self;
  uint64_t v8 = swift_dynamicCastObjCClassUnconditional();
  id v9 = v6;
  id v10 = objc_msgSend(v9, sel_characterIndexForIndex_, v8);
  self;
  id v11 = objc_msgSend(v9, sel_characterIndexForIndex_, swift_dynamicCastObjCClassUnconditional());
  if (v10 == (id)sub_1C4496268())
  {
  }
  else
  {
    uint64_t v12 = sub_1C4496268();

    if (v11 != (id)v12 && (uint64_t)v11 < (uint64_t)v10) {
      __break(1u);
    }
  }
}

void sub_1C3FF0214(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, void *a3@<X8>)
{
  id v7 = *(id *)(*(void *)v3 + 16);
  sub_1C3FEFBBC(v7, a1, a2, a3);
}

void sub_1C3FF0280(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v7 = *(id *)(*(void *)v3 + 16);
  sub_1C3FEFD1C(v7, a1, a2, a3);
}

id sub_1C3FF02F0()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 16);
  self;
  uint64_t v2 = swift_dynamicCastObjCClassUnconditional();
  id v3 = v1;
  id v4 = objc_msgSend(v3, sel_characterIndexForIndex_, v2);
  uint64_t v5 = sub_1C4496268();

  if (v4 == (id)v5) {
    return 0;
  }
  else {
    return v4;
  }
}

void sub_1C3FF037C()
{
}

void sub_1C3FF0398(id *a1, void **a2)
{
}

void sub_1C3FF0478(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void v25[3] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v5 = type metadata accessor for Proto_Sequence(0);
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  id v10 = (objc_class *)type metadata accessor for CRStringEncoder(0);
  id v11 = (char *)objc_allocWithZone(v10);
  uint64_t v12 = &v11[OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence];
  swift_retain();
  id v13 = v11;
  sub_1C4496888();
  uint64_t v14 = *(int *)(v6 + 28);
  if (qword_1EBBBC000 != -1) {
    swift_once();
  }
  *(void *)&v12[v14] = qword_1EBBBBFF0;
  id v15 = &v13[OBJC_IVAR____TtC9Coherence15CRStringEncoder_subsequence];
  swift_retain();
  sub_1C4496888();
  uint64_t v16 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  if (qword_1EBBBC0C0 != -1) {
    swift_once();
  }
  *(void *)&v15[v16] = qword_1EBBBC0B8;
  *(void *)&v13[OBJC_IVAR____TtC9Coherence15CRStringEncoder_encoder] = a1;
  swift_retain();
  swift_retain();

  v24.receiver = v13;
  v24.super_class = v10;
  id v17 = objc_msgSendSuper2(&v24, sel_init);
  swift_release();
  id v18 = objc_msgSend(*(id *)(v9 + 16), sel_fullyRenamed_, *(void *)(a1 + 16));
  v25[0] = 0;
  unsigned int v19 = objc_msgSend(v18, sel_saveToEncoder_error_, v17, v25);

  if (v19)
  {
    id v20 = v25[0];
    sub_1C4496888();
    uint64_t v21 = *(int *)(type metadata accessor for Proto_CRDT(0) + 20);
    if (qword_1EBBC0668 != -1) {
      swift_once();
    }
    *(void *)(a2 + v21) = qword_1EBBC0660;
    uint64_t v22 = (uint64_t)v17 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence;
    swift_beginAccess();
    sub_1C3FF29B0(v22, (uint64_t)v8, type metadata accessor for Proto_Sequence);
    swift_retain();
    sub_1C43EEEE8((uint64_t)v8);
  }
  else
  {
    id v23 = v25[0];
    sub_1C44963A8();

    swift_willThrow();
  }
}

uint64_t sub_1C3FF0784()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 16);
  swift_retain();
  id v2 = objc_msgSend(v1, sel_attributedString);
  self;
  swift_dynamicCastObjCClassUnconditional();
  sub_1C44971B8();
  swift_release();
  swift_unknownObjectRelease();
  sub_1C4497278();
  return swift_bridgeObjectRelease();
}

Swift::Bool __swiftcall CRString.Partial.merge(delta:)(Coherence::CRString::Partial *delta)
{
  return 0;
}

Swift::Bool __swiftcall CRString.Partial.canMerge(delta:)(Coherence::CRString::Partial *delta)
{
  return 0;
}

uint64_t CRString.Partial.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v36 = a2;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0648);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1F4188790](v37);
  uint64_t v38 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Proto_CRDT(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC04F8);
  MEMORY[0x1F4188790](v11 - 8);
  id v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1 + OBJC_IVAR____TtC9Coherence9CRDecoder_crdt;
  swift_beginAccess();
  sub_1C3F970C4(v14, (uint64_t)v13, &qword_1EBBC04F8);
  LODWORD(v14) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7);
  sub_1C3F962E0((uint64_t)v13, &qword_1EBBC04F8);
  if (v14 == 1)
  {
    sub_1C3FE3FF0();
    swift_allocError();
    *(void *)uint64_t v15 = 0xD000000000000014;
    *(void *)(v15 + 8) = 0x80000001C44B0EE0;
    *(unsigned char *)(v15 + 16) = 0;
    swift_willThrow();
    return swift_release();
  }
  type metadata accessor for CRDecoder.CRDTContainer();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a1;
  *(void *)(inited + 24) = 0;
  *(unsigned char *)(inited + 32) = 1;
  swift_retain();
  sub_1C3FBA924((uint64_t)v10);
  uint64_t v17 = *(void *)&v10[*(int *)(v7 + 20)]
      + OBJC_IVAR____TtCV9Coherence10Proto_CRDTP33_8F93C82C9C5F20EAB9E21F7119431FBB13_StorageClass__taggedOneOf;
  swift_beginAccess();
  sub_1C3F970C4(v17, (uint64_t)v5, &qword_1EBBC0648);
  uint64_t v18 = type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v5, 1, v18) == 1)
  {
    sub_1C3F962E0((uint64_t)v5, &qword_1EBBC0648);
    uint64_t v19 = v38;
LABEL_8:
    sub_1C4496888();
    uint64_t v21 = *(int *)(v37 + 20);
    if (qword_1EBBBC000 != -1) {
      swift_once();
    }
    *(void *)(v19 + v21) = qword_1EBBBBFF0;
    swift_retain();
    goto LABEL_11;
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v19 = v38;
  if (EnumCaseMultiPayload != 4)
  {
    sub_1C3F8AFE8((uint64_t)v5, type metadata accessor for Proto_CRDT.OneOf_TaggedOneOf);
    goto LABEL_8;
  }
  sub_1C3F8AB08((uint64_t)v5, v38, type metadata accessor for Proto_Sequence);
LABEL_11:
  sub_1C3F8AFE8((uint64_t)v10, type metadata accessor for Proto_CRDT);
  uint64_t v22 = (objc_class *)type metadata accessor for CRStringDecoder(0);
  id v23 = (char *)objc_allocWithZone(v22);
  objc_super v24 = &v23[OBJC_IVAR____TtC9Coherence15CRStringDecoder_subsequence];
  swift_retain();
  uint64_t v25 = v23;
  sub_1C4496888();
  uint64_t v26 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
  if (qword_1EBBBC0C0 != -1) {
    swift_once();
  }
  *(void *)&v24[v26] = qword_1EBBBC0B8;
  sub_1C3FF29B0(v19, (uint64_t)&v25[OBJC_IVAR____TtC9Coherence15CRStringDecoder_encoded], type metadata accessor for Proto_Sequence);
  *(void *)&v25[OBJC_IVAR____TtC9Coherence15CRStringDecoder_decoder] = a1;
  swift_retain();
  swift_retain();

  v40.receiver = v25;
  v40.super_class = v22;
  id v27 = objc_msgSendSuper2(&v40, sel_init);
  swift_release();
  sub_1C3F8AFE8(v19, type metadata accessor for Proto_Sequence);
  id v28 = objc_allocWithZone((Class)CRTTMergeableStringDelta);
  id v39 = 0;
  id v29 = v27;
  id v30 = objc_msgSend(v28, sel_initWithDecoder_error_, v29, &v39);
  if (v30)
  {
    id v31 = v30;
    id v32 = v39;
    swift_release();

    swift_setDeallocating();
    uint64_t result = swift_release();
    *id v36 = v31;
    return result;
  }
  id v34 = v39;
  sub_1C44963A8();

  swift_willThrow();
  swift_release();

  swift_setDeallocating();
  return swift_release();
}

uint64_t CRString.Partial.encode(to:)(uint64_t a1)
{
  void v25[3] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for Proto_Sequence(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t result = sub_1C3F62C10();
  if (!v2)
  {
    uint64_t v9 = result;
    id v10 = (objc_class *)type metadata accessor for CRStringEncoder(0);
    uint64_t v11 = (char *)objc_allocWithZone(v10);
    uint64_t v12 = &v11[OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence];
    uint64_t v23 = v9;
    swift_retain();
    swift_retain();
    id v13 = v11;
    sub_1C4496888();
    uint64_t v14 = *(int *)(v4 + 20);
    if (qword_1EBBBC000 != -1) {
      swift_once();
    }
    *(void *)&v12[v14] = qword_1EBBBBFF0;
    uint64_t v15 = &v13[OBJC_IVAR____TtC9Coherence15CRStringEncoder_subsequence];
    swift_retain();
    sub_1C4496888();
    uint64_t v16 = *(int *)(type metadata accessor for Proto_Subsequence(0) + 20);
    if (qword_1EBBBC0C0 != -1) {
      swift_once();
    }
    *(void *)&v15[v16] = qword_1EBBBC0B8;
    *(void *)&v13[OBJC_IVAR____TtC9Coherence15CRStringEncoder_encoder] = a1;
    swift_retain();
    swift_retain();

    v24.receiver = v13;
    v24.super_class = v10;
    id v17 = objc_msgSendSuper2(&v24, sel_init);
    swift_release();
    v25[0] = 0;
    unsigned __int8 v18 = objc_msgSend(v7, sel_saveToEncoder_error_, v17, v25);
    id v19 = v25[0];
    if (v18)
    {
      uint64_t v20 = (uint64_t)v17 + OBJC_IVAR____TtC9Coherence15CRStringEncoder_sequence;
      swift_beginAccess();
      sub_1C3FF29B0(v20, (uint64_t)v6, type metadata accessor for Proto_Sequence);
      swift_beginAccess();
      id v21 = v19;
      sub_1C43EEEE8((uint64_t)v6);
    }
    else
    {
      id v22 = v25[0];
      sub_1C44963A8();

      swift_willThrow();
    }

    return swift_release();
  }
  return result;
}

uint64_t sub_1C3FF1128@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return CRString.Partial.init(from:)(a1, a2);
}

uint64_t sub_1C3FF1140(uint64_t a1)
{
  return CRString.Partial.encode(to:)(a1);
}

uint64_t sub_1C3FF1158()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C3FF1190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C3FEDBDC(a1, a2, a3, a4, v4);
}

void *sub_1C3FF1198(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0250);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x1E4FBC860];
      id v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C3FF23E4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C3FF12A8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBBF48);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x1E4FBC860];
      id v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C3FF22F0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C3FF13B8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1C3FF1884(a1, a2, a3, a4, &qword_1EA39BFB0);
}

uint64_t sub_1C3FF13CC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C3FB444C(a1, a2, a3, a4, &qword_1EA39BFE8, &qword_1EA39BFF0);
}

void *sub_1C3FF13E0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BF28);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x1E4FBC860];
      id v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C3FF24D8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C3FF14F0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BF10);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (void *)MEMORY[0x1E4FBC860];
      id v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C3FF2874(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C3FF1600(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C3FA0A88(a1, a2, a3, a4, qword_1EBBBF298, type metadata accessor for Proto_CRDT, type metadata accessor for Proto_CRDT);
}

uint64_t sub_1C3FF1634(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C3FA0A88(a1, a2, a3, a4, &qword_1EA39BFC0, type metadata accessor for Proto_Asset, type metadata accessor for Proto_Asset);
}

char *sub_1C3FF1668(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39B0A0);
      id v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1C3FF2E14(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1C3FF1764(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBBA228);
      id v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      int64_t v12 = v11 - 32;
      if (v11 < 32) {
        int64_t v12 = v11 - 31;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      id v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (char *)MEMORY[0x1E4FBC860];
      id v13 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32]) {
          memmove(v13, a4 + 32, 2 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1C3FF2EFC(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C3FF1870(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1C3FF1884(a1, a2, a3, a4, (uint64_t *)&unk_1EA39B898);
}

void *sub_1C3FF1884(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      uint64_t v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v11 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v14 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C3FF25CC(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_1C3FF19A0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BFC8);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      int64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1C3FF2A18(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C3FF1AC8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BF50);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      int64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1C3FF2B08(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C3FF1BEC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1C3FA0ECC(a1, a2, a3, a4, qword_1EA39B148);
}

void *sub_1C3FF1BF8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BF68);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C3FF2D28(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C3FF1D08(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BFB8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C3FF2FE8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C3FF1E18(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C3FA0A88(a1, a2, a3, a4, &qword_1EA39BF30, type metadata accessor for Proto_Sequence.AttributeRun, type metadata accessor for Proto_Sequence.AttributeRun);
}

uint64_t sub_1C3FF1E4C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C3FA0A88(a1, a2, a3, a4, &qword_1EA39BF38, type metadata accessor for Proto_Sequence.AttributeRun.Attribute, type metadata accessor for Proto_Sequence.AttributeRun.Attribute);
}

void *sub_1C3FF1E80(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1C3FF1E98(a1, a2, a3, a4, &qword_1EA39BFA8);
}

void *sub_1C3FF1E8C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1C3FF1E98(a1, a2, a3, a4, &qword_1EA39BF70);
}

void *sub_1C3FF1E98(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (void *)swift_allocObject();
      int64_t v12 = _swift_stdlib_malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      uint64_t v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v11 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v14 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4]) {
          memmove(v14, a4 + 4, 16 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C3FF30DC(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_1C3FF1FA4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BF88);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      int64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1C3FF2C18(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C3FF20CC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BF78);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C3FF31C8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C3FF21DC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C3FB444C(a1, a2, a3, a4, &qword_1EBBBB2C8, &qword_1EBBC0798);
}

unint64_t sub_1C3FF21F0(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BFA0);
  uint64_t v3 = (void *)sub_1C4497FD8();
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = sub_1C40619F4(v5);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  uint64_t v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    void v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    uint64_t v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_retain();
    unint64_t result = sub_1C40619F4(v5);
    uint64_t v8 = v13;
    uint64_t v4 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1C3FF22F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3FF23E4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3FF24D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3FF25CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3FF26BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_CRDT(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_UNKNOWN **sub_1C3FF2720()
{
  return &protocol witness table for CRString.Partial;
}

unint64_t sub_1C3FF272C(uint64_t a1)
{
  unint64_t result = sub_1C3FF2754();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1C3FF2754()
{
  unint64_t result = qword_1EA39BE80;
  if (!qword_1EA39BE80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA39BE80);
  }
  return result;
}

_UNKNOWN **sub_1C3FF27A8()
{
  return &protocol witness table for CRString.Cursor;
}

ValueMetadata *type metadata accessor for CRString()
{
  return &type metadata for CRString;
}

ValueMetadata *type metadata accessor for CRString.ObservableDifference()
{
  return &type metadata for CRString.ObservableDifference;
}

uint64_t getEnumTagSinglePayload for CRString.ObservableDifference.Edit(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CRString.ObservableDifference.Edit(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CRString.ObservableDifference.Edit()
{
  return &type metadata for CRString.ObservableDifference.Edit;
}

ValueMetadata *type metadata accessor for CRString.MutatingAction()
{
  return &type metadata for CRString.MutatingAction;
}

ValueMetadata *type metadata accessor for CRString.Cursor()
{
  return &type metadata for CRString.Cursor;
}

ValueMetadata *type metadata accessor for CRString.Partial()
{
  return &type metadata for CRString.Partial;
}

_OWORD *sub_1C3FF2864(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1C3FF2874(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3FF2968(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C3FF29B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

char *sub_1C3FF2A18(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    size_t v6 = 24 * v4;
    char v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3FF2B08(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BF58);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3FF2C18(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BF90);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

char *sub_1C3FF2D28(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    char v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1C4497FE8();
  __break(1u);
  return result;
}

char *sub_1C3FF2E14(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)sub_1C4497FE8();
  __break(1u);
  return result;
}

char *sub_1C3FF2EFC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 2 * a1 + 32);
    size_t v6 = 2 * v4;
    char v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3FF2FE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

char *sub_1C3FF30DC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    char v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3FF31C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39BF80);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C4497FE8();
  __break(1u);
  return result;
}

uint64_t sub_1C3FF32D4(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t CRKeyPath.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t CRKeyPath.data.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_1C3F7E324(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t sub_1C3FF335C(uint64_t a1, unint64_t a2)
{
  v28[5] = *MEMORY[0x1E4F143B8];
  uint64_t v28[3] = MEMORY[0x1E4F277C0];
  v28[4] = MEMORY[0x1E4F277B0];
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v28, MEMORY[0x1E4F277C0]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_1C3F7E324(a1, a2);
      sub_1C3F7E324(v5, v6);
      uint64_t v8 = (unsigned char *)sub_1C4496298();
      if (v8)
      {
        uint64_t v9 = sub_1C44962C8();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = sub_1C44962B8();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      sub_1C3F5E190(v8, v13, &v27);
      sub_1C3F7E2CC(v5, v6);
LABEL_27:
      sub_1C3F7E2CC(a1, a2);
      uint64_t v24 = v27;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      sub_1C3F7E324(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v16 = (unsigned char *)sub_1C4496298();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = sub_1C44962C8();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = sub_1C44962B8();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      id v22 = &v16[v21];
      if (v16) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      sub_1C3F5E190(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      sub_1C3F7E324(a1, a2);
      char v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      sub_1C3F7E324(a1, a2);
      char v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      sub_1C3F5E190(v26, v7, &v27);
      goto LABEL_27;
  }
}

double CRKeyPath.init(_:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&long long v10 = sub_1C3F5E0D0((uint64_t)&unk_1F1F9DA50);
  *((void *)&v10 + 1) = v4;
  uint64_t v5 = sub_1C3F5DF48();
  unint64_t v7 = v6;
  sub_1C4496588();
  sub_1C3F7E2CC(v5, v7);
  uint64_t v8 = sub_1C4496678();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
  double result = *(double *)&v10;
  *a2 = v10;
  return result;
}

uint64_t CRKeyPath.init(_:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = sub_1C4497208();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v11 = sub_1C3F5E0D0((uint64_t)&unk_1F1F9DA78);
  *((void *)&v11 + 1) = v6;
  sub_1C44971F8();
  uint64_t v7 = sub_1C44971C8();
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v9 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    sub_1C4496588();
    uint64_t result = sub_1C3F6C6F0(v7, v9);
    *a1 = v11;
  }
  return result;
}

double CRKeyPath.init(_:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  *(void *)&long long v8 = sub_1C3F5E0D0((uint64_t)&unk_1F1F9DA28);
  *((void *)&v8 + 1) = v6;
  sub_1C4496588();
  sub_1C3F7E2CC(a1, a2);
  double result = *(double *)&v8;
  *a3 = v8;
  return result;
}

double CRKeyPath.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  long long v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v35 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v11 = (char *)&v30 - v10;
  *(void *)&long long v43 = sub_1C3F5E0D0((uint64_t)&unk_1F1F9DAA0);
  *((void *)&v43 + 1) = v12;
  *(void *)__uuid_t dst = 0;
  sub_1C4497348();
  if (__OFADD__(v39, 1)) {
LABEL_22:
  }
    __break(1u);
  id v34 = a3;
  sub_1C4496518();
  uint64_t v31 = v6;
  uint64_t v32 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  sub_1C44972B8();
  uint64_t v33 = a2;
  swift_getAssociatedConformanceWitness();
  sub_1C4497B58();
  unint64_t v13 = v40;
  if (v40 >> 60 != 15)
  {
    uint64_t v15 = v39;
    long long v36 = xmmword_1C449B490;
    while (2)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0818);
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = v36;
      uint64_t v19 = v18;
      LOBYTE(v20) = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          LODWORD(v20) = HIDWORD(v15) - v15;
          if (__OFSUB__(HIDWORD(v15), v15)) {
            goto LABEL_21;
          }
          unint64_t v20 = (int)v20;
LABEL_12:
          if ((v20 & 0x8000000000000000) != 0 || v20 >= 0x100)
          {
            sub_1C4497F48();
            __break(1u);
            JUMPOUT(0x1C3FF3DFCLL);
          }
LABEL_14:
          *(unsigned char *)(v18 + 32) = v20;
          uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC0970);
          uint64_t v41 = v24;
          uint64_t v42 = sub_1C3F815A4(&qword_1EBBC0978, &qword_1EBBC0970);
          uint64_t v39 = v19;
          uint64_t v25 = __swift_project_boxed_opaque_existential_1(&v39, v24);
          uint64_t v26 = *v25;
          size_t v27 = *(void *)(*v25 + 16);
          if (v27)
          {
            if (v27 <= 0xE)
            {
              memset(__dst, 0, sizeof(__dst));
              unsigned __int8 v38 = v27;
              memcpy(__dst, (const void *)(v26 + 32), v27);
              uint64_t v16 = *(void *)__dst;
              unint64_t v17 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v38 << 48);
              swift_bridgeObjectRetain();
            }
            else
            {
              sub_1C44962E8();
              swift_allocObject();
              swift_bridgeObjectRetain();
              uint64_t v28 = sub_1C4496288();
              uint64_t v29 = v28;
              if (v27 >= 0x7FFFFFFF)
              {
                sub_1C44964E8();
                uint64_t v16 = swift_allocObject();
                *(void *)(v16 + 16) = 0;
                *(void *)(v16 + 24) = v27;
                unint64_t v17 = v29 | 0x8000000000000000;
              }
              else
              {
                uint64_t v16 = v27 << 32;
                unint64_t v17 = v28 | 0x4000000000000000;
              }
            }
          }
          else
          {
            swift_bridgeObjectRetain();
            uint64_t v16 = 0;
            unint64_t v17 = 0xC000000000000000;
          }
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
          sub_1C4496588();
          sub_1C3F7E324(v15, v13);
          sub_1C4496588();
          sub_1C3F6C6F0(v15, v13);
          sub_1C3F7E2CC(v16, v17);
          sub_1C3F6C6F0(v15, v13);
          sub_1C4497B58();
          uint64_t v15 = v39;
          unint64_t v13 = v40;
          if (v40 >> 60 != 15) {
            continue;
          }
          goto LABEL_3;
        case 2uLL:
          uint64_t v22 = *(void *)(v15 + 16);
          uint64_t v21 = *(void *)(v15 + 24);
          BOOL v23 = __OFSUB__(v21, v22);
          unint64_t v20 = v21 - v22;
          if (!v23) {
            goto LABEL_12;
          }
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        case 3uLL:
          goto LABEL_14;
        default:
          LOBYTE(v20) = BYTE6(v13);
          goto LABEL_14;
      }
    }
  }
LABEL_3:
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, AssociatedTypeWitness);
  double result = *(double *)&v43;
  *id v34 = v43;
  return result;
}

void *sub_1C3FF3E0C@<X0>(void *result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *result + 1;
  if (__OFADD__(*result, 1))
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    JUMPOUT(0x1C3FF3E8CLL);
  }
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v6 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(v4) - v4;
      if (__OFSUB__(HIDWORD(v4), v4)) {
        goto LABEL_11;
      }
      uint64_t v6 = (int)v6;
LABEL_7:
      BOOL v10 = __OFADD__(v3, v6);
      uint64_t v11 = v3 + v6;
      if (v10) {
        goto LABEL_10;
      }
      *a3 = v11;
      return result;
    case 2uLL:
      uint64_t v9 = v4 + 16;
      uint64_t v8 = *(void *)(v4 + 16);
      uint64_t v7 = *(void *)(v9 + 8);
      BOOL v10 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v10) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v6 = BYTE6(v5);
      goto LABEL_7;
  }
}

uint64_t CRKeyPath.uuid.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  unint64_t v2 = v1[1];
  unint64_t v4 = v2 >> 62;
  switch(v2 >> 62)
  {
    case 1uLL:
      if (!((v3 ^ (unint64_t)(v3 << 32)) >> 32)) {
        goto LABEL_24;
      }
      goto LABEL_12;
    case 2uLL:
      uint64_t v6 = *(void *)(v3 + 16);
      uint64_t v7 = *(void *)(v3 + 24);
      if (v6 == v7) {
        goto LABEL_24;
      }
      if (v4 != 2) {
        goto LABEL_12;
      }
      uint64_t v8 = v7 - v6;
      if (!__OFSUB__(v7, v6)) {
        goto LABEL_14;
      }
      __break(1u);
LABEL_12:
      if (__OFSUB__(HIDWORD(v3), v3))
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v8 = HIDWORD(v3) - (int)v3;
LABEL_14:
      sub_1C3F7E324(v3, v2);
      if (v8 < 1)
      {
LABEL_4:
        sub_1C3F7E2CC(v3, v2);
      }
      else
      {
LABEL_15:
        int v9 = sub_1C44965A8();
        sub_1C3F7E2CC(v3, v2);
        if (v9 == 2)
        {
          if (v4)
          {
            if (v4 == 1)
            {
              uint64_t v10 = (int)v3;
              uint64_t v11 = v3 >> 32;
            }
            else
            {
              uint64_t v10 = *(void *)(v3 + 16);
              uint64_t v11 = *(void *)(v3 + 24);
            }
          }
          else
          {
            uint64_t v10 = 0;
            uint64_t v11 = BYTE6(v2);
          }
          if (v11 >= 1 && v11 >= v10)
          {
            uint64_t v12 = sub_1C4496528();
            sub_1C3FA2BEC(v12, v13);
            uint64_t v16 = sub_1C4496678();
            unint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
            uint64_t v18 = v16;
            uint64_t v19 = a1;
            uint64_t v20 = 0;
            goto LABEL_25;
          }
LABEL_29:
          __break(1u);
          JUMPOUT(0x1C3FF4088);
        }
      }
LABEL_24:
      uint64_t v14 = sub_1C4496678();
      unint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
      uint64_t v18 = v14;
      uint64_t v19 = a1;
      uint64_t v20 = 1;
LABEL_25:
      return v17(v19, v20, 1, v18);
    case 3uLL:
      goto LABEL_24;
    default:
      if ((v2 & 0xFF000000000000) == 0) {
        goto LABEL_24;
      }
      if (!BYTE6(v2)) {
        goto LABEL_4;
      }
      goto LABEL_15;
  }
}

void *CRKeyPath.components.getter()
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  unint64_t v3 = v2 >> 62;
  unint64_t v4 = 0;
  switch(v2 >> 62)
  {
    case 1uLL:
      if ((v1 ^ (unint64_t)(v1 << 32)) >> 32) {
        goto LABEL_13;
      }
      return 0;
    case 2uLL:
      uint64_t v5 = *(void *)(v1 + 16);
      uint64_t v6 = *(void *)(v1 + 24);
      if (v5 == v6) {
        return 0;
      }
      if (v3 != 2) {
        goto LABEL_13;
      }
      uint64_t v7 = v6 - v5;
      if (!__OFSUB__(v6, v5)) {
        goto LABEL_15;
      }
      __break(1u);
LABEL_13:
      if (__OFSUB__(HIDWORD(v1), v1)) {
        goto LABEL_63;
      }
      uint64_t v7 = HIDWORD(v1) - (int)v1;
LABEL_15:
      sub_1C3F7E324(v1, v2);
      if (v7 >= 1) {
        goto LABEL_16;
      }
      goto LABEL_4;
    case 3uLL:
      return v4;
    default:
      if ((v2 & 0xFF000000000000) == 0) {
        return 0;
      }
      if (BYTE6(v2))
      {
LABEL_16:
        int v8 = sub_1C44965A8();
        sub_1C3F7E2CC(v1, v2);
        unint64_t v4 = 0;
        if (v8 != 3) {
          return v4;
        }
        if (v3)
        {
          if (v3 == 1)
          {
            if (__OFSUB__(HIDWORD(v1), v1))
            {
LABEL_64:
              __break(1u);
LABEL_65:
              __break(1u);
            }
            uint64_t v9 = HIDWORD(v1) - (int)v1;
          }
          else
          {
            uint64_t v11 = *(void *)(v1 + 16);
            uint64_t v10 = *(void *)(v1 + 24);
            uint64_t v9 = v10 - v11;
            if (__OFSUB__(v10, v11)) {
              goto LABEL_65;
            }
          }
        }
        else
        {
          uint64_t v9 = BYTE6(v2);
        }
        if (v9 < 2) {
          return (void *)MEMORY[0x1E4FBC860];
        }
        unint64_t v4 = (void *)MEMORY[0x1E4FBC860];
        uint64_t v13 = 2;
        uint64_t v14 = 1;
        uint64_t v32 = v9;
        while (1)
        {
          if (v3)
          {
            if (v3 == 1)
            {
              if (v14 < (int)v1 || v14 >= v1 >> 32) {
                goto LABEL_57;
              }
              uint64_t v15 = sub_1C4496298();
              if (!v15)
              {
                __break(1u);
LABEL_67:
                __break(1u);
                JUMPOUT(0x1C3FF449CLL);
              }
              uint64_t v16 = v15;
              uint64_t v17 = sub_1C44962C8();
              uint64_t v18 = v14 - v17;
              if (__OFSUB__(v14, v17)) {
                goto LABEL_60;
              }
            }
            else
            {
              if (v14 < *(void *)(v1 + 16)) {
                goto LABEL_59;
              }
              if (v14 >= *(void *)(v1 + 24)) {
                goto LABEL_61;
              }
              uint64_t v20 = sub_1C4496298();
              if (!v20) {
                goto LABEL_67;
              }
              uint64_t v16 = v20;
              uint64_t v21 = sub_1C44962C8();
              uint64_t v18 = v14 - v21;
              if (__OFSUB__(v14, v21)) {
                goto LABEL_62;
              }
            }
            uint64_t v19 = *(unsigned __int8 *)(v16 + v18);
          }
          else
          {
            if (v14 >= BYTE6(v2)) {
              goto LABEL_58;
            }
            uint64_t v33 = v1;
            __int16 v34 = v2;
            char v35 = BYTE2(v2);
            char v36 = BYTE3(v2);
            char v37 = BYTE4(v2);
            char v38 = BYTE5(v2);
            uint64_t v19 = *((unsigned __int8 *)&v33 + v14);
          }
          uint64_t v22 = v13 + v19;
          if (__OFADD__(v13, v19)) {
            break;
          }
          if (v9 < v22) {
            return v4;
          }
          if (v22 < v13) {
            goto LABEL_54;
          }
          uint64_t v23 = sub_1C4496528();
          uint64_t v25 = sub_1C3FF335C(v23, v24);
          uint64_t v27 = v26;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v4 = sub_1C3FF12A8(0, v4[2] + 1, 1, v4);
          }
          unint64_t v29 = v4[2];
          unint64_t v28 = v4[3];
          if (v29 >= v28 >> 1) {
            unint64_t v4 = sub_1C3FF12A8((void *)(v28 > 1), v29 + 1, 1, v4);
          }
          uint64_t v4[2] = v29 + 1;
          uint64_t v30 = &v4[2 * v29];
          v30[4] = v25;
          v30[5] = v27;
          BOOL v31 = __OFADD__(v14, v19 + 1);
          v14 += v19 + 1;
          if (v31) {
            goto LABEL_55;
          }
          uint64_t v13 = v14 + 1;
          if (__OFADD__(v14, 1)) {
            goto LABEL_56;
          }
          uint64_t v9 = v32;
          LODWORD(v3) = v2 >> 62;
          if (v32 < v13) {
            return v4;
          }
        }
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
LABEL_4:
      sub_1C3F7E2CC(v1, v2);
      return 0;
  }
}

uint64_t static CRKeyPath.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1C3FAD630(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

uint64_t CRKeyPath.hash(into:)()
{
  return sub_1C4496568();
}

uint64_t sub_1C3FF44C8()
{
  uint64_t v1 = sub_1C4496678();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  unint64_t v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1C4497208();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = *v0;
  unint64_t v6 = v0[1];
  unint64_t v8 = v6 >> 62;
  switch(v6 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v7), v7))
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        JUMPOUT(0x1C3FF4A98);
      }
      uint64_t v9 = HIDWORD(v7) - (int)v7;
LABEL_7:
      sub_1C3F7E324(v7, v6);
      if (v9 < 1)
      {
LABEL_12:
        sub_1C3F7E2CC(v7, v6);
        sub_1C4496548();
        *(void *)&long long v45 = 0x3A6E776F6E6B6E75;
        *((void *)&v45 + 1) = 0xE900000000000020;
LABEL_13:
        sub_1C4497268();
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_8:
        int v12 = sub_1C44965A8();
        switch(v12)
        {
          case 0:
            sub_1C3F7E2CC(v7, v6);
            return sub_1C4496548();
          case 1:
            sub_1C3F7E2CC(v7, v6);
            *(void *)&long long v45 = 39;
            *((void *)&v45 + 1) = 0xE100000000000000;
            if (v8)
            {
              if (v8 == 1)
              {
                uint64_t v29 = (int)v7;
                uint64_t v30 = v7 >> 32;
              }
              else
              {
                uint64_t v29 = *(void *)(v7 + 16);
                uint64_t v30 = *(void *)(v7 + 24);
              }
            }
            else
            {
              uint64_t v29 = 0;
              uint64_t v30 = BYTE6(v6);
            }
            if (v30 < 1 || v30 < v29) {
              goto LABEL_48;
            }
            uint64_t v38 = sub_1C4496528();
            unint64_t v40 = v39;
            sub_1C44971F8();
            sub_1C44971D8();
            uint64_t v42 = v41;
            sub_1C3F7E2CC(v38, v40);
            if (!v42) {
              goto LABEL_46;
            }
            sub_1C4497268();
            swift_bridgeObjectRelease();
            sub_1C4497268();
            break;
          case 2:
            sub_1C3F7E2CC(v7, v6);
            if (v8)
            {
              if (v8 == 1)
              {
                uint64_t v15 = (int)v7;
                uint64_t v16 = v7 >> 32;
              }
              else
              {
                uint64_t v15 = *(void *)(v7 + 16);
                uint64_t v16 = *(void *)(v7 + 24);
              }
            }
            else
            {
              uint64_t v15 = 0;
              uint64_t v16 = BYTE6(v6);
            }
            if (v16 < 1 || v16 < v15) {
              goto LABEL_47;
            }
            uint64_t v31 = sub_1C4496528();
            sub_1C3FA2BEC(v31, v32);
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EBBC07E0);
            uint64_t v33 = swift_allocObject();
            *(_OWORD *)(v33 + 16) = xmmword_1C449B4A0;
            char v34 = sub_1C4496658();
            uint64_t v35 = MEMORY[0x1E4FBC358];
            uint64_t v36 = MEMORY[0x1E4FBC3B0];
            *(void *)(v33 + 56) = MEMORY[0x1E4FBC358];
            *(void *)(v33 + 64) = v36;
            *(unsigned char *)(v33 + 32) = v34;
            uint64_t v37 = sub_1C4496658();
            *(void *)(v33 + 96) = v35;
            *(void *)(v33 + 104) = v36;
            *(unsigned char *)(v33 + 72) = BYTE1(v37);
            uint64_t v13 = sub_1C44971E8();
            (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
            return v13;
          case 3:
            sub_1C3F7E2CC(v7, v6);
            *(void *)&long long v45 = v7;
            *((void *)&v45 + 1) = v6;
            uint64_t v17 = CRKeyPath.components.getter();
            if (v17) {
              uint64_t v18 = v17;
            }
            else {
              uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
            }
            int64_t v19 = v18[2];
            if (v19)
            {
              uint64_t v44 = MEMORY[0x1E4FBC860];
              uint64_t v20 = sub_1C3F67EA0(0, v19, 0);
              uint64_t v21 = 0;
              uint64_t v22 = v44;
              do
              {
                long long v45 = *(_OWORD *)&v18[2 * v21 + 4];
                uint64_t v20 = sub_1C3FF44C8(v20);
                uint64_t v23 = v20;
                uint64_t v25 = v24;
                uint64_t v44 = v22;
                unint64_t v27 = *(void *)(v22 + 16);
                unint64_t v26 = *(void *)(v22 + 24);
                if (v27 >= v26 >> 1)
                {
                  uint64_t v20 = sub_1C3F67EA0(v26 > 1, v27 + 1, 1);
                  uint64_t v22 = v44;
                }
                ++v21;
                *(void *)(v22 + 16) = v27 + 1;
                uint64_t v28 = v22 + 16 * v27;
                *(void *)(v28 + 32) = v23;
                *(void *)(v28 + 40) = v25;
              }
              while (v19 != v21);
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v22 = MEMORY[0x1E4FBC860];
            }
            *(void *)&long long v45 = v22;
            __swift_instantiateConcreteTypeFromMangledName(&qword_1EA39AD70);
            sub_1C3F815A4((unint64_t *)&qword_1EA39AD78, &qword_1EA39AD70);
            sub_1C44970B8();
            swift_bridgeObjectRelease();
            *(void *)&long long v45 = 91;
            *((void *)&v45 + 1) = 0xE100000000000000;
            sub_1C4497268();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            goto LABEL_13;
          default:
            if (v12 != 255) {
              goto LABEL_12;
            }
            sub_1C3F7E2CC(v7, v6);
            return 1953460082;
        }
      }
      return v45;
    case 2uLL:
      uint64_t v11 = *(void *)(v7 + 16);
      uint64_t v10 = *(void *)(v7 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_7;
      }
      goto LABEL_45;
    case 3uLL:
      goto LABEL_12;
    default:
      if (!BYTE6(v6)) {
        goto LABEL_12;
      }
      goto LABEL_8;
  }
}