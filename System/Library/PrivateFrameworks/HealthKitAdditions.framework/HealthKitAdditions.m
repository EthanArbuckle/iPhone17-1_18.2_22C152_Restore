uint64_t LockProviding.synchronized<A>(_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t vars8;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  a1(v8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 16);
  return v9(a3, a5);
}

ValueMetadata *type metadata accessor for HKSharingAuthorizationIdentifier()
{
  return &type metadata for HKSharingAuthorizationIdentifier;
}

void sub_251055F18(uint64_t a1, uint64_t a2, void *a3)
{
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

id HKHealthStore.makeDatabaseChangesPublisher(types:anchor:includeChangeDetails:debugIdentifier:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(void *)(a6 + 32) = a5;
  *(void *)(a6 + 40) = v6;
  swift_bridgeObjectRetain();
  id v7 = v6;
  swift_bridgeObjectRetain();
  return a2;
}

id sub_251055FF4()
{
  swift_weakInit();
  swift_weakAssign();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CloudSyncStatusPublisherImpl.CloudDelegate();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t sub_251056084(void *a1)
{
  swift_release();
  *a1 = v1;
  return swift_retain();
}

uint64_t sub_2510560C0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t _s20SampleCountPublisherV13ConfigurationVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_251056180()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v5[4] = v5;
    uint64_t v2 = type metadata accessor for DownstreamHandlerSubscriptionState.Inactive();
    uint64_t v0 = v2;
    if (v3 <= 0x3F)
    {
      v5[5] = *(void *)(v2 - 8) + 64;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v0;
}

uint64_t sub_251056280()
{
  uint64_t v0 = sub_251056B1C();

  swift_unknownObjectRelease();
  sub_2510674C0(*(void *)(v0 + 104));
  return v0;
}

uint64_t sub_2510562C8(void *a1)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    id v3 = a1;
    sub_251059128(a1, 0);

    return swift_release();
  }
  return result;
}

uint64_t sub_251056344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v15[5] = a5;
  sub_2510BF808();
  sub_251067550();
  uint64_t v8 = sub_2510BFD68();
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  v15[8] = (char *)v15 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  v15[7] = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  v15[6] = a2;
  sub_2510581A0(a6, (uint64_t)v15 - v13);
  return sub_2510BFD58();
}

uint64_t sub_2510567B4()
{
  return sub_2510BF9A8();
}

uint64_t type metadata accessor for PublisherCache()
{
  return self;
}

void sub_251056854()
{
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 128));
  _s17SubscriptionStateVMa();
  uint64_t v2 = (uint64_t *)(v1 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v1 + 16));
  id v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  sub_251067B8C(v2);
  os_unfair_lock_unlock(v3);
}

void sub_251056948(uint64_t a1, id a2, void (*a3)(id, BOOL))
{
  if (a1)
  {
    id v5 = a2;
    if (!a2) {
      id v5 = (id)swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    id v5 = a2;
  }
  else
  {
    id v5 = (id)MEMORY[0x263F8EE80];
  }
  id v6 = a2;
  a3(v5, a2 != 0);
  sub_251067544(v5, a2 != 0);
}

uint64_t sub_2510569E0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (!HKShowSensitiveLogItems())
  {
    sub_2510BEC48();
    JUMPOUT(0x253392CC0);
  }
  uint64_t v5 = v2 + *(int *)(a1 + 68);
  uint64_t v6 = sub_2510BEC48();
  uint64_t v9 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a2, v5, v6);
  id v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56);
  return v7(a2, 0, 1, v6);
}

uint64_t sub_251056B1C()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_251077D44(v3, (uint64_t)v5);
      __swift_project_boxed_opaque_existential_0(v5, v5[3]);
      sub_2510BED18();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
      v3 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  swift_release();
  sub_2510606A0(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  sub_2510674EC(*(id *)(v0 + 48), *(unsigned char *)(v0 + 56));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t *sub_251056BF4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a3;
  uint64_t v8 = *v4;
  uint64_t v9 = *(void *)(*v4 + 80);
  uint64_t v10 = sub_2510BF808();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = _s17SubscriptionStateVMa();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  v16 = (uint64_t *)((char *)&v21 - v15);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v12, 1, 1, v9);
  sub_251067AA8(0, (uint64_t)a1, (uint64_t)v12, v16);
  id v17 = a1;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 + 128)) = sub_2510567B4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v8 + 88) - 8) + 16))((uint64_t)v4 + *(void *)(*v4 + 112), a4);
  v18 = (uint64_t *)((char *)v4 + *(void *)(*v4 + 120));
  uint64_t v19 = v22;
  void *v18 = a2;
  v18[1] = v19;
  objc_msgSend(v17, sel_startObservation_, v4);
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  return v4;
}

id HKHealthStore.makeSampleCountPublisher(sampleTypes:predicate:debugIdentifier:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  a5[4] = v5;
  swift_bridgeObjectRetain();
  id v6 = v5;
  swift_bridgeObjectRetain();
  return a2;
}

id HKHealthStore.makeActivitySummaryPublisher(predicate:receivesUpdates:orderByDateAscending:limit:debugIdentifier:)@<X0>(void *a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = a1;
  *(unsigned char *)(a7 + 8) = a2;
  *(unsigned char *)(a7 + 9) = a3;
  *(void *)(a7 + 16) = a4;
  *(void *)(a7 + 24) = a5;
  *(void *)(a7 + 32) = a6;
  *(void *)(a7 + 40) = v7;
  swift_bridgeObjectRetain();
  id v8 = v7;
  return a1;
}

id sub_251056EF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  long long v3 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = v3;
  *(void *)(a1 + 24) = v2;
  id v5 = (id)v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_251056F58(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_2510BEC48();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_2510BEC38();
}

void *sub_251056FD0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v5 = (void **)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v6 = *v5;
  void *v4 = *v5;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (void *)(((unint64_t)v4 + v9 + 8) & ~v9);
  uint64_t v11 = (const void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  id v13 = v6;
  if (v12(v11, 1, v7))
  {
    if (*(_DWORD *)(v8 + 84)) {
      size_t v14 = *(void *)(v8 + 64);
    }
    else {
      size_t v14 = *(void *)(v8 + 64) + 1;
    }
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
  }
  return a1;
}

uint64_t HKKeyValueDomain.getAllValues()()
{
  *(void *)(swift_allocObject() + 16) = v0;
  sub_251068480();
  swift_allocObject();
  id v1 = v0;
  return sub_2510BEE28();
}

uint64_t type metadata accessor for DarwinNotificationPublisher()
{
  return self;
}

uint64_t sub_2510571AC(id *a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_2510571E8()
{
  type metadata accessor for PublisherCache();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = objc_msgSend(self, sel_weakToWeakObjectsMapTable);
  sub_251067734();
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = v0;
  qword_26B212DA0 = result;
  return result;
}

uint64_t sub_251057264()
{
  sub_2510BED28();
  uint64_t result = sub_2510BF808();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t HKSummarySharingEntryStore.createSummarySharingEntryPublisher()()
{
  sub_2510682CC();
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388]();
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v5 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
  sub_251068574(0, &qword_26B2118E0, MEMORY[0x263EFDCF0]);
  sub_25106861C(&qword_26B2118D8, &qword_26B2118E0, v5);
  sub_2510BEE38();
  sub_25105A750(&qword_26B211938, (void (*)(uint64_t))sub_2510682CC);
  uint64_t v6 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v6;
}

uint64_t sub_25105752C(void *a1)
{
  id v1 = objc_msgSend(a1, sel_sharingEntries);
  sub_251067804();
  uint64_t v2 = sub_2510BF418();

  return v2;
}

uint64_t sub_251057580(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeatureStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2510575E4@<X0>(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  int v27 = a1;
  v28 = a4;
  sub_25106850C(0);
  v26[6] = *(void *)(v6 - 8);
  v26[7] = v6;
  MEMORY[0x270FA5388](v6);
  v26[5] = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FeatureStatus(0);
  uint64_t v29 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251068F1C(0);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  v26[3] = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v26 - v14;
  sub_251068540(0);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(v16 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  v26[4] = (char *)v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)v26 - v21;
  v23 = *(void (**)(uint64_t, uint64_t))(a3 + 16);
  v26[2] = a2;
  v23(a2, a3);
  sub_251057580((uint64_t)v10, (uint64_t)v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v15, 0, 1, v8);
  sub_2510BEDF8();
  sub_25105A06C((unint64_t *)&unk_26B212260, sub_251068540);
  uint64_t v24 = sub_2510BEE58();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, v17);
  uint64_t *v28 = v24;
  return result;
}

uint64_t sub_251057C20(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return DownstreamHandlerSubscription.request(_:)(a1, a2, WitnessTable);
}

uint64_t sub_251057C78()
{
  return sub_2510BFD28();
}

uint64_t sub_251057CB8()
{
  return sub_2510BFD18();
}

uint64_t _s29StatisticsCollectionPublisherV13ConfigurationVwxx(id *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[7];
  uint64_t v5 = sub_2510BE908();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = (char *)a1 + a2[8];
  uint64_t v7 = sub_2510BE798();
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = (char *)a1 + a2[9];
  uint64_t v9 = sub_2510BE6D8();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }

  return swift_bridgeObjectRelease();
}

uint64_t HKKeyValueDomain.Publisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  v13[1] = a3;
  v13[2] = v8;
  uint64_t v9 = _s12SubscriptionCMa();
  swift_allocObject();
  id v10 = v6;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_251056BF4(v10, v5, v7, a1);

  v13[3] = v9;
  v13[4] = swift_getWitnessTable();
  v13[0] = v11;
  sub_2510BECF8();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

uint64_t DarwinNotificationPublisher.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Bool __swiftcall HKCloudSyncObserverStatus.isFirstRestoreComplete(orSyncDisabled:orHasErrorRequiringUserAction:)(Swift::Bool orSyncDisabled, Swift::Bool orHasErrorRequiringUserAction)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_2510BE908();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251068F50();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v13 = objc_msgSend(v3, sel_syncEnabled);
  id v14 = objc_msgSend(v3, sel_errorRequiringUserAction);
  id v15 = v14;
  if (v14) {

  }
  id v16 = objc_msgSend(v3, sel_restoreCompletionDate);
  if (v16)
  {
    uint64_t v17 = v16;
    sub_2510BE8F8();

    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v9, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) != 1)
    {
      sub_2510661B8((uint64_t)v12);
      return 1;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  }
  sub_2510661B8((uint64_t)v12);
  return orSyncDisabled & (v13 ^ 1) | (v15 != 0 && orHasErrorRequiringUserAction);
}

uint64_t sub_2510581A0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  sub_251068F50();
  MEMORY[0x270FA5388](v5);
  if (swift_dynamicCastMetatype())
  {
    uint64_t result = sub_2510BF6E8();
    if (v2) {
      return result;
    }
    uint64_t v7 = (uint64_t *)&unk_26B211990;
    goto LABEL_7;
  }
  if (swift_dynamicCastMetatype())
  {
    uint64_t result = sub_2510BF6F8();
    if (v2) {
      return result;
    }
    uint64_t v7 = (uint64_t *)&unk_26B2121A8;
    goto LABEL_7;
  }
  sub_2510BE908();
  if (swift_dynamicCastMetatype())
  {
    uint64_t result = sub_2510BF708();
    if (!v2)
    {
      int v12 = swift_dynamicCast();
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
      if (v12)
      {
        uint64_t v11 = a2;
        uint64_t v10 = 0;
      }
      else
      {
        uint64_t v11 = a2;
        uint64_t v10 = 1;
      }
      return v9(v11, v10, 1, a1);
    }
    return result;
  }
  if (swift_dynamicCastMetatype())
  {
    uint64_t result = sub_2510BF738();
    if (v2) {
      return result;
    }
    uint64_t v7 = (uint64_t *)&unk_26B211998;
    goto LABEL_7;
  }
  sub_251065E84(0, (unint64_t *)&qword_26B212178);
  if (!swift_dynamicCastMetatype())
  {
    if (swift_dynamicCastMetatype())
    {
      uint64_t result = sub_2510BF728();
      if (v2) {
        return result;
      }
      uint64_t v7 = &qword_26B212E20;
    }
    else
    {
      uint64_t result = sub_2510BF6C8();
      if (v2) {
        return result;
      }
      uint64_t v7 = &qword_26B2121A0;
    }
LABEL_7:
    sub_2510725FC(0, (unint64_t *)v7);
LABEL_8:
    int v8 = swift_dynamicCast();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
    uint64_t v10 = v8 ^ 1u;
    uint64_t v11 = a2;
    return v9(v11, v10, 1, a1);
  }
  uint64_t result = sub_2510BF718();
  if (!v2)
  {
    sub_2510725A4(0, &qword_269B1B4E0, (unint64_t *)&qword_26B212178);
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_2510584C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  sub_2510BED78();
  uint64_t result = sub_2510BED58();
  if ((result & 1) == 0)
  {
    sub_2510BED78();
    char v6 = sub_2510BED58();
    uint64_t result = sub_2510BED78();
    uint64_t v7 = result;
    if ((v6 & 1) == 0)
    {
      uint64_t result = sub_2510BED58();
      if ((result & 1) == 0)
      {
        if ((v4 | a2) < 0)
        {
          __break(1u);
          goto LABEL_12;
        }
        uint64_t v7 = v4 + a2;
        if (!__OFADD__(v4, a2))
        {
          if ((v7 & 0x8000000000000000) == 0) {
            goto LABEL_9;
          }
LABEL_12:
          __break(1u);
          return result;
        }
      }
      uint64_t result = sub_2510BED78();
      uint64_t v7 = result;
    }
LABEL_9:
    *a1 = v7;
  }
  return result;
}

uint64_t sub_251058570(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  sub_25106897C();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510569E0(a4, (uint64_t)v10);
  uint64_t v11 = sub_2510BEC48();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    return sub_25106ED64((uint64_t)v10);
  }
  swift_retain_n();
  id v14 = sub_2510BEC28();
  os_log_type_t v15 = a5();
  if (os_log_type_enabled(v14, v15))
  {
    id v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = a2;
    uint64_t v19 = v17;
    uint64_t v23 = v17;
    *(_DWORD *)id v16 = 136315138;
    v22[1] = v16 + 4;
    uint64_t v20 = v18();
    v22[2] = sub_25106EDC0(v20, v21, &v23);
    sub_2510BF818();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_251054000, v14, v15, "%s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2533940F0](v19, -1, -1);
    MEMORY[0x2533940F0](v16, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v10, v11);
}

void sub_2510587D0(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  sub_2510562C8(v7);
}

uint64_t sub_251058848(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2) {
    uint64_t v5 = sub_2510BF118();
  }
  else {
    uint64_t v5 = 0;
  }
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2510588F4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  id v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_251065E84(0, (unint64_t *)&qword_26B2119A0);
    sub_251065E84(0, (unint64_t *)&qword_26B212178);
    sub_251067900((unint64_t *)&qword_26B2119A8, (unint64_t *)&qword_26B2119A0);
    uint64_t v5 = sub_2510BF118();
  }
  swift_retain();
  id v8 = a2;
  id v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t *initializeBufferWithCopyOfBuffer for FeatureStatus(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_251065BFC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    if (EnumCaseMultiPayload != 1)
    {
      id v9 = (int *)type metadata accessor for FeatureStatus.OnboardingRecord(0);
      uint64_t v10 = v9[5];
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      sub_251065D40();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
      *(uint64_t *)((char *)a1 + v9[6]) = *(uint64_t *)((char *)a2 + v9[6]);
      uint64_t v14 = v9[7];
      os_log_type_t v15 = (char *)a1 + v14;
      id v16 = (char *)a2 + v14;
      uint64_t v17 = sub_2510BE908();
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_bridgeObjectRetain();
      v18(v15, v16, v17);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void sub_251058BBC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = sub_2510674DC;
  v7[3] = v6;
  v7[4] = a3;
  v10[4] = sub_251067B3C;
  v10[5] = v7;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1107296256;
  v10[2] = sub_251058848;
  v10[3] = &block_descriptor_135;
  uint64_t v8 = _Block_copy(v10);
  swift_retain();
  id v9 = a3;
  swift_release();
  objc_msgSend(v9, sel_allValuesWithCompletion_, v8);
  _Block_release(v8);
}

void *sub_251058CD8(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void _s24DatabaseChangesPublisherVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 40);
}

uint64_t sub_251058D64@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_2510BEC48();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

id HKHealthStore.makeStatisticsCollectionPublisher(sampleType:predicate:options:anchorDate:intervalComponents:dateInterval:receivesUpdates:cacheSettings:debugIdentifier:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, void *a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  uint64_t v19 = (char *)a9 + v18[7];
  uint64_t v20 = sub_2510BE908();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v19, a4, v20);
  unint64_t v21 = (char *)a9 + v18[8];
  uint64_t v22 = sub_2510BE798();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v21, a5, v22);
  sub_25105FE30(a6, (uint64_t)a9 + v18[9], (uint64_t (*)(void))sub_2510600E4);
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  *((unsigned char *)a9 + v18[10]) = a7;
  *(void *)((char *)a9 + v18[11]) = a8;
  uint64_t v23 = (void *)((char *)a9 + v18[12]);
  *uint64_t v23 = a10;
  v23[1] = a11;
  *(void *)((char *)a9 + *(int *)(type metadata accessor for HKHealthStore.StatisticsCollectionPublisher(0) + 20)) = v11;
  swift_bridgeObjectRetain();
  id v24 = v11;
  id v25 = a1;
  id v26 = a2;
  return a8;
}

uint64_t LockProviding.synchronized(_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  a1(v7);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 16);
  return v8(a3, a4);
}

uint64_t DarwinNotificationObserverToken.__deallocating_deinit()
{
  id v1 = *(os_unfair_lock_s **)(v0 + 24);
  os_unfair_lock_lock(v1 + 5);
  sub_2510590E8(&v1[4]._os_unfair_lock_opaque);
  os_unfair_lock_unlock(v1 + 5);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_2510590E8(_DWORD *a1)
{
  uint64_t result = *a1;
  if (result != -1)
  {
    uint64_t result = notify_cancel(result);
    *a1 = -1;
  }
  return result;
}

void sub_251059128(void *a1, unsigned __int8 a2)
{
  id v16 = a1;
  unsigned __int8 v17 = a2;
  uint64_t v5 = (os_unfair_lock_s *)(*(void *)(v2 + 16) + 16);
  os_unfair_lock_lock(v5);
  if (*(unsigned char *)(v2 + 25) == 1)
  {
    swift_beginAccess();
    uint64_t v6 = *(void *)(v2 + 32);
    int v7 = *(unsigned __int8 *)(v2 + 40);
    swift_beginAccess();
    uint64_t v8 = *(void **)(v2 + 48);
    *(void *)(v2 + 48) = a1;
    unsigned __int8 v9 = *(unsigned char *)(v2 + 56);
    *(unsigned char *)(v2 + 56) = a2;
    sub_251068CF0(v6, v7);
    sub_251066F90(a1, a2);
    sub_2510674EC(v8, v9);
    os_unfair_lock_unlock(v5);
    MEMORY[0x270FA5388](v10);
    if (v7)
    {
      if (v7 != 1) {
        return;
      }
      sub_2510BDA08(v6, (void (*)(uint64_t))sub_2510BDDA8);
      uint64_t v11 = v6;
      char v12 = 1;
    }
    else
    {
      uint64_t v14 = a1;
      unsigned __int8 v15 = a2;
      uint64_t v13 = *(void (**)(void **))(*(void *)v6 + 104);
      swift_retain();
      v13(&v14);
      sub_2510606A0(v6, 0);
      uint64_t v11 = v6;
      char v12 = 0;
    }
    sub_2510606A0(v11, v12);
  }
  else
  {
    os_unfair_lock_unlock(v5);
  }
}

void sub_2510592E8(void (*a1)(void **), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x2533941A0](a3 + 16);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = sub_2510674D0;
    *(void *)(v9 + 24) = v6;
    unsigned __int8 v15 = sub_2510677AC;
    uint64_t v16 = v9;
    aBlock = (void *)MEMORY[0x263EF8330];
    uint64_t v12 = 1107296256;
    uint64_t v13 = sub_251055F18;
    uint64_t v14 = &block_descriptor_21;
    uint64_t v10 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v8, sel_fetchSharingEntriesWithCompletion_, v10);
    _Block_release(v10);
  }
  else
  {
    swift_retain();
    swift_release();
    sub_251093774();
    uint64_t v8 = (void *)swift_allocError();
    aBlock = v8;
    LOBYTE(v12) = 1;
    a1(&aBlock);
  }
}

uint64_t HKHealthStore.makeObserverPublisher(queryDescriptors:debugIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  a4[3] = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return swift_bridgeObjectRetain();
}

void _s24ActivitySummaryPublisherVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 40);
}

uint64_t sub_251059504(uint64_t a1, void *a2)
{
  id v3 = a2;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_2510BF808();
  sub_2510BFC08();
  uint64_t v5 = *(void *)(v4 - 8);
  swift_allocObject();
  sub_2510BF438();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, a1, v4);
  sub_2510BF488();
  type metadata accessor for HKKeyValueDomain.Publisher();
  swift_getWitnessTable();
  sub_2510BEEC8();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t HKHealthStore.makeSamplePublisher(queryDescriptors:limit:sortDescriptors:debugIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  a6[5] = v6;
  swift_bridgeObjectRetain();
  id v7 = v6;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void sub_2510596E0()
{
  if (!v0[11])
  {
    id v1 = v0;
    type metadata accessor for CloudSyncStatusPublisherImpl.CloudDelegate();
    swift_retain();
    id v2 = sub_251068BD0();
    swift_release();
    id v3 = (void *)v1[12];
    v1[12] = v2;
    id v7 = v2;

    id v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithHealthStore_delegate_, v1[10], v7);
    id v5 = v4;
    uint64_t v6 = (void (*)(id))v1[13];
    if (v6) {
      v6(v4);
    }
    v1[11] = v5;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (v1[11])
    {
      objc_msgSend((id)swift_unknownObjectRetain(), sel_startObservingSyncStatus);
      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
  }
}

uint64_t sub_251059824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  id v24 = a4;
  sub_251068890();
  uint64_t v8 = v7;
  uint64_t v23 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251068F1C(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for FeatureStatus(0);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unsigned __int8 v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251059BD8(a1, (uint64_t)v13, (uint64_t (*)(void))sub_251068F1C);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_251068EBC((uint64_t)v13, (uint64_t (*)(void))sub_251068F1C);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    uint64_t v19 = result;
  }
  else
  {
    sub_251057580((uint64_t)v13, (uint64_t)v17);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    sub_2510637D8(0, &qword_26B212478, type metadata accessor for FeatureStatus, MEMORY[0x263F8E0F8]);
    unint64_t v20 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_2510C2790;
    sub_251059BD8((uint64_t)v17, v21 + v20, type metadata accessor for FeatureStatus);
    sub_251068660(0);
    sub_25105A06C(&qword_26B212250, sub_251068660);
    sub_2510BEEC8();
    swift_release();
    swift_bridgeObjectRelease();
    sub_25105A06C((unint64_t *)&unk_26B2121E0, (void (*)(uint64_t))sub_251068890);
    uint64_t v19 = sub_2510BEE58();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v8);
    uint64_t result = sub_251068EBC((uint64_t)v17, type metadata accessor for FeatureStatus);
  }
  *id v24 = v19;
  return result;
}

uint64_t sub_251059BD8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t FeatureStatusProviding.makePublisherWithCurrentValue(observingChanges:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v28 = a3;
  sub_2510686C8();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v35 = v8;
  uint64_t v36 = v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  v33 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a2 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251068380();
  uint64_t v32 = v15;
  uint64_t v34 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  v37 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v29(v14, v4, a2);
  unint64_t v17 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  uint64_t v19 = *(void (**)(unint64_t, char *, uint64_t))(v12 + 32);
  v19(v18 + v17, v14, a2);
  *(unsigned char *)(v18 + v17 + v13) = a1;
  sub_251068694(0);
  uint64_t v31 = MEMORY[0x263EFDCF8];
  sub_25105A06C((unint64_t *)&unk_26B212238, sub_251068694);
  sub_2510BEE38();
  v29(v14, v30, a2);
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v28;
  *(void *)(v20 + 16) = a2;
  *(void *)(v20 + 24) = v21;
  v19(v20 + v17, v14, a2);
  sub_2510BED78();
  sub_251068660(0);
  sub_25105A06C(&qword_26B212288, (void (*)(uint64_t))sub_251068380);
  sub_25105A06C(&qword_26B212250, sub_251068660);
  uint64_t v23 = v32;
  uint64_t v22 = v33;
  id v24 = v37;
  sub_2510BEEE8();
  swift_release();
  sub_25105A06C((unint64_t *)&unk_26B212200, (void (*)(uint64_t))sub_2510686C8);
  uint64_t v25 = v35;
  uint64_t v26 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v25);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v23);
  return v26;
}

uint64_t sub_25105A06C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_25105A0B4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, void, void))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7, MEMORY[0x263F8E628], MEMORY[0x263F8E658]);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_25105A128(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_25105A1B4(id a1, uint64_t a2, char a3)
{
  if (a3) {
}
  }

void sub_25105A1C0(void *a1, unint64_t a2)
{
  sub_25105A1CC(a1, a2, *(void (**)(id, void))(v2 + 16));
}

void sub_25105A1CC(id a1, unint64_t a2, void (*a3)(id, void))
{
  unint64_t v5 = (unint64_t)a1;
  if (a1) {
    a1 = objc_msgSend(a1, sel_integerValue);
  }
  if (a2) {
    id v6 = (id)a2;
  }
  else {
    id v6 = a1;
  }
  BOOL v7 = (a2 | v5) == 0;
  id v8 = (id)a2;
  a3(v6, v7 | ((a2 != 0) << 8));
  sub_25105A1B4(v6, v7, a2 != 0);
}

uint64_t sub_25105A270(uint64_t a1, __int16 a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  __int16 v6 = a2 & 0x1FF;
  return v3(&v5);
}

uint64_t _s24ActivitySummaryPublisherVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  id v5 = v3;
  swift_bridgeObjectRetain();
  id v6 = v4;
  return a1;
}

uint64_t sub_25105A310@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_2510687B4();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388]();
  id v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251068574(0, &qword_26B2118E8, MEMORY[0x263EFDDE8]);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v13 = (char *)&v20 - v12;
  swift_beginAccess();
  uint64_t v14 = MEMORY[0x2533941A0](a1 + 16);
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_251068414();
    swift_allocObject();
    uint64_t v22 = sub_2510BEE28();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = sub_2510677A4;
    *(void *)(v17 + 24) = v16;
    sub_25106814C(0, &qword_26B211978, (uint64_t (*)(uint64_t))sub_251067804, MEMORY[0x263F8D488]);
    sub_25105A750(&qword_26B211928, (void (*)(uint64_t))sub_251068414);
    id v21 = v15;
    sub_2510BEE78();
    swift_release();
    swift_release();
    sub_25105A750(&qword_26B2118C8, (void (*)(uint64_t))sub_2510687B4);
    uint64_t v18 = sub_2510BEE58();

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    sub_25106814C(0, &qword_26B211978, (uint64_t (*)(uint64_t))sub_251067804, MEMORY[0x263F8D488]);
    sub_251093774();
    uint64_t v22 = swift_allocError();
    sub_251067550();
    sub_2510BEDD8();
    sub_25106861C(&qword_269B1BB98, &qword_26B2118E8, MEMORY[0x263EFDDE8]);
    uint64_t v18 = sub_2510BEE58();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  *a2 = v18;
  return result;
}

uint64_t sub_25105A750(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_25105A798(uint64_t a1)
{
  uint64_t v24 = *v1;
  uint64_t v2 = v24;
  uint64_t v25 = a1;
  uint64_t v3 = *(void *)(v24 + 176);
  uint64_t v4 = sub_2510BF808();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  id v8 = (char *)&v23 - v7;
  uint64_t v9 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = (os_unfair_lock_s *)(*(uint64_t *)((char *)v1 + *(void *)(v2 + 216)) + 16);
  os_unfair_lock_lock(v12);
  uint64_t v13 = (uint64_t *)((char *)v1 + *(void *)(*v1 + 208));
  swift_beginAccess();
  uint64_t v14 = *v13;
  sub_2510BED78();
  if ((sub_2510BED58() & 1) == 0)
  {
    if (v14 < 0)
    {
      __break(1u);
      goto LABEL_30;
    }
    if (!v14)
    {
LABEL_6:
      *((unsigned char *)v1 + *(void *)(*v1 + 232)) = 0;
      os_unfair_lock_unlock(v12);
      return;
    }
  }
  uint64_t v15 = (uint64_t)v1 + *(void *)(*v1 + 200);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v15, v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    goto LABEL_6;
  }
  uint64_t v16 = v11;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, v3);
  swift_beginAccess();
  uint64_t v17 = *v13;
  sub_2510BED78();
  if ((sub_2510BED58() & 1) == 0)
  {
    sub_2510BED78();
    if (sub_2510BED58())
    {
      uint64_t v18 = sub_2510BED78();
    }
    else
    {
      if (v17 < 0)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!v17)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      uint64_t v18 = v17 - 1;
    }
    *uint64_t v13 = v18;
  }
  swift_endAccess();
  *((unsigned char *)v1 + *(void *)(*v1 + 232)) = 1;
  os_unfair_lock_unlock(v12);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v19 = sub_2510BED08();
  os_unfair_recursive_lock_unlock();
  sub_2510BED78();
  if (sub_2510BED58())
  {
LABEL_17:
    os_unfair_lock_lock(v12);
    swift_beginAccess();
    uint64_t v20 = *v13;
    sub_2510BED78();
    if (sub_2510BED58())
    {
LABEL_26:
      swift_endAccess();
      os_unfair_lock_unlock(v12);
      goto LABEL_27;
    }
    sub_2510BED78();
    char v21 = sub_2510BED58();
    uint64_t v22 = sub_2510BED78();
    if (v21)
    {
LABEL_25:
      *uint64_t v13 = v22;
      goto LABEL_26;
    }
    if (sub_2510BED58())
    {
LABEL_23:
      uint64_t v22 = sub_2510BED78();
      goto LABEL_25;
    }
    if (((v20 | v19) & 0x8000000000000000) == 0)
    {
      uint64_t v22 = v20 + v19;
      if (!__OFADD__(v20, v19))
      {
        if ((v22 & 0x8000000000000000) == 0) {
          goto LABEL_25;
        }
LABEL_34:
        __break(1u);
        return;
      }
      goto LABEL_23;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v19 < 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v19) {
    goto LABEL_17;
  }
LABEL_27:
  (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v3);
}

uint64_t _s24DatabaseChangesPublisherVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRetain();
  id v6 = v3;
  swift_bridgeObjectRetain();
  id v7 = v5;
  return a1;
}

void *DarwinNotificationPublisher.init(name:queue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_2510BF778();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_2510BF768();
  MEMORY[0x270FA5388](v12);
  uint64_t v13 = sub_2510BEF08();
  MEMORY[0x270FA5388](v13 - 8);
  v4[2] = a1;
  v4[3] = a2;
  if (!a3)
  {
    v15[1] = sub_251067868();
    uint64_t v16 = 0x656873696C627570;
    unint64_t v17 = 0xEA00000000002E72;
    swift_bridgeObjectRetain();
    sub_2510BF2F8();
    swift_bridgeObjectRelease();
    v15[0] = v16;
    sub_2510BEEF8();
    uint64_t v16 = MEMORY[0x263F8EE78];
    sub_2510678A8();
    sub_2510642A4(0, &qword_26B2122B0, MEMORY[0x263F8F0F8], MEMORY[0x263F8D488]);
    sub_2510681E0();
    sub_2510BF868();
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x263F8F130], v8);
    a3 = sub_2510BF788();
  }
  v4[4] = a3;
  return v4;
}

uint64_t initializeWithCopy for HKSharingAuthorizationIdentifier(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_25105AF48(*(id *)a2, v4, v5, v6, v7, v8, v9);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  return a1;
}

id sub_25105AF48(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 == 3 || a7 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (id)swift_bridgeObjectRetain();
  }
  else if (!a7)
  {
    return result;
  }
  return result;
}

id _sSo13HKHealthStoreC18HealthKitAdditionsE20SampleCountPublisherV9makeQuery4with13outputHandlerSo7HKQueryCAE13ConfigurationV_yAC0nH6ResultOySDySo12HKSampleTypeCSiGGctFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = swift_bridgeObjectRetain();
  sub_25105D460(v7, (unint64_t *)&qword_26B2119A0, 0x263F0A6E8, (unint64_t *)&qword_26B2119A8, &qword_269B1BD20);
  swift_bridgeObjectRelease();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  id v9 = objc_allocWithZone(MEMORY[0x263F0A6C0]);
  sub_251065E84(0, (unint64_t *)&qword_26B2119A0);
  sub_251067900((unint64_t *)&qword_26B2119A8, (unint64_t *)&qword_26B2119A0);
  swift_retain();
  id v10 = v5;
  uint64_t v11 = (void *)sub_2510BF518();
  swift_bridgeObjectRelease();
  aBlock[4] = sub_251068004;
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2510588F4;
  aBlock[3] = &block_descriptor_19;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = objc_msgSend(v9, sel_initWithSampleTypes_predicate_resultsHandler_, v11, v10, v12);

  _Block_release(v12);
  swift_release();
  id v14 = v13;
  if (v6) {
    uint64_t v15 = (void *)sub_2510BF228();
  }
  else {
    uint64_t v15 = 0;
  }
  objc_msgSend(v13, sel_setDebugIdentifier_, v15);

  return v13;
}

void _s20SampleCountPublisherVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 32);
}

uint64_t Publisher.retainingSink(receiveCompletion:receiveValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_2510676CC();
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 24) = 0;
  *(void *)(v9 + 16) = 0;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_2510BED48();
  id v10 = (void *)swift_allocObject();
  v10[2] = a5;
  v10[3] = a6;
  v10[4] = a1;
  v10[5] = a2;
  void v10[6] = v9;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_2510BED38();
  swift_getWitnessTable();
  sub_2510BEED8();
  sub_2510BEDB8();
  swift_retain();
  swift_getWitnessTable();
  uint64_t v11 = sub_2510BEDC8();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
  sub_251056084((void *)(v9 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
  swift_release();
  swift_release();
  return v11;
}

void sub_25105B438(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  swift_retain();
  unint64_t v7 = (void *)sub_2510BF228();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = sub_25105A270;
  v8[3] = v6;
  v8[4] = a3;
  v11[4] = sub_25105A1C0;
  v11[5] = v8;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1107296256;
  v11[2] = sub_25105A128;
  v11[3] = &block_descriptor_168;
  uint64_t v9 = _Block_copy(v11);
  id v10 = a3;
  swift_release();
  objc_msgSend(v10, sel_numberForKey_completion_, v7, v9);
  _Block_release(v9);
}

void *_s20SampleCountPublisherVwcp(void *a1, void *a2)
{
  id v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  id v6 = v3;
  swift_bridgeObjectRetain();
  id v7 = v5;
  return a1;
}

void sub_25105B5D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 == 3 || a7 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else if (!a7)
  {
  }
}

id _sSo13HKHealthStoreC18HealthKitAdditionsE24ActivitySummaryPublisherV9makeQuery4with13outputHandlerSo7HKQueryCAE13ConfigurationV_yAC0nH6ResultOySaySo010HKActivityG0CGGctFZ_0(long long *a1, uint64_t a2, uint64_t a3)
{
  long long v6 = a1[1];
  long long v26 = *a1;
  long long v27 = v6;
  uint64_t v28 = *((void *)a1 + 4);
  uint64_t v7 = v26;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  long long v9 = a1[1];
  *(_OWORD *)(v8 + 32) = *a1;
  *(_OWORD *)(v8 + 48) = v9;
  *(void *)(v8 + 64) = *((void *)a1 + 4);
  id v10 = objc_allocWithZone(MEMORY[0x263F0A098]);
  uint64_t v24 = sub_2510A8B18;
  uint64_t v25 = v8;
  uint64_t v20 = MEMORY[0x263EF8330];
  uint64_t v21 = 1107296256;
  uint64_t v22 = sub_2510A8670;
  uint64_t v23 = &block_descriptor_17;
  uint64_t v11 = _Block_copy(&v20);
  swift_retain();
  sub_25105B900((void **)&v26);
  id v12 = objc_msgSend(v10, sel_initWithPredicate_resultsHandler_, v7, v11);
  _Block_release(v11);
  swift_release();
  objc_msgSend(v12, sel_setOrderByDateAscending_, BYTE9(v26));
  objc_msgSend(v12, sel_setLimit_, (void)v27);
  if (BYTE8(v26))
  {
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = a2;
    *(void *)(v13 + 24) = a3;
    long long v14 = v27;
    *(_OWORD *)(v13 + 32) = v26;
    *(_OWORD *)(v13 + 48) = v14;
    *(void *)(v13 + 64) = v28;
    uint64_t v24 = sub_2510A8B6C;
    uint64_t v25 = v13;
    uint64_t v20 = MEMORY[0x263EF8330];
    uint64_t v21 = 1107296256;
    uint64_t v22 = sub_2510A8670;
    uint64_t v23 = &block_descriptor_8_0;
    uint64_t v15 = _Block_copy(&v20);
    swift_retain();
    sub_25105B900((void **)&v26);
    sub_2510677F4((uint64_t)sub_2510A8B6C);
    swift_release();
    objc_msgSend(v12, sel_setUpdateHandler_, v15);
    _Block_release(v15);
    swift_release();
  }
  sub_25105B934((uint64_t)&v27 + 8, (uint64_t)v29);
  sub_25105B934((uint64_t)v29, (uint64_t)&v20);
  uint64_t v16 = (void *)v21;
  if (v21)
  {
    id v17 = v12;
    uint64_t v16 = (void *)sub_2510BF228();
  }
  else
  {
    id v18 = v12;
  }
  objc_msgSend(v12, sel_setDebugIdentifier_, v16);

  return v12;
}

void **sub_25105B900(void **a1)
{
  uint64_t v2 = *a1;
  swift_bridgeObjectRetain();
  id v3 = v2;
  return a1;
}

uint64_t sub_25105B934(uint64_t a1, uint64_t a2)
{
  sub_25105B998();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_25105B998()
{
  if (!qword_26B212E20)
  {
    unint64_t v0 = sub_2510BF808();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212E20);
    }
  }
}

uint64_t sub_25105B9F0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_251065E84(0, &qword_26B212170);
    uint64_t v5 = sub_2510BF418();
  }
  swift_retain();
  id v8 = a2;
  id v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_25105BAA8(int a1, void *a2, void *a3)
{
  sub_2510614B8(a1, a2, a3, *(void (**)(id *))(v3 + 16));
}

uint64_t HKKeyValueDomain.makePublisherWithCurrentValue<A>(forKey:observingChanges:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v35 = a3;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v31 = sub_2510BF808();
  sub_2510BF488();
  sub_251067550();
  swift_getWitnessTable();
  sub_2510BECD8();
  type metadata accessor for HKKeyValueDomain.Publisher();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v28 = sub_2510BEC88();
  sub_2510BFD38();
  v25[1] = swift_getWitnessTable();
  uint64_t v8 = sub_2510BEE48();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v36 = v28;
  uint64_t v37 = v8;
  v25[0] = v8;
  uint64_t v38 = WitnessTable;
  uint64_t v39 = v26;
  uint64_t v9 = sub_2510BECC8();
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  id v12 = (char *)v25 - v11;
  uint64_t v29 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v10);
  long long v14 = (char *)v25 - v13;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a4;
  *(void *)(v15 + 24) = a5;
  uint64_t v16 = a5;
  uint64_t v17 = v33;
  *(void *)(v15 + 32) = v5;
  *(void *)(v15 + 40) = v17;
  uint64_t v18 = v34;
  *(void *)(v15 + 48) = v34;
  *(unsigned char *)(v15 + 56) = v35;
  *(void *)(v15 + 64) = ObjectType;
  id v19 = v5;
  swift_bridgeObjectRetain();
  sub_2510BEE38();
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = a4;
  v20[3] = v16;
  v20[4] = v19;
  v20[5] = v17;
  v20[6] = v18;
  id v21 = v19;
  swift_bridgeObjectRetain();
  sub_2510BED78();
  uint64_t v22 = v25[0];
  sub_2510BEEB8();
  swift_release();
  swift_getWitnessTable();
  uint64_t v23 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v22);
  return v23;
}

uint64_t sub_25105BEC0()
{
  if (sub_2510BF898())
  {
    sub_251067630();
    uint64_t v0 = sub_2510BFB38();
  }
  else
  {
    uint64_t v0 = MEMORY[0x263F8EE80];
  }
  uint64_t v17 = v0;
  sub_2510BFA88();
  swift_unknownObjectRetain();
  uint64_t v1 = sub_2510BFAA8();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    sub_251065E84(0, (unint64_t *)&qword_26B2119A0);
    do
    {
      swift_dynamicCast();
      sub_251065E84(0, (unint64_t *)&qword_26B212178);
      swift_dynamicCast();
      id v10 = objc_msgSend(v2, sel_integerValue);

      uint64_t v0 = v17;
      unint64_t v11 = *(void *)(v17 + 16);
      if (*(void *)(v17 + 24) <= v11)
      {
        sub_2510AA194(v11 + 1, 1);
        uint64_t v0 = v17;
      }
      uint64_t result = sub_2510BF7C8();
      uint64_t v4 = v0 + 64;
      uint64_t v5 = -1 << *(unsigned char *)(v0 + 32);
      unint64_t v6 = result & ~v5;
      unint64_t v7 = v6 >> 6;
      if (((-1 << v6) & ~*(void *)(v0 + 64 + 8 * (v6 >> 6))) != 0)
      {
        unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v0 + 64 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v12 = 0;
        unint64_t v13 = (unint64_t)(63 - v5) >> 6;
        do
        {
          if (++v7 == v13 && (v12 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          BOOL v14 = v7 == v13;
          if (v7 == v13) {
            unint64_t v7 = 0;
          }
          v12 |= v14;
          uint64_t v15 = *(void *)(v4 + 8 * v7);
        }
        while (v15 == -1);
        unint64_t v8 = __clz(__rbit64(~v15)) + (v7 << 6);
      }
      *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
      uint64_t v9 = 8 * v8;
      *(void *)(*(void *)(v0 + 48) + v9) = v16;
      *(void *)(*(void *)(v0 + 56) + v9) = v10;
      ++*(void *)(v0 + 16);
      uint64_t v2 = (void *)sub_2510BFAA8();
    }
    while (v2);
  }
  swift_release();
  return v0;
}

id _sSo13HKHealthStoreC18HealthKitAdditionsE29StatisticsCollectionPublisherV9makeQuery4with13outputHandlerSo7HKQueryCAE13ConfigurationV_yAC0nH6ResultOyAE6OutputVGctFZ_0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  sub_2510600E4();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v40 = (uint64_t)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v38 + 64);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v37 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v37 - v10;
  char v12 = (void *)*a1;
  unint64_t v13 = (void *)a1[1];
  uint64_t v14 = a1[2];
  uint64_t v39 = (int *)v9;
  id v15 = objc_allocWithZone(MEMORY[0x263F0A7E0]);
  id v16 = v13;
  id v17 = v12;
  uint64_t v18 = (void *)sub_2510BE8D8();
  id v19 = (void *)sub_2510BE758();
  id v20 = objc_msgSend(v15, sel_initWithSampleType_samplePredicate_options_anchorDate_intervalComponents_, v17, v16, v14, v18, v19);

  sub_25105FE30((uint64_t)a1, (uint64_t)v11, type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration);
  unint64_t v21 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  uint64_t v38 = v21 + v7;
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = v42;
  *(void *)(v22 + 16) = v41;
  *(void *)(v22 + 24) = v23;
  sub_251067D00((uint64_t)v11, v22 + v21);
  v47 = sub_2510BB714;
  uint64_t v48 = v22;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v44 = 1107296256;
  v45 = sub_2510B9A0C;
  v46 = &block_descriptor_11;
  uint64_t v24 = _Block_copy(&aBlock);
  swift_retain();
  sub_2510677F4((uint64_t)sub_2510BB714);
  uint64_t v25 = v39;
  swift_release();
  objc_msgSend(v20, sel_setInitialResultsHandler_, v24);
  _Block_release(v24);
  swift_release();
  if (*((unsigned char *)a1 + v25[10]) == 1)
  {
    uint64_t v26 = v37;
    sub_25105FE30((uint64_t)a1, v37, type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration);
    uint64_t v27 = swift_allocObject();
    uint64_t v28 = v42;
    *(void *)(v27 + 16) = v41;
    *(void *)(v27 + 24) = v28;
    sub_251067D00(v26, v27 + v21);
    v47 = sub_2510BB7A4;
    uint64_t v48 = v27;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v44 = 1107296256;
    v45 = sub_2510B9B84;
    v46 = &block_descriptor_21;
    uint64_t v29 = _Block_copy(&aBlock);
    swift_retain();
    sub_2510677F4((uint64_t)sub_2510BB7A4);
    swift_release();
    objc_msgSend(v20, sel_setStatisticsUpdateHandler_, v29);
    _Block_release(v29);
    swift_release();
  }
  uint64_t v30 = v40;
  sub_25105FE30((uint64_t)a1 + v25[9], v40, (uint64_t (*)(void))sub_2510600E4);
  uint64_t v31 = sub_2510BE6D8();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) != 1)
  {
    uint64_t v33 = (void *)sub_2510BE698();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
  }
  objc_msgSend(v20, sel_setDateInterval_, v33);

  objc_msgSend(v20, sel_setCacheSettings_, *(void *)((char *)a1 + v25[11]));
  uint64_t v34 = *(void **)((char *)a1 + v25[12] + 8);
  id v35 = v20;
  if (v34) {
    uint64_t v34 = (void *)sub_2510BF228();
  }
  objc_msgSend(v20, sel_setDebugIdentifier_, v34);

  return v20;
}

uint64_t objectdestroyTm(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v1, a1, 7);
}

uint64_t objectdestroyTm_0()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t objectdestroyTm_1()
{
  swift_release();

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t objectdestroyTm_2()
{
  uint64_t v1 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();

  uint64_t v5 = v0 + v3 + v1[7];
  uint64_t v6 = sub_2510BE908();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + v3 + v1[8];
  uint64_t v8 = sub_2510BE798();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + v3 + v1[9];
  uint64_t v10 = sub_2510BE6D8();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v3 + v4, v2 | 7);
}

uint64_t objectdestroy_61Tm()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25105C92C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return DownstreamHandlerSubscription.request(_:)(a1, a2, WitnessTable);
}

uint64_t sub_25105C984(uint64_t a1)
{
  return DarwinNotificationPublisher.receive<A>(subscriber:)(a1);
}

uint64_t DarwinNotificationPublisher.receive<A>(subscriber:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DarwinNotificationPublisher.Inner();
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (void *)v1[4];
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_25105CA7C(a1, v4, v5, (uint64_t)v6);
  v9[3] = v3;
  v9[4] = swift_getWitnessTable();
  v9[0] = v7;
  sub_2510BECF8();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

char *sub_25105CA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v8 = *(void *)v4;
  uint64_t v9 = *(void *)(*(void *)v4 + 80);
  uint64_t v10 = type metadata accessor for DownstreamHandlerSubscriptionState();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = (char *)&v17 - v12;
  uint64_t v14 = *(void *)(v8 + 112);
  id v15 = (_DWORD *)swift_slowAlloc();
  *(void *)&v4[v14] = v15;
  *id v15 = 0;
  *(void *)&v4[*(void *)(*(void *)v4 + 128)] = 0;
  static DownstreamHandlerSubscriptionState.ready(_:)(a1, v9, (uint64_t)v13);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v4[*(void *)(*(void *)v4 + 104)], v13, v10);
  *((void *)v4 + 2) = a2;
  *((void *)v4 + 3) = a3;
  *(void *)&v4[*(void *)(*(void *)v4 + 120)] = v18;
  return v4;
}

uint64_t type metadata accessor for DarwinNotificationPublisher.Inner()
{
  return __swift_instantiateGenericMetadata();
}

void sub_25105CC38(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v62 = *v2;
  uint64_t v4 = v62;
  uint64_t v66 = *(void *)(*(void *)(v62 + 160) - 8);
  MEMORY[0x270FA5388](a1);
  v63 = (char *)&v60 - v6;
  uint64_t v64 = v5;
  uint64_t v68 = sub_2510BF808();
  v65 = *(uint64_t **)(v68 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v68);
  uint64_t v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v60 - v10;
  uint64_t v12 = *(void *)(v4 + 176);
  uint64_t v13 = sub_2510BF808();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v60 - v16;
  uint64_t v18 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v15);
  id v20 = (char *)&v60 - v19;
  sub_2510BED78();
  if ((sub_2510BED58() & 1) == 0)
  {
    if (a1 < 0)
    {
      __break(1u);
    }
    else if (a1)
    {
      goto LABEL_4;
    }
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
LABEL_4:
  v67 = v11;
  unint64_t v21 = (os_unfair_lock_s *)(*(void *)((char *)v2 + *(void *)(*v2 + 216)) + 16);
  os_unfair_lock_lock(v21);
  uint64_t v22 = *(void *)(*v2 + 200);
  uint64_t v69 = v18;
  uint64_t v23 = (char *)v2 + v22;
  swift_beginAccess();
  uint64_t v24 = v23;
  uint64_t v25 = v69;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v24, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v17, 1, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    os_unfair_lock_unlock(v21);
    return;
  }
  os_unfair_lock_t v61 = v21;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v20, v17, v12);
  uint64_t v26 = *(void *)(*v2 + 232);
  if (*((unsigned char *)v2 + v26))
  {
    uint64_t v27 = (void *)((char *)v2 + *(void *)(*v2 + 208));
    swift_beginAccess();
    uint64_t v28 = *v27;
    sub_2510BED78();
    char v29 = sub_2510BED58();
    uint64_t v30 = v61;
    if (v29)
    {
LABEL_30:
      swift_endAccess();
      os_unfair_lock_unlock(v30);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v20, v12);
      return;
    }
    sub_2510BED78();
    char v31 = sub_2510BED58();
    uint64_t v32 = sub_2510BED78();
    if (v31)
    {
      uint64_t v25 = v69;
LABEL_29:
      *uint64_t v27 = v32;
      goto LABEL_30;
    }
    char v40 = sub_2510BED58();
    uint64_t v25 = v69;
    if (v40) {
      goto LABEL_22;
    }
    if (((v28 | a1) & 0x8000000000000000) == 0)
    {
      uint64_t v32 = v28 + a1;
      if (!__OFADD__(v28, a1))
      {
        if ((v32 & 0x8000000000000000) == 0) {
          goto LABEL_29;
        }
        goto LABEL_60;
      }
LABEL_22:
      uint64_t v32 = sub_2510BED78();
      goto LABEL_29;
    }
    goto LABEL_58;
  }
  v60 = v20;
  sub_2510BED78();
  if (sub_2510BED58())
  {
    uint64_t v33 = sub_2510BED78();
    uint64_t v34 = v64;
    id v35 = v65;
    goto LABEL_15;
  }
  uint64_t v34 = v64;
  id v35 = v65;
  if (a1 < 0) {
    goto LABEL_55;
  }
  if (!a1)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v33 = a1 - 1;
LABEL_15:
  uint64_t v36 = (void *)((char *)v2 + *(void *)(*v2 + 208));
  swift_beginAccess();
  uint64_t v37 = *v36;
  sub_2510BED78();
  if ((sub_2510BED58() & 1) == 0)
  {
    sub_2510BED78();
    char v38 = sub_2510BED58();
    uint64_t v39 = sub_2510BED78();
    if (v38)
    {
      uint64_t v25 = v69;
    }
    else
    {
      char v41 = sub_2510BED58();
      uint64_t v25 = v69;
      if (v41) {
        goto LABEL_27;
      }
      if ((v37 | v33) < 0)
      {
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      uint64_t v39 = v37 + v33;
      if (__OFADD__(v37, v33))
      {
LABEL_27:
        uint64_t v39 = sub_2510BED78();
      }
      else if (v39 < 0)
      {
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
    }
    *uint64_t v36 = v39;
  }
  v65 = v36;
  uint64_t v42 = v35;
  uint64_t v43 = v34;
  swift_endAccess();
  uint64_t v44 = 1;
  *((unsigned char *)v2 + v26) = 1;
  if (v2[2])
  {
    swift_retain();
    uint64_t v45 = (uint64_t)v67;
    sub_251068D88((uint64_t)v67);
    swift_release();
    uint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = (uint64_t)v67;
  }
  uint64_t v46 = v68;
  uint64_t v47 = v66;
  uint64_t v48 = v43;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v45, v44, 1, v43);
  os_unfair_lock_unlock(v61);
  v49 = v42;
  ((void (*)(char *, uint64_t, uint64_t))v42[2])(v9, v45, v46);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v9, 1, v48) == 1)
  {
    v50 = (void (*)(uint64_t, uint64_t))v42[1];
    v50(v45, v46);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v60, v12);
    v50((uint64_t)v9, v46);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v63, v9, v48);
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v51 = sub_2510BED08();
  uint64_t v52 = v69;
  os_unfair_recursive_lock_unlock();
  sub_2510BED78();
  char v53 = sub_2510BED58();
  v54 = v61;
  if (v53) {
    goto LABEL_41;
  }
  if (v51 < 0)
  {
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (!v51)
  {
LABEL_52:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v63, v48);
    ((void (*)(char *, uint64_t))v49[1])(v67, v68);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v60, v12);
    return;
  }
LABEL_41:
  os_unfair_lock_lock(v61);
  v55 = v65;
  swift_beginAccess();
  uint64_t v56 = *v55;
  sub_2510BED78();
  if (sub_2510BED58())
  {
LABEL_51:
    swift_endAccess();
    os_unfair_lock_unlock(v54);
    uint64_t v47 = v66;
    goto LABEL_52;
  }
  sub_2510BED78();
  char v57 = sub_2510BED58();
  uint64_t v58 = sub_2510BED78();
  if (v57)
  {
    uint64_t v52 = v69;
LABEL_50:
    uint64_t *v65 = v58;
    goto LABEL_51;
  }
  char v59 = sub_2510BED58();
  uint64_t v52 = v69;
  if (v59) {
    goto LABEL_48;
  }
  if ((v56 | v51) < 0)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v58 = v56 + v51;
  if (__OFADD__(v56, v51))
  {
LABEL_48:
    uint64_t v58 = sub_2510BED78();
    goto LABEL_50;
  }
  if ((v58 & 0x8000000000000000) == 0) {
    goto LABEL_50;
  }
LABEL_63:
  __break(1u);
}

uint64_t sub_25105D460(unint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v10 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_2510BFAF8();
    swift_bridgeObjectRelease();
  }
  sub_251065E84(0, a2);
  sub_251067900(a4, a2);
  uint64_t result = sub_2510BF538();
  uint64_t v18 = result;
  if (v10)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_2510BFAF8();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v12) {
      return v18;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v12) {
      return v18;
    }
  }
  if (v12 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        uint64_t v14 = (void *)MEMORY[0x2533934D0](i, a1);
        sub_25105D5F8(&v17, v14, a2, a3, a5, a4);
      }
    }
    else
    {
      uint64_t v15 = (void **)(a1 + 32);
      do
      {
        uint64_t v16 = *v15++;
        sub_25105D5F8(&v17, v16, a2, a3, a5, a4);

        --v12;
      }
      while (v12);
    }
    return v18;
  }
  __break(1u);
  return result;
}

uint64_t sub_25105D5F8(void *a1, void *a2, unint64_t *a3, uint64_t a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11 = v6;
  uint64_t v14 = *v6;
  if ((*v6 & 0xC000000000000001) != 0)
  {
    if (v14 < 0) {
      uint64_t v15 = *v6;
    }
    else {
      uint64_t v15 = v14 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v16 = a2;
    uint64_t v17 = sub_2510BF8A8();

    if (v17)
    {
      swift_bridgeObjectRelease();

      sub_251065E84(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v42;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = sub_2510BF898();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v29 = sub_2510AAC38(v15, result + 1, a5, a3, a4, a6);
    uint64_t v43 = v29;
    unint64_t v30 = *(void *)(v29 + 16);
    if (*(void *)(v29 + 24) <= v30)
    {
      id v35 = a5;
      uint64_t v36 = v30 + 1;
      id v37 = v16;
      sub_2510AB13C(v36, v35, a3, a4, a6);
      uint64_t v31 = v43;
    }
    else
    {
      uint64_t v31 = v29;
      id v32 = v16;
    }
    sub_2510AB3D8((uint64_t)v16, v31);
    *uint64_t v11 = v31;
    swift_bridgeObjectRelease();
    *a1 = v16;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_2510BF7C8();
    uint64_t v20 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v21 = v19 & ~v20;
    uint64_t v40 = a4;
    if ((*(void *)(v14 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21))
    {
      sub_251065E84(0, a3);
      id v22 = *(id *)(*(void *)(v14 + 48) + 8 * v21);
      char v23 = sub_2510BF7D8();

      if (v23)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v27 = *(void **)(*(void *)(*v6 + 48) + 8 * v21);
        *a1 = v27;
        id v28 = v27;
        return 0;
      }
      uint64_t v24 = ~v20;
      while (1)
      {
        unint64_t v21 = (v21 + 1) & v24;
        if (((*(void *)(v14 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          break;
        }
        id v25 = *(id *)(*(void *)(v14 + 48) + 8 * v21);
        char v26 = sub_2510BF7D8();

        if (v26) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v44 = *v6;
    *uint64_t v6 = 0x8000000000000000;
    id v34 = a2;
    sub_25105D8E4((uint64_t)v34, v21, isUniquelyReferenced_nonNull_native, a5, a3, v40, a6);
    *uint64_t v6 = v44;
    swift_bridgeObjectRelease();
    *a1 = v34;
  }
  return 1;
}

void sub_25105D8E4(uint64_t a1, unint64_t a2, char a3, unint64_t *a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  unint64_t v11 = *(void *)(*v7 + 16);
  unint64_t v12 = *(void *)(*v7 + 24);
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v13 = v11 + 1;
  if (a3)
  {
    sub_2510AB13C(v13, a4, a5, a6, a7);
  }
  else
  {
    if (v12 > v11)
    {
      sub_2510AB7A8(a4, a5, a6, a7);
      goto LABEL_14;
    }
    sub_2510ABC0C(v13, a4, a5, a6, a7);
  }
  uint64_t v14 = *v7;
  uint64_t v15 = sub_2510BF7C8();
  uint64_t v16 = -1 << *(unsigned char *)(v14 + 32);
  a2 = v15 & ~v16;
  if ((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_251065E84(0, a5);
    id v17 = *(id *)(*(void *)(v14 + 48) + 8 * a2);
    char v18 = sub_2510BF7D8();

    if (v18)
    {
LABEL_13:
      sub_2510BFC78();
      __break(1u);
    }
    else
    {
      uint64_t v19 = ~v16;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v20 = *(id *)(*(void *)(v14 + 48) + 8 * a2);
        char v21 = sub_2510BF7D8();

        if (v21) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v22 = *v7;
  *(void *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v22 + 48) + 8 * a2) = a1;
  uint64_t v23 = *(void *)(v22 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v22 + 16) = v25;
  }
}

uint64_t sub_25105DA9C()
{
  return FeatureStatusProviding<>.publisher.getter();
}

uint64_t FeatureStatusProviding<>.publisher.getter()
{
  return sub_2510BEE58();
}

unint64_t sub_25105DB00()
{
  unint64_t result = qword_26B211808[0];
  if (!qword_26B211808[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26B211808);
  }
  return result;
}

BOOL FeatureStatus.isOnboardingRecordPresent.getter()
{
  uint64_t v1 = type metadata accessor for FeatureStatus(0);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251065FEC(v0, (uint64_t)v3, type metadata accessor for FeatureStatus);
  BOOL v4 = swift_getEnumCaseMultiPayload() != 1;
  sub_251065F8C((uint64_t)v3, type metadata accessor for FeatureStatus);
  return v4;
}

uint64_t DownstreamHandlerSubscription.sendValueToDownstreamIfNeeded(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void (*v32)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t AssociatedConformanceWitness;
  void v58[3];
  uint64_t v59;
  uint64_t v60;

  uint64_t v5 = v4;
  v50 = a1;
  v54 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  char v53 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v52 = (char *)&v45 - v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for DownstreamHandlerSubscriptionState();
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v51 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v45 - v13;
  v49 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 32);
  v49(v58, a2, a3);
  uint64_t v16 = v59;
  uint64_t v15 = v60;
  __swift_project_boxed_opaque_existential_0(v58, v59);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  id v17 = *(void (**)(uint64_t, uint64_t))(a3 + 40);
  uint64_t v18 = v4;
  v55 = a3;
  uint64_t v56 = a2;
  v17(a2, a3);
  uint64_t v48 = v10;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = type metadata accessor for DownstreamHandlerSubscriptionState.Inactive();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = v54;
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v54, v14, v19);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v21, 0, 1, v19);
LABEL_3:
    uint64_t v23 = v55;
    uint64_t v22 = v56;
LABEL_22:
    type metadata accessor for DownstreamHandlerSendFailureReason();
    swift_getWitnessTable();
    sub_2510BFD68();
    swift_storeEnumTagMultiPayload();
    return sub_25105E268(v18, v22, v23);
  }
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v25 = *(void *)&v14[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v27 = v52;
  uint64_t v26 = v53;
  id v28 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
  uint64_t v47 = AssociatedTypeWitness;
  v28(v52, v14, AssociatedTypeWitness);
  sub_2510BED78();
  uint64_t result = sub_2510BED58();
  if ((result & 1) == 0)
  {
    if (v25 < 0)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (!v25)
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v47);
      uint64_t v43 = type metadata accessor for DownstreamHandlerSubscriptionState.Inactive();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v54, 1, 1, v43);
      goto LABEL_3;
    }
  }
  sub_2510BED78();
  uint64_t result = sub_2510BED58();
  uint64_t v46 = TupleTypeMetadata2;
  if (result)
  {
    uint64_t v45 = sub_2510BED78();
    goto LABEL_12;
  }
  if (v25 < 0) {
    goto LABEL_24;
  }
  if (!v25)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v45 = v25 - 1;
LABEL_12:
  uint64_t v30 = v55;
  uint64_t v31 = v56;
  id v32 = v49;
  v49(v58, v56, v55);
  uint64_t v33 = v59;
  id v34 = v60;
  __swift_project_boxed_opaque_existential_0(v58, v59);
  (*(void (**)(uint64_t, uint64_t))(v34 + 16))(v33, v34);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  id v35 = v47;
  v50 = sub_2510BED08();
  v32(v58, v31, v30);
  uint64_t v36 = v59;
  id v37 = v60;
  __swift_project_boxed_opaque_existential_0(v58, v59);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v37);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  char v38 = v53;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v51, v27, v35);
  sub_2510BED78();
  uint64_t v39 = v45;
  uint64_t v40 = sub_2510BED58();
  char v41 = sub_2510BED78();
  if (v40)
  {
    uint64_t v18 = v5;
    uint64_t v23 = v55;
    uint64_t v22 = v56;
LABEL_21:
    uint64_t v44 = v51;
    *(void *)&v51[*(int *)(v46 + 48)] = v41;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 48))(v44, v22, v23);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v52, v35);
    goto LABEL_22;
  }
  uint64_t v42 = v50;
  uint64_t result = sub_2510BED58();
  uint64_t v18 = v5;
  uint64_t v23 = v55;
  uint64_t v22 = v56;
  if (result)
  {
LABEL_18:
    char v41 = sub_2510BED78();
    goto LABEL_21;
  }
  if ((v42 | v39) < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  char v41 = v39 + v42;
  if (__OFADD__(v39, v42)) {
    goto LABEL_18;
  }
  if ((v41 & 0x8000000000000000) == 0) {
    goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DownstreamHandlerSendFailureReason()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25105E268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 32))(v6, a2, a3);
  uint64_t v3 = v7;
  uint64_t v4 = v8;
  __swift_project_boxed_opaque_existential_0(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t sub_25105E2F0(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_25105E314(a1, a2, a3);
}

uint64_t sub_25105E314(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v35 = a3;
  id v32 = (void *)*v3;
  uint64_t v7 = v32[11];
  uint64_t v33 = v32[12];
  uint64_t v8 = sub_2510BED28();
  uint64_t v9 = sub_2510BF808();
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = *(void *)(v8 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v10);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v17 = *(a2 - 1);
  MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_t v34 = (os_unfair_lock_t)(v4[2] + 16);
  os_unfair_lock_lock(v34);
  if (*((unsigned char *)v4 + 25) == 1)
  {
    v36[0] = v32[10];
    v36[1] = v7;
    v36[2] = a2;
    uint64_t v37 = v35;
    uint64_t v20 = type metadata accessor for StreamPublisher.StreamConduit();
    uint64_t v21 = *(void (**)(char *, uint64_t, void *))(v17 + 16);
    uint64_t v31 = a1;
    id v32 = a2;
    v21(v19, a1, a2);
    swift_allocObject();
    uint64_t v22 = swift_retain();
    uint64_t v23 = sub_25105EA00(v22, (uint64_t)v19);
    BOOL v24 = (char *)v4 + *(void *)(*v4 + 136);
    swift_beginAccess();
    BOOL v25 = sub_25105E7DC(*(void *)v24, v24[8]);
    swift_beginAccess();
    type metadata accessor for StreamConduitList();
    sub_25105E808(v23);
    swift_endAccess();
    uint64_t v26 = (char *)v4 + *(void *)(*v4 + 136);
    swift_beginAccess();
    BOOL v27 = sub_25105E7DC(*(void *)v26, v26[8]);
    if (v25 && !v27) {
      (*(void (**)(void))(*v4 + 392))();
    }
    os_unfair_lock_unlock(v34);
    uint64_t v37 = v20;
    uint64_t WitnessTable = swift_getWitnessTable();
    v36[0] = v23;
    sub_2510BECF8();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  }
  else
  {
    sub_251075814((uint64_t)v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v8) == 1)
    {
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v12, v31);
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, v8);
      os_unfair_lock_unlock(v34);
      sub_2510BEDA8();
      sub_2510BECF8();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      sub_2510BECE8();
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v8);
    }
  }
  return result;
}

BOOL sub_25105E7DC(uint64_t a1, char a2)
{
  return !a1 && a2 == 2;
}

uint64_t type metadata accessor for StreamConduitList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25105E808(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = result;
  uint64_t v4 = *(void *)v2;
  if (*(unsigned char *)(v2 + 8))
  {
    if (*(unsigned char *)(v2 + 8) == 1)
    {
      uint64_t v9 = *(void *)v2;
      swift_retain();
      sub_251068CF0(v4, 1);
      type metadata accessor for StreamConduitBase();
      swift_getWitnessTable();
      sub_2510BF588();
      sub_2510BF558();
      swift_release();
      uint64_t v5 = *(void *)v2;
      *(void *)uint64_t v2 = v9;
      char v6 = *(unsigned char *)(v2 + 8);
      *(unsigned char *)(v2 + 8) = 1;
      swift_bridgeObjectRetain();
      sub_2510606A0(v5, v6);
      return swift_bridgeObjectRelease();
    }
    else
    {
      *(void *)uint64_t v2 = result;
      *(unsigned char *)(v2 + 8) = 0;
      return swift_retain();
    }
  }
  else if (v4 != result)
  {
    type metadata accessor for StreamConduitBase();
    sub_2510675D4();
    swift_allocObject();
    uint64_t v7 = sub_2510BF438();
    *uint64_t v8 = v4;
    v8[1] = v3;
    sub_2510675A8(v7);
    sub_2510BF488();
    swift_retain();
    swift_getWitnessTable();
    swift_getWitnessTable();
    uint64_t result = sub_2510BF598();
    *(void *)uint64_t v2 = result;
    *(unsigned char *)(v2 + 8) = 1;
  }
  return result;
}

uint64_t sub_25105EA00(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 176);
  uint64_t v5 = sub_2510BF808();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v18 - v7;
  v2[2] = 0;
  uint64_t v9 = (char *)v2 + *(void *)(v3 + 200);
  uint64_t v10 = *(void *)(v4 - 8);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v11(v9, 1, 1, v4);
  uint64_t v12 = *(void *)(*v2 + 208);
  swift_retain();
  *(void *)((char *)v2 + v12) = sub_2510BED68();
  uint64_t v13 = *(void *)(*v2 + 216);
  sub_25105ECA4(0, (unint64_t *)&qword_26B212DE8, type metadata accessor for os_unfair_lock_s);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 0;
  *(void *)((char *)v2 + v13) = v14;
  uint64_t v15 = *(void *)(*v2 + 224);
  sub_25105ECA4(0, (unint64_t *)&unk_26B212DF0, type metadata accessor for os_unfair_recursive_lock_s);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = 0;
  *(void *)((char *)v2 + v15) = v16;
  *((unsigned char *)v2 + *(void *)(*v2 + 232)) = 0;
  v2[2] = v19;
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v8, v20, v4);
  v11(v8, 0, 1, v4);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v9, v8, v5);
  swift_endAccess();
  swift_release();
  return sub_25105ED04();
}

void sub_25105ECA4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_2510BF9B8();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_25105ED04()
{
  return v0;
}

uint64_t type metadata accessor for StreamPublisher.StreamConduit()
{
  return swift_getGenericMetadata();
}

uint64_t HKHealthStore.cloudSyncStatusPublisher()()
{
  sub_25105F15C();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v1);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26B212790 != -1) {
    uint64_t v4 = swift_once();
  }
  MEMORY[0x270FA5388](v4);
  *(&v12 - 2) = v0;
  uint64_t v8 = (uint64_t)&v7[4];
  uint64_t v9 = v7 + 6;
  os_unfair_lock_lock(v7 + 6);
  sub_25105F088(v8, &v13);
  os_unfair_lock_unlock(v9);
  sub_25105EFA0();
  sub_25105F008();
  sub_25105EF58(&qword_26B212CF8, (void (*)(uint64_t))sub_25105EFA0);
  sub_2510BEE68();
  sub_25105EF58(&qword_26B212D90, (void (*)(uint64_t))sub_25105F15C);
  uint64_t v10 = sub_2510BEE58();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v10;
}

uint64_t sub_25105EF58(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_25105EFA0()
{
  if (!qword_26B212D00[0])
  {
    sub_251065E84(255, &qword_26B212DA8);
    unint64_t v0 = type metadata accessor for CloudSyncStatusPublisherImpl();
    if (!v1) {
      atomic_store(v0, qword_26B212D00);
    }
  }
}

void sub_25105F008()
{
  if (!qword_26B212E00)
  {
    sub_251065E84(255, (unint64_t *)&qword_26B212DB0);
    sub_251067550();
    unint64_t v0 = sub_2510BFD68();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212E00);
    }
  }
}

id sub_25105F088@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_25105F0A4(a1, *(void **)(v2 + 16), a2);
}

id sub_25105F0A4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void **)(*(void *)a1 + 16);
  id result = objc_msgSend(v5, sel_objectForKey_, a2);
  uint64_t v7 = (uint64_t)result;
  if (!result)
  {
    sub_25105EFA0();
    uint64_t v8 = (void *)swift_allocObject();
    v8[10] = a2;
    v8[11] = 0;
    v8[13] = 0;
    v8[14] = 0;
    v8[12] = 0;
    uint64_t v7 = sub_25105F208(0, 255);
    id result = objc_msgSend(v5, sel_setObject_forKey_, v7, a2);
  }
  *a3 = v7;
  return result;
}

void sub_25105F15C()
{
  if (!qword_26B212D98)
  {
    sub_25105EFA0();
    sub_25105F008();
    sub_25105EF58(&qword_26B212CF8, (void (*)(uint64_t))sub_25105EFA0);
    unint64_t v0 = sub_2510BEC68();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212D98);
    }
  }
}

uint64_t sub_25105F208(uint64_t a1, char a2)
{
  *(void *)(v2 + 48) = a1;
  *(unsigned char *)(v2 + 56) = a2;
  sub_251064BAC();
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  *(void *)(v2 + 16) = v3;
  *(void *)(v2 + 32) = 0;
  uint64_t v4 = MEMORY[0x263F8EE78];
  *(unsigned char *)(v2 + 40) = 2;
  *(void *)(v2 + 64) = v4;
  *(unsigned char *)(v2 + 72) = 0;
  *(_DWORD *)(v2 + 24) = 16777472;
  return v2;
}

uint64_t sub_25105F268(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v4;
  v8[3] = a1;
  v8[4] = a2;
  a4(0);
  swift_allocObject();
  id v9 = v4;
  swift_bridgeObjectRetain();
  return sub_2510BEE28();
}

void sub_25105F2F8()
{
  if (!qword_26B2118F0)
  {
    sub_25105F658(255, (unint64_t *)&qword_26B212E58, MEMORY[0x263F07490]);
    sub_251067550();
    unint64_t v0 = sub_2510BEE18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2118F0);
    }
  }
}

void sub_25105F384()
{
  if (!qword_26B211918)
  {
    sub_2510725FC(255, &qword_26B211998);
    sub_251067550();
    unint64_t v0 = sub_2510BEE18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B211918);
    }
  }
}

uint64_t sub_25105F404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t sub_25105F474(uint64_t a1, uint64_t a2, void *a3)
{
  sub_25105F658(0, (unint64_t *)&qword_26B212E58, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v14 - v7;
  id v9 = *(void (**)(char *, void *))(a1 + 32);
  if (a2)
  {
    sub_2510BE8F8();
    uint64_t v10 = sub_2510BE908();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 0, 1, v10);
  }
  else
  {
    uint64_t v11 = sub_2510BE908();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
  }
  swift_retain();
  id v12 = a3;
  v9(v8, a3);
  swift_release();

  return sub_25105F5F8((uint64_t)v8, (uint64_t)&qword_26B212E58, MEMORY[0x263F07490], (uint64_t (*)(void))sub_25105F658);
}

uint64_t sub_25105F5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void sub_25105F658(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_2510BF808();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_25105F6AC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_25105F710(uint64_t a1, void *a2)
{
  return sub_25105F71C(a1, a2, *(void (**)(void *))(v2 + 16));
}

uint64_t sub_25105F71C(uint64_t a1, void *a2, void (*a3)(void *))
{
  sub_25105F89C();
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = (uint64_t *)((char *)&v12 - v8);
  if (a2) {
    *uint64_t v9 = a2;
  }
  else {
    sub_25105F404(a1, (uint64_t)&v12 - v8, (uint64_t)&qword_26B212E58, MEMORY[0x263F07490], (uint64_t (*)(void, uint64_t, uint64_t))sub_25105F658);
  }
  swift_storeEnumTagMultiPayload();
  id v10 = a2;
  a3(v9);
  return sub_25105F83C((uint64_t)v9, (uint64_t (*)(void))sub_25105F89C);
}

uint64_t sub_25105F83C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_25105F89C()
{
  if (!qword_26B212190)
  {
    sub_25105F658(255, (unint64_t *)&qword_26B212E58, MEMORY[0x263F07490]);
    sub_251067550();
    unint64_t v0 = sub_2510BFD68();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212190);
    }
  }
}

id HKSharingAuthorizationIdentifier.sharingAuthorization.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  int v5 = *(unsigned __int8 *)(v0 + 48);
  uint64_t v6 = sub_25105FAC4();
  uint64_t v8 = v7;
  if ((v5 | 2) == 3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v1 = 0;
    uint64_t v2 = 0;
  }
  id v9 = objc_allocWithZone(MEMORY[0x263F0A730]);
  return sub_25105F9F4(v6, v8, v1, v2, v3, v4);
}

id sub_25105F9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v9 = (void *)sub_2510BF228();
  swift_bridgeObjectRelease();
  if (!a4)
  {
    id v10 = 0;
    if (a6) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v11 = 0;
    goto LABEL_6;
  }
  id v10 = (void *)sub_2510BF228();
  swift_bridgeObjectRelease();
  if (!a6) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v11 = (void *)sub_2510BF228();
  swift_bridgeObjectRelease();
LABEL_6:
  id v12 = objc_msgSend(v6, sel_initWithAuthorizationIdentifier_displayName_displaySubtitle_, v9, v10, v11);

  return v12;
}

uint64_t sub_25105FAC4()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = *(unsigned __int8 *)(v0 + 48);
  sub_2510BFA68();
  if (qword_26B211590 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  sub_2510BF188();
  swift_bridgeObjectRelease();
  switch(v7)
  {
    case 1:
    case 3:
      swift_bridgeObjectRetain();
      break;
    case 2:
    case 4:
      break;
    default:
      objc_msgSend(v1, sel_code);
      sub_2510BFBF8();
      sub_25105B5D4(v1, v2, v3, v4, v5, v6, 0);
      break;
  }
  sub_2510BF2F8();
  swift_bridgeObjectRelease();
  return 0;
}

void _s29StatisticsCollectionPublisherVwxx(id *a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  uint64_t v5 = (char *)a1 + v4[7];
  uint64_t v6 = sub_2510BE908();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = (char *)a1 + v4[8];
  uint64_t v8 = sub_2510BE798();
  (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  id v9 = (char *)a1 + v4[9];
  uint64_t v10 = sub_2510BE6D8();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  }

  swift_bridgeObjectRelease();
  id v12 = *(id *)((char *)a1 + *(int *)(a2 + 20));
}

uint64_t sub_25105FE30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void *_s29StatisticsCollectionPublisherVwcp(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  a1[2] = *(void *)(a2 + 16);
  uint64_t v7 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  uint64_t v8 = v7[7];
  id v9 = (char *)a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_2510BE908();
  id v12 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  id v13 = v5;
  id v14 = v6;
  v12(v9, v10, v11);
  uint64_t v15 = v7[8];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_2510BE798();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  uint64_t v19 = v7[9];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (const void *)(a2 + v19);
  uint64_t v22 = sub_2510BE6D8();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_2510600E4();
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  *((unsigned char *)a1 + v7[10]) = *(unsigned char *)(a2 + v7[10]);
  uint64_t v25 = v7[11];
  uint64_t v26 = *(void **)(a2 + v25);
  *(void *)((char *)a1 + v25) = v26;
  uint64_t v27 = v7[12];
  id v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  uint64_t v30 = v29[1];
  void *v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = *(int *)(a3 + 20);
  id v32 = *(void **)(a2 + v31);
  *(void *)((char *)a1 + v31) = v32;
  id v33 = v26;
  swift_bridgeObjectRetain();
  id v34 = v32;
  return a1;
}

uint64_t type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(uint64_t a1)
{
  return sub_251065BC4(a1, qword_26B211C88);
}

void sub_2510600E4()
{
  if (!qword_26B211680[0])
  {
    sub_2510BE6D8();
    unint64_t v0 = sub_2510BF808();
    if (!v1) {
      atomic_store(v0, qword_26B211680);
    }
  }
}

void *_s29StatisticsCollectionPublisherV13ConfigurationVwcp(void *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v7;
  a1[2] = *(void *)(a2 + 16);
  uint64_t v8 = a3[7];
  id v9 = (char *)a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_2510BE908();
  id v12 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  id v13 = v6;
  id v14 = v7;
  v12(v9, v10, v11);
  uint64_t v15 = a3[8];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_2510BE798();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  uint64_t v19 = a3[9];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (const void *)(a2 + v19);
  uint64_t v22 = sub_2510BE6D8();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    sub_2510600E4();
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  uint64_t v25 = a3[11];
  *((unsigned char *)a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v26 = *(void **)(a2 + v25);
  *(void *)((char *)a1 + v25) = v26;
  uint64_t v27 = a3[12];
  id v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  uint64_t v30 = v29[1];
  void *v28 = *v29;
  v28[1] = v30;
  id v31 = v26;
  swift_bridgeObjectRetain();
  return a1;
}

void sub_25106033C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)sub_2510BF228();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v10[4] = sub_25105F710;
  v10[5] = v7;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1107296256;
  v10[2] = sub_25105F474;
  v10[3] = &block_descriptor_174;
  uint64_t v8 = _Block_copy(v10);
  swift_retain();
  id v9 = a3;
  swift_release();
  objc_msgSend(v9, sel_dateForKey_completion_, v6, v8);
  _Block_release(v8);
}

uint64_t dispatch thunk of FeatureStatusProviding.featureStatus()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_251060474@<X0>(uint64_t a1@<X8>)
{
  return FeatureStatusProviding<>.featureStatus()(a1);
}

uint64_t FeatureStatusProviding<>.featureStatus()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  v9[1] = *(id *)MEMORY[0x263EF8340];
  v9[0] = 0;
  id v4 = objc_msgSend(v2, sel_featureStatusWithError_, v9);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = v9[0];
    return FeatureStatus.init(_:)(v5, a1);
  }
  else
  {
    id v8 = v9[0];
    sub_2510BE838();

    return swift_willThrow();
  }
}

uint64_t sub_25106055C()
{
  if (*(void *)(v0 + 88)) {
    objc_msgSend(*(id *)(v0 + 80), sel_stopQuery_);
  }
  uint64_t v1 = sub_2510606CC();

  return swift_deallocClassInstance();
}

uint64_t sub_2510605C4()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_251077D44(v3, (uint64_t)v5);
      __swift_project_boxed_opaque_existential_0(v5, v5[3]);
      sub_2510BED18();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
      v3 += 40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  swift_release();
  sub_2510606BC(*(id *)(v0 + 32));
  sub_2510606A0(*(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_2510606A0(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_bridgeObjectRelease();
  }
  if (!a2) {
    return swift_release();
  }
  return result;
}

void sub_2510606BC(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t HKQueryPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a5;
  uint64_t v10 = *(void *)(a2 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  uint64_t v26 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = v16;
  swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for HKQueryPublisherInner();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, a3);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a2, a4);
  uint64_t v18 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v26, v5, a2);
  unint64_t v19 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = a2;
  *((void *)v20 + 3) = a3;
  *((void *)v20 + 4) = a4;
  *((void *)v20 + 5) = v24;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v20[v19], v18, a2);
  uint64_t v21 = swift_allocObject();
  sub_2510609DC((uint64_t)v27, v25, (uint64_t)sub_251061EDC, (uint64_t)v20);
  v28[3] = v17;
  v28[4] = swift_getWitnessTable();
  v28[0] = v21;
  sub_2510BECF8();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

void *_s17ObserverPublisherVwcp(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  id v4 = (void *)a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

uint64_t type metadata accessor for HKQueryPublisherInner()
{
  return __swift_instantiateGenericMetadata();
}

void *sub_2510609DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(*v4 + 80);
  uint64_t v7 = sub_2510BF808();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = (char *)v4 + *(void *)(v5 + 112);
  uint64_t v12 = *(void *)(v6 - 8);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v13(v11, 1, 1, v6);
  uint64_t v14 = *(void *)(*v4 + 120);
  uint64_t v15 = (_DWORD *)swift_slowAlloc();
  *uint64_t v15 = 0;
  *(void *)((char *)v4 + v14) = v15;
  uint64_t v16 = *(void *)(*v4 + 136);
  *(void *)((char *)v4 + v16) = sub_2510BED68();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v10, v22, v6);
  v13(v10, 0, 1, v6);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v11, v10, v7);
  swift_endAccess();
  uint64_t v17 = v24;
  v4[2] = v23;
  uint64_t v18 = (char *)v4 + *(void *)(*v4 + 128);
  uint64_t v19 = v25;
  *(void *)uint64_t v18 = v17;
  *((void *)v18 + 1) = v19;
  v18[16] = 0;
  return v4;
}

void *_s15SamplePublisherVwcp(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = (void *)a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

id sub_251060C80()
{
  return *(id *)(v0 + 40);
}

id sub_251060C88()
{
  return *(id *)(v0 + 24);
}

void HKSharingAuthorizationIdentifier.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_authorizationIdentifier);
  uint64_t v5 = sub_2510BF258();
  unint64_t v7 = v6;

  sub_251060FDC(v5, v7);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if (v9)
  {
    swift_bridgeObjectRetain();
    switch(sub_251060F90())
    {
      case 1u:
        swift_bridgeObjectRelease();
        id v16 = objc_msgSend(a1, sel_displayName);
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = sub_2510BF258();
          uint64_t v20 = v19;
        }
        else
        {
          uint64_t v18 = 0;
          uint64_t v20 = 0;
        }
        id v27 = objc_msgSend(a1, sel_displaySubtitle);
        if (v27)
        {
          id v28 = v27;
          uint64_t v29 = sub_2510BF258();
          uint64_t v31 = v30;
        }
        else
        {

          uint64_t v29 = 0;
          uint64_t v31 = 0;
        }
        *(void *)a2 = v11;
        *(void *)(a2 + 8) = v13;
        *(void *)(a2 + 16) = v18;
        *(void *)(a2 + 24) = v20;
        *(void *)(a2 + 32) = v29;
        *(void *)(a2 + 40) = v31;
        char v15 = 1;
        break;
      case 2u:
        swift_bridgeObjectRelease();
        uint64_t v21 = sub_2510BFB78();

        swift_bridgeObjectRelease();
        if (v21)
        {
          if (v21 != 1) {
            goto LABEL_15;
          }
          *(void *)a2 = 1;
          *(_OWORD *)(a2 + 8) = 0u;
          *(_OWORD *)(a2 + 24) = 0u;
          *(void *)(a2 + 40) = 0;
          char v15 = 2;
        }
        else
        {
          *(_OWORD *)(a2 + 16) = 0u;
          *(_OWORD *)(a2 + 32) = 0u;
          *(_OWORD *)a2 = 0u;
          char v15 = 2;
        }
        break;
      case 3u:
        swift_bridgeObjectRelease();
        id v22 = objc_msgSend(a1, sel_displayName);
        if (v22)
        {
          uint64_t v23 = v22;
          uint64_t v24 = sub_2510BF258();
          uint64_t v26 = v25;
        }
        else
        {
          uint64_t v24 = 0;
          uint64_t v26 = 0;
        }
        id v32 = objc_msgSend(a1, sel_displaySubtitle);
        if (v32)
        {
          id v33 = v32;
          uint64_t v34 = sub_2510BF258();
          uint64_t v36 = v35;
        }
        else
        {

          uint64_t v34 = 0;
          uint64_t v36 = 0;
        }
        *(void *)a2 = v11;
        *(void *)(a2 + 8) = v13;
        *(void *)(a2 + 16) = v24;
        *(void *)(a2 + 24) = v26;
        *(void *)(a2 + 32) = v34;
        *(void *)(a2 + 40) = v36;
        char v15 = 3;
        break;
      case 4u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)a2 = 0u;
        char v15 = 4;
        break;
      case 5u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_14;
      default:
        uint64_t v14 = sub_2510A37E8(v11, v13);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        if (!v14) {
          goto LABEL_15;
        }
        *(void *)a2 = v14;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 33) = 0u;
        return;
    }
  }
  else
  {
LABEL_14:

LABEL_15:
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    char v15 = -1;
  }
  *(unsigned char *)(a2 + 48) = v15;
}

uint64_t sub_251060F90()
{
  unint64_t v0 = sub_2510BFB78();
  swift_bridgeObjectRelease();
  if (v0 >= 5) {
    return 5;
  }
  else {
    return v0;
  }
}

uint64_t sub_251060FDC(uint64_t a1, unint64_t a2)
{
  if (qword_26B211590 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_26B214CD0;
  uint64_t v5 = *(void *)algn_26B214CD8;
  swift_bridgeObjectRetain();
  sub_2510611E0(v4, v5, a1, a2);
  LOBYTE(v4) = v6;
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0 && sub_2510BF358() >= 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_2510BF3A8();
    unint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    unint64_t v14 = sub_2510BF2E8();
    swift_bridgeObjectRetain();
    unint64_t v15 = sub_2510612D0(v14, a1, a2);
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    if ((v7 ^ v9) >= 0x4000 && (v15 ^ v17) >= 0x4000)
    {
      uint64_t v22 = MEMORY[0x253392E20](v7, v9, v11, v13);
      swift_bridgeObjectRelease();
      MEMORY[0x253392E20](v15, v17, v19, v21);
      swift_bridgeObjectRelease();
      return v22;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return 0;
}

unint64_t sub_2510611E0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15;
  while (sub_2510BF388() != a1 || v9 != a2)
  {
    char v10 = sub_2510BFC28();
    swift_bridgeObjectRelease();
    if (v10) {
      return v8;
    }
    unint64_t v8 = sub_2510BF2D8();
    if (v7 == v8 >> 14) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_2510612D0(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return sub_2510BF3A8();
  }
  __break(1u);
  return result;
}

uint64_t sub_25106131C(uint64_t a1, void *a2, uint64_t a3, void *aBlock, void *a5)
{
  uint64_t v7 = a3;
  uint64_t v9 = *(void (**)(id, uint64_t, uint64_t (*)(), uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_251065E84(0, (unint64_t *)&qword_26B2119A0);
    sub_251062BFC();
    uint64_t v7 = sub_2510BF528();
  }
  char v10 = _Block_copy(aBlock);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  swift_retain();
  id v12 = a2;
  id v13 = a5;
  v9(v12, v7, sub_251089240, v11, a5);
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_251061434(int a1, int a2, int a3, int a4, void *a5)
{
  sub_25106143C(a1, a2, a3, a4, a5, *(void (**)(id *))(v5 + 16));
}

void sub_25106143C(int a1, int a2, int a3, int a4, id a5, void (*a6)(id *))
{
  if (a5)
  {
    id v9 = a5;
    char v10 = 2;
    id v8 = a5;
    a6(&v9);
  }
  else
  {
    id v9 = 0;
    char v10 = 0;
    a6(&v9);
  }
}

void sub_2510614B8(int a1, void *a2, id a3, void (*a4)(id *))
{
  if (a2)
  {
    id v7 = a2;
    char v8 = 1;
    swift_bridgeObjectRetain();
    a4(&v7);
    swift_bridgeObjectRelease();
  }
  else if (a3)
  {
    id v7 = a3;
    char v8 = 2;
    id v6 = a3;
    a4(&v7);
  }
}

uint64_t sub_251061554()
{
  sub_2510615AC();
  return swift_deallocClassInstance();
}

id *sub_2510615AC()
{
  MEMORY[0x2533940F0](*(id *)((char *)v0 + *((void *)*v0 + 15)), -1, -1);

  uint64_t v1 = (char *)v0 + *((void *)*v0 + 14);
  uint64_t v2 = sub_2510BF808();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_251061EB4(*(id *)((char *)v0 + *((void *)*v0 + 16)), *(id *)((char *)v0 + *((void *)*v0 + 16) + 8), *((unsigned char *)v0 + *((void *)*v0 + 16) + 16));
  return v0;
}

void sub_251061684(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  uint64_t v48 = a1;
  uint64_t v49 = v4;
  uint64_t v5 = *(void *)(v3 + 80);
  uint64_t v6 = sub_2510BF808();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  char v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  id v13 = (char *)&v44 - v12;
  uint64_t v14 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v11);
  v50 = (char *)&v44 - v15;
  uint64_t v16 = *(os_unfair_lock_s **)((char *)v2 + *(void *)(v3 + 120));
  os_unfair_lock_lock(v16);
  uint64_t v17 = (void *)((char *)v2 + *(void *)(*v2 + 136));
  swift_beginAccess();
  uint64_t v18 = *v17;
  sub_2510BED78();
  if ((sub_2510BED58() & 1) == 0)
  {
    if (v18 < 0)
    {
      __break(1u);
      goto LABEL_26;
    }
    if (!v18)
    {
LABEL_6:
      os_unfair_lock_unlock(v16);
      return;
    }
  }
  uint64_t v19 = (char *)v2 + *(void *)(*v2 + 112);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v19, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_6;
  }
  uint64_t v47 = v14;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v50, v13, v5);
  uint64_t v20 = (id *)((char *)v2 + *(void *)(*v2 + 128));
  char v21 = *((unsigned char *)v20 + 16);
  if ((v21 - 1) > 1u
    || (v45 = *(id *)(v49 + 88), id v22 = *v20, sub_251062064(*v20, v20[1], v21), (v46 = v22) == 0))
  {
    os_unfair_lock_unlock(v16);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v50, v5);
    return;
  }
  uint64_t v23 = type metadata accessor for HKQueryPublisherResult();
  char v24 = sub_251062238(v23);
  id v45 = 0;
  if (v24)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v10, 1, 1, v5);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v19, v10, v6);
    swift_endAccess();
    id v25 = *v20;
    id v26 = v20[1];
    *uint64_t v20 = 0;
    v20[1] = 0;
    char v27 = *((unsigned char *)v20 + 16);
    *((unsigned char *)v20 + 16) = 3;
    id v28 = v46;
    id v29 = v46;
    sub_251061EB4(v25, v26, v27);
    id v45 = v28;
  }
  swift_beginAccess();
  uint64_t v30 = *v17;
  sub_2510BED78();
  char v31 = sub_2510BED58();
  uint64_t v32 = v47;
  id v33 = v45;
  if (v31) {
    goto LABEL_19;
  }
  sub_2510BED78();
  if ((sub_2510BED58() & 1) == 0)
  {
    if ((v30 & 0x8000000000000000) == 0)
    {
      if (v30)
      {
        uint64_t v34 = v30 - 1;
        goto LABEL_18;
      }
LABEL_27:
      __break(1u);
      return;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v34 = sub_2510BED78();
LABEL_18:
  *uint64_t v17 = v34;
LABEL_19:
  swift_endAccess();
  os_unfair_lock_unlock(v16);
  if (v33)
  {
    uint64_t v35 = (void *)v2[2];
    id v36 = v33;
    objc_msgSend(v35, sel_stopQuery_, v36);
    os_unfair_lock_lock(v16);
    uint64_t v37 = (char *)v2 + *(void *)(*v2 + 128);
    char v38 = *(void **)v37;
    uint64_t v39 = (void *)*((void *)v37 + 1);
    *(_OWORD *)uint64_t v37 = xmmword_2510C15C0;
    char v40 = v37[16];
    v37[16] = 3;
    sub_251061EB4(v38, v39, v40);
    os_unfair_lock_unlock(v16);
  }
  uint64_t v41 = sub_25106208C(v48);
  if ((v42 & 1) == 0)
  {
    uint64_t v43 = v41;
    os_unfair_lock_lock(v16);
    sub_251062688((uint64_t)v2, v43);
    os_unfair_lock_unlock(v16);
  }

  (*(void (**)(char *, uint64_t))(v32 + 8))(v50, v5);
}

void sub_251061B98(unint64_t a1)
{
}

void sub_251061BBC(unint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = sub_2510BED68();
  sub_2510BED78();
  if (sub_2510BED58())
  {
    sub_2510BED78();
    if (sub_2510BED58())
    {
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
  }
  sub_2510BED78();
  if ((sub_2510BED58() & 1) == 0)
  {
    sub_2510BED78();
    char v5 = sub_2510BED58();
    if (v4 >= a1 || (v5 & 1) != 0) {
      goto LABEL_26;
    }
  }
  uint64_t v6 = *(os_unfair_lock_s **)((char *)v1 + *(void *)(*v1 + 120));
  os_unfair_lock_lock(v6);
  uint64_t v7 = *v1;
  uint64_t v8 = (uint64_t)v1 + *(void *)(*v1 + 128);
  if (*(unsigned char *)(v8 + 16))
  {
    os_unfair_lock_unlock(v6);
    return;
  }
  char v10 = *(uint64_t (**)(void (*)(uint64_t), uint64_t *))v8;
  uint64_t v9 = *(void **)(v8 + 8);
  uint64_t v11 = (uint64_t *)((char *)v2 + *(void *)(v7 + 136));
  swift_beginAccess();
  uint64_t v12 = *v11;
  swift_retain();
  sub_2510BED78();
  if ((sub_2510BED58() & 1) == 0)
  {
    sub_2510BED78();
    char v13 = sub_2510BED58();
    uint64_t v14 = sub_2510BED78();
    if (v13)
    {
LABEL_12:
      *uint64_t v11 = v14;
      goto LABEL_18;
    }
    if ((sub_2510BED58() & 1) == 0)
    {
      if (((v12 | a1) & 0x8000000000000000) != 0)
      {
LABEL_27:
        __break(1u);
        return;
      }
      uint64_t v14 = v12 + a1;
      if (!__OFADD__(v12, a1))
      {
        if ((v14 & 0x8000000000000000) == 0) {
          goto LABEL_12;
        }
        __break(1u);
        goto LABEL_25;
      }
    }
    *uint64_t v11 = sub_2510BED78();
  }
LABEL_18:
  swift_endAccess();
  swift_retain();
  uint64_t v15 = (void *)v10(sub_251061550, v2);
  swift_release();
  uint64_t v16 = *(uint64_t (**)(void (*)(uint64_t), uint64_t *))v8;
  uint64_t v17 = *(void **)(v8 + 8);
  *(void *)uint64_t v8 = v15;
  *(void *)(v8 + 8) = 0;
  char v18 = *(unsigned char *)(v8 + 16);
  *(unsigned char *)(v8 + 16) = 1;
  id v19 = v15;
  sub_251061EB4(v16, v17, v18);
  os_unfair_lock_unlock(v6);
  uint64_t v20 = (void *)v2[2];
  objc_msgSend(v20, sel_executeQuery_, v19);
  os_unfair_lock_lock(v6);
  int v21 = *(unsigned __int8 *)(v8 + 16);
  unint64_t v22 = *(void *)v8;
  unint64_t v23 = *(void *)(v8 + 8);
  if (v21 != 3 || v22 | v23)
  {
    *(void *)uint64_t v8 = v15;
    *(void *)(v8 + 8) = 0;
    *(unsigned char *)(v8 + 16) = 2;
    id v27 = v19;
    char v24 = (uint64_t (*)(void (*)(uint64_t), uint64_t *))v22;
    id v25 = (void *)v23;
    char v26 = v21;
  }
  else
  {
    objc_msgSend(v20, sel_stopQuery_, v19);
    char v24 = *(uint64_t (**)(void (*)(uint64_t), uint64_t *))v8;
    id v25 = *(void **)(v8 + 8);
    *(_OWORD *)uint64_t v8 = xmmword_2510C15C0;
    char v26 = *(unsigned char *)(v8 + 16);
    *(unsigned char *)(v8 + 16) = 3;
  }
  sub_251061EB4(v24, v25, v26);
  os_unfair_lock_unlock(v6);

  sub_251061EB4(v10, v9, 0);
}

void sub_251061EB4(void *a1, id a2, char a3)
{
  if (a3 == 2 || a3 == 1)
  {
  }
  else if (!a3)
  {
    swift_release();
  }
}

uint64_t sub_251061EDC(uint64_t a1, uint64_t a2)
{
  return sub_251061F20(a1, a2, (uint64_t)v2+ ((*(unsigned __int8 *)(*(void *)(v2[2] - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2[2] - 8) + 80)), v2[2], v2[3], v2[4]);
}

uint64_t sub_251061F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v13 = (char *)&v16 - v12;
  (*(void (**)(uint64_t, uint64_t))(a6 + 24))(a4, a6);
  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 40))(v13, a1, a2, a4, a6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  return v14;
}

id sub_251062064(id result, id a2, char a3)
{
  if (a3 == 2 || a3 == 1) {
    return result;
  }
  if (!a3) {
    return (id)swift_retain();
  }
  return result;
}

uint64_t sub_25106208C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 88);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](a1);
  char v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for HKQueryPublisherResult();
  sub_251062570(v6, (uint64_t)v5);
  uint64_t v7 = sub_2510BED08();
  if (sub_251062238(v6))
  {
    uint64_t v9 = 0;
    sub_2510BECE8();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v7;
}

uint64_t type metadata accessor for HKQueryPublisherResult()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_251062238(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  uint64_t v5 = (6u >> (swift_getEnumCaseMultiPayload() & 7)) & 1;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v5;
}

void *sub_251062328(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 3;
  if (v6 >= 3)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 3;
        unsigned int v6 = v9 + 3;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 2)
  {
    uint64_t v12 = *(void *)a2;
    id v13 = *(id *)a2;
    *a1 = v12;
    char v11 = 2;
  }
  else if (v6 == 1)
  {
    (*(void (**)(void *))(v4 + 16))(a1);
    char v11 = 1;
  }
  else
  {
    (*(void (**)(void *))(v4 + 16))(a1);
    char v11 = 0;
  }
  *((unsigned char *)a1 + v5) = v11;
  return a1;
}

void sub_251062480(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 3;
  if (v3 >= 3)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 3;
        unsigned int v3 = v6 + 3;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 2) {

  }
  else {
    (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

uint64_t sub_251062570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  if (swift_getEnumCaseMultiPayload() >= 2) {
    return swift_willThrow();
  }
  else {
    return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a2, v5);
  }
}

uint64_t sub_251062688(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (uint64_t *)(a1 + *(void *)(*(void *)a1 + 136));
  swift_beginAccess();
  uint64_t v4 = *v3;
  sub_2510BED78();
  if (sub_2510BED58()) {
    return swift_endAccess();
  }
  sub_2510BED78();
  char v5 = sub_2510BED58();
  uint64_t v6 = sub_2510BED78();
  if (v5)
  {
LABEL_9:
    *unsigned int v3 = v6;
    return swift_endAccess();
  }
  uint64_t result = sub_2510BED58();
  if (result) {
    goto LABEL_7;
  }
  if ((v4 | a2) < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v6 = v4 + a2;
  if (__OFADD__(v4, a2))
  {
LABEL_7:
    uint64_t v6 = sub_2510BED78();
    goto LABEL_9;
  }
  if ((v6 & 0x8000000000000000) == 0) {
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_251062760@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id _sSo13HKHealthStoreC18HealthKitAdditionsE17ObserverPublisherV9makeQuery4with13outputHandlerSo7HKQueryCAE13ConfigurationV_yAC0mG6ResultOyytGctFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  id v7 = objc_allocWithZone(MEMORY[0x263F0A5A0]);
  sub_251065E84(0, &qword_26B2120C0);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v8 = (void *)sub_2510BF408();
  swift_bridgeObjectRelease();
  v14[4] = sub_251061434;
  v14[5] = v6;
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 1107296256;
  v14[2] = sub_25106131C;
  v14[3] = &block_descriptor_7;
  int v9 = _Block_copy(v14);
  id v10 = objc_msgSend(v7, sel_initWithQueryDescriptors_updateHandler_, v8, v9);

  _Block_release(v9);
  swift_release();
  id v11 = v10;
  if (v5) {
    uint64_t v12 = (void *)sub_2510BF228();
  }
  else {
    uint64_t v12 = 0;
  }
  objc_msgSend(v10, sel_setDebugIdentifier_, v12);

  return v10;
}

uint64_t _s17ObserverPublisherV13ConfigurationVwxx()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_251062978@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = v1[4];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id _sSo13HKHealthStoreC18HealthKitAdditionsE15SamplePublisherV9makeQuery4with13outputHandlerSo7HKQueryCAE13ConfigurationV_yAC0mG6ResultOySaySo8HKSampleCGGctFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  id v8 = objc_allocWithZone(MEMORY[0x263F0A6E0]);
  sub_251065E84(0, &qword_26B2120C0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  int v9 = (void *)sub_2510BF408();
  swift_bridgeObjectRelease();
  sub_251065E84(0, &qword_26B212E28);
  id v10 = (void *)sub_2510BF408();
  swift_bridgeObjectRelease();
  v16[4] = sub_25105BAA8;
  v16[5] = v7;
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 1107296256;
  v16[2] = sub_25105B9F0;
  v16[3] = &block_descriptor_4;
  id v11 = _Block_copy(v16);
  id v12 = objc_msgSend(v8, sel_initWithQueryDescriptors_limit_sortDescriptors_resultsHandler_, v9, v5, v10, v11);

  _Block_release(v11);
  swift_release();
  id v13 = v12;
  if (v6) {
    uint64_t v14 = (void *)sub_2510BF228();
  }
  else {
    uint64_t v14 = 0;
  }
  objc_msgSend(v12, sel_setDebugIdentifier_, v14);

  return v12;
}

uint64_t _s15SamplePublisherV13ConfigurationVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_251062BFC()
{
  unint64_t result = qword_26B2119A8;
  if (!qword_26B2119A8)
  {
    sub_251065E84(255, (unint64_t *)&qword_26B2119A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2119A8);
  }
  return result;
}

uint64_t sub_251062C64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeatureStatusPublisher.Inner();
  swift_unknownObjectRetain();
  id v5 = sub_251062D20(a1, a2);
  swift_unknownObjectRelease();
  v7[3] = v4;
  v7[4] = swift_getWitnessTable();
  v7[0] = v5;
  sub_2510BECF8();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

id sub_251062D20(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)type metadata accessor for FeatureStatusPublisher.Inner());
  return sub_25106384C(a1, a2);
}

uint64_t sub_251062D6C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(uint64_t *)((char *)v0 + *(void *)(*v0 + 112));
  sub_2510642A4(0, (unint64_t *)&unk_26B212DC0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x263F8D8D0]);
  uint64_t v5 = v4;
  uint64_t v22 = v4;
  unint64_t v23 = &protocol witness table for <A> UnsafeMutablePointer<A>;
  v21[0] = v3;
  __swift_project_boxed_opaque_existential_0(v21, v4);
  uint64_t v6 = off_2701FDE10[0];
  off_2701FDE10[0]();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  uint64_t v7 = *(void *)(*v1 + 128);
  uint64_t v8 = *(uint64_t *)((char *)v1 + *(void *)(*v1 + 112));
  if (*(uint64_t *)((char *)v1 + v7))
  {
    uint64_t v22 = v5;
    unint64_t v23 = &protocol witness table for <A> UnsafeMutablePointer<A>;
    v21[0] = v8;
    __swift_project_boxed_opaque_existential_0(v21, v5);
    off_2701FDE18[0]();
  }
  else
  {
    uint64_t v22 = v5;
    unint64_t v23 = &protocol witness table for <A> UnsafeMutablePointer<A>;
    v21[0] = v8;
    __swift_project_boxed_opaque_existential_0(v21, v5);
    uint64_t v20 = off_2701FDE18[0];
    off_2701FDE18[0]();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    int v9 = *(void **)((char *)v1 + *(void *)(*v1 + 120));
    id v19 = (void (__cdecl *)())v6;
    uint64_t v10 = swift_allocObject();
    swift_weakInit();
    id v11 = (void *)swift_allocObject();
    v11[2] = *(void *)(v2 + 80);
    v11[3] = *(void *)(v2 + 88);
    v11[4] = v10;
    uint64_t v12 = sub_2510BF298() + 32;
    type metadata accessor for DarwinNotificationObserverToken();
    id v13 = (void *)swift_allocObject();
    sub_2510643D4();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = 0xFFFFFFFFLL;
    v13[2] = v12;
    v13[3] = v14;
    v13[4] = v9;
    id v15 = v9;
    swift_retain();
    swift_retain();
    DarwinNotificationObserverToken.beginObservation(handler:)((uint64_t)sub_25107DDB0, (uint64_t)v11);
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    uint64_t v16 = *(uint64_t *)((char *)v1 + *(void *)(*v1 + 112));
    uint64_t v22 = v5;
    unint64_t v23 = &protocol witness table for <A> UnsafeMutablePointer<A>;
    v21[0] = v16;
    __swift_project_boxed_opaque_existential_0(v21, v5);
    v19();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *(uint64_t *)((char *)v1 + v7) = (uint64_t)v13;
    swift_retain();
    swift_release();
    uint64_t v17 = *(uint64_t *)((char *)v1 + *(void *)(*v1 + 112));
    uint64_t v22 = v5;
    unint64_t v23 = &protocol witness table for <A> UnsafeMutablePointer<A>;
    v21[0] = v17;
    __swift_project_boxed_opaque_existential_0(v21, v5);
    ((void (*)(uint64_t, _UNKNOWN **))v20)(v5, &protocol witness table for <A> UnsafeMutablePointer<A>);
    swift_release();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
}

uint64_t DownstreamHandlerSubscription.request(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v45)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void v49[3];
  uint64_t v50;
  uint64_t v51;

  uint64_t v43 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  char v42 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v41 = (char *)&v40 - v9;
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for DownstreamHandlerSubscriptionState();
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  id v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  char v40 = (char *)&v40 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v40 - v16;
  id v45 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 32);
  id v46 = a3 + 32;
  v45(v49, a2, a3);
  uint64_t v19 = v50;
  uint64_t v18 = v51;
  __swift_project_boxed_opaque_existential_0(v49, v50);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(a3 + 40);
  uint64_t v47 = v3;
  v20(a2, a3);
  uint64_t v44 = v10;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v21 = v48;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v17, 1, AssociatedTypeWitness) != 1)
    {
      uint64_t v32 = AssociatedTypeWitness;
      id v33 = v41;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v41, v17, AssociatedTypeWitness);
      uint64_t v34 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v35 = v40;
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v40, v33, AssociatedTypeWitness);
      *(void *)&v35[v34] = v43;
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v35, a2, a3);
      v45(v49, a2, a3);
      uint64_t v36 = v50;
      uint64_t v37 = v51;
      __swift_project_boxed_opaque_existential_0(v49, v50);
      (*(void (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      (*(void (**)(uint64_t, uint64_t))(a3 + 80))(a2, a3);
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v33, v32);
    }
    v45(v49, a2, a3);
    uint64_t v22 = v50;
    uint64_t v23 = v51;
    __swift_project_boxed_opaque_existential_0(v49, v50);
    (*(void (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v25 = *(void *)&v17[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v26 = v48;
  id v27 = v42;
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v42, v17, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v13, v27, AssociatedTypeWitness);
  sub_2510BED78();
  char v28 = sub_2510BED58();
  uint64_t v29 = sub_2510BED78();
  if ((v28 & 1) == 0)
  {
    uint64_t v30 = v43;
    uint64_t result = sub_2510BED58();
    if ((result & 1) == 0)
    {
      if ((v25 | v30) < 0)
      {
        __break(1u);
        goto LABEL_16;
      }
      uint64_t v29 = v25 + v30;
      if (!__OFADD__(v25, v30))
      {
        if ((v29 & 0x8000000000000000) == 0) {
          goto LABEL_12;
        }
LABEL_16:
        __break(1u);
        return result;
      }
    }
    uint64_t v29 = sub_2510BED78();
  }
LABEL_12:
  *(void *)&v13[*(int *)(TupleTypeMetadata2 + 48)] = v29;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v13, a2, a3);
  v45(v49, a2, a3);
  uint64_t v38 = v50;
  uint64_t v39 = v51;
  __swift_project_boxed_opaque_existential_0(v49, v50);
  (*(void (**)(uint64_t, uint64_t))(v39 + 16))(v38, v39);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, AssociatedTypeWitness);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void *__swift_project_boxed_opaque_existential_0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

void sub_251063748(void *a1@<X8>)
{
  uint64_t v3 = *(void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x60));
  sub_2510637D8(0, (unint64_t *)&unk_26B212DC0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x263F8D8D0]);
  a1[3] = v4;
  a1[4] = &protocol witness table for <A> UnsafeMutablePointer<A>;
  *a1 = v3;
}

void sub_2510637D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_25106383C()
{
  os_unfair_lock_unlock(*v0);
}

void sub_251063844()
{
  os_unfair_lock_lock(*v0);
}

id sub_25106384C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263F8EED0] & *v2;
  uint64_t v6 = *(void *)(v5 + 0x50);
  uint64_t v7 = type metadata accessor for DownstreamHandlerSubscriptionState();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = *(void *)(v5 + 96);
  uint64_t v12 = v2;
  id v13 = (_DWORD *)swift_slowAlloc();
  *id v13 = 0;
  *(void *)((char *)v2 + v11) = v13;
  static DownstreamHandlerSubscriptionState.ready(_:)(a1, v6, (uint64_t)v10);
  uint64_t v14 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v12[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v12) + 0x68)], v10, v7);
  *(void *)&v12[*(void *)((*v14 & *(void *)v12) + 0x70)] = a2;
  swift_unknownObjectRetain();

  uint64_t v15 = (objc_class *)type metadata accessor for FeatureStatusPublisher.Inner();
  v17.receiver = v12;
  v17.super_class = v15;
  return objc_msgSendSuper2(&v17, sel_init);
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for FeatureStatusPublisher.Inner()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static DownstreamHandlerSubscriptionState.ready(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a3, 0, 1, a2);
  type metadata accessor for DownstreamHandlerSubscriptionState();
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for DownstreamHandlerSubscriptionState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_251063B6C(uint64_t a1)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x68);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for DownstreamHandlerSubscriptionState();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

unsigned __int8 *sub_251063C48(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    if (*(_DWORD *)(v6 + 84)) {
      size_t v8 = *(void *)(v6 + 64);
    }
    else {
      size_t v8 = v7 + 1;
    }
    if (v8 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) {
      unint64_t v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    else {
      unint64_t v9 = v8;
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_17;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_17;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_17;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_17:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 != 1 || !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5)) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v15 = a2[v9];
    unsigned int v16 = v15 - 2;
    if (v15 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v17 = v9;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          goto LABEL_31;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v18 = *(_DWORD *)a2;
LABEL_31:
          int v19 = (v18 | (v16 << (8 * v9))) + 2;
          unsigned int v15 = v18 + 2;
          if (v9 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    if (v15 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v8);
        char v20 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        char v20 = 1;
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v20 = 0;
      *(void *)((unint64_t)&a1[v7 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
    }
    a1[v9] = v20;
  }
  return a1;
}

uint64_t sub_251063F00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x68);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for DownstreamHandlerSubscriptionState();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

void *sub_251063FD4(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = v7 + 1;
  }
  if (v8 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v9 = v8;
  }
  unsigned int v10 = a2[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_16;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_16:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  if (v10 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      char v15 = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      char v15 = 1;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
    char v15 = 0;
    *(void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
  }
  *((unsigned char *)a1 + v9) = v15;
  return a1;
}

id sub_2510641C4(SEL *a1)
{
  return objc_msgSend(*(id *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x70)), *a1, v1);
}

id sub_2510641FC()
{
  return sub_2510641C4((SEL *)&selRef_registerObserver_);
}

void sub_251064208()
{
  os_unfair_lock_unlock(*v0 + 4);
}

void sub_251064214()
{
  os_unfair_lock_lock(*v0 + 4);
}

void sub_251064224(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + *(void *)(*(void *)v1 + 112));
  sub_2510642A4(0, (unint64_t *)&unk_26B212DC0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x263F8D8D0]);
  a1[3] = v4;
  a1[4] = &protocol witness table for <A> UnsafeMutablePointer<A>;
  *a1 = v3;
}

void sub_2510642A4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for DarwinNotificationObserverToken()
{
  return self;
}

void *DarwinNotificationObserverToken.__allocating_init(notificationName:queue:handler:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)swift_allocObject();
  sub_2510643D4();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0xFFFFFFFFLL;
  v8[2] = a1;
  v8[3] = v9;
  v8[4] = a2;
  id v10 = a2;
  swift_retain();
  DarwinNotificationObserverToken.beginObservation(handler:)(a3, a4);
  swift_release();

  swift_release();
  return v8;
}

void sub_2510643D4()
{
  if (!qword_26B212680[0])
  {
    type metadata accessor for os_unfair_lock_s(255);
    unint64_t v0 = sub_2510BF9B8();
    if (!v1) {
      atomic_store(v0, qword_26B212680);
    }
  }
}

void DarwinNotificationObserverToken.beginObservation(handler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  out_token[0] = -1;
  uint64_t v5 = (const char *)v2[2];
  uint64_t v6 = v2[4];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  aBlock[4] = sub_2510893FC;
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_251089370;
  aBlock[3] = &block_descriptor_8;
  unint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  notify_register_dispatch(v5, out_token, v6, v8);
  _Block_release(v8);
  uint64_t v9 = (os_unfair_lock_s *)v2[3];
  out_token[5] = out_token[0];
  id v10 = v9 + 4;
  unsigned int v11 = v9 + 5;
  os_unfair_lock_lock(v9 + 5);
  sub_25106458C(v10);
  os_unfair_lock_unlock(v11);
}

_DWORD *sub_25106458C(_DWORD *result)
{
  *uint64_t result = *(_DWORD *)(v1 + 16);
  return result;
}

uint64_t sub_251064598(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 104);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for DownstreamHandlerSubscriptionState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t sub_251064640@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 104);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for DownstreamHandlerSubscriptionState();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t HKHealthStore.makeSharedSummaryTransactionPublisher()()
{
  sub_2510649F8();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s38SharedSummaryTransactionQueryPublisherCMa();
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 96) = 0;
  *(void *)(v6 + 80) = v0;
  *(void *)(v6 + 88) = 0;
  v10[1] = sub_251064B44(0);
  sub_251064ABC();
  sub_2510649A0();
  sub_25106490C(&qword_26B211628, (void (*)(uint64_t))sub_251064ABC);
  id v7 = v0;
  sub_2510BEE68();
  swift_release();
  sub_25106490C(&qword_26B211648, (void (*)(uint64_t))sub_2510649F8);
  uint64_t v8 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v8;
}

uint64_t sub_2510648C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25106490C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s38SharedSummaryTransactionQueryPublisherCMa()
{
  uint64_t result = qword_26B211FF8;
  if (!qword_26B211FF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_2510649A0()
{
  if (!qword_26B211980)
  {
    sub_25109A510();
    unint64_t v0 = sub_2510BF488();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B211980);
    }
  }
}

void sub_2510649F8()
{
  if (!qword_26B211650)
  {
    sub_251064ABC();
    sub_25108A320(255, (unint64_t *)&qword_26B211980, qword_26B2120E0);
    sub_2510648C4(&qword_26B211628, (void (*)(uint64_t))sub_251064ABC);
    unint64_t v0 = sub_2510BEC68();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B211650);
    }
  }
}

void sub_251064ABC()
{
  if (!qword_26B211630)
  {
    sub_25108A320(255, (unint64_t *)&qword_26B211980, qword_26B2120E0);
    sub_251067550();
    unint64_t PublisherBase = type metadata accessor for QueryPublisherBase();
    if (!v1) {
      atomic_store(PublisherBase, (unint64_t *)&qword_26B211630);
    }
  }
}

uint64_t sub_251064B48(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  sub_251064BAC();
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  *(void *)(v1 + 16) = v2;
  *(_OWORD *)(v1 + 32) = xmmword_2510C15C0;
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(unsigned char *)(v1 + 48) = 2;
  *(void *)(v1 + 64) = v3;
  *(unsigned char *)(v1 + 72) = 0;
  *(_WORD *)(v1 + 24) = 257;
  return v1;
}

void sub_251064BAC()
{
  if (!qword_26B212DE8)
  {
    type metadata accessor for os_unfair_lock_s(255);
    unint64_t v0 = sub_2510BF9B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212DE8);
    }
  }
}

uint64_t FeatureStatus.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v89 = a2;
  sub_251065D40();
  uint64_t v86 = *(void *)(v3 - 8);
  uint64_t v87 = v3;
  MEMORY[0x270FA5388](v3);
  v85 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251065F28(0, (unint64_t *)&qword_26B212E58, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  v100 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  v88 = (char *)&v76 - v9;
  MEMORY[0x270FA5388](v8);
  v90 = (void (**)(char *, uint64_t))((char *)&v76 - v10);
  uint64_t v11 = sub_2510BE908();
  v91 = *(void **)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  v97 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  v101 = (char *)&v76 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  v99 = (char *)&v76 - v17;
  MEMORY[0x270FA5388](v16);
  v84 = (char *)&v76 - v18;
  uint64_t v81 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  uint64_t v19 = MEMORY[0x270FA5388](v81);
  uint64_t v82 = (uint64_t)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v83 = (uint64_t)&v76 - v21;
  uint64_t v22 = type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v25 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  id v27 = (char *)&v76 - v26;
  id v28 = objc_msgSend(a1, sel_requirementsEvaluationByContext);
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_251065E84(0, &qword_26B212FB8);
  sub_251065E3C(&qword_26B212FA0, type metadata accessor for HKFeatureAvailabilityContext);
  sub_2510BF118();

  sub_251065E3C((unint64_t *)&unk_26B2130B0, type metadata accessor for HKFeatureAvailabilityContext);
  uint64_t v29 = (void (*)(void, void, void))v27;
  sub_251065E3C(&qword_26B2130A8, type metadata accessor for HKFeatureAvailabilityContext);
  unint64_t v30 = (unint64_t)a1;
  sub_2510BF068();
  char v31 = (char *)&_swift_FORCE_LOAD___swiftXPC___HealthKitAdditions;
  id v32 = objc_msgSend((id)v30, sel_onboardingRecord);
  uint64_t v33 = (uint64_t)&_swift_FORCE_LOAD___swiftXPC___HealthKitAdditions;
  uint64_t v34 = (char *)objc_msgSend(v32, sel_onboardingState);

  if ((unint64_t)(v34 - 2) < 4)
  {
    sub_251065FEC((uint64_t)v27, (uint64_t)v25, type metadata accessor for FeatureStatus.PerContextEvaluation);
    id v35 = objc_msgSend((id)v30, sel_onboardingRecord);
    id v36 = objc_msgSend(v35, sel_featureSettings);

    if (!v36)
    {
      sub_25107F5C4(MEMORY[0x263F8EE78]);
      id v37 = objc_allocWithZone(MEMORY[0x263F0A3C0]);
      uint64_t v38 = (void *)sub_2510BF108();
      swift_bridgeObjectRelease();
      id v36 = objc_msgSend(v37, sel_initWithDictionary_, v38);
    }
    id v39 = objc_msgSend((id)v30, sel_onboardingRecord);
    id v40 = objc_msgSend(v39, sel_allOnboardedCountryCodesRegardlessOfSupportedState);

    uint64_t v33 = sub_2510BF528();
    id v80 = (id)v30;
    id v41 = objc_msgSend((id)v30, sel_onboardingRecord);
    id v42 = objc_msgSend(v41, sel_allOnboardingCompletionsRegardlessOfSupportedState);

    sub_251065E84(0, &qword_26B212E30);
    unint64_t v30 = sub_2510BF418();

    unint64_t v43 = (unint64_t)v88;
    if (v30 >> 62)
    {
LABEL_37:
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_2510BFAF8();
    }
    else
    {
      uint64_t v44 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    id v45 = v90;
    char v31 = (char *)v91;
    v79 = v29;
    v78 = v25;
    uint64_t v77 = v33;
    if (v44)
    {
      unint64_t v93 = v30 & 0xC000000000000001;
      unint64_t v98 = v30;
      uint64_t v96 = v44;
      if ((v30 & 0xC000000000000001) != 0) {
        goto LABEL_39;
      }
      if (*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        for (id i = *(id *)(v30 + 32); ; id i = (id)MEMORY[0x2533934D0](0, v30))
        {
          id v47 = i;
          id v48 = objc_msgSend(v47, sel_completionDate);
          uint64_t v49 = v101;
          sub_2510BE8F8();

          v50 = v31;
          uint64_t v51 = (void (*)(void, void, void))*((void *)v31 + 4);
          v31 += 32;
          uint64_t v29 = v51;
          v51(v43, v49, v11);

          char v53 = v50 + 56;
          uint64_t v52 = (void (*)(unint64_t, uint64_t, uint64_t, uint64_t))*((void *)v50 + 7);
          v52(v43, 0, 1, v11);
          v55 = (uint64_t (*)(void *, uint64_t, uint64_t))*((void *)v50 + 6);
          uint64_t v25 = v50 + 48;
          v54 = v55;
          if (v55((void *)v43, 1, v11) == 1)
          {
            char v31 = (char *)v91;
            goto LABEL_13;
          }
          v92 = (uint64_t (*)(void (**)(char *, uint64_t), uint64_t, uint64_t))v54;
          v94 = v53;
          v95 = v52;
          id v76 = v36;
          char v57 = v99;
          v29(v99, v43, v11);
          unint64_t v30 = (unint64_t)v100;
          if (v96 == 1)
          {
LABEL_15:
            v95(v30, 1, 1, v11);
LABEL_16:
            swift_bridgeObjectRelease();
            sub_2510661B8(v30);
            id v45 = v90;
            v29(v90, v57, v11);
            v95((unint64_t)v45, 0, 1, v11);
            swift_bridgeObjectRelease();
            char v31 = (char *)v91;
            int v56 = v92(v45, 1, v11);
            goto LABEL_17;
          }
          v88 = (char *)(v98 & 0xFFFFFFFFFFFFFF8);
          id v45 = (void (**)(char *, uint64_t))(v91 + 1);
          uint64_t v33 = 5;
          while (1)
          {
            unint64_t v43 = v33 - 4;
            if (v93)
            {
              id v67 = (id)MEMORY[0x2533934D0](v33 - 4, v98);
              BOOL v68 = __OFADD__(v43, 1);
              unint64_t v43 = v33 - 3;
              if (v68) {
                goto LABEL_36;
              }
              goto LABEL_33;
            }
            if (v43 >= *((void *)v88 + 2)) {
              break;
            }
            id v67 = *(id *)(v98 + 8 * v33);
            BOOL v68 = __OFADD__(v43, 1);
            unint64_t v43 = v33 - 3;
            if (v68)
            {
LABEL_36:
              __break(1u);
              goto LABEL_37;
            }
LABEL_33:
            id v69 = v67;
            id v70 = objc_msgSend(v69, sel_completionDate);
            v71 = v101;
            sub_2510BE8F8();

            unint64_t v30 = (unint64_t)v100;
            v29(v100, v71, v11);

            char v57 = v99;
            v95(v30, 0, 1, v11);
            if (v92((void (**)(char *, uint64_t))v30, 1, v11) == 1) {
              goto LABEL_16;
            }
            id v36 = v97;
            v29(v97, v30, v11);
            sub_251065E3C(&qword_26B212E08, MEMORY[0x263F07490]);
            char v72 = sub_2510BF1B8();
            v73 = *v45;
            if (v72)
            {
              v73(v57, v11);
              v29(v57, v36, v11);
            }
            else
            {
              v73((char *)v36, v11);
            }
            ++v33;
            if (v43 == v96) {
              goto LABEL_15;
            }
          }
          __break(1u);
LABEL_39:
          ;
        }
      }
      __break(1u);
      goto LABEL_41;
    }
    uint64_t v52 = (void (*)(unint64_t, uint64_t, uint64_t, uint64_t))v91[7];
    v52(v43, 1, 1, v11);
LABEL_13:
    swift_bridgeObjectRelease();
    sub_2510661B8(v43);
    v52((unint64_t)v45, 1, 1, v11);
    swift_bridgeObjectRelease();
    int v56 = (*((uint64_t (**)(void (**)(char *, uint64_t), uint64_t, uint64_t))v31 + 6))(v45, 1, v11);
LABEL_17:
    uint64_t v58 = v87;
    char v59 = v84;
    uint64_t v60 = (uint64_t)v78;
    if (v56 == 1)
    {
      sub_2510BE8A8();
      sub_2510661B8((uint64_t)v45);
    }
    else
    {
      (*((void (**)(char *, void (**)(char *, uint64_t), uint64_t))v31 + 4))(v84, v45, v11);
    }
    uint64_t v61 = v89;
    uint64_t v62 = v82;
    sub_251065FEC(v60, v82, type metadata accessor for FeatureStatus.PerContextEvaluation);
    sub_251065E84(0, &qword_26B2130A0);
    v63 = v85;
    sub_2510BEF68();
    sub_251065F8C(v60, type metadata accessor for FeatureStatus.PerContextEvaluation);
    uint64_t v64 = v81;
    (*(void (**)(uint64_t, char *, uint64_t))(v86 + 32))(v62 + *(int *)(v81 + 20), v63, v58);
    *(void *)(v62 + *(int *)(v64 + 24)) = v77;
    (*((void (**)(uint64_t, char *, uint64_t))v31 + 4))(v62 + *(int *)(v64 + 28), v59, v11);
    uint64_t v65 = v83;
    sub_251065EC0(v62, v83, type metadata accessor for FeatureStatus.OnboardingRecord);

    sub_251065F8C((uint64_t)v79, type metadata accessor for FeatureStatus.PerContextEvaluation);
    sub_251065EC0(v65, v61, type metadata accessor for FeatureStatus.OnboardingRecord);
LABEL_23:
    type metadata accessor for FeatureStatus(0);
    return swift_storeEnumTagMultiPayload();
  }
  if (v34 == (char *)1)
  {

    sub_251065EC0((uint64_t)v27, v89, type metadata accessor for FeatureStatus.PerContextEvaluation);
    goto LABEL_23;
  }
LABEL_41:
  uint64_t v103 = 0;
  unint64_t v104 = 0xE000000000000000;
  sub_2510BF928();
  sub_2510BF2F8();
  id v74 = [(id)v30 *((SEL *)v31 + 116)];
  id v75 = [v74 *(SEL *)(v33 + 936)];

  id v102 = v75;
  type metadata accessor for HKFeatureAvailabilityOnboardedCountrySupportedState(0);
  sub_2510BFA68();
  sub_2510BF2F8();
  uint64_t result = sub_2510BFAC8();
  __break(1u);
  return result;
}

uint64_t destroy for FeatureStatus(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  sub_251065BFC();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v5 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
    uint64_t v6 = a1 + *(int *)(v5 + 20);
    sub_251065D40();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
    uint64_t v8 = a1 + *(int *)(v5 + 28);
    uint64_t v9 = sub_2510BE908();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
    return v10(v8, v9);
  }
  return result;
}

uint64_t initializeWithCopy for FeatureStatus(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  sub_251065BFC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v6 = (int *)type metadata accessor for FeatureStatus.OnboardingRecord(0);
    uint64_t v7 = v6[5];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = a2 + v7;
    sub_251065D40();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    *(void *)(a1 + v6[6]) = *(void *)(a2 + v6[6]);
    uint64_t v11 = v6[7];
    uint64_t v12 = a1 + v11;
    uint64_t v13 = a2 + v11;
    uint64_t v14 = sub_2510BE908();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_251065BC4(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_251065BFC()
{
  if (!qword_26B213098)
  {
    type metadata accessor for HKFeatureAvailabilityContext(255);
    sub_251065E84(255, &qword_26B212FB8);
    sub_251065E3C((unint64_t *)&unk_26B2130B0, type metadata accessor for HKFeatureAvailabilityContext);
    sub_251065E3C(&qword_26B2130A8, type metadata accessor for HKFeatureAvailabilityContext);
    sub_251065E3C(&qword_26B212FA0, type metadata accessor for HKFeatureAvailabilityContext);
    unint64_t v0 = sub_2510BF058();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B213098);
    }
  }
}

uint64_t type metadata accessor for FeatureStatus.OnboardingRecord(uint64_t a1)
{
  return sub_251065BC4(a1, qword_26B212E70);
}

void sub_251065D40()
{
  if (!qword_26B213090)
  {
    sub_251065E84(255, &qword_26B2130A0);
    unint64_t v0 = sub_2510BEF58();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B213090);
    }
  }
}

uint64_t sub_251065DA8()
{
  sub_2510BF258();
  sub_2510BFD08();
  sub_2510BF2C8();
  uint64_t v0 = sub_2510BFD28();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t type metadata accessor for FeatureStatus(uint64_t a1)
{
  return sub_251065BC4(a1, (uint64_t *)&unk_26B212E60);
}

uint64_t sub_251065E3C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_251065E84(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_251065EC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_251065F28(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_251065F8C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_251065FEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for FeatureStatus.PerContextEvaluation(uint64_t a1)
{
  return sub_251065BC4(a1, (uint64_t *)&unk_26B213028);
}

uint64_t _s18HealthKitAdditions13FeatureStatusO20PerContextEvaluationVwxx_0(uint64_t a1)
{
  sub_251065BFC();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t _s18HealthKitAdditions13FeatureStatusO20PerContextEvaluationVwcp_0(uint64_t a1, uint64_t a2)
{
  sub_251065BFC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

void type metadata accessor for HKFeatureAvailabilityContext(uint64_t a1)
{
}

void sub_25106616C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_2510661B8(uint64_t a1)
{
  sub_251065F28(0, (unint64_t *)&qword_26B212E58, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id FeatureStatus.subscript.getter(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FeatureStatus.Eligibility(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for FeatureStatus(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251065FEC(v2, (uint64_t)v12, type metadata accessor for FeatureStatus);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_251065EC0((uint64_t)v12, (uint64_t)v6, type metadata accessor for FeatureStatus.Eligibility);
    id v13 = FeatureStatus.PerContextEvaluation.evaluation(for:)(a1);
    uint64_t v14 = type metadata accessor for FeatureStatus.Eligibility;
    uint64_t v15 = (uint64_t)v6;
  }
  else
  {
    sub_251065EC0((uint64_t)v12, (uint64_t)v9, type metadata accessor for FeatureStatus.OnboardingRecord);
    id v13 = FeatureStatus.PerContextEvaluation.evaluation(for:)(a1);
    uint64_t v14 = type metadata accessor for FeatureStatus.OnboardingRecord;
    uint64_t v15 = (uint64_t)v9;
  }
  sub_251065F8C(v15, v14);
  return v13;
}

uint64_t type metadata accessor for FeatureStatus.Eligibility(uint64_t a1)
{
  return sub_251065BC4(a1, (uint64_t *)&unk_26B212FC0);
}

id FeatureStatus.PerContextEvaluation.evaluation(for:)(void *a1)
{
  sub_251065BFC();
  uint64_t v2 = sub_2510BF028();
  if (*(void *)(v2 + 16))
  {
    id v3 = a1;
    unint64_t v4 = sub_251066818((uint64_t)v3);
    if (v5)
    {
      id v6 = *(id *)(*(void *)(v2 + 56) + 8 * v4);

      swift_bridgeObjectRelease();
      return v6;
    }
  }
  swift_bridgeObjectRelease();
  if (qword_26B2118B8 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_2510BEC48();
  __swift_project_value_buffer(v8, (uint64_t)qword_26B214CE0);
  id v9 = a1;
  uint64_t v10 = sub_2510BEC28();
  os_log_type_t v11 = sub_2510BF678();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v24 = v13;
    *(_DWORD *)uint64_t v12 = 136446466;
    sub_25106EDC0(0xD000000000000014, 0x80000002510C27A0, &v24);
    sub_2510BF818();
    *(_WORD *)(v12 + 12) = 2082;
    uint64_t v14 = sub_2510BF258();
    sub_25106EDC0(v14, v15, &v24);
    sub_2510BF818();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_251054000, v10, v11, "[%{public}s] No evaluation present for context '%{public}s'; ensure the context is declared in the feature availab"
      "ility extension's requirements",
      (uint8_t *)v12,
      0x16u);
    swift_arrayDestroy();
    MEMORY[0x2533940F0](v13, -1, -1);
    MEMORY[0x2533940F0](v12, -1, -1);
  }
  else
  {
  }
  uint64_t v16 = (void *)sub_2510BF228();
  id v17 = objc_allocWithZone(MEMORY[0x263EFF9D8]);
  uint64_t v24 = (uint64_t)v16;
  type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(0);
  id v18 = v16;
  id v19 = objc_msgSend(v17, sel_initWithObject_, sub_2510BFC48());

  swift_unknownObjectRelease();
  sub_251065F28(0, &qword_269B1B6E8, (uint64_t (*)(uint64_t))sub_251085FCC, MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2510C2790;
  *(void *)(inited + 32) = sub_2510BF228();
  sub_251065E84(0, (unint64_t *)&qword_26B212178);
  *(void *)(inited + 40) = sub_2510BF7B8();
  sub_25107F700(inited);
  id v21 = objc_allocWithZone(MEMORY[0x263F0A3B0]);
  sub_251065E3C(&qword_269B1B0D8, type metadata accessor for HKFeatureAvailabilityRequirementIdentifier);
  uint64_t v22 = (void *)sub_2510BF108();
  swift_bridgeObjectRelease();
  id v23 = objc_msgSend(v21, sel_initWithRequirementIdentifiersOrderedByPriority_satisfactionByRequirementIdentifier_, v19, v22);

  return v23;
}

unint64_t sub_251066818(uint64_t a1)
{
  sub_2510BF258();
  sub_2510BFD08();
  sub_2510BF2C8();
  uint64_t v2 = sub_2510BFD28();
  swift_bridgeObjectRelease();
  return sub_2510668A8(a1, v2);
}

unint64_t sub_2510668A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_2510BF258();
    uint64_t v8 = v7;
    if (v6 == sub_2510BF258() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_2510BFC28();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_2510BF258();
          uint64_t v15 = v14;
          if (v13 == sub_2510BF258() && v15 == v16) {
            break;
          }
          char v18 = sub_2510BFC28();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t destroy for FeatureStatus.OnboardingRecord(uint64_t a1, uint64_t a2)
{
  sub_251065BFC();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  sub_251065D40();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t v8 = sub_2510BE908();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  return v9(v7, v8);
}

uint64_t dispatch thunk of FeatureStatusProviding.publisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void destroy for HKSharingAuthorizationIdentifier(uint64_t a1)
{
}

uint64_t sub_251066B48(uint64_t a1)
{
  return sub_251062C64(a1, *v1);
}

void sub_251066B58(uint64_t a1, uint64_t a2)
{
  sub_25106033C(a1, a2, *(void **)(v2 + 16));
}

uint64_t HKKeyValueDomain.getDate(for:)(uint64_t a1, uint64_t a2)
{
  return sub_25105F268(a1, a2, (uint64_t)&unk_2701FC498, (void (*)(void))sub_25105F2F8);
}

uint64_t sub_251066B9C(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t _s17ObserverPublisherV13ConfigurationVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s17ObserverPublisherV13ConfigurationVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_251066C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_251066C90();
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

unint64_t sub_251066C90()
{
  unint64_t result = qword_26B2119C8;
  if (!qword_26B2119C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2119C8);
  }
  return result;
}

uint64_t sub_251066CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_251066D48();
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

unint64_t sub_251066D48()
{
  unint64_t result = qword_26B2119B8;
  if (!qword_26B2119B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2119B8);
  }
  return result;
}

uint64_t Publisher<>.ignoreFailureResults()()
{
  sub_251066E0C();
  return sub_2510BEE68();
}

unint64_t sub_251066E0C()
{
  unint64_t result = qword_26B212DB0;
  if (!qword_26B212DB0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B212DB0);
  }
  return result;
}

uint64_t sub_251066E4C(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)unint64_t result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)(result + 40) = 0;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 48) = a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HKSharingAuthorizationIdentifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

id sub_251066F90(id a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_2510674E0(a1);
  }
  return a1;
}

void sub_251066FA8(int a1, id a2, void (*a3)(id, uint64_t))
{
  if (a2)
  {
    id v5 = a2;
    a3(a2, 1);
  }
  else
  {
    ((void (*)(void))a3)(0);
  }
}

uint64_t sub_251067024(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *))
{
  uint64_t v4 = a1;
  char v5 = a2 & 1;
  return a3(&v4);
}

void sub_251067068(uint64_t a1, uint64_t a2)
{
  sub_25105B438(a1, a2, *(void **)(v2 + 16));
}

uint64_t HKKeyValueDomain.getInteger(for:)(uint64_t a1, uint64_t a2)
{
  return sub_25105F268(a1, a2, (uint64_t)&unk_2701FC4C0, (void (*)(void))sub_25105F384);
}

id sub_2510670A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a2 = *(void *)a1;
  unsigned __int8 v3 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a2 + 8) = v3;
  return sub_251066F90(v2, v3);
}

uint64_t static Logger.mentalHealth.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_251058D64(&qword_26B2130C8, (uint64_t)qword_26B212E40, a1);
}

ValueMetadata *type metadata accessor for HKSharingAuthorizationIdentifier.CycleTrackingConcept()
{
  return &type metadata for HKSharingAuthorizationIdentifier.CycleTrackingConcept;
}

unsigned char *sub_2510670F4(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

void sub_251067100(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    size_t v4 = 8;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (a2 > 2)
  {
    unsigned int v5 = a2 - 3;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 3;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 3;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_2510671D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

void _s17ObserverPublisherVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 24);
}

void _s15SamplePublisherVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 40);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_2510674C0(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_2510674D0(uint64_t a1, char a2)
{
  return sub_251067024(a1, a2 & 1, *(uint64_t (**)(uint64_t *))(v2 + 16));
}

id sub_2510674E0(id a1)
{
  return a1;
}

void sub_2510674EC(id a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    sub_2510756CC(a1);
  }
}

uint64_t sub_251067504(uint64_t a1, char a2)
{
  long long v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

void sub_251067544(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

unint64_t sub_251067550()
{
  unint64_t result = qword_26B2130C0;
  if (!qword_26B2130C0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_26B2130C0);
  }
  return result;
}

uint64_t sub_2510675A8(uint64_t a1)
{
  return a1;
}

void sub_2510675D4()
{
  if (!qword_26B212188)
  {
    unint64_t v0 = sub_2510BFC08();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212188);
    }
  }
}

void sub_251067630()
{
  if (!qword_26B212180)
  {
    sub_251065E84(255, (unint64_t *)&qword_26B2119A0);
    sub_251067900((unint64_t *)&qword_26B2119A8, (unint64_t *)&qword_26B2119A0);
    unint64_t v0 = sub_2510BFB48();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212180);
    }
  }
}

void sub_2510676CC()
{
  if (!qword_26B212DE0)
  {
    sub_251093938();
    type metadata accessor for os_unfair_lock_s(255);
    unint64_t v0 = sub_2510BF9B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212DE0);
    }
  }
}

void sub_251067734()
{
  if (!qword_26B212DD0)
  {
    type metadata accessor for PublisherCache();
    type metadata accessor for os_unfair_lock_s(255);
    unint64_t v0 = sub_2510BF9B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212DD0);
    }
  }
}

uint64_t sub_25106779C@<X0>(uint64_t *a1@<X8>)
{
  return sub_25105A310(v1, a1);
}

uint64_t sub_2510677A4()
{
  return sub_25105752C(*(void **)(v0 + 16));
}

void sub_2510677AC(int a1, void *a2)
{
  sub_251066FA8(a1, a2, *(void (**)(id, uint64_t))(v2 + 16));
}

void sub_2510677B4(void (*a1)(void **), uint64_t a2)
{
  sub_2510592E8(a1, a2, v2);
}

id sub_2510677BC()
{
  id v1 = objc_msgSend(*v0, sel_featureIdentifier);
  return v1;
}

uint64_t sub_2510677F4(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

unint64_t sub_251067804()
{
  unint64_t result = qword_26B2120D8;
  if (!qword_26B2120D8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B2120D8);
  }
  return result;
}

uint64_t static HKCloudSyncObserver.StatusPublisher(healthStore:)()
{
  return HKHealthStore.cloudSyncStatusPublisher()();
}

unint64_t sub_251067868()
{
  unint64_t result = qword_26B212460;
  if (!qword_26B212460)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B212460);
  }
  return result;
}

unint64_t sub_2510678A8()
{
  unint64_t result = qword_26B212458;
  if (!qword_26B212458)
  {
    sub_2510BF768();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B212458);
  }
  return result;
}

uint64_t sub_251067900(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_251065E84(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

uint64_t sub_251067978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return HKKeyValueDomain.Publisher.receive<A>(subscriber:)(a1, a4, a2);
}

uint64_t type metadata accessor for HKKeyValueDomain.Publisher()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_2510679A4(uint64_t a1, uint64_t a2)
{
  long long v3 = (id *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);

  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v4 - 8);
  unint64_t v5 = ((unint64_t)v3 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v5, 1, v4);
  if (!result)
  {
    int v7 = *(uint64_t (**)(unint64_t, uint64_t))(v8 + 8);
    return v7(v5, v4);
  }
  return result;
}

uint64_t _s17SubscriptionStateVMa()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_251067AA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  unint64_t v5 = (char *)a4 + *(int *)(_s17SubscriptionStateVMa() + 32);
  uint64_t v6 = sub_2510BF808();
  int v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  return v7(v5, a3, v6);
}

void sub_251067B3C(uint64_t a1, void *a2)
{
  sub_251056948(a1, a2, *(void (**)(id, BOOL))(v2 + 16));
}

void sub_251067B48(uint64_t a1, uint64_t a2)
{
  sub_251058BBC(a1, a2, *(void **)(v2 + 16));
}

void sub_251067B50()
{
}

uint64_t _s12SubscriptionCMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_251067B8C(uint64_t *a1)
{
  return sub_2510584C4(a1, *(void *)(v1 + 48));
}

uint64_t sub_251067BB0()
{
  return sub_251056344(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 16));
}

uint64_t sub_251067BC8(uint64_t a1)
{
  return sub_251059504(a1, *(void **)(v1 + 32));
}

uint64_t type metadata accessor for HKHealthStore.StatisticsCollectionPublisher(uint64_t a1)
{
  return sub_251065BC4(a1, qword_26B211D48);
}

uint64_t sub_251067BF8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for HKHealthStore.StatisticsCollectionPublisher(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_251067C40@<X0>(uint64_t a1@<X8>)
{
  return sub_25105FE30(v1, a1, type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration);
}

id sub_251067C74(uint64_t a1)
{
  return *(id *)(v1 + *(int *)(a1 + 20));
}

uint64_t sub_251067C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_251067BF8(&qword_26B211D40);
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

uint64_t sub_251067D00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for HKHealthStore.DatabaseChangesPublisher()
{
  return &type metadata for HKHealthStore.DatabaseChangesPublisher;
}

unint64_t sub_251067D74()
{
  unint64_t result = qword_26B211A08;
  if (!qword_26B211A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B211A08);
  }
  return result;
}

uint64_t sub_251067DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_251067D74();
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

ValueMetadata *type metadata accessor for HKHealthStore.ActivitySummaryPublisher()
{
  return &type metadata for HKHealthStore.ActivitySummaryPublisher;
}

unint64_t sub_251067E3C()
{
  unint64_t result = qword_26B2119F8;
  if (!qword_26B2119F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2119F8);
  }
  return result;
}

id sub_251067E94@<X0>(uint64_t a1@<X8>)
{
  id v6 = *(id *)v1;
  char v2 = *(unsigned char *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 9);
  uint64_t v4 = *(void *)(v1 + 32);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 9) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t sub_251067EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_251067E3C();
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

uint64_t _s24ActivitySummaryPublisherV13ConfigurationVwxx(id *a1)
{
  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for HKHealthStore.SampleCountPublisher()
{
  return &type metadata for HKHealthStore.SampleCountPublisher;
}

unint64_t sub_251067FA4()
{
  unint64_t result = qword_26B2119D8;
  if (!qword_26B2119D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2119D8);
  }
  return result;
}

id sub_251067FFC()
{
  return *(id *)(v0 + 32);
}

void sub_251068004(int a1, uint64_t a2, void *a3)
{
  sub_25106800C(a1, a2, a3, *(void (**)(uint64_t *))(v3 + 16));
}

void sub_25106800C(int a1, uint64_t a2, id a3, void (*a4)(uint64_t *))
{
  if (a2)
  {
    if ((a2 & 0xC000000000000001) != 0) {
      uint64_t v5 = sub_25105BEC0();
    }
    else {
      uint64_t v5 = (uint64_t)sub_25107A4B0(a2);
    }
    uint64_t v8 = v5;
    char v9 = 1;
    a4(&v8);
    swift_release();
  }
  else if (a3)
  {
    uint64_t v8 = (uint64_t)a3;
    char v9 = 2;
    id v7 = a3;
    a4(&v8);
  }
}

uint64_t sub_2510680C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_251067FA4();
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

ValueMetadata *type metadata accessor for HKHealthStore.ObserverPublisher()
{
  return &type metadata for HKHealthStore.ObserverPublisher;
}

ValueMetadata *type metadata accessor for HKHealthStore.SamplePublisher()
{
  return &type metadata for HKHealthStore.SamplePublisher;
}

void sub_25106814C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_2510681B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

unint64_t sub_2510681E0()
{
  unint64_t result = qword_26B2122B8[0];
  if (!qword_26B2122B8[0])
  {
    sub_2510642A4(255, &qword_26B2122B0, MEMORY[0x263F8F0F8], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26B2122B8);
  }
  return result;
}

id *sub_251068268@<X0>(id *result@<X0>, void *a2@<X8>)
{
  if ((_BYTE)result[1])
  {
    id v3 = 0;
  }
  else
  {
    id v3 = *result;
    unint64_t result = (id *)*result;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_2510682A4()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

void sub_2510682CC()
{
  if (!qword_26B211940)
  {
    uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_251068574(255, &qword_26B2118E0, MEMORY[0x263EFDCF0]);
    sub_25106861C(&qword_26B2118D8, &qword_26B2118E0, v0);
    unint64_t v1 = sub_2510BEE48();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26B211940);
    }
  }
}

void sub_251068380()
{
  if (!qword_26B212290)
  {
    sub_251068694(255);
    sub_25105A06C((unint64_t *)&unk_26B212238, sub_251068694);
    unint64_t v0 = sub_2510BEE48();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212290);
    }
  }
}

void sub_251068414()
{
  if (!qword_26B211930)
  {
    sub_251067550();
    unint64_t v0 = sub_2510BEE18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B211930);
    }
  }
}

void sub_251068480()
{
  if (!qword_26B2118F8)
  {
    sub_2510752B4(255, &qword_26B211958, MEMORY[0x263F8D060]);
    sub_251067550();
    unint64_t v0 = sub_2510BEE18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2118F8);
    }
  }
}

void sub_25106850C(uint64_t a1)
{
}

void sub_251068540(uint64_t a1)
{
}

void sub_251068574(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    sub_25106814C(255, &qword_26B211978, (uint64_t (*)(uint64_t))sub_251067804, MEMORY[0x263F8D488]);
    uint64_t v7 = v6;
    unint64_t v8 = sub_251067550();
    unint64_t v9 = a3(a1, v7, v8, MEMORY[0x263F8E4E0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_25106861C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_251068574(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_251068660(uint64_t a1)
{
}

void sub_251068694(uint64_t a1)
{
}

void sub_2510686C8()
{
  if (!qword_26B212210)
  {
    sub_251068660(255);
    sub_251068380();
    sub_25105A06C(&qword_26B212250, sub_251068660);
    sub_25105A06C(&qword_26B212288, (void (*)(uint64_t))sub_251068380);
    unint64_t v0 = sub_2510BECC8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212210);
    }
  }
}

void sub_2510687B4()
{
  if (!qword_26B2118D0)
  {
    sub_251068414();
    sub_25106814C(255, &qword_26B211978, (uint64_t (*)(uint64_t))sub_251067804, MEMORY[0x263F8D488]);
    sub_25105A750(&qword_26B211928, (void (*)(uint64_t))sub_251068414);
    unint64_t v0 = sub_2510BEC98();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2118D0);
    }
  }
}

void sub_251068890()
{
  if (!qword_26B2121F0)
  {
    sub_251091918();
    sub_251068660(255);
    sub_25105A06C(&qword_26B212220, (void (*)(uint64_t))sub_251091918);
    sub_25105A06C(&qword_26B212250, sub_251068660);
    unint64_t v0 = sub_2510BEC88();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2121F0);
    }
  }
}

void sub_25106897C()
{
  if (!qword_26B2118C0)
  {
    sub_2510BEC48();
    unint64_t v0 = sub_2510BF808();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2118C0);
    }
  }
}

uint64_t sub_2510689D4(uint64_t a1)
{
  return sub_251056F58(a1, qword_26B212E40);
}

uint64_t sub_251068A00@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(v4 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v4 + *MEMORY[0x263F8DD00]) - 8) + 16))(a2, v3);
}

uint64_t type metadata accessor for DownstreamHandlerSubscriptionState.Inactive()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_251068AB0()
{
  uint64_t result = type metadata accessor for DownstreamHandlerSubscriptionState.Inactive();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_251068B2C()
{
  sub_251056280();
  return swift_deallocClassInstance();
}

uint64_t sub_251068B5C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CloudSyncStatusPublisherImpl()
{
  return __swift_instantiateGenericMetadata();
}

id sub_251068BD0()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for CloudSyncStatusPublisherImpl.CloudDelegate());
  return sub_251055FF4();
}

uint64_t type metadata accessor for CloudSyncStatusPublisherImpl.CloudDelegate()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for DarwinNotificationPublisher.DarwinNotificationName()
{
  return &type metadata for DarwinNotificationPublisher.DarwinNotificationName;
}

uint64_t sub_251068C34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_251059824(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_251068C74@<X0>(uint64_t *a1@<X8>)
{
  return sub_2510575E4(*(unsigned __int8 *)(v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80))+ *(void *)(*(void *)(*(void *)(v1 + 16) - 8) + 64)), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t dispatch thunk of FeatureStatusProviding.featureIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_251068CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t sub_251068CF0(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_bridgeObjectRetain();
  }
  if (!a2) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_251068D0C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t type metadata accessor for StreamConduitBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_251068D68(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 96);
}

uint64_t type metadata accessor for StreamPublisher()
{
  return __swift_instantiateGenericMetadata();
}

void sub_251068D88(uint64_t a1@<X8>)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(v1 + 16) + 16));
  sub_251068DD4(a1);
  uint64_t v3 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_251068DD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t SensitiveLogger.log(category:_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  return sub_251058570(a1, a2, a3, a4, MEMORY[0x263F90290]);
}

uint64_t dispatch thunk of LockProviding.unlock()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LockProviding.lock()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_251068EBC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_251068F1C(uint64_t a1)
{
}

void sub_251068F50()
{
  if (!qword_26B212E58)
  {
    sub_2510BE908();
    unint64_t v0 = sub_2510BF808();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212E58);
    }
  }
}

uint64_t HKSharingRecipientAuthorizationStore.getAuthorizationIdentifiers()()
{
  *(void *)(swift_allocObject() + 16) = v0;
  sub_251069174();
  swift_allocObject();
  id v1 = v0;
  return sub_2510BEE28();
}

void sub_251069024(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_251067504;
  *(void *)(v7 + 24) = v6;
  v9[4] = sub_25106A964;
  void v9[5] = v7;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1107296256;
  id v9[2] = sub_25106986C;
  v9[3] = &block_descriptor_0;
  unint64_t v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(a3, sel_fetchSharingAuthorizationsWithCompletion_, v8);
  _Block_release(v8);
}

uint64_t sub_251069134()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_25106916C(uint64_t a1, uint64_t a2)
{
  sub_251069024(a1, a2, *(void **)(v2 + 16));
}

void sub_251069174()
{
  if (!qword_269B1AF30)
  {
    sub_25106616C(255, &qword_269B1AF38, (uint64_t)&type metadata for HKSharingAuthorizationIdentifier, MEMORY[0x263F8D488]);
    sub_251067550();
    unint64_t v0 = sub_2510BEE18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1AF30);
    }
  }
}

void type metadata accessor for HKStatisticsOptions(uint64_t a1)
{
}

void type metadata accessor for HKRaceRouteClusterWorkoutSelection(uint64_t a1)
{
}

void type metadata accessor for HKSleepDaySummaryQueryOptions(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_25106928C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_2510692AC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for HKDayIndexRange(uint64_t a1)
{
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t sub_251069308(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_251069328(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1)
{
}

void type metadata accessor for HKCategoryValueWristEvent(uint64_t a1)
{
}

void type metadata accessor for HKCategoryValueWheelchairUseChanged(uint64_t a1)
{
}

void type metadata accessor for HKCategoryValueWatchActivation(uint64_t a1)
{
}

void type metadata accessor for HKCategoryValueCoachingEvent(uint64_t a1)
{
}

void type metadata accessor for Association(uint64_t a1)
{
}

void type metadata accessor for HKWheelchairUse(uint64_t a1)
{
}

void type metadata accessor for HKFitzpatrickSkinType(uint64_t a1)
{
}

void type metadata accessor for HKBloodType(uint64_t a1)
{
}

void type metadata accessor for HKBiologicalSex(uint64_t a1)
{
}

void type metadata accessor for HKMCPregnancyState(uint64_t a1)
{
}

void type metadata accessor for HKCategoryTypeIdentifier(uint64_t a1)
{
}

void type metadata accessor for HKQuantityTypeIdentifier(uint64_t a1)
{
}

void type metadata accessor for HKRegionAvailabilityCategory(uint64_t a1)
{
}

void type metadata accessor for HKFeatureAvailabilityOnboardedCountrySupportedState(uint64_t a1)
{
}

void type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(uint64_t a1)
{
}

void type metadata accessor for HKRemoteAllowedCountriesState(uint64_t a1)
{
}

void type metadata accessor for HKAllowedCountriesCategory(uint64_t a1)
{
}

void sub_251069620(unint64_t a1, id a2, void (*a3)(id, uint64_t))
{
  if (a2)
  {
    id v5 = a2;
    a3(a2, 1);

    return;
  }
  if (!a1)
  {
    a3((id)MEMORY[0x263F8EE78], 0);
    return;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_2510BFAF8();
    uint64_t v15 = a3;
    if (v7) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v15 = a3;
    if (v7)
    {
LABEL_8:
      if (v7 < 1)
      {
        __break(1u);
        return;
      }
      uint64_t v8 = 0;
      unint64_t v9 = (void *)MEMORY[0x263F8EE78];
      do
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v11 = (id)MEMORY[0x2533934D0](v8, a1);
        }
        else {
          id v11 = *(id *)(a1 + 8 * v8 + 32);
        }
        HKSharingAuthorizationIdentifier.init(_:)(v11, (uint64_t)v19);
        unsigned __int8 v12 = v20;
        if (v20 != 255)
        {
          long long v17 = v19[1];
          long long v18 = v19[0];
          long long v16 = v19[2];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v9 = sub_251077294(0, v9[2] + 1, 1, v9);
          }
          unint64_t v14 = v9[2];
          unint64_t v13 = v9[3];
          if (v14 >= v13 >> 1) {
            unint64_t v9 = sub_251077294((void *)(v13 > 1), v14 + 1, 1, v9);
          }
          id v9[2] = v14 + 1;
          uint64_t v10 = &v9[7 * v14];
          *((_OWORD *)v10 + 2) = v18;
          *((_OWORD *)v10 + 3) = v17;
          *((_OWORD *)v10 + 4) = v16;
          *((unsigned char *)v10 + 80) = v12;
        }
        ++v8;
      }
      while (v7 != v8);
      goto LABEL_23;
    }
  }
  unint64_t v9 = (void *)MEMORY[0x263F8EE78];
LABEL_23:
  swift_bridgeObjectRelease();
  v15(v9, 0);
  swift_bridgeObjectRelease();
}

uint64_t sub_25106986C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  id v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_25106A96C();
    uint64_t v4 = sub_2510BF418();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_251069900(uint64_t a1)
{
  uint64_t v2 = sub_25106A128(&qword_269B1B170, type metadata accessor for HKError);
  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t sub_25106996C(uint64_t a1)
{
  uint64_t v2 = sub_25106A128(&qword_269B1B170, type metadata accessor for HKError);
  return MEMORY[0x270EF2668](a1, v2);
}

uint64_t sub_2510699DC(uint64_t a1)
{
  uint64_t v2 = sub_25106A128((unint64_t *)&qword_269B1B1A8, type metadata accessor for HKError);
  return MEMORY[0x270EEF788](a1, v2);
}

id sub_251069A48()
{
  return *v0;
}

uint64_t sub_251069A50@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_251069A58(uint64_t a1, uint64_t a2)
{
  return sub_25106A538(a1, a2, MEMORY[0x263F8D308]);
}

uint64_t sub_251069A88()
{
  return sub_2510BFD28();
}

uint64_t sub_251069AD0()
{
  return sub_2510BFD18();
}

uint64_t sub_251069AFC()
{
  return sub_2510BFD28();
}

uint64_t sub_251069B40(uint64_t a1, uint64_t a2)
{
  return sub_25106A538(a1, a2, MEMORY[0x263F07B58]);
}

uint64_t sub_251069B58(uint64_t a1, id *a2)
{
  uint64_t result = sub_2510BF238();
  *a2 = 0;
  return result;
}

uint64_t sub_251069BD0(uint64_t a1, id *a2)
{
  char v3 = sub_2510BF248();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_251069C50@<X0>(uint64_t *a1@<X8>)
{
  sub_2510BF258();
  uint64_t v2 = sub_2510BF228();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_251069C94()
{
  return sub_2510BF258();
}

uint64_t sub_251069CA4(uint64_t a1)
{
  uint64_t v2 = sub_25106A128((unint64_t *)&qword_269B1B1A8, type metadata accessor for HKError);
  return MEMORY[0x270EEF7E8](a1, v2);
}

uint64_t sub_251069D10(uint64_t a1)
{
  uint64_t v2 = sub_25106A128((unint64_t *)&qword_269B1B1A8, type metadata accessor for HKError);
  return MEMORY[0x270EEF7A0](a1, v2);
}

uint64_t sub_251069D7C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_25106A128((unint64_t *)&qword_269B1B1A8, type metadata accessor for HKError);
  id v5 = a1;
  return MEMORY[0x270EEF790](v5, a2, v4);
}

uint64_t sub_251069E0C()
{
  id v1 = *v0;
  uint64_t v2 = sub_2510BF7F8();

  return v2;
}

uint64_t sub_251069E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25106A128((unint64_t *)&qword_269B1B1A8, type metadata accessor for HKError);
  return MEMORY[0x270EEF7D0](a1, a2, v4);
}

uint64_t sub_251069EC0()
{
  return sub_2510BFD28();
}

void *sub_251069F20@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_251069F30(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_251069F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25106A128((unint64_t *)&qword_269B1B1A8, type metadata accessor for HKError);
  return MEMORY[0x270EEF7B8](a1, a2, a3, v6);
}

BOOL sub_251069FC4(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_251069FDC(uint64_t a1)
{
  uint64_t v2 = sub_25106A128(&qword_26B212FA0, type metadata accessor for HKFeatureAvailabilityContext);
  uint64_t v3 = sub_25106A128(&qword_269B1B0E8, type metadata accessor for HKFeatureAvailabilityContext);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_25106A098()
{
  return sub_25106A128(&qword_269B1B040, type metadata accessor for HKFeatureAvailabilityContext);
}

uint64_t sub_25106A0E0()
{
  return sub_25106A128(&qword_269B1B048, type metadata accessor for HKFeatureAvailabilityContext);
}

uint64_t sub_25106A128(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25106A170(uint64_t a1)
{
  uint64_t v2 = sub_25106A128(&qword_269B1B0D8, type metadata accessor for HKFeatureAvailabilityRequirementIdentifier);
  uint64_t v3 = sub_25106A128(&qword_269B1B0E0, type metadata accessor for HKFeatureAvailabilityRequirementIdentifier);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_25106A22C()
{
  return sub_25106A128(&qword_269B1B050, type metadata accessor for HKFeatureAvailabilityRequirementIdentifier);
}

uint64_t sub_25106A274()
{
  return sub_25106A128(&qword_269B1B058, type metadata accessor for HKFeatureAvailabilityRequirementIdentifier);
}

uint64_t sub_25106A2BC(uint64_t a1)
{
  uint64_t v2 = sub_25106A128(&qword_269B1B0C8, type metadata accessor for HKQuantityTypeIdentifier);
  uint64_t v3 = sub_25106A128(&qword_269B1B0D0, type metadata accessor for HKQuantityTypeIdentifier);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_25106A378()
{
  return sub_25106A128(&qword_269B1B060, type metadata accessor for HKQuantityTypeIdentifier);
}

uint64_t sub_25106A3C0()
{
  return sub_25106A128(&qword_269B1B068, type metadata accessor for HKQuantityTypeIdentifier);
}

uint64_t sub_25106A408@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_2510BF228();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_25106A450@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_2510BF258();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_25106A47C(uint64_t a1)
{
  uint64_t v2 = sub_25106A128(&qword_269B1B0B8, type metadata accessor for HKCategoryTypeIdentifier);
  uint64_t v3 = sub_25106A128(&qword_269B1B0C0, type metadata accessor for HKCategoryTypeIdentifier);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_25106A538(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_2510BF258();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_25106A57C()
{
  sub_2510BF258();
  sub_2510BF2C8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25106A5D0()
{
  return sub_25106A128(&qword_269B1B070, type metadata accessor for HKQuantityTypeIdentifier);
}

uint64_t sub_25106A618()
{
  return sub_25106A128(&qword_269B1B078, type metadata accessor for HKCategoryTypeIdentifier);
}

uint64_t sub_25106A660()
{
  return sub_25106A128(&qword_269B1B080, type metadata accessor for HKCategoryTypeIdentifier);
}

uint64_t sub_25106A6A8()
{
  uint64_t v0 = sub_2510BF258();
  uint64_t v2 = v1;
  if (v0 == sub_2510BF258() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_2510BFC28();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_25106A734()
{
  return sub_25106A128(&qword_269B1B088, type metadata accessor for HKCategoryTypeIdentifier);
}

uint64_t sub_25106A77C()
{
  return sub_25106A128(&qword_269B1B090, type metadata accessor for HKCategoryValueWristEvent);
}

uint64_t sub_25106A7C4()
{
  return sub_25106A128(&qword_269B1B098, type metadata accessor for HKCategoryValueWheelchairUseChanged);
}

uint64_t sub_25106A80C()
{
  return sub_25106A128(&qword_269B1B0A0, type metadata accessor for HKCategoryValueWatchActivation);
}

uint64_t sub_25106A854()
{
  return sub_25106A128(&qword_269B1B0A8, type metadata accessor for HKCategoryValueCoachingEvent);
}

uint64_t sub_25106A89C()
{
  return sub_25106A128(&qword_269B1B0B0, type metadata accessor for HKFeatureAvailabilityRequirementIdentifier);
}

uint64_t sub_25106A8E4()
{
  return sub_25106A128(&qword_26B212FA8, type metadata accessor for HKFeatureAvailabilityContext);
}

uint64_t sub_25106A92C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_25106A964(unint64_t a1, void *a2)
{
  sub_251069620(a1, a2, *(void (**)(id, uint64_t))(v2 + 16));
}

unint64_t sub_25106A96C()
{
  unint64_t result = qword_269B1B150;
  if (!qword_269B1B150)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269B1B150);
  }
  return result;
}

void type metadata accessor for Label(uint64_t a1)
{
}

void type metadata accessor for __HKStateOfMindDomain(uint64_t a1)
{
}

void type metadata accessor for HKError(uint64_t a1)
{
}

uint64_t sub_25106AA24()
{
  return sub_25106A128(&qword_269B1B160, type metadata accessor for HKError);
}

uint64_t sub_25106AA6C()
{
  return sub_25106A128(&qword_269B1B168, type metadata accessor for HKError);
}

uint64_t sub_25106AAB4()
{
  return sub_25106A128(&qword_269B1B170, type metadata accessor for HKError);
}

uint64_t sub_25106AAFC()
{
  return sub_25106A128(&qword_269B1B178, type metadata accessor for HKError);
}

uint64_t sub_25106AB44()
{
  return sub_25106A128(&qword_269B1B180, type metadata accessor for HKError);
}

uint64_t sub_25106AB8C()
{
  return sub_25106A128(&qword_269B1B188, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

uint64_t sub_25106ABFC()
{
  return sub_25106A128(&qword_269B1B190, type metadata accessor for Code);
}

unint64_t sub_25106AC48()
{
  unint64_t result = qword_269B1B198;
  if (!qword_269B1B198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B198);
  }
  return result;
}

uint64_t sub_25106AC9C()
{
  return sub_25106A128(&qword_269B1B1A0, type metadata accessor for Code);
}

uint64_t sub_25106ACE4()
{
  return sub_25106A128((unint64_t *)&qword_269B1B1A8, type metadata accessor for HKError);
}

uint64_t sub_25106AD48()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_25106ADD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  sub_2510609DC(a1, a2, a3, a4);
  return v8;
}

uint64_t sub_25106AE38()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *sub_25106AED0(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(char **)a2;
    *(void *)uint64_t v3 = *(void *)a2;
    uint64_t v3 = &v8[(unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 3;
    if (v9 >= 3)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 3;
          unsigned int v9 = v12 + 3;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 2)
    {
      uint64_t v14 = *(void *)a2;
      id v15 = *(id *)a2;
      *(void *)uint64_t v3 = v14;
      v3[v5] = 2;
    }
    else if (v9 == 1)
    {
      (*(void (**)(char *))(v4 + 16))(a1);
      v3[v5] = 1;
    }
    else
    {
      (*(void (**)(char *))(v4 + 16))(a1);
      v3[v5] = 0;
    }
  }
  return v3;
}

unsigned __int8 *sub_25106B0A8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 3;
    if (v8 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 3;
          unsigned int v8 = v11 + 3;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 2) {

    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 3;
          unsigned int v13 = v16 + 3;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 2)
    {
      id v19 = *(void **)a2;
      id v20 = v19;
      *(void *)a1 = v19;
      char v18 = 2;
    }
    else if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

void *sub_25106B2F8(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 3;
  if (v6 >= 3)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 3;
        unsigned int v6 = v9 + 3;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 2)
  {
    *a1 = *(void *)a2;
    char v11 = 2;
  }
  else if (v6 == 1)
  {
    (*(void (**)(void *))(v4 + 32))(a1);
    char v11 = 1;
  }
  else
  {
    (*(void (**)(void *))(v4 + 32))(a1);
    char v11 = 0;
  }
  *((unsigned char *)a1 + v5) = v11;
  return a1;
}

unsigned __int8 *sub_25106B454(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 3;
    if (v8 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 3;
          unsigned int v8 = v11 + 3;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 2) {

    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 3;
          unsigned int v13 = v16 + 3;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 2)
    {
      *(void *)a1 = *(void *)a2;
      char v18 = 2;
    }
    else if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t sub_25106B69C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 8;
  if (*(void *)(v3 + 64) > 8uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 253) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 3) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 254;
}

void sub_25106B7D0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v8 = a2 - 254;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x25106B998);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_25106B9C0(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 8;
  if (*(void *)(v2 + 64) > 8uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 3;
  if (v4 >= 3)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 3;
        LODWORD(v4) = v7 + 3;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

uint64_t dispatch thunk of HKQueryPublisher.configuration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of HKQueryPublisher.healthStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static HKQueryPublisher.makeQuery(with:outputHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t sub_25106BAB8()
{
  uint64_t result = sub_2510BF808();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_25106BB84(uint64_t a1)
{
}

uint64_t sub_25106BB94(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_251062064(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_25106BBE0(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_251062064(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  int v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_251061EB4(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_25106BC4C(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_251061EB4(v4, v5, v6);
  return a1;
}

uint64_t sub_25106BC94(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_25106BCDC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_25106BD20(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_25106BD38(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

uint64_t type metadata accessor for HKQueryPublisherInner.State()
{
  return __swift_instantiateGenericMetadata();
}

void sub_25106BD68()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  uint64_t v3 = sub_2510BF808();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  int v7 = (char *)&v25 - v6;
  uint64_t v8 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v5);
  unsigned int v10 = (char *)&v25 - v9;
  int v11 = *(os_unfair_lock_s **)((char *)v0 + *(void *)(v1 + 120));
  os_unfair_lock_lock(v11);
  uint64_t v12 = *v0;
  uint64_t v13 = (uint64_t)v0 + *(void *)(*v0 + 128);
  uint64_t v15 = *(void **)v13;
  unsigned int v14 = *(void **)(v13 + 8);
  int v16 = *(unsigned __int8 *)(v13 + 16);
  if (*(unsigned char *)(v13 + 16))
  {
    if (v16 == 2)
    {
      id v26 = *(id *)(v13 + 8);
      uint64_t v17 = (uint64_t)v0 + *(void *)(v12 + 112);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v17, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v2) == 1)
      {
        char v18 = *(void (**)(char *, uint64_t))(v4 + 8);
        id v19 = v15;
        v18(v7, v3);
        os_unfair_lock_unlock(v11);
      }
      else
      {
        uint64_t v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v10, v7, v2);
        MEMORY[0x270FA5388](v22);
        *(&v25 - 2) = (uint64_t)v0;
        *(&v25 - 1) = (uint64_t)v15;
        id v23 = v15;
        sub_25106C2CC((uint64_t)v10, (uint64_t)sub_25106C424, (uint64_t)(&v25 - 4), v2, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v24);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v2);
      }
      sub_251061EB4(v15, v26, 2);
      return;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v13 = xmmword_2510C15C0;
    *(unsigned char *)(v13 + 16) = 3;
    sub_251061EB4(v15, v14, 0);
    int v16 = *(unsigned __int8 *)(v13 + 16);
  }
  if (v16 == 1)
  {
    id v20 = *(void **)v13;
    id v21 = *(void **)(v13 + 8);
    *(void *)uint64_t v13 = 0;
    *(void *)(v13 + 8) = 0;
    *(unsigned char *)(v13 + 16) = 3;
    sub_251061EB4(v20, v21, 1);
  }
  os_unfair_lock_unlock(v11);
}

void sub_25106C0F0(id *a1, uint64_t a2)
{
  uint64_t v4 = *((void *)*a1 + 10);
  uint64_t v5 = sub_2510BF808();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))((char *)&v15 - v7, 1, 1, v4);
  uint64_t v9 = (char *)a1 + *((void *)*a1 + 14);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v9, v8, v5);
  swift_endAccess();
  unsigned int v10 = *(os_unfair_lock_s **)((char *)a1 + *((void *)*a1 + 15));
  os_unfair_lock_unlock(v10);
  objc_msgSend(a1[2], sel_stopQuery_, a2);
  os_unfair_lock_lock(v10);
  int v11 = (char *)a1 + *((void *)*a1 + 16);
  uint64_t v12 = *(void **)v11;
  uint64_t v13 = (void *)*((void *)v11 + 1);
  *(_OWORD *)int v11 = xmmword_2510C15C0;
  char v14 = v11[16];
  v11[16] = 3;
  sub_251061EB4(v12, v13, v14);
  os_unfair_lock_unlock(v10);
}

uint64_t sub_25106C2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v14(v13);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v13, a5);
  }
  return result;
}

void sub_25106C3A4()
{
}

uint64_t sub_25106C3C8()
{
  return sub_2510BEC58();
}

uint64_t sub_25106C3EC()
{
  return swift_getWitnessTable();
}

uint64_t sub_25106C408()
{
  return swift_getWitnessTable();
}

void sub_25106C424()
{
  sub_25106C0F0(*(id **)(v0 + 16), *(void *)(v0 + 24));
}

void *static HKBiologicalSex.allCases.getter()
{
  return &unk_2701FB3D0;
}

void sub_25106C450(void *a1@<X8>)
{
  *a1 = &unk_2701FB410;
}

void *static HKBloodType.allCases.getter()
{
  return &unk_2701FB450;
}

void sub_25106C46C(void *a1@<X8>)
{
  *a1 = &unk_2701FB450;
}

void *static HKFitzpatrickSkinType.allCases.getter()
{
  return &unk_2701FB4B8;
}

void sub_25106C488(void *a1@<X8>)
{
  *a1 = &unk_2701FB4B8;
}

void *static HKWheelchairUse.allCases.getter()
{
  return &unk_2701FB510;
}

uint64_t sub_25106C4A4()
{
  return sub_25106C51C(&qword_269B1B238, &qword_269B1B240, type metadata accessor for HKBiologicalSex);
}

uint64_t sub_25106C4E0()
{
  return sub_25106C51C(&qword_269B1B248, &qword_269B1B250, type metadata accessor for HKBloodType);
}

uint64_t sub_25106C51C(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_25106C5E4(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25106C56C()
{
  return sub_25106C51C(&qword_269B1B258, &qword_269B1B260, type metadata accessor for HKFitzpatrickSkinType);
}

uint64_t sub_25106C5A8()
{
  return sub_25106C51C(&qword_269B1B268, qword_269B1B270, type metadata accessor for HKWheelchairUse);
}

void sub_25106C5E4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_2510BF488();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_25106C638(void *a1@<X8>)
{
  *a1 = &unk_2701FB548;
}

id DateComponents.age(withCurrentDate:)()
{
  uint64_t v0 = (void *)sub_2510BE758();
  uint64_t v1 = (void *)sub_2510BE8D8();
  id v2 = objc_msgSend(v0, sel_hk_ageWithCurrentDate_, v1);

  return v2;
}

id HKHealthStore.makeSampleIteratorPublisher(queryDescriptors:sortDescriptors:batchSize:following:upToAndIncluding:distinctBy:debugIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, void *a8@<X7>, id *a9@<X8>)
{
  id v18 = objc_allocWithZone(MEMORY[0x263F0A6D0]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v19 = a4;
  id v20 = a5;
  *a9 = sub_25106DD54(a1, a2, a4, a5, a6);
  a9[1] = a3;
  a9[2] = a7;
  a9[3] = a8;
  a9[4] = v22;
  swift_bridgeObjectRetain();
  return v22;
}

id HKHealthStore.makeSampleIteratorPublisher(cursor:batchSize:debugIdentifier:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  a5[4] = v5;
  swift_bridgeObjectRetain();
  id v6 = v5;
  return a1;
}

id HKHealthStore.SampleIteratorPublisher.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  id v4 = *(id *)v1;
  uint64_t v2 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(void *)(a1 + 24) = v2;
  swift_bridgeObjectRetain();
  return v4;
}

id HKHealthStore.SampleIteratorPublisher.healthStore.getter()
{
  return *(id *)(v0 + 32);
}

uint64_t HKHealthStore.SampleIteratorPublisher.receive<A>(subscriber:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v21 = a3;
  uint64_t v7 = *(a2 - 1);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void **)v3;
  unint64_t v10 = *(void *)(v3 + 8);
  uint64_t v12 = *(void *)(v3 + 16);
  uint64_t v13 = *(void *)(v3 + 24);
  id v20 = *(id *)(v3 + 32);
  unint64_t v14 = sub_251067550();
  uint64_t v22 = (uint64_t)a2;
  unint64_t v23 = v14;
  uint64_t v24 = a3;
  uint64_t v25 = MEMORY[0x263F8E4E0];
  uint64_t v15 = _s23SampleIteratorPublisherV5InnerCMa();
  (*(void (**)(char *, uint64_t, void *))(v7 + 16))(v9, a1, a2);
  uint64_t v22 = (uint64_t)v11;
  unint64_t v23 = v10;
  uint64_t v24 = v12;
  uint64_t v25 = v13;
  uint64_t v16 = swift_allocObject();
  id v17 = v11;
  swift_bridgeObjectRetain();
  sub_25106CA20((uint64_t)v9, (uint64_t)&v22, (uint64_t)v20);
  uint64_t v25 = v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v22 = v16;
  sub_2510BECF8();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
}

uint64_t sub_25106C9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  sub_25106CA20(a1, a2, a3);
  return v6;
}

uint64_t *sub_25106CA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a3;
  uint64_t v22 = a1;
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 80);
  uint64_t v25 = sub_2510BF808();
  uint64_t v7 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v10 = v5;
  uint64_t v11 = *(void **)a2;
  long long v24 = *(_OWORD *)(a2 + 8);
  uint64_t v23 = *(void *)(a2 + 24);
  uint64_t v12 = (uint64_t)v3 + *(void *)(v10 + 128);
  uint64_t v13 = *(void *)(v6 - 8);
  unint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v14(v12, 1, 1, v6);
  uint64_t v15 = *(void *)(*v3 + 136);
  uint64_t v16 = (_DWORD *)swift_slowAlloc();
  _DWORD *v16 = 0;
  *(uint64_t *)((char *)v3 + v15) = (uint64_t)v16;
  uint64_t v17 = *(void *)(*v3 + 144);
  *(uint64_t *)((char *)v3 + v17) = sub_2510BED68();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v9, v22, v6);
  v14((uint64_t)v9, 0, 1, v6);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v12, v9, v25);
  swift_endAccess();
  v3[2] = (uint64_t)v11;
  *(_OWORD *)(v3 + 3) = v24;
  uint64_t v18 = v26;
  v3[5] = v23;
  v3[6] = v18;
  uint64_t v19 = (uint64_t)v3 + *(void *)(*v3 + 152);
  *(void *)uint64_t v19 = v11;
  *(unsigned char *)(v19 + 8) = 0;
  id v20 = v11;
  return v3;
}

id *sub_25106CC70()
{
  MEMORY[0x2533940F0](*(id *)((char *)v0 + *((void *)*v0 + 17)), -1, -1);

  swift_bridgeObjectRelease();
  uint64_t v1 = (char *)v0 + *((void *)*v0 + 16);
  uint64_t v2 = sub_2510BF808();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_25106E3F8(*(id *)((char *)v0 + *((void *)*v0 + 19)), *((unsigned char *)v0 + *((void *)*v0 + 19) + 8));
  return v0;
}

uint64_t sub_25106CD64()
{
  sub_25106CC70();
  return swift_deallocClassInstance();
}

void sub_25106CDBC(unint64_t a1)
{
  unint64_t v2 = sub_2510BED68();
  sub_2510BED78();
  if (sub_2510BED58())
  {
    sub_2510BED78();
    if (sub_2510BED58())
    {
      __break(1u);
LABEL_10:
      __break(1u);
      return;
    }
  }
  sub_2510BED78();
  if ((sub_2510BED58() & 1) == 0)
  {
    sub_2510BED78();
    char v3 = sub_2510BED58();
    if (v2 >= a1 || (v3 & 1) != 0) {
      goto LABEL_10;
    }
  }
  sub_25106CE50(a1);
}

void sub_25106CE50(uint64_t a1)
{
  char v3 = *v1;
  uint64_t v4 = *((void *)*v1 + 10);
  uint64_t v5 = sub_2510BF808();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v23 - v7;
  uint64_t v9 = *(os_unfair_lock_s **)((char *)v1 + v3[17]);
  os_unfair_lock_lock(v9);
  uint64_t v10 = (uint64_t *)((char *)v1 + *((void *)*v1 + 18));
  swift_beginAccess();
  uint64_t v11 = *v10;
  sub_2510BED78();
  if ((sub_2510BED58() & 1) == 0)
  {
    sub_2510BED78();
    char v12 = sub_2510BED58();
    uint64_t v13 = sub_2510BED78();
    if ((v12 & 1) == 0)
    {
      if (sub_2510BED58()) {
        goto LABEL_7;
      }
      if ((v11 | a1) < 0)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      uint64_t v13 = v11 + a1;
      if (__OFADD__(v11, a1))
      {
LABEL_7:
        uint64_t v13 = sub_2510BED78();
      }
      else if (v13 < 0)
      {
LABEL_20:
        __break(1u);
        return;
      }
    }
    *uint64_t v10 = v13;
  }
  swift_endAccess();
  unint64_t v14 = (char *)v1 + *((void *)*v1 + 16);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v14, v5);
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v8, 1, v4);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v15 == 1) {
    goto LABEL_15;
  }
  uint64_t v16 = *v10;
  sub_2510BED78();
  if (sub_2510BED58()) {
    goto LABEL_14;
  }
  if (v16 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v16)
  {
LABEL_14:
    uint64_t v17 = (char *)v1 + *((void *)*v1 + 19);
    if (!v17[8])
    {
      id v18 = *(id *)v17;
      id v19 = sub_25106D598((uint64_t)*(id *)v17);
      id v20 = *(id *)v17;
      *(void *)uint64_t v17 = v19;
      unsigned __int8 v21 = v17[8];
      v17[8] = 1;
      id v22 = v19;
      sub_25106E3F8(v20, v21);
      os_unfair_lock_unlock(v9);
      objc_msgSend(v1[6], sel_executeQuery_, v22);

      sub_25106E3F8(v18, 0);
      return;
    }
  }
LABEL_15:
  os_unfair_lock_unlock(v9);
}

void sub_25106D140()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 80);
  uint64_t v3 = sub_2510BF808();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(os_unfair_lock_s **)(v0 + *(void *)(v1 + 136));
  os_unfair_lock_lock(v11);
  uint64_t v12 = v0 + *(void *)(*(void *)v0 + 128);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v12, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    os_unfair_lock_unlock(v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v7, v2);
    sub_25106C2CC((uint64_t)v10, (uint64_t)sub_25106E69C, v0, v2, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v13);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v2);
  }
}

void sub_25106D3B0(id *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((void *)*a1 + 10);
  uint64_t v4 = sub_2510BF808();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v12 - v6;
  uint64_t v8 = (char *)a1 + v2[19];
  uint64_t v9 = *(void **)v8;
  int v10 = v8[8];
  *(void *)uint64_t v8 = 0;
  v8[8] = 2;
  sub_25106E3D4(v9, v10);
  sub_25106E3F8(v9, v10);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v7, 1, 1, v3);
  uint64_t v11 = (char *)a1 + *((void *)*a1 + 16);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 40))(v11, v7, v4);
  swift_endAccess();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)((char *)a1 + *((void *)*a1 + 17)));
  if (v10 == 1) {
    objc_msgSend(a1[6], sel_stopQuery_, v9);
  }
  sub_25106E3F8(v9, v10);
}

id sub_25106D598(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  id v4 = objc_allocWithZone(MEMORY[0x263F0A6C8]);
  v11[4] = sub_25106E5C0;
  uint64_t v12 = v1;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1107296256;
  v11[2] = sub_25106E5C8;
  v11[3] = &block_descriptor_1;
  uint64_t v5 = _Block_copy(v11);
  swift_retain();
  id v6 = objc_msgSend(v4, sel_initWithQueryCursor_limit_resultsHandler_, a1, v3, v5);
  _Block_release(v5);
  swift_release();
  if (*(void *)(v1 + 40))
  {
    id v7 = v6;
    uint64_t v8 = (void *)sub_2510BF228();
  }
  else
  {
    id v9 = v6;
    uint64_t v8 = 0;
  }
  objc_msgSend(v6, sel_setDebugIdentifier_, v8);

  return v6;
}

void sub_25106D6CC(int a1, unint64_t a2, void *a3, id a4)
{
  if (a2)
  {
    sub_25106D740(a2, a3, 0);
  }
  else if (a4)
  {
    id v5 = a4;
    sub_25106D740((unint64_t)a4, 0, 1);
  }
}

void sub_25106D740(unint64_t a1, void *a2, char a3)
{
  id v4 = v3;
  unint64_t v37 = a1;
  id v38 = a2;
  id v6 = *v3;
  id v7 = *v3;
  uint64_t v8 = *((void *)*v3 + 10);
  uint64_t v9 = sub_2510BF808();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  id v36 = &v33[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  int v15 = &v33[-v14];
  uint64_t v16 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v13);
  id v39 = &v33[-v17];
  os_unfair_lock_t v40 = *(os_unfair_lock_t *)((char *)v4 + v6[17]);
  os_unfair_lock_lock(v40);
  id v18 = (uint64_t *)((char *)v4 + *((void *)*v4 + 18));
  swift_beginAccess();
  uint64_t v19 = *v18;
  sub_2510BED78();
  if ((sub_2510BED58() & 1) == 0)
  {
    if (v19 < 0)
    {
      __break(1u);
      goto LABEL_25;
    }
    if (!v19)
    {
LABEL_6:
      os_unfair_lock_unlock(v40);
      return;
    }
  }
  id v20 = (char *)v4 + *((void *)*v4 + 16);
  swift_beginAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v10 + 16))(v15, v20, v9);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v8) == 1)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v15, v9);
    goto LABEL_6;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 32))(v39, v15, v8);
  swift_beginAccess();
  uint64_t v21 = *v18;
  sub_2510BED78();
  if (sub_2510BED58()) {
    goto LABEL_14;
  }
  sub_2510BED78();
  if ((sub_2510BED58() & 1) == 0)
  {
    if ((v21 & 0x8000000000000000) == 0)
    {
      if (v21)
      {
        uint64_t v22 = v21 - 1;
        goto LABEL_13;
      }
LABEL_26:
      __break(1u);
      return;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v22 = sub_2510BED78();
LABEL_13:
  uint64_t *v18 = v22;
LABEL_14:
  id v35 = v7;
  int v23 = a3 & 1;
  swift_endAccess();
  long long v24 = (char *)v4 + *((void *)*v4 + 19);
  uint64_t v25 = *(void **)v24;
  int v26 = v24[8];
  int v34 = v23;
  if (v23 || (id v27 = v38, v28 = v38, !v27))
  {
    *(void *)long long v24 = 0;
    v24[8] = 2;
    sub_25106E3D4(v25, v26);
    sub_25106E3F8(v25, v26);
    uint64_t v29 = v36;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v36, 1, 1, v8);
    swift_beginAccess();
    (*(void (**)(char *, unsigned char *, uint64_t))(v10 + 40))(v20, v29, v9);
    swift_endAccess();
  }
  else
  {
    *(void *)long long v24 = v38;
    v24[8] = 0;
    sub_25106E3D4(v25, v26);
    sub_25106E3F8(v25, v26);
  }
  unint64_t v30 = v39;
  os_unfair_lock_unlock(v40);
  if (v26 == 1) {
    objc_msgSend(v4[6], sel_stopQuery_, v25);
  }
  uint64_t v31 = sub_25106DBE4(v37, (uint64_t)v38, v34);
  if (v32)
  {
    (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v30, v8);
    sub_25106E3F8(v25, v26);
  }
  else
  {
    sub_25106CE50(v31);
    sub_25106E3F8(v25, v26);
    (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v30, v8);
  }
}

uint64_t sub_25106DBE4(unint64_t a1, uint64_t a2, char a3)
{
  if (a3)
  {
    id v6 = (id)a1;
    swift_willThrow();
    if (a1)
    {
      sub_2510BECE8();

      return 0;
    }
    goto LABEL_5;
  }
  if (!(a1 >> 62))
  {
LABEL_5:
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_2510BFAF8();
LABEL_6:
  if (v7) {
    uint64_t v7 = sub_2510BED08();
  }
  swift_bridgeObjectRelease();
  if ((a3 & 1) != 0 || !a2)
  {
    sub_2510BECE8();
    return 0;
  }
  return v7;
}

void sub_25106DD08(unint64_t a1)
{
}

void sub_25106DD2C()
{
}

id sub_25106DD54(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v6 = v5;
  sub_251065E84(0, &qword_26B2120C0);
  uint64_t v11 = (void *)sub_2510BF408();
  swift_bridgeObjectRelease();
  if (!a2)
  {
    uint64_t v12 = 0;
    if (a5) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v13 = 0;
    goto LABEL_6;
  }
  sub_251065E84(0, &qword_26B212E28);
  uint64_t v12 = (void *)sub_2510BF408();
  swift_bridgeObjectRelease();
  if (!a5) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v13 = (void *)sub_2510BF408();
  swift_bridgeObjectRelease();
LABEL_6:
  id v14 = objc_msgSend(v6, sel_initWithQueryDescriptors_sortDescriptors_followingAnchor_upToAndIncludingAnchor_distinctByKeyPaths_, v11, v12, a3, a4, v13);

  return v14;
}

uint64_t _s23SampleIteratorPublisherV5InnerCMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25106DE8C()
{
  return MEMORY[0x263F8E4E0];
}

void _s23SampleIteratorPublisherVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 32);
}

uint64_t _s23SampleIteratorPublisherVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  id v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  id v5 = v3;
  swift_bridgeObjectRetain();
  id v6 = v4;
  return a1;
}

uint64_t _s23SampleIteratorPublisherVwca(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(a2 + 32);
  uint64_t v8 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v7;
  id v9 = v7;

  return a1;
}

uint64_t _s23SampleIteratorPublisherVwta(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  id v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

uint64_t _s23SampleIteratorPublisherVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s23SampleIteratorPublisherVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.SampleIteratorPublisher()
{
  return &type metadata for HKHealthStore.SampleIteratorPublisher;
}

uint64_t _s23SampleIteratorPublisherV13ConfigurationVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s23SampleIteratorPublisherV13ConfigurationVwxx(id *a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t _s23SampleIteratorPublisherV13ConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  id v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s23SampleIteratorPublisherV13ConfigurationVwca(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s23SampleIteratorPublisherV13ConfigurationVwta(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s23SampleIteratorPublisherV13ConfigurationVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s23SampleIteratorPublisherV13ConfigurationVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.SampleIteratorPublisher.Configuration()
{
  return &type metadata for HKHealthStore.SampleIteratorPublisher.Configuration;
}

uint64_t sub_25106E2B4()
{
  uint64_t result = sub_2510BF808();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_25106E384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t sub_25106E38C(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_25106E3D4(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

id sub_25106E3D4(id result, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    return result;
  }
  return result;
}

void sub_25106E3E8(uint64_t a1)
{
}

void sub_25106E3F8(id a1, unsigned __int8 a2)
{
  if (a2 <= 1u) {
}
  }

uint64_t sub_25106E40C(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  sub_25106E3D4(*(id *)a2, v4);
  id v5 = *(void **)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_25106E3F8(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t sub_25106E474(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  unsigned __int8 v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_25106E3F8(v4, v5);
  return a1;
}

uint64_t sub_25106E4B4(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_25106E4FC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_25106E540(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_25106E558(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t _s23SampleIteratorPublisherV5InnerC5StateOMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25106E588()
{
  return swift_getWitnessTable();
}

uint64_t sub_25106E5A4()
{
  return swift_getWitnessTable();
}

void sub_25106E5C0(int a1, unint64_t a2, void *a3, id a4)
{
}

uint64_t sub_25106E5C8(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v7 = a3;
  id v9 = *(void (**)(id, uint64_t, void *, void *))(a1 + 32);
  if (a3)
  {
    sub_251065E84(0, &qword_26B212170);
    uint64_t v7 = sub_2510BF418();
  }
  swift_retain();
  id v10 = a2;
  id v11 = a4;
  id v12 = a5;
  v9(v10, v7, a4, a5);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_25106E69C()
{
  sub_25106D3B0(v0);
}

uint64_t DefaultOnlyLoggingCategory.rawString.getter()
{
  return 0x746C7561666564;
}

uint64_t DefaultOnlyLoggingCategory.rawValue.getter()
{
  return 0x746C7561666564;
}

uint64_t DefaultOnlyLoggingCategory.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_2510BFB78();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void *static DefaultOnlyLoggingCategory.allCases.getter()
{
  return &unk_2701FB5B8;
}

uint64_t sub_25106E768@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_2510BFB78();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_25106E7BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = DefaultOnlyLoggingCategory.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_25106E7E4(void *a1@<X8>)
{
  *a1 = &unk_2701FB618;
}

uint64_t sub_25106E7F4()
{
  return DefaultOnlyLoggingCategory.rawValue.getter();
}

uint64_t SensitiveLogger.init(subsystem:sensitiveLogger:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  uint64_t v27 = a6;
  uint64_t v26 = a5;
  uint64_t v30 = a2;
  uint64_t v29 = a1;
  uint64_t v31 = a9;
  uint64_t v25 = a10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v19 = (char *)&v24 - v18;
  uint64_t v41 = a4;
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  uint64_t v44 = a7;
  uint64_t v45 = a8;
  uint64_t v46 = a10;
  id v20 = (char *)a9 + *(int *)(type metadata accessor for SensitiveLogger() + 68);
  uint64_t v21 = sub_2510BEC48();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v20, a3, v21);
  sub_2510BF948();
  swift_getTupleTypeMetadata2();
  sub_2510BF458();
  uint64_t v40 = sub_2510BF128();
  uint64_t v32 = a4;
  uint64_t v33 = v26;
  uint64_t v34 = v27;
  uint64_t v35 = a7;
  uint64_t v36 = a8;
  uint64_t v37 = v25;
  uint64_t v38 = v29;
  uint64_t v39 = v30;
  sub_2510BF138();
  swift_getAssociatedConformanceWitness();
  sub_2510BF3B8();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a3, v21);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v19, AssociatedTypeWitness);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v31 = v41;
  return result;
}

uint64_t type metadata accessor for SensitiveLogger()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25106EAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v19[1] = a1;
  sub_25106897C();
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a5);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(a7 + 8);
  swift_bridgeObjectRetain();
  v16(a5, a7);
  sub_2510BEC38();
  uint64_t v17 = sub_2510BEC48();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v13, 0, 1, v17);
  sub_2510BF138();
  return sub_2510BF158();
}

uint64_t SensitiveLogger.info(category:_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  return sub_251058570(a1, a2, a3, a4, MEMORY[0x263F90270]);
}

uint64_t SensitiveLogger.debug(category:_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  return sub_251058570(a1, a2, a3, a4, MEMORY[0x263F90278]);
}

uint64_t SensitiveLogger.error(category:_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  return sub_251058570(a1, a2, a3, a4, MEMORY[0x263F90280]);
}

uint64_t SensitiveLogger.fault(category:_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  return sub_251058570(a1, a2, a3, a4, MEMORY[0x263F90288]);
}

uint64_t sub_25106ED30(uint64_t a1, uint64_t a2)
{
  return sub_25106EAF4(a1, a2, v2[8], v2[9], v2[2], v2[3], v2[4]);
}

uint64_t sub_25106ED64(uint64_t a1)
{
  sub_25106897C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25106EDC0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_25106EE94(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_25106FBB4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_25106FBB4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_25106EE94(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_2510BF828();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_25106F050(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_2510BF9C8();
  if (!v8)
  {
    sub_2510BFAB8();
    __break(1u);
LABEL_17:
    uint64_t result = sub_2510BFB58();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_25106F050(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_25106F0E8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_25106F260(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_25106F260(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_25106F0E8(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_2510AF0EC(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_2510BF938();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_2510BFAB8();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_2510BF308();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_2510BFB58();
    __break(1u);
LABEL_14:
    uint64_t result = sub_2510BFAB8();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t sub_25106F260(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_25106FC10(0, qword_269B1B378, MEMORY[0x263F8E778], MEMORY[0x263F8E0F8]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_2510BFB58();
  __break(1u);
  return result;
}

unint64_t sub_25106F3D4()
{
  unint64_t result = qword_26B211890;
  if (!qword_26B211890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B211890);
  }
  return result;
}

unint64_t sub_25106F42C()
{
  unint64_t result = qword_26B211968;
  if (!qword_26B211968)
  {
    sub_25106FC10(255, &qword_26B211960, (uint64_t)&type metadata for DefaultOnlyLoggingCategory, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B211968);
  }
  return result;
}

uint64_t dispatch thunk of static Defaultable.default.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of RawStringContaining.rawString.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t getEnumTagSinglePayload for DefaultOnlyLoggingCategory(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for DefaultOnlyLoggingCategory(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25106F5C0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25106F5E8()
{
  return 0;
}

ValueMetadata *type metadata accessor for DefaultOnlyLoggingCategory()
{
  return &type metadata for DefaultOnlyLoggingCategory;
}

uint64_t sub_25106F600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 56);
}

uint64_t sub_25106F608()
{
  uint64_t result = sub_2510BEC48();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_25106F6A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 68);
    int64_t v7 = (char *)a1 + v6;
    int64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_2510BEC48();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_25106F788(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 68);
  uint64_t v5 = sub_2510BEC48();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *sub_25106F800(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 68);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_2510BEC48();
  int64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_25106F898(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 68);
  uint64_t v7 = (char *)a1 + v6;
  int64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2510BEC48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_25106F92C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 68);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_2510BEC48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_25106F9A8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 68);
  uint64_t v7 = (char *)a1 + v6;
  int64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2510BEC48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_25106FA34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25106FA48);
}

uint64_t sub_25106FA48(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_2510BEC48();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    size_t v11 = (char *)a1 + *(int *)(a3 + 68);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_25106FAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25106FB0C);
}

void *sub_25106FB0C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_2510BEC48();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 68);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_25106FBB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_25106FC10(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

BOOL static OSAllocatedUnfairRecursiveLock.Ownership.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t OSAllocatedUnfairRecursiveLock.Ownership.hash(into:)()
{
  return sub_2510BFD18();
}

uint64_t OSAllocatedUnfairRecursiveLock.Ownership.hashValue.getter()
{
  return sub_2510BFD28();
}

BOOL sub_25106FCE0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static OSAllocatedUnfairRecursiveLock.Ownership.== infix(_:_:)(*a1, *a2);
}

uint64_t sub_25106FCEC()
{
  return OSAllocatedUnfairRecursiveLock.Ownership.hashValue.getter();
}

uint64_t sub_25106FCF4()
{
  return OSAllocatedUnfairRecursiveLock.Ownership.hash(into:)();
}

uint64_t sub_25106FCFC()
{
  return sub_2510BFD28();
}

uint64_t sub_25106FD3C()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for OSAllocatedUnfairRecursiveLock()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25106FD70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 8);
}

uint64_t getEnumTagSinglePayload for FeatureStatus.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *sub_25106FE08(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25106FED4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for OSAllocatedUnfairRecursiveLock.Ownership()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25106FF14(uint64_t a1)
{
  return sub_251056F58(a1, qword_26B214CE0);
}

uint64_t sub_25106FF40(uint64_t a1)
{
  return sub_251056F58(a1, qword_26B211898);
}

uint64_t static Logger.notifications.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_251058D64(&qword_26B2118B0, (uint64_t)qword_26B211898, a1);
}

uint64_t HKHealthStore.sharedSummaryPublisher(transaction:package:includedIdentifiers:includedObjectTypes:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_2510701B4();
  uint64_t v22 = *(void *)(v11 - 8);
  uint64_t v23 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s27SharedSummaryQueryPublisherCMa();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 104) = a1;
  *(void *)(v14 + 112) = a2;
  *(void *)(v14 + 120) = a3;
  *(void *)(v14 + 128) = a4;
  *(void *)(v14 + 136) = a5;
  *(unsigned char *)(v14 + 96) = 0;
  *(void *)(v14 + 80) = v5;
  *(void *)(v14 + 88) = 0;
  uint64_t v24 = sub_251064B48(0);
  sub_251070260();
  uint64_t v21 = v15;
  sub_2510702D0();
  sub_251070894(&qword_26B211618, (void (*)(uint64_t))sub_251070260);
  id v16 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v17 = v5;
  sub_2510BEE68();
  swift_release();
  sub_251070894(&qword_26B211638, (void (*)(uint64_t))sub_2510701B4);
  uint64_t v18 = v23;
  uint64_t v19 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v18);
  return v19;
}

void sub_2510701B4()
{
  if (!qword_26B211640)
  {
    sub_251070260();
    sub_2510702D0();
    sub_251070894(&qword_26B211618, (void (*)(uint64_t))sub_251070260);
    unint64_t v0 = sub_2510BEC68();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B211640);
    }
  }
}

void sub_251070260()
{
  if (!qword_26B211620)
  {
    sub_2510702D0();
    sub_251067550();
    unint64_t PublisherBase = type metadata accessor for QueryPublisherBase();
    if (!v1) {
      atomic_store(PublisherBase, (unint64_t *)&qword_26B211620);
    }
  }
}

void sub_2510702D0()
{
  if (!qword_26B211970)
  {
    sub_251065E84(255, &qword_26B212030);
    unint64_t v0 = sub_2510BF488();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B211970);
    }
  }
}

uint64_t _s27SharedSummaryQueryPublisherCMa()
{
  uint64_t result = qword_26B211C50;
  if (!qword_26B211C50) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id sub_251070384()
{
  int v2 = (void *)v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[17];
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  id v7 = objc_allocWithZone(MEMORY[0x263F0A718]);
  swift_bridgeObjectRetain();
  id v8 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_25107062C(v8, v1, v3, v4, v5, (uint64_t)sub_251070B10, v6);
}

void sub_251070448(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    if (a4)
    {
      id v7 = a4;
      id v8 = a4;
      sub_251089508(a4);
      swift_release();
    }
    else
    {
      if (a2)
      {
        uint64_t v9 = swift_bridgeObjectRetain();
        sub_2510BD3D0(v9);
        swift_bridgeObjectRelease();
        if (a3) {
          sub_251089508(0);
        }
      }
      swift_release();
    }
  }
}

void sub_25107050C()
{
}

uint64_t sub_25107053C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_251070594()
{
  if (*(void *)(v0 + 88)) {
    objc_msgSend(*(id *)(v0 + 80), sel_stopQuery_);
  }
  uint64_t v1 = (id *)sub_2510606CC();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

id sub_25107062C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3)
  {
    uint64_t v13 = (void *)sub_2510BF228();
    swift_bridgeObjectRelease();
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v14 = 0;
    if (a5) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v15 = 0;
    goto LABEL_8;
  }
  uint64_t v13 = 0;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v14 = (void *)sub_2510BF518();
  swift_bridgeObjectRelease();
  if (!a5) {
    goto LABEL_7;
  }
LABEL_4:
  sub_251065E84(0, &qword_26B2121B8);
  sub_251070B18();
  uint64_t v15 = (void *)sub_2510BF518();
  swift_bridgeObjectRelease();
LABEL_8:
  v19[4] = a6;
  v19[5] = a7;
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 1107296256;
  void v19[2] = sub_2510707BC;
  _OWORD v19[3] = &block_descriptor_2;
  id v16 = _Block_copy(v19);
  id v17 = objc_msgSend(v7, sel_initWithTransaction_package_includedIdentifiers_includedObjectTypes_resultsHandler_, a1, v13, v14, v15, v16);

  _Block_release(v16);
  swift_release();
  return v17;
}

uint64_t sub_2510707BC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = a3;
  uint64_t v9 = *(void (**)(id, uint64_t, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_251065E84(0, &qword_26B212030);
    uint64_t v7 = sub_2510BF418();
  }
  swift_retain();
  id v10 = a2;
  id v11 = a5;
  v9(v10, v7, a4, a5);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_251070888@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_251070894(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2510708DC()
{
  return swift_initClassMetadata2();
}

uint64_t _s27SharedSummaryQueryPublisherC15QueryParametersVwxx(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *_s27SharedSummaryQueryPublisherC15QueryParametersVwcp(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  a1[4] = *(void *)(a2 + 32);
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s27SharedSummaryQueryPublisherC15QueryParametersVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s27SharedSummaryQueryPublisherC15QueryParametersVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *_s27SharedSummaryQueryPublisherC15QueryParametersVMa()
{
  return &_s27SharedSummaryQueryPublisherC15QueryParametersVN;
}

uint64_t sub_251070AD8()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_251070B10(uint64_t a1, uint64_t a2, char a3, void *a4)
{
}

unint64_t sub_251070B18()
{
  unint64_t result = qword_26B2121C0;
  if (!qword_26B2121C0)
  {
    sub_251065E84(255, &qword_26B2121B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2121C0);
  }
  return result;
}

uint64_t HKKeyValueDomain.publisher<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = v3;
  a3[1] = a1;
  a3[2] = a2;
  id v4 = v3;
  return swift_bridgeObjectRetain();
}

uint64_t HKKeyValueDomain.Publisher.init(keyValueDomain:key:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t sub_251070BCC()
{
  return objectdestroyTm(72);
}

uint64_t sub_251070BD4()
{
  return objectdestroyTm(56);
}

id HKKeyValueDomain.Publisher.keyValueDomain.getter()
{
  return *v0;
}

uint64_t HKKeyValueDomain.Publisher.key.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_251070C14()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + *(void *)(*(void *)v0 + 128));
  _s17SubscriptionStateVMa();
  sub_2510725A4(0, &qword_26B212448, &qword_26B212440);
  uint64_t v3 = v2 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v2 + 16);
  id v4 = (os_unfair_lock_s *)(v2 + ((*(unsigned int *)(*(void *)v2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v4);
  sub_251072538(v3, &v6);
  os_unfair_lock_unlock(v4);
  id v5 = v6;
  if (v6)
  {
    objc_msgSend(v6, sel_stopObservation_, v1);
  }
}

uint64_t sub_251070D4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t v4 = sub_2510BF808();
  uint64_t v16 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v6 = (char *)&v15 - v5;
  uint64_t v7 = *(uint64_t *)((char *)v0 + *(void *)(v2 + 128));
  uint64_t v18 = v3;
  long long v17 = *(_OWORD *)(v2 + 88);
  long long v19 = v17;
  uint64_t v20 = *(void *)(v2 + 104);
  _s17SubscriptionStateVMa();
  id v8 = (uint64_t *)(v7 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v7 + 16));
  uint64_t v9 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(void *)v7 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  sub_251072568(v8, &v21);
  os_unfair_lock_unlock(v9);
  uint64_t v10 = v21;
  sub_2510BED78();
  uint64_t result = sub_2510BED58();
  if (result) {
    goto LABEL_4;
  }
  if (v10 < 0)
  {
    __break(1u);
    return result;
  }
  if (v10)
  {
LABEL_4:
    uint64_t v12 = sub_2510581A0(v3, (uint64_t)v6);
    MEMORY[0x270FA5388](v12);
    *(&v15 - 2) = (uint64_t)v6;
    *(&v15 - 1) = (uint64_t)v1;
    uint64_t v13 = (uint64_t *)(v7 + *(void *)(*MEMORY[0x263F8DD00] + *(void *)v7 + 16));
    uint64_t v14 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(void *)v7 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v14);
    sub_251072588(v13);
    os_unfair_lock_unlock(v14);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v6, v4);
  }
  return result;
}

uint64_t sub_251071058@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  sub_2510BED78();
  uint64_t result = sub_2510BED58();
  if ((result & 1) == 0)
  {
    if (v4 < 0)
    {
      __break(1u);
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    if (!v4) {
      goto LABEL_11;
    }
  }
  sub_2510BED78();
  uint64_t result = sub_2510BED58();
  if (result)
  {
LABEL_11:
    *a2 = v4;
    return result;
  }
  sub_2510BED78();
  uint64_t result = sub_2510BED58();
  if (result)
  {
    uint64_t result = sub_2510BED78();
LABEL_10:
    *a1 = result;
    goto LABEL_11;
  }
  if (v4 < 0) {
    goto LABEL_13;
  }
  if (v4)
  {
    uint64_t result = v4 - 1;
    goto LABEL_10;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_2510710FC(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v51 = a2;
  uint64_t v4 = *a3;
  uint64_t v5 = *a3;
  uint64_t v44 = a3;
  uint64_t v45 = v5;
  uint64_t v6 = *(void *)(v4 + 80);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v39 = (char *)&v38 - v8;
  uint64_t v9 = sub_2510BF808();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v40 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v14 = *(void *)(v9 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v11);
  v50 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v38 - v17;
  uint64_t v19 = *(int *)(_s17SubscriptionStateVMa() + 32);
  uint64_t v46 = a1;
  uint64_t v20 = *(void (**)(char *))(v14 + 16);
  uint64_t v43 = (uint64_t)a1 + v19;
  v20(v18);
  uint64_t v41 = TupleTypeMetadata2;
  uint64_t v21 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, uint64_t, uint64_t))v20)(v13, v51, v9);
  id v47 = v21;
  ((void (*)(char *, char *, uint64_t))v20)(v21, v18, v9);
  uint64_t v42 = v7;
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v48 = v6;
  int v23 = v22(v13, 1, v6);
  uint64_t v49 = v14;
  if (v23 == 1)
  {
    uint64_t v24 = *(void (**)(char *, uint64_t))(v14 + 8);
    v24(v18, v9);
    uint64_t v25 = v13;
    if (v22(v47, 1, v48) == 1) {
      return ((uint64_t (*)(char *, uint64_t))v24)(v13, v9);
    }
    goto LABEL_6;
  }
  ((void (*)(char *, char *, uint64_t))v20)(v50, v13, v9);
  uint64_t v28 = v47;
  uint64_t v27 = v48;
  uint64_t v25 = v13;
  if (v22(v47, 1, v48) == 1)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v18, v9);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v50, v27);
LABEL_6:
    (*(void (**)(char *, uint64_t))(v40 + 8))(v25, v41);
    uint64_t v29 = v46;
    goto LABEL_7;
  }
  uint64_t v34 = v42;
  uint64_t v35 = v39;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v39, v28, v27);
  LODWORD(v47) = sub_2510BF218();
  uint64_t v36 = *(void (**)(char *, uint64_t))(v34 + 8);
  v36(v35, v27);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v49 + 8);
  v37(v18, v9);
  v36(v50, v27);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v37)(v13, v9);
  uint64_t v29 = v46;
  if (v47) {
    return result;
  }
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 24))(v43, v51, v9);
  uint64_t v30 = sub_2510BED08();
  sub_2510BED78();
  uint64_t result = sub_2510BED58();
  if ((result & 1) == 0)
  {
    if (v30 < 0)
    {
      __break(1u);
      goto LABEL_23;
    }
    if (!v30) {
      return result;
    }
  }
  uint64_t v31 = *v29;
  sub_2510BED78();
  uint64_t result = sub_2510BED58();
  if (result) {
    return result;
  }
  sub_2510BED78();
  char v32 = sub_2510BED58();
  uint64_t result = sub_2510BED78();
  uint64_t v33 = result;
  if ((v32 & 1) == 0)
  {
    uint64_t result = sub_2510BED58();
    if (result)
    {
LABEL_16:
      uint64_t result = sub_2510BED78();
      uint64_t v33 = result;
      goto LABEL_20;
    }
    if (((v31 | v30) & 0x8000000000000000) == 0)
    {
      uint64_t v33 = v31 + v30;
      if (!__OFADD__(v31, v30))
      {
        if ((v33 & 0x8000000000000000) == 0) {
          goto LABEL_20;
        }
LABEL_24:
        __break(1u);
        return result;
      }
      goto LABEL_16;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_20:
  *uint64_t v29 = v33;
  return result;
}

uint64_t sub_251071648(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  swift_retain();
  sub_251070D4C();

  return swift_release();
}

uint64_t sub_251071698()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 88) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 112));
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_251071744()
{
  sub_251071698();
  return swift_deallocClassInstance();
}

void sub_251071798()
{
}

uint64_t sub_2510717BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_251071820(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_251071868()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_251071914()
{
  uint64_t result = sub_2510BF808();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_2510719BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  id v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  int v9 = v7 + 16;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v10 = *(void *)(v5 + 64);
  }
  else {
    size_t v10 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v11 = ((v7 + 16) & ~(unint64_t)v7) + v10;
  int v12 = v7 & 0x100000;
  if (v8 > 7 || v12 != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    *id v3 = *a2;
    id v3 = (uint64_t *)(v15 + ((v8 & 0xF8 ^ 0x1F8) & v9));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v16 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v17 = (void **)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v18 = *v17;
    void *v16 = *v17;
    uint64_t v19 = (void *)(((unint64_t)v16 + v8 + 8) & ~v8);
    uint64_t v20 = (const void *)(((unint64_t)v17 + v8 + 8) & ~v8);
    uint64_t v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    id v22 = v18;
    if (v21(v20, 1, v4))
    {
      memcpy(v19, v20, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v19, v20, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v19, 0, 1, v4);
    }
  }
  return v3;
}

void *sub_251071B44(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void **)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void **)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v7 = *v6;
  uint64_t v8 = *v5;
  *uint64_t v5 = *v6;
  id v9 = v7;

  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (void *)(((unint64_t)v5 + v12 + 8) & ~v12);
  uint64_t v14 = (void *)(((unint64_t)v6 + v12 + 8) & ~v12);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v8) = v15(v13, 1, v10);
  int v16 = v15(v14, 1, v10);
  if (v8)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v13, v14, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
      return a1;
    }
    int v17 = *(_DWORD *)(v11 + 84);
    size_t v18 = *(void *)(v11 + 64);
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v13, v14, v10);
      return a1;
    }
    uint64_t v20 = *(void (**)(void *, uint64_t))(v11 + 8);
    uint64_t v19 = v11 + 8;
    v20(v13, v10);
    int v17 = *(_DWORD *)(v19 + 76);
    size_t v18 = *(void *)(v19 + 56);
  }
  if (v17) {
    size_t v21 = v18;
  }
  else {
    size_t v21 = v18 + 1;
  }
  memcpy(v13, v14, v21);
  return a1;
}

void *sub_251071CE0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  id v9 = (void *)(((unint64_t)v4 + v8 + 8) & ~v8);
  uint64_t v10 = (const void *)(((unint64_t)v5 + v8 + 8) & ~v8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6))
  {
    if (*(_DWORD *)(v7 + 84)) {
      size_t v11 = *(void *)(v7 + 64);
    }
    else {
      size_t v11 = *(void *)(v7 + 64) + 1;
    }
    memcpy(v9, v10, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  return a1;
}

void *sub_251071E10(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void **)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void **)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *v5;
  *uint64_t v5 = *v6;

  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  size_t v11 = (void *)(((unint64_t)v5 + v10 + 8) & ~v10);
  uint64_t v12 = (void *)(((unint64_t)v6 + v10 + 8) & ~v10);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  int v14 = v13(v11, 1, v8);
  int v15 = v13(v12, 1, v8);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v11, v12, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v8);
      return a1;
    }
    int v16 = *(_DWORD *)(v9 + 84);
    size_t v17 = *(void *)(v9 + 64);
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v11, v12, v8);
      return a1;
    }
    uint64_t v19 = *(void (**)(void *, uint64_t))(v9 + 8);
    uint64_t v18 = v9 + 8;
    v19(v11, v8);
    int v16 = *(_DWORD *)(v18 + 76);
    size_t v17 = *(void *)(v18 + 56);
  }
  if (v16) {
    size_t v20 = v17;
  }
  else {
    size_t v20 = v17 + 1;
  }
  memcpy(v11, v12, v20);
  return a1;
}

uint64_t sub_251071FA8(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_28;
  }
  uint64_t v11 = v9 + ((v8 + 16) & ~v8);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_28:
      size_t v17 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v6 > 0x7FFFFFFE)
      {
        unsigned int v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v8 + 8) & ~v8);
        if (v19 >= 2) {
          return v19 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v18 = *v17;
        if (v18 >= 0xFFFFFFFF) {
          LODWORD(v18) = -1;
        }
        if ((v18 + 1) >= 2) {
          return v18;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_28;
  }
LABEL_20:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v11 | v16) + 1;
}

void sub_25107219C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v11 + 16) & ~v11) + v12;
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 == 0 || !v14)
  {
LABEL_17:
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  if (v13 > 3)
  {
    int v6 = 1;
    if (v10 < a2) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
  unsigned int v16 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
  if (!HIWORD(v16))
  {
    if (v16 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v16 > 1;
    }
    goto LABEL_17;
  }
  int v6 = 4;
  if (v10 < a2)
  {
LABEL_18:
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v19 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
LABEL_25:
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x2510724C8);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        size_t v20 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if (v9 > 0x7FFFFFFE)
        {
          size_t v21 = (unsigned char *)(((unint64_t)v20 + v11 + 8) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v25 = a2 + 1;
            uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            v26(((unint64_t)v20 + v11 + 8) & ~v11, v25);
          }
          else
          {
            if (v12 <= 3) {
              int v22 = ~(-1 << (8 * v12));
            }
            else {
              int v22 = -1;
            }
            if (v12)
            {
              int v23 = v22 & (~v9 + a2);
              if (v12 <= 3) {
                int v24 = v12;
              }
              else {
                int v24 = 4;
              }
              bzero(v21, v12);
              switch(v24)
              {
                case 2:
                  *(_WORD *)size_t v21 = v23;
                  break;
                case 3:
                  *(_WORD *)size_t v21 = v23;
                  v21[2] = BYTE2(v23);
                  break;
                case 4:
                  *(_DWORD *)size_t v21 = v23;
                  break;
                default:
                  *size_t v21 = v23;
                  break;
              }
            }
          }
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *size_t v20 = 0;
          *(_DWORD *)size_t v20 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *size_t v20 = a2;
        }
      }
      return;
  }
}

uint64_t sub_251072500()
{
  return swift_getWitnessTable();
}

uint64_t sub_25107251C()
{
  return swift_getWitnessTable();
}

id sub_251072538@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)(a1 + 8);
  *a2 = v2;
  return v2;
}

uint64_t sub_251072568@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_251071058(a1, a2);
}

uint64_t sub_251072588(uint64_t *a1)
{
  return sub_2510710FC(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void sub_2510725A4(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_251065E84(255, a3);
    unint64_t v4 = sub_2510BF808();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_2510725FC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_2510BF808();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t HKKeyValueDomain.getBool(for:)(uint64_t a1, uint64_t a2)
{
  return sub_25105F268(a1, a2, (uint64_t)&unk_2701FC448, (void (*)(void))sub_2510727CC);
}

void sub_251072678(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  swift_retain();
  uint64_t v7 = (void *)sub_2510BF228();
  int v8 = (void *)swift_allocObject();
  v8[2] = sub_2510674DC;
  v8[3] = v6;
  v8[4] = a3;
  v11[4] = sub_251075754;
  void v11[5] = v8;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1107296256;
  v11[2] = sub_25105A128;
  v11[3] = &block_descriptor_192;
  unsigned int v9 = _Block_copy(v11);
  id v10 = a3;
  swift_release();
  objc_msgSend(v10, sel_numberForKey_completion_, v7, v9);
  _Block_release(v9);
}

void sub_2510727C0(uint64_t a1, uint64_t a2)
{
  sub_251072678(a1, a2, *(void **)(v2 + 16));
}

void sub_2510727CC()
{
  if (!qword_26B211910)
  {
    sub_2510725FC(255, &qword_26B211990);
    sub_251067550();
    unint64_t v0 = sub_2510BEE18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B211910);
    }
  }
}

void sub_25107284C(void *a1, void *a2, void (*a3)(void *, BOOL))
{
  if (a1) {
    uint64_t v5 = objc_msgSend(a1, sel_BOOLValue);
  }
  else {
    uint64_t v5 = 2;
  }
  if (a2) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = (void *)v5;
  }
  id v7 = a2;
  a3(v6, a2 != 0);
  sub_251075760(v6, a2 != 0);
}

uint64_t HKKeyValueDomain.getData(for:)(uint64_t a1, uint64_t a2)
{
  return sub_25105F268(a1, a2, (uint64_t)&unk_2701FC470, (void (*)(void))sub_251072A64);
}

void sub_251072910(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  swift_retain();
  id v7 = (void *)sub_2510BF228();
  int v8 = (void *)swift_allocObject();
  v8[2] = sub_251075604;
  v8[3] = v6;
  v8[4] = a3;
  v11[4] = sub_251075724;
  void v11[5] = v8;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1107296256;
  v11[2] = sub_251072B78;
  v11[3] = &block_descriptor_183;
  unsigned int v9 = _Block_copy(v11);
  id v10 = a3;
  swift_release();
  objc_msgSend(v10, sel_dataForKey_completion_, v7, v9);
  _Block_release(v9);
}

void sub_251072A58(uint64_t a1, uint64_t a2)
{
  sub_251072910(a1, a2, *(void **)(v2 + 16));
}

void sub_251072A64()
{
  if (!qword_26B2121B0)
  {
    sub_2510725FC(255, &qword_26B2121A8);
    sub_251067550();
    unint64_t v0 = sub_2510BEE18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2121B0);
    }
  }
}

void sub_251072AE4(uint64_t a1, unint64_t a2, id a3, void (*a4)(id, unint64_t, BOOL))
{
  if (a3)
  {
    unint64_t v6 = 0;
    id v7 = a3;
  }
  else
  {
    unint64_t v6 = a2;
    id v7 = (id)a1;
    sub_251073A88(a1, a2);
  }
  id v8 = a3;
  a4(v7, v6, a3 != 0);
  sub_251075744(v7, v6, a3 != 0);
}

uint64_t sub_251072B78(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v6 = v4;
    uint64_t v4 = (void *)sub_2510BE898();
    unint64_t v8 = v7;
  }
  else
  {
    swift_retain();
    unint64_t v8 = 0xF000000000000000;
  }
  id v9 = a3;
  v5(v4, v8, a3);

  sub_251075730((uint64_t)v4, v8);
  return swift_release();
}

uint64_t HKKeyValueDomain.getNumber(for:)(uint64_t a1, uint64_t a2)
{
  return sub_25105F268(a1, a2, (uint64_t)&unk_2701FC4E8, (void (*)(void))sub_251072DB4);
}

void sub_251072C60(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  swift_retain();
  unint64_t v7 = (void *)sub_2510BF228();
  unint64_t v8 = (void *)swift_allocObject();
  v8[2] = sub_2510674DC;
  v8[3] = v6;
  v8[4] = a3;
  v11[4] = sub_2510756C0;
  void v11[5] = v8;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1107296256;
  v11[2] = sub_25105A128;
  v11[3] = &block_descriptor_159;
  id v9 = _Block_copy(v11);
  id v10 = a3;
  swift_release();
  objc_msgSend(v10, sel_numberForKey_completion_, v7, v9);
  _Block_release(v9);
}

void sub_251072DA8(uint64_t a1, uint64_t a2)
{
  sub_251072C60(a1, a2, *(void **)(v2 + 16));
}

void sub_251072DB4()
{
  if (!qword_269B1B4E8)
  {
    sub_25105F658(255, &qword_269B1B4E0, (void (*)(uint64_t))sub_251072E40);
    sub_251067550();
    unint64_t v0 = sub_2510BEE18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1B4E8);
    }
  }
}

unint64_t sub_251072E40()
{
  unint64_t result = qword_26B212178;
  if (!qword_26B212178)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B212178);
  }
  return result;
}

void sub_251072E80(void *a1, id a2, void (*a3)(id, BOOL))
{
  id v5 = a2;
  if (!a2)
  {
    id v7 = a1;
    id v5 = a1;
  }
  id v8 = a2;
  a3(v5, a2 != 0);
  sub_2510756CC(v5);
}

uint64_t HKKeyValueDomain.getPropertyListValue(for:)(uint64_t a1, uint64_t a2)
{
  return sub_25105F268(a1, a2, (uint64_t)&unk_2701FC510, (void (*)(void))sub_251073058);
}

void sub_251072F38(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (void *)sub_2510BF228();
  id v7 = (void *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v10[4] = sub_25107562C;
  v10[5] = v7;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1107296256;
  void v10[2] = sub_25107318C;
  v10[3] = &block_descriptor_150;
  id v8 = _Block_copy(v10);
  swift_retain();
  id v9 = a3;
  swift_release();
  objc_msgSend(v9, sel_propertyListValueForKey_completion_, v6, v8);
  _Block_release(v8);
}

void sub_25107304C(uint64_t a1, uint64_t a2)
{
  sub_251072F38(a1, a2, *(void **)(v2 + 16));
}

void sub_251073058()
{
  if (!qword_26B211920)
  {
    sub_2510725FC(255, (unint64_t *)&qword_26B2121A0);
    sub_251067550();
    unint64_t v0 = sub_2510BEE18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B211920);
    }
  }
}

uint64_t sub_2510730DC(uint64_t a1, id a2, void (*a3)(void *))
{
  if (a2) {
    v7[0] = a2;
  }
  else {
    sub_25105F404(a1, (uint64_t)v7, (uint64_t)&qword_26B2121A0, MEMORY[0x263F8EE58] + 8, (uint64_t (*)(void, uint64_t, uint64_t))sub_2510725FC);
  }
  BOOL v8 = a2 != 0;
  id v5 = a2;
  a3(v7);
  return sub_25105F83C((uint64_t)v7, (uint64_t (*)(void))sub_251075638);
}

uint64_t sub_25107318C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void (**)(long long *, void *))(a1 + 32);
  if (a2)
  {
    *((void *)&v9 + 1) = swift_getObjectType();
    *(void *)&long long v8 = a2;
  }
  else
  {
    long long v8 = 0u;
    long long v9 = 0u;
  }
  swift_retain();
  swift_unknownObjectRetain();
  id v6 = a3;
  v5(&v8, a3);
  swift_release();

  return sub_25105F5F8((uint64_t)&v8, (uint64_t)&qword_26B2121A0, MEMORY[0x263F8EE58] + 8, (uint64_t (*)(void))sub_2510725FC);
}

uint64_t HKKeyValueDomain.getString(for:)(uint64_t a1, uint64_t a2)
{
  return sub_25105F268(a1, a2, (uint64_t)&unk_2701FC538, (void (*)(void))sub_2510733D0);
}

void sub_25107327C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  swift_retain();
  id v7 = (void *)sub_2510BF228();
  long long v8 = (void *)swift_allocObject();
  v8[2] = sub_251075604;
  v8[3] = v6;
  v8[4] = a3;
  v11[4] = sub_25107560C;
  void v11[5] = v8;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1107296256;
  v11[2] = sub_2510734E8;
  v11[3] = &block_descriptor_144;
  long long v9 = _Block_copy(v11);
  id v10 = a3;
  swift_release();
  objc_msgSend(v10, sel_stringForKey_completion_, v7, v9);
  _Block_release(v9);
}

void sub_2510733C4(uint64_t a1, uint64_t a2)
{
  sub_25107327C(a1, a2, *(void **)(v2 + 16));
}

void sub_2510733D0()
{
  if (!qword_26B212E18)
  {
    sub_2510725FC(255, (unint64_t *)&qword_26B212E20);
    sub_251067550();
    unint64_t v0 = sub_2510BEE18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212E18);
    }
  }
}

void sub_251073450(void *a1, uint64_t a2, id a3, void (*a4)(id, uint64_t, BOOL))
{
  if (a3)
  {
    uint64_t v6 = 0;
    id v7 = a3;
  }
  else
  {
    uint64_t v6 = a2;
    id v7 = a1;
    swift_bridgeObjectRetain();
  }
  id v8 = a3;
  a4(v7, v6, a3 != 0);
  sub_251075618(v7, v6, a3 != 0);
}

uint64_t sub_2510734E8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v5 = sub_2510BF258();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  swift_retain();
  id v8 = a3;
  v4(v5, v7, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_251073580()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t HKKeyValueDomain.setBool(_:for:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v3;
  *(unsigned char *)(v7 + 24) = a1;
  *(void *)(v7 + 32) = a2;
  *(void *)(v7 + 40) = a3;
  sub_251068414();
  swift_allocObject();
  id v8 = v3;
  swift_bridgeObjectRetain();
  return sub_2510BEE28();
}

uint64_t sub_251073658(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = sub_251075800;
  v7[3] = v6;
  void v7[4] = a3;
  swift_retain();
  id v8 = a3;
  sub_2510BF748();
  return swift_release();
}

uint64_t sub_251073740()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_251073780(uint64_t a1, uint64_t a2)
{
  return sub_251073658(a1, a2, *(void **)(v2 + 16));
}

uint64_t HKKeyValueDomain.setData(_:for:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v9 = (void *)swift_allocObject();
  id v9[2] = v4;
  v9[3] = a1;
  v9[4] = a2;
  void v9[5] = a3;
  void v9[6] = a4;
  sub_251068414();
  swift_allocObject();
  id v10 = v4;
  sub_251073A88(a1, a2);
  swift_bridgeObjectRetain();
  return sub_2510BEE28();
}

void sub_251073840(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  swift_retain();
  if (a5 >> 60 == 15) {
    id v10 = 0;
  }
  else {
    id v10 = (void *)sub_2510BE888();
  }
  uint64_t v11 = (void *)sub_2510BF228();
  size_t v12 = (void *)swift_allocObject();
  v12[2] = sub_251075800;
  uint64_t v12[3] = v9;
  v12[4] = a3;
  v15[4] = sub_251075544;
  v15[5] = v12;
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 1107296256;
  void v15[2] = sub_251055F18;
  v15[3] = &block_descriptor_119;
  size_t v13 = _Block_copy(v15);
  id v14 = a3;
  swift_release();
  objc_msgSend(v14, sel_setData_forKey_completion_, v10, v11, v13);
  _Block_release(v13);
}

uint64_t sub_2510739C0()
{
  unint64_t v1 = *(void *)(v0 + 32);
  if (v1 >> 60 != 15) {
    sub_251073A18(*(void *)(v0 + 24), v1);
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_251073A18(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_251073A70(uint64_t a1, uint64_t a2)
{
  return sub_251074C44(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_251073840);
}

uint64_t sub_251073A88(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_251073A9C(a1, a2);
  }
  return a1;
}

uint64_t sub_251073A9C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t HKKeyValueDomain.setDate(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = MEMORY[0x263F07490];
  sub_25105F658(0, (unint64_t *)&qword_26B212E58, MEMORY[0x263F07490]);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8 - 8);
  size_t v12 = (char *)&v18 - v11;
  sub_25105F404(a1, (uint64_t)&v18 - v11, (uint64_t)&qword_26B212E58, v7, (uint64_t (*)(void, uint64_t, uint64_t))sub_25105F658);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v3;
  sub_25107493C((uint64_t)v12, v14 + v13, (uint64_t)&qword_26B212E58, v7, (uint64_t (*)(void, uint64_t, uint64_t))sub_25105F658);
  unsigned int v15 = (void *)(v14 + ((v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8));
  *unsigned int v15 = a2;
  v15[1] = a3;
  sub_251068414();
  swift_allocObject();
  id v16 = v3;
  swift_bridgeObjectRetain();
  return sub_2510BEE28();
}

void sub_251073C98(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = MEMORY[0x263F07490];
  sub_25105F658(0, (unint64_t *)&qword_26B212E58, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)aBlock - v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  sub_25105F404(a4, (uint64_t)v11, (uint64_t)&qword_26B212E58, v8, (uint64_t (*)(void, uint64_t, uint64_t))sub_25105F658);
  uint64_t v13 = sub_2510BE908();
  uint64_t v14 = *(void *)(v13 - 8);
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13);
  swift_retain();
  unsigned int v15 = 0;
  if (a1 != 1)
  {
    unsigned int v15 = (void *)sub_2510BE8D8();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
  }
  id v16 = (void *)sub_2510BF228();
  unsigned int v17 = (void *)swift_allocObject();
  v17[2] = sub_251075800;
  v17[3] = v12;
  v17[4] = a3;
  aBlock[4] = sub_251075544;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_251055F18;
  aBlock[3] = &block_descriptor_109;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = a3;
  swift_release();
  objc_msgSend(v19, sel_setDate_forKey_completion_, v15, v16, v18);
  _Block_release(v18);
}

uint64_t sub_251073F10()
{
  sub_25105F658(0, (unint64_t *)&qword_26B212E58, MEMORY[0x263F07490]);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);

  uint64_t v5 = sub_2510BE908();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

void sub_251074070(uint64_t a1, uint64_t a2)
{
  sub_25105F658(0, (unint64_t *)&qword_26B212E58, MEMORY[0x263F07490]);
  uint64_t v6 = *(void **)(v2 + 16);
  uint64_t v7 = v2
     + ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80));
  sub_251073C98(a1, a2, v6, v7);
}

uint64_t HKKeyValueDomain.setInteger(_:for:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v4;
  *(void *)(v9 + 24) = a1;
  *(unsigned char *)(v9 + 32) = a2 & 1;
  *(void *)(v9 + 40) = a3;
  *(void *)(v9 + 48) = a4;
  sub_251068414();
  swift_allocObject();
  id v10 = v4;
  swift_bridgeObjectRetain();
  return sub_2510BEE28();
}

uint64_t sub_2510741E8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = sub_251075800;
  v7[3] = v6;
  void v7[4] = a3;
  swift_retain();
  id v8 = a3;
  sub_2510BF6D8();
  return swift_release();
}

uint64_t sub_2510742D8()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_251074318(uint64_t a1, uint64_t a2)
{
  return sub_2510741E8(a1, a2, *(void **)(v2 + 16));
}

uint64_t HKKeyValueDomain.setNumber(_:for:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a1;
  void v7[4] = a2;
  void v7[5] = a3;
  sub_251068414();
  swift_allocObject();
  id v8 = a1;
  swift_bridgeObjectRetain();
  id v9 = v3;
  return sub_2510BEE28();
}

void sub_2510743C8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  swift_retain();
  id v9 = (void *)sub_2510BF228();
  id v10 = (void *)swift_allocObject();
  void v10[2] = sub_251075800;
  v10[3] = v8;
  v10[4] = a3;
  v13[4] = sub_251075544;
  void v13[5] = v10;
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1107296256;
  v13[2] = sub_251055F18;
  v13[3] = &block_descriptor_92;
  uint64_t v11 = _Block_copy(v13);
  id v12 = a3;
  swift_release();
  objc_msgSend(v12, sel_setNumber_forKey_completion_, a4, v9, v11);
  _Block_release(v11);
}

uint64_t sub_25107451C()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void sub_251074564(uint64_t a1, uint64_t a2)
{
  sub_2510743C8(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t HKKeyValueDomain.setPropertyListValue(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = MEMORY[0x263F8EE58] + 8;
  sub_25105F404(a1, (uint64_t)v10, (uint64_t)&qword_26B2121A0, MEMORY[0x263F8EE58] + 8, (uint64_t (*)(void, uint64_t, uint64_t))sub_2510725FC);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v3;
  sub_25107493C((uint64_t)v10, (uint64_t)(v7 + 3), (uint64_t)&qword_26B2121A0, v6, (uint64_t (*)(void, uint64_t, uint64_t))sub_2510725FC);
  v7[7] = a2;
  v7[8] = a3;
  sub_251068414();
  swift_allocObject();
  id v8 = v3;
  swift_bridgeObjectRetain();
  return sub_2510BEE28();
}

void sub_25107466C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  sub_25105F404(a4, (uint64_t)aBlock, (uint64_t)&qword_26B2121A0, MEMORY[0x263F8EE58] + 8, (uint64_t (*)(void, uint64_t, uint64_t))sub_2510725FC);
  id v9 = v20;
  if (v20)
  {
    id v10 = __swift_project_boxed_opaque_existential_0(aBlock, (uint64_t)v20);
    uint64_t v11 = *(v9 - 1);
    MEMORY[0x270FA5388](v10);
    uint64_t v13 = (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v11 + 16))(v13);
    swift_retain();
    uint64_t v14 = sub_2510BFC18();
    (*(void (**)(char *, void *))(v11 + 8))(v13, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  }
  else
  {
    swift_retain();
    uint64_t v14 = 0;
  }
  unsigned int v15 = (void *)sub_2510BF228();
  id v16 = (void *)swift_allocObject();
  v16[2] = sub_251075800;
  v16[3] = v8;
  v16[4] = a3;
  size_t v21 = sub_251075544;
  int v22 = v16;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_251055F18;
  size_t v20 = &block_descriptor_82;
  unsigned int v17 = _Block_copy(aBlock);
  id v18 = a3;
  swift_release();
  objc_msgSend(v18, sel_setPropertyListValue_forKey_completion_, v14, v15, v17);
  _Block_release(v17);
  swift_unknownObjectRelease();
}

uint64_t sub_2510748EC()
{
  if (*(void *)(v0 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_25107493C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

void sub_2510749AC(uint64_t a1, uint64_t a2)
{
  sub_25107466C(a1, a2, *(void **)(v2 + 16), v2 + 24);
}

uint64_t HKKeyValueDomain.setString(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = (void *)swift_allocObject();
  id v9[2] = v4;
  v9[3] = a1;
  v9[4] = a2;
  void v9[5] = a3;
  void v9[6] = a4;
  sub_251068414();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = v4;
  return sub_2510BEE28();
}

void sub_251074A68(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  swift_retain();
  if (a5) {
    a5 = (void *)sub_2510BF228();
  }
  id v10 = (void *)sub_2510BF228();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = sub_251075800;
  v11[3] = v9;
  v11[4] = a3;
  v14[4] = sub_251075544;
  v14[5] = v11;
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 1107296256;
  v14[2] = sub_251055F18;
  v14[3] = &block_descriptor_72;
  uint64_t v12 = _Block_copy(v14);
  id v13 = a3;
  swift_release();
  objc_msgSend(v13, sel_setString_forKey_completion_, a5, v10, v12);
  _Block_release(v12);
}

uint64_t sub_251074BE4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_251074C2C(uint64_t a1, uint64_t a2)
{
  return sub_251074C44(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_251074A68);
}

uint64_t sub_251074C44(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

uint64_t HKKeyValueDomain.removeValues(for:)(uint64_t a1)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = a1;
  sub_251068414();
  swift_allocObject();
  id v4 = v1;
  swift_bridgeObjectRetain();
  return sub_2510BEE28();
}

void sub_251074CE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  swift_retain();
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_2510AC150(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)sub_2510BF518();
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)swift_allocObject();
  id v9[2] = sub_2510674D0;
  v9[3] = v6;
  v9[4] = a3;
  v12[4] = sub_251075544;
  v12[5] = v9;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1107296256;
  v12[2] = sub_251055F18;
  uint64_t v12[3] = &block_descriptor_3;
  id v10 = _Block_copy(v12);
  id v11 = a3;
  swift_release();
  objc_msgSend(v11, sel_removeValuesForKeys_completion_, v8, v10);
  _Block_release(v10);
}

void sub_251074E54(uint64_t a1, uint64_t a2)
{
  sub_251074CE4(a1, a2, *(void **)(v2 + 16));
}

uint64_t HKKeyValueDomain.removeAllValues()()
{
  sub_2510751EC();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25107531C();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v16 = v6;
  uint64_t v17 = v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(swift_allocObject() + 16) = v0;
  sub_251068480();
  swift_allocObject();
  id v10 = v0;
  uint64_t v18 = sub_2510BEE28();
  sub_2510752B4(0, &qword_269B1B4F8, MEMORY[0x263F8CFE0]);
  sub_251075408(&qword_269B1B500, (void (*)(uint64_t))sub_251068480);
  sub_2510BEE78();
  swift_release();
  *(void *)(swift_allocObject() + 16) = v10;
  id v11 = v10;
  sub_2510BED78();
  sub_251068414();
  sub_251075408(&qword_269B1B510, (void (*)(uint64_t))sub_2510751EC);
  sub_251075408(&qword_26B211928, (void (*)(uint64_t))sub_251068414);
  sub_2510BEEB8();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_251075408(qword_269B1B518, (void (*)(uint64_t))sub_25107531C);
  uint64_t v12 = v16;
  uint64_t v13 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v12);
  return v13;
}

void sub_2510751EC()
{
  if (!qword_269B1B4F0)
  {
    sub_251068480();
    sub_2510752B4(255, &qword_269B1B4F8, MEMORY[0x263F8CFE0]);
    sub_251075408(&qword_269B1B500, (void (*)(uint64_t))sub_251068480);
    unint64_t v0 = sub_2510BEC98();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1B4F0);
    }
  }
}

void sub_2510752B4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void, uint64_t, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8D310], MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D320]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_25107531C()
{
  if (!qword_269B1B508)
  {
    sub_251068414();
    sub_2510751EC();
    sub_251075408(&qword_26B211928, (void (*)(uint64_t))sub_251068414);
    sub_251075408(&qword_269B1B510, (void (*)(uint64_t))sub_2510751EC);
    unint64_t v0 = sub_2510BECC8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1B508);
    }
  }
}

uint64_t sub_251075408(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_251075450@<X0>(void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_2510AFD78(v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = v5;
  sub_251068414();
  swift_allocObject();
  id v7 = a1;
  uint64_t result = sub_2510BEE28();
  *a2 = result;
  return result;
}

uint64_t sub_2510754F4@<X0>(uint64_t *a1@<X8>)
{
  return sub_251075450(*(void **)(v1 + 16), a1);
}

uint64_t objectdestroy_44Tm()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_251075558()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_25107559C(int a1, id a2)
{
  uint64_t v4 = *(void (**)(id, BOOL))(v2 + 16);
  BOOL v5 = a2 != 0;
  id v6 = a2;
  v4(a2, v5);
  sub_251075760(a2, v5);
}

void sub_25107560C(void *a1, uint64_t a2, void *a3)
{
  sub_251073450(a1, a2, a3, *(void (**)(id, uint64_t, BOOL))(v3 + 16));
}

void sub_251075618(void *a1, uint64_t a2, char a3)
{
  if (a3) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_25107562C(uint64_t a1, void *a2)
{
  return sub_2510730DC(a1, a2, *(void (**)(void *))(v2 + 16));
}

void sub_251075638()
{
  if (!qword_26B212198)
  {
    sub_2510725FC(255, (unint64_t *)&qword_26B2121A0);
    sub_251067550();
    unint64_t v0 = sub_2510BFD68();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212198);
    }
  }
}

void sub_2510756C0(void *a1, void *a2)
{
  sub_251072E80(a1, a2, *(void (**)(id, BOOL))(v2 + 16));
}

void sub_2510756CC(id a1)
{
}

uint64_t sub_2510756E0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = *(uint64_t (**)(void *))(v3 + 16);
  v6[0] = a1;
  v6[1] = a2;
  char v7 = a3 & 1;
  return v4(v6);
}

void sub_251075724(uint64_t a1, unint64_t a2, void *a3)
{
  sub_251072AE4(a1, a2, a3, *(void (**)(id, unint64_t, BOOL))(v3 + 16));
}

uint64_t sub_251075730(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_251073A18(a1, a2);
  }
  return a1;
}

void sub_251075744(id a1, unint64_t a2, char a3)
{
  if (a3) {

  }
  else {
    sub_251075730((uint64_t)a1, a2);
  }
}

void sub_251075754(void *a1, void *a2)
{
  sub_25107284C(a1, a2, *(void (**)(void *, BOOL))(v2 + 16));
}

void sub_251075760(id a1, char a2)
{
  if (a2) {
}
  }

uint64_t sub_251075804()
{
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t sub_25107580C(uint64_t result)
{
  *(unsigned char *)(v1 + 25) = result;
  return result;
}

uint64_t sub_251075814@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 128);
  swift_beginAccess();
  sub_2510BED28();
  uint64_t v4 = sub_2510BF808();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_2510758E4(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 128);
  swift_beginAccess();
  sub_2510BED28();
  uint64_t v4 = sub_2510BF808();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t sub_2510759BC(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 144);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t sub_251075A68(uint64_t a1)
{
  uint64_t v3 = *v1;
  sub_251077C50(a1);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8);
  return v4(a1);
}

void (*sub_251075AE4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  char v7 = malloc(v6);
  v3[4] = v7;
  sub_251068D88((uint64_t)v7);
  return sub_251075BB8;
}

void sub_251075BB8(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    sub_251077C50((uint64_t)v3);
    char v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    sub_251077C50(*(void *)(*(void *)a1 + 32));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t sub_251075C94(void *a1)
{
  uint64_t v3 = (os_unfair_lock_s *)(v1[2] + 16);
  os_unfair_lock_lock(v3);
  sub_251077D44((uint64_t)a1, (uint64_t)v10);
  uint64_t v4 = (void **)((char *)v1 + *(void *)(*v1 + 152));
  swift_beginAccess();
  uint64_t v5 = *v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  void *v4 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v5 = sub_2510773C8(0, v5[2] + 1, 1, v5);
    void *v4 = v5;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t v5 = sub_2510773C8((void *)(v7 > 1), v8 + 1, 1, v5);
    void *v4 = v5;
  }
  v5[2] = v8 + 1;
  sub_251077DA8(v10, (uint64_t)&v5[5 * v8 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v3);
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_2510BED78();
  return sub_2510BED98();
}

void sub_251075DCC(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v11 - v5;
  unint64_t v7 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  if (*(unsigned char *)(v1 + 25) == 1)
  {
    uint64_t v8 = v1 + *(void *)(*(void *)v1 + 136);
    swift_beginAccess();
    uint64_t v9 = *(void *)v8;
    LOBYTE(v8) = *(unsigned char *)(v8 + 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
    sub_251068CF0(v9, v8);
    sub_2510759BC((uint64_t)v6);
    os_unfair_lock_unlock(v7);
    MEMORY[0x270FA5388](v10);
    *(&v11 - 2) = a1;
    sub_25107CBA0((uint64_t)sub_251077DC0, (uint64_t)(&v11 - 4), v9, v8);
    sub_2510606A0(v9, v8);
  }
  else
  {
    os_unfair_lock_unlock(v7);
  }
}

void sub_251075FDC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_2510BED28();
  uint64_t v5 = sub_2510BF808();
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = &v14[-v6];
  uint64_t v8 = (os_unfair_lock_s *)(*(void *)(v2 + 16) + 16);
  os_unfair_lock_lock(v8);
  if (*(unsigned char *)(v2 + 25) == 1)
  {
    *(unsigned char *)(v2 + 25) = 0;
    uint64_t v9 = *(void *)(v4 - 8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v7, a1, v4);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v4);
    sub_2510758E4((uint64_t)v7);
    uint64_t v10 = v2 + *(void *)(*(void *)v2 + 136);
    swift_beginAccess();
    uint64_t v11 = *(void *)v10;
    LOBYTE(v9) = *(unsigned char *)(v10 + 8);
    swift_beginAccess();
    sub_251068CF0(v11, v9);
    type metadata accessor for StreamConduitList();
    uint64_t v12 = sub_25107CCE8();
    (*(void (**)(uint64_t))(*(void *)v2 + 400))(v12);
    os_unfair_lock_unlock(v8);
    MEMORY[0x270FA5388](v13);
    *(void *)&v14[-16] = a1;
    sub_25107CBA0((uint64_t)sub_251077E14, (uint64_t)&v14[-32], v11, v9);
    sub_2510606A0(v11, v9);
  }
  else
  {
    os_unfair_lock_unlock(v8);
  }
}

void sub_2510762EC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(*(void *)v2 + 88);
  uint64_t v5 = sub_2510BED28();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v10 - v7;
  uint64_t v9 = (os_unfair_lock_s *)(*(void *)(v2 + 16) + 16);
  os_unfair_lock_lock(v9);
  if (*(unsigned char *)(v2 + 25) == 1)
  {
    swift_beginAccess();
    type metadata accessor for StreamConduitList();
    sub_25107CD14(a1);
    swift_endAccess();
    os_unfair_lock_unlock(v9);
    if (*(unsigned char *)(v2 + 24) == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v8, 1, 1, v4);
      sub_251075FDC((uint64_t)v8);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  else
  {
    os_unfair_lock_unlock(v9);
  }
}

BOOL static StreamPublisher.DownstreamDisconnectBehaviour.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t StreamPublisher.DownstreamDisconnectBehaviour.hash(into:)()
{
  return sub_2510BFD18();
}

uint64_t StreamPublisher.DownstreamDisconnectBehaviour.hashValue.getter()
{
  return sub_2510BFD28();
}

uint64_t sub_2510765B8()
{
  return sub_2510BFD28();
}

uint64_t StreamPublisher.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  StreamPublisher.init(_:)(a1);
  return v2;
}

uint64_t *StreamPublisher.init(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  sub_25105ECA4(0, (unint64_t *)&qword_26B212DE8, type metadata accessor for os_unfair_lock_s);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = 0;
  v1[2] = v4;
  *((unsigned char *)v1 + 25) = 1;
  uint64_t v5 = (uint64_t)v1 + *(void *)(v3 + 128);
  uint64_t v6 = sub_2510BED28();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = (uint64_t)v1 + *(void *)(*v1 + 136);
  uint64_t v8 = *(void *)(v3 + 80);
  *(void *)uint64_t v7 = sub_25107CB94();
  *(unsigned char *)(v7 + 8) = v9;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 152)) = MEMORY[0x263F8EE78];
  *((unsigned char *)v1 + *(void *)(*v1 + 160)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))((uint64_t)v1 + *(void *)(*v1 + 144), a1, v8);
  *((unsigned char *)v1 + 24) = 0;
  return v1;
}

uint64_t *StreamPublisher.__allocating_init(_:onDisconnect:)(uint64_t a1)
{
  return _s18HealthKitAdditions15StreamPublisherC_12onDisconnectACyxq_Gx_AC010DownstreamG9BehaviourOyxq__Gtcfc_0(a1);
}

uint64_t *StreamPublisher.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = (uint64_t)v0 + *(void *)(*v0 + 152);
  swift_beginAccess();
  uint64_t v4 = *(void *)(*(void *)v3 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)v3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_251077D44(v5, (uint64_t)v9);
      __swift_project_boxed_opaque_existential_0(v9, v9[3]);
      sub_2510BED18();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      v5 += 40;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t v6 = (uint64_t)v0 + *(void *)(*v0 + 128);
  sub_2510BED28();
  uint64_t v7 = sub_2510BF808();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  sub_2510606A0(*(uint64_t *)((char *)v1 + *(void *)(*v1 + 136)), *((unsigned char *)v1 + *(void *)(*v1 + 136) + 8));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 80) - 8) + 8))((uint64_t)v1 + *(void *)(*v1 + 144));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t StreamPublisher.__deallocating_deinit()
{
  StreamPublisher.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_251076A68(uint64_t a1, uint64_t a2)
{
  return sub_25105EA00(a1, a2);
}

void sub_251076AB4()
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(*(void *)(v0 + 16) + 16));
}

void sub_251076AC0(uint64_t a1)
{
  uint64_t v2 = v1;
  v19[0] = *v1;
  uint64_t v3 = v19[0];
  v19[1] = a1;
  uint64_t v4 = *(void *)(v19[0] + 176);
  uint64_t v5 = sub_2510BF808();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  char v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)v19 - v11;
  uint64_t v13 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)v19 - v14;
  uint64_t v16 = (os_unfair_lock_s *)(*(void *)((char *)v2 + *(void *)(v3 + 216)) + 16);
  os_unfair_lock_lock(v16);
  uint64_t v17 = (char *)v2 + *(void *)(*v2 + 200);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v12, v17, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    os_unfair_lock_unlock(v16);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v4);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, 1, 1, v4);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v17, v9, v5);
    swift_endAccess();
    uint64_t v18 = v2[2];
    v2[2] = 0;
    os_unfair_lock_unlock(v16);
    if (v18)
    {
      swift_retain();
      sub_2510762EC((uint64_t)v2);
      swift_release();
    }
    os_unfair_recursive_lock_lock_with_options();
    sub_2510BECE8();
    os_unfair_recursive_lock_unlock();
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v4);
  }
}

void sub_251076E18()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 176);
  uint64_t v3 = sub_2510BF808();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  char v9 = &v15[-v8];
  uint64_t v10 = (os_unfair_lock_s *)(*(void *)((char *)v0 + *(void *)(v1 + 216)) + 16);
  os_unfair_lock_lock(v10);
  uint64_t v11 = (char *)v0 + *(void *)(*v0 + 200);
  swift_beginAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v4 + 16))(v9, v11, v3);
  uint64_t v12 = *(void *)(v2 - 8);
  int v13 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v2);
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v9, v3);
  if (v13 == 1)
  {
    os_unfair_lock_unlock(v10);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v7, 1, 1, v2);
    swift_beginAccess();
    (*(void (**)(char *, unsigned char *, uint64_t))(v4 + 40))(v11, v7, v3);
    swift_endAccess();
    uint64_t v14 = v0[2];
    v0[2] = 0;
    os_unfair_lock_unlock(v10);
    if (v14)
    {
      swift_retain();
      sub_2510762EC((uint64_t)v0);
      swift_release_n();
    }
  }
}

uint64_t sub_25107708C()
{
  swift_release();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 200);
  uint64_t v2 = sub_2510BF808();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return swift_release();
}

uint64_t sub_25107715C()
{
  uint64_t v0 = sub_25105ED04();
  swift_release();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 200);
  uint64_t v2 = sub_2510BF808();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_251077234()
{
  sub_25107715C();
  return swift_deallocClassInstance();
}

void *sub_251077294(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_2510782A8(0, &qword_269B1B5A0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      long long v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_25107789C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_2510773C8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_2510785F8(0, &qword_269B1B5B8, (void (*)(uint64_t))sub_25107864C);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      long long v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_2510782F0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_251077504(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_251077544(a1, a2, a3, a4, &qword_26B212498, type metadata accessor for Label);
}

void *sub_251077524(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_251077544(a1, a2, a3, a4, qword_26B2124A0, type metadata accessor for __HKStateOfMindDomain);
}

void *sub_251077544(void *result, int64_t a2, char a3, void *a4, unint64_t *a5, void (*a6)(uint64_t))
{
  char v7 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v9 = a2;
    goto LABEL_8;
  }
  unint64_t v8 = a4[3];
  uint64_t v9 = v8 >> 1;
  if ((uint64_t)(v8 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v9 + 0x4000000000000000 >= 0)
  {
    uint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v9 = a2;
    }
LABEL_8:
    uint64_t v10 = a4[2];
    if (v9 <= v10) {
      uint64_t v11 = a4[2];
    }
    else {
      uint64_t v11 = v9;
    }
    if (v11)
    {
      sub_2510785F8(0, a5, a6);
      uint64_t v12 = (void *)swift_allocObject();
      int64_t v13 = _swift_stdlib_malloc_size(v12);
      uint64_t v14 = v13 - 32;
      if (v13 < 32) {
        uint64_t v14 = v13 - 25;
      }
      v12[2] = v10;
      uint64_t v12[3] = 2 * (v14 >> 3);
      uint64_t v15 = v12 + 4;
      if (v7) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v12 = (void *)MEMORY[0x263F8EE78];
      uint64_t v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[v10 + 4]) {
          memmove(v15, a4 + 4, 8 * v10);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_251077994(0, v10, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

void *sub_251077658(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_2510785F8(0, &qword_269B1B5B0, type metadata accessor for HKFeatureAvailabilityRequirementIdentifier);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      long long v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      int64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      int64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2510784F0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_251077780(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_2510782A8(0, &qword_269B1B5A8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      long long v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      int64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      int64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2510783FC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_25107789C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2510BFB58();
  __break(1u);
  return result;
}

char *sub_251077994(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_2510BFB58();
  __break(1u);
  return result;
}

uint64_t *_s18HealthKitAdditions15StreamPublisherC_12onDisconnectACyxq_Gx_AC010DownstreamG9BehaviourOyxq__Gtcfc_0(uint64_t a1)
{
  uint64_t v3 = *v1;
  sub_25105ECA4(0, (unint64_t *)&qword_26B212DE8, type metadata accessor for os_unfair_lock_s);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = 0;
  v1[2] = v4;
  *((unsigned char *)v1 + 25) = 1;
  uint64_t v5 = (uint64_t)v1 + *(void *)(v3 + 128);
  uint64_t v6 = sub_2510BED28();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = (uint64_t)v1 + *(void *)(*v1 + 136);
  uint64_t v8 = *(void *)(v3 + 80);
  *(void *)uint64_t v7 = sub_25107CB94();
  *(unsigned char *)(v7 + 8) = v9;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 152)) = MEMORY[0x263F8EE78];
  *((unsigned char *)v1 + *(void *)(*v1 + 160)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))((uint64_t)v1 + *(void *)(*v1 + 144), a1, v8);
  *((unsigned char *)v1 + 24) = 1;
  return v1;
}

void sub_251077C50(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v8 - v5;
  uint64_t v7 = (os_unfair_lock_s *)(v1[2] + 16);
  os_unfair_lock_lock(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  sub_2510759BC((uint64_t)v6);
  os_unfair_lock_unlock(v7);
  sub_251075DCC(a1);
}

uint64_t sub_251077D44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_251077DA8(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_251077DC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 104))(*(void *)(v1 + 16));
}

uint64_t sub_251077E14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))(*(void *)(v1 + 16));
}

uint64_t sub_251077E68()
{
  return swift_getWitnessTable();
}

uint64_t sub_251077E84()
{
  return swift_getWitnessTable();
}

void sub_251077EA0(uint64_t a1@<X8>)
{
}

void sub_251077EC4(uint64_t a1)
{
}

uint64_t sub_251077EE8()
{
  return 24;
}

__n128 sub_251077EF4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t method lookup function for StreamPublisher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for StreamPublisher);
}

uint64_t dispatch thunk of StreamPublisher.value.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of StreamPublisher.value.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of StreamPublisher.value.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of StreamPublisher.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t dispatch thunk of StreamPublisher.__allocating_init(_:onDisconnect:)()
{
  return (*(uint64_t (**)(void))(v0 + 344))();
}

uint64_t dispatch thunk of StreamPublisher.send(subscription:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of StreamPublisher.receive<A>(subscriber:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of StreamPublisher.send(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of StreamPublisher.send(completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of StreamPublisher.locked_didTransitionToDownstreamsConnected()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of StreamPublisher.locked_didTransitionToCompleted()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

unsigned char *sub_2510780D4(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2510781A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for StreamPublisher.DownstreamDisconnectBehaviour()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_2510781E0()
{
  uint64_t result = sub_2510BF808();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_2510782A8(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_2510BFC08();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_2510782F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_25107864C();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2510BFB58();
  __break(1u);
  return result;
}

uint64_t sub_2510783FC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2510BFB58();
  __break(1u);
  return result;
}

uint64_t sub_2510784F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_2510BFB58();
  __break(1u);
  return result;
}

void sub_2510785F8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_2510BFC08();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_25107864C()
{
  unint64_t result = qword_269B1B5C0;
  if (!qword_269B1B5C0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_269B1B5C0);
  }
  return result;
}

uint64_t HKHealthStore.SamplePublisher.configuration.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = v1[4];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id HKHealthStore.SamplePublisher.healthStore.getter()
{
  return *(id *)(v0 + 40);
}

unint64_t sub_251078710(uint64_t a1)
{
  unint64_t result = sub_251078738();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_251078738()
{
  unint64_t result = qword_26B2119B0;
  if (!qword_26B2119B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2119B0);
  }
  return result;
}

void *_s15SamplePublisherVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[5];
  uint64_t v5 = (void *)a1[5];
  a1[5] = v4;
  id v6 = v4;

  return a1;
}

uint64_t _s15SamplePublisherVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  return a1;
}

uint64_t _s15SamplePublisherVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s15SamplePublisherVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *_s15SamplePublisherV13ConfigurationVwcp(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s15SamplePublisherV13ConfigurationVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s15SamplePublisherV13ConfigurationVwta(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for HKHealthStore.SamplePublisher.Configuration()
{
  return &type metadata for HKHealthStore.SamplePublisher.Configuration;
}

uint64_t sub_251078A6C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t HKSampleCountQueryDescriptor.samplePredicates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_251078AAC()
{
  uint64_t Descriptor = type metadata accessor for HKSampleCountQueryDescriptor();
  uint64_t v1 = swift_bridgeObjectRetain();
  return HKSampleCountQueryDescriptor.samplePredicates.setter(v1, Descriptor);
}

uint64_t HKSampleCountQueryDescriptor.samplePredicates.setter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  return sub_251078B48(a2);
}

uint64_t sub_251078B48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v6 = *v5;
  (*(void (**)(char *))(v2 + 16))(v4);
  uint64_t v7 = *((void *)v4 + 1);
  uint64_t v8 = (uint64_t (**)(char *, uint64_t))(v2 + 8);
  if (v6 == 1)
  {
    uint64_t v13 = *((void *)v4 + 1);
    sub_2510BEFD8();
    sub_2510BF488();
    swift_getWitnessTable();
    char v9 = sub_2510BF5F8();
    uint64_t result = (*v8)(v4, a1);
    if (v9) {
      return result;
    }
    __break(1u);
  }
  uint64_t v13 = v7;
  sub_2510BEFD8();
  sub_2510BF488();
  swift_getWitnessTable();
  char v11 = sub_2510BF5F8();
  uint64_t result = (*v8)(v4, a1);
  if (v11) {
    __break(1u);
  }
  return result;
}

uint64_t *(*HKSampleCountQueryDescriptor.samplePredicates.modify(void *a1, uint64_t a2))(uint64_t *result, char a2)
{
  *a1 = a2;
  a1[1] = v2;
  return sub_251078D20;
}

uint64_t *sub_251078D20(uint64_t *result, char a2)
{
  if ((a2 & 1) == 0) {
    return (uint64_t *)sub_251078B48(*result);
  }
  return result;
}

uint64_t HKSampleCountQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = sub_2510BEFA8();
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t HKSampleCountQueryDescriptor.queryAttributes.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = sub_2510BEFA8();
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*HKSampleCountQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t HKSampleCountQueryDescriptor.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for HKSampleCountQueryDescriptor();
  uint64_t result = sub_2510BEF78();
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = a1;
  return result;
}

uint64_t type metadata accessor for HKSampleCountQueryDescriptor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t HKSampleCountQueryDescriptor.init()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for HKSampleCountQueryDescriptor();
  sub_2510BEF78();
  *(unsigned char *)a1 = 1;
  sub_2510BEFD8();
  uint64_t result = sub_2510BF0F8();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t HKSampleCountQueryDescriptor.result(for:)(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return MEMORY[0x270FA2498](sub_251078F3C, 0, 0);
}

uint64_t sub_251078F3C()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = (void *)v0[11];
  v0[2] = v0;
  v0[7] = v0 + 10;
  v0[3] = sub_251078FF0;
  uint64_t v4 = swift_continuation_init();
  sub_251079130(v4, v1, v3, *(void *)(v2 + 16));
  return MEMORY[0x270FA23F0](v0 + 2);
}

uint64_t sub_251078FF0()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48))
  {
    swift_willThrow();
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
    return v2();
  }
  else
  {
    uint64_t v4 = *(void *)(*v0 + 80);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v1 + 8);
    return v5(v4);
  }
}

void sub_251079130(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t aBlock = v7;
  sub_2510BEFD8();
  uint64_t v8 = sub_2510BF488();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = sub_2510BF5F8();
  if (v10)
  {
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = a3;
    *(void *)(v11 + 24) = a1;
    id v12 = objc_allocWithZone(MEMORY[0x263F0A6C0]);
    uint64_t v33 = sub_25107A6E8;
    uint64_t v34 = v11;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v30 = 1107296256;
    uint64_t v31 = sub_2510588F4;
    char v32 = &block_descriptor_9;
    uint64_t v13 = _Block_copy(&aBlock);
    id v14 = a3;
    id v15 = objc_msgSend(v12, sel_initWithResultsHandler_, v13);
  }
  else
  {
    uint64_t v28 = (uint64_t)&v28;
    uint64_t aBlock = v7;
    MEMORY[0x270FA5388](v10);
    v27[2] = a4;
    uint64_t v16 = sub_251065E84(0, &qword_26B2120C0);
    swift_bridgeObjectRetain();
    unint64_t v18 = sub_2510A4164((void (*)(char *, char *))sub_25107A384, (uint64_t)v27, v8, v16, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v17);
    swift_bridgeObjectRelease();
    sub_2510AC1E8(v18);
    swift_bridgeObjectRelease();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a3;
    *(void *)(v19 + 24) = a1;
    id v20 = objc_allocWithZone(MEMORY[0x263F0A6C0]);
    sub_251067900(&qword_269B1B658, &qword_26B2120C0);
    id v21 = a3;
    int v22 = (void *)sub_2510BF518();
    swift_bridgeObjectRelease();
    uint64_t v33 = sub_25107A6E0;
    uint64_t v34 = v19;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v30 = 1107296256;
    uint64_t v31 = sub_25107A3A4;
    char v32 = &block_descriptor_5;
    uint64_t v13 = _Block_copy(&aBlock);
    id v15 = objc_msgSend(v20, sel_initWithQueryDescriptors_resultsHandler_, v22, v13);
  }
  _Block_release(v13);
  swift_release();
  type metadata accessor for HKSampleCountQueryDescriptor();
  id v23 = v15;
  sub_2510BEF88();
  if (v24)
  {
    uint64_t v25 = (void *)sub_2510BF228();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = 0;
  }
  objc_msgSend(v23, sel_setDebugIdentifier_, v25);

  id v26 = v23;
  objc_msgSend(v26, sel_setQualityOfService_, sub_2510BEF98());

  objc_msgSend(a3, sel_executeQuery_, v26);
}

uint64_t sub_2510794D8(uint64_t a1, uint64_t a2, void *a3, id a4, uint64_t a5)
{
  objc_msgSend(a4, sel_stopQuery_, a1);
  if (a2)
  {
    if ((a2 & 0xC000000000000001) != 0) {
      uint64_t v8 = sub_25105BEC0();
    }
    else {
      uint64_t v8 = (uint64_t)sub_25107A4B0(a2);
    }
    **(void **)(*(void *)(a5 + 64) + 40) = v8;
    return swift_continuation_throwingResume();
  }
  else
  {
    if (a3)
    {
      char v9 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_2510A5D38(MEMORY[0x263F8EE78]);
      sub_25107A6F0();
      sub_2510BE828();
      char v9 = v13;
    }
    sub_251067550();
    swift_allocError();
    *uint64_t v11 = v9;
    id v12 = a3;
    return swift_continuation_throwingResumeWithError();
  }
}

void sub_25107961C(void *a1@<X8>)
{
  sub_2510BEFD8();
  uint64_t v2 = (void *)sub_2510BEFC8();
  uint64_t v3 = (void *)sub_2510BEFB8();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A678]), sel_initWithSampleType_predicate_, v2, v3);

  *a1 = v4;
}

uint64_t sub_2510796A8(uint64_t a1, unint64_t a2, void *a3, id a4, uint64_t a5)
{
  objc_msgSend(a4, sel_stopQuery_, a1);
  if (!a2)
  {
    if (a3)
    {
      uint64_t v11 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_2510A5D38(MEMORY[0x263F8EE78]);
      sub_25107A6F0();
      sub_2510BE828();
      uint64_t v11 = v53;
    }
    sub_251067550();
    swift_allocError();
    void *v47 = v11;
    id v48 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  uint64_t v49 = a5;
  if ((a2 & 0xC000000000000001) != 0)
  {
    unint64_t v51 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = sub_2510BFA88() | 0x8000000000000000;
  }
  else
  {
    uint64_t v12 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v8 = ~v12;
    unint64_t v51 = a2 + 64;
    uint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v9 = v14 & *(void *)(a2 + 64);
    unint64_t v10 = a2;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = 0;
  int64_t v50 = (unint64_t)(v8 + 64) >> 6;
  uint64_t v16 = (void *)MEMORY[0x263F8EE80];
  while (1)
  {
    if ((v10 & 0x8000000000000000) != 0)
    {
      if (!sub_2510BFAA8()) {
        goto LABEL_45;
      }
      sub_251065E84(0, &qword_26B2120C0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v20 = v53;
      swift_unknownObjectRelease();
      sub_251065E84(0, (unint64_t *)&qword_26B212178);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v52 = v53;
      swift_unknownObjectRelease();
      uint64_t v19 = v15;
      uint64_t v17 = v9;
      if (!v53) {
        goto LABEL_45;
      }
    }
    else
    {
      if (v9)
      {
        uint64_t v17 = (v9 - 1) & v9;
        unint64_t v18 = __clz(__rbit64(v9)) | (v15 << 6);
        uint64_t v19 = v15;
      }
      else
      {
        int64_t v21 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_50;
        }
        if (v21 >= v50) {
          goto LABEL_45;
        }
        unint64_t v22 = *(void *)(v51 + 8 * v21);
        uint64_t v19 = v15 + 1;
        if (!v22)
        {
          uint64_t v19 = v15 + 2;
          if (v15 + 2 >= v50) {
            goto LABEL_45;
          }
          unint64_t v22 = *(void *)(v51 + 8 * v19);
          if (!v22)
          {
            uint64_t v19 = v15 + 3;
            if (v15 + 3 >= v50) {
              goto LABEL_45;
            }
            unint64_t v22 = *(void *)(v51 + 8 * v19);
            if (!v22)
            {
              uint64_t v19 = v15 + 4;
              if (v15 + 4 >= v50) {
                goto LABEL_45;
              }
              unint64_t v22 = *(void *)(v51 + 8 * v19);
              if (!v22)
              {
                uint64_t v23 = v15 + 5;
                while (v50 != v23)
                {
                  unint64_t v22 = *(void *)(v51 + 8 * v23++);
                  if (v22)
                  {
                    uint64_t v19 = v23 - 1;
                    goto LABEL_32;
                  }
                }
LABEL_45:
                sub_25107A748();
                **(void **)(*(void *)(v49 + 64) + 40) = v16;
                return swift_continuation_throwingResume();
              }
            }
          }
        }
LABEL_32:
        uint64_t v17 = (v22 - 1) & v22;
        unint64_t v18 = __clz(__rbit64(v22)) + (v19 << 6);
      }
      uint64_t v24 = 8 * v18;
      uint64_t v25 = *(void **)(*(void *)(v10 + 56) + v24);
      id v20 = *(id *)(*(void *)(v10 + 48) + v24);
      id v52 = v25;
      if (!v20) {
        goto LABEL_45;
      }
    }
    uint64_t v26 = v19;
    unint64_t v27 = v10;
    uint64_t v28 = v20;
    id v29 = objc_msgSend(v20, sel_sampleType);
    id v30 = objc_msgSend(v52, sel_integerValue);
    uint64_t v31 = v16;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v53 = v31;
    unint64_t v34 = sub_251084980((uint64_t)v29);
    uint64_t v35 = v31[2];
    BOOL v36 = (v33 & 1) == 0;
    uint64_t v37 = v35 + v36;
    if (__OFADD__(v35, v36)) {
      break;
    }
    char v38 = v33;
    if (v31[3] >= v37)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v16 = v31;
        if (v33) {
          goto LABEL_11;
        }
      }
      else
      {
        sub_2510AF174();
        uint64_t v16 = v31;
        if (v38) {
          goto LABEL_11;
        }
      }
    }
    else
    {
      sub_2510AA194(v37, isUniquelyReferenced_nonNull_native);
      unint64_t v39 = sub_251084980((uint64_t)v29);
      if ((v38 & 1) != (v40 & 1)) {
        goto LABEL_51;
      }
      unint64_t v34 = v39;
      uint64_t v16 = v31;
      if (v38)
      {
LABEL_11:
        *(void *)(v16[7] + 8 * v34) = v30;
        goto LABEL_12;
      }
    }
    v16[(v34 >> 6) + 8] |= 1 << v34;
    uint64_t v41 = 8 * v34;
    *(void *)(v16[6] + v41) = v29;
    *(void *)(v16[7] + v41) = v30;
    uint64_t v42 = v16[2];
    BOOL v43 = __OFADD__(v42, 1);
    uint64_t v44 = v42 + 1;
    if (v43) {
      goto LABEL_49;
    }
    v16[2] = v44;
    id v45 = v29;
LABEL_12:

    swift_bridgeObjectRelease();
    uint64_t v15 = v26;
    unint64_t v9 = v17;
    unint64_t v10 = v27;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  sub_251065E84(0, (unint64_t *)&qword_26B2119A0);
  uint64_t result = sub_2510BFC88();
  __break(1u);
  return result;
}

uint64_t sub_251079BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_251079C6C;
  v7[12] = a3;
  v7[13] = v3;
  v7[11] = a2;
  return MEMORY[0x270FA2498](sub_251078F3C, 0, 0);
}

uint64_t sub_251079C6C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
  return v6();
}

uint64_t sub_251079D7C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t sub_251079D8C()
{
  return 8;
}

void *sub_251079D98(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_251079DA4()
{
  uint64_t result = sub_2510BEFA8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_251079E48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    a1[1] = a2[1];
    uint64_t v5 = *(int *)(a3 + 32);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = sub_2510BEFA8();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_251079F38(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = sub_2510BEFA8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_251079FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_2510BEFA8();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t sub_25107A050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_2510BEFA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_25107A0EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_2510BEFA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_25107A170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_2510BEFA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_25107A204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25107A218);
}

uint64_t sub_25107A218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_2510BEFA8();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_25107A2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25107A2DC);
}

uint64_t sub_25107A2DC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_2510BEFA8();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_25107A384(void *a1@<X8>)
{
}

uint64_t sub_25107A3A4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_251065E84(0, &qword_26B2120C0);
    sub_251065E84(0, (unint64_t *)&qword_26B212178);
    sub_251067900(&qword_269B1B658, &qword_26B2120C0);
    uint64_t v5 = sub_2510BF118();
  }
  swift_retain();
  id v8 = a2;
  id v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

void *sub_25107A4B0(uint64_t a1)
{
  sub_251067630();
  uint64_t result = (void *)sub_2510BFB18();
  uint64_t v3 = result;
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v20 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v21 = (unint64_t)(v6 + 63) >> 6;
  id v9 = (char *)(result + 8);
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v10 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    uint64_t v15 = *(void **)(*(void *)(a1 + 56) + 8 * i);
    id v16 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    uint64_t result = objc_msgSend(v15, sel_integerValue);
    *(void *)&v9[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    *(void *)(v3[6] + 8 * i) = v16;
    *(void *)(v3[7] + 8 * i) = result;
    uint64_t v17 = v3[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v19;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v12 >= v21) {
      return v3;
    }
    unint64_t v13 = *(void *)(v20 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v21) {
        return v3;
      }
      unint64_t v13 = *(void *)(v20 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v21) {
          return v3;
        }
        unint64_t v13 = *(void *)(v20 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v21) {
    return v3;
  }
  unint64_t v13 = *(void *)(v20 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v21) {
      return v3;
    }
    unint64_t v13 = *(void *)(v20 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_25107A6A8()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25107A6E0(uint64_t a1, unint64_t a2, void *a3)
{
  return sub_2510796A8(a1, a2, a3, *(id *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_25107A6E8(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_2510794D8(a1, a2, a3, *(id *)(v3 + 16), *(void *)(v3 + 24));
}

unint64_t sub_25107A6F0()
{
  unint64_t result = qword_269B1B1A8;
  if (!qword_269B1B1A8)
  {
    type metadata accessor for HKError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B1A8);
  }
  return result;
}

uint64_t sub_25107A748()
{
  return swift_release();
}

uint64_t sub_25107A75C(void (*a1)(uint64_t *__return_ptr, long long *), uint64_t a2, uint64_t a3, uint64_t (*a4)(BOOL, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a3 + 16);
  if (!v6) {
    return MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = a3;
  id v9 = (uint64_t *)(a3 + 56);
  uint64_t v10 = MEMORY[0x263F8EE78];
  do
  {
    uint64_t v11 = *(v9 - 1);
    uint64_t v12 = *v9;
    long long v20 = *(_OWORD *)(v9 - 3);
    uint64_t v21 = v11;
    uint64_t v22 = v12;
    swift_bridgeObjectRetain();
    a1(&v18, &v20);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      uint64_t v13 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = a4(0, *(void *)(v10 + 16) + 1, 1, v10);
      }
      unint64_t v15 = *(void *)(v10 + 16);
      unint64_t v14 = *(void *)(v10 + 24);
      if (v15 >= v14 >> 1) {
        uint64_t v10 = a4(v14 > 1, v15 + 1, 1, v10);
      }
      *(void *)(v10 + 16) = v15 + 1;
      *(void *)(v10 + 8 * v15 + 32) = v13;
    }
    v9 += 4;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_25107A8DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    sub_2510B919C(0, v3, 0);
    uint64_t v4 = v17;
    uint64_t v7 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v8 = *v7++;
      id v9 = (id)a3(v8);
      uint64_t v10 = sub_2510BF258();
      uint64_t v12 = v11;

      unint64_t v14 = *(void *)(v17 + 16);
      unint64_t v13 = *(void *)(v17 + 24);
      if (v14 >= v13 >> 1) {
        sub_2510B919C(v13 > 1, v14 + 1, 1);
      }
      *(void *)(v17 + 16) = v14 + 1;
      uint64_t v15 = v17 + 16 * v14;
      *(void *)(v15 + 32) = v10;
      *(void *)(v15 + 40) = v12;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_25107A9D0@<X0>(void *a1@<X8>)
{
  sub_2510BF928();
  swift_bridgeObjectRelease();
  sub_2510BF2F8();
  sub_2510BF928();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 0xD00000000000003ALL;
  a1[1] = 0x80000002510C53E0;
  a1[2] = 0xD000000000000028;
  a1[3] = 0x80000002510C53B0;
  return result;
}

uint64_t sub_25107AA94@<X0>(void *a1@<X8>)
{
  sub_2510BF928();
  swift_bridgeObjectRelease();
  sub_2510BF2F8();
  sub_2510BF928();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 0xD00000000000002CLL;
  a1[1] = 0x80000002510C5380;
  a1[2] = 0xD00000000000002ELL;
  a1[3] = 0x80000002510C5350;
  return result;
}

uint64_t sub_25107AB54@<X0>(void *a1@<X8>)
{
  sub_2510BF928();
  swift_bridgeObjectRelease();
  sub_2510BF2F8();
  sub_2510BF928();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 0xD00000000000002DLL;
  a1[1] = 0x80000002510C5320;
  a1[2] = 0xD00000000000002FLL;
  a1[3] = 0x80000002510C52F0;
  return result;
}

uint64_t sub_25107AC14()
{
  uint64_t v2 = v0;
  sub_25107BA18(0, &qword_269B1B5A8, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_2510C2190;
  sub_251065E84(0, (unint64_t *)&qword_26B2119A0);
  id v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_stateOfMindType);
  id v5 = objc_msgSend(v4, sel_identifier);

  uint64_t v6 = sub_2510BF258();
  uint64_t v8 = v7;

  *(void *)(v3 + 32) = v6;
  *(void *)(v3 + 40) = v8;
  objc_msgSend(v2, sel_valence);
  *(void *)(v3 + 48) = sub_2510BF4F8();
  *(void *)(v3 + 56) = v9;
  objc_msgSend(v2, sel_reflectiveInterval);
  id v10 = (id)NSStringFromHKStateOfMindReflectiveInterval();
  uint64_t v11 = sub_2510BF258();
  uint64_t v13 = v12;

  *(void *)(v3 + 64) = v11;
  *(void *)(v3 + 72) = v13;
  uint64_t v14 = sub_2510BF638();
  uint64_t v15 = sub_25107A8DC(v14, (uint64_t)v40, MEMORY[0x263F0A078]);
  swift_bridgeObjectRelease();
  uint64_t v39 = v15;
  if (qword_269B1AF20 != -1) {
    swift_once();
  }
  sub_25107BA18(0, &qword_269B1B668, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
  sub_25107B918();
  uint64_t v16 = sub_2510BF1A8();
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  *(void *)(v3 + 80) = v16;
  *(void *)(v3 + 88) = v18;
  uint64_t v19 = sub_2510BF648();
  uint64_t v20 = sub_25107A8DC(v19, (uint64_t)v38, MEMORY[0x263F0A070]);
  swift_bridgeObjectRelease();
  uint64_t v39 = v20;
  uint64_t v21 = sub_2510BF1A8();
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  *(void *)(v3 + 96) = v21;
  *(void *)(v3 + 104) = v23;
  id v24 = objc_msgSend(v2, sel_context);
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = sub_2510BF258();
    unint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = 0;
    unint64_t v28 = 0xE000000000000000;
  }
  *(void *)(v3 + 112) = v26;
  *(void *)(v3 + 120) = v28;
  *(void *)(v3 + 128) = sub_25109B2D4();
  *(void *)(v3 + 136) = v29;
  id v30 = objc_msgSend(v2, sel_metadata);
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = sub_2510BF118();
  }
  else
  {
    uint64_t v32 = 0;
  }
  uint64_t v33 = sub_2510AC7C8(v32);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 16) = 0;
    swift_release();
  }
  else
  {
    uint64_t v35 = v33;
    uint64_t v36 = v34;
    swift_bridgeObjectRelease();
    *(void *)(v3 + 144) = v35;
    *(void *)(v3 + 152) = v36;
    uint64_t v39 = v3;
    if (qword_269B1AF18 != -1) {
      swift_once();
    }
    uint64_t v32 = sub_2510BF1A8();
    swift_bridgeObjectRelease();
  }
  return v32;
}

uint64_t sub_25107B024()
{
  return sub_25107AC14();
}

uint64_t sub_25107B048()
{
  uint64_t v2 = sub_2510BE908();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v17 - v7;
  sub_25109481C();
  if (v1) {
    return v0;
  }
  sub_251065E84(0, (unint64_t *)&qword_26B2119A0);
  id v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_stateOfMindType);
  id v10 = objc_msgSend(v9, sel_identifier);

  sub_2510BF258();
  sub_2510949DC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_251094B04();
  sub_25107B454();
  sub_25107B570(3, (void (*)(uint64_t *__return_ptr, long long *))sub_25107BB54, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_251077504);
  sub_25107B570(4, (void (*)(uint64_t *__return_ptr, long long *))sub_25107BAB8, (uint64_t (*)(BOOL, uint64_t, uint64_t, uint64_t))sub_251077524);
  sub_2510BEA38();
  if (v24)
  {
    int v12 = swift_dynamicCast();
    if (v12) {
      uint64_t v13 = v21;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v12) {
      unint64_t v14 = v22;
    }
    else {
      unint64_t v14 = 0;
    }
    uint64_t v19 = v13;
    unint64_t v20 = v14;
  }
  else
  {
    sub_25107B994((uint64_t)v23);
    uint64_t v19 = 0;
    unint64_t v20 = 0;
  }
  sub_251094C14(6, (uint64_t)v8);
  sub_2510BEA38();
  if (!v24)
  {
    sub_25107B994((uint64_t)v23);
    goto LABEL_17;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_17:
    uint64_t v15 = 0;
    unint64_t v16 = 0xE000000000000000;
    goto LABEL_18;
  }
  uint64_t v15 = v21;
  unint64_t v16 = v22;
LABEL_18:
  unint64_t v18 = (unint64_t)sub_2510AC298(v15, v16);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  if (!v18) {
    unint64_t v18 = sub_25107F5C4(MEMORY[0x263F8EE78]);
  }
  sub_251065E84(0, &qword_269B1B678);
  uint64_t v0 = sub_2510BF628();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v0;
}

id sub_25107B454()
{
  sub_2510BEA38();
  if (!v6)
  {
    sub_25107B994((uint64_t)v5);
LABEL_6:
    id v2 = (id)sub_2510A0854(2);
    sub_25107BB00();
    swift_allocError();
    sub_25107A9D0(v3);
    swift_bridgeObjectRelease();
    swift_willThrow();
    return v2;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v0 = (void *)sub_2510BF228();
  swift_bridgeObjectRelease();
  id v1 = (id)HKStateOfMindReflectiveIntervalFromNSString();

  if (!v1) {
    goto LABEL_6;
  }
  id v2 = objc_msgSend(v1, sel_integerValue);

  return v2;
}

uint64_t sub_25107B570(uint64_t a1, void (*a2)(uint64_t *__return_ptr, long long *), uint64_t (*a3)(BOOL, uint64_t, uint64_t, uint64_t))
{
  sub_2510BEA38();
  if (v14[3])
  {
    if (swift_dynamicCast())
    {
      uint64_t v6 = v13[4];
      unint64_t v7 = v13[5];
      goto LABEL_6;
    }
  }
  else
  {
    sub_25107B994((uint64_t)v14);
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0xE000000000000000;
LABEL_6:
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v8)
  {
    v14[0] = v6;
    v14[1] = v7;
    if (qword_269B1AF20 != -1) {
      swift_once();
    }
    sub_25107BA64();
    uint64_t v9 = sub_2510BF858();
    uint64_t v10 = swift_bridgeObjectRelease();
    MEMORY[0x270FA5388](v10);
    v13[2] = v3;
    uint64_t v11 = sub_25107A75C(a2, (uint64_t)v13, v9, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return v11;
}

void sub_25107B700(void *a1@<X0>, uint64_t (*a2)(void *)@<X2>, uint64_t a3@<X3>, void (*a4)(uint64_t, uint64_t)@<X4>, uint64_t a5@<X8>)
{
  MEMORY[0x253392E20](*a1, a1[1], a1[2], a1[3]);
  uint64_t v9 = (void *)sub_2510BF228();
  swift_bridgeObjectRelease();
  id v10 = (id)a2(v9);

  if (v10)
  {
    id v11 = objc_msgSend(v10, sel_integerValue);

    *(void *)a5 = v11;
    *(unsigned char *)(a5 + 8) = 0;
  }
  else
  {
    uint64_t v12 = sub_2510A0854(a3);
    uint64_t v14 = v13;
    sub_25107BB00();
    swift_allocError();
    a4(v12, v14);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
}

uint64_t sub_25107B810()
{
  return sub_2510BF3E8();
}

uint64_t sub_25107B870()
{
  return sub_2510BF3D8();
}

unint64_t sub_25107B8C0()
{
  unint64_t result = qword_269B1B660;
  if (!qword_269B1B660)
  {
    type metadata accessor for Association(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B660);
  }
  return result;
}

unint64_t sub_25107B918()
{
  unint64_t result = qword_269B1B670;
  if (!qword_269B1B670)
  {
    sub_25107BA18(255, &qword_269B1B668, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B670);
  }
  return result;
}

uint64_t sub_25107B994(uint64_t a1)
{
  sub_25107BA18(0, (unint64_t *)&qword_26B2121A0, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_25107BA18(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_25107BA64()
{
  unint64_t result = qword_269B1B680;
  if (!qword_269B1B680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B680);
  }
  return result;
}

void sub_25107BAB8(void *a1@<X0>, uint64_t a2@<X8>)
{
}

unint64_t sub_25107BB00()
{
  unint64_t result = qword_269B1B688;
  if (!qword_269B1B688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B688);
  }
  return result;
}

void sub_25107BB54(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t *sub_25107BB9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_2510BEA28();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    id v10 = (char *)a2 + v8;
    uint64_t v11 = sub_2510BE9E8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = sub_2510BE798();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_25107BD80();
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

void sub_25107BD80()
{
  if (!qword_269B1B690)
  {
    sub_2510BE798();
    unint64_t v0 = sub_2510BF808();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1B690);
    }
  }
}

uint64_t sub_25107BDD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2510BEA28();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_2510BE9E8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = sub_2510BE798();
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v8);
  if (!result)
  {
    id v10 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    return v10(v7, v8);
  }
  return result;
}

uint64_t sub_25107BF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510BEA28();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2510BE9E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_2510BE798();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    sub_25107BD80();
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_25107C0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510BEA28();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2510BE9E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = sub_2510BE798();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v9) = v16(v12, 1, v14);
  int v17 = v16(v13, 1, v14);
  if (!v9)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_25107BD80();
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_25107C2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510BEA28();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2510BE9E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_2510BE798();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    sub_25107BD80();
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_25107C444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510BEA28();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2510BE9E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = sub_2510BE798();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v9) = v16(v12, 1, v14);
  int v17 = v16(v13, 1, v14);
  if (!v9)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_25107BD80();
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_25107C63C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25107C650);
}

uint64_t sub_25107C650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510BEA28();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_2510BE9E8();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  sub_25107BD80();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);
  return v15(v17, a2, v16);
}

uint64_t sub_25107C79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25107C7B0);
}

uint64_t sub_25107C7B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_2510BEA28();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = sub_2510BE9E8();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  sub_25107BD80();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);
  return v17(v19, a2, a2, v18);
}

uint64_t type metadata accessor for StateOfMindDecoder()
{
  uint64_t result = qword_269B1B698;
  if (!qword_269B1B698) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_25107C954()
{
  sub_2510BEA28();
  if (v0 <= 0x3F)
  {
    sub_2510BE9E8();
    if (v1 <= 0x3F)
    {
      sub_25107BD80();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

BOOL static HKQueryAnchor.< infix(_:_:)(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, sel_compare_, a2) == (id)-1;
}

BOOL sub_25107CA84(id *a1, void *a2)
{
  return objc_msgSend(*a1, sel_compare_, *a2) == (id)-1;
}

unint64_t sub_25107CAC4()
{
  unint64_t result = qword_269B1B6A8;
  if (!qword_269B1B6A8)
  {
    sub_25107CB1C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B6A8);
  }
  return result;
}

unint64_t sub_25107CB1C()
{
  unint64_t result = qword_269B1B6B0;
  if (!qword_269B1B6B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269B1B6B0);
  }
  return result;
}

uint64_t sub_25107CB5C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_25107CB94()
{
  return 0;
}

uint64_t sub_25107CBA0(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void (*)(uint64_t))result;
  if (a4)
  {
    if (a4 == 1)
    {
      MEMORY[0x270FA5388](result);
      type metadata accessor for StreamConduitBase();
      swift_getWitnessTable();
      sub_2510BF588();
      swift_getWitnessTable();
      return sub_2510BF3C8();
    }
  }
  else
  {
    uint64_t v6 = swift_retain();
    v5(v6);
    return sub_2510606A0(a3, 0);
  }
  return result;
}

uint64_t sub_25107CCE8()
{
  uint64_t result = sub_2510606A0(*(void *)v0, *(unsigned char *)(v0 + 8));
  *(void *)uint64_t v0 = 0;
  *(unsigned char *)(v0 + 8) = 2;
  return result;
}

uint64_t sub_25107CD14(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)v1;
  if (!*(unsigned char *)(v1 + 8))
  {
    if (v3 != result) {
      return result;
    }
    uint64_t result = sub_2510606A0(*(void *)v1, 0);
    goto LABEL_11;
  }
  if (*(unsigned char *)(v1 + 8) != 1) {
    return result;
  }
  uint64_t v6 = *(void *)v1;
  type metadata accessor for StreamConduitBase();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_2510BF588();
  sub_2510BF568();
  swift_release();
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_2510BF548();
  swift_bridgeObjectRelease();
  if (v4 != 1)
  {
    uint64_t result = sub_2510606A0(v3, 1);
    if (v4)
    {
      *(void *)uint64_t v2 = v6;
      *(unsigned char *)(v2 + 8) = 1;
      return result;
    }
    uint64_t result = swift_bridgeObjectRelease();
LABEL_11:
    *(void *)uint64_t v2 = 0;
    *(unsigned char *)(v2 + 8) = 2;
    return result;
  }
  swift_getWitnessTable();
  uint64_t result = sub_2510BF5E8();
  if (v5)
  {
    sub_2510606A0(v3, 1);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v2 = v5;
    *(unsigned char *)(v2 + 8) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_25107CEB8()
{
  return sub_2510BFD28();
}

BOOL sub_25107CF00(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_25107CF0C()
{
  return swift_deallocClassInstance();
}

uint64_t sub_25107CF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_251068CF0(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_25107CF64(uint64_t a1)
{
  return sub_2510606A0(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_25107CF74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_251068CF0(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_2510606A0(v5, v6);
  return a1;
}

uint64_t sub_25107CFC8(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_2510606A0(v4, v5);
  return a1;
}

uint64_t sub_25107D008()
{
  return sub_25107CEB8();
}

uint64_t sub_25107D02C()
{
  return sub_251057CB8();
}

uint64_t sub_25107D050()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

BOOL sub_25107D094(uint64_t *a1, uint64_t *a2)
{
  return sub_25107CF00(*a1, *a2);
}

uint64_t sub_25107D0B8()
{
  return swift_getWitnessTable();
}

uint64_t sub_25107D0D4()
{
  return swift_getWitnessTable();
}

uint64_t sub_25107D0F0()
{
  return swift_getWitnessTable();
}

uint64_t sub_25107D10C(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 40))(*a1);
}

Swift::Void __swiftcall PostDarwinNotification(name:)(HealthKitAdditions::DarwinNotificationPublisher::DarwinNotificationName name)
{
  uint64_t v1 = sub_2510BF298();
  swift_bridgeObjectRelease();
  notify_post((const char *)(v1 + 32));
  swift_release();
}

unint64_t DarwinNotificationPublisher.DarwinNotificationName.rawValue.getter()
{
  unint64_t v1 = 0xD000000000000031;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000044;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000024;
  }
}

HealthKitAdditions::DarwinNotificationPublisher::DarwinNotificationName_optional __swiftcall DarwinNotificationPublisher.DarwinNotificationName.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_2510BFB78();
  result.value = swift_bridgeObjectRelease();
  char v5 = 3;
  if (v3 < 3) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_25107D2A4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_25109B1C8(*a1, *a2);
}

uint64_t sub_25107D2B0()
{
  return sub_2510A2934();
}

uint64_t sub_25107D2B8()
{
  return sub_2510A2C70();
}

uint64_t sub_25107D2C0()
{
  return sub_2510A2D04();
}

HealthKitAdditions::DarwinNotificationPublisher::DarwinNotificationName_optional sub_25107D2C8(Swift::String *a1)
{
  return DarwinNotificationPublisher.DarwinNotificationName.init(rawValue:)(*a1);
}

unint64_t sub_25107D2D4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = DarwinNotificationPublisher.DarwinNotificationName.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t DarwinNotificationPublisher.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

id DarwinNotificationPublisher.queue.getter()
{
  return *(id *)(v0 + 32);
}

uint64_t DarwinNotificationPublisher.__allocating_init(name:queue:)(unsigned char *a1, uint64_t a2)
{
  unint64_t v2 = 0xD000000000000031;
  unint64_t v3 = 0x80000002510C4BE0;
  if (*a1 != 1)
  {
    unint64_t v2 = 0xD000000000000044;
    unint64_t v3 = 0x80000002510C4C20;
  }
  if (*a1) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = 0xD000000000000024;
  }
  if (*a1) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0x80000002510C4BB0;
  }
  uint64_t v7 = swift_allocObject();
  DarwinNotificationPublisher.init(name:queue:)(v4, v5, a2);
  return v7;
}

uint64_t DarwinNotificationPublisher.__allocating_init(name:queue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  DarwinNotificationPublisher.init(name:queue:)(a1, a2, a3);
  return v6;
}

uint64_t sub_25107D438()
{
  MEMORY[0x2533940F0](*(void *)(v0 + *(void *)(*(void *)v0 + 112)), -1, -1);
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104);
  uint64_t v2 = type metadata accessor for DownstreamHandlerSubscriptionState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_release();
  return v0;
}

uint64_t sub_25107D540()
{
  sub_25107D438();
  return swift_deallocClassInstance();
}

uint64_t sub_25107D598()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_25107D5F0();
    return swift_release();
  }
  return result;
}

uint64_t sub_25107D5F0()
{
  uint64_t v1 = *v0;
  type metadata accessor for DownstreamHandlerSendFailureReason();
  swift_getWitnessTable();
  uint64_t v2 = sub_2510BFD68();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - v4;
  uint64_t WitnessTable = swift_getWitnessTable();
  DownstreamHandlerSubscription.sendValueToDownstreamIfNeeded(_:)(WitnessTable, v1, WitnessTable, (uint64_t)v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_25107D768()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(uint64_t *)((char *)v0 + *(void *)(*v0 + 112));
  sub_2510642A4(0, (unint64_t *)&unk_26B212DC0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x263F8D8D0]);
  uint64_t v4 = v3;
  uint64_t v14 = v3;
  uint64_t v15 = &protocol witness table for <A> UnsafeMutablePointer<A>;
  v13[0] = v2;
  __swift_project_boxed_opaque_existential_0(v13, v3);
  off_2701FDE10[0]();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  uint64_t v5 = *v1;
  uint64_t v6 = *(void *)(*v1 + 128);
  uint64_t v7 = *(uint64_t *)((char *)v1 + v6);
  if (v7)
  {
    uint64_t v8 = *(os_unfair_lock_s **)(v7 + 24);
    uint64_t v9 = v8 + 4;
    uint64_t v10 = v8 + 5;
    swift_retain();
    os_unfair_lock_lock(v10);
    sub_2510590E8(v9);
    os_unfair_lock_unlock(v10);
    swift_release();
    *(uint64_t *)((char *)v1 + v6) = 0;
    swift_release();
    uint64_t v5 = *v1;
  }
  uint64_t v11 = *(uint64_t *)((char *)v1 + *(void *)(v5 + 112));
  uint64_t v14 = v4;
  uint64_t v15 = &protocol witness table for <A> UnsafeMutablePointer<A>;
  v13[0] = v11;
  __swift_project_boxed_opaque_existential_0(v13, v4);
  off_2701FDE18[0]();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

uint64_t (*sub_25107D900())()
{
  return j__swift_endAccess;
}

void sub_25107D970()
{
}

uint64_t DarwinNotificationPublisher.deinit()
{
  swift_bridgeObjectRelease();

  return v0;
}

unint64_t sub_25107D9E8()
{
  unint64_t result = qword_269B1B6B8;
  if (!qword_269B1B6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B6B8);
  }
  return result;
}

uint64_t sub_25107DA3C()
{
  return MEMORY[0x263F8E658];
}

uint64_t method lookup function for DarwinNotificationPublisher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DarwinNotificationPublisher);
}

uint64_t dispatch thunk of DarwinNotificationPublisher.__allocating_init(name:queue:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t getEnumTagSinglePayload for DarwinNotificationPublisher.DarwinNotificationName(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DarwinNotificationPublisher.DarwinNotificationName(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25107DBD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *sub_25107DBF8(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

uint64_t sub_25107DC00()
{
  uint64_t result = type metadata accessor for DownstreamHandlerSubscriptionState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_25107DCC4(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 88);
}

uint64_t sub_25107DCCC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_25107DD08()
{
  return swift_getWitnessTable();
}

uint64_t sub_25107DD24()
{
  return swift_getWitnessTable();
}

uint64_t sub_25107DD40()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25107DD78()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25107DDB0()
{
  return sub_25107D598();
}

uint64_t HKProfileStore.createFetchDisplayNamePublisher()()
{
  *(void *)(swift_allocObject() + 16) = v0;
  sub_25107E278(0, &qword_269B1B6C0, MEMORY[0x263EFDE20]);
  swift_allocObject();
  id v1 = v0;
  return sub_2510BEE28();
}

void sub_25107DE54(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_25107E044;
  *(void *)(v7 + 24) = v6;
  void v9[4] = sub_25107E120;
  void v9[5] = v7;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1107296256;
  id v9[2] = sub_25107E128;
  v9[3] = &block_descriptor_6;
  int v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(a3, sel_fetchDisplayName_, v8);
  _Block_release(v8);
}

uint64_t sub_25107DF64()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_25107DF9C(uint64_t a1, uint64_t a2)
{
  sub_25107DE54(a1, a2, *(void **)(v2 + 16));
}

void sub_25107DFA4()
{
  if (!qword_269B1B6C8)
  {
    sub_25105B998();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B1B6C8);
    }
  }
}

uint64_t sub_25107E00C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25107E044(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(unsigned char *))(v1 + 16);
  sub_25107E1F8(a1, (uint64_t)v4);
  return v2(v4);
}

void sub_25107E080(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5, void (*a6)(id *))
{
  if (a5)
  {
    id v9 = a5;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    char v13 = 1;
    id v8 = a5;
    a6(&v9);
  }
  else
  {
    id v9 = a1;
    uint64_t v10 = a2;
    uint64_t v11 = a3;
    uint64_t v12 = a4;
    char v13 = 0;
    a6(&v9);
  }
}

void sub_25107E120(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_25107E080(a1, a2, a3, a4, a5, *(void (**)(id *))(v5 + 16));
}

uint64_t sub_25107E128(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v7 = sub_2510BF258();
    uint64_t v9 = v8;
    if (v5)
    {
LABEL_3:
      uint64_t v10 = sub_2510BF258();
      uint64_t v5 = v11;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v10 = 0;
LABEL_6:
  swift_retain();
  id v12 = a4;
  v6(v7, v9, v10, v5, a4);
  swift_release();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25107E1F8(uint64_t a1, uint64_t a2)
{
  sub_25107E278(0, &qword_269B1B6D0, MEMORY[0x263F8E848]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_25107E278(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    sub_25107DFA4();
    uint64_t v7 = v6;
    unint64_t v8 = sub_251067550();
    unint64_t v9 = a3(a1, v7, v8, MEMORY[0x263F8E4E0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void HKAllowedCountries.Category.hash(into:)()
{
  uint64_t v1 = *v0;
  if (*v0 == (void *)3)
  {
    sub_2510BFD18();
  }
  else
  {
    sub_2510BFD18();
    if (v1)
    {
      if (v1 == (void *)1)
      {
        sub_2510BFD18();
        uint64_t v2 = 1;
      }
      else
      {
        sub_2510BFD18();
        if (v1 == (void *)2)
        {
          uint64_t v2 = 2;
        }
        else
        {
          sub_25107E720(v1);
          sub_2510BF7E8();
          uint64_t v2 = (uint64_t)v1;
        }
      }
    }
    else
    {
      sub_2510BFD18();
      uint64_t v2 = 0;
    }
    sub_25107E730((id)v2);
  }
}

uint64_t HKAllowedCountries.Category.hashValue.getter()
{
  uint64_t v1 = *v0;
  sub_2510BFD08();
  if (v1 == (void *)3)
  {
    sub_2510BFD18();
  }
  else
  {
    sub_2510BFD18();
    if (v1)
    {
      if (v1 == (void *)1)
      {
        sub_2510BFD18();
        uint64_t v2 = 1;
      }
      else
      {
        sub_2510BFD18();
        if (v1 == (void *)2)
        {
          uint64_t v2 = 2;
        }
        else
        {
          sub_25107E720(v1);
          sub_2510BF7E8();
          uint64_t v2 = (uint64_t)v1;
        }
      }
    }
    else
    {
      sub_2510BFD18();
      uint64_t v2 = 0;
    }
    sub_25107E730((id)v2);
  }
  return sub_2510BFD28();
}

uint64_t sub_25107E48C()
{
  uint64_t v1 = *v0;
  sub_2510BFD08();
  if (v1 == (void *)3)
  {
    sub_2510BFD18();
  }
  else
  {
    sub_2510BFD18();
    if (v1)
    {
      if (v1 == (void *)1)
      {
        sub_2510BFD18();
        uint64_t v2 = 1;
      }
      else
      {
        sub_2510BFD18();
        if (v1 == (void *)2)
        {
          uint64_t v2 = 2;
        }
        else
        {
          sub_25107E720(v1);
          sub_2510BF7E8();
          uint64_t v2 = (uint64_t)v1;
        }
      }
    }
    else
    {
      sub_2510BFD18();
      uint64_t v2 = 0;
    }
    sub_25107E730((id)v2);
  }
  return sub_2510BFD28();
}

void HKAllowedCountries.RemoteState.hash(into:)()
{
  uint64_t v1 = *v0;
  if (!*v0 || v1 == (void *)1 || v1 == (void *)2)
  {
    sub_2510BFD18();
  }
  else
  {
    sub_2510BFD18();
    id v2 = v1;
    sub_2510BF7E8();
    sub_25107E740(v1);
  }
}

uint64_t HKAllowedCountries.RemoteState.hashValue.getter()
{
  uint64_t v1 = *v0;
  sub_2510BFD08();
  sub_2510BFD18();
  if ((unint64_t)v1 > 2)
  {
    id v2 = v1;
    sub_2510BF7E8();
    sub_25107E740(v1);
  }
  return sub_2510BFD28();
}

void sub_25107E684()
{
  uint64_t v1 = *v0;
  if (!*v0 || v1 == (void *)1 || v1 == (void *)2)
  {
    sub_2510BFD18();
  }
  else
  {
    sub_2510BFD18();
    id v2 = v1;
    sub_2510BF7E8();
    sub_25107E740(v1);
  }
}

id sub_25107E720(id result)
{
  if ((unint64_t)result >= 3) {
    return result;
  }
  return result;
}

void sub_25107E730(id a1)
{
  if (a1 != (id)3) {
    sub_25107E740(a1);
  }
}

void sub_25107E740(id a1)
{
  if ((unint64_t)a1 >= 3) {
}
  }

uint64_t sub_25107E750()
{
  uint64_t v1 = *v0;
  sub_2510BFD08();
  sub_2510BFD18();
  if ((unint64_t)v1 > 2)
  {
    id v2 = v1;
    sub_2510BF7E8();
    sub_25107E740(v1);
  }
  return sub_2510BFD28();
}

void HKAllowedCountries.category.getter(uint64_t *a1@<X8>)
{
  swift_getObjectType();
  id v3 = objc_msgSend(v1, sel_category);
  if (v3 == (id)1) {
    goto LABEL_14;
  }
  if (v3 != (id)2)
  {
    if (qword_26B2118B8 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_2510BEC48();
    __swift_project_value_buffer(v16, (uint64_t)qword_26B214CE0);
    id v6 = v1;
    uint64_t v7 = sub_2510BEC28();
    os_log_type_t v8 = sub_2510BF678();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v23 = v10;
      *(_DWORD *)uint64_t v9 = 136446466;
      uint64_t v17 = sub_2510BFDB8();
      uint64_t v22 = sub_25106EDC0(v17, v18, &v23);
      sub_2510BF818();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      objc_msgSend(v6, sel_category, v22, v23);
      type metadata accessor for HKAllowedCountriesCategory(0);
      uint64_t v19 = sub_2510BF268();
      sub_25106EDC0(v19, v20, &v23);
      sub_2510BF818();

      swift_bridgeObjectRelease();
      uint64_t v15 = "[%{public}s] Unrecognized category value: %s";
      goto LABEL_12;
    }
LABEL_13:

    goto LABEL_14;
  }
  sub_25107EB98(&v23);
  uint64_t v4 = v23;
  if (v23 == 3)
  {
    if (qword_26B2118B8 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_2510BEC48();
    __swift_project_value_buffer(v5, (uint64_t)qword_26B214CE0);
    id v6 = v1;
    uint64_t v7 = sub_2510BEC28();
    os_log_type_t v8 = sub_2510BF678();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v23 = v10;
      *(_DWORD *)uint64_t v9 = 136446466;
      uint64_t v11 = sub_2510BFDB8();
      uint64_t v21 = sub_25106EDC0(v11, v12, &v23);
      sub_2510BF818();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      objc_msgSend(v6, sel_remoteState, v21);
      type metadata accessor for HKRemoteAllowedCountriesState(0);
      uint64_t v13 = sub_2510BF268();
      sub_25106EDC0(v13, v14, &v23);
      sub_2510BF818();

      swift_bridgeObjectRelease();
      uint64_t v15 = "[%{public}s] Unrecognized remote state: %s";
LABEL_12:
      _os_log_impl(&dword_251054000, v7, v8, v15, (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2533940F0](v10, -1, -1);
      MEMORY[0x2533940F0](v9, -1, -1);

LABEL_14:
      uint64_t v4 = 3;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
LABEL_15:
  *a1 = v4;
}

id sub_25107EB98@<X0>(uint64_t *a1@<X8>)
{
  id result = objc_msgSend(v1, sel_category);
  if (result == (id)2)
  {
    id result = objc_msgSend(v1, sel_remoteState);
    switch((unint64_t)result)
    {
      case 2uLL:
        uint64_t v4 = 0;
        break;
      case 3uLL:
        uint64_t v4 = 1;
        break;
      case 4uLL:
        uint64_t v4 = 2;
        break;
      case 5uLL:
        id result = objc_msgSend(v1, sel_remoteCountrySet);
        uint64_t v4 = 3;
        if (result) {
          uint64_t v4 = (uint64_t)result;
        }
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    uint64_t v4 = 3;
  }
  *a1 = v4;
  return result;
}

uint64_t _sSo18HKAllowedCountriesC18HealthKitAdditionsE11RemoteStateO2eeoiySbAE_AEtFZ_0(uint64_t *a1, id *a2)
{
  uint64_t v2 = *a1;
  id v3 = *a2;
  if (!*a1)
  {
    if (!v3)
    {
      uint64_t v2 = 0;
      char v4 = 1;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v2 == 1)
  {
    if (v3 == (id)1)
    {
      uint64_t v2 = 1;
      char v4 = 1;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v2 != 2)
  {
    if ((unint64_t)v3 >= 3)
    {
      sub_25107F56C();
      sub_25107E720(v3);
      sub_25107E720((id)v2);
      char v4 = sub_2510BF7D8();
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v3 != (id)2)
  {
LABEL_11:
    sub_25107E720(*a2);
    sub_25107E720((id)v2);
    char v4 = 0;
    goto LABEL_12;
  }
  char v4 = 1;
  uint64_t v2 = 2;
LABEL_12:
  sub_25107E740((id)v2);
  sub_25107E740(v3);
  return v4 & 1;
}

BOOL _sSo18HKAllowedCountriesC18HealthKitAdditionsE8CategoryO2eeoiySbAE_AEtFZ_0(void **a1, id *a2)
{
  uint64_t v2 = *a1;
  id v3 = *a2;
  if (*a1 != (void *)3)
  {
    if (v3 != (id)3)
    {
      if (v2)
      {
        if (v2 == (void *)1)
        {
          if (v3 == (id)1)
          {
            uint64_t v5 = 1;
            sub_25107F5AC((id)1);
            sub_25107E720((id)1);
            sub_25107E740((id)1);
            sub_25107E740((id)1);
            sub_25107E730((id)1);
            sub_25107E730((id)1);
            sub_25107E730((id)1);
            sub_25107E730((id)1);
            return v5;
          }
        }
        else if (v2 == (void *)2)
        {
          if (v3 == (id)2)
          {
            sub_25107F5AC((id)2);
            sub_25107E720((id)2);
            sub_25107E740((id)2);
            sub_25107E740((id)2);
            sub_25107E730((id)2);
            sub_25107E730((id)2);
            sub_25107E730((id)2);
            uint64_t v4 = 2;
            goto LABEL_4;
          }
        }
        else if ((unint64_t)v3 >= 3)
        {
          sub_25107F56C();
          sub_25107F5AC(v3);
          sub_25107F5AC(v2);
          sub_25107F5AC(v3);
          sub_25107F5AC(v2);
          sub_25107F5AC(v3);
          sub_25107F5AC(v2);
          char v8 = sub_2510BF7D8();
          sub_25107E740(v2);
          sub_25107E740(v3);
          sub_25107E730(v2);
          sub_25107E730(v3);
          sub_25107E730(v3);
          sub_25107E730(v2);
          return (v8 & 1) != 0;
        }
      }
      else if (!v3)
      {
        sub_25107F5AC(0);
        sub_25107E720(0);
        sub_25107E740(0);
        sub_25107E740(0);
        sub_25107E730(0);
        sub_25107E730(0);
        sub_25107E730(0);
        uint64_t v4 = 0;
        goto LABEL_4;
      }
      sub_25107F5AC(*a2);
      sub_25107F5AC(v2);
      sub_25107F5AC(v3);
      sub_25107F5AC(v2);
      sub_25107F5AC(v3);
      sub_25107F5AC(v2);
      sub_25107E740(v2);
      sub_25107E740(v3);
      sub_25107E730(v2);
      sub_25107E730(v3);
      sub_25107E730(v3);
      id v6 = v2;
LABEL_18:
      sub_25107E730(v6);
      return 0;
    }
LABEL_6:
    sub_25107F5AC(*a2);
    sub_25107F5AC(v2);
    sub_25107E730(v2);
    id v6 = v3;
    goto LABEL_18;
  }
  if (v3 != (id)3) {
    goto LABEL_6;
  }
  sub_25107E730((id)3);
  uint64_t v4 = 3;
LABEL_4:
  sub_25107E730((id)v4);
  return 1;
}

unint64_t sub_25107EFA4()
{
  unint64_t result = qword_269B1B6D8;
  if (!qword_269B1B6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B6D8);
  }
  return result;
}

unint64_t sub_25107EFFC()
{
  unint64_t result = qword_269B1B6E0;
  if (!qword_269B1B6E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B6E0);
  }
  return result;
}

void *_s8CategoryOwCP(void *a1, void **a2)
{
  id v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v4 = *a2;
  }
  if ((int)v4 - 3 < 0 && (unint64_t)v3 >= 3) {
    id v5 = v3;
  }
  *a1 = v3;
  return a1;
}

void _s8CategoryOwxx(void **a1)
{
  uint64_t v1 = *a1;
  int v2 = -1;
  if ((unint64_t)v1 < 0xFFFFFFFF) {
    int v2 = (int)v1;
  }
  if (v2 - 3 < 0 && (unint64_t)v1 >= 3) {
}
  }

void **_s8CategoryOwca(void **a1, void **a2)
{
  id v3 = *a1;
  LODWORD(v4) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v5) = -1;
  }
  else {
    id v5 = *a1;
  }
  int v6 = v5 - 3;
  uint64_t v7 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v4 = *a2;
  }
  int v8 = v4 - 3;
  if ((v6 & 0x80000000) == 0)
  {
    if (v8 < 0 && (unint64_t)v7 >= 3) {
      id v9 = v7;
    }
LABEL_15:
    *a1 = v7;
    return a1;
  }
  if ((v8 & 0x80000000) == 0)
  {
    if ((unint64_t)v3 >= 3)
    {

      uint64_t v7 = *a2;
    }
    goto LABEL_15;
  }
  if ((unint64_t)v3 < 3)
  {
    if ((unint64_t)v7 >= 3)
    {
      *a1 = v7;
      id v12 = v7;
      return a1;
    }
    goto LABEL_15;
  }
  if ((unint64_t)v7 >= 3)
  {
    *a1 = v7;
    id v13 = v7;
  }
  else
  {

    *a1 = *a2;
  }
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void **_s8CategoryOwta(void **a1, unint64_t *a2)
{
  id v3 = *a1;
  LODWORD(v4) = -1;
  if ((unint64_t)*a1 < 0xFFFFFFFF) {
    uint64_t v4 = *a1;
  }
  unint64_t v5 = *a2;
  if ((int)v4 - 3 >= 0) {
    goto LABEL_4;
  }
  LODWORD(v7) = -1;
  if (v5 < 0xFFFFFFFF) {
    unint64_t v7 = *a2;
  }
  if ((int)v7 - 3 < 0)
  {
    if ((unint64_t)v3 >= 3)
    {
      if (v5 >= 3)
      {
        *a1 = (void *)v5;

        return a1;
      }
      goto LABEL_13;
    }
  }
  else if ((unint64_t)v3 >= 3)
  {
LABEL_13:
  }
LABEL_4:
  *a1 = (void *)v5;
  return a1;
}

uint64_t _s8CategoryOwet(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 3;
  if (v4 < 0) {
    int v4 = -1;
  }
  if ((v4 + 1) >= 2) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t _s8CategoryOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 3;
    }
  }
  return result;
}

uint64_t sub_25107F2E0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 3;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *sub_25107F304(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFC)
  {
    int v2 = -2147483645;
  }
  else
  {
    if (!a2) {
      return result;
    }
    int v2 = 2;
  }
  *unint64_t result = v2 + a2;
  return result;
}

ValueMetadata *type metadata accessor for HKAllowedCountries.Category()
{
  return &type metadata for HKAllowedCountries.Category;
}

void *_s11RemoteStateOwCP(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void _s11RemoteStateOwxx(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **_s11RemoteStateOwca(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      id v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    id v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  id v5 = v4;

  return a1;
}

void **_s11RemoteStateOwta(void **a1, unint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t _s11RemoteStateOwet(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t _s11RemoteStateOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_25107F524(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_25107F53C(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for HKAllowedCountries.RemoteState()
{
  return &type metadata for HKAllowedCountries.RemoteState;
}

unint64_t sub_25107F56C()
{
  unint64_t result = qword_26B211670;
  if (!qword_26B211670)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B211670);
  }
  return result;
}

id sub_25107F5AC(id result)
{
  if (result != (id)3) {
    return sub_25107E720(result);
  }
  return result;
}

unint64_t sub_25107F5C4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_251088D14();
  uint64_t v2 = sub_2510BFB38();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_251065FEC(v6, (uint64_t)&v15, (uint64_t (*)(void))sub_251088D80);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_2510849C4(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_251088DEC(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_25107F700(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_251088E60();
  uint64_t v2 = (void *)sub_2510BFB38();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_251066818((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_25107F808(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_251088C44();
  uint64_t v2 = (void *)sub_2510BFB38();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_251084980((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_25107F910(uint64_t a1)
{
  sub_251088B04();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v6 = (void *)((char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_251088B84();
  uint64_t v7 = sub_2510BFB38();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = (char *)v6 + *(int *)(v3 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v24[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v4 + 72);
  swift_retain();
  while (1)
  {
    sub_251065FEC(v13, (uint64_t)v6, (uint64_t (*)(void))sub_251088B04);
    uint64_t v15 = *v6;
    unint64_t result = sub_251084980(*v6);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v8[6] + 8 * result) = v15;
    uint64_t v19 = v8[7];
    uint64_t v20 = sub_2510BE6D8();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v19 + *(void *)(*(void *)(v20 - 8) + 72) * v18, v10, v20);
    uint64_t v21 = v8[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t FeatureStatus.PerContextEvaluation.requirementsEvaluationByContext.getter()
{
  sub_251065BFC();
  return sub_2510BF028();
}

uint64_t FeatureStatus.PerContextEvaluation.requirementsEvaluationByContext.setter()
{
  sub_251065BFC();
  return sub_2510BF038();
}

uint64_t (*FeatureStatus.PerContextEvaluation.requirementsEvaluationByContext.modify(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  sub_251065BFC();
  v2[4] = sub_2510BF018();
  return sub_25107FBE0;
}

uint64_t FeatureStatus.PerContextEvaluation.init(requirementsEvaluationByContext:)()
{
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_251065E84(0, &qword_26B212FB8);
  sub_251065E3C((unint64_t *)&unk_26B2130B0, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B2130A8, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B212FA0, type metadata accessor for HKFeatureAvailabilityContext);
  return sub_2510BF068();
}

uint64_t FeatureStatus.PerContextEvaluation.init(requirementSatisfactionByContext:)(uint64_t a1)
{
  sub_251084C3C(a1);
  swift_bridgeObjectRelease();
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_251065E84(0, &qword_26B212FB8);
  sub_251065E3C((unint64_t *)&unk_26B2130B0, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B2130A8, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B212FA0, type metadata accessor for HKFeatureAvailabilityContext);
  return sub_2510BF068();
}

id HKFeatureAvailabilityRequirementsEvaluation.init(satisfactionByRequirementIdentifier:)(uint64_t a1)
{
  swift_getKeyPath();
  swift_retain();
  sub_251085D94(a1, (uint64_t (*)(void))sub_251084FB8);
  swift_release_n();
  id v2 = objc_allocWithZone(MEMORY[0x263EFF9D8]);
  uint64_t v3 = (void *)sub_2510BF408();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v2, sel_initWithArray_, v3);

  sub_251084FC0(a1);
  swift_bridgeObjectRelease();
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(0);
  sub_251065E84(0, (unint64_t *)&qword_26B212178);
  sub_251065E3C(&qword_269B1B0D8, type metadata accessor for HKFeatureAvailabilityRequirementIdentifier);
  id v6 = (void *)sub_2510BF108();
  swift_release();
  id v7 = objc_msgSend(v5, sel_initWithRequirementIdentifiersOrderedByPriority_satisfactionByRequirementIdentifier_, v4, v6);

  return v7;
}

uint64_t FeatureStatus.PerContextEvaluation.hash(into:)()
{
  sub_251065BFC();
  sub_25108604C();
  return sub_2510BF178();
}

uint64_t static FeatureStatus.PerContextEvaluation.== infix(_:_:)()
{
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_251065E84(0, &qword_26B212FB8);
  sub_251065E3C((unint64_t *)&unk_26B2130B0, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B2130A8, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B212FA0, type metadata accessor for HKFeatureAvailabilityContext);
  sub_2510860E8((unint64_t *)&unk_26B212468, &qword_26B212FB8);
  return sub_2510BF048();
}

uint64_t sub_251080178()
{
  return 1;
}

unint64_t sub_251080188()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_2510801A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2510886D4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2510801D0()
{
  return 0;
}

void sub_2510801DC(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_2510801E8(uint64_t a1)
{
  unint64_t v2 = sub_25108612C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_251080224(uint64_t a1)
{
  unint64_t v2 = sub_25108612C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t FeatureStatus.PerContextEvaluation.encode(to:)(void *a1)
{
  sub_2510864E4(0, &qword_269B1B708, (uint64_t (*)(void))sub_25108612C, (uint64_t)&type metadata for FeatureStatus.PerContextEvaluation.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_25108612C();
  sub_2510BFD88();
  sub_251065BFC();
  sub_251065E3C(&qword_269B1B718, (void (*)(uint64_t))sub_251065BFC);
  sub_2510BFBD8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t FeatureStatus.PerContextEvaluation.hashValue.getter()
{
  return sub_2510BFD28();
}

uint64_t FeatureStatus.PerContextEvaluation.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  sub_251065BFC();
  uint64_t v4 = v3;
  uint64_t v19 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v20 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510864E4(0, &qword_269B1B720, (uint64_t (*)(void))sub_25108612C, (uint64_t)&type metadata for FeatureStatus.PerContextEvaluation.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v7 = v6;
  uint64_t v18 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  MEMORY[0x270FA5388](v10 - 8);
  unint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_25108612C();
  uint64_t v13 = v21;
  sub_2510BFD78();
  if (!v13)
  {
    uint64_t v14 = v18;
    uint64_t v15 = v19;
    sub_251065E3C(&qword_269B1B728, (void (*)(uint64_t))sub_251065BFC);
    sub_2510BFBA8();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v7);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v20, v4);
    sub_251065EC0((uint64_t)v12, v17, type metadata accessor for FeatureStatus.PerContextEvaluation);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_251080740()
{
  return sub_2510BFD28();
}

uint64_t sub_251080798()
{
  sub_251065BFC();
  sub_25108604C();
  return sub_2510BF178();
}

uint64_t sub_2510807EC()
{
  return sub_2510BFD28();
}

uint64_t sub_251080840@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FeatureStatus.PerContextEvaluation.init(from:)(a1, a2);
}

uint64_t sub_251080858(void *a1)
{
  sub_2510864E4(0, &qword_269B1B708, (uint64_t (*)(void))sub_25108612C, (uint64_t)&type metadata for FeatureStatus.PerContextEvaluation.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_25108612C();
  sub_2510BFD88();
  sub_251065BFC();
  sub_251065E3C(&qword_269B1B718, (void (*)(uint64_t))sub_251065BFC);
  sub_2510BFBD8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_251080A04()
{
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_251065E84(0, &qword_26B212FB8);
  sub_251065E3C((unint64_t *)&unk_26B2130B0, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B2130A8, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B212FA0, type metadata accessor for HKFeatureAvailabilityContext);
  sub_2510860E8((unint64_t *)&unk_26B212468, &qword_26B212FB8);
  return sub_2510BF048();
}

uint64_t (*FeatureStatus.OnboardingRecord.perContextEvaluation.modify())()
{
  return nullsub_1;
}

uint64_t FeatureStatus.OnboardingRecord.settings.getter()
{
  return sub_2510BEF28();
}

uint64_t sub_251080BB4(void **a1)
{
  uint64_t v1 = *a1;
  type metadata accessor for FeatureStatus.OnboardingRecord(0);
  sub_251065D40();
  id v2 = v1;
  return sub_2510BEF38();
}

uint64_t FeatureStatus.OnboardingRecord.settings.setter()
{
  return sub_2510BEF38();
}

uint64_t (*FeatureStatus.OnboardingRecord.settings.modify(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for FeatureStatus.OnboardingRecord(0);
  sub_251065D40();
  v2[4] = sub_2510BEF18();
  return sub_25107FBE0;
}

void sub_251080CC4(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t FeatureStatus.OnboardingRecord.allOnboardedCountryCodes.getter()
{
  type metadata accessor for FeatureStatus.OnboardingRecord(0);
  return swift_bridgeObjectRetain();
}

uint64_t FeatureStatus.OnboardingRecord.allOnboardedCountryCodes.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for FeatureStatus.OnboardingRecord(0) + 24);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*FeatureStatus.OnboardingRecord.allOnboardedCountryCodes.modify())()
{
  return nullsub_1;
}

uint64_t FeatureStatus.OnboardingRecord.dateOnboardingCompleted.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for FeatureStatus.OnboardingRecord(0) + 28);
  uint64_t v4 = sub_2510BE908();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t FeatureStatus.OnboardingRecord.dateOnboardingCompleted.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for FeatureStatus.OnboardingRecord(0) + 28);
  uint64_t v4 = sub_2510BE908();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*FeatureStatus.OnboardingRecord.dateOnboardingCompleted.modify())()
{
  return nullsub_1;
}

uint64_t FeatureStatus.OnboardingRecord.init(perContextEvaluation:settings:allOnboardedCountryCodes:dateOnboardingCompleted:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_251065D40();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251065FEC(a1, a4, type metadata accessor for FeatureStatus.PerContextEvaluation);
  sub_251065E84(0, &qword_26B2130A0);
  sub_2510BEF68();
  sub_251065F8C(a1, type metadata accessor for FeatureStatus.PerContextEvaluation);
  uint64_t v13 = (int *)type metadata accessor for FeatureStatus.OnboardingRecord(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a4 + v13[5], v12, v9);
  *(void *)(a4 + v13[6]) = a2;
  uint64_t v14 = a4 + v13[7];
  uint64_t v15 = sub_2510BE908();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14, a3, v15);
}

uint64_t FeatureStatus.OnboardingRecord.hash(into:)(uint64_t a1)
{
  sub_251065BFC();
  sub_25108604C();
  sub_2510BF178();
  uint64_t v3 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  sub_251065D40();
  sub_2510861E4();
  sub_2510BF178();
  uint64_t v4 = *(void *)(v1 + *(int *)(v3 + 24));
  swift_bridgeObjectRetain();
  sub_25108552C(a1, v4);
  swift_bridgeObjectRelease();
  sub_2510BE908();
  sub_251065E3C(&qword_269B1B740, MEMORY[0x263F07490]);
  return sub_2510BF178();
}

uint64_t static FeatureStatus.OnboardingRecord.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_251065E84(0, &qword_26B212FB8);
  sub_251065E3C((unint64_t *)&unk_26B2130B0, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B2130A8, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B212FA0, type metadata accessor for HKFeatureAvailabilityContext);
  sub_2510860E8((unint64_t *)&unk_26B212468, &qword_26B212FB8);
  if ((sub_2510BF048() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  sub_251065E84(0, &qword_26B2130A0);
  sub_2510860E8(&qword_26B212450, &qword_26B2130A0);
  if ((sub_2510BEF48() & 1) == 0
    || (sub_2510813C4(*(void *)(a1 + *(int *)(v4 + 24)), *(void *)(a2 + *(int *)(v4 + 24))) & 1) == 0)
  {
    return 0;
  }
  return sub_2510BE8E8();
}

uint64_t sub_2510813C4(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v31 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_24;
    }
    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v10 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v30) {
        return 1;
      }
      unint64_t v11 = *(void *)(v29 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v30) {
          return 1;
        }
        unint64_t v11 = *(void *)(v29 + 8 * v12);
        if (!v11) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v11 - 1) & v11;
    int64_t v31 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    uint64_t v14 = result;
    uint64_t v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    sub_2510BFD08();
    swift_bridgeObjectRetain();
    sub_2510BF2C8();
    uint64_t v18 = sub_2510BFD28();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_39;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    BOOL v22 = (void *)(v21 + 16 * v20);
    BOOL v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (sub_2510BFC28() & 1) == 0)
    {
      uint64_t v24 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v26 + 1)
      {
        uint64_t v26 = i & v24;
        if (((*(void *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        unint64_t v27 = (void *)(v21 + 16 * v26);
        BOOL v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (sub_2510BFC28() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_39:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t result = v14;
    int64_t v3 = v31;
  }
  uint64_t v13 = v3 + 4;
  if (v3 + 4 >= v30) {
    return 1;
  }
  unint64_t v11 = *(void *)(v29 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v3 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_23;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

unint64_t sub_25108164C(char a1)
{
  unint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x73676E6974746573;
      break;
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_2510816DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2510816F0()
{
  return sub_2510BFD28();
}

uint64_t sub_251081738()
{
  return sub_2510BFD18();
}

uint64_t sub_251081764()
{
  return sub_2510BFD28();
}

unint64_t sub_2510817A8()
{
  return sub_25108164C(*v0);
}

uint64_t sub_2510817B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25108875C(a1, a2);
  *a3 = result;
  return result;
}

void sub_2510817D8(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_2510817E4(uint64_t a1)
{
  unint64_t v2 = sub_251086280();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_251081820(uint64_t a1)
{
  unint64_t v2 = sub_251086280();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t FeatureStatus.OnboardingRecord.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  sub_2510864E4(0, &qword_269B1B748, (uint64_t (*)(void))sub_251086280, (uint64_t)&type metadata for FeatureStatus.OnboardingRecord.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unint64_t v9 = (char *)v12 - v8;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_251086280();
  sub_2510BFD88();
  char v16 = 0;
  type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  sub_251065E3C(&qword_269B1B758, (void (*)(uint64_t))type metadata accessor for FeatureStatus.PerContextEvaluation);
  sub_2510BFBD8();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
    char v15 = 1;
    sub_251065D40();
    sub_251065E3C(&qword_269B1B760, (void (*)(uint64_t))sub_251065D40);
    sub_2510BFBD8();
    v12[1] = *(void *)(v3 + *(int *)(v10 + 24));
    char v14 = 2;
    sub_2510862D4();
    sub_251086334(&qword_269B1B770);
    sub_2510BFBD8();
    char v13 = 3;
    sub_2510BE908();
    sub_251065E3C(&qword_269B1B778, MEMORY[0x263F07490]);
    sub_2510BFBD8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t FeatureStatus.OnboardingRecord.hashValue.getter()
{
  sub_2510BFD08();
  sub_251065BFC();
  sub_25108604C();
  sub_2510BF178();
  uint64_t v1 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  sub_251065D40();
  sub_2510861E4();
  sub_2510BF178();
  sub_25108552C((uint64_t)v3, *(void *)(v0 + *(int *)(v1 + 24)));
  sub_2510BE908();
  sub_251065E3C(&qword_269B1B740, MEMORY[0x263F07490]);
  sub_2510BF178();
  return sub_2510BFD28();
}

uint64_t FeatureStatus.OnboardingRecord.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v25 = sub_2510BE908();
  uint64_t v23 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v26 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251065D40();
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  MEMORY[0x270FA5388](v4);
  BOOL v28 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v31 = (uint64_t)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510864E4(0, &qword_269B1B780, (uint64_t (*)(void))sub_251086280, (uint64_t)&type metadata for FeatureStatus.OnboardingRecord.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v33 = v8;
  uint64_t v27 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_251086280();
  uint64_t v32 = v10;
  uint64_t v14 = v34;
  sub_2510BFD78();
  if (v14) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v15 = v28;
  uint64_t v16 = v29;
  uint64_t v17 = v30;
  char v39 = 0;
  sub_251065E3C(&qword_269B1B788, (void (*)(uint64_t))type metadata accessor for FeatureStatus.PerContextEvaluation);
  sub_2510BFBA8();
  uint64_t v18 = (uint64_t)v13;
  sub_251065EC0(v31, (uint64_t)v13, type metadata accessor for FeatureStatus.PerContextEvaluation);
  char v38 = 1;
  sub_251065E3C(&qword_269B1B790, (void (*)(uint64_t))sub_251065D40);
  sub_2510BFBA8();
  uint64_t v19 = v11;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v18 + *(int *)(v11 + 20), v15, v17);
  sub_2510862D4();
  char v37 = 2;
  sub_251086334(&qword_269B1B798);
  sub_2510BFBA8();
  *(void *)(v18 + *(int *)(v11 + 24)) = v35;
  char v36 = 3;
  sub_251065E3C(&qword_269B1B7A0, MEMORY[0x263F07490]);
  uint64_t v20 = v25;
  sub_2510BFBA8();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v32, v33);
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v18 + *(int *)(v19 + 28), v26, v20);
  sub_251065FEC(v18, v24, type metadata accessor for FeatureStatus.OnboardingRecord);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_251065F8C(v18, type metadata accessor for FeatureStatus.OnboardingRecord);
}

uint64_t sub_2510822C4(uint64_t a1)
{
  sub_2510BFD08();
  sub_251065BFC();
  sub_25108604C();
  sub_2510BF178();
  sub_251065D40();
  sub_2510861E4();
  sub_2510BF178();
  sub_25108552C((uint64_t)v4, *(void *)(v1 + *(int *)(a1 + 24)));
  sub_2510BE908();
  sub_251065E3C(&qword_269B1B740, MEMORY[0x263F07490]);
  sub_2510BF178();
  return sub_2510BFD28();
}

uint64_t sub_2510823BC(uint64_t a1, uint64_t a2)
{
  sub_251065BFC();
  sub_25108604C();
  sub_2510BF178();
  sub_251065D40();
  sub_2510861E4();
  sub_2510BF178();
  sub_25108552C(a1, *(void *)(v2 + *(int *)(a2 + 24)));
  sub_2510BE908();
  sub_251065E3C(&qword_269B1B740, MEMORY[0x263F07490]);
  return sub_2510BF178();
}

uint64_t sub_2510824A4(uint64_t a1, uint64_t a2)
{
  sub_2510BFD08();
  sub_251065BFC();
  sub_25108604C();
  sub_2510BF178();
  sub_251065D40();
  sub_2510861E4();
  sub_2510BF178();
  sub_25108552C((uint64_t)v5, *(void *)(v2 + *(int *)(a2 + 24)));
  sub_2510BE908();
  sub_251065E3C(&qword_269B1B740, MEMORY[0x263F07490]);
  sub_2510BF178();
  return sub_2510BFD28();
}

uint64_t sub_251082598@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FeatureStatus.OnboardingRecord.init(from:)(a1, a2);
}

uint64_t sub_2510825B0(void *a1)
{
  return FeatureStatus.OnboardingRecord.encode(to:)(a1);
}

uint64_t sub_2510825C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_251065E84(0, &qword_26B212FB8);
  sub_251065E3C((unint64_t *)&unk_26B2130B0, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B2130A8, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B212FA0, type metadata accessor for HKFeatureAvailabilityContext);
  sub_2510860E8((unint64_t *)&unk_26B212468, &qword_26B212FB8);
  if ((sub_2510BF048() & 1) == 0) {
    return 0;
  }
  sub_251065E84(0, &qword_26B2130A0);
  sub_2510860E8(&qword_26B212450, &qword_26B2130A0);
  if ((sub_2510BEF48() & 1) == 0
    || (sub_2510813C4(*(void *)(a1 + *(int *)(a3 + 24)), *(void *)(a2 + *(int *)(a3 + 24))) & 1) == 0)
  {
    return 0;
  }
  return sub_2510BE8E8();
}

uint64_t FeatureStatus.Eligibility.perContextEvaluation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_251065FEC(v1, a1, type metadata accessor for FeatureStatus.PerContextEvaluation);
}

uint64_t FeatureStatus.Eligibility.perContextEvaluation.setter(uint64_t a1)
{
  return sub_251086180(a1, v1);
}

uint64_t (*FeatureStatus.Eligibility.perContextEvaluation.modify())()
{
  return nullsub_1;
}

uint64_t FeatureStatus.Eligibility.init(perContextEvaluation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_251065EC0(a1, a2, type metadata accessor for FeatureStatus.PerContextEvaluation);
}

uint64_t FeatureStatus.Eligibility.hash(into:)()
{
  sub_251065BFC();
  sub_25108604C();
  return sub_2510BF178();
}

uint64_t static FeatureStatus.Eligibility.== infix(_:_:)()
{
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_251065E84(0, &qword_26B212FB8);
  sub_251065E3C((unint64_t *)&unk_26B2130B0, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B2130A8, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B212FA0, type metadata accessor for HKFeatureAvailabilityContext);
  sub_2510860E8((unint64_t *)&unk_26B212468, &qword_26B212FB8);
  return sub_2510BF048();
}

uint64_t sub_251082A14()
{
  return sub_2510BFD18();
}

unint64_t sub_251082A3C()
{
  return 0xD000000000000014;
}

uint64_t sub_251082A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_2510888FC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_251082A84(uint64_t a1)
{
  unint64_t v2 = sub_251086394();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_251082AC0(uint64_t a1)
{
  unint64_t v2 = sub_251086394();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t FeatureStatus.Eligibility.encode(to:)(void *a1)
{
  sub_2510864E4(0, &qword_269B1B7A8, (uint64_t (*)(void))sub_251086394, (uint64_t)&type metadata for FeatureStatus.Eligibility.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_251086394();
  sub_2510BFD88();
  type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  sub_251065E3C(&qword_269B1B758, (void (*)(uint64_t))type metadata accessor for FeatureStatus.PerContextEvaluation);
  sub_2510BFBD8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t FeatureStatus.Eligibility.hashValue.getter()
{
  return sub_2510BFD28();
}

uint64_t FeatureStatus.Eligibility.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v3 = type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v19 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510864E4(0, &qword_269B1B7B8, (uint64_t (*)(void))sub_251086394, (uint64_t)&type metadata for FeatureStatus.Eligibility.CodingKeys, MEMORY[0x263F8E040]);
  uint64_t v6 = v5;
  uint64_t v18 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = type metadata accessor for FeatureStatus.Eligibility(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_251086394();
  uint64_t v12 = v20;
  sub_2510BFD78();
  if (!v12)
  {
    uint64_t v13 = v18;
    sub_251065E3C(&qword_269B1B788, (void (*)(uint64_t))type metadata accessor for FeatureStatus.PerContextEvaluation);
    uint64_t v14 = (uint64_t)v19;
    sub_2510BFBA8();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v6);
    sub_251065EC0(v14, (uint64_t)v11, type metadata accessor for FeatureStatus.PerContextEvaluation);
    sub_251065EC0((uint64_t)v11, v17, type metadata accessor for FeatureStatus.Eligibility);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_251082FB8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FeatureStatus.Eligibility.init(from:)(a1, a2);
}

uint64_t sub_251082FD0(void *a1)
{
  sub_2510864E4(0, &qword_269B1B7A8, (uint64_t (*)(void))sub_251086394, (uint64_t)&type metadata for FeatureStatus.Eligibility.CodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_251086394();
  sub_2510BFD88();
  type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  sub_251065E3C(&qword_269B1B758, (void (*)(uint64_t))type metadata accessor for FeatureStatus.PerContextEvaluation);
  sub_2510BFBD8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t FeatureStatus.hash(into:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for FeatureStatus.Eligibility(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FeatureStatus(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251065FEC(v1, (uint64_t)v11, type metadata accessor for FeatureStatus);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_251065EC0((uint64_t)v11, (uint64_t)v5, type metadata accessor for FeatureStatus.Eligibility);
    sub_2510BFD18();
    sub_251065BFC();
    sub_25108604C();
    sub_2510BF178();
    uint64_t v12 = type metadata accessor for FeatureStatus.Eligibility;
    uint64_t v13 = (uint64_t)v5;
  }
  else
  {
    sub_251065EC0((uint64_t)v11, (uint64_t)v8, type metadata accessor for FeatureStatus.OnboardingRecord);
    sub_2510BFD18();
    sub_251065BFC();
    sub_25108604C();
    sub_2510BF178();
    sub_251065D40();
    sub_2510861E4();
    sub_2510BF178();
    sub_25108552C(a1, *(void *)&v8[*(int *)(v6 + 24)]);
    sub_2510BE908();
    sub_251065E3C(&qword_269B1B740, MEMORY[0x263F07490]);
    sub_2510BF178();
    uint64_t v12 = type metadata accessor for FeatureStatus.OnboardingRecord;
    uint64_t v13 = (uint64_t)v8;
  }
  return sub_251065F8C(v13, v12);
}

uint64_t sub_251083434(char a1)
{
  if (a1) {
    return 0x616F626E4F746F6ELL;
  }
  else {
    return 0x656472616F626E6FLL;
  }
}

BOOL sub_251083478(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_251083490()
{
  return sub_251083434(*v0);
}

uint64_t sub_251083498@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_251088984(a1, a2);
  *a3 = result;
  return result;
}

void sub_2510834C0(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_2510834CC(uint64_t a1)
{
  unint64_t v2 = sub_251086490();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_251083508(uint64_t a1)
{
  unint64_t v2 = sub_251086490();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_251083548(uint64_t a1)
{
  unint64_t v2 = sub_2510863E8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_251083584(uint64_t a1)
{
  unint64_t v2 = sub_2510863E8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_2510835C0()
{
  return sub_2510BFD28();
}

uint64_t sub_251083604()
{
  return sub_2510BFD28();
}

uint64_t sub_251083644@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_251088A88(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_251083670(uint64_t a1)
{
  unint64_t v2 = sub_25108643C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_2510836AC(uint64_t a1)
{
  unint64_t v2 = sub_25108643C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t FeatureStatus.encode(to:)(void *a1)
{
  unint64_t v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E0C0];
  sub_2510864E4(0, &qword_269B1B7C0, (uint64_t (*)(void))sub_2510863E8, (uint64_t)&type metadata for FeatureStatus.NotOnboardedCodingKeys, MEMORY[0x263F8E0C0]);
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v31 = (char *)&v25 - v4;
  uint64_t v29 = type metadata accessor for FeatureStatus.Eligibility(0);
  MEMORY[0x270FA5388](v29);
  uint64_t v30 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510864E4(0, &qword_269B1B7D0, (uint64_t (*)(void))sub_25108643C, (uint64_t)&type metadata for FeatureStatus.OnboardedCodingKeys, v2);
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v26 = (char *)&v25 - v7;
  uint64_t v25 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  MEMORY[0x270FA5388](v25);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for FeatureStatus(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510864E4(0, &qword_269B1B7E0, (uint64_t (*)(void))sub_251086490, (uint64_t)&type metadata for FeatureStatus.CodingKeys, v2);
  uint64_t v14 = v13;
  uint64_t v34 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v25 - v15;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_251086490();
  sub_2510BFD88();
  sub_251065FEC(v35, (uint64_t)v12, type metadata accessor for FeatureStatus);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = v30;
    sub_251065EC0((uint64_t)v12, v30, type metadata accessor for FeatureStatus.Eligibility);
    char v37 = 1;
    sub_2510863E8();
    uint64_t v18 = v31;
    sub_2510BFBC8();
    sub_251065E3C(&qword_269B1B7F0, (void (*)(uint64_t))type metadata accessor for FeatureStatus.Eligibility);
    uint64_t v19 = v33;
    sub_2510BFBD8();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v19);
    uint64_t v20 = type metadata accessor for FeatureStatus.Eligibility;
    uint64_t v21 = v17;
  }
  else
  {
    sub_251065EC0((uint64_t)v12, (uint64_t)v9, type metadata accessor for FeatureStatus.OnboardingRecord);
    char v36 = 0;
    sub_25108643C();
    uint64_t v22 = v26;
    sub_2510BFBC8();
    sub_251065E3C(&qword_269B1B7F8, (void (*)(uint64_t))type metadata accessor for FeatureStatus.OnboardingRecord);
    uint64_t v23 = v28;
    sub_2510BFBD8();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v22, v23);
    uint64_t v20 = type metadata accessor for FeatureStatus.OnboardingRecord;
    uint64_t v21 = (uint64_t)v9;
  }
  sub_251065F8C(v21, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v16, v14);
}

uint64_t FeatureStatus.hashValue.getter()
{
  sub_2510BFD08();
  FeatureStatus.hash(into:)((uint64_t)v1);
  return sub_2510BFD28();
}

uint64_t FeatureStatus.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263F8E040];
  sub_2510864E4(0, &qword_269B1B800, (uint64_t (*)(void))sub_2510863E8, (uint64_t)&type metadata for FeatureStatus.NotOnboardedCodingKeys, MEMORY[0x263F8E040]);
  uint64_t v44 = v4;
  uint64_t v46 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int64_t v50 = (char *)&v38 - v5;
  sub_2510864E4(0, &qword_269B1B808, (uint64_t (*)(void))sub_25108643C, (uint64_t)&type metadata for FeatureStatus.OnboardedCodingKeys, v3);
  uint64_t v43 = v6;
  uint64_t v45 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v49 = (char *)&v38 - v7;
  sub_2510864E4(0, &qword_269B1B810, (uint64_t (*)(void))sub_251086490, (uint64_t)&type metadata for FeatureStatus.CodingKeys, v3);
  uint64_t v47 = *(void *)(v8 - 8);
  uint64_t v48 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = type metadata accessor for FeatureStatus(0);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v38 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v38 - v18;
  __swift_project_boxed_opaque_existential_0(a1, a1[3]);
  sub_251086490();
  uint64_t v20 = v51;
  sub_2510BFD78();
  if (v20) {
    goto LABEL_7;
  }
  char v39 = v14;
  char v40 = v17;
  uint64_t v22 = v49;
  uint64_t v21 = v50;
  char v38 = v19;
  uint64_t v41 = v11;
  uint64_t v23 = v47;
  uint64_t v24 = v48;
  unint64_t v51 = a1;
  uint64_t v25 = sub_2510BFBB8();
  if (*(void *)(v25 + 16) != 1)
  {
    uint64_t v29 = sub_2510BF998();
    swift_allocError();
    uint64_t v31 = v30;
    sub_25108654C();
    *uint64_t v31 = v41;
    sub_2510BFB98();
    sub_2510BF978();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v29 - 8) + 104))(v31, *MEMORY[0x263F8DCB0], v29);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v24);
    a1 = v51;
LABEL_7:
    uint64_t v34 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v34);
  }
  if (*(unsigned char *)(v25 + 32))
  {
    char v53 = 1;
    sub_2510863E8();
    uint64_t v26 = v21;
    sub_2510BFB88();
    type metadata accessor for FeatureStatus.Eligibility(0);
    sub_251065E3C(&qword_269B1B828, (void (*)(uint64_t))type metadata accessor for FeatureStatus.Eligibility);
    uint64_t v27 = (uint64_t)v39;
    uint64_t v28 = v44;
    sub_2510BFBA8();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v26, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v24);
    swift_storeEnumTagMultiPayload();
    uint64_t v36 = v27;
  }
  else
  {
    char v52 = 0;
    sub_25108643C();
    sub_2510BFB88();
    type metadata accessor for FeatureStatus.OnboardingRecord(0);
    sub_251065E3C(&qword_269B1B830, (void (*)(uint64_t))type metadata accessor for FeatureStatus.OnboardingRecord);
    uint64_t v32 = (uint64_t)v40;
    uint64_t v33 = v43;
    sub_2510BFBA8();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v22, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v24);
    swift_storeEnumTagMultiPayload();
    uint64_t v36 = v32;
  }
  uint64_t v37 = (uint64_t)v38;
  sub_251065EC0(v36, (uint64_t)v38, type metadata accessor for FeatureStatus);
  sub_251065EC0(v37, v42, type metadata accessor for FeatureStatus);
  uint64_t v34 = (uint64_t)v51;
  return __swift_destroy_boxed_opaque_existential_1(v34);
}

uint64_t sub_251084354()
{
  sub_2510BFD08();
  FeatureStatus.hash(into:)((uint64_t)v1);
  return sub_2510BFD28();
}

uint64_t sub_251084398()
{
  sub_2510BFD08();
  FeatureStatus.hash(into:)((uint64_t)v1);
  return sub_2510BFD28();
}

uint64_t sub_2510843D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FeatureStatus.init(from:)(a1, a2);
}

uint64_t sub_2510843EC(void *a1)
{
  return FeatureStatus.encode(to:)(a1);
}

uint64_t FeatureStatus.PerContextEvaluation.init(dictionaryLiteral:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_2510865FC();
    uint64_t v1 = sub_2510BFB38();
  }
  else
  {
    uint64_t v1 = MEMORY[0x263F8EE80];
  }
  uint64_t v4 = v1;
  unint64_t v2 = (void *)swift_bridgeObjectRetain();
  sub_2510851B0(v2, 1, &v4);
  swift_bridgeObjectRelease();
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_251065E84(0, &qword_26B212FB8);
  sub_251065E3C((unint64_t *)&unk_26B2130B0, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B2130A8, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B212FA0, type metadata accessor for HKFeatureAvailabilityContext);
  return sub_2510BF068();
}

uint64_t sub_2510845A0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_2510865FC();
    uint64_t v1 = sub_2510BFB38();
  }
  else
  {
    uint64_t v1 = MEMORY[0x263F8EE80];
  }
  uint64_t v4 = v1;
  unint64_t v2 = (void *)swift_bridgeObjectRetain();
  sub_2510851B0(v2, 1, &v4);
  swift_bridgeObjectRelease();
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_251065E84(0, &qword_26B212FB8);
  sub_251065E3C((unint64_t *)&unk_26B2130B0, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B2130A8, type metadata accessor for HKFeatureAvailabilityContext);
  sub_251065E3C(&qword_26B212FA0, type metadata accessor for HKFeatureAvailabilityContext);
  return sub_2510BF068();
}

uint64_t HKFeatureAvailabilityRequirementsEvaluation.satisfactionByRequirementIdentifier.getter()
{
  id v1 = objc_msgSend(v0, sel_requirementIdentifiersOrderedByPriority);
  id v2 = objc_msgSend(v1, sel_array);

  uint64_t v3 = sub_2510BF418();
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    swift_bridgeObjectRetain();
    uint64_t v6 = (void *)MEMORY[0x263F8EE78];
    do
    {
      sub_25106FBB4(v5, (uint64_t)v15);
      sub_25106FBB4((uint64_t)v15, (uint64_t)v13);
      type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(0);
      if ((swift_dynamicCast() & 1) == 0) {
        uint64_t v14 = 0;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      uint64_t v7 = v14;
      if (v14)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = sub_251077658(0, v6[2] + 1, 1, v6);
        }
        unint64_t v9 = v6[2];
        unint64_t v8 = v6[3];
        if (v9 >= v8 >> 1) {
          uint64_t v6 = sub_251077658((void *)(v8 > 1), v9 + 1, 1, v6);
        }
        void v6[2] = v9 + 1;
        v6[v9 + 4] = v7;
      }
      v5 += 32;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)MEMORY[0x263F8EE78];
  }
  id v10 = v0;
  uint64_t v11 = sub_2510866B8((uint64_t)v6, v10);
  swift_bridgeObjectRelease();

  return v11;
}

id HKFeatureAvailabilityRequirementsEvaluation.subscript.getter(uint64_t a1)
{
  return objc_msgSend(v1, sel_isRequirementSatisfiedWithIdentifier_, a1);
}

uint64_t sub_251084930(void *a1)
{
  id v1 = a1;
  swift_getAtKeyPath();

  return v3;
}

unint64_t sub_251084980(uint64_t a1)
{
  uint64_t v2 = sub_2510BF7C8();
  return sub_251084A3C(a1, v2);
}

unint64_t sub_2510849C4(uint64_t a1, uint64_t a2)
{
  sub_2510BFD08();
  sub_2510BF2C8();
  uint64_t v4 = sub_2510BFD28();
  return sub_251084B58(a1, a2, v4);
}

unint64_t sub_251084A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_251065E84(0, (unint64_t *)&qword_26B2119A0);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = sub_2510BF7D8();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = sub_2510BF7D8();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_251084B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_2510BFC28() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_2510BFC28() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_251084C3C(uint64_t a1)
{
  sub_2510865FC();
  uint64_t result = sub_2510BFB18();
  int64_t v3 = 0;
  uint64_t v27 = a1;
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v24 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & v4;
  int64_t v25 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v26 = result + 64;
  uint64_t v28 = (void *)result;
  if ((v6 & v4) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  int64_t v29 = v3;
  for (unint64_t i = v8 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v11 << 6))
  {
    BOOL v14 = *(void **)(*(void *)(v27 + 48) + 8 * i);
    uint64_t v15 = *(void *)(*(void *)(v27 + 56) + 8 * i);
    swift_getKeyPath();
    id v30 = v14;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_251085D94(v15, (uint64_t (*)(void))sub_251084FB8);
    swift_release_n();
    id v16 = objc_allocWithZone(MEMORY[0x263EFF9D8]);
    uint64_t v17 = (void *)sub_2510BF408();
    swift_bridgeObjectRelease();
    id v18 = objc_msgSend(v16, sel_initWithArray_, v17);

    sub_251084FC0(v15);
    swift_bridgeObjectRelease();
    id v19 = objc_allocWithZone(MEMORY[0x263F0A3B0]);
    type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(0);
    sub_251065E84(0, (unint64_t *)&qword_26B212178);
    sub_251065E3C(&qword_269B1B0D8, type metadata accessor for HKFeatureAvailabilityRequirementIdentifier);
    uint64_t v20 = (void *)sub_2510BF108();
    swift_release();
    id v21 = objc_msgSend(v19, sel_initWithRequirementIdentifiersOrderedByPriority_satisfactionByRequirementIdentifier_, v18, v20);

    *(void *)(v26 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t result = (uint64_t)v28;
    *(void *)(v28[6] + 8 * i) = v30;
    *(void *)(v28[7] + 8 * i) = v21;
    uint64_t v22 = v28[2];
    BOOL v10 = __OFADD__(v22, 1);
    uint64_t v23 = v22 + 1;
    if (v10)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v28[2] = v23;
    int64_t v3 = v29;
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v10 = __OFADD__(v3, 1);
    int64_t v11 = v3 + 1;
    if (v10) {
      goto LABEL_25;
    }
    if (v11 >= v25) {
      return result;
    }
    unint64_t v12 = *(void *)(v24 + 8 * v11);
    if (!v12) {
      break;
    }
LABEL_15:
    unint64_t v7 = (v12 - 1) & v12;
    int64_t v29 = v11;
  }
  int64_t v13 = v11 + 1;
  if (v11 + 1 >= v25) {
    return result;
  }
  unint64_t v12 = *(void *)(v24 + 8 * v13);
  if (v12) {
    goto LABEL_14;
  }
  int64_t v13 = v11 + 2;
  if (v11 + 2 >= v25) {
    return result;
  }
  unint64_t v12 = *(void *)(v24 + 8 * v13);
  if (v12) {
    goto LABEL_14;
  }
  int64_t v13 = v11 + 3;
  if (v11 + 3 >= v25) {
    return result;
  }
  unint64_t v12 = *(void *)(v24 + 8 * v13);
  if (v12)
  {
LABEL_14:
    int64_t v11 = v13;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v11 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v11 >= v25) {
      return result;
    }
    unint64_t v12 = *(void *)(v24 + 8 * v11);
    ++v13;
    if (v12) {
      goto LABEL_15;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_251084FB8(void *a1)
{
  return sub_251084930(a1);
}

uint64_t sub_251084FC0(uint64_t a1)
{
  sub_251088E60();
  uint64_t result = sub_2510BFB18();
  int64_t v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v19 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v20 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = result + 64;
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v10 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    id v15 = *(id *)(*(void *)(a1 + 48) + 8 * i);
    uint64_t result = sub_2510BF498();
    *(void *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(void *)(v3[6] + 8 * i) = v15;
    *(void *)(v3[7] + 8 * i) = result;
    uint64_t v16 = v3[2];
    BOOL v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (v17)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v18;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v12 >= v20) {
      return (uint64_t)v3;
    }
    unint64_t v13 = *(void *)(v19 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v20) {
        return (uint64_t)v3;
      }
      unint64_t v13 = *(void *)(v19 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v20) {
          return (uint64_t)v3;
        }
        unint64_t v13 = *(void *)(v19 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v20) {
    return (uint64_t)v3;
  }
  unint64_t v13 = *(void *)(v19 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v20) {
      return (uint64_t)v3;
    }
    unint64_t v13 = *(void *)(v19 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_2510851B0(void *a1, char a2, void *a3)
{
  uint64_t v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v7 = (void *)a1[4];
  unint64_t v8 = (void *)a1[5];
  swift_bridgeObjectRetain();
  uint64_t v43 = v7;
  uint64_t v9 = (void *)*a3;
  id v10 = v7;
  id v11 = v8;
  unint64_t v13 = sub_251066818((uint64_t)v10);
  uint64_t v14 = v9[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15)) {
    goto LABEL_23;
  }
  char v17 = v12;
  if (v9[3] >= v16)
  {
    if (a2)
    {
      if (v12) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_2510AF314();
      if (v17) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v22 = (void *)*a3;
    *(void *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    uint64_t v23 = 8 * v13;
    *(void *)(v22[6] + v23) = v10;
    *(void *)(v22[7] + v23) = v11;
    uint64_t v24 = v22[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v26;
    uint64_t v27 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v28 = (void **)(a1 + 7);
    while (1)
    {
      int64_t v29 = *v28;
      uint64_t v43 = *(v28 - 1);
      id v30 = (void *)*a3;
      id v31 = v43;
      id v11 = v29;
      unint64_t v32 = sub_251066818((uint64_t)v31);
      uint64_t v34 = v30[2];
      BOOL v35 = (v33 & 1) == 0;
      BOOL v25 = __OFADD__(v34, v35);
      uint64_t v36 = v34 + v35;
      if (v25) {
        break;
      }
      char v37 = v33;
      if (v30[3] < v36)
      {
        sub_2510AA460(v36, 1);
        unint64_t v32 = sub_251066818((uint64_t)v31);
        if ((v37 & 1) != (v38 & 1)) {
          goto LABEL_25;
        }
      }
      if (v37) {
        goto LABEL_10;
      }
      char v39 = (void *)*a3;
      *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      uint64_t v40 = 8 * v32;
      *(void *)(v39[6] + v40) = v31;
      *(void *)(v39[7] + v40) = v11;
      uint64_t v41 = v39[2];
      BOOL v25 = __OFADD__(v41, 1);
      uint64_t v42 = v41 + 1;
      if (v25) {
        goto LABEL_24;
      }
      v39[2] = v42;
      v28 += 2;
      if (!--v27) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_2510AA460(v16, a2 & 1);
  unint64_t v18 = sub_251066818((uint64_t)v10);
  if ((v17 & 1) == (v19 & 1))
  {
    unint64_t v13 = v18;
    if ((v17 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    int64_t v20 = (void *)swift_allocError();
    swift_willThrow();
    id v21 = v20;
    sub_251067550();
    if ((swift_dynamicCast() & 1) == 0)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_2510BFC88();
  __break(1u);
LABEL_26:
  sub_2510BF928();
  sub_2510BF2F8();
  type metadata accessor for HKFeatureAvailabilityContext(0);
  sub_2510BFA68();
  sub_2510BF2F8();
  sub_2510BFAC8();
  __break(1u);
}

uint64_t sub_25108552C(uint64_t a1, uint64_t a2)
{
  sub_2510BFD28();
  uint64_t v3 = a2 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(a2 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  int64_t v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v10++, 1)) {
      goto LABEL_19;
    }
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_2510BFD18();
    }
    uint64_t v13 = *(void *)(v3 + 8 * v10);
    if (!v13) {
      break;
    }
LABEL_16:
    uint64_t v6 = (v13 - 1) & v13;
LABEL_5:
    sub_2510BFD08();
    swift_bridgeObjectRetain();
    sub_2510BF2C8();
    uint64_t v11 = sub_2510BFD28();
    uint64_t result = swift_bridgeObjectRelease();
    v9 ^= v11;
  }
  int64_t v14 = v10 + 1;
  if (v10 + 1 >= v7) {
    goto LABEL_17;
  }
  uint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    ++v10;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v10 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_17;
    }
    uint64_t v13 = *(void *)(v3 + 8 * v10);
    ++v14;
    if (v13) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_2510856C4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t _s18HealthKitAdditions13FeatureStatusO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a2;
  uint64_t v3 = type metadata accessor for FeatureStatus.Eligibility(0);
  MEMORY[0x270FA5388](v3 - 8);
  char v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for FeatureStatus.OnboardingRecord(0);
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for FeatureStatus(0);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  char v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  int64_t v14 = (char *)&v25 - v13;
  sub_251088DFC();
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  unint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)&v18[*(int *)(v16 + 56)];
  sub_251065FEC(a1, (uint64_t)v18, type metadata accessor for FeatureStatus);
  sub_251065FEC(v26, v19, type metadata accessor for FeatureStatus);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_251065FEC((uint64_t)v18, (uint64_t)v12, type metadata accessor for FeatureStatus);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_251065EC0(v19, (uint64_t)v5, type metadata accessor for FeatureStatus.Eligibility);
      type metadata accessor for HKFeatureAvailabilityContext(0);
      sub_251065E84(0, &qword_26B212FB8);
      sub_251065E3C((unint64_t *)&unk_26B2130B0, type metadata accessor for HKFeatureAvailabilityContext);
      sub_251065E3C(&qword_26B2130A8, type metadata accessor for HKFeatureAvailabilityContext);
      sub_251065E3C(&qword_26B212FA0, type metadata accessor for HKFeatureAvailabilityContext);
      sub_2510860E8((unint64_t *)&unk_26B212468, &qword_26B212FB8);
      char v20 = sub_2510BF048();
      sub_251065F8C((uint64_t)v5, type metadata accessor for FeatureStatus.Eligibility);
      sub_251065F8C((uint64_t)v12, type metadata accessor for FeatureStatus.Eligibility);
LABEL_14:
      uint64_t v23 = type metadata accessor for FeatureStatus;
      goto LABEL_15;
    }
    id v21 = type metadata accessor for FeatureStatus.Eligibility;
    uint64_t v22 = (uint64_t)v12;
  }
  else
  {
    sub_251065FEC((uint64_t)v18, (uint64_t)v14, type metadata accessor for FeatureStatus);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_251065EC0(v19, (uint64_t)v8, type metadata accessor for FeatureStatus.OnboardingRecord);
      type metadata accessor for HKFeatureAvailabilityContext(0);
      sub_251065E84(0, &qword_26B212FB8);
      sub_251065E3C((unint64_t *)&unk_26B2130B0, type metadata accessor for HKFeatureAvailabilityContext);
      sub_251065E3C(&qword_26B2130A8, type metadata accessor for HKFeatureAvailabilityContext);
      sub_251065E3C(&qword_26B212FA0, type metadata accessor for HKFeatureAvailabilityContext);
      sub_2510860E8((unint64_t *)&unk_26B212468, &qword_26B212FB8);
      if ((sub_2510BF048() & 1) != 0
        && (sub_251065E84(0, &qword_26B2130A0),
            sub_2510860E8(&qword_26B212450, &qword_26B2130A0),
            (sub_2510BEF48() & 1) != 0)
        && (sub_2510813C4(*(void *)&v14[*(int *)(v6 + 24)], *(void *)&v8[*(int *)(v6 + 24)]) & 1) != 0
        && (sub_2510BE8E8() & 1) != 0)
      {
        sub_251065F8C((uint64_t)v8, type metadata accessor for FeatureStatus.OnboardingRecord);
        sub_251065F8C((uint64_t)v14, type metadata accessor for FeatureStatus.OnboardingRecord);
        char v20 = 1;
      }
      else
      {
        sub_251065F8C((uint64_t)v8, type metadata accessor for FeatureStatus.OnboardingRecord);
        sub_251065F8C((uint64_t)v14, type metadata accessor for FeatureStatus.OnboardingRecord);
        char v20 = 0;
      }
      goto LABEL_14;
    }
    id v21 = type metadata accessor for FeatureStatus.OnboardingRecord;
    uint64_t v22 = (uint64_t)v14;
  }
  sub_251065F8C(v22, v21);
  char v20 = 0;
  uint64_t v23 = (uint64_t (*)(void))sub_251088DFC;
LABEL_15:
  sub_251065F8C((uint64_t)v18, v23);
  return v20 & 1;
}

uint64_t sub_251085D94(uint64_t a1, uint64_t (*a2)(void))
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (!v2) {
    return v3;
  }
  uint64_t v29 = MEMORY[0x263F8EE78];
  sub_2510B91BC(0, v2, 0);
  uint64_t v3 = v29;
  uint64_t result = sub_2510856C4(a1);
  uint64_t v7 = result;
  uint64_t v8 = 0;
  uint64_t v9 = a1 + 64;
  int64_t v23 = v2;
  int v24 = v6;
  uint64_t v25 = a1 + 64;
  while ((v7 & 0x8000000000000000) == 0 && v7 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v12 = (unint64_t)v7 >> 6;
    if ((*(void *)(v9 + 8 * ((unint64_t)v7 >> 6)) & (1 << v7)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v6) {
      goto LABEL_24;
    }
    id v13 = *(id *)(*(void *)(a1 + 48) + 8 * v7);
    uint64_t v14 = a2();
    type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(0);
    uint64_t v28 = v15;

    *(void *)&long long v27 = v14;
    uint64_t v29 = v3;
    unint64_t v17 = *(void *)(v3 + 16);
    unint64_t v16 = *(void *)(v3 + 24);
    if (v17 >= v16 >> 1)
    {
      sub_2510B91BC(v16 > 1, v17 + 1, 1);
      uint64_t v3 = v29;
    }
    *(void *)(v3 + 16) = v17 + 1;
    uint64_t result = (uint64_t)sub_251088DEC(&v27, (_OWORD *)(v3 + 32 * v17 + 32));
    int64_t v10 = 1 << *(unsigned char *)(a1 + 32);
    if (v7 >= v10) {
      goto LABEL_25;
    }
    uint64_t v9 = a1 + 64;
    uint64_t v18 = *(void *)(v25 + 8 * v12);
    if ((v18 & (1 << v7)) == 0) {
      goto LABEL_26;
    }
    int v6 = v24;
    if (*(_DWORD *)(a1 + 36) != v24) {
      goto LABEL_27;
    }
    unint64_t v19 = v18 & (-2 << (v7 & 0x3F));
    if (v19)
    {
      int64_t v10 = __clz(__rbit64(v19)) | v7 & 0xFFFFFFFFFFFFFFC0;
      int64_t v11 = v23;
    }
    else
    {
      unint64_t v20 = v12 + 1;
      unint64_t v21 = (unint64_t)(v10 + 63) >> 6;
      int64_t v11 = v23;
      if (v12 + 1 < v21)
      {
        unint64_t v22 = *(void *)(v25 + 8 * v20);
        if (v22)
        {
LABEL_20:
          int64_t v10 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v12)
          {
            unint64_t v22 = *(void *)(a1 + 80 + 8 * v12++);
            if (v22)
            {
              unint64_t v20 = v12 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v8;
    uint64_t v7 = v10;
    if (v8 == v11) {
      return v3;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_251085FCC()
{
  if (!qword_269B1B6F0)
  {
    type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(255);
    sub_251065E84(255, (unint64_t *)&qword_26B212178);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B1B6F0);
    }
  }
}

unint64_t sub_25108604C()
{
  unint64_t result = qword_269B1B6F8;
  if (!qword_269B1B6F8)
  {
    sub_251065BFC();
    sub_2510860E8(&qword_269B1B700, &qword_26B212FB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B6F8);
  }
  return result;
}

uint64_t sub_2510860E8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_251065E84(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_25108612C()
{
  unint64_t result = qword_269B1B710;
  if (!qword_269B1B710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B710);
  }
  return result;
}

uint64_t sub_251086180(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_2510861E4()
{
  unint64_t result = qword_269B1B730;
  if (!qword_269B1B730)
  {
    sub_251065D40();
    sub_2510860E8(&qword_269B1B738, &qword_26B2130A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B730);
  }
  return result;
}

unint64_t sub_251086280()
{
  unint64_t result = qword_269B1B750;
  if (!qword_269B1B750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B750);
  }
  return result;
}

void sub_2510862D4()
{
  if (!qword_269B1B768)
  {
    unint64_t v0 = sub_2510BF588();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1B768);
    }
  }
}

uint64_t sub_251086334(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_2510862D4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_251086394()
{
  unint64_t result = qword_269B1B7B0;
  if (!qword_269B1B7B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B7B0);
  }
  return result;
}

unint64_t sub_2510863E8()
{
  unint64_t result = qword_269B1B7C8;
  if (!qword_269B1B7C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B7C8);
  }
  return result;
}

unint64_t sub_25108643C()
{
  unint64_t result = qword_269B1B7D8;
  if (!qword_269B1B7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B7D8);
  }
  return result;
}

unint64_t sub_251086490()
{
  unint64_t result = qword_269B1B7E8;
  if (!qword_269B1B7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B7E8);
  }
  return result;
}

void sub_2510864E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void sub_25108654C()
{
  if (!qword_269B1B818)
  {
    sub_2510865BC();
    sub_2510BF988();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B1B818);
    }
  }
}

unint64_t sub_2510865BC()
{
  unint64_t result = qword_269B1B820;
  if (!qword_269B1B820)
  {
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_269B1B820);
  }
  return result;
}

void sub_2510865FC()
{
  if (!qword_269B1B838)
  {
    type metadata accessor for HKFeatureAvailabilityContext(255);
    sub_251065E84(255, &qword_26B212FB8);
    sub_251065E3C(&qword_26B212FA0, type metadata accessor for HKFeatureAvailabilityContext);
    unint64_t v0 = sub_2510BFB48();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1B838);
    }
  }
}

uint64_t sub_2510866B8(uint64_t a1, void *a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    sub_2510B91DC(0, v2, 0);
    uint64_t v3 = v13;
    int v6 = (id *)(a1 + 32);
    do
    {
      id v7 = *v6;
      unsigned __int8 v8 = objc_msgSend(a2, sel_isRequirementSatisfiedWithIdentifier_, v7);
      unint64_t v10 = *(void *)(v13 + 16);
      unint64_t v9 = *(void *)(v13 + 24);
      if (v10 >= v9 >> 1) {
        sub_2510B91DC(v9 > 1, v10 + 1, 1);
      }
      *(void *)(v13 + 16) = v10 + 1;
      uint64_t v11 = v13 + 16 * v10;
      *(void *)(v11 + 32) = v7;
      *(unsigned char *)(v11 + 40) = v8;
      ++v6;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_2510867B8()
{
  return sub_251065E3C(&qword_269B1B840, (void (*)(uint64_t))type metadata accessor for FeatureStatus.PerContextEvaluation);
}

uint64_t sub_251086800()
{
  return sub_251065E3C(&qword_269B1B848, (void (*)(uint64_t))type metadata accessor for FeatureStatus.OnboardingRecord);
}

uint64_t sub_251086848()
{
  return sub_251065E3C(&qword_269B1B850, (void (*)(uint64_t))type metadata accessor for FeatureStatus.Eligibility);
}

uint64_t sub_251086890()
{
  return sub_251065E3C(&qword_269B1B858, (void (*)(uint64_t))type metadata accessor for FeatureStatus);
}

uint64_t sub_2510868D8@<X0>(uint64_t *a1@<X8>)
{
  sub_251065BFC();
  uint64_t result = sub_2510BF028();
  *a1 = result;
  return result;
}

uint64_t sub_25108690C()
{
  return sub_2510BF038();
}

uint64_t sub_251086954@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for FeatureStatus.OnboardingRecord(0);
  sub_251065D40();
  uint64_t result = sub_2510BEF28();
  *a1 = result;
  return result;
}

uint64_t assignWithCopy for FeatureStatus(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_251065F8C(a1, type metadata accessor for FeatureStatus);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_251065BFC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    if (EnumCaseMultiPayload != 1)
    {
      int v6 = (int *)type metadata accessor for FeatureStatus.OnboardingRecord(0);
      uint64_t v7 = v6[5];
      uint64_t v8 = a1 + v7;
      uint64_t v9 = a2 + v7;
      sub_251065D40();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
      *(void *)(a1 + v6[6]) = *(void *)(a2 + v6[6]);
      uint64_t v11 = v6[7];
      uint64_t v12 = a1 + v11;
      uint64_t v13 = a2 + v11;
      uint64_t v14 = sub_2510BE908();
      uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      v15(v12, v13, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for FeatureStatus(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  sub_251065BFC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
  if (EnumCaseMultiPayload != 1)
  {
    int v6 = (int *)type metadata accessor for FeatureStatus.OnboardingRecord(0);
    uint64_t v7 = v6[5];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = a2 + v7;
    sub_251065D40();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    *(void *)(a1 + v6[6]) = *(void *)(a2 + v6[6]);
    uint64_t v11 = v6[7];
    uint64_t v12 = a1 + v11;
    uint64_t v13 = a2 + v11;
    uint64_t v14 = sub_2510BE908();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for FeatureStatus(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_251065F8C(a1, type metadata accessor for FeatureStatus);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_251065BFC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    if (EnumCaseMultiPayload != 1)
    {
      int v6 = (int *)type metadata accessor for FeatureStatus.OnboardingRecord(0);
      uint64_t v7 = v6[5];
      uint64_t v8 = a1 + v7;
      uint64_t v9 = a2 + v7;
      sub_251065D40();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      *(void *)(a1 + v6[6]) = *(void *)(a2 + v6[6]);
      uint64_t v11 = v6[7];
      uint64_t v12 = a1 + v11;
      uint64_t v13 = a2 + v11;
      uint64_t v14 = sub_2510BE908();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for FeatureStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_251086E40()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_251086E50()
{
  type metadata accessor for FeatureStatus.OnboardingRecord(319);
  if (v0 <= 0x3F)
  {
    sub_251065BFC();
    if (v1 <= 0x3F) {
      swift_initEnumMetadataMultiPayload();
    }
  }
}

uint64_t getEnumTagSinglePayload for FeatureStatus.PerContextEvaluation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_251086F38);
}

uint64_t sub_251086F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(void))sub_251065BFC);
}

uint64_t storeEnumTagSinglePayload for FeatureStatus.PerContextEvaluation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_251086F64);
}

uint64_t sub_251086F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(void))sub_251065BFC);
}

uint64_t *initializeBufferWithCopyOfBuffer for FeatureStatus.OnboardingRecord(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_251065BFC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    sub_251065D40();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = sub_2510BE908();
    unint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
  }
  return a1;
}

uint64_t initializeWithCopy for FeatureStatus.OnboardingRecord(uint64_t a1, uint64_t a2, int *a3)
{
  sub_251065BFC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_251065D40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_2510BE908();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for FeatureStatus.OnboardingRecord(uint64_t a1, uint64_t a2, int *a3)
{
  sub_251065BFC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_251065D40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_2510BE908();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t initializeWithTake for FeatureStatus.OnboardingRecord(uint64_t a1, uint64_t a2, int *a3)
{
  sub_251065BFC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_251065D40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_2510BE908();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for FeatureStatus.OnboardingRecord(uint64_t a1, uint64_t a2, int *a3)
{
  sub_251065BFC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_251065D40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_2510BE908();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureStatus.OnboardingRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25108757C);
}

uint64_t sub_25108757C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  sub_251065D40();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v14 = *(void *)(a1 + a3[6]);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    return (v14 + 1);
  }
  else
  {
    uint64_t v15 = sub_2510BE908();
    unint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[7];
    return v16(v18, a2, v17);
  }
}

uint64_t storeEnumTagSinglePayload for FeatureStatus.OnboardingRecord(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_251087710);
}

void sub_251087710(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for FeatureStatus.PerContextEvaluation(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    v11(v12, a2, a2, v10);
    return;
  }
  sub_251065D40();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6]) = (a2 - 1);
  }
  else
  {
    uint64_t v15 = sub_2510BE908();
    unint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[7];
    v16(v18, a2, a2, v17);
  }
}

void sub_251087890()
{
  sub_251065BFC();
  if (v0 <= 0x3F)
  {
    sub_251065D40();
    if (v1 <= 0x3F)
    {
      sub_2510BE908();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t _s18HealthKitAdditions13FeatureStatusO20PerContextEvaluationVwCP_0(uint64_t a1, uint64_t a2)
{
  sub_251065BFC();
  int v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t _s18HealthKitAdditions13FeatureStatusO20PerContextEvaluationVwca_0(uint64_t a1, uint64_t a2)
{
  sub_251065BFC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t _s18HealthKitAdditions13FeatureStatusO20PerContextEvaluationVwtk_0(uint64_t a1, uint64_t a2)
{
  sub_251065BFC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t _s18HealthKitAdditions13FeatureStatusO20PerContextEvaluationVwta_0(uint64_t a1, uint64_t a2)
{
  sub_251065BFC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureStatus.Eligibility(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_251087B4C);
}

uint64_t sub_251087B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for FeatureStatus.PerContextEvaluation);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);
  return v7(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for FeatureStatus.Eligibility(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_251087BE8);
}

uint64_t sub_251087BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for FeatureStatus.PerContextEvaluation);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(a1, a2, a2, v7);
}

void sub_251087C74()
{
  sub_251065BFC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for FeatureStatus.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x251087DCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureStatus.CodingKeys()
{
  return &type metadata for FeatureStatus.CodingKeys;
}

ValueMetadata *type metadata accessor for FeatureStatus.OnboardedCodingKeys()
{
  return &type metadata for FeatureStatus.OnboardedCodingKeys;
}

ValueMetadata *type metadata accessor for FeatureStatus.NotOnboardedCodingKeys()
{
  return &type metadata for FeatureStatus.NotOnboardedCodingKeys;
}

ValueMetadata *type metadata accessor for FeatureStatus.Eligibility.CodingKeys()
{
  return &type metadata for FeatureStatus.Eligibility.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FeatureStatus.OnboardingRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FeatureStatus.OnboardingRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x251087F98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureStatus.OnboardingRecord.CodingKeys()
{
  return &type metadata for FeatureStatus.OnboardingRecord.CodingKeys;
}

unsigned char *_s18HealthKitAdditions13FeatureStatusO19OnboardedCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25108806CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureStatus.PerContextEvaluation.CodingKeys()
{
  return &type metadata for FeatureStatus.PerContextEvaluation.CodingKeys;
}

unint64_t sub_2510880A8()
{
  unint64_t result = qword_269B1B860;
  if (!qword_269B1B860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B860);
  }
  return result;
}

unint64_t sub_251088100()
{
  unint64_t result = qword_269B1B868;
  if (!qword_269B1B868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B868);
  }
  return result;
}

unint64_t sub_251088158()
{
  unint64_t result = qword_269B1B870;
  if (!qword_269B1B870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B870);
  }
  return result;
}

unint64_t sub_2510881B0()
{
  unint64_t result = qword_269B1B878;
  if (!qword_269B1B878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B878);
  }
  return result;
}

unint64_t sub_251088208()
{
  unint64_t result = qword_269B1B880;
  if (!qword_269B1B880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B880);
  }
  return result;
}

unint64_t sub_251088260()
{
  unint64_t result = qword_269B1B888;
  if (!qword_269B1B888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B888);
  }
  return result;
}

unint64_t sub_2510882B8()
{
  unint64_t result = qword_269B1B890;
  if (!qword_269B1B890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B890);
  }
  return result;
}

unint64_t sub_251088310()
{
  unint64_t result = qword_269B1B898;
  if (!qword_269B1B898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B898);
  }
  return result;
}

unint64_t sub_251088368()
{
  unint64_t result = qword_269B1B8A0;
  if (!qword_269B1B8A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B8A0);
  }
  return result;
}

unint64_t sub_2510883C0()
{
  unint64_t result = qword_269B1B8A8;
  if (!qword_269B1B8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B8A8);
  }
  return result;
}

unint64_t sub_251088418()
{
  unint64_t result = qword_269B1B8B0;
  if (!qword_269B1B8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B8B0);
  }
  return result;
}

unint64_t sub_251088470()
{
  unint64_t result = qword_269B1B8B8;
  if (!qword_269B1B8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B8B8);
  }
  return result;
}

unint64_t sub_2510884C8()
{
  unint64_t result = qword_269B1B8C0;
  if (!qword_269B1B8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B8C0);
  }
  return result;
}

unint64_t sub_251088520()
{
  unint64_t result = qword_269B1B8C8;
  if (!qword_269B1B8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B8C8);
  }
  return result;
}

unint64_t sub_251088578()
{
  unint64_t result = qword_269B1B8D0;
  if (!qword_269B1B8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B8D0);
  }
  return result;
}

unint64_t sub_2510885D0()
{
  unint64_t result = qword_269B1B8D8;
  if (!qword_269B1B8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B8D8);
  }
  return result;
}

unint64_t sub_251088628()
{
  unint64_t result = qword_269B1B8E0;
  if (!qword_269B1B8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B8E0);
  }
  return result;
}

unint64_t sub_251088680()
{
  unint64_t result = qword_269B1B8E8;
  if (!qword_269B1B8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B8E8);
  }
  return result;
}

uint64_t sub_2510886D4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001FLL && a2 == 0x80000002510C55A0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_2510BFC28();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_25108875C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x80000002510C55C0 || (sub_2510BFC28() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73676E6974746573 && a2 == 0xE800000000000000 || (sub_2510BFC28() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000002510C55E0 || (sub_2510BFC28() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000002510C5600)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = sub_2510BFC28();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_2510888FC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x80000002510C55C0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_2510BFC28();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_251088984(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x656472616F626E6FLL && a2 == 0xE900000000000064;
  if (v3 || (sub_2510BFC28() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x616F626E4F746F6ELL && a2 == 0xEC00000064656472)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_2510BFC28();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_251088A88(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = sub_2510BFC28();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_251088AF8()
{
  return 12383;
}

void sub_251088B04()
{
  if (!qword_269B1B8F0)
  {
    sub_251065E84(255, (unint64_t *)&qword_26B2119A0);
    sub_2510BE6D8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B1B8F0);
    }
  }
}

void sub_251088B84()
{
  if (!qword_269B1B8F8)
  {
    sub_251065E84(255, (unint64_t *)&qword_26B2119A0);
    sub_2510BE6D8();
    sub_2510860E8((unint64_t *)&qword_26B2119A8, (unint64_t *)&qword_26B2119A0);
    unint64_t v0 = sub_2510BFB48();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1B8F8);
    }
  }
}

void sub_251088C44()
{
  if (!qword_269B1B900)
  {
    sub_251065E84(255, (unint64_t *)&qword_26B2119A0);
    sub_251065E84(255, &qword_26B2120D0);
    sub_2510860E8((unint64_t *)&qword_26B2119A8, (unint64_t *)&qword_26B2119A0);
    unint64_t v0 = sub_2510BFB48();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1B900);
    }
  }
}

void sub_251088D14()
{
  if (!qword_269B1B908)
  {
    unint64_t v0 = sub_2510BFB48();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1B908);
    }
  }
}

void sub_251088D80()
{
  if (!qword_269B1B910)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B1B910);
    }
  }
}

_OWORD *sub_251088DEC(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_251088DFC()
{
  if (!qword_26B2121D8)
  {
    type metadata accessor for FeatureStatus(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26B2121D8);
    }
  }
}

void sub_251088E60()
{
  if (!qword_269B1B918)
  {
    type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(255);
    sub_251065E84(255, (unint64_t *)&qword_26B212178);
    sub_251065E3C(&qword_269B1B0D8, type metadata accessor for HKFeatureAvailabilityRequirementIdentifier);
    unint64_t v0 = sub_2510BFB48();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1B918);
    }
  }
}

uint64_t HKHealthStore.ObserverPublisher.configuration.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

id HKHealthStore.ObserverPublisher.healthStore.getter()
{
  return *(id *)(v0 + 24);
}

unint64_t sub_251088F7C(uint64_t a1)
{
  unint64_t result = sub_251088FA4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_251088FA4()
{
  unint64_t result = qword_26B2119C0;
  if (!qword_26B2119C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2119C0);
  }
  return result;
}

void *_s17ObserverPublisherVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v4 = (void *)a2[3];
  char v5 = (void *)a1[3];
  a1[3] = v4;
  id v6 = v4;

  return a1;
}

uint64_t _s17ObserverPublisherVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  char v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  return a1;
}

void *sub_2510890D0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s17ObserverPublisherV13ConfigurationVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s17ObserverPublisherV13ConfigurationVwta(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for HKHealthStore.ObserverPublisher.Configuration()
{
  return &type metadata for HKHealthStore.ObserverPublisher.Configuration;
}

uint64_t sub_2510891D0()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_251089208()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_251089240()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

Swift::Void __swiftcall DarwinNotificationObserverToken.cancel()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_2510590E8(v2);
  os_unfair_lock_unlock(v3);
}

void *DarwinNotificationObserverToken.__allocating_init(notificationName:queue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_allocObject();
  sub_2510643D4();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0xFFFFFFFFLL;
  v4[2] = a1;
  v4[3] = v5;
  v4[4] = a2;
  return v4;
}

void *DarwinNotificationObserverToken.init(notificationName:queue:)(uint64_t a1, uint64_t a2)
{
  sub_2510643D4();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0xFFFFFFFFLL;
  v2[2] = a1;
  v2[3] = v5;
  v2[4] = a2;
  return v2;
}

uint64_t sub_251089370(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t sub_2510893C4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2510893FC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t DarwinNotificationObserverToken.deinit()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  os_unfair_lock_lock(v1 + 5);
  sub_2510590E8(&v1[4]._os_unfair_lock_opaque);
  os_unfair_lock_unlock(v1 + 5);
  swift_release();

  return v0;
}

Swift::Void __swiftcall PostDarwinNotification(name:)(Swift::String name)
{
  uint64_t v1 = sub_2510BF298();
  notify_post((const char *)(v1 + 32));
  swift_release();
}

uint64_t method lookup function for DarwinNotificationObserverToken(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DarwinNotificationObserverToken);
}

uint64_t dispatch thunk of DarwinNotificationObserverToken.__allocating_init(notificationName:queue:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

void sub_251089508(void *a1)
{
}

void sub_251089550(void *a1, void (*a2)(uint64_t), void (*a3)(void), unint64_t *a4, void (*a5)(uint64_t))
{
  int64_t v23 = a1;
  uint64_t v11 = (os_unfair_lock_s *)(*(void *)(v5 + 16) + 16);
  os_unfair_lock_lock(v11);
  if (*(unsigned char *)(v5 + 25) == 1)
  {
    *(unsigned char *)(v5 + 25) = 0;
    swift_beginAccess();
    uint64_t v12 = *(void **)(v5 + 32);
    *(void *)(v5 + 32) = a1;
    id v13 = a1;
    sub_2510606BC(v12);
    swift_beginAccess();
    uint64_t v14 = *(void *)(v5 + 40);
    int v15 = *(unsigned __int8 *)(v5 + 48);
    *(void *)(v5 + 40) = 0;
    *(unsigned char *)(v5 + 48) = 2;
    sub_251068CF0(v14, v15);
    uint64_t v16 = sub_2510606A0(v14, v15);
    (*(void (**)(uint64_t))(*(void *)v5 + 400))(v16);
    os_unfair_lock_unlock(v11);
    MEMORY[0x270FA5388](v17);
    v21[2] = &v23;
    if (v15)
    {
      if (v15 != 1) {
        return;
      }
      sub_251089D94(v14, a2, (uint64_t)v21, a3, a4, a5);
      uint64_t v18 = v14;
      char v19 = 1;
    }
    else
    {
      unint64_t v22 = a1;
      unint64_t v20 = *(void (**)(void **))(*(void *)v14 + 112);
      swift_retain();
      v20(&v22);
      sub_2510606A0(v14, 0);
      uint64_t v18 = v14;
      char v19 = 0;
    }
    sub_2510606A0(v18, v19);
  }
  else
  {
    os_unfair_lock_unlock(v11);
  }
}

uint64_t HKHealthStore.sharedSummaryTransactionPublisher()()
{
  sub_2510649F8();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s38SharedSummaryTransactionQueryPublisherCMa();
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 96) = 0;
  *(void *)(v6 + 80) = v0;
  *(void *)(v6 + 88) = 0;
  v10[1] = sub_251064B44(0);
  sub_251064ABC();
  sub_25108A320(0, (unint64_t *)&qword_26B211980, qword_26B2120E0);
  sub_2510648C4(&qword_26B211628, (void (*)(uint64_t))sub_251064ABC);
  id v7 = v0;
  sub_2510BEE68();
  swift_release();
  sub_2510648C4(&qword_26B211648, (void (*)(uint64_t))sub_2510649F8);
  uint64_t v8 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v8;
}

uint64_t sub_251089958(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + 96) = 0;
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = 0;
  return sub_251064B44(0);
}

id sub_25108999C()
{
  uint64_t v0 = swift_allocObject();
  swift_weakInit();
  id v1 = objc_allocWithZone(MEMORY[0x263F0A728]);
  uint64_t v11 = sub_25108A108;
  uint64_t v12 = v0;
  uint64_t v7 = MEMORY[0x263EF8330];
  uint64_t v8 = 1107296256;
  uint64_t v9 = sub_251089C4C;
  uint64_t v10 = &block_descriptor_9;
  uint64_t v2 = _Block_copy(&v7);
  swift_retain();
  id v3 = objc_msgSend(v1, sel_initWithHandler_, v2);
  _Block_release(v2);
  swift_release();
  swift_release();
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = sub_25108A108;
  uint64_t v12 = v4;
  uint64_t v7 = MEMORY[0x263EF8330];
  uint64_t v8 = 1107296256;
  uint64_t v9 = sub_251089C4C;
  uint64_t v10 = &block_descriptor_19;
  uint64_t v5 = _Block_copy(&v7);
  swift_release();
  objc_msgSend(v3, sel_setUpdateHandler_, v5);
  _Block_release(v5);
  return v3;
}

void sub_251089B54(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    if (a3)
    {
      id v5 = a3;
      id v6 = a3;
      sub_251089550(a3, (void (*)(uint64_t))sub_25108A124, (void (*)(void))sub_25108A13C, &qword_269B1B930, (void (*)(uint64_t))sub_25108A13C);
      swift_release();
    }
    else
    {
      if (a2)
      {
        uint64_t v7 = swift_bridgeObjectRetain();
        sub_2510BD3FC(v7);
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
  }
}

uint64_t sub_251089C4C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_251065E84(0, qword_26B2120E0);
    uint64_t v5 = sub_2510BF418();
  }
  swift_retain();
  id v8 = a2;
  id v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_251089D04(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  return sub_251089D94(a1, a2, a3, (void (*)(void))sub_25108A290, &qword_269B1B948, (void (*)(uint64_t))sub_25108A290);
}

uint64_t sub_251089D4C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  return sub_251089D94(a1, a2, a3, (void (*)(void))sub_25108A13C, &qword_269B1B930, (void (*)(uint64_t))sub_25108A13C);
}

uint64_t sub_251089D94(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, void (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t v7 = v6;
  uint64_t v9 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_2510BF888();
    a4(0);
    sub_2510648C4(a5, a6);
    uint64_t result = sub_2510BF578();
    uint64_t v9 = v30;
    uint64_t v29 = v31;
    uint64_t v14 = v32;
    int64_t v15 = v33;
    unint64_t v16 = v34;
  }
  else
  {
    uint64_t v17 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v29 = a1 + 56;
    uint64_t v14 = ~v17;
    uint64_t v18 = -v17;
    if (v18 < 64) {
      uint64_t v19 = ~(-1 << v18);
    }
    else {
      uint64_t v19 = -1;
    }
    unint64_t v16 = v19 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v15 = 0;
  }
  int64_t v28 = (unint64_t)(v14 + 64) >> 6;
  while (1)
  {
    int64_t v23 = v15;
    if ((v9 & 0x8000000000000000) == 0) {
      break;
    }
    if (!sub_2510BF8B8()) {
      return sub_25107A748();
    }
    a4(0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v22 = v35;
    swift_unknownObjectRelease();
    if (!v35) {
      return sub_25107A748();
    }
LABEL_10:
    a2(v22);
    uint64_t result = swift_release();
    if (v7) {
      return sub_25107A748();
    }
  }
  if (v16)
  {
    unint64_t v20 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    unint64_t v21 = v20 | (v15 << 6);
LABEL_9:
    uint64_t v22 = *(void *)(*(void *)(v9 + 48) + 8 * v21);
    swift_retain();
    if (!v22) {
      return sub_25107A748();
    }
    goto LABEL_10;
  }
  ++v15;
  if (!__OFADD__(v23, 1))
  {
    if (v15 >= v28) {
      return sub_25107A748();
    }
    unint64_t v24 = *(void *)(v29 + 8 * v15);
    if (!v24)
    {
      int64_t v25 = v23 + 2;
      if (v23 + 2 >= v28) {
        return sub_25107A748();
      }
      unint64_t v24 = *(void *)(v29 + 8 * v25);
      if (v24) {
        goto LABEL_22;
      }
      int64_t v25 = v23 + 3;
      if (v23 + 3 >= v28) {
        return sub_25107A748();
      }
      unint64_t v24 = *(void *)(v29 + 8 * v25);
      if (v24) {
        goto LABEL_22;
      }
      int64_t v25 = v23 + 4;
      if (v23 + 4 >= v28) {
        return sub_25107A748();
      }
      unint64_t v24 = *(void *)(v29 + 8 * v25);
      if (v24)
      {
LABEL_22:
        int64_t v15 = v25;
      }
      else
      {
        int64_t v15 = v23 + 5;
        if (v23 + 5 >= v28) {
          return sub_25107A748();
        }
        unint64_t v24 = *(void *)(v29 + 8 * v15);
        if (!v24)
        {
          int64_t v26 = v23 + 6;
          while (v28 != v26)
          {
            unint64_t v24 = *(void *)(v29 + 8 * v26++);
            if (v24)
            {
              int64_t v15 = v26 - 1;
              goto LABEL_23;
            }
          }
          return sub_25107A748();
        }
      }
    }
LABEL_23:
    unint64_t v16 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v15 << 6);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_25108A098()
{
  return swift_initClassMetadata2();
}

uint64_t sub_25108A0D0()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_25108A108(uint64_t a1, uint64_t a2, void *a3)
{
}

uint64_t sub_25108A124(uint64_t a1)
{
  return sub_25108A228(a1);
}

void sub_25108A13C()
{
  if (!qword_269B1B920)
  {
    sub_25108A1CC(255, &qword_269B1B928, (unint64_t *)&qword_26B211980, qword_26B2120E0);
    sub_251067550();
    unint64_t v0 = type metadata accessor for StreamConduitBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1B920);
    }
  }
}

void sub_25108A1CC(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  if (!*a2)
  {
    sub_25108A320(255, a3, a4);
    unint64_t PublisherResult = type metadata accessor for QueryPublisherResult();
    if (!v6) {
      atomic_store(PublisherResult, a2);
    }
  }
}

uint64_t sub_25108A228(uint64_t a1)
{
  uint64_t v3 = **(void **)(v1 + 16);
  return (*(uint64_t (**)(uint64_t *))(*(void *)a1 + 112))(&v3);
}

void sub_25108A290()
{
  if (!qword_269B1B938)
  {
    sub_25108A1CC(255, &qword_269B1B940, (unint64_t *)&qword_26B211970, &qword_26B212030);
    sub_251067550();
    unint64_t v0 = type metadata accessor for StreamConduitBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1B938);
    }
  }
}

void sub_25108A320(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_251065E84(255, a3);
    unint64_t v4 = sub_2510BF488();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t HKDateRangeQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_2510BEFA8();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t HKDateRangeQueryDescriptor.queryAttributes.setter(uint64_t a1)
{
  uint64_t v3 = sub_2510BEFA8();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*HKDateRangeQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t HKDateRangeQueryDescriptor.init()()
{
  return sub_2510BEF78();
}

uint64_t HKDateRangeQueryDescriptor.result(for:)(uint64_t a1)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = v1;
  return MEMORY[0x270FA2498](sub_25108A4A0, 0, 0);
}

uint64_t sub_25108A4A0()
{
  uint64_t v1 = (void *)v0[17];
  v0[2] = v0;
  v0[7] = v0 + 16;
  v0[3] = sub_25108A634;
  uint64_t v2 = swift_continuation_init();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  id v4 = objc_allocWithZone(MEMORY[0x263F0A9A8]);
  v0[14] = sub_25108A8FC;
  v0[15] = v3;
  v0[10] = MEMORY[0x263EF8330];
  v0[11] = 1107296256;
  v0[12] = sub_25108B824;
  v0[13] = &block_descriptor_10;
  uint64_t v5 = _Block_copy(v0 + 10);
  id v6 = v1;
  id v7 = objc_msgSend(v4, sel_initWithDateIntervalHandler_, v5);
  _Block_release(v5);
  swift_release();
  sub_2510BF798();
  objc_msgSend(v6, sel_executeQuery_, v7);

  return MEMORY[0x270FA23F0](v0 + 2);
}

uint64_t sub_25108A634()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48))
  {
    swift_willThrow();
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
    return v2();
  }
  else
  {
    uint64_t v4 = *(void *)(*v0 + 128);
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v1 + 8);
    return v5(v4);
  }
}

uint64_t sub_25108A774(uint64_t a1, uint64_t a2, void *a3, id a4, uint64_t a5)
{
  objc_msgSend(a4, sel_stopQuery_, a1);
  if (a2)
  {
    **(void **)(*(void *)(a5 + 64) + 40) = a2;
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResume();
  }
  else
  {
    if (a3)
    {
      uint64_t v9 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_2510A5D38(MEMORY[0x263F8EE78]);
      sub_25108BB9C((unint64_t *)&qword_269B1B1A8, type metadata accessor for HKError);
      sub_2510BE828();
      uint64_t v9 = v12;
    }
    sub_251067550();
    swift_allocError();
    *uint64_t v10 = v9;
    id v11 = a3;
    return swift_continuation_throwingResumeWithError();
  }
}

uint64_t sub_25108A8C4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25108A8FC(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_25108A774(a1, a2, a3, *(id *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_25108A904(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_251079C6C;
  v5[17] = a2;
  v5[18] = v2;
  return MEMORY[0x270FA2498](sub_25108A4A0, 0, 0);
}

uint64_t HKDateRangeQueryDescriptor.Results.Iterator.next()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  sub_25108CA50(0, &qword_269B1B960, MEMORY[0x263F8F6A8]);
  *uint64_t v1 = v0;
  v1[1] = sub_25108AA80;
  return MEMORY[0x270FA2100](v0 + 16, v2);
}

uint64_t sub_25108AA80()
{
  *(void *)(*(void *)v1 + 32) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_25108ABB0;
  }
  else {
    uint64_t v2 = sub_25108AB94;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25108AB94()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_25108ABB0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_25108ABC8(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 32) = v2;
  sub_25108CA50(0, &qword_269B1B960, MEMORY[0x263F8F6A8]);
  *uint64_t v2 = v1;
  v2[1] = sub_25108AC98;
  return MEMORY[0x270FA2100](v1 + 16, v3);
}

uint64_t sub_25108AC98()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_25108ADCC;
  }
  else {
    uint64_t v2 = sub_25108ADAC;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25108ADAC()
{
  **(void **)(v0 + 24) = *(void *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_25108ADCC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_25108ADE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = (void *)swift_task_alloc();
  v4[8] = v5;
  sub_25108CA50(0, &qword_269B1B960, MEMORY[0x263F8F6A8]);
  *uint64_t v5 = v4;
  v5[1] = sub_25108AEB8;
  return MEMORY[0x270FA2100](v4 + 2, v6);
}

uint64_t sub_25108AEB8()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_25108B084;
  }
  else {
    uint64_t v2 = sub_25108AFCC;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_25108AFCC()
{
  uint64_t v1 = v0[5];
  v0[10] = v0[2];
  if (v1)
  {
    swift_getObjectType();
    uint64_t v2 = sub_2510BF4A8();
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v4 = 0;
  }
  return MEMORY[0x270FA2498](sub_25108B060, v2, v4);
}

uint64_t sub_25108B060()
{
  **(void **)(v0 + 32) = *(void *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_25108B084()
{
  if (*(void *)(v0 + 40))
  {
    swift_getObjectType();
    uint64_t v1 = sub_2510BF4A8();
    uint64_t v3 = v2;
  }
  else
  {
    uint64_t v1 = 0;
    uint64_t v3 = 0;
  }
  return MEMORY[0x270FA2498](sub_25108B110, v1, v3);
}

uint64_t sub_25108B110()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = (void *)v0[7];
  v0[3] = v1;
  sub_251067550();
  swift_willThrowTypedImpl();
  *uint64_t v2 = v1;
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t HKDateRangeQueryDescriptor.Results.makeAsyncIterator()()
{
  sub_25108BA0C();
  return sub_2510BEFE8();
}

uint64_t sub_25108B1E0()
{
  sub_25108BA0C();
  sub_2510BEFE8();
  return sub_25108C8A4(v0);
}

uint64_t HKDateRangeQueryDescriptor.results(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t Descriptor = type metadata accessor for HKDateRangeQueryDescriptor(0);
  uint64_t v5 = *(void *)(Descriptor - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x270FA5388](Descriptor - 8);
  sub_25108BA84(v2, (uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  sub_25108BAEC((uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  sub_25108B920();
  id v9 = a1;
  return sub_2510BEFF8();
}

id sub_25108B340(uint64_t a1)
{
  sub_25108CA50(0, &qword_269B1B9D0, MEMORY[0x263F8F690]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)aBlock - v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - v5, a1, v3);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, v6, v3);
  id v9 = objc_allocWithZone(MEMORY[0x263F0A9A8]);
  aBlock[4] = sub_25108C9AC;
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25108B824;
  void aBlock[3] = &block_descriptor_29;
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = objc_msgSend(v9, sel_initWithDateIntervalHandler_, v10);
  _Block_release(v10);
  swift_release();
  sub_2510BF798();
  return v11;
}

uint64_t sub_25108B524(uint64_t a1, void *a2, void *a3)
{
  sub_25108CA50(0, &qword_269B1B9D8, MEMORY[0x263F8F670]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v9 = (char *)&v13 - v8;
  if (a2)
  {
    uint64_t v14 = a2;
    sub_25108CA50(0, &qword_269B1B9D0, MEMORY[0x263F8F690]);
    swift_bridgeObjectRetain();
    sub_2510BF4C8();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    id v11 = a3;
    if (!a3)
    {
      type metadata accessor for HKError(0);
      uint64_t v13 = 0;
      sub_2510A5D38(MEMORY[0x263F8EE78]);
      sub_25108BB9C((unint64_t *)&qword_269B1B1A8, type metadata accessor for HKError);
      sub_2510BE828();
      id v11 = v14;
    }
    uint64_t v14 = v11;
    id v12 = a3;
    sub_25108CA50(0, &qword_269B1B9D0, MEMORY[0x263F8F690]);
    return sub_2510BF4D8();
  }
}

uint64_t sub_25108B714(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x270FA5388](a1);
  sub_25108BA84(v2, (uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  sub_25108BAEC((uint64_t)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6);
  sub_25108B920();
  id v8 = a1;
  return sub_2510BEFF8();
}

uint64_t sub_25108B824(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_25108B9CC();
    sub_2510BE6D8();
    sub_25108BB9C((unint64_t *)&qword_26B2119A8, (void (*)(uint64_t))sub_25108B9CC);
    uint64_t v5 = sub_2510BF118();
  }
  swift_retain();
  id v8 = a2;
  id v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_25108B920()
{
  if (!qword_269B1B968)
  {
    sub_25108B9CC();
    sub_2510BE6D8();
    sub_25108BB9C((unint64_t *)&qword_26B2119A8, (void (*)(uint64_t))sub_25108B9CC);
    unint64_t v0 = sub_2510BF138();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1B968);
    }
  }
}

unint64_t sub_25108B9CC()
{
  unint64_t result = qword_26B2119A0;
  if (!qword_26B2119A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B2119A0);
  }
  return result;
}

void sub_25108BA0C()
{
  if (!qword_269B1B970[0])
  {
    sub_25108B920();
    unint64_t v0 = sub_2510BF008();
    if (!v1) {
      atomic_store(v0, qword_269B1B970);
    }
  }
}

uint64_t type metadata accessor for HKDateRangeQueryDescriptor(uint64_t a1)
{
  return sub_251065BC4(a1, (uint64_t *)&unk_269B1B9A0);
}

uint64_t sub_25108BA84(uint64_t a1, uint64_t a2)
{
  uint64_t Descriptor = type metadata accessor for HKDateRangeQueryDescriptor(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Descriptor - 8) + 16))(a2, a1, Descriptor);
  return a2;
}

uint64_t sub_25108BAEC(uint64_t a1, uint64_t a2)
{
  uint64_t Descriptor = type metadata accessor for HKDateRangeQueryDescriptor(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Descriptor - 8) + 32))(a2, a1, Descriptor);
  return a2;
}

uint64_t sub_25108BB54()
{
  return sub_25108BB9C(&qword_269B1B990, (void (*)(uint64_t))type metadata accessor for HKDateRangeQueryDescriptor.Results.Iterator);
}

uint64_t sub_25108BB9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for HKDateRangeQueryDescriptor.Results.Iterator(uint64_t a1)
{
  return sub_251065BC4(a1, (uint64_t *)&unk_269B1B9C0);
}

uint64_t sub_25108BC04()
{
  return sub_25108BB9C(&qword_269B1B998, (void (*)(uint64_t))type metadata accessor for HKDateRangeQueryDescriptor.Results);
}

uint64_t type metadata accessor for HKDateRangeQueryDescriptor.Results(uint64_t a1)
{
  return sub_251065BC4(a1, (uint64_t *)&unk_269B1B9B0);
}

uint64_t initializeBufferWithCopyOfBuffer for HKDateRangeQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25108BD84(a1, a2, a3, MEMORY[0x263F08FC8]);
}

uint64_t destroy for HKDateRangeQueryDescriptor(uint64_t a1, uint64_t a2)
{
  return sub_25108BE0C(a1, a2, MEMORY[0x263F08FC8]);
}

uint64_t initializeWithCopy for HKDateRangeQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25108BE8C(a1, a2, a3, MEMORY[0x263F08FC8]);
}

uint64_t assignWithCopy for HKDateRangeQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25108BF0C(a1, a2, a3, MEMORY[0x263F08FC8]);
}

uint64_t initializeWithTake for HKDateRangeQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25108BF8C(a1, a2, a3, MEMORY[0x263F08FC8]);
}

uint64_t assignWithTake for HKDateRangeQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25108C00C(a1, a2, a3, MEMORY[0x263F08FC8]);
}

uint64_t getEnumTagSinglePayload for HKDateRangeQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25108BD10);
}

uint64_t sub_25108BD10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, MEMORY[0x263F08FC8]);
}

uint64_t storeEnumTagSinglePayload for HKDateRangeQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25108BD3C);
}

uint64_t sub_25108BD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, MEMORY[0x263F08FC8]);
}

uint64_t sub_25108BD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25108C1C8(a1, a2, a3, MEMORY[0x263F08FC8]);
}

uint64_t initializeBufferWithCopyOfBuffer for HKDateRangeQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25108BD84(a1, a2, a3, (uint64_t (*)(void))sub_25108BA0C);
}

uint64_t sub_25108BD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  uint64_t v7 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  return v7(a1, a2, v6);
}

uint64_t destroy for HKDateRangeQueryDescriptor.Results(uint64_t a1, uint64_t a2)
{
  return sub_25108BE0C(a1, a2, (uint64_t (*)(void))sub_25108BA0C);
}

uint64_t sub_25108BE0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  return v5(a1, v4);
}

uint64_t initializeWithCopy for HKDateRangeQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25108BE8C(a1, a2, a3, (uint64_t (*)(void))sub_25108BA0C);
}

uint64_t sub_25108BE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  return a1;
}

uint64_t assignWithCopy for HKDateRangeQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25108BF0C(a1, a2, a3, (uint64_t (*)(void))sub_25108BA0C);
}

uint64_t sub_25108BF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  return a1;
}

uint64_t initializeWithTake for HKDateRangeQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25108BF8C(a1, a2, a3, (uint64_t (*)(void))sub_25108BA0C);
}

uint64_t sub_25108BF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  return a1;
}

uint64_t assignWithTake for HKDateRangeQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25108C00C(a1, a2, a3, (uint64_t (*)(void))sub_25108BA0C);
}

uint64_t sub_25108C00C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKDateRangeQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25108C088);
}

uint64_t sub_25108C088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, (uint64_t (*)(void))sub_25108BA0C);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);
  return v7(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for HKDateRangeQueryDescriptor.Results(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25108C124);
}

uint64_t sub_25108C124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, (uint64_t (*)(void))sub_25108BA0C);
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  id v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  return v8(a1, a2, a2, v7);
}

uint64_t sub_25108C1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25108C1C8(a1, a2, a3, (uint64_t (*)(uint64_t))sub_25108BA0C);
}

uint64_t sub_25108C1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HKDateRangeQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2)
{
  sub_25108CA50(0, &qword_269B1B960, MEMORY[0x263F8F6A8]);
  unint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t destroy for HKDateRangeQueryDescriptor.Results.Iterator(uint64_t a1)
{
  sub_25108CA50(0, &qword_269B1B960, MEMORY[0x263F8F6A8]);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for HKDateRangeQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2)
{
  sub_25108CA50(0, &qword_269B1B960, MEMORY[0x263F8F6A8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for HKDateRangeQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2)
{
  sub_25108CA50(0, &qword_269B1B960, MEMORY[0x263F8F6A8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for HKDateRangeQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2)
{
  sub_25108CA50(0, &qword_269B1B960, MEMORY[0x263F8F6A8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for HKDateRangeQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2)
{
  sub_25108CA50(0, &qword_269B1B960, MEMORY[0x263F8F6A8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKDateRangeQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25108C588);
}

uint64_t sub_25108C588(uint64_t a1, uint64_t a2)
{
  sub_25108CA50(0, &qword_269B1B960, MEMORY[0x263F8F6A8]);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for HKDateRangeQueryDescriptor.Results.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25108C624);
}

uint64_t sub_25108C624(uint64_t a1, uint64_t a2)
{
  sub_25108CA50(0, &qword_269B1B960, MEMORY[0x263F8F6A8]);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

void sub_25108C6B0()
{
  sub_25108CA50(319, &qword_269B1B960, MEMORY[0x263F8F6A8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v1 = *(void *)(type metadata accessor for HKDateRangeQueryDescriptor(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = sub_2510BEFA8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  return MEMORY[0x270FA0238](v0, v4, v5);
}

id sub_25108C834(uint64_t a1)
{
  type metadata accessor for HKDateRangeQueryDescriptor(0);
  return sub_25108B340(a1);
}

uint64_t sub_25108C8A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for HKDateRangeQueryDescriptor.Results(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25108C900()
{
  sub_25108CA50(0, &qword_269B1B9D0, MEMORY[0x263F8F690]);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25108C9AC(uint64_t a1, void *a2, void *a3)
{
  sub_25108CA50(0, &qword_269B1B9D0, MEMORY[0x263F8F690]);
  return sub_25108B524(a1, a2, a3);
}

void sub_25108CA50(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    sub_25108B920();
    uint64_t v7 = v6;
    unint64_t v8 = sub_251067550();
    unint64_t v9 = a3(a1, v7, v8, MEMORY[0x263F8E4E0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

BOOL static RelativeDate.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t RelativeDate.hash(into:)()
{
  return sub_2510BFD18();
}

uint64_t RelativeDate.hashValue.getter()
{
  return sub_2510BFD28();
}

uint64_t RelativeDate.init(day:today:)(char *a1, char *a2)
{
  uint64_t v4 = sub_2510BF0E8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v15 - v9;
  sub_2510BF0A8();
  sub_2510BF078();
  char v11 = sub_2510BF088();
  id v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  if (v11)
  {
    v12(a2, v4);
    v12(a1, v4);
    v12(v10, v4);
    return 0;
  }
  else
  {
    sub_2510BF078();
    sub_25108CD38();
    char v14 = sub_2510BF1B8();
    v12(a2, v4);
    v12(a1, v4);
    v12(v8, v4);
    v12(v10, v4);
    if (v14) {
      return 2;
    }
    else {
      return 1;
    }
  }
}

unint64_t sub_25108CD38()
{
  unint64_t result = qword_269B1B9E0;
  if (!qword_269B1B9E0)
  {
    sub_2510BF0E8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B9E0);
  }
  return result;
}

unint64_t sub_25108CD94()
{
  unint64_t result = qword_269B1B9E8;
  if (!qword_269B1B9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1B9E8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RelativeDate(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25108CEB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RelativeDate()
{
  return &type metadata for RelativeDate;
}

uint64_t sub_25108CEEC()
{
  return sub_25108D12C(&qword_269B1B9F0, type metadata accessor for HKCategoryValueCoachingEvent);
}

uint64_t sub_25108CF34()
{
  return sub_25108D12C(&qword_269B1B9F8, type metadata accessor for HKCategoryValueCoachingEvent);
}

uint64_t sub_25108CF7C()
{
  return sub_25108D12C(&qword_269B1BA00, type metadata accessor for HKCategoryValueWatchActivation);
}

uint64_t sub_25108CFC4()
{
  return sub_25108D12C(&qword_269B1BA08, type metadata accessor for HKCategoryValueWatchActivation);
}

uint64_t sub_25108D00C()
{
  return sub_25108D12C(&qword_269B1BA10, type metadata accessor for HKCategoryValueWheelchairUseChanged);
}

uint64_t sub_25108D054()
{
  return sub_25108D12C(&qword_269B1BA18, type metadata accessor for HKCategoryValueWheelchairUseChanged);
}

uint64_t sub_25108D09C()
{
  return sub_25108D12C(&qword_269B1BA20, type metadata accessor for HKCategoryValueWristEvent);
}

uint64_t sub_25108D0E4()
{
  return sub_25108D12C((unint64_t *)&unk_269B1BA28, type metadata accessor for HKCategoryValueWristEvent);
}

uint64_t sub_25108D12C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Comparable.clamped(within:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510BFC58();
  sub_2510BF208();
  sub_2510BFC68();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t sub_25108D290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return DownstreamHandlerSubscription.sendValueToDownstreamIfNeeded(_:)(a1, *v3, a2, a3);
}

uint64_t sub_25108D2BC@<X0>(char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return DownstreamHandlerSubscription.sendCompletionToDownstreamIfNeeded(_:)(a1, *v3, a2, a3);
}

uint64_t DownstreamHandlerSubscription.sendCompletionToDownstreamIfNeeded(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void (*v17)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t AssociatedConformanceWitness;
  uint64_t v51;
  void v52[3];
  uint64_t v53;
  uint64_t v54;

  uint64_t v5 = v4;
  uint64_t v42 = a1;
  uint64_t v46 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v40 = (char *)&v39 - v9;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v51 = AssociatedTypeWitness;
  uint64_t v49 = type metadata accessor for DownstreamHandlerSubscriptionState();
  uint64_t v45 = *(void *)(v49 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v49);
  uint64_t v41 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  char v14 = (char *)&v39 - v13;
  MEMORY[0x270FA5388](v12);
  unint64_t v16 = (char *)&v39 - v15;
  uint64_t v17 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 32);
  v17(v52, a2, a3);
  uint64_t v18 = v53;
  uint64_t v19 = v54;
  __swift_project_boxed_opaque_existential_0(v52, v53);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  uint64_t v43 = a2;
  uint64_t v44 = v5;
  uint64_t v47 = v17;
  v17(v52, a2, a3);
  unint64_t v20 = v53;
  unint64_t v21 = v54;
  __swift_project_boxed_opaque_existential_0(v52, v53);
  uint64_t v22 = v20;
  int64_t v23 = v45;
  unint64_t v24 = v49;
  (*(void (**)(uint64_t, uint64_t))(v21 + 16))(v22, v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v14, v16, v24);
  if (swift_getEnumCaseMultiPayload() == 1
    && (*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v14, 1, v51) == 1)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v24);
    int64_t v25 = v46;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v46, 1, 1, v51);
    int64_t v26 = type metadata accessor for DownstreamHandlerSubscriptionState.Inactive();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 0, 1, v26);
  }
  else
  {
    long long v27 = v48;
    int64_t v28 = v40;
    uint64_t v29 = v51;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v40, v14, v51);
    uint64_t v42 = v16;
    sub_2510BECE8();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
    uint64_t v30 = v43;
    v47(v52, v43, a3);
    uint64_t v31 = v23;
    uint64_t v32 = v53;
    int64_t v33 = v54;
    __swift_project_boxed_opaque_existential_0(v52, v53);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    unint64_t v34 = v41;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v41, 1, 1, v29);
    uint64_t v35 = v49;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t, uint64_t))(a3 + 48))(v34, v30, a3);
    v47(v52, v30, a3);
    uint64_t v36 = v53;
    char v37 = v54;
    __swift_project_boxed_opaque_existential_0(v52, v53);
    (*(void (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
    (*(void (**)(uint64_t, uint64_t))(a3 + 88))(v30, a3);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v42, v35);
  }
  type metadata accessor for DownstreamHandlerSendFailureReason();
  swift_getWitnessTable();
  sub_2510BFD68();
  return swift_storeEnumTagMultiPayload();
}

Swift::Void __swiftcall DownstreamHandlerSubscription.cancel()()
{
  void (*v15)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char *v25;
  void (*v26)(void *__return_ptr, uint64_t, uint64_t);
  void v27[3];
  uint64_t v28;
  uint64_t v29;

  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for DownstreamHandlerSubscriptionState();
  int64_t v23 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  int64_t v25 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v22 - v8;
  int64_t v26 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 32);
  v26(v27, v3, v2);
  uint64_t v11 = v28;
  uint64_t v10 = v29;
  __swift_project_boxed_opaque_existential_0(v27, v28);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  (*(void (**)(uint64_t, uint64_t))(v2 + 40))(v3, v2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
    int v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, AssociatedTypeWitness);
    uint64_t v14 = type metadata accessor for DownstreamHandlerSubscriptionState.Inactive();
    (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v9, v14);
    uint64_t v15 = v26;
    if (v13 == 1)
    {
      v26(v27, v3, v2);
      unint64_t v16 = v28;
      uint64_t v17 = v29;
      __swift_project_boxed_opaque_existential_0(v27, v28);
      (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v5);
    uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v15 = v26;
  }
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  uint64_t v19 = v25;
  v18(v25, 1, 1, AssociatedTypeWitness);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 48))(v19, v3, v2);
  v15(v27, v3, v2);
  unint64_t v20 = v28;
  unint64_t v21 = v29;
  __swift_project_boxed_opaque_existential_0(v27, v28);
  (*(void (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  (*(void (**)(uint64_t, uint64_t))(v2 + 88))(v3, v2);
}

uint64_t static Result<>.success.getter()
{
  sub_2510BFD68();
  return swift_storeEnumTagMultiPayload();
}

void *sub_25108DCB4(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = *(void *)(v6 + 64) + 1;
  }
  if (v7 >= 2) {
    size_t v9 = v8;
  }
  else {
    size_t v9 = v8 + 1;
  }
  uint64_t v10 = *(_DWORD *)(v6 + 80);
  if (v10 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v9 > 0x18)
  {
    uint64_t v13 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    if (v7 > 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, void, uint64_t))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), v5) >= 2)
      {
LABEL_37:
        memcpy(a1, a2, v9);
        return a1;
      }
    }
    else if (a2[v8])
    {
      int v14 = (a2[v8] - 1) << (8 * v8);
      if (v8 > 3) {
        int v14 = 0;
      }
      if (v8)
      {
        int v15 = v8 <= 3 ? v8 : 4;
        switch(v15)
        {
          case 2:
            int v16 = *(unsigned __int16 *)a2;
            break;
          case 3:
            int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            break;
          case 4:
            int v16 = *(_DWORD *)a2;
            break;
          default:
            int v16 = *a2;
            break;
        }
      }
      else
      {
        int v16 = 0;
      }
      if ((v16 | v14) != 0xFFFFFFFF) {
        goto LABEL_37;
      }
    }
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      if (v7 > 1) {
        return a1;
      }
      goto LABEL_31;
    }
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    if (v7 <= 1) {
LABEL_31:
    }
      *((unsigned char *)a1 + v8) = 0;
  }
  return a1;
}

unsigned __int16 *sub_25108DEF0(unsigned __int16 *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    uint64_t v6 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v6 = *(void *)(v4 + 64) + 1;
  }
  uint64_t v9 = *(void *)(v3 - 8);
  if (v5 > 1)
  {
    uint64_t result = (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))(v4 + 48))(result);
    uint64_t v4 = v9;
    if (result >= 2) {
      return result;
    }
    goto LABEL_19;
  }
  if (!*((unsigned char *)result + v6)) {
    goto LABEL_19;
  }
  int v7 = (*((unsigned __int8 *)result + v6) - 1) << (8 * v6);
  if (v6 > 3) {
    int v7 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *result;
        break;
      case 3:
        LODWORD(v6) = *result | (*((unsigned __int8 *)result + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)result;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)result;
        break;
    }
  }
  if ((v6 | v7) == 0xFFFFFFFF)
  {
LABEL_19:
    uint64_t result = (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
    if (!result)
    {
      size_t v8 = *(uint64_t (**)(unsigned __int16 *, uint64_t))(v9 + 8);
      return (unsigned __int16 *)v8(v2, v3);
    }
  }
  return result;
}

void *sub_25108E090(void *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = *(void *)(v6 + 64) + 1;
  }
  if (v7 <= 1)
  {
    if (*((unsigned char *)a2 + v8))
    {
      int v9 = (*((unsigned __int8 *)a2 + v8) - 1) << (8 * v8);
      if (v8 > 3) {
        int v9 = 0;
      }
      if (v8)
      {
        int v10 = v8 <= 3 ? v8 : 4;
        switch(v10)
        {
          case 2:
            int v11 = *a2;
            break;
          case 3:
            int v11 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
            break;
          case 4:
            int v11 = *(_DWORD *)a2;
            break;
          default:
            int v11 = *(unsigned __int8 *)a2;
            break;
        }
      }
      else
      {
        int v11 = 0;
      }
      if ((v11 | v9) != 0xFFFFFFFF) {
        goto LABEL_25;
      }
    }
LABEL_15:
    if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      if (v7 > 1) {
        return a1;
      }
    }
    else
    {
      (*(void (**)(void *, unsigned __int16 *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      if (v7 > 1) {
        return a1;
      }
    }
    *((unsigned char *)a1 + v8) = 0;
    return a1;
  }
  if ((*(unsigned int (**)(unsigned __int16 *, void, uint64_t))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), v5) < 2)goto LABEL_15; {
LABEL_25:
  }
  if (v7 >= 2) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  memcpy(a1, a2, v12);
  return a1;
}

unsigned __int16 *sub_25108E288(unsigned __int16 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = *(void *)(v6 + 64) + 1;
  }
  if (v7 <= 1)
  {
    char v9 = 8 * v8;
    if (*((unsigned char *)a1 + v8))
    {
      int v10 = (*((unsigned __int8 *)a1 + v8) - 1) << v9;
      if (v8 > 3) {
        int v10 = 0;
      }
      if (v8)
      {
        int v11 = v8 <= 3 ? v8 : 4;
        switch(v11)
        {
          case 2:
            int v12 = *a1;
            break;
          case 3:
            int v12 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v12 = *(_DWORD *)a1;
            break;
          default:
            int v12 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v12 = 0;
      }
      if ((v12 | v10) != 0xFFFFFFFF)
      {
        if (a2[v8])
        {
          int v16 = (a2[v8] - 1) << v9;
          if (v8 > 3) {
            int v16 = 0;
          }
          if (v8)
          {
            int v17 = v8 <= 3 ? v8 : 4;
            switch(v17)
            {
              case 2:
                int v18 = *(unsigned __int16 *)a2;
                break;
              case 3:
                int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
                break;
              case 4:
                int v18 = *(_DWORD *)a2;
                break;
              default:
                int v18 = *a2;
                break;
            }
          }
          else
          {
            int v18 = 0;
          }
          if ((v18 | v16) != 0xFFFFFFFF) {
            goto LABEL_62;
          }
        }
LABEL_66:
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
        {
          memcpy(a1, a2, v8);
          if (v7 > 1) {
            return a1;
          }
        }
        else
        {
          (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
          (*(void (**)(unsigned __int16 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
          if (v7 > 1) {
            return a1;
          }
        }
        *((unsigned char *)a1 + v8) = 0;
        return a1;
      }
    }
    if (a2[v8])
    {
      int v19 = (a2[v8] - 1) << v9;
      if (v8 > 3) {
        int v19 = 0;
      }
      if (v8)
      {
        int v20 = v8 <= 3 ? v8 : 4;
        switch(v20)
        {
          case 2:
            int v21 = *(unsigned __int16 *)a2;
            break;
          case 3:
            int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            break;
          case 4:
            int v21 = *(_DWORD *)a2;
            break;
          default:
            int v21 = *a2;
            break;
        }
      }
      else
      {
        int v21 = 0;
      }
      if ((v21 | v19) != 0xFFFFFFFF)
      {
        uint64_t v13 = *(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
LABEL_49:
        if (!v13(a1, 1, v5)) {
          (*(void (**)(unsigned __int16 *, uint64_t))(v6 + 8))(a1, v5);
        }
        goto LABEL_62;
      }
    }
LABEL_51:
    uint64_t v22 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
    int v23 = v22(a1, 1, v5);
    int v24 = v22((unsigned __int16 *)a2, 1, v5);
    if (v23)
    {
      if (!v24)
      {
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        (*(void (**)(unsigned __int16 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
        return a1;
      }
    }
    else
    {
      if (!v24)
      {
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v6 + 24))(a1, a2, v5);
        return a1;
      }
      (*(void (**)(unsigned __int16 *, uint64_t))(v6 + 8))(a1, v5);
    }
    memcpy(a1, a2, v8);
    return a1;
  }
  uint64_t v13 = *(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
  unsigned int v14 = v13(a1, *(unsigned int *)(v6 + 84), v5);
  unsigned int v15 = v13((unsigned __int16 *)a2, v7, v5);
  if (v14 < 2)
  {
    if (v15 >= 2) {
      goto LABEL_49;
    }
    goto LABEL_51;
  }
  if (v15 < 2) {
    goto LABEL_66;
  }
LABEL_62:
  if (v7 >= 2) {
    size_t v25 = v8;
  }
  else {
    size_t v25 = v8 + 1;
  }
  memcpy(a1, a2, v25);
  return a1;
}

void *sub_25108E700(void *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = *(void *)(v6 + 64) + 1;
  }
  if (v7 <= 1)
  {
    if (*((unsigned char *)a2 + v8))
    {
      int v9 = (*((unsigned __int8 *)a2 + v8) - 1) << (8 * v8);
      if (v8 > 3) {
        int v9 = 0;
      }
      if (v8)
      {
        int v10 = v8 <= 3 ? v8 : 4;
        switch(v10)
        {
          case 2:
            int v11 = *a2;
            break;
          case 3:
            int v11 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
            break;
          case 4:
            int v11 = *(_DWORD *)a2;
            break;
          default:
            int v11 = *(unsigned __int8 *)a2;
            break;
        }
      }
      else
      {
        int v11 = 0;
      }
      if ((v11 | v9) != 0xFFFFFFFF) {
        goto LABEL_25;
      }
    }
LABEL_15:
    if ((*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      if (v7 > 1) {
        return a1;
      }
    }
    else
    {
      (*(void (**)(void *, unsigned __int16 *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      if (v7 > 1) {
        return a1;
      }
    }
    *((unsigned char *)a1 + v8) = 0;
    return a1;
  }
  if ((*(unsigned int (**)(unsigned __int16 *, void, uint64_t))(v6 + 48))(a2, *(unsigned int *)(v6 + 84), v5) < 2)goto LABEL_15; {
LABEL_25:
  }
  if (v7 >= 2) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  memcpy(a1, a2, v12);
  return a1;
}

unsigned __int16 *sub_25108E8F8(unsigned __int16 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = *(void *)(v6 + 64) + 1;
  }
  if (v7 <= 1)
  {
    char v9 = 8 * v8;
    if (*((unsigned char *)a1 + v8))
    {
      int v10 = (*((unsigned __int8 *)a1 + v8) - 1) << v9;
      if (v8 > 3) {
        int v10 = 0;
      }
      if (v8)
      {
        int v11 = v8 <= 3 ? v8 : 4;
        switch(v11)
        {
          case 2:
            int v12 = *a1;
            break;
          case 3:
            int v12 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v12 = *(_DWORD *)a1;
            break;
          default:
            int v12 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v12 = 0;
      }
      if ((v12 | v10) != 0xFFFFFFFF)
      {
        if (a2[v8])
        {
          int v16 = (a2[v8] - 1) << v9;
          if (v8 > 3) {
            int v16 = 0;
          }
          if (v8)
          {
            int v17 = v8 <= 3 ? v8 : 4;
            switch(v17)
            {
              case 2:
                int v18 = *(unsigned __int16 *)a2;
                break;
              case 3:
                int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
                break;
              case 4:
                int v18 = *(_DWORD *)a2;
                break;
              default:
                int v18 = *a2;
                break;
            }
          }
          else
          {
            int v18 = 0;
          }
          if ((v18 | v16) != 0xFFFFFFFF) {
            goto LABEL_62;
          }
        }
LABEL_66:
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
        {
          memcpy(a1, a2, v8);
          if (v7 > 1) {
            return a1;
          }
        }
        else
        {
          (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
          (*(void (**)(unsigned __int16 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
          if (v7 > 1) {
            return a1;
          }
        }
        *((unsigned char *)a1 + v8) = 0;
        return a1;
      }
    }
    if (a2[v8])
    {
      int v19 = (a2[v8] - 1) << v9;
      if (v8 > 3) {
        int v19 = 0;
      }
      if (v8)
      {
        int v20 = v8 <= 3 ? v8 : 4;
        switch(v20)
        {
          case 2:
            int v21 = *(unsigned __int16 *)a2;
            break;
          case 3:
            int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            break;
          case 4:
            int v21 = *(_DWORD *)a2;
            break;
          default:
            int v21 = *a2;
            break;
        }
      }
      else
      {
        int v21 = 0;
      }
      if ((v21 | v19) != 0xFFFFFFFF)
      {
        uint64_t v13 = *(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
LABEL_49:
        if (!v13(a1, 1, v5)) {
          (*(void (**)(unsigned __int16 *, uint64_t))(v6 + 8))(a1, v5);
        }
        goto LABEL_62;
      }
    }
LABEL_51:
    uint64_t v22 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
    int v23 = v22(a1, 1, v5);
    int v24 = v22((unsigned __int16 *)a2, 1, v5);
    if (v23)
    {
      if (!v24)
      {
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        (*(void (**)(unsigned __int16 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
        return a1;
      }
    }
    else
    {
      if (!v24)
      {
        (*(void (**)(unsigned __int16 *, unsigned __int8 *, uint64_t))(v6 + 40))(a1, a2, v5);
        return a1;
      }
      (*(void (**)(unsigned __int16 *, uint64_t))(v6 + 8))(a1, v5);
    }
    memcpy(a1, a2, v8);
    return a1;
  }
  uint64_t v13 = *(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
  unsigned int v14 = v13(a1, *(unsigned int *)(v6 + 84), v5);
  unsigned int v15 = v13((unsigned __int16 *)a2, v7, v5);
  if (v14 < 2)
  {
    if (v15 >= 2) {
      goto LABEL_49;
    }
    goto LABEL_51;
  }
  if (v15 < 2) {
    goto LABEL_66;
  }
LABEL_62:
  if (v7 >= 2) {
    size_t v25 = v8;
  }
  else {
    size_t v25 = v8 + 1;
  }
  memcpy(a1, a2, v25);
  return a1;
}

uint64_t sub_25108ED70(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  unsigned int v7 = v6 - 1;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (v5 < 2)
  {
    unsigned int v7 = 0;
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_27;
  }
  char v10 = 8 * v8;
  if (v8 > 3) {
    goto LABEL_10;
  }
  unsigned int v12 = ((v9 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)((char *)a1 + v8);
    if (v11) {
      goto LABEL_17;
    }
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_27;
      }
LABEL_10:
      int v11 = *((unsigned __int8 *)a1 + v8);
      if (!*((unsigned char *)a1 + v8)) {
        goto LABEL_27;
      }
LABEL_17:
      int v13 = (v11 - 1) << v10;
      if (v8 > 3) {
        int v13 = 0;
      }
      if (v8)
      {
        if (v8 <= 3) {
          int v14 = v8;
        }
        else {
          int v14 = 4;
        }
        switch(v14)
        {
          case 2:
            int v15 = *a1;
            break;
          case 3:
            int v15 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v15 = *(_DWORD *)a1;
            break;
          default:
            int v15 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v15 = 0;
      }
      return v7 + (v15 | v13) + 1;
    }
    int v11 = *(unsigned __int16 *)((char *)a1 + v8);
    if (*(unsigned __int16 *)((char *)a1 + v8)) {
      goto LABEL_17;
    }
  }
LABEL_27:
  if (!v7) {
    return 0;
  }
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  BOOL v17 = v16 >= 2;
  uint64_t result = v16 - 2;
  if (result == 0 || !v17) {
    return 0;
  }
  return result;
}

void sub_25108EF18(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  size_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v10;
  }
  if (v8 >= 2) {
    unsigned int v11 = v9 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  if (v8 >= 2) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v10 + 1;
  }
  BOOL v13 = a3 >= v11;
  unsigned int v14 = a3 - v11;
  if (v14 == 0 || !v13)
  {
LABEL_21:
    if (v11 < a2) {
      goto LABEL_22;
    }
    goto LABEL_29;
  }
  if (v12 > 3)
  {
    int v6 = 1;
    if (v11 < a2) {
      goto LABEL_22;
    }
    goto LABEL_29;
  }
  unsigned int v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
  if (!HIWORD(v15))
  {
    if (v15 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v15 > 1;
    }
    goto LABEL_21;
  }
  int v6 = 4;
  if (v11 < a2)
  {
LABEL_22:
    unsigned int v16 = ~v11 + a2;
    if (v12 < 4)
    {
      int v17 = (v16 >> (8 * v12)) + 1;
      if (v12)
      {
        int v18 = v16 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v17;
        return;
      case 3:
        goto LABEL_61;
      case 4:
        *(_DWORD *)&a1[v12] = v17;
        return;
      default:
        return;
    }
  }
LABEL_29:
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_34;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_34;
    case 3:
LABEL_61:
      __break(1u);
      JUMPOUT(0x25108F1F8);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_33;
    default:
LABEL_33:
      if (a2)
      {
LABEL_34:
        if (a2 + 1 <= v9)
        {
          if (a2 != -1 && v8 >= 2)
          {
            uint64_t v22 = *(void (**)(void))(v7 + 56);
            v22();
          }
        }
        else
        {
          if (v10 <= 3) {
            int v19 = ~(-1 << (8 * v10));
          }
          else {
            int v19 = -1;
          }
          if (v10)
          {
            int v20 = v19 & (a2 - v9);
            if (v10 <= 3) {
              int v21 = v10;
            }
            else {
              int v21 = 4;
            }
            bzero(a1, v10);
            switch(v21)
            {
              case 2:
                *(_WORD *)a1 = v20;
                break;
              case 3:
                *(_WORD *)a1 = v20;
                a1[2] = BYTE2(v20);
                break;
              case 4:
                *(_DWORD *)a1 = v20;
                break;
              default:
                *a1 = v20;
                break;
            }
          }
        }
      }
      return;
  }
}

uint64_t sub_25108F230(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  unsigned int v3 = *(_DWORD *)(v2 + 84);
  if (v3) {
    uint64_t v4 = *(void *)(v2 + 64);
  }
  else {
    uint64_t v4 = *(void *)(v2 + 64) + 1;
  }
  if (v3 > 1)
  {
    unsigned int v6 = (*(uint64_t (**)(void))(v2 + 48))();
    if (v6 >= 2) {
      return v6 - 1;
    }
    else {
      return 0;
    }
  }
  else if (*((unsigned char *)a1 + v4))
  {
    int v5 = (*((unsigned __int8 *)a1 + v4) - 1) << (8 * v4);
    if (v4 > 3) {
      int v5 = 0;
    }
    if (v4)
    {
      if (v4 > 3) {
        LODWORD(v4) = 4;
      }
      switch((int)v4)
      {
        case 2:
          LODWORD(v4) = *a1;
          break;
        case 3:
          LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
          break;
        case 4:
          LODWORD(v4) = *(_DWORD *)a1;
          break;
        default:
          LODWORD(v4) = *(unsigned __int8 *)a1;
          break;
      }
    }
    return (v4 | v5) + 1;
  }
  else
  {
    return 0;
  }
}

void sub_25108F35C(unsigned int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (v5)
  {
    size_t v7 = *(void *)(v4 + 64);
  }
  else
  {
    unsigned int v6 = 0;
    size_t v7 = *(void *)(v4 + 64) + 1;
  }
  if (v6 < a2)
  {
    unsigned int v8 = ~v6 + a2;
    if (v7 >= 4)
    {
      bzero(a1, v7);
      *a1 = v8;
      LOBYTE(v9) = 1;
      if (v5 > 1) {
        return;
      }
LABEL_21:
      *((unsigned char *)a1 + v7) = v9;
      return;
    }
    int v9 = (v8 >> (8 * v7)) + 1;
    if (v7)
    {
      int v10 = v8 & ~(-1 << (8 * v7));
      bzero(a1, v7);
      if (v7 != 3)
      {
        if (v7 == 2)
        {
          *(_WORD *)a1 = v10;
          if (v5 > 1) {
            return;
          }
        }
        else
        {
          *(unsigned char *)a1 = v10;
          if (v5 > 1) {
            return;
          }
        }
        goto LABEL_21;
      }
      *(_WORD *)a1 = v10;
      *((unsigned char *)a1 + 2) = BYTE2(v10);
    }
    if (v5 > 1) {
      return;
    }
    goto LABEL_21;
  }
  if (v5 > 1)
  {
    if (a2)
    {
      uint64_t v11 = a2 + 1;
      size_t v12 = *(void (**)(unsigned int *, uint64_t, uint64_t))(v4 + 56);
      v12(a1, v11, v5);
    }
  }
  else
  {
    *((unsigned char *)a1 + v7) = 0;
  }
}

void *sub_25108F4E0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  int v8 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v9 = *(void *)(v6 + 64);
  }
  else {
    size_t v9 = v7 + 1;
  }
  if (v9 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v10 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v10 = v9;
  }
  if ((v8 & 0x1000F8) != 0 || v10 + 1 > 0x18)
  {
    uint64_t v12 = *(void *)a2;
    void *v4 = *(void *)a2;
    uint64_t v4 = (void *)(v12 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unsigned int v13 = a2[v10];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v15 = v10;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_22;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_22;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_22;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_22:
          int v17 = (v16 | (v14 << (8 * v10))) + 2;
          unsigned int v13 = v16 + 2;
          if (v10 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(v4, a2, v9);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(v4, a2, v5);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      }
      *((unsigned char *)v4 + v10) = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      *(void *)(((unint64_t)v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      *((unsigned char *)v4 + v10) = 0;
    }
  }
  return v4;
}

uint64_t sub_25108F71C(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  unint64_t v6 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (!*(_DWORD *)(v4 + 84)) {
    ++v5;
  }
  if (v5 <= v6) {
    unint64_t v5 = v6;
  }
  unsigned int v7 = a1[v5];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v9 = v5;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_14;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_14:
        int v11 = (v10 | (v8 << (8 * v5))) + 2;
        unsigned int v7 = v10 + 2;
        if (v5 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 != 1
    || (uint64_t v14 = *(void *)(*(void *)(a2 + 16) - 8),
        uint64_t result = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3),
        uint64_t v4 = v14,
        !result))
  {
    unsigned int v13 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v4 + 8);
    return v13(a1, v3);
  }
  return result;
}

unsigned __int8 *sub_25108F8B4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    if (*(_DWORD *)(v6 + 84)) {
      size_t v8 = *(void *)(v6 + 64);
    }
    else {
      size_t v8 = v7 + 1;
    }
    if (v8 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) {
      unint64_t v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    else {
      unint64_t v9 = v8;
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_17;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_17;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_17;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_17:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 != 1 || !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5)) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v15 = a2[v9];
    unsigned int v16 = v15 - 2;
    if (v15 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v17 = v9;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          goto LABEL_31;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v18 = *(_DWORD *)a2;
LABEL_31:
          int v19 = (v18 | (v16 << (8 * v9))) + 2;
          unsigned int v15 = v18 + 2;
          if (v9 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    if (v15 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v8);
        char v20 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        char v20 = 1;
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      char v20 = 0;
      *(void *)((unint64_t)&a1[v7 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
    }
    a1[v9] = v20;
  }
  return a1;
}

void *sub_25108FB94(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = v7 + 1;
  }
  if (v8 <= ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v9 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v9 = v8;
  }
  unsigned int v10 = a2[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        goto LABEL_16;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v13 = *(_DWORD *)a2;
LABEL_16:
        int v14 = (v13 | (v11 << (8 * v9))) + 2;
        unsigned int v10 = v13 + 2;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  if (v10 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      char v15 = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v15 = 1;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
    char v15 = 0;
    *(void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
  }
  *((unsigned char *)a1 + v9) = v15;
  return a1;
}

uint64_t sub_25108FDC0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  unint64_t v5 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (!*(_DWORD *)(v3 + 84)) {
    ++v4;
  }
  if (v4 <= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v4;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_25;
  }
  unint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v11 < 2)
    {
LABEL_25:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 2) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_25;
  }
LABEL_17:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 255;
}

void sub_25108FF34(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (!*(_DWORD *)(v5 + 84)) {
    ++v6;
  }
  if (v6 <= v7) {
    unint64_t v6 = v7;
  }
  size_t v8 = v6 + 1;
  if (a3 < 0xFF)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v10 = a2 - 255;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v6 != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v6 + 1);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_36:
        __break(1u);
        JUMPOUT(0x25109013CLL);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_24;
      case 3:
        goto LABEL_36;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      default:
LABEL_24:
        if (a2) {
LABEL_25:
        }
          a1[v6] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_251090164(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  unint64_t v4 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (!*(_DWORD *)(v2 + 84)) {
    ++v3;
  }
  if (v3 <= v4) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = v3;
  }
  uint64_t v6 = a1[v5];
  int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_15;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_15;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_15;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_15:
        unsigned int v10 = (v9 | (v7 << (8 * v5))) + 2;
        LODWORD(v6) = v9 + 2;
        if (v5 >= 4) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v10;
        }
        break;
      default:
        return v6;
    }
  }
  return v6;
}

void sub_25109025C(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  size_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (!*(_DWORD *)(v5 + 84)) {
    ++v6;
  }
  if (v6 <= v7) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = v6;
  }
  if (a2 > 1)
  {
    unsigned int v9 = a2 - 2;
    if (v8 <= 3) {
      char v10 = (v9 >> (8 * v8)) + 2;
    }
    else {
      char v10 = 2;
    }
    if (v8 <= 3) {
      int v11 = v9 & ~(-1 << (8 * v8));
    }
    else {
      int v11 = v9;
    }
    a1[v8] = v10;
    if (v8 >= 4) {
      int v12 = 4;
    }
    else {
      int v12 = v8;
    }
    bzero(a1, v8);
    switch(v12)
    {
      case 2:
        *(_WORD *)a1 = v11;
        break;
      case 3:
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
        break;
      case 4:
        *(_DWORD *)a1 = v11;
        break;
      default:
        *a1 = v11;
        break;
    }
  }
  else
  {
    a1[v8] = a2;
  }
}

uint64_t *sub_251090398(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_2510904D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *sub_251090598(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_251090690(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    int v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

void *sub_2510907FC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_2510908F4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    int v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

uint64_t sub_251090A60(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void sub_251090C00(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x251090E3CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          uint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_251090E64(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t sub_251090E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t dispatch thunk of DownstreamHandlerSubscription.lock.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of DownstreamHandlerSubscription.state.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of DownstreamHandlerSubscription.state.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of DownstreamHandlerSubscription.state.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of DownstreamHandlerSubscription.sendValueToDownstreamIfNeeded(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of DownstreamHandlerSubscription.sendCompletionToDownstreamIfNeeded(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of DownstreamHandlerSubscription.didRequestFirstDemand()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of DownstreamHandlerSubscription.didCancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t sub_251090F64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for FeatureStatusPublisher.Inner();
  return DownstreamHandlerSubscription.sendValueToDownstreamIfNeeded(_:)(a1, v6, a2, a3);
}

uint64_t sub_251090FC4@<X0>(char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for FeatureStatusPublisher.Inner();
  return DownstreamHandlerSubscription.sendCompletionToDownstreamIfNeeded(_:)(a1, v6, a2, a3);
}

uint64_t sub_251091024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_251091054(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))DownstreamHandlerSubscription.sendValueToDownstreamIfNeeded(_:));
}

uint64_t sub_25109103C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_251091054(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))DownstreamHandlerSubscription.sendCompletionToDownstreamIfNeeded(_:));
}

uint64_t sub_251091054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = _s23SharingEntriesPublisherV5InnerCMa();
  return a4(a1, v6, a3);
}

uint64_t (*sub_2510910C8())()
{
  return j__swift_endAccess;
}

id sub_251091140()
{
  MEMORY[0x2533940F0](*(void *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x60)), -1, -1);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FeatureStatusPublisher.Inner();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_2510911E0(void *a1)
{
  id v1 = a1;
  return sub_251091140();
}

uint64_t sub_251091208(void *a1)
{
  id v1 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x68);
  uint64_t v2 = type metadata accessor for DownstreamHandlerSubscriptionState();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_unknownObjectRelease();
}

id sub_2510912EC()
{
  return sub_2510641C4((SEL *)&selRef_unregisterObserver_);
}

void sub_2510912F8(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  swift_unknownObjectRetain();
  id v6 = a4;
  id v7 = a1;
  sub_2510916F0(v6);
  swift_unknownObjectRelease();
}

void sub_251091378()
{
}

void (*sub_2510913BC(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_2510910C8();
  return sub_251091414;
}

void sub_251091414(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

void sub_251091460()
{
}

uint64_t sub_2510914AC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  uint64_t v5 = *(void *)(v1 + 64) + v3 + 1;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return MEMORY[0x270FA0238](v0, v5, v4);
}

uint64_t sub_251091538()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_2510915C0()
{
  uint64_t result = type metadata accessor for DownstreamHandlerSubscriptionState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureStatusPublisher()
{
  return &type metadata for FeatureStatusPublisher;
}

uint64_t sub_25109167C()
{
  return swift_getWitnessTable();
}

uint64_t sub_251091698()
{
  return swift_getWitnessTable();
}

uint64_t sub_2510916B4(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2510916F0(void *a1)
{
  uint64_t v2 = type metadata accessor for FeatureStatus(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DownstreamHandlerSendFailureReason();
  swift_getWitnessTable();
  uint64_t v5 = sub_2510BFD68();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  unsigned int v8 = (char *)&v12 - v7;
  FeatureStatus.init(_:)(a1, (uint64_t)v4);
  uint64_t v9 = type metadata accessor for FeatureStatusPublisher.Inner();
  uint64_t WitnessTable = swift_getWitnessTable();
  DownstreamHandlerSubscription.sendValueToDownstreamIfNeeded(_:)((uint64_t)v4, v9, WitnessTable, (uint64_t)v8);
  sub_251068EBC((uint64_t)v4, type metadata accessor for FeatureStatus);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_2510918E8()
{
}

void sub_251091918()
{
  if (!qword_26B212228)
  {
    sub_2510919C8(255);
    sub_25105A06C(&qword_26B2122A8, sub_2510919C8);
    unint64_t v0 = sub_2510BECD8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212228);
    }
  }
}

void sub_2510919C8(uint64_t a1)
{
}

uint64_t HKFeatureAvailabilityProviding.setFeatureSetting(_:forKey:)(char a1, uint64_t *a2)
{
  *(unsigned char *)(v3 + 169) = a1;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *(void *)(v3 + 120) = v2;
  *(void *)(v3 + 128) = v4;
  *(void *)(v3 + 136) = v5;
  return MEMORY[0x270FA2498](sub_251091A28, 0, 0);
}

uint64_t sub_251091A28()
{
  uint64_t v1 = *(void **)(v0 + 120);
  id v2 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, *(unsigned __int8 *)(v0 + 169));
  *(void *)(v0 + 144) = v2;
  uint64_t v3 = sub_2510BF228();
  *(void *)(v0 + 152) = v3;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 168;
  *(void *)(v0 + 24) = sub_251091B80;
  uint64_t v4 = swift_continuation_init();
  *(void *)(v0 + 80) = MEMORY[0x263EF8330];
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_251091D70;
  *(void *)(v0 + 104) = &block_descriptor;
  *(void *)(v0 + 112) = v4;
  objc_msgSend(v1, sel_setFeatureSettingNumber_forKey_completion_, v2, v3, v0 + 80);
  return MEMORY[0x270FA23F0](v0 + 16);
}

uint64_t sub_251091B80()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 160) = v1;
  if (v1) {
    id v2 = sub_251091CF8;
  }
  else {
    id v2 = sub_251091C90;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_251091C90()
{
  uint64_t v1 = *(void **)(v0 + 144);

  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_251091CF8()
{
  uint64_t v1 = (void *)v0[19];
  id v2 = (void *)v0[18];
  swift_willThrow();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_251091D70(uint64_t a1, char a2, void *a3)
{
  sub_25109275C();
  uint64_t v6 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_251067550();
    swift_allocError();
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    **(unsigned char **)(*(void *)(v6 + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

void HKFeatureAvailabilityProviding.setFeatureSetting(_:forKey:completion:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a1 & 1);
  id v8 = (void *)sub_2510BF228();
  v10[4] = a3;
  v10[5] = a4;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1107296256;
  void v10[2] = sub_251055F18;
  v10[3] = &block_descriptor_2;
  uint64_t v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_setFeatureSettingNumber_forKey_completion_, v7, v8, v9);
  _Block_release(v9);
}

uint64_t HKFeatureAvailabilityProviding.setFeatureSetting(_:forKey:)(uint64_t a1, void *a2)
{
  v3[15] = a1;
  v3[16] = v2;
  uint64_t v4 = a2[1];
  v3[17] = *a2;
  v3[18] = v4;
  return MEMORY[0x270FA2498](sub_251091F60, 0, 0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v3[15] = a1;
  v3[16] = v2;
  uint64_t v4 = a2[1];
  v3[17] = *a2;
  v3[18] = v4;
  return MEMORY[0x270FA2498](sub_2510922F4, 0, 0);
}

uint64_t sub_251091F60()
{
  uint64_t v1 = (void *)v0[16];
  id v2 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v0[15]);
  v0[19] = v2;
  uint64_t v3 = sub_2510BF228();
  v0[20] = v3;
  v0[2] = v0;
  v0[7] = v0 + 22;
  v0[3] = sub_2510920B4;
  uint64_t v4 = swift_continuation_init();
  v0[10] = MEMORY[0x263EF8330];
  v0[11] = 0x40000000;
  v0[12] = sub_251091D70;
  v0[13] = &block_descriptor_3;
  v0[14] = v4;
  objc_msgSend(v1, sel_setFeatureSettingNumber_forKey_completion_, v2, v3, v0 + 10);
  return MEMORY[0x270FA23F0](v0 + 2);
}

uint64_t sub_2510920B4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 168) = v1;
  if (v1) {
    id v2 = sub_2510927C8;
  }
  else {
    id v2 = sub_2510927C4;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

void HKFeatureAvailabilityProviding.setFeatureSetting(_:forKey:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, a1);
  id v8 = (void *)sub_2510BF228();
  v10[4] = a3;
  v10[5] = a4;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1107296256;
  void v10[2] = sub_251055F18;
  v10[3] = &block_descriptor_7;
  uint64_t v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_setFeatureSettingNumber_forKey_completion_, v7, v8, v9);
  _Block_release(v9);
}

{
  void *v4;
  void *v5;
  double v8;
  id v9;
  void *v10;
  void *v11;
  void v12[6];

  uint64_t v5 = v4;
  sub_2510BE8B8();
  uint64_t v9 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v8);
  size_t v10 = (void *)sub_2510BF228();
  v12[4] = a3;
  v12[5] = a4;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1107296256;
  void v12[2] = sub_251055F18;
  uint64_t v12[3] = &block_descriptor_12;
  BOOL v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_setFeatureSettingNumber_forKey_completion_, v9, v10, v11);
  _Block_release(v11);
}

uint64_t sub_2510922F4()
{
  uint64_t v1 = (void *)v0[16];
  sub_2510BE8B8();
  id v3 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v2);
  v0[19] = v3;
  uint64_t v4 = sub_2510BF228();
  v0[20] = v4;
  v0[2] = v0;
  v0[7] = v0 + 22;
  v0[3] = sub_251092450;
  uint64_t v5 = swift_continuation_init();
  v0[10] = MEMORY[0x263EF8330];
  v0[11] = 0x40000000;
  v0[12] = sub_251091D70;
  v0[13] = &block_descriptor_8;
  v0[14] = v5;
  objc_msgSend(v1, sel_setFeatureSettingNumber_forKey_completion_, v3, v4, v0 + 10);
  return MEMORY[0x270FA23F0](v0 + 2);
}

uint64_t sub_251092450()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 168) = v1;
  if (v1) {
    double v2 = sub_2510925C8;
  }
  else {
    double v2 = sub_251092560;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_251092560()
{
  uint64_t v1 = *(void **)(v0 + 152);

  double v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_2510925C8()
{
  uint64_t v1 = (void *)v0[20];
  double v2 = (void *)v0[19];
  swift_willThrow();

  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

unint64_t sub_25109275C()
{
  unint64_t result = qword_269B1BB18;
  if (!qword_269B1BB18)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_269B1BB18);
  }
  return result;
}

id HKSummarySharingEntryStore.SharingEntriesPublisher.sharingEntryStore.getter()
{
  return *v0;
}

uint64_t HKSummarySharingEntryStore.SharingEntriesPublisher.init(sharingEntryStore:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t HKSummarySharingEntryStore.SharingEntriesPublisher.receive<A>(subscriber:)(uint64_t a1)
{
  id v3 = *v1;
  uint64_t v4 = _s23SharingEntriesPublisherV5InnerCMa();
  id v5 = v3;
  id v6 = sub_2510934E8(a1, v5);

  v8[3] = v4;
  v8[4] = swift_getWitnessTable();
  v8[0] = v6;
  sub_2510BECF8();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t _s23SharingEntriesPublisherV5InnerCMa()
{
  return __swift_instantiateGenericMetadata();
}

void sub_2510928A4(void *a1@<X8>)
{
  uint64_t v3 = *(void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x60));
  sub_25106814C(0, (unint64_t *)&unk_26B212DC0, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x263F8D8D0]);
  a1[3] = v4;
  a1[4] = &protocol witness table for <A> UnsafeMutablePointer<A>;
  *a1 = v3;
}

id sub_251092934()
{
  uint64_t v1 = (void *)MEMORY[0x263F8EED0];
  objc_msgSend(*(id *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x70)), sel_removeObserver_, v0);
  MEMORY[0x2533940F0](*(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x60)), -1, -1);
  v3.receiver = v0;
  v3.super_class = (Class)_s23SharingEntriesPublisherV5InnerCMa();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

id sub_251092A0C(void *a1)
{
  id v1 = a1;
  return sub_251092934();
}

void sub_251092A34(void *a1)
{
  double v2 = (void *)MEMORY[0x263F8EED0];
  objc_super v3 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x68);
  uint64_t v4 = type metadata accessor for DownstreamHandlerSubscriptionState();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  id v5 = *(void **)((char *)a1 + *(void *)((*v2 & *a1) + 0x70));
}

void sub_251092B18()
{
  id v1 = *(void **)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x70));
  objc_msgSend(v1, sel_addObserver_, v0);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  void v5[4] = sub_2510936D8;
  v5[5] = v2;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 1107296256;
  v5[2] = sub_251055F18;
  v5[3] = &block_descriptor_11;
  objc_super v3 = _Block_copy(v5);
  uint64_t v4 = v0;
  swift_release();
  objc_msgSend(v1, sel_fetchSharingEntriesWithCompletion_, v3);
  _Block_release(v3);
}

uint64_t sub_251092C28(char a1, void *a2)
{
  type metadata accessor for DownstreamHandlerSendFailureReason();
  swift_getWitnessTable();
  uint64_t v4 = sub_2510BFD68();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x270FA5388](v4);
  id v8 = (char *)&v12 - v7;
  if ((a1 & 1) == 0)
  {
    if (a2)
    {
      unsigned int v13 = a2;
      id v9 = a2;
      uint64_t v10 = _s23SharingEntriesPublisherV5InnerCMa();
      uint64_t WitnessTable = swift_getWitnessTable();
      DownstreamHandlerSubscription.sendCompletionToDownstreamIfNeeded(_:)((char *)&v13, v10, WitnessTable, (uint64_t)v8);

      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  return result;
}

id sub_251092DDC()
{
  return objc_msgSend(*(id *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x70)), sel_removeObserver_, v0);
}

uint64_t sub_251092E14()
{
  uint64_t v1 = *MEMORY[0x263F8EED0] & *v0;
  type metadata accessor for DownstreamHandlerSendFailureReason();
  swift_getWitnessTable();
  uint64_t v2 = sub_2510BFD68();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - v4;
  id v6 = objc_msgSend(*(id *)((char *)v0 + *(void *)(v1 + 112)), sel_sharingEntries);
  sub_251067804();
  uint64_t v7 = sub_2510BF418();

  uint64_t v12 = v7;
  uint64_t v8 = _s23SharingEntriesPublisherV5InnerCMa();
  uint64_t WitnessTable = swift_getWitnessTable();
  DownstreamHandlerSubscription.sendValueToDownstreamIfNeeded(_:)((uint64_t)&v12, v8, WitnessTable, (uint64_t)v5);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_251092FF8(void *a1)
{
  id v1 = a1;
  sub_251092E14();
}

id sub_251093040(void *a1)
{
  id v1 = a1;
  sub_2510930A8();

  uint64_t v2 = (void *)sub_2510BF228();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_2510930A8()
{
  return 0;
}

uint64_t sub_251093164()
{
  sub_251067804();
  sub_2510936E0();
  uint64_t v1 = sub_2510BF268();
  sub_2510BF2F8();
  sub_251068574(0, &qword_26B2118E0, MEMORY[0x263EFDCF0]);
  sub_25109371C();
  sub_2510BF268();
  sub_2510BF2F8();
  swift_bridgeObjectRelease();
  return v1;
}

void sub_251093210()
{
}

uint64_t sub_251093260(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return DownstreamHandlerSubscription.request(_:)(a1, a2, WitnessTable);
}

void sub_2510932B8()
{
}

id HKSummarySharingEntryStore.sharingEntriesPublisher()@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return v1;
}

id sub_251093314(uint64_t a1, void *a2)
{
  uint64_t v5 = *MEMORY[0x263F8EED0] & *v2;
  uint64_t v6 = *(void *)(v5 + 0x50);
  uint64_t v7 = type metadata accessor for DownstreamHandlerSubscriptionState();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(v5 + 96);
  uint64_t v12 = v2;
  unsigned int v13 = (_DWORD *)swift_slowAlloc();
  *unsigned int v13 = 0;
  *(void *)((char *)v2 + v11) = v13;
  static DownstreamHandlerSubscriptionState.ready(_:)(a1, v6, (uint64_t)v10);
  unsigned int v14 = (void *)MEMORY[0x263F8EED0];
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v12[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v12) + 0x68)], v10, v7);
  *(void *)&v12[*(void *)((*v14 & *(void *)v12) + 0x70)] = a2;
  id v15 = a2;

  int v16 = (objc_class *)_s23SharingEntriesPublisherV5InnerCMa();
  v18.receiver = v12;
  v18.super_class = v16;
  return objc_msgSendSuper2(&v18, sel_init);
}

id sub_2510934E8(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone((Class)_s23SharingEntriesPublisherV5InnerCMa());
  return sub_251093314(a1, a2);
}

uint64_t sub_251093534()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

ValueMetadata *type metadata accessor for HKSummarySharingEntryStore.SharingEntriesPublisher()
{
  return &type metadata for HKSummarySharingEntryStore.SharingEntriesPublisher;
}

uint64_t sub_25109357C()
{
  uint64_t result = type metadata accessor for DownstreamHandlerSubscriptionState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_25109362C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_251093668()
{
  return swift_getWitnessTable();
}

uint64_t sub_251093684()
{
  return swift_getWitnessTable();
}

uint64_t sub_2510936A0()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2510936D8(char a1, void *a2)
{
  return sub_251092C28(a1, a2);
}

unint64_t sub_2510936E0()
{
  unint64_t result = qword_269B1BB80;
  if (!qword_269B1BB80)
  {
    sub_251067804();
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_269B1BB80);
  }
  return result;
}

unint64_t sub_25109371C()
{
  unint64_t result = qword_269B1BB88;
  if (!qword_269B1BB88)
  {
    sub_251068574(255, &qword_26B2118E0, MEMORY[0x263EFDCF0]);
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_269B1BB88);
  }
  return result;
}

unint64_t sub_251093774()
{
  unint64_t result = qword_269B1BB90;
  if (!qword_269B1BB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BB90);
  }
  return result;
}

uint64_t sub_2510937C8()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

unsigned char *storeEnumTagSinglePayload for SummarySharingEntryError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25109389CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SummarySharingEntryError()
{
  return &type metadata for SummarySharingEntryError;
}

unint64_t sub_2510938D8()
{
  unint64_t result = qword_269B1BBA0;
  if (!qword_269B1BBA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BBA0);
  }
  return result;
}

void sub_251093938()
{
  if (!qword_26B212788)
  {
    sub_2510BEDB8();
    unint64_t v0 = sub_2510BF808();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212788);
    }
  }
}

uint64_t sub_251093990()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t Publisher.retainingSink(receiveValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  uint64_t v9 = Publisher.retainingSink(receiveCompletion:receiveValue:)((uint64_t)nullsub_1, v8, a1, a2, a3, a4);
  swift_release();
  return v9;
}

uint64_t sub_251093A64()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t QueryPublisherBase.unwrap()()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)swift_allocObject();
  v2[2] = v1[51];
  v2[3] = v1[52];
  v2[4] = v1[53];
  type metadata accessor for QueryPublisherBase();
  swift_getWitnessTable();
  sub_2510BEE68();
  return swift_release();
}

uint64_t *QueryPublisherBase.init(store:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 408);
  uint64_t PublisherResult = type metadata accessor for QueryPublisherResult();
  MEMORY[0x270FA5388](PublisherResult - 8);
  uint64_t v7 = (char *)&v9 - v6;
  *(uint64_t *)((char *)v1 + *(void *)(v3 + 440)) = 0;
  *((unsigned char *)v1 + *(void *)(*v1 + 448)) = 0;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 + 432)) = a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))((char *)&v9 - v6, 1, 1, v4);
  return _s18HealthKitAdditions15StreamPublisherC_12onDisconnectACyxq_Gx_AC010DownstreamG9BehaviourOyxq__Gtcfc_0((uint64_t)v7);
}

uint64_t *QueryPublisherBase.deinit()
{
  if (*(void *)(v0 + *(void *)(*(void *)v0 + 440))) {
    objc_msgSend(*(id *)(v0 + *(void *)(*(void *)v0 + 432)), sel_stopQuery_);
  }
  uint64_t v1 = StreamPublisher.deinit();

  return v1;
}

void QueryPublisherBase.__allocating_init(_:)()
{
}

void QueryPublisherBase.__allocating_init(_:onDisconnect:)()
{
}

void sub_251093DAC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 448);
  if ((*(unsigned char *)(v0 + v1) & 1) == 0)
  {
    *(unsigned char *)(v0 + v1) = 1;
    uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v0 + 512))();
    uint64_t v3 = *(void *)(*(void *)v0 + 440);
    uint64_t v4 = *(void **)(v0 + v3);
    *(void *)(v0 + v3) = v2;

    if (*(void *)(v0 + *(void *)(*(void *)v0 + 440)))
    {
      uint64_t v5 = *(void **)(v0 + *(void *)(*(void *)v0 + 432));
      objc_msgSend(v5, sel_executeQuery_);
    }
  }
}

void sub_251093EA0()
{
  uint64_t v1 = *(void **)(v0 + *(void *)(*(void *)v0 + 440));
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + *(void *)(*(void *)v0 + 432));
    id v3 = v1;
    objc_msgSend(v2, sel_stopQuery_, v3);
    uint64_t v4 = *(void *)(*(void *)v0 + 440);
    id v5 = *(id *)(v0 + v4);
    *(void *)(v0 + v4) = 0;
  }
}

uint64_t sub_251093F84(uint64_t a1)
{
  *(void *)(v1 + *(void *)(*(void *)v1 + 440)) = a1;
  return MEMORY[0x270F9A758]();
}

uint64_t sub_251093FA4()
{
  return *(unsigned __int8 *)(v0 + *(void *)(*(void *)v0 + 448));
}

uint64_t sub_251093FC0(uint64_t result)
{
  *(unsigned char *)(v1 + *(void *)(*(void *)v1 + 448)) = result;
  return result;
}

uint64_t sub_251093FDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t PublisherResult = type metadata accessor for QueryPublisherResult();
  MEMORY[0x270FA5388](PublisherResult);
  uint64_t v8 = (char *)&v13 - v7;
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)&v13 - v7, a1);
  uint64_t v10 = *(void *)(a2 - 8);
  uint64_t v11 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, a2) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, a2);
    uint64_t v11 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a3, v11, 1, a2);
}

uint64_t sub_251094140()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_251094150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_251093FDC(a1, *(void *)(v2 + 16), a2);
}

uint64_t type metadata accessor for QueryPublisherBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for QueryPublisherResult()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *QueryPublisherBase.__allocating_init(store:)(uint64_t a1)
{
  return QueryPublisherBase.init(store:)(a1);
}

void sub_2510941C8()
{
  uint64_t v1 = *(void **)(v0 + *(void *)(*(void *)v0 + 440));
}

uint64_t QueryPublisherBase.__deallocating_deinit()
{
  QueryPublisherBase.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_251094274()
{
  return 0;
}

void QueryPublisherBase.init(_:)()
{
}

void QueryPublisherBase.init(_:onDisconnect:)()
{
}

void sub_251094304()
{
}

void sub_251094334()
{
}

uint64_t sub_251094364(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void sub_251094504(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x251094740);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          uint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_251094768()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for QueryPublisherBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for QueryPublisherBase);
}

uint64_t dispatch thunk of QueryPublisherBase.__allocating_init(store:)()
{
  return (*(uint64_t (**)(void))(v0 + 504))();
}

uint64_t dispatch thunk of QueryPublisherBase.createQuery()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t sub_25109481C()
{
  return sub_251094834();
}

uint64_t sub_251094834()
{
  uint64_t v0 = sub_2510BEA18();
  if (qword_269B1AF18 != -1) {
    swift_once();
  }
  sub_25107BA64();
  uint64_t v1 = sub_2510BF838();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v0 != v2)
  {
    sub_2510BF838();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_2510BEA18();
    sub_251099210();
    swift_allocError();
    static SampleDataDecodingError.invalidColumnCountForRow(expected:actual:)(v4);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_2510949DC()
{
  return sub_2510949F4();
}

uint64_t sub_2510949F4()
{
  sub_2510BEA38();
  if (!v5)
  {
    sub_25107B994((uint64_t)v4);
    goto LABEL_6;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    sub_2510A0854(0);
    sub_251099210();
    swift_allocError();
    static SampleDataDecodingError.invalidSampleType(expectedPrefix:actualIdentifier:)(v1);
    swift_bridgeObjectRelease();
    swift_willThrow();
    return v0;
  }
  uint64_t v0 = v3;
  if ((sub_2510BF378() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  return v0;
}

uint64_t sub_251094B04()
{
  return sub_251094B1C();
}

uint64_t sub_251094B1C()
{
  sub_2510BEA38();
  sub_251099530(0, (unint64_t *)&qword_26B2121A0, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8D8F0]);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    sub_2510A0854(1);
    sub_251099210();
    swift_allocError();
    static SampleDataDecodingError.invalidSampleValue(expectedType:actualValue:)(v1);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_251094C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_251094C40(a1, (uint64_t (*)(void))type metadata accessor for StateOfMindDecoder, a2);
}

uint64_t sub_251094C40@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  unint64_t v51 = a2;
  sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v53 = (uint64_t)v48 - v8;
  uint64_t v9 = sub_2510BE798();
  uint64_t v54 = *(void *)(v9 - 8);
  uint64_t v55 = v9;
  MEMORY[0x270FA5388](v9);
  int64_t v50 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251099480(0, (unint64_t *)&qword_26B212E58, MEMORY[0x263F07490]);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v49 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  int v15 = (char *)v48 - v14;
  uint64_t v16 = sub_2510BE958();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  int v19 = (char *)v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_2510BE908();
  uint64_t v56 = *(void *)(v20 - 8);
  uint64_t v57 = v20;
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  int v23 = (char *)v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  char v52 = (char *)v48 - v24;
  uint64_t v61 = v3;
  sub_2510BEA38();
  if (!v60)
  {
    sub_25107B994((uint64_t)v59);
    goto LABEL_10;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    sub_2510A0854(a1);
    sub_251099210();
    swift_allocError();
    static SampleDataDecodingError.invalidSampleStartDate(actualValue:)(v40);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  v48[0] = a3;
  v48[1] = v4;
  v48[2] = v58;
  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
  sub_2510BE938();
  int64_t v26 = (void *)sub_2510BE948();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  objc_msgSend(v25, sel_setLocale_, v26);

  long long v27 = (void *)sub_2510BF228();
  objc_msgSend(v25, sel_setDateFormat_, v27);

  int64_t v28 = (void *)sub_2510BF228();
  swift_bridgeObjectRelease();
  id v29 = objc_msgSend(v25, sel_dateFromString_, v28);

  if (!v29)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v15, 1, 1, v57);
    goto LABEL_9;
  }
  sub_2510BE8F8();

  uint64_t v30 = v56;
  uint64_t v31 = v57;
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
  v32(v15, v23, v57);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v15, 0, 1, v31);
  int64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  if (v33(v15, 1, v31) == 1)
  {
LABEL_9:
    sub_2510994D4((uint64_t)v15, (unint64_t *)&qword_26B212E58, MEMORY[0x263F07490]);
    goto LABEL_10;
  }
  unint64_t v34 = v52;
  v32(v52, v15, v31);
  uint64_t v35 = v51(0);
  uint64_t v36 = v53;
  sub_251099264(v61 + *(int *)(v35 + 24), v53);
  uint64_t v37 = v54;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v36, 1, v55) == 1)
  {
    sub_2510994D4(v36, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
    uint64_t v38 = v57;
    uint64_t v39 = (uint64_t)v34;
  }
  else
  {
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 32);
    uint64_t v43 = v50;
    v42(v50, v36, v55);
    uint64_t v44 = (uint64_t)v49;
    sub_2510BE998();
    uint64_t v38 = v57;
    unsigned int v45 = v33((char *)v44, 1, v57);
    uint64_t v46 = v56;
    if (v45 == 1)
    {
      sub_2510994D4(v44, (unint64_t *)&qword_26B212E58, MEMORY[0x263F07490]);
      sub_251099210();
      swift_allocError();
      static SampleDataDecodingError.invalidSampleStartDateShift(actualShift:)(v47);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v43, v55);
      return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v34, v38);
    }
    (*(void (**)(char *, uint64_t))(v54 + 8))(v43, v55);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v34, v38);
    uint64_t v39 = v44;
  }
  return ((uint64_t (*)(void, uint64_t, uint64_t))v32)(v48[0], v39, v38);
}

uint64_t SampleDataDecodingError.title.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SampleDataDecodingError.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

HealthKitAdditions::SampleDataDecodingError __swiftcall SampleDataDecodingError.init(title:description:)(Swift::String title, Swift::String description)
{
  *uint64_t v2 = title;
  v2[1] = description;
  result.description = description;
  result.title = title;
  return result;
}

unint64_t SampleDataDecodingError.localizedDescription.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static SampleDataDecodingError.unsupportedSampleType(identifier:)@<X0>(void *a1@<X8>)
{
  sub_2510BF928();
  swift_bridgeObjectRelease();
  sub_2510BF2F8();
  uint64_t result = sub_2510BF2F8();
  *a1 = 0xD000000000000018;
  a1[1] = 0x80000002510C5980;
  a1[2] = 0xD000000000000010;
  a1[3] = 0x80000002510C59A0;
  return result;
}

uint64_t static SampleDataDecodingError.invalidColumnCountForRow(expected:actual:)@<X0>(void *a1@<X8>)
{
  sub_2510BF928();
  swift_bridgeObjectRelease();
  sub_2510BFBF8();
  sub_2510BF2F8();
  swift_bridgeObjectRelease();
  sub_2510BF2F8();
  sub_2510BFBF8();
  sub_2510BF2F8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 0xD00000000000001DLL;
  a1[1] = 0x80000002510C59E0;
  a1[2] = 0x6465746365707845;
  a1[3] = 0xE900000000000020;
  return result;
}

uint64_t static SampleDataDecodingError.invalidSampleType(expectedPrefix:actualIdentifier:)@<X0>(void *a1@<X8>)
{
  return sub_2510956AC(0x80000002510C5A00, 0xD000000000000014, 0x80000002510C5A20, a1);
}

uint64_t static SampleDataDecodingError.invalidSampleValue(expectedType:actualValue:)@<X0>(void *a1@<X8>)
{
  return sub_2510956AC(0x80000002510C5A40, 0xD000000000000015, 0x80000002510C5A60, a1);
}

uint64_t sub_2510956AC@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, void *a4@<X8>)
{
  sub_2510BF928();
  swift_bridgeObjectRelease();
  sub_2510BF2F8();
  sub_2510BF2F8();
  uint64_t result = sub_2510BF2F8();
  *a4 = a2;
  a4[1] = a3;
  a4[2] = 0xD000000000000017;
  a4[3] = a1;
  return result;
}

uint64_t static SampleDataDecodingError.invalidSampleUnit(expectedUnit:actualUnitString:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_2510BF928();
  swift_bridgeObjectRelease();
  strcpy((char *)v8, "Expected unit ");
  HIBYTE(v8[1]) = -18;
  id v4 = objc_msgSend(a1, sel_unitString);
  sub_2510BF258();

  sub_2510BF2F8();
  swift_bridgeObjectRelease();
  sub_2510BF2F8();
  uint64_t result = sub_2510BF2F8();
  uint64_t v6 = v8[0];
  uint64_t v7 = v8[1];
  *a2 = 0xD000000000000017;
  a2[1] = 0x80000002510C5A80;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

uint64_t static SampleDataDecodingError.invalidSampleDuration(actualDuration:)@<X0>(void *a1@<X8>)
{
  sub_2510BF928();
  swift_bridgeObjectRelease();
  uint64_t result = sub_2510BF2F8();
  *a1 = 0xD000000000000018;
  a1[1] = 0x80000002510C5AA0;
  a1[2] = 0xD000000000000026;
  a1[3] = 0x80000002510C5AC0;
  return result;
}

uint64_t static SampleDataDecodingError.invalidSampleStartDate(actualValue:)@<X0>(void *a1@<X8>)
{
  sub_2510BF928();
  swift_bridgeObjectRelease();
  uint64_t result = sub_2510BF2F8();
  *a1 = 0xD00000000000001DLL;
  a1[1] = 0x80000002510C5AF0;
  a1[2] = 0xD000000000000031;
  a1[3] = 0x80000002510C5B10;
  return result;
}

uint64_t static SampleDataDecodingError.invalidSampleStartDateShift(actualShift:)@<X0>(void *a1@<X8>)
{
  sub_2510BF928();
  swift_bridgeObjectRelease();
  sub_2510BE798();
  sub_251097F48(&qword_269B1BBA8, MEMORY[0x263F063B0]);
  sub_2510BFBF8();
  sub_2510BF2F8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 0xD000000000000023;
  a1[1] = 0x80000002510C5B50;
  a1[2] = 0xD00000000000001ALL;
  a1[3] = 0x80000002510C5B80;
  return result;
}

uint64_t SampleDataDecoder.init(fileData:logger:calendar:dateShift:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  uint64_t v10 = (int *)type metadata accessor for SampleDataDecoder(0);
  uint64_t v11 = (char *)a6 + v10[5];
  uint64_t v12 = sub_2510BEC48();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a3, v12);
  uint64_t v13 = (char *)a6 + v10[6];
  uint64_t v14 = sub_2510BE9E8();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v13, a4, v14);
  uint64_t v15 = (uint64_t)a6 + v10[7];
  return sub_251097DD0(a5, v15);
}

uint64_t SampleDataDecoder.decodeSamples()()
{
  uint64_t v66 = sub_2510BEC48();
  uint64_t v62 = *(void (***)(char *, uint64_t))(v66 - 8);
  MEMORY[0x270FA5388](v66);
  id v76 = (char *)&v54 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_2510BEA28();
  id v67 = *(void (***)(uint64_t, uint64_t))(v74 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v74);
  uint64_t v61 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  id v75 = (char *)&v54 - v4;
  uint64_t v5 = sub_2510BEA48();
  uint64_t v78 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v77 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251097E50();
  BOOL v68 = v7;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v64 = (uint64_t *)((char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v8);
  uint64_t v79 = (uint64_t)&v54 - v10;
  v71 = (void (*)(uint64_t *, char *, uint64_t))sub_2510BEA98();
  uint64_t v11 = *((void *)v71 - 1);
  MEMORY[0x270FA5388](v71);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_2510BEA88();
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v56 = sub_2510BEA68();
  uint64_t v55 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  uint64_t v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *v0;
  unint64_t v18 = v0[1];
  v73 = v0;
  sub_251073A9C(v17, v18);
  id v70 = (void (*)(char *, uint64_t))sub_25109784C(MEMORY[0x263F8EE78]);
  id v69 = (void (**)(char *))sub_251097A3C();
  sub_251097B64();
  sub_251097C34();
  (*(void (**)(char *, void, void *))(v11 + 104))(v13, *MEMORY[0x263F1BF38], v71);
  sub_2510BEA78();
  uint64_t v19 = v72;
  uint64_t result = sub_2510BEA08();
  if (v19) {
    return result;
  }
  uint64_t v21 = v67;
  uint64_t v22 = v62;
  uint64_t v57 = 0;
  uint64_t v83 = MEMORY[0x263F8EE78];
  int v23 = v77;
  uint64_t v54 = v16;
  sub_2510BEA58();
  uint64_t v24 = v78;
  uint64_t v25 = (uint64_t)v64;
  v71 = *(void (**)(uint64_t *, char *, uint64_t))(v78 + 16);
  uint64_t v72 = v78 + 16;
  v71(v64, v23, v5);
  uint64_t v26 = sub_251097F48(&qword_269B1BBB8, MEMORY[0x263F1BEB0]);
  sub_2510BF5A8();
  int64_t v28 = *(void (**)(char *, uint64_t))(v24 + 8);
  uint64_t v27 = v24 + 8;
  id v70 = v28;
  v28(v23, v5);
  id v29 = v68;
  *(void *)(v25 + *((int *)v68 + 9)) = v82[0];
  uint64_t v30 = v79;
  sub_251097EE4(v25, v79);
  uint64_t v31 = (uint64_t *)(v30 + *((int *)v29 + 9));
  uint64_t v32 = *v31;
  sub_2510BF5C8();
  if (v32 != v82[0])
  {
    uint64_t v78 = v27;
    BOOL v68 = (void (**)(uint64_t, char *, uint64_t))(v21 + 4);
    id v69 = (void (**)(char *))(v21 + 2);
    id v67 = v21 + 1;
    v63 = (void (**)(char *, char *, uint64_t))(v22 + 2);
    uint64_t v62 = v22 + 1;
    *(void *)&long long v33 = 136446210;
    long long v60 = v33;
    unint64_t v59 = 0x80000002510C3B10;
    uint64_t v58 = MEMORY[0x263F8EE58] + 8;
    uint64_t v35 = (uint64_t)v61;
    uint64_t v34 = v79;
    uint64_t v65 = v26;
    uint64_t v64 = v31;
    while (1)
    {
      uint64_t v37 = (void (*)(uint64_t *, void))sub_2510BF608();
      uint64_t v38 = v75;
      uint64_t v39 = v5;
      uint64_t v40 = v74;
      (*v69)(v75);
      v37(v82, 0);
      uint64_t v41 = v77;
      v71((uint64_t *)v77, (char *)v34, v39);
      uint64_t v42 = v40;
      uint64_t v5 = v39;
      sub_2510BF5D8();
      v70(v41, v39);
      (*v68)(v35, v38, v42);
      sub_251097F48((unint64_t *)&qword_269B1BBC0, MEMORY[0x263F1BEA0]);
      sub_2510BF5A8();
      sub_2510BF5C8();
      uint64_t v43 = v76;
      if (v82[0] == v80) {
        goto LABEL_17;
      }
      sub_2510BEA38();
      if (!v82[3]) {
        break;
      }
      if (!swift_dynamicCast()) {
        goto LABEL_17;
      }
      uint64_t v44 = v57;
      sub_251096668(v80, v81, v35);
      if (v44)
      {
        swift_bridgeObjectRelease();
        (*v67)(v35, v42);
        sub_251097F90(v79, (uint64_t (*)(void))sub_251097E50);
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v54, v56);
      }
      uint64_t v57 = 0;
      uint64_t v45 = swift_bridgeObjectRelease();
      MEMORY[0x253392F70](v45);
      if (*(void *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_2510BF448();
      }
      sub_2510BF478();
      sub_2510BF428();
LABEL_8:
      (*v67)(v35, v42);
      uint64_t v36 = *v64;
      uint64_t v34 = v79;
      sub_2510BF5C8();
      if (v36 == v82[0]) {
        goto LABEL_4;
      }
    }
    sub_25107B994((uint64_t)v82);
LABEL_17:
    uint64_t v46 = type metadata accessor for SampleDataDecoder(0);
    uint64_t v47 = v66;
    (*v63)(v43, (char *)v73 + *(int *)(v46 + 20), v66);
    uint64_t v48 = sub_2510BEC28();
    os_log_type_t v49 = sub_2510BF658();
    if (os_log_type_enabled(v48, v49))
    {
      int64_t v50 = v43;
      uint64_t v51 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      v82[0] = v52;
      *(_DWORD *)uint64_t v51 = v60;
      *(void *)(v51 + 4) = sub_25106EDC0(0xD000000000000011, v59, v82);
      _os_log_impl(&dword_251054000, v48, v49, "[%{public}s] Skipping empty row.", (uint8_t *)v51, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2533940F0](v52, -1, -1);
      MEMORY[0x2533940F0](v51, -1, -1);

      uint64_t v53 = v50;
      uint64_t v35 = (uint64_t)v61;
      (*v62)(v53, v47);
    }
    else
    {

      (*v62)(v43, v47);
    }
    goto LABEL_8;
  }
  uint64_t v34 = v79;
LABEL_4:
  sub_251097F90(v34, (uint64_t (*)(void))sub_251097E50);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v56);
  return v83;
}

id sub_251096668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v39 = type metadata accessor for StateOfMindDecoder();
  MEMORY[0x270FA5388](v39);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CategorySampleDecoder(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for QuantitySampleDecoder(0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_2510BF378())
  {
    uint64_t v14 = sub_2510BEA28();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v13, a3, v14);
    uint64_t v15 = type metadata accessor for SampleDataDecoder(0);
    uint64_t v16 = v4 + *(int *)(v15 + 24);
    uint64_t v17 = &v13[*(int *)(v11 + 20)];
    uint64_t v18 = sub_2510BE9E8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v17, v16, v18);
    sub_251099264(v4 + *(int *)(v15 + 28), (uint64_t)&v13[*(int *)(v11 + 24)]);
    sub_251096B50();
    id v20 = v19;
    uint64_t v21 = type metadata accessor for QuantitySampleDecoder;
    uint64_t v22 = (uint64_t)v13;
  }
  else
  {
    uint64_t v38 = a3;
    if (sub_2510BF378())
    {
      uint64_t v23 = sub_2510BEA28();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v10, v38, v23);
      uint64_t v24 = type metadata accessor for SampleDataDecoder(0);
      uint64_t v25 = v4 + *(int *)(v24 + 24);
      uint64_t v26 = &v10[*(int *)(v8 + 20)];
      uint64_t v27 = sub_2510BE9E8();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v26, v25, v27);
      sub_251099264(v4 + *(int *)(v24 + 28), (uint64_t)&v10[*(int *)(v8 + 24)]);
      sub_251096FF8();
      id v20 = v28;
      uint64_t v21 = type metadata accessor for CategorySampleDecoder;
      uint64_t v22 = (uint64_t)v10;
    }
    else
    {
      sub_251065E84(0, (unint64_t *)&qword_26B2119A0);
      id v29 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_stateOfMindType);
      id v20 = objc_msgSend(v29, sel_identifier);

      sub_2510BF258();
      LOBYTE(v29) = sub_2510BF378();
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
      {
        sub_251099210();
        swift_allocError();
        static SampleDataDecodingError.unsupportedSampleType(identifier:)(v37);
        swift_willThrow();
        return v20;
      }
      uint64_t v30 = sub_2510BEA28();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v7, v38, v30);
      uint64_t v31 = type metadata accessor for SampleDataDecoder(0);
      uint64_t v32 = v4 + *(int *)(v31 + 24);
      uint64_t v33 = v39;
      uint64_t v34 = &v7[*(int *)(v39 + 20)];
      uint64_t v35 = sub_2510BE9E8();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16))(v34, v32, v35);
      sub_251099264(v4 + *(int *)(v31 + 28), (uint64_t)&v7[*(int *)(v33 + 24)]);
      id v20 = (id)sub_25107B048();
      uint64_t v21 = (uint64_t (*)(void))type metadata accessor for StateOfMindDecoder;
      uint64_t v22 = (uint64_t)v7;
    }
  }
  sub_251097F90(v22, v21);
  return v20;
}

void sub_251096B50()
{
  uint64_t v1 = sub_2510BE908();
  uint64_t v35 = *(void *)(v1 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v29 - v5;
  uint64_t v7 = sub_2510BE6D8();
  uint64_t v36 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251094834();
  if (v0) {
    return;
  }
  sub_2510949F4();
  uint64_t v34 = v1;
  sub_251065E84(0, &qword_269B1BBE0);
  uint64_t v10 = sub_2510BF228();
  swift_bridgeObjectRelease();
  uint64_t v11 = (void *)MEMORY[0x253393230](v10);
  sub_251094B1C();
  double v13 = v12;
  id v14 = objc_msgSend(v11, sel_canonicalUnit);
  if (!v14)
  {
    __break(1u);
    return;
  }
  uint64_t v15 = v14;
  uint64_t v16 = (void *)sub_25109754C(v14);

  id v33 = objc_msgSend(self, sel_quantityWithUnit_doubleValue_, v16, v13);
  sub_25109768C(type metadata accessor for QuantitySampleDecoder);
  id v32 = v16;
  sub_2510BEA38();
  if (!v40)
  {
    sub_25107B994((uint64_t)v39);
    id v18 = v33;
    goto LABEL_7;
  }
  char v17 = swift_dynamicCast();
  id v18 = v33;
  if ((v17 & 1) == 0)
  {
LABEL_7:
    uint64_t v19 = 0;
    unint64_t v20 = 0xE000000000000000;
    goto LABEL_9;
  }
  uint64_t v19 = v37;
  unint64_t v20 = v38;
LABEL_9:
  uint64_t v21 = sub_2510AC298(v19, v20);
  swift_bridgeObjectRelease();
  sub_2510BE6C8();
  sub_2510BE6A8();
  uint64_t v31 = sub_2510BE8D8();
  uint64_t v30 = sub_2510BE8D8();
  if (v21)
  {
    id v33 = (id)sub_2510BF108();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v33 = 0;
  }
  uint64_t v22 = self;
  uint64_t v23 = (void *)v30;
  uint64_t v24 = (void *)v31;
  id v25 = objc_msgSend(v22, sel_quantitySampleWithType_quantity_startDate_endDate_metadata_, v11, v18, v31, v30, v33);

  uint64_t v26 = *(void (**)(char *, uint64_t))(v35 + 8);
  uint64_t v27 = v4;
  uint64_t v28 = v34;
  v26(v27, v34);
  v26(v6, v28);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v7);
}

void sub_251096FF8()
{
  uint64_t v1 = sub_2510BE908();
  uint64_t v28 = *(void *)(v1 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)v24 - v5;
  uint64_t v7 = sub_2510BE6D8();
  uint64_t v33 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_251094834();
  if (v0) {
    return;
  }
  sub_2510949F4();
  uint64_t v27 = v1;
  sub_251065E84(0, &qword_269B1BBE8);
  uint64_t v10 = sub_2510BF228();
  swift_bridgeObjectRelease();
  uint64_t v11 = (void *)MEMORY[0x253393210](v10);
  uint64_t v12 = sub_2510973D8();
  sub_25109768C(type metadata accessor for CategorySampleDecoder);
  sub_2510BEA38();
  if (!v32)
  {
    sub_25107B994((uint64_t)v31);
    goto LABEL_6;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    uint64_t v13 = 0;
    unint64_t v14 = 0xE000000000000000;
    goto LABEL_8;
  }
  uint64_t v13 = v29;
  unint64_t v14 = v30;
LABEL_8:
  uint64_t v15 = sub_2510AC298(v13, v14);
  swift_bridgeObjectRelease();
  sub_2510BE6C8();
  sub_2510BE6A8();
  uint64_t v26 = sub_2510BE8D8();
  uint64_t v25 = sub_2510BE8D8();
  if (v15)
  {
    uint64_t v16 = (void *)sub_2510BF108();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = 0;
  }
  char v17 = self;
  uint64_t v18 = v12;
  uint64_t v19 = (void *)v25;
  unint64_t v20 = (void *)v26;
  v24[1] = objc_msgSend(v17, sel_categorySampleWithType_value_startDate_endDate_metadata_, v11, v18, v26, v25, v16);

  uint64_t v21 = *(void (**)(char *, uint64_t))(v28 + 8);
  uint64_t v22 = v4;
  uint64_t v23 = v27;
  v21(v22, v27);
  v21(v6, v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v7);
}

uint64_t sub_2510973D8()
{
  sub_2510BEA38();
  if (v3)
  {
    if (swift_dynamicCast()) {
      return *(void *)&v4;
    }
  }
  else
  {
    sub_25107B994((uint64_t)v2);
  }
  sub_2510BEA38();
  if (!v3)
  {
    sub_25107B994((uint64_t)v2);
    goto LABEL_13;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
LABEL_13:
    sub_2510A0854(1);
    sub_251099210();
    swift_allocError();
    static SampleDataDecodingError.invalidSampleValue(expectedType:actualValue:)(v1);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v4 < 9.22337204e18)
  {
    if (v4 == (double)(uint64_t)v4) {
      return (uint64_t)v4;
    }
    goto LABEL_13;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_25109754C(void *a1)
{
  sub_2510BEA38();
  if (v10)
  {
    if (swift_dynamicCast())
    {
      uint64_t v2 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000) == 0) {
        uint64_t v2 = *(void *)v7 & 0xFFFFFFFFFFFFLL;
      }
      if (v2)
      {
        uint64_t v3 = (void *)sub_2510BF228();
        swift_bridgeObjectRelease();
        id v4 = objc_msgSend(self, sel_unitFromString_, v3);

        return (uint64_t)v4;
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_25107B994((uint64_t)v9);
  }
  sub_2510A0854(2);
  sub_251099210();
  swift_allocError();
  static SampleDataDecodingError.invalidSampleUnit(expectedUnit:actualUnitString:)(a1, v6);
  swift_bridgeObjectRelease();
  return swift_willThrow();
}

uint64_t sub_25109768C(uint64_t (*a1)(void))
{
  uint64_t v3 = sub_2510BE908();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v13[-v8];
  uint64_t result = sub_251094C40(3, a1, (uint64_t)&v13[-v8]);
  if (!v1)
  {
    sub_2510BEA38();
    sub_2510A0B48((uint64_t)v13);
    if (v11)
    {
      sub_2510A0854(4);
      sub_251099210();
      swift_allocError();
      static SampleDataDecodingError.invalidSampleDuration(actualDuration:)(v12);
      swift_bridgeObjectRelease();
      swift_willThrow();
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v4 + 16))(v7, v9, v3);
      sub_2510BE6B8();
    }
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v9, v3);
  }
  return result;
}

unint64_t sub_25109784C(uint64_t a1)
{
  sub_2510995DC();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (void *)((char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_251099644();
  uint64_t v7 = sub_2510BFB38();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = (char *)v6 + *(int *)(v3 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v26[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v4 + 72);
  swift_retain();
  while (1)
  {
    sub_2510996AC(v13, (uint64_t)v6);
    uint64_t v15 = *v6;
    uint64_t v16 = v6[1];
    unint64_t result = sub_2510A5E60(*v6, v16);
    if (v18) {
      break;
    }
    unint64_t v19 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v20 = (uint64_t *)(v8[6] + 16 * result);
    *unint64_t v20 = v15;
    v20[1] = v16;
    uint64_t v21 = v8[7];
    uint64_t v22 = sub_2510BEA98();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v21 + *(void *)(*(void *)(v22 - 8) + 72) * v19, v10, v22);
    uint64_t v23 = v8[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    void v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_251097A3C()
{
  sub_251099530(0, &qword_269B1B5A8, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2510C3B10;
  *(void *)(inited + 32) = 0;
  *(void *)(inited + 40) = 0xE000000000000000;
  *(void *)(inited + 48) = 1093619235;
  *(void *)(inited + 56) = 0xE400000000000000;
  *(void *)(inited + 64) = 0x412F4E20412F4E23;
  *(void *)(inited + 72) = 0xE800000000000000;
  *(void *)(inited + 80) = 4279843;
  *(void *)(inited + 88) = 0xE300000000000000;
  *(void *)(inited + 96) = 4271950;
  *(void *)(inited + 104) = 0xE300000000000000;
  *(void *)(inited + 112) = 16718;
  *(void *)(inited + 120) = 0xE200000000000000;
  *(void *)(inited + 128) = 1280070990;
  *(void *)(inited + 136) = 0xE400000000000000;
  *(void *)(inited + 144) = 6369134;
  *(void *)(inited + 152) = 0xE300000000000000;
  *(void *)(inited + 160) = 7104878;
  *(void *)(inited + 168) = 0xE300000000000000;
  *(void *)(inited + 176) = 1819047278;
  *(void *)(inited + 184) = 0xE400000000000000;
  uint64_t v1 = sub_2510992E4(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v1;
}

uint64_t sub_251097B64()
{
  sub_251099530(0, &qword_269B1B5A8, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2510C3B20;
  *(void *)(inited + 32) = 49;
  *(void *)(inited + 40) = 0xE100000000000000;
  *(void *)(inited + 48) = 1702195796;
  *(void *)(inited + 56) = 0xE400000000000000;
  *(void *)(inited + 64) = 1163219540;
  *(void *)(inited + 72) = 0xE400000000000000;
  *(void *)(inited + 80) = 1702195828;
  *(void *)(inited + 88) = 0xE400000000000000;
  uint64_t v1 = sub_2510992E4(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v1;
}

uint64_t sub_251097C34()
{
  sub_251099530(0, &qword_269B1B5A8, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_2510C3B20;
  *(void *)(inited + 32) = 48;
  *(void *)(inited + 40) = 0xE100000000000000;
  *(void *)(inited + 48) = 0x65736C6146;
  *(void *)(inited + 56) = 0xE500000000000000;
  *(void *)(inited + 64) = 0x45534C4146;
  *(void *)(inited + 72) = 0xE500000000000000;
  *(void *)(inited + 80) = 0x65736C6166;
  *(void *)(inited + 88) = 0xE500000000000000;
  uint64_t v1 = sub_2510992E4(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v1;
}

uint64_t _s18HealthKitAdditions23SampleDataDecodingErrorV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (char v7 = sub_2510BFC28(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return sub_2510BFC28();
    }
  }
  return result;
}

uint64_t type metadata accessor for SampleDataDecoder(uint64_t a1)
{
  return sub_251065BC4(a1, (uint64_t *)&unk_269B1BBC8);
}

uint64_t sub_251097DD0(uint64_t a1, uint64_t a2)
{
  sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_251097E50()
{
  if (!qword_269B1BBB0)
  {
    sub_2510BEA48();
    sub_251097F48(&qword_269B1BBB8, MEMORY[0x263F1BEB0]);
    unint64_t v0 = sub_2510BFA78();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BBB0);
    }
  }
}

uint64_t sub_251097EE4(uint64_t a1, uint64_t a2)
{
  sub_251097E50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_251097F48(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_251097F90(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for SampleDataDecodingError()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SampleDataDecodingError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SampleDataDecodingError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for SampleDataDecodingError(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SampleDataDecodingError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SampleDataDecodingError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SampleDataDecodingError()
{
  return &type metadata for SampleDataDecodingError;
}

uint64_t *initializeBufferWithCopyOfBuffer for SampleDataDecoder(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_251073A9C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_2510BEC48();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_2510BE9E8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[7];
    char v18 = (char *)a1 + v17;
    unint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = sub_2510BE798();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  return a1;
}

uint64_t destroy for SampleDataDecoder(uint64_t a1, int *a2)
{
  sub_251073A18(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_2510BEC48();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[6];
  uint64_t v7 = sub_2510BE9E8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = sub_2510BE798();
  uint64_t v12 = *(void *)(v9 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v8, 1, v9);
  if (!result)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
    return v11(v8, v9);
  }
  return result;
}

uint64_t *initializeWithCopy for SampleDataDecoder(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_251073A9C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_2510BEC48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_2510BE9E8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v16;
  char v18 = (char *)a2 + v16;
  uint64_t v19 = sub_2510BE798();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

uint64_t *assignWithCopy for SampleDataDecoder(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_251073A9C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_251073A18(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_2510BEC48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_2510BE9E8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  uint64_t v18 = a3[7];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = sub_2510BE798();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v16) = v23(v19, 1, v21);
  int v24 = v23(v20, 1, v21);
  if (!v16)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v19, v20, v21);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
    memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  return a1;
}

_OWORD *initializeWithTake for SampleDataDecoder(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2510BEC48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_2510BE9E8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_2510BE798();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

uint64_t *assignWithTake for SampleDataDecoder(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_251073A18(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_2510BEC48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_2510BE9E8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = sub_2510BE798();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v14) = v21(v17, 1, v19);
  int v22 = v21(v18, 1, v19);
  if (!v14)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
    memcpy(v17, v18, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for SampleDataDecoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_251098D54);
}

uint64_t sub_251098D54(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  uint64_t v8 = sub_2510BEC48();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = sub_2510BE9E8();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[6];
    goto LABEL_9;
  }
  sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[7];
  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for SampleDataDecoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_251098F08);
}

char *sub_251098F08(char *result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
    return result;
  }
  uint64_t v8 = sub_2510BEC48();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = sub_2510BE9E8();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[6];
    goto LABEL_7;
  }
  sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = &v5[a4[7]];
  return (char *)v15(v17, a2, a2, v16);
}

void sub_2510990A4()
{
  sub_2510BEC48();
  if (v0 <= 0x3F)
  {
    sub_2510BE9E8();
    if (v1 <= 0x3F)
    {
      sub_251099480(319, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t type metadata accessor for CategorySampleDecoder(uint64_t a1)
{
  return sub_251065BC4(a1, (uint64_t *)&unk_269B1BC18);
}

uint64_t type metadata accessor for QuantitySampleDecoder(uint64_t a1)
{
  return sub_251065BC4(a1, (uint64_t *)&unk_269B1BC08);
}

unint64_t sub_251099210()
{
  unint64_t result = qword_269B1BBD8;
  if (!qword_269B1BBD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BBD8);
  }
  return result;
}

uint64_t sub_251099264(uint64_t a1, uint64_t a2)
{
  sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2510992E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_25109957C();
    uint64_t v3 = sub_2510BF8F8();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      unint64_t v7 = (uint64_t *)(v6 + 16 * v4);
      uint64_t v9 = *v7;
      uint64_t v8 = v7[1];
      sub_2510BFD08();
      swift_bridgeObjectRetain();
      sub_2510BF2C8();
      uint64_t result = sub_2510BFD28();
      uint64_t v11 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v12 = result & ~v11;
      unint64_t v13 = v12 >> 6;
      uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
      uint64_t v15 = 1 << v12;
      if (((1 << v12) & v14) != 0)
      {
        uint64_t v16 = *(void *)(v3 + 48);
        uint64_t v17 = (void *)(v16 + 16 * v12);
        BOOL v18 = *v17 == v9 && v17[1] == v8;
        if (v18 || (uint64_t result = sub_2510BFC28(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v19 = ~v11;
        while (1)
        {
          unint64_t v12 = (v12 + 1) & v19;
          unint64_t v13 = v12 >> 6;
          uint64_t v14 = *(void *)(v5 + 8 * (v12 >> 6));
          uint64_t v15 = 1 << v12;
          if ((v14 & (1 << v12)) == 0) {
            break;
          }
          uint64_t v20 = (void *)(v16 + 16 * v12);
          if (*v20 != v9 || v20[1] != v8)
          {
            uint64_t result = sub_2510BFC28();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v13) = v15 | v14;
      int v22 = (void *)(*(void *)(v3 + 48) + 16 * v12);
      *int v22 = v9;
      v22[1] = v8;
      uint64_t v23 = *(void *)(v3 + 16);
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (v24)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v25;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

void sub_251099480(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_2510BF808();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_2510994D4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_251099480(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_251099530(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_25109957C()
{
  if (!qword_269B1BBF0)
  {
    unint64_t v0 = sub_2510BF908();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BBF0);
    }
  }
}

void sub_2510995DC()
{
  if (!qword_269B1BBF8)
  {
    sub_2510BEA98();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B1BBF8);
    }
  }
}

void sub_251099644()
{
  if (!qword_269B1BC00)
  {
    sub_2510BEA98();
    unint64_t v0 = sub_2510BFB48();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BC00);
    }
  }
}

uint64_t sub_2510996AC(uint64_t a1, uint64_t a2)
{
  sub_2510995DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_251099728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_2Tm);
}

uint64_t sub_251099740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3Tm);
}

uint64_t *sub_25109975C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_2510BEA28();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_2510BE9E8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 24);
    unint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = sub_2510BE798();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
  }
  return a1;
}

uint64_t sub_25109995C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510BEA28();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2510BE9E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  unint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_2510BE798();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_251099B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510BEA28();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2510BE9E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  unint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = sub_2510BE798();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v9) = v16(v12, 1, v14);
  int v17 = v16(v13, 1, v14);
  if (!v9)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_251099D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510BEA28();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2510BE9E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  unint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = sub_2510BE798();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_251099ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510BEA28();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2510BE9E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  unint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = sub_2510BE798();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v9) = v16(v12, 1, v14);
  int v17 = v16(v13, 1, v14);
  if (!v9)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

uint64_t sub_25109A0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25109A0F8);
}

uint64_t __swift_get_extra_inhabitant_index_2Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2510BEA28();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_2510BE9E8();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);
  return v15(v17, a2, v16);
}

uint64_t sub_25109A264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25109A278);
}

uint64_t __swift_store_extra_inhabitant_index_3Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_2510BEA28();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = sub_2510BE9E8();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  sub_251099480(0, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);
  return v17(v19, a2, a2, v18);
}

void sub_25109A3F0()
{
  sub_2510BEA28();
  if (v0 <= 0x3F)
  {
    sub_2510BE9E8();
    if (v1 <= 0x3F)
    {
      sub_251099480(319, (unint64_t *)&qword_269B1B690, MEMORY[0x263F063B0]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

unint64_t sub_25109A510()
{
  unint64_t result = qword_26B2120E0[0];
  if (!qword_26B2120E0[0])
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, qword_26B2120E0);
  }
  return result;
}

uint64_t HKHealthStore.makeSleepDaySummaryPublisher(morningIndexRange:ascending:limit:options:debugIdentifier:cacheSettings:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = v9;
  id v10 = a8;
  id v11 = v9;
  return swift_bridgeObjectRetain();
}

uint64_t HKHealthStore.SleepDaySummaryPublisher.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  int v5 = *(void **)(v1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(unsigned char *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  id v6 = v5;
  return swift_bridgeObjectRetain();
}

id HKHealthStore.SleepDaySummaryPublisher.healthStore.getter()
{
  return *(id *)(v0 + 64);
}

uint64_t sub_25109A60C@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  int v5 = *(void **)(v1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(unsigned char *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  id v6 = v5;
  return swift_bridgeObjectRetain();
}

id sub_25109A668()
{
  return *(id *)(v0 + 64);
}

uint64_t sub_25109A674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_25109AE70();
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

uint64_t sub_25109A6D8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_25109AEFC();
    uint64_t v5 = sub_2510BF418();
  }
  swift_retain();
  id v8 = a2;
  id v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

id _sSo13HKHealthStoreC18HealthKitAdditionsE24SleepDaySummaryPublisherV9makeQuery4with13outputHandlerSo7HKQueryCAE13ConfigurationV_yAC0oI6ResultOySaySo07HKSleepgH0CGGctFZ_0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = *((unsigned __int8 *)a1 + 16);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[6];
  uint64_t v18 = a1[5];
  uint64_t v19 = a1[7];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  id v12 = objc_allocWithZone(MEMORY[0x263F0A778]);
  aBlock[4] = sub_25105BAA8;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25109A6D8;
  void aBlock[3] = &block_descriptor_12;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  id v14 = objc_msgSend(v12, sel_initWithMorningIndexRange_ascending_limit_options_resultsHandler_, v5, v6, v7, v8, v9, v13);
  _Block_release(v13);
  swift_release();
  id v15 = v14;
  if (v10) {
    uint64_t v16 = (void *)sub_2510BF228();
  }
  else {
    uint64_t v16 = 0;
  }
  objc_msgSend(v14, sel_setDebugIdentifier_, v16, v18);

  objc_msgSend(v14, sel_setCacheSettings_, v19);
  return v14;
}

unint64_t sub_25109A914(uint64_t a1)
{
  unint64_t result = sub_25109A93C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_25109A93C()
{
  unint64_t result = qword_26B211A10;
  if (!qword_26B211A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B211A10);
  }
  return result;
}

void _s24SleepDaySummaryPublisherVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

  char v2 = *(void **)(a1 + 64);
}

uint64_t _s24SleepDaySummaryPublisherVwcp(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  uint64_t v4 = *(void **)(a2 + 56);
  uint64_t v5 = *(void **)(a2 + 64);
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRetain();
  id v6 = v4;
  id v7 = v5;
  return a1;
}

uint64_t _s24SleepDaySummaryPublisherVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 56);
  uint64_t v5 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v5;
  id v6 = v5;

  id v7 = *(void **)(a2 + 64);
  uint64_t v8 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v7;
  id v9 = v7;

  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s24SleepDaySummaryPublisherVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);

  uint64_t v5 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);

  return a1;
}

uint64_t _s24SleepDaySummaryPublisherVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s24SleepDaySummaryPublisherVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.SleepDaySummaryPublisher()
{
  return &type metadata for HKHealthStore.SleepDaySummaryPublisher;
}

void _s24SleepDaySummaryPublisherV13ConfigurationVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 56);
}

uint64_t _s24SleepDaySummaryPublisherV13ConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  long long v4 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

uint64_t _s24SleepDaySummaryPublisherV13ConfigurationVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 56);
  id v5 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v5;
  id v6 = v5;

  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s24SleepDaySummaryPublisherV13ConfigurationVwta(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);

  return a1;
}

uint64_t _s24SleepDaySummaryPublisherV13ConfigurationVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s24SleepDaySummaryPublisherV13ConfigurationVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.SleepDaySummaryPublisher.Configuration()
{
  return &type metadata for HKHealthStore.SleepDaySummaryPublisher.Configuration;
}

unint64_t sub_25109AE70()
{
  unint64_t result = qword_26B211A18[0];
  if (!qword_26B211A18[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26B211A18);
  }
  return result;
}

uint64_t sub_25109AEC4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

unint64_t sub_25109AEFC()
{
  unint64_t result = qword_26B2120C8;
  if (!qword_26B2120C8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B2120C8);
  }
  return result;
}

uint64_t sub_25109AF3C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000012;
  unint64_t v3 = 0x80000002510C4B30;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000012;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x7065636E6F636B68;
      unint64_t v3 = 0xE900000000000074;
      break;
    case 2:
      unint64_t v5 = 0x617274656C637963;
      unint64_t v3 = 0xED0000676E696B63;
      break;
    case 3:
      break;
    case 4:
      unint64_t v5 = 0xD00000000000001ALL;
      unint64_t v3 = 0x80000002510C4B50;
      break;
    default:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x657079746B68;
      break;
  }
  unint64_t v6 = 0x80000002510C4B30;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE900000000000074;
      if (v5 == 0x7065636E6F636B68) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v2 = 0x617274656C637963;
      unint64_t v6 = 0xED0000676E696B63;
      goto LABEL_12;
    case 3:
LABEL_12:
      if (v5 == v2) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 4:
      unint64_t v6 = 0x80000002510C4B50;
      if (v5 != 0xD00000000000001ALL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x657079746B68) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = sub_2510BFC28();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_25109B11C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000010;
  }
  else {
    unint64_t v3 = 0xD000000000000017;
  }
  if (v2) {
    unint64_t v4 = 0x80000002510C4B70;
  }
  else {
    unint64_t v4 = 0x80000002510C4B90;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000010;
  }
  else {
    unint64_t v5 = 0xD000000000000017;
  }
  if (a2) {
    unint64_t v6 = 0x80000002510C4B90;
  }
  else {
    unint64_t v6 = 0x80000002510C4B70;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_2510BFC28();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_25109B1C8(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000024;
  unint64_t v3 = 0x80000002510C4BB0;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD000000000000031;
    }
    else {
      unint64_t v5 = 0xD000000000000044;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x80000002510C4BE0;
    }
    else {
      unint64_t v6 = 0x80000002510C4C20;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0xD000000000000024;
  unint64_t v6 = 0x80000002510C4BB0;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0xD000000000000031;
    }
    else {
      unint64_t v2 = 0xD000000000000044;
    }
    if (v7 == 1) {
      unint64_t v3 = 0x80000002510C4BE0;
    }
    else {
      unint64_t v3 = 0x80000002510C4C20;
    }
  }
LABEL_15:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = sub_2510BFC28();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

HealthKitAdditions::SampleDataEncodingError __swiftcall SampleDataEncodingError.init(title:description:)(Swift::String title, Swift::String description)
{
  *unint64_t v2 = title;
  v2[1] = description;
  result.description = description;
  result.title = title;
  return result;
}

uint64_t sub_25109B2D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_2510BE908();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_2510BE958();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
  sub_2510BE938();
  uint64_t v11 = (void *)sub_2510BE948();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  objc_msgSend(v10, sel_setLocale_, v11);

  id v12 = (void *)sub_2510BF228();
  objc_msgSend(v10, sel_setDateFormat_, v12);

  id v13 = objc_msgSend(v1, sel_startDate);
  sub_2510BE8F8();

  id v14 = (void *)sub_2510BE8D8();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v15 = objc_msgSend(v10, sel_stringFromDate_, v14);

  uint64_t v16 = sub_2510BF258();
  return v16;
}

uint64_t SampleDataEncodingError.title.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SampleDataEncodingError.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t SampleDataEncodingError.localizedDescription.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t static SampleDataEncodingError.sampleTypeDoesNotSupportEncoding(sampleType:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_2510BF928();
  id v4 = objc_msgSend(a1, sel_identifier);
  sub_2510BF258();

  sub_2510BF2F8();
  swift_bridgeObjectRelease();
  uint64_t result = sub_2510BF2F8();
  *a2 = 0xD00000000000002ELL;
  a2[1] = 0x80000002510C5CF0;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  return result;
}

uint64_t static SampleDataEncodingError.invalidCodingFormat(sampleType:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_2510BF928();
  id v4 = objc_msgSend(a1, sel_identifier);
  sub_2510BF258();

  sub_2510BF2F8();
  swift_bridgeObjectRelease();
  uint64_t result = sub_2510BF2F8();
  *a2 = 0xD00000000000002BLL;
  a2[1] = 0x80000002510C5D60;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  return result;
}

uint64_t static SampleDataEncodingError.nonconformanceToEncodingProtocol(sampleType:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_2510BF928();
  id v4 = objc_msgSend(a1, sel_identifier, 0, 0xE000000000000000);
  uint64_t v5 = sub_2510BF258();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();

  sub_2510BF2F8();
  sub_2510BF2F8();
  uint64_t result = sub_2510BF2F8();
  *a2 = 0xD000000000000032;
  a2[1] = 0x80000002510C5DF0;
  a2[2] = v5;
  a2[3] = v7;
  return result;
}

uint64_t static SampleDataEncodingError.incompatibleRowFormat(rowFormat:sampleType:)@<X0>(void *a1@<X2>, void *a2@<X8>)
{
  sub_2510BF928();
  id v4 = objc_msgSend(a1, sel_identifier, 0, 0xE000000000000000);
  uint64_t v5 = sub_2510BF258();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();

  sub_2510BF2F8();
  uint64_t result = sub_2510BF2F8();
  *a2 = 0xD000000000000028;
  a2[1] = 0x80000002510C5E30;
  a2[2] = v5;
  a2[3] = v7;
  return result;
}

uint64_t static SampleDataEncodingError.attemptedToDecodeMultipleSampleTypes(expectedSampleType:otherSampleType:)@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  sub_2510BF928();
  id v6 = objc_msgSend(a2, sel_description);
  sub_2510BF258();

  sub_2510BF2F8();
  swift_bridgeObjectRelease();
  sub_2510BF2F8();
  id v7 = objc_msgSend(a1, sel_description);
  sub_2510BF258();

  sub_2510BF2F8();
  swift_bridgeObjectRelease();
  uint64_t result = sub_2510BF2F8();
  *a3 = 0xD00000000000002ALL;
  a3[1] = 0x80000002510C5E80;
  a3[2] = 0;
  a3[3] = 0xE000000000000000;
  return result;
}

uint64_t SampleDataEncoder.init(samples:logger:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  id v4 = (char *)a3 + *(int *)(type metadata accessor for SampleDataEncoder() + 20);
  uint64_t v5 = sub_2510BEC48();
  id v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);
  return v6(v4, a2, v5);
}

id SampleDataEncoder.encodeSamples()()
{
  uint64_t v2 = v1;
  uint64_t v3 = *v0;
  uint64_t v4 = (unint64_t)*v0 >> 62;
  if (!v4)
  {
    uint64_t v5 = *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_3;
    }
LABEL_48:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_47:
  swift_bridgeObjectRetain();
  if (!sub_2510BFAF8()) {
    goto LABEL_48;
  }
LABEL_3:
  unint64_t v62 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
  {
    id v6 = (id)MEMORY[0x2533934D0](0, v3);
  }
  else
  {
    if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_52;
    }
    id v6 = *(id *)(v3 + 32);
  }
  id v7 = v6;
  swift_bridgeObjectRelease();
  uint64_t v8 = (const char *)&_swift_FORCE_LOAD___swiftXPC___HealthKitAdditions;
  id v9 = objc_msgSend(v7, sel_sampleType);
  id v10 = objc_msgSend(v9, sel_identifier);

  uint64_t v11 = sub_2510BF258();
  uint64_t v13 = v12;

  char v14 = sub_2510A0C20(v11, v13);
  if (v14 != 2)
  {
    char v17 = v14;
    id v59 = v7;
    sub_25109D850(0, &qword_269B1B5A8, MEMORY[0x263F8E0F8]);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_2510C2790;
    if (v17) {
      unint64_t v19 = 0xD000000000000044;
    }
    else {
      unint64_t v19 = 0xD000000000000031;
    }
    unint64_t v20 = 0x80000002510C5C00;
    if ((v17 & 1) == 0) {
      unint64_t v20 = 0x80000002510C5C50;
    }
    unint64_t v63 = v19;
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v20;
    uint64_t v66 = (void *)v18;
    unint64_t v61 = v20;
    if (v4)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_2510BFAF8();
      if (!v21) {
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v21 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v21)
      {
LABEL_40:
        swift_bridgeObjectRelease();
        v69[0] = v66;
        if (qword_269B1AF10 == -1)
        {
LABEL_41:
          sub_25109D850(0, &qword_269B1B668, MEMORY[0x263F8D488]);
          sub_25107B918();
          unint64_t v52 = sub_2510BF1A8();
          unint64_t v54 = v53;
          swift_bridgeObjectRelease();
          id v15 = (id)sub_25109C3A8(v52, v54);

          return v15;
        }
LABEL_52:
        swift_once();
        goto LABEL_41;
      }
    }
    uint64_t v4 = 4;
    uint64_t v60 = v3;
    while (1)
    {
      if (v62) {
        id v22 = (id)MEMORY[0x2533934D0](v4 - 4, v3);
      }
      else {
        id v22 = *(id *)(v3 + 8 * v4);
      }
      uint64_t v23 = v22;
      if (__OFADD__(v4 - 4, 1))
      {
        __break(1u);
        goto LABEL_47;
      }
      uint64_t v64 = v4 - 3;
      BOOL v24 = v8;
      id v72 = v22;
      sub_251065E84(0, &qword_26B212170);
      sub_25109DE5C(0, &qword_269B1BC28);
      id v25 = v23;
      if (!swift_dynamicCast())
      {
        uint64_t v68 = 0;
        memset(v67, 0, sizeof(v67));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_25109DEAC((uint64_t)v67, &qword_269B1BC30, &qword_269B1BC28);
        id v15 = [v25 v24 + 717];
        sub_25107BB00();
        swift_allocError();
        static SampleDataEncodingError.nonconformanceToEncodingProtocol(sampleType:)(v15, v55);

        swift_willThrow();
        return v15;
      }
      uint64_t v65 = v2;
      sub_251077DA8(v67, (uint64_t)v69);
      id v26 = [v25 v24 + 717];
      id v27 = objc_msgSend(v26, sel_identifier);

      uint64_t v28 = sub_2510BF258();
      uint64_t v30 = v29;

      unint64_t v31 = 0x80000002510C5C50;
      unint64_t v32 = 0xD000000000000031;
      if (sub_2510BF378() & 1) != 0 || (sub_2510BF378()) {
        goto LABEL_28;
      }
      sub_251065E84(0, (unint64_t *)&qword_26B2119A0);
      id v33 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_stateOfMindType);
      id v34 = objc_msgSend(v33, sel_identifier);

      uint64_t v35 = sub_2510BF258();
      uint64_t v37 = v36;

      if (v35 == v28 && v37 == v30) {
        break;
      }
      char v51 = sub_2510BFC28();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v38 = v65;
      unint64_t v39 = v61;
      if ((v51 & 1) == 0)
      {
LABEL_44:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v15 = [v59 v24 + 717];
        id v56 = [v25 v24 + 717];
        sub_25107BB00();
        swift_allocError();
        static SampleDataEncodingError.attemptedToDecodeMultipleSampleTypes(expectedSampleType:otherSampleType:)(v15, v56, v57);

        swift_willThrow();
        goto LABEL_45;
      }
      unint64_t v32 = 0xD000000000000044;
      unint64_t v31 = 0x80000002510C5C00;
LABEL_29:
      if (v32 == v63 && v31 == v39)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v40 = sub_2510BFC28();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v40 & 1) == 0) {
          goto LABEL_44;
        }
      }
      uint64_t v41 = v70;
      uint64_t v42 = v71;
      id v15 = __swift_project_boxed_opaque_existential_0(v69, v70);
      uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v41, v42);
      uint64_t v2 = v38;
      if (v38)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

LABEL_45:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
        return v15;
      }
      uint64_t v45 = v43;
      uint64_t v46 = v44;
      uint64_t v47 = v66;
      unint64_t v49 = v66[2];
      unint64_t v48 = v66[3];
      if (v49 >= v48 >> 1) {
        uint64_t v47 = sub_251077780((void *)(v48 > 1), v49 + 1, 1, v66);
      }
      v47[2] = v49 + 1;
      uint64_t v66 = v47;
      int64_t v50 = &v47[2 * v49];
      v50[4] = v45;
      v50[5] = v46;

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
      ++v4;
      uint64_t v3 = v60;
      uint64_t v8 = v24;
      if (v64 == v21) {
        goto LABEL_40;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v32 = 0xD000000000000044;
    unint64_t v31 = 0x80000002510C5C00;
LABEL_28:
    swift_bridgeObjectRelease();
    uint64_t v38 = v65;
    unint64_t v39 = v61;
    goto LABEL_29;
  }
  id v15 = objc_msgSend(v7, sel_sampleType);
  sub_25107BB00();
  swift_allocError();
  static SampleDataEncodingError.invalidCodingFormat(sampleType:)(v15, v16);

  swift_willThrow();
  return v15;
}

uint64_t sub_25109C3A8(unint64_t a1, unint64_t a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  sub_25109DE5C(0, &qword_269B1BC48);
  swift_bridgeObjectRetain();
  if (swift_dynamicCast())
  {
    sub_251077DA8(v38, (uint64_t)&v41);
    __swift_project_boxed_opaque_existential_0(&v41, v43);
    sub_2510BE7B8();
    swift_bridgeObjectRelease();
    v38[0] = v40;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
    return *(void *)&v38[0];
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  sub_25109DEAC((uint64_t)v38, &qword_269B1BC50, &qword_269B1BC48);
  unint64_t v2 = a1;
  unint64_t v3 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = a1;
      uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
      id v6 = (char *)&v41 + (HIBYTE(a2) & 0xF);
      id v7 = &v41;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = sub_2510BF9C8();
      }
      if (v4) {
        id v6 = (unsigned char *)(v4 + v5);
      }
      else {
        id v6 = 0;
      }
      id v7 = (uint64_t *)v4;
    }
    uint64_t v8 = sub_25109E124(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v38[0] = v8;
      *((void *)&v38[0] + 1) = v10;
      return *(void *)&v38[0];
    }
    unint64_t v2 = a1;
    unint64_t v3 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_70:
    uint64_t v11 = sub_2510BF308();
    goto LABEL_17;
  }
LABEL_69:
  uint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v11 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v38[0] = sub_25109E188(v11);
  *((void *)&v38[0] + 1) = v12;
  MEMORY[0x270FA5388](*(void *)&v38[0]);
  unint64_t v13 = (unint64_t)sub_25109D2D8((void *(*)(uint64_t *__return_ptr, char *, char *))sub_25109E228);
  uint64_t v16 = *((void *)&v38[0] + 1) >> 62;
  uint64_t v17 = v13;
  uint64_t v18 = v3;
  unint64_t v19 = v14;
  switch(*((void *)&v38[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v38[0]) - LODWORD(v38[0]);
      if (__OFSUB__(DWORD1(v38[0]), v38[0])) {
        goto LABEL_73;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v15 != v20)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v24 = *(uint64_t *)&v38[0] >> 32;
          }
          else {
            uint64_t v24 = *(void *)(*(void *)&v38[0] + 24);
          }
        }
        else
        {
          uint64_t v24 = BYTE14(v38[0]);
        }
LABEL_61:
        if (v24 < v15)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
        }
        sub_2510BE868();
LABEL_63:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
LABEL_29:
      if ((v3 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v40 + 7) = 0;
      *(void *)&long long v40 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v3 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v35 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v33 = (uint64_t)v8;
      uint64_t v34 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(*(void *)&v38[0] + 16);
      uint64_t v21 = *(void *)(*(void *)&v38[0] + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_23;
      }
      goto LABEL_74;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v24 = 0;
      goto LABEL_61;
    default:
      uint64_t v20 = BYTE14(v38[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v29 = v19 & 0xC;
    unint64_t v2 = v19;
    if (v29 == v28) {
      unint64_t v2 = sub_25109D25C(v19, v17, v18);
    }
    unint64_t v30 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = sub_2510BF348();
      char v31 = v2;
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = v17;
      uint64_t v42 = v35;
      char v31 = *((unsigned char *)&v41 + v30);
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v2 = v34;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = sub_2510BF9C8();
      }
      char v31 = *(unsigned char *)(v2 + v30);
      if (v29 != v28)
      {
LABEL_47:
        if ((v18 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v2 = sub_25109D25C(v19, v17, v18);
    unint64_t v19 = v2;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v25 <= v19 >> 16) {
      goto LABEL_68;
    }
    unint64_t v2 = sub_2510BF318();
    unint64_t v19 = v2;
LABEL_53:
    *((unsigned char *)&v40 + v26) = v31;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_67;
    }
    BYTE14(v40) = v26;
    if (v26 == 14)
    {
      uint64_t v41 = v40;
      LODWORD(v42) = DWORD2(v40);
      WORD2(v42) = WORD6(v40);
      sub_2510BE878();
      LOBYTE(v26) = 0;
      BYTE14(v40) = 0;
    }
  }
  while (4 * v25 != v19 >> 14);
  uint64_t v8 = (unsigned char *)v33;
  if ((_BYTE)v26)
  {
    uint64_t v41 = v40;
    LODWORD(v42) = DWORD2(v40);
    WORD2(v42) = WORD6(v40);
    sub_2510BE878();
    sub_251075730(v33, v10);
    goto LABEL_63;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  sub_251075730((uint64_t)v8, v10);
LABEL_64:
  swift_bridgeObjectRelease();
  return *(void *)&v38[0];
}

uint64_t sub_25109C8FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_2510BE908();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  id v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v30 - v7;
  sub_25109D850(0, &qword_269B1B5A8, MEMORY[0x263F8E0F8]);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_2510C3D20;
  id v10 = objc_msgSend(v0, sel_categoryType);
  id v11 = objc_msgSend(v10, sel_identifier);

  uint64_t v12 = sub_2510BF258();
  uint64_t v14 = v13;

  *(void *)(v9 + 32) = v12;
  *(void *)(v9 + 40) = v14;
  id v31 = objc_msgSend(v1, sel_value);
  *(void *)(v9 + 48) = sub_2510BFBF8();
  *(void *)(v9 + 56) = v15;
  *(void *)(v9 + 64) = 0;
  *(void *)(v9 + 72) = 0xE000000000000000;
  *(void *)(v9 + 80) = sub_25109B2D8();
  *(void *)(v9 + 88) = v16;
  id v17 = objc_msgSend(v1, sel_endDate);
  sub_2510BE8F8();

  id v18 = objc_msgSend(v1, sel_startDate);
  sub_2510BE8F8();

  sub_2510BE8C8();
  unint64_t v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  v19(v6, v2);
  v19(v8, v2);
  *(void *)(v9 + 96) = sub_2510BF4F8();
  *(void *)(v9 + 104) = v20;
  id v21 = objc_msgSend(v1, sel_metadata);
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = sub_2510BF118();
  }
  else
  {
    uint64_t v23 = 0;
  }
  uint64_t v24 = v30;
  uint64_t v25 = sub_2510AC7C8(v23);
  if (v24)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v9 + 16) = 0;
    swift_release();
  }
  else
  {
    uint64_t v27 = v25;
    uint64_t v28 = v26;
    swift_bridgeObjectRelease();
    *(void *)(v9 + 112) = v27;
    *(void *)(v9 + 120) = v28;
    id v31 = (id)v9;
    if (qword_269B1AF18 != -1) {
      swift_once();
    }
    sub_25109D850(0, &qword_269B1B668, MEMORY[0x263F8D488]);
    sub_25107B918();
    uint64_t v23 = sub_2510BF1A8();
    swift_bridgeObjectRelease();
  }
  return v23;
}

uint64_t sub_25109CCAC()
{
  return sub_25109C8FC();
}

uint64_t sub_25109CCD0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_2510BF928();
  id v4 = objc_msgSend(a1, sel_identifier, 0, 0xE000000000000000);
  uint64_t v5 = sub_2510BF258();
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();

  uint64_t result = sub_2510BF2F8();
  *a2 = 0xD000000000000028;
  a2[1] = 0x80000002510C5EF0;
  a2[2] = v5;
  a2[3] = v7;
  return result;
}

id sub_25109CDA4()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_2510BE908();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v41 - v8;
  id v10 = objc_msgSend(v0, sel_quantityType);
  id v11 = objc_msgSend(v10, sel_canonicalUnit);

  if (v11)
  {
    uint64_t v42 = v1;
    sub_25109D850(0, &qword_269B1B5A8, MEMORY[0x263F8E0F8]);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_2510C3D20;
    id v13 = objc_msgSend(v2, sel_quantityType);
    id v14 = objc_msgSend(v13, sel_identifier);
    uint64_t v41 = v3;
    id v15 = v14;

    uint64_t v16 = sub_2510BF258();
    uint64_t v18 = v17;

    *(void *)(v12 + 32) = v16;
    *(void *)(v12 + 40) = v18;
    id v19 = objc_msgSend(v2, sel_quantity);
    objc_msgSend(v19, sel_doubleValueForUnit_, v11);

    *(void *)(v12 + 48) = sub_2510BF4F8();
    *(void *)(v12 + 56) = v20;
    id v43 = v11;
    id v21 = objc_msgSend(v11, sel_unitString);
    uint64_t v22 = sub_2510BF258();
    uint64_t v24 = v23;

    *(void *)(v12 + 64) = v22;
    *(void *)(v12 + 72) = v24;
    *(void *)(v12 + 80) = sub_25109B2D8();
    *(void *)(v12 + 88) = v25;
    id v26 = objc_msgSend(v2, sel_endDate);
    sub_2510BE8F8();

    id v27 = objc_msgSend(v2, sel_startDate);
    sub_2510BE8F8();

    sub_2510BE8C8();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v29 = v41;
    v28(v7, v41);
    v28(v9, v29);
    *(void *)(v12 + 96) = sub_2510BF4F8();
    *(void *)(v12 + 104) = v30;
    id v31 = objc_msgSend(v2, sel_metadata);
    if (v31)
    {
      unint64_t v32 = v31;
      id v10 = (id)sub_2510BF118();
    }
    else
    {
      id v10 = 0;
    }
    uint64_t v35 = v42;
    uint64_t v36 = sub_2510AC7C8((uint64_t)v10);
    if (v35)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v12 + 16) = 0;

      swift_release();
    }
    else
    {
      uint64_t v38 = v36;
      uint64_t v39 = v37;
      swift_bridgeObjectRelease();
      *(void *)(v12 + 112) = v38;
      *(void *)(v12 + 120) = v39;
      uint64_t v44 = v12;
      if (qword_269B1AF18 != -1) {
        swift_once();
      }
      sub_25109D850(0, &qword_269B1B668, MEMORY[0x263F8D488]);
      sub_25107B918();
      id v10 = (id)sub_2510BF1A8();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    id v33 = objc_msgSend(v2, sel_quantityType);
    sub_25107BB00();
    swift_allocError();
    sub_25109CCD0(v33, v34);

    swift_willThrow();
  }
  return v10;
}

id sub_25109D238()
{
  return sub_25109CDA4();
}

uint64_t sub_25109D25C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_2510BF368();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x253392EA0](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

char *sub_25109D2D8(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v1 = xmmword_2510C3D30;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (sub_2510BE708() && __OFSUB__((int)v4, sub_2510BE738())) {
        goto LABEL_24;
      }
      sub_2510BE748();
      swift_allocObject();
      uint64_t v13 = sub_2510BE6E8();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = sub_25109D6C4((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      sub_2510BE848();
      uint64_t result = sub_25109D6C4(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        *uint64_t v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *uint64_t v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      *uint64_t v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

unsigned char *sub_25109D5DC@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)sub_25109DF60(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)sub_25109E024((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)sub_25109E0A0((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void *sub_25109D654(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *sub_25109D6C4(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)sub_2510BE708();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)sub_2510BE738();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = sub_2510BE728();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_25109D778@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_2510BF938();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SampleDataEncoder()
{
  uint64_t result = qword_269B1BC38;
  if (!qword_269B1BC38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_25109D850(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8D310]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for SampleDataEncodingError()
{
  return &type metadata for SampleDataEncodingError;
}

uint64_t *initializeBufferWithCopyOfBuffer for SampleDataEncoder(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_2510BEC48();
    BOOL v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for SampleDataEncoder(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_2510BEC48();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for SampleDataEncoder(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_2510BEC48();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *assignWithCopy for SampleDataEncoder(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2510BEC48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *initializeWithTake for SampleDataEncoder(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_2510BEC48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for SampleDataEncoder(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_2510BEC48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SampleDataEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25109DC54);
}

uint64_t sub_25109DC54(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_2510BEC48();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SampleDataEncoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25109DD18);
}

void *sub_25109DD18(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_2510BEC48();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_25109DDC0()
{
  uint64_t result = sub_2510BEC48();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_25109DE5C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_25109DEAC(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  sub_25109DF08(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_25109DF08(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_25109DE5C(255, a3);
    unint64_t v4 = sub_2510BF808();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_25109DF60(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_25109E024(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_2510BE748();
  swift_allocObject();
  uint64_t result = sub_2510BE6F8();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_2510BE858();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_25109E0A0(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_2510BE748();
  swift_allocObject();
  uint64_t result = sub_2510BE6F8();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

unsigned char *sub_25109E124(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)sub_25109DF60(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (unsigned char *)sub_25109E024((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (unsigned char *)sub_25109E0A0((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_25109E188(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      sub_2510BE748();
      swift_allocObject();
      sub_2510BE718();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_2510BE858();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

void *sub_25109E228@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  void v12[2] = v13;
  uint64_t result = sub_25109D654((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_25109E294, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_25109E294@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_25109D778(a1, a2);
}

id sub_25109E2B4()
{
  id v1 = objc_msgSend(*v0, sel_featureAvailabilityProviding);
  return v1;
}

uint64_t dispatch thunk of FeatureStatusProviding.featureAvailabilityProviding.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t Publisher<>.firstStatusWhereFirstRestoreCompleted(orSyncDisabled:orHasErrorRequiringUserAction:)(char a1, char a2)
{
  uint64_t v4 = sub_2510BEC78();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v11 - v6;
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = a1;
  *(unsigned char *)(v8 + 17) = a2;
  sub_2510BEE88();
  swift_release();
  swift_getWitnessTable();
  uint64_t v9 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

BOOL sub_25109E468(uint64_t a1, char a2, char a3)
{
  BOOL result = 0;
  if ((*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    id v5 = *(id *)a1;
    id v6 = *(id *)a1;
    Swift::Bool v7 = HKCloudSyncObserverStatus.isFirstRestoreComplete(orSyncDisabled:orHasErrorRequiringUserAction:)(a2 & 1, a3 & 1);
    sub_2510756CC(v5);
    if (v7) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_25109E4D8()
{
  return MEMORY[0x270FA0238](v0, 18, 7);
}

BOOL sub_25109E4E8(uint64_t a1)
{
  return sub_25109E468(a1, *(unsigned char *)(v1 + 16), *(unsigned char *)(v1 + 17));
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.clusterUUID.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25109E500(v1, a1);
}

uint64_t sub_25109E500(uint64_t a1, uint64_t a2)
{
  sub_25109E564();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_25109E564()
{
  if (!qword_269B1BC58)
  {
    sub_2510BE928();
    unint64_t v0 = sub_2510BF808();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BC58);
    }
  }
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.clusterUUID.setter(uint64_t a1)
{
  return sub_25109E5C4(a1, v1);
}

uint64_t sub_25109E5C4(uint64_t a1, uint64_t a2)
{
  sub_25109E564();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*HKRaceRouteLocationSeriesQueryDescriptor.clusterUUID.modify())()
{
  return nullsub_1;
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.workoutUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor() + 20);
  return sub_25109E500(v3, a1);
}

uint64_t type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor()
{
  uint64_t result = qword_269B1BC70;
  if (!qword_269B1BC70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.workoutUUID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor() + 20);
  return sub_25109E5C4(a1, v3);
}

uint64_t (*HKRaceRouteLocationSeriesQueryDescriptor.workoutUUID.modify())()
{
  return nullsub_1;
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.workoutSelection.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor() + 24));
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.workoutSelection.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  *(void *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*HKRaceRouteLocationSeriesQueryDescriptor.workoutSelection.modify())()
{
  return nullsub_1;
}

double HKRaceRouteLocationSeriesQueryDescriptor.timestampAnchor.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor() + 28));
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.timestampAnchor.setter(double a1)
{
  uint64_t result = type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  *(double *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

uint64_t (*HKRaceRouteLocationSeriesQueryDescriptor.timestampAnchor.modify())()
{
  return nullsub_1;
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.limit.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor() + 32));
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.limit.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  *(void *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*HKRaceRouteLocationSeriesQueryDescriptor.limit.modify())()
{
  return nullsub_1;
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor() + 36);
  uint64_t v4 = sub_2510BEFA8();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.queryAttributes.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor() + 36);
  uint64_t v4 = sub_2510BEFA8();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*HKRaceRouteLocationSeriesQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.init(clusterUUID:workoutSelection:timestampAnchor:limit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10 = sub_2510BE928();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(a4, 1, 1, v10);
  uint64_t Descriptor = (int *)type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  v12(a4 + Descriptor[5], 1, 1, v10);
  sub_2510BEF78();
  sub_25109EBD4(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(a4, a1, v10);
  uint64_t result = ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v12)(a4, 0, 1, v10);
  *(void *)(a4 + Descriptor[6]) = a2;
  *(double *)(a4 + Descriptor[7]) = a5;
  *(void *)(a4 + Descriptor[8]) = a3;
  return result;
}

uint64_t sub_25109EBD4(uint64_t a1)
{
  sub_25109E564();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.init(workoutUUID:timestampAnchor:limit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8 = sub_2510BE928();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v10(a3, 1, 1, v8);
  uint64_t Descriptor = (int *)type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  uint64_t v12 = a3 + Descriptor[5];
  v10(v12, 1, 1, v8);
  sub_2510BEF78();
  sub_25109EBD4(v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v12, a1, v8);
  uint64_t result = ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v10)(v12, 0, 1, v8);
  *(void *)(a3 + Descriptor[6]) = 1;
  *(double *)(a3 + Descriptor[7]) = a4;
  *(void *)(a3 + Descriptor[8]) = a2;
  return result;
}

uint64_t HKRaceRouteLocationSeriesQueryDescriptor.result(for:)(uint64_t a1)
{
  *(void *)(v2 + 88) = a1;
  *(void *)(v2 + 96) = v1;
  return MEMORY[0x270FA2498](sub_25109EDB8, 0, 0);
}

uint64_t sub_25109EDB8()
{
  uint64_t v2 = (void *)v0[11];
  uint64_t v1 = v0[12];
  v0[2] = v0;
  v0[7] = v0 + 10;
  v0[3] = sub_251078FF0;
  uint64_t v3 = swift_continuation_init();
  sub_25109EE64(v3, v2, v1);
  return MEMORY[0x270FA23F0](v0 + 2);
}

void sub_25109EE64(uint64_t a1, void *a2, uint64_t a3)
{
  sub_25109E564();
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v41 - v10;
  uint64_t v12 = sub_2510BE928();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v41 - v17;
  uint64_t v19 = swift_allocObject();
  id v43 = a2;
  *(void *)(v19 + 16) = a2;
  *(void *)(v19 + 24) = a1;
  uint64_t Descriptor = (int *)type metadata accessor for HKRaceRouteLocationSeriesQueryDescriptor();
  uint64_t v21 = Descriptor[5];
  uint64_t v42 = a3;
  sub_25109E500(a3 + v21, (uint64_t)v11);
  uint64_t v44 = v13;
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v22(v11, 1, v12) == 1)
  {
    uint64_t v41 = v16;
    uint64_t v23 = v44;
    id v24 = v43;
    sub_25109EBD4((uint64_t)v11);
    sub_25109E500(v42, (uint64_t)v9);
    if (v22(v9, 1, v12) == 1)
    {
      sub_25109EBD4((uint64_t)v9);
      goto LABEL_8;
    }
    id v33 = v41;
    uint64_t v25 = v12;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v41, v9, v12);
    uint64_t v34 = *(void *)(v42 + Descriptor[6]);
    double v35 = *(double *)(v42 + Descriptor[7]);
    uint64_t v36 = *(void *)(v42 + Descriptor[8]);
    id v37 = objc_allocWithZone(MEMORY[0x263F0A688]);
    swift_retain();
    uint64_t v38 = (void *)sub_2510BE918();
    unint64_t v49 = sub_2510A075C;
    uint64_t v50 = v19;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v46 = 1107296256;
    uint64_t v47 = sub_2510A0764;
    unint64_t v48 = &block_descriptor_13;
    uint64_t v39 = _Block_copy(&aBlock);
    id v32 = objc_msgSend(v37, sel_initWithClusterUUID_workoutSelection_timestampAnchor_limit_dataHandler_, v38, v34, v36, v39, v35);
    _Block_release(v39);

    swift_release();
    uint64_t v18 = v33;
  }
  else
  {
    uint64_t v25 = v12;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v18, v11, v12);
    double v26 = *(double *)(v42 + Descriptor[7]);
    uint64_t v27 = *(void *)(v42 + Descriptor[8]);
    id v28 = objc_allocWithZone(MEMORY[0x263F0A688]);
    id v29 = v43;
    swift_retain();
    uint64_t v30 = (void *)sub_2510BE918();
    unint64_t v49 = sub_2510A075C;
    uint64_t v50 = v19;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v46 = 1107296256;
    uint64_t v47 = sub_2510A0764;
    unint64_t v48 = &block_descriptor_7_0;
    id v31 = _Block_copy(&aBlock);
    id v32 = objc_msgSend(v28, sel_initWithWorkoutUUID_timestampAnchor_limit_dataHandler_, v30, v27, v31, v26);
    _Block_release(v31);

    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v25);
  if (v32)
  {
    id v40 = v32;
    sub_2510BF798();
    objc_msgSend(v43, sel_executeQuery_, v40);
    swift_release();

    return;
  }
LABEL_8:
  swift_release();
}

uint64_t sub_25109F2F0(uint64_t a1, uint64_t a2, void *a3, id a4, uint64_t a5)
{
  objc_msgSend(a4, sel_stopQuery_, a1);
  if (a2)
  {
    **(void **)(*(void *)(a5 + 64) + 40) = a2;
    swift_bridgeObjectRetain();
    return swift_continuation_throwingResume();
  }
  else
  {
    if (a3)
    {
      uint64_t v9 = a3;
    }
    else
    {
      type metadata accessor for HKError(0);
      sub_2510A5D38(MEMORY[0x263F8EE78]);
      sub_25107A6F0();
      sub_2510BE828();
      uint64_t v9 = v12;
    }
    sub_251067550();
    swift_allocError();
    *uint64_t v10 = v9;
    id v11 = a3;
    return swift_continuation_throwingResumeWithError();
  }
}

uint64_t sub_25109F410(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return MEMORY[0x270FA2498](sub_25109F434, 0, 0);
}

uint64_t sub_25109F434()
{
  uint64_t v2 = (void *)v0[12];
  uint64_t v1 = v0[13];
  v0[2] = v0;
  v0[7] = v0 + 10;
  v0[3] = sub_25109F4E0;
  uint64_t v3 = swift_continuation_init();
  sub_25109EE64(v3, v2, v1);
  return MEMORY[0x270FA23F0](v0 + 2);
}

uint64_t sub_25109F4E0()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48))
  {
    swift_willThrow();
    uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
    return v2();
  }
  else
  {
    *(void *)(*v0 + 112) = *(void *)(*v0 + 80);
    return MEMORY[0x270FA2498](sub_25109F62C, 0, 0);
  }
}

uint64_t sub_25109F62C()
{
  **(void **)(v0 + 88) = *(void *)(v0 + 112);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t *initializeBufferWithCopyOfBuffer for HKRaceRouteLocationSeriesQueryDescriptor(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_2510BE928();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      sub_25109E564();
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v12 = a3[5];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    if (v9((uint64_t *)((char *)a2 + v12), 1, v7))
    {
      sub_25109E564();
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
    uint64_t v16 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v16) = *(uint64_t *)((char *)a2 + v16);
    uint64_t v17 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = sub_2510BEFA8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return a1;
}

uint64_t destroy for HKRaceRouteLocationSeriesQueryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2510BE928();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  if (!v6(v7, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 36);
  uint64_t v9 = sub_2510BEFA8();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  return v10(v8, v9);
}

char *initializeWithCopy for HKRaceRouteLocationSeriesQueryDescriptor(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_2510BE928();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_25109E564();
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = a3[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    sub_25109E564();
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  uint64_t v14 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  uint64_t v15 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = sub_2510BEFA8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

char *assignWithCopy for HKRaceRouteLocationSeriesQueryDescriptor(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_2510BE928();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_25109E564();
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    sub_25109E564();
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
LABEL_13:
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v18 = a3[9];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = sub_2510BEFA8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

char *initializeWithTake for HKRaceRouteLocationSeriesQueryDescriptor(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_2510BE928();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_25109E564();
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = a3[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    sub_25109E564();
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  uint64_t v14 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  uint64_t v15 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  int v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = sub_2510BEFA8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

char *assignWithTake for HKRaceRouteLocationSeriesQueryDescriptor(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_2510BE928();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_25109E564();
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    sub_25109E564();
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
LABEL_13:
  uint64_t v18 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v18] = *(void *)&a2[v18];
  uint64_t v19 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = sub_2510BEFA8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKRaceRouteLocationSeriesQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2510A0438);
}

uint64_t sub_2510A0438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_25109E564();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_2510BEFA8();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 36);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for HKRaceRouteLocationSeriesQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2510A0544);
}

uint64_t sub_2510A0544(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_25109E564();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_2510BEFA8();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 36);
    return v13(v15, a2, a2, v14);
  }
}

void sub_2510A0648()
{
  sub_25109E564();
  if (v0 <= 0x3F)
  {
    sub_2510BEFA8();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_2510A0724()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2510A075C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_25109F2F0(a1, a2, a3, *(id *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_2510A0764(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_2510A080C();
    uint64_t v5 = sub_2510BF418();
  }
  swift_retain();
  id v8 = a2;
  id v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

unint64_t sub_2510A080C()
{
  unint64_t result = qword_269B1BC80;
  if (!qword_269B1BC80)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_269B1BC80);
  }
  return result;
}

uint64_t sub_2510A0854(uint64_t a1)
{
  sub_2510BEA28();
  sub_2510A0D60();
  sub_2510BF5A8();
  uint64_t result = sub_2510BF5C8();
  if ((uint64_t)v5 >= *(uint64_t *)&v7[0])
  {
    if (*(uint64_t *)&v7[0] <= a1 && (uint64_t)v5 > a1)
    {
      sub_2510BEA38();
      if (v6)
      {
        sub_251088DEC(&v5, v7);
        sub_25106FBB4((uint64_t)v7, (uint64_t)&v5);
        uint64_t v4 = sub_2510BF268();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
        return v4;
      }
      sub_25107B994((uint64_t)&v5);
    }
    return 45;
  }
  __break(1u);
  return result;
}

id static NSDateFormatter.sampleDataCodingFormatter.getter()
{
  uint64_t v0 = sub_2510BE958();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
  sub_2510BE938();
  long long v5 = (void *)sub_2510BE948();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, sel_setLocale_, v5);

  uint64_t v6 = (void *)sub_2510BF228();
  objc_msgSend(v4, sel_setDateFormat_, v6);

  return v4;
}

void sub_2510A0AA0()
{
  qword_269B20B10 = 10;
  *(void *)algn_269B20B18 = 0xE100000000000000;
}

void sub_2510A0AB8()
{
  qword_269B20B20 = 44;
  *(void *)algn_269B20B28 = 0xE100000000000000;
}

void sub_2510A0AD0()
{
  qword_269B20B30 = 31868;
  *(void *)algn_269B20B38 = 0xE200000000000000;
}

void sub_2510A0AE8()
{
  qword_269B20B40 = 61;
  *(void *)algn_269B20B48 = 0xE100000000000000;
}

unint64_t static HKSampleDataCodingConstants.quantityTypeIdentifierPrefix.getter()
{
  return 0xD000000000000018;
}

unint64_t static HKSampleDataCodingConstants.categoryTypeIdentifierPrefix.getter()
{
  return 0xD000000000000018;
}

ValueMetadata *type metadata accessor for HKSampleDataCodingConstants()
{
  return &type metadata for HKSampleDataCodingConstants;
}

uint64_t sub_2510A0B48(uint64_t a1)
{
  sub_2510A0E14(a1, (uint64_t)v5);
  if (v6)
  {
    if (swift_dynamicCast())
    {
      sub_25107B994(a1);
      double v2 = (double)v4;
      return *(void *)&v2;
    }
  }
  else
  {
    sub_25107B994((uint64_t)v5);
  }
  sub_2510A0E78(a1, (uint64_t)v5);
  if (v6)
  {
    if (swift_dynamicCast())
    {
      double v2 = *(double *)&v4;
      return *(void *)&v2;
    }
  }
  else
  {
    sub_25107B994((uint64_t)v5);
  }
  return 0;
}

uint64_t sub_2510A0C20(uint64_t a1, uint64_t a2)
{
  if (sub_2510BF378() & 1) != 0 || (sub_2510BF378())
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    sub_25108B9CC();
    id v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_stateOfMindType);
    id v6 = objc_msgSend(v5, sel_identifier);

    uint64_t v7 = sub_2510BF258();
    uint64_t v9 = v8;

    if (v7 == a1 && v9 == a2)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    else
    {
      char v11 = sub_2510BFC28();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v11) {
        return 1;
      }
      else {
        return 2;
      }
    }
  }
}

unint64_t sub_2510A0D60()
{
  unint64_t result = qword_269B1BBC0;
  if (!qword_269B1BBC0)
  {
    sub_2510BEA28();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BBC0);
  }
  return result;
}

void sub_2510A0DB8()
{
  if (!qword_26B2121A0)
  {
    unint64_t v0 = sub_2510BF808();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B2121A0);
    }
  }
}

uint64_t sub_2510A0E14(uint64_t a1, uint64_t a2)
{
  sub_2510A0DB8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2510A0E78(uint64_t a1, uint64_t a2)
{
  sub_2510A0DB8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void HKRegionAvailability.Category.hash(into:)()
{
  uint64_t v1 = *v0;
  if (*v0 && v1 != (void *)1)
  {
    sub_2510BFD18();
    id v2 = v1;
    sub_2510BF7E8();
    sub_2510A0F68(v1);
  }
  else
  {
    sub_2510BFD18();
  }
}

void sub_2510A0F68(id a1)
{
  if ((unint64_t)a1 >= 2) {
}
  }

uint64_t HKRegionAvailability.Category.hashValue.getter()
{
  uint64_t v1 = *v0;
  sub_2510BFD08();
  sub_2510BFD18();
  if ((unint64_t)v1 > 1)
  {
    id v2 = v1;
    sub_2510BF7E8();
    sub_2510A0F68(v1);
  }
  return sub_2510BFD28();
}

uint64_t sub_2510A0FFC()
{
  uint64_t v1 = *v0;
  sub_2510BFD08();
  sub_2510BFD18();
  if ((unint64_t)v1 > 1)
  {
    id v2 = v1;
    sub_2510BF7E8();
    sub_2510A0F68(v1);
  }
  return sub_2510BFD28();
}

void sub_2510A107C()
{
  uint64_t v1 = *v0;
  if (*v0 && v1 != (void *)1)
  {
    sub_2510BFD18();
    id v2 = v1;
    sub_2510BF7E8();
    sub_2510A0F68(v1);
  }
  else
  {
    sub_2510BFD18();
  }
}

uint64_t sub_2510A1108()
{
  uint64_t v1 = *v0;
  sub_2510BFD08();
  sub_2510BFD18();
  if ((unint64_t)v1 > 1)
  {
    id v2 = v1;
    sub_2510BF7E8();
    sub_2510A0F68(v1);
  }
  return sub_2510BFD28();
}

void HKRegionAvailability.category.getter(uint64_t *a1@<X8>)
{
  swift_getObjectType();
  id v3 = objc_msgSend(v1, sel_category);
  if (v3 == (id)1)
  {
    uint64_t v4 = 0;
    goto LABEL_20;
  }
  if (v3 == (id)3)
  {
    id v5 = objc_msgSend(v1, sel_allowedCountries);
    if (v5)
    {
      uint64_t v4 = (uint64_t)v5;
      goto LABEL_20;
    }
    if (qword_26B2118B8 != -1) {
      swift_once();
    }
    uint64_t v18 = sub_2510BEC48();
    __swift_project_value_buffer(v18, (uint64_t)qword_26B214CE0);
    uint64_t v19 = sub_2510BEC28();
    os_log_type_t v20 = sub_2510BF678();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v26 = v22;
      *(_DWORD *)uint64_t v21 = 136446210;
      uint64_t v23 = sub_2510BFDB8();
      sub_25106EDC0(v23, v24, &v26);
      sub_2510BF818();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_251054000, v19, v20, "[%{public}s] Missing restriction", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2533940F0](v22, -1, -1);
      MEMORY[0x2533940F0](v21, -1, -1);
    }

    id v16 = objc_msgSend(self, sel_emptyCountrySet);
    id v17 = objc_msgSend(self, sel_allowedCountriesInLocalSet_, v16);
LABEL_19:
    uint64_t v4 = (uint64_t)v17;

    goto LABEL_20;
  }
  if (v3 != (id)2)
  {
    if (qword_26B2118B8 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_2510BEC48();
    __swift_project_value_buffer(v6, (uint64_t)qword_26B214CE0);
    id v7 = v1;
    uint64_t v8 = sub_2510BEC28();
    os_log_type_t v9 = sub_2510BF678();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v26 = v11;
      *(_DWORD *)uint64_t v10 = 136446466;
      uint64_t v12 = sub_2510BFDB8();
      uint64_t v25 = sub_25106EDC0(v12, v13, &v26);
      sub_2510BF818();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      objc_msgSend(v7, sel_category, v25, v26);
      type metadata accessor for HKRegionAvailabilityCategory(0);
      uint64_t v14 = sub_2510BF268();
      sub_25106EDC0(v14, v15, &v26);
      sub_2510BF818();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_251054000, v8, v9, "[%{public}s] Unrecognized category value: %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x2533940F0](v11, -1, -1);
      MEMORY[0x2533940F0](v10, -1, -1);
    }
    else
    {
    }
    id v16 = objc_msgSend(self, sel_emptyCountrySet);
    id v17 = objc_msgSend(self, sel_allowedCountriesInLocalSet_, v16);
    goto LABEL_19;
  }
  uint64_t v4 = 1;
LABEL_20:
  *a1 = v4;
}

uint64_t _sSo20HKRegionAvailabilityC18HealthKitAdditionsE8CategoryO2eeoiySbAE_AEtFZ_0(uint64_t *a1, id *a2)
{
  uint64_t v2 = *a1;
  id v3 = *a2;
  if (!*a1)
  {
    if (!v3)
    {
      uint64_t v2 = 0;
      char v4 = 1;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (v2 != 1)
  {
    if ((unint64_t)v3 >= 2)
    {
      sub_25107F56C();
      sub_2510A17A8(v3);
      sub_2510A17A8((id)v2);
      char v4 = sub_2510BF7D8();
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  if (v3 != (id)1)
  {
LABEL_8:
    sub_2510A17A8(*a2);
    sub_2510A17A8((id)v2);
    char v4 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 1;
  char v4 = 1;
LABEL_10:
  sub_2510A0F68((id)v2);
  sub_2510A0F68(v3);
  return v4 & 1;
}

unint64_t sub_2510A1694()
{
  unint64_t result = qword_269B1BC88;
  if (!qword_269B1BC88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BC88);
  }
  return result;
}

uint64_t _s8CategoryOwet_0(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t _s8CategoryOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKRegionAvailability.Category()
{
  return &type metadata for HKRegionAvailability.Category;
}

id sub_2510A17A8(id result)
{
  if ((unint64_t)result >= 2) {
    return result;
  }
  return result;
}

uint64_t HKCloudSyncControl.requestSync(with:reason:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t ObjectType = swift_getObjectType();
  sub_2510A19A8();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  unint64_t v15 = (void *)swift_allocObject();
  void v15[2] = v14;
  v15[3] = a1;
  v15[4] = a2;
  v15[5] = a3;
  void v15[6] = ObjectType;
  sub_2510A1EA0(0, &qword_269B1BC98, MEMORY[0x263F8EE60] + 8, MEMORY[0x263EFDCF0]);
  sub_2510A1A34();
  id v16 = a1;
  swift_bridgeObjectRetain();
  sub_2510BEE38();
  sub_2510A202C(&qword_269B1BCA8, (void (*)(uint64_t))sub_2510A19A8);
  uint64_t v17 = sub_2510BEE58();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *a4 = v17;
  return result;
}

void sub_2510A19A8()
{
  if (!qword_269B1BC90)
  {
    sub_2510A1EA0(255, &qword_269B1BC98, MEMORY[0x263F8EE60] + 8, MEMORY[0x263EFDCF0]);
    sub_2510A1A34();
    unint64_t v0 = sub_2510BEE48();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BC90);
    }
  }
}

unint64_t sub_2510A1A34()
{
  unint64_t result = qword_269B1BCA0;
  if (!qword_269B1BCA0)
  {
    sub_2510A1EA0(255, &qword_269B1BC98, MEMORY[0x263F8EE60] + 8, MEMORY[0x263EFDCF0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BCA0);
  }
  return result;
}

uint64_t sub_2510A1AB4()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2510A1AEC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v27 = a6;
  sub_2510A1E18();
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510A1F8C();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v25 = v16;
  uint64_t v26 = v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v20 = (void *)swift_allocObject();
  v20[2] = a1;
  v20[3] = a2;
  v20[4] = a3;
  v20[5] = a4;
  v20[6] = a5;
  sub_2510A1EA0(0, &qword_269B1BCB8, MEMORY[0x263F8D4F8], MEMORY[0x263EFDE20]);
  swift_allocObject();
  swift_retain();
  id v21 = a2;
  swift_bridgeObjectRetain();
  uint64_t v28 = sub_2510BEE28();
  sub_2510A1F10();
  sub_2510BEE98();
  swift_release();
  sub_2510A202C(&qword_269B1BCD0, (void (*)(uint64_t))sub_2510A1E18);
  sub_2510BEE78();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_2510A202C(&qword_269B1BCD8, (void (*)(uint64_t))sub_2510A1F8C);
  uint64_t v22 = v25;
  uint64_t v23 = sub_2510BEE58();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v19, v22);
  *uint64_t v27 = v23;
  return result;
}

uint64_t sub_2510A1E04@<X0>(uint64_t *a1@<X8>)
{
  return sub_2510A1AEC(*(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

void sub_2510A1E18()
{
  if (!qword_269B1BCB0)
  {
    sub_2510A1EA0(255, &qword_269B1BCB8, MEMORY[0x263F8D4F8], MEMORY[0x263EFDE20]);
    sub_2510A1F10();
    unint64_t v0 = sub_2510BECA8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BCB0);
    }
  }
}

void sub_2510A1EA0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    unint64_t v8 = sub_251067550();
    unint64_t v9 = a4(a1, a3, v8, MEMORY[0x263F8E4E0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t sub_2510A1F10()
{
  unint64_t result = qword_269B1BCC0;
  if (!qword_269B1BCC0)
  {
    sub_2510A1EA0(255, &qword_269B1BCB8, MEMORY[0x263F8D4F8], MEMORY[0x263EFDE20]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BCC0);
  }
  return result;
}

void sub_2510A1F8C()
{
  if (!qword_269B1BCC8)
  {
    sub_2510A1E18();
    sub_2510A202C(&qword_269B1BCD0, (void (*)(uint64_t))sub_2510A1E18);
    unint64_t v0 = sub_2510BEC98();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BCC8);
    }
  }
}

uint64_t sub_2510A202C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_2510A2074(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  swift_beginAccess();
  uint64_t v15 = MEMORY[0x2533941A0](a3 + 16);
  if (v15)
  {
    uint64_t v16 = (void *)v15;
    uint64_t v17 = qword_26B2118B8;
    swift_retain();
    if (v17 != -1) {
      swift_once();
    }
    uint64_t v18 = sub_2510BEC48();
    __swift_project_value_buffer(v18, (uint64_t)qword_26B214CE0);
    id v19 = a4;
    swift_bridgeObjectRetain_n();
    id v20 = v19;
    id v21 = sub_2510BEC28();
    os_log_type_t v22 = sub_2510BF688();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      uint64_t aBlock = v38;
      *(_DWORD *)uint64_t v23 = 136446722;
      id v40 = v16;
      uint64_t v24 = sub_2510BFDB8();
      uint64_t v39 = a5;
      sub_25106EDC0(v24, v25, &aBlock);
      sub_2510BF818();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2082;
      id v26 = objc_msgSend(v20, sel_description);
      id v27 = v20;
      uint64_t v28 = a7;
      uint64_t v29 = sub_2510BF258();
      os_log_type_t type = v22;
      unint64_t v31 = v30;

      uint64_t v32 = v29;
      a7 = v28;
      id v20 = v27;
      sub_25106EDC0(v32, v31, &aBlock);
      uint64_t v16 = v40;
      sub_2510BF818();

      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 22) = 2080;
      swift_bridgeObjectRetain();
      sub_25106EDC0(v39, a6, &aBlock);
      sub_2510BF818();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_251054000, v21, type, "%{public}s Requesting cloud sync with request: %{public}s reason: %s", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x2533940F0](v38, -1, -1);
      MEMORY[0x2533940F0](v23, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v34 = (void *)sub_2510BF228();
    double v35 = (void *)swift_allocObject();
    v35[2] = sub_251067504;
    v35[3] = v14;
    v35[4] = a7;
    uint64_t v45 = sub_2510A27E4;
    uint64_t v46 = v35;
    uint64_t aBlock = MEMORY[0x263EF8330];
    uint64_t v42 = 1107296256;
    id v43 = sub_251055F18;
    uint64_t v44 = &block_descriptor_14;
    uint64_t v36 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v16, sel_syncWithRequest_reason_completion_, v20, v34, v36);
    _Block_release(v36);
  }
  else
  {
    swift_retain();
    swift_release();
    sub_2510A2758();
    id v33 = (void *)swift_allocError();
    uint64_t aBlock = (uint64_t)v33;
    LOBYTE(v42) = 1;
    a1(&aBlock);
  }
}

uint64_t objectdestroy_2Tm()
{
  swift_release();

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

void sub_2510A24F4(void (*a1)(uint64_t *), uint64_t a2)
{
  sub_2510A2074(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

void sub_2510A2504(char a1, id a2, void (*a3)(id, uint64_t))
{
  if (a2)
  {
    id v5 = a2;
    a3(a2, 1);
  }
  else
  {
    if (qword_26B2118B8 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_2510BEC48();
    __swift_project_value_buffer(v7, (uint64_t)qword_26B214CE0);
    unint64_t v8 = sub_2510BEC28();
    os_log_type_t v9 = sub_2510BF688();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v14 = v11;
      *(_DWORD *)uint64_t v10 = 136446466;
      uint64_t v12 = sub_2510BFDB8();
      sub_25106EDC0(v12, v13, &v14);
      sub_2510BF818();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 1024;
      sub_2510BF818();
      _os_log_impl(&dword_251054000, v8, v9, "%{public}s Cloud sync requested successfully: %{BOOL}d", (uint8_t *)v10, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x2533940F0](v11, -1, -1);
      MEMORY[0x2533940F0](v10, -1, -1);
    }

    a3((id)(a1 & 1), 0);
  }
}

uint64_t sub_2510A2720()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

unint64_t sub_2510A2758()
{
  unint64_t result = qword_269B1BCE0;
  if (!qword_269B1BCE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BCE0);
  }
  return result;
}

uint64_t sub_2510A27AC()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void sub_2510A27E4(char a1, void *a2)
{
  sub_2510A2504(a1, a2, *(void (**)(id, uint64_t))(v2 + 16));
}

unsigned char *_s14PublisherErrorOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2510A288CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s14PublisherErrorOMa()
{
  return &_s14PublisherErrorON;
}

unint64_t sub_2510A28C8()
{
  unint64_t result = qword_269B1BCE8;
  if (!qword_269B1BCE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BCE8);
  }
  return result;
}

uint64_t sub_2510A2934()
{
  return sub_2510BFD28();
}

uint64_t sub_2510A29E0()
{
  return sub_2510BFD28();
}

uint64_t sub_2510A2A68()
{
  return sub_2510BFD28();
}

uint64_t sub_2510A2B7C()
{
  sub_2510BF2C8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2510A2C70()
{
  sub_2510BF2C8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2510A2D04()
{
  return sub_2510BFD28();
}

uint64_t sub_2510A2DAC()
{
  return sub_2510BFD28();
}

uint64_t sub_2510A2E30()
{
  return sub_2510BFD28();
}

HealthKitAdditions::HKSharingAuthorizationIdentifier::CycleTrackingConcept_optional __swiftcall HKSharingAuthorizationIdentifier.CycleTrackingConcept.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_2510BFB78();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *uint64_t v2 = v5;
  return result;
}

unint64_t HKSharingAuthorizationIdentifier.CycleTrackingConcept.rawValue.getter()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0xD000000000000017;
  }
}

uint64_t sub_2510A2FE4(char *a1, char *a2)
{
  return sub_25109B11C(*a1, *a2);
}

uint64_t sub_2510A2FF0()
{
  return sub_2510A29E0();
}

uint64_t sub_2510A2FF8()
{
  sub_2510BF2C8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2510A306C()
{
  return sub_2510A2DAC();
}

HealthKitAdditions::HKSharingAuthorizationIdentifier::CycleTrackingConcept_optional sub_2510A3074(Swift::String *a1)
{
  return HKSharingAuthorizationIdentifier.CycleTrackingConcept.init(rawValue:)(*a1);
}

void sub_2510A3080(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000010;
  }
  else {
    unint64_t v2 = 0xD000000000000017;
  }
  unint64_t v3 = 0x80000002510C4B70;
  if (*v1) {
    unint64_t v3 = 0x80000002510C4B90;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t HKSharingAuthorizationIdentifier.hash(into:)()
{
  sub_25105FAC4();
  sub_2510BF2C8();
  return swift_bridgeObjectRelease();
}

uint64_t HKSharingAuthorizationIdentifier.hashValue.getter()
{
  return sub_2510BFD28();
}

uint64_t sub_2510A31E4()
{
  return sub_2510BFD28();
}

uint64_t sub_2510A3274()
{
  sub_25105FAC4();
  sub_2510BF2C8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2510A32E8()
{
  return sub_2510BFD28();
}

void sub_2510A3374()
{
  qword_26B214CD0 = 58;
  *(void *)algn_26B214CD8 = 0xE100000000000000;
}

unint64_t sub_2510A338C(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7065636E6F636B68;
      break;
    case 2:
      unint64_t result = 0x617274656C637963;
      break;
    case 3:
      return result;
    case 4:
      unint64_t result = 0xD00000000000001ALL;
      break;
    default:
      unint64_t result = 0x657079746B68;
      break;
  }
  return result;
}

uint64_t sub_2510A344C(unsigned __int8 *a1, char *a2)
{
  return sub_25109AF3C(*a1, *a2);
}

uint64_t sub_2510A3458()
{
  return sub_2510A2A68();
}

uint64_t sub_2510A3460()
{
  return sub_2510A2B7C();
}

uint64_t sub_2510A3468()
{
  return sub_2510A2E30();
}

uint64_t sub_2510A3470@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_251060F90();
  *a1 = result;
  return result;
}

unint64_t sub_2510A34A0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_2510A338C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t HKSharingAuthorizationIdentifier.displayName.getter()
{
  if ((*(unsigned __int8 *)(v0 + 48) | 2) != 3) {
    return 0;
  }
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HKSharingAuthorizationIdentifier.displaySubtitle.getter()
{
  if ((*(unsigned __int8 *)(v0 + 48) | 2) != 3) {
    return 0;
  }
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

double HKSharingAuthorizationIdentifier.init(from:)@<D0>(uint64_t a1@<X8>)
{
  id v2 = objc_allocWithZone(MEMORY[0x263F0A730]);
  unint64_t v3 = (void *)sub_2510BF228();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v2, sel_initWithAuthorizationIdentifier_, v3);

  HKSharingAuthorizationIdentifier.init(_:)(v4, (uint64_t)v9);
  char v5 = v10;
  double result = *(double *)v9;
  long long v7 = v9[1];
  long long v8 = v9[2];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 48) = v5;
  return result;
}

uint64_t HKSharingAuthorizationIdentifier.string.getter()
{
  return sub_25105FAC4();
}

void *static HKSharingAuthorizationIdentifier.identifiers(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v2 = swift_bridgeObjectRetain() + 40;
  unint64_t v3 = (void *)MEMORY[0x263F8EE78];
  do
  {
    id v5 = objc_allocWithZone(MEMORY[0x263F0A730]);
    swift_bridgeObjectRetain();
    uint64_t v6 = (void *)sub_2510BF228();
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(v5, sel_initWithAuthorizationIdentifier_, v6);

    HKSharingAuthorizationIdentifier.init(_:)(v7, (uint64_t)v15);
    unsigned __int8 v8 = v16;
    if (v16 != 255)
    {
      long long v13 = v15[1];
      long long v14 = v15[0];
      long long v12 = v15[2];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v3 = sub_251077294(0, v3[2] + 1, 1, v3);
      }
      unint64_t v10 = v3[2];
      unint64_t v9 = v3[3];
      if (v10 >= v9 >> 1) {
        unint64_t v3 = sub_251077294((void *)(v9 > 1), v10 + 1, 1, v3);
      }
      v3[2] = v10 + 1;
      id v4 = &v3[7 * v10];
      *((_OWORD *)v4 + 2) = v14;
      *((_OWORD *)v4 + 3) = v13;
      *((_OWORD *)v4 + 4) = v12;
      *((unsigned char *)v4 + 80) = v8;
    }
    v2 += 16;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

id HKObjectType.sharingAuthorizationIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = v1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  return v1;
}

uint64_t sub_2510A37E8(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  uint64_t v6 = result;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t)sub_2510B0AE8(v6, a2, 10);
    char v10 = v23;
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0) {
      id v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      id v7 = (unsigned __int8 *)sub_2510BF9C8();
    }
    uint64_t v8 = (uint64_t)sub_2510B0AD0(v7, v4, 10);
    char v10 = v9 & 1;
LABEL_44:
    if ((v10 & 1) == 0 && _HKValidDataTypeCode()) {
      return (uint64_t)objc_msgSend(self, sel_dataTypeWithCode_, v8);
    }
    return 0;
  }
  v24[0] = result;
  v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v3) {
      goto LABEL_57;
    }
    if (v3 == 1 || (BYTE1(result) - 48) > 9u) {
      goto LABEL_31;
    }
    uint64_t v8 = (BYTE1(result) - 48);
    if (v3 != 2)
    {
      if ((BYTE2(result) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v8 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
      uint64_t v11 = v3 - 3;
      if (v11)
      {
        long long v12 = (unsigned __int8 *)v24 + 3;
        while (1)
        {
          unsigned int v13 = *v12 - 48;
          if (v13 > 9) {
            goto LABEL_31;
          }
          uint64_t v14 = 10 * v8;
          if ((unsigned __int128)(v8 * (__int128)10) >> 64 != (10 * v8) >> 63) {
            goto LABEL_31;
          }
          uint64_t v8 = v14 + v13;
          if (__OFADD__(v14, v13)) {
            goto LABEL_31;
          }
          char v10 = 0;
          ++v12;
          if (!--v11) {
            goto LABEL_44;
          }
        }
      }
    }
LABEL_43:
    char v10 = 0;
    goto LABEL_44;
  }
  if (result != 45)
  {
    if (!v3 || (result - 48) > 9u) {
      goto LABEL_31;
    }
    uint64_t v8 = (result - 48);
    if (v3 != 1)
    {
      if ((BYTE1(result) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v8 = 10 * (result - 48) + (BYTE1(result) - 48);
      uint64_t v15 = v3 - 2;
      if (v15)
      {
        unsigned __int8 v16 = (unsigned __int8 *)v24 + 2;
        while (1)
        {
          unsigned int v17 = *v16 - 48;
          if (v17 > 9) {
            goto LABEL_31;
          }
          uint64_t v18 = 10 * v8;
          if ((unsigned __int128)(v8 * (__int128)10) >> 64 != (10 * v8) >> 63) {
            goto LABEL_31;
          }
          uint64_t v8 = v18 + v17;
          if (__OFADD__(v18, v17)) {
            goto LABEL_31;
          }
          char v10 = 0;
          ++v16;
          if (!--v15) {
            goto LABEL_44;
          }
        }
      }
    }
    goto LABEL_43;
  }
  if (v3)
  {
    if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      if (v3 == 2)
      {
        char v10 = 0;
        uint64_t v8 = -(uint64_t)(BYTE1(result) - 48);
        goto LABEL_44;
      }
      if ((BYTE2(result) - 48) <= 9u)
      {
        uint64_t v8 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
        uint64_t v19 = v3 - 3;
        if (!v19) {
          goto LABEL_43;
        }
        id v20 = (unsigned __int8 *)v24 + 3;
        while (1)
        {
          unsigned int v21 = *v20 - 48;
          if (v21 > 9) {
            break;
          }
          uint64_t v22 = 10 * v8;
          if ((unsigned __int128)(v8 * (__int128)10) >> 64 != (10 * v8) >> 63) {
            break;
          }
          uint64_t v8 = v22 - v21;
          if (__OFSUB__(v22, v21)) {
            break;
          }
          char v10 = 0;
          ++v20;
          if (!--v19) {
            goto LABEL_44;
          }
        }
      }
    }
LABEL_31:
    uint64_t v8 = 0;
    char v10 = 1;
    goto LABEL_44;
  }
  __break(1u);
LABEL_57:
  __break(1u);
  return result;
}

uint64_t _s18HealthKitAdditions32HKSharingAuthorizationIdentifierO2eeoiySbAC_ACtFZ_0()
{
  uint64_t v0 = sub_25105FAC4();
  uint64_t v2 = v1;
  if (v0 == sub_25105FAC4() && v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = sub_2510BFC28();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

unint64_t sub_2510A3BC8()
{
  unint64_t result = qword_269B1BCF0;
  if (!qword_269B1BCF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BCF0);
  }
  return result;
}

unint64_t sub_2510A3C20()
{
  unint64_t result = qword_26B212E10;
  if (!qword_26B212E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B212E10);
  }
  return result;
}

uint64_t assignWithCopy for HKSharingAuthorizationIdentifier(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_25105AF48(*(id *)a2, v4, v5, v6, v7, v8, v9);
  char v10 = *(void **)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  char v16 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v9;
  sub_25105B5D4(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for HKSharingAuthorizationIdentifier(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  char v11 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v3;
  sub_25105B5D4(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t storeEnumTagSinglePayload for HKSharingAuthorizationIdentifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_2510A3DB0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 3u) {
    return *(unsigned __int8 *)(a1 + 48);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

unsigned char *storeEnumTagSinglePayload for HKSharingAuthorizationIdentifier.CycleTrackingConcept(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2510A3E94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_2510A3EBC()
{
  return sub_2510BFD28();
}

uint64_t sub_2510A3F10()
{
  return sub_2510BF2C8();
}

uint64_t sub_2510A3F28()
{
  return sub_2510BFD28();
}

uint64_t getEnumTagSinglePayload for HKSharingAuthorizationIdentifier.Schema(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for HKSharingAuthorizationIdentifier.Schema(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2510A40D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKSharingAuthorizationIdentifier.Schema()
{
  return &type metadata for HKSharingAuthorizationIdentifier.Schema;
}

unint64_t sub_2510A4110()
{
  unint64_t result = qword_269B1BCF8;
  if (!qword_269B1BCF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BCF8);
  }
  return result;
}

uint64_t sub_2510A4164(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = a5;
  uint64_t v30 = a8;
  uint64_t v10 = v9;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v28 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  id v40 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v26 - v14;
  MEMORY[0x270FA5388](v13);
  id v33 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v26 - v18;
  uint64_t v34 = v8;
  uint64_t v20 = sub_2510BF5B8();
  if (!v20) {
    return sub_2510BF458();
  }
  uint64_t v21 = v20;
  id v27 = v15;
  uint64_t v43 = sub_2510BF0F8();
  uint64_t v35 = sub_2510BFA58();
  sub_2510BF9F8();
  uint64_t v41 = v19;
  uint64_t result = sub_2510BF5A8();
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    char v23 = (void (**)(char *))(v36 + 2);
    ++v36;
    id v37 = v23;
    uint64_t v24 = v27;
    while (1)
    {
      unint64_t v25 = (void (*)(char *, void))sub_2510BF608();
      (*v37)(v24);
      v25(v42, 0);
      v38(v24, v40);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v36)(v24, AssociatedTypeWitness);
      sub_2510BFA38();
      sub_2510BF5D8();
      if (!--v21)
      {
        (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
        return v43;
      }
    }
    (*v36)(v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v41, v32);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v40, v29);
  }
  return result;
}

id HKUserDomainConceptQueryDescriptor.predicate.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

void HKUserDomainConceptQueryDescriptor.predicate.setter(void *a1)
{
  *id v1 = a1;
}

uint64_t (*HKUserDomainConceptQueryDescriptor.predicate.modify())()
{
  return nullsub_1;
}

uint64_t HKUserDomainConceptQueryDescriptor.sortDescriptors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKUserDomainConceptQueryDescriptor.sortDescriptors.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*HKUserDomainConceptQueryDescriptor.sortDescriptors.modify())()
{
  return nullsub_1;
}

void *HKUserDomainConceptQueryDescriptor.anchor.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void HKUserDomainConceptQueryDescriptor.anchor.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

uint64_t (*HKUserDomainConceptQueryDescriptor.anchor.modify())()
{
  return nullsub_1;
}

uint64_t HKUserDomainConceptQueryDescriptor.limit.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t HKUserDomainConceptQueryDescriptor.limit.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 24) = result;
  *(unsigned char *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*HKUserDomainConceptQueryDescriptor.limit.modify())()
{
  return nullsub_1;
}

uint64_t HKUserDomainConceptQueryDescriptor.queryAttributes.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = sub_2510BEFA8();
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t HKUserDomainConceptQueryDescriptor.queryAttributes.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = sub_2510BEFA8();
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*HKUserDomainConceptQueryDescriptor.queryAttributes.modify())()
{
  return nullsub_1;
}

uint64_t HKUserDomainConceptQueryDescriptor.init(predicate:sortDescriptors:anchor:limit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  type metadata accessor for HKUserDomainConceptQueryDescriptor();
  uint64_t result = sub_2510BEF78();
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(unsigned char *)(a6 + 32) = a5 & 1;
  return result;
}

uint64_t type metadata accessor for HKUserDomainConceptQueryDescriptor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t HKUserDomainConceptQueryDescriptor.Results.Iterator.resultIterator.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKUserDomainConceptQueryDescriptor.Results.Iterator.resultIterator.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = (void *)(v3 + *(int *)(a3 + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *unsigned int v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*HKUserDomainConceptQueryDescriptor.Results.Iterator.resultIterator.modify())()
{
  return nullsub_1;
}

uint64_t HKUserDomainConceptQueryDescriptor.Results.Iterator.next()(uint64_t a1)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = v1;
  return MEMORY[0x270FA2498](sub_2510A4920, 0, 0);
}

void (*sub_2510A4920())(uint64_t, void)
{
  uint64_t result = (void (*)(uint64_t, void))HKUserDomainConceptQueryDescriptor.Results.Iterator.resultIterator.modify();
  uint64_t v3 = result;
  unint64_t v4 = *v2;
  if (!*v2)
  {
LABEL_4:
    v3(v0 + 16, 0);
    BOOL v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v7;
    *BOOL v7 = v0;
    v7[1] = sub_2510A4AE8;
    return (void (*)(uint64_t, void))HKUserDomainConceptQueryDescriptor.Results.Iterator.nextResultIterator()();
  }
  uint64_t v5 = v2;
  unint64_t v6 = v2[1];
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_2510BFAF8();
    uint64_t result = (void (*)(uint64_t, void))swift_bridgeObjectRelease();
    if (v6 == v8) {
      goto LABEL_4;
    }
  }
  else if (v6 == *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_4;
  }
  unint64_t v9 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    uint64_t result = (void (*)(uint64_t, void))sub_2510A6020(v6, v9);
  }
  else
  {
    if ((v6 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_18;
    }
    if (v6 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_19:
      __break(1u);
      return result;
    }
    uint64_t result = (void (*)(uint64_t, void))*(id *)(v9 + 8 * v6 + 32);
  }
  id v10 = result;
  if (__OFADD__(v6, 1))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v5[1] = v6 + 1;
  v3(v0 + 16, 0);
  uint64_t v11 = *(uint64_t (**)(id))(v0 + 8);
  return (void (*)(uint64_t, void))v11(v10);
}

uint64_t sub_2510A4AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
  else
  {
    *(void *)(v6 + 104) = a2;
    *(void *)(v6 + 112) = a1;
    return MEMORY[0x270FA2498](sub_2510A4C44, 0, 0);
  }
}

id sub_2510A4C44()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = (void *)(v0[11] + *(int *)(v0[10] + 28));
  swift_bridgeObjectRelease();
  *uint64_t v3 = v1;
  v3[1] = v2;
  id result = HKUserDomainConceptQueryDescriptor.Results.Iterator.resultIterator.modify();
  uint64_t v6 = (void (*)(void *, void))result;
  unint64_t v7 = *v5;
  if (*v5)
  {
    uint64_t v8 = v5;
    unint64_t v9 = v5[1];
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = sub_2510BFAF8();
      id result = (id)swift_bridgeObjectRelease();
      if (v9 == v10) {
        goto LABEL_4;
      }
    }
    else if (v9 == *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_4:
      unint64_t v7 = 0;
      goto LABEL_12;
    }
    unint64_t v11 = *v8;
    if ((*v8 & 0xC000000000000001) != 0)
    {
      id result = (id)sub_2510A6020(v9, v11);
    }
    else
    {
      if ((v9 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      if (v9 >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_18:
        __break(1u);
        return result;
      }
      id result = *(id *)(v11 + 8 * v9 + 32);
    }
    unint64_t v7 = (unint64_t)result;
    if (!__OFADD__(v9, 1))
    {
      v8[1] = v9 + 1;
      goto LABEL_12;
    }
    goto LABEL_17;
  }
LABEL_12:
  v6(v0 + 6, 0);
  uint64_t v12 = (uint64_t (*)(unint64_t))v0[1];
  return (id)v12(v7);
}

uint64_t HKUserDomainConceptQueryDescriptor.Results.Iterator.nextResultIterator()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  sub_2510A7648(0, &qword_26B212648, MEMORY[0x263F8F6A8]);
  *uint64_t v1 = v0;
  v1[1] = sub_2510A4E78;
  return MEMORY[0x270FA2100](v0 + 16, v2);
}

uint64_t sub_2510A4E78()
{
  *(void *)(*(void *)v1 + 32) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_25108ABB0;
  }
  else {
    uint64_t v2 = sub_2510A4F8C;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_2510A4F8C()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v0 + 16), 0);
}

uint64_t sub_2510A4FAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_2510A7648(0, &qword_26B212648, MEMORY[0x263F8F6A8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t result = type metadata accessor for HKUserDomainConceptQueryDescriptor.Results.Iterator();
  uint64_t v10 = (void *)(a4 + *(int *)(result + 28));
  *uint64_t v10 = a2;
  v10[1] = a3;
  return result;
}

uint64_t sub_2510A505C(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_251079C6C;
  v5[10] = a2;
  v5[11] = v2;
  return MEMORY[0x270FA2498](sub_2510A4920, 0, 0);
}

uint64_t sub_2510A510C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 24) = a4;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 32) = v12;
  *uint64_t v12 = v6;
  v12[1] = sub_2510A51EC;
  return MEMORY[0x270FA1E90](a1, a2, a3, a5, a6, v6 + 16);
}

uint64_t sub_2510A51EC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0) {
    **(void **)(v2 + 24) = *(void *)(v2 + 16);
  }
  uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
  return v4();
}

uint64_t HKUserDomainConceptQueryDescriptor.Results.makeAsyncIterator()@<X0>(uint64_t a1@<X8>)
{
  sub_2510A7648(0, &qword_26B212648, MEMORY[0x263F8F6A8]);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v6 - v3;
  sub_2510A6274();
  sub_2510BEFE8();
  return sub_2510A4FAC((uint64_t)v4, 0, 0, a1);
}

uint64_t sub_2510A53B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  HKUserDomainConceptQueryDescriptor.Results.makeAsyncIterator()(a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);
  return v4(v2, a1);
}

uint64_t HKUserDomainConceptQueryDescriptor.results(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v19 = a3;
  uint64_t v7 = *(void *)(a2 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](a1);
  sub_2510A6274();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a2);
  unint64_t v14 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = *(void *)(a2 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v15 + v14, (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  *(void *)(v15 + ((v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = a1;
  sub_2510A620C();
  id v16 = a1;
  sub_2510BEFF8();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v19, v13, v10);
}

id sub_2510A5614(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v32 = a3;
  sub_2510A7648(0, &qword_26B212640, MEMORY[0x263F8F690]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t v12 = (char *)&v31 - v11;
  sub_251065E84(0, &qword_26B212E38);
  uint64_t v33 = sub_2510BF7A8();
  uint64_t v34 = a4;
  uint64_t v13 = *(void *)(a2 + 8);
  uint64_t v36 = a4;
  aBlock[0] = v13;
  sub_2510BE7A8();
  uint64_t v14 = sub_2510BF488();
  uint64_t v15 = sub_251065E84(0, &qword_26B212E28);
  uint64_t v31 = v15;
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_2510A4164((void (*)(char *, char *))sub_2510A76C0, (uint64_t)v35, v14, v15, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void **)a2;
  uint64_t v19 = *(void **)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  unint64_t v20 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v21 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v21 + v20, v12, v8);
  uint64_t v22 = v32;
  *(void *)(v21 + ((v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8)) = v32;
  id v23 = objc_allocWithZone(MEMORY[0x263F0A858]);
  id v24 = v19;
  id v25 = v22;
  id v26 = v18;
  id v27 = (void *)sub_2510BF408();
  swift_bridgeObjectRelease();
  aBlock[4] = sub_2510A77A0;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2510A5C6C;
  void aBlock[3] = &block_descriptor_15;
  uint64_t v28 = _Block_copy(aBlock);
  id v29 = objc_msgSend(v23, sel_initWithPredicate_anchor_limit_sortDescriptors_batchHandler_, v26, v24, v33, v27, v28);

  _Block_release(v28);
  swift_release();
  type metadata accessor for HKUserDomainConceptQueryDescriptor();
  sub_2510BF798();
  return v29;
}

uint64_t sub_2510A595C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_2510BE7A8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v9 - v6;
  sub_251065E84(0, &qword_26B212E28);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t result = sub_2510BF758();
  *a2 = result;
  return result;
}

uint64_t sub_2510A5A68(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5, void *a6)
{
  sub_2510A7648(0, &qword_26B212638, MEMORY[0x263F8F670]);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v19 - v14;
  if (a2)
  {
    unint64_t v20 = a2;
    sub_2510A7648(0, &qword_26B212640, MEMORY[0x263F8F690]);
    swift_bridgeObjectRetain();
    sub_2510BF4C8();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if ((a3 & 1) == 0) {
      return result;
    }
    objc_msgSend(a6, sel_stopQuery_, a1);
    unint64_t v20 = 0;
  }
  else
  {
    uint64_t v17 = a4;
    if (!a4)
    {
      type metadata accessor for HKError(0);
      uint64_t v19 = 0;
      sub_2510A5D38(MEMORY[0x263F8EE78]);
      sub_25107A6F0();
      sub_2510BE828();
      uint64_t v17 = v20;
    }
    unint64_t v20 = v17;
    id v18 = a4;
    sub_2510A7648(0, &qword_26B212640, MEMORY[0x263F8F690]);
  }
  return sub_2510BF4D8();
}

uint64_t sub_2510A5C6C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = a3;
  uint64_t v9 = *(void (**)(id, uint64_t, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_251065E84(0, &qword_26B212650);
    uint64_t v7 = sub_2510BF418();
  }
  swift_retain();
  id v10 = a2;
  id v11 = a5;
  v9(v10, v7, a4, a5);
  swift_release();

  return swift_bridgeObjectRelease();
}

unint64_t sub_2510A5D38(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  sub_251088D14();
  uint64_t v2 = sub_2510BFB38();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2510A7880(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_2510A5E60(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    id v11 = (uint64_t *)(v3[6] + 16 * result);
    *id v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_251088DEC(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_2510A5E60(uint64_t a1, uint64_t a2)
{
  sub_2510BFD08();
  sub_2510BF2C8();
  uint64_t v4 = sub_2510BFD28();
  return sub_2510A5ED8(a1, a2, v4);
}

unint64_t sub_2510A5ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_2510BFC28() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_2510BFC28() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (sub_2510BFC28()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_2510A6020(unint64_t a1, unint64_t a2)
{
  sub_251065E84(0, &qword_26B212650);
  if (a2 >> 62)
  {
    uint64_t v4 = sub_2510BFB08();
    self;
    if (swift_dynamicCastObjCClass()) {
      return v4;
    }
  }
  else
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
      swift_unknownObjectRetain();
      self;
      if (!swift_dynamicCastObjCClass()) {
        goto LABEL_10;
      }
      return v4;
    }
    __break(1u);
  }
LABEL_10:
  sub_2510BF928();
  sub_2510BF2F8();
  sub_2510BFDB8();
  sub_2510BF2F8();
  swift_bridgeObjectRelease();
  sub_2510BF2F8();
  swift_getObjectType();
  swift_unknownObjectRelease();
  sub_2510BFDB8();
  sub_2510BF2F8();
  swift_bridgeObjectRelease();
  uint64_t result = sub_2510BFAD8();
  __break(1u);
  return result;
}

void sub_2510A620C()
{
  if (!qword_26B212630)
  {
    sub_251065E84(255, &qword_26B212650);
    unint64_t v0 = sub_2510BF488();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212630);
    }
  }
}

void sub_2510A6274()
{
  if (!qword_26B212628)
  {
    sub_2510A620C();
    unint64_t v0 = sub_2510BF008();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B212628);
    }
  }
}

uint64_t sub_2510A62CC()
{
  uint64_t v1 = (int *)(type metadata accessor for HKUserDomainConceptQueryDescriptor() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;

  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v1[12];
  uint64_t v8 = sub_2510BEFA8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return MEMORY[0x270FA0238](v0, v5 + 8, v4);
}

id sub_2510A63E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(type metadata accessor for HKUserDomainConceptQueryDescriptor() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void **)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_2510A5614(a1, v1 + v5, v6, v3);
}

uint64_t sub_2510A6498()
{
  return swift_getWitnessTable();
}

uint64_t sub_2510A64B4()
{
  return swift_getWitnessTable();
}

uint64_t sub_2510A64D0()
{
  uint64_t result = sub_2510BEFA8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *sub_2510A6580(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    unint64_t v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    unint64_t v5 = a1;
    uint64_t v6 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v6;
    *((void *)a1 + 3) = a2[3];
    a1[32] = *((unsigned char *)a2 + 32);
    uint64_t v7 = *(int *)(a3 + 40);
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = sub_2510BEFA8();
    id v11 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    uint64_t v12 = v4;
    swift_bridgeObjectRetain();
    BOOL v13 = v6;
    v11(v8, v9, v10);
  }
  return v5;
}

uint64_t sub_2510A668C(id *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 40);
  uint64_t v5 = sub_2510BEFA8();
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t sub_2510A6714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v7 = *(void **)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_2510BEFA8();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  id v13 = v5;
  swift_bridgeObjectRetain();
  id v14 = v7;
  v12(v9, v10, v11);
  return a1;
}

uint64_t sub_2510A67CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void **)(a1 + 16);
  uint64_t v10 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v10;
  id v11 = v10;

  uint64_t v12 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v12;
  uint64_t v13 = *(int *)(a3 + 40);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = sub_2510BEFA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

uint64_t sub_2510A6898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 40);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_2510BEFA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_2510A692C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_2510BEFA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_2510A69E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2510A69FC);
}

uint64_t sub_2510A69FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_2510BEFA8();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_2510A6AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2510A6AC0);
}

uint64_t sub_2510A6AC0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_2510BEFA8();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_2510A6B68()
{
  sub_2510A6274();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_2510A6BF4(uint64_t a1, uint64_t a2)
{
  sub_2510A6274();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t sub_2510A6C60(uint64_t a1)
{
  sub_2510A6274();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t sub_2510A6CC4(uint64_t a1, uint64_t a2)
{
  sub_2510A6274();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_2510A6D28(uint64_t a1, uint64_t a2)
{
  sub_2510A6274();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_2510A6D8C(uint64_t a1, uint64_t a2)
{
  sub_2510A6274();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_2510A6DF0(uint64_t a1, uint64_t a2)
{
  sub_2510A6274();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_2510A6E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2510A6E68);
}

uint64_t sub_2510A6E68(uint64_t a1, uint64_t a2)
{
  sub_2510A6274();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_2510A6ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2510A6EE8);
}

uint64_t sub_2510A6EE8(uint64_t a1, uint64_t a2)
{
  sub_2510A6274();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for HKUserDomainConceptQueryDescriptor.Results()
{
  return __swift_instantiateGenericMetadata();
}

void sub_2510A6F70()
{
  sub_2510A7648(319, &qword_26B212648, MEMORY[0x263F8F6A8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_2510A7020(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_2510A7648(0, &qword_26B212648, MEMORY[0x263F8F6A8]);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    *uint64_t v9 = v11;
    v9[1] = v12;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_2510A7114(uint64_t a1)
{
  sub_2510A7648(0, &qword_26B212648, MEMORY[0x263F8F6A8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2510A71A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2510A7648(0, &qword_26B212648, MEMORY[0x263F8F6A8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2510A7248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2510A7648(0, &qword_26B212648, MEMORY[0x263F8F6A8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (void *)(a2 + v7);
  *(void *)(a1 + v7) = *v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 8) = v9[1];
  return a1;
}

uint64_t sub_2510A7300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2510A7648(0, &qword_26B212648, MEMORY[0x263F8F6A8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 28)) = *(_OWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_2510A7398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2510A7648(0, &qword_26B212648, MEMORY[0x263F8F6A8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (void *)(a2 + v7);
  *(void *)(a1 + v7) = *v9;
  swift_bridgeObjectRelease();
  *(void *)(v8 + 8) = v9[1];
  return a1;
}

uint64_t sub_2510A7448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2510A745C);
}

uint64_t sub_2510A745C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2510A7648(0, &qword_26B212648, MEMORY[0x263F8F6A8]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_2510A7544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2510A7558);
}

void sub_2510A7558(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_2510A7648(0, &qword_26B212648, MEMORY[0x263F8F6A8]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = a2;
  }
}

uint64_t type metadata accessor for HKUserDomainConceptQueryDescriptor.Results.Iterator()
{
  return __swift_instantiateGenericMetadata();
}

void sub_2510A7648(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    sub_2510A620C();
    uint64_t v7 = v6;
    unint64_t v8 = sub_251067550();
    unint64_t v9 = a3(a1, v7, v8, MEMORY[0x263F8E4E0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_2510A76C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_2510A595C(a1, a2);
}

uint64_t sub_2510A76E0()
{
  sub_2510A7648(0, &qword_26B212640, MEMORY[0x263F8F690]);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v6 + 8, v5);
}

uint64_t sub_2510A77A0(uint64_t a1, void *a2, char a3, void *a4)
{
  sub_2510A7648(0, &qword_26B212640, MEMORY[0x263F8F690]);
  uint64_t v10 = *(void *)(v9 - 8);
  unint64_t v11 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = *(void **)(v4 + ((*(void *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_2510A5A68(a1, a2, a3, a4, v4 + v11, v12);
}

uint64_t sub_2510A7880(uint64_t a1, uint64_t a2)
{
  sub_251088D80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t HKHealthStore.DatabaseChangesPublisher.Configuration.init(types:anchor:includeChangeDetails:debugIdentifier:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(void *)(a6 + 32) = a5;
  return result;
}

uint64_t HKHealthStore.DatabaseChangesPublisher.QueryOutput.changes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKHealthStore.DatabaseChangesPublisher.QueryOutput.changes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*HKHealthStore.DatabaseChangesPublisher.QueryOutput.changes.modify())()
{
  return nullsub_1;
}

void *HKHealthStore.DatabaseChangesPublisher.QueryOutput.anchor.getter()
{
  uint64_t v1 = *(void **)(v0 + 8);
  id v2 = v1;
  return v1;
}

void HKHealthStore.DatabaseChangesPublisher.QueryOutput.anchor.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*HKHealthStore.DatabaseChangesPublisher.QueryOutput.anchor.modify())()
{
  return nullsub_1;
}

uint64_t HKHealthStore.DatabaseChangesPublisher.QueryOutput.init(changes:anchor:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t HKHealthStore.DatabaseChangesPublisher.Configuration.types.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HKHealthStore.DatabaseChangesPublisher.Configuration.types.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*HKHealthStore.DatabaseChangesPublisher.Configuration.types.modify())()
{
  return nullsub_1;
}

void *HKHealthStore.DatabaseChangesPublisher.Configuration.anchor.getter()
{
  uint64_t v1 = *(void **)(v0 + 8);
  id v2 = v1;
  return v1;
}

void HKHealthStore.DatabaseChangesPublisher.Configuration.anchor.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*HKHealthStore.DatabaseChangesPublisher.Configuration.anchor.modify())()
{
  return nullsub_1;
}

uint64_t HKHealthStore.DatabaseChangesPublisher.Configuration.includeChangeDetails.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t HKHealthStore.DatabaseChangesPublisher.Configuration.includeChangeDetails.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*HKHealthStore.DatabaseChangesPublisher.Configuration.includeChangeDetails.modify())()
{
  return nullsub_1;
}

uint64_t HKHealthStore.DatabaseChangesPublisher.Configuration.debugIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HKHealthStore.DatabaseChangesPublisher.Configuration.debugIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*HKHealthStore.DatabaseChangesPublisher.Configuration.debugIdentifier.modify())()
{
  return nullsub_1;
}

uint64_t (*static HKHealthStore.DatabaseChangesPublisher.defaultFactoryBlock.getter())(uint64_t a1, void *a2)
{
  return sub_2510A7B60;
}

uint64_t sub_2510A7B60(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  sub_2510A80A8();
  swift_bridgeObjectRetain();
  id v4 = v3;
  swift_bridgeObjectRetain();
  id v5 = a2;
  uint64_t v6 = sub_2510BEE58();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

id HKHealthStore.DatabaseChangesPublisher.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  id v6 = *(id *)(v1 + 8);
  char v2 = *(unsigned char *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v6;
}

id HKHealthStore.DatabaseChangesPublisher.healthStore.getter()
{
  return *(id *)(v0 + 40);
}

void sub_2510A7C7C(int a1, void *a2, unint64_t a3, id a4, void (*a5)(unint64_t *))
{
  if (a4)
  {
    unint64_t v12 = (unint64_t)a4;
    uint64_t v13 = 0;
    __int16 v14 = 1;
    id v7 = a4;
    a5(&v12);
  }
  else
  {
    if (a3) {
      unint64_t v9 = a3;
    }
    else {
      unint64_t v9 = sub_25107F808(MEMORY[0x263F8EE78]);
    }
    unint64_t v12 = v9;
    uint64_t v13 = a2;
    __int16 v14 = 0;
    id v10 = a2;
    swift_bridgeObjectRetain();
    id v11 = v10;
    swift_bridgeObjectRetain();
    a5(&v12);

    swift_bridgeObjectRelease_n();
  }
}

id sub_2510A7D58@<X0>(uint64_t a1@<X8>)
{
  id v6 = *(id *)(v1 + 8);
  char v2 = *(unsigned char *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t sub_2510A7DBC(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v6 = a4;
  unint64_t v9 = *(void (**)(id, void *, uint64_t, void *))(a1 + 32);
  if (a4)
  {
    sub_251065E84(0, (unint64_t *)&qword_26B2119A0);
    sub_251065E84(0, &qword_26B2120D0);
    sub_251062BFC();
    uint64_t v6 = sub_2510BF118();
  }
  swift_retain();
  id v10 = a2;
  id v11 = a3;
  id v12 = a5;
  v9(v10, a3, v6, a5);
  swift_release();

  return swift_bridgeObjectRelease();
}

id _sSo13HKHealthStoreC18HealthKitAdditionsE24DatabaseChangesPublisherV9makeQuery4with13outputHandlerSo7HKQueryCAE13ConfigurationV_yAC0nH6ResultOys0P0OyAE0J6OutputVs5Error_pGGctFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  id v9 = objc_allocWithZone(MEMORY[0x263F0A998]);
  sub_251065E84(0, (unint64_t *)&qword_26B2119A0);
  swift_bridgeObjectRetain();
  swift_retain();
  id v10 = v5;
  id v11 = (void *)sub_2510BF408();
  swift_bridgeObjectRelease();
  v17[4] = sub_2510A8558;
  v17[5] = v8;
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 1107296256;
  v17[2] = sub_2510A7DBC;
  v17[3] = &block_descriptor_16;
  id v12 = _Block_copy(v17);
  id v13 = objc_msgSend(v9, sel_initWithTypes_anchor_resultsHandler_, v11, v10, v12);

  _Block_release(v12);
  swift_release();
  objc_msgSend(v13, sel_setIncludeChangeDetails_, v6);
  id v14 = v13;
  if (v7) {
    uint64_t v15 = (void *)sub_2510BF228();
  }
  else {
    uint64_t v15 = 0;
  }
  objc_msgSend(v13, sel_setDebugIdentifier_, v15);

  return v13;
}

unint64_t sub_2510A8080(uint64_t a1)
{
  unint64_t result = sub_2510A80A8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_2510A80A8()
{
  unint64_t result = qword_26B211A00;
  if (!qword_26B211A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B211A00);
  }
  return result;
}

uint64_t _s24DatabaseChangesPublisherVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  id v5 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  id v6 = v5;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(a2 + 40);
  uint64_t v8 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v7;
  id v9 = v7;

  return a1;
}

uint64_t _s24DatabaseChangesPublisherVwta(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  id v5 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  return a1;
}

void *_s24DatabaseChangesPublisherV11QueryOutputVwCP(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  id v4 = v3;
  return a1;
}

void _s24DatabaseChangesPublisherV11QueryOutputVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  char v2 = *(void **)(a1 + 8);
}

void *_s24DatabaseChangesPublisherV11QueryOutputVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v4 = (void *)a1[1];
  id v5 = (void *)a2[1];
  a1[1] = v5;
  id v6 = v5;

  return a1;
}

uint64_t _s24DatabaseChangesPublisherV11QueryOutputVwta(uint64_t a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t _s24DatabaseChangesPublisherV11QueryOutputVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s24DatabaseChangesPublisherV11QueryOutputVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.DatabaseChangesPublisher.QueryOutput()
{
  return &type metadata for HKHealthStore.DatabaseChangesPublisher.QueryOutput;
}

uint64_t _s24DatabaseChangesPublisherV13ConfigurationVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s24DatabaseChangesPublisherV13ConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s24DatabaseChangesPublisherV13ConfigurationVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  id v5 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  id v6 = v5;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s24DatabaseChangesPublisherV13ConfigurationVwta(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for HKHealthStore.DatabaseChangesPublisher.Configuration()
{
  return &type metadata for HKHealthStore.DatabaseChangesPublisher.Configuration;
}

uint64_t sub_2510A8520()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_2510A8558(int a1, void *a2, unint64_t a3, void *a4)
{
  sub_2510A7C7C(a1, a2, a3, a4, *(void (**)(unint64_t *))(v4 + 16));
}

id HKHealthStore.ActivitySummaryPublisher.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  id v6 = *(id *)v1;
  char v2 = *(unsigned char *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 9);
  uint64_t v4 = *(void *)(v1 + 32);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 9) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  return v6;
}

id HKHealthStore.ActivitySummaryPublisher.healthStore.getter()
{
  return *(id *)(v0 + 40);
}

void sub_2510A85D0(int a1, void *a2, id a3, void (*a4)(id *), uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    BOOL v7 = (*(unsigned char *)(a6 + 8) & 1) == 0;
    id v10 = a2;
    char v11 = v7;
    swift_bridgeObjectRetain();
    a4(&v10);
    swift_bridgeObjectRelease();
  }
  else if (a3)
  {
    id v10 = a3;
    char v11 = 2;
    id v9 = a3;
    a4(&v10);
  }
}

uint64_t sub_2510A8670(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  BOOL v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_2510A8B28();
    uint64_t v5 = sub_2510BF418();
  }
  swift_retain();
  id v8 = a2;
  id v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

unint64_t sub_2510A8718(uint64_t a1)
{
  unint64_t result = sub_2510A8740();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_2510A8740()
{
  unint64_t result = qword_26B2119F0;
  if (!qword_26B2119F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2119F0);
  }
  return result;
}

uint64_t _s24ActivitySummaryPublisherVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BOOL v7 = *(void **)(a2 + 40);
  id v8 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v7;
  id v9 = v7;

  return a1;
}

uint64_t _s24ActivitySummaryPublisherVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  return a1;
}

uint64_t _s24ActivitySummaryPublisherVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s24ActivitySummaryPublisherVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t _s24ActivitySummaryPublisherV13ConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  char v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  id v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s24ActivitySummaryPublisherV13ConfigurationVwca(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s24ActivitySummaryPublisherV13ConfigurationVwta(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s24ActivitySummaryPublisherV13ConfigurationVwet(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s24ActivitySummaryPublisherV13ConfigurationVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.ActivitySummaryPublisher.Configuration()
{
  return &type metadata for HKHealthStore.ActivitySummaryPublisher.Configuration;
}

void sub_2510A8B18(int a1, void *a2, void *a3)
{
  sub_2510A85D0(a1, a2, a3, *(void (**)(id *))(v3 + 16), *(void *)(v3 + 24), v3 + 32);
}

unint64_t sub_2510A8B28()
{
  unint64_t result = qword_26B212038[0];
  if (!qword_26B212038[0])
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, qword_26B212038);
  }
  return result;
}

id HKHealthStore.makeDateRangePublisher(debugIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  a3[2] = v3;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_2510A8BB4(void *a1)
{
  sub_2510A9060();
  swift_bridgeObjectRetain();
  id v2 = a1;
  uint64_t v3 = sub_2510BEE58();

  swift_bridgeObjectRelease();
  return v3;
}

uint64_t (*static HKHealthStore.DateRangeQueryPublisher.defaultFactoryBlock.getter())(void *a1)
{
  return sub_2510A8BB4;
}

uint64_t HKHealthStore.DateRangeQueryPublisher.configuration.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

id HKHealthStore.DateRangeQueryPublisher.healthStore.getter()
{
  return *(id *)(v0 + 16);
}

void sub_2510A8C64(int a1, unint64_t a2, id a3, void (*a4)(unint64_t *))
{
  if (a3)
  {
    unint64_t v14 = (unint64_t)a3;
    __int16 v15 = 1;
    id v6 = a3;
    a4(&v14);
  }
  else
  {
    if (a2)
    {
      unint64_t v14 = a2;
      __int16 v15 = 0;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (qword_26B2118B8 != -1) {
        swift_once();
      }
      uint64_t v7 = sub_2510BEC48();
      __swift_project_value_buffer(v7, (uint64_t)qword_26B214CE0);
      id v8 = sub_2510BEC28();
      os_log_type_t v9 = sub_2510BF678();
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = (uint8_t *)swift_slowAlloc();
        unint64_t v11 = swift_slowAlloc();
        unint64_t v14 = v11;
        *(_DWORD *)id v10 = 136315138;
        uint64_t v12 = sub_2510BFDB8();
        sub_25106EDC0(v12, v13, (uint64_t *)&v14);
        sub_2510BF818();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_251054000, v8, v9, "[%s]: Received both nil for date intervals and error", v10, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2533940F0](v11, -1, -1);
        MEMORY[0x2533940F0](v10, -1, -1);
      }

      unint64_t v14 = sub_25107F910(MEMORY[0x263F8EE78]);
      __int16 v15 = 0;
    }
    a4(&v14);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_2510A8E78@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

id sub_2510A8E84()
{
  return *(id *)(v0 + 16);
}

uint64_t sub_2510A8E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_2510A93E0();
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

id _sSo13HKHealthStoreC18HealthKitAdditionsE23DateRangeQueryPublisherV04makeH04with13outputHandlerSo7HKQueryCAE13ConfigurationV_yAC0nI6ResultOys0P0OySDySo12HKSampleTypeC10Foundation0F8IntervalVGs5Error_pGGctFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  id v7 = objc_allocWithZone(MEMORY[0x263F0A9A8]);
  v13[4] = sub_2510A946C;
  void v13[5] = v6;
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1107296256;
  void v13[2] = sub_25108B824;
  void v13[3] = &block_descriptor_18;
  unint64_t v8 = _Block_copy(v13);
  swift_retain();
  id v9 = objc_msgSend(v7, sel_initWithDateIntervalHandler_, v8);
  _Block_release(v8);
  swift_release();
  id v10 = v9;
  if (v5) {
    unint64_t v11 = (void *)sub_2510BF228();
  }
  else {
    unint64_t v11 = 0;
  }
  objc_msgSend(v9, sel_setDebugIdentifier_, v11);

  return v9;
}

unint64_t sub_2510A9038(uint64_t a1)
{
  unint64_t result = sub_2510A9060();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_2510A9060()
{
  unint64_t result = qword_26B2119E0;
  if (!qword_26B2119E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2119E0);
  }
  return result;
}

void _s23DateRangeQueryPublisherVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 16);
}

void *_s23DateRangeQueryPublisherVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  int v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *_s23DateRangeQueryPublisherVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = (void *)a2[2];
  id v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  return a1;
}

uint64_t _s23DateRangeQueryPublisherVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  int v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t _s23DateRangeQueryPublisherVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s23DateRangeQueryPublisherVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.DateRangeQueryPublisher()
{
  return &type metadata for HKHealthStore.DateRangeQueryPublisher;
}

void *_s23DateRangeQueryPublisherV13ConfigurationVwCP(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s23DateRangeQueryPublisherV13ConfigurationVwxx()
{
  return swift_bridgeObjectRelease();
}

void *_s23DateRangeQueryPublisherV13ConfigurationVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s23DateRangeQueryPublisherV13ConfigurationVwta(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s23DateRangeQueryPublisherV13ConfigurationVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s23DateRangeQueryPublisherV13ConfigurationVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.DateRangeQueryPublisher.Configuration()
{
  return &type metadata for HKHealthStore.DateRangeQueryPublisher.Configuration;
}

unint64_t sub_2510A93E0()
{
  unint64_t result = qword_26B2119E8;
  if (!qword_26B2119E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2119E8);
  }
  return result;
}

uint64_t sub_2510A9434()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_2510A946C(int a1, unint64_t a2, void *a3)
{
  sub_2510A8C64(a1, a2, a3, *(void (**)(unint64_t *))(v3 + 16));
}

uint64_t static HKFeatureSettings.Key<A>.enabled.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_2510BF258();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t HKFeatureSettings.Key.init(rawValue:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t static HKFeatureSettings.Key<A>.liveOnTermsAcknowledged.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_2510BF258();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t static HKFeatureSettings.Key<A>.onboardingAcknowledged.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_2510BF258();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t HKFeatureSettings.Key.rawValue.getter()
{
  uint64_t v0 = sub_2510AA080();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t HKFeatureSettings.Key.rawValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*HKFeatureSettings.Key.rawValue.modify())()
{
  return nullsub_1;
}

uint64_t sub_2510A95AC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = HKFeatureSettings.Key.init(rawValue:)(*a1, a1[1], v5);
  uint64_t v4 = v5[1];
  *a2 = v5[0];
  a2[1] = v4;
  return result;
}

uint64_t sub_2510A95EC@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_2510AA080();
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t HKFeatureSettings.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_getObjectType();
  uint64_t v7 = sub_2510BF808();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v35 - v9;
  uint64_t v12 = *a1;
  unint64_t v11 = a1[1];
  id v13 = objc_msgSend(v3, sel_keyValueStorage);
  uint64_t v14 = sub_2510BF118();

  if (!*(void *)(v14 + 16))
  {
    long long v41 = 0u;
    long long v42 = 0u;
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_2510849C4(v12, v11);
  if ((v16 & 1) == 0)
  {
    long long v41 = 0u;
    long long v42 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_25106FBB4(*(void *)(v14 + 56) + 32 * v15, (uint64_t)&v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v42 + 1))
  {
LABEL_9:
    sub_25107B994((uint64_t)&v41);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2);
  }
  sub_251088DEC(&v41, v43);
  sub_25106FBB4((uint64_t)v43, (uint64_t)&v41);
  int v17 = swift_dynamicCast();
  uint64_t v18 = *(void *)(a2 - 8);
  uint64_t v20 = v18 + 56;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  if (v17)
  {
    uint64_t v21 = *(void *)(a2 - 8);
    uint64_t v22 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56);
    v19(v10, 0, 1, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(a3, v10, a2);
    return v22(a3, 0, 1, a2);
  }
  else
  {
    uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    v19(v10, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if (qword_26B2118B8 != -1) {
      swift_once();
    }
    uint64_t v24 = sub_2510BEC48();
    __swift_project_value_buffer(v24, (uint64_t)qword_26B214CE0);
    sub_25106FBB4((uint64_t)v43, (uint64_t)&v41);
    swift_bridgeObjectRetain_n();
    id v25 = sub_2510BEC28();
    os_log_type_t v26 = sub_2510BF678();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v40 = v36;
      *(_DWORD *)uint64_t v27 = 136446978;
      uint64_t v28 = sub_2510BFDB8();
      uint64_t v37 = v20;
      uint64_t v39 = sub_25106EDC0(v28, v29, &v40);
      sub_2510BF818();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2082;
      uint64_t v30 = sub_2510BFDB8();
      uint64_t v39 = sub_25106EDC0(v30, v31, &v40);
      sub_2510BF818();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 22) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v39 = sub_25106EDC0(v12, v11, &v40);
      sub_2510BF818();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v27 + 32) = 2082;
      __swift_project_boxed_opaque_existential_0(&v41, *((uint64_t *)&v42 + 1));
      swift_getDynamicType();
      uint64_t v32 = sub_2510BFDB8();
      uint64_t v39 = sub_25106EDC0(v32, v33, &v40);
      sub_2510BF818();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
      _os_log_impl(&dword_251054000, v25, v26, "[%{public}s]: Expected value of type %{public}s for key %{public}s but found value of type %{public}s", (uint8_t *)v27, 0x2Au);
      uint64_t v34 = v36;
      swift_arrayDestroy();
      MEMORY[0x2533940F0](v34, -1, -1);
      MEMORY[0x2533940F0](v27, -1, -1);
    }
    else
    {

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
      swift_bridgeObjectRelease_n();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    return v38(a3, 1, 1, a2);
  }
}

uint64_t HKFeatureSettings.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  swift_getObjectType();
  uint64_t v5 = sub_2510BEC48();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  unint64_t v9 = a1[1];
  id v11 = objc_msgSend(v2, sel_keyValueStorage);
  uint64_t v12 = sub_2510BF118();

  if (!*(void *)(v12 + 16))
  {
    long long v36 = 0u;
    long long v37 = 0u;
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_2510849C4(v10, v9);
  if ((v14 & 1) == 0)
  {
    long long v36 = 0u;
    long long v37 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_25106FBB4(*(void *)(v12 + 56) + 32 * v13, (uint64_t)&v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v37 + 1))
  {
LABEL_9:
    sub_25107B994((uint64_t)&v36);
    goto LABEL_10;
  }
  sub_251088DEC(&v36, v38);
  sub_25106FBB4((uint64_t)v38, (uint64_t)&v36);
  if (swift_dynamicCast())
  {
    sub_2510BE8A8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    uint64_t v15 = sub_2510BE908();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a2, 0, 1, v15);
  }
  if (qword_26B2118B8 != -1) {
    swift_once();
  }
  uint64_t v18 = __swift_project_value_buffer(v5, (uint64_t)qword_26B214CE0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v18, v5);
  sub_25106FBB4((uint64_t)v38, (uint64_t)&v36);
  swift_bridgeObjectRetain_n();
  uint64_t v19 = sub_2510BEC28();
  os_log_type_t v20 = sub_2510BF678();
  int v21 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v22 = swift_slowAlloc();
    int v33 = v21;
    uint64_t v23 = v22;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v35 = v32;
    *(_DWORD *)uint64_t v23 = 136446978;
    uint64_t v30 = v23 + 4;
    uint64_t v24 = sub_2510BFDB8();
    os_log_t v31 = v19;
    uint64_t v34 = sub_25106EDC0(v24, v25, &v35);
    sub_2510BF818();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2082;
    uint64_t v34 = sub_25106EDC0(0x656C62756F44, 0xE600000000000000, &v35);
    sub_2510BF818();
    *(_WORD *)(v23 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v34 = sub_25106EDC0(v10, v9, &v35);
    sub_2510BF818();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 32) = 2082;
    __swift_project_boxed_opaque_existential_0(&v36, *((uint64_t *)&v37 + 1));
    swift_getDynamicType();
    uint64_t v26 = sub_2510BFDB8();
    uint64_t v34 = sub_25106EDC0(v26, v27, &v35);
    sub_2510BF818();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    os_log_t v28 = v31;
    _os_log_impl(&dword_251054000, v31, (os_log_type_t)v33, "[%{public}s]: Expected value of type %{public}s for key %{public}s but found value of type %{public}s", (uint8_t *)v23, 0x2Au);
    uint64_t v29 = v32;
    swift_arrayDestroy();
    MEMORY[0x2533940F0](v29, -1, -1);
    MEMORY[0x2533940F0](v23, -1, -1);
  }
  else
  {

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
LABEL_10:
  uint64_t v17 = sub_2510BE908();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a2, 1, 1, v17);
}

uint64_t sub_2510AA080()
{
  return *(void *)v0;
}

uint64_t _s29StatisticsCollectionPublisherV6OutputVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s29StatisticsCollectionPublisherV6OutputVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for HKFeatureSettings.Key()
{
  return __swift_instantiateGenericMetadata();
}

id HKHealthStore.SampleCountPublisher.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  long long v3 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 8) = v3;
  *(void *)(a1 + 24) = v2;
  id v5 = (id)v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v5;
}

id HKHealthStore.SampleCountPublisher.healthStore.getter()
{
  return *(id *)(v0 + 32);
}

uint64_t sub_2510AA194(uint64_t a1, char a2)
{
  long long v3 = v2;
  uint64_t v5 = *v2;
  sub_251067630();
  uint64_t v6 = sub_2510BFB28();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          long long v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    os_log_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0) {
      id v33 = v31;
    }
    uint64_t result = sub_2510BF7C8();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  long long v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *long long v3 = v7;
  return result;
}

uint64_t sub_2510AA460(uint64_t a1, char a2)
{
  long long v3 = v2;
  uint64_t v5 = *v2;
  sub_2510865FC();
  char v39 = a2;
  uint64_t v6 = sub_2510BFB28();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v36 = v2;
  int64_t v37 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          long long v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    os_log_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((v39 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    sub_2510BF258();
    sub_2510BFD08();
    sub_2510BF2C8();
    uint64_t v14 = sub_2510BFD28();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  long long v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *long long v3 = v7;
  return result;
}

uint64_t sub_2510AA78C(uint64_t a1, char a2)
{
  long long v3 = v2;
  uint64_t v5 = *v2;
  sub_251088D14();
  uint64_t v6 = sub_2510BFB28();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    id v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              long long v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *id v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      unint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_251088DEC(v24, v35);
      }
      else
      {
        sub_25106FBB4((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_2510BFD08();
      sub_2510BF2C8();
      uint64_t result = sub_2510BFD28();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_251088DEC(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *long long v3 = v7;
  return result;
}

uint64_t sub_2510AAA88(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_2510BFD08();
  swift_bridgeObjectRetain();
  sub_2510BF2C8();
  uint64_t v8 = sub_2510BFD28();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_2510BFC28() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      int64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_2510BFC28() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *long long v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_2510AB45C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *long long v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_2510AAC38(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  if (a2)
  {
    sub_2510AC20C(0, a3, a4, a5, a6);
    uint64_t v10 = sub_2510BF8E8();
    uint64_t v23 = v10;
    sub_2510BF888();
    if (sub_2510BF8B8())
    {
      sub_251065E84(0, a4);
      do
      {
        swift_dynamicCast();
        uint64_t v10 = v23;
        unint64_t v17 = *(void *)(v23 + 16);
        if (*(void *)(v23 + 24) <= v17)
        {
          sub_2510AB13C(v17 + 1, a3, a4, a5, a6);
          uint64_t v10 = v23;
        }
        uint64_t result = sub_2510BF7C8();
        uint64_t v12 = v10 + 56;
        uint64_t v13 = -1 << *(unsigned char *)(v10 + 32);
        unint64_t v14 = result & ~v13;
        unint64_t v15 = v14 >> 6;
        if (((-1 << v14) & ~*(void *)(v10 + 56 + 8 * (v14 >> 6))) != 0)
        {
          unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v18 = 0;
          unint64_t v19 = (unint64_t)(63 - v13) >> 6;
          do
          {
            if (++v15 == v19 && (v18 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v20 = v15 == v19;
            if (v15 == v19) {
              unint64_t v15 = 0;
            }
            v18 |= v20;
            uint64_t v21 = *(void *)(v12 + 8 * v15);
          }
          while (v21 == -1);
          unint64_t v16 = __clz(__rbit64(~v21)) + (v15 << 6);
        }
        *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        *(void *)(*(void *)(v10 + 48) + 8 * v16) = v22;
        ++*(void *)(v10 + 16);
      }
      while (sub_2510BF8B8());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v10;
}

uint64_t sub_2510AAE60()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_25109957C();
  uint64_t v3 = sub_2510BF8D8();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    BOOL v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_2510BFD08();
      sub_2510BF2C8();
      uint64_t result = sub_2510BFD28();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *uint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_2510AB13C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v6 = v5;
  uint64_t v7 = *v5;
  sub_2510AC20C(0, a2, a3, a4, a5);
  uint64_t v8 = sub_2510BF8D8();
  uint64_t v9 = v8;
  if (*(void *)(v7 + 16))
  {
    int64_t v33 = v5;
    uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
    int64_t v11 = (void *)(v7 + 56);
    if (v10 < 64) {
      uint64_t v12 = ~(-1 << v10);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v7 + 56);
    int64_t v14 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v15 = v8 + 56;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    while (1)
    {
      if (v13)
      {
        unint64_t v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v21 >= v14) {
          goto LABEL_33;
        }
        unint64_t v22 = v11[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v14) {
            goto LABEL_33;
          }
          unint64_t v22 = v11[v17];
          if (!v22)
          {
            int64_t v17 = v21 + 2;
            if (v21 + 2 >= v14) {
              goto LABEL_33;
            }
            unint64_t v22 = v11[v17];
            if (!v22)
            {
              int64_t v23 = v21 + 3;
              if (v23 >= v14)
              {
LABEL_33:
                swift_release();
                uint64_t v6 = v33;
                uint64_t v32 = 1 << *(unsigned char *)(v7 + 32);
                if (v32 > 63) {
                  bzero((void *)(v7 + 56), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v11 = -1 << v32;
                }
                *(void *)(v7 + 16) = 0;
                break;
              }
              unint64_t v22 = v11[v23];
              if (!v22)
              {
                while (1)
                {
                  int64_t v17 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_39;
                  }
                  if (v17 >= v14) {
                    goto LABEL_33;
                  }
                  unint64_t v22 = v11[v17];
                  ++v23;
                  if (v22) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v17 = v23;
            }
          }
        }
LABEL_23:
        unint64_t v13 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = *(void *)(*(void *)(v7 + 48) + 8 * v20);
      uint64_t result = sub_2510BF7C8();
      uint64_t v25 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v15 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v26) & ~*(void *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v15 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v18 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v9 + 48) + 8 * v18) = v24;
      ++*(void *)(v9 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v6 = v9;
  return result;
}

unint64_t sub_2510AB3D8(uint64_t a1, uint64_t a2)
{
  sub_2510BF7C8();
  unint64_t result = sub_2510BF878();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

uint64_t sub_2510AB45C(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_2510AAE60();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (uint64_t)sub_2510AB5F8();
      goto LABEL_22;
    }
    sub_2510AB960();
  }
  uint64_t v11 = *v4;
  sub_2510BFD08();
  sub_2510BF2C8();
  unint64_t result = sub_2510BFD28();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = sub_2510BFC28(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = sub_2510BFC78();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = sub_2510BFC28();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  int64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *int64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_2510AB5F8()
{
  uint64_t v1 = v0;
  sub_25109957C();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_2510BF8C8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_2510AB7A8(unint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5 = v4;
  sub_2510AC20C(0, a1, a2, a3, a4);
  uint64_t v6 = *v4;
  uint64_t v7 = sub_2510BF8C8();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v5 = v8;
    return result;
  }
  id result = (id)(v7 + 56);
  uint64_t v10 = v6 + 56;
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11) {
    id result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  }
  int64_t v13 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v6 + 56);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v17) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v10 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v17) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v10 + 8 * v13);
      if (!v23)
      {
        int64_t v13 = v22 + 2;
        if (v22 + 2 >= v17) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v10 + 8 * v13);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v19 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    uint64_t v20 = 8 * v19;
    unint64_t v21 = *(void **)(*(void *)(v6 + 48) + v20);
    *(void *)(*(void *)(v8 + 48) + v20) = v21;
    id result = v21;
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v17) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v10 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v10 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_2510AB960()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_25109957C();
  uint64_t v3 = sub_2510BF8D8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_2510BFD08();
    swift_bridgeObjectRetain();
    sub_2510BF2C8();
    uint64_t result = sub_2510BFD28();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_2510ABC0C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v6 = v5;
  uint64_t v7 = *v5;
  sub_2510AC20C(0, a2, a3, a4, a5);
  uint64_t v8 = sub_2510BF8D8();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v6 = v9;
    return result;
  }
  uint64_t v32 = v5;
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & *(void *)(v7 + 56);
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v15 = v8 + 56;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v14) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v11 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void *)(v11 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v22 = *(void *)(v11 + 8 * v17);
        if (!v22) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    id v24 = *(id *)(*(void *)(v7 + 48) + 8 * v20);
    uint64_t result = sub_2510BF7C8();
    uint64_t v25 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v15 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v26) & ~*(void *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v15 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v9 + 48) + 8 * v18) = v24;
    ++*(void *)(v9 + 16);
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v14)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v6 = v32;
    goto LABEL_35;
  }
  unint64_t v22 = *(void *)(v11 + 8 * v23);
  if (v22)
  {
    int64_t v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v22 = *(void *)(v11 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_2510ABE84(uint64_t a1)
{
  unint64_t result = sub_2510ABEAC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_2510ABEAC()
{
  unint64_t result = qword_26B2119D0;
  if (!qword_26B2119D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B2119D0);
  }
  return result;
}

void *_s20SampleCountPublisherVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a1[1];
  uint64_t v5 = (void *)a2[1];
  a1[1] = v5;
  id v6 = v5;

  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)a2[4];
  uint64_t v8 = (void *)a1[4];
  a1[4] = v7;
  id v9 = v7;

  return a1;
}

uint64_t _s20SampleCountPublisherVwta(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

void *_s20SampleCountPublisherV13ConfigurationVwcp(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *_s20SampleCountPublisherV13ConfigurationVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a1[1];
  id v5 = (void *)a2[1];
  a1[1] = v5;
  id v6 = v5;

  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s20SampleCountPublisherV13ConfigurationVwta(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for HKHealthStore.SampleCountPublisher.Configuration()
{
  return &type metadata for HKHealthStore.SampleCountPublisher.Configuration;
}

uint64_t sub_2510AC118()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2510AC150(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_2510BF538();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_2510AAA88(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_2510AC1E8(unint64_t a1)
{
  return sub_25105D460(a1, &qword_26B2120C0, 0x263F0A678, &qword_269B1B658, &qword_269B1BD28);
}

void sub_2510AC20C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  if (!*a2)
  {
    sub_251065E84(255, a3);
    sub_251067900(a5, a3);
    unint64_t v8 = sub_2510BF908();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void *sub_2510AC298(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    *(void *)&long long v47 = a1;
    *((void *)&v47 + 1) = a2;
    uint64_t v3 = qword_269B1AF20;
    swift_bridgeObjectRetain();
    if (v3 != -1) {
      goto LABEL_46;
    }
    while (1)
    {
      v46[0] = xmmword_269B20B30;
      sub_25107BA64();
      uint64_t v4 = MEMORY[0x263F8D310];
      uint64_t v5 = sub_2510BF838();
      swift_bridgeObjectRelease();
      uint64_t v6 = (void *)sub_25107F5C4(MEMORY[0x263F8EE78]);
      uint64_t v7 = *(void *)(v5 + 16);
      if (!v7)
      {
LABEL_42:
        swift_bridgeObjectRelease();
        return v6;
      }
      swift_bridgeObjectRetain();
      unint64_t v8 = (uint64_t *)(v5 + 40);
      while (1)
      {
        uint64_t v10 = *v8;
        *(void *)&long long v47 = *(v8 - 1);
        *((void *)&v47 + 1) = v10;
        uint64_t v11 = qword_269B1AF28;
        swift_bridgeObjectRetain();
        if (v11 != -1) {
          swift_once();
        }
        v46[0] = xmmword_269B20B40;
        uint64_t v12 = (void *)sub_2510BF838();
        if (v12[2] != 2)
        {
          swift_bridgeObjectRelease();
          sub_251099210();
          swift_allocError();
          sub_2510AD3F0(v41);
          swift_willThrow();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v6;
        }
        uint64_t v43 = v7;
        uint64_t v14 = v12[4];
        uint64_t v13 = v12[5];
        int64_t v16 = (void *)v12[6];
        unint64_t v15 = v12[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (sub_2510BF258() == v14 && v17 == v13) {
          goto LABEL_24;
        }
        char v19 = sub_2510BFC28();
        swift_bridgeObjectRelease();
        if (v19) {
          goto LABEL_25;
        }
        if (sub_2510BF258() == v14 && v20 == v13)
        {
LABEL_24:
          swift_bridgeObjectRelease();
        }
        else
        {
          char v22 = sub_2510BFC28();
          swift_bridgeObjectRelease();
          if ((v22 & 1) == 0)
          {
            uint64_t v23 = sub_2510B1B70((uint64_t)v16, v15);
            int64_t v16 = (void *)v23;
            unint64_t v15 = v24;
            switch(v25)
            {
              case 1:
                uint64_t v48 = MEMORY[0x263F8D538];
                uint64_t v45 = (void *)v23;
                *(void *)&long long v47 = v23;
                char v26 = 1;
                goto LABEL_26;
              case 2:
                uint64_t v48 = MEMORY[0x263F8D4F8];
                uint64_t v45 = (void *)v23;
                LOBYTE(v47) = v23 & 1;
                char v26 = 2;
                goto LABEL_26;
              case 3:
                uint64_t v48 = sub_251065E84(0, &qword_269B1BD30);
                *(void *)&long long v47 = v16;
                uint64_t v45 = v16;
                id v40 = v16;
                char v26 = 3;
                goto LABEL_26;
              case 4:
                goto LABEL_25;
              default:
                char v44 = 0;
                uint64_t v48 = MEMORY[0x263F8D6C8];
                uint64_t v45 = (void *)v23;
                *(void *)&long long v47 = v23;
                break;
            }
            goto LABEL_27;
          }
        }
LABEL_25:
        uint64_t v48 = v4;
        uint64_t v45 = v16;
        *(void *)&long long v47 = v16;
        *((void *)&v47 + 1) = v15;
        swift_bridgeObjectRetain();
        char v26 = 4;
LABEL_26:
        char v44 = v26;
LABEL_27:
        sub_251088DEC(&v47, v46);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v49 = v6;
        unint64_t v29 = sub_2510849C4(v14, v13);
        uint64_t v30 = v6[2];
        BOOL v31 = (v28 & 1) == 0;
        uint64_t v32 = v30 + v31;
        if (__OFADD__(v30, v31)) {
          break;
        }
        char v33 = v28;
        if (v6[3] >= v32)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_2510AF4B8();
          }
        }
        else
        {
          sub_2510AA78C(v32, isUniquelyReferenced_nonNull_native);
          unint64_t v34 = sub_2510849C4(v14, v13);
          if ((v33 & 1) != (v35 & 1))
          {
            sub_2510BFC88();
            __break(1u);
            JUMPOUT(0x2510AC7B4);
          }
          unint64_t v29 = v34;
        }
        uint64_t v6 = v49;
        if (v33)
        {
          uint64_t v9 = (_OWORD *)(v49[7] + 32 * v29);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
          sub_251088DEC(v46, v9);
        }
        else
        {
          v49[(v29 >> 6) + 8] |= 1 << v29;
          uint64_t v36 = (uint64_t *)(v6[6] + 16 * v29);
          *uint64_t v36 = v14;
          v36[1] = v13;
          sub_251088DEC(v46, (_OWORD *)(v6[7] + 32 * v29));
          uint64_t v37 = v6[2];
          BOOL v38 = __OFADD__(v37, 1);
          uint64_t v39 = v37 + 1;
          if (v38) {
            goto LABEL_45;
          }
          void v6[2] = v39;
          swift_bridgeObjectRetain();
        }
        v8 += 2;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2510B17A8(v45, v15, v44);
        swift_bridgeObjectRelease();
        uint64_t v7 = v43 - 1;
        uint64_t v4 = MEMORY[0x263F8D310];
        if (v43 == 1)
        {
          swift_bridgeObjectRelease();
          goto LABEL_42;
        }
      }
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      swift_once();
    }
  }
  return 0;
}

uint64_t sub_2510AC7C8(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = a1;
  uint64_t v3 = swift_bridgeObjectRetain();
  *(void *)&long long v30 = sub_2510AFD78(v3);
  sub_2510AFD0C((uint64_t *)&v30);
  if (v1)
  {
    swift_release();
    __break(1u);
    JUMPOUT(0x2510ACC78);
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v30 + 16);
  if (v4)
  {
    uint64_t v5 = swift_retain();
    uint64_t v32 = (void *)MEMORY[0x263F8EE78];
    uint64_t v6 = (uint64_t *)(v5 + 40);
    uint64_t v29 = v2;
    do
    {
      uint64_t v7 = *(v6 - 1);
      uint64_t v8 = *v6;
      if (*(void *)(v2 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v9 = sub_2510849C4(v7, v8);
        if (v10)
        {
          sub_25106FBB4(*(void *)(v2 + 56) + 32 * v9, (uint64_t)&v30);
        }
        else
        {
          long long v30 = 0u;
          long long v31 = 0u;
        }
      }
      else
      {
        long long v30 = 0u;
        long long v31 = 0u;
        swift_bridgeObjectRetain();
      }
      uint64_t v11 = sub_2510B15AC((uint64_t)&v30);
      if (v13 != -1)
      {
        uint64_t v14 = (void *)v11;
        uint64_t v15 = v12;
        char v16 = v13;
        if (qword_269B1AF28 != -1) {
          swift_once();
        }
        *(void *)&long long v30 = v7;
        *((void *)&v30 + 1) = v8;
        swift_bridgeObjectRetain();
        sub_2510BF2F8();
        uint64_t v18 = *((void *)&v30 + 1);
        uint64_t v17 = v30;
        switch(v16)
        {
          case 1:
            sub_2510BF4F8();
            break;
          case 2:
            break;
          case 3:
            *(void *)&long long v30 = 0;
            *((void *)&v30 + 1) = 0xE000000000000000;
            sub_2510B17CC(v14, v15, 3);
            uint64_t v28 = v17;
            sub_2510BF2F8();
            objc_msgSend(v14, sel__value);
            sub_2510BF508();
            sub_2510BF2F8();
            id v19 = objc_msgSend(v14, sel__unit);
            id v20 = objc_msgSend(v19, sel_unitString);

            sub_2510BF258();
            sub_2510BF2F8();
            swift_bridgeObjectRelease();
            sub_2510BF2F8();
            uint64_t v17 = v28;
            sub_2510B1794(v14, v15, 3);
            break;
          case 4:
            swift_bridgeObjectRetain();
            break;
          default:
            *(void *)&long long v30 = v14;
            sub_2510BFBF8();
            break;
        }
        *(void *)&long long v30 = v17;
        *((void *)&v30 + 1) = v18;
        swift_bridgeObjectRetain();
        sub_2510BF2F8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v21 = v30;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          char v22 = v32;
        }
        else {
          char v22 = sub_251077780(0, v32[2] + 1, 1, v32);
        }
        unint64_t v24 = v22[2];
        unint64_t v23 = v22[3];
        if (v24 >= v23 >> 1) {
          char v22 = sub_251077780((void *)(v23 > 1), v24 + 1, 1, v22);
        }
        v22[2] = v24 + 1;
        uint64_t v32 = v22;
        *(_OWORD *)&v22[2 * v24 + 4] = v21;
        sub_2510B1794(v14, v15, v16);
        uint64_t v2 = v29;
      }
      v6 += 2;
      swift_bridgeObjectRelease();
      --v4;
    }
    while (v4);
    swift_release_n();
    char v25 = v32;
  }
  else
  {
    swift_release();
    char v25 = (void *)MEMORY[0x263F8EE78];
  }
  *(void *)&long long v30 = v25;
  if (qword_269B1AF20 != -1) {
    swift_once();
  }
  sub_2510B2464(0, &qword_269B1B668, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
  sub_25107B918();
  uint64_t v26 = sub_2510BF1A8();
  swift_bridgeObjectRelease();
  return v26;
}

id sub_2510ACC8C(void *a1, void *a2)
{
  id ObjCClassFromMetadata = a2;
  char v44 = a1;
  sub_2510B210C(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v45 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510B2140(0);
  uint64_t v46 = *(void *)(v4 - 8);
  uint64_t v47 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510B21F4(0);
  uint64_t v48 = *(void *)(v7 - 8);
  uint64_t v49 = v7;
  MEMORY[0x270FA5388](v7);
  char v51 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510B2228(0);
  uint64_t v10 = v9;
  uint64_t v43 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510B225C();
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510B2464(0, &qword_269B1BD80, MEMORY[0x263F8D538], MEMORY[0x263F8F2A8]);
  uint64_t v19 = v18;
  id v20 = *(void **)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  char v22 = (char *)&v37 - v21;
  sub_2510BEB68();
  sub_251065E84(0, &qword_269B1BD60);
  sub_2510BEB68();
  uint64_t v50 = v12;
  uint64_t v23 = sub_2510BEC18();
  uint64_t v39 = v19;
  uint64_t v40 = v10;
  BOOL v38 = v6;
  uint64_t v41 = v15;
  uint64_t v42 = v14;
  MEMORY[0x270FA5388](v23);
  unint64_t v24 = v50;
  *(&v37 - 4) = (uint64_t)v22;
  *(&v37 - 3) = (uint64_t)v24;
  *(&v37 - 2) = (uint64_t)v17;
  sub_2510B2174();
  uint64_t v25 = v49;
  sub_2510B2624(&qword_269B1BD90, sub_2510B21F4);
  sub_2510BEBF8();
  uint64_t v26 = v44;
  char v44 = v20;
  unint64_t v54 = v26;
  id v55 = ObjCClassFromMetadata;
  sub_2510B22D0();
  uint64_t v27 = (uint64_t)v45;
  uint64_t v28 = v47;
  sub_2510BF198();
  uint64_t v29 = v46;
  long long v30 = (void (**)(char *, uint64_t))v44;
  swift_bridgeObjectRelease();
  int v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28);
  uint64_t v32 = v43;
  if (v31 == 1)
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v25);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v50, v40);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v17, v42);
    v30[1](v22, v39);
    sub_2510B2324(v27, (uint64_t (*)(void))sub_2510B210C);
    return 0;
  }
  else
  {
    unint64_t v34 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v38, v27, v28);
    id ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
    sub_2510BEC08();
    char v35 = v54;
    sub_2510BEC08();
    id v33 = objc_msgSend(ObjCClassFromMetadata, sel_quantityWithUnit_doubleValue_, v35, v53);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v34, v28);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v49);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v50, v40);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v17, v42);
    v30[1](v22, v39);
  }
  return v33;
}

uint64_t sub_2510AD3F0@<X0>(void *a1@<X8>)
{
  sub_2510BF928();
  sub_2510BF2F8();
  if (qword_269B1AF28 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  sub_2510BF2F8();
  swift_bridgeObjectRelease();
  sub_2510BF2F8();
  sub_2510BF2F8();
  uint64_t result = sub_2510BF2F8();
  *a1 = 0xD000000000000018;
  a1[1] = 0x80000002510C6260;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  return result;
}

uint64_t sub_2510AD534@<X0>(uint64_t a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v176 = a3;
  v218 = a2;
  uint64_t v208 = a1;
  uint64_t v187 = a4;
  sub_2510B21F4(0);
  uint64_t v186 = v4;
  uint64_t v188 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  v185 = (char *)&v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  v202 = (char *)&v155 - v7;
  uint64_t v177 = sub_2510BEAF8();
  uint64_t v178 = *(void *)(v177 - 8);
  MEMORY[0x270FA5388](v177);
  v171 = (char *)&v155 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8F298];
  uint64_t v9 = MEMORY[0x263F8D980];
  sub_2510B2464(0, &qword_269B1BDA0, MEMORY[0x263F8D980], MEMORY[0x263F8F298]);
  uint64_t v181 = v10;
  uint64_t v182 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  v174 = (char *)&v155 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  v175 = (char *)&v155 - v13;
  sub_2510B2720(0, &qword_269B1BDA8, (uint64_t (*)(uint64_t))sub_2510B2384, MEMORY[0x263F900E8]);
  MEMORY[0x270FA5388](v14 - 8);
  v183 = (char *)&v155 - v15;
  sub_2510B225C();
  uint64_t v195 = v16;
  unint64_t v194 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  v196 = (char *)&v155 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510B23FC(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v214 = v18;
  uint64_t v215 = v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  v179 = (char *)&v155 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  v213 = (char *)&v155 - v22;
  sub_2510B2228(0);
  uint64_t v24 = v23;
  v164 = *(void (**)(uint64_t))(v23 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  v163 = (char *)&v155 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  v159 = (char *)&v155 - v28;
  MEMORY[0x270FA5388](v27);
  v216 = (char *)&v155 - v29;
  sub_2510B2430(0);
  MEMORY[0x270FA5388](v30 - 8);
  v190 = (char *)&v155 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8F250];
  sub_2510B2464(0, &qword_269B1BDC8, v9, MEMORY[0x263F8F250]);
  v170 = v32;
  uint64_t v191 = *((void *)v32 - 1);
  uint64_t v33 = MEMORY[0x270FA5388](v32);
  v166 = (char *)&v155 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  v167 = (char *)&v155 - v35;
  v203 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F900E8];
  sub_2510B2464(0, &qword_269B1BDD0, v9, MEMORY[0x263F900E8]);
  uint64_t v192 = v36;
  uint64_t v221 = *(void *)(v36 - 8);
  uint64_t v37 = MEMORY[0x270FA5388](v36);
  v173 = (char *)&v155 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  v172 = (char *)&v155 - v40;
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  v204 = (char *)&v155 - v42;
  MEMORY[0x270FA5388](v41);
  v206 = (char *)&v155 - v43;
  sub_2510B24B0(0);
  uint64_t v198 = v44;
  uint64_t v184 = *(void *)(v44 - 8);
  uint64_t v45 = MEMORY[0x270FA5388](v44);
  v197 = (char *)&v155 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v45);
  v207 = (char *)&v155 - v47;
  uint64_t v217 = sub_2510BEBC8();
  uint64_t v220 = *(void *)(v217 - 8);
  uint64_t v48 = MEMORY[0x270FA5388](v217);
  uint64_t v50 = (char *)&v155 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v48);
  v189 = (char *)&v155 - v51;
  sub_2510B2464(0, &qword_269B1BD80, MEMORY[0x263F8D538], MEMORY[0x263F8F2A8]);
  uint64_t v53 = v52;
  uint64_t v155 = v52;
  uint64_t v157 = *(void *)(v52 - 8);
  uint64_t v54 = v157;
  MEMORY[0x270FA5388](v52);
  id v56 = (char *)&v155 - v55;
  v156 = (char *)&v155 - v55;
  sub_2510B254C(0);
  uint64_t v210 = *(void *)(v57 - 8);
  uint64_t v211 = v57;
  uint64_t v58 = MEMORY[0x270FA5388](v57);
  v165 = (char *)&v155 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v58);
  v205 = (char *)&v155 - v60;
  uint64_t v61 = sub_2510BEB28();
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v63 = MEMORY[0x270FA5388](v61);
  v169 = (char *)&v155 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = MEMORY[0x270FA5388](v63);
  id v67 = (char *)&v155 - v66;
  MEMORY[0x270FA5388](v65);
  v201 = (char *)&v155 - v68;
  v212 = v67;
  sub_2510BEB08();
  uint64_t v193 = sub_2510B2624(&qword_269B1BDF0, MEMORY[0x263F8F280]);
  uint64_t v209 = v61;
  MEMORY[0x253392620](v67, v61, v193);
  id v69 = *(void (**)(char *, uint64_t))(v62 + 8);
  uint64_t v199 = v62 + 8;
  v200 = v69;
  v69(v67, v61);
  uint64_t v226 = 91;
  unint64_t v227 = 0xE100000000000000;
  unint64_t v219 = sub_2510B2580();
  MEMORY[0x253392620](v228, &v226, MEMORY[0x263F8D310], v219);
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v56, v208, v53);
  sub_2510BEAE8();
  uint64_t v161 = sub_2510BEBE8();
  uint64_t v70 = *(void *)(v161 - 8);
  v160 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56);
  uint64_t v162 = v70 + 56;
  uint64_t v71 = (uint64_t)v190;
  v160(v190, 1, 1, v161);
  sub_2510BEAE8();
  uint64_t v208 = MEMORY[0x263F900F0];
  uint64_t v72 = sub_2510B2624(&qword_269B1BE00, sub_2510B2228);
  v73 = v159;
  MEMORY[0x253392620](v218, v24, v72);
  uint64_t v74 = v163;
  sub_2510BEAB8();
  id v75 = v164;
  id v76 = (void (*)(char *, uint64_t))*((void *)v164 + 1);
  v76(v73, v24);
  uint64_t v77 = v216;
  (*((void (**)(char *, char *, uint64_t))v75 + 4))(v216, v74, v24);
  uint64_t v78 = v204;
  uint64_t v79 = MEMORY[0x263F8D980];
  v158 = v50;
  sub_2510BEB88();
  v164 = sub_2510B2430;
  sub_2510B2324(v71, (uint64_t (*)(void))sub_2510B2430);
  v76(v77, v24);
  uint64_t v80 = v220 + 8;
  v216 = *(char **)(v220 + 8);
  uint64_t v81 = v217;
  ((void (*)(char *, uint64_t))v216)(v50, v217);
  uint64_t v82 = v80;
  uint64_t v83 = v166;
  MEMORY[0x253392650](v78, v79);
  uint64_t v84 = sub_2510B25D4(&qword_269B1BE08, &qword_269B1BDC8, v168);
  v85 = v167;
  uint64_t v86 = v170;
  MEMORY[0x253392620](v83, v170, v84);
  uint64_t v87 = *(void (**)(char *, void))(v191 + 8);
  v87(v83, v86);
  v88 = v78;
  sub_2510BEAB8();
  v87(v85, v86);
  uint64_t v89 = v221;
  v90 = *(char **)(v221 + 32);
  v166 = (char *)(v221 + 32);
  v167 = v90;
  v91 = v206;
  uint64_t v92 = v192;
  ((void (*)(char *, char *, uint64_t))v90)(v206, v78, v192);
  uint64_t v93 = v155;
  v94 = v156;
  sub_2510BEB48();
  (*(void (**)(char *, uint64_t))(v157 + 8))(v94, v93);
  sub_2510B24E4();
  uint64_t v96 = v95;
  v203 = (uint64_t (*)(void, uint64_t))sub_2510B25D4(&qword_269B1BE10, &qword_269B1BDD0, v203);
  uint64_t v97 = v92;
  unint64_t v98 = v207;
  uint64_t v191 = v96;
  v99 = v189;
  sub_2510BEB98();
  v100 = *(void (**)(char *, uint64_t))(v89 + 8);
  uint64_t v221 = v89 + 8;
  v218 = v100;
  v100(v91, v97);
  v101 = v216;
  ((void (*)(char *, uint64_t))v216)(v99, v81);
  uint64_t v220 = v82;
  id v102 = v165;
  MEMORY[0x253392640](v98, v96);
  v163 = (char *)MEMORY[0x263F8F248];
  v168 = (uint64_t (*)(void, uint64_t))sub_2510B2624(&qword_269B1BE18, sub_2510B254C);
  uint64_t v103 = v211;
  MEMORY[0x253392620](v102, v211, v168);
  unint64_t v104 = *(void (**)(void, void))(v210 + 8);
  v210 += 8;
  v170 = v104;
  v104(v102, v103);
  uint64_t v224 = 32;
  unint64_t v225 = 0xE100000000000000;
  MEMORY[0x253392620](&v226, &v224, MEMORY[0x263F8D310], v219);
  (*(void (**)(char *, uint64_t, uint64_t))(v194 + 16))(v196, v176, v195);
  sub_2510BEAE8();
  v105 = v171;
  sub_2510BEBD8();
  uint64_t v106 = (uint64_t)v190;
  v160(v190, 1, 1, v161);
  v107 = v158;
  sub_2510BEAE8();
  sub_2510B2624(&qword_269B1BE20, MEMORY[0x263F8F268]);
  v108 = v88;
  uint64_t v109 = MEMORY[0x263F8D980];
  uint64_t v110 = v177;
  sub_2510BEBB8();
  sub_2510B2324(v106, (uint64_t (*)(void))v164);
  (*(void (**)(char *, uint64_t))(v178 + 8))(v105, v110);
  ((void (*)(char *, uint64_t))v101)(v107, v81);
  v111 = v101;
  v112 = v174;
  MEMORY[0x2533926B0](v108, v109);
  uint64_t v113 = sub_2510B25D4(&qword_269B1BE28, &qword_269B1BDA0, v180);
  v114 = v175;
  uint64_t v115 = v181;
  MEMORY[0x253392620](v112, v181, v113);
  v116 = *(void (**)(char *, uint64_t))(v182 + 8);
  v116(v112, v115);
  sub_2510BEAB8();
  v116(v114, v115);
  v117 = v206;
  uint64_t v118 = v192;
  ((void (*)(char *, char *, uint64_t))v167)(v206, v108, v192);
  uint64_t v119 = v195;
  v120 = v196;
  sub_2510BEB48();
  (*(void (**)(char *, uint64_t))(v194 + 8))(v120, v119);
  sub_2510B2384();
  uint64_t v122 = v121;
  sub_251065E84(0, &qword_269B1BD60);
  v123 = v183;
  v124 = v189;
  sub_2510BEB98();
  v218(v117, v118);
  ((void (*)(char *, uint64_t))v111)(v124, v81);
  v125 = v179;
  MEMORY[0x253392640](v123, v122);
  uint64_t v195 = sub_2510B2624(&qword_269B1BE30, sub_2510B23FC);
  uint64_t v126 = v214;
  MEMORY[0x253392620](v125, v214, v195);
  v127 = *(char **)(v215 + 8);
  v215 += 8;
  v196 = v127;
  ((void (*)(char *, uint64_t))v127)(v125, v126);
  uint64_t v222 = 93;
  unint64_t v223 = 0xE100000000000000;
  MEMORY[0x253392620](&v224, &v222, MEMORY[0x263F8D310], v219);
  v128 = v169;
  sub_2510BEB18();
  uint64_t v129 = v209;
  MEMORY[0x253392620](v128, v209, v193);
  v200(v128, v129);
  sub_2510BEAB8();
  uint64_t v130 = v228[0];
  unint64_t v131 = v228[1];
  sub_2510BEAE8();
  uint64_t v222 = v130;
  unint64_t v223 = v131;
  v132 = v172;
  sub_2510BEBA8();
  v133 = v173;
  sub_2510BEBA8();
  sub_2510BEB78();
  v134 = v218;
  v218(v133, v118);
  v134(v132, v118);
  v135 = v216;
  uint64_t v136 = v217;
  ((void (*)(char *, uint64_t))v216)(v124, v217);
  swift_bridgeObjectRelease();
  sub_2510BEAE8();
  sub_2510BEBA8();
  sub_2510BEB78();
  v134(v132, v118);
  ((void (*)(char *, uint64_t))v135)(v124, v136);
  uint64_t v137 = v226;
  unint64_t v138 = v227;
  unint64_t v194 = v227;
  sub_2510BEAE8();
  uint64_t v222 = v137;
  unint64_t v223 = v138;
  sub_2510BEBA8();
  sub_2510B2624(&qword_269B1BE38, sub_2510B24B0);
  sub_2510BEB78();
  v218(v132, v118);
  uint64_t v139 = v217;
  v140 = v216;
  ((void (*)(char *, uint64_t))v216)(v124, v217);
  swift_bridgeObjectRelease();
  sub_2510BEAE8();
  sub_2510B2174();
  unint64_t v194 = v141;
  sub_2510BEB78();
  uint64_t v142 = v139;
  ((void (*)(char *, uint64_t))v140)(v124, v139);
  uint64_t v143 = v224;
  unint64_t v144 = v225;
  uint64_t v195 = v225;
  sub_2510BEAE8();
  uint64_t v222 = v143;
  unint64_t v223 = v144;
  sub_2510BEBA8();
  unint64_t v219 = sub_2510B2624(&qword_269B1BD90, sub_2510B21F4);
  v145 = v185;
  uint64_t v146 = v186;
  sub_2510BEB78();
  v147 = v218;
  v218(v132, v118);
  v148 = v216;
  ((void (*)(char *, uint64_t))v216)(v124, v142);
  swift_bridgeObjectRelease();
  sub_2510BEAE8();
  sub_2510BEBA8();
  sub_2510BEB78();
  v147(v132, v118);
  ((void (*)(char *, uint64_t))v148)(v124, v217);
  v149 = *(void (**)(char *, uint64_t))(v188 + 8);
  v149(v145, v146);
  v149(v202, v146);
  v150 = *(void (**)(char *, uint64_t))(v184 + 8);
  uint64_t v151 = v198;
  v150(v197, v198);
  v150(v207, v151);
  v147(v204, v118);
  v147(v206, v118);
  uint64_t v152 = v209;
  v153 = (uint64_t (*)(char *, uint64_t))v200;
  v200(v212, v209);
  ((void (*)(char *, uint64_t))v196)(v213, v214);
  v170(v205, v211);
  return v153(v201, v152);
}

uint64_t sub_2510AEEA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = MEMORY[0x253392E20](*a1, a1[1], a1[2], a1[3]);
  uint64_t v5 = v4;
  if ((v4 & 0x1000000000000000) != 0 || !(v4 & 0x2000000000000000 | v3 & 0x1000000000000000))
  {
    sub_2510BF918();
LABEL_7:
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  MEMORY[0x270FA5388](v3);
  if ((v5 & 0x2000000000000000) == 0)
  {
    if ((v6 & 0x1000000000000000) != 0)
    {
      uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v7 = sub_2510BF9C8();
    }
    char v12 = sub_2510B154C(v7, v8, (void (*)(uint64_t *__return_ptr))sub_2510B20F4) & 1;
    goto LABEL_7;
  }
  BOOL v11 = (v6 > 0x20u || ((0x100003E01uLL >> v6) & 1) == 0)
     && (uint64_t v10 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
     && *v10 == 0;
  char v12 = v11;
  uint64_t result = swift_bridgeObjectRelease();
LABEL_14:
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = v12 ^ 1;
  return result;
}

void sub_2510AF068(void *a1@<X0>, void *a2@<X8>)
{
  MEMORY[0x253392E20](*a1, a1[1], a1[2], a1[3]);
  uint64_t v3 = (void *)sub_2510BF228();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(self, sel_unitFromString_, v3);

  *a2 = v4;
}

void *sub_2510AF0EC(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_2510B2464(0, qword_269B1B378, MEMORY[0x263F8E778], MEMORY[0x263F8E0F8]);
  id v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

id sub_2510AF174()
{
  uint64_t v1 = v0;
  sub_251067630();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_2510BFB18();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_2510AF314()
{
  uint64_t v1 = v0;
  sub_2510865FC();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_2510BFB18();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2510AF4B8()
{
  uint64_t v1 = v0;
  sub_251088D14();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_2510BFB18();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_25106FBB4(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_251088DEC(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_2510AF69C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_2510B2464(0, &qword_269B1B5A8, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2510BFB58();
  __break(1u);
  return result;
}

uint64_t sub_2510AF828(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_2510B2464(0, &qword_269B1BD88, MEMORY[0x263F8EE58] + 8, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2510BFB58();
  __break(1u);
  return result;
}

uint64_t sub_2510AF9BC(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_2510B2720(0, &qword_269B1BE40, (uint64_t (*)(uint64_t))sub_2510B2784, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  int64_t v13 = v10 + 4;
  unint64_t v14 = a4 + 4;
  size_t v15 = 2 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v10 + 4, a4 + 4, v15 * 8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    sub_2510B2784();
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_2510BFB58();
  __break(1u);
  return result;
}

uint64_t sub_2510AFB6C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_2510B2464(0, &qword_269B1B5A0, (uint64_t)&type metadata for HKSharingAuthorizationIdentifier, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  size_t v14 = 56 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_2510BFB58();
  __break(1u);
  return result;
}

uint64_t sub_2510AFD0C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_2510B1538(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_2510AFE80(v5);
  *a1 = v2;
  return result;
}

void *sub_2510AFD78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  sub_2510B2464(0, &qword_269B1B5A8, MEMORY[0x263F8D310], MEMORY[0x263F8E0F8]);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_2510B1338((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_25107A748();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

uint64_t sub_2510AFE80(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_2510BFBE8();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_2510B056C(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  uint64_t v105 = result;
  id v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      size_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_118:
      v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_2510B063C((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = sub_2510B0ABC((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          v100 = &v97[16 * v96 + 32];
          *(void *)v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_2510BF468();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  size_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v106 = v3;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    size_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = sub_2510BFC28();
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    unint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      unint64_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ sub_2510BFC28()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      uint64_t v22 = v20 + 1;
      uint64_t v9 = v20;
      uint64_t v20 = v22;
    }
    while (v22 < v3);
    uint64_t v20 = v22;
LABEL_36:
    uint64_t v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        uint64_t v27 = v20;
        uint64_t v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      uint64_t v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      size_t v11 = sub_2510B08D8(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      size_t v11 = sub_2510B08D8((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    uint64_t v43 = &v11[16 * v41 + 32];
    *(void *)uint64_t v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      uint64_t v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        uint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        uint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        id v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        v88 = v42;
        unint64_t v89 = v44;
        v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_2510B063C((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        size_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        uint64_t v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    uint64_t v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    uint64_t v32 = v3;
  }
  else {
    uint64_t v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      uint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        uint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        uint64_t v37 = v13;
        uint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_2510BFC28() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      uint64_t v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  uint64_t result = sub_2510BFAB8();
  __break(1u);
  return result;
}

uint64_t sub_2510B056C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
    uint64_t result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    unint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (uint64_t result = sub_2510BFC28(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      uint64_t result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_2510B063C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  uint64_t v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      uint64_t v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v18 = (char *)(a3 - 16);
        int v19 = v6;
        while (1)
        {
          uint64_t v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (sub_2510BFC28() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)uint64_t v18 = *((_OWORD *)v17 - 1);
            }
            int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
            }
            uint64_t v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    size_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (sub_2510BFC28() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      uint64_t v27 = v7;
    }
LABEL_50:
    sub_2510B0A00((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = sub_2510BFB58();
  __break(1u);
  return result;
}

char *sub_2510B08D8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_2510B2720(0, &qword_269B1BD38, (uint64_t (*)(uint64_t))sub_2510B1804, MEMORY[0x263F8E0F8]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2510B0A00(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)sub_2510BFB58();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_2510B0ABC(uint64_t a1)
{
  return sub_2510B08D8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

unsigned __int8 *sub_2510B0AD0(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_2510B0BD0(a1, a2, a3);
}

unsigned __int8 *sub_2510B0AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_2510BF398();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_2510B0E4C();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)sub_2510BF9C8();
  }
LABEL_7:
  int64_t v11 = sub_2510B0BD0(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_2510B0BD0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_2510B0E4C()
{
  unint64_t v0 = sub_2510BF3A8();
  uint64_t v4 = sub_2510B0ECC(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_2510B0ECC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_2510B1024(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      unsigned int v11 = sub_2510AF0EC(v9, 0);
      unint64_t v12 = sub_2510B1124((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        sub_2510BF9C8();
LABEL_4:
        JUMPOUT(0x253392E30);
      }
    }
    else
    {
      unsigned int v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x253392E30](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x253392E30]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

uint64_t sub_2510B1024(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_25109D25C(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_25109D25C(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return MEMORY[0x270F9D808](a1, a2, a3, a4);
  }
  __break(1u);
  return MEMORY[0x270F9D808](a1, a2, a3, a4);
}

unint64_t sub_2510B1124(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    id v9[2] = a6;
    _OWORD v9[3] = a7;
    void v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_25109D25C(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = sub_2510BF348();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = sub_2510BF9C8();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_25109D25C(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = sub_2510BF318();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_2510B1338(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    char v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_2510B1538(uint64_t a1)
{
  return sub_2510AF69C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_2510B154C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

uint64_t sub_2510B15AC(uint64_t a1)
{
  sub_2510A0E14(a1, (uint64_t)v5);
  if (v6)
  {
    sub_251065E84(0, &qword_269B1BD30);
    if (swift_dynamicCast()) {
      goto LABEL_11;
    }
  }
  else
  {
    sub_25107B994((uint64_t)v5);
  }
  sub_2510A0E14(a1, (uint64_t)v5);
  if (v6)
  {
    if (swift_dynamicCast()) {
      goto LABEL_11;
    }
  }
  else
  {
    sub_25107B994((uint64_t)v5);
  }
  sub_2510A0E14(a1, (uint64_t)v5);
  if (!v6)
  {
    sub_25107B994((uint64_t)v5);
LABEL_13:
    sub_2510A0E14(a1, (uint64_t)v5);
    if (v6)
    {
      if (swift_dynamicCast())
      {
        uint64_t v2 = v4;
        sub_25107B994(a1);
        return v2;
      }
    }
    else
    {
      sub_25107B994((uint64_t)v5);
    }
    sub_2510A0E78(a1, (uint64_t)v5);
    if (v6)
    {
      if (swift_dynamicCast()) {
        return v4;
      }
    }
    else
    {
      sub_25107B994((uint64_t)v5);
    }
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_13;
  }
LABEL_11:
  uint64_t v2 = v4;
  sub_25107B994(a1);
  return v2;
}

void sub_2510B1794(void *a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    sub_2510B17A8(a1, a2, a3);
  }
}

void sub_2510B17A8(void *a1, uint64_t a2, char a3)
{
  if (a3 == 4)
  {
    swift_bridgeObjectRelease();
  }
  else if (a3 == 3)
  {
  }
}

id sub_2510B17CC(id result, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_2510B17E0(result, a2, a3);
  }
  return result;
}

id sub_2510B17E0(id result, uint64_t a2, char a3)
{
  if (a3 == 4) {
    return (id)swift_bridgeObjectRetain();
  }
  if (a3 == 3) {
    return result;
  }
  return result;
}

void sub_2510B1804()
{
  if (!qword_269B1BD40)
  {
    unint64_t v0 = sub_2510BF618();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BD40);
    }
  }
}

uint64_t sub_2510B1864(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2510BE688();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = a1;
  v17[1] = a2;
  sub_2510BE678();
  sub_25107BA64();
  sub_2510BF848();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_2510BF278();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  BOOL v11 = v8 == 7562617 && v10 == 0xE300000000000000;
  if (v11
    || (sub_2510BFC28() & 1) != 0
    || (v8 == 121 ? (BOOL v13 = v10 == 0xE100000000000000) : (BOOL v13 = 0),
        v13
     || (sub_2510BFC28() & 1) != 0
     || (v8 == 1702195828 ? (BOOL v14 = v10 == 0xE400000000000000) : (BOOL v14 = 0),
         v14
      || (sub_2510BFC28() & 1) != 0
      || (v8 == 116 ? (BOOL v15 = v10 == 0xE100000000000000) : (BOOL v15 = 0), v15 || (sub_2510BFC28() & 1) != 0))))
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (v8 == 28526 && v10 == 0xE200000000000000 {
         || (sub_2510BFC28() & 1) != 0
  }
         || v8 == 110 && v10 == 0xE100000000000000
         || (sub_2510BFC28() & 1) != 0
         || v8 == 0x65736C6166 && v10 == 0xE500000000000000
         || (sub_2510BFC28() & 1) != 0
         || v8 == 102 && v10 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    char v16 = sub_2510BFC28();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v16 & 1) == 0) {
      return 2;
    }
  }
  return result;
}

uint64_t sub_2510B1B70(uint64_t a1, unint64_t a2)
{
  sub_251065E84(0, &qword_269B1BD30);
  swift_bridgeObjectRetain();
  uint64_t result = (uint64_t)sub_2510ACC8C((void *)a1, (void *)a2);
  if (result)
  {
    uint64_t v5 = result;
    swift_bridgeObjectRelease();
    return v5;
  }
  uint64_t v6 = HIBYTE(a2) & 0xF;
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v8 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8) {
    goto LABEL_56;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = (uint64_t)sub_2510B0AE8(a1, a2, 10);
    char v26 = v25;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v26 & 1) == 0) {
      goto LABEL_38;
    }
    goto LABEL_56;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v9 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v9 = (unsigned __int8 *)sub_2510BF9C8();
    }
    uint64_t result = (uint64_t)sub_2510B0BD0(v9, v10, 10);
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = result;
LABEL_38:
      swift_bridgeObjectRelease();
      return v12;
    }
LABEL_56:
    uint64_t v38 = 0;
    uint64_t v27 = MEMORY[0x270FA5388](result);
    if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
    {
      swift_bridgeObjectRetain();
      sub_2510BF918();
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0) {
        goto LABEL_67;
      }
    }
    else
    {
      MEMORY[0x270FA5388](v27);
      if ((a2 & 0x2000000000000000) == 0)
      {
        if ((a1 & 0x1000000000000000) != 0)
        {
          uint64_t v28 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else
        {
          uint64_t v28 = sub_2510BF9C8();
          uint64_t v7 = v34;
        }
        swift_bridgeObjectRetain();
        char v29 = sub_2510B154C(v28, v7, (void (*)(uint64_t *__return_ptr))sub_2510B20F4);
        swift_bridgeObjectRelease();
        if (v29) {
          goto LABEL_62;
        }
LABEL_67:
        swift_bridgeObjectRetain();
        char v30 = sub_2510B1864(a1, a2);
        if (v30 != 2)
        {
          char v31 = v30;
          swift_bridgeObjectRelease();
          return v31 & 1;
        }
        return a1;
      }
      uint64_t v35 = a1;
      uint64_t v36 = a2 & 0xFFFFFFFFFFFFFFLL;
      if (a1 <= 0x20u && ((1 << a1) & 0x100003E01) != 0)
      {
        swift_bridgeObjectRetain();
LABEL_66:
        swift_bridgeObjectRelease();
        goto LABEL_67;
      }
      swift_bridgeObjectRetain();
      uint64_t v32 = (unsigned __int8 *)_swift_stdlib_strtod_clocale();
      if (!v32) {
        goto LABEL_66;
      }
      int v33 = *v32;
      swift_bridgeObjectRelease();
      if (v33) {
        goto LABEL_67;
      }
    }
LABEL_62:
    swift_bridgeObjectRelease();
    return v38;
  }
  uint64_t v35 = a1;
  uint64_t v36 = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v6) {
      goto LABEL_79;
    }
    if (v6 == 1) {
      goto LABEL_76;
    }
    if ((BYTE1(a1) - 48) <= 9u)
    {
      uint64_t v12 = (BYTE1(a1) - 48);
      if (v6 == 2) {
        goto LABEL_36;
      }
      if ((BYTE2(a1) - 48) <= 9u)
      {
        uint64_t v12 = 10 * (BYTE1(a1) - 48) + (BYTE2(a1) - 48);
        uint64_t v13 = v6 - 3;
        if (v6 != 3)
        {
          BOOL v14 = (unsigned __int8 *)&v35 + 3;
          while (1)
          {
            unsigned int v15 = *v14 - 48;
            if (v15 > 9) {
              goto LABEL_34;
            }
            uint64_t v16 = 10 * v12;
            if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63) {
              goto LABEL_34;
            }
            uint64_t v12 = v16 + v15;
            if (__OFADD__(v16, v15)) {
              goto LABEL_34;
            }
            LOBYTE(v6) = 0;
            ++v14;
            if (!--v13) {
              goto LABEL_37;
            }
          }
        }
        goto LABEL_36;
      }
    }
LABEL_34:
    uint64_t v12 = 0;
    LOBYTE(v6) = 1;
    goto LABEL_37;
  }
  if (a1 != 45)
  {
    if (!v6 || (a1 - 48) > 9u) {
      goto LABEL_34;
    }
    uint64_t v12 = (a1 - 48);
    if (v6 == 1)
    {
LABEL_36:
      LOBYTE(v6) = 0;
      goto LABEL_37;
    }
    if ((BYTE1(a1) - 48) <= 9u)
    {
      uint64_t v12 = 10 * (a1 - 48) + (BYTE1(a1) - 48);
      uint64_t v17 = v6 - 2;
      if (v6 != 2)
      {
        unint64_t v18 = (unsigned __int8 *)&v35 + 2;
        while (1)
        {
          unsigned int v19 = *v18 - 48;
          if (v19 > 9) {
            goto LABEL_34;
          }
          uint64_t v20 = 10 * v12;
          if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63) {
            goto LABEL_34;
          }
          uint64_t v12 = v20 + v19;
          if (__OFADD__(v20, v19)) {
            goto LABEL_34;
          }
          LOBYTE(v6) = 0;
          ++v18;
          if (!--v17) {
            goto LABEL_37;
          }
        }
      }
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (v6)
  {
    if (v6 != 1)
    {
      if ((BYTE1(a1) - 48) > 9u) {
        goto LABEL_34;
      }
      if (v6 == 2)
      {
        LOBYTE(v6) = 0;
        uint64_t v12 = -(uint64_t)(BYTE1(a1) - 48);
        goto LABEL_37;
      }
      if ((BYTE2(a1) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v12 = -10 * (BYTE1(a1) - 48) - (BYTE2(a1) - 48);
      uint64_t v21 = v6 - 3;
      if (v6 != 3)
      {
        uint64_t v22 = (unsigned __int8 *)&v35 + 3;
        while (1)
        {
          unsigned int v23 = *v22 - 48;
          if (v23 > 9) {
            goto LABEL_34;
          }
          uint64_t v24 = 10 * v12;
          if ((unsigned __int128)(v12 * (__int128)10) >> 64 != (10 * v12) >> 63) {
            goto LABEL_34;
          }
          uint64_t v12 = v24 - v23;
          if (__OFSUB__(v24, v23)) {
            goto LABEL_34;
          }
          LOBYTE(v6) = 0;
          ++v22;
          if (!--v21) {
            goto LABEL_37;
          }
        }
      }
      goto LABEL_36;
    }
LABEL_76:
    uint64_t v12 = 0;
LABEL_37:
    if ((v6 & 1) == 0) {
      goto LABEL_38;
    }
    goto LABEL_56;
  }
  __break(1u);
LABEL_79:
  __break(1u);
  return result;
}

unsigned char *sub_2510B20DC@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_2510B266C(a1, a2);
}

void *sub_2510B20F4@<X0>(unsigned char *a1@<X8>)
{
  return sub_2510B26DC(a1);
}

void sub_2510B210C(uint64_t a1)
{
}

void sub_2510B2140(uint64_t a1)
{
}

void sub_2510B2174()
{
  if (!qword_269B1BD58)
  {
    sub_251065E84(255, &qword_269B1BD60);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_269B1BD58);
    }
  }
}

void sub_2510B21F4(uint64_t a1)
{
}

void sub_2510B2228(uint64_t a1)
{
}

void sub_2510B225C()
{
  if (!qword_269B1BD78)
  {
    sub_251065E84(255, &qword_269B1BD60);
    unint64_t v0 = sub_2510BEB58();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BD78);
    }
  }
}

uint64_t sub_2510B22C4@<X0>(uint64_t a1@<X8>)
{
  return sub_2510AD534(*(void *)(v1 + 16), *(void (**)(char *, uint64_t))(v1 + 24), *(void *)(v1 + 32), a1);
}

unint64_t sub_2510B22D0()
{
  unint64_t result = qword_269B1BD98;
  if (!qword_269B1BD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BD98);
  }
  return result;
}

uint64_t sub_2510B2324(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_2510B2384()
{
  if (!qword_269B1BDB0)
  {
    sub_251065E84(255, &qword_269B1BD60);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B1BDB0);
    }
  }
}

void sub_2510B23FC(uint64_t a1)
{
}

void sub_2510B2430(uint64_t a1)
{
}

void sub_2510B2464(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_2510B24B0(uint64_t a1)
{
}

void sub_2510B24E4()
{
  if (!qword_269B1BDE0)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B1BDE0);
    }
  }
}

void sub_2510B254C(uint64_t a1)
{
}

unint64_t sub_2510B2580()
{
  unint64_t result = qword_269B1BDF8;
  if (!qword_269B1BDF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BDF8);
  }
  return result;
}

uint64_t sub_2510B25D4(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_2510B2464(255, a2, MEMORY[0x263F8D980], a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2510B2624(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *sub_2510B266C@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *sub_2510B26DC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

void sub_2510B2720(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_2510B2784()
{
  if (!qword_269B1BE48)
  {
    type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B1BE48);
    }
  }
}

uint64_t HKDeviceKeyValueStore.fetchEntries(for:)(uint64_t a1, uint64_t a2)
{
  sub_2510B29C0();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = v2;
  v10[3] = a1;
  v10[4] = a2;
  char v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D488];
  sub_2510B3688(0, &qword_26B211908, &qword_26B211988, MEMORY[0x263F8D488]);
  sub_2510B377C(&qword_26B211900, &qword_26B211908, &qword_26B211988, v11);
  id v12 = v2;
  swift_bridgeObjectRetain();
  sub_2510BEE38();
  sub_2510B4E48(&qword_26B211948, (void (*)(uint64_t))sub_2510B29C0);
  uint64_t v13 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v13;
}

void sub_2510B29C0()
{
  if (!qword_26B211950)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D488];
    sub_2510B3688(255, &qword_26B211908, &qword_26B211988, MEMORY[0x263F8D488]);
    sub_2510B377C(&qword_26B211900, &qword_26B211908, &qword_26B211988, v0);
    unint64_t v1 = sub_2510BEE48();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26B211950);
    }
  }
}

uint64_t sub_2510B2A78@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  sub_2510B3688(0, &qword_26B211908, &qword_26B211988, MEMORY[0x263F8D488]);
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v9 = a1;
  uint64_t result = sub_2510BEE28();
  *a4 = result;
  return result;
}

uint64_t sub_2510B2B40@<X0>(uint64_t *a1@<X8>)
{
  return sub_2510B2A78(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

void sub_2510B2B4C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  swift_retain();
  if (a5) {
    a5 = (void *)sub_2510BF228();
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_2510674DC;
  *(void *)(v10 + 24) = v9;
  void v12[4] = sub_2510B84C4;
  v12[5] = v10;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1107296256;
  void v12[2] = sub_2510B2D38;
  uint64_t v12[3] = &block_descriptor_162;
  char v11 = _Block_copy(v12);
  swift_release();
  objc_msgSend(a3, sel_fetchEntriesForKey_completion_, a5, v11);
  _Block_release(v11);
}

void sub_2510B2C90(void *a1, id a2, void (*a3)(id, uint64_t))
{
  if (a2)
  {
    id v5 = a2;
    a3(a2, 1);
  }
  else
  {
    if (a1) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = (void *)MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRetain();
    a3(v6, 0);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_2510B2D38(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  id v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_251065E84(0, &qword_26B212168);
    uint64_t v4 = sub_2510BF418();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_2510B2DDC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  sub_2510B3688(0, &qword_269B1BE58, &qword_269B1BE60, MEMORY[0x263F8D8F0]);
  swift_allocObject();
  id v9 = a1;
  swift_bridgeObjectRetain();
  uint64_t result = sub_2510BEE28();
  *a4 = result;
  return result;
}

void sub_2510B2EA0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  swift_retain();
  uint64_t v7 = (void *)sub_2510BF228();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_2510674DC;
  *(void *)(v8 + 24) = v6;
  v10[4] = sub_2510B84AC;
  v10[5] = v8;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1107296256;
  void v10[2] = sub_25105A128;
  v10[3] = &block_descriptor_150_0;
  id v9 = _Block_copy(v10);
  swift_release();
  objc_msgSend(a3, sel_mostRecentEntryForKey_completion_, v7, v9);
  _Block_release(v9);
}

void sub_2510B2FD4(int a1, id a2, void (*a3)(void))
{
  if (a2)
  {
    id v5 = a2;
    ((void (*)(id, uint64_t))a3)(a2, 1);
  }
  else
  {
    a3();
  }
}

void *sub_2510B304C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t result = *a1;
  if (result)
  {
    id v8 = objc_msgSend(result, sel_storageEntries);
    sub_251065E84(0, &qword_269B1BE80);
    unint64_t v9 = sub_2510BF418();

    swift_bridgeObjectRetain();
    uint64_t v10 = sub_2510B82F4(v9, a2, a3);
    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  *a4 = v10;
  return result;
}

uint64_t HKDeviceKeyValueStore.mostRecentBool(for:)(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = v2;
  sub_2510B35D0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  uint64_t v31 = v7;
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510B37CC();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v32 = v10;
  uint64_t v33 = v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510B38A4(0, &qword_269B1BE90, &qword_26B211990, MEMORY[0x263F8D4F8], MEMORY[0x263EFDC00]);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v34 = v14;
  uint64_t v35 = v15;
  MEMORY[0x270FA5388](v14);
  char v29 = (char *)&v29 - v16;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = v3;
  v17[3] = a1;
  v17[4] = a2;
  unint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_2510B3688(0, &qword_269B1BE58, &qword_269B1BE60, MEMORY[0x263F8D8F0]);
  sub_2510B377C(&qword_269B1BE68, &qword_269B1BE58, &qword_269B1BE60, v18);
  id v19 = v3;
  swift_bridgeObjectRetain();
  sub_2510BEE38();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  sub_2510B3714(0, &qword_269B1BE78, &qword_269B1BE80, 0x263F0A2E8, v18);
  sub_2510B4E48(&qword_269B1BE88, (void (*)(uint64_t))sub_2510B35D0);
  swift_bridgeObjectRetain();
  uint64_t v21 = v30;
  sub_2510BEE78();
  swift_release();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v21);
  sub_2510B4E48(&qword_269B1BEA8, (void (*)(uint64_t))sub_2510B37CC);
  uint64_t v22 = v32;
  uint64_t v23 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v22);
  uint64_t v36 = v23;
  sub_2510B3968();
  uint64_t v24 = MEMORY[0x263F8D4F8];
  sub_2510725FC(0, &qword_26B211990);
  sub_2510B4E48(&qword_269B1BEA0, (void (*)(uint64_t))sub_2510B3968);
  char v25 = v29;
  sub_2510BEEA8();
  swift_release();
  sub_2510B3B00(&qword_269B1BEB0, &qword_269B1BE90, &qword_26B211990, v24);
  uint64_t v26 = v34;
  uint64_t v27 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v26);
  return v27;
}

void sub_2510B35D0()
{
  if (!qword_269B1BE50)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
    sub_2510B3688(255, &qword_269B1BE58, &qword_269B1BE60, MEMORY[0x263F8D8F0]);
    sub_2510B377C(&qword_269B1BE68, &qword_269B1BE58, &qword_269B1BE60, v0);
    unint64_t v1 = sub_2510BEE48();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_269B1BE50);
    }
  }
}

void sub_2510B3688(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_2510B3714(255, a3, &qword_26B212168, 0x263F0A2F0, a4);
    sub_251067550();
    unint64_t v5 = sub_2510BEE18();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_2510B3714(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = sub_251065E84(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_2510B377C(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_2510B3688(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_2510B37CC()
{
  if (!qword_269B1BE70)
  {
    sub_2510B35D0();
    sub_2510B3714(255, &qword_269B1BE78, &qword_269B1BE80, 0x263F0A2E8, MEMORY[0x263F8D8F0]);
    sub_2510B4E48(&qword_269B1BE88, (void (*)(uint64_t))sub_2510B35D0);
    unint64_t v0 = sub_2510BEC98();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BE70);
    }
  }
}

void sub_2510B38A4(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_2510B3968();
    uint64_t v10 = v9;
    sub_2510725FC(255, a3);
    uint64_t v12 = v11;
    uint64_t v13 = sub_2510B4E48(&qword_269B1BEA0, (void (*)(uint64_t))sub_2510B3968);
    unint64_t v14 = a5(a1, v10, v12, v13);
    if (!v15) {
      atomic_store(v14, a2);
    }
  }
}

void sub_2510B3968()
{
  if (!qword_269B1BE98)
  {
    sub_2510B3714(255, &qword_269B1BE78, &qword_269B1BE80, 0x263F0A2E8, MEMORY[0x263F8D8F0]);
    sub_251067550();
    unint64_t v0 = sub_2510BED88();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BE98);
    }
  }
}

uint64_t sub_2510B3A08@<X0>(uint64_t *a1@<X8>)
{
  return sub_2510B2DDC(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

void *sub_2510B3A14@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  return sub_2510B304C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void sub_2510B3A1C(void **a1@<X0>, unsigned __int8 *a2@<X8>)
{
  v9[1] = *(id *)MEMORY[0x263EF8340];
  unsigned int v3 = *a1;
  if (v3)
  {
    v9[0] = 0;
    id v4 = objc_msgSend(v3, sel_numberValue_, v9);
    if (v4)
    {
      unint64_t v5 = v4;
      id v6 = v9[0];
      unsigned __int8 v7 = objc_msgSend(v5, sel_BOOLValue);

      *a2 = v7;
    }
    else
    {
      id v8 = v9[0];
      sub_2510BE838();

      swift_willThrow();
    }
  }
  else
  {
    *a2 = 2;
  }
}

uint64_t sub_2510B3B00(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_2510B38A4(255, a2, a3, a4, MEMORY[0x263EFDC00]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t HKDeviceKeyValueStore.mostRecentData(for:)(uint64_t a1, uint64_t a2)
{
  sub_2510B35D0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  uint64_t v29 = v6;
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510B37CC();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v30 = v9;
  uint64_t v31 = v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510B38A4(0, &qword_269B1BEB8, &qword_26B2121A8, MEMORY[0x263F06F78], MEMORY[0x263EFDB28]);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v32 = v13;
  uint64_t v33 = v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v27 = (char *)&v27 - v15;
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v2;
  void v16[3] = a1;
  v16[4] = a2;
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_2510B3688(0, &qword_269B1BE58, &qword_269B1BE60, MEMORY[0x263F8D8F0]);
  sub_2510B377C(&qword_269B1BE68, &qword_269B1BE58, &qword_269B1BE60, v17);
  id v18 = v2;
  swift_bridgeObjectRetain();
  sub_2510BEE38();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  sub_2510B3714(0, &qword_269B1BE78, &qword_269B1BE80, 0x263F0A2E8, v17);
  sub_2510B4E48(&qword_269B1BE88, (void (*)(uint64_t))sub_2510B35D0);
  swift_bridgeObjectRetain();
  uint64_t v20 = v28;
  sub_2510BEE78();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v20);
  sub_2510B4E48(&qword_269B1BEA8, (void (*)(uint64_t))sub_2510B37CC);
  uint64_t v21 = v30;
  uint64_t v22 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v21);
  uint64_t v34 = v22;
  sub_2510B3968();
  sub_2510725FC(0, &qword_26B2121A8);
  sub_2510B4E48(&qword_269B1BEA0, (void (*)(uint64_t))sub_2510B3968);
  uint64_t v23 = v27;
  sub_2510BEE78();
  swift_release();
  sub_2510B40A4();
  uint64_t v24 = v32;
  uint64_t v25 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v24);
  return v25;
}

uint64_t sub_2510B4004()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_2510B403C(void **a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v3 = *a1;
  if (v3)
  {
    id v4 = objc_msgSend(v3, sel_value);
    uint64_t v5 = sub_2510BE898();
    unint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  *a2 = v5;
  a2[1] = v7;
}

unint64_t sub_2510B40A4()
{
  unint64_t result = qword_269B1BEC0;
  if (!qword_269B1BEC0)
  {
    sub_2510B38A4(255, &qword_269B1BEB8, &qword_26B2121A8, MEMORY[0x263F06F78], MEMORY[0x263EFDB28]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BEC0);
  }
  return result;
}

uint64_t HKDeviceKeyValueStore.mostRecentDate(for:)(uint64_t a1, uint64_t a2)
{
  sub_2510B35D0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  uint64_t v29 = v6;
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510B37CC();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v30 = v9;
  uint64_t v31 = v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510B45BC();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v32 = v13;
  uint64_t v33 = v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v27 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v2;
  void v16[3] = a1;
  v16[4] = a2;
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_2510B3688(0, &qword_269B1BE58, &qword_269B1BE60, MEMORY[0x263F8D8F0]);
  sub_2510B377C(&qword_269B1BE68, &qword_269B1BE58, &qword_269B1BE60, v17);
  id v18 = v2;
  swift_bridgeObjectRetain();
  sub_2510BEE38();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  sub_2510B3714(0, &qword_269B1BE78, &qword_269B1BE80, 0x263F0A2E8, v17);
  sub_2510B4E48(&qword_269B1BE88, (void (*)(uint64_t))sub_2510B35D0);
  swift_bridgeObjectRetain();
  uint64_t v20 = v28;
  sub_2510BEE78();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v20);
  sub_2510B4E48(&qword_269B1BEA8, (void (*)(uint64_t))sub_2510B37CC);
  uint64_t v21 = v30;
  uint64_t v22 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v21);
  uint64_t v34 = v22;
  sub_2510B3968();
  sub_251068F50();
  sub_2510B4E48(&qword_269B1BEA0, (void (*)(uint64_t))sub_2510B3968);
  uint64_t v23 = v27;
  sub_2510BEEA8();
  swift_release();
  sub_2510B4E48(&qword_269B1BED0, (void (*)(uint64_t))sub_2510B45BC);
  uint64_t v24 = v32;
  uint64_t v25 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v24);
  return v25;
}

void sub_2510B45BC()
{
  if (!qword_269B1BEC8)
  {
    sub_2510B3968();
    sub_251068F50();
    sub_2510B4E48(&qword_269B1BEA0, (void (*)(uint64_t))sub_2510B3968);
    unint64_t v0 = sub_2510BECB8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BEC8);
    }
  }
}

void sub_2510B4668(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_2510BF808();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_2510B46C0@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  v12[1] = *(id *)MEMORY[0x263EF8340];
  unsigned int v3 = *a1;
  if (v3)
  {
    v12[0] = 0;
    id v4 = objc_msgSend(v3, sel_dateValue_, v12);
    id v5 = v12[0];
    if (v4)
    {
      uint64_t v6 = v4;
      sub_2510BE8F8();
      id v7 = v5;

      uint64_t v8 = sub_2510BE908();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, 0, 1, v8);
    }
    else
    {
      id v11 = v12[0];
      sub_2510BE838();

      return swift_willThrow();
    }
  }
  else
  {
    uint64_t v10 = sub_2510BE908();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a2, 1, 1, v10);
  }
}

uint64_t HKDeviceKeyValueStore.mostRecentNumber(for:)(uint64_t a1, uint64_t a2)
{
  sub_2510B35D0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v28 = v5;
  uint64_t v29 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510B37CC();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v30 = v9;
  uint64_t v31 = v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510B4CA8();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v32 = v13;
  uint64_t v33 = v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v27 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v2;
  void v16[3] = a1;
  v16[4] = a2;
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_2510B3688(0, &qword_269B1BE58, &qword_269B1BE60, MEMORY[0x263F8D8F0]);
  sub_2510B377C(&qword_269B1BE68, &qword_269B1BE58, &qword_269B1BE60, v17);
  id v18 = v2;
  swift_bridgeObjectRetain();
  sub_2510BEE38();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  sub_2510B3714(0, &qword_269B1BE78, &qword_269B1BE80, 0x263F0A2E8, v17);
  sub_2510B4E48(&qword_269B1BE88, (void (*)(uint64_t))sub_2510B35D0);
  swift_bridgeObjectRetain();
  uint64_t v20 = v28;
  sub_2510BEE78();
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v20);
  sub_2510B4E48(&qword_269B1BEA8, (void (*)(uint64_t))sub_2510B37CC);
  uint64_t v21 = v30;
  uint64_t v22 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v21);
  uint64_t v34 = v22;
  sub_2510B3968();
  sub_2510B3714(0, &qword_269B1B4E0, (unint64_t *)&qword_26B212178, 0x263F08A18, v17);
  sub_2510B4E48(&qword_269B1BEA0, (void (*)(uint64_t))sub_2510B3968);
  uint64_t v23 = v27;
  sub_2510BEEA8();
  swift_release();
  sub_2510B4E48(&qword_269B1BEE0, (void (*)(uint64_t))sub_2510B4CA8);
  uint64_t v24 = v32;
  uint64_t v25 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v23, v24);
  return v25;
}

void sub_2510B4CA8()
{
  if (!qword_269B1BED8)
  {
    sub_2510B3968();
    sub_2510B3714(255, &qword_269B1B4E0, (unint64_t *)&qword_26B212178, 0x263F08A18, MEMORY[0x263F8D8F0]);
    sub_2510B4E48(&qword_269B1BEA0, (void (*)(uint64_t))sub_2510B3968);
    unint64_t v0 = sub_2510BECB8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BED8);
    }
  }
}

id sub_2510B4D84@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  v7[1] = *(id *)MEMORY[0x263EF8340];
  id result = *a1;
  if (result)
  {
    v7[0] = 0;
    id v4 = objc_msgSend(result, sel_numberValue_, v7);
    id v5 = v7[0];
    if (v4)
    {
      *a2 = v4;
      return v5;
    }
    else
    {
      id v6 = v7[0];
      sub_2510BE838();

      return (id)swift_willThrow();
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t sub_2510B4E48(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t HKDeviceKeyValueStore.mostRecentString(for:)(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = v2;
  sub_2510B35D0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  uint64_t v31 = v7;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510B37CC();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v32 = v10;
  uint64_t v33 = v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2510B38A4(0, &qword_269B1BEE8, (unint64_t *)&qword_26B212E20, MEMORY[0x263F8D310], MEMORY[0x263EFDC00]);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v34 = v14;
  uint64_t v35 = v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v29 = (char *)&v29 - v16;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = v3;
  v17[3] = a1;
  v17[4] = a2;
  id v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_2510B3688(0, &qword_269B1BE58, &qword_269B1BE60, MEMORY[0x263F8D8F0]);
  sub_2510B377C(&qword_269B1BE68, &qword_269B1BE58, &qword_269B1BE60, v18);
  id v19 = v3;
  swift_bridgeObjectRetain();
  sub_2510BEE38();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  sub_2510B3714(0, &qword_269B1BE78, &qword_269B1BE80, 0x263F0A2E8, v18);
  sub_2510B4E48(&qword_269B1BE88, (void (*)(uint64_t))sub_2510B35D0);
  swift_bridgeObjectRetain();
  uint64_t v21 = v30;
  sub_2510BEE78();
  swift_release();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v21);
  sub_2510B4E48(&qword_269B1BEA8, (void (*)(uint64_t))sub_2510B37CC);
  uint64_t v22 = v32;
  uint64_t v23 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v22);
  uint64_t v36 = v23;
  sub_2510B3968();
  uint64_t v24 = MEMORY[0x263F8D310];
  sub_2510725FC(0, (unint64_t *)&qword_26B212E20);
  sub_2510B4E48(&qword_269B1BEA0, (void (*)(uint64_t))sub_2510B3968);
  uint64_t v25 = v29;
  sub_2510BEEA8();
  swift_release();
  sub_2510B3B00(&qword_269B1BEF0, &qword_269B1BEE8, (unint64_t *)&qword_26B212E20, v24);
  uint64_t v26 = v34;
  uint64_t v27 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v26);
  return v27;
}

void sub_2510B5350(void **a1@<X0>, uint64_t *a2@<X8>)
{
  v12[1] = *(id *)MEMORY[0x263EF8340];
  unsigned int v3 = *a1;
  if (v3)
  {
    v12[0] = 0;
    id v4 = objc_msgSend(v3, sel_stringValue_, v12);
    id v5 = v12[0];
    if (v4)
    {
      uint64_t v6 = v4;
      uint64_t v7 = sub_2510BF258();
      uint64_t v9 = v8;
      id v10 = v5;

      *a2 = v7;
      a2[1] = v9;
    }
    else
    {
      id v11 = v12[0];
      sub_2510BE838();

      swift_willThrow();
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

uint64_t HKDeviceKeyValueStore.setValue<A>(_:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v113 = a2;
  uint64_t v114 = a3;
  sub_2510B775C(0, &qword_269B1BEF8, MEMORY[0x263EFDDE8]);
  uint64_t v103 = *(void *)(v6 - 8);
  uint64_t v104 = v6;
  MEMORY[0x270FA5388](v6);
  id v102 = (char *)&v96 - v7;
  sub_251068F50();
  uint64_t v98 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v98 + 64);
  uint64_t v10 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v99 = (uint64_t)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  v100 = (char *)&v96 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v107 = (char *)&v96 - v13;
  uint64_t v14 = sub_2510BE908();
  uint64_t v108 = *(void *)(v14 - 8);
  uint64_t v109 = v14;
  MEMORY[0x270FA5388](v14);
  unint64_t v101 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_2510BF808();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v105 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v106 = (char *)&v96 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v96 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  uint64_t v27 = (char *)&v96 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v96 - v28;
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 48);
  if (v30((char *)a1, 1, a4) != 1)
  {
    uint64_t v34 = *(void (**)(void))(v17 + 16);
    uint64_t v97 = a1;
    uint64_t v110 = v34;
    uint64_t v111 = v17 + 16;
    ((void (*)(char *, uint64_t, uint64_t))v34)(v29, a1, v16);
    if (v30(v29, 1, a4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v29, v16);
    }
    else if (swift_dynamicCast())
    {
      uint64_t v36 = v115;
      unint64_t v35 = v116;
      char v37 = (void *)swift_allocObject();
      BOOL v39 = v112;
      uint64_t v38 = v113;
      v37[2] = v112;
      v37[3] = v36;
      v37[4] = v35;
      v37[5] = v38;
      v37[6] = v114;
      unint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
      sub_2510B775C(0, (unint64_t *)&qword_26B211930, MEMORY[0x263EFDE20]);
      swift_allocObject();
      id v41 = v39;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v115 = sub_2510BEE28();
      sub_2510B743C(&qword_26B211928, (unint64_t *)&qword_26B211930, v40);
      uint64_t v42 = sub_2510BEE58();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    uint64_t v43 = v97;
    ((void (*)(char *, uint64_t, uint64_t))v110)(v27, v97, v16);
    if (v30(v27, 1, a4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v27, v16);
    }
    else
    {
      sub_251065E84(0, (unint64_t *)&qword_26B212178);
      if (swift_dynamicCast())
      {
        unint64_t v44 = (void *)v115;
        uint64_t v45 = (void *)swift_allocObject();
        uint64_t v47 = v112;
        uint64_t v46 = v113;
        v45[2] = v112;
        v45[3] = v44;
        uint64_t v48 = v114;
        v45[4] = v46;
        v45[5] = v48;
        uint64_t v49 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
        sub_2510B775C(0, (unint64_t *)&qword_26B211930, MEMORY[0x263EFDE20]);
        swift_allocObject();
        id v50 = v44;
        id v51 = v47;
        swift_bridgeObjectRetain();
        id v52 = v50;
        uint64_t v115 = sub_2510BEE28();
        sub_2510B743C(&qword_26B211928, (unint64_t *)&qword_26B211930, v49);
        uint64_t v53 = sub_2510BEE58();

        swift_release();
        uint64_t v115 = v53;
        uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
        sub_2510B775C(0, &qword_269B1BC98, MEMORY[0x263EFDCF0]);
        sub_2510B743C((unint64_t *)&qword_269B1BCA0, &qword_269B1BC98, v54);
        uint64_t v55 = sub_2510BEE58();
        swift_release();

        return v55;
      }
    }
    uint64_t v56 = v109;
    ((void (*)(char *, uint64_t, uint64_t))v110)(v24, v43, v16);
    if (v30(v24, 1, a4) == 1)
    {
      uint64_t v109 = v17;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, v16);
LABEL_19:
      char v67 = v106;
      v110();
      unsigned int v68 = v30(v67, 1, a4);
      uint64_t v69 = v108;
      if (v68 == 1)
      {
        (*(void (**)(char *, uint64_t))(v109 + 8))(v67, v16);
        uint64_t v70 = (uint64_t)v107;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56))(v107, 1, 1, v56);
      }
      else
      {
        uint64_t v70 = (uint64_t)v107;
        int v71 = swift_dynamicCast();
        uint64_t v106 = *(char **)(v69 + 56);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v106)(v70, v71 ^ 1u, 1, v56);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v70, 1, v56) != 1)
        {
          uint64_t v84 = v101;
          (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v101, v70, v56);
          uint64_t v85 = (uint64_t)v100;
          (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v100, v84, v56);
          ((void (*)(uint64_t, void, uint64_t, uint64_t))v106)(v85, 0, 1, v56);
          uint64_t v86 = v99;
          sub_2510B7A0C(v85, v99);
          unint64_t v87 = (*(unsigned __int8 *)(v98 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
          uint64_t v88 = swift_allocObject();
          unint64_t v89 = v112;
          *(void *)(v88 + 16) = v112;
          sub_2510B7A74(v86, v88 + v87);
          v90 = (uint64_t *)(v88 + ((v9 + v87 + 7) & 0xFFFFFFFFFFFFFFF8));
          uint64_t v91 = v114;
          uint64_t *v90 = v113;
          v90[1] = v91;
          uint64_t v92 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
          sub_2510B775C(0, (unint64_t *)&qword_26B211930, MEMORY[0x263EFDE20]);
          swift_allocObject();
          id v93 = v89;
          swift_bridgeObjectRetain();
          uint64_t v115 = sub_2510BEE28();
          sub_2510B743C(&qword_26B211928, (unint64_t *)&qword_26B211930, v92);
          uint64_t v94 = sub_2510BEE58();
          swift_release();
          sub_2510B8180(v85, (uint64_t (*)(void))sub_251068F50);
          uint64_t v115 = v94;
          uint64_t v95 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
          sub_2510B775C(0, &qword_269B1BC98, MEMORY[0x263EFDCF0]);
          sub_2510B743C((unint64_t *)&qword_269B1BCA0, &qword_269B1BC98, v95);
          uint64_t v55 = sub_2510BEE58();
          swift_release();
          (*(void (**)(char *, uint64_t))(v69 + 8))(v101, v56);
          return v55;
        }
      }
      sub_2510B8180(v70, (uint64_t (*)(void))sub_251068F50);
      BOOL v72 = v105;
      ((void (*)(char *, uint64_t, uint64_t))v110)(v105, v97, v16);
      if (v30(v72, 1, a4) == 1)
      {
        (*(void (**)(char *, uint64_t))(v109 + 8))(v72, v16);
LABEL_26:
        sub_2510B73E8();
        uint64_t v115 = swift_allocError();
        sub_251067550();
        uint64_t v82 = v102;
        sub_2510BEDE8();
        sub_2510B743C(&qword_269B1BF08, &qword_269B1BEF8, MEMORY[0x263EFDDE8]);
        uint64_t v83 = v104;
        uint64_t v55 = sub_2510BEE58();
        (*(void (**)(char *, uint64_t))(v103 + 8))(v82, v83);
        return v55;
      }
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_26;
      }
      uint64_t v73 = v115;
      unint64_t v74 = v116;
      id v75 = (void *)swift_allocObject();
      uint64_t v77 = v112;
      uint64_t v76 = v113;
      v75[2] = v112;
      v75[3] = v73;
      v75[4] = v74;
      v75[5] = v76;
      v75[6] = v114;
      uint64_t v78 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
      sub_2510B775C(0, (unint64_t *)&qword_26B211930, MEMORY[0x263EFDE20]);
      swift_allocObject();
      sub_251073A9C(v73, v74);
      id v79 = v77;
      swift_bridgeObjectRetain();
      sub_251073A9C(v73, v74);
      uint64_t v115 = sub_2510BEE28();
      sub_2510B743C(&qword_26B211928, (unint64_t *)&qword_26B211930, v78);
      uint64_t v80 = sub_2510BEE58();
      swift_release();
      sub_251073A18(v73, v74);
      uint64_t v115 = v80;
      uint64_t v81 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
      sub_2510B775C(0, &qword_269B1BC98, MEMORY[0x263EFDCF0]);
      sub_2510B743C((unint64_t *)&qword_269B1BCA0, &qword_269B1BC98, v81);
      uint64_t v55 = sub_2510BEE58();
      sub_251073A18(v73, v74);
      swift_release();
      return v55;
    }
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v109 = v17;
      goto LABEL_19;
    }
    id v57 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, v115);
    uint64_t v58 = (void *)swift_allocObject();
    uint64_t v60 = v112;
    uint64_t v59 = v113;
    v58[2] = v112;
    v58[3] = v57;
    uint64_t v61 = v114;
    v58[4] = v59;
    v58[5] = v61;
    uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
    sub_2510B775C(0, (unint64_t *)&qword_26B211930, MEMORY[0x263EFDE20]);
    swift_allocObject();
    id v63 = v57;
    id v64 = v60;
    swift_bridgeObjectRetain();
    id v65 = v63;
    uint64_t v115 = sub_2510BEE28();
    sub_2510B743C(&qword_26B211928, (unint64_t *)&qword_26B211930, v62);
    uint64_t v42 = sub_2510BEE58();

LABEL_17:
    swift_release();
    uint64_t v115 = v42;
    uint64_t v66 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_2510B775C(0, &qword_269B1BC98, MEMORY[0x263EFDCF0]);
    sub_2510B743C((unint64_t *)&qword_269B1BCA0, &qword_269B1BC98, v66);
    uint64_t v55 = sub_2510BEE58();
    swift_release();
    return v55;
  }
  uint64_t v31 = v113;
  uint64_t v32 = v114;
  return sub_2510B6390(a1, v31, v32, v16);
}

uint64_t sub_2510B6390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v74 = a3;
  uint64_t v72 = a2;
  sub_2510B775C(0, &qword_269B1BEF8, MEMORY[0x263EFDDE8]);
  uint64_t v64 = *(void *)(v6 - 8);
  uint64_t v65 = v6;
  MEMORY[0x270FA5388](v6);
  id v63 = (char *)&v63 - v7;
  sub_251068F50();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v69 = v8;
  uint64_t v70 = v9;
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v66 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  char v67 = (char *)&v63 - v12;
  sub_2510B8160(0);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a4 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v14);
  unsigned int v68 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v63 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  uint64_t v25 = (char *)&v63 - v24;
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v28 = (char *)&v63 - v27;
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v71 = a1;
  v29((char *)&v63 - v30, a1, a4);
  sub_2510725FC(0, (unint64_t *)&qword_26B212E20);
  if (swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    uint64_t v31 = (void *)swift_allocObject();
    uint64_t v32 = v72;
    uint64_t v33 = v73;
    v31[2] = v73;
    v31[3] = 0;
    v31[4] = 0;
    v31[5] = v32;
    v31[6] = v74;
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
    sub_2510B775C(0, (unint64_t *)&qword_26B211930, MEMORY[0x263EFDE20]);
    swift_allocObject();
    id v35 = v33;
    swift_bridgeObjectRetain();
  }
  else
  {
    char v37 = v73;
    uint64_t v36 = v74;
    v29(v28, v71, a4);
    sub_2510B3714(0, &qword_269B1B4E0, (unint64_t *)&qword_26B212178, 0x263F08A18, MEMORY[0x263F8D8F0]);
    if (swift_dynamicCast())
    {

      uint64_t v38 = (void *)swift_allocObject();
      _OWORD v38[2] = v37;
      v38[3] = 0;
      v38[4] = v72;
      v38[5] = v36;
      uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
      sub_2510B775C(0, (unint64_t *)&qword_26B211930, MEMORY[0x263EFDE20]);
      swift_allocObject();
      id v39 = v37;
      swift_bridgeObjectRetain();
    }
    else
    {
      v29(v25, v71, a4);
      sub_2510725FC(0, &qword_26B211990);
      if (swift_dynamicCast())
      {
        unint64_t v40 = (void *)swift_allocObject();
        v40[2] = v37;
        v40[3] = 0;
        v40[4] = v72;
        v40[5] = v36;
        uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
        sub_2510B775C(0, (unint64_t *)&qword_26B211930, MEMORY[0x263EFDE20]);
        swift_allocObject();
        id v41 = v37;
        swift_bridgeObjectRetain();
      }
      else
      {
        v29(v22, v71, a4);
        uint64_t v42 = v69;
        int v43 = swift_dynamicCast();
        uint64_t v44 = v70;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v16, v43 ^ 1u, 1, v42);
        LODWORD(v42) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48))(v16, 1, v42);
        sub_2510B8180((uint64_t)v16, (uint64_t (*)(void))sub_2510B8160);
        if (!v42)
        {
          uint64_t v53 = sub_2510BE908();
          uint64_t v54 = (uint64_t)v67;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v67, 1, 1, v53);
          uint64_t v55 = v66;
          sub_2510B7A0C(v54, v66);
          unint64_t v56 = (*(unsigned __int8 *)(v44 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
          uint64_t v57 = swift_allocObject();
          *(void *)(v57 + 16) = v37;
          sub_2510B7A74(v55, v57 + v56);
          uint64_t v58 = (void *)(v57 + ((v10 + v56 + 7) & 0xFFFFFFFFFFFFFFF8));
          *uint64_t v58 = v72;
          v58[1] = v36;
          uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
          sub_2510B775C(0, (unint64_t *)&qword_26B211930, MEMORY[0x263EFDE20]);
          swift_allocObject();
          id v60 = v37;
          swift_bridgeObjectRetain();
          id v75 = (id)sub_2510BEE28();
          sub_2510B743C(&qword_26B211928, (unint64_t *)&qword_26B211930, v59);
          uint64_t v49 = (void *)sub_2510BEE58();
          swift_release();
          sub_2510B8180(v54, (uint64_t (*)(void))sub_251068F50);
          goto LABEL_11;
        }
        v29(v68, v71, a4);
        sub_2510725FC(0, &qword_26B2121A8);
        char v45 = swift_dynamicCast();
        uint64_t v46 = v72;
        if ((v45 & 1) == 0)
        {
          sub_2510B73E8();
          id v75 = (id)swift_allocError();
          sub_251067550();
          uint64_t v61 = v63;
          sub_2510BEDE8();
          sub_2510B743C(&qword_269B1BF08, &qword_269B1BEF8, MEMORY[0x263EFDDE8]);
          uint64_t v62 = v65;
          uint64_t v51 = sub_2510BEE58();
          (*(void (**)(char *, uint64_t))(v64 + 8))(v61, v62);
          return v51;
        }
        sub_251075730((uint64_t)v75, v76);
        uint64_t v47 = swift_allocObject();
        *(void *)(v47 + 16) = v37;
        *(_OWORD *)(v47 + 24) = xmmword_2510C4790;
        *(void *)(v47 + 40) = v46;
        *(void *)(v47 + 48) = v36;
        uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
        sub_2510B775C(0, (unint64_t *)&qword_26B211930, MEMORY[0x263EFDE20]);
        swift_allocObject();
        id v48 = v37;
        swift_bridgeObjectRetain();
      }
    }
  }
  id v75 = (id)sub_2510BEE28();
  sub_2510B743C(&qword_26B211928, (unint64_t *)&qword_26B211930, v34);
  uint64_t v49 = (void *)sub_2510BEE58();
  swift_release();
LABEL_11:
  id v75 = v49;
  id v50 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
  sub_2510B775C(0, &qword_269B1BC98, MEMORY[0x263EFDCF0]);
  sub_2510B743C((unint64_t *)&qword_269B1BCA0, &qword_269B1BC98, v50);
  uint64_t v51 = sub_2510BEE58();
  swift_release();
  return v51;
}

uint64_t HKDeviceKeyValueStore.setString(_:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_allocObject();
  id v9[2] = v4;
  _OWORD v9[3] = a1;
  void v9[4] = a2;
  void v9[5] = a3;
  void v9[6] = a4;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
  sub_2510B775C(0, (unint64_t *)&qword_26B211930, MEMORY[0x263EFDE20]);
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v11 = v4;
  sub_2510BEE28();
  sub_2510B743C(&qword_26B211928, (unint64_t *)&qword_26B211930, v10);
  uint64_t v12 = sub_2510BEE58();
  swift_release();
  return v12;
}

uint64_t HKDeviceKeyValueStore.setNumber(_:key:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_allocObject();
  id v7[2] = v3;
  v7[3] = a1;
  void v7[4] = a2;
  void v7[5] = a3;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
  sub_2510B775C(0, (unint64_t *)&qword_26B211930, MEMORY[0x263EFDE20]);
  swift_allocObject();
  id v9 = a1;
  swift_bridgeObjectRetain();
  id v10 = v3;
  sub_2510BEE28();
  sub_2510B743C(&qword_26B211928, (unint64_t *)&qword_26B211930, v8);
  uint64_t v11 = sub_2510BEE58();
  swift_release();
  return v11;
}

uint64_t HKDeviceKeyValueStore.setBool(_:key:)(char a1, uint64_t a2, uint64_t a3)
{
  if (a1 == 2)
  {
    uint64_t v7 = (void *)swift_allocObject();
    id v7[2] = v3;
    v7[3] = 0;
    void v7[4] = a2;
    void v7[5] = a3;
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
    sub_2510B775C(0, (unint64_t *)&qword_26B211930, MEMORY[0x263EFDE20]);
    swift_allocObject();
    id v9 = v3;
    swift_bridgeObjectRetain();
    sub_2510BEE28();
    sub_2510B743C(&qword_26B211928, (unint64_t *)&qword_26B211930, v8);
    uint64_t v10 = sub_2510BEE58();
  }
  else
  {
    id v11 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a1 & 1);
    uint64_t v12 = (void *)swift_allocObject();
    id v12[2] = v3;
    uint64_t v12[3] = v11;
    void v12[4] = a2;
    v12[5] = a3;
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
    sub_2510B775C(0, (unint64_t *)&qword_26B211930, MEMORY[0x263EFDE20]);
    swift_allocObject();
    id v14 = v11;
    id v15 = v3;
    swift_bridgeObjectRetain();
    sub_2510BEE28();
    sub_2510B743C(&qword_26B211928, (unint64_t *)&qword_26B211930, v13);
    uint64_t v10 = sub_2510BEE58();
  }
  swift_release();
  return v10;
}

uint64_t HKDeviceKeyValueStore.setDate(_:key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_251068F50();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7 - 8);
  sub_2510B7A0C(a1, (uint64_t)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v3;
  sub_2510B7A74((uint64_t)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10);
  uint64_t v12 = (void *)(v11 + ((v9 + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v12 = a2;
  v12[1] = a3;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
  sub_2510B775C(0, (unint64_t *)&qword_26B211930, MEMORY[0x263EFDE20]);
  swift_allocObject();
  id v14 = v3;
  swift_bridgeObjectRetain();
  v17[1] = sub_2510BEE28();
  sub_2510B743C(&qword_26B211928, (unint64_t *)&qword_26B211930, v13);
  uint64_t v15 = sub_2510BEE58();
  swift_release();
  return v15;
}

unint64_t sub_2510B73E8()
{
  unint64_t result = qword_269B1BF00;
  if (!qword_269B1BF00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BF00);
  }
  return result;
}

uint64_t sub_2510B743C(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_2510B775C(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t HKDeviceKeyValueStore.setData(_:key:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_allocObject();
  id v9[2] = v4;
  _OWORD v9[3] = a1;
  void v9[4] = a2;
  void v9[5] = a3;
  void v9[6] = a4;
  unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
  sub_2510B775C(0, (unint64_t *)&qword_26B211930, MEMORY[0x263EFDE20]);
  swift_allocObject();
  id v11 = v4;
  sub_251073A88(a1, a2);
  swift_bridgeObjectRetain();
  sub_2510BEE28();
  sub_2510B743C(&qword_26B211928, (unint64_t *)&qword_26B211930, v10);
  uint64_t v12 = sub_2510BEE58();
  swift_release();
  return v12;
}

void sub_2510B75C0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  swift_retain();
  if (a5 >> 60 == 15) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = (void *)sub_2510BE888();
  }
  id v11 = (void *)sub_2510BF228();
  uint64_t v12 = (void *)swift_allocObject();
  id v12[2] = sub_2510674DC;
  uint64_t v12[3] = v9;
  void v12[4] = a3;
  v15[4] = sub_251075544;
  v15[5] = v12;
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 1107296256;
  void v15[2] = sub_251055F18;
  _OWORD v15[3] = &block_descriptor_118;
  uint64_t v13 = _Block_copy(v15);
  id v14 = a3;
  swift_release();
  objc_msgSend(v14, sel_setData_forKey_completion_, v10, v11, v13);
  _Block_release(v13);
}

uint64_t sub_2510B7744(uint64_t a1, uint64_t a2)
{
  return sub_2510B82DC(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_2510B75C0);
}

void sub_2510B775C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    unint64_t v6 = sub_251067550();
    unint64_t v7 = a3(a1, MEMORY[0x263F8EE60] + 8, v6, MEMORY[0x263F8E4E0]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_2510B77D0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  sub_251068F50();
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  sub_2510B7A0C(a4, (uint64_t)v10);
  uint64_t v12 = sub_2510BE908();
  uint64_t v13 = *(void *)(v12 - 8);
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12);
  swift_retain();
  id v14 = 0;
  if (a1 != 1)
  {
    id v14 = (void *)sub_2510BE8D8();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
  }
  uint64_t v15 = (void *)sub_2510BF228();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = sub_2510674DC;
  void v16[3] = v11;
  v16[4] = a3;
  aBlock[4] = sub_251075544;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_251055F18;
  void aBlock[3] = &block_descriptor_108;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = a3;
  swift_release();
  objc_msgSend(v18, sel_setDate_forKey_completion_, v14, v15, v17);
  _Block_release(v17);
}

uint64_t sub_2510B7A0C(uint64_t a1, uint64_t a2)
{
  sub_251068F50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2510B7A74(uint64_t a1, uint64_t a2)
{
  sub_251068F50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_2510B7ADC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  swift_retain();
  uint64_t v9 = (void *)sub_2510BF228();
  unint64_t v10 = (void *)swift_allocObject();
  void v10[2] = sub_2510674DC;
  v10[3] = v8;
  v10[4] = a3;
  v13[4] = sub_251075544;
  void v13[5] = v10;
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1107296256;
  void v13[2] = sub_251055F18;
  void v13[3] = &block_descriptor_98;
  uint64_t v11 = _Block_copy(v13);
  id v12 = a3;
  swift_release();
  objc_msgSend(v12, sel_setNumber_forKey_completion_, a4, v9, v11);
  _Block_release(v11);
}

void sub_2510B7C34(uint64_t a1, uint64_t a2)
{
  sub_2510B7ADC(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

void sub_2510B7C44(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  swift_retain();
  if (a5) {
    a5 = (void *)sub_2510BF228();
  }
  unint64_t v10 = (void *)sub_2510BF228();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = sub_2510674DC;
  v11[3] = v9;
  v11[4] = a3;
  void v14[4] = sub_251075544;
  v14[5] = v11;
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 1107296256;
  v14[2] = sub_251055F18;
  void v14[3] = &block_descriptor_20;
  id v12 = _Block_copy(v14);
  id v13 = a3;
  swift_release();
  objc_msgSend(v13, sel_setString_forKey_completion_, a5, v10, v12);
  _Block_release(v12);
}

uint64_t sub_2510B7DC4(uint64_t a1, uint64_t a2)
{
  return sub_2510B82DC(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))sub_2510B7C44);
}

uint64_t objectdestroy_43Tm()
{
  sub_251068F50();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);

  uint64_t v5 = sub_2510BE908();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

void sub_2510B7F34(uint64_t a1, uint64_t a2)
{
  sub_251068F50();
  uint64_t v6 = *(void **)(v2 + 16);
  uint64_t v7 = v2
     + ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80));
  sub_2510B77D0(a1, a2, v6, v7);
}

unsigned char *_s13KeyValueErrorOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2510B8088);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s13KeyValueErrorOMa()
{
  return &_s13KeyValueErrorON;
}

unint64_t sub_2510B80C4()
{
  unint64_t result = qword_269B1BF10;
  if (!qword_269B1BF10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BF10);
  }
  return result;
}

uint64_t sub_2510B8120()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_2510B8160(uint64_t a1)
{
}

uint64_t sub_2510B8180(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t objectdestroy_40Tm()
{
  unint64_t v1 = *(void *)(v0 + 32);
  if (v1 >> 60 != 15) {
    sub_251073A18(*(void *)(v0 + 24), v1);
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t objectdestroy_46Tm()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t objectdestroy_53Tm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_2510B82DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

void *sub_2510B82F4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = a1;
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_2510BFAF8();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      uint64_t v22 = v4;
      unint64_t v23 = v7;
      unint64_t v24 = v7 & 0xC000000000000001;
      uint64_t v4 = 4;
      do
      {
        uint64_t v9 = v4 - 4;
        if (v24)
        {
          id v10 = (id)MEMORY[0x2533934D0](v4 - 4, v7);
          uint64_t v11 = v4 - 3;
          if (__OFADD__(v9, 1)) {
            goto LABEL_19;
          }
        }
        else
        {
          id v10 = *(id *)(v7 + 8 * v4);
          uint64_t v11 = v4 - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        uint64_t v12 = v8;
        id v13 = v10;
        uint64_t v14 = a3;
        id v15 = objc_msgSend(v10, sel_key, v22);
        uint64_t v16 = sub_2510BF258();
        uint64_t v18 = v17;

        a3 = v14;
        BOOL v19 = v16 == a2 && v18 == v14;
        if (v19)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v13;
        }
        char v20 = sub_2510BFC28();
        swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_18;
        }

        ++v4;
        uint64_t v8 = v12;
        BOOL v19 = v11 == v12;
        unint64_t v7 = v23;
      }
      while (!v19);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

void sub_2510B84A0(uint64_t a1, uint64_t a2)
{
  sub_2510B2EA0(a1, a2, *(void **)(v2 + 16));
}

void sub_2510B84AC(int a1, void *a2)
{
  sub_2510B2FD4(a1, a2, *(void (**)(void))(v2 + 16));
}

void sub_2510B84B8(uint64_t a1, uint64_t a2)
{
  sub_2510B2B4C(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

void sub_2510B84C4(void *a1, void *a2)
{
  sub_2510B2C90(a1, a2, *(void (**)(id, uint64_t))(v2 + 16));
}

void *static HKSharingAuthorizationIdentifier.clinicalSharingIdentifiers.getter()
{
  uint64_t v0 = (void *)*MEMORY[0x263F09BC8];
  id v149 = (id)*MEMORY[0x263F09BC0];
  v150 = v0;
  unint64_t v1 = (void *)*MEMORY[0x263F09C40];
  id v151 = (id)*MEMORY[0x263F09C38];
  uint64_t v152 = v1;
  uint64_t v2 = (void *)*MEMORY[0x263F09E80];
  id v153 = (id)*MEMORY[0x263F09E38];
  v154 = v2;
  uint64_t v3 = (void *)*MEMORY[0x263F09EF8];
  id v155 = (id)*MEMORY[0x263F09EB0];
  v156 = v3;
  uint64_t v4 = (void *)*MEMORY[0x263F09F20];
  id v157 = (id)*MEMORY[0x263F09C18];
  v158 = v4;
  uint64_t v105 = (void *)*MEMORY[0x263F09F50];
  id v159 = (id)*MEMORY[0x263F09F48];
  v160 = v105;
  uint64_t v107 = (void *)*MEMORY[0x263F09EE8];
  id v161 = (id)*MEMORY[0x263F09F38];
  uint64_t v162 = v107;
  uint64_t v110 = (void *)*MEMORY[0x263F09EE0];
  id v163 = (id)*MEMORY[0x263F09EF0];
  v164 = v110;
  v112 = (void *)*MEMORY[0x263F09BF0];
  id v165 = (id)*MEMORY[0x263F09F30];
  v166 = v112;
  v148[0] = MEMORY[0x263F8EE78];
  id v5 = v149;
  id v6 = v0;
  id v7 = v151;
  id v8 = v1;
  id v9 = v153;
  id v10 = v2;
  id v11 = v155;
  id v12 = v3;
  id v13 = v157;
  id v14 = v4;
  id v15 = v159;
  id v16 = v105;
  id v17 = v161;
  id v18 = v107;
  id v19 = v163;
  id v20 = v110;
  id v21 = v165;
  id v22 = v112;
  sub_2510BFA08();
  sub_251065E84(0, &qword_269B1BBE0);
  for (uint64_t i = 4; i != 22; ++i)
  {
    MEMORY[0x253393230]((id)v148[i + 1]);
    sub_2510BF9D8();
    sub_2510BFA18();
    sub_2510BFA28();
    sub_2510BF9E8();
  }
  uint64_t v113 = v148[0];
  type metadata accessor for HKQuantityTypeIdentifier(0);
  swift_arrayDestroy();
  unint64_t v24 = (void *)*MEMORY[0x263F09230];
  id v115 = (id)*MEMORY[0x263F09228];
  unint64_t v116 = v24;
  uint64_t v25 = (void *)*MEMORY[0x263F09250];
  id v117 = (id)*MEMORY[0x263F09238];
  uint64_t v118 = v25;
  uint64_t v26 = (void *)*MEMORY[0x263F09270];
  id v119 = (id)*MEMORY[0x263F09268];
  v120 = v26;
  uint64_t v27 = (void *)*MEMORY[0x263F09290];
  id v121 = (id)*MEMORY[0x263F09288];
  uint64_t v122 = v27;
  uint64_t v28 = (void *)*MEMORY[0x263F092A8];
  id v123 = (id)*MEMORY[0x263F09298];
  v124 = v28;
  uint64_t v97 = (void *)*MEMORY[0x263F092D0];
  id v125 = (id)*MEMORY[0x263F092B8];
  id v96 = v125;
  uint64_t v126 = v97;
  uint64_t v98 = (void *)*MEMORY[0x263F092F8];
  id v127 = (id)*MEMORY[0x263F092E8];
  v128 = v98;
  uint64_t v99 = (void *)*MEMORY[0x263F09320];
  id v129 = (id)*MEMORY[0x263F09318];
  uint64_t v130 = v99;
  v100 = (void *)*MEMORY[0x263F09338];
  id v131 = (id)*MEMORY[0x263F09330];
  v132 = v100;
  unint64_t v101 = (void *)*MEMORY[0x263F09368];
  id v133 = (id)*MEMORY[0x263F09348];
  v134 = v101;
  id v102 = (void *)*MEMORY[0x263F09378];
  id v135 = (id)*MEMORY[0x263F09370];
  uint64_t v136 = v102;
  uint64_t v103 = (void *)*MEMORY[0x263F09390];
  id v137 = (id)*MEMORY[0x263F09380];
  unint64_t v138 = v103;
  uint64_t v104 = (void *)*MEMORY[0x263F093A0];
  id v139 = (id)*MEMORY[0x263F09398];
  v140 = v104;
  uint64_t v106 = (void *)*MEMORY[0x263F093C0];
  id v141 = (id)*MEMORY[0x263F093B0];
  uint64_t v142 = v106;
  uint64_t v108 = (void *)*MEMORY[0x263F09410];
  id v143 = (id)*MEMORY[0x263F093F0];
  unint64_t v144 = v108;
  uint64_t v109 = (void *)*MEMORY[0x263F09438];
  id v145 = (id)*MEMORY[0x263F09420];
  uint64_t v111 = (void *)*MEMORY[0x263F09248];
  uint64_t v146 = v109;
  v147 = v111;
  v148[0] = MEMORY[0x263F8EE78];
  id v29 = v115;
  id v30 = v24;
  id v31 = v117;
  id v32 = v25;
  id v33 = v119;
  id v34 = v26;
  id v35 = v121;
  id v36 = v27;
  id v37 = v123;
  id v38 = v28;
  id v39 = v125;
  id v40 = v97;
  id v41 = v127;
  id v42 = v98;
  id v43 = v129;
  id v44 = v99;
  id v45 = v131;
  id v46 = v100;
  id v47 = v133;
  id v48 = v101;
  id v49 = v135;
  id v50 = v102;
  id v51 = v137;
  id v52 = v103;
  id v53 = v139;
  id v54 = v104;
  id v55 = v141;
  id v56 = v106;
  id v57 = v143;
  id v58 = v108;
  id v59 = v145;
  id v60 = v109;
  id v61 = v111;
  sub_2510BFA08();
  sub_251065E84(0, &qword_269B1BBE8);
  for (uint64_t j = 32; j != 296; j += 8)
  {
    MEMORY[0x253393210](*(id *)&v114[j]);
    sub_2510BF9D8();
    sub_2510BFA18();
    sub_2510BFA28();
    sub_2510BF9E8();
  }
  unint64_t v63 = v148[0];
  type metadata accessor for HKCategoryTypeIdentifier(0);
  swift_arrayDestroy();
  sub_2510675D4();
  uint64_t v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_2510C4860;
  sub_251065E84(0, &qword_269B1BF20);
  *(void *)(v64 + 32) = MEMORY[0x253393220]((id)*MEMORY[0x263F09488]);
  *(void *)(v64 + 40) = MEMORY[0x253393220]((id)*MEMORY[0x263F09490]);
  *(void *)(v64 + 48) = MEMORY[0x253393220]((id)*MEMORY[0x263F09498]);
  *(void *)(v64 + 56) = MEMORY[0x253393220]((id)*MEMORY[0x263F094A0]);
  v148[0] = v64;
  sub_2510BF428();
  unint64_t v65 = v148[0];
  if (v113 < 0 || (v113 & 0x4000000000000000) != 0)
  {
    sub_251065E84(0, &qword_26B2121B8);
    swift_bridgeObjectRetain();
    uint64_t v66 = sub_2510BFAE8();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_2510BFC38();
    sub_251065E84(0, &qword_26B2121B8);
    uint64_t v66 = v113;
  }
  swift_release();
  if ((v63 & 0x8000000000000000) != 0 || (v63 & 0x4000000000000000) != 0)
  {
    sub_251065E84(0, &qword_26B2121B8);
    swift_bridgeObjectRetain();
    unint64_t v67 = sub_2510BFAE8();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_2510BFC38();
    sub_251065E84(0, &qword_26B2121B8);
    unint64_t v67 = v63;
  }
  swift_release();
  v148[0] = v66;
  sub_2510B921C(v67);
  uint64_t v68 = v148[0];
  if (v65 >> 62)
  {
    sub_251065E84(0, &qword_26B2121B8);
    swift_bridgeObjectRetain();
    unint64_t v69 = sub_2510BFAE8();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_2510BFC38();
    sub_251065E84(0, &qword_26B2121B8);
    unint64_t v69 = v65;
  }
  swift_bridgeObjectRelease();
  v148[0] = v68;
  sub_2510B921C(v69);
  unint64_t v70 = v148[0];
  uint64_t v71 = self;
  id v72 = objc_msgSend(v71, sel_activitySummaryType);
  id v73 = objc_msgSend(v71, sel_electrocardiogramType);
  v148[0] = v70;
  if (v70 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v86 = sub_2510BFAF8();
    BOOL v87 = __OFADD__(v86, 2);
    uint64_t v75 = v86 + 2;
    if (!v87)
    {
LABEL_15:
      sub_2510B9730(v75, 1);
      sub_2510BF428();
      id v72 = v72;
      MEMORY[0x253392F70]();
      if (*(void *)((v148[0] & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v148[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_16;
      }
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v74 = *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v75 = v74 + 2;
    if (!__OFADD__(v74, 2)) {
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_35:
  sub_2510BF448();
LABEL_16:
  sub_2510BF478();
  sub_2510BF428();
  id v76 = v73;
  MEMORY[0x253392F70]();
  if (*(void *)((v148[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v148[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_2510BF448();
  }
  sub_2510BF478();
  sub_2510BF428();
  unint64_t v77 = v148[0];
  swift_bridgeObjectRelease();

  if (v77 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v78 = sub_2510BFAF8();
    swift_bridgeObjectRelease();
    if (v78) {
      goto LABEL_20;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    id v79 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_38;
  }
  uint64_t v78 = *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v78) {
    goto LABEL_37;
  }
LABEL_20:
  v148[0] = MEMORY[0x263F8EE78];
  id v79 = v148;
  sub_2510B91FC(0, v78 & ~(v78 >> 63), 0);
  if (v78 < 0)
  {
    __break(1u);
LABEL_49:
    id v79 = sub_251077294(0, v79[2] + 1, 1, v79);
    goto LABEL_40;
  }
  uint64_t v80 = 0;
  id v79 = (void *)v148[0];
  do
  {
    if ((v77 & 0xC000000000000001) != 0) {
      id v81 = (id)MEMORY[0x2533934D0](v80, v77);
    }
    else {
      id v81 = *(id *)(v77 + 8 * v80 + 32);
    }
    id v82 = v81;
    v148[0] = v79;
    unint64_t v84 = v79[2];
    unint64_t v83 = v79[3];
    if (v84 >= v83 >> 1)
    {
      sub_2510B91FC(v83 > 1, v84 + 1, 1);
      id v79 = (void *)v148[0];
    }
    v79[2] = v84 + 1;
    uint64_t v85 = &v79[7 * v84];
    v85[4] = v82;
    ++v80;
    *(_OWORD *)(v85 + 5) = 0u;
    *(_OWORD *)(v85 + 7) = 0u;
    *(_OWORD *)((char *)v85 + 65) = 0u;
  }
  while (v78 != v80);
  swift_bridgeObjectRelease();
LABEL_38:
  id v88 = objc_msgSend(v71, sel_correlationTypeForIdentifier_, *MEMORY[0x263F094C0], v96);
  if (!v88) {
    goto LABEL_43;
  }
  uint64_t v71 = v88;
  uint64_t v78 = (uint64_t)v88;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_49;
  }
LABEL_40:
  unint64_t v90 = v79[2];
  unint64_t v89 = v79[3];
  if (v90 >= v89 >> 1) {
    id v79 = sub_251077294((void *)(v89 > 1), v90 + 1, 1, v79);
  }
  v79[2] = v90 + 1;
  uint64_t v91 = &v79[7 * v90];
  v91[4] = v71;
  *(_OWORD *)(v91 + 5) = 0u;
  *(_OWORD *)(v91 + 7) = 0u;
  *(_OWORD *)((char *)v91 + 65) = 0u;

LABEL_43:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v79 = sub_251077294(0, v79[2] + 1, 1, v79);
  }
  unint64_t v93 = v79[2];
  unint64_t v92 = v79[3];
  if (v93 >= v92 >> 1) {
    id v79 = sub_251077294((void *)(v92 > 1), v93 + 1, 1, v79);
  }
  v79[2] = v93 + 1;
  uint64_t v94 = &v79[7 * v93];
  *((_OWORD *)v94 + 2) = 0u;
  *((_OWORD *)v94 + 3) = 0u;
  *((_OWORD *)v94 + 4) = 0u;
  *((unsigned char *)v94 + 80) = 4;
  return v79;
}

uint64_t sub_2510B919C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2510AF69C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_2510B91BC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2510AF828(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_2510B91DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2510AF9BC(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_2510B91FC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_2510AFB6C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_2510B921C(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_2510BFAF8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_2510BFAF8();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x2533934E0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *unint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = sub_2510B93E8(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_2510BFAF8();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return sub_2510BF428();
}

uint64_t sub_2510B93E8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_2510BFAF8();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_2510BFAF8();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_2510B97F0();
        sub_2510B9858();
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          uint64_t v12 = sub_2510B95F8(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_251065E84(0, &qword_26B2121B8);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_2510BFB58();
  __break(1u);
  return result;
}

void (*sub_2510B95F8(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_2510B96A8(v6, a2, a3);
  return sub_2510B9660;
}

void sub_2510B9660(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_2510B96A8(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x2533934D0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return _s28PregnancyStateQueryPublisherVwxx;
  }
  __break(1u);
  return result;
}

void _s28PregnancyStateQueryPublisherVwxx(id *a1)
{
}

uint64_t sub_2510B9730(uint64_t a1, char a2)
{
  unint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v5;
  uint64_t v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_2510BFAF8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = MEMORY[0x2533934E0](v7, v9, a2 & 1, v5);
  *uint64_t v2 = result;
  return result;
}

void sub_2510B97F0()
{
  if (!qword_269B1BF28)
  {
    sub_251065E84(255, &qword_26B2121B8);
    unint64_t v0 = sub_2510BF488();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BF28);
    }
  }
}

unint64_t sub_2510B9858()
{
  unint64_t result = qword_269B1BF30;
  if (!qword_269B1BF30)
  {
    sub_2510B97F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269B1BF30);
  }
  return result;
}

id HKHealthStore.StatisticsCollectionPublisher.Output.updatedStatistics.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

id HKHealthStore.StatisticsCollectionPublisher.Output.statisticsCollection.getter()
{
  return *(id *)(v0 + 8);
}

uint64_t HKHealthStore.StatisticsCollectionPublisher.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25105FE30(v1, a1, type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration);
}

id HKHealthStore.StatisticsCollectionPublisher.healthStore.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for HKHealthStore.StatisticsCollectionPublisher(0) + 20));
  return v1;
}

void sub_2510B994C(int a1, void *a2, id a3, void (*a4)(id *), uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    BOOL v8 = (*(unsigned char *)(a6
                   + *(int *)(type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0)
                            + 40)) & 1) == 0;
    id v12 = 0;
    BOOL v13 = a2;
    char v14 = v8;
    id v9 = a2;
    a4(&v12);
  }
  else if (a3)
  {
    id v12 = a3;
    BOOL v13 = 0;
    char v14 = 2;
    id v11 = a3;
    a4(&v12);
  }
}

void sub_2510B9A0C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(v10, a3, a4);
  swift_release();
}

void sub_2510B9AAC(int a1, void *a2, void *a3, id a4, void (*a5)(id *), uint64_t a6, uint64_t a7)
{
  if (a3)
  {
    BOOL v10 = (*(unsigned char *)(a7
                    + *(int *)(type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0)
                             + 40)) & 1) == 0;
    id v15 = a2;
    id v16 = a3;
    char v17 = v10;
    id v11 = a2;
    id v12 = a3;
    a5(&v15);
  }
  else if (a4)
  {
    id v15 = a4;
    id v16 = 0;
    char v17 = 2;
    id v14 = a4;
    a5(&v15);
  }
}

void sub_2510B9B84(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = *(void (**)(id, void *, void *, void *))(a1 + 32);
  swift_retain();
  id v13 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  v9(v13, a3, a4, a5);
  swift_release();
}

uint64_t sub_2510B9C40(uint64_t a1)
{
  uint64_t result = sub_251067BF8(&qword_26B211D38);
  *(void *)(a1 + 8) = result;
  return result;
}

char *_s29StatisticsCollectionPublisherVwCP(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  id v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    unint64_t v6 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    unint64_t v6 = a1;
    id v8 = a2[1];
    uint64_t v7 = a2[2];
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v7;
    id v9 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
    uint64_t v10 = v9[7];
    id v11 = &v6[v10];
    uint64_t v12 = (uint64_t)a2 + v10;
    uint64_t v13 = sub_2510BE908();
    id v14 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    id v15 = v4;
    id v16 = v8;
    v14(v11, v12, v13);
    uint64_t v17 = v9[8];
    id v18 = &v6[v17];
    uint64_t v19 = (uint64_t)a2 + v17;
    uint64_t v20 = sub_2510BE798();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    uint64_t v21 = v9[9];
    id v22 = &v6[v21];
    unint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = sub_2510BE6D8();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      sub_2510600E4();
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v6[v9[10]] = *((unsigned char *)a2 + v9[10]);
    uint64_t v27 = v9[11];
    uint64_t v28 = *(char **)((char *)a2 + v27);
    *(void *)&v6[v27] = v28;
    uint64_t v29 = v9[12];
    id v30 = &v6[v29];
    id v31 = (char **)((char *)a2 + v29);
    uint64_t v32 = v31[1];
    *(void *)id v30 = *v31;
    *((void *)v30 + 1) = v32;
    uint64_t v33 = *(int *)(a3 + 20);
    id v34 = *(char **)((char *)a2 + v33);
    *(void *)&v6[v33] = v34;
    id v35 = v28;
    swift_bridgeObjectRetain();
    id v36 = v34;
  }
  return v6;
}

uint64_t _s29StatisticsCollectionPublisherVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(void **)a2;
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v7 = v5;

  id v8 = *(void **)(a1 + 8);
  id v9 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v9;
  id v10 = v9;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  id v11 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  uint64_t v12 = v11[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_2510BE908();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = v11[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_2510BE798();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  uint64_t v20 = v11[9];
  uint64_t v21 = (void *)(a1 + v20);
  id v22 = (void *)(a2 + v20);
  uint64_t v23 = sub_2510BE6D8();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 24))(v21, v22, v23);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    sub_2510600E4();
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v21, v22, v23);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
LABEL_7:
  *(unsigned char *)(a1 + v11[10]) = *(unsigned char *)(a2 + v11[10]);
  uint64_t v29 = v11[11];
  id v30 = *(void **)(a1 + v29);
  id v31 = *(void **)(a2 + v29);
  *(void *)(a1 + v29) = v31;
  id v32 = v31;

  uint64_t v33 = v11[12];
  id v34 = (void *)(a1 + v33);
  id v35 = (void *)(a2 + v33);
  *id v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = *(int *)(a3 + 20);
  id v37 = *(void **)(a2 + v36);
  id v38 = *(void **)(a1 + v36);
  *(void *)(a1 + v36) = v37;
  id v39 = v37;

  return a1;
}

uint64_t _s29StatisticsCollectionPublisherVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v6 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  uint64_t v7 = v6[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_2510BE908();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = v6[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_2510BE798();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = v6[9];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = sub_2510BE6D8();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    sub_2510600E4();
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  *(unsigned char *)(a1 + v6[10]) = *(unsigned char *)(a2 + v6[10]);
  *(void *)(a1 + v6[11]) = *(void *)(a2 + v6[11]);
  *(_OWORD *)(a1 + v6[12]) = *(_OWORD *)(a2 + v6[12]);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t _s29StatisticsCollectionPublisherVwta(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = *a2;

  unint64_t v6 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = a2[1];

  *(void *)(a1 + 16) = a2[2];
  uint64_t v7 = (int *)type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  uint64_t v8 = v7[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_2510BE908();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = v7[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_2510BE798();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = v7[9];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = sub_2510BE6D8();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    sub_2510600E4();
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_7:
  *(unsigned char *)(a1 + v7[10]) = *((unsigned char *)a2 + v7[10]);
  uint64_t v25 = v7[11];
  int v26 = *(void **)(a1 + v25);
  *(void *)(a1 + v25) = *(void *)((char *)a2 + v25);

  uint64_t v27 = v7[12];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  void *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = *(int *)(a3 + 20);
  uint64_t v33 = *(void **)(a1 + v32);
  *(void *)(a1 + v32) = *(void *)((char *)a2 + v32);

  return a1;
}

uint64_t _s29StatisticsCollectionPublisherVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2510BA65C);
}

uint64_t sub_2510BA65C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t _s29StatisticsCollectionPublisherVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2510BA730);
}

uint64_t sub_2510BA730(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_2510BA7EC()
{
  uint64_t result = type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *_s29StatisticsCollectionPublisherV6OutputVwCP(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  id v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void _s29StatisticsCollectionPublisherV6OutputVwxx(uint64_t a1)
{
  id v2 = *(void **)(a1 + 8);
}

uint64_t _s29StatisticsCollectionPublisherV6OutputVwca(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t _s29StatisticsCollectionPublisherV6OutputVwta(uint64_t a1, _OWORD *a2)
{
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Output()
{
  return &type metadata for HKHealthStore.StatisticsCollectionPublisher.Output;
}

char *_s29StatisticsCollectionPublisherV13ConfigurationVwCP(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  id v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    id v9 = a2[1];
    uint64_t v8 = a2[2];
    *((void *)a1 + 1) = v9;
    *((void *)a1 + 2) = v8;
    uint64_t v10 = a3[7];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = (uint64_t)a2 + v10;
    uint64_t v13 = sub_2510BE908();
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    uint64_t v15 = v4;
    uint64_t v16 = v9;
    v14(v11, v12, v13);
    uint64_t v17 = a3[8];
    uint64_t v18 = &v7[v17];
    uint64_t v19 = (uint64_t)a2 + v17;
    uint64_t v20 = sub_2510BE798();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    uint64_t v21 = a3[9];
    int v22 = &v7[v21];
    int v23 = (char *)a2 + v21;
    uint64_t v24 = sub_2510BE6D8();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      sub_2510600E4();
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    uint64_t v27 = a3[11];
    v7[a3[10]] = *((unsigned char *)a2 + a3[10]);
    uint64_t v28 = *(char **)((char *)a2 + v27);
    *(void *)&v7[v27] = v28;
    uint64_t v29 = a3[12];
    uint64_t v30 = &v7[v29];
    uint64_t v31 = (char **)((char *)a2 + v29);
    uint64_t v32 = v31[1];
    *(void *)uint64_t v30 = *v31;
    *((void *)v30 + 1) = v32;
    id v33 = v28;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t _s29StatisticsCollectionPublisherV13ConfigurationVwca(uint64_t a1, uint64_t a2, int *a3)
{
  id v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  id v9 = *(void **)(a1 + 8);
  uint64_t v10 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v10;
  id v11 = v10;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_2510BE908();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = sub_2510BE798();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  uint64_t v20 = a3[9];
  uint64_t v21 = (void *)(a1 + v20);
  int v22 = (void *)(a2 + v20);
  uint64_t v23 = sub_2510BE6D8();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 24))(v21, v22, v23);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    sub_2510600E4();
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v21, v22, v23);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
LABEL_7:
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v29 = a3[11];
  uint64_t v30 = *(void **)(a1 + v29);
  uint64_t v31 = *(void **)(a2 + v29);
  *(void *)(a1 + v29) = v31;
  id v32 = v31;

  uint64_t v33 = a3[12];
  id v34 = (void *)(a1 + v33);
  id v35 = (void *)(a2 + v33);
  *id v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s29StatisticsCollectionPublisherV13ConfigurationVwtk(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_2510BE908();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_2510BE798();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[9];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (const void *)(a2 + v14);
  uint64_t v17 = sub_2510BE6D8();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_2510600E4();
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v20 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t _s29StatisticsCollectionPublisherV13ConfigurationVwta(uint64_t a1, void *a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = a2[1];

  *(void *)(a1 + 16) = a2[2];
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_2510BE908();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_2510BE798();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = a3[9];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = sub_2510BE6D8();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    sub_2510600E4();
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_7:
  uint64_t v25 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  int v26 = *(void **)(a1 + v25);
  *(void *)(a1 + v25) = *(void *)((char *)a2 + v25);

  uint64_t v27 = a3[12];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  void *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s29StatisticsCollectionPublisherV13ConfigurationVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2510BB2CC);
}

uint64_t sub_2510BB2CC(char *a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = sub_2510BE908();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[7];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    return v13(&a1[v11], a2, v9);
  }
  uint64_t v12 = sub_2510BE798();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_9;
  }
  sub_2510600E4();
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = &a1[a3[9]];
  return v15(v17, a2, v16);
}

uint64_t _s29StatisticsCollectionPublisherV13ConfigurationVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2510BB458);
}

char *sub_2510BB458(char *result, uint64_t a2, int a3, int *a4)
{
  id v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
    return result;
  }
  uint64_t v8 = sub_2510BE908();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[7];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = sub_2510BE798();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_7;
  }
  sub_2510600E4();
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = &v5[a4[9]];
  return (char *)v15(v17, a2, a2, v16);
}

void sub_2510BB5D0()
{
  sub_2510BE908();
  if (v0 <= 0x3F)
  {
    sub_2510BE798();
    if (v1 <= 0x3F)
    {
      sub_2510600E4();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_2510BB714(int a1, void *a2, void *a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0) - 8);
  uint64_t v8 = *(void (**)(id *))(v3 + 16);
  uint64_t v9 = *(void *)(v3 + 24);
  uint64_t v10 = v3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  sub_2510B994C(a1, a2, a3, v8, v9, v10);
}

void sub_2510BB7A4(int a1, void *a2, void *a3, void *a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for HKHealthStore.StatisticsCollectionPublisher.Configuration(0) - 8);
  uint64_t v10 = *(void (**)(id *))(v4 + 16);
  uint64_t v11 = *(void *)(v4 + 24);
  uint64_t v12 = v4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  sub_2510B9AAC(a1, a2, a3, a4, v10, v11, v12);
}

id HKHealthStore.pregnancyStateQueryPublisher()@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return v1;
}

id HKHealthStore.PregnancyStateQueryPublisher.healthStore.getter()
{
  return *v0;
}

id static HKHealthStore.PregnancyStateQueryPublisher.makeQuery(with:outputHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  id v6 = objc_allocWithZone(MEMORY[0x263F0A490]);
  v10[4] = sub_2510BBDC4;
  v10[5] = v5;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1107296256;
  void v10[2] = sub_2510B9A0C;
  v10[3] = &block_descriptor_22;
  uint64_t v7 = _Block_copy(v10);
  swift_retain();
  id v8 = objc_msgSend(v6, sel_initWithUpdateHandler_, v7);
  _Block_release(v7);
  swift_release();
  return v8;
}

void sub_2510BB958(uint64_t a1, void *a2, void *a3, void (*a4)(id *))
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a2)
  {
    id v5 = a2;
    if (HKShowSensitiveLogItems())
    {
      if (qword_26B2118B8 != -1) {
        swift_once();
      }
      uint64_t v6 = sub_2510BEC48();
      __swift_project_value_buffer(v6, (uint64_t)qword_26B214CE0);
      uint64_t v7 = sub_2510BEC28();
      os_log_type_t v8 = sub_2510BF688();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        id v10 = (id)swift_slowAlloc();
        id v26 = v10;
        *(_DWORD *)uint64_t v9 = 136446210;
        uint64_t v11 = sub_2510BFDB8();
        sub_25106EDC0(v11, v12, (uint64_t *)&v26);
        sub_2510BF818();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_251054000, v7, v8, "[%{public}s] Pregnancy state returned successfully", v9, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2533940F0](v10, -1, -1);
        MEMORY[0x2533940F0](v9, -1, -1);
      }
    }
    id v26 = objc_msgSend(v5, sel_state);
    char v27 = 0;
    a4(&v26);
  }
  else
  {
    if (HKShowSensitiveLogItems())
    {
      if (qword_26B2118B8 != -1) {
        swift_once();
      }
      uint64_t v14 = sub_2510BEC48();
      __swift_project_value_buffer(v14, (uint64_t)qword_26B214CE0);
      id v15 = a3;
      id v16 = a3;
      uint64_t v17 = sub_2510BEC28();
      os_log_type_t v18 = sub_2510BF688();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v20 = (void *)swift_slowAlloc();
        id v25 = (id)swift_slowAlloc();
        id v26 = v25;
        *(_DWORD *)uint64_t v19 = 136446466;
        uint64_t v21 = sub_2510BFDB8();
        sub_25106EDC0(v21, v22, (uint64_t *)&v26);
        sub_2510BF818();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2112;
        if (a3)
        {
          id v23 = a3;
          uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
          sub_2510BF818();
        }
        else
        {
          sub_2510BF818();
          uint64_t v24 = 0;
        }
        *uint64_t v20 = v24;

        _os_log_impl(&dword_251054000, v17, v18, "[%{public}s] Pregnancy query returned with error %@", (uint8_t *)v19, 0x16u);
        sub_2510BC138();
        swift_arrayDestroy();
        MEMORY[0x2533940F0](v20, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x2533940F0](v25, -1, -1);
        MEMORY[0x2533940F0](v19, -1, -1);
      }
      else
      {
      }
    }
    id v26 = 0;
    char v27 = 0;
    a4(&v26);
  }
}

uint64_t sub_2510BBD8C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_2510BBDC4(uint64_t a1, void *a2, void *a3)
{
  sub_2510BB958(a1, a2, a3, *(void (**)(id *))(v3 + 16));
}

id sub_2510BBDCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  id v6 = objc_allocWithZone(MEMORY[0x263F0A490]);
  v10[4] = sub_2510BC198;
  v10[5] = v5;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1107296256;
  void v10[2] = sub_2510B9A0C;
  v10[3] = &block_descriptor_8_1;
  uint64_t v7 = _Block_copy(v10);
  swift_retain();
  id v8 = objc_msgSend(v6, sel_initWithUpdateHandler_, v7);
  _Block_release(v7);
  swift_release();
  return v8;
}

uint64_t sub_2510BBEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_2510BC0E4();
  return HKQueryPublisher.receive<A>(subscriber:)(a1, a4, a2, v8, a3);
}

unint64_t sub_2510BBF28(uint64_t a1)
{
  unint64_t result = sub_2510BBF50();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_2510BBF50()
{
  unint64_t result = qword_26B211658;
  if (!qword_26B211658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B211658);
  }
  return result;
}

void **_s28PregnancyStateQueryPublisherVwCP(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void **_s28PregnancyStateQueryPublisherVwca(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  id v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void **_s28PregnancyStateQueryPublisherVwta(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t _s28PregnancyStateQueryPublisherVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s28PregnancyStateQueryPublisherVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.PregnancyStateQueryPublisher()
{
  return &type metadata for HKHealthStore.PregnancyStateQueryPublisher;
}

ValueMetadata *type metadata accessor for HKHealthStore.PregnancyStateQueryPublisher.Configuration()
{
  return &type metadata for HKHealthStore.PregnancyStateQueryPublisher.Configuration;
}

unint64_t sub_2510BC0E4()
{
  unint64_t result = qword_26B211660;
  if (!qword_26B211660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B211660);
  }
  return result;
}

void sub_2510BC138()
{
  if (!qword_26B211678)
  {
    sub_25107F56C();
    unint64_t v0 = sub_2510BF808();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B211678);
    }
  }
}

uint64_t Calendar.dayIndex(for:)(uint64_t a1)
{
  uint64_t v3 = sub_2510BE9E8();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_2510BE908();
  MEMORY[0x270FA5388](v7);
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, v3);
  return sub_2510BF0C8();
}

uint64_t Calendar.numberOfDaysPerWeek.getter()
{
  uint64_t v0 = sub_2510BE9C8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F078E8], v0);
  uint64_t v4 = sub_2510BE978();
  uint64_t v6 = v5;
  char v8 = v7;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v8) {
    return 7;
  }
  uint64_t result = v6 - v4;
  if (__OFSUB__(v6, v4))
  {
    __break(1u);
    return 7;
  }
  return result;
}

uint64_t Calendar.numberOfDaysInMonth(containing:)()
{
  uint64_t v0 = sub_2510BE9C8();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v15 - v5;
  char v7 = *(void (**)(char *, void, uint64_t))(v1 + 104);
  v7((char *)&v15 - v5, *MEMORY[0x263F07870], v0);
  v7(v4, *MEMORY[0x263F078A8], v0);
  uint64_t v8 = sub_2510BE9B8();
  uint64_t v10 = v9;
  char v12 = v11;
  uint64_t v13 = *(void (**)(char *, uint64_t))(v1 + 8);
  v13(v4, v0);
  v13(v6, v0);
  uint64_t result = 0;
  if ((v12 & 1) == 0)
  {
    uint64_t result = v10 - v8;
    if (__OFSUB__(v10, v8)) {
      __break(1u);
    }
  }
  return result;
}

uint64_t Calendar.endOfDay(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v2 = sub_2510BE9C8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25105F6AC(0, (unint64_t *)&qword_26B212E58, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v9 = sub_2510BE908();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  id v23 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = *MEMORY[0x263F07870];
  unint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v22(v5, v15, v2);
  uint64_t v25 = v1;
  sub_2510BE9A8();
  id v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v24 = v2;
  v16(v5, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_2510661B8((uint64_t)v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v26, 1, 1, v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v8, v9);
    os_log_type_t v18 = v23;
    sub_2510BE968();
    uint64_t v19 = v24;
    v22(v5, *MEMORY[0x263F078C8], v24);
    sub_2510BE9A8();
    v16(v5, v19);
    uint64_t v20 = *(void (**)(char *, uint64_t))(v10 + 8);
    v20(v18, v9);
    return ((uint64_t (*)(char *, uint64_t))v20)(v14, v9);
  }
}

uint64_t Calendar.firstDateOfTheYear(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_25105F6AC(0, &qword_26B212480, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v22 = (char *)v20 - v4;
  sub_25105F6AC(0, &qword_269B1BF38, MEMORY[0x263F07920], v2);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v20 - v6;
  uint64_t v23 = sub_2510BE798();
  uint64_t v21 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_2510BE9C8();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void (**)(char *, void, uint64_t))(v11 + 104);
  v14(v13, *MEMORY[0x263F078A0], v10);
  v20[1] = sub_2510BE9D8();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v11 + 8);
  v15(v13, v10);
  v14(v13, *MEMORY[0x263F07878], v10);
  sub_2510BE9D8();
  v15(v13, v10);
  uint64_t v16 = sub_2510BE9E8();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v7, v1, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v7, 0, 1, v16);
  uint64_t v18 = sub_2510BE9F8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v22, 1, 1, v18);
  sub_2510BE788();
  sub_2510BE778();
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v9, v23);
}

uint64_t Calendar.numberOfDaysBetweenInclusive(_:and:)()
{
  uint64_t result = Calendar.comparisonNumberOfDaysBetweenInclusive(_:and:)();
  if (result < 0)
  {
    BOOL v1 = __OFSUB__(0, result);
    uint64_t result = -result;
    if (v1) {
      goto LABEL_6;
    }
  }
  BOOL v1 = __OFADD__(result++, 1);
  if (v1)
  {
    __break(1u);
LABEL_6:
    __break(1u);
  }
  return result;
}

uint64_t Calendar.comparisonNumberOfDaysBetweenInclusive(_:and:)()
{
  uint64_t v0 = sub_2510BE798();
  uint64_t v18 = *(void *)(v0 - 8);
  uint64_t v19 = v0;
  MEMORY[0x270FA5388](v0);
  uint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_2510BE908();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v18 - v8;
  sub_2510BE968();
  sub_2510BE968();
  sub_25105F6AC(0, &qword_269B1BF40, MEMORY[0x263F07908], MEMORY[0x263F8E0F8]);
  uint64_t v10 = sub_2510BE9C8();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_2510C2790;
  (*(void (**)(unint64_t, void, uint64_t))(v11 + 104))(v13 + v12, *MEMORY[0x263F07870], v10);
  sub_2510BD020(v13);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_2510BE988();
  swift_bridgeObjectRelease();
  uint64_t v14 = sub_2510BE768();
  LOBYTE(v13) = v15;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v2, v19);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16(v7, v3);
  v16(v9, v3);
  if (v13) {
    return 0;
  }
  else {
    return v14;
  }
}

uint64_t sub_2510BD020(uint64_t a1)
{
  uint64_t v2 = sub_2510BE9C8();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  id v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_2510BD30C();
    uint64_t v9 = sub_2510BF8F8();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    id v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    char v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_2510BD38C(&qword_269B1BF50);
      uint64_t v16 = sub_2510BF168();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_2510BD38C((unint64_t *)&unk_269B1BF58);
          char v23 = sub_2510BF218();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

void sub_2510BD30C()
{
  if (!qword_269B1BF48)
  {
    sub_2510BE9C8();
    sub_2510BD38C(&qword_269B1BF50);
    unint64_t v0 = sub_2510BF908();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BF48);
    }
  }
}

uint64_t sub_2510BD38C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_2510BE9C8();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_2510BD3D0(uint64_t a1)
{
}

void sub_2510BD3FC(uint64_t a1)
{
}

void sub_2510BD428(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  v14[8] = a1;
  uint64_t v7 = (os_unfair_lock_s *)(*(void *)(v3 + 16) + 16);
  os_unfair_lock_lock(v7);
  if (*(unsigned char *)(v3 + 25) == 1)
  {
    swift_beginAccess();
    uint64_t v8 = *(void *)(v3 + 40);
    int v9 = *(unsigned __int8 *)(v3 + 48);
    swift_beginAccess();
    *(void *)(v3 + 56) = a1;
    sub_251068CF0(v8, v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v7);
    MEMORY[0x270FA5388](v10);
    if (v9)
    {
      if (v9 != 1) {
        return;
      }
      a3(v8, a2);
      uint64_t v11 = v8;
      char v12 = 1;
    }
    else
    {
      v14[0] = a1;
      uint64_t v13 = *(void (**)(void *))(*(void *)v8 + 104);
      swift_retain();
      v13(v14);
      sub_2510606A0(v8, 0);
      uint64_t v11 = v8;
      char v12 = 0;
    }
    sub_2510606A0(v11, v12);
  }
  else
  {
    os_unfair_lock_unlock(v7);
  }
}

uint64_t sub_2510BD5C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  v6[10] = a1;
  v6[11] = 0;
  v6[12] = 0;
  v6[13] = a2;
  v6[14] = a3;
  return sub_25105F208(0, 255);
}

uint64_t HKHealthStore._cloudSyncStatusPublisher<A>(test_observerHook:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CloudSyncStatusPublisherImpl();
  sub_25105F008();
  v14[0] = v5;
  swift_getWitnessTable();
  uint64_t v6 = sub_2510BEC68();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int v9 = (char *)v14 - v8;
  uint64_t v10 = (void *)swift_allocObject();
  v10[10] = v2;
  v10[11] = 0;
  v10[12] = 0;
  v10[13] = a1;
  v10[14] = a2;
  v14[1] = sub_25105F208(0, 255);
  id v11 = v2;
  sub_2510677F4(a1);
  sub_2510BEE68();
  swift_release();
  swift_getWitnessTable();
  uint64_t v12 = sub_2510BEE58();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v12;
}

uint64_t sub_2510BD7FC()
{
  return swift_weakLoadStrong();
}

void sub_2510BD80C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v8 = a4;
  id v7 = a1;
  sub_2510BDD04(v8);
}

void sub_2510BD888()
{
}

id sub_2510BD8B0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CloudSyncStatusPublisherImpl.CloudDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_2510BD90C()
{
  return swift_weakDestroy();
}

uint64_t sub_2510BD91C()
{
  swift_unknownObjectRelease();
  uint64_t v1 = *(void *)(v0 + 104);
  return sub_2510674C0(v1);
}

void sub_2510BD95C()
{
}

void sub_2510BD964()
{
}

uint64_t sub_2510BD98C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_2510BD9D0()
{
  return swift_deallocClassInstance();
}

uint64_t sub_2510BDA08(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_2510BF888();
    sub_2510BDE18();
    sub_25105EF58(&qword_269B1BFE0, (void (*)(uint64_t))sub_2510BDE18);
    uint64_t result = sub_2510BF578();
    uint64_t v5 = v22;
    uint64_t v21 = v23;
    uint64_t v7 = v24;
    int64_t v8 = v25;
    unint64_t v9 = v26;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v21 = a1 + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v9 = v12 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v8 = 0;
  }
  int64_t v20 = (unint64_t)(v7 + 64) >> 6;
  while (1)
  {
    int64_t v16 = v8;
    if ((v5 & 0x8000000000000000) == 0) {
      break;
    }
    if (!sub_2510BF8B8()) {
      return sub_25107A748();
    }
    sub_2510BDE18();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v15 = v27;
    swift_unknownObjectRelease();
    if (!v27) {
      return sub_25107A748();
    }
LABEL_10:
    a2(v15);
    uint64_t result = swift_release();
    if (v3) {
      return sub_25107A748();
    }
  }
  if (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v8 << 6);
LABEL_9:
    uint64_t v15 = *(void *)(*(void *)(v5 + 48) + 8 * v14);
    swift_retain();
    if (!v15) {
      return sub_25107A748();
    }
    goto LABEL_10;
  }
  ++v8;
  if (!__OFADD__(v16, 1))
  {
    if (v8 >= v20) {
      return sub_25107A748();
    }
    unint64_t v17 = *(void *)(v21 + 8 * v8);
    if (!v17)
    {
      int64_t v18 = v16 + 2;
      if (v16 + 2 >= v20) {
        return sub_25107A748();
      }
      unint64_t v17 = *(void *)(v21 + 8 * v18);
      if (v17) {
        goto LABEL_22;
      }
      int64_t v18 = v16 + 3;
      if (v16 + 3 >= v20) {
        return sub_25107A748();
      }
      unint64_t v17 = *(void *)(v21 + 8 * v18);
      if (v17) {
        goto LABEL_22;
      }
      int64_t v18 = v16 + 4;
      if (v16 + 4 >= v20) {
        return sub_25107A748();
      }
      unint64_t v17 = *(void *)(v21 + 8 * v18);
      if (v17)
      {
LABEL_22:
        int64_t v8 = v18;
      }
      else
      {
        int64_t v8 = v16 + 5;
        if (v16 + 5 >= v20) {
          return sub_25107A748();
        }
        unint64_t v17 = *(void *)(v21 + 8 * v8);
        if (!v17)
        {
          int64_t v19 = v16 + 6;
          while (v20 != v19)
          {
            unint64_t v17 = *(void *)(v21 + 8 * v19++);
            if (v17)
            {
              int64_t v8 = v19 - 1;
              goto LABEL_23;
            }
          }
          return sub_25107A748();
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v8 << 6);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void sub_2510BDD04(void *a1)
{
  if (swift_weakLoadStrong())
  {
    id v2 = a1;
    sub_251059128(a1, 1u);
    swift_release();
  }
}

void sub_2510BDD78()
{
}

uint64_t sub_2510BDDA8(uint64_t a1)
{
  id v2 = *(uint64_t **)(v1 + 16);
  uint64_t v3 = *v2;
  LOBYTE(v2) = *((unsigned char *)v2 + 8);
  uint64_t v5 = v3;
  char v6 = (char)v2;
  return (*(uint64_t (**)(uint64_t *))(*(void *)a1 + 104))(&v5);
}

void sub_2510BDE18()
{
  if (!qword_269B1BFD0)
  {
    sub_2510BDE80();
    unint64_t v0 = type metadata accessor for StreamConduitBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BFD0);
    }
  }
}

void sub_2510BDE80()
{
  if (!qword_269B1BFD8)
  {
    sub_25105F008();
    unint64_t v0 = sub_2510BF808();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BFD8);
    }
  }
}

void sub_2510BDED8()
{
}

void sub_2510BDF08()
{
}

uint64_t sub_2510BDF38(uint64_t a1)
{
  return sub_2510BDF50(a1);
}

uint64_t sub_2510BDF50(uint64_t a1)
{
  uint64_t v3 = **(void **)(v1 + 16);
  return (*(uint64_t (**)(uint64_t *))(*(void *)a1 + 104))(&v3);
}

uint64_t static DayIndex.+/- infix(_:_:)@<X0>(char *a1@<X8>)
{
  sub_2510BE2DC();
  uint64_t v3 = v2;
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v32 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v29 - v6;
  uint64_t v8 = sub_2510BF0E8();
  unint64_t v9 = *(void **)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v29 - v14;
  MEMORY[0x270FA5388](v13);
  unint64_t v17 = (char *)&v29 - v16;
  sub_2510BF0B8();
  sub_2510BF098();
  sub_2510BF0D8();
  uint64_t v31 = (void (*)(char *, uint64_t))v9[1];
  v31(v12, v8);
  sub_25108CD38();
  uint64_t result = sub_2510BF1C8();
  if (result)
  {
    int64_t v19 = &v7[*(int *)(v3 + 48)];
    uint64_t v30 = a1;
    int64_t v20 = (void (*)(char *, char *, uint64_t))v9[4];
    v20(v7, v17, v8);
    v20(v19, v15, v8);
    uint64_t v21 = *(int *)(v3 + 48);
    uint64_t v29 = v9 + 1;
    uint64_t v22 = v32;
    uint64_t v23 = &v32[v21];
    uint64_t v24 = (void (*)(char *, char *, uint64_t))v9[2];
    v24(v32, v7, v8);
    v24(v23, v19, v8);
    int64_t v25 = v30;
    v20(v30, v22, v8);
    unint64_t v26 = (uint64_t (*)(char *, uint64_t))v31;
    v31(v23, v8);
    uint64_t v27 = &v22[*(int *)(v3 + 48)];
    v20(v22, v7, v8);
    v20(v27, v19, v8);
    sub_2510BE344();
    v20(&v25[*(int *)(v28 + 36)], v27, v8);
    return v26(v22, v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_2510BE2DC()
{
  if (!qword_269B1BFE8)
  {
    sub_2510BF0E8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_269B1BFE8);
    }
  }
}

void sub_2510BE344()
{
  if (!qword_269B1BFF0)
  {
    sub_2510BF0E8();
    sub_25108CD38();
    unint64_t v0 = sub_2510BF618();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_269B1BFF0);
    }
  }
}

uint64_t static Range<>.+/- infix(_:_:)@<X0>(char *a1@<X8>)
{
  sub_2510BE2DC();
  uint64_t v3 = v2;
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v26 - v7;
  uint64_t v9 = sub_2510BF0E8();
  uint64_t v10 = *(void **)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v26 - v14;
  sub_2510BF0B8();
  sub_2510BE344();
  uint64_t v29 = v16;
  sub_2510BF098();
  sub_25108CD38();
  if (sub_2510BF1C8())
  {
    unint64_t v17 = &v8[*(int *)(v3 + 48)];
    uint64_t v27 = v3;
    uint64_t v28 = a1;
    int64_t v18 = v6;
    int64_t v19 = (void (*)(char *, char *, uint64_t))v10[4];
    v19(v8, v15, v9);
    v19(v17, v13, v9);
    int64_t v20 = &v18[*(int *)(v3 + 48)];
    uint64_t v21 = (void (*)(char *, char *, uint64_t))v10[2];
    v21(v18, v8, v9);
    v21(v20, v17, v9);
    uint64_t v22 = v28;
    v19(v28, v18, v9);
    uint64_t v23 = (void (*)(char *, uint64_t))v10[1];
    v23(v20, v9);
    uint64_t v24 = &v18[*(int *)(v27 + 48)];
    v19(v18, v8, v9);
    v19(v24, v17, v9);
    v19(&v22[*(int *)(v29 + 36)], v24, v9);
    return ((uint64_t (*)(char *, uint64_t))v23)(v18, v9);
  }
  else
  {
    __break(1u);
    return sub_2510BE678();
  }
}

uint64_t sub_2510BE678()
{
  return MEMORY[0x270EEE098]();
}

uint64_t sub_2510BE688()
{
  return MEMORY[0x270EEE258]();
}

uint64_t sub_2510BE698()
{
  return MEMORY[0x270EEE2C8]();
}

uint64_t sub_2510BE6A8()
{
  return MEMORY[0x270EEE2F0]();
}

uint64_t sub_2510BE6B8()
{
  return MEMORY[0x270EEE300]();
}

uint64_t sub_2510BE6C8()
{
  return MEMORY[0x270EEE308]();
}

uint64_t sub_2510BE6D8()
{
  return MEMORY[0x270EEE338]();
}

uint64_t sub_2510BE6E8()
{
  return MEMORY[0x270EEE618]();
}

uint64_t sub_2510BE6F8()
{
  return MEMORY[0x270EEE628]();
}

uint64_t sub_2510BE708()
{
  return MEMORY[0x270EEE638]();
}

uint64_t sub_2510BE718()
{
  return MEMORY[0x270EEE648]();
}

uint64_t sub_2510BE728()
{
  return MEMORY[0x270EEE658]();
}

uint64_t sub_2510BE738()
{
  return MEMORY[0x270EEE670]();
}

uint64_t sub_2510BE748()
{
  return MEMORY[0x270EEE688]();
}

uint64_t sub_2510BE758()
{
  return MEMORY[0x270EEE738]();
}

uint64_t sub_2510BE768()
{
  return MEMORY[0x270EEE768]();
}

uint64_t sub_2510BE778()
{
  return MEMORY[0x270EEE7B0]();
}

uint64_t sub_2510BE788()
{
  return MEMORY[0x270EEE890]();
}

uint64_t sub_2510BE798()
{
  return MEMORY[0x270EEE8E8]();
}

uint64_t sub_2510BE7A8()
{
  return MEMORY[0x270EEE980]();
}

uint64_t sub_2510BE7B8()
{
  return MEMORY[0x270EEEA60]();
}

uint64_t sub_2510BE828()
{
  return MEMORY[0x270EEF800]();
}

uint64_t sub_2510BE838()
{
  return MEMORY[0x270EEF840]();
}

uint64_t sub_2510BE848()
{
  return MEMORY[0x270EEFFB0]();
}

uint64_t sub_2510BE858()
{
  return MEMORY[0x270EF0070]();
}

uint64_t sub_2510BE868()
{
  return MEMORY[0x270EF0090]();
}

uint64_t sub_2510BE878()
{
  return MEMORY[0x270EF00B0]();
}

uint64_t sub_2510BE888()
{
  return MEMORY[0x270EF0120]();
}

uint64_t sub_2510BE898()
{
  return MEMORY[0x270EF0178]();
}

uint64_t sub_2510BE8A8()
{
  return MEMORY[0x270EF02B0]();
}

uint64_t sub_2510BE8B8()
{
  return MEMORY[0x270EF02C8]();
}

uint64_t sub_2510BE8C8()
{
  return MEMORY[0x270EF07E0]();
}

uint64_t sub_2510BE8D8()
{
  return MEMORY[0x270EF0998]();
}

uint64_t sub_2510BE8E8()
{
  return MEMORY[0x270EF0B88]();
}

uint64_t sub_2510BE8F8()
{
  return MEMORY[0x270EF0BA8]();
}

uint64_t sub_2510BE908()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t sub_2510BE918()
{
  return MEMORY[0x270EF0C88]();
}

uint64_t sub_2510BE928()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t sub_2510BE938()
{
  return MEMORY[0x270EF0D78]();
}

uint64_t sub_2510BE948()
{
  return MEMORY[0x270EF0EE0]();
}

uint64_t sub_2510BE958()
{
  return MEMORY[0x270EF10A8]();
}

uint64_t sub_2510BE968()
{
  return MEMORY[0x270EF1100]();
}

uint64_t sub_2510BE978()
{
  return MEMORY[0x270EF1138]();
}

uint64_t sub_2510BE988()
{
  return MEMORY[0x270EF1248]();
}

uint64_t sub_2510BE998()
{
  return MEMORY[0x270EF1378]();
}

uint64_t sub_2510BE9A8()
{
  return MEMORY[0x270EF1388]();
}

uint64_t sub_2510BE9B8()
{
  return MEMORY[0x270EF13A8]();
}

uint64_t sub_2510BE9C8()
{
  return MEMORY[0x270EF1428]();
}

uint64_t sub_2510BE9D8()
{
  return MEMORY[0x270EF1430]();
}

uint64_t sub_2510BE9E8()
{
  return MEMORY[0x270EF1440]();
}

uint64_t sub_2510BE9F8()
{
  return MEMORY[0x270EF1608]();
}

uint64_t sub_2510BEA08()
{
  return MEMORY[0x270F05840]();
}

uint64_t sub_2510BEA18()
{
  return MEMORY[0x270F05890]();
}

uint64_t sub_2510BEA28()
{
  return MEMORY[0x270F058A0]();
}

uint64_t sub_2510BEA38()
{
  return MEMORY[0x270F058B0]();
}

uint64_t sub_2510BEA48()
{
  return MEMORY[0x270F058C8]();
}

uint64_t sub_2510BEA58()
{
  return MEMORY[0x270F058D8]();
}

uint64_t sub_2510BEA68()
{
  return MEMORY[0x270F05988]();
}

uint64_t sub_2510BEA78()
{
  return MEMORY[0x270F059F8]();
}

uint64_t sub_2510BEA88()
{
  return MEMORY[0x270F05A00]();
}

uint64_t sub_2510BEA98()
{
  return MEMORY[0x270F05AD8]();
}

uint64_t sub_2510BEAA8()
{
  return MEMORY[0x270FA12A8]();
}

uint64_t sub_2510BEAB8()
{
  return MEMORY[0x270FA12B0]();
}

uint64_t sub_2510BEAC8()
{
  return MEMORY[0x270FA12C0]();
}

uint64_t sub_2510BEAD8()
{
  return MEMORY[0x270FA12C8]();
}

uint64_t sub_2510BEAE8()
{
  return MEMORY[0x270FA12D0]();
}

uint64_t sub_2510BEAF8()
{
  return MEMORY[0x270FA12D8]();
}

uint64_t sub_2510BEB08()
{
  return MEMORY[0x270FA12F0]();
}

uint64_t sub_2510BEB18()
{
  return MEMORY[0x270FA1300]();
}

uint64_t sub_2510BEB28()
{
  return MEMORY[0x270FA1308]();
}

uint64_t sub_2510BEB38()
{
  return MEMORY[0x270FA1328]();
}

uint64_t sub_2510BEB48()
{
  return MEMORY[0x270FA1330]();
}

uint64_t sub_2510BEB58()
{
  return MEMORY[0x270FA1338]();
}

uint64_t sub_2510BEB68()
{
  return MEMORY[0x270FA1340]();
}

uint64_t sub_2510BEB78()
{
  return MEMORY[0x270FA2990]();
}

uint64_t sub_2510BEB88()
{
  return MEMORY[0x270FA2998]();
}

uint64_t sub_2510BEB98()
{
  return MEMORY[0x270FA29B0]();
}

uint64_t sub_2510BEBA8()
{
  return MEMORY[0x270FA29D0]();
}

uint64_t sub_2510BEBB8()
{
  return MEMORY[0x270FA2A10]();
}

uint64_t sub_2510BEBC8()
{
  return MEMORY[0x270FA2A28]();
}

uint64_t sub_2510BEBD8()
{
  return MEMORY[0x270FA1368]();
}

uint64_t sub_2510BEBE8()
{
  return MEMORY[0x270FA2A60]();
}

uint64_t sub_2510BEBF8()
{
  return MEMORY[0x270FA1390]();
}

uint64_t sub_2510BEC08()
{
  return MEMORY[0x270FA1398]();
}

uint64_t sub_2510BEC18()
{
  return MEMORY[0x270FA2AD8]();
}

uint64_t sub_2510BEC28()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t sub_2510BEC38()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t sub_2510BEC48()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t sub_2510BEC58()
{
  return MEMORY[0x270EE3828]();
}

uint64_t sub_2510BEC68()
{
  return MEMORY[0x270EE3880]();
}

uint64_t sub_2510BEC78()
{
  return MEMORY[0x270EE3888]();
}

uint64_t sub_2510BEC88()
{
  return MEMORY[0x270EE38B0]();
}

uint64_t sub_2510BEC98()
{
  return MEMORY[0x270EE3950]();
}

uint64_t sub_2510BECA8()
{
  return MEMORY[0x270EE39C8]();
}

uint64_t sub_2510BECB8()
{
  return MEMORY[0x270EE3A38]();
}

uint64_t sub_2510BECC8()
{
  return MEMORY[0x270EE3A48]();
}

uint64_t sub_2510BECD8()
{
  return MEMORY[0x270EE3A90]();
}

uint64_t sub_2510BECE8()
{
  return MEMORY[0x270EE3AE0]();
}

uint64_t sub_2510BECF8()
{
  return MEMORY[0x270EE3AE8]();
}

uint64_t sub_2510BED08()
{
  return MEMORY[0x270EE3AF0]();
}

uint64_t sub_2510BED18()
{
  return MEMORY[0x270EE3AF8]();
}

uint64_t sub_2510BED28()
{
  return MEMORY[0x270EE3B10]();
}

uint64_t sub_2510BED38()
{
  return MEMORY[0x270EE3B18]();
}

uint64_t sub_2510BED48()
{
  return MEMORY[0x270EE3B30]();
}

uint64_t sub_2510BED58()
{
  return MEMORY[0x270EE3B40]();
}

uint64_t sub_2510BED68()
{
  return MEMORY[0x270EE3B48]();
}

uint64_t sub_2510BED78()
{
  return MEMORY[0x270EE3B50]();
}

uint64_t sub_2510BED88()
{
  return MEMORY[0x270EE3B60]();
}

uint64_t sub_2510BED98()
{
  return MEMORY[0x270EE3B78]();
}

uint64_t sub_2510BEDA8()
{
  return MEMORY[0x270EE3B88]();
}

uint64_t sub_2510BEDB8()
{
  return MEMORY[0x270EE3BB0]();
}

uint64_t sub_2510BEDC8()
{
  return MEMORY[0x270EE3BB8]();
}

uint64_t sub_2510BEDD8()
{
  return MEMORY[0x270EE3CF8]();
}

uint64_t sub_2510BEDE8()
{
  return MEMORY[0x270EE3D00]();
}

uint64_t sub_2510BEDF8()
{
  return MEMORY[0x270EE3D40]();
}

uint64_t sub_2510BEE08()
{
  return MEMORY[0x270EE3D50]();
}

uint64_t sub_2510BEE18()
{
  return MEMORY[0x270EE3D68]();
}

uint64_t sub_2510BEE28()
{
  return MEMORY[0x270EE3D78]();
}

uint64_t sub_2510BEE38()
{
  return MEMORY[0x270EE3D98]();
}

uint64_t sub_2510BEE48()
{
  return MEMORY[0x270EE3DA0]();
}

uint64_t sub_2510BEE58()
{
  return MEMORY[0x270EE3E08]();
}

uint64_t sub_2510BEE68()
{
  return MEMORY[0x270EE3E18]();
}

uint64_t sub_2510BEE78()
{
  return MEMORY[0x270EE3E78]();
}

uint64_t sub_2510BEE88()
{
  return MEMORY[0x270EE3EB0]();
}

uint64_t sub_2510BEE98()
{
  return MEMORY[0x270EE3F18]();
}

uint64_t sub_2510BEEA8()
{
  return MEMORY[0x270EE3F30]();
}

uint64_t sub_2510BEEB8()
{
  return MEMORY[0x270EE3F60]();
}

uint64_t sub_2510BEEC8()
{
  return MEMORY[0x270EE3F68]();
}

uint64_t sub_2510BEED8()
{
  return MEMORY[0x270EE3FD0]();
}

uint64_t sub_2510BEEE8()
{
  return MEMORY[0x270EE4030]();
}

uint64_t sub_2510BEEF8()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t sub_2510BEF08()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t sub_2510BEF18()
{
  return MEMORY[0x270EF30B0]();
}

uint64_t sub_2510BEF28()
{
  return MEMORY[0x270EF30B8]();
}

uint64_t sub_2510BEF38()
{
  return MEMORY[0x270EF30C0]();
}

uint64_t sub_2510BEF48()
{
  return MEMORY[0x270EF30C8]();
}

uint64_t sub_2510BEF58()
{
  return MEMORY[0x270EF30D0]();
}

uint64_t sub_2510BEF68()
{
  return MEMORY[0x270EF30D8]();
}

uint64_t sub_2510BEF78()
{
  return MEMORY[0x270EF30F8]();
}

uint64_t sub_2510BEF88()
{
  return MEMORY[0x270EF3100]();
}

uint64_t sub_2510BEF98()
{
  return MEMORY[0x270EF3110]();
}

uint64_t sub_2510BEFA8()
{
  return MEMORY[0x270EF3118]();
}

uint64_t sub_2510BEFB8()
{
  return MEMORY[0x270EF3120]();
}

uint64_t sub_2510BEFC8()
{
  return MEMORY[0x270EF3128]();
}

uint64_t sub_2510BEFD8()
{
  return MEMORY[0x270EF3168]();
}

uint64_t sub_2510BEFE8()
{
  return MEMORY[0x270EF3170]();
}

uint64_t sub_2510BEFF8()
{
  return MEMORY[0x270EF3178]();
}

uint64_t sub_2510BF008()
{
  return MEMORY[0x270EF3180]();
}

uint64_t sub_2510BF018()
{
  return MEMORY[0x270EF31C8]();
}

uint64_t sub_2510BF028()
{
  return MEMORY[0x270EF31D0]();
}

uint64_t sub_2510BF038()
{
  return MEMORY[0x270EF31D8]();
}

uint64_t sub_2510BF048()
{
  return MEMORY[0x270EF31E0]();
}

uint64_t sub_2510BF058()
{
  return MEMORY[0x270EF31E8]();
}

uint64_t sub_2510BF068()
{
  return MEMORY[0x270EF31F0]();
}

uint64_t sub_2510BF078()
{
  return MEMORY[0x270EF3328]();
}

uint64_t sub_2510BF088()
{
  return MEMORY[0x270EF3330]();
}

uint64_t sub_2510BF098()
{
  return MEMORY[0x270EF3340]();
}

uint64_t sub_2510BF0A8()
{
  return MEMORY[0x270EF3348]();
}

uint64_t sub_2510BF0B8()
{
  return MEMORY[0x270EF3350]();
}

uint64_t sub_2510BF0C8()
{
  return MEMORY[0x270EF3360]();
}

uint64_t sub_2510BF0D8()
{
  return MEMORY[0x270EF3378]();
}

uint64_t sub_2510BF0E8()
{
  return MEMORY[0x270EF3390]();
}

uint64_t sub_2510BF0F8()
{
  return MEMORY[0x270F9CFC0]();
}

uint64_t sub_2510BF108()
{
  return MEMORY[0x270EF1818]();
}

uint64_t sub_2510BF118()
{
  return MEMORY[0x270EF1840]();
}

uint64_t sub_2510BF128()
{
  return MEMORY[0x270F9D0A8]();
}

uint64_t sub_2510BF138()
{
  return MEMORY[0x270F9D1D0]();
}

uint64_t sub_2510BF148()
{
  return MEMORY[0x270F9D208]();
}

uint64_t sub_2510BF158()
{
  return MEMORY[0x270F9D210]();
}

uint64_t sub_2510BF168()
{
  return MEMORY[0x270F9D318]();
}

uint64_t sub_2510BF178()
{
  return MEMORY[0x270F9D320]();
}

uint64_t sub_2510BF188()
{
  return MEMORY[0x270F9D3C8]();
}

uint64_t sub_2510BF198()
{
  return MEMORY[0x270FA2B38]();
}

uint64_t sub_2510BF1A8()
{
  return MEMORY[0x270F9D478]();
}

uint64_t sub_2510BF1B8()
{
  return MEMORY[0x270F9D488]();
}

uint64_t sub_2510BF1C8()
{
  return MEMORY[0x270F9D498]();
}

uint64_t sub_2510BF1D8()
{
  return MEMORY[0x270F9D4A0]();
}

uint64_t sub_2510BF1E8()
{
  return MEMORY[0x270F9D4A8]();
}

uint64_t sub_2510BF1F8()
{
  return MEMORY[0x270F9D4B0]();
}

uint64_t sub_2510BF208()
{
  return MEMORY[0x270F9D550]();
}

uint64_t sub_2510BF218()
{
  return MEMORY[0x270F9D598]();
}

uint64_t sub_2510BF228()
{
  return MEMORY[0x270EF19B0]();
}

uint64_t sub_2510BF238()
{
  return MEMORY[0x270EF19C8]();
}

uint64_t sub_2510BF248()
{
  return MEMORY[0x270EF19E0]();
}

uint64_t sub_2510BF258()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t sub_2510BF268()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t sub_2510BF278()
{
  return MEMORY[0x270F9D5F8]();
}

uint64_t sub_2510BF288()
{
  return MEMORY[0x270F9D600]();
}

uint64_t sub_2510BF298()
{
  return MEMORY[0x270F9D620]();
}

uint64_t sub_2510BF2A8()
{
  return MEMORY[0x270F9D648]();
}

uint64_t sub_2510BF2B8()
{
  return MEMORY[0x270F9D6B8]();
}

uint64_t sub_2510BF2C8()
{
  return MEMORY[0x270F9D708]();
}

uint64_t sub_2510BF2D8()
{
  return MEMORY[0x270F9D748]();
}

uint64_t sub_2510BF2E8()
{
  return MEMORY[0x270F9D760]();
}

uint64_t sub_2510BF2F8()
{
  return MEMORY[0x270F9D798]();
}

uint64_t sub_2510BF308()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t sub_2510BF318()
{
  return MEMORY[0x270F9D7E8]();
}

uint64_t sub_2510BF328()
{
  return MEMORY[0x270F9D800]();
}

uint64_t sub_2510BF348()
{
  return MEMORY[0x270F9D810]();
}

uint64_t sub_2510BF358()
{
  return MEMORY[0x270F9D820]();
}

uint64_t sub_2510BF368()
{
  return MEMORY[0x270F9D860]();
}

uint64_t sub_2510BF378()
{
  return MEMORY[0x270F9D878]();
}

uint64_t sub_2510BF388()
{
  return MEMORY[0x270F9D8B0]();
}

uint64_t sub_2510BF398()
{
  return MEMORY[0x270F9D8E0]();
}

uint64_t sub_2510BF3A8()
{
  return MEMORY[0x270F9D8F0]();
}

uint64_t sub_2510BF3B8()
{
  return MEMORY[0x270F9D9A0]();
}

uint64_t sub_2510BF3C8()
{
  return MEMORY[0x270F9D9D0]();
}

uint64_t sub_2510BF3D8()
{
  return MEMORY[0x270F9DA98]();
}

uint64_t sub_2510BF3E8()
{
  return MEMORY[0x270F9DB18]();
}

uint64_t sub_2510BF3F8()
{
  return MEMORY[0x270F9DBA0]();
}

uint64_t sub_2510BF408()
{
  return MEMORY[0x270EF1B88]();
}

uint64_t sub_2510BF418()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t sub_2510BF428()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t sub_2510BF438()
{
  return MEMORY[0x270F9DBC8]();
}

uint64_t sub_2510BF448()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t sub_2510BF458()
{
  return MEMORY[0x270F9DC10]();
}

uint64_t sub_2510BF468()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t sub_2510BF478()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t sub_2510BF488()
{
  return MEMORY[0x270F9DCD8]();
}

uint64_t sub_2510BF498()
{
  return MEMORY[0x270EF1BD8]();
}

uint64_t sub_2510BF4A8()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t sub_2510BF4C8()
{
  return MEMORY[0x270FA20D8]();
}

uint64_t sub_2510BF4D8()
{
  return MEMORY[0x270FA20E0]();
}

uint64_t sub_2510BF4F8()
{
  return MEMORY[0x270F9DD60]();
}

uint64_t sub_2510BF508()
{
  return MEMORY[0x270F9DDA0]();
}

uint64_t sub_2510BF518()
{
  return MEMORY[0x270EF1C98]();
}

uint64_t sub_2510BF528()
{
  return MEMORY[0x270EF1CC0]();
}

uint64_t sub_2510BF538()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t sub_2510BF548()
{
  return MEMORY[0x270F9DF38]();
}

uint64_t sub_2510BF558()
{
  return MEMORY[0x270F9DF58]();
}

uint64_t sub_2510BF568()
{
  return MEMORY[0x270F9DF60]();
}

uint64_t sub_2510BF578()
{
  return MEMORY[0x270F9DF80]();
}

uint64_t sub_2510BF588()
{
  return MEMORY[0x270F9DFD0]();
}

uint64_t sub_2510BF598()
{
  return MEMORY[0x270F9DFE8]();
}

uint64_t sub_2510BF5A8()
{
  return MEMORY[0x270F9E080]();
}

uint64_t sub_2510BF5B8()
{
  return MEMORY[0x270F9E0A0]();
}

uint64_t sub_2510BF5C8()
{
  return MEMORY[0x270F9E0D8]();
}

uint64_t sub_2510BF5D8()
{
  return MEMORY[0x270F9E0E0]();
}

uint64_t sub_2510BF5E8()
{
  return MEMORY[0x270F9E140]();
}

uint64_t sub_2510BF5F8()
{
  return MEMORY[0x270F9E178]();
}

uint64_t sub_2510BF608()
{
  return MEMORY[0x270F9E1E0]();
}

uint64_t sub_2510BF618()
{
  return MEMORY[0x270F9E330]();
}

uint64_t sub_2510BF628()
{
  return MEMORY[0x270EF33C8]();
}

uint64_t sub_2510BF638()
{
  return MEMORY[0x270EF33D8]();
}

uint64_t sub_2510BF648()
{
  return MEMORY[0x270EF33E0]();
}

uint64_t sub_2510BF658()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t sub_2510BF668()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t sub_2510BF678()
{
  return MEMORY[0x270FA2E70]();
}

uint64_t sub_2510BF688()
{
  return MEMORY[0x270FA2E80]();
}

uint64_t sub_2510BF698()
{
  return MEMORY[0x270EF33E8]();
}

uint64_t sub_2510BF6A8()
{
  return MEMORY[0x270EF33F0]();
}

uint64_t sub_2510BF6B8()
{
  return MEMORY[0x270EF33F8]();
}

uint64_t sub_2510BF6C8()
{
  return MEMORY[0x270EF3440]();
}

uint64_t sub_2510BF6D8()
{
  return MEMORY[0x270EF3448]();
}

uint64_t sub_2510BF6E8()
{
  return MEMORY[0x270EF3458]();
}

uint64_t sub_2510BF6F8()
{
  return MEMORY[0x270EF3460]();
}

uint64_t sub_2510BF708()
{
  return MEMORY[0x270EF3468]();
}

uint64_t sub_2510BF718()
{
  return MEMORY[0x270EF3470]();
}

uint64_t sub_2510BF728()
{
  return MEMORY[0x270EF3478]();
}

uint64_t sub_2510BF738()
{
  return MEMORY[0x270EF3480]();
}

uint64_t sub_2510BF748()
{
  return MEMORY[0x270EF3488]();
}

uint64_t sub_2510BF758()
{
  return MEMORY[0x270EF1F48]();
}

uint64_t sub_2510BF768()
{
  return MEMORY[0x270FA0C50]();
}

uint64_t sub_2510BF778()
{
  return MEMORY[0x270FA0D50]();
}

uint64_t sub_2510BF788()
{
  return MEMORY[0x270FA0DB8]();
}

uint64_t sub_2510BF798()
{
  return MEMORY[0x270EF35C8]();
}

uint64_t sub_2510BF7A8()
{
  return MEMORY[0x270EF35D0]();
}

uint64_t sub_2510BF7B8()
{
  return MEMORY[0x270EF2180]();
}

uint64_t sub_2510BF7C8()
{
  return MEMORY[0x270FA1170]();
}

uint64_t sub_2510BF7D8()
{
  return MEMORY[0x270FA1180]();
}

uint64_t sub_2510BF7E8()
{
  return MEMORY[0x270FA1190]();
}

uint64_t sub_2510BF7F8()
{
  return MEMORY[0x270FA11A0]();
}

uint64_t sub_2510BF808()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t sub_2510BF818()
{
  return MEMORY[0x270F9E530]();
}

uint64_t sub_2510BF828()
{
  return MEMORY[0x270F9E560]();
}

uint64_t sub_2510BF838()
{
  return MEMORY[0x270EF23E8]();
}

uint64_t sub_2510BF848()
{
  return MEMORY[0x270EF2478]();
}

uint64_t sub_2510BF858()
{
  return MEMORY[0x270FA13A0]();
}

uint64_t sub_2510BF868()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t sub_2510BF878()
{
  return MEMORY[0x270F9E800]();
}

uint64_t sub_2510BF888()
{
  return MEMORY[0x270F9E818]();
}

uint64_t sub_2510BF898()
{
  return MEMORY[0x270F9E848]();
}

uint64_t sub_2510BF8A8()
{
  return MEMORY[0x270F9E858]();
}

uint64_t sub_2510BF8B8()
{
  return MEMORY[0x270F9E870]();
}

uint64_t sub_2510BF8C8()
{
  return MEMORY[0x270F9E958]();
}

uint64_t sub_2510BF8D8()
{
  return MEMORY[0x270F9E960]();
}

uint64_t sub_2510BF8E8()
{
  return MEMORY[0x270F9E968]();
}

uint64_t sub_2510BF8F8()
{
  return MEMORY[0x270F9E970]();
}

uint64_t sub_2510BF908()
{
  return MEMORY[0x270F9E978]();
}

uint64_t sub_2510BF918()
{
  return MEMORY[0x270F9E988]();
}

uint64_t sub_2510BF928()
{
  return MEMORY[0x270F9E9A8]();
}

uint64_t sub_2510BF938()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t sub_2510BF948()
{
  return MEMORY[0x270F9E9C8]();
}

uint64_t sub_2510BF958()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t sub_2510BF968()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t sub_2510BF978()
{
  return MEMORY[0x270F9EA78]();
}

uint64_t sub_2510BF988()
{
  return MEMORY[0x270F9EA90]();
}

uint64_t sub_2510BF998()
{
  return MEMORY[0x270F9EA98]();
}

uint64_t sub_2510BF9A8()
{
  return MEMORY[0x270F9EAD0]();
}

uint64_t sub_2510BF9B8()
{
  return MEMORY[0x270F9EAE0]();
}

uint64_t sub_2510BF9C8()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t sub_2510BF9D8()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t sub_2510BF9E8()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t sub_2510BF9F8()
{
  return MEMORY[0x270F9EBD8]();
}

uint64_t sub_2510BFA08()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t sub_2510BFA18()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t sub_2510BFA28()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t sub_2510BFA38()
{
  return MEMORY[0x270F9EC48]();
}

uint64_t sub_2510BFA48()
{
  return MEMORY[0x270F9EC88]();
}

uint64_t sub_2510BFA58()
{
  return MEMORY[0x270F9EC90]();
}

uint64_t sub_2510BFA68()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t sub_2510BFA78()
{
  return MEMORY[0x270F9ED90]();
}

uint64_t sub_2510BFA88()
{
  return MEMORY[0x270F9EF50]();
}

uint64_t sub_2510BFA98()
{
  return MEMORY[0x270F9EF88]();
}

uint64_t sub_2510BFAA8()
{
  return MEMORY[0x270F9EFC0]();
}

uint64_t sub_2510BFAB8()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t sub_2510BFAC8()
{
  return MEMORY[0x270F9EFF0]();
}

uint64_t sub_2510BFAD8()
{
  return MEMORY[0x270F9EFF8]();
}

uint64_t sub_2510BFAE8()
{
  return MEMORY[0x270F9F000]();
}

uint64_t sub_2510BFAF8()
{
  return MEMORY[0x270F9F080]();
}

uint64_t sub_2510BFB08()
{
  return MEMORY[0x270F9F090]();
}

uint64_t sub_2510BFB18()
{
  return MEMORY[0x270F9F098]();
}

uint64_t sub_2510BFB28()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t sub_2510BFB38()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t sub_2510BFB48()
{
  return MEMORY[0x270F9F0B8]();
}

uint64_t sub_2510BFB58()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t sub_2510BFB78()
{
  return MEMORY[0x270F9F230]();
}

uint64_t sub_2510BFB88()
{
  return MEMORY[0x270F9F250]();
}

uint64_t sub_2510BFB98()
{
  return MEMORY[0x270F9F258]();
}

uint64_t sub_2510BFBA8()
{
  return MEMORY[0x270F9F318]();
}

uint64_t sub_2510BFBB8()
{
  return MEMORY[0x270F9F360]();
}

uint64_t sub_2510BFBC8()
{
  return MEMORY[0x270F9F390]();
}

uint64_t sub_2510BFBD8()
{
  return MEMORY[0x270F9F458]();
}

uint64_t sub_2510BFBE8()
{
  return MEMORY[0x270F9F4C8]();
}

uint64_t sub_2510BFBF8()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t sub_2510BFC08()
{
  return MEMORY[0x270F9F4F8]();
}

uint64_t sub_2510BFC18()
{
  return MEMORY[0x270F9F7C0]();
}

uint64_t sub_2510BFC28()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t sub_2510BFC38()
{
  return MEMORY[0x270F9F918]();
}

uint64_t sub_2510BFC48()
{
  return MEMORY[0x270F9FA88]();
}

uint64_t sub_2510BFC58()
{
  return MEMORY[0x270F9FA98]();
}

uint64_t sub_2510BFC68()
{
  return MEMORY[0x270F9FAA8]();
}

uint64_t sub_2510BFC78()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t sub_2510BFC88()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t sub_2510BFCB8()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t sub_2510BFCC8()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t sub_2510BFCD8()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t sub_2510BFCE8()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t sub_2510BFCF8()
{
  return MEMORY[0x270F9FC28]();
}

uint64_t sub_2510BFD08()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_2510BFD18()
{
  return MEMORY[0x270F9FC60]();
}

uint64_t sub_2510BFD28()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t sub_2510BFD38()
{
  return MEMORY[0x270EE4068]();
}

uint64_t sub_2510BFD48()
{
  return MEMORY[0x270EE4070]();
}

uint64_t sub_2510BFD58()
{
  return MEMORY[0x270EE4078]();
}

uint64_t sub_2510BFD68()
{
  return MEMORY[0x270F9FCF8]();
}

uint64_t sub_2510BFD78()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t sub_2510BFD88()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t sub_2510BFDB8()
{
  return MEMORY[0x270FA0128]();
}

uint64_t HKShowSensitiveLogItems()
{
  return MEMORY[0x270EF3818]();
}

uint64_t HKStateOfMindReflectiveIntervalFromNSString()
{
  return MEMORY[0x270EF3838]();
}

uint64_t NSStringFromHKStateOfMindReflectiveInterval()
{
  return MEMORY[0x270EF38F0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

uint64_t _HKValidDataTypeCode()
{
  return MEMORY[0x270EF39D8]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x270FA0170]();
}

void bzero(void *a1, size_t a2)
{
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x270EDA738](*(void *)&token);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x270EDA760](name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x270EDA770](name, out_token, queue, handler);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return MEMORY[0x270EDAAF0]();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return MEMORY[0x270EDAB08]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x270FA23F8]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x270FA2408]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x270FA2410]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x270FA0228]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x270FA0278]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x270FA0288]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x270FA0310]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x270FA0330]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getExistentialMetatypeMetadata()
{
  return MEMORY[0x270FA0350]();
}

uint64_t swift_getExistentialTypeMetadata()
{
  return MEMORY[0x270FA0358]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x270FA03C8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x270FA0410]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x270FA0430]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x270FA0470]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x270FA05E8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x270FA05F0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x270FA05F8]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x270FA0630]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x270FA0648]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x270FA0650]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x270FA0658]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}