void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      v7 = __len | 7;
    }
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_24F6B65E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void __clang_call_terminate(void *a1)
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_24F6B68FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_24F6B69A0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      size_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *int v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            int v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void sub_24F6B7368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6B74C8(_Unwind_Exception *a1)
{
  int8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_24F6B759C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DYMTLFunctionPlayer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_24F6B770C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_24F6B77B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6B78C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6B7974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6B800C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58)
{
  AutoPerfStatSamplingControl::~AutoPerfStatSamplingControl((id *)(v63 - 216));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_24F6B91B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58)
{
  _Unwind_Resume(a1);
}

void DecodeRGB10A8_2P_XR10(void *a1, uint64_t a2)
{
  id v14 = a1;
  uint64_t v3 = (__IOSurface *)[v14 iosurface];
  IOSurfaceLock(v3, 0, 0);
  size_t PlaneCount = IOSurfaceGetPlaneCount(v3);
  if (PlaneCount)
  {
    size_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      size_t HeightOfPlane = IOSurfaceGetHeightOfPlane(v3, v5);
      size_t WidthOfPlane = IOSurfaceGetWidthOfPlane(v3, v5);
      size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(v3, v5);
      size_t BytesPerElementOfPlane = IOSurfaceGetBytesPerElementOfPlane(v3, v5);
      BaseAddressOfPlane = (char *)IOSurfaceGetBaseAddressOfPlane(v3, v5);
      if (HeightOfPlane)
      {
        unint64_t v12 = BaseAddressOfPlane;
        size_t v13 = BytesPerElementOfPlane * WidthOfPlane;
        do
        {
          memcpy(v12, (const void *)(a2 + v6), v13);
          v6 += v13;
          v12 += BytesPerRowOfPlane;
          --HeightOfPlane;
        }
        while (HeightOfPlane);
      }
      ++v5;
    }
    while (v5 != PlaneCount);
  }
  IOSurfaceUnlock(v3, 0, 0);
}

void sub_24F6B9564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void GPUTools::MTL::Utils::DYMTLDeviceDescriptor::~DYMTLDeviceDescriptor(GPUTools::MTL::Utils::DYMTLDeviceDescriptor *this)
{
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void sub_24F6B97A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  AutoPerfStatSamplingControl::~AutoPerfStatSamplingControl((id *)va);
  _Unwind_Resume(a1);
}

void sub_24F6BA1AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

objc_object *DYMTLGetOriginalObject(objc_object *a1)
{
  uint64_t v1 = a1;
  SEL Uid = sel_getUid("baseObject");
  while ((objc_opt_respondsToSelector() & 1) != 0)
  {
    uint64_t v3 = ((void (*)(objc_object *, SEL))[(objc_object *)v1 methodForSelector:Uid])(v1, Uid);

    uint64_t v1 = (objc_object *)v3;
  }
  return v1;
}

void sub_24F6BA4B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AutoPerfStatSamplingControl::AutoPerfStatSamplingControl(uint64_t a1, void *a2)
{
  id v4 = a2;
  *(void *)(a1 + 16) = 0;
  objc_storeStrong((id *)(a1 + 16), a2);
  int v5 = [*(id *)(a1 + 16) isStatEnabled];
  *(unsigned char *)(a1 + 8) = v5;
  *(void *)a1 = 0;
  if (v5)
  {
    *(void *)a1 = [*(id *)(a1 + 16) getStatLocations];
    [*(id *)(a1 + 16) setStatLocations:0];
  }

  return a1;
}

void sub_24F6BA548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AutoPerfStatSamplingControl::~AutoPerfStatSamplingControl(id *this)
{
  if (*((unsigned char *)this + 8)) {
    [this[2] setStatLocations:*this];
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  size_t v13 = (void *)(a1 + 16);
  i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *size_t v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6BA7D4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,NSData * {__strong}>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,NSData * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,NSData * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  __n128 result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  void *v6;
  void *result;
  unint64_t v8;

  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  __n128 result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,objc_object  {objcproto9MTLDevice}* {__strong}>>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v12 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  a3[1] = 0;
  void *i = 0;
  i[1] = v6;
  i[2] = v13;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *unint64_t v22 = i;
    goto LABEL_39;
  }
  void *i = *v12;
  *unint64_t v12 = i;
  *(void *)(v21 + 8 * v3) = v12;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v23 >= v7) {
        v23 %= v7;
      }
    }
    else
    {
      v23 &= v7 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6BABC8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *uint64_t v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6BAE14(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__erase_unique<unsigned long long>(void *a1, unint64_t *a2)
{
  __n128 result = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = (id *)__p;
  __p = 0;
  if (v3)
  {
    if (v6) {

    }
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  char v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    char v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *unint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    *uint64_t v20 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6BB200(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    __n128 result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24F6BB274(_Unwind_Exception *exception_object)
{
  int8x8_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void *std::__hash_table<std::__hash_value_type<void *,unsigned long>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,unsigned long>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,unsigned long>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *unint64_t v22 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6BB550(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,NSData * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  float v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *float v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6BB794(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

unint64_t GPUTools::FD::Argument::ViewAsScalarArray<unsigned long long>(uint64_t a1, unint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 22);
  if (v2)
  {
    if (*(unsigned __int16 *)(a1 + 20) > a2) {
      goto LABEL_5;
    }
    return 0;
  }
  if (a2) {
    return 0;
  }
LABEL_5:
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      return *(char *)(*(void *)a1 + a2);
    case 2:
      return *(unsigned __int8 *)(*(void *)a1 + a2);
    case 3:
      return *(__int16 *)(*(void *)a1 + 2 * a2);
    case 4:
      return *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
    case 5:
      int v4 = *(_DWORD *)(a1 + 12);
      unint64_t result = *(int *)(*(void *)a1 + 4 * a2);
      if (v4 != 19) {
        return result;
      }
      double v5 = (double)(int)result * 0.0000152587891;
LABEL_10:
      unint64_t result = (unint64_t)v5;
      break;
    case 6:
      return *(unsigned int *)(*(void *)a1 + 4 * a2);
    case 7:
    case 8:
    case 0xB:
    case 0xC:
      return *(void *)(*(void *)a1 + 8 * a2);
    case 9:
      return (unint64_t)*(float *)(*(void *)a1 + 4 * a2);
    case 0xA:
      double v5 = *(double *)(*(void *)a1 + 8 * a2);
      goto LABEL_10;
    case 0xD:
      if ((v2 & 0x10) == 0) {
        return 0;
      }
      return GPUTools::FD::Argument::ViewAsGLObjectName((GPUTools::FD::Argument *)a1);
    default:
      return 0;
  }
  return result;
}

uint64_t GPUTools::FD::Argument::ViewAsScalarArray<unsigned int>(uint64_t a1, unint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 22);
  if (v2)
  {
    if (*(unsigned __int16 *)(a1 + 20) > a2) {
      goto LABEL_5;
    }
    return 0;
  }
  if (a2) {
    return 0;
  }
LABEL_5:
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      return *(char *)(*(void *)a1 + a2);
    case 2:
      return *(unsigned __int8 *)(*(void *)a1 + a2);
    case 3:
      return *(__int16 *)(*(void *)a1 + 2 * a2);
    case 4:
      return *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
    case 5:
      int v4 = *(_DWORD *)(a1 + 12);
      uint64_t result = *(unsigned int *)(*(void *)a1 + 4 * a2);
      if (v4 != 19) {
        return result;
      }
      double v5 = (double)(int)result * 0.0000152587891;
LABEL_12:
      uint64_t result = v5;
      break;
    case 6:
      return *(unsigned int *)(*(void *)a1 + 4 * a2);
    case 7:
    case 0xB:
    case 0xC:
      return *(void *)(*(void *)a1 + 8 * a2);
    case 8:
      return *(void *)(*(void *)a1 + 8 * a2);
    case 9:
      return *(float *)(*(void *)a1 + 4 * a2);
    case 0xA:
      double v5 = *(double *)(*(void *)a1 + 8 * a2);
      goto LABEL_12;
    case 0xD:
      if ((v2 & 0x10) == 0) {
        return 0;
      }
      return GPUTools::FD::Argument::ViewAsGLObjectName((GPUTools::FD::Argument *)a1);
    default:
      return 0;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,NSData * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,NSData * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  __int16 v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_24F6BBB34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6BBC50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6BC918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(a1);
}

__n64 GPUTools::FD::Argument::ViewAsScalarArray<double>(uint64_t a1, unint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 22);
  if (v2)
  {
    result.n64_f64[0] = 0.0;
    if (*(unsigned __int16 *)(a1 + 20) <= a2) {
      return result;
    }
  }
  else
  {
    result.n64_f64[0] = 0.0;
    if (a2) {
      return result;
    }
  }
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      int v4 = *(char *)(*(void *)a1 + a2);
      goto LABEL_12;
    case 2:
      result.n64_u8[0] = *(unsigned char *)(*(void *)a1 + a2);
      goto LABEL_18;
    case 3:
      int v4 = *(__int16 *)(*(void *)a1 + 2 * a2);
LABEL_12:
      result.n64_f64[0] = (double)v4;
      return result;
    case 4:
      result.n64_u16[0] = *(_WORD *)(*(void *)a1 + 2 * a2);
      goto LABEL_18;
    case 5:
      result.n64_f64[0] = (double)*(int *)(*(void *)a1 + 4 * a2);
      if (*(_DWORD *)(a1 + 12) == 19) {
        result.n64_f64[0] = result.n64_f64[0] * 0.0000152587891;
      }
      return result;
    case 6:
      result.n64_u32[0] = *(_DWORD *)(*(void *)a1 + 4 * a2);
      goto LABEL_18;
    case 7:
    case 0xB:
      result.n64_f64[0] = (double)*(uint64_t *)(*(void *)a1 + 8 * a2);
      return result;
    case 8:
    case 0xC:
      result.n64_u64[0] = *(unint64_t *)(*(void *)a1 + 8 * a2);
LABEL_18:
      result.n64_f64[0] = (double)result.n64_u64[0];
      break;
    case 9:
      result.n64_f64[0] = *(float *)(*(void *)a1 + 4 * a2);
      break;
    case 0xA:
      result.n64_u64[0] = *(unint64_t *)(*(void *)a1 + 8 * a2);
      break;
    case 0xD:
      if ((v2 & 0x10) != 0) {
        result.n64_f64[0] = (double)GPUTools::FD::Argument::ViewAsGLObjectName((GPUTools::FD::Argument *)a1);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t GPUTools::FD::Argument::ViewAsScalarArray<long long>(uint64_t a1, unint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 22);
  if (v2)
  {
    if (*(unsigned __int16 *)(a1 + 20) > a2) {
      goto LABEL_5;
    }
    return 0;
  }
  if (a2) {
    return 0;
  }
LABEL_5:
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      return *(char *)(*(void *)a1 + a2);
    case 2:
      return *(unsigned __int8 *)(*(void *)a1 + a2);
    case 3:
      return *(__int16 *)(*(void *)a1 + 2 * a2);
    case 4:
      return *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
    case 5:
      int v4 = *(_DWORD *)(a1 + 12);
      uint64_t result = *(int *)(*(void *)a1 + 4 * a2);
      if (v4 != 19) {
        return result;
      }
      double v5 = (double)(int)result * 0.0000152587891;
LABEL_10:
      uint64_t result = (uint64_t)v5;
      break;
    case 6:
      return *(unsigned int *)(*(void *)a1 + 4 * a2);
    case 7:
    case 8:
    case 0xB:
    case 0xC:
      return *(void *)(*(void *)a1 + 8 * a2);
    case 9:
      return (uint64_t)*(float *)(*(void *)a1 + 4 * a2);
    case 0xA:
      double v5 = *(double *)(*(void *)a1 + 8 * a2);
      goto LABEL_10;
    case 0xD:
      if ((v2 & 0x10) == 0) {
        return 0;
      }
      return GPUTools::FD::Argument::ViewAsGLObjectName((GPUTools::FD::Argument *)a1);
    default:
      return 0;
  }
  return result;
}

unint64_t GPUTools::FD::Argument::ViewAsScalarArray<MTLPixelFormat>(uint64_t a1, unint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 22);
  if (v2)
  {
    if (*(unsigned __int16 *)(a1 + 20) > a2) {
      goto LABEL_5;
    }
    return 0;
  }
  if (a2) {
    return 0;
  }
LABEL_5:
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      return *(char *)(*(void *)a1 + a2);
    case 2:
      return *(unsigned __int8 *)(*(void *)a1 + a2);
    case 3:
      return *(__int16 *)(*(void *)a1 + 2 * a2);
    case 4:
      return *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
    case 5:
      int v4 = *(_DWORD *)(a1 + 12);
      unint64_t result = *(int *)(*(void *)a1 + 4 * a2);
      if (v4 != 19) {
        return result;
      }
      double v5 = (double)(int)result * 0.0000152587891;
LABEL_10:
      unint64_t result = (unint64_t)v5;
      break;
    case 6:
      return *(unsigned int *)(*(void *)a1 + 4 * a2);
    case 7:
    case 8:
    case 0xB:
    case 0xC:
      return *(void *)(*(void *)a1 + 8 * a2);
    case 9:
      return (unint64_t)*(float *)(*(void *)a1 + 4 * a2);
    case 0xA:
      double v5 = *(double *)(*(void *)a1 + 8 * a2);
      goto LABEL_10;
    case 0xD:
      if ((v2 & 0x10) == 0) {
        return 0;
      }
      return GPUTools::FD::Argument::ViewAsGLObjectName((GPUTools::FD::Argument *)a1);
    default:
      return 0;
  }
  return result;
}

BOOL GPUTools::FD::Argument::ViewAsScalarArray<BOOL>(uint64_t a1, unint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 22);
  if ((v2 & 1) == 0)
  {
    if (!a2) {
      goto LABEL_5;
    }
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 20) <= a2) {
    return 0;
  }
LABEL_5:
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
    case 2:
      int v4 = *(unsigned __int8 *)(*(void *)a1 + a2);
      goto LABEL_14;
    case 3:
    case 4:
      int v4 = *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
      goto LABEL_14;
    case 5:
      int v4 = *(_DWORD *)(*(void *)a1 + 4 * a2);
      if (*(_DWORD *)(a1 + 12) != 19) {
        goto LABEL_14;
      }
      double v5 = (double)v4 * 0.0000152587891;
      goto LABEL_12;
    case 6:
      int v4 = *(_DWORD *)(*(void *)a1 + 4 * a2);
LABEL_14:
      BOOL v3 = v4 == 0;
      return !v3;
    case 7:
    case 8:
    case 0xB:
    case 0xC:
      BOOL v3 = *(void *)(*(void *)a1 + 8 * a2) == 0;
      return !v3;
    case 9:
      BOOL v3 = *(float *)(*(void *)a1 + 4 * a2) == 0.0;
      return !v3;
    case 0xA:
      double v5 = *(double *)(*(void *)a1 + 8 * a2);
LABEL_12:
      BOOL v3 = v5 == 0.0;
      break;
    case 0xD:
      if ((v2 & 0x10) == 0) {
        return 0;
      }
      BOOL v3 = GPUTools::FD::Argument::ViewAsGLObjectName((GPUTools::FD::Argument *)a1) == 0;
      break;
    default:
      return 0;
  }
  return !v3;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto15CAMetalDrawable}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto15CAMetalDrawable}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto15CAMetalDrawable}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto15CAMetalDrawable}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  float v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *float v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6BD348(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,BOOL>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BOOL>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint8x8_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint8x8_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint8x8_t v11 = operator new(0x20uLL);
  *uint8x8_t v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  *((unsigned char *)v11 + 24) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint8x8_t v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }
  *uint8x8_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_24F6BD574(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto15CAMetalDrawable}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto15CAMetalDrawable}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto15CAMetalDrawable}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto15CAMetalDrawable}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::piecewise_construct_t const&<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  float v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *unint64_t v21 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *float v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6BD7B8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

uint64_t GPUTools::FD::Argument::ViewAsScalarArray<int>(uint64_t a1, unint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 22);
  if (v2)
  {
    if (*(unsigned __int16 *)(a1 + 20) > a2) {
      goto LABEL_5;
    }
    return 0;
  }
  if (a2) {
    return 0;
  }
LABEL_5:
  switch(*(_DWORD *)(a1 + 8))
  {
    case 1:
      return *(char *)(*(void *)a1 + a2);
    case 2:
      return *(unsigned __int8 *)(*(void *)a1 + a2);
    case 3:
      return *(__int16 *)(*(void *)a1 + 2 * a2);
    case 4:
      return *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
    case 5:
      int v4 = *(_DWORD *)(a1 + 12);
      uint64_t result = *(unsigned int *)(*(void *)a1 + 4 * a2);
      if (v4 != 19) {
        return result;
      }
      double v5 = (double)(int)result * 0.0000152587891;
LABEL_12:
      uint64_t result = (int)v5;
      break;
    case 6:
      return *(unsigned int *)(*(void *)a1 + 4 * a2);
    case 7:
    case 0xB:
    case 0xC:
      return *(void *)(*(void *)a1 + 8 * a2);
    case 8:
      return *(void *)(*(void *)a1 + 8 * a2);
    case 9:
      return (int)*(float *)(*(void *)a1 + 4 * a2);
    case 0xA:
      double v5 = *(double *)(*(void *)a1 + 8 * a2);
      goto LABEL_12;
    case 0xD:
      if ((v2 & 0x10) == 0) {
        return 0;
      }
      return GPUTools::FD::Argument::ViewAsGLObjectName((GPUTools::FD::Argument *)a1);
    default:
      return 0;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,BOOL>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BOOL>>>::~__hash_table(uint64_t a1)
{
  __int16 v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      BOOL v3 = (void *)*v2;
      operator delete(v2);
      __int16 v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_24F6BDCCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6BDE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6BE308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_24F6BE43C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6BE6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6BE954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6BEBF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6BECF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x2533623E0);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    char v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    char v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    char v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      __int16 v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      BOOL v3 = (uint64_t *)v2[2];
      size_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), size_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint8x8_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint8x8_t v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              BOOL v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint8x8_t v9 = v2;
            v2[2] = (uint64_t)v9;
            BOOL v3 = v9[2];
            __int16 v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *BOOL v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), size_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *__int16 v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            BOOL v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          BOOL v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        __int16 v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *__int16 v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *size_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_24F6BF1F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void DYMTLEncodeIndirectCommandBuffer(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v8 = a1;
  id v9 = a6;
  if (*(void *)a2 <= 0xFuLL)
  {
    id v109 = v8;
    id v119 = v8;
    id v108 = v9;
    id v10 = v9;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v133 = 0u;
    GPUTools::MTL::Utils::DYMTLCreateIndirectCommandEncoder((uint64_t *)a2, (uint64_t)&v133);
    if (a3)
    {
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = (const char *)(a4 + *((void *)&v139 + 1) * v11);
        uint64_t v13 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::commandType((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
        float v14 = [v119 indirectRenderCommandAtIndex:v11];
        float v15 = v14;
        switch(v13)
        {
          case 0:
            [v14 reset];
            goto LABEL_40;
          case 1:
            BOOL v16 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
            [v15 drawPrimitives:*(void *)v16 vertexStart:*((void *)v16 + 1) vertexCount:*((void *)v16 + 2) instanceCount:*((void *)v16 + 3) baseInstance:*((void *)v16 + 4)];
            break;
          case 2:
            unint64_t v17 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawIndexedArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
            unint64_t v18 = [v10 bufferIdAndOffsetForGPUVirtualAddress:*((void *)v17 + 3)];
            uint64_t v20 = v19;
            GetObjectForKey(a5, v18);
            unint64_t v21 = (objc_object *)objc_claimAutoreleasedReturnValue();
            unint64_t v22 = DYMTLGetOriginalObject(v21);

            if (v22)
            {
              [v15 drawIndexedPrimitives:*(void *)v17 indexCount:*((void *)v17 + 1) indexType:*((void *)v17 + 2) indexBuffer:v22 indexBufferOffset:v20 instanceCount:*((void *)v17 + 4) baseVertex:*((void *)v17 + 5) baseInstance:*((void *)v17 + 6)];
            }
            else
            {
              [v15 reset];
              unint64_t v22 = 0;
            }
            goto LABEL_26;
          case 4:
            unint64_t v23 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawPatchesArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
            unint64_t v24 = [v10 bufferIdAndOffsetForGPUVirtualAddress:*((void *)v23 + 3)];
            uint64_t v26 = v25;
            GetObjectForKey(a5, v24);
            uint64_t v27 = (objc_object *)objc_claimAutoreleasedReturnValue();
            v113 = v23;
            uint64_t v115 = v26;
            uint64_t v28 = DYMTLGetOriginalObject(v27);

            v117 = (void *)v28;
            LODWORD(v23) = v24 == 0;
            TessellationFactorArguments = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getTessellationFactorArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
            unint64_t v30 = [v10 bufferIdAndOffsetForGPUVirtualAddress:*(void *)TessellationFactorArguments];
            uint64_t v111 = v31;
            GetObjectForKey(a5, v30);
            uint64_t v32 = (objc_object *)objc_claimAutoreleasedReturnValue();
            uint64_t v33 = DYMTLGetOriginalObject(v32);
            unsigned int v34 = v23 ^ (v28 != 0);

            if (v33) {
              unsigned int v35 = v34;
            }
            else {
              unsigned int v35 = 0;
            }
            unint64_t v22 = v117;
            if (v35 == 1) {
              [v15 drawPatches:*v113 patchStart:v113[1] patchCount:v113[2] patchIndexBuffer:v117 patchIndexBufferOffset:v115 instanceCount:v113[4] baseInstance:v113[5] tessellationFactorBuffer:v33 tessellationFactorBufferOffset:v111 tessellationFactorBufferInstanceStride:*((void *)TessellationFactorArguments + 1)];
            }
            else {
              [v15 reset];
            }
            goto LABEL_25;
          case 8:
            uint64_t v36 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawIndexedPatchesArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
            unint64_t v37 = [v10 bufferIdAndOffsetForGPUVirtualAddress:*((void *)v36 + 3)];
            uint64_t v39 = v38;
            uint64_t v40 = GetObjectForKey(a5, v37);
            v116 = v36;
            uint64_t v41 = DYMTLGetOriginalObject((objc_object *)v40);

            LODWORD(v40) = v41 != 0;
            LODWORD(v36) = v37 == 0;
            v118 = (void *)v41;
            unint64_t v42 = [v10 bufferIdAndOffsetForGPUVirtualAddress:v116[4]];
            uint64_t v112 = v43;
            GetObjectForKey(a5, v42);
            v44 = (objc_object *)objc_claimAutoreleasedReturnValue();
            uint64_t v45 = DYMTLGetOriginalObject(v44);
            uint64_t v110 = v39;
            int v46 = v36 ^ v40;

            v114 = (void *)v45;
            if (v45) {
              int v47 = v46;
            }
            else {
              int v47 = 0;
            }
            v48 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getTessellationFactorArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
            unint64_t v49 = [v10 bufferIdAndOffsetForGPUVirtualAddress:*(void *)v48];
            uint64_t v51 = v50;
            GetObjectForKey(a5, v49);
            v52 = (objc_object *)objc_claimAutoreleasedReturnValue();
            v53 = DYMTLGetOriginalObject(v52);

            if (v53) {
              int v54 = v47;
            }
            else {
              int v54 = 0;
            }
            if (v54 == 1)
            {
              uint64_t v33 = v114;
              uint64_t v107 = v51;
              unint64_t v22 = v118;
              [v15 drawIndexedPatches:*v116 patchStart:v116[1] patchCount:v116[2] patchIndexBuffer:v118 patchIndexBufferOffset:v110 controlPointIndexBuffer:v114 controlPointIndexBufferOffset:v112 instanceCount:v116[5] baseInstance:v116[6] tessellationFactorBuffer:v53 tessellationFactorBufferOffset:v107 tessellationFactorBufferInstanceStride:*((void *)v48 + 1)];
            }
            else
            {
              unint64_t v22 = v118;
              uint64_t v33 = v114;
              [v15 reset];
            }

LABEL_25:
LABEL_26:

            break;
          default:
            break;
        }
        if (!*(unsigned char *)(a2 + 9))
        {
          unint64_t v55 = objc_msgSend(v10, "renderPipelineIdForUniqueIdentifier:", GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getPipelineStateUniqueIdentifier((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12));
          GetObjectForKey(a5, v55);
          v56 = (objc_object *)objc_claimAutoreleasedReturnValue();
          v57 = DYMTLGetOriginalObject(v56);

          [v15 setRenderPipelineState:v57];
        }
        if (!*(unsigned char *)(a2 + 8))
        {
          VertexBuffers = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getVertexBuffers((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
          unint64_t v59 = *(void *)(a2 + 16);
          if (v59)
          {
            v60 = VertexBuffers;
            for (unint64_t i = 0; i < v59; ++i)
            {
              if (*(void *)&v60[8 * i])
              {
                unint64_t v62 = objc_msgSend(v10, "bufferIdAndOffsetForGPUVirtualAddress:");
                uint64_t v64 = v63;
                GetObjectForKey(a5, v62);
                v65 = (objc_object *)objc_claimAutoreleasedReturnValue();
                v66 = DYMTLGetOriginalObject(v65);

                [v15 setVertexBuffer:v66 offset:v64 atIndex:i];
                unint64_t v59 = *(void *)(a2 + 16);
              }
            }
          }
          FragmentBuffers = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getFragmentBuffers((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v12);
          unint64_t v68 = *(void *)(a2 + 24);
          if (v68)
          {
            v69 = FragmentBuffers;
            for (unint64_t j = 0; j < v68; ++j)
            {
              if (*(void *)&v69[8 * j])
              {
                unint64_t v71 = objc_msgSend(v10, "bufferIdAndOffsetForGPUVirtualAddress:");
                uint64_t v73 = v72;
                GetObjectForKey(a5, v71);
                v74 = (objc_object *)objc_claimAutoreleasedReturnValue();
                v75 = DYMTLGetOriginalObject(v74);

                [v15 setFragmentBuffer:v75 offset:v73 atIndex:j];
                unint64_t v68 = *(void *)(a2 + 24);
              }
            }
          }
        }
LABEL_40:

        ++v11;
      }
      while (v11 != a3);
    }

    goto LABEL_68;
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFF9FLL) == 0)
  {
    id v109 = v8;
    id v119 = v8;
    id v108 = v9;
    id v76 = v9;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v133 = 0u;
    GPUTools::MTL::Utils::DYMTLCreateIndirectCommandEncoder((uint64_t *)a2, (uint64_t)&v133);
    if (!a3)
    {
LABEL_66:

LABEL_68:
      id v9 = v108;
      id v8 = v109;
      goto LABEL_69;
    }
    uint64_t v77 = 0;
    while (1)
    {
      v78 = (const char *)(a4 + *((void *)&v139 + 1) * v77);
      uint64_t v79 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::commandType((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v78);
      v80 = [v119 indirectComputeCommandAtIndex:v77];
      v81 = v80;
      if (v79 == 64) {
        break;
      }
      if (v79 == 32)
      {
        v87 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::concurrentDispatchThreadgroupsArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v78);
        uint64_t v88 = *((void *)v87 + 2);
        long long v131 = *(_OWORD *)v87;
        uint64_t v132 = v88;
        uint64_t v89 = *((void *)v87 + 5);
        long long v129 = *(_OWORD *)(v87 + 24);
        uint64_t v130 = v89;
        [v81 concurrentDispatchThreadgroups:&v131 threadsPerThreadgroup:&v129];
        v90 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::indirectDispatchArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v78);
        long long v91 = *((_OWORD *)v90 + 1);
        v128[0] = *(_OWORD *)v90;
        v128[1] = v91;
        v128[2] = *((_OWORD *)v90 + 2);
        [v81 setStageInRegion:v128];
        if (v90[64]) {
          goto LABEL_53;
        }
        goto LABEL_54;
      }
      if (v79) {
        goto LABEL_54;
      }
      [v80 reset];
LABEL_65:

      if (++v77 == a3) {
        goto LABEL_66;
      }
    }
    v82 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::concurrentDispatchThreadsArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v78);
    uint64_t v83 = *((void *)v82 + 2);
    long long v126 = *(_OWORD *)v82;
    uint64_t v127 = v83;
    uint64_t v84 = *((void *)v82 + 5);
    long long v124 = *(_OWORD *)(v82 + 24);
    uint64_t v125 = v84;
    [v81 concurrentDispatchThreads:&v126 threadsPerThreadgroup:&v124];
    v85 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::indirectDispatchArguments((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v78);
    long long v86 = *((_OWORD *)v85 + 1);
    v123[0] = *(_OWORD *)v85;
    v123[1] = v86;
    v123[2] = *((_OWORD *)v85 + 2);
    [v81 setStageInRegion:v123];
    if (v85[64]) {
LABEL_53:
    }
      [v81 setBarrier];
LABEL_54:
    if (!*(unsigned char *)(a2 + 9))
    {
      unint64_t v92 = objc_msgSend(v76, "computePipelineIdForUniqueIdentifier:", GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getPipelineStateUniqueIdentifier((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v78));
      GetObjectForKey(a5, v92);
      v93 = (objc_object *)objc_claimAutoreleasedReturnValue();
      v94 = DYMTLGetOriginalObject(v93);

      [v81 setComputePipelineState:v94];
    }
    if (!*(unsigned char *)(a2 + 8))
    {
      KernelBuffers = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getKernelBuffers((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v78);
      unint64_t v96 = *(void *)(a2 + 48);
      if (v96)
      {
        v97 = KernelBuffers;
        for (unint64_t k = 0; k < v96; ++k)
        {
          if (*(void *)&v97[8 * k])
          {
            unint64_t v99 = objc_msgSend(v76, "bufferIdAndOffsetForGPUVirtualAddress:");
            uint64_t v101 = v100;
            GetObjectForKey(a5, v99);
            v102 = (objc_object *)objc_claimAutoreleasedReturnValue();
            v103 = DYMTLGetOriginalObject(v102);

            [v81 setKernelBuffer:v103 offset:v101 atIndex:k];
            unint64_t v96 = *(void *)(a2 + 48);
          }
        }
      }
    }
    ThreadgroupMemoryLength = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getThreadgroupMemoryLength((GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *)&v133, v78);
    if (*(void *)(a2 + 64))
    {
      v105 = ThreadgroupMemoryLength;
      unint64_t v106 = 0;
      do
      {
        [v81 setThreadgroupMemoryLength:*(void *)&v105[8 * v106] atIndex:v106];
        ++v106;
      }
      while (v106 < *(void *)(a2 + 64));
    }
    goto LABEL_65;
  }
LABEL_69:
}

void sub_24F6BFAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_24F6BFE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_24F6C01DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6C03F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_24F6C05F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6C06E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6C0A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>::reserve(void **a1, unint64_t a2)
{
  size_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    int v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>(v3, a2);
    uint64_t v7 = &v6[24 * v5];
    id v9 = &v6[24 * v8];
    uint64_t v11 = (char *)*a1;
    id v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      id v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_24F6C0C64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void MakeDYMTLIndirectCommandBufferDescriptor(MTLIndirectCommandBufferDescriptor *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)(a3 + 64) = 0;
  int v6 = v5;
  *(void *)a3 = [(MTLIndirectCommandBufferDescriptor *)v5 commandTypes];
  *(unsigned char *)(a3 + 9) = [(MTLIndirectCommandBufferDescriptor *)v6 inheritPipelineState];
  *(unsigned char *)(a3 + 8) = [(MTLIndirectCommandBufferDescriptor *)v6 inheritBuffers];
  *(void *)(a3 + 16) = [(MTLIndirectCommandBufferDescriptor *)v6 maxVertexBufferBindCount];
  *(void *)(a3 + 24) = [(MTLIndirectCommandBufferDescriptor *)v6 maxFragmentBufferBindCount];
  if (objc_opt_respondsToSelector())
  {
    *(void *)(a3 + 48) = [(MTLIndirectCommandBufferDescriptor *)v6 maxKernelBufferBindCount];
    *(void *)(a3 + 64) = a2;
  }
}

void sub_24F6C0D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL DYMTLDrawRenderCommandEncoder(void *a1, uint64_t a2, uint64_t a3, GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *a4, void *a5, void *a6)
{
  id v11 = a1;
  uint64_t v12 = (const char *)(a3 + *((void *)a4 + 13) * a2);
  uint64_t v13 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::commandType(a4, v12);
  uint64_t v14 = v13;
  if (v13)
  {
    switch(v13)
    {
      case 1:
        float v15 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawArguments(a4, v12);
        [v11 drawPrimitives:*(void *)v15 vertexStart:*((void *)v15 + 1) vertexCount:*((void *)v15 + 2) instanceCount:*((void *)v15 + 3) baseInstance:*((void *)v15 + 4)];
        break;
      case 2:
        BOOL v16 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawIndexedArguments(a4, v12);
        unint64_t v17 = GPUTools::MTL::Utils::DYMTLTranslateGPUAddressToBuffer(a6, *((void *)v16 + 3));
        uint64_t v19 = v18;
        uint64_t v20 = GetObjectForKey(a5, v17);
        if (v20) {
          [v11 drawIndexedPrimitives:*(void *)v16 indexCount:*((void *)v16 + 1) indexType:*((void *)v16 + 2) indexBuffer:v20 indexBufferOffset:v19 instanceCount:*((void *)v16 + 4) baseVertex:*((void *)v16 + 5) baseInstance:*((void *)v16 + 6)];
        }
        goto LABEL_22;
      case 4:
        TessellationFactorArguments = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getTessellationFactorArguments(a4, v12);
        unint64_t v22 = GPUTools::MTL::Utils::DYMTLTranslateGPUAddressToBuffer(a6, *(void *)TessellationFactorArguments);
        uint64_t v24 = v23;
        uint64_t v25 = GetObjectForKey(a5, v22);
        if (v25) {
          [v11 setTessellationFactorBuffer:v25 offset:v24 instanceStride:*((void *)TessellationFactorArguments + 1)];
        }
        LODWORD(v26) = *((_DWORD *)TessellationFactorArguments + 4);
        [v11 setTessellationFactorScale:v26];

        uint64_t v27 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawPatchesArguments(a4, v12);
        unint64_t v28 = GPUTools::MTL::Utils::DYMTLTranslateGPUAddressToBuffer(a6, *((void *)v27 + 3));
        uint64_t v30 = v29;
        uint64_t v31 = GetObjectForKey(a5, v28);
        uint64_t v20 = (void *)v31;
        if (v25 && (v28 == 0) != (v31 != 0)) {
          [v11 drawPatches:*(void *)v27 patchStart:*((void *)v27 + 1) patchCount:*((void *)v27 + 2) patchIndexBuffer:v31 patchIndexBufferOffset:v30 instanceCount:*((void *)v27 + 4) baseInstance:*((void *)v27 + 5)];
        }
        goto LABEL_22;
      case 8:
        uint64_t v32 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getTessellationFactorArguments(a4, v12);
        unint64_t v33 = GPUTools::MTL::Utils::DYMTLTranslateGPUAddressToBuffer(a6, *(void *)v32);
        uint64_t v35 = v34;
        uint64_t v36 = GetObjectForKey(a5, v33);
        if (v36) {
          [v11 setTessellationFactorBuffer:v36 offset:v35 instanceStride:*((void *)v32 + 1)];
        }
        LODWORD(v37) = *((_DWORD *)v32 + 4);
        [v11 setTessellationFactorScale:v37];

        uint64_t v38 = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawIndexedPatchesArguments(a4, v12);
        unint64_t v39 = GPUTools::MTL::Utils::DYMTLTranslateGPUAddressToBuffer(a6, *((void *)v38 + 3));
        uint64_t v41 = v40;
        uint64_t v20 = GetObjectForKey(a5, v39);
        if (v36) {
          int v42 = (v39 == 0) ^ (v20 != 0);
        }
        else {
          int v42 = 0;
        }
        unint64_t v43 = GPUTools::MTL::Utils::DYMTLTranslateGPUAddressToBuffer(a6, *((void *)v38 + 4));
        uint64_t v45 = v44;
        int v46 = GetObjectForKey(a5, v43);
        if (v46) {
          int v47 = v42;
        }
        else {
          int v47 = 0;
        }
        if (v47 == 1) {
          [v11 drawIndexedPatches:*(void *)v38 patchStart:*((void *)v38 + 1) patchCount:*((void *)v38 + 2) patchIndexBuffer:v20 patchIndexBufferOffset:v41 controlPointIndexBuffer:v46 controlPointIndexBufferOffset:v45 instanceCount:*((void *)v38 + 5) baseInstance:*((void *)v38 + 6)];
        }

LABEL_22:
        break;
      default:
        break;
    }
  }

  return v14 != 0;
}

void sub_24F6C1094(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6C12D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

unint64_t DYMTSetupRenderCommandEncoder(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *a5, void *a6, void *a7)
{
  id v13 = a1;
  id v14 = a7;
  float v15 = (const char *)(a4 + *((void *)a5 + 13) * a3);
  if (*(unsigned char *)(a2 + 9))
  {
    unint64_t v16 = 0;
  }
  else
  {
    unint64_t v16 = objc_msgSend(v14, "renderPipelineIdForUniqueIdentifier:", GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getPipelineStateUniqueIdentifier(a5, v15));
    unint64_t v17 = GetObjectForKey(a6, v16);
    [v13 setRenderPipelineState:v17];
  }
  if (!*(unsigned char *)(a2 + 8))
  {
    unint64_t v33 = v16;
    VertexBuffers = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getVertexBuffers(a5, v15);
    if (*(void *)(a2 + 16))
    {
      uint64_t v19 = VertexBuffers;
      unint64_t v20 = 0;
      do
      {
        unint64_t v21 = [v14 bufferIdAndOffsetForGPUVirtualAddress:*(void *)&v19[8 * v20]];
        uint64_t v23 = v22;
        uint64_t v24 = GetObjectForKey(a6, v21);
        [v13 setVertexBuffer:v24 offset:v23 atIndex:v20];

        ++v20;
      }
      while (v20 < *(void *)(a2 + 16));
    }
    FragmentBuffers = GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getFragmentBuffers(a5, v15);
    unint64_t v16 = v33;
    if (*(void *)(a2 + 24))
    {
      double v26 = FragmentBuffers;
      unint64_t v27 = 0;
      do
      {
        unint64_t v28 = [v14 bufferIdAndOffsetForGPUVirtualAddress:*(void *)&v26[8 * v27]];
        uint64_t v30 = v29;
        uint64_t v31 = GetObjectForKey(a6, v28);
        [v13 setFragmentBuffer:v31 offset:v30 atIndex:v27];

        ++v27;
      }
      while (v27 < *(void *)(a2 + 24));
    }
  }

  return v16;
}

void sub_24F6C14D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6C174C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6C1958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6C1B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6C1CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6C1ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6C268C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20)
{
  a20 = &a9;
  std::vector<std::pair<unsigned long long,objc_object * {__strong}>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_24F6C28C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *GetObjectForKey(void *a1, unint64_t a2)
{
  unint64_t v4 = a2;
  __int16 v2 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, &v4);
  if (v2) {
    __int16 v2 = (void *)v2[3];
  }
  return v2;
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  uint64_t v5 = (char *)a1[1];
  unint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v7[v11];
    id v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      id v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    size_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    *unint64_t v20 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6C2E44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *,false>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v11 = (unint64_t *)a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (a2 - v11);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v27 = *(a2 - 3);
          double v26 = a2 - 3;
          if (v27 < *v11)
          {
            unint64_t v38 = v11[2];
            long long v35 = *(_OWORD *)v11;
            long long v28 = *(_OWORD *)v26;
            v11[2] = v26[2];
            *(_OWORD *)unint64_t v11 = v28;
            *(_OWORD *)double v26 = v35;
            v26[2] = v38;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((long long *)v11, v11 + 3, a2 - 3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((uint64_t)v11, v11 + 3, v11 + 6, (uint64_t)(a2 - 3));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((__n128 *)v11, v11 + 3, v11 + 6, (__n128 *)(v11 + 9), (__n128 *)(a2 - 3));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 575) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[3 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((long long *)v11, &v11[3 * (v15 >> 1)], a2 - 3);
      uint64_t v18 = 3 * v16;
      uint64_t v19 = &v11[3 * v16 - 3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((long long *)(v11 + 3), v19, a2 - 6);
      unint64_t v20 = (long long *)(v11 + 6);
      unint64_t v21 = &v11[v18 + 3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(v20, v21, a2 - 9);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((long long *)v19, v17, v21);
      unint64_t v37 = *(void *)(a1 + 16);
      long long v34 = *(_OWORD *)a1;
      long long v22 = *(_OWORD *)v17;
      *(void *)(a1 + 16) = v17[2];
      *(_OWORD *)a1 = v22;
      v17[2] = v37;
      *(_OWORD *)unint64_t v17 = v34;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((long long *)&v11[3 * (v15 >> 1)], v11, a2 - 3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(void *)(a1 - 24) >= *(void *)a1)
    {
      unint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *,std::__less<void,void> &>((unint64_t *)a1, (unint64_t)a2);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *,std::__less<void,void> &>((unint64_t *)a1, (unint64_t)a2);
    if ((v24 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(a1, (uint64_t)v23);
    unint64_t v11 = v23 + 3;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((uint64_t)(v23 + 3), (uint64_t)a2))
    {
      a4 = -v13;
      a2 = v23;
      if (v25) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v25)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *,false>(a1, v23, a3, -v13, a5 & 1);
      unint64_t v11 = v23 + 3;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((uint64_t)v11, (uint64_t)a2);
  }
  else if (v11 != a2)
  {
    uint64_t v29 = v11 + 3;
    while (v29 != a2)
    {
      uint64_t v30 = (uint64_t)v29;
      unint64_t v31 = *(void *)(a1 + 24);
      if (v31 < *(void *)a1)
      {
        long long v36 = *(_OWORD *)(a1 + 32);
        uint64_t v32 = v30;
        do
        {
          *(_OWORD *)uint64_t v32 = *(_OWORD *)(v32 - 24);
          *(void *)(v32 + 16) = *(void *)(v32 - 8);
          unint64_t v33 = *(void *)(v32 - 48);
          v32 -= 24;
        }
        while (v31 < v33);
        *(void *)uint64_t v32 = v31;
        *(_OWORD *)(v32 + 8) = v36;
      }
      uint64_t v29 = (unint64_t *)(v30 + 24);
      a1 = v30;
    }
  }
}

  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          long long v22 = (long long *)(a2 - 2);
          uint64_t v23 = *(a2 - 2);
          if (v23 < *v11 || *v11 >= v23 && *(a2 - 1) < v11[1])
          {
            BOOL v25 = *(_OWORD *)v11;
            *(_OWORD *)unint64_t v11 = *v22;
            *long long v22 = v25;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((long long *)v11, v11 + 2, (long long *)a2 - 1);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((uint64_t)v11, v11 + 2, (uint64_t)(v11 + 4), (uint64_t)(a2 - 2));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((__n128 *)v11, v11 + 2, (__n128 *)v11 + 2, (__n128 *)v11 + 3, (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *,OffsetPair *>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((long long *)v11, &v11[2 * (v15 >> 1)], (long long *)a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((long long *)v11 + 1, v17 - 2, (long long *)a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((long long *)v11 + 2, &v11[2 * v16 + 2], (long long *)a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((long long *)v17 - 1, v17, (long long *)&v11[2 * v16 + 2]);
      char v24 = *(_OWORD *)v11;
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)unint64_t v17 = v24;
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((long long *)&v11[2 * (v15 >> 1)], v11, (long long *)a2 - 1);
      if (a5) {
        goto LABEL_15;
      }
    }
    uint64_t v18 = *(v11 - 2);
    if (v18 >= *v11 && (*v11 < v18 || *(v11 - 1) >= v11[1]))
    {
      unint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,OffsetPair *,std::__less<void,void> &>(v11, (unint64_t)a2);
      goto LABEL_20;
    }
LABEL_15:
    uint64_t v19 = (long long *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,OffsetPair *,std::__less<void,void> &>(v11, (unint64_t)a2);
    if ((v20 & 1) == 0) {
      goto LABEL_18;
    }
    unint64_t v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((uint64_t)v11, v19);
    unint64_t v11 = (unint64_t *)(v19 + 1);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((uint64_t)(v19 + 1), (long long *)a2))
    {
      a4 = -v13;
      a2 = (unint64_t *)v19;
      if (v21) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_18:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *,false>(a1, v19, a3, -v13, a5 & 1);
      unint64_t v11 = (unint64_t *)(v19 + 1);
LABEL_20:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(v11, a2);
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        unint64_t v6 = *(void *)(v4 + 24);
        if (v6 < *(void *)v4)
        {
          long long v10 = *(_OWORD *)(v4 + 32);
          uint64_t v7 = v3;
          while (1)
          {
            uint64_t v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(void *)(v8 + 40) = *(void *)(result + v7 + 16);
            if (!v7) {
              break;
            }
            v7 -= 24;
            if (v6 >= *(void *)(v8 - 24))
            {
              uint64_t v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v9 = result;
LABEL_10:
          *(void *)uint64_t v9 = v6;
          *(_OWORD *)(v9 + 8) = v10;
        }
        uint64_t v2 = v5 + 24;
        v3 += 24;
        uint64_t v4 = v5;
      }
      while (v5 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(long long *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 < *(void *)a1)
  {
    if (v4 < v3)
    {
      unint64_t v5 = *((void *)a1 + 2);
      long long v6 = *a1;
      unint64_t v7 = a3[2];
      *a1 = *(_OWORD *)a3;
      *((void *)a1 + 2) = v7;
      *(_OWORD *)a3 = v6;
      a3[2] = v5;
      return 1;
    }
    unint64_t v14 = *((void *)a1 + 2);
    long long v15 = *a1;
    unint64_t v16 = a2[2];
    *a1 = *(_OWORD *)a2;
    *((void *)a1 + 2) = v16;
    *(_OWORD *)a2 = v15;
    a2[2] = v14;
    if (*a3 >= *a2) {
      return 1;
    }
    unint64_t v17 = a2[2];
    long long v18 = *(_OWORD *)a2;
    unint64_t v19 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v19;
    *(_OWORD *)a3 = v18;
    a3[2] = v17;
    return 2;
  }
  if (v4 < v3)
  {
    unint64_t v8 = a2[2];
    long long v9 = *(_OWORD *)a2;
    unint64_t v10 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v10;
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
    if (*a2 >= *(void *)a1) {
      return 1;
    }
    unint64_t v11 = *((void *)a1 + 2);
    long long v12 = *a1;
    unint64_t v13 = a2[2];
    *a1 = *(_OWORD *)a2;
    *((void *)a1 + 2) = v13;
    *(_OWORD *)a2 = v12;
    a2[2] = v11;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *,std::__less<void,void> &>(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = *a1;
  if (*a1 >= *(void *)(a2 - 24))
  {
    unint64_t v5 = a1 + 3;
    do
    {
      unint64_t v3 = v5;
      if ((unint64_t)v5 >= a2) {
        break;
      }
      v5 += 3;
    }
    while (v2 >= *v3);
  }
  else
  {
    unint64_t v3 = a1;
    do
    {
      unint64_t v4 = v3[3];
      v3 += 3;
    }
    while (v2 >= v4);
  }
  if ((unint64_t)v3 < a2)
  {
    do
    {
      unint64_t v6 = *(void *)(a2 - 24);
      a2 -= 24;
    }
    while (v2 < v6);
  }
  while ((unint64_t)v3 < a2)
  {
    unint64_t v14 = v3[2];
    long long v13 = *(_OWORD *)v3;
    long long v7 = *(_OWORD *)a2;
    v3[2] = *(void *)(a2 + 16);
    *(_OWORD *)unint64_t v3 = v7;
    *(void *)(a2 + 16) = v14;
    *(_OWORD *)a2 = v13;
    do
    {
      unint64_t v8 = v3[3];
      v3 += 3;
    }
    while (v2 >= v8);
    do
    {
      unint64_t v9 = *(void *)(a2 - 24);
      a2 -= 24;
    }
    while (v2 < v9);
  }
  if (v3 - 3 != a1)
  {
    long long v10 = *(_OWORD *)(v3 - 3);
    a1[2] = *(v3 - 1);
    *(_OWORD *)a1 = v10;
  }
  *(v3 - 3) = v2;
  *((_OWORD *)v3 - 1) = v12;
  return v3;
}

unint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *,std::__less<void,void> &>(unint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  do
  {
    unint64_t v4 = a1[v2 + 3];
    v2 += 3;
  }
  while (v4 < v3);
  unint64_t v5 = &a1[v2];
  if (v2 == 3)
  {
    do
    {
      if ((unint64_t)v5 >= a2) {
        break;
      }
      unint64_t v7 = *(void *)(a2 - 24);
      a2 -= 24;
    }
    while (v7 >= v3);
  }
  else
  {
    do
    {
      unint64_t v6 = *(void *)(a2 - 24);
      a2 -= 24;
    }
    while (v6 >= v3);
  }
  unint64_t v8 = &a1[v2];
  if ((unint64_t)v5 < a2)
  {
    unint64_t v9 = a2;
    do
    {
      long long v10 = *(_OWORD *)v8;
      unint64_t v11 = v8[2];
      unint64_t v12 = *(void *)(v9 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      v8[2] = v12;
      *(void *)(v9 + 16) = v11;
      *(_OWORD *)unint64_t v9 = v10;
      do
      {
        unint64_t v13 = v8[3];
        v8 += 3;
      }
      while (v13 < v3);
      do
      {
        unint64_t v14 = *(void *)(v9 - 24);
        v9 -= 24;
      }
      while (v14 >= v3);
    }
    while ((unint64_t)v8 < v9);
  }
  if (v8 - 3 != a1)
  {
    long long v15 = *(_OWORD *)(v8 - 3);
    a1[2] = *(v8 - 1);
    *(_OWORD *)a1 = v15;
  }
  *(v8 - 3) = v3;
  *((_OWORD *)v8 - 1) = v17;
  return v8 - 3;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = (long long *)(a2 - 24);
      if (*(void *)(a2 - 24) < *(void *)a1)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 16) = v9;
        *unint64_t v6 = v8;
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((long long *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((__n128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      long long v10 = (void *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((long long *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    unint64_t v14 = *(void *)v11;
    if (*(void *)v11 < *v10)
    {
      long long v18 = *(_OWORD *)(v11 + 8);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(void *)(v16 + 88) = *(void *)(a1 + v15 + 64);
        if (v15 == -48) {
          break;
        }
        v15 -= 24;
        if (v14 >= *(void *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(void *)uint64_t v17 = v14;
      *(_OWORD *)(v17 + 8) = v18;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    long long v10 = (void *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((long long *)a1, a2, a3);
  if (*(void *)a4 < *a3)
  {
    unint64_t v9 = a3[2];
    __n128 result = *(__n128 *)a3;
    unint64_t v10 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v10;
    *(__n128 *)a4 = result;
    *(void *)(a4 + 16) = v9;
    if (*a3 < *a2)
    {
      unint64_t v11 = a2[2];
      __n128 result = *(__n128 *)a2;
      unint64_t v12 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v12;
      *(__n128 *)a3 = result;
      a3[2] = v11;
      if (*a2 < *(void *)a1)
      {
        unint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        unint64_t v14 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        a2[2] = v13;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(__n128 *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((uint64_t)a1, a2, a3, (uint64_t)a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    unint64_t v11 = a4[1].n128_u64[0];
    __n128 result = *a4;
    unint64_t v12 = a5[1].n128_u64[0];
    *a4 = *a5;
    a4[1].n128_u64[0] = v12;
    *a5 = result;
    a5[1].n128_u64[0] = v11;
    if (a4->n128_u64[0] < *a3)
    {
      unint64_t v13 = a3[2];
      __n128 result = *(__n128 *)a3;
      unint64_t v14 = a4[1].n128_u64[0];
      *(__n128 *)a3 = *a4;
      a3[2] = v14;
      *a4 = result;
      a4[1].n128_u64[0] = v13;
      if (*a3 < *a2)
      {
        unint64_t v15 = a2[2];
        __n128 result = *(__n128 *)a2;
        unint64_t v16 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v16;
        *(__n128 *)a3 = result;
        a3[2] = v15;
        if (*a2 < a1->n128_u64[0])
        {
          unint64_t v17 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v18 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v18;
          *(__n128 *)a2 = result;
          a2[2] = v17;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[3 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((uint64_t)a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = v6;
    if (v6 != a3)
    {
      unint64_t v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          unint64_t v15 = v14[2];
          long long v16 = *(_OWORD *)v14;
          unint64_t v17 = a1[2];
          *(_OWORD *)unint64_t v14 = *(_OWORD *)a1;
          v14[2] = v17;
          *(_OWORD *)a1 = v16;
          a1[2] = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      do
      {
        uint64_t v19 = 0;
        long long v28 = *(_OWORD *)a1;
        unint64_t v29 = a1[2];
        unint64_t v20 = a1;
        do
        {
          unint64_t v21 = &v20[3 * v19 + 3];
          uint64_t v22 = (2 * v19) | 1;
          uint64_t v23 = 2 * v19 + 2;
          if (v23 < v18 && *v21 < v21[3])
          {
            v21 += 3;
            uint64_t v22 = v23;
          }
          long long v24 = *(_OWORD *)v21;
          v20[2] = v21[2];
          *(_OWORD *)unint64_t v20 = v24;
          unint64_t v20 = v21;
          uint64_t v19 = v22;
        }
        while (v22 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        v6 -= 3;
        if (v21 == v6)
        {
          v21[2] = v29;
          *(_OWORD *)unint64_t v21 = v28;
        }
        else
        {
          long long v25 = *(_OWORD *)v6;
          v21[2] = v6[2];
          *(_OWORD *)unint64_t v21 = v25;
          *(_OWORD *)unint64_t v6 = v28;
          v6[2] = v29;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>((uint64_t)a1, (uint64_t)(v21 + 3), a4, 0xAAAAAAAAAAAAAAABLL * (v21 + 3 - a1));
        }
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      unint64_t v6 = (unint64_t *)(a1 + 24 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2 >= a3)
      {
        unint64_t v7 = *v6;
      }
      else
      {
        unint64_t v7 = *v6;
        unint64_t v8 = v6[3];
        if (*v6 <= v8) {
          unint64_t v7 = v6[3];
        }
        if (*v6 < v8)
        {
          v6 += 3;
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
        }
      }
      unint64_t v9 = *a4;
      if (v7 >= *a4)
      {
        __n128 v16 = *(__n128 *)(a4 + 1);
        do
        {
          unint64_t v10 = a4;
          a4 = v6;
          long long v11 = *(_OWORD *)v6;
          v10[2] = v6[2];
          *(_OWORD *)unint64_t v10 = v11;
          if (v4 < v5) {
            break;
          }
          uint64_t v12 = (2 * v5) | 1;
          unint64_t v6 = (unint64_t *)(a1 + 24 * v12);
          uint64_t v5 = 2 * v5 + 2;
          if (v5 >= a3)
          {
            unint64_t v13 = *v6;
            uint64_t v5 = v12;
          }
          else
          {
            unint64_t v13 = *v6;
            unint64_t v14 = v6[3];
            if (*v6 <= v14) {
              unint64_t v13 = v6[3];
            }
            if (*v6 >= v14) {
              uint64_t v5 = v12;
            }
            else {
              v6 += 3;
            }
          }
        }
        while (v13 >= v9);
        *a4 = v9;
        __n128 result = v16;
        *(__n128 *)(a4 + 1) = v16;
      }
    }
  }
  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,GPUTools::MTL::Utils::DYMTLBufferGPUAddress *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (long long *)(a1 + 24 * v4);
    unint64_t v6 = (long long *)(a2 - 24);
    unint64_t v7 = *(void *)(a2 - 24);
    if (*(void *)v5 < v7)
    {
      __n128 v11 = *(__n128 *)(a2 - 16);
      do
      {
        unint64_t v8 = v6;
        unint64_t v6 = v5;
        long long v9 = *v5;
        *((void *)v8 + 2) = *((void *)v5 + 2);
        long long *v8 = v9;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (long long *)(a1 + 24 * v4);
      }
      while (*(void *)v5 < v7);
      *(void *)unint64_t v6 = v7;
      __n128 result = v11;
      *(long long *)((char *)v6 + 8) = (__int128)v11;
    }
  }
  return result;
}

void std::vector<std::pair<unsigned long long,objc_object * {__strong}>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    unint64_t v4 = (id *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 2;

        unint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::pair<unsigned long long,objc_object * {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_24F6C4198(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void sub_24F6C4240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6C4814(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v22 = va_arg(va1, void);
  uint64_t v23 = va_arg(va1, void);
  uint64_t v24 = va_arg(va1, void);

  MEMORY[0x253362110](va1);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_24F6C4A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6C4B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL DYCommandBufferUID::operator==(uint64_t a1, uint64_t a2)
{
  return *(void *)a2 == *(void *)a1 && *(_DWORD *)(a2 + 8) == *(_DWORD *)(a1 + 8);
}

uint64_t CommandBufferUIDFromString(NSString *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = [(NSString *)v1 componentsSeparatedByString:@"-"];
  uint64_t v3 = (void *)MEMORY[0x263F08B08];
  unint64_t v4 = [v2 objectAtIndexedSubscript:0];
  uint64_t v5 = [v3 scannerWithString:v4];

  [v5 scanUnsignedLongLong:&v8];
  unint64_t v6 = [v2 objectAtIndexedSubscript:1];
  LODWORD(v9) = [v6 unsignedIntValue];

  return v8;
}

void sub_24F6C4C60(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_24F6C545C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_24F6C580C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_24F6C5B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ProcessPerBufferPatchingRequest(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  for (uint64_t i = *(void **)(a1 + 32); i; uint64_t i = (void *)*i)
  {
    uint64_t v8 = GetMTLBufferFromObjectMap(a4, i[2]);
    uint64_t v9 = v8;
    if (v8)
    {
      id v10 = v8;
      uint64_t v12 = (unint64_t *)i[3];
      __n128 v11 = (unint64_t *)i[4];
      while (v12 != v11)
      {
        if (*v12 >= a3)
        {
          NSLog(&cfstr_BufferOffsetLl.isa, *v12, a3);
          break;
        }
        unint64_t v13 = v12[1];
        if (v13 >= [v10 length])
        {
          NSLog(&cfstr_BufferOffsetLl_0.isa, v12[1], [v10 length]);
        }
        else
        {
          unint64_t v14 = *v12;
          *(void *)(a2 + v14) = v12[1] + [v10 gpuAddress];
        }
        v12 += 2;
      }
    }
    else
    {
      NSLog(&cfstr_PointeeBufferL.isa, i[2]);
    }
  }
}

void sub_24F6C5D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>>>::~__hash_table(result);
    JUMPOUT(0x2533623E0);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>>>::~__hash_table((uint64_t)(v2 + 5));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      unint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t BufferAndOffsetFromDictionary(NSDictionary *a1)
{
  uint64_t v1 = a1;
  uint64_t UInt64WithKey = GetUInt64WithKey(v1, &cfstr_BufferDeviceOb.isa);
  GetUInt64WithKey(v1, &cfstr_BufferOffset.isa);

  return UInt64WithKey;
}

void sub_24F6C5F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GetUInt64WithKey(NSDictionary *a1, NSString *a2)
{
  uint64_t v3 = a2;
  unint64_t v4 = [(NSDictionary *)a1 objectForKeyedSubscript:v3];
  if (!v4)
  {
    NSLog(&cfstr_ErrorKeyNotFou.isa, v3);
LABEL_6:
    uint64_t v5 = 0;
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    NSLog(&cfstr_ErrorIsNotANum.isa, v3);
    goto LABEL_6;
  }
  uint64_t v5 = [v4 unsignedLongLongValue];
LABEL_7:

  return v5;
}

void sub_24F6C6020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    id v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      __n128 v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          __n128 v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  unint64_t v14 = (char *)operator new(0x50uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)unint64_t v14 = 0;
  *((void *)v14 + 1) = v7;
  *((void *)v14 + 2) = **a4;
  *((void *)v14 + 9) = 0;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 18) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *unint64_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  __n128 v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_24F6C629C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>>>::~__hash_table((uint64_t)v2 + 40);
    }
    operator delete(v2);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    id v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  void *i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *unint64_t v22 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *uint64_t v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6C6540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

id DictionaryFromBufferAndOffset(void *a1)
{
  v7[2] = *MEMORY[0x263EF8340];
  v6[0] = @"buffer_device_object";
  uint64_t v2 = [NSNumber numberWithUnsignedLongLong:*a1];
  v6[1] = @"buffer_offset";
  v7[0] = v2;
  uint64_t v3 = [NSNumber numberWithUnsignedLongLong:a1[1]];
  v7[1] = v3;
  unint64_t v4 = [NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];

  return v4;
}

void sub_24F6C669C(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

id GetMTLBufferFromObjectMap(void *a1, unint64_t a2)
{
  unint64_t v6 = a2;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, &v6);
  if (v2)
  {
    id v3 = (id)v2[3];
    if ([v3 conformsToProtocol:&unk_27010B468])
    {
      id v4 = v3;
    }
    else
    {
      NSLog(&cfstr_ObjectLluIsNot.isa, v6);
      id v4 = 0;
    }
  }
  else
  {
    NSLog(&cfstr_BufferLluNotFo.isa, v6);
    id v4 = 0;
  }
  return v4;
}

void sub_24F6C676C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CPUAccessibleMTLBufferData::CPUAccessibleMTLBufferData(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  *(void *)a1 = v6;
  id v7 = v5;
  unint64_t v8 = v7;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = 0;
  if (!v7 || !*(void *)a1)
  {
    *(void *)(a1 + 8) = 0;
    uint8x8_t v9 = v7;
    goto LABEL_6;
  }
  if ([v7 storageMode] == 2)
  {
    uint8x8_t v9 = [*(id *)a1 commandBuffer];
    id v10 = [v9 blitCommandEncoder];
    [v10 setLabel:@"Dyson - blit buffer from GPU"];
    uint64_t v11 = [*(id *)(a1 + 8) device];
    uint64_t v12 = objc_msgSend(v11, "newBufferWithLength:options:", objc_msgSend(*(id *)(a1 + 8), "length"), 0);
    uint64_t v13 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v12;

    objc_msgSend(v10, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", *(void *)(a1 + 8), 0, *(void *)(a1 + 16), 0, objc_msgSend(*(id *)(a1 + 8), "length"));
    [v10 endEncoding];
    [v9 commit];
    [v9 waitUntilCompleted];

LABEL_6:
  }

  return a1;
}

void sub_24F6C68B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CPUAccessibleMTLBufferData::~CPUAccessibleMTLBufferData(CPUAccessibleMTLBufferData *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2 && [v2 storageMode] == 2)
  {
    id v3 = [*(id *)this commandBuffer];
    id v4 = [v3 blitCommandEncoder];
    [v4 setLabel:@"Dyson - blit buffer from GPU"];
    objc_msgSend(v4, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", *((void *)this + 2), 0, *((void *)this + 1), 0, objc_msgSend(*((id *)this + 1), "length"));
    [v4 endEncoding];
    [v3 commit];
    [v3 waitUntilCompleted];
  }
}

void std::__hash_table<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::__unordered_map_hasher<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,DYCommandBufferUIDHash,std::equal_to<DYCommandBufferUID>,true>,std::__unordered_map_equal<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::equal_to<DYCommandBufferUID>,DYCommandBufferUIDHash,true>,std::allocator<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::__unordered_map_hasher<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,DYCommandBufferUIDHash,std::equal_to<DYCommandBufferUID>,true>,std::__unordered_map_equal<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::equal_to<DYCommandBufferUID>,DYCommandBufferUIDHash,true>,std::allocator<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::__unordered_map_hasher<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,DYCommandBufferUIDHash,std::equal_to<DYCommandBufferUID>,true>,std::__unordered_map_equal<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::equal_to<DYCommandBufferUID>,DYCommandBufferUIDHash,true>,std::allocator<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>>>::__deallocate_node(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      id v3 = *v2;
      std::__tree<BufferEntry>::destroy((uint64_t)(v2 + 4), v2[5]);
      operator delete(v2);
      uint64_t v2 = (void **)v3;
    }
    while (v3);
  }
}

void std::__tree<BufferEntry>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<BufferEntry>::destroy(a1, *a2);
    std::__tree<BufferEntry>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    id v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  void *i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *unint64_t v22 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *uint64_t v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6C6D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    id v3 = __p + 3;
    std::vector<PatchingRequest>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

void std::vector<PatchingRequest>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    unint64_t v4 = (uint64_t *)v1[1];
    id v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        id v6 = v4 - 2;
        std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v4 - 1, 0);
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<PatchingRequest>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      while (1)
      {
        char v5 = v4;
        unint64_t v4 = v2;
        unint64_t v6 = v5[2];
        if (v6 < *v5) {
          break;
        }
        if (*v5 >= v6)
        {
          unint64_t v7 = v5[3];
          if (v7 < v5[1]) {
            goto LABEL_6;
          }
        }
LABEL_19:
        uint64_t v2 = v4 + 2;
        v3 += 16;
        if (v4 + 2 == a2) {
          return result;
        }
      }
      unint64_t v7 = v5[3];
LABEL_6:
      *(_OWORD *)unint64_t v4 = *(_OWORD *)v5;
      unint64_t v8 = result;
      if (v5 != result)
      {
        uint64_t v9 = v3;
        while (1)
        {
          id v10 = (_OWORD *)((char *)result + v9);
          unint64_t v11 = *(unint64_t *)((char *)result + v9 - 16);
          if (v6 >= v11)
          {
            if (v11 < v6)
            {
              unint64_t v8 = v5;
              goto LABEL_18;
            }
            if (v7 >= *((void *)v10 - 1)) {
              break;
            }
          }
          v5 -= 2;
          *id v10 = *(_OWORD *)((char *)result + v9 - 16);
          v9 -= 16;
          if (!v9)
          {
            unint64_t v8 = result;
            goto LABEL_18;
          }
        }
        unint64_t v8 = (unint64_t *)((char *)result + v9);
      }
LABEL_18:
      unint64_t *v8 = v6;
      v8[1] = v7;
      goto LABEL_19;
    }
  }
  return result;
}

unint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    while (1)
    {
      if (result + 2 == a2) {
        return result;
      }
      uint64_t v2 = result;
      result += 2;
      unint64_t v3 = v2[2];
      if (v3 >= *v2)
      {
        if (*v2 >= v3)
        {
          unint64_t v4 = v2[3];
          if (v4 < v2[1]) {
            goto LABEL_7;
          }
        }
      }
      else
      {
        unint64_t v4 = v2[3];
        do
        {
          do
          {
LABEL_7:
            char v5 = v2;
            *((_OWORD *)v2 + 1) = *(_OWORD *)v2;
            unint64_t v7 = *(v2 - 2);
            v2 -= 2;
            unint64_t v6 = v7;
          }
          while (v3 < v7);
        }
        while (v6 >= v3 && v4 < *(v5 - 1));
        *char v5 = v3;
        v5[1] = v4;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(long long *a1, unint64_t *a2, long long *a3)
{
  unint64_t v3 = *a2;
  if (*a2 < *(void *)a1 || *(void *)a1 >= v3 && a2[1] < *((void *)a1 + 1))
  {
    if (*(void *)a3 < v3 || v3 >= *(void *)a3 && *((void *)a3 + 1) < a2[1])
    {
      long long v4 = *a1;
      *a1 = *a3;
      *a3 = v4;
    }
    else
    {
      long long v8 = *a1;
      *a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*(void *)a3 < *a2 || *a2 >= *(void *)a3 && *((void *)a3 + 1) < a2[1])
      {
        long long v9 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *a3;
        *a3 = v9;
        return 2;
      }
    }
    return 1;
  }
  if (*(void *)a3 < v3 || v3 >= *(void *)a3 && *((void *)a3 + 1) < a2[1])
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *a3;
    *a3 = v6;
    if (*a2 < *(void *)a1 || *(void *)a1 >= *a2 && a2[1] < *((void *)a1 + 1))
    {
      long long v7 = *a1;
      *a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v7;
      return 2;
    }
    return 1;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,OffsetPair *,std::__less<void,void> &>(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = *(void *)(a2 - 16);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(void *)(a2 - 8)))
  {
    for (uint64_t i = a1 + 2; (unint64_t)i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    uint64_t i = a1;
    do
    {
      unint64_t v7 = i[2];
      i += 2;
      unint64_t v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= i[1]));
  }
  if ((unint64_t)i < a2)
  {
    for (a2 -= 16; v2 < v4 || v4 >= v2 && v3 < *(void *)(a2 + 8); a2 -= 16)
    {
      unint64_t v8 = *(void *)(a2 - 16);
      unint64_t v4 = v8;
    }
  }
  while ((unint64_t)i < a2)
  {
    long long v14 = *(_OWORD *)i;
    *(_OWORD *)uint64_t i = *(_OWORD *)a2;
    *(_OWORD *)a2 = v14;
    do
    {
      unint64_t v10 = i[2];
      i += 2;
      unint64_t v9 = v10;
    }
    while (v2 >= v10 && (v9 < v2 || v3 >= i[1]));
    do
    {
      do
      {
        unint64_t v12 = *(void *)(a2 - 16);
        a2 -= 16;
        unint64_t v11 = v12;
      }
      while (v2 < v12);
    }
    while (v11 >= v2 && v3 < *(void *)(a2 + 8));
  }
  if (i - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)i - 1);
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,OffsetPair *,std::__less<void,void> &>(unint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  while (1)
  {
    unint64_t v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      unint64_t v8 = *(void *)(a2 - 16);
      a2 -= 16;
      unint64_t v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || *(void *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        unint64_t v10 = *(void *)(a2 - 16);
        a2 -= 16;
        unint64_t v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v3 < v9) {
          goto LABEL_19;
        }
      }
      while (*(void *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  unint64_t v12 = v6;
  if (v6 < a2)
  {
    unint64_t v13 = a2;
    do
    {
      long long v19 = *(_OWORD *)v12;
      *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
      *(_OWORD *)unint64_t v13 = v19;
      do
      {
        do
        {
          unint64_t v15 = *(void *)(v12 + 16);
          v12 += 16;
          unint64_t v14 = v15;
        }
        while (v15 < v3);
      }
      while (v3 >= v14 && *(void *)(v12 + 8) < v4);
      do
      {
        unint64_t v17 = *(void *)(v13 - 16);
        v13 -= 16;
        unint64_t v16 = v17;
      }
      while (v17 >= v3 && (v3 < v16 || *(void *)(v13 + 8) >= v4));
    }
    while (v12 < v13);
  }
  if ((unint64_t *)(v12 - 16) != a1) {
    *(_OWORD *)a1 = *(_OWORD *)(v12 - 16);
  }
  *(void *)(v12 - 16) = v3;
  *(void *)(v12 - 8) = v4;
  return v12 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(uint64_t a1, long long *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = a2 - 1;
      unint64_t v7 = *((void *)a2 - 2);
      if (v7 < *(void *)a1 || *(void *)a1 >= v7 && *((void *)a2 - 1) < *(void *)(a1 + 8))
      {
        long long v8 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *unint64_t v6 = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(a1, (unint64_t *)(a1 + 16), a1 + 32, (uint64_t)(a2 - 1));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((__n128 *)a1, (unint64_t *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v9 = (long long *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((long long *)a1, (unint64_t *)(a1 + 16), (long long *)(a1 + 32));
      unint64_t v10 = (long long *)(a1 + 48);
      if ((long long *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = *(void *)v10;
    if (*(void *)v10 < *(void *)v9) {
      break;
    }
    if (*(void *)v9 >= v13)
    {
      unint64_t v14 = *((void *)v10 + 1);
      if (v14 < *((void *)v9 + 1)) {
        goto LABEL_12;
      }
    }
LABEL_22:
    unint64_t v9 = v10;
    v11 += 16;
    if (++v10 == a2) {
      return 1;
    }
  }
  unint64_t v14 = *((void *)v10 + 1);
LABEL_12:
  *unint64_t v10 = *v9;
  unint64_t v15 = (void *)a1;
  if (v9 != (long long *)a1)
  {
    uint64_t v16 = v11;
    while (1)
    {
      uint64_t v17 = a1 + v16;
      unint64_t v18 = *(void *)(a1 + v16 + 16);
      if (v13 >= v18)
      {
        if (v18 < v13)
        {
          unint64_t v15 = v9;
          goto LABEL_21;
        }
        if (v14 >= *(void *)(v17 + 24)) {
          break;
        }
      }
      --v9;
      *(_OWORD *)(v17 + 32) = *(_OWORD *)(a1 + v16 + 16);
      v16 -= 16;
      if (v16 == -32)
      {
        unint64_t v15 = (void *)a1;
        goto LABEL_21;
      }
    }
    unint64_t v15 = (void *)(a1 + v16 + 32);
  }
LABEL_21:
  *unint64_t v15 = v13;
  v15[1] = v14;
  if (++v12 != 8) {
    goto LABEL_22;
  }
  return v10 + 1 == a2;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((long long *)a1, a2, (long long *)a3);
  if (*(void *)a4 < *(void *)a3 || *(void *)a3 >= *(void *)a4 && *(void *)(a4 + 8) < *(void *)(a3 + 8))
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(void *)a3 < *a2 || *a2 >= *(void *)a3 && *(void *)(a3 + 8) < a2[1])
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(void *)a1 || *(void *)a1 >= *a2 && a2[1] < *(void *)(a1 + 8))
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(__n128 *a1, unint64_t *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0] || a4->n128_u64[0] >= a5->n128_u64[0] && a5->n128_u64[1] < a4->n128_u64[1])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u64[0] < a3->n128_u64[0] || a3->n128_u64[0] >= a4->n128_u64[0] && a4->n128_u64[1] < a3->n128_u64[1])
    {
      __n128 result = *a3;
      *a3 = *a4;
      *a4 = result;
      if (a3->n128_u64[0] < *a2 || *a2 >= a3->n128_u64[0] && a3->n128_u64[1] < a2[1])
      {
        __n128 result = *(__n128 *)a2;
        *(__n128 *)a2 = *a3;
        *a3 = result;
        if (*a2 < a1->n128_u64[0] || a1->n128_u64[0] >= *a2 && a2[1] < a1->n128_u64[1])
        {
          __n128 result = *a1;
          *a1 = *(__n128 *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *,OffsetPair *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = a2;
    if (a2 != a3)
    {
      unint64_t v14 = a2;
      do
      {
        if (*v14 < *a1 || *a1 >= *v14 && v14[1] < a1[1])
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)unint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      uint64_t v17 = a2 - 2;
      do
      {
        long long v21 = *(_OWORD *)a1;
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(a1, a4, v16);
        if (v17 == v18)
        {
          *(_OWORD *)unint64_t v18 = v21;
        }
        else
        {
          *(_OWORD *)unint64_t v18 = *(_OWORD *)v17;
          *(_OWORD *)uint64_t v17 = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>((uint64_t)a1, (uint64_t)(v18 + 2), a4, ((char *)(v18 + 2) - (char *)a1) >> 4);
        }
        v17 -= 2;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unint64_t v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && v8[1] < v8[3])
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unint64_t v11 = *a4;
      if (*v8 >= *a4)
      {
        unint64_t v12 = a4[1];
        if (v11 < *v8 || v8[1] >= v12)
        {
          *(_OWORD *)a4 = *(_OWORD *)v8;
          if (v5 >= v7)
          {
            while (1)
            {
              uint64_t v14 = 2 * v7;
              uint64_t v7 = (2 * v7) | 1;
              unint64_t v13 = (unint64_t *)(result + 16 * v7);
              uint64_t v15 = v14 + 2;
              if (v15 < a3)
              {
                unint64_t v16 = v13[2];
                if (*v13 < v16 || v16 >= *v13 && v13[1] < v13[3])
                {
                  v13 += 2;
                  uint64_t v7 = v15;
                }
              }
              if (*v13 < v11 || v11 >= *v13 && v13[1] < v12) {
                break;
              }
              *(_OWORD *)uint64_t v8 = *(_OWORD *)v13;
              uint64_t v8 = v13;
              if (v5 < v7) {
                goto LABEL_22;
              }
            }
          }
          unint64_t v13 = v8;
LABEL_22:
          *unint64_t v13 = v11;
          v13[1] = v12;
        }
      }
    }
  }
  return result;
}

__n128 std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1;
    a1 += 2 * v3 + 2;
    uint64_t v7 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v8 = v7 + 2;
    if (v8 < a3)
    {
      unint64_t v9 = a1[2];
      if (*a1 < v9 || v9 >= *a1 && a1[1] < a1[3])
      {
        a1 += 2;
        uint64_t v3 = v8;
      }
    }
    __n128 result = *(__n128 *)a1;
    *(_OWORD *)uint64_t v6 = *(_OWORD *)a1;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,OffsetPair *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (unint64_t *)(result + 16 * (v4 >> 1));
    unint64_t v7 = *(void *)(a2 - 16);
    if (*v6 >= v7)
    {
      if (v7 < *v6) {
        return result;
      }
      unint64_t v8 = *(void *)(a2 - 8);
      if (v6[1] >= v8) {
        return result;
      }
    }
    else
    {
      unint64_t v8 = *(void *)(a2 - 8);
    }
    *(_OWORD *)(a2 - 16) = *(_OWORD *)v6;
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v10 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        unint64_t v9 = (unint64_t *)(result + 16 * v5);
        if (*v9 >= v7 && (v7 < *v9 || v9[1] >= v8)) {
          break;
        }
        *(_OWORD *)uint64_t v6 = *(_OWORD *)v9;
        uint64_t v6 = (unint64_t *)(result + 16 * v5);
        if (v10 <= 1) {
          goto LABEL_12;
        }
      }
    }
    unint64_t v9 = v6;
LABEL_12:
    *unint64_t v9 = v7;
    v9[1] = v8;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9 = a2;
  unint64_t v10 = (int *)result;
  long long v24 = a2;
  long long v25 = (int *)result;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = (char *)v9 - (char *)v10;
    unint64_t v13 = ((char *)v9 - (char *)v10) >> 4;
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v22 = *(v9 - 4);
          long long v24 = v9 - 4;
          if (v22 < *v10) {
            __n128 result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(&v25, &v24);
          }
          break;
        case 3uLL:
          long long v24 = v9 - 4;
          __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v10, v10 + 4, v9 - 4);
          break;
        case 4uLL:
          long long v24 = v9 - 4;
          __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v10, v10 + 4, v10 + 8, v9 - 4);
          break;
        case 5uLL:
          long long v24 = v9 - 4;
          __n128 result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v10, v10 + 4, v10 + 8, v10 + 12, v9 - 4);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 383)
    {
      if (a5) {
        return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>((uint64_t)v10, (uint64_t)v9);
      }
      else {
        return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>((uint64_t)v10, (uint64_t)v9);
      }
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v9 - 4;
    if ((unint64_t)v12 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v10, &v10[4 * (v13 >> 1)], v15);
      unint64_t v16 = v24;
      uint64_t v17 = 16 * v14 - 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v25 + 4, (int *)((char *)v25 + v17), v24 - 8);
      uint64_t v18 = 16 * v14 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v25 + 8, (int *)((char *)v25 + v18), v16 - 12);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>((int *)((char *)v25 + v17), &v25[4 * v14], (int *)((char *)v25 + v18));
      unint64_t v23 = &v25[4 * v14];
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(&v25, &v23);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(&v10[4 * (v13 >> 1)], v10, v15);
    }
    if (a5)
    {
      unint64_t v9 = v24;
    }
    else
    {
      unint64_t v9 = v24;
      if (*(v25 - 4) >= *v25)
      {
        __n128 result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PatchingRequest *,std::__less<void,void> &>((uint64_t)v25, v24);
        unint64_t v10 = (int *)result;
        goto LABEL_22;
      }
    }
    long long v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PatchingRequest *,std::__less<void,void> &>((uint64_t)v25, v9);
    if ((v20 & 1) == 0) {
      goto LABEL_20;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v25, v19);
    unint64_t v10 = v19 + 4;
    __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v19 + 4, v9);
    if (result)
    {
      if (v21) {
        return result;
      }
      long long v24 = v19;
      unint64_t v10 = v25;
      unint64_t v9 = v19;
    }
    else
    {
      if (!v21)
      {
LABEL_20:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *,false>(v25, v19, a3, -i, a5 & 1);
        unint64_t v10 = v19 + 4;
LABEL_22:
        a5 = 0;
        long long v25 = v10;
        a4 = -i;
        goto LABEL_2;
      }
      long long v25 = v19 + 4;
    }
  }
  if (v10 != v9) {
    return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *,PatchingRequest *>(v10, v9, v9, a3);
  }
  return result;
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(int **a1, int **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  int v8 = **a1;
  char v9 = *((unsigned char *)*a1 + 4);
  uint64_t v4 = *((void *)*a1 + 1);
  *((void *)v2 + 1) = 0;
  int v5 = *v3;
  *((unsigned char *)v2 + 4) = *((unsigned char *)v3 + 4);
  *uint64_t v2 = v5;
  uint64_t v6 = *((void *)v3 + 1);
  *((void *)v3 + 1) = 0;
  std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)v2 + 1, v6);
  *uint64_t v3 = v8;
  *((unsigned char *)v3 + 4) = v9;
  return std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)v3 + 1, v4);
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 16;
    if (result + 16 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = result;
      do
      {
        uint64_t v7 = v4;
        unsigned int v8 = *(_DWORD *)(v6 + 16);
        if (v8 < *(_DWORD *)v6)
        {
          char v9 = *(unsigned char *)(v4 + 4);
          uint64_t v10 = *(void *)(v6 + 24);
          uint64_t v11 = v5;
          *(void *)(v6 + 24) = 0;
          while (1)
          {
            uint64_t v12 = v3 + v11;
            *(_DWORD *)(v12 + 16) = *(_DWORD *)(v3 + v11);
            *(unsigned char *)(v12 + 20) = *(unsigned char *)(v3 + v11 + 4);
            uint64_t v13 = *(void *)(v3 + v11 + 8);
            *(void *)(v12 + 8) = 0;
            std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)(v3 + v11 + 24), v13);
            if (!v11) {
              break;
            }
            v11 -= 16;
            if (v8 >= *(_DWORD *)(v12 - 16))
            {
              uint64_t v14 = v3 + v11 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v14 = v3;
LABEL_10:
          *(_DWORD *)uint64_t v14 = v8;
          *(unsigned char *)(v14 + 4) = v9;
          __n128 result = std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)(v14 + 8), v10);
        }
        uint64_t v4 = v7 + 16;
        v5 += 16;
        uint64_t v6 = v7;
      }
      while (v7 + 16 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result + 16;
    if (result + 16 != a2)
    {
      uint64_t v4 = (uint64_t *)(result + 24);
      do
      {
        uint64_t v5 = v3;
        unsigned int v6 = *(_DWORD *)(result + 16);
        if (v6 < *(_DWORD *)result)
        {
          char v7 = *(unsigned char *)(v3 + 4);
          uint64_t v8 = *(void *)(result + 24);
          *(void *)(result + 24) = 0;
          char v9 = v4;
          uint64_t v10 = v4;
          do
          {
            *((_DWORD *)v9 - 2) = *((_DWORD *)v9 - 6);
            *((unsigned char *)v9 - 4) = *((unsigned char *)v9 - 20);
            uint64_t v11 = *(v10 - 2);
            v10 -= 2;
            *uint64_t v10 = 0;
            std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v9, v11);
            unsigned int v12 = *((_DWORD *)v9 - 10);
            char v9 = v10;
          }
          while (v6 < v12);
          *((_DWORD *)v10 - 2) = v6;
          *((unsigned char *)v10 - 4) = v7;
          std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v10, v8);
        }
        uint64_t v3 = v5 + 16;
        v4 += 2;
        __n128 result = v5;
      }
      while (v5 + 16 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(int *a1, int *a2, int *a3)
{
  uint64_t v10 = (unsigned int *)a1;
  uint64_t v8 = a3;
  char v9 = (unsigned int *)a2;
  unsigned int v3 = *a2;
  unsigned int v4 = *a3;
  if (*a2 < *a1)
  {
    if (v4 < v3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)&v10, &v8);
      return 1;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)&v10, (int **)&v9);
    if (*v8 >= *v9) {
      return 1;
    }
    uint64_t v5 = &v9;
    unsigned int v6 = &v8;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)v5, v6);
    return 2;
  }
  if (v4 < v3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)&v9, &v8);
    if (*v9 >= *v10) {
      return 1;
    }
    uint64_t v5 = &v10;
    unsigned int v6 = (int **)&v9;
    goto LABEL_9;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PatchingRequest *,std::__less<void,void> &>(uint64_t a1, int *a2)
{
  uint64_t v17 = a2;
  unsigned int v3 = *(_DWORD *)a1;
  char v4 = *(unsigned char *)(a1 + 4);
  unsigned int v6 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3 >= *(a2 - 4))
  {
    char v9 = (int *)(a1 + 16);
    do
    {
      char v7 = v9;
      if (v9 >= a2) {
        break;
      }
      v9 += 4;
    }
    while (v3 >= *v7);
  }
  else
  {
    char v7 = (int *)a1;
    do
    {
      unsigned int v8 = v7[4];
      v7 += 4;
    }
    while (v3 >= v8);
  }
  uint64_t v18 = v7;
  if (v7 < a2)
  {
    do
    {
      unsigned int v10 = *(a2 - 4);
      a2 -= 4;
    }
    while (v3 < v10);
    uint64_t v17 = a2;
  }
  if (v7 < a2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(&v18, &v17);
      char v7 = v18;
      do
      {
        unsigned int v11 = v7[4];
        v7 += 4;
      }
      while (v3 >= v11);
      uint64_t v18 = v7;
      unsigned int v12 = v17;
      do
      {
        unsigned int v13 = *(v12 - 4);
        v12 -= 4;
      }
      while (v3 < v13);
      uint64_t v17 = v12;
    }
    while (v7 < v12);
  }
  if (v7 - 4 != (int *)a1)
  {
    int v14 = *(v7 - 4);
    *(unsigned char *)(a1 + 4) = *((unsigned char *)v7 - 12);
    *(_DWORD *)a1 = v14;
    uint64_t v15 = *((void *)v7 - 1);
    *((void *)v7 - 1) = 0;
    std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v6, v15);
  }
  *(v7 - 4) = v3;
  *((unsigned char *)v7 - 12) = v4;
  std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)v7 - 1, v5);
  return v18;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PatchingRequest *,std::__less<void,void> &>(uint64_t a1, int *a2)
{
  uint64_t v4 = 0;
  unsigned int v5 = *(_DWORD *)a1;
  char v6 = *(unsigned char *)(a1 + 4);
  unsigned int v8 = (uint64_t *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  do
  {
    unsigned int v9 = *(_DWORD *)(a1 + v4 + 16);
    v4 += 16;
  }
  while (v9 < v5);
  unint64_t v10 = a1 + v4;
  BOOL v21 = (int *)(a1 + v4);
  if (v4 == 16)
  {
    do
    {
      if (v10 >= (unint64_t)a2) {
        break;
      }
      unsigned int v12 = *(a2 - 4);
      a2 -= 4;
    }
    while (v12 >= v5);
  }
  else
  {
    do
    {
      unsigned int v11 = *(a2 - 4);
      a2 -= 4;
    }
    while (v11 >= v5);
  }
  char v20 = a2;
  unsigned int v13 = (int *)(a1 + v4);
  if (v10 < (unint64_t)a2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(&v21, &v20);
      unsigned int v13 = v21;
      do
      {
        unsigned int v14 = v13[4];
        v13 += 4;
      }
      while (v14 < v5);
      BOOL v21 = v13;
      uint64_t v15 = v20;
      do
      {
        unsigned int v16 = *(v15 - 4);
        v15 -= 4;
      }
      while (v16 >= v5);
      char v20 = v15;
    }
    while (v13 < v15);
  }
  if (v13 - 4 != (int *)a1)
  {
    int v17 = *(v13 - 4);
    *(unsigned char *)(a1 + 4) = *((unsigned char *)v13 - 12);
    *(_DWORD *)a1 = v17;
    uint64_t v18 = *((void *)v13 - 1);
    *((void *)v13 - 1) = 0;
    std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v8, v18);
  }
  *(v13 - 4) = v5;
  *((unsigned char *)v13 - 12) = v6;
  std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)v13 - 1, v7);
  return v13 - 4;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(int *a1, int *a2)
{
  uint64_t v2 = a2;
  uint64_t v18 = a2;
  long long v19 = a1;
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(a2 - 4);
      uint64_t v18 = a2 - 4;
      if (v6 < *a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(&v19, &v18);
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      uint64_t v7 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(a1, a1 + 4, a1 + 8);
      unsigned int v8 = a1 + 12;
      if (a1 + 12 == v2) {
        return 1;
      }
      int v9 = 0;
      unint64_t v10 = (uint64_t *)(a1 + 14);
      break;
  }
  while (1)
  {
    unsigned int v11 = *v8;
    if (*v8 < *v7)
    {
      char v12 = *((unsigned char *)v8 + 4);
      uint64_t v13 = *((void *)v8 + 1);
      *((void *)v8 + 1) = 0;
      unsigned int v14 = v10;
      uint64_t v15 = v19;
      while (1)
      {
        *((_DWORD *)v14 - 2) = *((_DWORD *)v14 - 6);
        *((unsigned char *)v14 - 4) = *((unsigned char *)v14 - 20);
        uint64_t v16 = *(v14 - 2);
        *(v14 - 2) = 0;
        std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v14, v16);
        if (v14 - 3 == (uint64_t *)v15) {
          break;
        }
        unsigned int v17 = *((_DWORD *)v14 - 10);
        v14 -= 2;
        if (v11 >= v17)
        {
          uint64_t v15 = (int *)(v14 - 1);
          break;
        }
      }
      *uint64_t v15 = v11;
      *((unsigned char *)v15 + 4) = v12;
      std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)v15 + 1, v13);
      ++v9;
      uint64_t v2 = v18;
      if (v9 == 8) {
        return v8 + 4 == v18;
      }
    }
    uint64_t v7 = v8;
    v10 += 2;
    v8 += 4;
    if (v8 == v2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(int *a1, int *a2, int *a3, int *a4)
{
  unsigned int v11 = (unsigned int *)a2;
  char v12 = a1;
  int v9 = a4;
  unint64_t v10 = (unsigned int *)a3;
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(a1, a2, a3);
  if (*a4 < *a3)
  {
    uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)&v10, &v9);
    if (*v10 < *a2)
    {
      uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)&v11, (int **)&v10);
      if (*v11 < *a1) {
        return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(&v12, (int **)&v11);
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  unsigned int v14 = (unsigned int *)a2;
  uint64_t v15 = a1;
  char v12 = (unsigned int *)a4;
  uint64_t v13 = (unsigned int *)a3;
  unsigned int v11 = a5;
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(a1, a2, a3, a4);
  if (*a5 < *a4)
  {
    uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)&v12, &v11);
    if (*v12 < *a3)
    {
      uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)&v13, (int **)&v12);
      if (*v13 < *a2)
      {
        uint64_t result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>((int **)&v14, (int **)&v13);
        if (*v14 < *a1) {
          return std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(&v15, (int **)&v14);
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *,PatchingRequest *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v15 = (unsigned int *)a1;
  if (a1 != a2)
  {
    uint64_t v7 = a1;
    uint64_t v8 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v9 = (unint64_t)(v8 - 2) >> 1;
      unint64_t v10 = v9 + 1;
      unsigned int v11 = (unsigned int *)&a1[4 * v9];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>((uint64_t)v7, a4, v8, v11);
        v11 -= 4;
        --v10;
      }
      while (v10);
    }
    unsigned int v14 = a2;
    if (a2 != a3)
    {
      char v12 = a2;
      do
      {
        if (*v12 < *v15)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<PatchingRequest *&,PatchingRequest *&>(&v14, (int **)&v15);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>((uint64_t)v15, a4, v8, v15);
          char v12 = v14;
        }
        v12 += 4;
        unsigned int v14 = v12;
      }
      while (v12 != a3);
      uint64_t v7 = (int *)v15;
    }
    std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>((uint64_t)v7, (uint64_t)a2, a4);
    return v14;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = result;
    uint64_t v6 = (uint64_t)a4 - result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v9 = v6 >> 3;
      uint64_t v10 = (v6 >> 3) + 1;
      unsigned int v11 = (unsigned int *)(result + 16 * v10);
      uint64_t v12 = v9 + 2;
      if (v9 + 2 >= a3)
      {
        unsigned int v13 = *v11;
      }
      else
      {
        unsigned int v13 = *v11;
        unsigned int v14 = v11[4];
        if (*v11 <= v14) {
          unsigned int v13 = v11[4];
        }
        if (*v11 < v14)
        {
          v11 += 4;
          uint64_t v10 = v12;
        }
      }
      unsigned int v15 = *a4;
      if (v13 >= *a4)
      {
        char v16 = *((unsigned char *)a4 + 4);
        uint64_t v17 = *((void *)a4 + 1);
        *((void *)a4 + 1) = 0;
        do
        {
          uint64_t v18 = v11;
          unsigned int v19 = *v11;
          *((unsigned char *)a4 + 4) = *((unsigned char *)v18 + 4);
          *a4 = v19;
          uint64_t v20 = *((void *)v18 + 1);
          *((void *)v18 + 1) = 0;
          std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)a4 + 1, v20);
          if (v7 < v10) {
            break;
          }
          unsigned int v11 = (unsigned int *)(v5 + 16 * ((2 * v10) | 1));
          if (2 * v10 + 2 >= a3)
          {
            unsigned int v21 = *v11;
            uint64_t v10 = (2 * v10) | 1;
          }
          else
          {
            unsigned int v21 = *v11;
            unsigned int v22 = v11[4];
            if (*v11 <= v22) {
              unsigned int v21 = v11[4];
            }
            if (*v11 >= v22)
            {
              uint64_t v10 = (2 * v10) | 1;
            }
            else
            {
              v11 += 4;
              uint64_t v10 = 2 * v10 + 2;
            }
          }
          a4 = v18;
        }
        while (v21 >= v15);
        *uint64_t v18 = v15;
        *((unsigned char *)v18 + 4) = v16;
        return std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)v18 + 1, v17);
      }
    }
  }
  return result;
}

uint64_t std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 - result >= 17)
  {
    uint64_t v4 = result;
    uint64_t v5 = (unint64_t)(a2 - result) >> 4;
    uint64_t v6 = (uint64_t *)(a2 - 8);
    do
    {
      int v14 = *(_DWORD *)v4;
      char v15 = *(unsigned char *)(v4 + 4);
      uint64_t v7 = *(void *)(v4 + 8);
      *(void *)(v4 + 8) = 0;
      uint64_t v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v4, a3, v5);
      uint64_t v9 = v6 - 1;
      uint64_t v10 = (uint64_t *)(v8 + 8);
      if (v6 - 1 == (uint64_t *)v8)
      {
        *(_DWORD *)uint64_t v8 = v14;
        *(unsigned char *)(v8 + 4) = v15;
        uint64_t result = std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v10, v7);
      }
      else
      {
        int v11 = *(_DWORD *)v9;
        *(unsigned char *)(v8 + 4) = *((unsigned char *)v6 - 4);
        *(_DWORD *)uint64_t v8 = v11;
        uint64_t v12 = *v6;
        *uint64_t v6 = 0;
        std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v10, v12);
        *(_DWORD *)uint64_t v9 = v14;
        *((unsigned char *)v6 - 4) = v15;
        std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100](v6, v7);
        uint64_t result = std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v4, v8 + 16, a3, (v8 + 16 - v4) >> 4);
      }
      v6 -= 2;
    }
    while (v5-- > 2);
  }
  return result;
}

void sub_24F6C8F04(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = a3 - 2;
  if (a3 < 2) {
    uint64_t v5 = a3 - 1;
  }
  uint64_t v6 = v5 >> 1;
  do
  {
    uint64_t v7 = a1 + 16 * v4 + 16;
    uint64_t v8 = (2 * v4) | 1;
    uint64_t v9 = 2 * v4 + 2;
    if (v9 < a3 && *(_DWORD *)v7 < *(_DWORD *)(v7 + 16))
    {
      v7 += 16;
      uint64_t v8 = v9;
    }
    int v10 = *(_DWORD *)v7;
    *(unsigned char *)(a1 + 4) = *(unsigned char *)(v7 + 4);
    *(_DWORD *)a1 = v10;
    uint64_t v11 = *(void *)(v7 + 8);
    *(void *)(v7 + 8) = 0;
    std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)(a1 + 8), v11);
    a1 = v7;
    uint64_t v4 = v8;
  }
  while (v8 <= v6);
  return v7;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (unsigned int *)(result + 16 * (v4 >> 1));
    uint64_t v8 = (unsigned int *)(a2 - 16);
    unsigned int v9 = *(_DWORD *)(a2 - 16);
    if (*v7 < v9)
    {
      char v10 = *(unsigned char *)(a2 - 12);
      uint64_t v11 = *(void *)(a2 - 8);
      *(void *)(a2 - 8) = 0;
      do
      {
        uint64_t v12 = v7;
        unsigned int v13 = *v7;
        *((unsigned char *)v8 + 4) = *((unsigned char *)v12 + 4);
        unsigned int *v8 = v13;
        uint64_t v14 = *((void *)v12 + 1);
        *((void *)v12 + 1) = 0;
        std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)v8 + 1, v14);
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (unsigned int *)(v5 + 16 * v6);
        uint64_t v8 = v12;
      }
      while (*v7 < v9);
      *uint64_t v12 = v9;
      *((unsigned char *)v12 + 4) = v10;
      return std::unique_ptr<std::unordered_map<unsigned long long,PerBufferPatchingRequest>>::reset[abi:ne180100]((uint64_t *)v12 + 1, v11);
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::__unordered_map_hasher<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,DYCommandBufferUIDHash,std::equal_to<DYCommandBufferUID>,true>,std::__unordered_map_equal<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::equal_to<DYCommandBufferUID>,DYCommandBufferUIDHash,true>,std::allocator<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>>>::__emplace_unique_key_args<DYCommandBufferUID,std::piecewise_construct_t const&,std::tuple<DYCommandBufferUID const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = *(unsigned int *)(a2 + 8);
  unint64_t v8 = *(void *)a2 ^ (2 * v7);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      uint64_t v4 = *(void *)a2 ^ (2 * v7);
      if (v8 >= v9) {
        uint64_t v4 = v8 % v9;
      }
    }
    else
    {
      uint64_t v4 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*(void *)a2 == v12[2] && v7 == *((_DWORD *)v12 + 6)) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  char v15 = (void *)(a1 + 16);
  uint64_t v12 = operator new(0x38uLL);
  *uint64_t v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = **a4;
  v12[6] = 0;
  v12[5] = 0;
  v12[4] = v12 + 5;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        uint64_t v4 = v8 % v9;
      }
      else {
        uint64_t v4 = v8;
      }
    }
    else
    {
      uint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *uint64_t v12 = *v23;
LABEL_42:
    void *v23 = v12;
    goto LABEL_43;
  }
  *uint64_t v12 = *v15;
  *char v15 = v12;
  *(void *)(v22 + 8 * v4) = v15;
  if (*v12)
  {
    unint64_t v24 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_24F6C92E8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__tree<BufferEntry>::destroy((uint64_t)(a2 + 4), a2[5]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::__tree<BufferEntry>::__emplace_unique_key_args<BufferEntry,BufferEntry const&>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t v5 = (void **)std::__tree<BufferEntry>::__find_equal<BufferEntry>((uint64_t)a1, &v10, a2);
  unint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = (uint64_t *)operator new(0x40uLL);
    long long v8 = a3[1];
    *((_OWORD *)v6 + 2) = *a3;
    *((_OWORD *)v6 + 3) = v8;
    std::__tree<BufferEntry>::__insert_node_at(a1, v10, v7, v6);
  }
  return v6;
}

void *std::__tree<BufferEntry>::__find_equal<BufferEntry>(uint64_t a1, void *a2, unint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a3 + 2;
    do
    {
      while (1)
      {
        long long v8 = v4;
        unint64_t v9 = v4 + 4;
        uint64_t v14 = a3;
        char v15 = v7;
        uint64_t v10 = v4 + 6;
        uint64_t v12 = v4 + 4;
        unint64_t v13 = v4 + 6;
        if (!std::__tuple_less<2ul>::operator()[abi:ne180100]<std::tuple<BufferAndOffset const&,BufferAndOffset const&>,std::tuple<BufferAndOffset const&,BufferAndOffset const&>>((uint64_t)&v16, &v14, &v12))break; {
        uint64_t v4 = (void *)*v8;
        }
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      uint64_t v14 = v9;
      char v15 = v10;
      uint64_t v12 = a3;
      unint64_t v13 = v7;
      if (!std::__tuple_less<2ul>::operator()[abi:ne180100]<std::tuple<BufferAndOffset const&,BufferAndOffset const&>,std::tuple<BufferAndOffset const&,BufferAndOffset const&>>((uint64_t)&v16, &v14, &v12))break; {
      uint64_t v5 = v8 + 1;
      }
      uint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    long long v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *std::__tree<BufferEntry>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL std::__tuple_less<2ul>::operator()[abi:ne180100]<std::tuple<BufferAndOffset const&,BufferAndOffset const&>,std::tuple<BufferAndOffset const&,BufferAndOffset const&>>(uint64_t a1, unint64_t **a2, unint64_t **a3)
{
  unint64_t v3 = **a2;
  unint64_t v4 = **a3;
  BOOL result = 1;
  if (v3 >= v4)
  {
    if (v4 < v3) {
      return 0;
    }
    unint64_t v5 = (*a2)[1];
    unint64_t v6 = (*a3)[1];
    if (v5 >= v6)
    {
      if (v6 < v5) {
        return 0;
      }
      uint64_t v7 = (uint64_t *)a2[1];
      long long v8 = (uint64_t *)a3[1];
      if (*v7 >= (unint64_t)*v8 && (*v8 < (unint64_t)*v7 || v7[1] >= (unint64_t)v8[1])) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::__unordered_map_hasher<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,DYCommandBufferUIDHash,std::equal_to<DYCommandBufferUID>,true>,std::__unordered_map_equal<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::equal_to<DYCommandBufferUID>,DYCommandBufferUIDHash,true>,std::allocator<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::__unordered_map_hasher<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,DYCommandBufferUIDHash,std::equal_to<DYCommandBufferUID>,true>,std::__unordered_map_equal<DYCommandBufferUID,std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>,std::equal_to<DYCommandBufferUID>,DYCommandBufferUIDHash,true>,std::allocator<std::__hash_value_type<DYCommandBufferUID,std::set<BufferEntry>>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<PatchingRequest>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = *(char **)v2;
      unint64_t v4 = (void **)(v2 + 24);
      std::vector<PatchingRequest>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

id DYMTLGetAssociatedObject(void *a1, unsigned int a2)
{
  uint64_t v2 = getAssociatedObject(a1, a2);
  return v2;
}

id getAssociatedObject(void *a1, unsigned int a2)
{
  id v3 = a1;
  unint64_t v4 = v3;
  unint64_t v5 = 0;
  if (v3 && a2 <= 4)
  {
    unint64_t v5 = objc_getAssociatedObject(v3, (char *)&sAssociatedTypes + 4 * a2);
  }

  return v5;
}

void sub_24F6C96E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id DYMTLGetNullableAssociatedObject(void *a1, unsigned int a2)
{
  uint64_t v2 = getAssociatedObject(a1, a2);
  return v2;
}

void DYMTLSetAssociatedObject(void *a1, unsigned int a2, void *a3)
{
  id object = a1;
  id v5 = a3;
  if (a2 <= 4 && object && v5) {
    objc_setAssociatedObject(object, (char *)&sAssociatedTypes + 4 * a2, v5, (void *)0x301);
  }
}

void sub_24F6C97A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6C985C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id DYMTLNewTexture(void *a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = (void *)[a1 newTextureWithDescriptor:v3];
  DYMTLSetAssociatedObject(v4, 0, v3);

  return v4;
}

void sub_24F6C99A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id DYMTLNewTextureView(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  id v13 = a1;
  uint64_t v14 = v13;
  if (a5 <= 1) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = a5;
  }
  if (a7 <= 1) {
    uint64_t v16 = 1;
  }
  else {
    uint64_t v16 = a7;
  }
  float v17 = objc_msgSend(v13, "newTextureViewWithPixelFormat:textureType:levels:slices:", a2, a3, a4, v15, a6, v16);
  BOOL v18 = getAssociatedObject(v14, 0);
  unint64_t v19 = (void *)[v18 copy];

  [v19 setPixelFormat:a2];
  [v19 setTextureType:a3];
  [v19 setMipmapLevelCount:a5];
  [v19 setArrayLength:a7];
  DYMTLSetAssociatedObject(v17, 0, v19);

  return v17;
}

void sub_24F6C9ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id DYMTLNewTextureViewSwizzled(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unsigned int a8)
{
  id v15 = a1;
  uint64_t v16 = v15;
  if (a5 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = a5;
  }
  if (a7 <= 1) {
    uint64_t v18 = 1;
  }
  else {
    uint64_t v18 = a7;
  }
  unint64_t v19 = objc_msgSend(v15, "newTextureViewWithPixelFormat:textureType:levels:slices:", a2, a3, a4, v17, a6, v18);
  unint64_t v20 = getAssociatedObject(v16, 0);
  size_t v21 = (void *)[v20 copy];

  [v21 setPixelFormat:a2];
  [v21 setTextureType:a3];
  [v21 setMipmapLevelCount:a5];
  [v21 setArrayLength:a7];
  [v21 setSwizzle:a8];
  DYMTLSetAssociatedObject(v19, 0, v21);

  return v19;
}

void sub_24F6C9C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void DYMTLAddDrawableTextureDescriptor(void *a1)
{
  id v2 = a1;
  getAssociatedObject(v2, 0);
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  if (!v1)
  {
    id v1 = objc_alloc_init(MEMORY[0x263F12A58]);
    objc_msgSend(v1, "setTextureType:", objc_msgSend(v2, "textureType"));
    objc_msgSend(v1, "setPixelFormat:", objc_msgSend(v2, "pixelFormat"));
    objc_msgSend(v1, "setWidth:", objc_msgSend(v2, "width"));
    objc_msgSend(v1, "setHeight:", objc_msgSend(v2, "height"));
    objc_msgSend(v1, "setDepth:", objc_msgSend(v2, "depth"));
    objc_msgSend(v1, "setMipmapLevelCount:", objc_msgSend(v2, "mipmapLevelCount"));
    objc_msgSend(v1, "setSampleCount:", objc_msgSend(v2, "sampleCount"));
    objc_msgSend(v1, "setArrayLength:", objc_msgSend(v2, "arrayLength"));
    objc_msgSend(v1, "setCpuCacheMode:", objc_msgSend(v2, "cpuCacheMode"));
    objc_msgSend(v1, "setStorageMode:", objc_msgSend(v2, "storageMode"));
    objc_msgSend(v1, "setUsage:", objc_msgSend(v2, "usage"));
    DYMTLSetAssociatedObject(v2, 0, v1);
  }
}

void sub_24F6C9DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id DYMTLNewRenderPipelineStateWithDescriptor(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a2;
  unint64_t v9 = a3 & 0xFFFFFFFFFFF8FFFCLL;
  unint64_t v10 = a3 & 0xFFFFFFFFFFF8FFFCLL | 0x50003;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v11 = [v8 pipelineLibrary];

    if (v11) {
      unint64_t v10 = v9 | 0x10003;
    }
  }
  id v15 = 0;
  uint64_t v12 = (void *)[v7 newRenderPipelineStateWithDescriptor:v8 options:v10 reflection:&v15 error:a4];
  id v13 = v15;
  DYMTLSetAssociatedObject(v12, 0, v8);
  DYMTLSetAssociatedObject(v12, 2u, v13);

  return v12;
}

void sub_24F6C9F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id DYMTLNewRenderPipelineStateWithTileDescriptor(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  id v11 = 0;
  id v8 = (void *)[a1 newRenderPipelineStateWithTileDescriptor:v7 options:a3 & 0xFFFFFFFFFFF8FFFCLL | 0x50003 reflection:&v11 error:a4];
  id v9 = v11;
  DYMTLSetAssociatedObject(v8, 1u, v7);
  DYMTLSetAssociatedObject(v8, 2u, v9);

  return v8;
}

void sub_24F6C9FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id DYMTLNewComputePipelineStateWithDescriptor(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a2;
  unint64_t v9 = a3 & 0xFFFFFFFFFFF8FFFCLL;
  unint64_t v10 = a3 & 0xFFFFFFFFFFF8FFFCLL | 0x50003;
  if (objc_opt_respondsToSelector())
  {
    id v11 = [v8 pipelineLibrary];

    if (v11) {
      unint64_t v10 = v9 | 0x10003;
    }
  }
  id v15 = 0;
  uint64_t v12 = (void *)[v7 newComputePipelineStateWithDescriptor:v8 options:v10 reflection:&v15 error:a4];
  id v13 = v15;
  DYMTLSetAssociatedObject(v12, 0, v8);
  DYMTLSetAssociatedObject(v12, 2u, v13);

  return v12;
}

void sub_24F6CA124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id DYMTLNewComputePipelineStateWithFunction(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  id v12 = 0;
  id v8 = (void *)[a1 newComputePipelineStateWithFunction:v7 options:a3 & 0xFFFFFFFFFFF8FFFCLL | 0x50003 reflection:&v12 error:a4];
  id v9 = v12;
  id v10 = objc_alloc_init(MEMORY[0x263F12858]);
  [v10 setComputeFunction:v7];
  DYMTLSetAssociatedObject(v8, 0, v10);
  DYMTLSetAssociatedObject(v8, 2u, v9);

  return v8;
}

void sub_24F6CA224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6CA5D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6CA9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6CAB04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6CAC78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6CAD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6CAFC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6CB0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v11 = v10;

  _Unwind_Resume(a1);
}

void sub_24F6CB170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  id v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    id v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>((uint64_t)result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__swap_out_circular_buffer(a1, v16);
    id v8 = (void *)a1[1];
    BOOL result = std::__split_buffer<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::~__split_buffer(v16);
  }
  else
  {
    *id v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)id v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    id v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_24F6CB2B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_24F6CB324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  id v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    id v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>((uint64_t)result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::__swap_out_circular_buffer(a1, v16);
    id v8 = (void *)a1[1];
    BOOL result = std::__split_buffer<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::~__split_buffer(v16);
  }
  else
  {
    *id v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)id v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    id v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_24F6CB468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void sub_24F6CBE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, void *a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<DYMTLIABDecodingOp>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

void sub_24F6CC248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6CC678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t *std::set<DYMTLIABDecodingOp>::insert[abi:ne180100]<std::__tree_const_iterator<DYMTLIABDecodingOp,std::__tree_node<DYMTLIABDecodingOp,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      BOOL result = std::__tree<DYMTLIABDecodingOp>::__emplace_hint_unique_key_args<DYMTLIABDecodingOp,DYMTLIABDecodingOp const&>(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      id v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          id v8 = v7;
          id v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          id v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_24F6CCB28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void rencodeBufferData(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27)
{
  long long v34 = a22;
  uint64_t v33 = a23;
  long long v35 = a25;
  v51[4] = *MEMORY[0x263EF8340];
  v48[0] = a26;
  v48[1] = a27;
  uint64_t v47 = a1;
  id v46 = a2;
  id v45 = a3;
  id v36 = a4;
  uint64_t v44 = a5;
  unint64_t v37 = v34;
  id v43 = v35;
  [v46 setArgumentBuffer:v37 offset:v33];
  DYMTLGetOriginalObject(v37);
  v41[0] = &a21;
  v41[1] = &v47;
  v41[2] = &a23;
  id v42 = (id)objc_claimAutoreleasedReturnValue();
  v40[0] = &v45;
  v40[1] = &v42;
  v40[2] = &a23;
  v40[3] = v41;
  v40[4] = a6;
  v40[5] = a13;
  v40[6] = &v46;
  v40[7] = &v43;
  v40[8] = &v47;
  v40[9] = v48;
  v40[10] = &a14;
  v40[11] = a20;
  v40[12] = &v44;
  v40[13] = &a21;
  v40[14] = a7;
  v40[15] = &a15;
  v40[16] = a9;
  v40[17] = a8;
  v40[18] = &a16;
  v40[19] = a10;
  v40[20] = &a17;
  v40[21] = a11;
  v40[22] = &a18;
  v40[23] = a12;
  v40[24] = &a19;
  v50[3] = 0;
  unint64_t v38 = operator new(0x28uLL);
  *unint64_t v38 = &unk_2700EFCB8;
  v38[1] = v50;
  v38[2] = v49;
  v38[3] = &a24;
  v38[4] = v40;
  v49[3] = v38;
  unint64_t v39 = operator new(0x28uLL);
  *unint64_t v39 = &unk_2700EFD00;
  v39[1] = v50;
  v39[2] = v49;
  v39[3] = &a24;
  v39[4] = v40;
  v51[3] = v39;
  std::__function::__value_func<void ()(MTLStructType *,unsigned long)>::swap[abi:ne180100](v51, v50);
  std::__function::__value_func<void ()(MTLStructType *,unsigned long)>::~__value_func[abi:ne180100](v51);
  std::function<void ()(MTLStructType *,unsigned long)>::operator()((uint64_t)v50, v36, 0);
  std::__function::__value_func<void ()(MTLArrayType *,unsigned long)>::~__value_func[abi:ne180100](v49);
  std::__function::__value_func<void ()(MTLStructType *,unsigned long)>::~__value_func[abi:ne180100](v50);
}

void sub_24F6CCDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,void *a38)
{
  std::__function::__value_func<void ()(MTLArrayType *,unsigned long)>::~__value_func[abi:ne180100]((void *)(v40 - 192));
  std::__function::__value_func<void ()(MTLStructType *,unsigned long)>::~__value_func[abi:ne180100]((void *)(v40 - 160));

  _Unwind_Resume(a1);
}

void sub_24F6CCF70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__function::__value_func<MTLStructType * ()(MTLArrayType *,unsigned long)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<MTLStructType * ()(MTLStructType *,unsigned long)>::~__value_func[abi:ne180100]((uint64_t *)va1);

  _Unwind_Resume(a1);
}

id std::function<MTLStructType * ()(MTLStructType *,unsigned long)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = a3;
  id v8 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v5 = (*(void (**)(uint64_t, id *, uint64_t *))(*(void *)v4 + 48))(v4, &v8, &v7);

  return v5;
}

void sub_24F6CD030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6CD154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6CD320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  DYMTLReplayerIAB::~DYMTLReplayerIAB((DYMTLReplayerIAB *)va);
  _Unwind_Resume(a1);
}

void DYMTLReplayerIAB::~DYMTLReplayerIAB(DYMTLReplayerIAB *this)
{
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<DYMTLReplayerIAB::Usage>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void sub_24F6CD450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6CD564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6CDD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27)
{
  _Unwind_Resume(a1);
}

void std::function<void ()(MTLStructType *,unsigned long)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a3;
  id v6 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t *))(*(void *)v4 + 48))(v4, &v6, &v5);
}

void sub_24F6CE1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,DYMTLIABDecodingOp<unsigned long long>,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::vector>>>> const&,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const&,MTLStructType *<unsigned long long,std::map<unsigned long long,std::less<std::set><unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><unsigned long long>>>> const&,MTLStructType *<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object  {objcproto15MTLSamplerState}>>> &,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object>>> const&,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>> *,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>*,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::set const&,MTLStructType *<unsigned long long,MTLStructType *<unsigned long long,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_0,std::less<std::set><DYIABPatcher>,void ()(MTLArrayType *,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,DYMTLIABDecodingOp<unsigned long long>,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::vector>>>> const&,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const&,MTLStructType *<unsigned long long,std::map<unsigned long long,std::less<std::set><unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><unsigned long long>>>> const&,MTLStructType *<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object  {objcproto15MTLSamplerState}>>> &,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object>>> const&,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>> *,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>*,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::set const&,MTLStructType *<unsigned long long,MTLStructType *<unsigned long long,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_0,std::less<std::set><DYIABPatcher>,void ()(MTLArrayType *,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_2700EFCB8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,DYMTLIABDecodingOp<unsigned long long>,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::vector>>>> const&,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const&,MTLStructType *<unsigned long long,std::map<unsigned long long,std::less<std::set><unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><unsigned long long>>>> const&,MTLStructType *<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object  {objcproto15MTLSamplerState}>>> &,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object>>> const&,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>> *,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>*,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::set const&,MTLStructType *<unsigned long long,MTLStructType *<unsigned long long,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_0,std::less<std::set><DYIABPatcher>,void ()(MTLArrayType *,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700EFCB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,DYMTLIABDecodingOp<unsigned long long>,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::vector>>>> const&,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const&,MTLStructType *<unsigned long long,std::map<unsigned long long,std::less<std::set><unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><unsigned long long>>>> const&,MTLStructType *<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object  {objcproto15MTLSamplerState}>>> &,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object>>> const&,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>> *,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>*,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::set const&,MTLStructType *<unsigned long long,MTLStructType *<unsigned long long,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_0,std::less<std::set><DYIABPatcher>,void ()(MTLArrayType *,unsigned long)>::operator()(uint64_t a1, id *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  id v14 = *a2;
  for (unsigned int i = 0; ; unsigned int i = v6 + 1)
  {
    uint64_t v6 = i;
    if ([v14 arrayLength] <= (unint64_t)i) {
      break;
    }
    uint64_t v7 = [v14 elementStructType];

    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      BOOL v9 = [v14 elementStructType];
      std::function<void ()(MTLStructType *,unsigned long)>::operator()(v8, v9, v4 + [v14 argumentIndexStride] * v6);
LABEL_7:

      continue;
    }
    unint64_t v10 = [v14 elementArrayType];

    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 16);
      BOOL v9 = [v14 elementArrayType];
      std::function<void ()(MTLArrayType *,unsigned long)>::operator()(v11, v9, v4 + [v14 argumentIndexStride] * v6);
      goto LABEL_7;
    }
    uint64_t v12 = [v14 elementType];
    uint64_t v13 = v12;
    if ((unint64_t)(v12 - 58) <= 0x16 && ((1 << (v12 - 58)) & 0x700007) != 0)
    {
      if (DYMTLDataTypeNeedsReencoding(v12, **(void **)(a1 + 24))) {
        rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *,MTLStructType *::map<unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,DYMTLIABDecodingOp<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>>> const&,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const&,std::__1<unsigned long long,MTLStructType *::map<unsigned long long,MTLStructType *::less<MTLStructType *::set><unsigned long long>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><unsigned long long>>>> const&,std::__1<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,objc_object  {objcproto15MTLSamplerState}>>> &,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,objc_object * {__strong},MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,objc_object>>> const&,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>> *,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>*,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,MTLStructType *::set const&,std::__1<unsigned long long,std::__1<unsigned long long,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>>>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_3::operator()(*(void *)(a1 + 32), v13, (uint64_t *)(v4 + [v14 argumentIndexStride] * v6), 0);
      }
    }
  }
}

void sub_24F6CE408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::function<void ()(MTLArrayType *,unsigned long)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a3;
  id v6 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t *))(*(void *)v4 + 48))(v4, &v6, &v5);
}

void sub_24F6CE4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t DYMTLDataTypeNeedsReencoding(uint64_t a1, uint64_t a2)
{
  uint64_t result = 1;
  if (a1 > 77)
  {
    if (a1 == 78 || a1 == 79)
    {
      uint64_t result = 4;
    }
    else
    {
      if (a1 != 80) {
        return result;
      }
      uint64_t result = 5;
    }
  }
  else if (a1 == 58)
  {
    uint64_t result = 0;
  }
  else if (a1 != 59)
  {
    if (a1 != 60) {
      return result;
    }
    uint64_t result = 3;
  }
  return *(void *)(a2 + 8 * result) == 2;
}

void rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *,MTLStructType *::map<unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,DYMTLIABDecodingOp<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>>> const&,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const&,std::__1<unsigned long long,MTLStructType *::map<unsigned long long,MTLStructType *::less<MTLStructType *::set><unsigned long long>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><unsigned long long>>>> const&,std::__1<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,objc_object  {objcproto15MTLSamplerState}>>> &,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,objc_object * {__strong},MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,objc_object>>> const&,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>> *,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>*,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,MTLStructType *::set const&,std::__1<unsigned long long,std::__1<unsigned long long,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>>>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_3::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  if (a2 > 77)
  {
    switch(a2)
    {
      case 'N':
        uint64_t v50 = [**(id **)a1 uniqueIdentifierForRenderPipelineAtIndex:a3 inIndirectArgumentBuffer:**(void **)(a1 + 8) atOffset:**(void **)(a1 + 16)];
        *(void *)&long long v117 = v50;
        uint64_t v51 = *(void *)(a1 + 24);
        v52 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(**(void ***)v51, *(unint64_t **)(v51 + 8));
        if (v52)
        {
          v53 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v52 + 3, *(unint64_t **)(v51 + 16));
          if (v53)
          {
            v110[0] = a3;
            int v54 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v53 + 3, (unint64_t *)v110);
            if (v54)
            {
              if (v54[3] == v50) {
                return;
              }
            }
          }
        }
        unint64_t v55 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(void **)(a1 + 152), (unint64_t *)&v117);
        if (!v55) {
          return;
        }
        v56 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(void **)(a1 + 40), v55 + 3);
        if (!v56) {
          return;
        }
        unint64_t v29 = (objc_object *)(id)v56[3];
        if (([(objc_object *)v29 conformsToProtocol:&unk_27010B910] & 1) == 0) {
          goto LABEL_81;
        }
        [**(id **)(a1 + 48) setRenderPipelineState:v29 atIndex:a3];
        v57 = DYMTLGetOriginalObject(v29);
        v58 = (uint64_t *)[v57 uniqueIdentifier];

        v118 = v58;
        uint64_t v59 = v117;
        uint64_t v60 = **(void **)(a1 + 160);
        v110[0] = (uint64_t *)&v118;
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v60, (unint64_t *)&v118, (uint64_t)&std::piecewise_construct, v110)[3] = v59;
        long long v34 = v118;
        if (v118 == (uint64_t *)v117) {
          goto LABEL_81;
        }
        break;
      case 'O':
        uint64_t v67 = [**(id **)a1 uniqueIdentifierForComputePipelineAtIndex:a3 inIndirectArgumentBuffer:**(void **)(a1 + 8) atOffset:**(void **)(a1 + 16)];
        *(void *)&long long v117 = v67;
        uint64_t v68 = *(void *)(a1 + 24);
        v69 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(**(void ***)v68, *(unint64_t **)(v68 + 8));
        if (v69)
        {
          v70 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v69 + 3, *(unint64_t **)(v68 + 16));
          if (v70)
          {
            v110[0] = a3;
            unint64_t v71 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v70 + 3, (unint64_t *)v110);
            if (v71)
            {
              if (v71[3] == v67) {
                return;
              }
            }
          }
        }
        uint64_t v72 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(void **)(a1 + 168), (unint64_t *)&v117);
        if (!v72) {
          return;
        }
        uint64_t v73 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(void **)(a1 + 40), v72 + 3);
        if (!v73) {
          return;
        }
        unint64_t v29 = (objc_object *)(id)v73[3];
        if (([(objc_object *)v29 conformsToProtocol:&unk_27010BBA8] & 1) == 0) {
          goto LABEL_81;
        }
        [**(id **)(a1 + 48) setComputePipelineState:v29 atIndex:a3];
        v74 = DYMTLGetOriginalObject(v29);
        v75 = (uint64_t *)[v74 uniqueIdentifier];

        v118 = v75;
        uint64_t v76 = v117;
        uint64_t v77 = **(void **)(a1 + 176);
        v110[0] = (uint64_t *)&v118;
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v77, (unint64_t *)&v118, (uint64_t)&std::piecewise_construct, v110)[3] = v76;
        long long v34 = v118;
        if (v118 == (uint64_t *)v117) {
          goto LABEL_81;
        }
        break;
      case 'P':
        uint64_t v22 = [**(id **)a1 uniqueIdentifierForIndirectCommandBufferAtIndex:a3 inIndirectArgumentBuffer:**(void **)(a1 + 8) atOffset:**(void **)(a1 + 16)];
        *(void *)&long long v117 = v22;
        uint64_t v23 = *(void *)(a1 + 24);
        unint64_t v24 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(**(void ***)v23, *(unint64_t **)(v23 + 8));
        if (v24)
        {
          long long v25 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v24 + 3, *(unint64_t **)(v23 + 16));
          if (v25)
          {
            v110[0] = a3;
            double v26 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v25 + 3, (unint64_t *)v110);
            if (v26)
            {
              if (v26[3] == v22) {
                return;
              }
            }
          }
        }
        unint64_t v27 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(void **)(a1 + 184), (unint64_t *)&v117);
        if (!v27) {
          return;
        }
        long long v28 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(void **)(a1 + 40), v27 + 3);
        if (!v28) {
          return;
        }
        unint64_t v29 = (objc_object *)(id)v28[3];
        if (!NSClassFromString(&cfstr_Mtlioaccelindi.isa)
          || (NSClassFromString(&cfstr_Mtlioaccelindi.isa), (objc_opt_isKindOfClass() & 1) == 0))
        {
          if (([(objc_object *)v29 conformsToProtocol:&unk_27010BE68] & 1) == 0) {
            goto LABEL_81;
          }
        }
        [**(id **)(a1 + 48) setIndirectCommandBuffer:v29 atIndex:a3];
        uint64_t v30 = DYMTLGetOriginalObject(v29);
        unint64_t v31 = (uint64_t *)[v30 uniqueIdentifier];

        v118 = v31;
        uint64_t v32 = v117;
        uint64_t v33 = **(void **)(a1 + 192);
        v110[0] = (uint64_t *)&v118;
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v33, (unint64_t *)&v118, (uint64_t)&std::piecewise_construct, v110)[3] = v32;
        long long v34 = v118;
        if (v118 == (uint64_t *)v117) {
          goto LABEL_81;
        }
        break;
      default:
        return;
    }
    uint64_t v78 = **(void **)(a1 + 104);
    v110[0] = *(uint64_t **)(a1 + 64);
    uint64_t v79 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v78, (unint64_t *)v110[0], (uint64_t)&std::piecewise_construct, v110);
    v110[0] = *(uint64_t **)(a1 + 16);
    v80 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v79 + 3), (unint64_t *)v110[0], (uint64_t)&std::piecewise_construct, v110);
    uint64_t v115 = a3;
    v110[0] = (uint64_t *)&v115;
    unint64_t v49 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)(v80 + 3), (unint64_t *)&v115, (uint64_t)&std::piecewise_construct, v110);
    goto LABEL_74;
  }
  switch(a2)
  {
    case ':':
      uint64_t v36 = [**(id **)a1 uniqueIdentifierForTextureAtIndex:a3 inIndirectArgumentBuffer:**(void **)(a1 + 8) atOffset:**(void **)(a1 + 16)];
      *(void *)&long long v117 = v36;
      uint64_t v37 = *(void *)(a1 + 24);
      unint64_t v38 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(**(void ***)v37, *(unint64_t **)(v37 + 8));
      if (v38)
      {
        unint64_t v39 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v38 + 3, *(unint64_t **)(v37 + 16));
        if (v39)
        {
          v110[0] = a3;
          uint64_t v40 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v39 + 3, (unint64_t *)v110);
          if (v40)
          {
            if (v40[3] == v36) {
              return;
            }
          }
        }
      }
      uint64_t v41 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(void **)(a1 + 112), (unint64_t *)&v117);
      if (!v41) {
        return;
      }
      id v42 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(void **)(a1 + 40), v41 + 3);
      if (!v42) {
        return;
      }
      unint64_t v29 = (objc_object *)(id)v42[3];
      if ([(objc_object *)v29 conformsToProtocol:&unk_270105410])
      {
        [**(id **)(a1 + 48) setTexture:v29 atIndex:a3];
        uint64_t v43 = v117;
        uint64_t v44 = **(void **)(a1 + 120);
        id v45 = DYMTLGetOriginalObject(v29);
        v118 = (uint64_t *)[v45 uniqueIdentifier];
        v110[0] = (uint64_t *)&v118;
        std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v44, (unint64_t *)&v118, (uint64_t)&std::piecewise_construct, v110)[3] = v43;

        long long v34 = (uint64_t *)[**(id **)a1 uniqueIdentifierForTextureAtIndex:a3 inIndirectArgumentBuffer:**(void **)(a1 + 8) atOffset:**(void **)(a1 + 16)];
        if (v34 != (uint64_t *)v117)
        {
LABEL_46:
          uint64_t v46 = **(void **)(a1 + 104);
          v110[0] = *(uint64_t **)(a1 + 64);
          uint64_t v47 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v46, (unint64_t *)v110[0], (uint64_t)&std::piecewise_construct, v110);
          v110[0] = *(uint64_t **)(a1 + 16);
          v48 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v47 + 3), (unint64_t *)v110[0], (uint64_t)&std::piecewise_construct, v110);
          v118 = a3;
          v110[0] = (uint64_t *)&v118;
          unint64_t v49 = std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)(v48 + 3), (unint64_t *)&v118, (uint64_t)&std::piecewise_construct, v110);
LABEL_74:
          v49[3] = v34;
        }
      }
LABEL_81:

      return;
    case ';':
      *(void *)&long long v117 = 0;
      uint64_t v61 = [**(id **)a1 uniqueIdentifierForSamplerAtIndex:a3 inIndirectArgumentBuffer:**(void **)(a1 + 8) atOffset:**(void **)(a1 + 16)];
      *(void *)&long long v117 = v61;
      uint64_t v62 = *(void *)(a1 + 24);
      uint64_t v63 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(**(void ***)v62, *(unint64_t **)(v62 + 8));
      if (v63)
      {
        uint64_t v64 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v63 + 3, *(unint64_t **)(v62 + 16));
        if (v64)
        {
          v110[0] = a3;
          v65 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v64 + 3, (unint64_t *)v110);
          if (v65)
          {
            if (v65[3] == v61) {
              return;
            }
          }
        }
      }
      v66 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(void **)(a1 + 128), (unint64_t *)&v117);
      if (!v66 || (unint64_t v29 = (objc_object *)(id)v66[3]) == 0)
      {
        v81 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(void **)(a1 + 136), (unint64_t *)&v117);
        if (v81)
        {
          v82 = (uint64_t **)v81[3];
          uint64_t v83 = (uint64_t **)v81[4];
          while (v82 != v83)
          {
            v110[0] = *v82;
            uint64_t v84 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(void **)(a1 + 40), (unint64_t *)v110);
            if (v84)
            {
              long long v86 = (void *)v84[3];
              unint64_t v29 = v86;
              if (!v29) {
                goto LABEL_81;
              }
              uint64_t v87 = *(void *)(a1 + 128);
              v110[0] = (uint64_t *)&v117;
              uint64_t v88 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto15MTLSamplerState}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>(v87, (unint64_t *)&v117, (uint64_t)&std::piecewise_construct, v110);
              objc_storeStrong(v88 + 3, v86);
              uint64_t v89 = v117;
              uint64_t v90 = **(void **)(a1 + 144);
              long long v91 = DYMTLGetOriginalObject(v29);
              v118 = (uint64_t *)[v91 uniqueIdentifier];
              v110[0] = (uint64_t *)&v118;
              std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v90, (unint64_t *)&v118, (uint64_t)&std::piecewise_construct, v110)[3] = v89;

              goto LABEL_62;
            }
            ++v82;
          }
        }
        unint64_t v29 = 0;
        goto LABEL_81;
      }
LABEL_62:
      if ([(objc_object *)v29 conformsToProtocol:&unk_27010BCB0])
      {
        [**(id **)(a1 + 48) setSamplerState:v29 atIndex:a3];
        long long v34 = (uint64_t *)[**(id **)a1 uniqueIdentifierForSamplerAtIndex:a3 inIndirectArgumentBuffer:**(void **)(a1 + 8) atOffset:**(void **)(a1 + 16)];
        if (v34 != (uint64_t *)v117) {
          goto LABEL_46;
        }
      }
      goto LABEL_81;
    case '<':
      unint64_t v7 = [**(id **)a1 virtualAddressForBufferAtIndex:a3 inIndirectArgumentBuffer:**(void **)(a1 + 8) atOffset:**(void **)(a1 + 16)];
      uint64_t v8 = *(void *)(a1 + 24);
      BOOL v9 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(**(void ***)v8, *(unint64_t **)(v8 + 8));
      if (!v9
        || (unint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v9 + 3, *(unint64_t **)(v8 + 16))) == 0|| (v110[0] = a3, (v11 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v10 + 3, (unint64_t *)v110)) == 0)|| v11[3] != v7)
      {
        uint64_t v12 = *(void **)(a1 + 32);
        uint64_t v13 = v12 + 1;
        id v14 = (void *)v12[1];
        if (v14)
        {
          uint64_t v15 = v12 + 1;
          uint64_t v16 = (void *)v12[1];
          do
          {
            unint64_t v17 = v16[4];
            BOOL v18 = v17 > v7;
            if (v17 <= v7) {
              unint64_t v19 = v16 + 1;
            }
            else {
              unint64_t v19 = v16;
            }
            if (v18) {
              uint64_t v15 = v16;
            }
            uint64_t v16 = (void *)*v19;
          }
          while (*v19);
          if (v15 == v13)
          {
            if (v12[2])
            {
              do
              {
                size_t v21 = v14;
                id v14 = (void *)v14[1];
              }
              while (v14);
            }
            else
            {
              size_t v21 = v12 + 1;
            }
          }
          else if (v15 == (void *)*v12)
          {
            size_t v21 = v15;
          }
          else
          {
            unint64_t v20 = (void *)*v15;
            if (*v15)
            {
              do
              {
                size_t v21 = v20;
                unint64_t v20 = (void *)v20[1];
              }
              while (v20);
            }
            else
            {
              do
              {
                size_t v21 = (void *)v15[2];
                BOOL v35 = *v21 == (void)v15;
                uint64_t v15 = v21;
              }
              while (v35);
            }
          }
        }
        else
        {
          uint64_t v85 = v12[2];
          size_t v21 = v12 + 1;
          if (v85)
          {
            do
            {
              size_t v21 = (void *)v13[2];
              BOOL v35 = *v21 == (void)v13;
              uint64_t v13 = v21;
            }
            while (v35);
          }
        }
        unint64_t v92 = v21[4];
        if (v92 <= v7)
        {
          *(void *)&long long v117 = 0;
          v93 = (long long *)v21[5];
          v94 = (long long *)v21[6];
          while (v93 != v94)
          {
            if (*((void *)v93 + 1) + v92 > v7)
            {
              long long v117 = *v93;
              if ((void)v117)
              {
                v95 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(*(void **)(a1 + 40), (unint64_t *)&v117);
                if (v95)
                {
                  unint64_t v96 = (objc_object *)(id)v95[3];
                  if ([(objc_object *)v96 conformsToProtocol:&unk_27010B468])
                  {
                    [**(id **)(a1 + 48) setBuffer:v96 offset:v7 - v92 atIndex:a3];
                    if ([**(id **)(a1 + 56) patchingMode] == 1)
                    {
                      uint64_t v97 = **(void **)(a1 + 16) + 8 * (void)a3;
                      v98 = **(void ***)(a1 + 56);
                      v116[0] = **(void **)(a1 + 64);
                      v116[1] = v97;
                      v116[2] = v117;
                      v116[3] = v7 - v92;
                      objc_msgSend(v98, "insertPatchingOp:commandBufferUid:", v116, **(void **)(a1 + 72), *(void *)(*(void *)(a1 + 72) + 8));
                    }
                    unint64_t v99 = DYMTLGetOriginalObject(v96);
                    uint64_t v100 = [v99 gpuAddress];

                    uint64_t v115 = (uint64_t *)v100;
                    uint64_t v101 = **(uint64_t ****)(a1 + 80);
                    v110[0] = (uint64_t *)&v115;
                    std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v101, (unint64_t *)&v115, (uint64_t)&std::piecewise_construct, v110)[5] = v92;
                    if (a4)
                    {
                      __p = 0;
                      v113 = 0;
                      uint64_t v114 = 0;
                      uint64_t v102 = *(void *)(a1 + 88);
                      v103 = *(uint64_t **)(v102 + 8);
                      v110[0] = (uint64_t *)(v7 - v92);
                      v110[1] = v103;
                      if (v110 != (uint64_t **)v102) {
                        std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((char *)&__p, *(char **)(v102 + 24), *(void *)(v102 + 32), (uint64_t)(*(void *)(v102 + 32) - *(void *)(v102 + 24)) >> 3);
                      }
                      v118 = a3;
                      std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&__p, &v118);
                      char v111 = 1;
                      uint64_t v104 = **(void **)(a1 + 96);
                      v118 = (uint64_t *)&v117;
                      v105 = (uint64_t **)std::__hash_table<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v104, (unint64_t *)&v117, (uint64_t)&std::piecewise_construct, &v118);
                      std::__tree<DYMTLIABDecodingOp>::__emplace_unique_key_args<DYMTLIABDecodingOp,DYMTLIABDecodingOp const&>(v105 + 3, (uint64_t)v110, (uint64_t)v110);
                      if (__p)
                      {
                        v113 = __p;
                        operator delete(__p);
                      }
                    }
                    uint64_t v106 = [**(id **)a1 virtualAddressForBufferAtIndex:a3 inIndirectArgumentBuffer:**(void **)(a1 + 8) atOffset:**(void **)(a1 + 16)];
                    if (v7 != v106)
                    {
                      uint64_t v107 = **(void **)(a1 + 104);
                      v110[0] = *(uint64_t **)(a1 + 64);
                      id v108 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v107, (unint64_t *)v110[0], (uint64_t)&std::piecewise_construct, v110);
                      v110[0] = *(uint64_t **)(a1 + 16);
                      id v109 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v108 + 3), (unint64_t *)v110[0], (uint64_t)&std::piecewise_construct, v110);
                      v118 = a3;
                      v110[0] = (uint64_t *)&v118;
                      std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t)(v109 + 3), (unint64_t *)&v118, (uint64_t)&std::piecewise_construct, v110)[3] = v106;
                    }
                  }
                }
              }
              return;
            }
            ++v93;
          }
        }
      }
      break;
  }
}

void sub_24F6CF1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::push_back[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  id v6 = *(void **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v12);
      uint64_t v8 = *(void **)a1;
      id v6 = *(void **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    id v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)id v14 = *a2;
    unint64_t v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *id v6 = *a2;
    unint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = a1 + 1;
  id v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        id v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      id v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<BufferEntry>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

char *std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      BOOL v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  id v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    BOOL v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  id v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)id v14 = 0;
  *((void *)v14 + 1) = v7;
  *((void *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  size_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *size_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  unint64_t v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_24F6CF7AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::~__hash_table((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      id v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<unsigned long long,BOOL>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BOOL>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  id v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)id v14 = 0;
  *((void *)v14 + 1) = v7;
  *((void *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  size_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *size_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  unint64_t v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_24F6CFAF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<unsigned long long,BOOL>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BOOL>>>::~__hash_table((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong}>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto15MTLSamplerState}* {__strong}>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unsigned int i = *v10; i; unsigned int i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  unsigned int i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  size_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *size_t v21 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *uint64_t v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    size_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6CFD94(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,DYMTLIABDecodingOp<unsigned long long>,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::vector>>>> const&,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const&,MTLStructType *<unsigned long long,std::map<unsigned long long,std::less<std::set><unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><unsigned long long>>>> const&,MTLStructType *<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object  {objcproto15MTLSamplerState}>>> &,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object>>> const&,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>> *,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>*,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::set const&,MTLStructType *<unsigned long long,MTLStructType *<unsigned long long,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_1,std::less<std::set><DYIABPatcher>,void ()(MTLStructType,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,DYMTLIABDecodingOp<unsigned long long>,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::vector>>>> const&,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const&,MTLStructType *<unsigned long long,std::map<unsigned long long,std::less<std::set><unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><unsigned long long>>>> const&,MTLStructType *<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object  {objcproto15MTLSamplerState}>>> &,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object>>> const&,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>> *,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>*,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::set const&,MTLStructType *<unsigned long long,MTLStructType *<unsigned long long,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_1,std::less<std::set><DYIABPatcher>,void ()(MTLStructType,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_2700EFD00;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,DYMTLIABDecodingOp<unsigned long long>,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::vector>>>> const&,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const&,MTLStructType *<unsigned long long,std::map<unsigned long long,std::less<std::set><unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><unsigned long long>>>> const&,MTLStructType *<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object  {objcproto15MTLSamplerState}>>> &,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object>>> const&,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>> *,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>*,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::set const&,MTLStructType *<unsigned long long,MTLStructType *<unsigned long long,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_1,std::less<std::set><DYIABPatcher>,void ()(MTLStructType,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700EFD00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,DYMTLIABDecodingOp<unsigned long long>,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::vector>>>> const&,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const&,MTLStructType *<unsigned long long,std::map<unsigned long long,std::less<std::set><unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><unsigned long long>>>> const&,MTLStructType *<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object  {objcproto15MTLSamplerState}>>> &,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,unsigned long long,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>> const,MTLStructType *<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,objc_object>>> const&,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>> *,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>*,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::unordered_map<unsigned long long,std::set<DYMTLIABDecodingOp>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::less<std::set><std::pair<unsigned long long const>>> *<unsigned long long,unsigned long long,std::vector<DYMTLOriginalProcessBuffer,std::less<std::set><std::vector>>,std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::set const&,MTLStructType *<unsigned long long,MTLStructType *<unsigned long long,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>,std::hash,std::equal_to,std::less<std::set><std::equal_to<unsigned long long><std::pair,std::equal_to<unsigned long long><std::pair,std::less<std::set><std::equal_to<unsigned long long><std::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_1,std::less<std::set><DYIABPatcher>,void ()(MTLStructType,unsigned long)>::operator()(uint64_t a1, id *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  unint64_t v5 = [*a2 members];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  void v6[2] = ___ZZL17rencodeBufferDatayPvPU29objcproto18MTLArgumentEncoder11objc_objectP32_MTLIndirectArgumentBufferLayoutP13MTLStructTypePNSt3__113unordered_mapIyNS6_3setI18DYMTLIABDecodingOpNS6_4lessIS9_EENS6_9allocatorIS9_EEEENS6_4hashIyEENS6_8equal_toIyEENSC_INS6_4pairIKySE_EEEEEERKNS6_3mapIyNS6_6vectorI26DYMTLOriginalProcessBufferNSC_ISR_EEEENSA_IyEENSC_INSJ_ISK_ST_EEEEEERKNS7_IyySG_SI_NSC_INSJ_ISK_yEEEEEERKNS7_IyNSQ_IyNSC_IyEEEESG_SI_NSC_INSJ_ISK_S16_EEEEEERNS7_IyU8__strongPU26objcproto15MTLSamplerState11objc_objectSG_SI_NSC_INSJ_ISK_S1E_EEEEEES14_S14_S14_RKNS7_IyU8__strongP11objc_objectSG_SI_NSC_INSJ_ISK_S1L_EEEEEEPNSP_IyySU_S11_EEPS12_S1T_S1T_S1T_S1T_RKS9_PNS7_IyNS7_IyS12_SG_SI_NSC_INSJ_ISK_S12_EEEEEESG_SI_NSC_INSJ_ISK_S1Y_EEEEEEPU19objcproto9MTLBuffer11objc_objectyP30_MTLArgumentBufferPatchingTypeP12DYIABPatcher18DYCommandBufferUIDENK3__1clES5_m_block_invoke;
  v6[3] = &__block_descriptor_72_e32_v32__0__MTLStructMember_8Q16_B24l;
  void v6[4] = *(void *)(a1 + 8);
  v6[5] = v4;
  long long v7 = *(_OWORD *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 32);
  [v5 enumerateObjectsUsingBlock:v6];
}

void sub_24F6CFF00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZZL17rencodeBufferDatayPvPU29objcproto18MTLArgumentEncoder11objc_objectP32_MTLIndirectArgumentBufferLayoutP13MTLStructTypePNSt3__113unordered_mapIyNS6_3setI18DYMTLIABDecodingOpNS6_4lessIS9_EENS6_9allocatorIS9_EEEENS6_4hashIyEENS6_8equal_toIyEENSC_INS6_4pairIKySE_EEEEEERKNS6_3mapIyNS6_6vectorI26DYMTLOriginalProcessBufferNSC_ISR_EEEENSA_IyEENSC_INSJ_ISK_ST_EEEEEERKNS7_IyySG_SI_NSC_INSJ_ISK_yEEEEEERKNS7_IyNSQ_IyNSC_IyEEEESG_SI_NSC_INSJ_ISK_S16_EEEEEERNS7_IyU8__strongPU26objcproto15MTLSamplerState11objc_objectSG_SI_NSC_INSJ_ISK_S1E_EEEEEES14_S14_S14_RKNS7_IyU8__strongP11objc_objectSG_SI_NSC_INSJ_ISK_S1L_EEEEEEPNSP_IyySU_S11_EEPS12_S1T_S1T_S1T_S1T_RKS9_PNS7_IyNS7_IyS12_SG_SI_NSC_INSJ_ISK_S12_EEEEEESG_SI_NSC_INSJ_ISK_S1Y_EEEEEEPU19objcproto9MTLBuffer11objc_objectyP30_MTLArgumentBufferPatchingTypeP12DYIABPatcher18DYCommandBufferUIDENK3__1clES5_m_block_invoke(uint64_t a1, void *a2)
{
  id v11 = a2;
  id v3 = [v11 structType];

  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    unint64_t v5 = [v11 structType];
    std::function<void ()(MTLStructType *,unsigned long)>::operator()(v4, v5, [v11 indirectArgumentIndex] + *(void *)(a1 + 40));
LABEL_5:

    goto LABEL_6;
  }
  id v6 = [v11 arrayType];

  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    unint64_t v5 = [v11 arrayType];
    std::function<void ()(MTLArrayType *,unsigned long)>::operator()(v7, v5, [v11 indirectArgumentIndex] + *(void *)(a1 + 40));
    goto LABEL_5;
  }
  uint64_t v8 = [v11 pointerType];
  uint8x8_t v9 = [v8 elementStructType];
  int IsArgumentBuffer = DYStructIsArgumentBuffer(v9);

  if (DYMTLDataTypeNeedsReencoding([v11 dataType], **(void **)(a1 + 56))) {
    rencodeBufferData(unsigned long long,void *,objc_object  {objcproto18MTLArgumentEncoder}*,_MTLIndirectArgumentBufferLayout *,MTLStructType *,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *,MTLStructType *::map<unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,DYMTLIABDecodingOp<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>>> const&,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const&,std::__1<unsigned long long,MTLStructType *::map<unsigned long long,MTLStructType *::less<MTLStructType *::set><unsigned long long>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><unsigned long long>>>> const&,std::__1<unsigned long long,objc_object  {objcproto15MTLSamplerState}* {__strong},MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,objc_object  {objcproto15MTLSamplerState}>>> &,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>> const,std::__1<unsigned long long,objc_object * {__strong},MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,objc_object>>> const&,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>> *,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>*,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,std::unordered_map<unsigned long long,MTLStructType *::set<DYMTLIABDecodingOp,MTLStructType *::less<MTLStructType *::set>,MTLStructType *::allocator<MTLStructType *::set>>,MTLStructType *::hash<unsigned long long>,MTLStructType *::equal_to<unsigned long long>,MTLStructType *::less<MTLStructType *::set><MTLStructType *::pair<unsigned long long const,MTLStructType *::allocator<MTLStructType *::set>>>> *<unsigned long long,unsigned long long,MTLStructType *::vector<DYMTLOriginalProcessBuffer,MTLStructType *::less<MTLStructType *::set><MTLStructType *::vector>>,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,MTLStructType *::set const&,std::__1<unsigned long long,std::__1<unsigned long long,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>>>>,MTLStructType *::hash,MTLStructType *::equal_to,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,MTLStructType *::less<MTLStructType *::set><MTLStructType *::equal_to<unsigned long long><MTLStructType *::pair,unsigned long long>>>>>> *,objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLArgumentBufferPatchingType *,DYIABPatcher *,DYCommandBufferUID)::$_3::operator()(*(void *)(a1 + 64), [v11 dataType], (uint64_t *)(objc_msgSend(v11, "indirectArgumentIndex") + *(void *)(a1 + 40)), IsArgumentBuffer);
  }
LABEL_6:
}

void sub_24F6D0068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t DYStructIsArgumentBuffer(MTLStructType *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v3 = [(MTLStructType *)v1 members];
    uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (!v4)
    {
      uint64_t v12 = 0;
      goto LABEL_21;
    }
    uint64_t v5 = *(void *)v15;
    while (1)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        uint64_t v8 = [v7 dataType];
        if (v8 <= 1)
        {
          if (v8 != 1) {
            continue;
          }
          id v11 = [v7 structType];
          char IsArgumentBuffer = DYStructIsArgumentBuffer(v11);
        }
        else
        {
          if (v8 != 2)
          {
            uint64_t v12 = 1;
            if ((unint64_t)(v8 - 57) < 4 || (unint64_t)(v8 - 78) < 3) {
              goto LABEL_21;
            }
            continue;
          }
          uint8x8_t v9 = [v7 arrayType];
          char IsArgumentBuffer = DYArrayIsArgumentBuffer(v9);
        }
        if (IsArgumentBuffer)
        {
          uint64_t v12 = 1;
          goto LABEL_21;
        }
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
      uint64_t v12 = 0;
      if (!v4)
      {
LABEL_21:

        goto LABEL_22;
      }
    }
  }
  uint64_t v12 = 0;
LABEL_22:

  return v12;
}

void sub_24F6D0248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t DYArrayIsArgumentBuffer(MTLArrayType *a1)
{
  id v1 = a1;
  uint64_t v2 = [(MTLArrayType *)v1 elementType];
  uint64_t v3 = 1;
  if (v2 > 77)
  {
    if ((unint64_t)(v2 - 78) >= 3) {
LABEL_7:
    }
      uint64_t v3 = 0;
  }
  else if ((unint64_t)(v2 - 57) >= 4)
  {
    if (v2 == 1)
    {
      uint64_t v4 = [(MTLArrayType *)v1 elementStructType];
      uint64_t IsArgumentBuffer = DYStructIsArgumentBuffer(v4);
      goto LABEL_9;
    }
    if (v2 == 2)
    {
      uint64_t v4 = [(MTLArrayType *)v1 elementArrayType];
      uint64_t IsArgumentBuffer = DYArrayIsArgumentBuffer((MTLArrayType *)v4);
LABEL_9:
      uint64_t v3 = IsArgumentBuffer;

      goto LABEL_10;
    }
    goto LABEL_7;
  }
LABEL_10:

  return v3;
}

void sub_24F6D0338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(MTLStructType *,unsigned long)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_24F6D05B8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(MTLArrayType *,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(MTLStructType *,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<DYMTLReplayerIAB::Usage>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<DYMTLReplayerIAB::Usage>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<DYMTLReplayerIAB::Usage>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 24)
  {
  }
  *(void *)(a1 + 8) = a2;
}

void std::function<void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,unsigned long long> &,unsigned long)>::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a4;
  id v8 = a2;
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v8, a3, &v7);
}

void sub_24F6D0804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const&,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,MTLArgument *<unsigned long long,unsigned long long,std::less,std::less<unsigned long long><std::pair,unsigned long long>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&)::$_0,DYMTLOriginalProcessBuffer<std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&>,void ()(MTLArrayType *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&&,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const&,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,MTLArgument *<unsigned long long,unsigned long long,std::less,std::less<unsigned long long><std::pair,unsigned long long>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&)::$_0,DYMTLOriginalProcessBuffer<std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&>,void ()(MTLArrayType *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&&,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_2700EFD48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const&,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,MTLArgument *<unsigned long long,unsigned long long,std::less,std::less<unsigned long long><std::pair,unsigned long long>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&)::$_0,DYMTLOriginalProcessBuffer<std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&>,void ()(MTLArrayType *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&&,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700EFD48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const&,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,MTLArgument *<unsigned long long,unsigned long long,std::less,std::less<unsigned long long><std::pair,unsigned long long>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&)::$_0,DYMTLOriginalProcessBuffer<std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&>,void ()(MTLArrayType *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&&,unsigned long)>::operator()(void *a1, id *a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  id v16 = *a2;
  for (unsigned int i = 0; ; unsigned int i = v8 + 1)
  {
    uint64_t v8 = i;
    if ([v16 arrayLength] <= (unint64_t)i) {
      break;
    }
    uint8x8_t v9 = [v16 elementStructType];

    if (v9)
    {
      uint64_t v10 = a1[1];
      id v11 = [v16 elementStructType];
      uint64_t v12 = [v11 members];
      std::function<void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,unsigned long long> &,unsigned long)>::operator()(v10, v12, (uint64_t)a3, v6 + [v16 argumentIndexStride] * v8);

LABEL_7:
      continue;
    }
    uint64_t v13 = [v16 elementArrayType];

    if (v13)
    {
      uint64_t v14 = a1[2];
      id v11 = [v16 elementArrayType];
      std::function<void ()(MTLArrayType *,std::map<unsigned long long,unsigned long long> &,unsigned long)>::operator()(v14, v11, (uint64_t)a3, v6 + [v16 argumentIndexStride] * v8);
      goto LABEL_7;
    }
    uint64_t v15 = [v16 elementType];
    if ((unint64_t)(v15 - 58) <= 0x16 && ((1 << (v15 - 58)) & 0x700007) != 0) {
      decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const&,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,MTLArgument *::hash,MTLArgument *::equal_to,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLArgument *::less,MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&<unsigned long long,objc_object * {__strong},MTLArgument *::hash,MTLArgument *::equal_to,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,objc_object *>>> const&)::$_2::operator()(a1[3], v15, v6 + [v16 argumentIndexStride] * v8, a3);
    }
  }
}

void sub_24F6D0A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::function<void ()(MTLArrayType *,std::map<unsigned long long,unsigned long long> &,unsigned long)>::operator()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a4;
  id v8 = a2;
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v8, a3, &v7);
}

void sub_24F6D0B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t *decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const&,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,MTLArgument *::hash,MTLArgument *::equal_to,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLArgument *::less,MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&<unsigned long long,objc_object * {__strong},MTLArgument *::hash,MTLArgument *::equal_to,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,objc_object *>>> const&)::$_2::operator()(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t **a4)
{
  uint64_t v39 = -1;
  if (a2 > 77)
  {
    switch(a2)
    {
      case 'N':
        uint64_t v39 = [**(id **)a1 uniqueIdentifierForRenderPipelineAtIndex:a3 inIndirectArgumentBuffer:**(void **)(a1 + 8) atOffset:**(void **)(a1 + 16)];
        unint64_t v18 = *(void **)(a1 + 56);
        break;
      case 'O':
        uint64_t v39 = [**(id **)a1 uniqueIdentifierForComputePipelineAtIndex:a3 inIndirectArgumentBuffer:**(void **)(a1 + 8) atOffset:**(void **)(a1 + 16)];
        unint64_t v18 = *(void **)(a1 + 64);
        break;
      case 'P':
        uint64_t v39 = [**(id **)a1 uniqueIdentifierForIndirectCommandBufferAtIndex:a3 inIndirectArgumentBuffer:**(void **)(a1 + 8) atOffset:**(void **)(a1 + 16)];
        unint64_t v18 = *(void **)(a1 + 72);
        break;
      default:
        goto LABEL_31;
    }
  }
  else if (a2 == 58)
  {
    uint64_t v39 = [**(id **)a1 uniqueIdentifierForTextureAtIndex:a3 inIndirectArgumentBuffer:**(void **)(a1 + 8) atOffset:**(void **)(a1 + 16)];
    unint64_t v18 = *(void **)(a1 + 40);
  }
  else
  {
    if (a2 != 59)
    {
      if (a2 == 60)
      {
        unint64_t v7 = [**(id **)a1 virtualAddressForBufferAtIndex:a3 inIndirectArgumentBuffer:**(void **)(a1 + 8) atOffset:**(void **)(a1 + 16)];
        uint64_t v39 = v7;
        id v8 = *(void **)(a1 + 24);
        uint8x8_t v9 = v8 + 1;
        uint64_t v10 = (void *)v8[1];
        if (v10)
        {
          id v11 = v8 + 1;
          uint64_t v12 = (void *)v8[1];
          do
          {
            unint64_t v13 = v12[4];
            BOOL v14 = v13 > v7;
            if (v13 <= v7) {
              uint64_t v15 = v12 + 1;
            }
            else {
              uint64_t v15 = v12;
            }
            if (v14) {
              id v11 = v12;
            }
            uint64_t v12 = (void *)*v15;
          }
          while (*v15);
          if (v11 == v9)
          {
            if (v8[2])
            {
              do
              {
                long long v17 = v10;
                uint64_t v10 = (void *)v10[1];
              }
              while (v10);
            }
            else
            {
              long long v17 = v8 + 1;
            }
          }
          else if (v11 == (void *)*v8)
          {
            long long v17 = v11;
          }
          else
          {
            id v16 = (void *)*v11;
            if (*v11)
            {
              do
              {
                long long v17 = v16;
                id v16 = (void *)v16[1];
              }
              while (v16);
            }
            else
            {
              do
              {
                long long v17 = (void *)v11[2];
                BOOL v19 = *v17 == (void)v11;
                id v11 = v17;
              }
              while (v19);
            }
          }
        }
        else
        {
          uint64_t v24 = v8[2];
          long long v17 = v8 + 1;
          if (v24)
          {
            do
            {
              long long v17 = (void *)v9[2];
              BOOL v19 = *v17 == (void)v9;
              uint8x8_t v9 = v17;
            }
            while (v19);
          }
        }
        unint64_t v25 = v17[4];
        if (v25 <= v7)
        {
          uint64_t v26 = *(void *)(a1 + 32);
          unint64_t v29 = *(void **)(v26 + 8);
          unint64_t v27 = (void *)(v26 + 8);
          long long v28 = v29;
          if (v29)
          {
            unint64_t v30 = v17[5];
            unint64_t v31 = v27;
            do
            {
              unint64_t v32 = v28[4];
              BOOL v33 = v32 >= v30;
              if (v32 >= v30) {
                long long v34 = v28;
              }
              else {
                long long v34 = v28 + 1;
              }
              if (v33) {
                unint64_t v31 = v28;
              }
              long long v28 = (void *)*v34;
            }
            while (*v34);
            if (v31 != v27 && v30 >= v31[4])
            {
              uint64_t v36 = v31[5];
              uint64_t v35 = v31[6];
              if (v36 != v35)
              {
                unint64_t v37 = v7 - v25;
                while (v37 >= *(void *)(v36 + 8))
                {
                  v36 += 16;
                  if (v36 == v35) {
                    goto LABEL_31;
                  }
                }
                unint64_t v21 = v30 + v37;
                goto LABEL_30;
              }
            }
          }
        }
      }
      goto LABEL_31;
    }
    uint64_t v39 = [**(id **)a1 uniqueIdentifierForSamplerAtIndex:a3 inIndirectArgumentBuffer:**(void **)(a1 + 8) atOffset:**(void **)(a1 + 16)];
    unint64_t v18 = *(void **)(a1 + 48);
  }
  uint64_t v20 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(v18, (unint64_t *)&v39);
  if (v20)
  {
    unint64_t v21 = v20[3];
LABEL_30:
    uint64_t v39 = v21;
  }
LABEL_31:
  unint64_t v22 = v39;
  unint64_t v38 = a3;
  uint64_t v40 = &v38;
  __n128 result = std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a4, &v38, (uint64_t)&std::piecewise_construct, (uint64_t **)&v40);
  result[5] = v22;
  return result;
}

void std::__function::__func<decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const&,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,MTLArgument *<unsigned long long,unsigned long long,std::less,std::less<unsigned long long><std::pair,unsigned long long>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&)::$_1,DYMTLOriginalProcessBuffer<std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&>,void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&&,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const&,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,MTLArgument *<unsigned long long,unsigned long long,std::less,std::less<unsigned long long><std::pair,unsigned long long>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&)::$_1,DYMTLOriginalProcessBuffer<std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&>,void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&&,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_2700EFD90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const&,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,MTLArgument *<unsigned long long,unsigned long long,std::less,std::less<unsigned long long><std::pair,unsigned long long>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&)::$_1,DYMTLOriginalProcessBuffer<std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&>,void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&&,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700EFD90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const&,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,MTLArgument *<unsigned long long,unsigned long long,std::less,std::less<unsigned long long><std::pair,unsigned long long>> const&,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::unordered_map<unsigned long long,unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,unsigned long long>>> const,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&)::$_1,DYMTLOriginalProcessBuffer<std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,objc_object * {__strong},std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,objc_object *>>> const&>,void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>,std::less<unsigned long long>,DYMTLOriginalProcessBuffer<std::pair<unsigned long long const>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,std::hash,std::equal_to,DYMTLOriginalProcessBuffer<std::less<unsigned long long><std::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&&,unsigned long)>::operator()(uint64_t a1, void **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a4;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 3221225472;
  v7[2] = ___ZZL20decodeReplayerBufferPU19objcproto9MTLBuffer11objc_objectyP32_MTLIndirectArgumentBufferLayoutP11MTLArgumentRKNSt3__13mapIyNS5_6vectorI26DYMTLOriginalProcessBufferNS5_9allocatorIS8_EEEENS5_4lessIyEENS9_INS5_4pairIKySB_EEEEEERKNS5_13unordered_mapIyyNS5_4hashIyEENS5_8equal_toIyEENS9_INSE_ISF_yEEEEEERKNSL_IyNS7_IyNS9_IyEEEESN_SP_NS9_INSE_ISF_SW_EEEEEESU_SU_SU_RKNS6_IyySD_SR_EESU_SU_SU_SU_SU_RKNSL_IyU8__strongP11objc_objectSN_SP_NS9_INSE_ISF_S17_EEEEEEENK3__1clEP7NSArrayIP15MTLStructMemberERS12_m_block_invoke;
  void v7[3] = &__block_descriptor_72_e32_v32__0__MTLStructMember_8Q16_B24l;
  v7[4] = *(void *)(a1 + 8);
  v7[5] = a3;
  v7[6] = v5;
  long long v8 = *(_OWORD *)(a1 + 16);
  return [v4 enumerateObjectsUsingBlock:v7];
}

void ___ZZL20decodeReplayerBufferPU19objcproto9MTLBuffer11objc_objectyP32_MTLIndirectArgumentBufferLayoutP11MTLArgumentRKNSt3__13mapIyNS5_6vectorI26DYMTLOriginalProcessBufferNS5_9allocatorIS8_EEEENS5_4lessIyEENS9_INS5_4pairIKySB_EEEEEERKNS5_13unordered_mapIyyNS5_4hashIyEENS5_8equal_toIyEENS9_INSE_ISF_yEEEEEERKNSL_IyNS7_IyNS9_IyEEEESN_SP_NS9_INSE_ISF_SW_EEEEEESU_SU_SU_RKNS6_IyySD_SR_EESU_SU_SU_SU_SU_RKNSL_IyU8__strongP11objc_objectSN_SP_NS9_INSE_ISF_S17_EEEEEEENK3__1clEP7NSArrayIP15MTLStructMemberERS12_m_block_invoke(void *a1, void *a2)
{
  id v9 = a2;
  uint64_t v3 = [v9 structType];

  if (v3)
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = [v9 structType];
    uint64_t v6 = [v5 members];
    std::function<void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,unsigned long long> &,unsigned long)>::operator()(v4, v6, a1[5], [v9 indirectArgumentIndex] + a1[6]);

LABEL_5:
    goto LABEL_6;
  }
  unint64_t v7 = [v9 arrayType];

  if (v7)
  {
    uint64_t v8 = a1[7];
    uint64_t v5 = [v9 arrayType];
    std::function<void ()(MTLArrayType *,std::map<unsigned long long,unsigned long long> &,unsigned long)>::operator()(v8, v5, a1[5], [v9 indirectArgumentIndex] + a1[6]);
    goto LABEL_5;
  }
  decodeReplayerBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const&,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&<unsigned long long,std::map<unsigned long long,DYMTLOriginalProcessBuffer<unsigned long long>>,MTLArgument *::hash,MTLArgument *::equal_to,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,DYMTLOriginalProcessBuffer<unsigned long long>>>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,std::__1<unsigned long long,unsigned long long,MTLArgument *::less,MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>> const&,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,MTLArgument *::unordered_map<unsigned long long,unsigned long long,MTLArgument *::hash<unsigned long long>,MTLArgument *::equal_to<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,unsigned long long>>> const,std::map<unsigned long long,MTLArgument *::vector<DYMTLOriginalProcessBuffer,MTLArgument *::allocator<MTLArgument *::vector>>,MTLArgument *::less<unsigned long long>,DYMTLOriginalProcessBuffer<MTLArgument *::pair<unsigned long long const,MTLArgument *::allocator<MTLArgument *::vector>>>> const&<unsigned long long,objc_object * {__strong},MTLArgument *::hash,MTLArgument *::equal_to,DYMTLOriginalProcessBuffer<MTLArgument *::less<unsigned long long><MTLArgument *::pair,objc_object *>>> const&)::$_2::operator()(a1[8], [v9 dataType], objc_msgSend(v9, "indirectArgumentIndex") + a1[6], (uint64_t **)a1[5]);
LABEL_6:
}

void sub_24F6D1060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,unsigned long long> &,unsigned long)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_24F6D12F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(MTLArrayType *,std::map<unsigned long long,unsigned long long> &,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(NSArray<MTLStructMember *> *,std::map<unsigned long long,unsigned long long> &,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::map<unsigned long long,unsigned long long>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned long long,unsigned long long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,unsigned long long>,std::__tree_node<std::__value_type<unsigned long long,unsigned long long>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_24F6D1444(_Unwind_Exception *a1)
{
  std::__tree<BufferEntry>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long long,unsigned long long>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long long,unsigned long long>,std::__tree_node<std::__value_type<unsigned long long,unsigned long long>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_hint_unique_key_args<unsigned long long,std::pair<unsigned long long const,unsigned long long> const&>(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      unint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_hint_unique_key_args<unsigned long long,std::pair<unsigned long long const,unsigned long long> const&>(uint64_t **a1, void *a2, unint64_t *a3, _OWORD *a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__find_equal<unsigned long long>(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<BufferEntry>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__find_equal<unsigned long long>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        unint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    id v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          id v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        id v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    BOOL v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      BOOL v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      unint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::function<void ()(NSArray<MTLStructMember *> *,unsigned long)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a3;
  id v6 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, uint64_t *))(*(void *)v4 + 48))(v4, &v6, &v5);
}

void sub_24F6D1790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long> *)::$_0,std::less<unsigned long long><std::map<unsigned long long,unsigned long long> *>,void ()(MTLArrayType *,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long> *)::$_0,std::less<unsigned long long><std::map<unsigned long long,unsigned long long> *>,void ()(MTLArrayType *,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_2700EFDD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long> *)::$_0,std::less<unsigned long long><std::map<unsigned long long,unsigned long long> *>,void ()(MTLArrayType *,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700EFDD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long> *)::$_0,std::less<unsigned long long><std::map<unsigned long long,unsigned long long> *>,void ()(MTLArrayType *,unsigned long)>::operator()(uint64_t a1, id *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  id v14 = *a2;
  for (unsigned int i = 0; ; unsigned int i = v6 + 1)
  {
    uint64_t v6 = i;
    if ([v14 arrayLength] <= (unint64_t)i) {
      break;
    }
    unint64_t v7 = [v14 elementStructType];

    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      BOOL v9 = [v14 elementStructType];
      uint64_t v10 = [v9 members];
      std::function<void ()(NSArray<MTLStructMember *> *,unsigned long)>::operator()(v8, v10, v4 + [v14 argumentIndexStride] * v6);

LABEL_7:
      continue;
    }
    uint64_t v11 = [v14 elementArrayType];

    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 16);
      BOOL v9 = [v14 elementArrayType];
      std::function<void ()(MTLArrayType *,unsigned long)>::operator()(v12, v9, v4 + [v14 argumentIndexStride] * v6);
      goto LABEL_7;
    }
    uint64_t v13 = [v14 elementType];
    if ((unint64_t)(v13 - 58) <= 0x16 && ((1 << (v13 - 58)) & 0x700007) != 0) {
      decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long,MTLArgument *::less<unsigned long long>,MTLArgument *::allocator<MTLArgument *::pair<unsigned long long const,unsigned long long>>> *)::$_2::operator()(*(uint64_t *****)(a1 + 24), v13, v4 + [v14 argumentIndexStride] * v6);
    }
  }
}

void sub_24F6D19BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long,MTLArgument *::less<unsigned long long>,MTLArgument *::allocator<MTLArgument *::pair<unsigned long long const,unsigned long long>>> *)::$_2::operator()(uint64_t ****a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = **a1;
  unint64_t v11 = a3;
  uint64_t v12 = &v11;
  __n128 result = std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v6, &v11, (uint64_t)&std::piecewise_construct, (uint64_t **)&v12);
  if (result[5] != -1)
  {
    if (a2 > 77)
    {
      switch(a2)
      {
        case 'N':
          uint64_t v8 = [*a1[1] uniqueIdentifierForRenderPipelineAtIndex:a3 inIndirectArgumentBuffer:*a1[2] atOffset:*a1[3]];
          break;
        case 'O':
          uint64_t v8 = [*a1[1] uniqueIdentifierForComputePipelineAtIndex:a3 inIndirectArgumentBuffer:*a1[2] atOffset:*a1[3]];
          break;
        case 'P':
          uint64_t v8 = [*a1[1] uniqueIdentifierForIndirectCommandBufferAtIndex:a3 inIndirectArgumentBuffer:*a1[2] atOffset:*a1[3]];
          break;
        default:
          return result;
      }
    }
    else
    {
      switch(a2)
      {
        case ':':
          uint64_t v8 = [*a1[1] uniqueIdentifierForTextureAtIndex:a3 inIndirectArgumentBuffer:*a1[2] atOffset:*a1[3]];
          break;
        case ';':
          uint64_t v8 = [*a1[1] uniqueIdentifierForSamplerAtIndex:a3 inIndirectArgumentBuffer:*a1[2] atOffset:*a1[3]];
          break;
        case '<':
          uint64_t v8 = [*a1[1] virtualAddressForBufferAtIndex:a3 inIndirectArgumentBuffer:*a1[2] atOffset:*a1[3]];
          break;
        default:
          return result;
      }
    }
    uint64_t v9 = v8;
    uint64_t v10 = **a1;
    unint64_t v11 = a3;
    uint64_t v12 = &v11;
    __n128 result = std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v10, &v11, (uint64_t)&std::piecewise_construct, (uint64_t **)&v12);
    result[5] = v9;
  }
  return result;
}

void std::__function::__func<decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long> *)::$_1,std::less<unsigned long long><std::map<unsigned long long,unsigned long long> *>,void ()(NSArray<MTLStructMember *> *,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long> *)::$_1,std::less<unsigned long long><std::map<unsigned long long,unsigned long long> *>,void ()(NSArray<MTLStructMember *> *,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_2700EFE20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long> *)::$_1,std::less<unsigned long long><std::map<unsigned long long,unsigned long long> *>,void ()(NSArray<MTLStructMember *> *,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700EFE20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long> *)::$_1,std::less<unsigned long long><std::map<unsigned long long,unsigned long long> *>,void ()(NSArray<MTLStructMember *> *,unsigned long)>::operator()(uint64_t a1, void **a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  void v6[2] = ___ZZL20decodeOriginalBufferPU19objcproto9MTLBuffer11objc_objectyP32_MTLIndirectArgumentBufferLayoutP11MTLArgumentPNSt3__13mapIyyNS5_4lessIyEENS5_9allocatorINS5_4pairIKyyEEEEEEENK3__1clEP7NSArrayIP15MTLStructMemberEm_block_invoke;
  v6[3] = &__block_descriptor_64_e32_v32__0__MTLStructMember_8Q16_B24l;
  void v6[4] = *(void *)(a1 + 8);
  v6[5] = v4;
  long long v7 = *(_OWORD *)(a1 + 16);
  return [v3 enumerateObjectsUsingBlock:v6];
}

void ___ZZL20decodeOriginalBufferPU19objcproto9MTLBuffer11objc_objectyP32_MTLIndirectArgumentBufferLayoutP11MTLArgumentPNSt3__13mapIyyNS5_4lessIyEENS5_9allocatorINS5_4pairIKyyEEEEEEENK3__1clEP7NSArrayIP15MTLStructMemberEm_block_invoke(uint64_t a1, void *a2)
{
  id v9 = a2;
  uint64_t v3 = [v9 structType];

  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = [v9 structType];
    uint64_t v6 = [v5 members];
    std::function<void ()(NSArray<MTLStructMember *> *,unsigned long)>::operator()(v4, v6, [v9 indirectArgumentIndex] + *(void *)(a1 + 40));

LABEL_5:
    goto LABEL_6;
  }
  long long v7 = [v9 arrayType];

  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v5 = [v9 arrayType];
    std::function<void ()(MTLArrayType *,unsigned long)>::operator()(v8, v5, [v9 indirectArgumentIndex] + *(void *)(a1 + 40));
    goto LABEL_5;
  }
  decodeOriginalBuffer(objc_object  {objcproto9MTLBuffer}*,unsigned long long,_MTLIndirectArgumentBufferLayout *,MTLArgument *,std::map<unsigned long long,unsigned long long,MTLArgument *::less<unsigned long long>,MTLArgument *::allocator<MTLArgument *::pair<unsigned long long const,unsigned long long>>> *)::$_2::operator()(*(uint64_t *****)(a1 + 56), [v9 dataType], objc_msgSend(v9, "indirectArgumentIndex") + *(void *)(a1 + 40));
LABEL_6:
}

void sub_24F6D1DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(NSArray<MTLStructMember *> *,unsigned long)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_24F6D2060(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(NSArray<MTLStructMember *> *,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>,std::reverse_iterator<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t std::vector<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>,std::reverse_iterator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    std::__tree<BufferEntry>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  long long v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  void *i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *unint64_t v22 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *long long v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6D2968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  long long v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  void *i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[5] = 0;
  i[4] = 0;
  i[2] = v14;
  i[3] = i + 4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *unint64_t v22 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *long long v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6D2BC0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::__tree<DYMTLIABDecodingOp>::destroy((uint64_t)(a2 + 3), a2[4]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t *std::__tree<DYMTLIABDecodingOp>::__emplace_unique_key_args<DYMTLIABDecodingOp,DYMTLIABDecodingOp const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<DYMTLIABDecodingOp>::__find_equal<DYMTLIABDecodingOp>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<DYMTLIABDecodingOp>::__construct_node<DYMTLIABDecodingOp const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<BufferEntry>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void *std::__tree<DYMTLIABDecodingOp>::__find_equal<DYMTLIABDecodingOp>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!DYMTLIABDecodingOp::operator<(a3, (uint64_t)(v4 + 4))) {
          break;
        }
        unint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!DYMTLIABDecodingOp::operator<(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      unint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *std::__tree<DYMTLIABDecodingOp>::__construct_node<DYMTLIABDecodingOp const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  void v6[2] = *(_OWORD *)a2;
  *((unsigned char *)v6 + 48) = *(unsigned char *)(a2 + 16);
  *((void *)v6 + 8) = 0;
  *((void *)v6 + 9) = 0;
  *((void *)v6 + 7) = 0;
  uint64_t result = std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)v6 + 7, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_24F6D2DD0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<DYMTLIABDecodingOp,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

BOOL DYMTLIABDecodingOp::operator<(uint64_t a1, uint64_t a2)
{
  v6[0] = a1 + 8;
  v6[1] = a1 + 24;
  void v6[2] = a1;
  v6[3] = a1 + 16;
  unint64_t v2 = *(void *)(a2 + 8);
  v5[0] = a2 + 8;
  v5[1] = a2 + 24;
  v5[2] = a2;
  v5[3] = a2 + 16;
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 < v2) {
    return 1;
  }
  if (v2 >= v3) {
    return std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<unsigned long long const&,std::vector<unsigned long long> const&,unsigned long long const&,BOOL const&>,std::tuple<unsigned long long const&,std::vector<unsigned long long> const&,unsigned long long const&,BOOL const&>>((uint64_t)&v7, (uint64_t)v6, (uint64_t)v5);
  }
  return 0;
}

BOOL std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<unsigned long long const&,std::vector<unsigned long long> const&,unsigned long long const&,BOOL const&>,std::tuple<unsigned long long const&,std::vector<unsigned long long> const&,unsigned long long const&,BOOL const&>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(unint64_t ***)(a3 + 8);
  unint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  char v7 = **(unint64_t ***)(a2 + 8);
  uint64_t v6 = *(unint64_t **)(*(void *)(a2 + 8) + 8);
  if (v4 != v5)
  {
    uint64_t v8 = v4 + 1;
    uint8x8_t v9 = **(unint64_t ***)(a2 + 8);
    while (v9 != v6)
    {
      unint64_t v10 = *v9;
      unint64_t v11 = *(v8 - 1);
      if (*v9 < v11) {
        break;
      }
      ++v9;
      if (v11 < v10 || v8++ == v5) {
        goto LABEL_10;
      }
    }
    return 1;
  }
LABEL_10:
  if (v7 != v6)
  {
    long long v13 = v7 + 1;
    while (v4 != v5)
    {
      unint64_t v14 = *v4;
      unint64_t v15 = *(v13 - 1);
      if (*v4 < v15) {
        break;
      }
      ++v4;
      if (v15 < v14 || v13++ == v6) {
        goto LABEL_19;
      }
    }
    return 0;
  }
LABEL_19:
  unint64_t v17 = **(void **)(a2 + 16);
  unint64_t v18 = **(void **)(a3 + 16);
  if (v17 < v18) {
    return 1;
  }
  if (v18 < v17) {
    return 0;
  }
  return **(unsigned __int8 **)(a2 + 24) < **(unsigned __int8 **)(a3 + 24);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<DYMTLIABDecodingOp,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = (void *)__p[7];
    if (v3)
    {
      __p[8] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree<DYMTLIABDecodingOp>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<DYMTLIABDecodingOp>::destroy(a1, *a2);
    std::__tree<DYMTLIABDecodingOp>::destroy(a1, a2[1]);
    unint64_t v4 = (void *)a2[7];
    if (v4)
    {
      a2[8] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<DYMTLIABDecodingOp>::swap(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v5 = result[1];
  uint64_t v4 = result[2];
  unint64_t v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v4;
  if (result[2]) {
    uint64_t result = (uint64_t *)(*v3 + 16);
  }
  void *result = (uint64_t)v3;
  uint64_t v6 = (void *)(*(void *)(a2 + 8) + 16);
  if (!v4) {
    uint64_t v6 = (void *)a2;
  }
  *uint64_t v6 = a2 + 8;
  return result;
}

uint64_t *std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<BufferEntry>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::set<DYMTLIABDecodingOp>>>>::__deallocate_node(uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = *v2;
      std::__tree<DYMTLIABDecodingOp>::destroy((uint64_t)(v2 + 3), v2[4]);
      operator delete(v2);
      uint64_t v2 = (void **)v3;
    }
    while (v3);
  }
}

uint64_t *std::__tree<DYMTLIABDecodingOp>::__emplace_hint_unique_key_args<DYMTLIABDecodingOp,DYMTLIABDecodingOp const&>(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<DYMTLIABDecodingOp>::__find_equal<DYMTLIABDecodingOp>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<DYMTLIABDecodingOp>::__construct_node<DYMTLIABDecodingOp const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<BufferEntry>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<DYMTLIABDecodingOp>::__find_equal<DYMTLIABDecodingOp>(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 != a2 && !DYMTLIABDecodingOp::operator<(a5, (uint64_t)(a2 + 4)))
  {
    if (!DYMTLIABDecodingOp::operator<((uint64_t)(a2 + 4), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      unint64_t v14 = (void *)a2[1];
      do
      {
        unint64_t v15 = v14;
        unint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      unint64_t v18 = a2;
      do
      {
        unint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        unint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!DYMTLIABDecodingOp::operator<(a5, (uint64_t)(v15 + 4))) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    unint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  unint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      unint64_t v12 = v11;
      unint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    float v16 = a2;
    do
    {
      unint64_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      float v16 = v12;
    }
    while (v17);
  }
  if (DYMTLIABDecodingOp::operator<((uint64_t)(v12 + 4), a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return std::__tree<DYMTLIABDecodingOp>::__find_equal<DYMTLIABDecodingOp>((uint64_t)a1, a3, a5);
}

void *std::__function::__value_func<MTLStructType * ()(MTLStructType *,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_24F6D35E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id std::function<MTLStructType * ()(MTLArrayType *,unsigned long)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = a3;
  id v8 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (*(void (**)(uint64_t, id *, uint64_t *))(*(void *)v4 + 48))(v4, &v8, &v7);

  return v5;
}

void sub_24F6D3698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<MTLStructType * ()(MTLArrayType *,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_24F6D38F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void ___ZZ82__DYMTLIndirectArgumentBufferManager_findStructTypeForArgumentIndex_inStructType__ENK3__1clEP13MTLStructTypem_block_invoke(uint64_t a1, void *a2, uint64_t a3, BOOL *a4)
{
  id v6 = a2;
  uint64_t v7 = *(void *)(a1 + 40);
  id v16 = v6;
  if ([v6 indirectArgumentIndex] + v7 == **(void **)(a1 + 48) && objc_msgSend(v16, "dataType") == 60)
  {
    id v8 = [v16 pointerType];
    uint64_t v9 = [v8 elementStructType];
  }
  else
  {
    uint64_t v10 = [v16 structType];

    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 56);
      id v8 = [v16 structType];
      uint64_t v9 = std::function<MTLStructType * ()(MTLStructType *,unsigned long)>::operator()(v11, v8, [v16 indirectArgumentIndex] + *(void *)(a1 + 40));
    }
    else
    {
      unint64_t v12 = [v16 arrayType];

      if (!v12) {
        goto LABEL_9;
      }
      uint64_t v13 = *(void *)(a1 + 64);
      id v8 = [v16 arrayType];
      uint64_t v9 = std::function<MTLStructType * ()(MTLArrayType *,unsigned long)>::operator()(v13, v8, [v16 indirectArgumentIndex] + *(void *)(a1 + 40));
    }
  }
  uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8);
  unint64_t v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v9;

LABEL_9:
  *a4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) != 0;
}

void sub_24F6D3AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<MTLStructType * ()(MTLStructType *,unsigned long)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    unint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_24F6D3D28(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::vector<DYMTLReplayerIAB::Usage>::__push_back_slow_path<DYMTLReplayerIAB::Usage const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v14[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[24 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  *((void *)v11 + 1) = *(id *)(a2 + 8);
  *((void *)v11 + 2) = *(id *)(a2 + 16);
  v14[2] = v11 + 24;
  std::vector<DYMTLReplayerIAB::Usage>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<DYMTLReplayerIAB::Usage>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_24F6D3E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DYMTLReplayerIAB::Usage>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DYMTLReplayerIAB::Usage>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      uint64_t v9 = *(void *)(a3 - 24);
      a3 -= 24;
      *(void *)(v8 - 24) = v9;
      v8 -= 24;
      long long v10 = *(_OWORD *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(_OWORD *)(v8 + 8) = v10;
      v7 -= 24;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v8;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<std::reverse_iterator<DYMTLReplayerIAB::Usage*>>,std::reverse_iterator<std::reverse_iterator<DYMTLReplayerIAB::Usage*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<std::reverse_iterator<DYMTLReplayerIAB::Usage*>>,std::reverse_iterator<std::reverse_iterator<DYMTLReplayerIAB::Usage*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {

    uint64_t i = *(void *)(a2 + 32) + 24;
  }
}

uint64_t std::__split_buffer<DYMTLReplayerIAB::Usage>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<DYMTLReplayerIAB::Usage>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
  }
}

uint64_t std::vector<DYMTLReplayerIAB>::__push_back_slow_path<DYMTLReplayerIAB const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DYMTLReplayerIAB>>((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  uint64_t v12 = &v8[32 * v3];
  uint64_t v14 = &v8[32 * v7];
  std::allocator<DYMTLReplayerIAB>::construct[abi:ne180100]<DYMTLReplayerIAB,DYMTLReplayerIAB const&>((uint64_t)(a1 + 2), v12, a2);
  uint64_t v13 = v12 + 32;
  std::vector<DYMTLReplayerIAB>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<DYMTLReplayerIAB>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_24F6D41E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DYMTLReplayerIAB>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::allocator<DYMTLReplayerIAB>::construct[abi:ne180100]<DYMTLReplayerIAB,DYMTLReplayerIAB const&>(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = *(id *)a3;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return std::vector<DYMTLReplayerIAB::Usage>::__init_with_size[abi:ne180100]<DYMTLReplayerIAB::Usage*,DYMTLReplayerIAB::Usage*>(a2 + 1, *(void *)(a3 + 8), *(void *)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3));
}

void sub_24F6D424C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<DYMTLReplayerIAB::Usage>::__init_with_size[abi:ne180100]<DYMTLReplayerIAB::Usage*,DYMTLReplayerIAB::Usage*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<DYMTLReplayerIAB::Usage>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DYMTLReplayerIAB::Usage>,DYMTLReplayerIAB::Usage*,DYMTLReplayerIAB::Usage*,DYMTLReplayerIAB::Usage*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_24F6D42C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<DYMTLReplayerIAB::Usage>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<DYMTLReplayerIAB::Usage>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DYMTLReplayerIAB::Usage>,DYMTLReplayerIAB::Usage*,DYMTLReplayerIAB::Usage*,DYMTLReplayerIAB::Usage*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 == a3)
  {
    unint64_t v7 = a4;
  }
  else
  {
    uint64_t v6 = a2;
    unint64_t v7 = v12;
    do
    {
      *uint64_t v4 = *(void *)v6;
      v4[1] = *(id *)(v6 + 8);
      v4[2] = *(id *)(v6 + 16);
      v7 += 3;
      v6 += 24;
      uint64_t v4 = v7;
    }
    while (v6 != a3);
    uint64_t v12 = v7;
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB::Usage>,DYMTLReplayerIAB::Usage*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v7;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB::Usage>,DYMTLReplayerIAB::Usage*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::__allocator_destroy[abi:ne180100]<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>(*(void *)a1, **(void **)(a1 + 16), **(void **)(a1 + 16), **(void **)(a1 + 8), **(void **)(a1 + 8));
  }
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    uint64_t v6 = a3;
    do
    {

      v6 -= 24;
    }
    while (v6 != a5);
  }
}

uint64_t std::vector<DYMTLReplayerIAB>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DYMTLReplayerIAB>,std::reverse_iterator<DYMTLReplayerIAB*>,std::reverse_iterator<DYMTLReplayerIAB*>,std::reverse_iterator<DYMTLReplayerIAB*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DYMTLReplayerIAB>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DYMTLReplayerIAB>,std::reverse_iterator<DYMTLReplayerIAB*>,std::reverse_iterator<DYMTLReplayerIAB*>,std::reverse_iterator<DYMTLReplayerIAB*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 32);
      a3 -= 32;
      *(void *)a3 = 0;
      *(void *)(v7 - 32) = v8;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB>,std::reverse_iterator<DYMTLReplayerIAB*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB>,std::reverse_iterator<DYMTLReplayerIAB*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB>,std::reverse_iterator<DYMTLReplayerIAB*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB>,std::reverse_iterator<DYMTLReplayerIAB*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<DYMTLReplayerIAB>,std::reverse_iterator<std::reverse_iterator<DYMTLReplayerIAB*>>,std::reverse_iterator<std::reverse_iterator<DYMTLReplayerIAB*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<DYMTLReplayerIAB>,std::reverse_iterator<std::reverse_iterator<DYMTLReplayerIAB*>>,std::reverse_iterator<std::reverse_iterator<DYMTLReplayerIAB*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(id **)(a2 + 32); i != *(id **)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t v6 = i + 1;
    std::vector<DYMTLReplayerIAB::Usage>::__destroy_vector::operator()[abi:ne180100](&v6);

    uint64_t i = (id *)(*(void *)(a2 + 32) + 32);
  }
}

uint64_t std::__split_buffer<DYMTLReplayerIAB>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<DYMTLReplayerIAB>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    uint64_t v5 = (void **)(i - 24);
    std::vector<DYMTLReplayerIAB::Usage>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<DYMTLReplayerIAB>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 32)
  {
    uint64_t v6 = (void **)(i - 24);
    std::vector<DYMTLReplayerIAB::Usage>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v5 = *(void **)(i - 32);
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 32;
        std::__tree<BufferEntry>::destroy((uint64_t)(v4 - 24), *((void **)v4 - 2));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>>((uint64_t)(a1 + 2), a1[1], (uint64_t *)a1[1], *a1, (uint64_t *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v8 = a3 - 2;
    do
    {
      *(void *)(v7 - 32) = *(v8 - 2);
      *(void *)(v7 - 24) = *(v8 - 1);
      uint64_t v9 = *v8;
      *(void *)(v7 - 16) = *v8;
      uint64_t v10 = v7 - 16;
      uint64_t v11 = v8[1];
      *(void *)(v7 - 8) = v11;
      if (v11)
      {
        *(void *)(v9 + 16) = v10;
        *(v8 - 1) = (uint64_t)v8;
        uint64_t *v8 = 0;
        v8[1] = 0;
      }
      else
      {
        *(void *)(v7 - 24) = v10;
      }
      uint64_t v7 = *((void *)&v18 + 1) - 32;
      *((void *)&v18 + 1) -= 32;
      uint64_t v12 = v8 - 2;
      v8 -= 4;
    }
    while (v12 != a5);
    uint64_t v13 = v18;
  }
  char v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>,std::reverse_iterator<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v1 != v2)
  {
    uint64_t v3 = v1 + 8;
    do
    {
      std::__tree<BufferEntry>::destroy(v3, *(void **)(v3 + 8));
      uint64_t v4 = v3 + 24;
      v3 += 32;
    }
    while (v4 != v2);
  }
}

void **std::__split_buffer<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<unsigned long long,std::map<unsigned long long,unsigned long long>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__tree<BufferEntry>::destroy(i - 24, *(void **)(i - 16));
  }
}

void std::vector<std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<DYMTLOriginalProcessBuffer>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unordered_map<unsigned long long,unsigned long long>>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::vector<DYMTLReplayerIAB>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<DYMTLReplayerIAB>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_24F6D4F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D512C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D54D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D5758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Block_object_dispose((const void *)(v21 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_24F6D5858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D58FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6D5B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Block_object_dispose((const void *)(v21 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_24F6D5C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D5CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6D5F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Block_object_dispose((const void *)(v21 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_24F6D6040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D60E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6D6334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Block_object_dispose((const void *)(v21 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_24F6D6434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D64D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6D7244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&STACK[0x228], 8);
  std::__tree<BufferEntry>::destroy(a11, (void *)STACK[0x260]);

  _Unwind_Resume(a1);
}

void sub_24F6D7700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__2(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  uint64_t v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    *uint64_t v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_24F6D7810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D78D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D79EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6D7AB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D7B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D7C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6D7D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6D7DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D7E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D83B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  _Block_object_dispose(&a32, 8);
  std::__tree<BufferEntry>::destroy(a9, a39);

  _Unwind_Resume(a1);
}

void sub_24F6D8660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6D8724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D87E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D8918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24F6D89F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_24F6D8BE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D8DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D8F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D91D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D9378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6D9D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 ShaderDebugger::FragmentTraceBufferVersionedHeader::setPositionMin(uint64_t a1, unsigned __int32 *a2)
{
  if (*(_DWORD *)(a1 + 16) <= 2u)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    long long v3 = *(_OWORD *)(v2 + 16);
    v2 += 16;
    long long v4 = v3;
    result.n128_u32[0] = *a2;
    *(__n128 *)uint64_t v2 = result;
    result.n128_u32[1] = a2[1];
    *(__n128 *)uint64_t v2 = result;
    result.n128_u32[2] = a2[2];
    *(__n128 *)uint64_t v2 = result;
    result.n128_u32[3] = a2[3];
    *(__n128 *)uint64_t v2 = result;
  }
  return result;
}

__n128 ShaderDebugger::FragmentTraceBufferVersionedHeader::setPositionMax(uint64_t a1, unsigned __int32 *a2)
{
  if (*(_DWORD *)(a1 + 16) <= 2u)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    long long v3 = *(_OWORD *)(v2 + 32);
    v2 += 32;
    long long v4 = v3;
    result.n128_u32[0] = *a2;
    *(__n128 *)uint64_t v2 = result;
    result.n128_u32[1] = a2[1];
    *(__n128 *)uint64_t v2 = result;
    result.n128_u32[2] = a2[2];
    *(__n128 *)uint64_t v2 = result;
    result.n128_u32[3] = a2[3];
    *(__n128 *)uint64_t v2 = result;
  }
  return result;
}

void sub_24F6DA144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6DA66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *__p, uint64_t a17)
{
  _Unwind_Resume(a1);
}

void sub_24F6DA9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  dy_defer::~dy_defer((dy_defer *)va);
  _Unwind_Resume(a1);
}

void *std::vector<DYMTLOriginalProcessBuffer>::__init_with_size[abi:ne180100]<DYMTLOriginalProcessBuffer*,DYMTLOriginalProcessBuffer*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<DYMTLOriginalProcessBuffer>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24F6DABB0(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<DYMTLOriginalProcessBuffer>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void dy_defer::~dy_defer(dy_defer *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](this);
}

uint64_t *std::__tree<std::__value_type<unsigned long,DYMTLBoundSamplerInfo>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,DYMTLBoundSamplerInfo>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,DYMTLBoundSamplerInfo>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x38uLL);
    v11[4] = **a4;
    std::__tree<BufferEntry>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::__tree<std::__value_type<objc_object  {objcproto15MTLSamplerState}* {__strong},unsigned long long>,std::__map_value_compare<objc_object  {objcproto15MTLSamplerState}*,objc_object  {objcproto15MTLSamplerState}* {__strong},std::less<objc_object  {objcproto15MTLSamplerState}*>,true>,std::allocator<objc_object  {objcproto15MTLSamplerState}* {__strong}>>::__emplace_unique_key_args<objc_object  {objcproto15MTLSamplerState}*,std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto15MTLSamplerState} const {__strong}&>,std::piecewise_construct_t const&<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = (uint64_t)**a4;
    v11[5] = 0;
    std::__tree<BufferEntry>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong}>,std::__unordered_map_hasher<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong},std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,objc_object  {objcproto9MTLBuffer}* {__strong},std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto9MTLBuffer}* {__strong}>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::piecewise_construct_t const&<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *uint64_t v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6DB030(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<objc_object  {objcproto15MTLSamplerState}* {__strong},unsigned long long>,std::__map_value_compare<objc_object  {objcproto15MTLSamplerState}*,objc_object  {objcproto15MTLSamplerState}* {__strong},std::less<objc_object  {objcproto15MTLSamplerState}*>,true>,std::allocator<objc_object  {objcproto15MTLSamplerState}* {__strong}>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<objc_object  {objcproto15MTLSamplerState}* {__strong},unsigned long long>,std::__map_value_compare<objc_object  {objcproto15MTLSamplerState}*,objc_object  {objcproto15MTLSamplerState}* {__strong},std::less<objc_object  {objcproto15MTLSamplerState}*>,true>,std::allocator<objc_object  {objcproto15MTLSamplerState}* {__strong}>>::destroy(a1, *a2);
    std::__tree<std::__value_type<objc_object  {objcproto15MTLSamplerState}* {__strong},unsigned long long>,std::__map_value_compare<objc_object  {objcproto15MTLSamplerState}*,objc_object  {objcproto15MTLSamplerState}* {__strong},std::less<objc_object  {objcproto15MTLSamplerState}*>,true>,std::allocator<objc_object  {objcproto15MTLSamplerState}* {__strong}>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

void std::__tree<std::__value_type<MTLTextureType,objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<MTLTextureType,objc_object  {objcproto10MTLTexture}* {__strong},std::less<MTLTextureType>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<MTLTextureType,objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<MTLTextureType,objc_object  {objcproto10MTLTexture}* {__strong},std::less<MTLTextureType>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::destroy(a1, *a2);
    std::__tree<std::__value_type<MTLTextureType,objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<MTLTextureType,objc_object  {objcproto10MTLTexture}* {__strong},std::less<MTLTextureType>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  memset(v5, 0, sizeof(v5));
  int v6 = 1065353216;
  ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules(a1, a2, v5, a3, a4);
  return std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table((uint64_t)v5);
}

void sub_24F6DB240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  v134[7] = *MEMORY[0x263EF8340];
  unint64_t v8 = (void *)(a1 + 8);
  std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = v8;
  *(void *)(a1 + 16) = 0;
  void *v8 = 0;
  *(void *)&long long v96 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeThreadTracePoint;
  *((void *)&v96 + 1) = 0;
  uint64_t v97 = a1;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[24],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(v99, "tracepoint_thread_begin", &v96);
  *(void *)&long long v94 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionBeginTracePoint;
  *((void *)&v94 + 1) = 0;
  uint64_t v95 = a1;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[26],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(v101, "tracepoint_function_begin", &v94);
  *(void *)&long long v92 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionEndTracePoint;
  *((void *)&v92 + 1) = 0;
  uint64_t v93 = a1;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[24],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(v105, "tracepoint_function_end", &v92);
  *(void *)&long long v90 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionCallTracePoint;
  *((void *)&v90 + 1) = 0;
  uint64_t v91 = a1;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[16],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(&v107, "tracepoint_call", &v90);
  *(void *)&long long v88 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeVariableTracePoint;
  *((void *)&v88 + 1) = 0;
  uint64_t v89 = a1;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[20],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(&v109, "tracepoint_variable", &v88);
  *(void *)&long long v86 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDataTracePoint;
  *((void *)&v86 + 1) = 0;
  uint64_t v87 = a1;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[16],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(v113, "tracepoint_data", &v86);
  *(void *)&long long v84 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDataValueTracePoint;
  *((void *)&v84 + 1) = 0;
  uint64_t v85 = a1;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[22],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(v116, "tracepoint_data_value", &v84);
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  v46.__r_.__value_.__l.__size_ = 0;
  v46.__r_.__value_.__r.__words[2] = a1;
  uint64_t v47 = 0;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[26],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(&v117, "tracepoint_loop_begin_for", (long long *)&v46);
  v82.__r_.__value_.__r.__words[0] = (std::string::size_type)ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  v82.__r_.__value_.__l.__size_ = 0;
  v82.__r_.__value_.__r.__words[2] = a1;
  uint64_t v83 = 1;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[28],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v123, "tracepoint_loop_begin_while", (long long *)&v82);
  *(void *)&long long v79 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((void *)&v79 + 1) = 0;
  uint64_t v80 = a1;
  uint64_t v81 = 2;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[25],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v124, "tracepoint_loop_begin_do", &v79);
  *(void *)&long long __p = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((void *)&__p + 1) = 0;
  uint64_t v77 = a1;
  uint64_t v78 = 3;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[27],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v125, "tracepoint_loop_init_begin", &__p);
  *(void *)&long long v73 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((void *)&v73 + 1) = 0;
  v74 = (void **)a1;
  uint64_t v75 = 4;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[25],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v126, "tracepoint_loop_init_end", &v73);
  *(void *)&long long v70 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((void *)&v70 + 1) = 0;
  uint64_t v71 = a1;
  uint64_t v72 = 5;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[27],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v127, "tracepoint_loop_cond_begin", &v70);
  *(void *)&long long v67 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((void *)&v67 + 1) = 0;
  uint64_t v68 = a1;
  uint64_t v69 = 6;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[25],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v128, "tracepoint_loop_cond_end", &v67);
  *(void *)&long long v64 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((void *)&v64 + 1) = 0;
  uint64_t v65 = a1;
  uint64_t v66 = 7;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[26],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v129, "tracepoint_loop_inc_begin", &v64);
  *(void *)&long long v61 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((void *)&v61 + 1) = 0;
  uint64_t v62 = a1;
  uint64_t v63 = 8;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[24],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v130, "tracepoint_loop_inc_end", &v61);
  *(void *)&long long v58 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((void *)&v58 + 1) = 0;
  uint64_t v59 = a1;
  uint64_t v60 = 9;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[27],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v131, "tracepoint_loop_body_begin", &v58);
  *(void *)&long long v55 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((void *)&v55 + 1) = 0;
  uint64_t v56 = a1;
  uint64_t v57 = 10;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[25],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v132, "tracepoint_loop_body_end", &v55);
  *(void *)&long long v52 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((void *)&v52 + 1) = 0;
  uint64_t v53 = a1;
  uint64_t v54 = 11;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[20],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v133, "tracepoint_loop_end", &v52);
  *(void *)&long long v49 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint;
  *((void *)&v49 + 1) = 0;
  uint64_t v50 = a1;
  uint64_t v51 = 12;
  std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[23],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(v134, "tracepoint_thread_exit", &v49);
  id v42 = a5;
  std::unordered_map<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::unordered_map((uint64_t)v98, (unsigned __int8 *)v99, 20);
  uint64_t v9 = 1120;
  do
  {
    std::__function::__value_func<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::~__value_func[abi:ne180100](&v98[v9 + 8]);
    if ((char)v98[v9 + 7] < 0) {
      operator delete(*(void **)((char *)&v96 + v9 + 8));
    }
    v9 -= 56;
  }
  while (v9);
  LODWORD(v70) = 0;
  unint64_t v44 = (unint64_t)(a2[1] - *a2) >> 3;
  if (v44)
  {
    unsigned int v10 = 0;
    do
    {
      uint64_t v11 = *a2;
      v99[0] = v100;
      v99[1] = *(void **)"";
      uint64_t v102 = v104;
      uint64_t v103 = *(void *)"";
      uint64_t v106 = v108;
      uint64_t v107 = *(void *)"";
      uint64_t v110 = v112;
      uint64_t v111 = *(void *)"";
      uint64_t v114 = v116;
      uint64_t v115 = *(void *)"";
      v118 = v122;
      id v119 = v122;
      uint64_t v120 = 32;
      int v121 = 0;
      llvm::DebugInfoFinder::processModule();
      if (v103)
      {
        unint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::find<unsigned int>(a3, (unsigned int *)&v70);
        if (v12) {
          uint64_t v13 = (uint64_t)(v12 + 3);
        }
        else {
          uint64_t v13 = *(void *)(v11 + 8 * v10) + 192;
        }
        if (*(char *)(v13 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)v13, *(void *)(v13 + 8));
        }
        else {
          std::string v82 = *(std::string *)v13;
        }
        std::string::basic_string[abi:ne180100]<0>(&v79, "__trace.base_id");
        if (v80 >= 0) {
          size_t v14 = HIBYTE(v80);
        }
        else {
          size_t v14 = *((void *)&v79 + 1);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v46, v14 + 1);
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v15 = &v46;
        }
        else {
          float v15 = (std::string *)v46.__r_.__value_.__r.__words[0];
        }
        if (v14)
        {
          if (v80 >= 0) {
            BOOL v16 = &v79;
          }
          else {
            BOOL v16 = (long long *)v79;
          }
          memmove(v15, v16, v14);
        }
        *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v14) = 46;
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v17 = &v82;
        }
        else {
          unint64_t v17 = (std::string *)v82.__r_.__value_.__r.__words[0];
        }
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v82.__r_.__value_.__l.__size_;
        }
        size_t v19 = std::string::append(&v46, (const std::string::value_type *)v17, size);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        uint64_t v77 = v19->__r_.__value_.__r.__words[2];
        long long __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        LODWORD(v67) = 0;
        uint64_t GlobalVariable = llvm::Module::getGlobalVariable();
        if (GlobalVariable || (uint64_t GlobalVariable = llvm::Module::getGlobalVariable()) != 0)
        {
          uint64_t v22 = *(void *)(GlobalVariable - 32);
          if (v22)
          {
            unsigned int v23 = *(_DWORD *)(v22 + 32);
            if (v23 > 0x40) {
              uint64_t v24 = **(void **)(v22 + 24);
            }
            else {
              uint64_t v24 = (uint64_t)(*(void *)(v22 + 24) << -(char)v23) >> -(char)v23;
            }
            LODWORD(v67) = v24;
          }
        }
        v46.__r_.__value_.__r.__words[0] = (std::string::size_type)"tracepoint_library_version";
        __int16 v48 = 259;
        NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata();
        if (NamedMetadata)
        {
          uint64_t Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
          uint64_t v27 = *(void *)(*(void *)(Operand - 8 * *(unsigned int *)(Operand + 8)) + 128);
          unsigned int v28 = *(_DWORD *)(v27 + 32);
          if (v28 > 0x40) {
            LODWORD(v27) = **(_DWORD **)(v27 + 24);
          }
          else {
            uint64_t v27 = (uint64_t)(*(void *)(v27 + 24) << -(char)v28) >> -(char)v28;
          }
          *(void *)(a1 + 64) = v27;
        }
        *(void *)&long long v73 = &v67;
        *((void *)&v73 + 1) = v98;
        v74 = v99;
        v46.__r_.__value_.__r.__words[0] = (std::string::size_type)"tracepoint.sets";
        __int16 v48 = 259;
        unint64_t v29 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata();
        unint64_t v30 = v29;
        if (v29)
        {
          int NumOperands = llvm::NamedMDNode::getNumOperands(v29);
          if (NumOperands)
          {
            for (int i = 0; i != NumOperands; ++i)
            {
              uint64_t v33 = llvm::NamedMDNode::getOperand(v30);
              if (v33)
              {
                uint64_t v34 = *(void *)(v33 - 8 * *(unsigned int *)(v33 + 8) + 16);
                if (v34) {
                  uint64_t v35 = (uint64_t *)(v34 - 8 * *(unsigned int *)(v34 + 8));
                }
                else {
                  uint64_t v35 = 0;
                }
                while (v35 != (uint64_t *)v34)
                  ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules(std::vector<std::unique_ptr<llvm::Module>> const&,std::unordered_map<unsigned int,std::string> const&,unsigned long long *)::$_0::operator()((int **)&v73, *v35++);
              }
            }
          }
        }
        else
        {
          v46.__r_.__value_.__r.__words[0] = (std::string::size_type)"tracepoint";
          __int16 v48 = 259;
          uint64_t v36 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata();
          unint64_t v37 = v36;
          if (v36)
          {
            int v38 = llvm::NamedMDNode::getNumOperands(v36);
            if (v38)
            {
              for (int j = 0; j != v38; ++j)
              {
                uint64_t v40 = llvm::NamedMDNode::getOperand(v37);
                ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules(std::vector<std::unique_ptr<llvm::Module>> const&,std::unordered_map<unsigned int,std::string> const&,unsigned long long *)::$_0::operator()((int **)&v73, v40);
              }
            }
          }
        }
        if (SHIBYTE(v77) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v80) < 0) {
          operator delete((void *)v79);
        }
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
      }
      if (v119 != v118) {
        free(v119);
      }
      if (v114 != v116) {
        free(v114);
      }
      if (v110 != v112) {
        free(v110);
      }
      if (v106 != v108) {
        free(v106);
      }
      if (v102 != v104) {
        free(v102);
      }
      if (v99[0] != v100) {
        free(v99[0]);
      }
      unsigned int v10 = v70 + 1;
      LODWORD(v70) = v10;
    }
    while (v10 < v44);
  }
  *id v42 = 0;
  v42[1] = 0;
  v42[2] = 0;
  if (*(void *)(a1 + 16))
  {
    ShaderDebugger::Metadata::MDSerializer::serializeToBuffer(a1, (uint64_t)v42);
    *a4 = *(void *)(a1 + 64);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::~__hash_table((uint64_t)v98);
}

void sub_24F6DBC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = *v10;
  if (*v10)
  {
    *(void *)(a10 + 8) = v12;
    operator delete(v12);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::~__hash_table((uint64_t)&STACK[0x290]);
  _Unwind_Resume(a1);
}

unint64_t *ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeThreadTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*(void *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  unsigned int v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40) {
    uint64_t v6 = **(void **)(v4 + 24);
  }
  else {
    uint64_t v6 = (uint64_t)(*(void *)(v4 + 24) << -(char)v5) >> -(char)v5;
  }
  int v7 = *((_DWORD *)a2 + 4);
  ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  uint64_t v8 = *(void *)(*(void *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 32) + 128);
  unsigned int v9 = *(_DWORD *)(v8 + 32);
  if (v9 > 0x40) {
    LODWORD(v8) = **(_DWORD **)(v8 + 24);
  }
  else {
    uint64_t v8 = (uint64_t)(*(void *)(v8 + 24) << -(char)v9) >> -(char)v9;
  }
  return ShaderDebugger::Metadata::MDSerializer::serializeThreadTracepoint(a1, v3, v6 & 0xFFFFFF | (v7 << 24), v8);
}

unint64_t *ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionBeginTracePoint(uint64_t **a1, _DWORD *a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)a2 - 8 * *(unsigned int *)(*(void *)a2 + 8);
  uint64_t v5 = *(void *)(*(void *)(v4 + 16) + 128);
  unsigned int v6 = *(_DWORD *)(v5 + 32);
  if (v6 > 0x40) {
    uint64_t v7 = **(void **)(v5 + 24);
  }
  else {
    uint64_t v7 = (uint64_t)(*(void *)(v5 + 24) << -(char)v6) >> -(char)v6;
  }
  uint64_t v8 = v7 & 0xFFFFFF | (a2[4] << 24);
  uint64_t v9 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubprogram(a1, *(void *)(v4 + 32));
  return ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(a1, v3, v8, 1uLL, v9, -1, -1);
}

unint64_t *ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionEndTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*(void *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  unsigned int v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40) {
    uint64_t v6 = **(void **)(v4 + 24);
  }
  else {
    uint64_t v6 = (uint64_t)(*(void *)(v4 + 24) << -(char)v5) >> -(char)v5;
  }
  uint64_t v7 = v6 & 0xFFFFFF | (*((_DWORD *)a2 + 4) << 24);
  uint64_t TracePointLocation = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  uint64_t v9 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubprogram(a1, *(void *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 32));
  return ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(a1, v3, v7, 2uLL, v9, TracePointLocation, -1);
}

unint64_t *ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeFunctionCallTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*(void *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  unsigned int v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40) {
    uint64_t v6 = **(void **)(v4 + 24);
  }
  else {
    uint64_t v6 = (uint64_t)(*(void *)(v4 + 24) << -(char)v5) >> -(char)v5;
  }
  uint64_t v7 = v6 & 0xFFFFFF | (*((_DWORD *)a2 + 4) << 24);
  __n128 result = (unint64_t *)ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  uint64_t v9 = (uint64_t)result;
  unsigned int v10 = *(llvm::MDString **)(v3 - 8 * *(unsigned int *)(v3 + 8) + 32);
  if (v10)
  {
    if (*(unsigned char *)v10)
    {
      if (*(unsigned char *)v10 == 17)
      {
        uint64_t v11 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubprogram(a1, (uint64_t)v10);
        return ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(a1, v3, v7, 0, v11, v9, -1);
      }
      return result;
    }
    String = (void *)llvm::MDString::getString(v10);
    if (String)
    {
      std::string::basic_string[abi:ne180100](__p, String, v14);
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v17 = 0;
    }
    uint64_t v12 = ShaderDebugger::Metadata::MDSerializer::serializeSubprogram(a1, -1, (uint64_t)__p, v9);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "__gt_unnamed_function_call__");
    uint64_t v12 = ShaderDebugger::Metadata::MDSerializer::serializeSubprogram(a1, -1, (uint64_t)__p, v9);
  }
  uint64_t v15 = v12;
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  return ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(a1, v3, v7, 0, v15, v9, -1);
}

void sub_24F6DC148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeVariableTracePoint(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)a2 - 8 * *(unsigned int *)(*(void *)a2 + 8);
  uint64_t v5 = *(void *)(*(void *)(v4 + 16) + 128);
  unsigned int v6 = *(_DWORD *)(v5 + 32);
  if (v6 > 0x40) {
    uint64_t v7 = **(void **)(v5 + 24);
  }
  else {
    uint64_t v7 = (uint64_t)(*(void *)(v5 + 24) << -(char)v6) >> -(char)v6;
  }
  uint64_t v8 = *(void *)(*(void *)(v4 + 40) + 128);
  unsigned int v9 = *(_DWORD *)(v8 + 32);
  if (v9 > 0x40) {
    uint64_t v10 = **(void **)(v8 + 24);
  }
  else {
    uint64_t v10 = (uint64_t)(*(void *)(v8 + 24) << -(char)v9) >> -(char)v9;
  }
  int v11 = *(_DWORD *)(a2 + 16);
  uint64_t v12 = *(llvm::DIVariable **)(v4 + 32);
  int v13 = *(unsigned __int8 *)v12;
  if (*(unsigned char *)v12)
  {
    if (v13 == 24)
    {
      uint64_t v56 = (unsigned char *)((void *)v12 - *((unsigned int *)v12 + 2))[3];
      v90[0] = 0;
      v90[1] = 0;
      uint64_t v89 = v90;
      uint64_t v57 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v56, (uint64_t)&v89);
      std::__tree<BufferEntry>::destroy((uint64_t)&v89, v90[0]);
      Filename = llvm::DIVariable::getFilename(v12);
      if (Filename)
      {
        std::string::basic_string[abi:ne180100](&__p, Filename, v59);
      }
      else
      {
        long long __p = 0;
        unint64_t v95 = 0;
        uint64_t v96 = 0;
      }
      Directory = llvm::DIVariable::getDirectory(v12);
      if (Directory)
      {
        std::string::basic_string[abi:ne180100](&__dst, Directory, v62);
      }
      else
      {
        __dst = 0;
        uint64_t v92 = 0;
        uint64_t v93 = 0;
      }
      uint64_t v69 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, (uint64_t)v12 + 1, (std::string::value_type *)&__p, (uint64_t)&__dst, *((unsigned int *)v12 + 6), -1);
      if (SHIBYTE(v93) < 0) {
        operator delete(__dst);
      }
      if (SHIBYTE(v96) < 0) {
        operator delete(__p);
      }
      long long v70 = (llvm::MDString *)((void *)v12 - *((unsigned int *)v12 + 2))[1];
      if (v70 && (String = (void *)llvm::MDString::getString(v70)) != 0)
      {
        std::string::basic_string[abi:ne180100](&__p, String, v72);
      }
      else
      {
        long long __p = 0;
        unint64_t v95 = 0;
        uint64_t v96 = 0;
      }
      uint64_t v68 = ShaderDebugger::Metadata::MDSerializer::serializeGlobalVariable(a1, (uint64_t)v12, (uint64_t)&__p, v57, v69);
      goto LABEL_104;
    }
    if (v13 == 25)
    {
      size_t v14 = (unsigned char *)((void *)v12 - *((unsigned int *)v12 + 2))[3];
      v98[0] = 0;
      v98[1] = 0;
      uint64_t v97 = v98;
      uint64_t v15 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v14, (uint64_t)&v97);
      std::__tree<BufferEntry>::destroy((uint64_t)&v97, v98[0]);
      BOOL v16 = llvm::DIVariable::getFilename(v12);
      if (v16)
      {
        std::string::basic_string[abi:ne180100](&__p, v16, v17);
      }
      else
      {
        long long __p = 0;
        unint64_t v95 = 0;
        uint64_t v96 = 0;
      }
      long long v61 = llvm::DIVariable::getDirectory(v12);
      if (v61)
      {
        std::string::basic_string[abi:ne180100](&__dst, v61, v60);
      }
      else
      {
        __dst = 0;
        uint64_t v92 = 0;
        uint64_t v93 = 0;
      }
      uint64_t v64 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, (uint64_t)v12 + 1, (std::string::value_type *)&__p, (uint64_t)&__dst, *((unsigned int *)v12 + 6), -1);
      if (SHIBYTE(v93) < 0) {
        operator delete(__dst);
      }
      if (SHIBYTE(v96) < 0) {
        operator delete(__p);
      }
      uint64_t v65 = (llvm::MDString *)((void *)v12 - *((unsigned int *)v12 + 2))[1];
      if (v65 && (uint64_t v66 = (void *)llvm::MDString::getString(v65)) != 0)
      {
        std::string::basic_string[abi:ne180100](&__p, v66, v67);
      }
      else
      {
        long long __p = 0;
        unint64_t v95 = 0;
        uint64_t v96 = 0;
      }
      uint64_t v68 = ShaderDebugger::Metadata::MDSerializer::serializeLocalVariable(a1, (uint64_t)v12, (uint64_t)&__p, v15, v64, *((_WORD *)v12 + 16) != 0);
      goto LABEL_104;
    }
LABEL_75:
    uint64_t v55 = -1;
    return ShaderDebugger::Metadata::MDSerializer::serializeVariableTracepoint(a1, v3, v7 & 0xFFFFFF | (v11 << 24), v55, v10);
  }
  uint64_t v18 = *(void *)(a2 + 8);
  size_t v19 = (void *)llvm::MDString::getString(*(llvm::MDString **)(v4 + 32));
  if (v20 < 0xD) {
    goto LABEL_75;
  }
  uint64_t v21 = v19;
  if (*v19 != 0x765F6E7275746572 || *(void *)((char *)v19 + 5) != 0x2865756C61765F6ELL) {
    goto LABEL_75;
  }
  unint64_t v23 = v20;
  if (*((unsigned char *)v19 + v20 - 1) != 41) {
    goto LABEL_75;
  }
  uint64_t v80 = v18;
  std::string::basic_string[abi:ne180100]<0>(&__p, "return_value(");
  unint64_t v24 = v95;
  if (v96 >= 0) {
    unint64_t v24 = HIBYTE(v96);
  }
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v86 = v24;
  if (v24 <= v23 - 1) {
    unint64_t v24 = v23 - 1;
  }
  if (v23 < v24) {
    unint64_t v24 = v23;
  }
  unint64_t v85 = v24;
  if (SHIBYTE(v96) < 0) {
    operator delete(__p);
  }
  uint64_t v25 = *(void *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 24);
  if (v25)
  {
    if (*(unsigned char *)v25 == 5)
    {
      uint64_t Subprogram = llvm::DILocalScope::getSubprogram(*(llvm::DILocalScope **)(v25 - 8 * *(unsigned int *)(v25 + 8)));
      if (Subprogram)
      {
LABEL_108:
        uint64_t v74 = *(void *)(Subprogram - 8 * *(unsigned int *)(Subprogram + 8) + 32);
        if (v74)
        {
          uint64_t v75 = *(void *)(v74 - 8 * *(unsigned int *)(v74 + 8) + 24);
          if (v75)
          {
            uint64_t v76 = *(unsigned int *)(v75 + 8);
            if (v76)
            {
              uint64_t v77 = *(unsigned char **)(v75 - 8 * v76);
              if (v77)
              {
                v88[0] = 0;
                v88[1] = 0;
                uint64_t v87 = v88;
                uint64_t v78 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v77, (uint64_t)&v87);
                std::__tree<BufferEntry>::destroy((uint64_t)&v87, v88[0]);
                goto LABEL_114;
              }
            }
          }
        }
LABEL_113:
        uint64_t v78 = -1;
        goto LABEL_114;
      }
    }
  }
  uint64_t v27 = *(unsigned int *)(v80 + 88);
  if (!v27) {
    goto LABEL_113;
  }
  int v81 = v7;
  __s2 = (char *)v21 + v86;
  size_t v28 = v85 - v86;
  unint64_t v29 = *(uint64_t **)(v80 + 80);
  uint64_t v30 = 8 * v27;
  size_t __n = v85 - v86;
  int v84 = v10;
  do
  {
    uint64_t Subprogram = *v29;
    unint64_t v31 = *(llvm::MDString **)(*v29 - 8 * *(unsigned int *)(*v29 + 8) + 24);
    if (v31 && (unint64_t v32 = (void *)llvm::MDString::getString(v31)) != 0)
    {
      std::string::basic_string[abi:ne180100](&__p, v32, v33);
      unint64_t v34 = HIBYTE(v96);
      uint64_t v36 = (void **)__p;
      unint64_t v35 = v95;
    }
    else
    {
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v34 = 0;
      long long __p = 0;
      unint64_t v95 = 0;
      uint64_t v96 = 0;
    }
    int v37 = (char)v34;
    if ((v34 & 0x80u) != 0) {
      unint64_t v34 = v35;
    }
    size_t v38 = v28;
    BOOL v39 = v34 == v28;
    if (v39 && v85 != v86)
    {
      if (v37 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = v36;
      }
      BOOL v39 = memcmp(p_p, __s2, v38) == 0;
    }
    if (v37 < 0) {
      operator delete(v36);
    }
    if (v39)
    {
LABEL_107:
      LODWORD(v7) = v81;
      LODWORD(v10) = v84;
      goto LABEL_108;
    }
    ++v29;
    v30 -= 8;
    size_t v28 = v85 - v86;
    LODWORD(v10) = v84;
  }
  while (v30);
  uint64_t v42 = *(unsigned int *)(v80 + 88);
  if (v42)
  {
    uint64_t v43 = *(uint64_t **)(v80 + 80);
    uint64_t v44 = 8 * v42;
    while (1)
    {
      uint64_t Subprogram = *v43;
      id v45 = *(llvm::MDString **)(*v43 - 8 * *(unsigned int *)(*v43 + 8) + 16);
      if (v45 && (std::string v46 = (void *)llvm::MDString::getString(v45)) != 0)
      {
        std::string::basic_string[abi:ne180100](&__p, v46, v47);
        unint64_t v48 = HIBYTE(v96);
        uint64_t v50 = (void **)__p;
        unint64_t v49 = v95;
      }
      else
      {
        unint64_t v49 = 0;
        uint64_t v50 = 0;
        unint64_t v48 = 0;
        long long __p = 0;
        unint64_t v95 = 0;
        uint64_t v96 = 0;
      }
      int v51 = (char)v48;
      if ((v48 & 0x80u) != 0) {
        unint64_t v48 = v49;
      }
      BOOL v52 = v48 == __n;
      if (v48 != __n || v85 == v86)
      {
        if (v51 < 0) {
          goto LABEL_72;
        }
      }
      else
      {
        if (v51 >= 0) {
          uint64_t v54 = &__p;
        }
        else {
          uint64_t v54 = v50;
        }
        BOOL v52 = memcmp(v54, __s2, __n) == 0;
        if (v51 < 0)
        {
LABEL_72:
          operator delete(v50);
          if (v52) {
            goto LABEL_107;
          }
          goto LABEL_73;
        }
      }
      if (v52) {
        goto LABEL_107;
      }
LABEL_73:
      ++v43;
      v44 -= 8;
      LODWORD(v7) = v81;
      LODWORD(v10) = v84;
      if (!v44) {
        goto LABEL_113;
      }
    }
  }
  uint64_t v78 = -1;
  LODWORD(v7) = v81;
LABEL_114:
  uint64_t v79 = *(void *)(v4 + 32);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ret");
  uint64_t v68 = ShaderDebugger::Metadata::MDSerializer::serializeLocalVariable(a1, v79, (uint64_t)&__p, v78, -1, 0);
LABEL_104:
  uint64_t v55 = v68;
  if (SHIBYTE(v96) < 0) {
    operator delete(__p);
  }
  return ShaderDebugger::Metadata::MDSerializer::serializeVariableTracepoint(a1, v3, v7 & 0xFFFFFF | (v11 << 24), v55, v10);
}

void sub_24F6DC814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

unint64_t *ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDataTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*(void *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  unsigned int v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40) {
    uint64_t v6 = **(void **)(v4 + 24);
  }
  else {
    uint64_t v6 = (uint64_t)(*(void *)(v4 + 24) << -(char)v5) >> -(char)v5;
  }
  int v7 = *((_DWORD *)a2 + 4);
  uint64_t TracePointLocation = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  uint64_t v9 = v3 - 8 * *(unsigned int *)(v3 + 8);
  uint64_t v10 = *(void *)(*(void *)(v9 + 32) + 128);
  unsigned int v11 = *(_DWORD *)(v10 + 32);
  if (v11 > 0x40) {
    uint64_t v12 = **(void **)(v10 + 24);
  }
  else {
    uint64_t v12 = (uint64_t)(*(void *)(v10 + 24) << -(char)v11) >> -(char)v11;
  }
  uint64_t v13 = *(void *)(*(void *)(v9 + 40) + 128);
  unsigned int v14 = *(_DWORD *)(v13 + 32);
  if (v14 > 0x40) {
    uint64_t v15 = **(void **)(v13 + 24);
  }
  else {
    uint64_t v15 = (uint64_t)(*(void *)(v13 + 24) << -(char)v14) >> -(char)v14;
  }
  return ShaderDebugger::Metadata::MDSerializer::serializeDataTracepoint(a1, v3, v6 & 0xFFFFFF | (v7 << 24), TracePointLocation, v12, v15);
}

unint64_t *ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDataValueTracePoint(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*(void *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  unsigned int v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40) {
    uint64_t v6 = **(void **)(v4 + 24);
  }
  else {
    uint64_t v6 = (uint64_t)(*(void *)(v4 + 24) << -(char)v5) >> -(char)v5;
  }
  int v7 = *((_DWORD *)a2 + 4);
  uint64_t TracePointLocation = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  uint64_t v9 = *(llvm::DIVariable **)(v3 - 8 * *(unsigned int *)(v3 + 8) + 32);
  int v10 = *(unsigned __int8 *)v9;
  if (v10 == 24)
  {
    uint64_t v15 = (unsigned char *)((void *)v9 - *((unsigned int *)v9 + 2))[3];
    v41[0] = 0;
    v41[1] = 0;
    uint64_t v40 = v41;
    uint64_t v16 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v15, (uint64_t)&v40);
    std::__tree<BufferEntry>::destroy((uint64_t)&v40, v41[0]);
    Filename = llvm::DIVariable::getFilename(v9);
    if (Filename)
    {
      std::string::basic_string[abi:ne180100](&__dst, Filename, v18);
    }
    else
    {
      __dst = 0;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
    }
    Directory = llvm::DIVariable::getDirectory(v9);
    if (Directory)
    {
      std::string::basic_string[abi:ne180100](&__p, Directory, v22);
    }
    else
    {
      long long __p = 0;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
    }
    uint64_t v29 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, (uint64_t)v9 + 1, (std::string::value_type *)&__dst, (uint64_t)&__p, *((unsigned int *)v9 + 6), -1);
    if (SHIBYTE(v44) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v47) < 0) {
      operator delete(__dst);
    }
    uint64_t v30 = (llvm::MDString *)((void *)v9 - *((unsigned int *)v9 + 2))[1];
    if (v30 && (String = (void *)llvm::MDString::getString(v30)) != 0)
    {
      std::string::basic_string[abi:ne180100](&__dst, String, v32);
    }
    else
    {
      __dst = 0;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
    }
    uint64_t v28 = ShaderDebugger::Metadata::MDSerializer::serializeGlobalVariable(a1, (uint64_t)v9, (uint64_t)&__dst, v16, v29);
  }
  else
  {
    if (v10 != 25)
    {
      uint64_t v19 = -1;
      goto LABEL_39;
    }
    unsigned int v11 = (unsigned char *)((void *)v9 - *((unsigned int *)v9 + 2))[3];
    v49[0] = 0;
    v49[1] = 0;
    unint64_t v48 = v49;
    uint64_t v12 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v11, (uint64_t)&v48);
    std::__tree<BufferEntry>::destroy((uint64_t)&v48, v49[0]);
    uint64_t v13 = llvm::DIVariable::getFilename(v9);
    if (v13)
    {
      std::string::basic_string[abi:ne180100](&__dst, v13, v14);
    }
    else
    {
      __dst = 0;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
    }
    uint64_t v21 = llvm::DIVariable::getDirectory(v9);
    if (v21)
    {
      std::string::basic_string[abi:ne180100](&__p, v21, v20);
    }
    else
    {
      long long __p = 0;
      uint64_t v43 = 0;
      uint64_t v44 = 0;
    }
    uint64_t v24 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, (uint64_t)v9 + 1, (std::string::value_type *)&__dst, (uint64_t)&__p, *((unsigned int *)v9 + 6), -1);
    if (SHIBYTE(v44) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v47) < 0) {
      operator delete(__dst);
    }
    uint64_t v25 = (llvm::MDString *)((void *)v9 - *((unsigned int *)v9 + 2))[1];
    if (v25 && (uint64_t v26 = (void *)llvm::MDString::getString(v25)) != 0)
    {
      std::string::basic_string[abi:ne180100](&__dst, v26, v27);
    }
    else
    {
      __dst = 0;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
    }
    uint64_t v28 = ShaderDebugger::Metadata::MDSerializer::serializeLocalVariable(a1, (uint64_t)v9, (uint64_t)&__dst, v12, v24, *((_WORD *)v9 + 16) != 0);
  }
  uint64_t v19 = v28;
  if (SHIBYTE(v47) < 0) {
    operator delete(__dst);
  }
LABEL_39:
  uint64_t v33 = *(unsigned int *)(v3 + 8);
  if (**(unsigned char **)(v3 - 8 * v33 + 40) == 6)
  {
    llvm::DIExpression::getFragmentInfo();
    if ((_BYTE)v47) {
      unint64_t v34 = __dst;
    }
    else {
      unint64_t v34 = 0;
    }
    if ((_BYTE)v47) {
      uint64_t v35 = v46;
    }
    else {
      uint64_t v35 = 0;
    }
    uint64_t v33 = *(unsigned int *)(v3 + 8);
  }
  else
  {
    unint64_t v34 = 0;
    uint64_t v35 = 0;
  }
  uint64_t v36 = *(void *)(*(void *)(v3 - 8 * v33 + 48) + 128);
  unsigned int v37 = *(_DWORD *)(v36 + 32);
  if (v37 > 0x40) {
    uint64_t v38 = **(void **)(v36 + 24);
  }
  else {
    uint64_t v38 = (uint64_t)(*(void *)(v36 + 24) << -(char)v37) >> -(char)v37;
  }
  return ShaderDebugger::Metadata::MDSerializer::serializeDataValueTracepoint(a1, v3, v6 & 0xFFFFFF | (v7 << 24), TracePointLocation, v19, v38, (uint64_t)v34, v35);
}

void sub_24F6DCD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeWaypointTracePoint(uint64_t **a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(*(void *)(*a2 - 8 * *(unsigned int *)(*a2 + 8) + 16) + 128);
  unsigned int v7 = *(_DWORD *)(v6 + 32);
  if (v7 > 0x40) {
    uint64_t v8 = **(void **)(v6 + 24);
  }
  else {
    uint64_t v8 = (uint64_t)(*(void *)(v6 + 24) << -(char)v7) >> -(char)v7;
  }
  uint64_t v9 = v8 & 0xFFFFFF | (*((_DWORD *)a2 + 4) << 24);
  uint64_t TracePointLocation = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(a1, *a2);
  return ShaderDebugger::Metadata::MDSerializer::serializeWaypointTracepoint(a1, v5, v9, a3, TracePointLocation);
}

uint64_t std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules(std::vector<std::unique_ptr<llvm::Module>> const&,std::unordered_map<unsigned int,std::string> const&,unsigned long long *)::$_0::operator()(int **a1, uint64_t a2)
{
  if (a2)
  {
    String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8)));
    if (String)
    {
      std::string::basic_string[abi:ne180100](__p, String, v5);
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v18 = 0;
    }
    int v6 = **a1;
    uint64_t v7 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
    if (v7 && *(unsigned char *)v7 == 1)
    {
      uint64_t v8 = *(void *)(v7 + 128);
      if (v8 && *(unsigned char *)(v8 + 16) == 3)
      {
        uint64_t v10 = *(void *)(v8 - 32);
        unsigned int v11 = (void *)(v10 + 24);
        if (*(_DWORD *)(v10 + 32) >= 0x41u) {
          unsigned int v11 = (void *)*v11;
        }
        int v6 = *(_DWORD *)v11;
      }
    }
    uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::find<std::string>(a1[1], (unsigned __int8 *)__p);
    if (v12)
    {
      uint64_t v13 = a1[2];
      v14[0] = a2;
      v14[1] = v13;
      int v15 = v6;
      int v16 = 0;
      std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::operator()((uint64_t)(v12 + 40), (uint64_t)v14);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_24F6DCF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void llvm::DebugInfoFinder::~DebugInfoFinder(llvm::DebugInfoFinder *this)
{
  uint64_t v2 = (void *)*((void *)this + 51);
  if (v2 != *((void **)this + 50)) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 40);
  if (v3 != (char *)this + 336) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 30);
  if (v4 != (char *)this + 256) {
    free(v4);
  }
  size_t v5 = (char *)*((void *)this + 20);
  if (v5 != (char *)this + 176) {
    free(v5);
  }
  int v6 = (char *)*((void *)this + 10);
  if (v6 != (char *)this + 96) {
    free(v6);
  }
  if (*(llvm::DebugInfoFinder **)this != (llvm::DebugInfoFinder *)((char *)this + 16)) {
    free(*(void **)this);
  }
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::extractTracePointLocation(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = a2 - 8 * *(unsigned int *)(a2 + 8);
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    return -1;
  }
  Filename = llvm::DILocation::getFilename(*(llvm::DILocation **)(v2 + 24));
  if (Filename)
  {
    std::string::basic_string[abi:ne180100](__dst, Filename, v6);
  }
  else
  {
    __dst[0] = 0;
    __dst[1] = 0;
    uint64_t v14 = 0;
  }
  Directory = llvm::DILocation::getDirectory((llvm::DILocation *)v3);
  if (Directory)
  {
    std::string::basic_string[abi:ne180100](__p, Directory, v8);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v12 = 0;
  }
  uint64_t v7 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, v3, (std::string::value_type *)__dst, (uint64_t)__p, *(unsigned int *)(v3 + 4), *(unsigned __int16 *)(v3 + 2));
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
  return v7;
}

void sub_24F6DD11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

llvm::MDString *llvm::DILocation::getFilename(llvm::DILocation *this)
{
  uint64_t v1 = *((void *)this - *((unsigned int *)this + 2));
  if (*(unsigned char *)v1 != 15)
  {
    uint64_t v1 = *(void *)(v1 - 8 * *(unsigned int *)(v1 + 8));
    if (!v1) {
      return (llvm::MDString *)"";
    }
  }
  __n128 result = *(llvm::MDString **)(v1 - 8 * *(unsigned int *)(v1 + 8));
  if (result) {
    return (llvm::MDString *)llvm::MDString::getString(result);
  }
  return result;
}

llvm::MDString *llvm::DILocation::getDirectory(llvm::DILocation *this)
{
  uint64_t v1 = *((void *)this - *((unsigned int *)this + 2));
  if (*(unsigned char *)v1 != 15)
  {
    uint64_t v1 = *(void *)(v1 - 8 * *(unsigned int *)(v1 + 8));
    if (!v1) {
      return (llvm::MDString *)"";
    }
  }
  __n128 result = *(llvm::MDString **)(v1 - 8 * *(unsigned int *)(v1 + 8) + 8);
  if (result) {
    return (llvm::MDString *)llvm::MDString::getString(result);
  }
  return result;
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubprogram(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = a2 + 1;
  uint64_t v5 = a2;
  if (*(unsigned char *)a2 != 15)
  {
    uint64_t v5 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
    if (!v5)
    {
      size_t v10 = 0;
      uint64_t v9 = "";
      goto LABEL_8;
    }
  }
  size_t v6 = *(llvm::MDString **)(v5 - 8 * *(unsigned int *)(v5 + 8));
  if (v6)
  {
    uint64_t String = llvm::MDString::getString(v6);
    if (String)
    {
      uint64_t v9 = (char *)String;
      size_t v10 = v8;
LABEL_8:
      std::string::basic_string[abi:ne180100](&__dst, v9, v10);
      goto LABEL_9;
    }
  }
  __dst = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
LABEL_9:
  uint64_t v11 = a2;
  if (*(unsigned char *)a2 == 15 || (uint64_t v11 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8))) != 0)
  {
    uint64_t v12 = *(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8);
    if (!v12 || (uint64_t v14 = (char *)llvm::MDString::getString(v12)) == 0)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v23 = 0;
      goto LABEL_17;
    }
    size_t v15 = v13;
  }
  else
  {
    size_t v15 = 0;
    uint64_t v14 = "";
  }
  std::string::basic_string[abi:ne180100](__p, v14, v15);
LABEL_17:
  uint64_t v16 = ShaderDebugger::Metadata::MDSerializer::serializeLocation(a1, v4, (std::string::value_type *)&__dst, (uint64_t)__p, *(unsigned int *)(a2 + 24), -1);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(__dst);
  }
  size_t v17 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  if (v17 && (uint64_t v18 = (void *)llvm::MDString::getString(v17)) != 0)
  {
    std::string::basic_string[abi:ne180100](&__dst, v18, v19);
  }
  else
  {
    __dst = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  uint64_t v20 = ShaderDebugger::Metadata::MDSerializer::serializeSubprogram(a1, a2, (uint64_t)&__dst, v16);
  if (SHIBYTE(v26) < 0) {
    operator delete(__dst);
  }
  return v20;
}

void sub_24F6DD3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(uint64_t **a1, unsigned char *a2, uint64_t a3)
{
  size_t v22 = a2;
  uint64_t v5 = *(void **)(a3 + 8);
  if (!v5) {
    goto LABEL_22;
  }
  uint64_t v7 = a3 + 8;
  do
  {
    unint64_t v8 = v5[4];
    BOOL v9 = v8 >= (unint64_t)a2;
    if (v8 >= (unint64_t)a2) {
      size_t v10 = v5;
    }
    else {
      size_t v10 = v5 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v5;
    }
    uint64_t v5 = (void *)*v10;
  }
  while (*v10);
  if (v7 != a3 + 8 && *(void *)(v7 + 32) <= (unint64_t)a2)
  {
    unint64_t v21 = 3;
    uint64_t v23 = &v21;
    uint64_t v14 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v21, (uint64_t)&std::piecewise_construct, &v23);
    return ShaderDebugger::Metadata::MDSerializer::getLinearMetadataId((uint64_t)a1, (uint64_t)(v14 + 5), (uint64_t)a2);
  }
  else
  {
LABEL_22:
    std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t **)a3, (unint64_t *)&v22, (uint64_t *)&v22);
    unint64_t v21 = 3;
    uint64_t v23 = &v21;
    uint64_t v11 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v21, (uint64_t)&std::piecewise_construct, &v23);
    uint64_t v12 = ShaderDebugger::Metadata::MDSerializer::reserveAndLinearizeMetadataId((uint64_t)a1, (uint64_t)(v11 + 5), (uint64_t)v22);
    size_t v13 = v22;
    switch(*v22)
    {
      case 0xB:
        ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeBasicType(a1, (uint64_t)v22);
        return v12;
      case 0xC:
        std::set<llvm::DIType *>::set[abi:ne180100](v20, a3);
        ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDerivedType(a1, (uint64_t)v13, (uint64_t)v20);
        size_t v15 = (void *)v20[1];
        uint64_t v16 = v20;
        goto LABEL_18;
      case 0xD:
        std::set<llvm::DIType *>::set[abi:ne180100](v19, a3);
        ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeCompositeType(a1, (uint64_t)v13, (uint64_t)v19);
        size_t v15 = (void *)v19[1];
        uint64_t v16 = v19;
        goto LABEL_18;
      case 0xE:
        std::set<llvm::DIType *>::set[abi:ne180100](v18, a3);
        ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubroutineType(a1, (uint64_t)v13, (uint64_t)v18);
        size_t v15 = (void *)v18[1];
        uint64_t v16 = v18;
LABEL_18:
        std::__tree<BufferEntry>::destroy((uint64_t)v16, v15);
        break;
      default:
        return v12;
    }
  }
  return v12;
}

void sub_24F6DD5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17)
{
}

llvm::MDString *llvm::DIVariable::getFilename(llvm::DIVariable *this)
{
  uint64_t v1 = ((void *)this - *((unsigned int *)this + 2))[2];
  if (!v1) {
    return (llvm::MDString *)"";
  }
  __n128 result = *(llvm::MDString **)(v1 - 8 * *(unsigned int *)(v1 + 8));
  if (result) {
    return (llvm::MDString *)llvm::MDString::getString(result);
  }
  return result;
}

llvm::MDString *llvm::DIVariable::getDirectory(llvm::DIVariable *this)
{
  uint64_t v1 = ((void *)this - *((unsigned int *)this + 2))[2];
  if (!v1) {
    return (llvm::MDString *)"";
  }
  __n128 result = *(llvm::MDString **)(v1 - 8 * *(unsigned int *)(v1 + 8) + 8);
  if (result) {
    return (llvm::MDString *)llvm::MDString::getString(result);
  }
  return result;
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeBasicType(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  if (v4 && (uint64_t String = (void *)llvm::MDString::getString(v4)) != 0)
  {
    std::string::basic_string[abi:ne180100](__p, String, v6);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v15 = 0;
  }
  uint64_t v7 = *(unsigned int *)(a2 + 28);
  uint64_t v8 = *(unsigned int *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  unsigned __int16 Tag = llvm::DINode::getTag((llvm::DINode *)a2);
  uint64_t v12 = ShaderDebugger::Metadata::MDSerializer::serializeBasicType(a1, a2, (uint64_t)__p, v7, v10, v8, v9, Tag, *(_DWORD *)(a2 + 52));
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  return v12;
}

void sub_24F6DD780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeDerivedType(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 - 8 * v5 + 24);
  if (v6)
  {
    std::set<llvm::DIType *>::set[abi:ne180100](v24, a3);
    uint64_t v7 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v6, v24);
    std::__tree<BufferEntry>::destroy((uint64_t)v24, (void *)v24[1]);
    uint64_t v8 = -(uint64_t)*(unsigned int *)(a2 + 8);
  }
  else
  {
    uint64_t v8 = -v5;
    uint64_t v7 = -1;
  }
  uint64_t v9 = *(void *)(a2 + 52);
  if (v9 >= 9) {
    int v10 = 100;
  }
  else {
    int v10 = *(void *)(a2 + 52);
  }
  if ((v9 & 0xFF00000000) != 0) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = 100;
  }
  uint64_t v12 = *(llvm::MDString **)(a2 + 8 * v8 + 16);
  if (v12 && (uint64_t String = (void *)llvm::MDString::getString(v12)) != 0)
  {
    std::string::basic_string[abi:ne180100](__p, String, v14);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v23 = 0;
  }
  uint64_t v15 = *(unsigned int *)(a2 + 28);
  uint64_t v16 = *(unsigned int *)(a2 + 48);
  uint64_t v18 = *(void *)(a2 + 32);
  uint64_t v17 = *(void *)(a2 + 40);
  unsigned __int16 Tag = llvm::DINode::getTag((llvm::DINode *)a2);
  uint64_t v20 = ShaderDebugger::Metadata::MDSerializer::serializeDerivedType(a1, a2, (uint64_t)__p, v15, v18, v16, v17, Tag, v7, SHIDWORD(v7), v11);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  return v20;
}

void sub_24F6DD8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18)
{
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeCompositeType(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 - 8 * v6 + 24);
  if (v7)
  {
    std::set<llvm::DIType *>::set[abi:ne180100](v53, a3);
    char v8 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v7, v53);
    std::__tree<BufferEntry>::destroy((uint64_t)v53, (void *)v53[1]);
    uint64_t v9 = -(uint64_t)*(unsigned int *)(a2 + 8);
  }
  else
  {
    uint64_t v9 = -v6;
    char v8 = -1;
  }
  long long __p = 0;
  int v51 = 0;
  BOOL v52 = 0;
  uint64_t v10 = *(void *)(a2 + 8 * v9 + 32);
  if (v10) {
    unsigned int v11 = (llvm::DISubrange **)(v10 - 8 * *(unsigned int *)(v10 + 8));
  }
  else {
    unsigned int v11 = 0;
  }
  if (v11 != (llvm::DISubrange **)v10)
  {
    while (1)
    {
      uint64_t v12 = *v11;
      int v13 = *(unsigned __int8 *)*v11;
      if ((v13 - 11) < 4 || v13 == 33) {
        break;
      }
      if (v13 == 9)
      {
        uint64_t Count = llvm::DISubrange::getCount(*v11);
        unint64_t v18 = Count & 0xFFFFFFFFFFFFFFF8;
        if ((Count & 6) != 0 || v18 == 0)
        {
          uint64_t v20 = -1;
        }
        else
        {
          unsigned int v29 = *(_DWORD *)(v18 + 32);
          if (v29 > 0x40) {
            uint64_t v20 = **(void **)(v18 + 24);
          }
          else {
            uint64_t v20 = (uint64_t)(*(void *)(v18 + 24) << -(char)v29) >> -(char)v29;
          }
        }
        uint64_t LowerBound = llvm::DISubrange::getLowerBound(v12);
        uint64_t v31 = 0;
        if ((LowerBound & 6) == 0)
        {
          unint64_t v32 = LowerBound & 0xFFFFFFFFFFFFFFF8;
          if ((LowerBound & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            unsigned int v33 = *(_DWORD *)(v32 + 32);
            if (v33 > 0x40) {
              uint64_t v31 = **(void **)(v32 + 24);
            }
            else {
              uint64_t v31 = (uint64_t)(*(void *)(v32 + 24) << -(char)v33) >> -(char)v33;
            }
          }
        }
        size_t v14 = ShaderDebugger::Metadata::MDSerializer::serializeSubrange(a1, (uint64_t)v12, v31, v20);
        uint64_t v15 = v51;
        if (v51 < v52)
        {
          *(void *)int v51 = 4;
LABEL_11:
          *((void *)v15 + 1) = v14;
          uint64_t v16 = v15 + 16;
LABEL_34:
          int v51 = v16;
          goto LABEL_35;
        }
        unint64_t v21 = (char *)__p;
        uint64_t v34 = (v51 - (unsigned char *)__p) >> 4;
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 60) {
          std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v36 = v52 - (unsigned char *)__p;
        if ((v52 - (unsigned char *)__p) >> 3 > v35) {
          unint64_t v35 = v36 >> 3;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v35;
        }
        if (v25)
        {
          uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>>((uint64_t)&v52, v25);
          unint64_t v21 = (char *)__p;
          uint64_t v15 = v51;
        }
        else
        {
          uint64_t v26 = 0;
        }
        size_t v27 = &v26[16 * v34];
        *(void *)size_t v27 = 4;
        *((void *)v27 + 1) = v14;
        uint64_t v28 = v27;
        if (v15 != v21)
        {
          do
          {
            *((_OWORD *)v28 - 1) = *((_OWORD *)v15 - 1);
            v28 -= 16;
            v15 -= 16;
          }
          while (v15 != v21);
LABEL_31:
          unint64_t v21 = (char *)__p;
        }
        goto LABEL_32;
      }
LABEL_35:
      if (++v11 == (llvm::DISubrange **)v10)
      {
        uint64_t v9 = -(uint64_t)*(unsigned int *)(a2 + 8);
        goto LABEL_59;
      }
    }
    std::set<llvm::DIType *>::set[abi:ne180100](v49, a3);
    size_t v14 = (unint64_t *)ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v12, v49);
    std::__tree<BufferEntry>::destroy((uint64_t)v49, (void *)v49[1]);
    uint64_t v15 = v51;
    if (v51 < v52)
    {
      *(void *)int v51 = 3;
      goto LABEL_11;
    }
    unint64_t v21 = (char *)__p;
    uint64_t v22 = (v51 - (unsigned char *)__p) >> 4;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 60) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v24 = v52 - (unsigned char *)__p;
    if ((v52 - (unsigned char *)__p) >> 3 > v23) {
      unint64_t v23 = v24 >> 3;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>>((uint64_t)&v52, v25);
      unint64_t v21 = (char *)__p;
      uint64_t v15 = v51;
    }
    else
    {
      uint64_t v26 = 0;
    }
    size_t v27 = &v26[16 * v22];
    *(void *)size_t v27 = 3;
    *((void *)v27 + 1) = v14;
    uint64_t v28 = v27;
    if (v15 != v21)
    {
      do
      {
        *((_OWORD *)v28 - 1) = *((_OWORD *)v15 - 1);
        v28 -= 16;
        v15 -= 16;
      }
      while (v15 != v21);
      goto LABEL_31;
    }
LABEL_32:
    uint64_t v16 = v27 + 16;
    long long __p = v28;
    int v51 = v27 + 16;
    BOOL v52 = &v26[16 * v25];
    if (v21) {
      operator delete(v21);
    }
    goto LABEL_34;
  }
LABEL_59:
  unsigned int v37 = *(llvm::MDString **)(a2 + 8 * v9 + 16);
  if (v37 && (uint64_t String = (void *)llvm::MDString::getString(v37)) != 0)
  {
    std::string::basic_string[abi:ne180100](__dst, String, v38);
  }
  else
  {
    __dst[0] = 0;
    __dst[1] = 0;
    uint64_t v48 = 0;
  }
  uint64_t v40 = *(unsigned int *)(a2 + 28);
  uint64_t v41 = *(unsigned int *)(a2 + 48);
  uint64_t v43 = *(void *)(a2 + 32);
  uint64_t v42 = *(void *)(a2 + 40);
  unsigned __int16 Tag = llvm::DINode::getTag((llvm::DINode *)a2);
  uint64_t v45 = ShaderDebugger::Metadata::MDSerializer::serializeCompositeType(a1, a2, (uint64_t)__dst, v40, v43, v41, v42, Tag, v8, (uint64_t **)&__p);
  if (SHIBYTE(v48) < 0) {
    operator delete(__dst[0]);
  }
  if (__p)
  {
    int v51 = (char *)__p;
    operator delete(__p);
  }
  return v45;
}

void sub_24F6DDD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,void *a26)
{
}

uint64_t ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeSubroutineType(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  long long __p = 0;
  uint64_t v45 = 0;
  unint64_t v46 = 0;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  uint64_t v6 = -v5;
  uint64_t v7 = *(void *)(a2 - 8 * v5 + 24);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 + 8);
    if ((int)v8 >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      while (1)
      {
        uint64_t v12 = *(void *)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8 * v11);
        if (v11 || v12)
        {
          std::set<llvm::DIType *>::set[abi:ne180100](v43, a3);
          uint64_t v14 = ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeType(a1, v12, v43);
          std::__tree<BufferEntry>::destroy((uint64_t)v43, (void *)v43[1]);
          uint64_t v15 = v45;
          if ((unint64_t)v45 >= v46)
          {
            uint64_t v16 = (char *)__p;
            uint64_t v22 = (v45 - (unsigned char *)__p) >> 4;
            unint64_t v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 60) {
              std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v24 = v46 - (void)__p;
            if ((uint64_t)(v46 - (void)__p) >> 3 > v23) {
              unint64_t v23 = v24 >> 3;
            }
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v23;
            }
            if (v25)
            {
              uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>>((uint64_t)&v46, v25);
              uint64_t v16 = (char *)__p;
              uint64_t v15 = v45;
            }
            else
            {
              uint64_t v26 = 0;
            }
            unsigned int v29 = &v26[16 * v22];
            *(void *)unsigned int v29 = 3;
            *((void *)v29 + 1) = v14;
            uint64_t v30 = v29;
            if (v15 != v16)
            {
              do
              {
                *((_OWORD *)v30 - 1) = *((_OWORD *)v15 - 1);
                v30 -= 16;
                v15 -= 16;
              }
              while (v15 != v16);
              uint64_t v16 = (char *)__p;
            }
            uint64_t v28 = &v26[16 * v25];
            int v13 = v29 + 16;
            long long __p = v30;
            goto LABEL_36;
          }
          *(void *)uint64_t v45 = 3;
          *((void *)v15 + 1) = v14;
          int v13 = v15 + 16;
        }
        else
        {
          if ((unint64_t)v10 >= v46)
          {
            uint64_t v16 = (char *)__p;
            uint64_t v17 = (v10 - (unsigned char *)__p) >> 4;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 60) {
              std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v19 = v46 - (void)__p;
            if ((uint64_t)(v46 - (void)__p) >> 3 > v18) {
              unint64_t v18 = v19 >> 3;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v18;
            }
            if (v20)
            {
              unint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>>((uint64_t)&v46, v20);
              uint64_t v16 = (char *)__p;
              uint64_t v10 = v45;
            }
            else
            {
              unint64_t v21 = 0;
            }
            size_t v27 = &v21[16 * v17];
            *(_OWORD *)size_t v27 = xmmword_24F732100;
            int v13 = v27 + 16;
            if (v10 != v16)
            {
              do
              {
                *((_OWORD *)v27 - 1) = *((_OWORD *)v10 - 1);
                v27 -= 16;
                v10 -= 16;
              }
              while (v10 != v16);
              uint64_t v16 = (char *)__p;
            }
            uint64_t v28 = &v21[16 * v20];
            long long __p = v27;
LABEL_36:
            uint64_t v45 = v13;
            unint64_t v46 = (unint64_t)v28;
            if (v16) {
              operator delete(v16);
            }
            goto LABEL_38;
          }
          *(_OWORD *)uint64_t v10 = xmmword_24F732100;
          int v13 = v10 + 16;
        }
LABEL_38:
        uint64_t v45 = v13;
        ++v11;
        uint64_t v10 = v13;
        if (v11 == v8)
        {
          uint64_t v6 = -(uint64_t)*(unsigned int *)(a2 + 8);
          break;
        }
      }
    }
  }
  uint64_t v31 = *(llvm::MDString **)(a2 + 8 * v6 + 16);
  if (v31 && (uint64_t String = (void *)llvm::MDString::getString(v31)) != 0)
  {
    std::string::basic_string[abi:ne180100](__dst, String, v32);
  }
  else
  {
    __dst[0] = 0;
    __dst[1] = 0;
    uint64_t v42 = 0;
  }
  uint64_t v34 = *(unsigned int *)(a2 + 28);
  uint64_t v35 = *(unsigned int *)(a2 + 48);
  uint64_t v37 = *(void *)(a2 + 32);
  uint64_t v36 = *(void *)(a2 + 40);
  unsigned __int16 Tag = llvm::DINode::getTag((llvm::DINode *)a2);
  uint64_t v39 = ShaderDebugger::Metadata::MDSerializer::serializeSubroutineType(a1, a2, (uint64_t)__dst, v34, v37, v35, v36, Tag, (uint64_t **)&__p);
  if (SHIBYTE(v42) < 0) {
    operator delete(__dst[0]);
  }
  if (__p)
  {
    uint64_t v45 = (char *)__p;
    operator delete(__p);
  }
  return v39;
}

void sub_24F6DE094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[24],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(void *a1, char *a2, long long *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  v5[6] = 0;
  uint64_t v6 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v6 = &unk_2700EFF60;
  *(_OWORD *)(v6 + 8) = v8;
  *((void *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_24F6DE170(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_2700EFF60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700EFF60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (uint64_t (*)(void *, void))a1[1];
  uint64_t v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(uint64_t (**)(void *, void))(*v4 + v3);
  }
  return v3(v4, *a2);
}

void *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[26],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(void *a1, char *a2, long long *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  v5[6] = 0;
  uint64_t v6 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v6 = &unk_2700EFF60;
  *(_OWORD *)(v6 + 8) = v8;
  *((void *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_24F6DE2DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[16],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(void *a1, char *a2, long long *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  v5[6] = 0;
  uint64_t v6 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v6 = &unk_2700EFF60;
  *(_OWORD *)(v6 + 8) = v8;
  *((void *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_24F6DE378(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[20],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(void *a1, char *a2, long long *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  v5[6] = 0;
  uint64_t v6 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v6 = &unk_2700EFF60;
  *(_OWORD *)(v6 + 8) = v8;
  *((void *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_24F6DE414(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[22],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&>,0>(void *a1, char *a2, long long *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  v5[6] = 0;
  uint64_t v6 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v6 = &unk_2700EFF60;
  *(_OWORD *)(v6 + 8) = v8;
  *((void *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_24F6DE4B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[26],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(void *a1, char *a2, long long *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  long long v9 = a3[1];
  v5[6] = 0;
  uint64_t v6 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v6 = &unk_2700EFFA8;
  *(_OWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 24) = v9;
  a1[6] = v6;
  return a1;
}

void sub_24F6DE540(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_2700EFFA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2700EFFA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,std::allocator<std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>>,void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::operator()(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (uint64_t (*)(void *, void, void))a1[1];
  uint64_t v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(uint64_t (**)(void *, void, void))(*v4 + v3);
  }
  return v3(v4, *a2, a1[4]);
}

void *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[28],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(void *a1, char *a2, long long *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  long long v9 = a3[1];
  v5[6] = 0;
  uint64_t v6 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v6 = &unk_2700EFFA8;
  *(_OWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 24) = v9;
  a1[6] = v6;
  return a1;
}

void sub_24F6DE6A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[25],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(void *a1, char *a2, long long *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  long long v9 = a3[1];
  v5[6] = 0;
  uint64_t v6 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v6 = &unk_2700EFFA8;
  *(_OWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 24) = v9;
  a1[6] = v6;
  return a1;
}

void sub_24F6DE738(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[27],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(void *a1, char *a2, long long *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  long long v9 = a3[1];
  v5[6] = 0;
  uint64_t v6 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v6 = &unk_2700EFFA8;
  *(_OWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 24) = v9;
  a1[6] = v6;
  return a1;
}

void sub_24F6DE7C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[24],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(void *a1, char *a2, long long *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  long long v9 = a3[1];
  v5[6] = 0;
  uint64_t v6 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v6 = &unk_2700EFFA8;
  *(_OWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 24) = v9;
  a1[6] = v6;
  return a1;
}

void sub_24F6DE858(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[20],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(void *a1, char *a2, long long *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  long long v9 = a3[1];
  v5[6] = 0;
  uint64_t v6 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v6 = &unk_2700EFFA8;
  *(_OWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 24) = v9;
  a1[6] = v6;
  return a1;
}

void sub_24F6DE8E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]<char const(&)[23],std::__bind<void (ShaderDebugger::Metadata::MDSerializerLLVM3XXX::*)(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType),ShaderDebugger::Metadata::MDSerializerLLVM3XXX*,std::placeholders::__ph<1> const&,ShaderDebugger::Metadata::MDWaypointTracePoint::TracePointWaypointType>,0>(void *a1, char *a2, long long *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  long long v9 = a3[1];
  v5[6] = 0;
  uint64_t v6 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v6 = &unk_2700EFFA8;
  *(_OWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 24) = v9;
  a1[6] = v6;
  return a1;
}

void sub_24F6DE978(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType const,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,0>(a2 + 4);
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType const,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,0>(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3) {
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
}

uint64_t std::unordered_map<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>> const&>(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_24F6DED20(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (int i = *v13; i; int i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::__construct_node_hash<std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  int i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_24F6DEFA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::__construct_node_hash<std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  __n128 result = std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_24F6DF018(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_24F6DF08C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,0>(uint64_t a1)
{
  std::__function::__value_func<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(ShaderDebugger::Metadata::MDSerializerLLVM3XXX::TracepointContext *)>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (__n128 result = *v6; result; __n128 result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  unint64_t v8 = a1 + 1;
  unint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        unint64_t v6 = *v9;
        unint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    unint64_t v12 = (char *)operator new(0x70uLL);
    v14[1] = v7;
    *((void *)v12 + 4) = **a4;
    *((void *)v12 + 13) = 0;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    char v15 = 1;
    std::__tree<BufferEntry>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType const,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,0>(v2 + 4);
    }
    operator delete(v2);
  }
}

uint64_t *std::set<llvm::DIType *>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<llvm::DIType *>::insert[abi:ne180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_24F6DF4B0(_Unwind_Exception *a1)
{
  std::__tree<BufferEntry>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<llvm::DIType *>::insert[abi:ne180100]<std::__tree_const_iterator<llvm::DIType *,std::__tree_node<llvm::DIType *,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint8x8_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<llvm::DIType *>::__emplace_hint_unique_key_args<llvm::DIType *,llvm::DIType * const&>(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint8x8_t v4 = v8;
        }
        while (!v9);
      }
      uint8x8_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<llvm::DIType *>::__emplace_hint_unique_key_args<llvm::DIType *,llvm::DIType * const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<unsigned long long,unsigned long long>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,unsigned long long>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,unsigned long long>>>::__find_equal<unsigned long long>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    uint64_t v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<BufferEntry>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void sub_24F6DF6C4(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_24F6DF7AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6DF838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

DYMTLParallelRenderCommandEncoderStateTracker *DYMTLNewStatefulParallelRenderCommandEncoder(void *a1, void *a2)
{
  id v3 = a2;
  uint8x8_t v4 = [a1 parallelRenderCommandEncoderWithDescriptor:v3];
  unint64_t v5 = [[DYMTLParallelRenderCommandEncoderStateTracker alloc] initWithEncoder:v4 descriptor:v3];

  return v5;
}

{
  id v3;
  id v4;
  DYMTLParallelRenderCommandEncoderStateTracker *v5;
  uint64_t vars8;

  id v3 = a1;
  uint8x8_t v4 = a2;
  unint64_t v5 = [[DYMTLParallelRenderCommandEncoderStateTracker alloc] initWithDevice:v3 descriptor:v4];

  return v5;
}

void sub_24F6DF9A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6DFA30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GPUTools::MTL::DispatchSetCaptureVersion(uint64_t this)
{
  GPUTools::MTL::_captureVersion = this;
  return this;
}

id GPUTools::MTL::MakeMTLCompileOptions(GPUTools::MTL *this, const void *a2)
{
  if (this)
  {
    id v3 = objc_opt_new();
    unsigned int v4 = *(_DWORD *)this;
    unint64_t v12 = (_DWORD *)((char *)this + 8);
    unint64_t v6 = GPUTools::ReadDynamicBufferObject((GPUTools *)&v12, v5);
    [v3 setPreprocessorMacros:v6];

    int v7 = *v12;
    v12 += 2;
    [v3 setFastMathEnabled:v7 != 0];
    int v8 = *v12;
    v12 += 2;
    [v3 setDebuggingEnabled:v8 != 0];
    if (v4 > 0xF)
    {
      BOOL v9 = v12;
      uint64_t v10 = v12 + 2;
    }
    else
    {
      if (v4 < 6) {
        goto LABEL_8;
      }
      BOOL v9 = v12 + 6;
      uint64_t v10 = v12 + 8;
    }
    unint64_t v12 = v10;
    [v3 setLanguageVersion:*v9];
  }
  else
  {
    id v3 = 0;
  }
LABEL_8:
  return v3;
}

void sub_24F6DFB48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GPUTools::ReadDynamicBufferObject(GPUTools *this, const void **a2)
{
  *(void *)this += 8 + ((**(void **)this + 7) & 0xFFFFFFFFFFFFFFF8);
  int8x8_t v2 = objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytesNoCopy:length:freeWhenDone:");
  id v3 = (void *)MEMORY[0x263F3F9E0];
  unsigned int v4 = (void *)MEMORY[0x263EFFA08];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_msgSend(v4, "setWithObjects:", v5, v6, v7, v8, v9, objc_opt_class(), 0);
  uint64_t v13 = 0;
  uint64_t v11 = [v3 unarchivedObjectOfClasses:v10 fromData:v2 error:&v13];

  return v11;
}

void sub_24F6DFC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLFunctionConstantValue(GPUTools::MTL *this, const void *a2)
{
  id v3 = objc_opt_new();
  uint64_t v6 = *((void *)this + 1);
  unsigned int v4 = (char *)this + 8;
  for (uint64_t i = v6; i != -1; uint64_t i = *(void *)v4)
  {
    size_t v7 = (size_t)&v4[(strlen(v4 + 8) & 0xFFFFFFFFFFFFFFF8) + 8];
    unsigned int v4 = (char *)(v7 + 32);
    uint64_t v8 = *(void *)(v7 + 24);
    if (v8)
    {
      [v3 setConstantValue:v4 type:*(void *)(v7 + 8) atIndex:i];
      v4 += (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
  }
  return v3;
}

void sub_24F6DFD54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLTextureDescriptor(GPUTools::MTL *this, const void *a2)
{
  id v3 = objc_opt_new();
  unsigned int v4 = *(_DWORD *)this;
  [v3 setTextureType:*((void *)this + 1)];
  [v3 setPixelFormat:*((void *)this + 2)];
  [v3 setWidth:*((void *)this + 3)];
  [v3 setHeight:*((void *)this + 4)];
  [v3 setDepth:*((void *)this + 5)];
  [v3 setMipmapLevelCount:*((void *)this + 6)];
  [v3 setSampleCount:*((void *)this + 7)];
  [v3 setArrayLength:*((void *)this + 8)];
  uint64_t v5 = 72;
  if (v4 < 3) {
    uint64_t v5 = 80;
  }
  uint64_t v6 = (char *)this + v5;
  [v3 setFramebufferOnly:*(_DWORD *)v6 != 0];
  [v3 setIsDrawable:*((_DWORD *)v6 + 2) != 0];
  if (v4)
  {
    [v3 setUsage:*((void *)v6 + 2)];
    size_t v7 = v6 + 24;
  }
  else
  {
    size_t v7 = v6 + 16;
  }
  [v3 setRotation:*(void *)v7];
  if (v4 >= 3)
  {
    if (*((void *)v7 + 1) != 15) {
      objc_msgSend(v3, "setStorageMode:");
    }
    [v3 setCpuCacheMode:*((void *)v7 + 2)];
    if (v4 >= 0x15)
    {
      if (objc_opt_respondsToSelector()) {
        [v3 setAllowGPUOptimizedContents:*((void *)v7 + 3) != 0];
      }
      if (objc_opt_respondsToSelector()) {
        [v3 setCompressionMode:*((void *)v7 + 4)];
      }
      if (v4 >= 0x16)
      {
        uint64_t v8 = *((void *)v7 + 5);
        int v9 = *((_DWORD *)v7 + 12);
        if (objc_opt_respondsToSelector())
        {
          [v3 setForceResourceIndex:v9 != 0];
          [v3 setResourceIndex:v8];
        }
        if (v4 >= 0x23)
        {
          uint64_t v10 = v7[56];
          uint64_t v11 = *((void *)v7 + 8);
          uint64_t v12 = *((void *)v7 + 9);
          uint64_t v13 = *((void *)v7 + 10);
          if (objc_opt_respondsToSelector()) {
            [v3 setSwizzle:v10 & 0xFFFFFFFFFF0000FFLL | (unsigned __int16)(v11 << 8) | ((unint64_t)v12 << 16) | (v13 << 24)];
          }
          if (v4 >= 0x27 && (objc_opt_respondsToSelector() & 1) != 0) {
            [v3 setSwizzleKey:*((unsigned int *)v7 + 22)];
          }
        }
      }
    }
  }
  return v3;
}

void sub_24F6DFFA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLRenderPassDescriptor(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = [MEMORY[0x263F12998] renderPassDescriptor];
  unsigned int v5 = *(_DWORD *)a1;
  unint64_t v45 = *(void *)(a1 + 8);
  __p[0] = &v45;
  objc_msgSend(v4, "setVisibilityResultBuffer:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a2, &v45, (uint64_t)&std::piecewise_construct, (void **)__p)[3]);
  unint64_t v46 = (double *)(a1 + 24);
  for (uint64_t i = *(void *)(a1 + 16); i != -1; v46 = (double *)(v10 + 1))
  {
    size_t v7 = [v4 colorAttachments];
    id v8 = [v7 objectAtIndexedSubscript:i];
    GPUTools::MTL::MakeMTLRenderPassAttachmentDescriptor((void **)&v46, v8, a2, v5);
    int v9 = v46;
    objc_msgSend(v8, "setClearColor:", *v46, v46[1], v46[2], v46[3]);
    uint64_t v10 = v9 + 4;
    if (v5 >= 0x27 && (objc_opt_respondsToSelector() & 1) != 0)
    {
      [v8 setYInvert:*((void *)v9 + 4) != 0];
      uint64_t v10 = v9 + 5;
    }

    uint64_t i = *v10;
  }
  id v11 = [v4 depthAttachment];
  GPUTools::MTL::MakeMTLRenderPassAttachmentDescriptor((void **)&v46, v11, a2, v5);
  uint64_t v12 = v46;
  [v11 setClearDepth:*v46];
  uint64_t v13 = v12 + 4;
  unint64_t v46 = v12 + 4;
  if (v5 < 0x27)
  {

    if (v5 < 5) {
      goto LABEL_13;
    }
  }
  else
  {
    if (objc_opt_respondsToSelector())
    {
      [v11 setYInvert:*((void *)v12 + 4) != 0];
      uint64_t v13 = v12 + 5;
    }
  }
  uint64_t v14 = [v4 depthAttachment];
  char v15 = objc_opt_respondsToSelector();

  unint64_t v46 = (double *)(v13 + 1);
  if (v15)
  {
    uint64_t v16 = *v13;
    float v17 = [v4 depthAttachment];
    [v17 setDepthResolveFilter:v16];
  }
LABEL_13:
  id v18 = [v4 stencilAttachment];
  GPUTools::MTL::MakeMTLRenderPassAttachmentDescriptor((void **)&v46, v18, a2, v5);
  unint64_t v19 = v46;
  [v18 setClearStencil:*v46];
  unint64_t v20 = v19 + 4;
  if (v5 < 0x27)
  {

    size_t v21 = v19 + 4;
    if (v5 < 7) {
      goto LABEL_48;
    }
  }
  else
  {
    if (objc_opt_respondsToSelector())
    {
      unint64_t v20 = v19 + 5;
      unint64_t v46 = v19 + 5;
      [v18 setYInvert:*((void *)v19 + 4) != 0];
    }
  }
  size_t v21 = v20 + 1;
  uint64_t v22 = *(void *)v20;
  if ((objc_opt_respondsToSelector() & (v22 != -1)) == 1) {
    [v4 setRenderTargetArrayLength:v22];
  }
  if (v5 >= 0xD)
  {
    uint64_t v24 = *((void *)v20 + 1);
    uint64_t v23 = *((void *)v20 + 2);
    uint64_t v26 = *((void *)v20 + 3);
    uint64_t v25 = *((void *)v20 + 4);
    uint64_t v27 = *((void *)v20 + 7);
    uint64_t v42 = *((void *)v20 + 6);
    uint64_t v43 = *((void *)v20 + 5);
    size_t v21 = v20 + 8;
    unint64_t v46 = v20 + 8;
    if ((objc_opt_respondsToSelector() & (v24 != -1)) == 1)
    {
      [v4 setImageblockSampleLength:v24];
      [v4 setThreadgroupMemoryLength:v23];
      [v4 setTileWidth:v26];
      [v4 setTileHeight:v25];
    }
    if ((objc_opt_respondsToSelector() & (v27 != -1)) == 1) {
      [v4 setDefaultRasterSampleCount:v27];
    }
    if ((objc_opt_respondsToSelector() & (v43 != -1)) == 1 && v42 != -1)
    {
      [v4 setRenderTargetWidth:v43];
      [v4 setRenderTargetHeight:v42];
    }
    if (v5 >= 0xE)
    {
      size_t v21 = v20 + 9;
      uint64_t v28 = *((void *)v20 + 8);
      if (v28)
      {
        std::vector<MTLSamplePosition>::vector(__p, *((void *)v20 + 8));
        unsigned int v29 = (char *)__p[0] + 4;
        uint64_t v30 = v28;
        do
        {
          *(v29 - 1) = *(_DWORD *)v21;
          uint64_t v31 = v21 + 2;
          *unsigned int v29 = *((_DWORD *)v21 + 2);
          v29 += 2;
          v21 += 2;
          --v30;
        }
        while (v30);
        objc_msgSend(v4, "setSamplePositions:count:");
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        size_t v21 = v31;
      }
      if (v5 >= 0x14)
      {
        size_t v32 = [v4 stencilAttachment];
        char v33 = objc_opt_respondsToSelector();

        if (v33)
        {
          uint64_t v34 = *(void *)v21;
          if (*(void *)v21 != -1)
          {
            uint64_t v35 = [v4 stencilAttachment];
            [v35 setStencilResolveFilter:v34];
          }
        }
        if (v5 < 0x18)
        {
          ++v21;
        }
        else
        {
          if (objc_opt_respondsToSelector()) {
            [v4 setOpenGLModeEnabled:*((void *)v21 + 1) != 0];
          }
          if (v5 < 0x21)
          {
            v21 += 2;
          }
          else
          {
            if (objc_opt_respondsToSelector())
            {
              unint64_t v45 = *((void *)v21 + 2);
              __p[0] = &v45;
              objc_msgSend(v4, "setRasterizationRateMap:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a2, &v45, (uint64_t)&std::piecewise_construct, (void **)__p)[3]);
            }
            v21 += 3;
          }
        }
      }
    }
  }
LABEL_48:
  uint64_t v36 = objc_msgSend(v4, "depthAttachment", v42);
  uint64_t v37 = [v36 texture];

  if (!v37) {
    [v4 setDepthAttachment:0];
  }
  size_t v38 = [v4 stencilAttachment];
  uint64_t v39 = [v38 texture];

  if (!v39) {
    [v4 setStencilAttachment:0];
  }
  if ((v5 & 0xFFFFFFFE) == 0x22)
  {
    v21 -= 3;
    do
    {
      uint64_t v40 = *((void *)v21 + 3);
      v21 += 4;
    }
    while (v40 != -1);
  }
  if (v5 >= 0x27 && (objc_opt_respondsToSelector() & 1) != 0) {
    [v4 setDitherEnabled:*(void *)v21 != 0];
  }
  return v4;
}

void sub_24F6E05DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLDepthStencilDescriptor(GPUTools::MTL *this, const void *a2)
{
  id v3 = objc_opt_new();
  [v3 setDepthCompareFunction:*((void *)this + 1)];
  [v3 setDepthWriteEnabled:*((_DWORD *)this + 4) != 0];
  this = (GPUTools::MTL *)((char *)this + 24);
  uint64_t v10 = (uint64_t *)((char *)this + (strlen((const char *)this) & 0xFFFFFFFFFFFFFFF8) + 8);
  unsigned int v4 = [NSString stringWithUTF8String:this];
  [v3 setLabel:v4];

  uint64_t v6 = GPUTools::MTL::MakeMTLStencilDescriptor(&v10, v5);
  [v3 setFrontFaceStencil:v6];

  id v8 = GPUTools::MTL::MakeMTLStencilDescriptor(&v10, v7);
  [v3 setBackFaceStencil:v8];

  return v3;
}

void sub_24F6E076C(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLStencilDescriptor(uint64_t **this, const void **a2)
{
  ++*this;
  id v3 = objc_opt_new();
  uint64_t v4 = *(*this)++;
  [v3 setStencilCompareFunction:v4];
  uint64_t v5 = *(*this)++;
  [v3 setStencilFailureOperation:v5];
  uint64_t v6 = *(*this)++;
  [v3 setDepthFailureOperation:v6];
  uint64_t v7 = *(*this)++;
  [v3 setDepthStencilPassOperation:v7];
  uint64_t v8 = *(unsigned int *)(*this)++;
  [v3 setReadMask:v8];
  uint64_t v9 = *(unsigned int *)(*this)++;
  [v3 setWriteMask:v9];
  return v3;
}

void sub_24F6E0858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLSamplerDescriptor(GPUTools::MTL *this, const void *a2)
{
  id v3 = objc_opt_new();
  unsigned int v4 = *(_DWORD *)this;
  [v3 setMinFilter:*((void *)this + 1)];
  [v3 setMagFilter:*((void *)this + 2)];
  [v3 setMipFilter:*((void *)this + 3)];
  [v3 setMaxAnisotropy:*((void *)this + 4)];
  [v3 setSAddressMode:*((void *)this + 5)];
  [v3 setTAddressMode:*((void *)this + 6)];
  [v3 setRAddressMode:*((void *)this + 7)];
  [v3 setNormalizedCoordinates:*((_DWORD *)this + 16) != 0];
  LODWORD(v5) = *((_DWORD *)this + 18);
  [v3 setLodMinClamp:v5];
  LODWORD(v6) = *((_DWORD *)this + 20);
  [v3 setLodMaxClamp:v6];
  uint64_t v7 = (char *)this + 88;
  size_t v8 = strlen(v7);
  uint64_t v9 = [NSString stringWithUTF8String:v7];
  [v3 setLabel:v9];

  if (v4 >= 2)
  {
    uint64_t v10 = &v7[(v8 & 0xFFFFFFFFFFFFFFF8) + 8];
    [v3 setLodAverage:*(_DWORD *)v10 != 0];
    if (v4 >= 8)
    {
      [v3 setCompareFunction:*(unsigned int *)&v7[(v8 & 0xFFFFFFFFFFFFFFF8) + 16]];
      if (v4 > 0x10)
      {
        if (objc_opt_respondsToSelector()) {
          [v3 setSupportArgumentBuffers:*(_DWORD *)&v7[(v8 & 0xFFFFFFFFFFFFFFF8) + 32] != 0];
        }
        if (v4 >= 0x16)
        {
          uint64_t v11 = *(void *)&v7[(v8 & 0xFFFFFFFFFFFFFFF8) + 40];
          int v12 = *((_DWORD *)v10 + 10);
          if (objc_opt_respondsToSelector())
          {
            [v3 setForceResourceIndex:v12 != 0];
            [v3 setResourceIndex:v11];
          }
          if (v4 >= 0x27)
          {
            uint64_t v13 = *((unsigned int *)v10 + 14);
            uint64_t v14 = *((unsigned int *)v10 + 16);
            uint64_t v15 = *((unsigned int *)v10 + 18);
            uint64_t v16 = *((unsigned int *)v10 + 20);
            uint64_t v17 = *((unsigned int *)v10 + 22);
            int v18 = *((_DWORD *)v10 + 24);
            if (objc_opt_respondsToSelector()) {
              [v3 setBorderColorSPI:v13];
            }
            if (objc_opt_respondsToSelector()) {
              objc_msgSend(v3, "setCustomBorderColorValue_0:", v14);
            }
            if (objc_opt_respondsToSelector()) {
              objc_msgSend(v3, "setCustomBorderColorValue_1:", v15);
            }
            if (objc_opt_respondsToSelector()) {
              objc_msgSend(v3, "setCustomBorderColorValue_2:", v16);
            }
            if (objc_opt_respondsToSelector()) {
              objc_msgSend(v3, "setCustomBorderColorValue_3:", v17);
            }
            if (objc_opt_respondsToSelector()) {
              [v3 setForceSeamsOnCubemapFiltering:v18 != 0];
            }
          }
        }
      }
    }
  }
  return v3;
}

void sub_24F6E0B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLStageInputOutputDescriptor(uint64_t **this, const void **a2)
{
  id v3 = objc_opt_new();
  if (GPUTools::MTL::_captureVersion >= 0x1A)
  {
    uint64_t v4 = *(unsigned int *)(*this)++;
    if (!v4) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v4 = 31;
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    uint64_t v6 = *(*this)++;
    uint64_t v7 = [v3 layouts];
    size_t v8 = [v7 objectAtIndexedSubscript:i];
    [v8 setStride:v6];

    uint64_t v9 = *(*this)++;
    uint64_t v10 = [v3 layouts];
    uint64_t v11 = [v10 objectAtIndexedSubscript:i];
    [v11 setStepRate:v9];

    uint64_t v12 = *(*this)++;
    uint64_t v13 = [v3 layouts];
    uint64_t v14 = [v13 objectAtIndexedSubscript:i];
    [v14 setStepFunction:v12];
  }
  if (GPUTools::MTL::_captureVersion >= 0x1A)
  {
LABEL_8:
    uint64_t v15 = *(unsigned int *)(*this)++;
    if (!v15) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  uint64_t v15 = 31;
LABEL_9:
  for (uint64_t j = 0; j != v15; ++j)
  {
    uint64_t v17 = *(*this)++;
    int v18 = [v3 attributes];
    unint64_t v19 = [v18 objectAtIndexedSubscript:j];
    [v19 setFormat:v17];

    uint64_t v20 = *(*this)++;
    size_t v21 = [v3 attributes];
    uint64_t v22 = [v21 objectAtIndexedSubscript:j];
    [v22 setOffset:v20];

    uint64_t v23 = *(*this)++;
    uint64_t v24 = [v3 attributes];
    uint64_t v25 = [v24 objectAtIndexedSubscript:j];
    [v25 setBufferIndex:v23];
  }
LABEL_11:
  uint64_t v26 = *(*this)++;
  [v3 setIndexType:v26];
  uint64_t v27 = *(*this)++;
  [v3 setIndexBufferIndex:v27];
  return v3;
}

void sub_24F6E0D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchMemoryBarrierWithResources(void *a1, int a2, void ***a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v11 = a1;
  memset(v15, 0, sizeof(v15));
  if (a4)
  {
    uint64_t v12 = a4;
    do
    {
      uint64_t v13 = *a3++;
      uint64_t v16 = (void ***)&v17;
      uint64_t v17 = (char **)v13;
      id v14 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a7, (unint64_t *)&v17, (uint64_t)&std::piecewise_construct, &v16)[3];
      std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v15, &v14);

      --v12;
    }
    while (v12);
  }
  if (a2 == -16008) {
    [v11 memoryBarrierWithResources:v15[0] count:a4];
  }
  uint64_t v17 = v15;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
}

void sub_24F6E0ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

id std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](char **a1, id *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)*a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v25 = v4;
    if (v13) {
      id v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v13);
    }
    else {
      id v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    uint64_t v24 = v16;
    *(void *)uint64_t v15 = *a2;
    uint64_t v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    int v18 = *a1;
    uint64_t v17 = a1[1];
    if (v17 == *a1)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *(void *)uint64_t v17 = 0;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)a1;
      uint64_t v9 = (char *)v23.i64[1];
      uint64_t v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    int64x2_t v23 = v20;
    size_t v21 = a1[2];
    a1[2] = v16;
    uint64_t v24 = v21;
    uint64_t v22 = v20.i64[0];
    id result = (id)std::__split_buffer<objc_object  {objcproto11MTLResource}* {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    id result = *a2;
    *(void *)uint64_t v7 = result;
    uint64_t v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void GPUTools::MTL::DispatchTextures(void *a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9 = a1;
  memset(v14, 0, sizeof(v14));
  if (a4[1])
  {
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void ***)(a3 + 8 * v10);
      uint64_t v15 = (void ***)&v16;
      uint64_t v16 = (char **)v11;
      id v13 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, (unint64_t *)&v16, (uint64_t)&std::piecewise_construct, &v15)[3];
      std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v14, &v13);

      ++v10;
      unint64_t v12 = a4[1];
    }
    while (v10 < v12);
  }
  else
  {
    unint64_t v12 = 0;
  }
  if (a2 <= -16261)
  {
    if (a2 == -16333)
    {
      objc_msgSend(v9, "setTextures:withRange:", v14[0], *a4, v12);
    }
    else if (a2 == -16275)
    {
      objc_msgSend(v9, "setVertexTextures:withRange:", v14[0], *a4, v12);
    }
  }
  else if (a2 == -16260 || a2 == -16184)
  {
    objc_msgSend(v9, "setFragmentTextures:withRange:", v14[0], *a4, v12);
  }
  else if (a2 == -16086)
  {
    objc_msgSend(v9, "setTileTextures:withRange:", v14[0], *a4, v12);
  }
  uint64_t v16 = v14;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void sub_24F6E11A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchBuffers(void *a1, int a2, unint64_t *a3, uint64_t *a4, void *a5, uint64_t a6)
{
  id v11 = a1;
  unint64_t v12 = v11;
  memset(v35, 0, sizeof(v35));
  long long __p = 0;
  char v33 = 0;
  uint64_t v34 = 0;
  if (a5[1])
  {
    int v28 = a2;
    id v29 = v11;
    unint64_t v13 = 0;
    do
    {
      unint64_t v14 = *a3++;
      unint64_t v31 = v14;
      uint64_t v16 = *a4++;
      uint64_t v15 = v16;
      uint64_t v36 = &v31;
      id v30 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a6, &v31, (uint64_t)&std::piecewise_construct, &v36)[3];
      uint64_t v17 = v33;
      if (v33 >= v34)
      {
        uint64_t v19 = (char *)__p;
        uint64_t v20 = (v33 - (unsigned char *)__p) >> 3;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61) {
          std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = v34 - (unsigned char *)__p;
        if ((v34 - (unsigned char *)__p) >> 2 > v21) {
          unint64_t v21 = v22 >> 2;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v34, v23);
          uint64_t v19 = (char *)__p;
          uint64_t v17 = v33;
        }
        else
        {
          uint64_t v24 = 0;
        }
        uint64_t v25 = &v24[8 * v20];
        *(void *)uint64_t v25 = v15;
        int v18 = v25 + 8;
        while (v17 != v19)
        {
          uint64_t v26 = *((void *)v17 - 1);
          v17 -= 8;
          *((void *)v25 - 1) = v26;
          v25 -= 8;
        }
        long long __p = v25;
        char v33 = v18;
        uint64_t v34 = &v24[8 * v23];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(void *)char v33 = v15;
        int v18 = v17 + 8;
      }
      char v33 = v18;
      std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v35, &v30);

      ++v13;
      unint64_t v27 = a5[1];
    }
    while (v13 < v27);
    unint64_t v12 = v29;
    a2 = v28;
  }
  else
  {
    unint64_t v27 = 0;
  }
  if (a2 <= -16263)
  {
    if (a2 == -16335)
    {
      objc_msgSend(v12, "setBuffers:offsets:withRange:", v35[0], __p, *a5, v27);
    }
    else if (a2 == -16277)
    {
      objc_msgSend(v12, "setVertexBuffers:offsets:withRange:", v35[0], __p, *a5, v27);
    }
  }
  else if (a2 == -16262 || a2 == -16186)
  {
    objc_msgSend(v12, "setFragmentBuffers:offsets:withRange:", v35[0], __p, *a5, v27);
  }
  else if (a2 == -16087)
  {
    objc_msgSend(v12, "setTileBuffers:offsets:withRange:", v35[0], __p, *a5, v27);
  }
  if (__p)
  {
    char v33 = (char *)__p;
    operator delete(__p);
  }
  long long __p = v35;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_24F6E144C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  long long __p = &a16;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchSamplerStates(void *a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9 = a1;
  memset(v14, 0, sizeof(v14));
  if (a4[1])
  {
    unint64_t v10 = 0;
    do
    {
      id v11 = *(void ***)(a3 + 8 * v10);
      uint64_t v15 = (void ***)&v16;
      uint64_t v16 = (char **)v11;
      id v13 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, (unint64_t *)&v16, (uint64_t)&std::piecewise_construct, &v15)[3];
      std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v14, &v13);

      ++v10;
      unint64_t v12 = a4[1];
    }
    while (v10 < v12);
  }
  else
  {
    unint64_t v12 = 0;
  }
  switch(a2)
  {
    case -16331:
      objc_msgSend(v9, "setSamplerStates:withRange:", v14[0], *a4, v12);
      break;
    case -16273:
      objc_msgSend(v9, "setVertexSamplerStates:withRange:", v14[0], *a4, v12);
      break;
    case -16258:
      objc_msgSend(v9, "setFragmentSamplerStates:withRange:", v14[0], *a4, v12);
      break;
  }
  uint64_t v16 = v14;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void sub_24F6E15DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchSamplerStates(void *a1, int a2, unint64_t *a3, int *a4, int *a5, void *a6, uint64_t a7)
{
  id v13 = a1;
  unint64_t v14 = v13;
  memset(v52, 0, sizeof(v52));
  long long __p = 0;
  uint64_t v50 = 0;
  int v51 = 0;
  unint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  if (a6[1])
  {
    int v42 = a2;
    id v43 = v13;
    unint64_t v15 = 0;
    do
    {
      int v16 = *a4;
      a4 += 2;
      int v17 = v16;
      int v18 = *a5;
      a5 += 2;
      int v19 = v18;
      unint64_t v20 = *a3++;
      unint64_t v45 = v20;
      uint64_t v53 = &v45;
      id v44 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a7, &v45, (uint64_t)&std::piecewise_construct, &v53)[3];
      unint64_t v21 = v50;
      if (v50 >= v51)
      {
        unint64_t v23 = (char *)__p;
        uint64_t v24 = (v50 - (unsigned char *)__p) >> 2;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 62) {
          goto LABEL_53;
        }
        uint64_t v26 = v51 - (unsigned char *)__p;
        if ((v51 - (unsigned char *)__p) >> 1 > v25) {
          unint64_t v25 = v26 >> 1;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          int v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v51, v27);
          unint64_t v23 = (char *)__p;
          unint64_t v21 = v50;
        }
        else
        {
          int v28 = 0;
        }
        id v29 = &v28[4 * v24];
        *(_DWORD *)id v29 = v19;
        uint64_t v22 = v29 + 4;
        while (v21 != v23)
        {
          int v30 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v29 - 1) = v30;
          v29 -= 4;
        }
        long long __p = v29;
        uint64_t v50 = v22;
        int v51 = &v28[4 * v27];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v50 = v19;
        uint64_t v22 = v21 + 4;
      }
      uint64_t v50 = v22;
      unint64_t v31 = v47;
      if (v47 >= v48)
      {
        char v33 = (char *)v46;
        uint64_t v34 = (v47 - (unsigned char *)v46) >> 2;
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62) {
LABEL_53:
        }
          std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
        uint64_t v36 = v48 - (unsigned char *)v46;
        if ((v48 - (unsigned char *)v46) >> 1 > v35) {
          unint64_t v35 = v36 >> 1;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37)
        {
          size_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v48, v37);
          char v33 = (char *)v46;
          unint64_t v31 = v47;
        }
        else
        {
          size_t v38 = 0;
        }
        uint64_t v39 = &v38[4 * v34];
        *(_DWORD *)uint64_t v39 = v17;
        size_t v32 = v39 + 4;
        while (v31 != v33)
        {
          int v40 = *((_DWORD *)v31 - 1);
          v31 -= 4;
          *((_DWORD *)v39 - 1) = v40;
          v39 -= 4;
        }
        unint64_t v46 = v39;
        uint64_t v47 = v32;
        uint64_t v48 = &v38[4 * v37];
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v47 = v17;
        size_t v32 = v31 + 4;
      }
      uint64_t v47 = v32;
      std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v52, &v44);

      ++v15;
      unint64_t v41 = a6[1];
    }
    while (v15 < v41);
    unint64_t v14 = v43;
    a2 = v42;
  }
  else
  {
    unint64_t v41 = 0;
  }
  if (a2 <= -16257)
  {
    if (a2 == -16329)
    {
      objc_msgSend(v14, "setSamplerStates:lodMinClamps:lodMaxClamps:withRange:", v52[0], v46, __p, *a6, v41);
    }
    else if (a2 == -16271)
    {
      objc_msgSend(v14, "setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:", v52[0], v46, __p, *a6, v41);
    }
  }
  else if (a2 == -16256 || a2 == -16178)
  {
    objc_msgSend(v14, "setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:", v52[0], v46, __p, *a6, v41);
  }
  else if (a2 == -16084)
  {
    objc_msgSend(v14, "setTileSamplerStates:lodMinClamps:lodMaxClamps:withRange:", v52[0], v46, __p, *a6, v41);
  }
  if (v46)
  {
    uint64_t v47 = (char *)v46;
    operator delete(v46);
  }
  if (__p)
  {
    uint64_t v50 = (char *)__p;
    operator delete(__p);
  }
  long long __p = v52;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_24F6E1970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char *a18, char *a19, uint64_t a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18)
  {
    a19 = a18;
    operator delete(a18);
  }
  a18 = &a21;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchResources(void *a1, int a2, void ***a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = a1;
  memset(v15, 0, sizeof(v15));
  if (a4)
  {
    uint64_t v12 = a4;
    do
    {
      id v13 = *a3++;
      int v16 = (void ***)&v17;
      int v17 = (char **)v13;
      id v14 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a6, (unint64_t *)&v17, (uint64_t)&std::piecewise_construct, &v16)[3];
      std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v15, &v14);

      --v12;
    }
    while (v12);
  }
  if (a2 == -16042) {
    [v11 useResources:v15[0] count:a4 usage:a5];
  }
  int v17 = v15;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
}

void sub_24F6E1AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchHeaps(void *a1, int a2, void ***a3, uint64_t a4, uint64_t a5)
{
  id v9 = a1;
  memset(v13, 0, sizeof(v13));
  if (a4)
  {
    uint64_t v10 = a4;
    do
    {
      id v11 = *a3++;
      id v14 = (void ***)&v15;
      unint64_t v15 = (char **)v11;
      id v12 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, (unint64_t *)&v15, (uint64_t)&std::piecewise_construct, &v14)[3];
      std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v13, &v12);

      --v10;
    }
    while (v10);
  }
  if (a2 == -16044 || a2 == -16040) {
    [v9 useHeaps:v13[0] count:a4];
  }
  unint64_t v15 = v13;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_24F6E1BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchResourceGroups(void *a1, int a2, void ***a3, uint64_t a4, uint64_t a5, void ***a6)
{
  id v11 = a1;
  if (a2 == -15900)
  {
    uint64_t v12 = 0;
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    do
    {
      id v13 = a3[v12];
      unint64_t v23 = (void ***)&v24;
      uint64_t v24 = (char **)v13;
      id v19 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, (unint64_t *)&v24, (uint64_t)&std::piecewise_construct, &v23)[3];
      std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](&v20, &v19);

      ++v12;
    }
    while (a4 != v12);
    uint64_t v14 = [v11 newResourceGroupFromResources:v20 count:a4];
    unint64_t v23 = a6;
    unint64_t v15 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, (unint64_t *)a6, (uint64_t)&std::piecewise_construct, &v23);
    int v16 = (void *)v15[3];
    void v15[3] = v14;

    uint64_t v24 = &v20;
    std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  }
  else
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    if (a4)
    {
      uint64_t v17 = a4;
      do
      {
        int v18 = *a3++;
        unint64_t v23 = (void ***)&v24;
        uint64_t v24 = (char **)v18;
        id v19 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, (unint64_t *)&v24, (uint64_t)&std::piecewise_construct, &v23)[3];
        std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](&v20, &v19);

        --v17;
      }
      while (v17);
    }
    if (a2 == -15898)
    {
      [v11 setResourceGroups:v20 count:a4];
    }
    else if (a2 == -15897)
    {
      [v11 dropResourceGroups:v20 count:a4];
    }
    uint64_t v24 = &v20;
    std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  }
}

void sub_24F6E1DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchResources(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v12 = a1;
  uint64_t v13 = 0;
  memset(v16, 0, sizeof(v16));
  do
  {
    uint64_t v14 = *(void ***)(a3 + 8 * v13);
    uint64_t v17 = (void ***)&v18;
    int v18 = (char **)v14;
    id v15 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a7, (unint64_t *)&v18, (uint64_t)&std::piecewise_construct, &v17)[3];
    std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v16, &v15);

    ++v13;
  }
  while (a4 != v13);
  [v12 useResources:v16[0] count:a4 usage:a5 stages:a6];
  int v18 = v16;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
}

void sub_24F6E1F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchHeaps(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10 = a1;
  uint64_t v11 = 0;
  memset(v14, 0, sizeof(v14));
  do
  {
    id v12 = *(void ***)(a3 + 8 * v11);
    id v15 = (void ***)&v16;
    int v16 = (char **)v12;
    id v13 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a6, (unint64_t *)&v16, (uint64_t)&std::piecewise_construct, &v15)[3];
    std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v14, &v13);

    ++v11;
  }
  while (a4 != v11);
  [v10 useHeaps:v14[0] count:a4 stages:a5];
  int v16 = v14;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
}

void sub_24F6E2064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchIndirectCommandBuffers(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v8 = a1;
  unint64_t v9 = 0;
  memset(v12, 0, sizeof(v12));
  do
  {
    id v10 = *(void ***)(a3 + 8 * v9);
    id v13 = (void ***)&v14;
    uint64_t v14 = (char **)v10;
    id v11 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, (unint64_t *)&v14, (uint64_t)&std::piecewise_construct, &v13)[3];
    std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::push_back[abi:ne180100](v12, &v11);

    ++v9;
  }
  while (v9 < a4[1]);
  [v8 setIndirectCommandBuffers:v12[0] withRange:*a4];
  uint64_t v14 = v12;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
}

void sub_24F6E2174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeIndirectCommandBufferOptimizedRangeList(GPUTools::MTL *this, const void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = [MEMORY[0x263EFF980] arrayWithCapacity:v3];
  if (v3)
  {
    unint64_t v5 = (void *)((char *)this + 24);
    do
    {
      unint64_t v6 = objc_msgSend(MEMORY[0x263F08D40], "valueWithRange:", *(v5 - 1), *v5);
      [v4 addObject:v6];
      v5 += 2;

      --v3;
    }
    while (v3);
  }
  uint64_t v7 = (void *)[v4 copy];

  return v7;
}

void sub_24F6E2254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GPUTools::MTL::DispatchPipelineStates(void *a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9 = a1;
  if (a2 == -16001)
  {
    memset(v14, 0, sizeof(v14));
    std::vector<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>::reserve(v14, a4[1]);
    if (a4[1])
    {
      unint64_t v10 = 0;
      do
      {
        id v11 = *(void ***)(a3 + 8 * v10);
        id v15 = (void ***)&v16;
        int v16 = (char **)v11;
        id v13 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a5, (unint64_t *)&v16, (uint64_t)&std::piecewise_construct, &v15)[3];
        std::vector<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>::emplace_back<objc_object  {objcproto22MTLRenderPipelineState}*&>(v14, &v13);

        ++v10;
        unint64_t v12 = a4[1];
      }
      while (v10 < v12);
    }
    else
    {
      unint64_t v12 = 0;
    }
    objc_msgSend(v9, "setRenderPipelineStates:withRange:", v14[0], *a4, v12);
    int v16 = v14;
    std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  }
}

void sub_24F6E237C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a11;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a16);

  _Unwind_Resume(a1);
}

uint64_t std::vector<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>::reserve(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v17 = result;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(result, a2);
    id v9 = *a1;
    id v8 = a1[1];
    if (v8 == *a1)
    {
      int64x2_t v12 = vdupq_n_s64((unint64_t)v8);
      unint64_t v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      unint64_t v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *(void *)id v8 = 0;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      int64x2_t v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v15 = v12;
    id v13 = a1[2];
    a1[2] = &v6[8 * v7];
    int v16 = v13;
    uint64_t v14 = v12.i64[0];
    return std::__split_buffer<objc_object  {objcproto11MTLResource}* {__strong}>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

char *std::vector<objc_object  {objcproto22MTLRenderPipelineState}* {__strong}>::emplace_back<objc_object  {objcproto22MTLRenderPipelineState}*&>(char **a1, id *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v25 = v4;
    if (v12) {
      id v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v12);
    }
    else {
      id v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    int64x2_t v15 = &v13[8 * v12];
    uint64_t v24 = v15;
    *(void *)uint64_t v14 = *a2;
    id v8 = v14 + 8;
    v23.i64[1] = (uint64_t)(v14 + 8);
    uint64_t v17 = *a1;
    int v16 = a1[1];
    if (v16 == *a1)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *(void *)int v16 = 0;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      int64x2_t v19 = *(int64x2_t *)a1;
      id v8 = (char *)v23.i64[1];
      int64x2_t v15 = v24;
    }
    *a1 = v14;
    a1[1] = v8;
    int64x2_t v23 = v19;
    unint64_t v20 = a1[2];
    a1[2] = v15;
    uint64_t v24 = v20;
    uint64_t v22 = v19.i64[0];
    std::__split_buffer<objc_object  {objcproto11MTLResource}* {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *(void *)uint64_t v7 = *a2;
    id v8 = v7 + 8;
  }
  a1[1] = v8;
  return v8 - 8;
}

id GPUTools::MTL::MakeMTLRenderPipelineDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_opt_new();
  unsigned int v5 = *(_DWORD *)a1;
  unint64_t v63 = *(void *)(a1 + 8);
  uint64_t v64 = &v63;
  objc_msgSend(v4, "setVertexFunction:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a2, &v63, (uint64_t)&std::piecewise_construct, &v64)[3]);
  unint64_t v63 = *(void *)(a1 + 16);
  uint64_t v64 = &v63;
  objc_msgSend(v4, "setFragmentFunction:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a2, &v63, (uint64_t)&std::piecewise_construct, &v64)[3]);
  unint64_t v6 = objc_opt_new();
  uint64_t v61 = a2;
  unsigned int v62 = v5;
  if (GPUTools::MTL::_captureVersion >= 0x1A)
  {
    uint64_t v7 = (uint64_t *)(a1 + 32);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (!v8) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 24);
    uint64_t v8 = 31;
  }
  for (uint64_t i = 0; i != v8; ++i)
  {
    uint64_t v10 = v7;
    uint64_t v12 = *v7;
    uint64_t v11 = v7[1];
    uint64_t v13 = v7[2];
    uint64_t v14 = [v6 layouts];
    int64x2_t v15 = [v14 objectAtIndexedSubscript:i];
    [v15 setStride:v12];

    int v16 = [v6 layouts];
    uint64_t v17 = [v16 objectAtIndexedSubscript:i];
    [v17 setStepFunction:v13];

    uint64_t v18 = [v6 layouts];
    int64x2_t v19 = [v18 objectAtIndexedSubscript:i];
    [v19 setStepRate:v11];

    uint64_t v7 = v10 + 3;
  }
  uint64_t v7 = v10 + 3;
  if (GPUTools::MTL::_captureVersion < 0x1A)
  {
    uint64_t v20 = 31;
    goto LABEL_9;
  }
LABEL_8:
  unsigned int v21 = *(_DWORD *)v7++;
  uint64_t v20 = v21;
  if (v21)
  {
LABEL_9:
    uint64_t v22 = 0;
    do
    {
      int64x2_t v23 = v7;
      uint64_t v25 = *v7;
      uint64_t v24 = v7[1];
      uint64_t v26 = v23[2];
      unint64_t v27 = [v6 attributes];
      int v28 = [v27 objectAtIndexedSubscript:v22];
      [v28 setFormat:v25];

      id v29 = [v6 attributes];
      int v30 = [v29 objectAtIndexedSubscript:v22];
      [v30 setOffset:v24];

      unint64_t v31 = [v6 attributes];
      size_t v32 = [v31 objectAtIndexedSubscript:v22];
      [v32 setBufferIndex:v26];

      ++v22;
      uint64_t v7 = v23 + 3;
    }
    while (v20 != v22);
    uint64_t v7 = v23 + 3;
  }
  [v4 setVertexDescriptor:v6];

  char v33 = objc_opt_respondsToSelector();
  uint64_t v34 = *v7;
  if (v33) {
    [v4 setRasterSampleCount:v34];
  }
  else {
    [v4 setSampleCount:v34];
  }
  [v4 setSampleMask:v7[1]];
  LODWORD(v35) = *((_DWORD *)v7 + 4);
  [v4 setSampleCoverage:v35];
  [v4 setAlphaToCoverageEnabled:*((_DWORD *)v7 + 6) != 0];
  [v4 setAlphaToOneEnabled:*((_DWORD *)v7 + 8) != 0];
  [v4 setRasterizationEnabled:*((_DWORD *)v7 + 10) != 0];
  [v4 setDepthAttachmentPixelFormat:v7[6]];
  [v4 setStencilAttachmentPixelFormat:v7[7]];
  uint64_t v36 = *((unsigned int *)v7 + 16);
  uint64_t v37 = (uint64_t)(v7 + 9);
  if (v36)
  {
    for (uint64_t j = 0; j != v36; ++j)
    {
      uint64_t v39 = objc_opt_new();
      [v39 setBlendingEnabled:*(_DWORD *)v37 != 0];
      [v39 setSourceRGBBlendFactor:*(void *)(v37 + 8)];
      [v39 setDestinationRGBBlendFactor:*(void *)(v37 + 16)];
      [v39 setRgbBlendOperation:*(void *)(v37 + 24)];
      [v39 setSourceAlphaBlendFactor:*(void *)(v37 + 32)];
      [v39 setDestinationAlphaBlendFactor:*(void *)(v37 + 40)];
      [v39 setAlphaBlendOperation:*(void *)(v37 + 48)];
      [v39 setWriteMask:*(void *)(v37 + 56)];
      [v39 setPixelFormat:*(void *)(v37 + 64)];
      int v40 = [v4 colorAttachments];
      [v40 setObject:v39 atIndexedSubscript:j];

      v37 += 72;
    }
  }
  size_t v41 = strlen((const char *)v37);
  int v42 = [NSString stringWithUTF8String:v37];
  [v4 setLabel:v42];

  if (v62 >= 7)
  {
    unint64_t v43 = (v41 & 0xFFFFFFFFFFFFFFF8) + v37 + 8;
    uint64_t v44 = *(void *)v43;
    if ((objc_opt_respondsToSelector() & (v44 != -1)) == 1) {
      [v4 setInputPrimitiveTopology:v44];
    }
    if (v62 >= 9)
    {
      [v4 setTessellationPartitionMode:*(void *)(v43 + 8)];
      [v4 setMaxTessellationFactor:*(void *)(v43 + 16)];
      [v4 setTessellationFactorScaleEnabled:*(_DWORD *)(v43 + 24) != 0];
      [v4 setTessellationFactorFormat:*(void *)(v43 + 32)];
      [v4 setTessellationControlPointIndexType:*(void *)(v43 + 40)];
      [v4 setTessellationFactorStepFunction:*(void *)(v43 + 48)];
      [v4 setTessellationOutputWindingOrder:*(void *)(v43 + 56)];
      if (v62 >= 0x12)
      {
        if (GPUTools::MTL::_captureVersion >= 0x1A)
        {
          unint64_t v45 = v43 + 72;
          int v46 = *(_DWORD *)(v43 + 64);
        }
        else
        {
          unint64_t v45 = v43 + 64;
          int v46 = 31;
        }
        if (objc_opt_respondsToSelector())
        {
          uint64_t v47 = objc_opt_new();
          if (v46)
          {
            for (uint64_t k = 0; k != v46; ++k)
            {
              uint64_t v49 = *(void *)v45;
              v45 += 8;
              [v47 setMutability:v49];
              uint64_t v50 = [v4 vertexBuffers];
              [v50 setObject:v47 atIndexedSubscript:k];
            }
          }
        }
        else if (v46)
        {
          v45 += 8 * (v46 - 1) + 8;
        }
        if (GPUTools::MTL::_captureVersion >= 0x1A)
        {
          int v52 = *(_DWORD *)v45;
          v45 += 8;
          int v51 = v52;
        }
        else
        {
          int v51 = 31;
        }
        if (objc_opt_respondsToSelector())
        {
          uint64_t v53 = objc_opt_new();
          if (v51)
          {
            for (uint64_t m = 0; m != v51; ++m)
            {
              uint64_t v55 = *(void *)v45;
              v45 += 8;
              [v53 setMutability:v55];
              uint64_t v56 = [v4 fragmentBuffers];
              [v56 setObject:v53 atIndexedSubscript:m];
            }
          }
        }
        else if (v51)
        {
          v45 += 8 * (v51 - 1) + 8;
        }
        if (v62 >= 0x17)
        {
          int v57 = *(_DWORD *)v45;
          if (objc_opt_respondsToSelector()) {
            [v4 setSupportIndirectCommandBuffers:v57 != 0];
          }
          if (v62 >= 0x20)
          {
            uint64_t v58 = *(void *)(v45 + 16);
            if (v58 != -1)
            {
              uint64_t v59 = *(void *)(v45 + 8);
              if (objc_opt_respondsToSelector()) {
                [v4 setVertexAmplificationMode:v59];
              }
              if (objc_opt_respondsToSelector()) {
                [v4 setMaxVertexAmplificationCount:v58];
              }
            }
            if (v62 >= 0x26)
            {
              unint64_t v63 = *(void *)(v45 + 24);
              if (objc_opt_respondsToSelector())
              {
                uint64_t v64 = &v63;
                objc_msgSend(v4, "setPipelineLibrary:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v61, &v63, (uint64_t)&std::piecewise_construct, &v64)[3]);
              }
              if (v62 >= 0x27 && (objc_opt_respondsToSelector() & 1) != 0)
              {
                [v4 setLogicOperation:*(void *)(v45 + 32)];
                [v4 setAlphaTestFunction:*(void *)(v45 + 40)];
                [v4 setVertexDepthCompareClampMask:*(unsigned int *)(v45 + 48)];
                [v4 setFragmentDepthCompareClampMask:*(unsigned int *)(v45 + 56)];
                [v4 setLogicOperationEnabled:*(void *)(v45 + 64) != 0];
                [v4 setOpenGLModeEnabled:*(void *)(v45 + 72) != 0];
                [v4 setPointCoordLowerLeft:*(void *)(v45 + 80) != 0];
                [v4 setPointSizeOutputVS:*(void *)(v45 + 88) != 0];
                [v4 setTwoSideEnabled:*(void *)(v45 + 96) != 0];
                [v4 setAlphaTestEnabled:*(void *)(v45 + 104) != 0];
                [v4 setPointSmoothEnabled:*(void *)(v45 + 112) != 0];
                [v4 setClipDistanceEnableMask:*(void *)(v45 + 120) != 0];
              }
            }
          }
        }
      }
    }
  }
  return v4;
}

void sub_24F6E2DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLTileRenderPipelineDescriptor(const char *a1, uint64_t a2)
{
  uint64_t v4 = objc_opt_new();
  unsigned int v6 = *(_DWORD *)a1;
  a1 += 8;
  unsigned int v5 = v6;
  size_t v7 = strlen(a1);
  uint64_t v8 = [NSString stringWithUTF8String:a1];
  [v4 setLabel:v8];
  unint64_t v9 = (unint64_t)&a1[(v7 & 0xFFFFFFFFFFFFFFF8) + 8];

  unint64_t v26 = *(void *)v9;
  unint64_t v27 = &v26;
  objc_msgSend(v4, "setTileFunction:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a2, &v26, (uint64_t)&std::piecewise_construct, &v27)[3]);
  char v10 = objc_opt_respondsToSelector();
  uint64_t v11 = *(void *)(v9 + 8);
  if (v10) {
    [v4 setRasterSampleCount:v11];
  }
  else {
    [v4 setSampleCount:v11];
  }
  unsigned int v14 = *(_DWORD *)(v9 + 16);
  uint64_t v12 = (void *)(v9 + 16);
  uint64_t v13 = v14;
  int64x2_t v15 = v12 + 1;
  if (v14)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = objc_opt_new();
      [v17 setPixelFormat:*v15];
      uint64_t v18 = [v4 colorAttachments];
      [v18 setObject:v17 atIndexedSubscript:v16];

      ++v16;
      ++v15;
    }
    while (v13 != v16);
    uint64_t v12 = v15 - 1;
  }
  [v4 setThreadgroupSizeMatchesTileSize:*(_DWORD *)v15 != 0];
  if (v5 >= 0x12)
  {
    if (GPUTools::MTL::_captureVersion >= 0x1A)
    {
      int64x2_t v19 = v12 + 3;
      unsigned int v20 = *((_DWORD *)v12 + 4);
    }
    else
    {
      int64x2_t v19 = v12 + 2;
      unsigned int v20 = 31;
    }
    if (objc_opt_respondsToSelector())
    {
      unsigned int v21 = objc_opt_new();
      if (v20)
      {
        uint64_t v22 = 0;
        uint64_t v23 = v20;
        do
        {
          [v21 setMutability:v19[v22]];
          uint64_t v24 = [v4 tileBuffers];
          [v24 setObject:v21 atIndexedSubscript:v22];

          ++v22;
        }
        while (v23 != v22);
      }
    }
  }
  return v4;
}

void sub_24F6E30AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLComputePipelineDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_opt_new();
  unsigned int v5 = *(_DWORD *)a1;
  uint64_t v25 = *(void *)(a1 + 8);
  unint64_t v27 = (unint64_t *)&v25;
  objc_msgSend(v4, "setComputeFunction:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a2, (unint64_t *)&v25, (uint64_t)&std::piecewise_construct, &v27)[3]);
  [v4 setThreadGroupSizeIsMultipleOfThreadExecutionWidth:*(_DWORD *)(a1 + 16) != 0];
  a1 += 24;
  unsigned int v6 = (uint64_t *)((strlen((const char *)a1) & 0xFFFFFFFFFFFFFFF8) + a1 + 8);
  unint64_t v26 = v6;
  size_t v7 = [NSString stringWithUTF8String:a1];
  [v4 setLabel:v7];

  if (v5 < 0xB) {
    goto LABEL_34;
  }
  if (*v6 != -1)
  {
    if (objc_opt_respondsToSelector())
    {
      unint64_t v9 = GPUTools::MTL::MakeMTLStageInputOutputDescriptor(&v26, v8);
      [v4 setStageInputDescriptor:v9];

      goto LABEL_12;
    }
    if (GPUTools::MTL::_captureVersion > 0x19)
    {
      uint64_t v13 = &v6[3 * *(unsigned int *)v6];
      uint64_t v11 = v13 + 2;
      unsigned int v12 = *((_DWORD *)v13 + 2);
      if (!v12)
      {
LABEL_10:
        char v10 = v11 + 2;
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v11 = v6 + 93;
      unsigned int v12 = 31;
    }
    v11 += 3 * v12;
    goto LABEL_10;
  }
  char v10 = v6 + 1;
LABEL_11:
  unint64_t v26 = v10;
LABEL_12:
  if (v5 >= 0x12)
  {
    if (GPUTools::MTL::_captureVersion >= 0x1A) {
      unsigned int v14 = *(_DWORD *)v26++;
    }
    else {
      unsigned int v14 = 31;
    }
    if (objc_opt_respondsToSelector())
    {
      int64x2_t v15 = objc_opt_new();
      uint64_t v16 = v26;
      if (v14)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = v14;
        do
        {
          [v15 setMutability:v16[v18]];
          unsigned int v20 = [v4 buffers];
          [v20 setObject:v15 atIndexedSubscript:v18];

          ++v18;
          v17 -= 8;
        }
        while (v19 != v18);
        uint64_t v16 = (uint64_t *)((char *)v16 - v17);
      }
    }
    else
    {
      uint64_t v21 = 8 * (v14 - 1) + 8;
      if (!v14) {
        uint64_t v21 = 0;
      }
      uint64_t v16 = (uint64_t *)((char *)v26 + v21);
    }
    if (v5 >= 0x1B)
    {
      int v22 = *(_DWORD *)v16;
      if (objc_opt_respondsToSelector()) {
        [v4 setSupportIndirectCommandBuffers:v22 != 0];
      }
      if (v5 >= 0x25)
      {
        uint64_t v23 = v16[1];
        if (objc_opt_respondsToSelector()) {
          [v4 setMaxTotalThreadsPerThreadgroup:v23];
        }
        if (v5 >= 0x26)
        {
          uint64_t v25 = v16[2];
          if (objc_opt_respondsToSelector())
          {
            unint64_t v27 = (unint64_t *)&v25;
            objc_msgSend(v4, "setPipelineLibrary:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a2, (unint64_t *)&v25, (uint64_t)&std::piecewise_construct, &v27)[3]);
          }
        }
      }
    }
  }
LABEL_34:
  return v4;
}

void sub_24F6E3418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLIOCommandQueueDescriptor()
{
  v0 = objc_opt_new();
  return v0;
}

id GPUTools::MTL::MakeMTLCommandQueueDescriptor(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)a1;
  uint64_t v3 = objc_opt_new();
  [v3 setMaxCommandBufferCount:*(void *)(a1 + 8)];
  if (v2 >= 0x1E)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = *(void *)(a1 + 24);
    if (objc_opt_respondsToSelector())
    {
      [v3 setQosLevel:v4];
      [v3 setCommitSynchronously:v5 != 0];
    }
    if (v2 >= 0x27 && (objc_opt_respondsToSelector() & 1) != 0) {
      [v3 setIsOpenGLQueue:*(void *)(a1 + 32) != 0];
    }
  }
  return v3;
}

void sub_24F6E3560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GPUTools::MTL::DictionarySetInt(GPUTools::MTL *this, __CFDictionary *a2, const void *a3)
{
  valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v5;
    CFDictionarySetValue(this, a2, v5);
    CFRelease(v6);
  }
}

__IOSurface *GPUTools::MTL::MakeIOSurface(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 16);
  v45[0] = *(void *)(a1 + 8);
  int v22 = v3;
  uint64_t v23 = *(void **)(a1 + 24);
  uint64_t v24 = *(void **)(a1 + 32);
  uint64_t v25 = *(void **)(a1 + 40);
  unint64_t v26 = *(void **)(a1 + 48);
  unint64_t v27 = *(void **)(a1 + 56);
  int v28 = *(void **)(a1 + 64);
  id v29 = (void *)*(unsigned int *)(a1 + 72);
  CFIndex v4 = *(void *)(a1 + 80);
  values = (void **)malloc_type_malloc(8 * v4, 0x80040B8603338uLL);
  CFIndex numValues = v4;
  if (v4)
  {
    CFNumberRef v5 = 0;
    uint64_t v6 = a1 + 88;
    CFAllocatorRef v41 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    int v40 = (__CFDictionary *)*MEMORY[0x263F0EF20];
    uint64_t v39 = (__CFDictionary *)*MEMORY[0x263F0EEE8];
    size_t v38 = (__CFDictionary *)*MEMORY[0x263F0EE68];
    uint64_t v37 = (__CFDictionary *)*MEMORY[0x263F0EE70];
    uint64_t v36 = (__CFDictionary *)*MEMORY[0x263F0EEC0];
    double v35 = (__CFDictionary *)*MEMORY[0x263F0EEB8];
    uint64_t v34 = (__CFDictionary *)*MEMORY[0x263F0EF08];
    char v33 = (__CFDictionary *)*MEMORY[0x263F0EF10];
    size_t v7 = (GPUTools::MTL **)values;
    CFIndex v8 = v4;
    do
    {
      unint64_t v9 = *(const void **)v6;
      char v10 = *(const void **)(v6 + 8);
      uint64_t v11 = *(const void **)(v6 + 16);
      unsigned int v12 = *(const void **)(v6 + 24);
      int v42 = *(const void **)(v6 + 32);
      unint64_t v43 = *(const void **)(v6 + 40);
      Mutable = CFDictionaryCreateMutable(v41, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      GPUTools::MTL::DictionarySetInt(Mutable, v40, v9);
      GPUTools::MTL::DictionarySetInt(Mutable, v39, v10);
      GPUTools::MTL::DictionarySetInt(Mutable, v38, v11);
      GPUTools::MTL::DictionarySetInt(Mutable, v37, v12);
      GPUTools::MTL::DictionarySetInt(Mutable, v36, v42);
      GPUTools::MTL::DictionarySetInt(Mutable, v35, v43);
      GPUTools::MTL::DictionarySetInt(Mutable, v34, v5);
      GPUTools::MTL::DictionarySetInt(Mutable, v33, (const void *)((void)v12 * (void)v10));
      *v7++ = Mutable;
      v6 += 48;
      v5 += (void)v12 * (void)v10;
      --v8;
    }
    while (v8);
  }
  unsigned int v14 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a2, (unint64_t *)v45);
  if (v14)
  {
    int64x2_t v15 = (__IOSurface *)v14[3];
  }
  else
  {
    uint64_t v16 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    GPUTools::MTL::DictionarySetInt(v16, (__CFDictionary *)*MEMORY[0x263F0ED30], v22);
    GPUTools::MTL::DictionarySetInt(v16, (__CFDictionary *)*MEMORY[0x263F0EF50], v23);
    GPUTools::MTL::DictionarySetInt(v16, (__CFDictionary *)*MEMORY[0x263F0EDF8], v24);
    GPUTools::MTL::DictionarySetInt(v16, (__CFDictionary *)*MEMORY[0x263F0ED48], v25);
    GPUTools::MTL::DictionarySetInt(v16, (__CFDictionary *)*MEMORY[0x263F0ED50], v26);
    GPUTools::MTL::DictionarySetInt(v16, (__CFDictionary *)*MEMORY[0x263F0EDC0], v27);
    GPUTools::MTL::DictionarySetInt(v16, (__CFDictionary *)*MEMORY[0x263F0EDB8], v28);
    GPUTools::MTL::DictionarySetInt(v16, (__CFDictionary *)*MEMORY[0x263F0EE48], v29);
    CFIndex v17 = v4;
    if (v4)
    {
      uint64_t v18 = (const void **)values;
      CFArrayRef v19 = CFArrayCreate(0, (const void **)values, numValues, MEMORY[0x263EFFF70]);
      CFDictionarySetValue(v16, (const void *)*MEMORY[0x263F0EF00], v19);
      CFRelease(v19);
      do
      {
        unsigned int v20 = *v18++;
        CFRelease(v20);
        --v17;
      }
      while (v17);
    }
    int64x2_t v15 = IOSurfaceCreate(v16);
    uint64_t v44 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,objc_object * {__strong}>((uint64_t)a2, (unint64_t *)v45, v45, (uint64_t *)&v44);
  }
  free(values);
  return v15;
}

void sub_24F6E3988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GPUTools::MTL::MakeNSRange(GPUTools::MTL *this, const void *a2)
{
  return *(void *)this;
}

__n128 GPUTools::MTL::MakeMTLSize@<Q0>(GPUTools::MTL *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)this;
  *(_OWORD *)a2 = *(_OWORD *)this;
  *(void *)(a2 + 16) = *((void *)this + 2);
  return result;
}

__n128 GPUTools::MTL::MakeMTLRegion@<Q0>(GPUTools::MTL *this@<X0>, uint64_t a2@<X8>)
{
  long long v3 = *((_OWORD *)this + 1);
  *(_OWORD *)a2 = *(_OWORD *)this;
  *(_OWORD *)(a2 + 16) = v3;
  __n128 result = *((__n128 *)this + 2);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

__n128 GPUTools::MTL::MakeMTLScissorRect@<Q0>(GPUTools::MTL *this@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)this;
  long long v4 = *((_OWORD *)this + 1);
  *a2 = *(_OWORD *)this;
  a2[1] = v4;
  return result;
}

uint64_t GPUTools::MTL::MakeMTLTextureSwizzleChannels(GPUTools::MTL *this, const void *a2)
{
  return *(unsigned int *)this;
}

uint64_t GPUTools::MTL::MakeSizeAndAlign(GPUTools::MTL *this, const void *a2)
{
  return *(void *)this;
}

id GPUTools::MTL::MakeMTLHeapDescriptor(uint64_t a1)
{
  unsigned int v2 = objc_opt_new();
  unsigned int v3 = *(_DWORD *)a1;
  [v2 setSize:*(void *)(a1 + 8)];
  [v2 setCpuCacheMode:*(void *)(a1 + 16)];
  [v2 setStorageMode:*(void *)(a1 + 24)];
  if (v3 >= 0x1D)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (objc_opt_respondsToSelector()) {
      [v2 setType:v4];
    }
    if (v3 >= 0x1F)
    {
      uint64_t v6 = *(void *)(a1 + 48);
      uint64_t v5 = *(void *)(a1 + 56);
      if (objc_opt_respondsToSelector()) {
        [v2 setHazardTrackingMode:v6];
      }
      if (objc_opt_respondsToSelector()) {
        [v2 setResourceOptions:v5];
      }
    }
  }
  return v2;
}

void sub_24F6E3AD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLIndirectCommandBufferDescriptor(GPUTools::MTL *this, void *a2, unint64_t *a3)
{
  uint64_t v5 = objc_opt_new();
  unsigned int v6 = *(_DWORD *)this;
  [v5 setCommandTypes:*((void *)this + 1)];
  [v5 setInheritPipelineState:*((_DWORD *)this + 4) != 0];
  [v5 setInheritBuffers:*((_DWORD *)this + 6) != 0];
  [v5 setMaxVertexBufferBindCount:*((void *)this + 4)];
  [v5 setMaxFragmentBufferBindCount:*((void *)this + 5)];
  *a2 = 0;
  if (v6 >= 0x1B)
  {
    if (objc_opt_respondsToSelector()) {
      [v5 setMaxKernelBufferBindCount:*((void *)this + 6)];
    }
    *a2 = *((void *)this + 7);
  }
  return v5;
}

void sub_24F6E3BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLRasterizationRateMapDescriptor(GPUTools::MTL *this, const void *a2)
{
  v29[3] = *MEMORY[0x263EF8340];
  unsigned int v2 = (char *)this + 8;
  size_t v3 = strlen((const char *)this + 8);
  id v26 = [NSString stringWithUTF8String:v2];
  uint64_t v23 = (uint64_t)&v23;
  uint64_t v4 = &v2[(v3 & 0xFFFFFFFFFFFFFFF8) + 8];
  long long v25 = *(_OWORD *)v4;
  uint64_t v5 = *(void *)&v2[(v3 & 0xFFFFFFFFFFFFFFF8) + 24];
  uint64_t v6 = *(void *)&v2[(v3 & 0xFFFFFFFFFFFFFFF8) + 32];
  uint64_t v24 = v5;
  uint64_t v7 = 8 * v6;
  MEMORY[0x270FA5388](v26);
  CFIndex v8 = (char *)&v23 - ((8 * v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v8, 8 * v6);
  if (v6)
  {
    uint64_t v9 = 0;
    char v10 = (int *)(v4 + 32);
    do
    {
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *((void *)v10 + 1);
      uint64_t v13 = *((void *)v10 + 2);
      id v14 = objc_alloc(MEMORY[0x263F12970]);
      v29[0] = v11;
      v29[1] = v12;
      v29[2] = v13;
      int64x2_t v15 = (void *)[v14 initWithSampleCount:v29];
      v10 += 6;
      if (v11)
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          int v17 = *v10;
          v10 += 2;
          *(_DWORD *)([v15 horizontalSampleStorage] + 4 * i) = v17;
        }
      }
      if (v12)
      {
        for (uint64_t j = 0; j != v12; ++j)
        {
          int v19 = *v10;
          v10 += 2;
          *(_DWORD *)([v15 verticalSampleStorage] + 4 * j) = v19;
        }
      }
      unsigned int v20 = *(void **)&v8[8 * v9];
      *(void *)&v8[8 * v9] = v15;

      ++v9;
    }
    while (v9 != v6);
  }
  long long v27 = v25;
  uint64_t v28 = v24;
  uint64_t v21 = [MEMORY[0x263F12980] rasterizationRateMapDescriptorWithScreenSize:&v27 layerCount:v6 layers:(char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  [v21 setLabel:v26];
  if (v6)
  {
    do
    {

      v7 -= 8;
    }
    while (v7);
  }

  return v21;
}

void sub_24F6E3DE4(_Unwind_Exception *a1)
{
  if (v2)
  {
    do
    {

      v1 -= 8;
    }
    while (v1);
  }

  _Unwind_Resume(a1);
}

void *GPUTools::MTL::MakeMTLImageFilterFunctionInfo(GPUTools::MTL *this, const void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = malloc_type_malloc(24 * v3, 0x1060040D275764BuLL);
  if (v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (char *)this + 16;
    do
    {
      uint64_t v7 = (BOOL *)&v4[3 * v5];
      *uint64_t v7 = *(_DWORD *)v6 != 0;
      uint64_t v8 = *((void *)v6 + 1);
      v6 += 16;
      *((void *)v7 + 1) = v8;
      uint64_t v9 = (uint64_t *)(v7 + 8);
      if (v8)
      {
        char v10 = (char *)malloc_type_malloc(24 * v8, 0x1000040504FFAC1uLL);
        uint64_t v11 = *v9;
        if (*v9)
        {
          uint64_t v12 = 0;
          do
          {
            uint64_t v13 = &v10[v12];
            *(_OWORD *)uint64_t v13 = *(_OWORD *)&v6[v12];
            *((void *)v13 + 2) = *(void *)&v6[v12 + 16];
            v12 += 24;
            --v11;
          }
          while (v11);
          v6 += v12;
        }
      }
      else
      {
        char v10 = 0;
      }
      v4[3 * v5++ + 2] = v10;
    }
    while (v5 != v3);
  }
  return v4;
}

id GPUTools::MTL::MakeMTLArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:v4];
  if (v4)
  {
    uint64_t v6 = (unint64_t *)(a1 + 16);
    do
    {
      unint64_t v7 = *v6++;
      unint64_t v10 = v7;
      uint64_t v11 = &v10;
      id v8 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a2, &v10, (uint64_t)&std::piecewise_construct, &v11)[3];
      [v5 addObject:v8];

      --v4;
    }
    while (v4);
  }
  return v5;
}

void sub_24F6E4004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLArray(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  for (uint64_t i = [MEMORY[0x263EFF980] arrayWithCapacity:a2];
  {
    uint64_t v9 = a1;
    id v7 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a3, a1, (uint64_t)&std::piecewise_construct, &v9)[3];
    [i addObject:v7];
    ++a1;
  }
  return i;
}

void sub_24F6E40DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GPUTools::MTL::MakeMTLCounterSampleBufferDescriptor(GPUTools::MTL *this, void *a2, objc_object *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2;
  uint64_t v5 = objc_opt_new();
  id v6 = [NSString alloc];
  id v7 = (char *)this + 8;
  size_t v8 = strlen((const char *)this + 8);
  uint64_t v9 = (void *)[v6 initWithUTF8String:(char *)this + 8];
  size_t v10 = (size_t)&v7[(v8 & 0xFFFFFFFFFFFFFFF8)
                  + 8
                  + (strlen(&v7[(v8 & 0xFFFFFFFFFFFFFFF8) + 8]) & 0xFFFFFFFFFFFFFFF8)];
  uint64_t v11 = (const char *)(v10 + 24);
  int v12 = *(_DWORD *)(v10 + 16);
  if (v12 >= 1)
  {
    do
    {
      uint64_t v13 = &v11[(strlen(v11) & 0xFFFFFFFFFFFFFFF8) + 8];
      uint64_t v11 = &v13[(strlen(v13) & 0xFFFFFFFFFFFFFFF8) + 8];
      --v12;
    }
    while (v12);
  }
  id v14 = [NSString alloc];
  size_t v15 = strlen(v11);
  uint64_t v16 = (void *)[v14 initWithUTF8String:v11];
  [v5 setLabel:v16];
  int v17 = &v11[(v15 & 0xFFFFFFFFFFFFFFF8) + 8];

  [v5 setStorageMode:*(void *)v17];
  [v5 setSampleCount:*((void *)v17 + 1)];
  [v4 counterSets];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v18 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v19 = [v18 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v19)
  {
    uint64_t v20 = *(void *)v27;
    while (2)
    {
      for (uint64_t i = 0; i != v19; ++i)
      {
        if (*(void *)v27 != v20) {
          objc_enumerationMutation(v18);
        }
        int v22 = *(void **)(*((void *)&v26 + 1) + 8 * i);
        uint64_t v23 = [v22 name];
        int v24 = [v23 isEqualToString:v9];

        if (v24)
        {
          [v5 setCounterSet:v22];
          goto LABEL_13;
        }
      }
      uint64_t v19 = [v18 countByEnumeratingWithState:&v26 objects:v30 count:16];
      if (v19) {
        continue;
      }
      break;
    }
  }
LABEL_13:

  return v5;
}

void sub_24F6E4350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

double GPUTools::MTL::MakeViewportArray(GPUTools::MTL *this, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (char *)malloc_type_malloc(48 * (void)a2, 0x1000040EED21634uLL);
  if (v2)
  {
    id v6 = (char *)this + 24;
    id v7 = v4 + 24;
    do
    {
      *((void *)v7 - 3) = *((void *)v6 - 2);
      *((void *)v7 - 2) = *((void *)v6 - 1);
      *((void *)v7 - 1) = *(void *)v6;
      *(void *)id v7 = *((void *)v6 + 1);
      *((void *)v7 + 1) = *((void *)v6 + 2);
      double result = *((double *)v6 + 3);
      *((double *)v7 + 2) = result;
      v6 += 48;
      v7 += 48;
      --v2;
    }
    while (v2);
  }
  return result;
}

double GPUTools::MTL::MakeScissorRectArray(GPUTools::MTL *this, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (char *)malloc_type_malloc(32 * (void)a2, 0x1000040E0EAB150uLL);
  if (v2)
  {
    id v6 = v4 + 16;
    id v7 = (long long *)((char *)this + 24);
    do
    {
      *(v6 - 1) = *(v7 - 1);
      long long v8 = *v7;
      v7 += 2;
      double result = *(double *)&v8;
      *id v6 = v8;
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  return result;
}

__n128 GPUTools::MTL::MakeRegionArray(__n128 *this, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (__n128 *)malloc_type_malloc(48 * (void)a2, 0x1000040EED21634uLL);
  if (v2)
  {
    id v6 = v4 + 2;
    do
    {
      __n128 v7 = this[1];
      v6[-2] = *this;
      v6[-1] = v7;
      __n128 result = this[2];
      *id v6 = result;
      v6 += 3;
      this += 3;
      --v2;
    }
    while (v2);
  }
  return result;
}

dispatch_data_t GPUTools::MTL::MakeDispatchDataT(GPUTools::MTL *this, size_t a2)
{
  dispatch_data_t v2 = dispatch_data_create(this, a2, 0, 0);
  return v2;
}

id GPUTools::MTL::MakePipelineLibraryDirectory(GPUTools::MTL *this, const void *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  CC_SHA256(this, (CC_LONG)a2, md);
  uint64_t v4 = 0;
  uint64_t v5 = v34;
  do
  {
    unint64_t v6 = md[v4];
    *(v5 - 1) = a0123456789abcd[v6 >> 4];
    *uint64_t v5 = a0123456789abcd[v6 & 0xF];
    v5 += 2;
    ++v4;
  }
  while (v4 != 32);
  v34[63] = 0;
  __n128 v7 = [MEMORY[0x263F08850] defaultManager];
  long long v8 = NSTemporaryDirectory();
  uint64_t v9 = [NSString stringWithUTF8String:&v33];
  size_t v10 = [v8 stringByAppendingPathComponent:v9];

  char v31 = 0;
  if ([v7 fileExistsAtPath:v10 isDirectory:&v31])
  {
    id v11 = 0;
  }
  else
  {
    id v30 = 0;
    [v7 createDirectoryAtPath:v10 withIntermediateDirectories:0 attributes:0 error:&v30];
    id v11 = v30;
  }
  int v12 = (void *)MEMORY[0x263F08928];
  uint64_t v13 = objc_opt_class();
  id v14 = [MEMORY[0x263EFF8F8] dataWithBytesNoCopy:this length:a2 freeWhenDone:0];
  id v29 = v11;
  size_t v15 = [v12 unarchivedObjectOfClass:v13 fromData:v14 error:&v29];
  id v16 = v29;

  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v17 = v15;
  uint64_t v18 = [v17 countByEnumeratingWithState:&v25 objects:v32 count:16];
  if (v18)
  {
    uint64_t v19 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v26 != v19) {
          objc_enumerationMutation(v17);
        }
        uint64_t v21 = *(void *)(*((void *)&v25 + 1) + 8 * i);
        int v22 = objc_msgSend(v17, "objectForKeyedSubscript:", v21, (void)v25);
        uint64_t v23 = [v10 stringByAppendingPathComponent:v21];
        [v22 writeToFile:v23 atomically:0];
      }
      uint64_t v18 = [v17 countByEnumeratingWithState:&v25 objects:v32 count:16];
    }
    while (v18);
  }

  return v10;
}

void sub_24F6E47E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GPUTools::MTL::MakeMTLRenderPassAttachmentDescriptor(void **a1, void *a2, uint64_t a3, unsigned int a4)
{
  id v7 = a2;
  unint64_t v8 = *(*a1)++;
  unint64_t v20 = v8;
  uint64_t v21 = &v20;
  objc_msgSend(v7, "setTexture:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a3, &v20, (uint64_t)&std::piecewise_construct, &v21)[3]);
  uint64_t v9 = *(*a1)++;
  [v7 setLevel:v9];
  uint64_t v10 = *(*a1)++;
  [v7 setSlice:v10];
  uint64_t v11 = *(*a1)++;
  [v7 setDepthPlane:v11];
  unint64_t v12 = *(*a1)++;
  unint64_t v20 = v12;
  uint64_t v21 = &v20;
  objc_msgSend(v7, "setResolveTexture:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a3, &v20, (uint64_t)&std::piecewise_construct, &v21)[3]);
  uint64_t v13 = *(*a1)++;
  [v7 setResolveLevel:v13];
  uint64_t v14 = *(*a1)++;
  [v7 setResolveSlice:v14];
  uint64_t v15 = *(*a1)++;
  [v7 setResolveDepthPlane:v15];
  uint64_t v16 = *(*a1)++;
  [v7 setLoadAction:v16];
  uint64_t v17 = *(*a1)++;
  [v7 setStoreAction:v17];
  if (a4 >= 0x13)
  {
    char v18 = objc_opt_respondsToSelector();
    uint64_t v19 = (*a1)++;
    if (v18) {
      [v7 setStoreActionOptions:*v19];
    }
  }
}

void sub_24F6E4A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<MTLSamplePosition>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_24F6E4A7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  dispatch_data_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<objc_object  {objcproto11MTLResource}* {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,objc_object * {__strong}>(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  *a4 = 0;
  void *i = 0;
  i[1] = v8;
  i[2] = v15;
  i[3] = v16;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  int v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    void *i = *v24;
LABEL_38:
    *int v24 = i;
    goto LABEL_39;
  }
  void *i = *v14;
  *uint64_t v14 = i;
  *(void *)(v23 + 8 * v4) = v14;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    int v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6E4DDC(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void sub_24F6E4ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6E5114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_24F6E5210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6E5300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6E5380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6E5554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Block_object_dispose((const void *)(v17 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_24F6E5814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6E5B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24F6E5FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6E61A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_24F6E65B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_24F6E69F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_24F6E6C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6E6CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6E6EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_24F6E7050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6E7114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6E731C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6E7770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24F6E7928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<DYMTLImageBlockMember>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 40)
  {

    uint64_t v5 = *(void **)(i - 40);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t std::vector<DYMTLImageBlockMember>::__push_back_slow_path<DYMTLImageBlockMember const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    uint8x8_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DYMTLImageBlockMember>>(v7, v9);
  }
  else {
    uint8x8_t v10 = 0;
  }
  uint64_t v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  void v15[3] = &v10[40 * v9];
  *(void *)uint64_t v11 = *(id *)a2;
  *((void *)v11 + 1) = *(id *)(a2 + 8);
  long long v12 = *(_OWORD *)(a2 + 16);
  *((void *)v11 + 4) = *(void *)(a2 + 32);
  *((_OWORD *)v11 + 1) = v12;
  v15[2] = v11 + 40;
  std::vector<DYMTLImageBlockMember>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<DYMTLImageBlockMember>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_24F6E87D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DYMTLImageBlockMember>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<DYMTLImageBlockMember>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DYMTLImageBlockMember>,std::reverse_iterator<DYMTLImageBlockMember*>,std::reverse_iterator<DYMTLImageBlockMember*>,std::reverse_iterator<DYMTLImageBlockMember*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DYMTLImageBlockMember>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DYMTLImageBlockMember>,std::reverse_iterator<DYMTLImageBlockMember*>,std::reverse_iterator<DYMTLImageBlockMember*>,std::reverse_iterator<DYMTLImageBlockMember*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 40);
      a3 -= 40;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(_OWORD *)(v8 - 40) = v9;
      v8 -= 40;
      long long v10 = *(_OWORD *)(a3 + 16);
      *(void *)(v8 + 32) = *(void *)(a3 + 32);
      *(_OWORD *)(v8 + 16) = v10;
      v7 -= 40;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v8;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLImageBlockMember>,std::reverse_iterator<DYMTLImageBlockMember*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLImageBlockMember>,std::reverse_iterator<DYMTLImageBlockMember*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLImageBlockMember>,std::reverse_iterator<DYMTLImageBlockMember*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLImageBlockMember>,std::reverse_iterator<DYMTLImageBlockMember*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<DYMTLImageBlockMember>,std::reverse_iterator<std::reverse_iterator<DYMTLImageBlockMember*>>,std::reverse_iterator<std::reverse_iterator<DYMTLImageBlockMember*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<DYMTLImageBlockMember>,std::reverse_iterator<std::reverse_iterator<DYMTLImageBlockMember*>>,std::reverse_iterator<std::reverse_iterator<DYMTLImageBlockMember*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(id **)(a2 + 32); i != *(id **)(a3 + 32); *(void *)(a2 + 32) = i)
  {

    uint64_t i = (id *)(*(void *)(a2 + 32) + 40);
  }
}

uint64_t std::__split_buffer<DYMTLImageBlockMember>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<DYMTLImageBlockMember>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
  }
}

id ShaderDebuggerMDSerializerLLVM3XXXBridge_Serialize(void *a1, void *a2, void *a3, void **a4, void *a5)
{
  v86[21] = *MEMORY[0x263EF8340];
  id v7 = a1;
  id v52 = a2;
  id v50 = a3;
  int v79 = 0;
  *(_OWORD *)uint64_t v77 = 0u;
  long long v78 = 0u;
  long long v76 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  uint64_t v84 = 0;
  v85[0] = (char *)v86;
  v85[1] = (char *)0x400000000;
  MEMORY[0x253361FF0](v74);
  int64x2_t v72 = 0uLL;
  v73[0] = 0;
  memset(v70, 0, sizeof(v70));
  int v71 = 1065353216;
  uint64_t v8 = [v7 count];
  if (v8)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = v7;
      id v11 = [v7 objectAtIndexedSubscript:v9];
      [v11 bytes];
      [v11 length];
      llvm::MemoryBuffer::getMemBuffer();
      llvm::MemoryBuffer::getMemBufferRef(v69, v55);
      llvm::parseIR();
      uint64_t v12 = __p[0];
      if (__p[0])
      {
        uint64_t v13 = v72.i64[1];
        uint64_t v14 = (v72.i64[1] - v72.i64[0]) >> 3;
        unsigned int v68 = v14;
        if (v72.i64[1] >= v73[0])
        {
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v20 = (v73[0] - v72.i64[0]) >> 2;
          if (v20 <= v14 + 1) {
            unint64_t v20 = v14 + 1;
          }
          unint64_t v21 = v73[0] - v72.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL ? 0x1FFFFFFFFFFFFFFFLL : v20;
          *((void *)&v64 + 1) = v73;
          size_t v22 = v21
              ? (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v73, v21)
              : 0;
          uint64_t v23 = __p[0];
          int v24 = &v22[8 * v14];
          unint64_t v25 = &v22[8 * v21];
          *(void *)&long long v64 = v25;
          __p[0] = 0;
          *(void *)int v24 = v23;
          uint64_t v15 = v24 + 8;
          v63.i64[1] = (uint64_t)(v24 + 8);
          long long v26 = (void *)v72.i64[1];
          long long v27 = (void *)v72.i64[0];
          if (v72.i64[1] == v72.i64[0])
          {
            int64x2_t v29 = vdupq_n_s64(v72.u64[1]);
          }
          else
          {
            do
            {
              uint64_t v28 = *--v26;
              *long long v26 = 0;
              *((void *)v24 - 1) = v28;
              v24 -= 8;
            }
            while (v26 != v27);
            int64x2_t v29 = v72;
            uint64_t v15 = (void *)v63.i64[1];
            unint64_t v25 = (char *)v64;
          }
          v72.i64[0] = (uint64_t)v24;
          v72.i64[1] = (uint64_t)v15;
          int64x2_t v63 = v29;
          uint64_t v30 = v73[0];
          v73[0] = v25;
          *(void *)&long long v64 = v30;
          unsigned int v62 = (unsigned int *)v29.i64[0];
          std::__split_buffer<std::unique_ptr<llvm::Module>>::~__split_buffer((uint64_t)&v62);
        }
        else
        {
          __p[0] = 0;
          *(void *)v72.i64[1] = v12;
          uint64_t v15 = (void *)(v13 + 8);
        }
        v72.i64[1] = (uint64_t)v15;
        BOOL v19 = [v52 objectAtIndexedSubscript:v9];
        char v31 = [MEMORY[0x263EFF9D0] null];
        BOOL v32 = v19 == v31;

        if (!v32)
        {
          uint64_t v33 = [v19 UTF8String];
          unsigned int v62 = &v68;
          uint64_t v34 = std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v70, &v68, (uint64_t)&std::piecewise_construct, &v62);
          MEMORY[0x253362360](v34 + 3, v33);
        }
      }
      else
      {
        if ((SBYTE7(v81) & 0x80u) == 0) {
          uint64_t v16 = &v80;
        }
        else {
          uint64_t v16 = (long long *)v80;
        }
        if ((SBYTE7(v81) & 0x80u) == 0) {
          uint64_t v17 = BYTE7(v81);
        }
        else {
          uint64_t v17 = *((void *)&v80 + 1);
        }
        id v18 = [NSString alloc];
        BOOL v19 = objc_msgSend(v18, "initWithBytes:length:encoding:", v16, v17, objc_msgSend(NSString, "defaultCStringEncoding"));
        if (a5)
        {
          GTShaderDebuggerMDSerializerError(1u, (NSString *)v19);
          *a5 = (id)objc_claimAutoreleasedReturnValue();
        }
      }

      double v35 = __p[0];
      __p[0] = 0;
      if (v35)
      {
        uint64_t v36 = MEMORY[0x253362040]();
        MEMORY[0x2533623E0](v36, 0x10B2C407FF26C1CLL);
      }
      uint64_t v37 = v55;
      uint64_t v55 = 0;
      if (v37) {
        (*(void (**)(llvm::MemoryBuffer *))(*(void *)v37 + 8))(v37);
      }

      if (!v12) {
        break;
      }
      ++v9;
      id v7 = v10;
      if (v9 == v8) {
        goto LABEL_37;
      }
    }
    uint64_t v47 = 0;
  }
  else
  {
LABEL_37:
    uint64_t v10 = v7;
    int64x2_t v63 = 0uLL;
    unsigned int v62 = (unsigned int *)&v63;
    long long v64 = 0u;
    long long v65 = 0u;
    int v66 = 1065353216;
    uint64_t v67 = 0;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    id v38 = v50;
    uint64_t v39 = [v38 countByEnumeratingWithState:&v58 objects:v75 count:16];
    if (v39)
    {
      uint64_t v40 = *(void *)v59;
      do
      {
        for (uint64_t i = 0; i != v39; ++i)
        {
          if (*(void *)v59 != v40) {
            objc_enumerationMutation(v38);
          }
          int v42 = *(void **)(*((void *)&v58 + 1) + 8 * i);
          unint64_t v43 = [v38 objectForKeyedSubscript:v42];
          std::string::basic_string[abi:ne180100]<0>(&v55, (char *)[v42 UTF8String]);
          id v44 = v43;
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v44 UTF8String]);
          ShaderDebugger::Metadata::MDSerializer::addReferencedSourceFile((uint64_t)&v62, &v55, (uint64_t)__p);
          if (v54 < 0) {
            operator delete(__p[0]);
          }
          if (v57 < 0) {
            operator delete(v55);
          }
        }
        uint64_t v39 = [v38 countByEnumeratingWithState:&v58 objects:v75 count:16];
      }
      while (v39);
    }

    __p[0] = 0;
    ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules((uint64_t)&v62, v72.i64, v70, __p, &v55);
    unint64_t v45 = v55;
    int v46 = v56;
    if (v55 == v56)
    {
      if (a5)
      {
        GTShaderDebuggerMDSerializerError(2u, &cfstr_MetadataSerial.isa);
        uint64_t v47 = 0;
        *a5 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        uint64_t v47 = 0;
      }
    }
    else
    {
      if (a4) {
        *a4 = __p[0];
      }
      uint64_t v47 = [MEMORY[0x263EFF8F8] dataWithBytes:v45 length:v46 - v45];
    }
    if (v55)
    {
      uint64_t v56 = v55;
      operator delete(v55);
    }
    ShaderDebugger::Metadata::MDSerializer::~MDSerializer((ShaderDebugger::Metadata::MDSerializer *)&v62);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table((uint64_t)v70);
  unsigned int v62 = (unsigned int *)&v72;
  std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v74);
  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v85);
  if ((void)v83)
  {
    *((void *)&v83 + 1) = v83;
    operator delete((void *)v83);
  }
  if (SHIBYTE(v82) < 0) {
    operator delete(*((void **)&v81 + 1));
  }
  if (SBYTE7(v81) < 0) {
    operator delete((void *)v80);
  }
  if (SBYTE7(v78) < 0) {
    operator delete(v77[0]);
  }

  return v47;
}

void sub_24F6E9160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  ShaderDebugger::Metadata::MDSerializer::~MDSerializer((ShaderDebugger::Metadata::MDSerializer *)&a29);
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table((uint64_t)&a43);
  a43 = (uint64_t)&a49;
  std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&a53);
  llvm::SMDiagnostic::~SMDiagnostic((llvm::SMDiagnostic *)&a71);

  _Unwind_Resume(a1);
}

id GTShaderDebuggerMDSerializerError(unsigned int a1, NSString *a2)
{
  v11[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  uint64_t v4 = v3;
  uint64_t v5 = (void *)MEMORY[0x263F087E8];
  if (v3) {
    uint64_t v6 = (__CFString *)v3;
  }
  else {
    uint64_t v6 = &stru_2700F08A8;
  }
  uint64_t v10 = *MEMORY[0x263F08320];
  v11[0] = v6;
  id v7 = [NSDictionary dictionaryWithObjects:v11 forKeys:&v10 count:1];
  uint64_t v8 = [v5 errorWithDomain:@"GTShaderDebuggerMDSerializerErrorDomain" code:a1 userInfo:v7];

  return v8;
}

void sub_24F6E93AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void llvm::SMDiagnostic::~SMDiagnostic(llvm::SMDiagnostic *this)
{
  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector((char **)this + 16);
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

id ShaderDebuggerMDSerializerLLVM3XXXBridge_Serialize(void *a1, void *a2, void **a3)
{
  v76[21] = *MEMORY[0x263EF8340];
  id v4 = a1;
  id v40 = a2;
  int v69 = 0;
  *(_OWORD *)uint64_t v67 = 0u;
  long long v68 = 0u;
  long long v66 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  uint64_t v74 = 0;
  v75[0] = (char *)v76;
  v75[1] = (char *)0x400000000;
  MEMORY[0x253361FF0](v63);
  int64x2_t v61 = 0uLL;
  unsigned int v62 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  id v5 = v4;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v57 objects:v65 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v58;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v58 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(id *)(*((void *)&v57 + 1) + 8 * i);
        [v9 bytes];
        [v9 length];
        llvm::MemoryBuffer::getMemBuffer();
        llvm::MemoryBuffer::getMemBufferRef(v56, v43);
        llvm::parseIR();
        uint64_t v10 = __p[0];
        if (!__p[0])
        {
          uint64_t v37 = v43;
          unint64_t v43 = 0;
          if (v37) {
            (*(void (**)(llvm::MemoryBuffer *))(*(void *)v37 + 8))(v37);
          }

          uint64_t v36 = 0;
          goto LABEL_49;
        }
        uint64_t v11 = v61.i64[1];
        if (v61.i64[1] >= (unint64_t)v62)
        {
          uint64_t v13 = (v61.i64[1] - v61.i64[0]) >> 3;
          if ((unint64_t)(v13 + 1) >> 61) {
            std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v14 = (uint64_t)&v62[-v61.i64[0]] >> 2;
          if (v14 <= v13 + 1) {
            unint64_t v14 = v13 + 1;
          }
          if ((unint64_t)&v62[-v61.i64[0]] >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v14;
          }
          *((void *)&v52 + 1) = &v62;
          if (v15)
          {
            uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v62, v15);
            uint64_t v10 = __p[0];
          }
          else
          {
            uint64_t v16 = 0;
          }
          uint64_t v17 = &v16[8 * v13];
          id v18 = &v16[8 * v15];
          *(void *)&long long v52 = v18;
          __p[0] = 0;
          *(void *)uint64_t v17 = v10;
          uint64_t v12 = v17 + 8;
          v51.i64[1] = (uint64_t)(v17 + 8);
          BOOL v19 = (void *)v61.i64[1];
          unint64_t v20 = (void *)v61.i64[0];
          if (v61.i64[1] == v61.i64[0])
          {
            int64x2_t v22 = vdupq_n_s64(v61.u64[1]);
          }
          else
          {
            do
            {
              uint64_t v21 = *--v19;
              *BOOL v19 = 0;
              *((void *)v17 - 1) = v21;
              v17 -= 8;
            }
            while (v19 != v20);
            int64x2_t v22 = v61;
            uint64_t v12 = (void *)v51.i64[1];
            id v18 = (char *)v52;
          }
          v61.i64[0] = (uint64_t)v17;
          v61.i64[1] = (uint64_t)v12;
          int64x2_t v51 = v22;
          uint64_t v23 = v62;
          unsigned int v62 = v18;
          *(void *)&long long v52 = v23;
          id v50 = (int64x2_t *)v22.i64[0];
          std::__split_buffer<std::unique_ptr<llvm::Module>>::~__split_buffer((uint64_t)&v50);
        }
        else
        {
          __p[0] = 0;
          *(void *)v61.i64[1] = v10;
          uint64_t v12 = (void *)(v11 + 8);
        }
        v61.i64[1] = (uint64_t)v12;
        int v24 = __p[0];
        __p[0] = 0;
        if (v24)
        {
          uint64_t v25 = MEMORY[0x253362040]();
          MEMORY[0x2533623E0](v25, 0x10B2C407FF26C1CLL);
        }
        long long v26 = v43;
        unint64_t v43 = 0;
        if (v26) {
          (*(void (**)(llvm::MemoryBuffer *))(*(void *)v26 + 8))(v26);
        }
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v57 objects:v65 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  int64x2_t v51 = 0uLL;
  id v50 = &v51;
  long long v52 = 0u;
  long long v53 = 0u;
  int v54 = 1065353216;
  uint64_t v55 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id v27 = v40;
  uint64_t v28 = [v27 countByEnumeratingWithState:&v46 objects:v64 count:16];
  if (v28)
  {
    uint64_t v29 = *(void *)v47;
    do
    {
      for (uint64_t j = 0; j != v28; ++j)
      {
        if (*(void *)v47 != v29) {
          objc_enumerationMutation(v27);
        }
        char v31 = *(void **)(*((void *)&v46 + 1) + 8 * j);
        BOOL v32 = [v27 objectForKeyedSubscript:v31];
        std::string::basic_string[abi:ne180100]<0>(&v43, (char *)[v31 UTF8String]);
        id v33 = v32;
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v33 UTF8String]);
        ShaderDebugger::Metadata::MDSerializer::addReferencedSourceFile((uint64_t)&v50, &v43, (uint64_t)__p);
        if (v42 < 0) {
          operator delete(__p[0]);
        }
        if (v45 < 0) {
          operator delete(v43);
        }
      }
      uint64_t v28 = [v27 countByEnumeratingWithState:&v46 objects:v64 count:16];
    }
    while (v28);
  }

  __p[0] = 0;
  ShaderDebugger::Metadata::MDSerializerLLVM3XXX::serializeModules((uint64_t)&v50, v61.i64, __p, &v43);
  uint64_t v34 = v43;
  double v35 = v44;
  if (v43 == v44)
  {
    uint64_t v36 = 0;
    if (!v43) {
      goto LABEL_45;
    }
  }
  else
  {
    if (a3) {
      *a3 = __p[0];
    }
    uint64_t v36 = [MEMORY[0x263EFF8F8] dataWithBytes:v34 length:v35 - v34];
    uint64_t v34 = v43;
    if (!v43) {
      goto LABEL_45;
    }
  }
  id v44 = v34;
  operator delete(v34);
LABEL_45:
  ShaderDebugger::Metadata::MDSerializer::~MDSerializer((ShaderDebugger::Metadata::MDSerializer *)&v50);
LABEL_49:
  id v50 = &v61;
  std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v63);
  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v75);
  if ((void)v73)
  {
    *((void *)&v73 + 1) = v73;
    operator delete((void *)v73);
  }
  if (SHIBYTE(v72) < 0) {
    operator delete(*((void **)&v71 + 1));
  }
  if (SBYTE7(v71) < 0) {
    operator delete((void *)v70);
  }
  if (SBYTE7(v68) < 0) {
    operator delete(v67[0]);
  }

  return v36;
}

void sub_24F6E99C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  ShaderDebugger::Metadata::MDSerializer::~MDSerializer((ShaderDebugger::Metadata::MDSerializer *)&a28);
  long long __p = &a49;
  std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)&a52);
  llvm::SMDiagnostic::~SMDiagnostic((llvm::SMDiagnostic *)&STACK[0x260]);

  _Unwind_Resume(a1);
}

char **llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 40 * v3;
    do
    {
      if (v2[v4 - 1] < 0) {
        operator delete(*(void **)&v2[v4 - 24]);
      }
      v4 -= 40;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void std::vector<std::unique_ptr<llvm::Module>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    id v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<llvm::Module>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void llvm::function_ref<llvm::Optional<std::string> ()(llvm::StringRef)>::callback_fn<llvm::$_0>(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t std::unique_ptr<llvm::Module>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x253362040]();
    JUMPOUT(0x2533623E0);
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<llvm::Module>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<llvm::Module>::reset[abi:ne180100]((uint64_t *)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t v11 = operator new(0x30uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  void v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v11 = *v21;
LABEL_38:
    *uint64_t v21 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_24F6E9ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_24F6EA00C(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_24F6EA168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6EA590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 48 * a2;
  }
}

unint64_t anonymous namespace'::AverageValue(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (v2 == v3) {
    return 0;
  }
  if ((unint64_t)(v3 - v2) <= 0x17) {
    return *(void *)v2;
  }
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  unint64_t v5 = (unint64_t)(a1[1] - *a1) >> 3;
  unint64_t v6 = (v5 + 2) / 3uLL;
  unsigned int v7 = v5 - v6;
  if (v7 <= (int)v6 + 1) {
    uint64_t v8 = (v6 + 1);
  }
  else {
    uint64_t v8 = v7;
  }
  uint8x8_t v9 = (uint64_t *)(*a1 + 8 * v6);
  unint64_t v10 = (uint64_t)(8 * v8 - 8 * v6) >> 3;
  if (v6 == v8)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 8 * v8 - 8 * v6;
    do
    {
      uint64_t v13 = *v9++;
      v11 += v13;
      v12 -= 8;
    }
    while (v12);
  }
  return (v10 + v11 - 1) / v10;
}

void sub_24F6EABFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 56 * a2;
  }
}

void sub_24F6EBF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::destroy((uint64_t)&a70, (void *)a71);
  _Unwind_Resume(a1);
}

void sub_24F6EC47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6ECE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,uint64_t a27,void *a28,void *a29,uint64_t a30,uint64_t a31,void *a32,void *a33,void *a34)
{
  _Unwind_Resume(a1);
}

void sub_24F6ED21C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6ED424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6ED900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Block_object_dispose((const void *)(v15 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

__n128 __Block_byref_object_copy__85(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__86(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_24F6EDB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_24F6EDF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
  _Block_object_dispose(&a26, 8);

  _Block_object_dispose((const void *)(v32 - 168), 8);
  uint64_t v34 = *(void **)(v32 - 120);
  if (v34)
  {
    *(void *)(v32 - 112) = v34;
    operator delete(v34);
  }

  _Unwind_Resume(a1);
}

void sub_24F6EEE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  std::__tree<DYMTLIABDecodingOp>::destroy((uint64_t)&a67, (void *)a68);
  _Unwind_Resume(a1);
}

void _ZZZ141__DYMTLDebugPlaybackEngineCounterSupport__profileFrameWithCounterListsForProfileInfoAsync_encoderPass_updateStatSampling_setConsistentState__EUb_ENK3__0clEb(uint64_t a1, char a2)
{
  if (*(unsigned char *)(**(void **)a1 + 104)) {
    return;
  }
  id v23 = [**(id **)(a1 + 8) objectForKeyedSubscript:@"perEncoderIndexDrawCallCount"];
  if (!**(unsigned char **)(a1 + 16))
  {
    if ((a2 & 1) == 0) {
      ++**(void **)(a1 + 24);
    }
    uint64_t v4 = [**(id **)(a1 + 32) count];
    while (1)
    {
      while (1)
      {
        unint64_t v5 = **(void **)(a1 + 40);
        if (v5 >= [**(id **)(a1 + 48) count]) {
          goto LABEL_3;
        }
        unint64_t v6 = [**(id **)(a1 + 48) objectAtIndexedSubscript:**(void **)(a1 + 40)];
        uint64_t v7 = [v6 unsignedIntegerValue];

        if (**(void **)(a1 + 24) != v7) {
          goto LABEL_3;
        }
        uint64_t v8 = [NSNumber numberWithUnsignedInteger:v7];
        uint8x8_t v9 = [v23 objectForKeyedSubscript:v8];
        uint64_t v10 = [v9 unsignedIntegerValue];

        if (**(unsigned char **)(a1 + 56)) {
          uint64_t v10 = v10 != 0;
        }
        if (a2) {
          break;
        }
        ++**(void **)(a1 + 24);
        if (!v10) {
          goto LABEL_24;
        }
        uint64_t v11 = objc_opt_new();
        uint64_t v12 = *(void ***)(a1 + 64);
        uint64_t v13 = *v12;
        *uint64_t v12 = (void *)v11;

        [**(id **)(a1 + 72) addObject:**(void **)(a1 + 64)];
LABEL_18:
        for (uint64_t i = 0; i != v10; ++i)
        {
          uint64_t v15 = objc_opt_new();
          for (uint64_t j = v4; j; --j)
            [v15 addObject:&unk_2700F9FF0];
          unint64_t v17 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(**(id **)(a1 + 88), "count") - 1);
          [v15 setObject:v17 atIndexedSubscript:**(void **)(a1 + 80)];

          unint64_t v18 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(**(id **)(a1 + 72), "count") - 1);
          [v15 setObject:v18 atIndexedSubscript:**(void **)(a1 + 96)];

          size_t v19 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(**(id **)(a1 + 64), "count"));
          [v15 setObject:v19 atIndexedSubscript:**(void **)(a1 + 104)];

          [**(id **)(a1 + 64) addObject:v15];
        }
        ++**(void **)(a1 + 40);
        if (a2)
        {
          ++**(void **)(a1 + 24);
          uint64_t v20 = objc_opt_new();
          uint64_t v21 = *(void ***)(a1 + 64);
          unint64_t v22 = *v21;
          *uint64_t v21 = (void *)v20;

          [**(id **)(a1 + 72) addObject:**(void **)(a1 + 64)];
        }
      }
      if (v10) {
        goto LABEL_18;
      }
LABEL_24:
      ++**(void **)(a1 + 40);
    }
  }
LABEL_3:
}

void sub_24F6EF4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6EF560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6EF5C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6EF7FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6EF8D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6EF950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6EF9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    float v14 = &v12[48 * v8];
    uint64_t v15 = &v12[48 * v11];
    size_t v16 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v14, v16);
    unint64_t v17 = &v14[v16];
    size_t v19 = (char *)*a1;
    unint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 3);
        long long v21 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v21;
        *((_OWORD *)v14 - 3) = v20;
        v14 -= 48;
        v18 -= 48;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

void *std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 80 * ((80 * a2 - 80) / 0x50) + 80;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_24F6EFD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

void std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 10;
        std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,std::vector<unsigned long long>,std::vector<unsigned long long>>>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  BOOL v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> const*>,std::__wrap_iter<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> const*>,std::back_insert_iterator<std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>,0>(long long *a1, long long *a2, void **a3)
{
  BOOL v3 = a1;
  unint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>::operator=[abi:ne180100](&v6, v3);
    v3 += 3;
  }
  while (v3 != v4);
  return v4;
}

void ***std::back_insert_iterator<std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>::operator=[abi:ne180100](void ***a1, long long *a2)
{
  uint64_t v4 = *a1;
  size_t v5 = (*a1)[1];
  unint64_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (unsigned char *)*v4) >> 4);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x555555555555555) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)*v4) >> 4);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x555555555555555;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>(v7, v16);
    }
    else {
      unint64_t v17 = 0;
    }
    unint64_t v18 = &v17[48 * v13];
    size_t v19 = &v17[48 * v16];
    long long v20 = *a2;
    long long v21 = a2[2];
    *((_OWORD *)v18 + 1) = a2[1];
    *((_OWORD *)v18 + 2) = v21;
    *(_OWORD *)unint64_t v18 = v20;
    uint64_t v12 = v18 + 48;
    id v23 = (char *)*v4;
    unint64_t v22 = (char *)v4[1];
    if (v22 != *v4)
    {
      do
      {
        long long v24 = *((_OWORD *)v22 - 3);
        long long v25 = *((_OWORD *)v22 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v22 - 2);
        *((_OWORD *)v18 - 1) = v25;
        *((_OWORD *)v18 - 3) = v24;
        v18 -= 48;
        v22 -= 48;
      }
      while (v22 != v23);
      unint64_t v22 = (char *)*v4;
    }
    *uint64_t v4 = v18;
    v4[1] = v12;
    v4[2] = v19;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    long long v10 = *a2;
    long long v11 = a2[2];
    v5[1] = a2[1];
    _OWORD v5[2] = v11;
    *size_t v5 = v10;
    uint64_t v12 = v5 + 3;
  }
  v4[1] = v12;
  return a1;
}

void std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  size_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 56 * ((56 * a2 - 56) / 0x38) + 56;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v14 = &v12[56 * v8];
    unint64_t v15 = &v12[56 * v11];
    size_t v16 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v14, v16);
    unint64_t v17 = &v14[v16];
    size_t v19 = (char *)*a1;
    unint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 56);
        long long v21 = *(_OWORD *)(v18 - 40);
        long long v22 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v22;
        *(_OWORD *)(v14 - 40) = v21;
        *(_OWORD *)(v14 - 56) = v20;
        v14 -= 56;
        v18 -= 56;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,false>(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = (uint64_t *)result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 4);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          __n128 result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v25, a2 - 6, v11);
          if (result) {
            __n128 result = (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v11, a2 - 6);
          }
          break;
        case 3uLL:
          __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v11, v11 + 6, a2 - 6);
          break;
        case 4uLL:
          __n128 result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v11, v11 + 6, v11 + 12, a2 - 6);
          break;
        case 5uLL:
          __n128 result = (uint64_t)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v11, v11 + 6, v11 + 12, v11 + 18, a2 - 6);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 1151)
    {
      if (a5) {
        return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((BOOL)v11, a2);
      }
      else {
        return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((BOOL)v11, a2);
      }
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[6 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x1801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v11, &v11[6 * (v15 >> 1)], a2 - 6);
      uint64_t v18 = 3 * v16;
      size_t v19 = &v11[6 * v16 - 6];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v11 + 6, v19, a2 - 12);
      long long v20 = v11 + 12;
      long long v21 = &v11[2 * v18 + 6];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v20, v21, a2 - 18);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v19, v17, v21);
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v10, v17);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(&v11[6 * (v15 >> 1)], v11, a2 - 6);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v26, v10 - 6, v10))
    {
      __n128 result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::__less<void,void> &>(v10, a2);
      unint64_t v11 = (uint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    long long v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::__less<void,void> &>(v10, a2);
    if ((v23 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v10, v22);
    unint64_t v11 = v22 + 6;
    __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v22 + 6, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v22;
      if (v24) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v24)
    {
LABEL_17:
      __n128 result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,false>(v10, v22, a3, -v13, a5 & 1);
      unint64_t v11 = v22 + 6;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (v11 != a2) {
    return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v11, a2, a2, a3);
  }
  return result;
}

BOOL std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(BOOL result, _OWORD *a2)
{
  if ((_OWORD *)result != a2)
  {
    *(void *)&v16[49] = v2;
    uint64_t v17 = v3;
    uint64_t v5 = result;
    char v6 = (void *)(result + 48);
    if ((_OWORD *)(result + 48) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (_OWORD *)result;
      do
      {
        unint64_t v9 = v8;
        uint64_t v8 = v6;
        __n128 result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v14, v6, v9);
        if (result)
        {
          long long v10 = v8[1];
          long long v14 = *v8;
          *(_OWORD *)unint64_t v15 = v10;
          *(_OWORD *)&v15[16] = v8[2];
          uint64_t v11 = v7;
          while (1)
          {
            uint64_t v12 = v5 + v11;
            *(_OWORD *)(v12 + 48) = *(_OWORD *)(v5 + v11);
            *(void *)(v12 + 64) = *(void *)(v5 + v11 + 16);
            *(_OWORD *)(v12 + 72) = *(_OWORD *)(v5 + v11 + 24);
            *(void *)(v12 + 88) = *(void *)(v5 + v11 + 40);
            if (!v11) {
              break;
            }
            v11 -= 48;
            __n128 result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)v16, &v14, (void *)(v11 + v5));
            if (!result)
            {
              uint64_t v13 = v5 + v11 + 48;
              goto LABEL_10;
            }
          }
          uint64_t v13 = v5;
LABEL_10:
          *(_OWORD *)uint64_t v13 = v14;
          *(void *)(v13 + 16) = *(void *)v15;
          *(_OWORD *)(v13 + 24) = *(_OWORD *)&v15[8];
          *(void *)(v13 + 40) = *(void *)&v15[24];
        }
        char v6 = v8 + 3;
        v7 += 48;
      }
      while (v8 + 3 != a2);
    }
  }
  return result;
}

BOOL std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(BOOL result, _OWORD *a2)
{
  if ((_OWORD *)result != a2)
  {
    *(void *)&v13[33] = v2;
    uint64_t v14 = v3;
    uint64_t v5 = (_OWORD *)result;
    char v6 = (void *)(result + 48);
    if ((_OWORD *)(result + 48) != a2)
    {
      uint64_t v7 = result - 48;
      do
      {
        uint64_t v8 = v5;
        uint64_t v5 = v6;
        __n128 result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v11, v6, v8);
        if (result)
        {
          long long v9 = v5[1];
          long long v11 = *v5;
          *(_OWORD *)uint64_t v12 = v9;
          *(_OWORD *)&v12[16] = v5[2];
          uint64_t v10 = v7;
          do
          {
            *(_OWORD *)(v10 + 96) = *(_OWORD *)(v10 + 48);
            *(void *)(v10 + 112) = *(void *)(v10 + 64);
            *(_OWORD *)(v10 + 120) = *(_OWORD *)(v10 + 72);
            *(void *)(v10 + 136) = *(void *)(v10 + 88);
            __n128 result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)v13, &v11, (void *)v10);
            v10 -= 48;
          }
          while (result);
          *(_OWORD *)(v10 + 96) = v11;
          *(void *)(v10 + 112) = *(void *)v12;
          *(_OWORD *)(v10 + 120) = *(_OWORD *)&v12[8];
          *(void *)(v10 + 136) = *(void *)&v12[24];
        }
        char v6 = v5 + 3;
        v7 += 48;
      }
      while (v5 + 3 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v9, a2, a1))
  {
    uint64_t result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v10, a3, a2);
    if (!result) {
      return result;
    }
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a2, a3);
    if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v11, a2, a1))return 1; {
    uint64_t v7 = a1;
    }
    uint64_t v8 = a2;
    goto LABEL_9;
  }
  if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, a3, a2))
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a2);
    if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, a3, a2))return 1; {
    uint64_t v7 = a2;
    }
    uint64_t v8 = a3;
LABEL_9:
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v7, v8);
    return 2;
  }
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a3);
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  long long v4 = *((_OWORD *)a1 + 1);
  long long v9 = *(_OWORD *)a1;
  long long v10 = v4;
  long long v11 = *((_OWORD *)a1 + 2);
  if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, &v9, a2 - 6))
  {
    uint64_t v5 = a1;
    do
      v5 += 6;
    while (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, &v9, v5));
  }
  else
  {
    char v6 = a1 + 6;
    do
    {
      uint64_t v5 = v6;
      if (v6 >= v2) {
        break;
      }
      BOOL v7 = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, &v9, v6);
      char v6 = v5 + 6;
    }
    while (!v7);
  }
  if (v5 < v2)
  {
    do
      v2 -= 6;
    while (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, &v9, v2));
  }
  while (v5 < v2)
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v5, v2);
    do
      v5 += 6;
    while (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, &v9, v5));
    do
      v2 -= 6;
    while (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, &v9, v2));
  }
  if (v5 - 6 != a1)
  {
    *a1 = *(v5 - 6);
    a1[1] = *(v5 - 5);
    a1[2] = *(v5 - 4);
    a1[3] = *(v5 - 3);
    a1[4] = *(v5 - 2);
    a1[5] = *(v5 - 1);
  }
  *((_OWORD *)v5 - 3) = v9;
  *((_OWORD *)v5 - 2) = v10;
  *((_OWORD *)v5 - 1) = v11;
  return v5;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = 0;
  long long v5 = *((_OWORD *)a1 + 1);
  long long v10 = *(_OWORD *)a1;
  long long v11 = v5;
  long long v12 = *((_OWORD *)a1 + 2);
  do
    v4 += 6;
  while (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, &a1[v4], &v10));
  unint64_t v6 = (unint64_t)&a1[v4];
  if (v4 == 6)
  {
    do
    {
      if (v6 >= (unint64_t)a2) {
        break;
      }
      a2 -= 6;
    }
    while (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, a2, &v10));
  }
  else
  {
    do
      a2 -= 6;
    while (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, a2, &v10));
  }
  BOOL v7 = &a1[v4];
  if (v6 < (unint64_t)a2)
  {
    uint64_t v8 = a2;
    do
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v7, v8);
      do
        v7 += 6;
      while (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, v7, &v10));
      do
        v8 -= 6;
      while (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, v8, &v10));
    }
    while (v7 < v8);
  }
  uint64_t result = v7 - 6;
  if (v7 - 6 != a1)
  {
    *a1 = *(v7 - 6);
    a1[1] = *(v7 - 5);
    a1[2] = *(v7 - 4);
    a1[3] = *(v7 - 3);
    a1[4] = *(v7 - 2);
    a1[5] = *(v7 - 1);
  }
  *((_OWORD *)v7 - 3) = v10;
  *((_OWORD *)v7 - 2) = v11;
  *((_OWORD *)v7 - 1) = v12;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = a2 - 6;
      if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v15, a2 - 6, a1))
      {
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, v6);
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 6, a2 - 6);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 6, a1 + 12, a2 - 6);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 6, a1 + 12, a1 + 18, a2 - 6);
      return 1;
    default:
      BOOL v7 = a1 + 12;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 6, a1 + 12);
      uint64_t v8 = a1 + 18;
      if (a1 + 18 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v15, v8, v7))
    {
      long long v11 = *((_OWORD *)v8 + 1);
      long long v15 = *(_OWORD *)v8;
      *(_OWORD *)unint64_t v16 = v11;
      *(_OWORD *)&v16[16] = *((_OWORD *)v8 + 2);
      uint64_t v12 = v9;
      while (1)
      {
        char v13 = (char *)a1 + v12;
        *((_OWORD *)v13 + 9) = *(_OWORD *)((char *)a1 + v12 + 96);
        *((void *)v13 + 20) = *(uint64_t *)((char *)a1 + v12 + 112);
        *(_OWORD *)(v13 + 168) = *(_OWORD *)((char *)a1 + v12 + 120);
        *((void *)v13 + 23) = *(uint64_t *)((char *)a1 + v12 + 136);
        if (v12 == -96) {
          break;
        }
        v12 -= 48;
        if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v17, &v15, (void *)v13 + 6))
        {
          uint64_t v14 = (uint64_t)a1 + v12 + 144;
          goto LABEL_12;
        }
      }
      uint64_t v14 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v14 = v15;
      *(void *)(v14 + 16) = *(void *)v16;
      *(_OWORD *)(v14 + 24) = *(_OWORD *)&v16[8];
      *(void *)(v14 + 40) = *(void *)&v16[24];
      if (++v10 == 8) {
        return v8 + 6 == a2;
      }
    }
    BOOL v7 = v8;
    v9 += 48;
    v8 += 6;
    if (v8 == a2) {
      return 1;
    }
  }
}

BOOL std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, void *a2, void *a3)
{
  if (*a2 < *a3) {
    return 1;
  }
  if (*a3 < *a2) {
    return 0;
  }
  unint64_t v3 = a2[1];
  unint64_t v4 = a3[1];
  if (v3 < v4) {
    return 1;
  }
  return v4 >= v3
      && std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v6, a2, a3);
}

BOOL std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v3 = a2[2];
  unint64_t v4 = a3[2];
  if (v3 < v4) {
    return 1;
  }
  if (v4 < v3) {
    return 0;
  }
  unint64_t v5 = a2[3];
  unint64_t v6 = a3[3];
  if (v5 < v6) {
    return 1;
  }
  if (v6 < v5) {
    return 0;
  }
  unint64_t v7 = a2[4];
  unint64_t v8 = a3[4];
  if (v7 < v8) {
    return 1;
  }
  return v8 >= v7 && a2[5] < a3[5];
}

uint64_t *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t *result = *a2;
  *a2 = v2;
  uint64_t v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  uint64_t v4 = result[2];
  result[2] = a2[2];
  a2[2] = v4;
  uint64_t v5 = result[3];
  result[3] = a2[3];
  a2[3] = v5;
  uint64_t v6 = result[4];
  result[4] = a2[4];
  a2[4] = v6;
  uint64_t v7 = result[5];
  result[5] = a2[5];
  a2[5] = v7;
  return result;
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a2, a3);
  BOOL result = (uint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v9, a4, a3);
  if (result)
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a3, a4);
    BOOL result = (uint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v10, a3, a2);
    if (result)
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a2, a3);
      BOOL result = (uint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v11, a2, a1);
      if (result) {
        return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a2);
      }
    }
  }
  return result;
}

uint64_t *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a2, a3, a4);
  BOOL result = (uint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v11, a5, a4);
  if (result)
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a4, a5);
    BOOL result = (uint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, a4, a3);
    if (result)
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a3, a4);
      BOOL result = (uint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, a3, a2);
      if (result)
      {
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a2, a3);
        BOOL result = (uint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v14, a2, a1);
        if (result) {
          return std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a2);
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 48;
    if ((char *)a2 - (char *)a1 >= 49)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      char v12 = &a1[6 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((BOOL)a1, a4, v9, v12);
        v12 -= 6;
        --v11;
      }
      while (v11);
    }
    char v13 = a2;
    if (a2 != a3)
    {
      char v14 = a2;
      do
      {
        if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v27, v14, a1))
        {
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v14, a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((BOOL)a1, a4, v9, a1);
        }
        v14 += 6;
      }
      while (v14 != a3);
      char v13 = a3;
    }
    if (v8 < 49)
    {
      return v13;
    }
    else
    {
      char v26 = v13;
      int64_t v15 = v8 / 0x30uLL;
      unint64_t v16 = a2 - 6;
      do
      {
        uint64_t v17 = *a1;
        uint64_t v18 = a1[1];
        uint64_t v20 = a1[2];
        uint64_t v19 = a1[3];
        uint64_t v22 = a1[4];
        uint64_t v21 = a1[5];
        char v23 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a4, v15);
        if (v16 == v23)
        {
          uint64_t *v23 = v17;
          v23[1] = v18;
          v23[2] = v20;
          v23[3] = v19;
          v23[4] = v22;
          v23[5] = v21;
        }
        else
        {
          uint64_t *v23 = *v16;
          v23[1] = v16[1];
          v23[2] = v16[2];
          v23[3] = v16[3];
          v23[4] = v16[4];
          v23[5] = v16[5];
          *unint64_t v16 = v17;
          v16[1] = v18;
          v16[2] = v20;
          v16[3] = v19;
          v16[4] = v22;
          v16[5] = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((uint64_t)a1, (uint64_t)(v23 + 6), a4, 0xAAAAAAAAAAAAAAABLL * (((char *)(v23 + 6) - (char *)a1) >> 4));
        }
        v16 -= 6;
      }
      while (v15-- > 2);
      return v26;
    }
  }
  return a3;
}

BOOL std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(BOOL result, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    uint64_t v7 = a4;
    BOOL v8 = result;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 4)))
    {
      uint64_t v11 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 4)) | 1;
      char v12 = (void *)(result + 48 * v11);
      uint64_t v13 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 4) + 2;
      if (v13 < a3
        && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v18, (void *)(result + 48 * v11), v12 + 6))
      {
        v12 += 6;
        uint64_t v11 = v13;
      }
      BOOL result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v18, v12, v7);
      if (!result)
      {
        long long v14 = v7[1];
        long long v18 = *v7;
        long long v19 = v14;
        long long v20 = v7[2];
        do
        {
          int64_t v15 = v12;
          *(void *)uint64_t v7 = *v12;
          *((void *)v7 + 1) = v12[1];
          *((void *)v7 + 2) = v12[2];
          *((void *)v7 + 3) = v12[3];
          *((void *)v7 + 4) = v12[4];
          *((void *)v7 + 5) = v12[5];
          if (v9 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          char v12 = (void *)(v8 + 48 * v16);
          uint64_t v17 = 2 * v11 + 2;
          if (v17 < a3
            && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v21, (void *)(v8 + 48 * v16), v12 + 6))
          {
            v12 += 6;
            uint64_t v16 = v17;
          }
          BOOL result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v21, v12, &v18);
          uint64_t v7 = v15;
          uint64_t v11 = v16;
        }
        while (!result);
        *int64_t v15 = v18;
        v15[1] = v19;
        v15[2] = v20;
      }
    }
  }
  return result;
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    BOOL v8 = &a1[6 * v5 + 6];
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 < a3
      && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, &a1[6 * v5 + 6], &a1[6 * v5 + 12]))
    {
      v8 += 6;
      uint64_t v9 = v10;
    }
    *a1 = *v8;
    a1[1] = v8[1];
    a1[2] = v8[2];
    a1[3] = v8[3];
    a1[4] = v8[4];
    a1[5] = v8[5];
    a1 = v8;
    uint64_t v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    *(void *)&v17[49] = v4;
    uint64_t v18 = v5;
    unint64_t v7 = (unint64_t)(a4 - 2) >> 1;
    BOOL v8 = (void *)(a1 + 48 * v7);
    uint64_t v9 = (_OWORD *)(a2 - 48);
    if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v14, v8, (void *)(a2 - 48)))
    {
      long long v11 = v9[1];
      long long v14 = *v9;
      long long v15 = v11;
      *(_OWORD *)uint64_t v16 = v9[2];
      do
      {
        char v12 = v8;
        *(void *)uint64_t v9 = *v8;
        *((void *)v9 + 1) = v8[1];
        *((void *)v9 + 2) = v8[2];
        *((void *)v9 + 3) = v8[3];
        *((void *)v9 + 4) = v8[4];
        *((void *)v9 + 5) = v8[5];
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        BOOL v8 = (void *)(a1 + 48 * v7);
        uint64_t v9 = v12;
      }
      while (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)v17, v8, &v14));
      long long v13 = v15;
      *char v12 = v14;
      v12[1] = v13;
      double result = v16[0];
      v12[2] = *(_OWORD *)v16;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,false>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (uint64_t *)result;
LABEL_2:
  long long v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * (((char *)a2 - (char *)v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v28 = *(a2 - 7);
          char v27 = (uint64_t *)(a2 - 7);
          unint64_t v26 = v28;
          if (v28 < *v11
            || *v11 >= v26
            && (double result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v29, v27, v11), result))
          {
            double result = (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v11, v27);
          }
          break;
        case 3uLL:
          double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v11, v11 + 7, (uint64_t *)a2 - 7);
          break;
        case 4uLL:
          double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v11, v11 + 7, v11 + 14, (uint64_t *)a2 - 7);
          break;
        case 5uLL:
          double result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v11, v11 + 7, v11 + 14, v11 + 21, (uint64_t *)a2 - 7);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 1343)
    {
      if (a5) {
        return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((unint64_t *)v11, a2);
      }
      else {
        return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((uint64_t)v11, (uint64_t)a2);
      }
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[7 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x1C01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v11, &v11[7 * (v15 >> 1)], (uint64_t *)a2 - 7);
      uint64_t v18 = 7 * v16;
      long long v19 = &v11[7 * v16 - 7];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v11 + 7, v19, (uint64_t *)a2 - 14);
      long long v20 = v11 + 14;
      char v21 = &v11[v18 + 7];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v20, v21, (uint64_t *)a2 - 21);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v19, v17, v21);
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v10, v17);
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(&v11[7 * (v15 >> 1)], v11, (uint64_t *)a2 - 7);
      if (a5) {
        goto LABEL_16;
      }
    }
    unint64_t v22 = *(v10 - 7);
    if (v22 >= *v10
      && (*v10 < v22
       || !std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v30, v10 - 7, v10)))
    {
      double result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::__less<void,void> &>(v10, (uint64_t *)a2);
      long long v11 = (uint64_t *)result;
      goto LABEL_21;
    }
LABEL_16:
    uint64_t v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::__less<void,void> &>(v10, (uint64_t *)a2);
    if ((v24 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v10, v23);
    long long v11 = v23 + 7;
    double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v23 + 7, (uint64_t *)a2);
    if (result)
    {
      a4 = -v13;
      a2 = (unint64_t *)v23;
      if (v25) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v25)
    {
LABEL_19:
      double result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,false>(v10, v23, a3, -v13, a5 & 1);
      long long v11 = v23 + 7;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (v11 != (uint64_t *)a2) {
    return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(v11, (uint64_t *)a2, (uint64_t *)a2, a3);
  }
  return result;
}

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(unint64_t *result, unint64_t *a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v23 = v2;
  uint64_t v24 = v3;
  char v5 = result;
  char v6 = (long long *)(result + 7);
  if (result + 7 == a2) {
    return result;
  }
  uint64_t v7 = 0;
  BOOL v8 = (long long *)result;
  do
  {
    uint64_t v9 = (unint64_t *)v8;
    BOOL v8 = v6;
    unint64_t v10 = v9[7];
    if (v10 >= *v9)
    {
      if (*v9 < v10) {
        goto LABEL_19;
      }
      double result = (unint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v18, v8, v9);
      if (!result) {
        goto LABEL_19;
      }
    }
    long long v11 = v8[1];
    long long v18 = *v8;
    long long v19 = v11;
    long long v20 = v8[2];
    unint64_t v21 = *((void *)v8 + 6);
    unint64_t v12 = v9[1];
    v9[7] = *v9;
    *((void *)v8 + 1) = v12;
    *((void *)v8 + 2) = v9[2];
    *((void *)v8 + 3) = v9[3];
    *((void *)v8 + 4) = v9[4];
    *((void *)v8 + 5) = v9[5];
    *((void *)v8 + 6) = v9[6];
    uint64_t v13 = v5;
    if (v9 == v5) {
      goto LABEL_18;
    }
    uint64_t v14 = v7;
    while (1)
    {
      unint64_t v15 = (char *)v5 + v14;
      unint64_t v16 = *(unint64_t *)((char *)v5 + v14 - 56);
      if ((unint64_t)v18 >= v16) {
        break;
      }
LABEL_11:
      v9 -= 7;
      *(void *)unint64_t v15 = v16;
      long long v17 = *((_OWORD *)v15 - 2);
      *(_OWORD *)(v15 + 8) = *((_OWORD *)v15 - 3);
      *(_OWORD *)(v15 + 24) = v17;
      *(_OWORD *)(v15 + 40) = *((_OWORD *)v15 - 1);
      v14 -= 56;
      if (!v14)
      {
        uint64_t v13 = v5;
        goto LABEL_18;
      }
    }
    if (v16 < (unint64_t)v18)
    {
      uint64_t v13 = v9;
      goto LABEL_18;
    }
    double result = (unint64_t *)std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v22, &v18, (unint64_t *)((char *)v5 + v14 - 56));
    if (result)
    {
      unint64_t v16 = *(unint64_t *)((char *)v5 + v14 - 56);
      goto LABEL_11;
    }
    uint64_t v13 = (unint64_t *)((char *)v5 + v14);
LABEL_18:
    *(_OWORD *)uint64_t v13 = v18;
    *((_OWORD *)v13 + 1) = v19;
    *((_OWORD *)v13 + 2) = v20;
    v13[6] = v21;
LABEL_19:
    char v6 = (long long *)((char *)v8 + 56);
    v7 += 56;
  }
  while ((unint64_t *)((char *)v8 + 56) != a2);
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    *(void *)&v17[33] = v2;
    uint64_t v18 = v3;
    uint64_t v5 = result;
    uint64_t v6 = result + 56;
    if (result + 56 != a2)
    {
      uint64_t v7 = (void *)(result + 104);
      do
      {
        BOOL v8 = (unint64_t *)v5;
        uint64_t v5 = v6;
        unint64_t v9 = v8[7];
        if (v9 < *v8
          || *v8 >= v9
          && (double result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)v14, (void *)v5, v8), result))
        {
          long long v10 = *(_OWORD *)(v5 + 16);
          *(_OWORD *)uint64_t v14 = *(_OWORD *)v5;
          *(_OWORD *)&v14[16] = v10;
          long long v15 = *(_OWORD *)(v5 + 32);
          uint64_t v16 = *(void *)(v5 + 48);
          for (uint64_t i = v7; ; i -= 7)
          {
            *(i - 6) = *(i - 13);
            *(_OWORD *)(i - 5) = *((_OWORD *)i - 6);
            *(i - 3) = *(i - 10);
            *((_OWORD *)i - 1) = *(_OWORD *)(i - 9);
            void *i = *(i - 7);
            unint64_t v12 = *(i - 20);
            uint64_t v13 = *(void *)v14;
            if (*(void *)v14 >= v12)
            {
              if (v12 < *(void *)v14) {
                goto LABEL_14;
              }
              double result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)v17, v14, i - 20);
              if (!result) {
                break;
              }
            }
          }
          uint64_t v13 = *(void *)v14;
LABEL_14:
          *(i - 13) = v13;
          *((_OWORD *)i - 6) = *(_OWORD *)&v14[8];
          *(i - 10) = *(void *)&v14[24];
          *(_OWORD *)(i - 9) = v15;
          *(i - 7) = v16;
        }
        uint64_t v6 = v5 + 56;
        v7 += 7;
      }
      while (v5 + 56 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = *a2;
  if (*a2 < (unint64_t)*a1
    || *a1 >= v6
    && (BOOL v7 = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v11, a2, a1), v6 = *a2, v7))
  {
    if (*a3 < v6
      || v6 >= *a3
      && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v14, a3, a2))
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a3);
    }
    else
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a2);
      if (*a3 < (unint64_t)*a2
        || *a2 >= (unint64_t)*a3
        && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v15, a3, a2))
      {
        unint64_t v9 = a2;
        long long v10 = a3;
        goto LABEL_18;
      }
    }
    return 1;
  }
  if (*a3 < v6)
  {
LABEL_8:
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a2, a3);
    if (*a2 < (unint64_t)*a1
      || *a1 >= (unint64_t)*a2
      && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, a2, a1))
    {
      unint64_t v9 = a1;
      long long v10 = a2;
LABEL_18:
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v9, v10);
      return 2;
    }
    return 1;
  }
  if (v6 < *a3) {
    return 0;
  }
  uint64_t result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, a3, a2);
  if (result) {
    goto LABEL_8;
  }
  return result;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  long long v4 = *((_OWORD *)a1 + 1);
  long long v19 = *(_OWORD *)a1;
  long long v20 = v4;
  long long v21 = *((_OWORD *)a1 + 2);
  uint64_t v22 = a1[6];
  unint64_t v5 = *(a2 - 7);
  unint64_t v6 = v19;
  if ((unint64_t)v19 >= v5)
  {
    if (v5 < (unint64_t)v19
      || !std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v23, &v19, a2 - 7))
    {
      for (uint64_t i = a1 + 7;
            i < v2
         && (unint64_t)v19 >= *i
         && (*i < (unint64_t)v19
          || !std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v23, &v19, i));
      goto LABEL_16;
    }
    unint64_t v6 = v19;
  }
  uint64_t i = a1;
  while (1)
  {
    unint64_t v9 = i[7];
    i += 7;
    unint64_t v8 = v9;
    if (v6 < v9) {
      break;
    }
    if (v8 >= v6)
    {
      if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v23, &v19, i))
      {
        break;
      }
      unint64_t v6 = v19;
    }
  }
LABEL_16:
  if (i < v2)
  {
    do
    {
      do
      {
        unint64_t v11 = *(v2 - 7);
        v2 -= 7;
        unint64_t v10 = v11;
      }
      while ((unint64_t)v19 < v11);
    }
    while (v10 >= (unint64_t)v19
         && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v23, &v19, v2));
  }
  while (i < v2)
  {
    std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](i, v2);
    uint64_t v13 = i[7];
    i += 7;
    unint64_t v12 = v13;
    unint64_t v14 = v19;
    while (v14 >= v12)
    {
      if (v12 >= v14)
      {
        if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v23, &v19, i))
        {
          goto LABEL_27;
        }
        unint64_t v14 = v19;
      }
      uint64_t v15 = i[7];
      i += 7;
      unint64_t v12 = v15;
    }
    do
    {
      do
      {
LABEL_27:
        unint64_t v17 = *(v2 - 7);
        v2 -= 7;
        unint64_t v16 = v17;
      }
      while ((unint64_t)v19 < v17);
    }
    while (v16 >= (unint64_t)v19
         && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v23, &v19, v2));
  }
  if (i - 7 != a1)
  {
    *a1 = *(i - 7);
    a1[1] = *(i - 6);
    a1[2] = *(i - 5);
    a1[3] = *(i - 4);
    a1[4] = *(i - 3);
    a1[5] = *(i - 2);
    a1[6] = *(i - 1);
  }
  *(_OWORD *)(i - 7) = v19;
  *(_OWORD *)(i - 5) = v20;
  *(_OWORD *)(i - 3) = v21;
  *(i - 1) = v22;
  return i;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::__less<void,void> &>(uint64_t *a1, uint64_t *a2)
{
  long long v4 = *((_OWORD *)a1 + 1);
  long long v23 = *(_OWORD *)a1;
  long long v24 = v4;
  long long v25 = *((_OWORD *)a1 + 2);
  uint64_t v26 = a1[6];
  for (uint64_t i = 7; ; i += 7)
  {
    unint64_t v6 = a1[i];
    if (v6 >= (unint64_t)v23
      && ((unint64_t)v23 < v6
       || !std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v27, &a1[i], &v23)))
    {
      break;
    }
  }
  unint64_t v7 = (unint64_t)&a1[i];
  if (i == 7)
  {
LABEL_18:
    if (v7 < (unint64_t)a2)
    {
      do
      {
        unint64_t v13 = *(a2 - 7);
        a2 -= 7;
        unint64_t v12 = v13;
        if (v13 < (unint64_t)v23) {
          break;
        }
        if ((unint64_t)v23 < v12) {
          goto LABEL_18;
        }
        BOOL v14 = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v27, a2, &v23);
        if (v7 >= (unint64_t)a2) {
          break;
        }
      }
      while (!v14);
    }
  }
  else
  {
    unint64_t v9 = *(a2 - 7);
    a2 -= 7;
    unint64_t v8 = v9;
    unint64_t v10 = v23;
    while (v8 >= v10)
    {
      if (v10 >= v8)
      {
        if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v27, a2, &v23))
        {
          break;
        }
        unint64_t v10 = v23;
      }
      unint64_t v11 = *(a2 - 7);
      a2 -= 7;
      unint64_t v8 = v11;
    }
  }
  uint64_t v15 = &a1[i];
  if (v7 < (unint64_t)a2)
  {
    unint64_t v16 = a2;
    do
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v15, v16);
      while (1)
      {
        do
        {
          unint64_t v18 = v15[7];
          v15 += 7;
          unint64_t v17 = v18;
          unint64_t v19 = v23;
        }
        while (v18 < (unint64_t)v23);
        if ((unint64_t)v23 < v17) {
          break;
        }
        if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v27, v15, &v23))goto LABEL_25; {
      }
        }
      do
      {
LABEL_26:
        unint64_t v21 = *(v16 - 7);
        v16 -= 7;
        unint64_t v20 = v21;
        if (v21 < v19) {
          goto LABEL_29;
        }
      }
      while (v19 < v20);
      if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v27, v16, &v23))
      {
LABEL_25:
        unint64_t v19 = v23;
        goto LABEL_26;
      }
LABEL_29:
      ;
    }
    while (v15 < v16);
  }
  uint64_t result = v15 - 7;
  if (v15 - 7 != a1)
  {
    *a1 = *(v15 - 7);
    a1[1] = *(v15 - 6);
    a1[2] = *(v15 - 5);
    a1[3] = *(v15 - 4);
    a1[4] = *(v15 - 3);
    a1[5] = *(v15 - 2);
    a1[6] = *(v15 - 1);
  }
  *(_OWORD *)(v15 - 7) = v23;
  *(_OWORD *)(v15 - 5) = v24;
  *(_OWORD *)(v15 - 3) = v25;
  *(v15 - 1) = v26;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v7 = a2 - 7;
      unint64_t v6 = *(a2 - 7);
      if (v6 < *a1) {
        goto LABEL_5;
      }
      if (*a1 >= v6)
      {
        if (!std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v19, a2 - 7, a1))return 1; {
LABEL_5:
        }
        std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, v7);
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 7, a2 - 7);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 7, a1 + 14, a2 - 7);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 7, a1 + 14, a1 + 21, a2 - 7);
      return 1;
    default:
      unint64_t v8 = a1 + 14;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a1 + 7, a1 + 14);
      unint64_t v9 = a1 + 21;
      if (a1 + 21 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  do
  {
    if (*v9 >= (unint64_t)*v8
      && (*v8 < (unint64_t)*v9
       || !std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v19, v9, v8)))
    {
      goto LABEL_22;
    }
    uint64_t v22 = v9[6];
    long long v12 = *((_OWORD *)v9 + 2);
    long long v13 = *(_OWORD *)v9;
    long long v20 = *((_OWORD *)v9 + 1);
    long long v21 = v12;
    long long v19 = v13;
    *unint64_t v9 = *v8;
    v9[1] = v8[1];
    v9[2] = v8[2];
    void v9[3] = v8[3];
    v9[4] = v8[4];
    v9[5] = v8[5];
    v9[6] = v8[6];
    uint64_t v14 = (uint64_t)a1;
    if (v8 == a1) {
      goto LABEL_21;
    }
    uint64_t v15 = v10;
    while (1)
    {
      unint64_t v16 = (char *)a1 + v15;
      unint64_t v17 = *(uint64_t *)((char *)a1 + v15 + 56);
      if ((unint64_t)v19 >= v17) {
        break;
      }
LABEL_17:
      v8 -= 7;
      *((void *)v16 + 14) = v17;
      long long v18 = *((_OWORD *)v16 + 5);
      *(_OWORD *)(v16 + 120) = *((_OWORD *)v16 + 4);
      *(_OWORD *)(v16 + 136) = v18;
      *(_OWORD *)(v16 + 152) = *((_OWORD *)v16 + 6);
      v15 -= 56;
      if (v15 == -112)
      {
        uint64_t v14 = (uint64_t)a1;
        goto LABEL_21;
      }
    }
    if (v17 < (unint64_t)v19)
    {
      uint64_t v14 = (uint64_t)v8;
      goto LABEL_21;
    }
    if (std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v23, &v19, (uint64_t *)((char *)a1 + v15 + 56)))
    {
      unint64_t v17 = *(uint64_t *)((char *)a1 + v15 + 56);
      goto LABEL_17;
    }
    uint64_t v14 = (uint64_t)a1 + v15 + 112;
LABEL_21:
    *(_OWORD *)uint64_t v14 = v19;
    *(_OWORD *)(v14 + 16) = v20;
    *(_OWORD *)(v14 + 32) = v21;
    *(void *)(v14 + 48) = v22;
    if (++v11 == 8) {
      return v9 + 7 == a2;
    }
LABEL_22:
    unint64_t v8 = v9;
    v10 += 56;
    v9 += 7;
  }
  while (v9 != a2);
  return 1;
}

BOOL std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v3 = a2[1];
  unint64_t v4 = a3[1];
  if (v3 < v4) {
    return 1;
  }
  if (v4 < v3) {
    return 0;
  }
  unint64_t v5 = a2[2];
  unint64_t v6 = a3[2];
  if (v5 < v6) {
    return 1;
  }
  return v6 >= v5
      && std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v8, a2, a3);
}

BOOL std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v3 = a2[3];
  unint64_t v4 = a3[3];
  if (v3 < v4) {
    return 1;
  }
  if (v4 < v3) {
    return 0;
  }
  unint64_t v5 = a2[4];
  unint64_t v6 = a3[4];
  if (v5 < v6) {
    return 1;
  }
  if (v6 < v5) {
    return 0;
  }
  unint64_t v7 = a2[5];
  unint64_t v8 = a3[5];
  if (v7 < v8) {
    return 1;
  }
  return v8 >= v7 && a2[6] < a3[6];
}

uint64_t *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t *result = *a2;
  *a2 = v2;
  uint64_t v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  uint64_t v4 = result[2];
  result[2] = a2[2];
  a2[2] = v4;
  uint64_t v5 = result[3];
  result[3] = a2[3];
  a2[3] = v5;
  uint64_t v6 = result[4];
  result[4] = a2[4];
  a2[4] = v6;
  uint64_t v7 = result[5];
  result[5] = a2[5];
  a2[5] = v7;
  uint64_t v8 = result[6];
  result[6] = a2[6];
  a2[6] = v8;
  return result;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a2, a3);
  if (*a4 < (unint64_t)*a3
    || *a3 >= (unint64_t)*a4
    && (uint64_t result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v9, a4, a3), result))
  {
    uint64_t result = (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a3, a4);
    if (*a3 < (unint64_t)*a2
      || *a2 >= (unint64_t)*a3
      && (uint64_t result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v10, a3, a2), result))
    {
      uint64_t result = (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a2, a3);
      if (*a2 < (unint64_t)*a1) {
        return (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a2);
      }
      if (*a1 >= (unint64_t)*a2)
      {
        uint64_t result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v11, a2, a1);
        if (result) {
          return (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a2);
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(a1, a2, a3, a4);
  if (*a5 < (unint64_t)*a4
    || *a4 >= (unint64_t)*a5
    && (uint64_t result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v11, a5, a4), result))
  {
    uint64_t result = (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a4, a5);
    if (*a4 < (unint64_t)*a3
      || *a3 >= (unint64_t)*a4
      && (uint64_t result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v12, a4, a3), result))
    {
      uint64_t result = (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a3, a4);
      if (*a3 < (unint64_t)*a2
        || *a2 >= (unint64_t)*a3
        && (uint64_t result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, a3, a2), result))
      {
        uint64_t result = (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a2, a3);
        if (*a2 < (unint64_t)*a1) {
          return (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a2);
        }
        if (*a1 >= (unint64_t)*a2)
        {
          uint64_t result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v14, a2, a1);
          if (result) {
            return (uint64_t)std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](a1, a2);
          }
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 56;
    if ((char *)a2 - (char *)a1 >= 57)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      char v12 = (long long *)&a1[7 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((BOOL)a1, a4, v9, v12);
        char v12 = (long long *)((char *)v12 - 56);
        --v11;
      }
      while (v11);
    }
    char v13 = a2;
    if (a2 != a3)
    {
      char v14 = a2;
      do
      {
        if (*v14 < (unint64_t)*a1
          || *a1 >= (unint64_t)*v14
          && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v29, v14, a1))
        {
          std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>::swap[abi:ne180100](v14, a1);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((BOOL)a1, a4, v9, (long long *)a1);
        }
        v14 += 7;
      }
      while (v14 != a3);
      char v13 = a3;
    }
    if (v8 < 57)
    {
      return v13;
    }
    else
    {
      char v27 = v13;
      int64_t v15 = v8 / 0x38uLL;
      unint64_t v16 = (unint64_t *)(a2 - 7);
      uint64_t v17 = a4;
      do
      {
        uint64_t v18 = *a1;
        uint64_t v19 = a1[1];
        uint64_t v20 = a1[2];
        uint64_t v21 = a1[3];
        uint64_t v23 = a1[4];
        uint64_t v22 = a1[5];
        uint64_t v28 = a1[6];
        long long v24 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((unint64_t *)a1, v17, v15);
        if (v16 == v24)
        {
          *long long v24 = v18;
          v24[1] = v19;
          void v24[2] = v20;
          uint64_t v24[3] = v21;
          v24[4] = v23;
          v24[5] = v22;
          v24[6] = v28;
        }
        else
        {
          *long long v24 = *v16;
          v24[1] = v16[1];
          void v24[2] = v16[2];
          uint64_t v24[3] = v16[3];
          v24[4] = v16[4];
          v24[5] = v16[5];
          v24[6] = v16[6];
          *unint64_t v16 = v18;
          v16[1] = v19;
          v16[2] = v20;
          double v16[3] = v21;
          v16[4] = v23;
          v16[5] = v22;
          v16[6] = v28;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>((BOOL)a1, (uint64_t)(v24 + 7), v17, 0x6DB6DB6DB6DB6DB7 * (((char *)(v24 + 7) - (char *)a1) >> 3));
        }
        v16 -= 7;
      }
      while (v15-- > 2);
      return v27;
    }
  }
  return a3;
}

BOOL std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(BOOL result, uint64_t a2, uint64_t a3, long long *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v27 = v4;
    uint64_t v28 = v5;
    BOOL v8 = result;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a4 - result) >> 3))
    {
      int64_t v11 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - result) >> 3)) | 1;
      char v12 = (unint64_t *)(result + 56 * v11);
      int64_t v13 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - result) >> 3) + 2;
      if (v13 < a3)
      {
        unint64_t v14 = v12[7];
        if (*v12 < v14
          || v14 >= *v12
          && (uint64_t result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v22, (void *)(result + 56 * v11), v12 + 7)))
        {
          v12 += 7;
          int64_t v11 = v13;
        }
      }
      unint64_t v15 = *v12;
      if (*v12 >= *(void *)a4)
      {
        if (*(void *)a4 >= v15)
        {
          uint64_t result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v22, v12, a4);
          if (result) {
            return result;
          }
          unint64_t v15 = *v12;
        }
        long long v16 = a4[1];
        long long v22 = *a4;
        long long v23 = v16;
        long long v24 = a4[2];
        unint64_t v25 = *((void *)a4 + 6);
        *(void *)a4 = v15;
        *((void *)a4 + 1) = v12[1];
        *((void *)a4 + 2) = v12[2];
        *((void *)a4 + 3) = v12[3];
        *((void *)a4 + 4) = v12[4];
        *((void *)a4 + 5) = v12[5];
        *((void *)a4 + 6) = v12[6];
        if (v9 >= v11)
        {
          while (1)
          {
            uint64_t v18 = 2 * v11;
            int64_t v11 = (2 * v11) | 1;
            uint64_t v17 = (unint64_t *)(v8 + 56 * v11);
            int64_t v19 = v18 + 2;
            if (v18 + 2 < a3)
            {
              unint64_t v20 = v17[7];
              if (*v17 < v20
                || v20 >= *v17
                && (uint64_t result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v26, (void *)(v8 + 56 * v11), v17 + 7)))
              {
                v17 += 7;
                int64_t v11 = v19;
              }
            }
            unint64_t v21 = *v17;
            if (*v17 < (unint64_t)v22) {
              break;
            }
            if ((unint64_t)v22 >= v21)
            {
              uint64_t result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v26, v17, &v22);
              if (result) {
                break;
              }
              unint64_t v21 = *v17;
            }
            *char v12 = v21;
            v12[1] = v17[1];
            v12[2] = v17[2];
            v12[3] = v17[3];
            v12[4] = v17[4];
            v12[5] = v17[5];
            v12[6] = v17[6];
            char v12 = v17;
            if (v9 < v11) {
              goto LABEL_24;
            }
          }
        }
        uint64_t v17 = v12;
LABEL_24:
        *(_OWORD *)uint64_t v17 = v22;
        *((_OWORD *)v17 + 1) = v23;
        *((_OWORD *)v17 + 2) = v24;
        v17[6] = v25;
      }
    }
  }
  return result;
}

unint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    BOOL v8 = a1;
    a1 += 7 * v5 + 7;
    uint64_t v9 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v10 = v9 + 2;
    if (v9 + 2 < a3)
    {
      unint64_t v11 = a1[7];
      if (*a1 < v11
        || v11 >= *a1
        && std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v13, a1, a1 + 7))
      {
        a1 += 7;
        uint64_t v5 = v10;
      }
    }
    unint64_t *v8 = *a1;
    v8[1] = a1[1];
    v8[2] = a1[2];
    v8[3] = a1[3];
    v8[4] = a1[4];
    v8[5] = a1[5];
    v8[6] = a1[6];
  }
  while (v5 <= v7);
  return a1;
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long> *>(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    BOOL v6 = result;
    unint64_t v7 = v4 >> 1;
    BOOL v8 = (unint64_t *)(result + 56 * (v4 >> 1));
    uint64_t v10 = (long long *)(a2 - 56);
    unint64_t v9 = *(void *)(a2 - 56);
    unint64_t v11 = *v8;
    if (*v8 >= v9)
    {
      if (v9 < v11) {
        return result;
      }
      uint64_t result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v17, v8, v10);
      if (!result) {
        return result;
      }
      unint64_t v11 = *v8;
    }
    long long v12 = v10[1];
    long long v17 = *v10;
    long long v18 = v12;
    long long v19 = v10[2];
    unint64_t v20 = *((void *)v10 + 6);
    *(void *)(a2 - 56) = v11;
    *(void *)(a2 - 48) = v8[1];
    *(void *)(a2 - 40) = v8[2];
    *(void *)(a2 - 32) = v8[3];
    *(void *)(a2 - 24) = v8[4];
    *(void *)(a2 - 16) = v8[5];
    *(void *)(a2 - 8) = v8[6];
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v14 = v7 - 1;
        unint64_t v7 = (v7 - 1) >> 1;
        char v13 = (unint64_t *)(v6 + 56 * v7);
        unint64_t v15 = *v13;
        if (*v13 >= (unint64_t)v17)
        {
          if ((unint64_t)v17 < v15) {
            break;
          }
          uint64_t result = std::__tuple_less<6ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v21, (void *)(v6 + 56 * v7), &v17);
          if (!result) {
            break;
          }
          unint64_t v15 = *v13;
        }
        unint64_t v16 = v13[1];
        unint64_t *v8 = v15;
        v8[1] = v16;
        v8[2] = v13[2];
        v8[3] = v13[3];
        v8[4] = v13[4];
        v8[5] = v13[5];
        v8[6] = v13[6];
        BOOL v8 = (unint64_t *)(v6 + 56 * v7);
        if (v14 <= 1) {
          goto LABEL_13;
        }
      }
    }
    char v13 = v8;
LABEL_13:
    *(_OWORD *)char v13 = v17;
    *((_OWORD *)v13 + 1) = v18;
    *((_OWORD *)v13 + 2) = v19;
    v13[6] = v20;
  }
  return result;
}

void std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::destroy(a1, a2[1]);
    unint64_t v4 = (void *)a2[8];
    if (v4)
    {
      a2[9] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void *std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::find<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v9, v3 + 4, a2);
    unint64_t v7 = v3 + 1;
    if (!v6)
    {
      unint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v10, a2, v5 + 4))
  {
    return v2;
  }
  return v5;
}

BOOL std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, void *a2, void *a3)
{
  if (*a2 < *a3) {
    return 1;
  }
  if (*a3 < *a2) {
    return 0;
  }
  unint64_t v3 = a2[1];
  unint64_t v4 = a3[1];
  if (v3 < v4) {
    return 1;
  }
  if (v4 < v3) {
    return 0;
  }
  unint64_t v5 = a2[2];
  unint64_t v6 = a3[2];
  if (v5 < v6) {
    return 1;
  }
  return v6 >= v5 && a2[3] < a3[3];
}

_OWORD *std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__emplace_unique_key_args<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::piecewise_construct_t const&,std::tuple<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long> const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = (void **)std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__find_equal<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x58uLL);
    long long v9 = (*a4)[1];
    v7[2] = **a4;
    void v7[3] = v9;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 10) = 0;
    *((void *)v7 + 8) = 0;
    std::__tree<BufferEntry>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__find_equal<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = v4;
        BOOL v8 = v4 + 4;
        if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v10, a3, v4 + 4))break; {
        unint64_t v4 = (void *)*v7;
        }
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>((uint64_t)&v11, v8, a3))break; {
      unint64_t v5 = v7 + 1;
      }
      unint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *std::vector<std::pair<unsigned long long,unsigned long long>>::vector(void *a1, unint64_t a2, _OWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<DYMTLOriginalProcessBuffer>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (_OWORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_24F6F3154(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    long long v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  long long v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *long long v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    long long v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F6F3378(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::find<std::tuple<unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = (void *)(a1 + 8);
  uint64_t result = std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__lower_bound<std::tuple<unsigned long long,unsigned long long,unsigned long long>>(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v3 == result) {
    return v3;
  }
  unint64_t v5 = result[4];
  if (*a2 < v5) {
    return v3;
  }
  if (v5 >= *a2)
  {
    unint64_t v6 = a2[1];
    unint64_t v7 = result[5];
    if (v6 < v7 || v7 >= v6 && a2[2] < result[6]) {
      return v3;
    }
  }
  return result;
}

void *std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__lower_bound<std::tuple<unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, unint64_t *a2, void *a3, void *a4)
{
  uint64_t result = a4;
  if (a3)
  {
    unint64_t v5 = *a2;
    unint64_t v6 = a2[1];
    while (1)
    {
      unint64_t v7 = a3[4];
      if (v7 >= v5)
      {
        if (v5 < v7) {
          goto LABEL_6;
        }
        unint64_t v8 = a3[5];
        if (v8 >= v6) {
          break;
        }
      }
      ++a3;
LABEL_7:
      a3 = (void *)*a3;
      if (!a3) {
        return result;
      }
    }
    if (v6 >= v8)
    {
      if (a3[6] < a2[2]) {
        ++a3;
      }
      else {
        uint64_t result = a3;
      }
      goto LABEL_7;
    }
LABEL_6:
    uint64_t result = a3;
    goto LABEL_7;
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__emplace_unique_key_args<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::piecewise_construct_t const&,std::tuple<std::tuple<unsigned long long,unsigned long long,unsigned long long> const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v6 = (void **)std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__find_equal<std::tuple<unsigned long long,unsigned long long,unsigned long long>>((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x50uLL);
    uint64_t v9 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v9;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    std::__tree<BufferEntry>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__map_value_compare<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::less<std::tuple<unsigned long long,unsigned long long,unsigned long long>>,true>,std::allocator<std::__value_type<std::tuple<unsigned long long,unsigned long long,unsigned long long>,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__find_equal<std::tuple<unsigned long long,unsigned long long,unsigned long long>>(uint64_t a1, void *a2, unint64_t *a3)
{
  unint64_t v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  unint64_t v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a3;
    unint64_t v7 = a3[1];
    unint64_t v8 = a3[2];
    while (1)
    {
      while (1)
      {
        uint64_t v9 = v4;
        unint64_t v10 = v4[4];
        if (v6 >= v10) {
          break;
        }
LABEL_4:
        unint64_t v4 = (void *)*v9;
        uint64_t result = v9;
        if (!*v9) {
          goto LABEL_17;
        }
      }
      if (v10 >= v6)
      {
        unint64_t v11 = v9[5];
        if (v7 < v11 || v11 >= v7 && v8 < v9[6]) {
          goto LABEL_4;
        }
        unint64_t v12 = v9[5];
        if (v12 >= v7 && (v7 < v12 || v9[6] >= v8)) {
          goto LABEL_17;
        }
      }
      uint64_t result = v9 + 1;
      unint64_t v4 = (void *)v9[1];
      if (!v4) {
        goto LABEL_17;
      }
    }
  }
  uint64_t v9 = result;
LABEL_17:
  *a2 = v9;
  return result;
}

void sub_24F6F37D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6F38E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6F3A74(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_24F6F3BBC(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_24F6F3CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6F3DF4(_Unwind_Exception *a1)
{
  unint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_24F6F43DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_24F6F4730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6F494C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6F4D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6F5054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6F5274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FA1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,void *a39,void *a40,uint64_t a41,void *a42)
{
  _Unwind_Resume(a1);
}

void GPUTraceResourceResolutionDecode(NSDictionary *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1;
  *(_OWORD *)a2 = xmmword_24F732130;
  *(void *)(a2 + 16) = 32;
  if (v3)
  {
    unint64_t v7 = v3;
    unint64_t v4 = [(NSDictionary *)v3 objectForKeyedSubscript:@"width"];
    unint64_t v5 = [(NSDictionary *)v7 objectForKeyedSubscript:@"height"];
    unint64_t v6 = [(NSDictionary *)v7 objectForKeyedSubscript:@"format"];
    if (v4) {
      *(void *)a2 = [v4 unsignedIntegerValue];
    }
    if (v5) {
      *(void *)(a2 + 8) = [v5 unsignedIntegerValue];
    }
    if (v6) {
      *(void *)(a2 + 16) = [v6 unsignedIntegerValue];
    }

    unint64_t v3 = v7;
  }
}

void sub_24F6FB2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t GPUThumbnailOptionsColorGetIndex(NSString *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = [@"Color." length];
  unint64_t v3 = -[NSString substringWithRange:](v1, "substringWithRange:", v2, [(NSString *)v1 length] - v2);
  uint64_t v4 = [v3 integerValue];

  return v4;
}

void sub_24F6FB42C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6FB678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6FB764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL IsFuncEnumPixelHistoryInterestingRenderPassStateItems(int a1)
{
  BOOL result = 1;
  if ((a1 + 16279) > 0x3C || ((1 << (a1 - 105)) & 0x100000000700FE01) == 0) {
    return (a1 + 16077) < 2;
  }
  return result;
}

void sub_24F6FBAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FBCEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6FBD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FC814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_24F6FCA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FCAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FCBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FCCF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FCD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FCE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FCF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FCFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FD160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FD284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6FD6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_24F6FD88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FD8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FD9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::__value_type<objc_object  {objcproto9MTLBuffer}*,std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>>,std::__map_value_compare<objc_object  {objcproto9MTLBuffer}*,std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>,std::less<objc_object  {objcproto9MTLBuffer}*>,true>,std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}><std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_24F6FDA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FE0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,id a62)
{
  _Block_object_dispose(&a28, 8);
  std::__tree<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>>>::destroy(a10, a35);

  _Block_object_dispose(&a49, 8);
  std::__tree<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>>>::destroy(a12, a56);

  _Block_object_dispose((const void *)(v71 - 184), 8);
  std::__tree<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>>>::destroy(a14, *(void **)(v71 - 128));

  _Unwind_Resume(a1);
}

void sub_24F6FE22C()
{
}

void sub_24F6FE234()
{
}

void sub_24F6FE23C()
{
}

void *__Block_byref_object_copy__4(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  uint64_t v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    *uint64_t v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

id *DYMTLBoundBufferInfo::operator=(id *location, uint64_t a2)
{
  id v4 = location[1];
  if (v4) {
    free(v4);
  }
  objc_storeStrong(location, *(id *)a2);
  uint64_t v5 = *(void **)(a2 + 16);
  location[1] = *(id *)(a2 + 8);
  location[2] = v5;
  if (*(void *)(a2 + 8))
  {
    unint64_t v6 = malloc_type_malloc((size_t)v5, 0x76E40FuLL);
    location[1] = v6;
    memcpy(v6, *(const void **)(a2 + 8), (size_t)location[2]);
  }
  return location;
}

void sub_24F6FE510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    v17[4] = result;
    if (v13) {
      BOOL v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>(result, v13);
    }
    else {
      BOOL v14 = 0;
    }
    unint64_t v15 = &v14[24 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[24 * v13];
    *(void *)unint64_t v15 = *(void *)a2;
    long long v16 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_OWORD *)(v15 + 8) = v16;
    v17[2] = v15 + 24;
    std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>::__swap_out_circular_buffer(a1, v17);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<DYMTLReplayerIAB::Usage>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *(void *)unint64_t v7 = *(void *)a2;
    long long v8 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_OWORD *)(v7 + 8) = v8;
    uint64_t v9 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v9;
  return result;
}

void sub_24F6FE688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<DYMTLReplayerIAB::Usage>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_24F6FE8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_24F6FEB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_24F6FEE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  _Block_object_dispose(&a23, 8);
  std::__tree<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>>>::destroy(v32, a30);

  _Unwind_Resume(a1);
}

void sub_24F6FEEA4()
{
}

void sub_24F6FEEAC()
{
}

void sub_24F6FEEB4()
{
}

void sub_24F6FF0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_24F6FF3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  _Block_object_dispose(&a23, 8);
  *(void *)(v26 - 96) = a10;
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 96));
  a23 = (void **)(v26 - 120);
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__503(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__504(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<objc_object  {objcproto11MTLResource}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_24F6FF50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FF8D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6FF9D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6FFA88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F6FFB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F6FFC04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F70006C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24F7001E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F700254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F7004F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F700CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, void *a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  GPUTools::AutoCATransaction::~AutoCATransaction((GPUTools::AutoCATransaction *)va);
  _Unwind_Resume(a1);
}

void sub_24F700FD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F7011DC(_Unwind_Exception *a1)
{
  GPUTools::AutoCATransaction::~AutoCATransaction((GPUTools::AutoCATransaction *)(v4 - 96));
  _Unwind_Resume(a1);
}

void sub_24F7012D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F7013C8(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_24F701504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F7016EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F7021A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_24F702420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__625(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_24F702CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F702D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F703018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F7032FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F70354C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F703A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F703DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F703F38(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_24F704128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F704208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F704370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F704454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F7045F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F704B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((char **)a1, a2 - v2);
  }
}

void sub_24F7052A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,BOOL>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BOOL>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BOOL>>>::~__hash_table((uint64_t)&a23);
  unint64_t v25 = *(void **)(v23 - 120);
  if (v25)
  {
    *(void *)(v23 - 112) = v25;
    operator delete(v25);
  }

  _Unwind_Resume(a1);
}

void std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 48;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>(v3, a2);
    unint64_t v7 = &v6[48 * v5];
    uint64_t v9 = &v6[48 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 3);
        long long v14 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v14;
        *((_OWORD *)v12 - 3) = v13;
        v12 -= 48;
        v10 -= 48;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_24F7054F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24F705660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_24F705A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      char v21 = 0;
      long long v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve(&v21, v12);
      long long v13 = *(unint64_t **)a1;
      unint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v22 = v14 + v6;
      uint64_t v23 = v21;
      int v24 = 0;
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      size_t v17 = v19;
      LODWORD(v18) = v20;
      unint64_t v15 = *(char **)a1;
      *(void *)a1 = v21;
      char v21 = v15;
      long long v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      long long v22 = v16;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      size_t v17 = (char *)(*(void *)a1 + 8 * (v5 >> 6));
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        char v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        char v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_24F705C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_24F7060C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_24F7061F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F706264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F7062D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F70634C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F7063D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F7065B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F70669C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F706778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F7069C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

GPUTools::AutoCATransaction *GPUTools::AutoCATransaction::AutoCATransaction(GPUTools::AutoCATransaction *this, int a2, char a3)
{
  *((void *)this + 1) = [MEMORY[0x263F158F8] animationTimingFunction];
  [MEMORY[0x263F158F8] animationDuration];
  *((void *)this + 2) = v6;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = [MEMORY[0x263F158F8] disableActions];
  *((unsigned char *)this + 33) = a3;
  unint64_t v7 = [MEMORY[0x263F158F8] completionBlock];
  uint64_t v8 = [v7 copy];
  unint64_t v9 = (void *)*((void *)this + 3);
  *((void *)this + 3) = v8;

  if (a2) {
    [MEMORY[0x263F158F8] setDisableActions:1];
  }
  return this;
}

void sub_24F707208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GPUTools::AutoCATransaction::~AutoCATransaction(GPUTools::AutoCATransaction *this)
{
  if (*((unsigned char *)this + 33)) {
    [MEMORY[0x263F158F8] flush];
  }
  unint64_t v2 = (void *)MEMORY[0x263F158F8];
  id v3 = *((id *)this + 1);
  [v2 setAnimationTimingFunction:v3];

  [MEMORY[0x263F158F8] setAnimationDuration:*((double *)this + 2)];
  [MEMORY[0x263F158F8] setCompletionBlock:*((void *)this + 3)];
  [MEMORY[0x263F158F8] setDisableActions:*((unsigned __int8 *)this + 32)];
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::clear(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    __n128 result = (void *)result[2];
    if (result)
    {
      do
      {
        unint64_t v2 = (void *)*result;
        operator delete(result);
        __n128 result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>>>::__emplace_unique_key_args<unsigned long,unsigned long,std::vector<std::pair<unsigned int,unsigned int>>&>(uint64_t a1, uint64_t *a2, void *a3, uint64_t **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      __n128 result = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == v6) {
              return result;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          __n128 result = (void *)*result;
        }
        while (result);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>>>::__construct_node_hash<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>&>(a1, *a2, a3, a4, (uint64_t)&v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *int v20 = *v18;
    *uint64_t v18 = v20;
  }
  else
  {
    *int v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v20)
    {
      unint64_t v19 = *(void *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v20;
    }
  }
  __n128 result = v20;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_24F70754C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

char *std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>>>::__construct_node_hash<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x30uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  *((void *)v10 + 2) = *a3;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 3) = 0;
  __n128 result = std::vector<std::pair<unsigned int,unsigned int>>::__init_with_size[abi:ne180100]<std::pair<unsigned int,unsigned int>*,std::pair<unsigned int,unsigned int>*>((char *)v10 + 24, *a4, a4[1], a4[1] - *a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_24F707600(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<unsigned int,unsigned int>>::__init_with_size[abi:ne180100]<std::pair<unsigned int,unsigned int>*,std::pair<unsigned int,unsigned int>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    unint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_24F707674(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::pair<unsigned int,unsigned int>>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<OffsetPair>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned long long,EncoderInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,EncoderInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,EncoderInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,EncoderInfo>>>::__erase_unique<unsigned long long>(void *a1, unint64_t *a2)
{
  __n128 result = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,EncoderInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,EncoderInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,EncoderInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,EncoderInfo>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,EncoderInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,EncoderInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,EncoderInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,EncoderInfo>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  long long __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,EncoderInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,EncoderInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,EncoderInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,EncoderInfo>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,EncoderInfo>(uint64_t a1, unint64_t *a2, void *a3, _OWORD *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      float v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (*((void *)v12 + 2) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          float v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  float v12 = (char *)operator new(0x38uLL);
  *(void *)float v12 = 0;
  *((void *)v12 + 1) = v8;
  *((void *)v12 + 2) = *a3;
  long long v14 = a4[1];
  *(_OWORD *)(v12 + 24) = *a4;
  *(_OWORD *)(v12 + 40) = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  long long v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)float v12 = *v22;
LABEL_38:
    *long long v22 = v12;
    goto LABEL_39;
  }
  *(void *)float v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v23 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    long long v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_24F707984(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<objc_object  {objcproto9MTLBuffer}*,std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>>,std::__map_value_compare<objc_object  {objcproto9MTLBuffer}*,std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>,std::less<objc_object  {objcproto9MTLBuffer}*>,true>,std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}><std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<objc_object  {objcproto9MTLBuffer}*,std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>>,std::__map_value_compare<objc_object  {objcproto9MTLBuffer}*,std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>,std::less<objc_object  {objcproto9MTLBuffer}*>,true>,std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}><std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<objc_object  {objcproto9MTLBuffer}*,std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>>,std::__map_value_compare<objc_object  {objcproto9MTLBuffer}*,std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>,std::less<objc_object  {objcproto9MTLBuffer}*>,true>,std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}><std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>>>::destroy(a1, *((void *)a2 + 1));
    unint64_t v4 = (void **)(a2 + 40);
    std::vector<DYMTLReplayerIAB::Usage>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,DYMTLBoundBufferInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,DYMTLBoundBufferInfo>>>::destroy(a1, a2[1]);
    free((void *)a2[6]);

    operator delete(a2);
  }
}

uint64_t std::vector<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>,std::reverse_iterator<MTLArgument * {__strong}*>,MTLArgument * {__strong}*,MTLArgument * {__strong}*>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>,std::reverse_iterator<MTLArgument * {__strong}*>,MTLArgument * {__strong}*,MTLArgument * {__strong}*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      uint64_t v9 = *(void *)(a3 - 24);
      a3 -= 24;
      *(void *)(v8 - 24) = v9;
      v8 -= 24;
      long long v10 = *(_OWORD *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(_OWORD *)(v8 + 8) = v10;
      v7 -= 24;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v8;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>,std::reverse_iterator<MTLArgument * {__strong}*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,objc_object  {objcproto11MTLFunction}* {__strong},MTLArgument * {__strong}>>,std::reverse_iterator<MTLArgument * {__strong}*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<DYMTLReplayerIAB::Usage>,std::reverse_iterator<DYMTLReplayerIAB::Usage*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,CAMetalLayer * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CAMetalLayer * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CAMetalLayer * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CAMetalLayer * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    long long v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  void *i = *v13;
  *unint64_t v13 = i;
  *(void *)(v20 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F707DD4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,unsigned long long &>(uint64_t a1, unint64_t *a2, void *a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  uint64_t v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *unint64_t v22 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F708008(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      uint64_t result = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == v6) {
              return result;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(a1, *a2, a4, (uint64_t)&v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  unint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *size_t v20 = *v18;
    *unint64_t v18 = v20;
  }
  else
  {
    *size_t v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v20)
    {
      unint64_t v19 = *(void *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v20;
    }
  }
  uint64_t result = v20;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_24F708230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x658uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  uint64_t result = std::pair<unsigned long long const,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>::pair[abi:ne180100]<unsigned long long const&>((uint64_t)(v8 + 2), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_24F7082B0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned long long const,GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>::pair[abi:ne180100]<unsigned long long const&>(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  uint64_t v3 = (_OWORD *)(a1 + 1176);
  bzero((void *)(a1 + 8), 0x640uLL);
  uint64_t v4 = 24;
  do
  {
    uint64_t v5 = a1 + v4;
    *(_OWORD *)(v5 + 32) = 0uLL;
    *(_OWORD *)(v5 + 48) = 0uLL;
    *(_OWORD *)uint64_t v5 = 0uLL;
    *(_OWORD *)(v5 + 16) = 0uLL;
    *(void *)(v5 + 64) = 0;
    *(void *)(v5 + 72) = 1;
    *(_OWORD *)(v5 + 80) = 0uLL;
    *(_OWORD *)(v5 + 96) = 0uLL;
    *(void *)(v5 + 112) = 0x3FF0000000000000;
    v4 += 144;
    *(void *)(v5 + 128) = 0;
    *(void *)(v5 + 136) = 0;
  }
  while ((_OWORD *)(v5 + 144) != v3);
  *(void *)(a1 + 1240) = 0;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *uint64_t v3 = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(void *)(a1 + 1248) = 1;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(void *)(a1 + 1288) = 0x3FF0000000000000;
  *(void *)(a1 + 1384) = 0;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(void *)(a1 + 1392) = 1;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(void *)(a1 + 1432) = 0x3FF0000000000000;
  *(void *)(a1 + 1456) = 0;
  *(void *)(a1 + 1448) = 0;
  return a1;
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,CommandBufferInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CommandBufferInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CommandBufferInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CommandBufferInfo>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,CommandBufferInfo>(uint64_t a1, unint64_t *a2, void *a3, _OWORD *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      float v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (*((void *)v12 + 2) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          float v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  float v12 = (char *)operator new(0x28uLL);
  *(void *)float v12 = 0;
  *((void *)v12 + 1) = v8;
  *((void *)v12 + 2) = *a3;
  *(_OWORD *)(v12 + 24) = *a4;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)float v12 = *v21;
LABEL_38:
    *uint64_t v21 = v12;
    goto LABEL_39;
  }
  *(void *)float v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v20 + 8 * v4) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v22 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_24F7085B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long &>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  size_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *size_t v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    size_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F7087D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::__append(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint8x8_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      BOOL v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v13);
      uint8x8_t v8 = *a1;
      unint64_t v7 = a1[1];
    }
    else
    {
      BOOL v14 = 0;
    }
    unint64_t v15 = &v14[8 * v11];
    unint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    size_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0;
    long long v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    uint8x8_t v8 = *a1;
    int v9 = 0;
    unint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    uint64_t v4 = *a1;
    *a1 = v10;
    unint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_24F7089A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    uint64_t *v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)__src);
  if (v8 <= 0)
  {
    uint64_t v16 = *(unint64_t **)a5;
  }
  else
  {
    uint64_t v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2)) {
        int64_t v10 = 64 - a2;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      uint64_t v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      unint64_t v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(void *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v8 + 63;
    }
    uint64_t v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    uint64_t v15 = v8 - (v14 << 6);
    uint64_t v16 = &__src[v14];
    *(void *)a5 = v16;
    if (v15 >= 1)
    {
      *uint64_t v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(void *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  int v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    void *result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *unint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

BOOL ShaderDebugger::MmapFile::open(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  if (*(char *)(a2 + 23) >= 0) {
    int v4 = (const char *)a2;
  }
  else {
    int v4 = *(const char **)a2;
  }
  if (stat(v4, &v9) || (v9.st_mode & 0xF000) != 0x8000) {
    return 0;
  }
  *(void *)(a1 + 32) = v9.st_size;
  if (*(char *)(a2 + 23) >= 0) {
    int v5 = (const char *)a2;
  }
  else {
    int v5 = *(const char **)a2;
  }
  int v6 = open(v5, 0, 0);
  *(_DWORD *)(a1 + 24) = v6;
  unint64_t v7 = mmap(0, *(void *)(a1 + 32), 1, 2, v6, 0);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v7;
  return *(_DWORD *)(a1 + 24) != -1;
}

uint64_t ShaderDebugger::MmapFile::close(uint64_t this)
{
  if (*(_DWORD *)(this + 24) != -1)
  {
    uint64_t v1 = this;
    munmap(*(void **)(this + 40), *(void *)(this + 32));
    this = close(*(_DWORD *)(v1 + 24));
    *(_DWORD *)(v1 + 24) = -1;
  }
  return this;
}

uint64_t ShaderDebugger::TraceBufferVersionedHeader::TraceBufferVersionedHeader(uint64_t result, uint64_t a2, int a3)
{
  *(void *)uint64_t result = &unk_2700F0010;
  *(void *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = a3;
  return result;
}

void ShaderDebugger::TraceBufferVersionedHeader::~TraceBufferVersionedHeader(ShaderDebugger::TraceBufferVersionedHeader *this)
{
}

uint64_t ShaderDebugger::VertexTraceBufferVersionedHeader::getHeaderSize(ShaderDebugger::VertexTraceBufferVersionedHeader *this)
{
  int v1 = *((_DWORD *)this + 4);
  if ((v1 - 1) < 2)
  {
    unint64_t v2 = (unsigned int *)(*((void *)this + 1) + 20);
    uint64_t v3 = 24;
    return v3 + 4 * *v2;
  }
  if (!v1)
  {
    unint64_t v2 = (unsigned int *)(*((void *)this + 1) + 16);
    uint64_t v3 = 20;
    return v3 + 4 * *v2;
  }
  return 0;
}

unint64_t ShaderDebugger::FragmentTraceBufferVersionedHeader::getHeaderSize(ShaderDebugger::FragmentTraceBufferVersionedHeader *this)
{
  return (unint64_t)(*((_DWORD *)this + 4) < 3u) << 6;
}

uint64_t ShaderDebugger::KernelTraceBufferVersionedHeader::getHeaderSize(ShaderDebugger::KernelTraceBufferVersionedHeader *this)
{
  return 48;
}

uint64_t ShaderDebugger::PostTessellationVertexTraceBufferVersionedHeader::getHeaderSize(ShaderDebugger::PostTessellationVertexTraceBufferVersionedHeader *this)
{
  int v1 = *((_DWORD *)this + 4);
  if ((v1 - 1) < 2)
  {
    unint64_t v2 = (unsigned int *)(*((void *)this + 1) + 20);
    uint64_t v3 = 24;
    return v3 + 4 * *v2;
  }
  if (!v1)
  {
    unint64_t v2 = (unsigned int *)(*((void *)this + 1) + 16);
    uint64_t v3 = 20;
    return v3 + 4 * *v2;
  }
  return 0;
}

void ShaderDebugger::MmapFile::~MmapFile(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void ShaderDebugger::VertexTraceBufferVersionedHeader::~VertexTraceBufferVersionedHeader(ShaderDebugger::VertexTraceBufferVersionedHeader *this)
{
}

void ShaderDebugger::FragmentTraceBufferVersionedHeader::~FragmentTraceBufferVersionedHeader(ShaderDebugger::FragmentTraceBufferVersionedHeader *this)
{
}

void ShaderDebugger::KernelTraceBufferVersionedHeader::~KernelTraceBufferVersionedHeader(ShaderDebugger::KernelTraceBufferVersionedHeader *this)
{
}

void ShaderDebugger::PostTessellationVertexTraceBufferVersionedHeader::~PostTessellationVertexTraceBufferVersionedHeader(ShaderDebugger::PostTessellationVertexTraceBufferVersionedHeader *this)
{
}

void sub_24F7091C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F709244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F709358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_24F7093FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_24F709504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_24F7097A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F709950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_24F709A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F709B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F709BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F709E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30)
{
  _Unwind_Resume(a1);
}

void sub_24F709FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

DYMTLComputeCommandEncoderStateTracker *DYMTLNewStatefulComputeCommandEncoder(void *a1, uint64_t a2)
{
  uint64_t v3 = [a1 computeCommandEncoderWithDispatchType:a2];
  int v4 = [[DYMTLComputeCommandEncoderStateTracker alloc] initWithEncoder:v3 dispatchType:a2];

  return v4;
}

void sub_24F70A108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void DYMTLBoundBufferInfo::DYMTLBoundBufferInfo(DYMTLBoundBufferInfo *this, const void *a2, size_t size)
{
  this->m_buffer = 0;
  this->m_bytes = 0;
  this->m_offsetOrLength = size;
  if (a2)
  {
    if (size)
    {
      int v6 = malloc_type_malloc(size, 0xC7CCC3EuLL);
      this->m_bytes = v6;
      memcpy(v6, a2, size);
    }
  }
}

void sub_24F70A17C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F70A65C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F70A7CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F70A974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F70AA8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F70AB64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F70AC1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F70AE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_24F70B3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_24F70B8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_24F70BE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_24F70C3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_24F70C8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_24F70CAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_24F70CB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F70CC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_24F70CF10(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_24F70CFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F70D084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F70D29C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::vector<MTLViewport>::assign(char **a1, unint64_t a2, long long *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 4) >= a2)
  {
    unint64_t v16 = (a1[1] - result) / 48;
    if (v16 >= a2) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = (a1[1] - result) / 48;
    }
    for (; v17; --v17)
    {
      long long v18 = *a3;
      long long v19 = a3[2];
      *((_OWORD *)result + 1) = a3[1];
      *((_OWORD *)result + 2) = v19;
      *(_OWORD *)uint64_t result = v18;
      result += 48;
    }
    if (a2 <= v16)
    {
      a1[1] = &(*a1)[48 * a2];
    }
    else
    {
      uint64_t v20 = a1[1];
      int v21 = &v20[48 * (a2 - v16)];
      uint64_t v22 = -48 * v16 + 48 * a2;
      do
      {
        long long v23 = *a3;
        long long v24 = a3[2];
        *((_OWORD *)v20 + 1) = a3[1];
        *((_OWORD *)v20 + 2) = v24;
        *(_OWORD *)uint64_t v20 = v23;
        v20 += 48;
        v22 -= 48;
      }
      while (v22);
      a1[1] = v21;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 > 0x555555555555555) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 4);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x555555555555555;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t result = std::vector<MTLViewport>::__vallocate[abi:ne180100](a1, v10);
    uint64_t v11 = a1[1];
    unint64_t v12 = &v11[48 * a2];
    uint64_t v13 = 48 * a2;
    do
    {
      long long v14 = *a3;
      long long v15 = a3[2];
      *((_OWORD *)v11 + 1) = a3[1];
      *((_OWORD *)v11 + 2) = v15;
      *(_OWORD *)uint64_t v11 = v14;
      v11 += 48;
      v13 -= 48;
    }
    while (v13);
    a1[1] = v12;
  }
  return result;
}

char *std::vector<MTLScissorRect>::assign(char **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 5)
  {
    unint64_t v14 = (a1[1] - result) >> 5;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (a1[1] - result) >> 5;
    }
    for (; v15; --v15)
    {
      long long v16 = a3[1];
      *(_OWORD *)uint64_t result = *a3;
      *((_OWORD *)result + 1) = v16;
      result += 32;
    }
    if (a2 <= v14)
    {
      a1[1] = &(*a1)[32 * a2];
    }
    else
    {
      uint64_t v17 = a1[1];
      long long v18 = &v17[32 * (a2 - v14)];
      uint64_t v19 = 32 * a2 - 32 * v14;
      do
      {
        long long v20 = a3[1];
        *(_OWORD *)uint64_t v17 = *a3;
        *((_OWORD *)v17 + 1) = v20;
        v17 += 32;
        v19 -= 32;
      }
      while (v19);
      a1[1] = v18;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 59) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v6 >> 4;
    if (v6 >> 4 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t result = std::vector<MTLScissorRect>::__vallocate[abi:ne180100](a1, v9);
    unint64_t v10 = a1[1];
    uint64_t v11 = &v10[32 * a2];
    uint64_t v12 = 32 * a2;
    do
    {
      long long v13 = a3[1];
      *(_OWORD *)unint64_t v10 = *a3;
      *((_OWORD *)v10 + 1) = v13;
      v10 += 32;
      v12 -= 32;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void sub_24F70D608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F70D6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_24F70D764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_24F70D86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_24F70D9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_24F70DA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_24F70DBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_24F70DD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_24F70DE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_24F70DF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_24F70E158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F70E3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F70EADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F70ED40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_24F70EE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F70F040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_24F70F180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F70F228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F70F2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F70F55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_24F70F6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void enumerateObjects(void *a1, void *a2)
{
  uint64_t v3 = a2;
  unint64_t v4 = 0;
  char v6 = 0;
  while (1)
  {
    uint64_t v5 = a1[1];
    if (!*a1) {
      break;
    }
    if (!v5) {
      goto LABEL_7;
    }
LABEL_4:
    if (v4 > 0x1D) {
      goto LABEL_10;
    }
LABEL_9:
    ++v4;
    a1 += 3;
  }
  if (!v5) {
    goto LABEL_4;
  }
LABEL_7:
  v3[2](v3, a1, v4, &v6);
  if (!v6 && v4 < 0x1E) {
    goto LABEL_9;
  }
LABEL_10:
}

{
  void (**v3)(id, void *, unint64_t, char *);
  unint64_t v4;
  BOOL v5;
  char v6;

  uint64_t v3 = a2;
  unint64_t v4 = 0;
  char v6 = 0;
  while (!*a1)
  {
    if (v4 > 0xE) {
      goto LABEL_11;
    }
LABEL_10:
    ++v4;
    a1 += 2;
  }
  v3[2](v3, a1, v4, &v6);
  if (v6) {
    uint64_t v5 = 1;
  }
  else {
    uint64_t v5 = v4 >= 0xF;
  }
  if (!v5) {
    goto LABEL_10;
  }
LABEL_11:
}

void sub_24F70F7A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void enumerateObjects(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  unint64_t v4 = 0;
  char v6 = 0;
  while (1)
  {
    uint64_t v5 = *(void *)(a1 + 8 * v4);
    if (v5) {
      break;
    }
    if (v4 > 0x7E) {
      goto LABEL_8;
    }
LABEL_7:
    ++v4;
  }
  v3[2](v3, v5, v4, &v6);
  if (!v6 && v4 < 0x7F) {
    goto LABEL_7;
  }
LABEL_8:
}

void sub_24F70F848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F70F8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F70F9F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

DYMTLRenderCommandEncoderStateTracker *DYMTLNewStatefulRenderCommandEncoder(void *a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = [a1 renderCommandEncoderWithDescriptor:v3];
  uint64_t v5 = [[DYMTLRenderCommandEncoderStateTracker alloc] initWithEncoder:v4 descriptor:v3];

  return v5;
}

{
  id v3;
  id v4;
  DYMTLRenderCommandEncoderStateTracker *v5;
  uint64_t vars8;

  id v3 = a1;
  unint64_t v4 = a2;
  uint64_t v5 = [[DYMTLRenderCommandEncoderStateTracker alloc] initWithDevice:v3 descriptor:v4];

  return v5;
}

void sub_24F70FC40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

DYMTLRenderCommandEncoderStateTracker *DYMTLNewStatefulRenderCommandEncoder(void *a1)
{
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    id v3 = [v1 renderCommandEncoder];
    unint64_t v4 = DYMTLGetAssociatedObject(v2, 0);
    uint64_t v5 = [[DYMTLRenderCommandEncoderStateTracker alloc] initWithEncoder:v3 descriptor:v4];
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_24F70FCF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F70FD8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<MTLViewport>::__init_with_size[abi:ne180100]<MTLViewport*,MTLViewport*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    uint64_t result = std::vector<MTLViewport>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_24F70FE00(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MTLViewport>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

char *std::vector<MTLScissorRect>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DYMTLReplayerIAB>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

char *std::vector<MTLViewport>::__assign_with_size[abi:ne180100]<MTLViewport const*,MTLViewport const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 4) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x555555555555555) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = std::vector<MTLViewport>::__vallocate[abi:ne180100](v7, v12);
    unint64_t v14 = (char *)v7[1];
    long long v13 = (void **)(v7 + 1);
    unint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 4) >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[16 * ((v15 - v9) >> 4)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    unint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *long long v13 = &v9[v17];
  return result;
}

char *std::vector<MTLScissorRect>::__assign_with_size[abi:ne180100]<MTLScissorRect const*,MTLScissorRect const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<MTLScissorRect>::__vallocate[abi:ne180100](v7, v11);
    long long v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,DYMTLStoreInfo>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,DYMTLStoreInfo>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,DYMTLStoreInfo>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,DYMTLStoreInfo>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (int i = *v10; i; int i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  int i = operator new(0x28uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  long long v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    *long long v20 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    long long v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_24F71030C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t GPUTools::MTL::Utils::DYMTLTranslateGPUAddressToBuffer(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[1] - *a1;
  if (!v2) {
    return 0;
  }
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3);
  unint64_t v4 = (void *)*a1;
  do
  {
    unint64_t v5 = v3 >> 1;
    char v6 = &v4[3 * (v3 >> 1)];
    unint64_t v8 = *v6;
    unint64_t v7 = v6 + 3;
    v3 += ~(v3 >> 1);
    if (v8 > a2) {
      unint64_t v3 = v5;
    }
    else {
      unint64_t v4 = v7;
    }
  }
  while (v3);
  if (v4 == (void *)*a1 || *(v4 - 2) + *(v4 - 3) <= a2) {
    return 0;
  }
  else {
    return *(v4 - 1);
  }
}

uint64_t *GPUTools::MTL::Utils::DYMTLCreateIndirectCommandEncoder@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 104) = -1;
  *(void *)&long long v2 = -1;
  *((void *)&v2 + 1) = -1;
  *(_OWORD *)(a2 + 88) = v2;
  *(_OWORD *)(a2 + 72) = v2;
  *(_OWORD *)(a2 + 56) = v2;
  *(_OWORD *)(a2 + 40) = v2;
  *(_OWORD *)(a2 + 24) = v2;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)a2 = 0;
  if (*((unsigned char *)result + 9))
  {
    uint64_t v3 = 8;
  }
  else
  {
    *(void *)(a2 + 8) = 8;
    uint64_t v3 = 16;
  }
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v4 = result[2];
    uint64_t v5 = result[3];
    *(void *)(a2 + 16) = v3;
    *(void *)(a2 + 24) = v3 + 8 * v4;
    uint64_t v6 = v4 + v5;
    uint64_t v7 = v3 + 8 * v6;
    uint64_t v8 = result[5];
    uint64_t v9 = v6 + result[4];
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = v3 + 8 * v9;
    uint64_t v10 = v9 + v8;
    *(void *)(a2 + 48) = v3 + 8 * v10;
    v3 += 8 * (v10 + result[6]);
  }
  uint64_t v11 = result[7];
  uint64_t v12 = result[8];
  *(void *)(a2 + 56) = v3;
  *(void *)(a2 + 64) = v3 + 8 * v11;
  uint64_t v13 = v11 + v12;
  uint64_t v14 = v3 + 8 * (v11 + v12);
  *(void *)(a2 + 72) = v14;
  uint64_t v15 = *result;
  if (*((unsigned char *)result + 11))
  {
    if ((v15 & 0xF) != 0)
    {
      unint64_t v16 = result + 2;
    }
    else
    {
      if ((v15 & 0x60) == 0) {
        goto LABEL_12;
      }
      unint64_t v16 = result + 6;
    }
    uint64_t v17 = *v16;
    uint64_t v14 = v3 + 8 * (v13 + *v16);
    *(void *)(a2 + 80) = v17;
  }
LABEL_12:
  if (*((unsigned char *)result + 12)) {
    uint64_t v18 = v14 + 8;
  }
  else {
    uint64_t v18 = v14;
  }
  *(void *)(a2 + 88) = v14;
  *(void *)(a2 + 96) = v18;
  unint64_t v19 = (v15 << 63 >> 63) & 0x28;
  if ((v15 & 2) != 0) {
    unint64_t v19 = 56;
  }
  uint64_t v20 = 72;
  if ((v15 & 4) != 0) {
    unint64_t v19 = 72;
  }
  if ((v15 & 8) != 0) {
    unint64_t v19 = 80;
  }
  if (v19 <= 0x48) {
    uint64_t v21 = 72;
  }
  else {
    uint64_t v21 = v19;
  }
  if ((v15 & 0x80) != 0) {
    unint64_t v19 = v21;
  }
  if (v19 > 0x48) {
    uint64_t v20 = v19;
  }
  if ((v15 & 0x100) != 0) {
    unint64_t v19 = v20;
  }
  BOOL v22 = (v15 & 0x60) == 0;
  uint64_t v23 = 120;
  if (v22) {
    uint64_t v23 = v19;
  }
  *(void *)(a2 + 104) = v18 + v23;
  return result;
}

uint64_t GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::commandType(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return *(void *)&a2[*(void *)this];
}

uint64_t GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getPipelineStateUniqueIdentifier(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return *(void *)&a2[*((void *)this + 1)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 12)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawIndexedArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 12)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getTessellationFactorArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 12)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawPatchesArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 12) + 24];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawIndexedPatchesArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 12) + 24];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawMeshThreadgroupsArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 12)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawMeshThreadsArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 12)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::dispatchThreadsPerTileArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 12)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::concurrentDispatchThreadgroupsArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 12) + 72];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::concurrentDispatchThreadsArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 12) + 72];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::indirectDispatchArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 12)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getVertexBuffers(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 2)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getFragmentBuffers(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 3)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getObjectBuffers(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 4)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getMeshBuffers(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 5)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getKernelBuffers(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 6)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getThreadgroupMemoryLength(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 8)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getObjectThreadgroupMemoryLength(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 7)];
}

const char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::getAttributeStrides(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, const char *a2)
{
  return &a2[*((void *)this + 9)];
}

void *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::setCommandType(void *this, char *a2, uint64_t a3)
{
  *(void *)&a2[*this] = a3;
  return this;
}

uint64_t GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::setPipelineStateUniqueIdentifier(uint64_t this, char *a2, uint64_t a3)
{
  *(void *)&a2[*(void *)(this + 8)] = a3;
  return this;
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawPrimitives(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((void *)this + 12)];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawIndexedPrimitives(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((void *)this + 12)];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::setTessellationFactorArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((void *)this + 12)];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawPatches(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((void *)this + 12) + 24];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::drawIndexedPatches(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((void *)this + 12) + 24];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::dispatchThreadsPerTile(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((void *)this + 12)];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::concurrentDispatchThreadgroups(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((void *)this + 12) + 72];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::concurrentDispatchThreads(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((void *)this + 12) + 72];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::setIndirectDispatchArguments(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((void *)this + 12)];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::setVertexBuffers(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((void *)this + 2)];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::setFragmentBuffers(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((void *)this + 3)];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::setKernelBuffers(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((void *)this + 6)];
}

char *GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder::setThreadgroupMemoryLength(GPUTools::MTL::Utils::DYMTLIndirectCommandEncoder *this, char *a2)
{
  return &a2[*((void *)this + 8)];
}

__CFData *GPUTools::MTL::Utils::DYMTLConvertIndirectCommandBufferDataToFBufStream(uint64_t a1, void *a2, char a3, unint64_t a4, uint64_t a5, void *a6, __int16 a7)
{
  uint64_t v159 = *MEMORY[0x263EF8340];
  id v116 = a2;
  id v117 = a6;
  if (GPUTools::MTL::Utils::IsIndirectCommandBufferRender())
  {
    id v125 = v116;
    id v13 = v117;
    uint64_t v14 = (__CFData *)objc_alloc_init(MEMORY[0x263EFF990]);
    uint64_t v15 = (GPUTools::FB::Stream *)GPUTools::FB::Stream::Stream((GPUTools::FB::Stream *)v155, v14);
    GPUTools::FB::Stream::Open(v15, @"ConvertIndirectCommandBufferDataToFBufStreamRender");
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v148 = 0u;
    GPUTools::MTL::Utils::DYMTLCreateIndirectCommandEncoder((uint64_t *)a1, (uint64_t)&v148);
    v156[0] = 0;
    v156[1] = 0;
    int v157 = 0;
    if ((a7 & 0x8004) == 4) {
      int v16 = 4;
    }
    else {
      int v16 = 32772;
    }
    unsigned int v120 = v16;
    uint64_t v123 = a4 + a5;
    if (a4 < a4 + a5)
    {
      unsigned int v115 = v16 | 2;
      uint64_t v17 = *((void *)&v154 + 1);
      uint64_t v118 = v154;
      uint64_t v18 = *((void *)&v152 + 1) + a4 * *((void *)&v154 + 1);
      uint64_t v142 = v149 + a4 * *((void *)&v154 + 1);
      uint64_t v140 = *((void *)&v149 + 1) + a4 * *((void *)&v154 + 1);
      uint64_t v138 = v151 + a4 * *((void *)&v154 + 1);
      uint64_t v136 = v150 + a4 * *((void *)&v154 + 1);
      uint64_t v132 = v14;
      uint64_t v134 = *((void *)&v150 + 1) + a4 * *((void *)&v154 + 1);
      uint64_t v144 = *((void *)&v151 + 1) + a4 * *((void *)&v154 + 1);
      long long v19 = v148;
      do
      {
        uint64_t v24 = [v125 bytes];
        uint64_t v25 = v24 + a4 * v17;
        if (*(void *)(v25 + v19))
        {
          id v128 = *(id *)(v25 + v19);
          uint64_t v130 = v18;
          if (!*(unsigned char *)(a1 + 9))
          {
            [v13 renderPipelineIdForUniqueIdentifier:*(void *)(v25 + *((void *)&v19 + 1))];
            GPUTools::FB::Encode((uint64_t)v156, 4294951017, 4, (uint64_t)"Ct", v26, v27, v28, v29, a3);
            GPUTools::FB::Stream::Write((uint64_t)v155);
          }
          uint64_t v126 = v24 + a4 * v17;
          if (!*(unsigned char *)(a1 + 8))
          {
            if (*(void *)(a1 + 16))
            {
              unint64_t v30 = 0;
              uint64_t v31 = v24 + v18;
              do
              {
                [v13 bufferIdAndOffsetForGPUVirtualAddress:*(void *)(v24 + v142 + 8 * v30)];
                if (!*(unsigned char *)(a1 + 11) || *(void *)(v31 + 8 * v30) == -1) {
                  GPUTools::FB::Encode((uint64_t)v156, 4294951018, 4, (uint64_t)"Ctulul", v32, v33, v34, v35, a3);
                }
                else {
                  GPUTools::FB::Encode((uint64_t)v156, 4294952021, 4, (uint64_t)"Ctulul", v32, v33, v34, v35, a3);
                }
                GPUTools::FB::Stream::Write((uint64_t)v155);
                ++v30;
              }
              while (v30 < *(void *)(a1 + 16));
            }
            if (*(void *)(a1 + 24))
            {
              unint64_t v36 = 0;
              do
              {
                [v13 bufferIdAndOffsetForGPUVirtualAddress:*(void *)(v24 + v140 + 8 * v36)];
                GPUTools::FB::Encode((uint64_t)v156, 4294951033, 4, (uint64_t)"Ctulul", v37, v38, v39, v40, a3);
                GPUTools::FB::Stream::Write((uint64_t)v155);
                ++v36;
              }
              while (v36 < *(void *)(a1 + 24));
            }
            if (*(void *)(a1 + 48))
            {
              unint64_t v41 = 0;
              do
              {
                [v13 bufferIdAndOffsetForGPUVirtualAddress:*(void *)(v24 + v138 + 8 * v41)];
                GPUTools::FB::Encode((uint64_t)v156, 4294951154, 4, (uint64_t)"Ctulul", v42, v43, v44, v45, a3);
                GPUTools::FB::Stream::Write((uint64_t)v155);
                ++v41;
              }
              while (v41 < *(void *)(a1 + 48));
            }
            if (*(void *)(a1 + 32))
            {
              unint64_t v46 = 0;
              do
              {
                [v13 bufferIdAndOffsetForGPUVirtualAddress:*(void *)(v24 + v136 + 8 * v46)];
                GPUTools::FB::Encode((uint64_t)v156, 4294951905, 4, (uint64_t)"Ctulul", v47, v48, v49, v50, a3);
                GPUTools::FB::Stream::Write((uint64_t)v155);
                ++v46;
              }
              while (v46 < *(void *)(a1 + 32));
            }
            if (*(void *)(a1 + 40))
            {
              unint64_t v51 = 0;
              do
              {
                [v13 bufferIdAndOffsetForGPUVirtualAddress:*(void *)(v24 + v134 + 8 * v51)];
                GPUTools::FB::Encode((uint64_t)v156, 4294951895, 4, (uint64_t)"Ctulul", v52, v53, v54, v55, a3);
                GPUTools::FB::Stream::Write((uint64_t)v155);
                ++v51;
              }
              while (v51 < *(void *)(a1 + 40));
            }
          }
          uint64_t v18 = v130;
          if (*(void *)(a1 + 56))
          {
            unint64_t v56 = 0;
            do
            {
              GPUTools::FB::Encode((uint64_t)v156, 4294951915, 0, (uint64_t)"Culul", v20, v21, v22, v23, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
              ++v56;
            }
            while (v56 < *(void *)(a1 + 56));
          }
          switch((unint64_t)v128)
          {
            case 1uLL:
              GPUTools::FB::Encode((uint64_t)v156, 4294951078, v120, (uint64_t)"Cululululul", v20, v21, v22, v23, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
              break;
            case 2uLL:
              [v13 bufferIdAndOffsetForGPUVirtualAddress:*(void *)(v126 + v118 + 24)];
              GPUTools::FB::Encode((uint64_t)v156, 4294951079, v120, (uint64_t)"Cululultulullul", v57, v58, v59, v60, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
              break;
            case 3uLL:
            case 5uLL:
            case 6uLL:
            case 7uLL:
              break;
            case 4uLL:
              [v13 bufferIdAndOffsetForGPUVirtualAddress:*(void *)(v126 + v118)];
              [v13 bufferIdAndOffsetForGPUVirtualAddress:*(void *)(v126 + v118 + 48)];
              GPUTools::FB::Encode((uint64_t)v156, 4294951344, v120, (uint64_t)"Cululultululultulul", v61, v62, v63, v64, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
              break;
            case 8uLL:
              [v13 bufferIdAndOffsetForGPUVirtualAddress:*(void *)(v126 + v118)];
              GPUTools::FB::Encode((uint64_t)v156, 4294951148, v120, (uint64_t)"Ctulul", v65, v66, v67, v68, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
              GPUTools::FB::Encode((uint64_t)v156, 4294951164, v120, (uint64_t)"Cf", v69, v70, v71, v72, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
              [v13 bufferIdAndOffsetForGPUVirtualAddress:*(void *)(v126 + v118 + 48)];
              [v13 bufferIdAndOffsetForGPUVirtualAddress:*(void *)(v126 + v118 + 56)];
              GPUTools::FB::Encode((uint64_t)v156, 4294951151, v120, (uint64_t)"Cululultultululul", v73, v74, v75, v76, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
              break;
            default:
              if (v128 == (id)128)
              {
                GPUTools::FB::Encode((uint64_t)v156, 4294951880, v120, (uint64_t)"C@3ul@3ul@3ul", v20, v21, v22, v23, a3);
                GPUTools::FB::Stream::Write((uint64_t)v155);
              }
              else if (v128 == (id)256)
              {
                GPUTools::FB::Encode((uint64_t)v156, 4294951882, v120, (uint64_t)"C@3ul@3ul@3ul", v20, v21, v22, v23, a3);
                GPUTools::FB::Stream::Write((uint64_t)v155);
              }
              break;
          }
        }
        else
        {
          GPUTools::FB::Encode((uint64_t)v156, 4294957079, v115, (uint64_t)"C", v20, v21, v22, v23, a3);
          GPUTools::FB::Stream::Write((uint64_t)v155);
        }
        ++a4;
        v18 += v17;
        v142 += v17;
        v140 += v17;
        v138 += v17;
        v136 += v17;
        uint64_t v14 = v132;
        v134 += v17;
        v144 += v17;
      }
      while (a4 != v123);
    }
    GPUTools::FB::Stream::Flush((GPUTools::FB::Stream *)v155);
    GPUTools::FB::Stream::Close((GPUTools::FB::Stream *)v155);
    v113 = (void *)v156[0];
    if (!v156[0]) {
      goto LABEL_86;
    }
    goto LABEL_85;
  }
  if (GPUTools::MTL::Utils::IsIndirectCommandBufferCompute())
  {
    id v129 = v116;
    id v145 = v117;
    uint64_t v14 = (__CFData *)objc_alloc_init(MEMORY[0x263EFF990]);
    uint64_t v77 = (GPUTools::FB::Stream *)GPUTools::FB::Stream::Stream((GPUTools::FB::Stream *)v155, v14);
    GPUTools::FB::Stream::Open(v77, @"ConvertIndirectCommandBufferDataToFBufStreamCompute");
    long long v153 = 0u;
    long long v154 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v148 = 0u;
    GPUTools::MTL::Utils::DYMTLCreateIndirectCommandEncoder((uint64_t *)a1, (uint64_t)&v148);
    v146[0] = 0;
    v146[1] = 0;
    int v147 = 0;
    if ((a7 & 0x8004) == 4) {
      int v78 = 4;
    }
    else {
      int v78 = 32772;
    }
    unsigned int v124 = v78;
    uint64_t v127 = a4 + a5;
    if (a4 < a4 + a5)
    {
      uint64_t v79 = *((void *)&v154 + 1);
      unsigned int v121 = v78 | 2;
      uint64_t v80 = *((void *)&v152 + 1) + a4 * *((void *)&v154 + 1);
      uint64_t v137 = v151 + a4 * *((void *)&v154 + 1);
      uint64_t v141 = v152 + a4 * *((void *)&v154 + 1);
      uint64_t v119 = v154;
      uint64_t v81 = v154 + a4 * *((void *)&v154 + 1);
      uint64_t v143 = v81 + 24;
      long long v82 = v148;
      long long v133 = v14;
      uint64_t v122 = *((void *)&v154 + 1);
      do
      {
        uint64_t v139 = v81;
        uint64_t v87 = [v129 bytes];
        uint64_t v135 = v87 + a4 * v79;
        uint64_t v88 = *(void *)(v135 + v82);
        if (v88)
        {
          uint64_t v131 = v80;
          if (!*(unsigned char *)(a1 + 9))
          {
            [v145 computePipelineIdForUniqueIdentifier:*(void *)(v135 + *((void *)&v82 + 1))];
            GPUTools::FB::Encode((uint64_t)v146, 4294950959, 4, (uint64_t)"Ct", v89, v90, v91, v92, a3);
            GPUTools::FB::Stream::Write((uint64_t)v155);
          }
          if (!*(unsigned char *)(a1 + 8) && *(void *)(a1 + 48))
          {
            unint64_t v93 = 0;
            do
            {
              [v145 bufferIdAndOffsetForGPUVirtualAddress:*(void *)(v87 + v137 + 8 * v93)];
              if (!*(unsigned char *)(a1 + 11) || *(void *)(v87 + v80 + 8 * v93) == -1) {
                GPUTools::FB::Encode((uint64_t)v146, 4294950960, 4, (uint64_t)"Ctulul", v94, v95, v96, v97, a3);
              }
              else {
                GPUTools::FB::Encode((uint64_t)v146, 4294952012, 4, (uint64_t)"Ctulul", v94, v95, v96, v97, a3);
              }
              GPUTools::FB::Stream::Write((uint64_t)v155);
              ++v93;
            }
            while (v93 < *(void *)(a1 + 48));
          }
          uint64_t v14 = v133;
          if (*(void *)(a1 + 64))
          {
            unint64_t v98 = 0;
            do
            {
              GPUTools::FB::Encode((uint64_t)v146, 4294950968, 0, (uint64_t)"Culul", v83, v84, v85, v86, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
              ++v98;
            }
            while (v98 < *(void *)(a1 + 64));
          }
          if (v88 == 32)
          {
            uint64_t v107 = 0;
            uint64_t v79 = v122;
            uint64_t v80 = v131;
            do
            {
              v156[v107] = *(void *)(v87 + v139 + v107 * 8);
              ++v107;
            }
            while (v107 != 3);
            for (uint64_t i = 0; i != 24; i += 8)
              *(void *)&v158[i] = *(void *)(v87 + v143 + i);
            GPUTools::FB::Encode((uint64_t)v146, 4294951196, v124, (uint64_t)"C@6ul", v83, v84, v85, v86, a3);
            GPUTools::FB::Stream::Write((uint64_t)v155);
            if (*(unsigned char *)(v135 + v119 + 64))
            {
              GPUTools::FB::Encode((uint64_t)v146, 4294951471, v121, (uint64_t)"C", v109, v110, v111, v112, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
            }
            GPUTools::FB::Encode((uint64_t)v146, 4294950969, v124, (uint64_t)"C@3ul@3ul", v109, v110, v111, v112, a3);
            uint64_t v100 = v139;
            GPUTools::FB::Stream::Write((uint64_t)v155);
          }
          else
          {
            BOOL v99 = v88 == 64;
            uint64_t v79 = v122;
            uint64_t v80 = v131;
            uint64_t v100 = v139;
            if (v99)
            {
              for (uint64_t j = 0; j != 3; ++j)
                v156[j] = *(void *)(v87 + v139 + j * 8);
              for (uint64_t k = 0; k != 24; k += 8)
                *(void *)&v158[k] = *(void *)(v87 + v143 + k);
              GPUTools::FB::Encode((uint64_t)v146, 4294951196, v124, (uint64_t)"C@6ul", v83, v84, v85, v86, a3);
              GPUTools::FB::Stream::Write((uint64_t)v155);
              GPUTools::FB::Encode((uint64_t)v146, 4294951218, v124, (uint64_t)"C@3ul@3ul", v103, v104, v105, v106, a3);
              uint64_t v80 = v131;
              GPUTools::FB::Stream::Write((uint64_t)v155);
            }
          }
        }
        else
        {
          GPUTools::FB::Encode((uint64_t)v146, 4294957079, v121, (uint64_t)"C", v83, v84, v85, v86, a3);
          uint64_t v100 = v139;
          GPUTools::FB::Stream::Write((uint64_t)v155);
        }
        ++a4;
        v80 += v79;
        v137 += v79;
        v141 += v79;
        uint64_t v81 = v100 + v79;
        v143 += v79;
      }
      while (a4 != v127);
    }
    GPUTools::FB::Stream::Flush((GPUTools::FB::Stream *)v155);
    GPUTools::FB::Stream::Close((GPUTools::FB::Stream *)v155);
    v113 = (void *)v146[0];
    if (!v146[0]) {
      goto LABEL_86;
    }
LABEL_85:
    free(v113);
LABEL_86:
    MEMORY[0x2533620D0](v155);

    goto LABEL_88;
  }
  uint64_t v14 = 0;
LABEL_88:

  return v14;
}

void sub_24F711400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,void *a40)
{
  MEMORY[0x2533620D0](v41 - 208);

  _Unwind_Resume(a1);
}

void GPUTools::FB::Encode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = &a9;
  GPUTools::FB::VAListArgumentProvider::VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)v9, &a9);
  GPUTools::FB::Encode();
  GPUTools::FB::VAListArgumentProvider::~VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)v9);
}

void sub_24F7115BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  GPUTools::FB::VAListArgumentProvider::~VAListArgumentProvider((GPUTools::FB::VAListArgumentProvider *)va);
  _Unwind_Resume(a1);
}

uint64_t GPUTools::FB::Stream::Write(uint64_t a1)
{
  for (uint64_t i = (atomic_uint *)(a1 + 56); atomic_exchange(i, 1u) == 1; uint64_t i = (atomic_uint *)(a1 + 56))
  {
    while (*(_DWORD *)(a1 + 56) == 1)
      ;
  }
  uint64_t result = GPUTools::FB::Stream::Write_nolock();
  atomic_store(0, (unsigned int *)(a1 + 56));
  return result;
}

void sub_24F711634(_Unwind_Exception *a1)
{
  atomic_store(0, (unsigned int *)(v1 + 56));
  _Unwind_Resume(a1);
}

uint64_t GPUTools::FB::Stream::Flush(GPUTools::FB::Stream *this)
{
  for (uint64_t i = (atomic_uint *)((char *)this + 56); atomic_exchange(i, 1u) == 1; uint64_t i = (atomic_uint *)((char *)this + 56))
  {
    while (*((_DWORD *)this + 14) == 1)
      ;
  }
  uint64_t result = (*(uint64_t (**)(void))(*((void *)this + 5) + 16))();
  *((void *)this + 2) = *((void *)this + 1) + 8;
  *((unsigned char *)this + 60) = 1;
  atomic_store(0, (unsigned int *)this + 14);
  return result;
}

void sub_24F7116B8(_Unwind_Exception *a1)
{
  atomic_store(0, (unsigned int *)(v1 + 56));
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  uint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  long long v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    long long v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      long long v2 = v3;
    }
    while (v3);
  }
}

void DYMTLDispatchFunc(void *a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t *a6, void *a7)
{
  unint64_t v482 = a2;
  id v12 = a7;
  *(void *)&long long v477 = &v482;
  id v13 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, &v482, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
  uint64_t v20 = v13;
  if (a3 <= -7159)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    switch(a3)
    {
      case -16384:
        if (**(void **)(a4 + 8)) {
          id v116 = **(const char ***)(a4 + 8);
        }
        else {
          id v116 = "";
        }
        goto LABEL_317;
      case -16383:
      case -16370:
      case -16363:
      case -16344:
      case -16338:
      case -16321:
      case -16320:
      case -16317:
      case -16293:
      case -16291:
      case -16287:
      case -16280:
      case -16242:
      case -16241:
      case -16238:
      case -16127:
      case -16118:
      case -16097:
      case -16062:
      case -15973:
      case -15957:
      case -15935:
      case -15923:
      case -15879:
      case -15867:
      case -15801:
      case -15790:
      case -15769:
      case -15742:
      case -15685:
      case -15675:
      case -15659:
      case -15495:
      case -15494:
      case -15489:
        goto LABEL_3;
      case -16382:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v388 = **(void **)(a4 + 16);
        uint64_t v389 = **(void **)(a4 + 24);
        long long v477 = 0uLL;
        *(void *)&long long v478 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 32), (uint64_t)&v477);
        long long v461 = 0uLL;
        uint64_t v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 40), (uint64_t)&v461);
        *(void *)&long long v443 = *(void *)(a4 + 48);
        id v390 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v443, (uint64_t)&std::piecewise_construct, (void **)&v443)[3];
        uint64_t v391 = **(void **)(a4 + 56);
        uint64_t v392 = **(void **)(a4 + 64);
        long long v443 = 0uLL;
        uint64_t v444 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 72), (uint64_t)&v443);
        long long v441 = v477;
        uint64_t v442 = v478;
        long long v439 = v461;
        uint64_t v440 = v462;
        long long v437 = v443;
        uint64_t v438 = v444;
        [v20 copyFromTexture:v43 sourceSlice:v388 sourceLevel:v389 sourceOrigin:&v441 sourceSize:&v439 toTexture:v390 destinationSlice:v391 destinationLevel:v392 destinationOrigin:&v437];

        goto LABEL_461;
      case -16381:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v364 = **(void **)(a4 + 16);
        uint64_t v365 = **(void **)(a4 + 24);
        v366 = *(GPUTools::MTL ***)(a4 + 40);
        uint64_t v367 = **(void **)(a4 + 32);
        long long v477 = 0uLL;
        *(void *)&long long v478 = 0;
        GPUTools::MTL::MakeMTLSize(*v366, (uint64_t)&v477);
        *(void *)&long long v461 = *(void *)(a4 + 48);
        id v305 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v461, (uint64_t)&std::piecewise_construct, (void **)&v461)[3];
        uint64_t v368 = **(void **)(a4 + 56);
        uint64_t v369 = **(void **)(a4 + 64);
        long long v461 = 0uLL;
        uint64_t v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 72), (uint64_t)&v461);
        long long v459 = v477;
        uint64_t v460 = v478;
        long long v457 = v461;
        uint64_t v458 = v462;
        [v20 copyFromBuffer:v43 sourceOffset:v364 sourceBytesPerRow:v365 sourceBytesPerImage:v367 sourceSize:&v459 toTexture:v305 destinationSlice:v368 destinationLevel:v369 destinationOrigin:&v457];
        goto LABEL_430;
      case -16380:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v314 = **(void **)(a4 + 16);
        uint64_t v315 = **(void **)(a4 + 24);
        long long v477 = 0uLL;
        *(void *)&long long v478 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 32), (uint64_t)&v477);
        long long v461 = 0uLL;
        uint64_t v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 40), (uint64_t)&v461);
        *(void *)&long long v443 = *(void *)(a4 + 48);
        uint64_t v316 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v443, (uint64_t)&std::piecewise_construct, (void **)&v443)[3];
        uint64_t v317 = **(void **)(a4 + 56);
        uint64_t v318 = **(void **)(a4 + 64);
        uint64_t v319 = **(void **)(a4 + 72);
        long long v451 = v477;
        uint64_t v452 = v478;
        long long v449 = v461;
        uint64_t v450 = v462;
        [v20 copyFromTexture:v43 sourceSlice:v314 sourceLevel:v315 sourceOrigin:&v451 sourceSize:&v449 toBuffer:v316 destinationOffset:v317 destinationBytesPerRow:v318 destinationBytesPerImage:v319];
        goto LABEL_461;
      case -16379:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "generateMipmapsForTexture:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3]);
        break;
      case -16378:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t NSRange = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v44);
        objc_msgSend(v20, "fillBuffer:range:value:", v43, NSRange, v46, **(unsigned __int8 **)(a4 + 24));
        goto LABEL_461;
      case -16377:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v175 = **(void **)(a4 + 16);
        *(void *)&long long v477 = *(void *)(a4 + 24);
        objc_msgSend(v20, "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", v43, v175, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 32), **(void **)(a4 + 40));
        goto LABEL_461;
      case -16376:
      case -16325:
      case -16285:
      case -15789:
        [v13 endEncoding];
        break;
      case -16375:
        if (**(void **)(a4 + 8)) {
          uint64_t v126 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v126 = "";
        }
        goto LABEL_302;
      case -16374:
      case -16373:
      case -16371:
      case -16367:
      case -16366:
      case -16348:
      case -16323:
      case -16322:
      case -16244:
      case -16243:
      case -16239:
      case -16237:
      case -16235:
      case -16232:
      case -16231:
      case -16206:
      case -16205:
      case -16166:
      case -16115:
      case -16113:
      case -16112:
      case -16111:
      case -16108:
      case -16073:
      case -16072:
      case -16071:
      case -16070:
      case -16069:
      case -16068:
      case -16067:
      case -16065:
      case -16064:
      case -16037:
      case -16034:
      case -15920:
      case -15918:
      case -15917:
      case -15902:
      case -15807:
      case -15804:
      case -15797:
      case -15792:
      case -15791:
      case -15755:
      case -15754:
      case -15750:
      case -15746:
      case -15741:
      case -15739:
      case -15737:
      case -15736:
      case -15717:
      case -15701:
      case -15697:
      case -15694:
      case -15693:
      case -15687:
      case -15686:
      case -15684:
      case -15682:
      case -15681:
      case -15679:
      case -15678:
      case -15677:
      case -15674:
      case -15666:
      case -15665:
      case -15664:
      case -15660:
      case -15650:
      case -15606:
      case -15531:
      case -15411:
        break;
      case -16372:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -16369:
        [v13 contents];
        break;
      case -16368:
        GPUTools::MTL::MakeMTLTextureDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        id v34 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v135 = [v20 newTextureWithDescriptor:v34 offset:**(void **)(a4 + 16) bytesPerRow:**(void **)(a4 + 24)];
        *(void *)&long long v477 = a6;
        uint64_t v136 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        uint64_t v137 = (void *)v136[3];
        v136[3] = v135;

        *(void *)&long long v477 = a6;
        uint64_t v138 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v138[3], 0, v34);
        goto LABEL_467;
      case -16365:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -16364:
      case -16345:
        [v13 setProfilingEnabled:**(_DWORD **)(a4 + 8) != 0];
        break;
      case -16362:
        [v13 enqueue];
        break;
      case -16361:
        [v13 commit];
        break;
      case -16360:
        [v13 addScheduledHandler:&__block_literal_global_43];
        break;
      case -16359:
        if (std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, *(unint64_t **)(a4 + 8)))
        {
          *(void *)&long long v477 = *(void *)(a4 + 8);
          objc_msgSend(v20, "presentDrawable:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3]);
        }
        break;
      case -16358:
        if (std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, *(unint64_t **)(a4 + 8)))
        {
          *(void *)&long long v477 = *(void *)(a4 + 8);
          objc_msgSend(v20, "presentDrawable:atTime:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(double **)(a4 + 16));
        }
        break;
      case -16357:
        [v13 waitUntilScheduled];
        break;
      case -16356:
        [v13 addCompletedHandler:&__block_literal_global_41];
        break;
      case -16355:
        [v13 waitUntilCompleted];
        break;
      case -16354:
        uint64_t v85 = [v13 blitCommandEncoder];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -16353:
        GPUTools::MTL::MakeMTLRenderPassDescriptor(**(void **)(a4 + 8), (uint64_t)a1);
        id v28 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v97 = DYMTLNewStatefulRenderCommandEncoder(v20, v28);
        *(void *)&long long v477 = a6;
        unint64_t v98 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_458;
      case -16352:
        uint64_t v85 = DYMTLNewStatefulComputeCommandEncoder(v13, 0);
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -16351:
        GPUTools::MTL::MakeMTLRenderPassDescriptor(**(void **)(a4 + 8), (uint64_t)a1);
        id v28 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v97 = DYMTLNewStatefulParallelRenderCommandEncoder(v20, v28);
        *(void *)&long long v477 = a6;
        unint64_t v98 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_458;
      case -16350:
        uint64_t v85 = [v13 debugCommandEncoder];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -16349:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -16347:
        [v13 setSkipRender:**(_DWORD **)(a4 + 8) != 0];
        break;
      case -16346:
        [v13 setExecutionEnabled:**(_DWORD **)(a4 + 8) != 0];
        break;
      case -16343:
      case -16342:
        uint64_t v85 = [v13 commandBuffer];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -16341:
        [v13 insertDebugCaptureBoundary];
        break;
      case -16340:
        [v13 finish];
        break;
      case -16339:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -16337:
      case -15934:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setComputePipelineState:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3]);
        break;
      case -16336:
      case -16060:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setBuffer:offset:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(void **)(a4 + 24));
        break;
      case -16335:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v14);
        *((void *)&v477 + 1) = v184;
        GPUTools::MTL::DispatchBuffers(v20, -16335, **(unint64_t ***)(a4 + 8), **(uint64_t ***)(a4 + 16), &v477, (uint64_t)a1);
        break;
      case -16334:
      case -16058:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setTexture:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -16333:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((void *)&v477 + 1) = v385;
        GPUTools::MTL::DispatchTextures(v20, -16333, **(void **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16332:
      case -16056:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setSamplerState:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -16331:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((void *)&v477 + 1) = v161;
        GPUTools::MTL::DispatchSamplerStates(v20, -16331, **(void **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16330:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        v273 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477);
        LODWORD(v274) = **(_DWORD **)(a4 + 16);
        LODWORD(v275) = **(_DWORD **)(a4 + 24);
        [v20 setSamplerState:v273[3] lodMinClamp:**(void **)(a4 + 32) lodMaxClamp:v274 atIndex:v275];
        break;
      case -16329:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 32), v14);
        *((void *)&v477 + 1) = v384;
        GPUTools::MTL::DispatchSamplerStates(v20, -16329, **(unint64_t ***)(a4 + 8), **(int ***)(a4 + 16), **(int ***)(a4 + 24), &v477, (uint64_t)a1);
        break;
      case -16328:
      case -15927:
        objc_msgSend(v13, "setThreadgroupMemoryLength:atIndex:", **(void **)(a4 + 8), **(void **)(a4 + 16), 0, 0, 0);
        break;
      case -16327:
        long long v477 = 0uLL;
        *(void *)&long long v478 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v477);
        long long v461 = 0uLL;
        uint64_t v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 16), (uint64_t)&v461);
        long long v433 = v477;
        uint64_t v434 = v478;
        long long v431 = v461;
        uint64_t v432 = v462;
        [v20 dispatchThreadgroups:&v433 threadsPerThreadgroup:&v431];
        break;
      case -16324:
        if (**(void **)(a4 + 8)) {
          uint64_t v126 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v126 = "";
        }
        goto LABEL_302;
      case -16318:
        [v13 setMetalAssertionsEnabled:**(_DWORD **)(a4 + 8) != 0];
        break;
      case -16316:
        uint64_t v85 = [v13 newCommandQueue];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -16315:
        uint64_t v85 = [v13 newCommandQueueWithMaxCommandBufferCount:**(void **)(a4 + 8)];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -16314:
        uint64_t v85 = objc_msgSend(v13, "newBufferWithLength:options:", **(void **)(a4 + 8), **(void **)(a4 + 16), 0, 0, 0);
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -16313:
      case -16312:
        objc_msgSend(v12, "encodeIndirectArgumentsForBuffer:data:", *a6, **(void **)(a4 + 8), 0, 0, 0);
        uint64_t v85 = [v20 newBufferWithBytes:**(void **)(a4 + 8) length:**(void **)(a4 + 16) options:**(void **)(a4 + 24)];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -16311:
        GPUTools::MTL::MakeMTLDepthStencilDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        id v28 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v327 = [v20 newDepthStencilStateWithDescriptor:v28];
        *(void *)&long long v477 = a6;
        v328 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        v329 = (void *)v328[3];
        v328[3] = v327;

        *(void *)&long long v477 = a6;
        v330 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v330[3], 0, v28);
        goto LABEL_459;
      case -16310:
      case -16116:
      case -15980:
        GPUTools::MTL::MakeMTLTextureDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        id v28 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v289 = [v20 newTextureWithDescriptor:v28];
        *(void *)&long long v477 = a6;
        v290 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        v291 = (void *)v290[3];
        v290[3] = v289;

        *(void *)&long long v477 = a6;
        v292 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v292[3], 0, v28);
        goto LABEL_459;
      case -16309:
        GPUTools::MTL::MakeMTLSamplerDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        id v28 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v180 = [v20 newSamplerStateWithDescriptor:v28];
        *(void *)&long long v477 = a6;
        v181 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        v182 = (void *)v181[3];
        v181[3] = v180;

        *(void *)&long long v477 = a6;
        v183 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v183[3], 0, v28);
        goto LABEL_459;
      case -16308:
        uint64_t v85 = [v13 newDefaultLibrary];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -16307:
        uint64_t v140 = [DYMTLLibraryInfo alloc];
        if (**(void **)(a4 + 8)) {
          uint64_t v141 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v141 = "";
        }
        uint64_t v142 = [NSString stringWithUTF8String:v141];
        uint64_t v32 = [(DYMTLLibraryInfo *)v140 initWithType:1 code:v142 compileOptions:0];

        uint64_t v143 = [(DYMTLLibraryInfo *)v32 code];
        id v466 = 0;
        uint64_t v144 = [v20 newLibraryWithFile:v143 error:&v466];
        id v34 = v466;
        *(void *)&long long v477 = a6;
        id v145 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        v146 = (void *)v145[3];
        v145[3] = v144;

        *(void *)&long long v477 = a6;
        int v147 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v147[3], 3u, v32);
        goto LABEL_354;
      case -16306:
        v344 = *(GPUTools::MTL ***)(a4 + 8);
        v345 = *v344;
        *(void *)&long long v477 = v344;
        v346 = std::__hash_table<std::__hash_value_type<void *,unsigned long>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,unsigned long>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,unsigned long>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(a5, v344, (uint64_t)&std::piecewise_construct, (void **)&v477);
        v347 = GPUTools::MTL::MakeDispatchDataT(v345, v346[3]);
        v348 = [[DYMTLLibraryInfo alloc] initWithType:3 code:v347 compileOptions:0];
        id v467 = 0;
        uint64_t v349 = [v20 newLibraryWithData:v347 error:&v467];
        id v34 = v467;
        *(void *)&long long v477 = a6;
        v350 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        v351 = (void *)v350[3];
        v350[3] = v349;

        *(void *)&long long v477 = a6;
        v352 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v352[3], 3u, v348);

        goto LABEL_467;
      case -16305:
        v372 = [DYMTLLibraryInfo alloc];
        if (**(void **)(a4 + 8)) {
          v373 = **(const char ***)(a4 + 8);
        }
        else {
          v373 = "";
        }
        v374 = [NSString stringWithUTF8String:v373];
        v376 = GPUTools::MTL::MakeMTLCompileOptions(**(GPUTools::MTL ***)(a4 + 16), v375);
        uint64_t v32 = [(DYMTLLibraryInfo *)v372 initWithType:2 code:v374 compileOptions:v376];

        v377 = [(DYMTLLibraryInfo *)v32 code];
        v378 = [(DYMTLLibraryInfo *)v32 compileOptions];
        id v464 = 0;
        uint64_t v379 = [v20 newLibraryWithSource:v377 options:v378 error:&v464];
        id v34 = v464;
        *(void *)&long long v477 = a6;
        v380 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        v381 = (void *)v380[3];
        v380[3] = v379;

        *(void *)&long long v477 = a6;
        v382 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v382[3], 3u, v32);
        goto LABEL_354;
      case -16304:
        uint64_t v70 = [DYMTLLibraryInfo alloc];
        if (**(void **)(a4 + 8)) {
          uint64_t v71 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v71 = "";
        }
        uint64_t v72 = [NSString stringWithUTF8String:v71];
        uint64_t v74 = GPUTools::MTL::MakeMTLCompileOptions(**(GPUTools::MTL ***)(a4 + 16), v73);
        uint64_t v32 = [(DYMTLLibraryInfo *)v70 initWithType:2 code:v72 compileOptions:v74];

        uint64_t v75 = [(DYMTLLibraryInfo *)v32 code];
        uint64_t v76 = [(DYMTLLibraryInfo *)v32 compileOptions];
        id v465 = 0;
        uint64_t v77 = [v20 newLibraryWithSource:v75 options:v76 error:&v465];
        id v34 = v465;
        *(void *)&long long v477 = a6;
        int v78 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        uint64_t v79 = (void *)v78[3];
        v78[3] = v77;

        *(void *)&long long v477 = a6;
        uint64_t v80 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v80[3], 3u, v32);
        goto LABEL_354;
      case -16303:
      case -16301:
        GPUTools::MTL::MakeMTLRenderPipelineDescriptor(**(void **)(a4 + 8), (uint64_t)a1);
        uint64_t v32 = (DYMTLLibraryInfo *)objc_claimAutoreleasedReturnValue();
        id v475 = 0;
        uint64_t v33 = DYMTLNewRenderPipelineStateWithDescriptor(v20, v32, 0, (uint64_t)&v475);
        id v34 = v475;
        *(void *)&long long v477 = a6;
        uint64_t v35 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_353;
      case -16302:
      case -16300:
        GPUTools::MTL::MakeMTLRenderPipelineDescriptor(**(void **)(a4 + 8), (uint64_t)a1);
        id v25 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v26 = **(void **)(a4 + 16);
        id v474 = 0;
        uint64_t v27 = DYMTLNewRenderPipelineStateWithDescriptor(v20, v25, v26, (uint64_t)&v474);
        id v28 = v474;
        *(void *)&long long v477 = a6;
        uint64_t v29 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_345;
      case -16299:
      case -16297:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        uint64_t v32 = (DYMTLLibraryInfo *)(id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        id v469 = 0;
        uint64_t v33 = DYMTLNewComputePipelineStateWithFunction(v20, v32, 0, (uint64_t)&v469);
        id v34 = v469;
        *(void *)&long long v477 = a6;
        uint64_t v35 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_353;
      case -16298:
      case -16296:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v25 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v36 = **(void **)(a4 + 16);
        id v468 = 0;
        uint64_t v27 = DYMTLNewComputePipelineStateWithFunction(v20, v25, v36, (uint64_t)&v468);
        id v28 = v468;
        *(void *)&long long v477 = a6;
        uint64_t v29 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_345;
      case -16295:
        [v13 unmapShaderSampleBuffer];
        break;
      case -16294:
        GPUTools::MTL::MakeMTLTextureDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        id v34 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v354 = objc_msgSend(v20, "newTextureWithDescriptor:iosurface:plane:", v34, GPUTools::MTL::MakeIOSurface(**(void **)(a4 + 16), a1), **(void **)(a4 + 24));
        *(void *)&long long v477 = a6;
        v355 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        v356 = (void *)v355[3];
        v355[3] = v354;

        *(void *)&long long v477 = a6;
        v357 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v357[3], 0, v34);
        goto LABEL_467;
      case -16292:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -16290:
        if (**(void **)(a4 + 8)) {
          uint64_t v96 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v96 = "";
        }
        id v28 = [NSString stringWithUTF8String:v96];
        uint64_t v97 = [v20 newFunctionWithName:v28];
        *(void *)&long long v477 = a6;
        unint64_t v98 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_458;
      case -16288:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -16286:
        uint64_t v85 = DYMTLNewStatefulRenderCommandEncoder(v13);
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -16284:
        if (**(void **)(a4 + 8)) {
          uint64_t v126 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v126 = "";
        }
        goto LABEL_302;
      case -16283:
        if (**(void **)(a4 + 8)) {
          uint64_t v107 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v107 = "";
        }
        goto LABEL_86;
      case -16282:
      case -15787:
        [v13 popDebugGroup];
        break;
      case -16281:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -16279:
      case -15956:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setRenderPipelineState:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3]);
        break;
      case -16278:
      case -15955:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setVertexBuffer:offset:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(void **)(a4 + 24));
        break;
      case -16277:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v14);
        *((void *)&v477 + 1) = v90;
        GPUTools::MTL::DispatchBuffers(v20, -16277, **(unint64_t ***)(a4 + 8), **(uint64_t ***)(a4 + 16), &v477, (uint64_t)a1);
        break;
      case -16276:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setVertexTexture:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -16275:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((void *)&v477 + 1) = v56;
        GPUTools::MTL::DispatchTextures(v20, -16275, **(void **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16274:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setVertexSamplerState:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -16273:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((void *)&v477 + 1) = v99;
        GPUTools::MTL::DispatchSamplerStates(v20, -16273, **(void **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16272:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        v282 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477);
        LODWORD(v283) = **(_DWORD **)(a4 + 16);
        LODWORD(v284) = **(_DWORD **)(a4 + 24);
        [v20 setVertexSamplerState:v282[3] lodMinClamp:**(void **)(a4 + 32) lodMaxClamp:v283 atIndex:v284];
        break;
      case -16271:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 32), v14);
        *((void *)&v477 + 1) = v155;
        GPUTools::MTL::DispatchSamplerStates(v20, -16271, **(unint64_t ***)(a4 + 8), **(int ***)(a4 + 16), **(int ***)(a4 + 24), &v477, (uint64_t)a1);
        break;
      case -16270:
        v262 = **(_OWORD ***)(a4 + 8);
        long long v264 = v262[1];
        long long v263 = v262[2];
        v400[0] = *v262;
        v400[1] = v264;
        v400[2] = v263;
        [v13 setViewport:v400];
        break;
      case -16269:
        [v13 setFrontFacingWinding:**(void **)(a4 + 8)];
        break;
      case -16268:
        [v13 setCullMode:**(void **)(a4 + 8)];
        break;
      case -16267:
        [v13 setDepthClipMode:**(void **)(a4 + 8)];
        break;
      case -16266:
        LODWORD(v16) = **(_DWORD **)(a4 + 8);
        LODWORD(v17) = **(_DWORD **)(a4 + 16);
        LODWORD(v18) = **(_DWORD **)(a4 + 24);
        [v13 setDepthBias:v16 slopeScale:v17 clamp:v18];
        break;
      case -16265:
        long long v477 = 0u;
        long long v478 = 0u;
        GPUTools::MTL::MakeMTLScissorRect(**(GPUTools::MTL ***)(a4 + 8), &v477);
        v401[0] = v477;
        v401[1] = v478;
        [v20 setScissorRect:v401];
        break;
      case -16264:
        [v13 setTriangleFillMode:**(void **)(a4 + 8)];
        break;
      case -16263:
      case -15954:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setFragmentBuffer:offset:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(void **)(a4 + 24));
        break;
      case -16262:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v14);
        *((void *)&v477 + 1) = v343;
        GPUTools::MTL::DispatchBuffers(v20, -16262, **(unint64_t ***)(a4 + 8), **(uint64_t ***)(a4 + 16), &v477, (uint64_t)a1);
        break;
      case -16261:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setFragmentTexture:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -16260:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((void *)&v477 + 1) = v383;
        GPUTools::MTL::DispatchTextures(v20, -16260, **(void **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16259:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setFragmentSamplerState:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -16258:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((void *)&v477 + 1) = v358;
        GPUTools::MTL::DispatchSamplerStates(v20, -16258, **(void **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16257:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        uint64_t v48 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477);
        LODWORD(v49) = **(_DWORD **)(a4 + 16);
        LODWORD(v50) = **(_DWORD **)(a4 + 24);
        [v20 setFragmentSamplerState:v48[3] lodMinClamp:**(void **)(a4 + 32) lodMaxClamp:v49 atIndex:v50];
        break;
      case -16256:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 32), v14);
        *((void *)&v477 + 1) = v139;
        GPUTools::MTL::DispatchSamplerStates(v20, -16256, **(unint64_t ***)(a4 + 8), **(int ***)(a4 + 16), **(int ***)(a4 + 24), &v477, (uint64_t)a1);
        break;
      case -16255:
        LODWORD(v16) = **(_DWORD **)(a4 + 8);
        LODWORD(v17) = **(_DWORD **)(a4 + 16);
        LODWORD(v18) = **(_DWORD **)(a4 + 24);
        LODWORD(v19) = **(_DWORD **)(a4 + 32);
        [v13 setBlendColorRed:v16 green:v17 blue:v18 alpha:v19];
        break;
      case -16254:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setDepthStencilState:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3]);
        break;
      case -16253:
        [v13 setStencilReferenceValue:**(unsigned int **)(a4 + 8)];
        break;
      case -16252:
        objc_msgSend(v13, "setVisibilityResultMode:offset:", **(void **)(a4 + 8), **(void **)(a4 + 16), 0, 0, 0);
        break;
      case -16251:
        objc_msgSend(v13, "drawPrimitives:vertexStart:vertexCount:instanceCount:", **(void **)(a4 + 8), **(void **)(a4 + 16), **(void **)(a4 + 24), **(void **)(a4 + 32), 0);
        break;
      case -16250:
        objc_msgSend(v13, "drawPrimitives:vertexStart:vertexCount:", **(void **)(a4 + 8), **(void **)(a4 + 16), **(void **)(a4 + 24), 0, 0);
        break;
      case -16249:
        uint64_t v57 = **(void **)(a4 + 8);
        uint64_t v58 = **(void **)(a4 + 16);
        uint64_t v59 = **(void **)(a4 + 24);
        *(void *)&long long v477 = *(void *)(a4 + 32);
        objc_msgSend(v13, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:", v57, v58, v59, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 40), **(void **)(a4 + 48));
        break;
      case -16248:
        uint64_t v91 = **(void **)(a4 + 8);
        uint64_t v92 = **(void **)(a4 + 16);
        uint64_t v93 = **(void **)(a4 + 24);
        *(void *)&long long v477 = *(void *)(a4 + 32);
        objc_msgSend(v13, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", v91, v92, v93, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 40));
        break;
      case -16247:
        LODWORD(v16) = **(_DWORD **)(a4 + 8);
        [v13 setLineWidth:v16];
        break;
      case -16246:
        [v13 endEncoding];
LABEL_3:
        std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__erase_unique<unsigned long long>(a1, &v482);
        break;
      case -16245:
        if (**(void **)(a4 + 8)) {
          uint64_t v126 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v126 = "";
        }
        goto LABEL_302;
      case -16240:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -16234:
        long long v478 = 0u;
        long long v479 = 0u;
        long long v477 = 0u;
        GPUTools::MTL::MakeMTLRegion(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v477);
        uint64_t v276 = **(void **)(a4 + 16);
        uint64_t v277 = **(void **)(a4 + 24);
        uint64_t v278 = **(void **)(a4 + 32);
        v399[0] = v477;
        v399[1] = v478;
        v399[2] = v479;
        [v20 replaceRegion:v399 mipmapLevel:v276 withBytes:v277 bytesPerRow:v278];
        break;
      case -16233:
        id v34 = v13;
        uint64_t v370 = **(void **)(a4 + 8);
        if ([v34 textureType] == 5)
        {
          uint64_t v371 = 6;
        }
        else if ([v34 textureType] == 6)
        {
          uint64_t v371 = 6;
        }
        else
        {
          uint64_t v371 = 1;
        }
        uint64_t v68 = DYMTLNewTextureView(v34, v370, [v34 textureType], 0, objc_msgSend(v34, "mipmapLevelCount"), 0, objc_msgSend(v34, "arrayLength") * v371);
        *(void *)&long long v477 = a6;
        uint64_t v69 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_466;
      case -16227:
        objc_msgSend(v13, "setBytes:length:atIndex:", **(void **)(a4 + 8), **(void **)(a4 + 16), **(void **)(a4 + 24), 0, 0);
        break;
      case -16226:
        objc_msgSend(v13, "setBufferOffset:atIndex:", **(void **)(a4 + 8), **(void **)(a4 + 16), 0, 0, 0);
        break;
      case -16225:
        objc_msgSend(v13, "setVertexBytes:length:atIndex:", **(void **)(a4 + 8), **(void **)(a4 + 16), **(void **)(a4 + 24), 0, 0);
        break;
      case -16224:
        objc_msgSend(v13, "setVertexBufferOffset:atIndex:", **(void **)(a4 + 8), **(void **)(a4 + 16), 0, 0, 0);
        break;
      case -16223:
        objc_msgSend(v13, "setFragmentBytes:length:atIndex:", **(void **)(a4 + 8), **(void **)(a4 + 16), **(void **)(a4 + 24), 0, 0);
        break;
      case -16222:
        objc_msgSend(v13, "setFragmentBufferOffset:atIndex:", **(void **)(a4 + 8), **(void **)(a4 + 16), 0, 0, 0);
        break;
      case -16220:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        unint64_t v51 = *(GPUTools::MTL ***)(a4 + 24);
        uint64_t v52 = **(void **)(a4 + 16);
        long long v477 = 0uLL;
        *(void *)&long long v478 = 0;
        GPUTools::MTL::MakeMTLSize(*v51, (uint64_t)&v477);
        long long v429 = v477;
        uint64_t v430 = v478;
        [v20 dispatchThreadgroupsWithIndirectBuffer:v43 indirectBufferOffset:v52 threadsPerThreadgroup:&v429];
        goto LABEL_461;
      case -16219:
        objc_msgSend(v13, "setStencilFrontReferenceValue:backReferenceValue:", **(unsigned int **)(a4 + 8), **(unsigned int **)(a4 + 16), 0, 0, 0);
        break;
      case -16218:
      case -15949:
        [v13 drawPrimitives:**(void **)(a4 + 8) vertexStart:**(void **)(a4 + 16) vertexCount:**(void **)(a4 + 24) instanceCount:**(void **)(a4 + 32) baseInstance:**(void **)(a4 + 40)];
        break;
      case -16217:
      case -15948:
        uint64_t v53 = **(void **)(a4 + 8);
        uint64_t v54 = **(void **)(a4 + 16);
        uint64_t v55 = **(void **)(a4 + 24);
        *(void *)&long long v477 = *(void *)(a4 + 32);
        objc_msgSend(v13, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:", v53, v54, v55, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 40), **(void **)(a4 + 48), **(void **)(a4 + 56), **(void **)(a4 + 64));
        break;
      case -16216:
        uint64_t v115 = **(void **)(a4 + 8);
        *(void *)&long long v477 = *(void *)(a4 + 16);
        objc_msgSend(v13, "drawPrimitives:indirectBuffer:indirectBufferOffset:", v115, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 24));
        break;
      case -16215:
        uint64_t v87 = **(void **)(a4 + 8);
        uint64_t v88 = **(void **)(a4 + 16);
        *(void *)&long long v477 = *(void *)(a4 + 24);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v89 = **(void **)(a4 + 32);
        *(void *)&long long v477 = *(void *)(a4 + 40);
        objc_msgSend(v20, "drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:", v87, v88, v43, v89, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 48));
        goto LABEL_461;
      case -16214:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v353 = **(void **)(a4 + 16);
        *(void *)&long long v477 = *(void *)(a4 + 24);
        objc_msgSend(v20, "setFragmentTexture:atTextureIndex:samplerState:atSamplerIndex:", v43, v353, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 32));
        goto LABEL_461;
      case -16210:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v336 = **(void **)(a4 + 16);
        uint64_t v337 = **(void **)(a4 + 24);
        v338 = *(GPUTools::MTL ***)(a4 + 40);
        uint64_t v339 = **(void **)(a4 + 32);
        long long v477 = 0uLL;
        *(void *)&long long v478 = 0;
        GPUTools::MTL::MakeMTLSize(*v338, (uint64_t)&v477);
        *(void *)&long long v461 = *(void *)(a4 + 48);
        id v305 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v461, (uint64_t)&std::piecewise_construct, (void **)&v461)[3];
        uint64_t v340 = **(void **)(a4 + 56);
        uint64_t v341 = **(void **)(a4 + 64);
        long long v461 = 0uLL;
        uint64_t v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 72), (uint64_t)&v461);
        uint64_t v342 = **(void **)(a4 + 80);
        long long v455 = v477;
        uint64_t v456 = v478;
        long long v453 = v461;
        uint64_t v454 = v462;
        [v20 copyFromBuffer:v43 sourceOffset:v336 sourceBytesPerRow:v337 sourceBytesPerImage:v339 sourceSize:&v455 toTexture:v305 destinationSlice:v340 destinationLevel:v341 destinationOrigin:&v453 options:v342];
        goto LABEL_430;
      case -16209:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v119 = **(void **)(a4 + 16);
        uint64_t v120 = **(void **)(a4 + 24);
        long long v477 = 0uLL;
        *(void *)&long long v478 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 32), (uint64_t)&v477);
        long long v461 = 0uLL;
        uint64_t v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 40), (uint64_t)&v461);
        *(void *)&long long v443 = *(void *)(a4 + 48);
        uint64_t v121 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v443, (uint64_t)&std::piecewise_construct, (void **)&v443)[3];
        uint64_t v122 = **(void **)(a4 + 56);
        uint64_t v123 = **(void **)(a4 + 64);
        uint64_t v124 = **(void **)(a4 + 72);
        uint64_t v125 = **(void **)(a4 + 80);
        long long v447 = v477;
        uint64_t v448 = v478;
        long long v445 = v461;
        uint64_t v446 = v462;
        [v20 copyFromTexture:v43 sourceSlice:v119 sourceLevel:v120 sourceOrigin:&v447 sourceSize:&v445 toBuffer:v121 destinationOffset:v122 destinationBytesPerRow:v123 destinationBytesPerImage:v124 options:v125];
        goto LABEL_461;
      case -16202:
        [v13 commitAndHold];
        break;
      case -16200:
      case -16198:
        GPUTools::MTL::MakeMTLComputePipelineDescriptor(**(void **)(a4 + 8), (uint64_t)a1);
        uint64_t v32 = (DYMTLLibraryInfo *)objc_claimAutoreleasedReturnValue();
        id v471 = 0;
        uint64_t v33 = DYMTLNewComputePipelineStateWithDescriptor(v20, v32, 0, (uint64_t)&v471);
        id v34 = v471;
        *(void *)&long long v477 = a6;
        uint64_t v35 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_353;
      case -16199:
      case -16197:
        GPUTools::MTL::MakeMTLComputePipelineDescriptor(**(void **)(a4 + 8), (uint64_t)a1);
        id v25 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v30 = **(void **)(a4 + 16);
        id v470 = 0;
        uint64_t v27 = DYMTLNewComputePipelineStateWithDescriptor(v20, v25, v30, (uint64_t)&v470);
        id v28 = v470;
        *(void *)&long long v477 = a6;
        uint64_t v29 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_345;
      case -16196:
        id v34 = v13;
        uint64_t v60 = **(void **)(a4 + 8);
        uint64_t v61 = **(void **)(a4 + 16);
        uint64_t v63 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v62);
        unint64_t v65 = (unint64_t)v64;
        uint64_t v66 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 32), v64);
        uint64_t v68 = DYMTLNewTextureView(v34, v60, v61, v63, v65, v66, v67);
        *(void *)&long long v477 = a6;
        uint64_t v69 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_466;
      case -16165:
        GPUTools::MTL::MakeMTLCommandQueueDescriptor(**(void **)(a4 + 8));
        id v28 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v81 = [v20 newCommandQueueWithDescriptor:v28];
        *(void *)&long long v477 = a6;
        long long v82 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        uint64_t v83 = (void *)v82[3];
        v82[3] = v81;

        *(void *)&long long v477 = a6;
        uint64_t v84 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v84[3], 0, v28);
        goto LABEL_459;
      case -16163:
        uint64_t v85 = objc_msgSend(v13, "newBufferWithIOSurface:", GPUTools::MTL::MakeIOSurface(**(void **)(a4 + 8), a1));
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -16162:
      case -16159:
        objc_msgSend(v13, "setColorStoreAction:atIndex:", **(void **)(a4 + 8), **(void **)(a4 + 16), 0, 0, 0);
        break;
      case -16161:
      case -16158:
        [v13 setDepthStoreAction:**(void **)(a4 + 8)];
        break;
      case -16160:
      case -16157:
        [v13 setStencilStoreAction:**(void **)(a4 + 8)];
        break;
      case -16156:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setColorResolveTexture:slice:depthPlane:level:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(void **)(a4 + 24), **(void **)(a4 + 32), **(void **)(a4 + 40));
        break;
      case -16155:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setDepthResolveTexture:slice:depthPlane:level:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(void **)(a4 + 24), **(void **)(a4 + 32));
        break;
      case -16149:
        objc_msgSend(v13, "setImageblockWidth:height:", **(void **)(a4 + 8), **(void **)(a4 + 16), 0, 0, 0);
        break;
      case -16148:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setTessellationFactorBuffer:offset:instanceStride:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(void **)(a4 + 24));
        break;
      case -16147:
        uint64_t v202 = **(void **)(a4 + 8);
        uint64_t v203 = **(void **)(a4 + 16);
        uint64_t v204 = **(void **)(a4 + 24);
        *(void *)&long long v477 = *(void *)(a4 + 32);
        objc_msgSend(v13, "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:", v202, v203, v204, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 40), **(void **)(a4 + 48), **(void **)(a4 + 56));
        break;
      case -16146:
        uint64_t v359 = **(void **)(a4 + 8);
        *(void *)&long long v477 = *(void *)(a4 + 16);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v360 = **(void **)(a4 + 24);
        *(void *)&long long v477 = *(void *)(a4 + 32);
        objc_msgSend(v20, "drawPatches:patchIndexBuffer:patchIndexBufferOffset:indirectBuffer:indirectBufferOffset:", v359, v43, v360, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 40));
        goto LABEL_461;
      case -16145:
        uint64_t v269 = **(void **)(a4 + 8);
        uint64_t v270 = **(void **)(a4 + 16);
        uint64_t v271 = **(void **)(a4 + 24);
        *(void *)&long long v477 = *(void *)(a4 + 32);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v272 = **(void **)(a4 + 40);
        *(void *)&long long v477 = *(void *)(a4 + 48);
        objc_msgSend(v20, "drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:", v269, v270, v271, v43, v272, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 56), **(void **)(a4 + 64), **(void **)(a4 + 72));
        goto LABEL_461;
      case -16144:
        uint64_t v130 = **(void **)(a4 + 8);
        *(void *)&long long v477 = *(void *)(a4 + 16);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v131 = **(void **)(a4 + 24);
        *(void *)&long long v477 = *(void *)(a4 + 32);
        id v132 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v133 = **(void **)(a4 + 40);
        *(void *)&long long v477 = *(void *)(a4 + 48);
        objc_msgSend(v20, "drawIndexedPatches:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:indirectBuffer:indirectBufferOffset:", v130, v43, v131, v132, v133, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 56));

        goto LABEL_461;
      case -16143:
        objc_msgSend(v13, "setTileBytes:length:atIndex:", **(void **)(a4 + 8), **(void **)(a4 + 16), **(void **)(a4 + 24), 0, 0);
        break;
      case -16142:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setTileBuffer:offset:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(void **)(a4 + 24));
        break;
      case -16141:
        objc_msgSend(v13, "setTileBufferOffset:atIndex:", **(void **)(a4 + 8), **(void **)(a4 + 16), 0, 0, 0);
        break;
      case -16140:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setTileTexture:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -16139:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setTileSamplerState:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -16138:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        v361 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477);
        LODWORD(v362) = **(_DWORD **)(a4 + 16);
        LODWORD(v363) = **(_DWORD **)(a4 + 24);
        [v20 setTileSamplerState:v361[3] lodMinClamp:**(void **)(a4 + 32) lodMaxClamp:v362 atIndex:v363];
        break;
      case -16137:
        long long v477 = 0uLL;
        *(void *)&long long v478 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v477);
        long long v411 = v477;
        uint64_t v412 = v478;
        [v20 dispatchThreadsPerTile:&v411];
        break;
      case -16136:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -16133:
        if (std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, *(unint64_t **)(a4 + 8)))
        {
          *(void *)&long long v477 = *(void *)(a4 + 8);
          objc_msgSend(v20, "presentDrawable:afterMinimumDuration:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(double **)(a4 + 16));
        }
        break;
      case -16132:
        LODWORD(v16) = **(_DWORD **)(a4 + 8);
        [v13 setTessellationFactorScale:v16];
        break;
      case -16131:
      case -16129:
      case -15781:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "waitForFence:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3]);
        break;
      case -16130:
      case -16124:
      case -15785:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "updateFence:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3]);
        break;
      case -16128:
        uint64_t v85 = [v13 newFence];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -16126:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "updateFence:afterStages:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -16125:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "waitForFence:beforeStages:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -16123:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -16122:
      case -16114:
      case -15919:
      case -15651:
        [v13 makeAliasable];
        break;
      case -16120:
        GPUTools::MTL::MakeMTLHeapDescriptor(**(void **)(a4 + 8));
        id v28 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v310 = [v20 newHeapWithDescriptor:v28];
        *(void *)&long long v477 = a6;
        v311 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        v312 = (void *)v311[3];
        v311[3] = v310;

        *(void *)&long long v477 = a6;
        v313 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v313[3], 0, v28);
        goto LABEL_459;
      case -16119:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -16117:
        objc_msgSend(v12, "encodeIndirectArgumentsForBuffer:data:", *a6, **(void **)(a4 + 8), 0, 0, 0);
        uint64_t v85 = [v20 newBufferWithLength:**(void **)(a4 + 8) options:**(void **)(a4 + 16)];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -16107:
        if (**(void **)(a4 + 8)) {
          v222 = **(const char ***)(a4 + 8);
        }
        else {
          v222 = "";
        }
        id v25 = [NSString stringWithUTF8String:v222];
        uint64_t v103 = GPUTools::MTL::MakeMTLFunctionConstantValue(**(GPUTools::MTL ***)(a4 + 16), v223);
        id v415 = 0;
        uint64_t v224 = [v20 newFunctionWithName:v25 constantValues:v103 error:&v415];
        id v28 = v415;
        *(void *)&long long v477 = a6;
        v225 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        v226 = (void *)v225[3];
        v225[3] = v224;

        *(void *)&long long v477 = a6;
        v227 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v227[3], 4u, v103);
        goto LABEL_380;
      case -16106:
        if (**(void **)(a4 + 8)) {
          v321 = **(const char ***)(a4 + 8);
        }
        else {
          v321 = "";
        }
        id v25 = [NSString stringWithUTF8String:v321];
        uint64_t v103 = GPUTools::MTL::MakeMTLFunctionConstantValue(**(GPUTools::MTL ***)(a4 + 16), v322);
        id v416 = 0;
        uint64_t v323 = [v20 newFunctionWithName:v25 constantValues:v103 error:&v416];
        id v28 = v416;
        *(void *)&long long v477 = a6;
        v324 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        v325 = (void *)v324[3];
        v324[3] = v323;

        *(void *)&long long v477 = a6;
        v326 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v326[3], 4u, v103);
        goto LABEL_380;
      case -16105:
        [v13 maxAvailableSizeWithAlignment:**(void **)(a4 + 8)];
        break;
      case -16101:
        GPUTools::MTL::MakeMTLArray(**(void **)(a4 + 8), (uint64_t)a1);
        id v25 = (id)objc_claimAutoreleasedReturnValue();
        MTLImageFilterFunctionInfo = GPUTools::MTL::MakeMTLImageFilterFunctionInfo(**(GPUTools::MTL ***)(a4 + 16), v101);
        id v480 = 0;
        uint64_t v103 = (void *)[v20 newComputePipelineStateWithImageFilterFunctionsSPI:v25 imageFilterFunctionInfo:MTLImageFilterFunctionInfo error:&v480];
        id v28 = v480;
        *(void *)&long long v477 = a6;
        uint64_t v104 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        objc_storeStrong(v104 + 3, v103);
        unint64_t v105 = 0;
        uint64_t v106 = 2;
        while (v105 < [v25 count])
        {
          free((void *)MTLImageFilterFunctionInfo[v106]);
          ++v105;
          v106 += 3;
        }
        goto LABEL_160;
      case -16100:
        long long v478 = 0u;
        long long v479 = 0u;
        long long v477 = 0u;
        GPUTools::MTL::MakeMTLRegion(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v477);
        v424[0] = v477;
        v424[1] = v478;
        v424[2] = v479;
        [v20 setStageInRegion:v424];
        break;
      case -16099:
        GPUTools::MTL::MakeMTLTextureDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        id v34 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v331 = [v20 newTextureLayoutWithDescriptor:v34 isHeapOrBufferBacked:**(_DWORD **)(a4 + 16) != 0];
        *(void *)&long long v477 = a6;
        v332 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        v333 = (void *)v332[3];
        v332[3] = v331;

        *(void *)&long long v477 = a6;
        v334 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v334[3], 0, v34);
        goto LABEL_467;
      case -16098:
        GPUTools::MTL::MakeMTLTextureDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        id v34 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v108 = [v20 newLinearTextureWithDescriptor:v34 offset:**(void **)(a4 + 16) bytesPerRow:**(void **)(a4 + 24) bytesPerImage:**(void **)(a4 + 32)];
        *(void *)&long long v477 = a6;
        uint64_t v109 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        uint64_t v110 = (void *)v109[3];
        v109[3] = v108;

        *(void *)&long long v477 = a6;
        uint64_t v111 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v111[3], 0, v34);
        goto LABEL_467;
      case -16096:
        GPUTools::MTL::MakeMTLTextureDescriptor(**(GPUTools::MTL ***)(a4 + 24), v14);
        id v34 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v167 = [v20 newTextureWithBytesNoCopy:**(void **)(a4 + 8) length:**(void **)(a4 + 16) descriptor:v34 deallocator:&__block_literal_global_3];
        *(void *)&long long v477 = a6;
        v168 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        v169 = (void *)v168[3];
        v168[3] = v167;

        *(void *)&long long v477 = a6;
        v170 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v170[3], 0, v34);
        goto LABEL_467;
      case -16093:
        [v13 minLinearTextureAlignmentForPixelFormat:**(void **)(a4 + 8)];
        break;
      case -16091:
      case -16089:
        GPUTools::MTL::MakeMTLTileRenderPipelineDescriptor(**(const char ***)(a4 + 8), (uint64_t)a1);
        uint64_t v32 = (DYMTLLibraryInfo *)objc_claimAutoreleasedReturnValue();
        id v473 = 0;
        uint64_t v33 = DYMTLNewRenderPipelineStateWithTileDescriptor(v20, v32, 0, (uint64_t)&v473);
        id v34 = v473;
        *(void *)&long long v477 = a6;
        uint64_t v35 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_353;
      case -16090:
      case -16088:
        GPUTools::MTL::MakeMTLTileRenderPipelineDescriptor(**(const char ***)(a4 + 8), (uint64_t)a1);
        id v25 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v31 = **(void **)(a4 + 16);
        id v472 = 0;
        uint64_t v27 = DYMTLNewRenderPipelineStateWithTileDescriptor(v20, v25, v31, (uint64_t)&v472);
        id v28 = v472;
        *(void *)&long long v477 = a6;
        uint64_t v29 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_345;
      case -16087:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v14);
        *((void *)&v477 + 1) = v118;
        GPUTools::MTL::DispatchBuffers(v20, -16087, **(unint64_t ***)(a4 + 8), **(uint64_t ***)(a4 + 16), &v477, (uint64_t)a1);
        break;
      case -16086:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((void *)&v477 + 1) = v151;
        GPUTools::MTL::DispatchTextures(v20, -16086, **(void **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16085:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((void *)&v477 + 1) = v335;
        GPUTools::MTL::DispatchSamplerStates(v20, -16085, **(void **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16084:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 32), v14);
        *((void *)&v477 + 1) = v117;
        GPUTools::MTL::DispatchSamplerStates(v20, -16084, **(unint64_t ***)(a4 + 8), **(int ***)(a4 + 16), **(int ***)(a4 + 24), &v477, (uint64_t)a1);
        break;
      case -16083:
        if (**(void **)(a4 + 8)) {
          uint64_t v94 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v94 = "";
        }
        uint64_t v95 = [NSString stringWithUTF8String:v94];
        [v20 setOverrideTriple:v95];
        goto LABEL_456;
      case -16079:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "dispatchThreadsWithIndirectBuffer:indirectBufferOffset:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -16078:
        long long v477 = 0uLL;
        *(void *)&long long v478 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v477);
        long long v461 = 0uLL;
        uint64_t v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 16), (uint64_t)&v461);
        long long v427 = v477;
        uint64_t v428 = v478;
        long long v425 = v461;
        uint64_t v426 = v462;
        [v20 dispatchThreads:&v427 threadsPerThreadgroup:&v425];
        break;
      case -16077:
        v171 = **(char ***)(a4 + 16);
        double ViewportArray = GPUTools::MTL::MakeViewportArray(**(GPUTools::MTL ***)(a4 + 8), v171);
        v174 = v173;
        objc_msgSend(v20, "setViewports:count:", v173, v171, ViewportArray);
        goto LABEL_213;
      case -16076:
        v207 = **(char ***)(a4 + 16);
        double ScissorRectArray = GPUTools::MTL::MakeScissorRectArray(**(GPUTools::MTL ***)(a4 + 8), v207);
        v174 = v209;
        objc_msgSend(v20, "setScissorRects:count:", v209, v207, ScissorRectArray);
LABEL_213:
        free(v174);
        break;
      case -16075:
        uint64_t v112 = *(GPUTools::MTL ***)(a4 + 8);
        v113 = *v112;
        *(void *)&long long v477 = v112;
        uint64_t v114 = std::__hash_table<std::__hash_value_type<void *,unsigned long>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,unsigned long>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,unsigned long>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(a5, v112, (uint64_t)&std::piecewise_construct, (void **)&v477);
        GPUTools::MTL::MakePipelineLibraryDirectory(v113, (const void *)v114[3]);
        uint64_t v32 = (DYMTLLibraryInfo *)objc_claimAutoreleasedReturnValue();
        id v463 = 0;
        uint64_t v33 = [v20 newPipelineLibraryWithFilePath:v32 error:&v463];
        id v34 = v463;
        *(void *)&long long v477 = a6;
        uint64_t v35 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_353;
      case -16074:
        objc_msgSend(v13, "setThreadgroupMemoryLength:offset:atIndex:", **(void **)(a4 + 8), **(void **)(a4 + 16), **(void **)(a4 + 24), 0, 0);
        break;
      case -16063:
        if (**(void **)(a4 + 8)) {
          id v116 = **(const char ***)(a4 + 8);
        }
        else {
          id v116 = "";
        }
        goto LABEL_317;
      case -16061:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setArgumentBuffer:offset:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -16059:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v14);
        *((void *)&v477 + 1) = v185;
        GPUTools::MTL::DispatchBuffers(v20, -16059, **(unint64_t ***)(a4 + 8), **(uint64_t ***)(a4 + 16), &v477, (uint64_t)a1);
        break;
      case -16057:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((void *)&v477 + 1) = v162;
        GPUTools::MTL::DispatchTextures(v20, -16057, **(void **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16055:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((void *)&v477 + 1) = v100;
        GPUTools::MTL::DispatchSamplerStates(v20, -16055, **(void **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -16053:
        uint64_t v85 = [v13 newArgumentEncoderForBufferAtIndex:**(void **)(a4 + 8)];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -16052:
      case -16051:
        uint64_t v85 = [v13 newArgumentEncoderWithBufferIndex:**(void **)(a4 + 8)];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -16047:
      case -16043:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "useResource:usage:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -16046:
      case -16042:
        GPUTools::MTL::DispatchResources(v13, a3, **(void *****)(a4 + 8), **(void **)(a4 + 16), **(void **)(a4 + 24), (uint64_t)a1);
        break;
      case -16045:
      case -16041:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "useHeap:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3]);
        break;
      case -16044:
      case -16040:
        GPUTools::MTL::DispatchHeaps(v13, a3, **(void *****)(a4 + 8), **(void **)(a4 + 16), (uint64_t)a1);
        break;
      case -16038:
        if (**(void **)(a4 + 8)) {
          v320 = **(const char ***)(a4 + 8);
        }
        else {
          v320 = "";
        }
        id v28 = [NSString stringWithUTF8String:v320];
        uint64_t v97 = [v20 newExternFunctionWithName:v28];
        *(void *)&long long v477 = a6;
        unint64_t v98 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_458;
      case -16033:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setArgumentBuffer:startOffset:arrayElement:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(void **)(a4 + 24));
        break;
      case -16029:
        GPUTools::MTL::MakeMTLArray(**(void **)(a4 + 8), (uint64_t)a1);
        id v25 = (id)objc_claimAutoreleasedReturnValue();
        MTLImageFilterFunctionInfo = GPUTools::MTL::MakeMTLImageFilterFunctionInfo(**(GPUTools::MTL ***)(a4 + 16), v163);
        id v481 = 0;
        uint64_t v103 = (void *)[v20 newLibraryWithCIFilters:v25 imageFilterFunctionInfo:MTLImageFilterFunctionInfo error:&v481];
        id v28 = v481;
        *(void *)&long long v477 = a6;
        v164 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        objc_storeStrong(v164 + 3, v103);
        unint64_t v165 = 0;
        uint64_t v166 = 2;
        while (v165 < [v25 count])
        {
          free((void *)MTLImageFilterFunctionInfo[v166]);
          ++v165;
          v166 += 3;
        }
LABEL_160:
        free(MTLImageFilterFunctionInfo);
LABEL_380:

        goto LABEL_381;
      case -16028:
      case -16022:
        objc_msgSend(v13, "setColorStoreActionOptions:atIndex:", **(void **)(a4 + 8), **(void **)(a4 + 16), 0, 0, 0);
        break;
      case -16027:
      case -16021:
        [v13 setDepthStoreActionOptions:**(void **)(a4 + 8)];
        break;
      case -16026:
      case -16020:
        [v13 setStencilStoreActionOptions:**(void **)(a4 + 8)];
        break;
      case -16017:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setStageInRegionWithIndirectBuffer:indirectBufferOffset:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -16014:
        uint64_t v85 = DYMTLNewStatefulComputeCommandEncoder(v13, **(void **)(a4 + 8));
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -16009:
        [v13 memoryBarrierWithScope:**(void **)(a4 + 8)];
        break;
      case -16008:
        goto LABEL_374;
      case -16003:
        uint64_t v22 = *(void *)(a4 + 24);
        uint64_t v23 = *(void *)(a4 + 32);
LABEL_374:
        GPUTools::MTL::DispatchMemoryBarrierWithResources(v13, a3, **(void *****)(a4 + 8), **(void **)(a4 + 16), v22, v23, (uint64_t)a1);
        break;
      case -16002:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setRenderPipelineState:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -16001:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((void *)&v477 + 1) = v205;
        GPUTools::MTL::DispatchPipelineStates(v20, -16001, **(void **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -15999:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((void *)&v477 + 1) = v134;
        GPUTools::MTL::DispatchPipelineStates(v20, -15999, **(void **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -15997:
        uint64_t v85 = [v13 newEvent];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15996:
        uint64_t v85 = [v13 newSharedEvent];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15995:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "optimizeContentsForGPUAccess:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3]);
        break;
      case -15994:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "optimizeContentsForGPUAccess:slice:level:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(void **)(a4 + 24));
        break;
      case -15993:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "optimizeContentsForCPUAccess:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3]);
        break;
      case -15992:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "optimizeContentsForCPUAccess:slice:level:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(void **)(a4 + 24));
        break;
      case -15991:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "encodeWaitForEvent:value:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -15990:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "encodeSignalEvent:value:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -15988:
        LODWORD(v16) = **(_DWORD **)(a4 + 8);
        [v13 setPointSize:v16];
        break;
      case -15984:
        objc_msgSend(v13, "setPrimitiveRestartEnabled:index:", **(_DWORD **)(a4 + 8) != 0, **(void **)(a4 + 16), 0, 0, 0);
        break;
      case -15977:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        long long v478 = 0u;
        long long v479 = 0u;
        long long v477 = 0u;
        GPUTools::MTL::MakeMTLRegion(**(GPUTools::MTL ***)(a4 + 16), (uint64_t)&v477);
        uint64_t v257 = **(void **)(a4 + 24);
        uint64_t v258 = **(void **)(a4 + 32);
        int v259 = **(_DWORD **)(a4 + 40);
        *(void *)&long long v461 = *(void *)(a4 + 48);
        uint64_t v260 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v461, (uint64_t)&std::piecewise_construct, (void **)&v461)[3];
        uint64_t v261 = **(void **)(a4 + 56);
        v436[0] = v477;
        v436[1] = v478;
        v436[2] = v479;
        [v20 getTextureAccessCounters:v43 region:v436 mipLevel:v257 slice:v258 resetCounters:v259 != 0 countersBuffer:v260 countersBufferOffset:v261];
        goto LABEL_461;
      case -15976:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        long long v478 = 0u;
        long long v479 = 0u;
        long long v477 = 0u;
        GPUTools::MTL::MakeMTLRegion(**(GPUTools::MTL ***)(a4 + 16), (uint64_t)&v477);
        uint64_t v232 = **(void **)(a4 + 24);
        uint64_t v233 = **(void **)(a4 + 32);
        v435[0] = v477;
        v435[1] = v478;
        v435[2] = v479;
        [v20 resetTextureAccessCounters:v43 region:v435 mipLevel:v232 slice:v233];
        goto LABEL_461;
      case -15975:
      case -15490:
        [v13 setSignaledValue:**(void **)(a4 + 8)];
        break;
      case -15974:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -15972:
      case -15969:
        *(void *)&long long v461 = 0;
        GPUTools::MTL::MakeMTLIndirectCommandBufferDescriptor(**(GPUTools::MTL ***)(a4 + 8), &v461, v15);
        id v34 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v37 = [v20 newIndirectCommandBufferWithDescriptor:v34 maxCommandCount:**(void **)(a4 + 16) options:**(void **)(a4 + 24)];
        *(void *)&long long v477 = a6;
        uint64_t v38 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        uint64_t v39 = (void *)v38[3];
        v38[3] = v37;

        *(void *)&long long v477 = a6;
        uint64_t v40 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v40[3], 0, v34);
        uint64_t v41 = [DYMTLIndirectCommandBufferInfo alloc];
        uint64_t v32 = [(DYMTLIndirectCommandBufferInfo *)v41 initWithMaxCommandCount:**(void **)(a4 + 16) options:**(void **)(a4 + 24) maxKernelThreadgroupMemoryBindCount:(void)v461];
        *(void *)&long long v477 = a6;
        uint64_t v42 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v42[3], 3u, v32);
        goto LABEL_354;
      case -15971:
        uint64_t v254 = **(void **)(a4 + 8);
        uint64_t v255 = **(void **)(a4 + 16);
        uint64_t v256 = **(void **)(a4 + 24);
        if ([v13 resourcePatchingTypeForResourceType:v254] == 1) {
          [v20 reserveResourceIndicesForResourceType:v254 indices:v255 indexCount:v256];
        }
        break;
      case -15970:
        [v13 setPrimitiveRestartEnabled:**(_DWORD **)(a4 + 8) != 0];
        break;
      case -15967:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "addPurgedResource:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3]);
        break;
      case -15966:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "addPurgedHeap:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3]);
        break;
      case -15964:
      case -15962:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v187 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v186);
        objc_msgSend(v20, "executeCommandsInBuffer:withRange:", v43, v187, v188);
        goto LABEL_461;
      case -15963:
      case -15961:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        *(void *)&long long v477 = *(void *)(a4 + 16);
        objc_msgSend(v20, "executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:", v43, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 24));
        goto LABEL_461;
      case -15960:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v280 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v279);
        objc_msgSend(v20, "resetCommandsInBuffer:withRange:", v43, v280, v281);
        goto LABEL_461;
      case -15959:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v128 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v127);
        *(void *)&long long v477 = *(void *)(a4 + 24);
        objc_msgSend(v20, "copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:", v43, v128, v129, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 32));
        goto LABEL_461;
      case -15958:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v149 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v148);
        objc_msgSend(v20, "optimizeIndirectCommandBuffer:withRange:", v43, v149, v150);
        goto LABEL_461;
      case -15952:
        uint64_t v156 = **(void **)(a4 + 8);
        uint64_t v396 = **(void **)(a4 + 16);
        uint64_t v157 = **(void **)(a4 + 24);
        *(void *)&long long v477 = *(void *)(a4 + 32);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v158 = **(void **)(a4 + 40);
        uint64_t v159 = **(void **)(a4 + 48);
        uint64_t v160 = **(void **)(a4 + 56);
        *(void *)&long long v477 = *(void *)(a4 + 64);
        objc_msgSend(v20, "drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:", v156, v396, v157, v43, v158, v159, v160, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 72), **(void **)(a4 + 80));
        goto LABEL_461;
      case -15950:
        uint64_t v301 = **(void **)(a4 + 8);
        uint64_t v302 = **(void **)(a4 + 16);
        uint64_t v303 = **(void **)(a4 + 24);
        *(void *)&long long v477 = *(void *)(a4 + 32);
        uint64_t v394 = v303;
        uint64_t v395 = v301;
        uint64_t v398 = v302;
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v304 = **(void **)(a4 + 40);
        *(void *)&long long v477 = *(void *)(a4 + 48);
        id v305 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v306 = **(void **)(a4 + 56);
        uint64_t v307 = **(void **)(a4 + 64);
        uint64_t v308 = **(void **)(a4 + 72);
        *(void *)&long long v477 = *(void *)(a4 + 80);
        objc_msgSend(v20, "drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:", v395, v398, v394, v43, v304, v305, v306, v307, v308, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 88),
          **(void **)(a4 + 96));
LABEL_430:

        goto LABEL_461;
      case -15933:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setKernelBuffer:offset:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(void **)(a4 + 24));
        break;
      case -15931:
        long long v477 = 0uLL;
        *(void *)&long long v478 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v477);
        long long v461 = 0uLL;
        uint64_t v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 16), (uint64_t)&v461);
        long long v420 = v477;
        uint64_t v421 = v478;
        long long v418 = v461;
        uint64_t v419 = v462;
        [v20 concurrentDispatchThreadgroups:&v420 threadsPerThreadgroup:&v418];
        break;
      case -15926:
        long long v478 = 0u;
        long long v479 = 0u;
        long long v477 = 0u;
        GPUTools::MTL::MakeMTLRegion(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v477);
        v417[0] = v477;
        v417[1] = v478;
        v417[2] = v479;
        [v20 setStageInRegion:v417];
        break;
      case -15925:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -15924:
        [v13 setResponsibleProcess:**(unsigned int **)(a4 + 8)];
        break;
      case -15922:
        uint64_t v85 = [v13 indirectRenderCommandAtIndex:**(void **)(a4 + 8)];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15921:
        uint64_t v85 = [v13 indirectComputeCommandAtIndex:**(void **)(a4 + 8)];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15916:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setIndirectCommandBuffer:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -15915:
        *(void *)&long long v477 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 16), v14);
        *((void *)&v477 + 1) = v154;
        GPUTools::MTL::DispatchIndirectCommandBuffers(v20, 4294951381, **(void **)(a4 + 8), &v477, (uint64_t)a1);
        break;
      case -15910:
        uint64_t v85 = [v13 newSharedTextureHandle];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15907:
      case -15488:
        uint64_t v85 = [v13 newSharedEventHandle];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15906:
      case -15905:
        [v13 reset];
        break;
      case -15900:
        uint64_t v21 = (void ***)a6;
        goto LABEL_311;
      case -15898:
      case -15897:
LABEL_311:
        GPUTools::MTL::DispatchResourceGroups(v13, a3, **(void *****)(a4 + 8), **(void **)(a4 + 16), (uint64_t)a1, v21);
        break;
      case -15896:
        uint64_t v152 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 8), v14);
        objc_msgSend(v20, "resetWithRange:", v152, v153);
        break;
      case -15880:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -15878:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v218 = **(void **)(a4 + 16);
        uint64_t v219 = **(void **)(a4 + 24);
        *(void *)&long long v477 = *(void *)(a4 + 32);
        objc_msgSend(v20, "copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:", v43, v218, v219, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 40), **(void **)(a4 + 48), **(void **)(a4 + 56), **(void **)(a4 + 64));
        goto LABEL_461;
      case -15877:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        *(void *)&long long v477 = *(void *)(a4 + 16);
        objc_msgSend(v20, "copyFromTexture:toTexture:", v43, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3]);
        goto LABEL_461;
      case -15870:
        uint64_t v85 = [v13 resourceStateCommandEncoder];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15848:
        GPUTools::MTL::MakeMTLCounterSampleBufferDescriptor(**(GPUTools::MTL ***)(a4 + 8), v13, (objc_object *)v15);
        uint64_t v32 = (DYMTLLibraryInfo *)objc_claimAutoreleasedReturnValue();
        id v423 = 0;
        uint64_t v33 = [v20 newCounterSampleBufferWithDescriptor:v32 error:&v423];
        id v34 = v423;
        *(void *)&long long v477 = a6;
        uint64_t v35 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_353;
      case -15830:
        id v34 = *(id *)(a4 + 8);
        uint64_t v68 = [v20 newFunctionWithPluginData:v34 bitcodeType:**(unsigned __int8 **)(a4 + 16)];
        *(void *)&long long v477 = a6;
        uint64_t v69 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_466;
      case -15822:
        uint64_t v236 = **(void **)(a4 + 16);
        if (v236) {
          uint64_t v237 = v236 + 8;
        }
        else {
          uint64_t v237 = 0;
        }
        objc_msgSend(v13, "setVertexAmplificationCount:viewMappings:", **(void **)(a4 + 8), v237, 0, 0, 0);
        break;
      case -15821:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "useHeap:stages:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -15820:
        GPUTools::MTL::DispatchHeaps(v13, 4294951476, **(void **)(a4 + 8), **(void **)(a4 + 16), **(void **)(a4 + 24), (uint64_t)a1);
        break;
      case -15819:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "useResource:usage:stages:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(void **)(a4 + 24));
        break;
      case -15818:
        GPUTools::MTL::DispatchResources(v13, 4294951478, **(void **)(a4 + 8), **(void **)(a4 + 16), **(void **)(a4 + 24), **(void **)(a4 + 32), (uint64_t)a1);
        break;
      case -15812:
        objc_msgSend(v13, "setVertexAmplificationMode:value:", **(void **)(a4 + 8), **(void **)(a4 + 16), 0, 0, 0);
        break;
      case -15809:
        [v13 setBackgroundGPUPriority:**(void **)(a4 + 8)];
        break;
      case -15808:
        objc_msgSend(v13, "setBackgroundGPUPriority:offset:", **(void **)(a4 + 8), **(unsigned __int16 **)(a4 + 16), 0, 0, 0);
        break;
      case -15806:
        [v13 setGPUPriority:**(void **)(a4 + 8)];
        break;
      case -15805:
        objc_msgSend(v13, "setGPUPriority:offset:", **(void **)(a4 + 8), **(unsigned __int16 **)(a4 + 16), 0, 0, 0);
        break;
      case -15796:
        if (v13)
        {
          objc_msgSend(v13, "tileSizeWithSparsePageSize:textureType:pixelFormat:sampleCount:", **(void **)(a4 + 8), **(void **)(a4 + 16), **(void **)(a4 + 24), **(void **)(a4 + 32), 0);
        }
        else
        {
          long long v477 = 0uLL;
          *(void *)&long long v478 = 0;
        }
        GPUTools::MTL::MakeMTLSize((GPUTools::MTL *)*a6, (uint64_t)&v461);
        break;
      case -15794:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -15793:
        GPUTools::MTL::MakeMTLRasterizationRateMapDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        id v28 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v97 = [v20 newRasterizationRateMapWithDescriptor:v28];
        *(void *)&long long v477 = a6;
        unint64_t v98 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_458;
      case -15788:
        if (**(void **)(a4 + 8)) {
          uint64_t v126 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v126 = "";
        }
LABEL_302:
        uint64_t v95 = [NSString stringWithUTF8String:v126];
        [v20 insertDebugSignpost:v95];
        goto LABEL_456;
      case -15786:
        if (**(void **)(a4 + 8)) {
          uint64_t v107 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v107 = "";
        }
LABEL_86:
        uint64_t v95 = [NSString stringWithUTF8String:v107];
        [v20 pushDebugGroup:v95];
        goto LABEL_456;
      case -15784:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v221 = **(void **)(a4 + 16);
        *(void *)&long long v477 = *(void *)(a4 + 24);
        objc_msgSend(v20, "updateTextureMapping:mode:indirectBuffer:indirectBufferOffset:", v43, v221, std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 32));
        goto LABEL_461;
      case -15783:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        v265 = *(GPUTools::MTL ***)(a4 + 24);
        uint64_t v266 = **(void **)(a4 + 16);
        long long v478 = 0u;
        long long v479 = 0u;
        long long v477 = 0u;
        GPUTools::MTL::MakeMTLRegion(*v265, (uint64_t)&v477);
        uint64_t v267 = **(void **)(a4 + 32);
        uint64_t v268 = **(void **)(a4 + 40);
        v476[0] = v477;
        v476[1] = v478;
        v476[2] = v479;
        [v20 updateTextureMapping:v43 mode:v266 region:v476 mipLevel:v267 slice:v268];
        goto LABEL_461;
      case -15782:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        id v43 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        v210 = *(__n128 ***)(a4 + 24);
        uint64_t v211 = **(void **)(a4 + 16);
        uint64_t v212 = **(void **)(a4 + 32);
        uint64_t v213 = **(void **)(a4 + 40);
        v214 = **(char ***)(a4 + 48);
        *(void *)&double v215 = GPUTools::MTL::MakeRegionArray(*v210, v214).n128_u64[0];
        v217 = v216;
        objc_msgSend(v20, "updateTextureMappings:mode:regions:mipLevels:slices:numRegions:", v43, v211, v216, v212, v213, v214, v215);
        free(v217);
LABEL_461:

        break;
      case -15778:
        uint64_t v85 = objc_msgSend(v13, "newBufferWithLength:options:offset:", **(void **)(a4 + 8), **(void **)(a4 + 16), **(void **)(a4 + 24), 0, 0);
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15777:
        GPUTools::MTL::MakeMTLTextureDescriptor(**(GPUTools::MTL ***)(a4 + 8), v14);
        id v34 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v285 = [v20 newTextureWithDescriptor:v34 offset:**(void **)(a4 + 16)];
        *(void *)&long long v477 = a6;
        v286 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        v287 = (void *)v286[3];
        v286[3] = v285;

        *(void *)&long long v477 = a6;
        v288 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v288[3], 0, v34);
        goto LABEL_467;
      case -15776:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "copyParameterDataToBuffer:offset:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16));
        break;
      case -15775:
        uint64_t v189 = **(void **)(a4 + 8);
        uint64_t v397 = **(void **)(a4 + 16);
        uint64_t v190 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v14);
        unint64_t v192 = (unint64_t)v191;
        uint64_t v193 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 32), v191);
        unint64_t v195 = (unint64_t)v194;
        unsigned int MTLTextureSwizzleChannels = GPUTools::MTL::MakeMTLTextureSwizzleChannels(**(GPUTools::MTL ***)(a4 + 40), v194);
        uint64_t v85 = DYMTLNewTextureViewSwizzled(v20, v189, v397, v190, v192, v193, v195, MTLTextureSwizzleChannels);
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15770:
        v293 = *(_DWORD **)(a4 + 8);
        LODWORD(v16) = *v293;
        LODWORD(v17) = v293[1];
        objc_msgSend(v13, "mapScreenToPhysicalCoordinates:forLayer:", **(void **)(a4 + 16), v16, v17);
        break;
      case -15753:
        uint64_t v298 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 8), v14);
        id v300 = (id)objc_msgSend(v20, "resolveCounterRange:", v298, v299);
        break;
      case -15749:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "encodeWaitForEvent:value:timeout:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(unsigned int **)(a4 + 24));
        break;
      case -15744:
        [v13 setDisableRunTimeCompilation:**(_DWORD **)(a4 + 8) != 0];
        break;
      case -15743:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -15740:
        if (**(void **)(a4 + 8)) {
          v197 = **(const char ***)(a4 + 8);
        }
        else {
          v197 = "";
        }
        id v25 = [NSString stringWithUTF8String:v197];
        uint64_t v198 = **(void **)(a4 + 16);
        uint64_t v199 = **(void **)(a4 + 24);
        id v414 = 0;
        uint64_t v27 = [v20 newComputePipelineStateWithName:v25 options:v198 reflection:v199 error:&v414];
        id v28 = v414;
        *(void *)&long long v477 = a6;
        uint64_t v29 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_345;
      case -15738:
        if (**(void **)(a4 + 8)) {
          v294 = **(const char ***)(a4 + 8);
        }
        else {
          v294 = "";
        }
        id v25 = [NSString stringWithUTF8String:v294];
        uint64_t v295 = **(void **)(a4 + 16);
        uint64_t v296 = **(void **)(a4 + 24);
        id v413 = 0;
        uint64_t v27 = [v20 newRenderPipelineStateWithName:v25 options:v295 reflection:v296 error:&v413];
        id v28 = v413;
        *(void *)&long long v477 = a6;
        uint64_t v29 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
LABEL_345:
        v297 = (void *)v29[3];
        v29[3] = v27;

LABEL_381:
        goto LABEL_459;
      case -15732:
        [v13 enableNullBufferBinds:**(_DWORD **)(a4 + 8) != 0];
        break;
      case -15731:
        uint64_t v85 = objc_msgSend(v13, "newFunctionWithGLIR:functionType:", **(void **)(a4 + 8), **(void **)(a4 + 16), 0, 0, 0);
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15730:
        v176 = *(GPUTools::MTL ***)(a4 + 16);
        uint64_t v177 = **(void **)(a4 + 8);
        v178 = *v176;
        *(void *)&long long v477 = v176;
        v179 = std::__hash_table<std::__hash_value_type<void *,unsigned long>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,unsigned long>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,unsigned long>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,unsigned long>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(a5, v176, (uint64_t)&std::piecewise_construct, (void **)&v477);
        GPUTools::MTL::MakeDispatchDataT(v178, v179[3]);
        id v34 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v68 = [v20 newFunctionWithGLIR:v177 inputsDescription:v34 functionType:**(void **)(a4 + 24)];
        *(void *)&long long v477 = a6;
        uint64_t v69 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_466;
      case -15729:
        LODWORD(v16) = **(_DWORD **)(a4 + 8);
        [v13 setAlphaTestReferenceValue:v16];
        break;
      case -15728:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setColorResolveTexture:slice:depthPlane:level:yInvert:atIndex:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(void **)(a4 + 24), **(void **)(a4 + 32), **(_DWORD **)(a4 + 40) != 0, **(void **)(a4 + 48));
        break;
      case -15727:
        [v13 setDepthCleared];
        break;
      case -15726:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setDepthResolveTexture:slice:depthPlane:level:yInvert:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(void **)(a4 + 24), **(void **)(a4 + 32), **(_DWORD **)(a4 + 40) != 0);
        break;
      case -15725:
        [v13 setProvokingVertexMode:**(void **)(a4 + 8)];
        break;
      case -15724:
        [v13 setStencilCleared];
        break;
      case -15723:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setStencilResolveTexture:slice:depthPlane:level:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(void **)(a4 + 24), **(void **)(a4 + 32));
        break;
      case -15722:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        objc_msgSend(v13, "setStencilResolveTexture:slice:depthPlane:level:yInvert:", std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3], **(void **)(a4 + 16), **(void **)(a4 + 24), **(void **)(a4 + 32), **(_DWORD **)(a4 + 40) != 0);
        break;
      case -15721:
        objc_msgSend(v13, "setTriangleFrontFillMode:backFillMode:", **(void **)(a4 + 8), **(void **)(a4 + 16), 0, 0, 0);
        break;
      case -15720:
        [v13 setViewportTransformEnabled:**(_DWORD **)(a4 + 8) != 0];
        break;
      case -15715:
        uint64_t v246 = **(void **)(a4 + 8);
        *(void *)&long long v477 = *(void *)(a4 + 16);
        id v28 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v97 = [v20 newArgumentEncoderWithBufferIndex:v246 pipelineLibrary:v28];
        *(void *)&long long v477 = a6;
        unint64_t v98 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_458;
      case -15714:
        uint64_t v234 = **(void **)(a4 + 8);
        uint64_t v235 = **(void **)(a4 + 16);
        *(void *)&long long v477 = *(void *)(a4 + 24);
        id v28 = (id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        uint64_t v97 = [v20 newArgumentEncoderWithBufferIndex:v234 reflection:v235 pipelineLibrary:v28];
        *(void *)&long long v477 = a6;
        unint64_t v98 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
LABEL_458:
        v387 = (void *)v98[3];
        v98[3] = v97;

        goto LABEL_459;
      case -15711:
        [v13 setSubstream:**(unsigned int **)(a4 + 8)];
        break;
      case -15710:
        [v13 signalProgress:**(unsigned int **)(a4 + 8)];
        break;
      case -15709:
        [v13 waitForProgress:**(unsigned int **)(a4 + 8)];
        break;
      case -15707:
        uint64_t v85 = objc_msgSend(v13, "newBufferWithBytes:length:options:gpuAddress:", **(void **)(a4 + 8), **(void **)(a4 + 16), **(void **)(a4 + 24), **(void **)(a4 + 32), 0);
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15705:
        uint64_t v85 = objc_msgSend(v13, "newBufferWithLength:options:gpuAddress:", **(void **)(a4 + 8), **(void **)(a4 + 16), **(void **)(a4 + 24), 0, 0);
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15698:
        [v13 setCommandBufferErrorOptions:**(void **)(a4 + 8)];
        break;
      case -15695:
        *(void *)&long long v477 = *(void *)(a4 + 8);
        uint64_t v32 = (DYMTLLibraryInfo *)(id)std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, (unint64_t *)v477, (uint64_t)&std::piecewise_construct, (void **)&v477)[3];
        id v422 = 0;
        uint64_t v33 = [v20 newDynamicLibrary:v32 error:&v422];
        id v34 = v422;
        *(void *)&long long v477 = a6;
        uint64_t v35 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
LABEL_353:
        v309 = (void *)v35[3];
        v35[3] = v33;

LABEL_354:
        goto LABEL_467;
      case -15690:
        uint64_t v85 = objc_msgSend(v13, "newTextureViewWithPixelFormat:resourceIndex:", **(void **)(a4 + 8), **(void **)(a4 + 16), 0, 0, 0);
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15689:
        uint64_t v247 = **(void **)(a4 + 8);
        uint64_t v248 = **(void **)(a4 + 16);
        uint64_t v249 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v14);
        v251 = v250;
        uint64_t v252 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 32), v250);
        uint64_t v85 = objc_msgSend(v20, "newTextureViewWithPixelFormat:textureType:levels:slices:resourceIndex:", v247, v248, v249, v251, v252, v253, **(void **)(a4 + 40));
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15688:
        uint64_t v238 = **(void **)(a4 + 8);
        uint64_t v239 = **(void **)(a4 + 16);
        uint64_t v240 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 24), v14);
        v242 = v241;
        uint64_t v243 = GPUTools::MTL::MakeNSRange(**(GPUTools::MTL ***)(a4 + 32), v241);
        uint64_t v85 = objc_msgSend(v20, "newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:resourceIndex:", v238, v239, v240, v242, v243, v244, **(unsigned int **)(a4 + 40), **(void **)(a4 + 48));
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15676:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
        goto LABEL_455;
      case -15668:
        if (**(void **)(a4 + 8)) {
          id v116 = **(const char ***)(a4 + 8);
        }
        else {
          id v116 = "";
        }
        goto LABEL_317;
      case -15661:
        if (**(void **)(a4 + 8)) {
          id v116 = **(const char ***)(a4 + 8);
        }
        else {
          id v116 = "";
        }
LABEL_317:
        id v28 = [NSString stringWithUTF8String:v116];
        [v20 setLabel:v28];
        goto LABEL_459;
      case -15649:
        [v13 waitUntilComplete];
        break;
      case -15624:
        id v206 = (id)[v13 getSPIStats];
        break;
      case -15584:
        id v34 = **(id **)(a4 + 8);
        uint64_t v68 = [v20 sampledComputeCommandEncoderWithDescriptor:v34 programInfoBuffer:**(void **)(a4 + 16) capacity:**(void **)(a4 + 24)];
        *(void *)&long long v477 = a6;
        uint64_t v69 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_466;
      case -15505:
        [v13 setParentGPUAddress:**(void **)(a4 + 8)];
        break;
      case -15504:
        [v13 setParentGPUSize:**(void **)(a4 + 8)];
        break;
      case -15500:
        [v13 encodeDashboardTagForResourceGroup:**(void **)(a4 + 8)];
        break;
      case -15496:
        uint64_t v85 = [v13 newLateEvalEvent];
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15491:
        if (**(void **)(a4 + 8)) {
          uint64_t v47 = **(const char ***)(a4 + 8);
        }
        else {
          uint64_t v47 = "";
        }
LABEL_455:
        uint64_t v95 = [NSString stringWithUTF8String:v47];
        [v20 setLabel:v95];
LABEL_456:

        break;
      case -15486:
        long long v461 = 0uLL;
        uint64_t v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v461);
        long long v478 = 0u;
        long long v479 = 0u;
        long long v477 = 0u;
        GPUTools::MTL::MakeMTLRegion(**(GPUTools::MTL ***)(a4 + 16), (uint64_t)&v477);
        uint64_t v410 = v462;
        v408[0] = v477;
        v408[1] = v478;
        v408[2] = v479;
        long long v409 = v461;
        [v20 dispatchThreadsPerTile:&v409 inRegion:v408];
        break;
      case -15430:
        uint64_t v85 = objc_msgSend(v13, "newFunctionWithGLCoreIR:functionType:", **(void **)(a4 + 8), **(void **)(a4 + 16), 0, 0, 0);
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_449;
      case -15429:
        uint64_t v245 = **(void **)(a4 + 8);
        id v34 = **(id **)(a4 + 16);
        uint64_t v68 = [v20 newFunctionWithGLCoreIR:v245 inputsDescription:v34 functionType:**(void **)(a4 + 24)];
        *(void *)&long long v477 = a6;
        uint64_t v69 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        goto LABEL_466;
      case -15428:
        uint64_t v85 = objc_msgSend(v13, "newFunctionWithGLESIR:functionType:", **(void **)(a4 + 8), **(void **)(a4 + 16), 0, 0, 0);
        *(void *)&long long v477 = a6;
        uint64_t v86 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
LABEL_449:
        v386 = (void *)v86[3];
        v86[3] = v85;

        break;
      case -15427:
        uint64_t v220 = **(void **)(a4 + 8);
        id v34 = **(id **)(a4 + 16);
        uint64_t v68 = [v20 newFunctionWithGLESIR:v220 inputsDescription:v34 functionType:**(void **)(a4 + 24)];
        *(void *)&long long v477 = a6;
        uint64_t v69 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
LABEL_466:
        v393 = (void *)v69[3];
        v69[3] = v68;

LABEL_467:
        break;
      case -15416:
        long long v477 = 0uLL;
        *(void *)&long long v478 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 8), (uint64_t)&v477);
        long long v461 = 0uLL;
        uint64_t v462 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 16), (uint64_t)&v461);
        long long v443 = 0uLL;
        uint64_t v444 = 0;
        GPUTools::MTL::MakeMTLSize(**(GPUTools::MTL ***)(a4 + 24), (uint64_t)&v443);
        long long v406 = v477;
        uint64_t v407 = v478;
        long long v404 = v461;
        uint64_t v405 = v462;
        long long v402 = v443;
        uint64_t v403 = v444;
        [v20 drawMeshThreadgroups:&v406 threadsPerObjectThreadgroup:&v404 threadsPerMeshThreadgroup:&v402];
        break;
      case -15398:
        objc_msgSend(v13, "setMeshBytes:length:atIndex:", **(void **)(a4 + 8), **(void **)(a4 + 16), **(void **)(a4 + 24), 0, 0);
        break;
      case -15388:
        objc_msgSend(v13, "setObjectBytes:length:atIndex:", **(void **)(a4 + 8), **(void **)(a4 + 16), **(void **)(a4 + 24), 0, 0);
        break;
      case -15350:
        GPUTools::MTL::MakeMTLIOCommandQueueDescriptor();
        id v28 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v228 = [v20 newIOCommandQueueWithDescriptor:v28 error:0];
        *(void *)&long long v477 = a6;
        v229 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        v230 = (void *)v229[3];
        v229[3] = v228;

        *(void *)&long long v477 = a6;
        v231 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)a1, a6, (uint64_t)&std::piecewise_construct, (void **)&v477);
        DYMTLSetAssociatedObject((void *)v231[3], 0, v28);
LABEL_459:

        break;
      default:
        goto LABEL_471;
    }
LABEL_468:

    return;
  }
  switch(a3)
  {
    case -7158:
      v200 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, *(unint64_t **)a4);
      if (v200) {
        [(id)v200[3] present];
      }
      goto LABEL_468;
    case -7157:
      v201 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, *(unint64_t **)a4);
      if (v201) {
        [(id)v201[3] presentAtTime:**(double **)(a4 + 8)];
      }
      goto LABEL_468;
    case -7156:
      uint64_t v24 = std::__hash_table<std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,objc_object * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,objc_object * {__strong}>>>::find<unsigned long long>(a1, *(unint64_t **)a4);
      if (v24) {
        [(id)v24[3] presentAfterMinimumDuration:**(double **)(a4 + 8)];
      }
      goto LABEL_468;
  }
LABEL_471:
  dy_abort();
  __break(1u);
}

void sub_24F7179FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ShaderDebugger::Metadata::MDSerializer::~MDSerializer(ShaderDebugger::Metadata::MDSerializer *this)
{
}

void ShaderDebugger::Metadata::MDSerializer::addReferencedSourceFile(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1 + 24;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a1 + 24), (unsigned __int8 *)a2))
  {
    uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a3 + 8);
    }
    if (v6)
    {
      v11[0] = a2;
      uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (long long **)v11);
      std::string::operator=((std::string *)(v7 + 40), (const std::string *)a3);
    }
    else
    {
      v11[0] = 0;
      v11[1] = 0;
      uint64_t v12 = 0;
      int v13 = -1;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      std::string::size_type __n = 0;
      ShaderDebugger::MmapFile::open((uint64_t)v11, (uint64_t)a2);
      if (v13 != -1)
      {
        memset(&__p, 0, sizeof(__p));
        if (__n)
        {
          std::string::resize(&__p, __n, 0);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          memcpy(p_p, v15, __n);
        }
        double v17 = (long long *)a2;
        uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v17);
        std::string::operator=((std::string *)(v9 + 40), &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      ShaderDebugger::MmapFile::close((uint64_t)v11);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
    }
  }
}

void sub_24F7194D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ShaderDebugger::Metadata::MDSerializer::serializeToBuffer(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v19 = 4;
  ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, &v19, 8);
  ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, (unsigned char *)(a1 + 64), 8);
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1 != a1 + 8)
  {
    do
    {
      uint64_t v5 = v4[4];
      uint64_t v18 = (uint64_t)(v4[6] - v4[5]) >> 3;
      uint64_t v19 = v5;
      ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, &v19, 8);
      ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, &v18, 8);
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(a2, *(char **)(a2 + 8), (char *)v4[11], (char *)v4[12], v4[12] - v4[11]);
      uint64_t v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          uint64_t v4 = v7;
        }
        while (!v8);
      }
      uint64_t v4 = v7;
    }
    while (v7 != (void *)(a1 + 8));
  }
  uint64_t v19 = -1;
  ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, &v19, 8);
  uint64_t v19 = *(void *)(a1 + 48);
  ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, &v19, 8);
  for (uint64_t i = *(uint64_t **)(a1 + 40); i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v10 = *((unsigned __int8 *)i + 39);
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = i[3];
    }
    uint64_t v19 = v10;
    ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, &v19, 8);
    int v11 = *((char *)i + 39);
    if (v11 >= 0) {
      uint64_t v12 = i + 2;
    }
    else {
      uint64_t v12 = (unsigned char *)i[2];
    }
    if (v11 >= 0) {
      uint64_t v13 = *((unsigned __int8 *)i + 39);
    }
    else {
      uint64_t v13 = i[3];
    }
    ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, v12, v13);
    uint64_t v14 = *((unsigned __int8 *)i + 63);
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = i[6];
    }
    uint64_t v19 = v14;
    ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, &v19, 8);
    int v15 = *((char *)i + 63);
    if (v15 >= 0) {
      uint64_t v16 = i + 5;
    }
    else {
      uint64_t v16 = (unsigned char *)i[5];
    }
    if (v15 >= 0) {
      uint64_t v17 = *((unsigned __int8 *)i + 63);
    }
    else {
      uint64_t v17 = i[6];
    }
    ShaderDebugger::Metadata::MDSerializer::write(a1, (unint64_t *)a2, v16, v17);
  }
}

uint64_t ShaderDebugger::Metadata::MDSerializer::reserveAndLinearizeMetadataId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(char **)a2;
  uint64_t v6 = *(char **)(a2 + 8);
  uint64_t v7 = *(char **)a2;
  if (*(char **)a2 != v6)
  {
    uint64_t v7 = *(char **)a2;
    while (*(void *)v7 != a3)
    {
      v7 += 8;
      if (v7 == v6)
      {
        uint64_t v7 = *(char **)(a2 + 8);
        break;
      }
    }
  }
  if (v7 == v6) {
    uint64_t v8 = -1;
  }
  else {
    uint64_t v8 = (v7 - v5) >> 3;
  }
  if (v8 == -1)
  {
    unint64_t v9 = *(void *)(a2 + 16);
    if ((unint64_t)v6 >= v9)
    {
      uint64_t v11 = (v6 - v5) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v9 - (void)v5;
      if (v13 >> 2 > v12) {
        unint64_t v12 = v13 >> 2;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a2 + 16, v14);
        uint64_t v5 = *(char **)a2;
        uint64_t v6 = *(char **)(a2 + 8);
      }
      else
      {
        int v15 = 0;
      }
      uint64_t v16 = &v15[8 * v11];
      uint64_t v17 = &v15[8 * v14];
      *(void *)uint64_t v16 = a3;
      uint64_t v10 = v16 + 8;
      while (v6 != v5)
      {
        uint64_t v18 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v16 - 1) = v18;
        v16 -= 8;
      }
      *(void *)a2 = v16;
      *(void *)(a2 + 8) = v10;
      *(void *)(a2 + 16) = v17;
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *(void *)uint64_t v6 = a3;
      uint64_t v10 = v6 + 8;
    }
    *(void *)(a2 + 8) = v10;
    char v20 = 1;
    std::vector<BOOL>::push_back(a2 + 24, &v20);
    return ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) - 1;
  }
  return v8;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::getLinearMetadataId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(void **)a2;
  if (*(void **)a2 != v3)
  {
    while (*v4 != a3)
    {
      if (++v4 == v3)
      {
        uint64_t v4 = *(void **)(a2 + 8);
        break;
      }
    }
  }
  if (v4 == v3) {
    return -1;
  }
  else {
    return ((uint64_t)v4 - *(void *)a2) >> 3;
  }
}

void std::vector<BOOL>::push_back(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  uint64_t v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int isMetadataIdReserved = ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved(a1, (char **)a2, a3);
  unint64_t v6 = *(char **)a2;
  unint64_t v7 = *(char **)(a2 + 8);
  uint64_t v8 = *(char **)a2;
  if (*(char **)a2 != v7)
  {
    uint64_t v8 = *(char **)a2;
    while (*(void *)v8 != a3)
    {
      v8 += 8;
      if (v8 == v7)
      {
        uint64_t v8 = *(char **)(a2 + 8);
        break;
      }
    }
  }
  if (v8 == v7) {
    unint64_t v9 = -1;
  }
  else {
    unint64_t v9 = (v8 - v6) >> 3;
  }
  if (v9 == -1) {
    int v10 = 1;
  }
  else {
    int v10 = isMetadataIdReserved;
  }
  if (v10 != 1) {
    return -1;
  }
  if (isMetadataIdReserved)
  {
    if (*(void *)(a2 + 32) <= v9) {
      std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
    }
    *(void *)(*(void *)(a2 + 24) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v9);
  }
  else
  {
    unint64_t v11 = *(void *)(a2 + 16);
    if ((unint64_t)v7 >= v11)
    {
      uint64_t v13 = (v7 - v6) >> 3;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v11 - (void)v6;
      if (v15 >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a2 + 16, v16);
        unint64_t v6 = *(char **)a2;
        unint64_t v7 = *(char **)(a2 + 8);
      }
      else
      {
        uint64_t v17 = 0;
      }
      uint64_t v18 = (uint64_t *)&v17[8 * v13];
      uint64_t v19 = &v17[8 * v16];
      *uint64_t v18 = a3;
      unint64_t v12 = v18 + 1;
      while (v7 != v6)
      {
        uint64_t v20 = *((void *)v7 - 1);
        v7 -= 8;
        *--uint64_t v18 = v20;
      }
      *(void *)a2 = v18;
      *(void *)(a2 + 8) = v12;
      *(void *)(a2 + 16) = v19;
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *(void *)unint64_t v7 = a3;
      unint64_t v12 = v7 + 8;
    }
    *(void *)(a2 + 8) = v12;
    char v22 = 0;
    std::vector<BOOL>::push_back(a2 + 24, &v22);
    return ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) - 1;
  }
  return v9;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved(uint64_t a1, char **a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  if (*a2 != v4)
  {
    while (*(void *)v5 != a3)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = a2[1];
        break;
      }
    }
  }
  if (v5 == v4) {
    return 0;
  }
  unint64_t v6 = v5 - v3;
  unint64_t v7 = (v5 - v3) >> 3;
  if ((unint64_t)a2[4] <= v7) {
    std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
  }
  return (*(void *)&a2[3][(v7 >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v6 >> 3)) & 1;
}

unint64_t *ShaderDebugger::Metadata::MDSerializer::serializeThreadTracepoint(uint64_t **this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = a4;
  uint64_t v17 = a3;
  unint64_t v15 = 5;
  uint64_t v18 = &v15;
  unint64_t v6 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(this, &v15, (uint64_t)&std::piecewise_construct, &v18);
  unint64_t v7 = v6;
  uint64_t v9 = (uint64_t)(v6 + 5);
  uint64_t v8 = v6[5];
  int v10 = v6[6];
  unint64_t v11 = v8;
  if (v8 != v10)
  {
    while (*v11 != a2)
    {
      if (++v11 == v10)
      {
        unint64_t v11 = v6[6];
        break;
      }
    }
  }
  uint64_t v12 = v11 - v8;
  if (v11 == v10) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v6, (char **)v6 + 5, a2))
  {
    uint64_t v18 = (unint64_t *)ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)this, v9, a2);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v7 + 11, &v18, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v7 + 11, &v17, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v7 + 11, &v16, 8);
    return v18;
  }
  return (unint64_t *)v13;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeLocation(uint64_t **a1, uint64_t a2, std::string::value_type *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v54 = a6;
  uint64_t v55 = a5;
  v51.__r_.__value_.__r.__words[0] = 1;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  int v10 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, (unint64_t *)&v51, (uint64_t)&std::piecewise_construct, &__str);
  unint64_t v11 = v10;
  uint64_t v13 = (uint64_t)(v10 + 5);
  uint64_t v12 = v10[5];
  unint64_t v14 = v10[6];
  unint64_t v15 = v12;
  if (v12 != v14)
  {
    while (*v15 != a2)
    {
      if (++v15 == v14)
      {
        unint64_t v15 = v10[6];
        break;
      }
    }
  }
  uint64_t v16 = v15 - v12;
  if (v15 == v14) {
    uint64_t v16 = -1;
  }
  uint64_t v53 = v16;
  if (v16 != -1
    && (ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v10, (char **)v10 + 5, a2) & 1) == 0)
  {
    return v53;
  }
  uint64_t v53 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v13, a2);
  if (a3[23] < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else {
    std::string __str = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v51 = *(std::string *)a4;
  }
  LODWORD(v18) = a3[23];
  if ((v18 & 0x80000000) == 0)
  {
    std::string v50 = *(std::string *)a3;
    goto LABEL_19;
  }
  std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  LODWORD(v18) = a3[23];
  if ((v18 & 0x80000000) == 0)
  {
LABEL_19:
    uint64_t v18 = v18;
    uint64_t v19 = a3;
    if (!(_BYTE)v18) {
      goto LABEL_28;
    }
    goto LABEL_20;
  }
  uint64_t v19 = *(std::string::value_type **)a3;
  uint64_t v18 = *((void *)a3 + 1);
  if (!v18) {
    goto LABEL_28;
  }
LABEL_20:
  uint64_t v20 = 0;
  while (v19[v20] != 47)
  {
    if (v18 == ++v20) {
      goto LABEL_28;
    }
  }
  if (v18 == v20 || v20)
  {
LABEL_28:
    int v21 = *(unsigned __int8 *)(a4 + 23);
    if (*(char *)(a4 + 23) < 0)
    {
      if (*(void *)(a4 + 8) != 1)
      {
LABEL_37:
        if ((v21 & 0x80u) == 0) {
          size_t v23 = *(unsigned __int8 *)(a4 + 23);
        }
        else {
          size_t v23 = *(void *)(a4 + 8);
        }
        uint64_t v24 = &v49;
        std::string::basic_string[abi:ne180100]((uint64_t)&v49, v23 + 1);
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v24 = (std::string *)v49.__r_.__value_.__r.__words[0];
        }
        if (v23)
        {
          if (*(char *)(a4 + 23) >= 0) {
            id v25 = (const void *)a4;
          }
          else {
            id v25 = *(const void **)a4;
          }
          memmove(v24, v25, v23);
        }
        *(_WORD *)((char *)&v24->__r_.__value_.__l.__data_ + v23) = 47;
        int v26 = a3[23];
        if (v26 >= 0) {
          uint64_t v27 = a3;
        }
        else {
          uint64_t v27 = *(const std::string::value_type **)a3;
        }
        if (v26 >= 0) {
          std::string::size_type v28 = a3[23];
        }
        else {
          std::string::size_type v28 = *((void *)a3 + 1);
        }
        uint64_t v29 = std::string::append(&v49, v27, v28);
        std::string::size_type v30 = v29->__r_.__value_.__r.__words[0];
        *(void *)&long long v56 = v29->__r_.__value_.__l.__size_;
        *(void *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7);
        char v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        __str.__r_.__value_.__r.__words[0] = v30;
        __str.__r_.__value_.__l.__size_ = v56;
        *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v56 + 7);
        *((unsigned char *)&__str.__r_.__value_.__s + 23) = v31;
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        goto LABEL_57;
      }
      char v22 = *(unsigned char **)a4;
    }
    else
    {
      char v22 = (unsigned char *)a4;
      if (v21 != 1) {
        goto LABEL_37;
      }
    }
    if (*v22 == 47)
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a4, (const void **)a3, (uint64_t)&v49);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string __str = v49;
      goto LABEL_57;
    }
    goto LABEL_37;
  }
LABEL_57:
  uint64_t v32 = (unint64_t *)(v11 + 11);
  p_str = &__str;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  uint64_t v35 = (char *)&p_str[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    int v36 = v35[size--];
    if (v36 == 47)
    {
      if (size != -1)
      {
        std::string::size_type v37 = size + 1;
        std::string::basic_string(&v49, &__str, 0, size + 1, (std::allocator<char> *)&v56);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v51.__r_.__value_.__l.__data_);
        }
        std::string v51 = v49;
        std::string::basic_string(&v49, &__str, v37, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v56);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
        std::string v50 = v49;
      }
      break;
    }
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v38 = v51.__r_.__value_.__l.__size_;
    if (v51.__r_.__value_.__l.__size_)
    {
      uint64_t v39 = (std::string *)v51.__r_.__value_.__r.__words[0];
LABEL_75:
      if (v39->__r_.__value_.__s.__data_[v38 - 1] != 47) {
        std::string::append(&v51, "/");
      }
    }
  }
  else
  {
    std::string::size_type v38 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    if (*((unsigned char *)&v51.__r_.__value_.__s + 23))
    {
      uint64_t v39 = &v51;
      goto LABEL_75;
    }
  }
  ShaderDebugger::Metadata::MDSerializer::write((int)a1, v32, &v53, 8);
  std::string::size_type v40 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v40 = v50.__r_.__value_.__l.__size_;
  }
  v49.__r_.__value_.__r.__words[0] = v40;
  ShaderDebugger::Metadata::MDSerializer::write((int)a1, v32, &v49, 8);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v41 = &v50;
  }
  else {
    uint64_t v41 = (std::string *)v50.__r_.__value_.__r.__words[0];
  }
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v42 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v42 = v50.__r_.__value_.__l.__size_;
  }
  ShaderDebugger::Metadata::MDSerializer::write((int)a1, v32, v41, v42);
  std::string::size_type v43 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v43 = v51.__r_.__value_.__l.__size_;
  }
  v49.__r_.__value_.__r.__words[0] = v43;
  ShaderDebugger::Metadata::MDSerializer::write((int)a1, v32, &v49, 8);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v44 = &v51;
  }
  else {
    uint64_t v44 = (std::string *)v51.__r_.__value_.__r.__words[0];
  }
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v45 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v45 = v51.__r_.__value_.__l.__size_;
  }
  ShaderDebugger::Metadata::MDSerializer::write((int)a1, v32, v44, v45);
  ShaderDebugger::Metadata::MDSerializer::write((int)a1, v32, &v55, 8);
  ShaderDebugger::Metadata::MDSerializer::write((int)a1, v32, &v54, 8);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v51.__r_.__value_.__l.__data_, (const void **)&v50.__r_.__value_.__l.__data_, (uint64_t)&v49);
  std::string::size_type v46 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  char v47 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v46 = v49.__r_.__value_.__l.__size_;
  }
  if (v46)
  {
    long long v56 = 0uLL;
    uint64_t v57 = 0;
    ShaderDebugger::Metadata::MDSerializer::addReferencedSourceFile((uint64_t)a1, &v49, (uint64_t)&v56);
    if (SHIBYTE(v57) < 0) {
      operator delete((void *)v56);
    }
    char v47 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  }
  uint64_t v17 = v53;
  if (v47 < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v17;
}

void sub_24F71A218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeSubprogram(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = 0;
  uint64_t v21 = a4;
  char v22 = &v20;
  unint64_t v7 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, (unint64_t *)&v20, (uint64_t)&std::piecewise_construct, &v22);
  uint64_t v8 = v7;
  uint64_t v10 = (uint64_t)(v7 + 5);
  uint64_t v9 = v7[5];
  unint64_t v11 = v7[6];
  uint64_t v12 = v9;
  if (v9 != v11)
  {
    while (*v12 != a2)
    {
      if (++v12 == v11)
      {
        uint64_t v12 = v7[6];
        break;
      }
    }
  }
  uint64_t v13 = v12 - v9;
  if (v12 == v11) {
    uint64_t v14 = -1;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v7, (char **)v7 + 5, a2))
  {
    uint64_t v20 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v10, a2);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v8 + 11, &v20, 8);
    unint64_t v15 = (uint64_t *)*(unsigned __int8 *)(a3 + 23);
    if ((char)v15 < 0) {
      unint64_t v15 = *(uint64_t **)(a3 + 8);
    }
    char v22 = v15;
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v8 + 11, &v22, 8);
    int v16 = *(char *)(a3 + 23);
    if (v16 >= 0) {
      uint64_t v17 = (unsigned char *)a3;
    }
    else {
      uint64_t v17 = *(unsigned char **)a3;
    }
    if (v16 >= 0) {
      uint64_t v18 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v18 = *(void *)(a3 + 8);
    }
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v8 + 11, v17, v18);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v8 + 11, &v21, 8);
    return v20;
  }
  return v14;
}

unint64_t *ShaderDebugger::Metadata::MDSerializer::serializeSubrange(uint64_t **this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = a4;
  uint64_t v17 = a3;
  unint64_t v15 = 4;
  uint64_t v18 = &v15;
  unint64_t v6 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(this, &v15, (uint64_t)&std::piecewise_construct, &v18);
  unint64_t v7 = v6;
  uint64_t v9 = (uint64_t)(v6 + 5);
  uint64_t v8 = v6[5];
  uint64_t v10 = v6[6];
  unint64_t v11 = v8;
  if (v8 != v10)
  {
    while (*v11 != a2)
    {
      if (++v11 == v10)
      {
        unint64_t v11 = v6[6];
        break;
      }
    }
  }
  uint64_t v12 = v11 - v8;
  if (v11 == v10) {
    uint64_t v13 = -1;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v6, (char **)v6 + 5, a2))
  {
    uint64_t v18 = (unint64_t *)ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)this, v9, a2);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v7 + 11, &v18, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v7 + 11, &v17, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v7 + 11, &v16, 8);
    return v18;
  }
  return (unint64_t *)v13;
}

unint64_t *ShaderDebugger::Metadata::MDSerializer::serializeFunctionTracepoint(uint64_t **a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = a5;
  uint64_t v23 = a3;
  uint64_t v20 = a7;
  uint64_t v21 = a6;
  unint64_t v19 = 6;
  uint64_t v24 = &v19;
  uint64_t v10 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v19, (uint64_t)&std::piecewise_construct, &v24);
  unint64_t v11 = v10;
  uint64_t v13 = (uint64_t)(v10 + 5);
  uint64_t v12 = v10[5];
  uint64_t v14 = v10[6];
  unint64_t v15 = v12;
  if (v12 != v14)
  {
    while (*v15 != a2)
    {
      if (++v15 == v14)
      {
        unint64_t v15 = v10[6];
        break;
      }
    }
  }
  uint64_t v16 = v15 - v12;
  if (v15 == v14) {
    uint64_t v17 = -1;
  }
  else {
    uint64_t v17 = v16;
  }
  if (v17 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v10, (char **)v10 + 5, a2))
  {
    uint64_t v24 = (unint64_t *)ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v13, a2);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v11 + 11, &v24, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v11 + 11, &v23, 8);
    unint64_t v19 = a4;
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v11 + 11, &v19, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v11 + 11, &v22, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v11 + 11, &v21, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v11 + 11, &v20, 8);
    return v24;
  }
  return (unint64_t *)v17;
}

unint64_t *ShaderDebugger::Metadata::MDSerializer::serializeWaypointTracepoint(uint64_t **a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v18 = a5;
  uint64_t v19 = a3;
  unint64_t v17 = 9;
  uint64_t v20 = &v17;
  uint64_t v8 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v17, (uint64_t)&std::piecewise_construct, &v20);
  uint64_t v9 = v8;
  uint64_t v11 = (uint64_t)(v8 + 5);
  uint64_t v10 = v8[5];
  uint64_t v12 = v8[6];
  uint64_t v13 = v10;
  if (v10 != v12)
  {
    while (*v13 != a2)
    {
      if (++v13 == v12)
      {
        uint64_t v13 = v8[6];
        break;
      }
    }
  }
  uint64_t v14 = v13 - v10;
  if (v13 == v12) {
    uint64_t v15 = -1;
  }
  else {
    uint64_t v15 = v14;
  }
  if (v15 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v8, (char **)v8 + 5, a2))
  {
    uint64_t v20 = (unint64_t *)ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v11, a2);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v9 + 11, &v20, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v9 + 11, &v19, 8);
    unint64_t v17 = a4;
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v9 + 11, &v17, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v9 + 11, &v18, 8);
    return v20;
  }
  return (unint64_t *)v15;
}

unint64_t *ShaderDebugger::Metadata::MDSerializer::serializeDataTracepoint(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6)
{
  uint64_t v20 = a4;
  uint64_t v21 = a3;
  int v19 = a5;
  unint64_t v18 = 8;
  uint64_t v22 = &v18;
  uint64_t v9 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v18, (uint64_t)&std::piecewise_construct, &v22);
  uint64_t v10 = v9;
  uint64_t v12 = (uint64_t)(v9 + 5);
  uint64_t v11 = v9[5];
  uint64_t v13 = v9[6];
  uint64_t v14 = v11;
  if (v11 != v13)
  {
    while (*v14 != a2)
    {
      if (++v14 == v13)
      {
        uint64_t v14 = v9[6];
        break;
      }
    }
  }
  uint64_t v15 = v14 - v11;
  if (v14 == v13) {
    uint64_t v16 = -1;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v9, (char **)v9 + 5, a2))
  {
    uint64_t v22 = (unint64_t *)ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v12, a2);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v10 + 11, &v22, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v10 + 11, &v21, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v10 + 11, &v20, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v10 + 11, &v19, 4);
    unint64_t v18 = a6;
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v10 + 11, &v18, 8);
    return v22;
  }
  return (unint64_t *)v16;
}

unint64_t *ShaderDebugger::Metadata::MDSerializer::serializeDataValueTracepoint(uint64_t **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v24 = a4;
  uint64_t v25 = a3;
  uint64_t v22 = a6;
  uint64_t v23 = a5;
  uint64_t v20 = a8;
  uint64_t v21 = a7;
  unint64_t v19 = 10;
  int v26 = &v19;
  uint64_t v10 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(this, &v19, (uint64_t)&std::piecewise_construct, &v26);
  uint64_t v11 = v10;
  uint64_t v13 = (uint64_t)(v10 + 5);
  uint64_t v12 = v10[5];
  uint64_t v14 = v10[6];
  uint64_t v15 = v12;
  if (v12 != v14)
  {
    while (*v15 != a2)
    {
      if (++v15 == v14)
      {
        uint64_t v15 = v10[6];
        break;
      }
    }
  }
  uint64_t v16 = v15 - v12;
  if (v15 == v14) {
    uint64_t v17 = -1;
  }
  else {
    uint64_t v17 = v16;
  }
  if (v17 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v10, (char **)v10 + 5, a2))
  {
    int v26 = (unint64_t *)ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)this, v13, a2);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v11 + 11, &v26, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v11 + 11, &v25, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v11 + 11, &v24, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v11 + 11, &v23, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v11 + 11, &v22, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v11 + 11, &v21, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)this, (unint64_t *)v11 + 11, &v20, 8);
    return v26;
  }
  return (unint64_t *)v17;
}

unint64_t *ShaderDebugger::Metadata::MDSerializer::serializeVariableTracepoint(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v18 = a4;
  uint64_t v19 = a3;
  unint64_t v17 = 7;
  uint64_t v20 = &v17;
  uint64_t v8 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v17, (uint64_t)&std::piecewise_construct, &v20);
  uint64_t v9 = v8;
  uint64_t v11 = (uint64_t)(v8 + 5);
  uint64_t v10 = v8[5];
  uint64_t v12 = v8[6];
  uint64_t v13 = v10;
  if (v10 != v12)
  {
    while (*v13 != a2)
    {
      if (++v13 == v12)
      {
        uint64_t v13 = v8[6];
        break;
      }
    }
  }
  uint64_t v14 = v13 - v10;
  if (v13 == v12) {
    uint64_t v15 = -1;
  }
  else {
    uint64_t v15 = v14;
  }
  if (v15 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v8, (char **)v8 + 5, a2))
  {
    uint64_t v20 = (unint64_t *)ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v11, a2);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v9 + 11, &v20, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v9 + 11, &v19, 8);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v9 + 11, &v18, 8);
    unint64_t v17 = a5;
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v9 + 11, &v17, 8);
    return v20;
  }
  return (unint64_t *)v15;
}

void ShaderDebugger::Metadata::MDSerializer::serializeVariableBase(int a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v16 = a5;
  uint64_t v17 = a3;
  uint64_t v15 = a6;
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v17, 8);
  uint64_t v11 = *(unsigned __int8 *)(a4 + 23);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a4 + 8);
  }
  uint64_t v18 = v11;
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v18, 8);
  int v12 = *(char *)(a4 + 23);
  if (v12 >= 0) {
    uint64_t v13 = (unsigned char *)a4;
  }
  else {
    uint64_t v13 = *(unsigned char **)a4;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v14 = *(void *)(a4 + 8);
  }
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, v13, v14);
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v16, 8);
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v15, 8);
  uint64_t v18 = a7;
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v18, 8);
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeLocalVariable(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  char v21 = a6;
  unint64_t v20 = 2;
  uint64_t v22 = &v20;
  uint64_t v11 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v20, (uint64_t)&std::piecewise_construct, &v22);
  int v12 = v11;
  uint64_t v14 = (uint64_t)(v11 + 5);
  uint64_t v13 = v11[5];
  uint64_t v15 = v11[6];
  uint64_t v16 = v13;
  if (v13 != v15)
  {
    while (*v16 != a2)
    {
      if (++v16 == v15)
      {
        uint64_t v16 = v11[6];
        break;
      }
    }
  }
  uint64_t v17 = v16 - v13;
  if (v16 == v15) {
    uint64_t v18 = -1;
  }
  else {
    uint64_t v18 = v17;
  }
  if (v18 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v11, (char **)v11 + 5, a2))
  {
    uint64_t v18 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v14, a2);
    ShaderDebugger::Metadata::MDSerializer::serializeVariableBase((int)a1, (unint64_t *)v12 + 11, v18, a3, a4, a5, 0);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v12 + 11, &v21, 1);
  }
  return v18;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeGlobalVariable(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v19 = 2;
  unint64_t v20 = &v19;
  uint64_t v10 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v19, (uint64_t)&std::piecewise_construct, &v20);
  uint64_t v11 = v10;
  uint64_t v13 = (uint64_t)(v10 + 5);
  int v12 = v10[5];
  uint64_t v14 = v10[6];
  uint64_t v15 = v12;
  if (v12 != v14)
  {
    while (*v15 != a2)
    {
      if (++v15 == v14)
      {
        uint64_t v15 = v10[6];
        break;
      }
    }
  }
  uint64_t v16 = v15 - v12;
  if (v15 == v14) {
    uint64_t v17 = -1;
  }
  else {
    uint64_t v17 = v16;
  }
  if (v17 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v10, (char **)v10 + 5, a2))
  {
    uint64_t v17 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v13, a2);
    ShaderDebugger::Metadata::MDSerializer::serializeVariableBase((int)a1, (unint64_t *)v11 + 11, v17, a3, a4, a5, 1);
  }
  return v17;
}

void ShaderDebugger::Metadata::MDSerializer::serializeTypeBase(int a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, uint64_t a10)
{
  uint64_t v20 = a5;
  uint64_t v21 = a3;
  uint64_t v18 = a7;
  uint64_t v19 = a6;
  uint64_t v17 = a8;
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v21, 8);
  uint64_t v13 = *(unsigned __int8 *)(a4 + 23);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(a4 + 8);
  }
  uint64_t v22 = v13;
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v22, 8);
  int v14 = *(char *)(a4 + 23);
  if (v14 >= 0) {
    uint64_t v15 = (unsigned char *)a4;
  }
  else {
    uint64_t v15 = *(unsigned char **)a4;
  }
  if (v14 >= 0) {
    uint64_t v16 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v16 = *(void *)(a4 + 8);
  }
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, v15, v16);
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v20, 8);
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v19, 8);
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v18, 8);
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v17, 8);
  uint64_t v22 = a9;
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v22, 8);
  uint64_t v22 = a10;
  ShaderDebugger::Metadata::MDSerializer::write(a1, a2, &v22, 8);
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeBasicType(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int16 a8, char a9)
{
  unint64_t v28 = 3;
  uint64_t v29 = &v28;
  uint64_t v17 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v28, (uint64_t)&std::piecewise_construct, &v29);
  uint64_t v18 = v17;
  uint64_t v20 = (uint64_t)(v17 + 5);
  uint64_t v19 = v17[5];
  uint64_t v21 = v17[6];
  uint64_t v27 = a3;
  if (v19 == v21)
  {
    unsigned __int16 v23 = a8;
    uint64_t v22 = v17[5];
  }
  else
  {
    uint64_t v22 = v17[5];
    while (*v22 != a2)
    {
      if (++v22 == v21)
      {
        unsigned __int16 v23 = a8;
        uint64_t v22 = v17[6];
        goto LABEL_8;
      }
    }
    unsigned __int16 v23 = a8;
  }
LABEL_8:
  uint64_t v24 = v22 - v19;
  if (v22 == v21) {
    uint64_t v25 = -1;
  }
  else {
    uint64_t v25 = v24;
  }
  if (v25 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v17, (char **)v17 + 5, a2))
  {
    uint64_t v25 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v20, a2);
    ShaderDebugger::Metadata::MDSerializer::serializeTypeBase((int)a1, (unint64_t *)v18 + 11, v25, v27, a4, a5, a6, a7, v23, 0);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v18 + 11, &a9, 4);
  }
  return v25;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeDerivedType(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int16 a8, char a9, int a10, unsigned int a11)
{
  unint64_t v31 = 3;
  uint64_t v32 = &v31;
  uint64_t v19 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v31, (uint64_t)&std::piecewise_construct, &v32);
  uint64_t v20 = v19;
  uint64_t v22 = (uint64_t)(v19 + 5);
  uint64_t v21 = v19[5];
  unsigned __int16 v23 = v19[6];
  uint64_t v30 = a3;
  uint64_t v24 = v21;
  if (v21 != v23)
  {
    while (*v24 != a2)
    {
      if (++v24 == v23)
      {
        uint64_t v24 = v19[6];
        break;
      }
    }
  }
  uint64_t v25 = v24 - v21;
  if (v24 == v23) {
    uint64_t v26 = -1;
  }
  else {
    uint64_t v26 = v25;
  }
  if (v26 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v19, (char **)v19 + 5, a2))
  {
    uint64_t v29 = (unint64_t *)a11;
    uint64_t v26 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v22, a2);
    uint64_t v27 = (unint64_t *)(v20 + 11);
    ShaderDebugger::Metadata::MDSerializer::serializeTypeBase((int)a1, v27, v26, v30, a4, a5, a6, a7, a8, 2);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, v27, &a9, 8);
    uint64_t v32 = v29;
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, v27, &v32, 8);
  }
  return v26;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeCompositeType(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int16 a8, char a9, uint64_t **a10)
{
  unint64_t v33 = 3;
  uint64_t v34 = (uint64_t)&v33;
  uint64_t v18 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v33, (uint64_t)&std::piecewise_construct, (void **)&v34);
  uint64_t v19 = v18;
  uint64_t v21 = (uint64_t)(v18 + 5);
  uint64_t v20 = v18[5];
  uint64_t v22 = v18[6];
  uint64_t v32 = a3;
  unsigned __int16 v23 = v20;
  if (v20 != v22)
  {
    while (*v23 != a2)
    {
      if (++v23 == v22)
      {
        unsigned __int16 v23 = v18[6];
        break;
      }
    }
  }
  uint64_t v24 = v23 - v20;
  if (v23 == v22) {
    uint64_t v25 = -1;
  }
  else {
    uint64_t v25 = v24;
  }
  if (v25 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v18, (char **)v18 + 5, a2))
  {
    uint64_t v31 = a7;
    uint64_t v26 = a10;
    uint64_t v25 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v21, a2);
    uint64_t v27 = (unint64_t *)(v19 + 11);
    ShaderDebugger::Metadata::MDSerializer::serializeTypeBase((int)a1, (unint64_t *)v19 + 11, v25, v32, a4, a5, a6, v31, a8, 1);
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v19 + 11, &a9, 8);
    uint64_t v34 = ((char *)v26[1] - (char *)*v26) >> 4;
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v19 + 11, &v34, 8);
    unint64_t v28 = *v26;
    uint64_t v29 = v26[1];
    while (v28 != v29)
    {
      uint64_t v34 = *v28;
      ShaderDebugger::Metadata::MDSerializer::write((int)a1, v27, &v34, 8);
      uint64_t v34 = v28[1];
      ShaderDebugger::Metadata::MDSerializer::write((int)a1, v27, &v34, 8);
      v28 += 2;
    }
  }
  return v25;
}

uint64_t ShaderDebugger::Metadata::MDSerializer::serializeSubroutineType(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int16 a8, uint64_t **a9)
{
  unint64_t v30 = 3;
  uint64_t v31 = (uint64_t)&v30;
  uint64_t v17 = std::__tree<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::__map_value_compare<ShaderDebugger::Metadata::MDBase::MetadataType,std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>,std::less<ShaderDebugger::Metadata::MDBase::MetadataType>,true>,std::allocator<std::__value_type<ShaderDebugger::Metadata::MDBase::MetadataType,ShaderDebugger::Metadata::MDSerializer::MetadataTypeContainer>>>::__emplace_unique_key_args<ShaderDebugger::Metadata::MDBase::MetadataType,std::piecewise_construct_t const&,std::tuple<ShaderDebugger::Metadata::MDBase::MetadataType&&>,std::tuple<>>(a1, &v30, (uint64_t)&std::piecewise_construct, (void **)&v31);
  uint64_t v18 = v17;
  uint64_t v20 = (uint64_t)(v17 + 5);
  uint64_t v19 = v17[5];
  uint64_t v21 = v17[6];
  uint64_t v29 = a3;
  uint64_t v22 = v19;
  if (v19 != v21)
  {
    while (*v22 != a2)
    {
      if (++v22 == v21)
      {
        uint64_t v22 = v17[6];
        break;
      }
    }
  }
  uint64_t v23 = v22 - v19;
  if (v22 == v21) {
    uint64_t v24 = -1;
  }
  else {
    uint64_t v24 = v23;
  }
  if (v24 == -1
    || ShaderDebugger::Metadata::MDSerializer::isMetadataIdReserved((uint64_t)v17, (char **)v17 + 5, a2))
  {
    uint64_t v24 = ShaderDebugger::Metadata::MDSerializer::addAndLinearizeMetadataId((uint64_t)a1, v20, a2);
    uint64_t v25 = (unint64_t *)(v18 + 11);
    ShaderDebugger::Metadata::MDSerializer::serializeTypeBase((int)a1, (unint64_t *)v18 + 11, v24, v29, a4, a5, a6, a7, a8, 3);
    uint64_t v31 = ((char *)a9[1] - (char *)*a9) >> 4;
    ShaderDebugger::Metadata::MDSerializer::write((int)a1, (unint64_t *)v18 + 11, &v31, 8);
    uint64_t v26 = *a9;
    uint64_t v27 = a9[1];
    while (v26 != v27)
    {
      uint64_t v31 = *v26;
      ShaderDebugger::Metadata::MDSerializer::write((int)a1, v25, &v31, 8);
      uint64_t v31 = v26[1];
      ShaderDebugger::Metadata::MDSerializer::write((int)a1, v25, &v31, 8);
      v26 += 2;
    }
  }
  return v24;
}

void ShaderDebugger::Metadata::MDSerializer::write(int a1, unint64_t *a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  unint64_t v7 = a2[2] - *a2;
  if (v7 < a4 - *a2 + a2[1]) {
    std::vector<unsigned char>::reserve(a2, (2 * v7) | 1);
  }
  if (v4)
  {
    uint64_t v8 = (unsigned char *)a2[1];
    do
    {
      unint64_t v9 = a2[2];
      if ((unint64_t)v8 >= v9)
      {
        unint64_t v11 = *a2;
        int v12 = &v8[-*a2];
        unint64_t v13 = (unint64_t)(v12 + 1);
        if ((uint64_t)(v12 + 1) < 0) {
          std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v14 = v9 - v11;
        if (2 * v14 > v13) {
          unint64_t v13 = 2 * v14;
        }
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v15 = v13;
        }
        if (v15) {
          uint64_t v16 = (char *)operator new(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v17 = &v12[(void)v16];
        uint64_t v18 = &v12[(void)v16];
        *uint64_t v18 = *a3;
        uint64_t v10 = v18 + 1;
        if (v8 != (unsigned char *)v11)
        {
          uint64_t v19 = &v8[~v11];
          do
          {
            char v20 = *--v8;
            (v19--)[(void)v16] = v20;
          }
          while (v8 != (unsigned char *)v11);
          uint64_t v8 = (unsigned char *)*a2;
          uint64_t v17 = v16;
        }
        *a2 = (unint64_t)v17;
        a2[1] = (unint64_t)v10;
        a2[2] = (unint64_t)&v16[v15];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        unsigned char *v8 = *a3;
        uint64_t v10 = v8 + 1;
      }
      ++a3;
      a2[1] = (unint64_t)v10;
      uint64_t v8 = v10;
      --v4;
    }
    while (v4);
  }
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (char *)a1[1];
    unint64_t v6 = operator new(__sz);
    unint64_t v7 = &v5[(void)v6 - v2];
    uint64_t v8 = v7;
    if (v5 != (char *)v2)
    {
      unint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      uint64_t v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  char v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  int8x8_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v6 = a5;
  uint8x8_t v7 = __src;
  char v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    unint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<std::pair<ShaderDebugger::Metadata::MDBase::MetadataType,unsigned long long>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      uint64_t v16 = operator new(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v26 = &v13[(void)v16];
    uint64_t v27 = &v13[(void)v16 + v6];
    unint64_t v28 = v26;
    do
    {
      char v29 = *v7++;
      *v28++ = v29;
      --v6;
    }
    while (v6);
    unint64_t v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      uint64_t v32 = v26;
    }
    else
    {
      uint64_t v31 = v5;
      uint64_t v32 = v26;
      do
      {
        char v33 = *--v31;
        *--uint64_t v32 = v33;
      }
      while (v31 != v30);
      char v10 = *(char **)(a1 + 8);
    }
    uint64_t v34 = (char *)v16 + v15;
    if (v10 != v5) {
      memmove(v27, v5, v10 - v5);
    }
    uint64_t v35 = *(char **)a1;
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = &v27[v10 - v5];
    *(void *)(a1 + 16) = v34;
    if (v35) {
      operator delete(v35);
    }
    return v26;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    uint64_t v18 = &__src[a5];
    char v20 = *(char **)(a1 + 8);
LABEL_17:
    uint64_t v21 = &v5[v6];
    uint64_t v22 = &v20[-v6];
    uint64_t v23 = v20;
    if (&v20[-v6] < v10)
    {
      int64_t v24 = &v10[v6] - v20;
      uint64_t v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v5[v6], v5, v20 - v21);
    }
    if (v18 != v7) {
      memmove(v5, v7, v18 - v7);
    }
    return v5;
  }
  uint64_t v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  char v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void std::vector<BOOL>::__throw_out_of_range[abi:ne180100]()
{
}

void sub_24F71BC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_24F71BF18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F71BFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  unint64_t v11 = v10;

  a9.super_class = (Class)DYReplayController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_24F71C234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_24F71C2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F71C4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F71C6D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void sub_24F71CA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F71CBF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F71CDE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F71E3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_24F71E914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F71E9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F71EA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F71EAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F71ED60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_24F71EFB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F71F060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F71F338(_Unwind_Exception *a1)
{
  uint64_t v6 = v3;

  _Unwind_Resume(a1);
}

void sub_24F71F4F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F71F650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_24F71F8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_24F71FA2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F71FB98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F71FC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_24F71FD54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::deque<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::~deque[abi:ne180100](void *a1)
{
  unint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 >> 9];
    uint8x8_t v7 = (void **)((char *)*v6 + 8 * (v5 & 0x1FF));
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != (void **)v8)
    {
      do
      {
        uint64_t v9 = *v7++;

        if ((char *)v7 - (unsigned char *)*v6 == 4096)
        {
          char v10 = (void **)v6[1];
          ++v6;
          uint8x8_t v7 = v10;
        }
      }
      while (v7 != (void **)v8);
      unint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 256;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_16;
    }
    uint64_t v13 = 512;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    unint64_t v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::deque<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = ((v5 - v4) << 6) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = (uint64_t *)(*(void *)(v4 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF));
  }
  uint64_t result = MEMORY[0x253362820](*a2);
  uint64_t *v8 = result;
  ++a1[5];
  return result;
}

void std::deque<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      std::string::size_type v37 = &v34[8 * v36];
      std::string::size_type v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    int64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)>>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      std::string::size_type v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        std::string v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)std::string v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      std::string::size_type v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)> &>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)> &>::push_front((uint64_t)&v54, v27);
  }
  char v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_24F72041C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)>>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      int64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)>>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)> &>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<void({block_pointer} {__strong}*)(void),std::allocator<void({block_pointer} {__strong}*)(void)> &>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::pop_front(int64x2_t *a1)
{
  objc_release(*(id *)(*(void *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (a1[2].i64[0] & 0x1FF)));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_24F732180);
  return std::deque<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<void({block_pointer} {__strong})(void),std::allocator<void({block_pointer} {__strong})(void)>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

void std::__sort_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,PatchingRequest *>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PerBufferPatchingRequest>>>::~__hash_table(a1);
  JUMPOUT(0x2533623E0);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x270ED7B28](data, *(void *)&len, md);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x270EE42F0](allocator, values, numValues, callBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x270EE5488](alloc, uuid);
}

uint64_t DYDictionaryFromError()
{
  return MEMORY[0x270F2DBD8]();
}

uint64_t DYGetGlobalClientTransport()
{
  return MEMORY[0x270F2DC08]();
}

uint64_t DYGetGlobalTransportSource()
{
  return MEMORY[0x270F2DC10]();
}

uint64_t DYGetInterposeVersion()
{
  return MEMORY[0x270F2DC20]();
}

uint64_t DYHarvesterGetData()
{
  return MEMORY[0x270F2DBA0]();
}

uint64_t DYHarvesterGetDataSize()
{
  return MEMORY[0x270F2DBA8]();
}

uint64_t DYHarvesterGetMetadata()
{
  return MEMORY[0x270F2DBB0]();
}

uint64_t DYHarvesterGetOffset()
{
  return MEMORY[0x270F2DBB8]();
}

uint64_t DYIOSurfaceUtilsPlaneCount()
{
  return MEMORY[0x270F2DC30]();
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x270EF4C28](properties);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4C50](buffer);
}

void *__cdecl IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return (void *)MEMORY[0x270EF4C80](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerElementOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4CA8](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4CC0](buffer, planeIndex);
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4D58](buffer, planeIndex);
}

size_t IOSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D88](buffer);
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x270EF4DF0](buffer, planeIndex);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x270EF4E18](buffer, *(void *)&options, seed);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x270EF4E88](buffer, *(void *)&options, seed);
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x270EF5E18]();
}

uint64_t MTLPixelFormatGetInfoForDevice()
{
  return MEMORY[0x270EF5EE8]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x270EF2A50](aClassName);
}

void NSLog(NSString *format, ...)
{
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x270EF2BE8](aSelectorName);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x270EF2C48]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _DYOLog()
{
  return MEMORY[0x270F2DC70]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t llvm::LLVMContext::LLVMContext(llvm::LLVMContext *this)
{
  return MEMORY[0x270F93338](this);
}

void llvm::LLVMContext::~LLVMContext(llvm::LLVMContext *this)
{
}

uint64_t llvm::DIExpression::getFragmentInfo()
{
  return MEMORY[0x270F93568]();
}

uint64_t llvm::MemoryBuffer::getMemBuffer()
{
  return MEMORY[0x270F935F8]();
}

uint64_t llvm::DebugInfoFinder::processModule()
{
  return MEMORY[0x270F93980]();
}

void llvm::Module::~Module(llvm::Module *this)
{
}

uint64_t llvm::parseIR()
{
  return MEMORY[0x270F94F48]();
}

uint64_t GPUTools::FB::VAListArgumentProvider::VAListArgumentProvider(GPUTools::FB::VAListArgumentProvider *this, char *a2)
{
  return MEMORY[0x270F2DC90](this, a2);
}

void GPUTools::FB::VAListArgumentProvider::~VAListArgumentProvider(GPUTools::FB::VAListArgumentProvider *this)
{
}

uint64_t GPUTools::FB::Encode()
{
  return MEMORY[0x270F2DCA0]();
}

uint64_t GPUTools::FB::Stream::Write_nolock()
{
  return MEMORY[0x270F2DCA8]();
}

uint64_t GPUTools::FB::Stream::Open(GPUTools::FB::Stream *this, const __CFString *a2)
{
  return MEMORY[0x270F2DCB0](this, a2);
}

uint64_t GPUTools::FB::Stream::Close(GPUTools::FB::Stream *this)
{
  return MEMORY[0x270F2DCB8](this);
}

uint64_t GPUTools::FB::Stream::Stream(GPUTools::FB::Stream *this, __CFData *a2)
{
  return MEMORY[0x270F2DCC0](this, a2);
}

void GPUTools::FB::Stream::~Stream(GPUTools::FB::Stream *this)
{
}

uint64_t GPUTools::MTL::CaptureHelper::SaveObject()
{
  return MEMORY[0x270F49528]();
}

{
  return MEMORY[0x270F49530]();
}

uint64_t GPUTools::MTL::CaptureHelper::CaptureHelper(GPUTools::MTL::CaptureHelper *this)
{
  return MEMORY[0x270F49538](this);
}

void GPUTools::MTL::CaptureHelper::~CaptureHelper(GPUTools::MTL::CaptureHelper *this)
{
}

uint64_t GPUTools::MTL::IsFuncEnumDrawCall(GPUTools::MTL *this)
{
  return MEMORY[0x270F49548](this);
}

uint64_t GPUTools::MTL::IsFuncEnumTileCall(GPUTools::MTL *this)
{
  return MEMORY[0x270F49550](this);
}

uint64_t GPUTools::MTL::IsFuncEnumSampleCall(GPUTools::MTL *this)
{
  return MEMORY[0x270F49558](this);
}

uint64_t GPUTools::MTL::IsFuncEnumComputeCall(GPUTools::MTL *this)
{
  return MEMORY[0x270F49560](this);
}

uint64_t GPUTools::MTL::IsFuncEnumEndEncoding(GPUTools::MTL *this)
{
  return MEMORY[0x270F49568](this);
}

uint64_t GPUTools::MTL::GetFuncEnumReceiverType(GPUTools::MTL *this)
{
  return MEMORY[0x270F49570](this);
}

uint64_t GPUTools::MTL::IsFuncEnumGPUCommandCall(GPUTools::MTL *this)
{
  return MEMORY[0x270F49578](this);
}

uint64_t GPUTools::MTL::IsFuncEnumSampledBlitCall(GPUTools::MTL *this)
{
  return MEMORY[0x270F49580](this);
}

uint64_t GPUTools::MTL::IsFuncEnumSampledBlitCallAGX(GPUTools::MTL *this)
{
  return MEMORY[0x270F49588](this);
}

uint64_t GPUTools::MTL::IsFuncEnumCreateCommandBuffer(GPUTools::MTL *this)
{
  return MEMORY[0x270F49590](this);
}

uint64_t GPUTools::MTL::IsFuncEnumIndirectExecuteCall(GPUTools::MTL *this)
{
  return MEMORY[0x270F49598](this);
}

uint64_t GPUTools::MTL::IsFuncEnumIndirectExecuteDrawCall(GPUTools::MTL *this)
{
  return MEMORY[0x270F495A0](this);
}

uint64_t GPUTools::MTL::IsFuncEnumIndirectExecuteComputeCall(GPUTools::MTL *this)
{
  return MEMORY[0x270F495A8](this);
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLDeviceDescriptor(GPUTools::MTL::Utils *this, const void *a2, GPUTools::MTL::Utils::DYMTLDeviceDescriptor *a3)
{
  return MEMORY[0x270F495B0](this, a2, a3);
}

uint64_t GPUTools::MTL::Utils::IsIndirectCommandBufferRender()
{
  return MEMORY[0x270F495B8]();
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLRenderPassDescriptor(GPUTools::MTL::Utils *this, const void *a2, DYMTLRenderPassDescriptor *a3)
{
  return MEMORY[0x270F495C0](this, a2, a3);
}

uint64_t GPUTools::MTL::Utils::IsIndirectCommandBufferCompute()
{
  return MEMORY[0x270F495C8]();
}

uint64_t GPUTools::MTL::Utils::EnumerateValidAttachmentsForType()
{
  return MEMORY[0x270F495D0]();
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLMutableBufferAncestorMaps()
{
  return MEMORY[0x270F495D8]();
}

uint64_t GPUTools::MTL::Utils::MakeDYMTLIndirectArgumentBufferInfos()
{
  return MEMORY[0x270F495E0]();
}

uint64_t llvm::DISubrange::getLowerBound(llvm::DISubrange *this)
{
  return MEMORY[0x270F954C0](this);
}

uint64_t llvm::DISubrange::getCount(llvm::DISubrange *this)
{
  return MEMORY[0x270F954C8](this);
}

uint64_t llvm::NamedMDNode::getOperand(llvm::NamedMDNode *this)
{
  return MEMORY[0x270F95630](this);
}

uint64_t llvm::NamedMDNode::getNumOperands(llvm::NamedMDNode *this)
{
  return MEMORY[0x270F95638](this);
}

uint64_t llvm::DILocalScope::getSubprogram(llvm::DILocalScope *this)
{
  return MEMORY[0x270F956E8](this);
}

uint64_t llvm::MemoryBuffer::getMemBufferRef(llvm::MemoryBuffer *this)
{
  return MEMORY[0x270F95700](this);
}

uint64_t llvm::DINode::getTag(llvm::DINode *this)
{
  return MEMORY[0x270F95BB8](this);
}

uint64_t llvm::Module::getNamedMetadata()
{
  return MEMORY[0x270F95C00]();
}

uint64_t llvm::Module::getGlobalVariable()
{
  return MEMORY[0x270F95C08]();
}

uint64_t llvm::MDString::getString(llvm::MDString *this)
{
  return MEMORY[0x270F95E98](this);
}

uint64_t GPUTools::FD::Argument::ViewAsGLObjectName(GPUTools::FD::Argument *this)
{
  return MEMORY[0x270F2DD40](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x270F98548](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>()
{
  return MEMORY[0x270F98C10]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

const char *__cdecl _dyld_get_image_name(uint32_t image_index)
{
  return (const char *)MEMORY[0x270ED7F60](*(void *)&image_index);
}

uint32_t _dyld_image_count(void)
{
  return MEMORY[0x270ED7F98]();
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x270ED92D0](buffer, size, queue, destructor);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x270ED9378](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

uint64_t dy_abort()
{
  return MEMORY[0x270F2DD48]();
}

void free(void *a1)
{
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x270EDA598](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x270EDA5F8](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x270F9A648](object, key);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x270F9A688](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x270F9A9F8](location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9AA38](a1);
}

const char *__cdecl object_getClassName(id a1)
{
  return (const char *)MEMORY[0x270F9AA48](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

SEL sel_getUid(const char *str)
{
  return (SEL)MEMORY[0x270F9AAE8](str);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x270EDB6A0](__s1, __s2);
}